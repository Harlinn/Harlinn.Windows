using System;
using System.Diagnostics.CodeAnalysis;
using System.IO;

using Harlinn.Common.Core.Net;
using Harlinn.Common.Core.Net.Data;
using Harlinn.Common.Core.Net.IO;
namespace Barrelman.Data.Types
{
    public class AircraftTypeObject : BaseDataGuid<Kind>
    {
        long _rowVersion = 0;
        string _name = string.Empty;
        public AircraftTypeObject( )
        {
        }

        public AircraftTypeObject( ObjectState objectState, Guid id, long rowVersion, string name )
            : base( objectState, id )
        {
            _rowVersion = rowVersion;
            _name = name;
        }

        public override Kind GetObjectType()
        {
            return Kind.AircraftType;
        }

        public override BaseData<Kind> Create()
        {
            return new AircraftTypeObject( );
        }

        public override void AssignTo( BaseData<Kind> target )
        {
            base.AssignTo( target );
            var destination = ( AircraftTypeObject )target;
            destination._rowVersion = _rowVersion;
            destination._name = _name;
        }

        public override bool Equals(BaseData<Kind>? other)
        {
            if (base.Equals(other))
            {
                var obj = ( AircraftTypeObject )other;
                if( obj._rowVersion != _rowVersion )
                {
                    return false;
                }
                if( obj._name != _name )
                {
                    return false;
                }
                return true;
            }
            return false;
        }

        public override bool IsOfType(Kind objectType)
        {
            if( objectType == Kind.AircraftType )
            {
                return true;
            }
            return base.IsOfType( objectType );
        }

        public long RowVersion
        {
            get => _rowVersion;
            set
            {
                if( _rowVersion != value )
                {
                    _rowVersion = value;
                    OnPropertyChanged( );
                }
            }
        }
        public string Name
        {
            get => _name;
            set
            {
                if( _name != value )
                {
                    _name = value;
                    OnPropertyChanged( );
                }
            }
        }

        public override void WriteTo( [ DisallowNull ] BinaryWriter destination )
        {
            base.WriteTo( destination );
            destination.Write( _rowVersion );
            destination.Write( _name );
        }

        public override void ReadFrom([DisallowNull] BinaryReader source)
        {
            base.ReadFrom( source );
            _rowVersion = source.ReadInt64( );
            _name = source.ReadString( );
        }

    }
    public class AisDeviceCommandObject : BaseDataGuid<Kind>
    {
        long _rowVersion = 0;
        Guid _aisDevice;
        DateTime _timestamp;
        Types.DeviceCommandSourceType _deviceCommandSourceType = Types.DeviceCommandSourceType.Unknown;
        Guid _deviceCommandSourceId;
        Guid? _reply;
        public AisDeviceCommandObject( )
        {
        }

        public AisDeviceCommandObject( ObjectState objectState, Guid id, long rowVersion, Guid aisDevice, DateTime timestamp, Types.DeviceCommandSourceType deviceCommandSourceType, Guid deviceCommandSourceId, Guid? reply )
            : base( objectState, id )
        {
            _rowVersion = rowVersion;
            _aisDevice = aisDevice;
            _timestamp = timestamp;
            _deviceCommandSourceType = deviceCommandSourceType;
            _deviceCommandSourceId = deviceCommandSourceId;
            _reply = reply;
        }

        public override Kind GetObjectType()
        {
            return Kind.AisDeviceCommand;
        }

        public override BaseData<Kind> Create()
        {
            return new AisDeviceCommandObject( );
        }

        public override void AssignTo( BaseData<Kind> target )
        {
            base.AssignTo( target );
            var destination = ( AisDeviceCommandObject )target;
            destination._rowVersion = _rowVersion;
            destination._aisDevice = _aisDevice;
            destination._timestamp = _timestamp;
            destination._deviceCommandSourceType = _deviceCommandSourceType;
            destination._deviceCommandSourceId = _deviceCommandSourceId;
            destination._reply = _reply;
        }

        public override bool Equals(BaseData<Kind>? other)
        {
            if (base.Equals(other))
            {
                var obj = ( AisDeviceCommandObject )other;
                if( obj._rowVersion != _rowVersion )
                {
                    return false;
                }
                if( obj._aisDevice != _aisDevice )
                {
                    return false;
                }
                if( obj._timestamp != _timestamp )
                {
                    return false;
                }
                if( obj._deviceCommandSourceType != _deviceCommandSourceType )
                {
                    return false;
                }
                if( obj._deviceCommandSourceId != _deviceCommandSourceId )
                {
                    return false;
                }
                if( obj._reply != _reply )
                {
                    return false;
                }
                return true;
            }
            return false;
        }

        public override bool IsOfType(Kind objectType)
        {
            if( objectType == Kind.AisDeviceCommand )
            {
                return true;
            }
            return base.IsOfType( objectType );
        }

        public long RowVersion
        {
            get => _rowVersion;
            set
            {
                if( _rowVersion != value )
                {
                    _rowVersion = value;
                    OnPropertyChanged( );
                }
            }
        }
        public Guid AisDevice
        {
            get => _aisDevice;
            set
            {
                if( _aisDevice != value )
                {
                    _aisDevice = value;
                    OnPropertyChanged( );
                }
            }
        }
        public DateTime Timestamp
        {
            get => _timestamp;
            set
            {
                if( _timestamp != value )
                {
                    _timestamp = value;
                    OnPropertyChanged( );
                }
            }
        }
        public Types.DeviceCommandSourceType DeviceCommandSourceType
        {
            get => _deviceCommandSourceType;
            set
            {
                if( _deviceCommandSourceType != value )
                {
                    _deviceCommandSourceType = value;
                    OnPropertyChanged( );
                }
            }
        }
        public Guid DeviceCommandSourceId
        {
            get => _deviceCommandSourceId;
            set
            {
                if( _deviceCommandSourceId != value )
                {
                    _deviceCommandSourceId = value;
                    OnPropertyChanged( );
                }
            }
        }
        public Guid? Reply
        {
            get => _reply;
            set
            {
                if( _reply != value )
                {
                    _reply = value;
                    OnPropertyChanged( );
                }
            }
        }

        public override void WriteTo( [ DisallowNull ] BinaryWriter destination )
        {
            base.WriteTo( destination );
            destination.Write( _rowVersion );
            destination.Write( _aisDevice );
            destination.Write( _timestamp );
            destination.Write( _deviceCommandSourceType );
            destination.Write( _deviceCommandSourceId );
            destination.Write( _reply );
        }

        public override void ReadFrom([DisallowNull] BinaryReader source)
        {
            base.ReadFrom( source );
            _rowVersion = source.ReadInt64( );
            _aisDevice = source.ReadGuid( );
            _timestamp = source.ReadDateTime( );
            _deviceCommandSourceType = source.ReadEnum<Types.DeviceCommandSourceType>( );
            _deviceCommandSourceId = source.ReadGuid( );
            _reply = source.ReadNullableGuid( );
        }

    }
    public class AisDeviceCommandReplyObject : BaseDataGuid<Kind>
    {
        long _rowVersion = 0;
        Guid _aisDevice;
        DateTime _timestamp;
        Guid _command;
        Types.DeviceCommandReplyStatus _status = Types.DeviceCommandReplyStatus.Unknown;
        string _message = string.Empty;
        public AisDeviceCommandReplyObject( )
        {
        }

        public AisDeviceCommandReplyObject( ObjectState objectState, Guid id, long rowVersion, Guid aisDevice, DateTime timestamp, Guid command, Types.DeviceCommandReplyStatus status, string message )
            : base( objectState, id )
        {
            _rowVersion = rowVersion;
            _aisDevice = aisDevice;
            _timestamp = timestamp;
            _command = command;
            _status = status;
            _message = message;
        }

        public override Kind GetObjectType()
        {
            return Kind.AisDeviceCommandReply;
        }

        public override BaseData<Kind> Create()
        {
            return new AisDeviceCommandReplyObject( );
        }

        public override void AssignTo( BaseData<Kind> target )
        {
            base.AssignTo( target );
            var destination = ( AisDeviceCommandReplyObject )target;
            destination._rowVersion = _rowVersion;
            destination._aisDevice = _aisDevice;
            destination._timestamp = _timestamp;
            destination._command = _command;
            destination._status = _status;
            destination._message = _message;
        }

        public override bool Equals(BaseData<Kind>? other)
        {
            if (base.Equals(other))
            {
                var obj = ( AisDeviceCommandReplyObject )other;
                if( obj._rowVersion != _rowVersion )
                {
                    return false;
                }
                if( obj._aisDevice != _aisDevice )
                {
                    return false;
                }
                if( obj._timestamp != _timestamp )
                {
                    return false;
                }
                if( obj._command != _command )
                {
                    return false;
                }
                if( obj._status != _status )
                {
                    return false;
                }
                if( obj._message != _message )
                {
                    return false;
                }
                return true;
            }
            return false;
        }

        public override bool IsOfType(Kind objectType)
        {
            if( objectType == Kind.AisDeviceCommandReply )
            {
                return true;
            }
            return base.IsOfType( objectType );
        }

        public long RowVersion
        {
            get => _rowVersion;
            set
            {
                if( _rowVersion != value )
                {
                    _rowVersion = value;
                    OnPropertyChanged( );
                }
            }
        }
        public Guid AisDevice
        {
            get => _aisDevice;
            set
            {
                if( _aisDevice != value )
                {
                    _aisDevice = value;
                    OnPropertyChanged( );
                }
            }
        }
        public DateTime Timestamp
        {
            get => _timestamp;
            set
            {
                if( _timestamp != value )
                {
                    _timestamp = value;
                    OnPropertyChanged( );
                }
            }
        }
        public Guid Command
        {
            get => _command;
            set
            {
                if( _command != value )
                {
                    _command = value;
                    OnPropertyChanged( );
                }
            }
        }
        public Types.DeviceCommandReplyStatus Status
        {
            get => _status;
            set
            {
                if( _status != value )
                {
                    _status = value;
                    OnPropertyChanged( );
                }
            }
        }
        public string Message
        {
            get => _message;
            set
            {
                if( _message != value )
                {
                    _message = value;
                    OnPropertyChanged( );
                }
            }
        }

        public override void WriteTo( [ DisallowNull ] BinaryWriter destination )
        {
            base.WriteTo( destination );
            destination.Write( _rowVersion );
            destination.Write( _aisDevice );
            destination.Write( _timestamp );
            destination.Write( _command );
            destination.Write( _status );
            destination.Write( _message );
        }

        public override void ReadFrom([DisallowNull] BinaryReader source)
        {
            base.ReadFrom( source );
            _rowVersion = source.ReadInt64( );
            _aisDevice = source.ReadGuid( );
            _timestamp = source.ReadDateTime( );
            _command = source.ReadGuid( );
            _status = source.ReadEnum<Types.DeviceCommandReplyStatus>( );
            _message = source.ReadString( );
        }

    }
    public class AisDeviceConfigurationObject : BaseDataGuid<Kind>
    {
        long _rowVersion = 0;
        Guid _aisDevice;
        DateTime _timestamp;
        bool _filter = false;
        double _northWestLatitude = 0.0;
        double _northWestLongitude = 0.0;
        double _southEastLatitude = 0.0;
        double _southEastLongitude = 0.0;
        string _comPort = string.Empty;
        int _baudRate = 0;
        string _iPAddress = string.Empty;
        int _port = 0;
        int _udpPort = 0;
        bool _authenticate = false;
        string _userName = string.Empty;
        string _password = string.Empty;
        string _authenticationURL = string.Empty;
        Types.AisDeviceConnectionType _connectionType = Types.AisDeviceConnectionType.Unknown;
        int _sourceUpdateRate = 0;
        string _configurationURL = string.Empty;
        bool _storeReceivedSentences = false;
        public AisDeviceConfigurationObject( )
        {
        }

        public AisDeviceConfigurationObject( ObjectState objectState, Guid id, long rowVersion, Guid aisDevice, DateTime timestamp, bool filter, double northWestLatitude, double northWestLongitude, double southEastLatitude, double southEastLongitude, string comPort, int baudRate, string iPAddress, int port, int udpPort, bool authenticate, string userName, string password, string authenticationURL, Types.AisDeviceConnectionType connectionType, int sourceUpdateRate, string configurationURL, bool storeReceivedSentences )
            : base( objectState, id )
        {
            _rowVersion = rowVersion;
            _aisDevice = aisDevice;
            _timestamp = timestamp;
            _filter = filter;
            _northWestLatitude = northWestLatitude;
            _northWestLongitude = northWestLongitude;
            _southEastLatitude = southEastLatitude;
            _southEastLongitude = southEastLongitude;
            _comPort = comPort;
            _baudRate = baudRate;
            _iPAddress = iPAddress;
            _port = port;
            _udpPort = udpPort;
            _authenticate = authenticate;
            _userName = userName;
            _password = password;
            _authenticationURL = authenticationURL;
            _connectionType = connectionType;
            _sourceUpdateRate = sourceUpdateRate;
            _configurationURL = configurationURL;
            _storeReceivedSentences = storeReceivedSentences;
        }

        public override Kind GetObjectType()
        {
            return Kind.AisDeviceConfiguration;
        }

        public override BaseData<Kind> Create()
        {
            return new AisDeviceConfigurationObject( );
        }

        public override void AssignTo( BaseData<Kind> target )
        {
            base.AssignTo( target );
            var destination = ( AisDeviceConfigurationObject )target;
            destination._rowVersion = _rowVersion;
            destination._aisDevice = _aisDevice;
            destination._timestamp = _timestamp;
            destination._filter = _filter;
            destination._northWestLatitude = _northWestLatitude;
            destination._northWestLongitude = _northWestLongitude;
            destination._southEastLatitude = _southEastLatitude;
            destination._southEastLongitude = _southEastLongitude;
            destination._comPort = _comPort;
            destination._baudRate = _baudRate;
            destination._iPAddress = _iPAddress;
            destination._port = _port;
            destination._udpPort = _udpPort;
            destination._authenticate = _authenticate;
            destination._userName = _userName;
            destination._password = _password;
            destination._authenticationURL = _authenticationURL;
            destination._connectionType = _connectionType;
            destination._sourceUpdateRate = _sourceUpdateRate;
            destination._configurationURL = _configurationURL;
            destination._storeReceivedSentences = _storeReceivedSentences;
        }

        public override bool Equals(BaseData<Kind>? other)
        {
            if (base.Equals(other))
            {
                var obj = ( AisDeviceConfigurationObject )other;
                if( obj._rowVersion != _rowVersion )
                {
                    return false;
                }
                if( obj._aisDevice != _aisDevice )
                {
                    return false;
                }
                if( obj._timestamp != _timestamp )
                {
                    return false;
                }
                if( obj._filter != _filter )
                {
                    return false;
                }
                if( obj._northWestLatitude != _northWestLatitude )
                {
                    return false;
                }
                if( obj._northWestLongitude != _northWestLongitude )
                {
                    return false;
                }
                if( obj._southEastLatitude != _southEastLatitude )
                {
                    return false;
                }
                if( obj._southEastLongitude != _southEastLongitude )
                {
                    return false;
                }
                if( obj._comPort != _comPort )
                {
                    return false;
                }
                if( obj._baudRate != _baudRate )
                {
                    return false;
                }
                if( obj._iPAddress != _iPAddress )
                {
                    return false;
                }
                if( obj._port != _port )
                {
                    return false;
                }
                if( obj._udpPort != _udpPort )
                {
                    return false;
                }
                if( obj._authenticate != _authenticate )
                {
                    return false;
                }
                if( obj._userName != _userName )
                {
                    return false;
                }
                if( obj._password != _password )
                {
                    return false;
                }
                if( obj._authenticationURL != _authenticationURL )
                {
                    return false;
                }
                if( obj._connectionType != _connectionType )
                {
                    return false;
                }
                if( obj._sourceUpdateRate != _sourceUpdateRate )
                {
                    return false;
                }
                if( obj._configurationURL != _configurationURL )
                {
                    return false;
                }
                if( obj._storeReceivedSentences != _storeReceivedSentences )
                {
                    return false;
                }
                return true;
            }
            return false;
        }

        public override bool IsOfType(Kind objectType)
        {
            if( objectType == Kind.AisDeviceConfiguration )
            {
                return true;
            }
            return base.IsOfType( objectType );
        }

        public long RowVersion
        {
            get => _rowVersion;
            set
            {
                if( _rowVersion != value )
                {
                    _rowVersion = value;
                    OnPropertyChanged( );
                }
            }
        }
        public Guid AisDevice
        {
            get => _aisDevice;
            set
            {
                if( _aisDevice != value )
                {
                    _aisDevice = value;
                    OnPropertyChanged( );
                }
            }
        }
        public DateTime Timestamp
        {
            get => _timestamp;
            set
            {
                if( _timestamp != value )
                {
                    _timestamp = value;
                    OnPropertyChanged( );
                }
            }
        }
        public bool Filter
        {
            get => _filter;
            set
            {
                if( _filter != value )
                {
                    _filter = value;
                    OnPropertyChanged( );
                }
            }
        }
        public double NorthWestLatitude
        {
            get => _northWestLatitude;
            set
            {
                if( _northWestLatitude != value )
                {
                    _northWestLatitude = value;
                    OnPropertyChanged( );
                }
            }
        }
        public double NorthWestLongitude
        {
            get => _northWestLongitude;
            set
            {
                if( _northWestLongitude != value )
                {
                    _northWestLongitude = value;
                    OnPropertyChanged( );
                }
            }
        }
        public double SouthEastLatitude
        {
            get => _southEastLatitude;
            set
            {
                if( _southEastLatitude != value )
                {
                    _southEastLatitude = value;
                    OnPropertyChanged( );
                }
            }
        }
        public double SouthEastLongitude
        {
            get => _southEastLongitude;
            set
            {
                if( _southEastLongitude != value )
                {
                    _southEastLongitude = value;
                    OnPropertyChanged( );
                }
            }
        }
        public string ComPort
        {
            get => _comPort;
            set
            {
                if( _comPort != value )
                {
                    _comPort = value;
                    OnPropertyChanged( );
                }
            }
        }
        public int BaudRate
        {
            get => _baudRate;
            set
            {
                if( _baudRate != value )
                {
                    _baudRate = value;
                    OnPropertyChanged( );
                }
            }
        }
        public string IPAddress
        {
            get => _iPAddress;
            set
            {
                if( _iPAddress != value )
                {
                    _iPAddress = value;
                    OnPropertyChanged( );
                }
            }
        }
        public int Port
        {
            get => _port;
            set
            {
                if( _port != value )
                {
                    _port = value;
                    OnPropertyChanged( );
                }
            }
        }
        public int UdpPort
        {
            get => _udpPort;
            set
            {
                if( _udpPort != value )
                {
                    _udpPort = value;
                    OnPropertyChanged( );
                }
            }
        }
        public bool Authenticate
        {
            get => _authenticate;
            set
            {
                if( _authenticate != value )
                {
                    _authenticate = value;
                    OnPropertyChanged( );
                }
            }
        }
        public string UserName
        {
            get => _userName;
            set
            {
                if( _userName != value )
                {
                    _userName = value;
                    OnPropertyChanged( );
                }
            }
        }
        public string Password
        {
            get => _password;
            set
            {
                if( _password != value )
                {
                    _password = value;
                    OnPropertyChanged( );
                }
            }
        }
        public string AuthenticationURL
        {
            get => _authenticationURL;
            set
            {
                if( _authenticationURL != value )
                {
                    _authenticationURL = value;
                    OnPropertyChanged( );
                }
            }
        }
        public Types.AisDeviceConnectionType ConnectionType
        {
            get => _connectionType;
            set
            {
                if( _connectionType != value )
                {
                    _connectionType = value;
                    OnPropertyChanged( );
                }
            }
        }
        public int SourceUpdateRate
        {
            get => _sourceUpdateRate;
            set
            {
                if( _sourceUpdateRate != value )
                {
                    _sourceUpdateRate = value;
                    OnPropertyChanged( );
                }
            }
        }
        public string ConfigurationURL
        {
            get => _configurationURL;
            set
            {
                if( _configurationURL != value )
                {
                    _configurationURL = value;
                    OnPropertyChanged( );
                }
            }
        }
        public bool StoreReceivedSentences
        {
            get => _storeReceivedSentences;
            set
            {
                if( _storeReceivedSentences != value )
                {
                    _storeReceivedSentences = value;
                    OnPropertyChanged( );
                }
            }
        }

        public override void WriteTo( [ DisallowNull ] BinaryWriter destination )
        {
            base.WriteTo( destination );
            destination.Write( _rowVersion );
            destination.Write( _aisDevice );
            destination.Write( _timestamp );
            destination.Write( _filter );
            destination.Write( _northWestLatitude );
            destination.Write( _northWestLongitude );
            destination.Write( _southEastLatitude );
            destination.Write( _southEastLongitude );
            destination.Write( _comPort );
            destination.Write( _baudRate );
            destination.Write( _iPAddress );
            destination.Write( _port );
            destination.Write( _udpPort );
            destination.Write( _authenticate );
            destination.Write( _userName );
            destination.Write( _password );
            destination.Write( _authenticationURL );
            destination.Write( _connectionType );
            destination.Write( _sourceUpdateRate );
            destination.Write( _configurationURL );
            destination.Write( _storeReceivedSentences );
        }

        public override void ReadFrom([DisallowNull] BinaryReader source)
        {
            base.ReadFrom( source );
            _rowVersion = source.ReadInt64( );
            _aisDevice = source.ReadGuid( );
            _timestamp = source.ReadDateTime( );
            _filter = source.ReadBoolean( );
            _northWestLatitude = source.ReadDouble( );
            _northWestLongitude = source.ReadDouble( );
            _southEastLatitude = source.ReadDouble( );
            _southEastLongitude = source.ReadDouble( );
            _comPort = source.ReadString( );
            _baudRate = source.ReadInt32( );
            _iPAddress = source.ReadString( );
            _port = source.ReadInt32( );
            _udpPort = source.ReadInt32( );
            _authenticate = source.ReadBoolean( );
            _userName = source.ReadString( );
            _password = source.ReadString( );
            _authenticationURL = source.ReadString( );
            _connectionType = source.ReadEnum<Types.AisDeviceConnectionType>( );
            _sourceUpdateRate = source.ReadInt32( );
            _configurationURL = source.ReadString( );
            _storeReceivedSentences = source.ReadBoolean( );
        }

    }
    public class AisDeviceRawMessageObject : BaseDataGuid<Kind>
    {
        long _rowVersion = 0;
        Guid _aisDevice;
        DateTime _timestamp;
        bool _isSent = false;
        string _message = string.Empty;
        public AisDeviceRawMessageObject( )
        {
        }

        public AisDeviceRawMessageObject( ObjectState objectState, Guid id, long rowVersion, Guid aisDevice, DateTime timestamp, bool isSent, string message )
            : base( objectState, id )
        {
            _rowVersion = rowVersion;
            _aisDevice = aisDevice;
            _timestamp = timestamp;
            _isSent = isSent;
            _message = message;
        }

        public override Kind GetObjectType()
        {
            return Kind.AisDeviceRawMessage;
        }

        public override BaseData<Kind> Create()
        {
            return new AisDeviceRawMessageObject( );
        }

        public override void AssignTo( BaseData<Kind> target )
        {
            base.AssignTo( target );
            var destination = ( AisDeviceRawMessageObject )target;
            destination._rowVersion = _rowVersion;
            destination._aisDevice = _aisDevice;
            destination._timestamp = _timestamp;
            destination._isSent = _isSent;
            destination._message = _message;
        }

        public override bool Equals(BaseData<Kind>? other)
        {
            if (base.Equals(other))
            {
                var obj = ( AisDeviceRawMessageObject )other;
                if( obj._rowVersion != _rowVersion )
                {
                    return false;
                }
                if( obj._aisDevice != _aisDevice )
                {
                    return false;
                }
                if( obj._timestamp != _timestamp )
                {
                    return false;
                }
                if( obj._isSent != _isSent )
                {
                    return false;
                }
                if( obj._message != _message )
                {
                    return false;
                }
                return true;
            }
            return false;
        }

        public override bool IsOfType(Kind objectType)
        {
            if( objectType == Kind.AisDeviceRawMessage )
            {
                return true;
            }
            return base.IsOfType( objectType );
        }

        public long RowVersion
        {
            get => _rowVersion;
            set
            {
                if( _rowVersion != value )
                {
                    _rowVersion = value;
                    OnPropertyChanged( );
                }
            }
        }
        public Guid AisDevice
        {
            get => _aisDevice;
            set
            {
                if( _aisDevice != value )
                {
                    _aisDevice = value;
                    OnPropertyChanged( );
                }
            }
        }
        public DateTime Timestamp
        {
            get => _timestamp;
            set
            {
                if( _timestamp != value )
                {
                    _timestamp = value;
                    OnPropertyChanged( );
                }
            }
        }
        public bool IsSent
        {
            get => _isSent;
            set
            {
                if( _isSent != value )
                {
                    _isSent = value;
                    OnPropertyChanged( );
                }
            }
        }
        public string Message
        {
            get => _message;
            set
            {
                if( _message != value )
                {
                    _message = value;
                    OnPropertyChanged( );
                }
            }
        }

        public override void WriteTo( [ DisallowNull ] BinaryWriter destination )
        {
            base.WriteTo( destination );
            destination.Write( _rowVersion );
            destination.Write( _aisDevice );
            destination.Write( _timestamp );
            destination.Write( _isSent );
            destination.Write( _message );
        }

        public override void ReadFrom([DisallowNull] BinaryReader source)
        {
            base.ReadFrom( source );
            _rowVersion = source.ReadInt64( );
            _aisDevice = source.ReadGuid( );
            _timestamp = source.ReadDateTime( );
            _isSent = source.ReadBoolean( );
            _message = source.ReadString( );
        }

    }
    public class AisDeviceRawSentenceObject : BaseDataGuid<Kind>
    {
        long _rowVersion = 0;
        Guid _aisDevice;
        DateTime _timestamp;
        string _sentence = string.Empty;
        public AisDeviceRawSentenceObject( )
        {
        }

        public AisDeviceRawSentenceObject( ObjectState objectState, Guid id, long rowVersion, Guid aisDevice, DateTime timestamp, string sentence )
            : base( objectState, id )
        {
            _rowVersion = rowVersion;
            _aisDevice = aisDevice;
            _timestamp = timestamp;
            _sentence = sentence;
        }

        public override Kind GetObjectType()
        {
            return Kind.AisDeviceRawSentence;
        }

        public override BaseData<Kind> Create()
        {
            return new AisDeviceRawSentenceObject( );
        }

        public override void AssignTo( BaseData<Kind> target )
        {
            base.AssignTo( target );
            var destination = ( AisDeviceRawSentenceObject )target;
            destination._rowVersion = _rowVersion;
            destination._aisDevice = _aisDevice;
            destination._timestamp = _timestamp;
            destination._sentence = _sentence;
        }

        public override bool Equals(BaseData<Kind>? other)
        {
            if (base.Equals(other))
            {
                var obj = ( AisDeviceRawSentenceObject )other;
                if( obj._rowVersion != _rowVersion )
                {
                    return false;
                }
                if( obj._aisDevice != _aisDevice )
                {
                    return false;
                }
                if( obj._timestamp != _timestamp )
                {
                    return false;
                }
                if( obj._sentence != _sentence )
                {
                    return false;
                }
                return true;
            }
            return false;
        }

        public override bool IsOfType(Kind objectType)
        {
            if( objectType == Kind.AisDeviceRawSentence )
            {
                return true;
            }
            return base.IsOfType( objectType );
        }

        public long RowVersion
        {
            get => _rowVersion;
            set
            {
                if( _rowVersion != value )
                {
                    _rowVersion = value;
                    OnPropertyChanged( );
                }
            }
        }
        public Guid AisDevice
        {
            get => _aisDevice;
            set
            {
                if( _aisDevice != value )
                {
                    _aisDevice = value;
                    OnPropertyChanged( );
                }
            }
        }
        public DateTime Timestamp
        {
            get => _timestamp;
            set
            {
                if( _timestamp != value )
                {
                    _timestamp = value;
                    OnPropertyChanged( );
                }
            }
        }
        public string Sentence
        {
            get => _sentence;
            set
            {
                if( _sentence != value )
                {
                    _sentence = value;
                    OnPropertyChanged( );
                }
            }
        }

        public override void WriteTo( [ DisallowNull ] BinaryWriter destination )
        {
            base.WriteTo( destination );
            destination.Write( _rowVersion );
            destination.Write( _aisDevice );
            destination.Write( _timestamp );
            destination.Write( _sentence );
        }

        public override void ReadFrom([DisallowNull] BinaryReader source)
        {
            base.ReadFrom( source );
            _rowVersion = source.ReadInt64( );
            _aisDevice = source.ReadGuid( );
            _timestamp = source.ReadDateTime( );
            _sentence = source.ReadString( );
        }

    }
    public abstract class AisMessageObject : BaseDataGuid<Kind>
    {
        long _rowVersion = 0;
        Guid _aisDevice;
        DateTime _receivedTimestamp;
        long _messageSequenceNumber = 0;
        int _repeat = 0;
        Guid _mmsi;
        protected AisMessageObject( )
        {
        }

        protected AisMessageObject( ObjectState objectState, Guid id, long rowVersion, Guid aisDevice, DateTime receivedTimestamp, long messageSequenceNumber, int repeat, Guid mmsi )
            : base( objectState, id )
        {
            _rowVersion = rowVersion;
            _aisDevice = aisDevice;
            _receivedTimestamp = receivedTimestamp;
            _messageSequenceNumber = messageSequenceNumber;
            _repeat = repeat;
            _mmsi = mmsi;
        }

        public override void AssignTo( BaseData<Kind> target )
        {
            base.AssignTo( target );
            var destination = ( AisMessageObject )target;
            destination._rowVersion = _rowVersion;
            destination._aisDevice = _aisDevice;
            destination._receivedTimestamp = _receivedTimestamp;
            destination._messageSequenceNumber = _messageSequenceNumber;
            destination._repeat = _repeat;
            destination._mmsi = _mmsi;
        }

        public override bool Equals(BaseData<Kind>? other)
        {
            if (base.Equals(other))
            {
                var obj = ( AisMessageObject )other;
                if( obj._rowVersion != _rowVersion )
                {
                    return false;
                }
                if( obj._aisDevice != _aisDevice )
                {
                    return false;
                }
                if( obj._receivedTimestamp != _receivedTimestamp )
                {
                    return false;
                }
                if( obj._messageSequenceNumber != _messageSequenceNumber )
                {
                    return false;
                }
                if( obj._repeat != _repeat )
                {
                    return false;
                }
                if( obj._mmsi != _mmsi )
                {
                    return false;
                }
                return true;
            }
            return false;
        }

        public override bool IsOfType(Kind objectType)
        {
            if( objectType == Kind.AisMessage )
            {
                return true;
            }
            return base.IsOfType( objectType );
        }

        public long RowVersion
        {
            get => _rowVersion;
            set
            {
                if( _rowVersion != value )
                {
                    _rowVersion = value;
                    OnPropertyChanged( );
                }
            }
        }
        public Guid AisDevice
        {
            get => _aisDevice;
            set
            {
                if( _aisDevice != value )
                {
                    _aisDevice = value;
                    OnPropertyChanged( );
                }
            }
        }
        public DateTime ReceivedTimestamp
        {
            get => _receivedTimestamp;
            set
            {
                if( _receivedTimestamp != value )
                {
                    _receivedTimestamp = value;
                    OnPropertyChanged( );
                }
            }
        }
        public long MessageSequenceNumber
        {
            get => _messageSequenceNumber;
            set
            {
                if( _messageSequenceNumber != value )
                {
                    _messageSequenceNumber = value;
                    OnPropertyChanged( );
                }
            }
        }
        public int Repeat
        {
            get => _repeat;
            set
            {
                if( _repeat != value )
                {
                    _repeat = value;
                    OnPropertyChanged( );
                }
            }
        }
        public Guid Mmsi
        {
            get => _mmsi;
            set
            {
                if( _mmsi != value )
                {
                    _mmsi = value;
                    OnPropertyChanged( );
                }
            }
        }

        public override void WriteTo( [ DisallowNull ] BinaryWriter destination )
        {
            base.WriteTo( destination );
            destination.Write( _rowVersion );
            destination.Write( _aisDevice );
            destination.Write( _receivedTimestamp );
            destination.Write( _messageSequenceNumber );
            destination.Write( _repeat );
            destination.Write( _mmsi );
        }

        public override void ReadFrom([DisallowNull] BinaryReader source)
        {
            base.ReadFrom( source );
            _rowVersion = source.ReadInt64( );
            _aisDevice = source.ReadGuid( );
            _receivedTimestamp = source.ReadDateTime( );
            _messageSequenceNumber = source.ReadInt64( );
            _repeat = source.ReadInt32( );
            _mmsi = source.ReadGuid( );
        }

    }
    public class AidToNavigationReportMessageObject : AisMessageObject
    {
        Types.NavigationalAidType _navigationalAidType = Types.NavigationalAidType.NotSpecified;
        string _name = string.Empty;
        Types.PositionAccuracy _positionAccuracy = Types.PositionAccuracy.Low;
        double _longitude = 0.0;
        double _latitude = 0.0;
        int _dimensionToBow = 0;
        int _dimensionToStern = 0;
        int _dimensionToPort = 0;
        int _dimensionToStarboard = 0;
        Types.PositionFixType _positionFixType = Types.PositionFixType.Undefined1;
        int _timestamp = 0;
        bool _offPosition = false;
        int _regionalReserved = 0;
        Types.Raim _raim = Types.Raim.NotInUse;
        bool _virtualAid = false;
        bool _assigned = false;
        int _spare = 0;
        string _nameExtension = string.Empty;
        public AidToNavigationReportMessageObject( )
        {
        }

        public AidToNavigationReportMessageObject( ObjectState objectState, Guid id, long rowVersion, Guid aisDevice, DateTime receivedTimestamp, long messageSequenceNumber, int repeat, Guid mmsi, Types.NavigationalAidType navigationalAidType, string name, Types.PositionAccuracy positionAccuracy, double longitude, double latitude, int dimensionToBow, int dimensionToStern, int dimensionToPort, int dimensionToStarboard, Types.PositionFixType positionFixType, int timestamp, bool offPosition, int regionalReserved, Types.Raim raim, bool virtualAid, bool assigned, int spare, string nameExtension )
            : base( objectState, id, rowVersion, aisDevice, receivedTimestamp, messageSequenceNumber, repeat, mmsi )
        {
            _navigationalAidType = navigationalAidType;
            _name = name;
            _positionAccuracy = positionAccuracy;
            _longitude = longitude;
            _latitude = latitude;
            _dimensionToBow = dimensionToBow;
            _dimensionToStern = dimensionToStern;
            _dimensionToPort = dimensionToPort;
            _dimensionToStarboard = dimensionToStarboard;
            _positionFixType = positionFixType;
            _timestamp = timestamp;
            _offPosition = offPosition;
            _regionalReserved = regionalReserved;
            _raim = raim;
            _virtualAid = virtualAid;
            _assigned = assigned;
            _spare = spare;
            _nameExtension = nameExtension;
        }

        public override Kind GetObjectType()
        {
            return Kind.AidToNavigationReportMessage;
        }

        public override BaseData<Kind> Create()
        {
            return new AidToNavigationReportMessageObject( );
        }

        public override void AssignTo( BaseData<Kind> target )
        {
            base.AssignTo( target );
            var destination = ( AidToNavigationReportMessageObject )target;
            destination._navigationalAidType = _navigationalAidType;
            destination._name = _name;
            destination._positionAccuracy = _positionAccuracy;
            destination._longitude = _longitude;
            destination._latitude = _latitude;
            destination._dimensionToBow = _dimensionToBow;
            destination._dimensionToStern = _dimensionToStern;
            destination._dimensionToPort = _dimensionToPort;
            destination._dimensionToStarboard = _dimensionToStarboard;
            destination._positionFixType = _positionFixType;
            destination._timestamp = _timestamp;
            destination._offPosition = _offPosition;
            destination._regionalReserved = _regionalReserved;
            destination._raim = _raim;
            destination._virtualAid = _virtualAid;
            destination._assigned = _assigned;
            destination._spare = _spare;
            destination._nameExtension = _nameExtension;
        }

        public override bool Equals(BaseData<Kind>? other)
        {
            if (base.Equals(other))
            {
                var obj = ( AidToNavigationReportMessageObject )other;
                if( obj._navigationalAidType != _navigationalAidType )
                {
                    return false;
                }
                if( obj._name != _name )
                {
                    return false;
                }
                if( obj._positionAccuracy != _positionAccuracy )
                {
                    return false;
                }
                if( obj._longitude != _longitude )
                {
                    return false;
                }
                if( obj._latitude != _latitude )
                {
                    return false;
                }
                if( obj._dimensionToBow != _dimensionToBow )
                {
                    return false;
                }
                if( obj._dimensionToStern != _dimensionToStern )
                {
                    return false;
                }
                if( obj._dimensionToPort != _dimensionToPort )
                {
                    return false;
                }
                if( obj._dimensionToStarboard != _dimensionToStarboard )
                {
                    return false;
                }
                if( obj._positionFixType != _positionFixType )
                {
                    return false;
                }
                if( obj._timestamp != _timestamp )
                {
                    return false;
                }
                if( obj._offPosition != _offPosition )
                {
                    return false;
                }
                if( obj._regionalReserved != _regionalReserved )
                {
                    return false;
                }
                if( obj._raim != _raim )
                {
                    return false;
                }
                if( obj._virtualAid != _virtualAid )
                {
                    return false;
                }
                if( obj._assigned != _assigned )
                {
                    return false;
                }
                if( obj._spare != _spare )
                {
                    return false;
                }
                if( obj._nameExtension != _nameExtension )
                {
                    return false;
                }
                return true;
            }
            return false;
        }

        public override bool IsOfType(Kind objectType)
        {
            if( objectType == Kind.AidToNavigationReportMessage )
            {
                return true;
            }
            return base.IsOfType( objectType );
        }

        public Types.NavigationalAidType NavigationalAidType
        {
            get => _navigationalAidType;
            set
            {
                if( _navigationalAidType != value )
                {
                    _navigationalAidType = value;
                    OnPropertyChanged( );
                }
            }
        }
        public string Name
        {
            get => _name;
            set
            {
                if( _name != value )
                {
                    _name = value;
                    OnPropertyChanged( );
                }
            }
        }
        public Types.PositionAccuracy PositionAccuracy
        {
            get => _positionAccuracy;
            set
            {
                if( _positionAccuracy != value )
                {
                    _positionAccuracy = value;
                    OnPropertyChanged( );
                }
            }
        }
        public double Longitude
        {
            get => _longitude;
            set
            {
                if( _longitude != value )
                {
                    _longitude = value;
                    OnPropertyChanged( );
                }
            }
        }
        public double Latitude
        {
            get => _latitude;
            set
            {
                if( _latitude != value )
                {
                    _latitude = value;
                    OnPropertyChanged( );
                }
            }
        }
        public int DimensionToBow
        {
            get => _dimensionToBow;
            set
            {
                if( _dimensionToBow != value )
                {
                    _dimensionToBow = value;
                    OnPropertyChanged( );
                }
            }
        }
        public int DimensionToStern
        {
            get => _dimensionToStern;
            set
            {
                if( _dimensionToStern != value )
                {
                    _dimensionToStern = value;
                    OnPropertyChanged( );
                }
            }
        }
        public int DimensionToPort
        {
            get => _dimensionToPort;
            set
            {
                if( _dimensionToPort != value )
                {
                    _dimensionToPort = value;
                    OnPropertyChanged( );
                }
            }
        }
        public int DimensionToStarboard
        {
            get => _dimensionToStarboard;
            set
            {
                if( _dimensionToStarboard != value )
                {
                    _dimensionToStarboard = value;
                    OnPropertyChanged( );
                }
            }
        }
        public Types.PositionFixType PositionFixType
        {
            get => _positionFixType;
            set
            {
                if( _positionFixType != value )
                {
                    _positionFixType = value;
                    OnPropertyChanged( );
                }
            }
        }
        public int Timestamp
        {
            get => _timestamp;
            set
            {
                if( _timestamp != value )
                {
                    _timestamp = value;
                    OnPropertyChanged( );
                }
            }
        }
        public bool OffPosition
        {
            get => _offPosition;
            set
            {
                if( _offPosition != value )
                {
                    _offPosition = value;
                    OnPropertyChanged( );
                }
            }
        }
        public int RegionalReserved
        {
            get => _regionalReserved;
            set
            {
                if( _regionalReserved != value )
                {
                    _regionalReserved = value;
                    OnPropertyChanged( );
                }
            }
        }
        public Types.Raim Raim
        {
            get => _raim;
            set
            {
                if( _raim != value )
                {
                    _raim = value;
                    OnPropertyChanged( );
                }
            }
        }
        public bool VirtualAid
        {
            get => _virtualAid;
            set
            {
                if( _virtualAid != value )
                {
                    _virtualAid = value;
                    OnPropertyChanged( );
                }
            }
        }
        public bool Assigned
        {
            get => _assigned;
            set
            {
                if( _assigned != value )
                {
                    _assigned = value;
                    OnPropertyChanged( );
                }
            }
        }
        public int Spare
        {
            get => _spare;
            set
            {
                if( _spare != value )
                {
                    _spare = value;
                    OnPropertyChanged( );
                }
            }
        }
        public string NameExtension
        {
            get => _nameExtension;
            set
            {
                if( _nameExtension != value )
                {
                    _nameExtension = value;
                    OnPropertyChanged( );
                }
            }
        }

        public override void WriteTo( [ DisallowNull ] BinaryWriter destination )
        {
            base.WriteTo( destination );
            destination.Write( _navigationalAidType );
            destination.Write( _name );
            destination.Write( _positionAccuracy );
            destination.Write( _longitude );
            destination.Write( _latitude );
            destination.Write( _dimensionToBow );
            destination.Write( _dimensionToStern );
            destination.Write( _dimensionToPort );
            destination.Write( _dimensionToStarboard );
            destination.Write( _positionFixType );
            destination.Write( _timestamp );
            destination.Write( _offPosition );
            destination.Write( _regionalReserved );
            destination.Write( _raim );
            destination.Write( _virtualAid );
            destination.Write( _assigned );
            destination.Write( _spare );
            destination.Write( _nameExtension );
        }

        public override void ReadFrom([DisallowNull] BinaryReader source)
        {
            base.ReadFrom( source );
            _navigationalAidType = source.ReadEnum<Types.NavigationalAidType>( );
            _name = source.ReadString( );
            _positionAccuracy = source.ReadEnum<Types.PositionAccuracy>( );
            _longitude = source.ReadDouble( );
            _latitude = source.ReadDouble( );
            _dimensionToBow = source.ReadInt32( );
            _dimensionToStern = source.ReadInt32( );
            _dimensionToPort = source.ReadInt32( );
            _dimensionToStarboard = source.ReadInt32( );
            _positionFixType = source.ReadEnum<Types.PositionFixType>( );
            _timestamp = source.ReadInt32( );
            _offPosition = source.ReadBoolean( );
            _regionalReserved = source.ReadInt32( );
            _raim = source.ReadEnum<Types.Raim>( );
            _virtualAid = source.ReadBoolean( );
            _assigned = source.ReadBoolean( );
            _spare = source.ReadInt32( );
            _nameExtension = source.ReadString( );
        }

    }
    public class AisAddressedSafetyRelatedMessageObject : AisMessageObject
    {
        int _sequenceNumber = 0;
        Guid _destinationMmsi;
        bool _retransmitFlag = false;
        int _spare = 0;
        string _text = string.Empty;
        public AisAddressedSafetyRelatedMessageObject( )
        {
        }

        public AisAddressedSafetyRelatedMessageObject( ObjectState objectState, Guid id, long rowVersion, Guid aisDevice, DateTime receivedTimestamp, long messageSequenceNumber, int repeat, Guid mmsi, int sequenceNumber, Guid destinationMmsi, bool retransmitFlag, int spare, string text )
            : base( objectState, id, rowVersion, aisDevice, receivedTimestamp, messageSequenceNumber, repeat, mmsi )
        {
            _sequenceNumber = sequenceNumber;
            _destinationMmsi = destinationMmsi;
            _retransmitFlag = retransmitFlag;
            _spare = spare;
            _text = text;
        }

        public override Kind GetObjectType()
        {
            return Kind.AisAddressedSafetyRelatedMessage;
        }

        public override BaseData<Kind> Create()
        {
            return new AisAddressedSafetyRelatedMessageObject( );
        }

        public override void AssignTo( BaseData<Kind> target )
        {
            base.AssignTo( target );
            var destination = ( AisAddressedSafetyRelatedMessageObject )target;
            destination._sequenceNumber = _sequenceNumber;
            destination._destinationMmsi = _destinationMmsi;
            destination._retransmitFlag = _retransmitFlag;
            destination._spare = _spare;
            destination._text = _text;
        }

        public override bool Equals(BaseData<Kind>? other)
        {
            if (base.Equals(other))
            {
                var obj = ( AisAddressedSafetyRelatedMessageObject )other;
                if( obj._sequenceNumber != _sequenceNumber )
                {
                    return false;
                }
                if( obj._destinationMmsi != _destinationMmsi )
                {
                    return false;
                }
                if( obj._retransmitFlag != _retransmitFlag )
                {
                    return false;
                }
                if( obj._spare != _spare )
                {
                    return false;
                }
                if( obj._text != _text )
                {
                    return false;
                }
                return true;
            }
            return false;
        }

        public override bool IsOfType(Kind objectType)
        {
            if( objectType == Kind.AisAddressedSafetyRelatedMessage )
            {
                return true;
            }
            return base.IsOfType( objectType );
        }

        public int SequenceNumber
        {
            get => _sequenceNumber;
            set
            {
                if( _sequenceNumber != value )
                {
                    _sequenceNumber = value;
                    OnPropertyChanged( );
                }
            }
        }
        public Guid DestinationMmsi
        {
            get => _destinationMmsi;
            set
            {
                if( _destinationMmsi != value )
                {
                    _destinationMmsi = value;
                    OnPropertyChanged( );
                }
            }
        }
        public bool RetransmitFlag
        {
            get => _retransmitFlag;
            set
            {
                if( _retransmitFlag != value )
                {
                    _retransmitFlag = value;
                    OnPropertyChanged( );
                }
            }
        }
        public int Spare
        {
            get => _spare;
            set
            {
                if( _spare != value )
                {
                    _spare = value;
                    OnPropertyChanged( );
                }
            }
        }
        public string Text
        {
            get => _text;
            set
            {
                if( _text != value )
                {
                    _text = value;
                    OnPropertyChanged( );
                }
            }
        }

        public override void WriteTo( [ DisallowNull ] BinaryWriter destination )
        {
            base.WriteTo( destination );
            destination.Write( _sequenceNumber );
            destination.Write( _destinationMmsi );
            destination.Write( _retransmitFlag );
            destination.Write( _spare );
            destination.Write( _text );
        }

        public override void ReadFrom([DisallowNull] BinaryReader source)
        {
            base.ReadFrom( source );
            _sequenceNumber = source.ReadInt32( );
            _destinationMmsi = source.ReadGuid( );
            _retransmitFlag = source.ReadBoolean( );
            _spare = source.ReadInt32( );
            _text = source.ReadString( );
        }

    }
    public class AisBaseStationReportMessageObject : AisMessageObject
    {
        DateTime _timestamp;
        Types.PositionAccuracy _positionAccuracy = Types.PositionAccuracy.Low;
        double _longitude = 0.0;
        double _latitude = 0.0;
        Types.PositionFixType _positionFixType = Types.PositionFixType.Undefined1;
        int _spare = 0;
        Types.Raim _raim = Types.Raim.NotInUse;
        int _radioStatus = 0;
        public AisBaseStationReportMessageObject( )
        {
        }

        public AisBaseStationReportMessageObject( ObjectState objectState, Guid id, long rowVersion, Guid aisDevice, DateTime receivedTimestamp, long messageSequenceNumber, int repeat, Guid mmsi, DateTime timestamp, Types.PositionAccuracy positionAccuracy, double longitude, double latitude, Types.PositionFixType positionFixType, int spare, Types.Raim raim, int radioStatus )
            : base( objectState, id, rowVersion, aisDevice, receivedTimestamp, messageSequenceNumber, repeat, mmsi )
        {
            _timestamp = timestamp;
            _positionAccuracy = positionAccuracy;
            _longitude = longitude;
            _latitude = latitude;
            _positionFixType = positionFixType;
            _spare = spare;
            _raim = raim;
            _radioStatus = radioStatus;
        }

        public override Kind GetObjectType()
        {
            return Kind.AisBaseStationReportMessage;
        }

        public override BaseData<Kind> Create()
        {
            return new AisBaseStationReportMessageObject( );
        }

        public override void AssignTo( BaseData<Kind> target )
        {
            base.AssignTo( target );
            var destination = ( AisBaseStationReportMessageObject )target;
            destination._timestamp = _timestamp;
            destination._positionAccuracy = _positionAccuracy;
            destination._longitude = _longitude;
            destination._latitude = _latitude;
            destination._positionFixType = _positionFixType;
            destination._spare = _spare;
            destination._raim = _raim;
            destination._radioStatus = _radioStatus;
        }

        public override bool Equals(BaseData<Kind>? other)
        {
            if (base.Equals(other))
            {
                var obj = ( AisBaseStationReportMessageObject )other;
                if( obj._timestamp != _timestamp )
                {
                    return false;
                }
                if( obj._positionAccuracy != _positionAccuracy )
                {
                    return false;
                }
                if( obj._longitude != _longitude )
                {
                    return false;
                }
                if( obj._latitude != _latitude )
                {
                    return false;
                }
                if( obj._positionFixType != _positionFixType )
                {
                    return false;
                }
                if( obj._spare != _spare )
                {
                    return false;
                }
                if( obj._raim != _raim )
                {
                    return false;
                }
                if( obj._radioStatus != _radioStatus )
                {
                    return false;
                }
                return true;
            }
            return false;
        }

        public override bool IsOfType(Kind objectType)
        {
            if( objectType == Kind.AisBaseStationReportMessage )
            {
                return true;
            }
            return base.IsOfType( objectType );
        }

        public DateTime Timestamp
        {
            get => _timestamp;
            set
            {
                if( _timestamp != value )
                {
                    _timestamp = value;
                    OnPropertyChanged( );
                }
            }
        }
        public Types.PositionAccuracy PositionAccuracy
        {
            get => _positionAccuracy;
            set
            {
                if( _positionAccuracy != value )
                {
                    _positionAccuracy = value;
                    OnPropertyChanged( );
                }
            }
        }
        public double Longitude
        {
            get => _longitude;
            set
            {
                if( _longitude != value )
                {
                    _longitude = value;
                    OnPropertyChanged( );
                }
            }
        }
        public double Latitude
        {
            get => _latitude;
            set
            {
                if( _latitude != value )
                {
                    _latitude = value;
                    OnPropertyChanged( );
                }
            }
        }
        public Types.PositionFixType PositionFixType
        {
            get => _positionFixType;
            set
            {
                if( _positionFixType != value )
                {
                    _positionFixType = value;
                    OnPropertyChanged( );
                }
            }
        }
        public int Spare
        {
            get => _spare;
            set
            {
                if( _spare != value )
                {
                    _spare = value;
                    OnPropertyChanged( );
                }
            }
        }
        public Types.Raim Raim
        {
            get => _raim;
            set
            {
                if( _raim != value )
                {
                    _raim = value;
                    OnPropertyChanged( );
                }
            }
        }
        public int RadioStatus
        {
            get => _radioStatus;
            set
            {
                if( _radioStatus != value )
                {
                    _radioStatus = value;
                    OnPropertyChanged( );
                }
            }
        }

        public override void WriteTo( [ DisallowNull ] BinaryWriter destination )
        {
            base.WriteTo( destination );
            destination.Write( _timestamp );
            destination.Write( _positionAccuracy );
            destination.Write( _longitude );
            destination.Write( _latitude );
            destination.Write( _positionFixType );
            destination.Write( _spare );
            destination.Write( _raim );
            destination.Write( _radioStatus );
        }

        public override void ReadFrom([DisallowNull] BinaryReader source)
        {
            base.ReadFrom( source );
            _timestamp = source.ReadDateTime( );
            _positionAccuracy = source.ReadEnum<Types.PositionAccuracy>( );
            _longitude = source.ReadDouble( );
            _latitude = source.ReadDouble( );
            _positionFixType = source.ReadEnum<Types.PositionFixType>( );
            _spare = source.ReadInt32( );
            _raim = source.ReadEnum<Types.Raim>( );
            _radioStatus = source.ReadInt32( );
        }

    }
    public class AisBinaryAcknowledgeMessageObject : AisMessageObject
    {
        int _spare = 0;
        int _sequenceNumber1 = 0;
        Guid _mmsi1;
        int? _sequenceNumber2;
        Guid? _mmsi2;
        int? _sequenceNumber3;
        Guid? _mmsi3;
        int? _sequenceNumber4;
        Guid? _mmsi4;
        public AisBinaryAcknowledgeMessageObject( )
        {
        }

        public AisBinaryAcknowledgeMessageObject( ObjectState objectState, Guid id, long rowVersion, Guid aisDevice, DateTime receivedTimestamp, long messageSequenceNumber, int repeat, Guid mmsi, int spare, int sequenceNumber1, Guid mmsi1, int? sequenceNumber2, Guid? mmsi2, int? sequenceNumber3, Guid? mmsi3, int? sequenceNumber4, Guid? mmsi4 )
            : base( objectState, id, rowVersion, aisDevice, receivedTimestamp, messageSequenceNumber, repeat, mmsi )
        {
            _spare = spare;
            _sequenceNumber1 = sequenceNumber1;
            _mmsi1 = mmsi1;
            _sequenceNumber2 = sequenceNumber2;
            _mmsi2 = mmsi2;
            _sequenceNumber3 = sequenceNumber3;
            _mmsi3 = mmsi3;
            _sequenceNumber4 = sequenceNumber4;
            _mmsi4 = mmsi4;
        }

        public override Kind GetObjectType()
        {
            return Kind.AisBinaryAcknowledgeMessage;
        }

        public override BaseData<Kind> Create()
        {
            return new AisBinaryAcknowledgeMessageObject( );
        }

        public override void AssignTo( BaseData<Kind> target )
        {
            base.AssignTo( target );
            var destination = ( AisBinaryAcknowledgeMessageObject )target;
            destination._spare = _spare;
            destination._sequenceNumber1 = _sequenceNumber1;
            destination._mmsi1 = _mmsi1;
            destination._sequenceNumber2 = _sequenceNumber2;
            destination._mmsi2 = _mmsi2;
            destination._sequenceNumber3 = _sequenceNumber3;
            destination._mmsi3 = _mmsi3;
            destination._sequenceNumber4 = _sequenceNumber4;
            destination._mmsi4 = _mmsi4;
        }

        public override bool Equals(BaseData<Kind>? other)
        {
            if (base.Equals(other))
            {
                var obj = ( AisBinaryAcknowledgeMessageObject )other;
                if( obj._spare != _spare )
                {
                    return false;
                }
                if( obj._sequenceNumber1 != _sequenceNumber1 )
                {
                    return false;
                }
                if( obj._mmsi1 != _mmsi1 )
                {
                    return false;
                }
                if( obj._sequenceNumber2 != _sequenceNumber2 )
                {
                    return false;
                }
                if( obj._mmsi2 != _mmsi2 )
                {
                    return false;
                }
                if( obj._sequenceNumber3 != _sequenceNumber3 )
                {
                    return false;
                }
                if( obj._mmsi3 != _mmsi3 )
                {
                    return false;
                }
                if( obj._sequenceNumber4 != _sequenceNumber4 )
                {
                    return false;
                }
                if( obj._mmsi4 != _mmsi4 )
                {
                    return false;
                }
                return true;
            }
            return false;
        }

        public override bool IsOfType(Kind objectType)
        {
            if( objectType == Kind.AisBinaryAcknowledgeMessage )
            {
                return true;
            }
            return base.IsOfType( objectType );
        }

        public int Spare
        {
            get => _spare;
            set
            {
                if( _spare != value )
                {
                    _spare = value;
                    OnPropertyChanged( );
                }
            }
        }
        public int SequenceNumber1
        {
            get => _sequenceNumber1;
            set
            {
                if( _sequenceNumber1 != value )
                {
                    _sequenceNumber1 = value;
                    OnPropertyChanged( );
                }
            }
        }
        public Guid Mmsi1
        {
            get => _mmsi1;
            set
            {
                if( _mmsi1 != value )
                {
                    _mmsi1 = value;
                    OnPropertyChanged( );
                }
            }
        }
        public int? SequenceNumber2
        {
            get => _sequenceNumber2;
            set
            {
                if( _sequenceNumber2 != value )
                {
                    _sequenceNumber2 = value;
                    OnPropertyChanged( );
                }
            }
        }
        public Guid? Mmsi2
        {
            get => _mmsi2;
            set
            {
                if( _mmsi2 != value )
                {
                    _mmsi2 = value;
                    OnPropertyChanged( );
                }
            }
        }
        public int? SequenceNumber3
        {
            get => _sequenceNumber3;
            set
            {
                if( _sequenceNumber3 != value )
                {
                    _sequenceNumber3 = value;
                    OnPropertyChanged( );
                }
            }
        }
        public Guid? Mmsi3
        {
            get => _mmsi3;
            set
            {
                if( _mmsi3 != value )
                {
                    _mmsi3 = value;
                    OnPropertyChanged( );
                }
            }
        }
        public int? SequenceNumber4
        {
            get => _sequenceNumber4;
            set
            {
                if( _sequenceNumber4 != value )
                {
                    _sequenceNumber4 = value;
                    OnPropertyChanged( );
                }
            }
        }
        public Guid? Mmsi4
        {
            get => _mmsi4;
            set
            {
                if( _mmsi4 != value )
                {
                    _mmsi4 = value;
                    OnPropertyChanged( );
                }
            }
        }

        public override void WriteTo( [ DisallowNull ] BinaryWriter destination )
        {
            base.WriteTo( destination );
            destination.Write( _spare );
            destination.Write( _sequenceNumber1 );
            destination.Write( _mmsi1 );
            destination.Write( _sequenceNumber2 );
            destination.Write( _mmsi2 );
            destination.Write( _sequenceNumber3 );
            destination.Write( _mmsi3 );
            destination.Write( _sequenceNumber4 );
            destination.Write( _mmsi4 );
        }

        public override void ReadFrom([DisallowNull] BinaryReader source)
        {
            base.ReadFrom( source );
            _spare = source.ReadInt32( );
            _sequenceNumber1 = source.ReadInt32( );
            _mmsi1 = source.ReadGuid( );
            _sequenceNumber2 = source.ReadNullableInt32( );
            _mmsi2 = source.ReadNullableGuid( );
            _sequenceNumber3 = source.ReadNullableInt32( );
            _mmsi3 = source.ReadNullableGuid( );
            _sequenceNumber4 = source.ReadNullableInt32( );
            _mmsi4 = source.ReadNullableGuid( );
        }

    }
    public class AisBinaryAddressedMessageObject : AisMessageObject
    {
        int _sequenceNumber = 0;
        Guid _destinationMmsi;
        bool _retransmitFlag = false;
        int _spare = 0;
        int _designatedAreaCode = 0;
        int _functionalId = 0;
        string _data = string.Empty;
        public AisBinaryAddressedMessageObject( )
        {
        }

        public AisBinaryAddressedMessageObject( ObjectState objectState, Guid id, long rowVersion, Guid aisDevice, DateTime receivedTimestamp, long messageSequenceNumber, int repeat, Guid mmsi, int sequenceNumber, Guid destinationMmsi, bool retransmitFlag, int spare, int designatedAreaCode, int functionalId, string data )
            : base( objectState, id, rowVersion, aisDevice, receivedTimestamp, messageSequenceNumber, repeat, mmsi )
        {
            _sequenceNumber = sequenceNumber;
            _destinationMmsi = destinationMmsi;
            _retransmitFlag = retransmitFlag;
            _spare = spare;
            _designatedAreaCode = designatedAreaCode;
            _functionalId = functionalId;
            _data = data;
        }

        public override Kind GetObjectType()
        {
            return Kind.AisBinaryAddressedMessage;
        }

        public override BaseData<Kind> Create()
        {
            return new AisBinaryAddressedMessageObject( );
        }

        public override void AssignTo( BaseData<Kind> target )
        {
            base.AssignTo( target );
            var destination = ( AisBinaryAddressedMessageObject )target;
            destination._sequenceNumber = _sequenceNumber;
            destination._destinationMmsi = _destinationMmsi;
            destination._retransmitFlag = _retransmitFlag;
            destination._spare = _spare;
            destination._designatedAreaCode = _designatedAreaCode;
            destination._functionalId = _functionalId;
            destination._data = _data;
        }

        public override bool Equals(BaseData<Kind>? other)
        {
            if (base.Equals(other))
            {
                var obj = ( AisBinaryAddressedMessageObject )other;
                if( obj._sequenceNumber != _sequenceNumber )
                {
                    return false;
                }
                if( obj._destinationMmsi != _destinationMmsi )
                {
                    return false;
                }
                if( obj._retransmitFlag != _retransmitFlag )
                {
                    return false;
                }
                if( obj._spare != _spare )
                {
                    return false;
                }
                if( obj._designatedAreaCode != _designatedAreaCode )
                {
                    return false;
                }
                if( obj._functionalId != _functionalId )
                {
                    return false;
                }
                if( obj._data != _data )
                {
                    return false;
                }
                return true;
            }
            return false;
        }

        public override bool IsOfType(Kind objectType)
        {
            if( objectType == Kind.AisBinaryAddressedMessage )
            {
                return true;
            }
            return base.IsOfType( objectType );
        }

        public int SequenceNumber
        {
            get => _sequenceNumber;
            set
            {
                if( _sequenceNumber != value )
                {
                    _sequenceNumber = value;
                    OnPropertyChanged( );
                }
            }
        }
        public Guid DestinationMmsi
        {
            get => _destinationMmsi;
            set
            {
                if( _destinationMmsi != value )
                {
                    _destinationMmsi = value;
                    OnPropertyChanged( );
                }
            }
        }
        public bool RetransmitFlag
        {
            get => _retransmitFlag;
            set
            {
                if( _retransmitFlag != value )
                {
                    _retransmitFlag = value;
                    OnPropertyChanged( );
                }
            }
        }
        public int Spare
        {
            get => _spare;
            set
            {
                if( _spare != value )
                {
                    _spare = value;
                    OnPropertyChanged( );
                }
            }
        }
        public int DesignatedAreaCode
        {
            get => _designatedAreaCode;
            set
            {
                if( _designatedAreaCode != value )
                {
                    _designatedAreaCode = value;
                    OnPropertyChanged( );
                }
            }
        }
        public int FunctionalId
        {
            get => _functionalId;
            set
            {
                if( _functionalId != value )
                {
                    _functionalId = value;
                    OnPropertyChanged( );
                }
            }
        }
        public string Data
        {
            get => _data;
            set
            {
                if( _data != value )
                {
                    _data = value;
                    OnPropertyChanged( );
                }
            }
        }

        public override void WriteTo( [ DisallowNull ] BinaryWriter destination )
        {
            base.WriteTo( destination );
            destination.Write( _sequenceNumber );
            destination.Write( _destinationMmsi );
            destination.Write( _retransmitFlag );
            destination.Write( _spare );
            destination.Write( _designatedAreaCode );
            destination.Write( _functionalId );
            destination.Write( _data );
        }

        public override void ReadFrom([DisallowNull] BinaryReader source)
        {
            base.ReadFrom( source );
            _sequenceNumber = source.ReadInt32( );
            _destinationMmsi = source.ReadGuid( );
            _retransmitFlag = source.ReadBoolean( );
            _spare = source.ReadInt32( );
            _designatedAreaCode = source.ReadInt32( );
            _functionalId = source.ReadInt32( );
            _data = source.ReadString( );
        }

    }
    public class AisBinaryBroadcastMessageObject : AisMessageObject
    {
        int _spare = 0;
        int _designatedAreaCode = 0;
        int _functionalId = 0;
        string _data = string.Empty;
        public AisBinaryBroadcastMessageObject( )
        {
        }

        public AisBinaryBroadcastMessageObject( ObjectState objectState, Guid id, long rowVersion, Guid aisDevice, DateTime receivedTimestamp, long messageSequenceNumber, int repeat, Guid mmsi, int spare, int designatedAreaCode, int functionalId, string data )
            : base( objectState, id, rowVersion, aisDevice, receivedTimestamp, messageSequenceNumber, repeat, mmsi )
        {
            _spare = spare;
            _designatedAreaCode = designatedAreaCode;
            _functionalId = functionalId;
            _data = data;
        }

        public override Kind GetObjectType()
        {
            return Kind.AisBinaryBroadcastMessage;
        }

        public override BaseData<Kind> Create()
        {
            return new AisBinaryBroadcastMessageObject( );
        }

        public override void AssignTo( BaseData<Kind> target )
        {
            base.AssignTo( target );
            var destination = ( AisBinaryBroadcastMessageObject )target;
            destination._spare = _spare;
            destination._designatedAreaCode = _designatedAreaCode;
            destination._functionalId = _functionalId;
            destination._data = _data;
        }

        public override bool Equals(BaseData<Kind>? other)
        {
            if (base.Equals(other))
            {
                var obj = ( AisBinaryBroadcastMessageObject )other;
                if( obj._spare != _spare )
                {
                    return false;
                }
                if( obj._designatedAreaCode != _designatedAreaCode )
                {
                    return false;
                }
                if( obj._functionalId != _functionalId )
                {
                    return false;
                }
                if( obj._data != _data )
                {
                    return false;
                }
                return true;
            }
            return false;
        }

        public override bool IsOfType(Kind objectType)
        {
            if( objectType == Kind.AisBinaryBroadcastMessage )
            {
                return true;
            }
            return base.IsOfType( objectType );
        }

        public int Spare
        {
            get => _spare;
            set
            {
                if( _spare != value )
                {
                    _spare = value;
                    OnPropertyChanged( );
                }
            }
        }
        public int DesignatedAreaCode
        {
            get => _designatedAreaCode;
            set
            {
                if( _designatedAreaCode != value )
                {
                    _designatedAreaCode = value;
                    OnPropertyChanged( );
                }
            }
        }
        public int FunctionalId
        {
            get => _functionalId;
            set
            {
                if( _functionalId != value )
                {
                    _functionalId = value;
                    OnPropertyChanged( );
                }
            }
        }
        public string Data
        {
            get => _data;
            set
            {
                if( _data != value )
                {
                    _data = value;
                    OnPropertyChanged( );
                }
            }
        }

        public override void WriteTo( [ DisallowNull ] BinaryWriter destination )
        {
            base.WriteTo( destination );
            destination.Write( _spare );
            destination.Write( _designatedAreaCode );
            destination.Write( _functionalId );
            destination.Write( _data );
        }

        public override void ReadFrom([DisallowNull] BinaryReader source)
        {
            base.ReadFrom( source );
            _spare = source.ReadInt32( );
            _designatedAreaCode = source.ReadInt32( );
            _functionalId = source.ReadInt32( );
            _data = source.ReadString( );
        }

    }
    public class AisDataLinkManagementMessageObject : AisMessageObject
    {
        int _spare = 0;
        int _offset1 = 0;
        int _reservedSlots1 = 0;
        int _timeout1 = 0;
        int _increment1 = 0;
        int? _offset2;
        int? _reservedSlots2;
        int? _timeout2;
        int? _increment2;
        int? _offset3;
        int? _reservedSlots3;
        int? _timeout3;
        int? _increment3;
        int? _offset4;
        int? _reservedSlots4;
        int? _timeout4;
        int? _increment4;
        public AisDataLinkManagementMessageObject( )
        {
        }

        public AisDataLinkManagementMessageObject( ObjectState objectState, Guid id, long rowVersion, Guid aisDevice, DateTime receivedTimestamp, long messageSequenceNumber, int repeat, Guid mmsi, int spare, int offset1, int reservedSlots1, int timeout1, int increment1, int? offset2, int? reservedSlots2, int? timeout2, int? increment2, int? offset3, int? reservedSlots3, int? timeout3, int? increment3, int? offset4, int? reservedSlots4, int? timeout4, int? increment4 )
            : base( objectState, id, rowVersion, aisDevice, receivedTimestamp, messageSequenceNumber, repeat, mmsi )
        {
            _spare = spare;
            _offset1 = offset1;
            _reservedSlots1 = reservedSlots1;
            _timeout1 = timeout1;
            _increment1 = increment1;
            _offset2 = offset2;
            _reservedSlots2 = reservedSlots2;
            _timeout2 = timeout2;
            _increment2 = increment2;
            _offset3 = offset3;
            _reservedSlots3 = reservedSlots3;
            _timeout3 = timeout3;
            _increment3 = increment3;
            _offset4 = offset4;
            _reservedSlots4 = reservedSlots4;
            _timeout4 = timeout4;
            _increment4 = increment4;
        }

        public override Kind GetObjectType()
        {
            return Kind.AisDataLinkManagementMessage;
        }

        public override BaseData<Kind> Create()
        {
            return new AisDataLinkManagementMessageObject( );
        }

        public override void AssignTo( BaseData<Kind> target )
        {
            base.AssignTo( target );
            var destination = ( AisDataLinkManagementMessageObject )target;
            destination._spare = _spare;
            destination._offset1 = _offset1;
            destination._reservedSlots1 = _reservedSlots1;
            destination._timeout1 = _timeout1;
            destination._increment1 = _increment1;
            destination._offset2 = _offset2;
            destination._reservedSlots2 = _reservedSlots2;
            destination._timeout2 = _timeout2;
            destination._increment2 = _increment2;
            destination._offset3 = _offset3;
            destination._reservedSlots3 = _reservedSlots3;
            destination._timeout3 = _timeout3;
            destination._increment3 = _increment3;
            destination._offset4 = _offset4;
            destination._reservedSlots4 = _reservedSlots4;
            destination._timeout4 = _timeout4;
            destination._increment4 = _increment4;
        }

        public override bool Equals(BaseData<Kind>? other)
        {
            if (base.Equals(other))
            {
                var obj = ( AisDataLinkManagementMessageObject )other;
                if( obj._spare != _spare )
                {
                    return false;
                }
                if( obj._offset1 != _offset1 )
                {
                    return false;
                }
                if( obj._reservedSlots1 != _reservedSlots1 )
                {
                    return false;
                }
                if( obj._timeout1 != _timeout1 )
                {
                    return false;
                }
                if( obj._increment1 != _increment1 )
                {
                    return false;
                }
                if( obj._offset2 != _offset2 )
                {
                    return false;
                }
                if( obj._reservedSlots2 != _reservedSlots2 )
                {
                    return false;
                }
                if( obj._timeout2 != _timeout2 )
                {
                    return false;
                }
                if( obj._increment2 != _increment2 )
                {
                    return false;
                }
                if( obj._offset3 != _offset3 )
                {
                    return false;
                }
                if( obj._reservedSlots3 != _reservedSlots3 )
                {
                    return false;
                }
                if( obj._timeout3 != _timeout3 )
                {
                    return false;
                }
                if( obj._increment3 != _increment3 )
                {
                    return false;
                }
                if( obj._offset4 != _offset4 )
                {
                    return false;
                }
                if( obj._reservedSlots4 != _reservedSlots4 )
                {
                    return false;
                }
                if( obj._timeout4 != _timeout4 )
                {
                    return false;
                }
                if( obj._increment4 != _increment4 )
                {
                    return false;
                }
                return true;
            }
            return false;
        }

        public override bool IsOfType(Kind objectType)
        {
            if( objectType == Kind.AisDataLinkManagementMessage )
            {
                return true;
            }
            return base.IsOfType( objectType );
        }

        public int Spare
        {
            get => _spare;
            set
            {
                if( _spare != value )
                {
                    _spare = value;
                    OnPropertyChanged( );
                }
            }
        }
        public int Offset1
        {
            get => _offset1;
            set
            {
                if( _offset1 != value )
                {
                    _offset1 = value;
                    OnPropertyChanged( );
                }
            }
        }
        public int ReservedSlots1
        {
            get => _reservedSlots1;
            set
            {
                if( _reservedSlots1 != value )
                {
                    _reservedSlots1 = value;
                    OnPropertyChanged( );
                }
            }
        }
        public int Timeout1
        {
            get => _timeout1;
            set
            {
                if( _timeout1 != value )
                {
                    _timeout1 = value;
                    OnPropertyChanged( );
                }
            }
        }
        public int Increment1
        {
            get => _increment1;
            set
            {
                if( _increment1 != value )
                {
                    _increment1 = value;
                    OnPropertyChanged( );
                }
            }
        }
        public int? Offset2
        {
            get => _offset2;
            set
            {
                if( _offset2 != value )
                {
                    _offset2 = value;
                    OnPropertyChanged( );
                }
            }
        }
        public int? ReservedSlots2
        {
            get => _reservedSlots2;
            set
            {
                if( _reservedSlots2 != value )
                {
                    _reservedSlots2 = value;
                    OnPropertyChanged( );
                }
            }
        }
        public int? Timeout2
        {
            get => _timeout2;
            set
            {
                if( _timeout2 != value )
                {
                    _timeout2 = value;
                    OnPropertyChanged( );
                }
            }
        }
        public int? Increment2
        {
            get => _increment2;
            set
            {
                if( _increment2 != value )
                {
                    _increment2 = value;
                    OnPropertyChanged( );
                }
            }
        }
        public int? Offset3
        {
            get => _offset3;
            set
            {
                if( _offset3 != value )
                {
                    _offset3 = value;
                    OnPropertyChanged( );
                }
            }
        }
        public int? ReservedSlots3
        {
            get => _reservedSlots3;
            set
            {
                if( _reservedSlots3 != value )
                {
                    _reservedSlots3 = value;
                    OnPropertyChanged( );
                }
            }
        }
        public int? Timeout3
        {
            get => _timeout3;
            set
            {
                if( _timeout3 != value )
                {
                    _timeout3 = value;
                    OnPropertyChanged( );
                }
            }
        }
        public int? Increment3
        {
            get => _increment3;
            set
            {
                if( _increment3 != value )
                {
                    _increment3 = value;
                    OnPropertyChanged( );
                }
            }
        }
        public int? Offset4
        {
            get => _offset4;
            set
            {
                if( _offset4 != value )
                {
                    _offset4 = value;
                    OnPropertyChanged( );
                }
            }
        }
        public int? ReservedSlots4
        {
            get => _reservedSlots4;
            set
            {
                if( _reservedSlots4 != value )
                {
                    _reservedSlots4 = value;
                    OnPropertyChanged( );
                }
            }
        }
        public int? Timeout4
        {
            get => _timeout4;
            set
            {
                if( _timeout4 != value )
                {
                    _timeout4 = value;
                    OnPropertyChanged( );
                }
            }
        }
        public int? Increment4
        {
            get => _increment4;
            set
            {
                if( _increment4 != value )
                {
                    _increment4 = value;
                    OnPropertyChanged( );
                }
            }
        }

        public override void WriteTo( [ DisallowNull ] BinaryWriter destination )
        {
            base.WriteTo( destination );
            destination.Write( _spare );
            destination.Write( _offset1 );
            destination.Write( _reservedSlots1 );
            destination.Write( _timeout1 );
            destination.Write( _increment1 );
            destination.Write( _offset2 );
            destination.Write( _reservedSlots2 );
            destination.Write( _timeout2 );
            destination.Write( _increment2 );
            destination.Write( _offset3 );
            destination.Write( _reservedSlots3 );
            destination.Write( _timeout3 );
            destination.Write( _increment3 );
            destination.Write( _offset4 );
            destination.Write( _reservedSlots4 );
            destination.Write( _timeout4 );
            destination.Write( _increment4 );
        }

        public override void ReadFrom([DisallowNull] BinaryReader source)
        {
            base.ReadFrom( source );
            _spare = source.ReadInt32( );
            _offset1 = source.ReadInt32( );
            _reservedSlots1 = source.ReadInt32( );
            _timeout1 = source.ReadInt32( );
            _increment1 = source.ReadInt32( );
            _offset2 = source.ReadNullableInt32( );
            _reservedSlots2 = source.ReadNullableInt32( );
            _timeout2 = source.ReadNullableInt32( );
            _increment2 = source.ReadNullableInt32( );
            _offset3 = source.ReadNullableInt32( );
            _reservedSlots3 = source.ReadNullableInt32( );
            _timeout3 = source.ReadNullableInt32( );
            _increment3 = source.ReadNullableInt32( );
            _offset4 = source.ReadNullableInt32( );
            _reservedSlots4 = source.ReadNullableInt32( );
            _timeout4 = source.ReadNullableInt32( );
            _increment4 = source.ReadNullableInt32( );
        }

    }
    public class AisExtendedClassBCsPositionReportMessageObject : AisMessageObject
    {
        int _reserved = 0;
        double _speedOverGround = 0.0;
        Types.PositionAccuracy _positionAccuracy = Types.PositionAccuracy.Low;
        double _longitude = 0.0;
        double _latitude = 0.0;
        double _courseOverGround = 0.0;
        int? _trueHeading;
        int _timestamp = 0;
        int _regionalReserved = 0;
        Guid _name;
        Types.ShipType _shipType = Types.ShipType.NotAvailable;
        int _dimensionToBow = 0;
        int _dimensionToStern = 0;
        int _dimensionToPort = 0;
        int _dimensionToStarboard = 0;
        Types.PositionFixType _positionFixType = Types.PositionFixType.Undefined1;
        Types.Raim _raim = Types.Raim.NotInUse;
        bool _dataTerminalReady = false;
        bool _assigned = false;
        int _spare = 0;
        public AisExtendedClassBCsPositionReportMessageObject( )
        {
        }

        public AisExtendedClassBCsPositionReportMessageObject( ObjectState objectState, Guid id, long rowVersion, Guid aisDevice, DateTime receivedTimestamp, long messageSequenceNumber, int repeat, Guid mmsi, int reserved, double speedOverGround, Types.PositionAccuracy positionAccuracy, double longitude, double latitude, double courseOverGround, int? trueHeading, int timestamp, int regionalReserved, Guid name, Types.ShipType shipType, int dimensionToBow, int dimensionToStern, int dimensionToPort, int dimensionToStarboard, Types.PositionFixType positionFixType, Types.Raim raim, bool dataTerminalReady, bool assigned, int spare )
            : base( objectState, id, rowVersion, aisDevice, receivedTimestamp, messageSequenceNumber, repeat, mmsi )
        {
            _reserved = reserved;
            _speedOverGround = speedOverGround;
            _positionAccuracy = positionAccuracy;
            _longitude = longitude;
            _latitude = latitude;
            _courseOverGround = courseOverGround;
            _trueHeading = trueHeading;
            _timestamp = timestamp;
            _regionalReserved = regionalReserved;
            _name = name;
            _shipType = shipType;
            _dimensionToBow = dimensionToBow;
            _dimensionToStern = dimensionToStern;
            _dimensionToPort = dimensionToPort;
            _dimensionToStarboard = dimensionToStarboard;
            _positionFixType = positionFixType;
            _raim = raim;
            _dataTerminalReady = dataTerminalReady;
            _assigned = assigned;
            _spare = spare;
        }

        public override Kind GetObjectType()
        {
            return Kind.AisExtendedClassBCsPositionReportMessage;
        }

        public override BaseData<Kind> Create()
        {
            return new AisExtendedClassBCsPositionReportMessageObject( );
        }

        public override void AssignTo( BaseData<Kind> target )
        {
            base.AssignTo( target );
            var destination = ( AisExtendedClassBCsPositionReportMessageObject )target;
            destination._reserved = _reserved;
            destination._speedOverGround = _speedOverGround;
            destination._positionAccuracy = _positionAccuracy;
            destination._longitude = _longitude;
            destination._latitude = _latitude;
            destination._courseOverGround = _courseOverGround;
            destination._trueHeading = _trueHeading;
            destination._timestamp = _timestamp;
            destination._regionalReserved = _regionalReserved;
            destination._name = _name;
            destination._shipType = _shipType;
            destination._dimensionToBow = _dimensionToBow;
            destination._dimensionToStern = _dimensionToStern;
            destination._dimensionToPort = _dimensionToPort;
            destination._dimensionToStarboard = _dimensionToStarboard;
            destination._positionFixType = _positionFixType;
            destination._raim = _raim;
            destination._dataTerminalReady = _dataTerminalReady;
            destination._assigned = _assigned;
            destination._spare = _spare;
        }

        public override bool Equals(BaseData<Kind>? other)
        {
            if (base.Equals(other))
            {
                var obj = ( AisExtendedClassBCsPositionReportMessageObject )other;
                if( obj._reserved != _reserved )
                {
                    return false;
                }
                if( obj._speedOverGround != _speedOverGround )
                {
                    return false;
                }
                if( obj._positionAccuracy != _positionAccuracy )
                {
                    return false;
                }
                if( obj._longitude != _longitude )
                {
                    return false;
                }
                if( obj._latitude != _latitude )
                {
                    return false;
                }
                if( obj._courseOverGround != _courseOverGround )
                {
                    return false;
                }
                if( obj._trueHeading != _trueHeading )
                {
                    return false;
                }
                if( obj._timestamp != _timestamp )
                {
                    return false;
                }
                if( obj._regionalReserved != _regionalReserved )
                {
                    return false;
                }
                if( obj._name != _name )
                {
                    return false;
                }
                if( obj._shipType != _shipType )
                {
                    return false;
                }
                if( obj._dimensionToBow != _dimensionToBow )
                {
                    return false;
                }
                if( obj._dimensionToStern != _dimensionToStern )
                {
                    return false;
                }
                if( obj._dimensionToPort != _dimensionToPort )
                {
                    return false;
                }
                if( obj._dimensionToStarboard != _dimensionToStarboard )
                {
                    return false;
                }
                if( obj._positionFixType != _positionFixType )
                {
                    return false;
                }
                if( obj._raim != _raim )
                {
                    return false;
                }
                if( obj._dataTerminalReady != _dataTerminalReady )
                {
                    return false;
                }
                if( obj._assigned != _assigned )
                {
                    return false;
                }
                if( obj._spare != _spare )
                {
                    return false;
                }
                return true;
            }
            return false;
        }

        public override bool IsOfType(Kind objectType)
        {
            if( objectType == Kind.AisExtendedClassBCsPositionReportMessage )
            {
                return true;
            }
            return base.IsOfType( objectType );
        }

        public int Reserved
        {
            get => _reserved;
            set
            {
                if( _reserved != value )
                {
                    _reserved = value;
                    OnPropertyChanged( );
                }
            }
        }
        public double SpeedOverGround
        {
            get => _speedOverGround;
            set
            {
                if( _speedOverGround != value )
                {
                    _speedOverGround = value;
                    OnPropertyChanged( );
                }
            }
        }
        public Types.PositionAccuracy PositionAccuracy
        {
            get => _positionAccuracy;
            set
            {
                if( _positionAccuracy != value )
                {
                    _positionAccuracy = value;
                    OnPropertyChanged( );
                }
            }
        }
        public double Longitude
        {
            get => _longitude;
            set
            {
                if( _longitude != value )
                {
                    _longitude = value;
                    OnPropertyChanged( );
                }
            }
        }
        public double Latitude
        {
            get => _latitude;
            set
            {
                if( _latitude != value )
                {
                    _latitude = value;
                    OnPropertyChanged( );
                }
            }
        }
        public double CourseOverGround
        {
            get => _courseOverGround;
            set
            {
                if( _courseOverGround != value )
                {
                    _courseOverGround = value;
                    OnPropertyChanged( );
                }
            }
        }
        public int? TrueHeading
        {
            get => _trueHeading;
            set
            {
                if( _trueHeading != value )
                {
                    _trueHeading = value;
                    OnPropertyChanged( );
                }
            }
        }
        public int Timestamp
        {
            get => _timestamp;
            set
            {
                if( _timestamp != value )
                {
                    _timestamp = value;
                    OnPropertyChanged( );
                }
            }
        }
        public int RegionalReserved
        {
            get => _regionalReserved;
            set
            {
                if( _regionalReserved != value )
                {
                    _regionalReserved = value;
                    OnPropertyChanged( );
                }
            }
        }
        public Guid Name
        {
            get => _name;
            set
            {
                if( _name != value )
                {
                    _name = value;
                    OnPropertyChanged( );
                }
            }
        }
        public Types.ShipType ShipType
        {
            get => _shipType;
            set
            {
                if( _shipType != value )
                {
                    _shipType = value;
                    OnPropertyChanged( );
                }
            }
        }
        public int DimensionToBow
        {
            get => _dimensionToBow;
            set
            {
                if( _dimensionToBow != value )
                {
                    _dimensionToBow = value;
                    OnPropertyChanged( );
                }
            }
        }
        public int DimensionToStern
        {
            get => _dimensionToStern;
            set
            {
                if( _dimensionToStern != value )
                {
                    _dimensionToStern = value;
                    OnPropertyChanged( );
                }
            }
        }
        public int DimensionToPort
        {
            get => _dimensionToPort;
            set
            {
                if( _dimensionToPort != value )
                {
                    _dimensionToPort = value;
                    OnPropertyChanged( );
                }
            }
        }
        public int DimensionToStarboard
        {
            get => _dimensionToStarboard;
            set
            {
                if( _dimensionToStarboard != value )
                {
                    _dimensionToStarboard = value;
                    OnPropertyChanged( );
                }
            }
        }
        public Types.PositionFixType PositionFixType
        {
            get => _positionFixType;
            set
            {
                if( _positionFixType != value )
                {
                    _positionFixType = value;
                    OnPropertyChanged( );
                }
            }
        }
        public Types.Raim Raim
        {
            get => _raim;
            set
            {
                if( _raim != value )
                {
                    _raim = value;
                    OnPropertyChanged( );
                }
            }
        }
        public bool DataTerminalReady
        {
            get => _dataTerminalReady;
            set
            {
                if( _dataTerminalReady != value )
                {
                    _dataTerminalReady = value;
                    OnPropertyChanged( );
                }
            }
        }
        public bool Assigned
        {
            get => _assigned;
            set
            {
                if( _assigned != value )
                {
                    _assigned = value;
                    OnPropertyChanged( );
                }
            }
        }
        public int Spare
        {
            get => _spare;
            set
            {
                if( _spare != value )
                {
                    _spare = value;
                    OnPropertyChanged( );
                }
            }
        }

        public override void WriteTo( [ DisallowNull ] BinaryWriter destination )
        {
            base.WriteTo( destination );
            destination.Write( _reserved );
            destination.Write( _speedOverGround );
            destination.Write( _positionAccuracy );
            destination.Write( _longitude );
            destination.Write( _latitude );
            destination.Write( _courseOverGround );
            destination.Write( _trueHeading );
            destination.Write( _timestamp );
            destination.Write( _regionalReserved );
            destination.Write( _name );
            destination.Write( _shipType );
            destination.Write( _dimensionToBow );
            destination.Write( _dimensionToStern );
            destination.Write( _dimensionToPort );
            destination.Write( _dimensionToStarboard );
            destination.Write( _positionFixType );
            destination.Write( _raim );
            destination.Write( _dataTerminalReady );
            destination.Write( _assigned );
            destination.Write( _spare );
        }

        public override void ReadFrom([DisallowNull] BinaryReader source)
        {
            base.ReadFrom( source );
            _reserved = source.ReadInt32( );
            _speedOverGround = source.ReadDouble( );
            _positionAccuracy = source.ReadEnum<Types.PositionAccuracy>( );
            _longitude = source.ReadDouble( );
            _latitude = source.ReadDouble( );
            _courseOverGround = source.ReadDouble( );
            _trueHeading = source.ReadNullableInt32( );
            _timestamp = source.ReadInt32( );
            _regionalReserved = source.ReadInt32( );
            _name = source.ReadGuid( );
            _shipType = source.ReadEnum<Types.ShipType>( );
            _dimensionToBow = source.ReadInt32( );
            _dimensionToStern = source.ReadInt32( );
            _dimensionToPort = source.ReadInt32( );
            _dimensionToStarboard = source.ReadInt32( );
            _positionFixType = source.ReadEnum<Types.PositionFixType>( );
            _raim = source.ReadEnum<Types.Raim>( );
            _dataTerminalReady = source.ReadBoolean( );
            _assigned = source.ReadBoolean( );
            _spare = source.ReadInt32( );
        }

    }
    public class AisInterrogationMessageObject : AisMessageObject
    {
        Guid _interrogatedMmsi;
        Types.AisMessageType _firstMessageType = Types.AisMessageType.PositionReportClassA;
        int _firstSlotOffset = 0;
        Types.AisMessageType? _secondMessageType;
        int? _secondSlotOffset;
        Guid? _secondStationInterrogationMmsi;
        Types.AisMessageType? _secondStationFirstMessageType;
        int? _secondStationFirstSlotOffset;
        public AisInterrogationMessageObject( )
        {
        }

        public AisInterrogationMessageObject( ObjectState objectState, Guid id, long rowVersion, Guid aisDevice, DateTime receivedTimestamp, long messageSequenceNumber, int repeat, Guid mmsi, Guid interrogatedMmsi, Types.AisMessageType firstMessageType, int firstSlotOffset, Types.AisMessageType? secondMessageType, int? secondSlotOffset, Guid? secondStationInterrogationMmsi, Types.AisMessageType? secondStationFirstMessageType, int? secondStationFirstSlotOffset )
            : base( objectState, id, rowVersion, aisDevice, receivedTimestamp, messageSequenceNumber, repeat, mmsi )
        {
            _interrogatedMmsi = interrogatedMmsi;
            _firstMessageType = firstMessageType;
            _firstSlotOffset = firstSlotOffset;
            _secondMessageType = secondMessageType;
            _secondSlotOffset = secondSlotOffset;
            _secondStationInterrogationMmsi = secondStationInterrogationMmsi;
            _secondStationFirstMessageType = secondStationFirstMessageType;
            _secondStationFirstSlotOffset = secondStationFirstSlotOffset;
        }

        public override Kind GetObjectType()
        {
            return Kind.AisInterrogationMessage;
        }

        public override BaseData<Kind> Create()
        {
            return new AisInterrogationMessageObject( );
        }

        public override void AssignTo( BaseData<Kind> target )
        {
            base.AssignTo( target );
            var destination = ( AisInterrogationMessageObject )target;
            destination._interrogatedMmsi = _interrogatedMmsi;
            destination._firstMessageType = _firstMessageType;
            destination._firstSlotOffset = _firstSlotOffset;
            destination._secondMessageType = _secondMessageType;
            destination._secondSlotOffset = _secondSlotOffset;
            destination._secondStationInterrogationMmsi = _secondStationInterrogationMmsi;
            destination._secondStationFirstMessageType = _secondStationFirstMessageType;
            destination._secondStationFirstSlotOffset = _secondStationFirstSlotOffset;
        }

        public override bool Equals(BaseData<Kind>? other)
        {
            if (base.Equals(other))
            {
                var obj = ( AisInterrogationMessageObject )other;
                if( obj._interrogatedMmsi != _interrogatedMmsi )
                {
                    return false;
                }
                if( obj._firstMessageType != _firstMessageType )
                {
                    return false;
                }
                if( obj._firstSlotOffset != _firstSlotOffset )
                {
                    return false;
                }
                if( obj._secondMessageType != _secondMessageType )
                {
                    return false;
                }
                if( obj._secondSlotOffset != _secondSlotOffset )
                {
                    return false;
                }
                if( obj._secondStationInterrogationMmsi != _secondStationInterrogationMmsi )
                {
                    return false;
                }
                if( obj._secondStationFirstMessageType != _secondStationFirstMessageType )
                {
                    return false;
                }
                if( obj._secondStationFirstSlotOffset != _secondStationFirstSlotOffset )
                {
                    return false;
                }
                return true;
            }
            return false;
        }

        public override bool IsOfType(Kind objectType)
        {
            if( objectType == Kind.AisInterrogationMessage )
            {
                return true;
            }
            return base.IsOfType( objectType );
        }

        public Guid InterrogatedMmsi
        {
            get => _interrogatedMmsi;
            set
            {
                if( _interrogatedMmsi != value )
                {
                    _interrogatedMmsi = value;
                    OnPropertyChanged( );
                }
            }
        }
        public Types.AisMessageType FirstMessageType
        {
            get => _firstMessageType;
            set
            {
                if( _firstMessageType != value )
                {
                    _firstMessageType = value;
                    OnPropertyChanged( );
                }
            }
        }
        public int FirstSlotOffset
        {
            get => _firstSlotOffset;
            set
            {
                if( _firstSlotOffset != value )
                {
                    _firstSlotOffset = value;
                    OnPropertyChanged( );
                }
            }
        }
        public Types.AisMessageType? SecondMessageType
        {
            get => _secondMessageType;
            set
            {
                if( _secondMessageType != value )
                {
                    _secondMessageType = value;
                    OnPropertyChanged( );
                }
            }
        }
        public int? SecondSlotOffset
        {
            get => _secondSlotOffset;
            set
            {
                if( _secondSlotOffset != value )
                {
                    _secondSlotOffset = value;
                    OnPropertyChanged( );
                }
            }
        }
        public Guid? SecondStationInterrogationMmsi
        {
            get => _secondStationInterrogationMmsi;
            set
            {
                if( _secondStationInterrogationMmsi != value )
                {
                    _secondStationInterrogationMmsi = value;
                    OnPropertyChanged( );
                }
            }
        }
        public Types.AisMessageType? SecondStationFirstMessageType
        {
            get => _secondStationFirstMessageType;
            set
            {
                if( _secondStationFirstMessageType != value )
                {
                    _secondStationFirstMessageType = value;
                    OnPropertyChanged( );
                }
            }
        }
        public int? SecondStationFirstSlotOffset
        {
            get => _secondStationFirstSlotOffset;
            set
            {
                if( _secondStationFirstSlotOffset != value )
                {
                    _secondStationFirstSlotOffset = value;
                    OnPropertyChanged( );
                }
            }
        }

        public override void WriteTo( [ DisallowNull ] BinaryWriter destination )
        {
            base.WriteTo( destination );
            destination.Write( _interrogatedMmsi );
            destination.Write( _firstMessageType );
            destination.Write( _firstSlotOffset );
            destination.Write( _secondMessageType );
            destination.Write( _secondSlotOffset );
            destination.Write( _secondStationInterrogationMmsi );
            destination.Write( _secondStationFirstMessageType );
            destination.Write( _secondStationFirstSlotOffset );
        }

        public override void ReadFrom([DisallowNull] BinaryReader source)
        {
            base.ReadFrom( source );
            _interrogatedMmsi = source.ReadGuid( );
            _firstMessageType = source.ReadEnum<Types.AisMessageType>( );
            _firstSlotOffset = source.ReadInt32( );
            _secondMessageType = source.ReadNullableEnum<Types.AisMessageType>( );
            _secondSlotOffset = source.ReadNullableInt32( );
            _secondStationInterrogationMmsi = source.ReadNullableGuid( );
            _secondStationFirstMessageType = source.ReadNullableEnum<Types.AisMessageType>( );
            _secondStationFirstSlotOffset = source.ReadNullableInt32( );
        }

    }
    public abstract class AisPositionReportClassAMessageBaseObject : AisMessageObject
    {
        Types.NavigationStatus _navigationStatus = Types.NavigationStatus.UnderWayUsingEngine;
        int? _rateOfTurn;
        double _speedOverGround = 0.0;
        Types.PositionAccuracy _positionAccuracy = Types.PositionAccuracy.Low;
        double _longitude = 0.0;
        double _latitude = 0.0;
        double _courseOverGround = 0.0;
        int? _trueHeading;
        int _timestamp = 0;
        Types.ManeuverIndicator _maneuverIndicator = Types.ManeuverIndicator.NotAvailable;
        int _spare = 0;
        Types.Raim _raim = Types.Raim.NotInUse;
        int _radioStatus = 0;
        protected AisPositionReportClassAMessageBaseObject( )
        {
        }

        protected AisPositionReportClassAMessageBaseObject( ObjectState objectState, Guid id, long rowVersion, Guid aisDevice, DateTime receivedTimestamp, long messageSequenceNumber, int repeat, Guid mmsi, Types.NavigationStatus navigationStatus, int? rateOfTurn, double speedOverGround, Types.PositionAccuracy positionAccuracy, double longitude, double latitude, double courseOverGround, int? trueHeading, int timestamp, Types.ManeuverIndicator maneuverIndicator, int spare, Types.Raim raim, int radioStatus )
            : base( objectState, id, rowVersion, aisDevice, receivedTimestamp, messageSequenceNumber, repeat, mmsi )
        {
            _navigationStatus = navigationStatus;
            _rateOfTurn = rateOfTurn;
            _speedOverGround = speedOverGround;
            _positionAccuracy = positionAccuracy;
            _longitude = longitude;
            _latitude = latitude;
            _courseOverGround = courseOverGround;
            _trueHeading = trueHeading;
            _timestamp = timestamp;
            _maneuverIndicator = maneuverIndicator;
            _spare = spare;
            _raim = raim;
            _radioStatus = radioStatus;
        }

        public override void AssignTo( BaseData<Kind> target )
        {
            base.AssignTo( target );
            var destination = ( AisPositionReportClassAMessageBaseObject )target;
            destination._navigationStatus = _navigationStatus;
            destination._rateOfTurn = _rateOfTurn;
            destination._speedOverGround = _speedOverGround;
            destination._positionAccuracy = _positionAccuracy;
            destination._longitude = _longitude;
            destination._latitude = _latitude;
            destination._courseOverGround = _courseOverGround;
            destination._trueHeading = _trueHeading;
            destination._timestamp = _timestamp;
            destination._maneuverIndicator = _maneuverIndicator;
            destination._spare = _spare;
            destination._raim = _raim;
            destination._radioStatus = _radioStatus;
        }

        public override bool Equals(BaseData<Kind>? other)
        {
            if (base.Equals(other))
            {
                var obj = ( AisPositionReportClassAMessageBaseObject )other;
                if( obj._navigationStatus != _navigationStatus )
                {
                    return false;
                }
                if( obj._rateOfTurn != _rateOfTurn )
                {
                    return false;
                }
                if( obj._speedOverGround != _speedOverGround )
                {
                    return false;
                }
                if( obj._positionAccuracy != _positionAccuracy )
                {
                    return false;
                }
                if( obj._longitude != _longitude )
                {
                    return false;
                }
                if( obj._latitude != _latitude )
                {
                    return false;
                }
                if( obj._courseOverGround != _courseOverGround )
                {
                    return false;
                }
                if( obj._trueHeading != _trueHeading )
                {
                    return false;
                }
                if( obj._timestamp != _timestamp )
                {
                    return false;
                }
                if( obj._maneuverIndicator != _maneuverIndicator )
                {
                    return false;
                }
                if( obj._spare != _spare )
                {
                    return false;
                }
                if( obj._raim != _raim )
                {
                    return false;
                }
                if( obj._radioStatus != _radioStatus )
                {
                    return false;
                }
                return true;
            }
            return false;
        }

        public override bool IsOfType(Kind objectType)
        {
            if( objectType == Kind.AisPositionReportClassAMessageBase )
            {
                return true;
            }
            return base.IsOfType( objectType );
        }

        public Types.NavigationStatus NavigationStatus
        {
            get => _navigationStatus;
            set
            {
                if( _navigationStatus != value )
                {
                    _navigationStatus = value;
                    OnPropertyChanged( );
                }
            }
        }
        public int? RateOfTurn
        {
            get => _rateOfTurn;
            set
            {
                if( _rateOfTurn != value )
                {
                    _rateOfTurn = value;
                    OnPropertyChanged( );
                }
            }
        }
        public double SpeedOverGround
        {
            get => _speedOverGround;
            set
            {
                if( _speedOverGround != value )
                {
                    _speedOverGround = value;
                    OnPropertyChanged( );
                }
            }
        }
        public Types.PositionAccuracy PositionAccuracy
        {
            get => _positionAccuracy;
            set
            {
                if( _positionAccuracy != value )
                {
                    _positionAccuracy = value;
                    OnPropertyChanged( );
                }
            }
        }
        public double Longitude
        {
            get => _longitude;
            set
            {
                if( _longitude != value )
                {
                    _longitude = value;
                    OnPropertyChanged( );
                }
            }
        }
        public double Latitude
        {
            get => _latitude;
            set
            {
                if( _latitude != value )
                {
                    _latitude = value;
                    OnPropertyChanged( );
                }
            }
        }
        public double CourseOverGround
        {
            get => _courseOverGround;
            set
            {
                if( _courseOverGround != value )
                {
                    _courseOverGround = value;
                    OnPropertyChanged( );
                }
            }
        }
        public int? TrueHeading
        {
            get => _trueHeading;
            set
            {
                if( _trueHeading != value )
                {
                    _trueHeading = value;
                    OnPropertyChanged( );
                }
            }
        }
        public int Timestamp
        {
            get => _timestamp;
            set
            {
                if( _timestamp != value )
                {
                    _timestamp = value;
                    OnPropertyChanged( );
                }
            }
        }
        public Types.ManeuverIndicator ManeuverIndicator
        {
            get => _maneuverIndicator;
            set
            {
                if( _maneuverIndicator != value )
                {
                    _maneuverIndicator = value;
                    OnPropertyChanged( );
                }
            }
        }
        public int Spare
        {
            get => _spare;
            set
            {
                if( _spare != value )
                {
                    _spare = value;
                    OnPropertyChanged( );
                }
            }
        }
        public Types.Raim Raim
        {
            get => _raim;
            set
            {
                if( _raim != value )
                {
                    _raim = value;
                    OnPropertyChanged( );
                }
            }
        }
        public int RadioStatus
        {
            get => _radioStatus;
            set
            {
                if( _radioStatus != value )
                {
                    _radioStatus = value;
                    OnPropertyChanged( );
                }
            }
        }

        public override void WriteTo( [ DisallowNull ] BinaryWriter destination )
        {
            base.WriteTo( destination );
            destination.Write( _navigationStatus );
            destination.Write( _rateOfTurn );
            destination.Write( _speedOverGround );
            destination.Write( _positionAccuracy );
            destination.Write( _longitude );
            destination.Write( _latitude );
            destination.Write( _courseOverGround );
            destination.Write( _trueHeading );
            destination.Write( _timestamp );
            destination.Write( _maneuverIndicator );
            destination.Write( _spare );
            destination.Write( _raim );
            destination.Write( _radioStatus );
        }

        public override void ReadFrom([DisallowNull] BinaryReader source)
        {
            base.ReadFrom( source );
            _navigationStatus = source.ReadEnum<Types.NavigationStatus>( );
            _rateOfTurn = source.ReadNullableInt32( );
            _speedOverGround = source.ReadDouble( );
            _positionAccuracy = source.ReadEnum<Types.PositionAccuracy>( );
            _longitude = source.ReadDouble( );
            _latitude = source.ReadDouble( );
            _courseOverGround = source.ReadDouble( );
            _trueHeading = source.ReadNullableInt32( );
            _timestamp = source.ReadInt32( );
            _maneuverIndicator = source.ReadEnum<Types.ManeuverIndicator>( );
            _spare = source.ReadInt32( );
            _raim = source.ReadEnum<Types.Raim>( );
            _radioStatus = source.ReadInt32( );
        }

    }
    public class AisPositionReportClassAAssignedScheduleMessageObject : AisPositionReportClassAMessageBaseObject
    {
        public AisPositionReportClassAAssignedScheduleMessageObject( )
        {
        }

        public AisPositionReportClassAAssignedScheduleMessageObject( ObjectState objectState, Guid id, long rowVersion, Guid aisDevice, DateTime receivedTimestamp, long messageSequenceNumber, int repeat, Guid mmsi, Types.NavigationStatus navigationStatus, int? rateOfTurn, double speedOverGround, Types.PositionAccuracy positionAccuracy, double longitude, double latitude, double courseOverGround, int? trueHeading, int timestamp, Types.ManeuverIndicator maneuverIndicator, int spare, Types.Raim raim, int radioStatus )
            : base( objectState, id, rowVersion, aisDevice, receivedTimestamp, messageSequenceNumber, repeat, mmsi, navigationStatus, rateOfTurn, speedOverGround, positionAccuracy, longitude, latitude, courseOverGround, trueHeading, timestamp, maneuverIndicator, spare, raim, radioStatus )
        {
        }

        public override Kind GetObjectType()
        {
            return Kind.AisPositionReportClassAAssignedScheduleMessage;
        }

        public override BaseData<Kind> Create()
        {
            return new AisPositionReportClassAAssignedScheduleMessageObject( );
        }

        public override bool IsOfType(Kind objectType)
        {
            if( objectType == Kind.AisPositionReportClassAAssignedScheduleMessage )
            {
                return true;
            }
            return base.IsOfType( objectType );
        }

    }
    public class AisPositionReportClassAMessageObject : AisPositionReportClassAMessageBaseObject
    {
        public AisPositionReportClassAMessageObject( )
        {
        }

        public AisPositionReportClassAMessageObject( ObjectState objectState, Guid id, long rowVersion, Guid aisDevice, DateTime receivedTimestamp, long messageSequenceNumber, int repeat, Guid mmsi, Types.NavigationStatus navigationStatus, int? rateOfTurn, double speedOverGround, Types.PositionAccuracy positionAccuracy, double longitude, double latitude, double courseOverGround, int? trueHeading, int timestamp, Types.ManeuverIndicator maneuverIndicator, int spare, Types.Raim raim, int radioStatus )
            : base( objectState, id, rowVersion, aisDevice, receivedTimestamp, messageSequenceNumber, repeat, mmsi, navigationStatus, rateOfTurn, speedOverGround, positionAccuracy, longitude, latitude, courseOverGround, trueHeading, timestamp, maneuverIndicator, spare, raim, radioStatus )
        {
        }

        public override Kind GetObjectType()
        {
            return Kind.AisPositionReportClassAMessage;
        }

        public override BaseData<Kind> Create()
        {
            return new AisPositionReportClassAMessageObject( );
        }

        public override bool IsOfType(Kind objectType)
        {
            if( objectType == Kind.AisPositionReportClassAMessage )
            {
                return true;
            }
            return base.IsOfType( objectType );
        }

    }
    public class AisPositionReportClassAResponseToInterrogationMessageObject : AisPositionReportClassAMessageBaseObject
    {
        public AisPositionReportClassAResponseToInterrogationMessageObject( )
        {
        }

        public AisPositionReportClassAResponseToInterrogationMessageObject( ObjectState objectState, Guid id, long rowVersion, Guid aisDevice, DateTime receivedTimestamp, long messageSequenceNumber, int repeat, Guid mmsi, Types.NavigationStatus navigationStatus, int? rateOfTurn, double speedOverGround, Types.PositionAccuracy positionAccuracy, double longitude, double latitude, double courseOverGround, int? trueHeading, int timestamp, Types.ManeuverIndicator maneuverIndicator, int spare, Types.Raim raim, int radioStatus )
            : base( objectState, id, rowVersion, aisDevice, receivedTimestamp, messageSequenceNumber, repeat, mmsi, navigationStatus, rateOfTurn, speedOverGround, positionAccuracy, longitude, latitude, courseOverGround, trueHeading, timestamp, maneuverIndicator, spare, raim, radioStatus )
        {
        }

        public override Kind GetObjectType()
        {
            return Kind.AisPositionReportClassAResponseToInterrogationMessage;
        }

        public override BaseData<Kind> Create()
        {
            return new AisPositionReportClassAResponseToInterrogationMessageObject( );
        }

        public override bool IsOfType(Kind objectType)
        {
            if( objectType == Kind.AisPositionReportClassAResponseToInterrogationMessage )
            {
                return true;
            }
            return base.IsOfType( objectType );
        }

    }
    public class AisPositionReportForLongRangeApplicationsMessageObject : AisMessageObject
    {
        Types.PositionAccuracy _positionAccuracy = Types.PositionAccuracy.Low;
        Types.Raim _raim = Types.Raim.NotInUse;
        Types.NavigationStatus _navigationStatus = Types.NavigationStatus.UnderWayUsingEngine;
        double _longitude = 0.0;
        double _latitude = 0.0;
        double _speedOverGround = 0.0;
        double _courseOverGround = 0.0;
        Types.GnssPositionStatus _gnssPositionStatus = Types.GnssPositionStatus.CurrentGnssPosition;
        int _spare = 0;
        public AisPositionReportForLongRangeApplicationsMessageObject( )
        {
        }

        public AisPositionReportForLongRangeApplicationsMessageObject( ObjectState objectState, Guid id, long rowVersion, Guid aisDevice, DateTime receivedTimestamp, long messageSequenceNumber, int repeat, Guid mmsi, Types.PositionAccuracy positionAccuracy, Types.Raim raim, Types.NavigationStatus navigationStatus, double longitude, double latitude, double speedOverGround, double courseOverGround, Types.GnssPositionStatus gnssPositionStatus, int spare )
            : base( objectState, id, rowVersion, aisDevice, receivedTimestamp, messageSequenceNumber, repeat, mmsi )
        {
            _positionAccuracy = positionAccuracy;
            _raim = raim;
            _navigationStatus = navigationStatus;
            _longitude = longitude;
            _latitude = latitude;
            _speedOverGround = speedOverGround;
            _courseOverGround = courseOverGround;
            _gnssPositionStatus = gnssPositionStatus;
            _spare = spare;
        }

        public override Kind GetObjectType()
        {
            return Kind.AisPositionReportForLongRangeApplicationsMessage;
        }

        public override BaseData<Kind> Create()
        {
            return new AisPositionReportForLongRangeApplicationsMessageObject( );
        }

        public override void AssignTo( BaseData<Kind> target )
        {
            base.AssignTo( target );
            var destination = ( AisPositionReportForLongRangeApplicationsMessageObject )target;
            destination._positionAccuracy = _positionAccuracy;
            destination._raim = _raim;
            destination._navigationStatus = _navigationStatus;
            destination._longitude = _longitude;
            destination._latitude = _latitude;
            destination._speedOverGround = _speedOverGround;
            destination._courseOverGround = _courseOverGround;
            destination._gnssPositionStatus = _gnssPositionStatus;
            destination._spare = _spare;
        }

        public override bool Equals(BaseData<Kind>? other)
        {
            if (base.Equals(other))
            {
                var obj = ( AisPositionReportForLongRangeApplicationsMessageObject )other;
                if( obj._positionAccuracy != _positionAccuracy )
                {
                    return false;
                }
                if( obj._raim != _raim )
                {
                    return false;
                }
                if( obj._navigationStatus != _navigationStatus )
                {
                    return false;
                }
                if( obj._longitude != _longitude )
                {
                    return false;
                }
                if( obj._latitude != _latitude )
                {
                    return false;
                }
                if( obj._speedOverGround != _speedOverGround )
                {
                    return false;
                }
                if( obj._courseOverGround != _courseOverGround )
                {
                    return false;
                }
                if( obj._gnssPositionStatus != _gnssPositionStatus )
                {
                    return false;
                }
                if( obj._spare != _spare )
                {
                    return false;
                }
                return true;
            }
            return false;
        }

        public override bool IsOfType(Kind objectType)
        {
            if( objectType == Kind.AisPositionReportForLongRangeApplicationsMessage )
            {
                return true;
            }
            return base.IsOfType( objectType );
        }

        public Types.PositionAccuracy PositionAccuracy
        {
            get => _positionAccuracy;
            set
            {
                if( _positionAccuracy != value )
                {
                    _positionAccuracy = value;
                    OnPropertyChanged( );
                }
            }
        }
        public Types.Raim Raim
        {
            get => _raim;
            set
            {
                if( _raim != value )
                {
                    _raim = value;
                    OnPropertyChanged( );
                }
            }
        }
        public Types.NavigationStatus NavigationStatus
        {
            get => _navigationStatus;
            set
            {
                if( _navigationStatus != value )
                {
                    _navigationStatus = value;
                    OnPropertyChanged( );
                }
            }
        }
        public double Longitude
        {
            get => _longitude;
            set
            {
                if( _longitude != value )
                {
                    _longitude = value;
                    OnPropertyChanged( );
                }
            }
        }
        public double Latitude
        {
            get => _latitude;
            set
            {
                if( _latitude != value )
                {
                    _latitude = value;
                    OnPropertyChanged( );
                }
            }
        }
        public double SpeedOverGround
        {
            get => _speedOverGround;
            set
            {
                if( _speedOverGround != value )
                {
                    _speedOverGround = value;
                    OnPropertyChanged( );
                }
            }
        }
        public double CourseOverGround
        {
            get => _courseOverGround;
            set
            {
                if( _courseOverGround != value )
                {
                    _courseOverGround = value;
                    OnPropertyChanged( );
                }
            }
        }
        public Types.GnssPositionStatus GnssPositionStatus
        {
            get => _gnssPositionStatus;
            set
            {
                if( _gnssPositionStatus != value )
                {
                    _gnssPositionStatus = value;
                    OnPropertyChanged( );
                }
            }
        }
        public int Spare
        {
            get => _spare;
            set
            {
                if( _spare != value )
                {
                    _spare = value;
                    OnPropertyChanged( );
                }
            }
        }

        public override void WriteTo( [ DisallowNull ] BinaryWriter destination )
        {
            base.WriteTo( destination );
            destination.Write( _positionAccuracy );
            destination.Write( _raim );
            destination.Write( _navigationStatus );
            destination.Write( _longitude );
            destination.Write( _latitude );
            destination.Write( _speedOverGround );
            destination.Write( _courseOverGround );
            destination.Write( _gnssPositionStatus );
            destination.Write( _spare );
        }

        public override void ReadFrom([DisallowNull] BinaryReader source)
        {
            base.ReadFrom( source );
            _positionAccuracy = source.ReadEnum<Types.PositionAccuracy>( );
            _raim = source.ReadEnum<Types.Raim>( );
            _navigationStatus = source.ReadEnum<Types.NavigationStatus>( );
            _longitude = source.ReadDouble( );
            _latitude = source.ReadDouble( );
            _speedOverGround = source.ReadDouble( );
            _courseOverGround = source.ReadDouble( );
            _gnssPositionStatus = source.ReadEnum<Types.GnssPositionStatus>( );
            _spare = source.ReadInt32( );
        }

    }
    public class AisSafetyRelatedAcknowledgmentMessageObject : AisMessageObject
    {
        int _spare = 0;
        int _sequenceNumber1 = 0;
        Guid _mmsi1;
        int? _sequenceNumber2;
        Guid? _mmsi2;
        int? _sequenceNumber3;
        Guid? _mmsi3;
        int? _sequenceNumber4;
        Guid? _mmsi4;
        public AisSafetyRelatedAcknowledgmentMessageObject( )
        {
        }

        public AisSafetyRelatedAcknowledgmentMessageObject( ObjectState objectState, Guid id, long rowVersion, Guid aisDevice, DateTime receivedTimestamp, long messageSequenceNumber, int repeat, Guid mmsi, int spare, int sequenceNumber1, Guid mmsi1, int? sequenceNumber2, Guid? mmsi2, int? sequenceNumber3, Guid? mmsi3, int? sequenceNumber4, Guid? mmsi4 )
            : base( objectState, id, rowVersion, aisDevice, receivedTimestamp, messageSequenceNumber, repeat, mmsi )
        {
            _spare = spare;
            _sequenceNumber1 = sequenceNumber1;
            _mmsi1 = mmsi1;
            _sequenceNumber2 = sequenceNumber2;
            _mmsi2 = mmsi2;
            _sequenceNumber3 = sequenceNumber3;
            _mmsi3 = mmsi3;
            _sequenceNumber4 = sequenceNumber4;
            _mmsi4 = mmsi4;
        }

        public override Kind GetObjectType()
        {
            return Kind.AisSafetyRelatedAcknowledgmentMessage;
        }

        public override BaseData<Kind> Create()
        {
            return new AisSafetyRelatedAcknowledgmentMessageObject( );
        }

        public override void AssignTo( BaseData<Kind> target )
        {
            base.AssignTo( target );
            var destination = ( AisSafetyRelatedAcknowledgmentMessageObject )target;
            destination._spare = _spare;
            destination._sequenceNumber1 = _sequenceNumber1;
            destination._mmsi1 = _mmsi1;
            destination._sequenceNumber2 = _sequenceNumber2;
            destination._mmsi2 = _mmsi2;
            destination._sequenceNumber3 = _sequenceNumber3;
            destination._mmsi3 = _mmsi3;
            destination._sequenceNumber4 = _sequenceNumber4;
            destination._mmsi4 = _mmsi4;
        }

        public override bool Equals(BaseData<Kind>? other)
        {
            if (base.Equals(other))
            {
                var obj = ( AisSafetyRelatedAcknowledgmentMessageObject )other;
                if( obj._spare != _spare )
                {
                    return false;
                }
                if( obj._sequenceNumber1 != _sequenceNumber1 )
                {
                    return false;
                }
                if( obj._mmsi1 != _mmsi1 )
                {
                    return false;
                }
                if( obj._sequenceNumber2 != _sequenceNumber2 )
                {
                    return false;
                }
                if( obj._mmsi2 != _mmsi2 )
                {
                    return false;
                }
                if( obj._sequenceNumber3 != _sequenceNumber3 )
                {
                    return false;
                }
                if( obj._mmsi3 != _mmsi3 )
                {
                    return false;
                }
                if( obj._sequenceNumber4 != _sequenceNumber4 )
                {
                    return false;
                }
                if( obj._mmsi4 != _mmsi4 )
                {
                    return false;
                }
                return true;
            }
            return false;
        }

        public override bool IsOfType(Kind objectType)
        {
            if( objectType == Kind.AisSafetyRelatedAcknowledgmentMessage )
            {
                return true;
            }
            return base.IsOfType( objectType );
        }

        public int Spare
        {
            get => _spare;
            set
            {
                if( _spare != value )
                {
                    _spare = value;
                    OnPropertyChanged( );
                }
            }
        }
        public int SequenceNumber1
        {
            get => _sequenceNumber1;
            set
            {
                if( _sequenceNumber1 != value )
                {
                    _sequenceNumber1 = value;
                    OnPropertyChanged( );
                }
            }
        }
        public Guid Mmsi1
        {
            get => _mmsi1;
            set
            {
                if( _mmsi1 != value )
                {
                    _mmsi1 = value;
                    OnPropertyChanged( );
                }
            }
        }
        public int? SequenceNumber2
        {
            get => _sequenceNumber2;
            set
            {
                if( _sequenceNumber2 != value )
                {
                    _sequenceNumber2 = value;
                    OnPropertyChanged( );
                }
            }
        }
        public Guid? Mmsi2
        {
            get => _mmsi2;
            set
            {
                if( _mmsi2 != value )
                {
                    _mmsi2 = value;
                    OnPropertyChanged( );
                }
            }
        }
        public int? SequenceNumber3
        {
            get => _sequenceNumber3;
            set
            {
                if( _sequenceNumber3 != value )
                {
                    _sequenceNumber3 = value;
                    OnPropertyChanged( );
                }
            }
        }
        public Guid? Mmsi3
        {
            get => _mmsi3;
            set
            {
                if( _mmsi3 != value )
                {
                    _mmsi3 = value;
                    OnPropertyChanged( );
                }
            }
        }
        public int? SequenceNumber4
        {
            get => _sequenceNumber4;
            set
            {
                if( _sequenceNumber4 != value )
                {
                    _sequenceNumber4 = value;
                    OnPropertyChanged( );
                }
            }
        }
        public Guid? Mmsi4
        {
            get => _mmsi4;
            set
            {
                if( _mmsi4 != value )
                {
                    _mmsi4 = value;
                    OnPropertyChanged( );
                }
            }
        }

        public override void WriteTo( [ DisallowNull ] BinaryWriter destination )
        {
            base.WriteTo( destination );
            destination.Write( _spare );
            destination.Write( _sequenceNumber1 );
            destination.Write( _mmsi1 );
            destination.Write( _sequenceNumber2 );
            destination.Write( _mmsi2 );
            destination.Write( _sequenceNumber3 );
            destination.Write( _mmsi3 );
            destination.Write( _sequenceNumber4 );
            destination.Write( _mmsi4 );
        }

        public override void ReadFrom([DisallowNull] BinaryReader source)
        {
            base.ReadFrom( source );
            _spare = source.ReadInt32( );
            _sequenceNumber1 = source.ReadInt32( );
            _mmsi1 = source.ReadGuid( );
            _sequenceNumber2 = source.ReadNullableInt32( );
            _mmsi2 = source.ReadNullableGuid( );
            _sequenceNumber3 = source.ReadNullableInt32( );
            _mmsi3 = source.ReadNullableGuid( );
            _sequenceNumber4 = source.ReadNullableInt32( );
            _mmsi4 = source.ReadNullableGuid( );
        }

    }
    public class AisStandardClassBCsPositionReportMessageObject : AisMessageObject
    {
        int _reserved = 0;
        double _speedOverGround = 0.0;
        Types.PositionAccuracy _positionAccuracy = Types.PositionAccuracy.Low;
        double _longitude = 0.0;
        double _latitude = 0.0;
        double _courseOverGround = 0.0;
        int? _trueHeading;
        int _timestamp = 0;
        int _regionalReserved = 0;
        bool _isCsUnit = false;
        bool _hasDisplay = false;
        bool _hasDscCapability = false;
        bool _band = false;
        bool _canAcceptMessage22 = false;
        bool _assigned = false;
        Types.Raim _raim = Types.Raim.NotInUse;
        int _radioStatus = 0;
        public AisStandardClassBCsPositionReportMessageObject( )
        {
        }

        public AisStandardClassBCsPositionReportMessageObject( ObjectState objectState, Guid id, long rowVersion, Guid aisDevice, DateTime receivedTimestamp, long messageSequenceNumber, int repeat, Guid mmsi, int reserved, double speedOverGround, Types.PositionAccuracy positionAccuracy, double longitude, double latitude, double courseOverGround, int? trueHeading, int timestamp, int regionalReserved, bool isCsUnit, bool hasDisplay, bool hasDscCapability, bool band, bool canAcceptMessage22, bool assigned, Types.Raim raim, int radioStatus )
            : base( objectState, id, rowVersion, aisDevice, receivedTimestamp, messageSequenceNumber, repeat, mmsi )
        {
            _reserved = reserved;
            _speedOverGround = speedOverGround;
            _positionAccuracy = positionAccuracy;
            _longitude = longitude;
            _latitude = latitude;
            _courseOverGround = courseOverGround;
            _trueHeading = trueHeading;
            _timestamp = timestamp;
            _regionalReserved = regionalReserved;
            _isCsUnit = isCsUnit;
            _hasDisplay = hasDisplay;
            _hasDscCapability = hasDscCapability;
            _band = band;
            _canAcceptMessage22 = canAcceptMessage22;
            _assigned = assigned;
            _raim = raim;
            _radioStatus = radioStatus;
        }

        public override Kind GetObjectType()
        {
            return Kind.AisStandardClassBCsPositionReportMessage;
        }

        public override BaseData<Kind> Create()
        {
            return new AisStandardClassBCsPositionReportMessageObject( );
        }

        public override void AssignTo( BaseData<Kind> target )
        {
            base.AssignTo( target );
            var destination = ( AisStandardClassBCsPositionReportMessageObject )target;
            destination._reserved = _reserved;
            destination._speedOverGround = _speedOverGround;
            destination._positionAccuracy = _positionAccuracy;
            destination._longitude = _longitude;
            destination._latitude = _latitude;
            destination._courseOverGround = _courseOverGround;
            destination._trueHeading = _trueHeading;
            destination._timestamp = _timestamp;
            destination._regionalReserved = _regionalReserved;
            destination._isCsUnit = _isCsUnit;
            destination._hasDisplay = _hasDisplay;
            destination._hasDscCapability = _hasDscCapability;
            destination._band = _band;
            destination._canAcceptMessage22 = _canAcceptMessage22;
            destination._assigned = _assigned;
            destination._raim = _raim;
            destination._radioStatus = _radioStatus;
        }

        public override bool Equals(BaseData<Kind>? other)
        {
            if (base.Equals(other))
            {
                var obj = ( AisStandardClassBCsPositionReportMessageObject )other;
                if( obj._reserved != _reserved )
                {
                    return false;
                }
                if( obj._speedOverGround != _speedOverGround )
                {
                    return false;
                }
                if( obj._positionAccuracy != _positionAccuracy )
                {
                    return false;
                }
                if( obj._longitude != _longitude )
                {
                    return false;
                }
                if( obj._latitude != _latitude )
                {
                    return false;
                }
                if( obj._courseOverGround != _courseOverGround )
                {
                    return false;
                }
                if( obj._trueHeading != _trueHeading )
                {
                    return false;
                }
                if( obj._timestamp != _timestamp )
                {
                    return false;
                }
                if( obj._regionalReserved != _regionalReserved )
                {
                    return false;
                }
                if( obj._isCsUnit != _isCsUnit )
                {
                    return false;
                }
                if( obj._hasDisplay != _hasDisplay )
                {
                    return false;
                }
                if( obj._hasDscCapability != _hasDscCapability )
                {
                    return false;
                }
                if( obj._band != _band )
                {
                    return false;
                }
                if( obj._canAcceptMessage22 != _canAcceptMessage22 )
                {
                    return false;
                }
                if( obj._assigned != _assigned )
                {
                    return false;
                }
                if( obj._raim != _raim )
                {
                    return false;
                }
                if( obj._radioStatus != _radioStatus )
                {
                    return false;
                }
                return true;
            }
            return false;
        }

        public override bool IsOfType(Kind objectType)
        {
            if( objectType == Kind.AisStandardClassBCsPositionReportMessage )
            {
                return true;
            }
            return base.IsOfType( objectType );
        }

        public int Reserved
        {
            get => _reserved;
            set
            {
                if( _reserved != value )
                {
                    _reserved = value;
                    OnPropertyChanged( );
                }
            }
        }
        public double SpeedOverGround
        {
            get => _speedOverGround;
            set
            {
                if( _speedOverGround != value )
                {
                    _speedOverGround = value;
                    OnPropertyChanged( );
                }
            }
        }
        public Types.PositionAccuracy PositionAccuracy
        {
            get => _positionAccuracy;
            set
            {
                if( _positionAccuracy != value )
                {
                    _positionAccuracy = value;
                    OnPropertyChanged( );
                }
            }
        }
        public double Longitude
        {
            get => _longitude;
            set
            {
                if( _longitude != value )
                {
                    _longitude = value;
                    OnPropertyChanged( );
                }
            }
        }
        public double Latitude
        {
            get => _latitude;
            set
            {
                if( _latitude != value )
                {
                    _latitude = value;
                    OnPropertyChanged( );
                }
            }
        }
        public double CourseOverGround
        {
            get => _courseOverGround;
            set
            {
                if( _courseOverGround != value )
                {
                    _courseOverGround = value;
                    OnPropertyChanged( );
                }
            }
        }
        public int? TrueHeading
        {
            get => _trueHeading;
            set
            {
                if( _trueHeading != value )
                {
                    _trueHeading = value;
                    OnPropertyChanged( );
                }
            }
        }
        public int Timestamp
        {
            get => _timestamp;
            set
            {
                if( _timestamp != value )
                {
                    _timestamp = value;
                    OnPropertyChanged( );
                }
            }
        }
        public int RegionalReserved
        {
            get => _regionalReserved;
            set
            {
                if( _regionalReserved != value )
                {
                    _regionalReserved = value;
                    OnPropertyChanged( );
                }
            }
        }
        public bool IsCsUnit
        {
            get => _isCsUnit;
            set
            {
                if( _isCsUnit != value )
                {
                    _isCsUnit = value;
                    OnPropertyChanged( );
                }
            }
        }
        public bool HasDisplay
        {
            get => _hasDisplay;
            set
            {
                if( _hasDisplay != value )
                {
                    _hasDisplay = value;
                    OnPropertyChanged( );
                }
            }
        }
        public bool HasDscCapability
        {
            get => _hasDscCapability;
            set
            {
                if( _hasDscCapability != value )
                {
                    _hasDscCapability = value;
                    OnPropertyChanged( );
                }
            }
        }
        public bool Band
        {
            get => _band;
            set
            {
                if( _band != value )
                {
                    _band = value;
                    OnPropertyChanged( );
                }
            }
        }
        public bool CanAcceptMessage22
        {
            get => _canAcceptMessage22;
            set
            {
                if( _canAcceptMessage22 != value )
                {
                    _canAcceptMessage22 = value;
                    OnPropertyChanged( );
                }
            }
        }
        public bool Assigned
        {
            get => _assigned;
            set
            {
                if( _assigned != value )
                {
                    _assigned = value;
                    OnPropertyChanged( );
                }
            }
        }
        public Types.Raim Raim
        {
            get => _raim;
            set
            {
                if( _raim != value )
                {
                    _raim = value;
                    OnPropertyChanged( );
                }
            }
        }
        public int RadioStatus
        {
            get => _radioStatus;
            set
            {
                if( _radioStatus != value )
                {
                    _radioStatus = value;
                    OnPropertyChanged( );
                }
            }
        }

        public override void WriteTo( [ DisallowNull ] BinaryWriter destination )
        {
            base.WriteTo( destination );
            destination.Write( _reserved );
            destination.Write( _speedOverGround );
            destination.Write( _positionAccuracy );
            destination.Write( _longitude );
            destination.Write( _latitude );
            destination.Write( _courseOverGround );
            destination.Write( _trueHeading );
            destination.Write( _timestamp );
            destination.Write( _regionalReserved );
            destination.Write( _isCsUnit );
            destination.Write( _hasDisplay );
            destination.Write( _hasDscCapability );
            destination.Write( _band );
            destination.Write( _canAcceptMessage22 );
            destination.Write( _assigned );
            destination.Write( _raim );
            destination.Write( _radioStatus );
        }

        public override void ReadFrom([DisallowNull] BinaryReader source)
        {
            base.ReadFrom( source );
            _reserved = source.ReadInt32( );
            _speedOverGround = source.ReadDouble( );
            _positionAccuracy = source.ReadEnum<Types.PositionAccuracy>( );
            _longitude = source.ReadDouble( );
            _latitude = source.ReadDouble( );
            _courseOverGround = source.ReadDouble( );
            _trueHeading = source.ReadNullableInt32( );
            _timestamp = source.ReadInt32( );
            _regionalReserved = source.ReadInt32( );
            _isCsUnit = source.ReadBoolean( );
            _hasDisplay = source.ReadBoolean( );
            _hasDscCapability = source.ReadBoolean( );
            _band = source.ReadBoolean( );
            _canAcceptMessage22 = source.ReadBoolean( );
            _assigned = source.ReadBoolean( );
            _raim = source.ReadEnum<Types.Raim>( );
            _radioStatus = source.ReadInt32( );
        }

    }
    public class AisStandardSarAircraftPositionReportMessageObject : AisMessageObject
    {
        int _altitude = 0;
        int _speedOverGround = 0;
        Types.PositionAccuracy _positionAccuracy = Types.PositionAccuracy.Low;
        double _longitude = 0.0;
        double _latitude = 0.0;
        double _courseOverGround = 0.0;
        int _timestamp = 0;
        int _reserved = 0;
        bool _dataTerminalReady = false;
        int _spare = 0;
        bool _assigned = false;
        Types.Raim _raim = Types.Raim.NotInUse;
        int _radioStatus = 0;
        public AisStandardSarAircraftPositionReportMessageObject( )
        {
        }

        public AisStandardSarAircraftPositionReportMessageObject( ObjectState objectState, Guid id, long rowVersion, Guid aisDevice, DateTime receivedTimestamp, long messageSequenceNumber, int repeat, Guid mmsi, int altitude, int speedOverGround, Types.PositionAccuracy positionAccuracy, double longitude, double latitude, double courseOverGround, int timestamp, int reserved, bool dataTerminalReady, int spare, bool assigned, Types.Raim raim, int radioStatus )
            : base( objectState, id, rowVersion, aisDevice, receivedTimestamp, messageSequenceNumber, repeat, mmsi )
        {
            _altitude = altitude;
            _speedOverGround = speedOverGround;
            _positionAccuracy = positionAccuracy;
            _longitude = longitude;
            _latitude = latitude;
            _courseOverGround = courseOverGround;
            _timestamp = timestamp;
            _reserved = reserved;
            _dataTerminalReady = dataTerminalReady;
            _spare = spare;
            _assigned = assigned;
            _raim = raim;
            _radioStatus = radioStatus;
        }

        public override Kind GetObjectType()
        {
            return Kind.AisStandardSarAircraftPositionReportMessage;
        }

        public override BaseData<Kind> Create()
        {
            return new AisStandardSarAircraftPositionReportMessageObject( );
        }

        public override void AssignTo( BaseData<Kind> target )
        {
            base.AssignTo( target );
            var destination = ( AisStandardSarAircraftPositionReportMessageObject )target;
            destination._altitude = _altitude;
            destination._speedOverGround = _speedOverGround;
            destination._positionAccuracy = _positionAccuracy;
            destination._longitude = _longitude;
            destination._latitude = _latitude;
            destination._courseOverGround = _courseOverGround;
            destination._timestamp = _timestamp;
            destination._reserved = _reserved;
            destination._dataTerminalReady = _dataTerminalReady;
            destination._spare = _spare;
            destination._assigned = _assigned;
            destination._raim = _raim;
            destination._radioStatus = _radioStatus;
        }

        public override bool Equals(BaseData<Kind>? other)
        {
            if (base.Equals(other))
            {
                var obj = ( AisStandardSarAircraftPositionReportMessageObject )other;
                if( obj._altitude != _altitude )
                {
                    return false;
                }
                if( obj._speedOverGround != _speedOverGround )
                {
                    return false;
                }
                if( obj._positionAccuracy != _positionAccuracy )
                {
                    return false;
                }
                if( obj._longitude != _longitude )
                {
                    return false;
                }
                if( obj._latitude != _latitude )
                {
                    return false;
                }
                if( obj._courseOverGround != _courseOverGround )
                {
                    return false;
                }
                if( obj._timestamp != _timestamp )
                {
                    return false;
                }
                if( obj._reserved != _reserved )
                {
                    return false;
                }
                if( obj._dataTerminalReady != _dataTerminalReady )
                {
                    return false;
                }
                if( obj._spare != _spare )
                {
                    return false;
                }
                if( obj._assigned != _assigned )
                {
                    return false;
                }
                if( obj._raim != _raim )
                {
                    return false;
                }
                if( obj._radioStatus != _radioStatus )
                {
                    return false;
                }
                return true;
            }
            return false;
        }

        public override bool IsOfType(Kind objectType)
        {
            if( objectType == Kind.AisStandardSarAircraftPositionReportMessage )
            {
                return true;
            }
            return base.IsOfType( objectType );
        }

        public int Altitude
        {
            get => _altitude;
            set
            {
                if( _altitude != value )
                {
                    _altitude = value;
                    OnPropertyChanged( );
                }
            }
        }
        public int SpeedOverGround
        {
            get => _speedOverGround;
            set
            {
                if( _speedOverGround != value )
                {
                    _speedOverGround = value;
                    OnPropertyChanged( );
                }
            }
        }
        public Types.PositionAccuracy PositionAccuracy
        {
            get => _positionAccuracy;
            set
            {
                if( _positionAccuracy != value )
                {
                    _positionAccuracy = value;
                    OnPropertyChanged( );
                }
            }
        }
        public double Longitude
        {
            get => _longitude;
            set
            {
                if( _longitude != value )
                {
                    _longitude = value;
                    OnPropertyChanged( );
                }
            }
        }
        public double Latitude
        {
            get => _latitude;
            set
            {
                if( _latitude != value )
                {
                    _latitude = value;
                    OnPropertyChanged( );
                }
            }
        }
        public double CourseOverGround
        {
            get => _courseOverGround;
            set
            {
                if( _courseOverGround != value )
                {
                    _courseOverGround = value;
                    OnPropertyChanged( );
                }
            }
        }
        public int Timestamp
        {
            get => _timestamp;
            set
            {
                if( _timestamp != value )
                {
                    _timestamp = value;
                    OnPropertyChanged( );
                }
            }
        }
        public int Reserved
        {
            get => _reserved;
            set
            {
                if( _reserved != value )
                {
                    _reserved = value;
                    OnPropertyChanged( );
                }
            }
        }
        public bool DataTerminalReady
        {
            get => _dataTerminalReady;
            set
            {
                if( _dataTerminalReady != value )
                {
                    _dataTerminalReady = value;
                    OnPropertyChanged( );
                }
            }
        }
        public int Spare
        {
            get => _spare;
            set
            {
                if( _spare != value )
                {
                    _spare = value;
                    OnPropertyChanged( );
                }
            }
        }
        public bool Assigned
        {
            get => _assigned;
            set
            {
                if( _assigned != value )
                {
                    _assigned = value;
                    OnPropertyChanged( );
                }
            }
        }
        public Types.Raim Raim
        {
            get => _raim;
            set
            {
                if( _raim != value )
                {
                    _raim = value;
                    OnPropertyChanged( );
                }
            }
        }
        public int RadioStatus
        {
            get => _radioStatus;
            set
            {
                if( _radioStatus != value )
                {
                    _radioStatus = value;
                    OnPropertyChanged( );
                }
            }
        }

        public override void WriteTo( [ DisallowNull ] BinaryWriter destination )
        {
            base.WriteTo( destination );
            destination.Write( _altitude );
            destination.Write( _speedOverGround );
            destination.Write( _positionAccuracy );
            destination.Write( _longitude );
            destination.Write( _latitude );
            destination.Write( _courseOverGround );
            destination.Write( _timestamp );
            destination.Write( _reserved );
            destination.Write( _dataTerminalReady );
            destination.Write( _spare );
            destination.Write( _assigned );
            destination.Write( _raim );
            destination.Write( _radioStatus );
        }

        public override void ReadFrom([DisallowNull] BinaryReader source)
        {
            base.ReadFrom( source );
            _altitude = source.ReadInt32( );
            _speedOverGround = source.ReadInt32( );
            _positionAccuracy = source.ReadEnum<Types.PositionAccuracy>( );
            _longitude = source.ReadDouble( );
            _latitude = source.ReadDouble( );
            _courseOverGround = source.ReadDouble( );
            _timestamp = source.ReadInt32( );
            _reserved = source.ReadInt32( );
            _dataTerminalReady = source.ReadBoolean( );
            _spare = source.ReadInt32( );
            _assigned = source.ReadBoolean( );
            _raim = source.ReadEnum<Types.Raim>( );
            _radioStatus = source.ReadInt32( );
        }

    }
    public class AisStaticAndVoyageRelatedDataMessageObject : AisMessageObject
    {
        int _aisVersion = 0;
        Guid _imoNumber;
        Guid _callsign;
        Guid _shipName;
        Types.ShipType _shipType = Types.ShipType.NotAvailable;
        int _dimensionToBow = 0;
        int _dimensionToStern = 0;
        int _dimensionToPort = 0;
        int _dimensionToStarboard = 0;
        Types.PositionFixType _positionFixType = Types.PositionFixType.Undefined1;
        DateTime? _estimatedTimeOfArrival;
        double _draught = 0.0;
        string _destination = string.Empty;
        bool _dataTerminalReady = false;
        int _spare = 0;
        public AisStaticAndVoyageRelatedDataMessageObject( )
        {
        }

        public AisStaticAndVoyageRelatedDataMessageObject( ObjectState objectState, Guid id, long rowVersion, Guid aisDevice, DateTime receivedTimestamp, long messageSequenceNumber, int repeat, Guid mmsi, int aisVersion, Guid imoNumber, Guid callsign, Guid shipName, Types.ShipType shipType, int dimensionToBow, int dimensionToStern, int dimensionToPort, int dimensionToStarboard, Types.PositionFixType positionFixType, DateTime? estimatedTimeOfArrival, double draught, string destination, bool dataTerminalReady, int spare )
            : base( objectState, id, rowVersion, aisDevice, receivedTimestamp, messageSequenceNumber, repeat, mmsi )
        {
            _aisVersion = aisVersion;
            _imoNumber = imoNumber;
            _callsign = callsign;
            _shipName = shipName;
            _shipType = shipType;
            _dimensionToBow = dimensionToBow;
            _dimensionToStern = dimensionToStern;
            _dimensionToPort = dimensionToPort;
            _dimensionToStarboard = dimensionToStarboard;
            _positionFixType = positionFixType;
            _estimatedTimeOfArrival = estimatedTimeOfArrival;
            _draught = draught;
            _destination = destination;
            _dataTerminalReady = dataTerminalReady;
            _spare = spare;
        }

        public override Kind GetObjectType()
        {
            return Kind.AisStaticAndVoyageRelatedDataMessage;
        }

        public override BaseData<Kind> Create()
        {
            return new AisStaticAndVoyageRelatedDataMessageObject( );
        }

        public override void AssignTo( BaseData<Kind> target )
        {
            base.AssignTo( target );
            var destination = ( AisStaticAndVoyageRelatedDataMessageObject )target;
            destination._aisVersion = _aisVersion;
            destination._imoNumber = _imoNumber;
            destination._callsign = _callsign;
            destination._shipName = _shipName;
            destination._shipType = _shipType;
            destination._dimensionToBow = _dimensionToBow;
            destination._dimensionToStern = _dimensionToStern;
            destination._dimensionToPort = _dimensionToPort;
            destination._dimensionToStarboard = _dimensionToStarboard;
            destination._positionFixType = _positionFixType;
            destination._estimatedTimeOfArrival = _estimatedTimeOfArrival;
            destination._draught = _draught;
            destination._destination = _destination;
            destination._dataTerminalReady = _dataTerminalReady;
            destination._spare = _spare;
        }

        public override bool Equals(BaseData<Kind>? other)
        {
            if (base.Equals(other))
            {
                var obj = ( AisStaticAndVoyageRelatedDataMessageObject )other;
                if( obj._aisVersion != _aisVersion )
                {
                    return false;
                }
                if( obj._imoNumber != _imoNumber )
                {
                    return false;
                }
                if( obj._callsign != _callsign )
                {
                    return false;
                }
                if( obj._shipName != _shipName )
                {
                    return false;
                }
                if( obj._shipType != _shipType )
                {
                    return false;
                }
                if( obj._dimensionToBow != _dimensionToBow )
                {
                    return false;
                }
                if( obj._dimensionToStern != _dimensionToStern )
                {
                    return false;
                }
                if( obj._dimensionToPort != _dimensionToPort )
                {
                    return false;
                }
                if( obj._dimensionToStarboard != _dimensionToStarboard )
                {
                    return false;
                }
                if( obj._positionFixType != _positionFixType )
                {
                    return false;
                }
                if( obj._estimatedTimeOfArrival != _estimatedTimeOfArrival )
                {
                    return false;
                }
                if( obj._draught != _draught )
                {
                    return false;
                }
                if( obj._destination != _destination )
                {
                    return false;
                }
                if( obj._dataTerminalReady != _dataTerminalReady )
                {
                    return false;
                }
                if( obj._spare != _spare )
                {
                    return false;
                }
                return true;
            }
            return false;
        }

        public override bool IsOfType(Kind objectType)
        {
            if( objectType == Kind.AisStaticAndVoyageRelatedDataMessage )
            {
                return true;
            }
            return base.IsOfType( objectType );
        }

        public int AisVersion
        {
            get => _aisVersion;
            set
            {
                if( _aisVersion != value )
                {
                    _aisVersion = value;
                    OnPropertyChanged( );
                }
            }
        }
        public Guid ImoNumber
        {
            get => _imoNumber;
            set
            {
                if( _imoNumber != value )
                {
                    _imoNumber = value;
                    OnPropertyChanged( );
                }
            }
        }
        public Guid Callsign
        {
            get => _callsign;
            set
            {
                if( _callsign != value )
                {
                    _callsign = value;
                    OnPropertyChanged( );
                }
            }
        }
        public Guid ShipName
        {
            get => _shipName;
            set
            {
                if( _shipName != value )
                {
                    _shipName = value;
                    OnPropertyChanged( );
                }
            }
        }
        public Types.ShipType ShipType
        {
            get => _shipType;
            set
            {
                if( _shipType != value )
                {
                    _shipType = value;
                    OnPropertyChanged( );
                }
            }
        }
        public int DimensionToBow
        {
            get => _dimensionToBow;
            set
            {
                if( _dimensionToBow != value )
                {
                    _dimensionToBow = value;
                    OnPropertyChanged( );
                }
            }
        }
        public int DimensionToStern
        {
            get => _dimensionToStern;
            set
            {
                if( _dimensionToStern != value )
                {
                    _dimensionToStern = value;
                    OnPropertyChanged( );
                }
            }
        }
        public int DimensionToPort
        {
            get => _dimensionToPort;
            set
            {
                if( _dimensionToPort != value )
                {
                    _dimensionToPort = value;
                    OnPropertyChanged( );
                }
            }
        }
        public int DimensionToStarboard
        {
            get => _dimensionToStarboard;
            set
            {
                if( _dimensionToStarboard != value )
                {
                    _dimensionToStarboard = value;
                    OnPropertyChanged( );
                }
            }
        }
        public Types.PositionFixType PositionFixType
        {
            get => _positionFixType;
            set
            {
                if( _positionFixType != value )
                {
                    _positionFixType = value;
                    OnPropertyChanged( );
                }
            }
        }
        public DateTime? EstimatedTimeOfArrival
        {
            get => _estimatedTimeOfArrival;
            set
            {
                if( _estimatedTimeOfArrival != value )
                {
                    _estimatedTimeOfArrival = value;
                    OnPropertyChanged( );
                }
            }
        }
        public double Draught
        {
            get => _draught;
            set
            {
                if( _draught != value )
                {
                    _draught = value;
                    OnPropertyChanged( );
                }
            }
        }
        public string Destination
        {
            get => _destination;
            set
            {
                if( _destination != value )
                {
                    _destination = value;
                    OnPropertyChanged( );
                }
            }
        }
        public bool DataTerminalReady
        {
            get => _dataTerminalReady;
            set
            {
                if( _dataTerminalReady != value )
                {
                    _dataTerminalReady = value;
                    OnPropertyChanged( );
                }
            }
        }
        public int Spare
        {
            get => _spare;
            set
            {
                if( _spare != value )
                {
                    _spare = value;
                    OnPropertyChanged( );
                }
            }
        }

        public override void WriteTo( [ DisallowNull ] BinaryWriter destination )
        {
            base.WriteTo( destination );
            destination.Write( _aisVersion );
            destination.Write( _imoNumber );
            destination.Write( _callsign );
            destination.Write( _shipName );
            destination.Write( _shipType );
            destination.Write( _dimensionToBow );
            destination.Write( _dimensionToStern );
            destination.Write( _dimensionToPort );
            destination.Write( _dimensionToStarboard );
            destination.Write( _positionFixType );
            destination.Write( _estimatedTimeOfArrival );
            destination.Write( _draught );
            destination.Write( _destination );
            destination.Write( _dataTerminalReady );
            destination.Write( _spare );
        }

        public override void ReadFrom([DisallowNull] BinaryReader source)
        {
            base.ReadFrom( source );
            _aisVersion = source.ReadInt32( );
            _imoNumber = source.ReadGuid( );
            _callsign = source.ReadGuid( );
            _shipName = source.ReadGuid( );
            _shipType = source.ReadEnum<Types.ShipType>( );
            _dimensionToBow = source.ReadInt32( );
            _dimensionToStern = source.ReadInt32( );
            _dimensionToPort = source.ReadInt32( );
            _dimensionToStarboard = source.ReadInt32( );
            _positionFixType = source.ReadEnum<Types.PositionFixType>( );
            _estimatedTimeOfArrival = source.ReadNullableDateTime( );
            _draught = source.ReadDouble( );
            _destination = source.ReadString( );
            _dataTerminalReady = source.ReadBoolean( );
            _spare = source.ReadInt32( );
        }

    }
    public class AisStaticDataReportMessageObject : AisMessageObject
    {
        int _partNumber = 0;
        public AisStaticDataReportMessageObject( )
        {
        }

        public AisStaticDataReportMessageObject( ObjectState objectState, Guid id, long rowVersion, Guid aisDevice, DateTime receivedTimestamp, long messageSequenceNumber, int repeat, Guid mmsi, int partNumber )
            : base( objectState, id, rowVersion, aisDevice, receivedTimestamp, messageSequenceNumber, repeat, mmsi )
        {
            _partNumber = partNumber;
        }

        public override Kind GetObjectType()
        {
            return Kind.AisStaticDataReportMessage;
        }

        public override BaseData<Kind> Create()
        {
            return new AisStaticDataReportMessageObject( );
        }

        public override void AssignTo( BaseData<Kind> target )
        {
            base.AssignTo( target );
            var destination = ( AisStaticDataReportMessageObject )target;
            destination._partNumber = _partNumber;
        }

        public override bool Equals(BaseData<Kind>? other)
        {
            if (base.Equals(other))
            {
                var obj = ( AisStaticDataReportMessageObject )other;
                if( obj._partNumber != _partNumber )
                {
                    return false;
                }
                return true;
            }
            return false;
        }

        public override bool IsOfType(Kind objectType)
        {
            if( objectType == Kind.AisStaticDataReportMessage )
            {
                return true;
            }
            return base.IsOfType( objectType );
        }

        public int PartNumber
        {
            get => _partNumber;
            set
            {
                if( _partNumber != value )
                {
                    _partNumber = value;
                    OnPropertyChanged( );
                }
            }
        }

        public override void WriteTo( [ DisallowNull ] BinaryWriter destination )
        {
            base.WriteTo( destination );
            destination.Write( _partNumber );
        }

        public override void ReadFrom([DisallowNull] BinaryReader source)
        {
            base.ReadFrom( source );
            _partNumber = source.ReadInt32( );
        }

    }
    public class AisStaticDataReportPartAMessageObject : AisStaticDataReportMessageObject
    {
        Guid _shipName;
        int _spare = 0;
        public AisStaticDataReportPartAMessageObject( )
        {
        }

        public AisStaticDataReportPartAMessageObject( ObjectState objectState, Guid id, long rowVersion, Guid aisDevice, DateTime receivedTimestamp, long messageSequenceNumber, int repeat, Guid mmsi, int partNumber, Guid shipName, int spare )
            : base( objectState, id, rowVersion, aisDevice, receivedTimestamp, messageSequenceNumber, repeat, mmsi, partNumber )
        {
            _shipName = shipName;
            _spare = spare;
        }

        public override Kind GetObjectType()
        {
            return Kind.AisStaticDataReportPartAMessage;
        }

        public override BaseData<Kind> Create()
        {
            return new AisStaticDataReportPartAMessageObject( );
        }

        public override void AssignTo( BaseData<Kind> target )
        {
            base.AssignTo( target );
            var destination = ( AisStaticDataReportPartAMessageObject )target;
            destination._shipName = _shipName;
            destination._spare = _spare;
        }

        public override bool Equals(BaseData<Kind>? other)
        {
            if (base.Equals(other))
            {
                var obj = ( AisStaticDataReportPartAMessageObject )other;
                if( obj._shipName != _shipName )
                {
                    return false;
                }
                if( obj._spare != _spare )
                {
                    return false;
                }
                return true;
            }
            return false;
        }

        public override bool IsOfType(Kind objectType)
        {
            if( objectType == Kind.AisStaticDataReportPartAMessage )
            {
                return true;
            }
            return base.IsOfType( objectType );
        }

        public Guid ShipName
        {
            get => _shipName;
            set
            {
                if( _shipName != value )
                {
                    _shipName = value;
                    OnPropertyChanged( );
                }
            }
        }
        public int Spare
        {
            get => _spare;
            set
            {
                if( _spare != value )
                {
                    _spare = value;
                    OnPropertyChanged( );
                }
            }
        }

        public override void WriteTo( [ DisallowNull ] BinaryWriter destination )
        {
            base.WriteTo( destination );
            destination.Write( _shipName );
            destination.Write( _spare );
        }

        public override void ReadFrom([DisallowNull] BinaryReader source)
        {
            base.ReadFrom( source );
            _shipName = source.ReadGuid( );
            _spare = source.ReadInt32( );
        }

    }
    public class AisStaticDataReportPartBMessageObject : AisStaticDataReportMessageObject
    {
        Types.ShipType _shipType = Types.ShipType.NotAvailable;
        string _vendorId = string.Empty;
        int _unitModelCode = 0;
        int _serialNumber = 0;
        Guid _callsign;
        int _dimensionToBow = 0;
        int _dimensionToStern = 0;
        int _dimensionToPort = 0;
        int _dimensionToStarboard = 0;
        Guid? _mothershipMmsi;
        Types.PositionFixType _positionFixType = Types.PositionFixType.Undefined1;
        int _spare = 0;
        public AisStaticDataReportPartBMessageObject( )
        {
        }

        public AisStaticDataReportPartBMessageObject( ObjectState objectState, Guid id, long rowVersion, Guid aisDevice, DateTime receivedTimestamp, long messageSequenceNumber, int repeat, Guid mmsi, int partNumber, Types.ShipType shipType, string vendorId, int unitModelCode, int serialNumber, Guid callsign, int dimensionToBow, int dimensionToStern, int dimensionToPort, int dimensionToStarboard, Guid? mothershipMmsi, Types.PositionFixType positionFixType, int spare )
            : base( objectState, id, rowVersion, aisDevice, receivedTimestamp, messageSequenceNumber, repeat, mmsi, partNumber )
        {
            _shipType = shipType;
            _vendorId = vendorId;
            _unitModelCode = unitModelCode;
            _serialNumber = serialNumber;
            _callsign = callsign;
            _dimensionToBow = dimensionToBow;
            _dimensionToStern = dimensionToStern;
            _dimensionToPort = dimensionToPort;
            _dimensionToStarboard = dimensionToStarboard;
            _mothershipMmsi = mothershipMmsi;
            _positionFixType = positionFixType;
            _spare = spare;
        }

        public override Kind GetObjectType()
        {
            return Kind.AisStaticDataReportPartBMessage;
        }

        public override BaseData<Kind> Create()
        {
            return new AisStaticDataReportPartBMessageObject( );
        }

        public override void AssignTo( BaseData<Kind> target )
        {
            base.AssignTo( target );
            var destination = ( AisStaticDataReportPartBMessageObject )target;
            destination._shipType = _shipType;
            destination._vendorId = _vendorId;
            destination._unitModelCode = _unitModelCode;
            destination._serialNumber = _serialNumber;
            destination._callsign = _callsign;
            destination._dimensionToBow = _dimensionToBow;
            destination._dimensionToStern = _dimensionToStern;
            destination._dimensionToPort = _dimensionToPort;
            destination._dimensionToStarboard = _dimensionToStarboard;
            destination._mothershipMmsi = _mothershipMmsi;
            destination._positionFixType = _positionFixType;
            destination._spare = _spare;
        }

        public override bool Equals(BaseData<Kind>? other)
        {
            if (base.Equals(other))
            {
                var obj = ( AisStaticDataReportPartBMessageObject )other;
                if( obj._shipType != _shipType )
                {
                    return false;
                }
                if( obj._vendorId != _vendorId )
                {
                    return false;
                }
                if( obj._unitModelCode != _unitModelCode )
                {
                    return false;
                }
                if( obj._serialNumber != _serialNumber )
                {
                    return false;
                }
                if( obj._callsign != _callsign )
                {
                    return false;
                }
                if( obj._dimensionToBow != _dimensionToBow )
                {
                    return false;
                }
                if( obj._dimensionToStern != _dimensionToStern )
                {
                    return false;
                }
                if( obj._dimensionToPort != _dimensionToPort )
                {
                    return false;
                }
                if( obj._dimensionToStarboard != _dimensionToStarboard )
                {
                    return false;
                }
                if( obj._mothershipMmsi != _mothershipMmsi )
                {
                    return false;
                }
                if( obj._positionFixType != _positionFixType )
                {
                    return false;
                }
                if( obj._spare != _spare )
                {
                    return false;
                }
                return true;
            }
            return false;
        }

        public override bool IsOfType(Kind objectType)
        {
            if( objectType == Kind.AisStaticDataReportPartBMessage )
            {
                return true;
            }
            return base.IsOfType( objectType );
        }

        public Types.ShipType ShipType
        {
            get => _shipType;
            set
            {
                if( _shipType != value )
                {
                    _shipType = value;
                    OnPropertyChanged( );
                }
            }
        }
        public string VendorId
        {
            get => _vendorId;
            set
            {
                if( _vendorId != value )
                {
                    _vendorId = value;
                    OnPropertyChanged( );
                }
            }
        }
        public int UnitModelCode
        {
            get => _unitModelCode;
            set
            {
                if( _unitModelCode != value )
                {
                    _unitModelCode = value;
                    OnPropertyChanged( );
                }
            }
        }
        public int SerialNumber
        {
            get => _serialNumber;
            set
            {
                if( _serialNumber != value )
                {
                    _serialNumber = value;
                    OnPropertyChanged( );
                }
            }
        }
        public Guid Callsign
        {
            get => _callsign;
            set
            {
                if( _callsign != value )
                {
                    _callsign = value;
                    OnPropertyChanged( );
                }
            }
        }
        public int DimensionToBow
        {
            get => _dimensionToBow;
            set
            {
                if( _dimensionToBow != value )
                {
                    _dimensionToBow = value;
                    OnPropertyChanged( );
                }
            }
        }
        public int DimensionToStern
        {
            get => _dimensionToStern;
            set
            {
                if( _dimensionToStern != value )
                {
                    _dimensionToStern = value;
                    OnPropertyChanged( );
                }
            }
        }
        public int DimensionToPort
        {
            get => _dimensionToPort;
            set
            {
                if( _dimensionToPort != value )
                {
                    _dimensionToPort = value;
                    OnPropertyChanged( );
                }
            }
        }
        public int DimensionToStarboard
        {
            get => _dimensionToStarboard;
            set
            {
                if( _dimensionToStarboard != value )
                {
                    _dimensionToStarboard = value;
                    OnPropertyChanged( );
                }
            }
        }
        public Guid? MothershipMmsi
        {
            get => _mothershipMmsi;
            set
            {
                if( _mothershipMmsi != value )
                {
                    _mothershipMmsi = value;
                    OnPropertyChanged( );
                }
            }
        }
        public Types.PositionFixType PositionFixType
        {
            get => _positionFixType;
            set
            {
                if( _positionFixType != value )
                {
                    _positionFixType = value;
                    OnPropertyChanged( );
                }
            }
        }
        public int Spare
        {
            get => _spare;
            set
            {
                if( _spare != value )
                {
                    _spare = value;
                    OnPropertyChanged( );
                }
            }
        }

        public override void WriteTo( [ DisallowNull ] BinaryWriter destination )
        {
            base.WriteTo( destination );
            destination.Write( _shipType );
            destination.Write( _vendorId );
            destination.Write( _unitModelCode );
            destination.Write( _serialNumber );
            destination.Write( _callsign );
            destination.Write( _dimensionToBow );
            destination.Write( _dimensionToStern );
            destination.Write( _dimensionToPort );
            destination.Write( _dimensionToStarboard );
            destination.Write( _mothershipMmsi );
            destination.Write( _positionFixType );
            destination.Write( _spare );
        }

        public override void ReadFrom([DisallowNull] BinaryReader source)
        {
            base.ReadFrom( source );
            _shipType = source.ReadEnum<Types.ShipType>( );
            _vendorId = source.ReadString( );
            _unitModelCode = source.ReadInt32( );
            _serialNumber = source.ReadInt32( );
            _callsign = source.ReadGuid( );
            _dimensionToBow = source.ReadInt32( );
            _dimensionToStern = source.ReadInt32( );
            _dimensionToPort = source.ReadInt32( );
            _dimensionToStarboard = source.ReadInt32( );
            _mothershipMmsi = source.ReadNullableGuid( );
            _positionFixType = source.ReadEnum<Types.PositionFixType>( );
            _spare = source.ReadInt32( );
        }

    }
    public class AisUtcAndDateInquiryMessageObject : AisMessageObject
    {
        int _spare1 = 0;
        int _destinationMmsi = 0;
        int _spare2 = 0;
        public AisUtcAndDateInquiryMessageObject( )
        {
        }

        public AisUtcAndDateInquiryMessageObject( ObjectState objectState, Guid id, long rowVersion, Guid aisDevice, DateTime receivedTimestamp, long messageSequenceNumber, int repeat, Guid mmsi, int spare1, int destinationMmsi, int spare2 )
            : base( objectState, id, rowVersion, aisDevice, receivedTimestamp, messageSequenceNumber, repeat, mmsi )
        {
            _spare1 = spare1;
            _destinationMmsi = destinationMmsi;
            _spare2 = spare2;
        }

        public override Kind GetObjectType()
        {
            return Kind.AisUtcAndDateInquiryMessage;
        }

        public override BaseData<Kind> Create()
        {
            return new AisUtcAndDateInquiryMessageObject( );
        }

        public override void AssignTo( BaseData<Kind> target )
        {
            base.AssignTo( target );
            var destination = ( AisUtcAndDateInquiryMessageObject )target;
            destination._spare1 = _spare1;
            destination._destinationMmsi = _destinationMmsi;
            destination._spare2 = _spare2;
        }

        public override bool Equals(BaseData<Kind>? other)
        {
            if (base.Equals(other))
            {
                var obj = ( AisUtcAndDateInquiryMessageObject )other;
                if( obj._spare1 != _spare1 )
                {
                    return false;
                }
                if( obj._destinationMmsi != _destinationMmsi )
                {
                    return false;
                }
                if( obj._spare2 != _spare2 )
                {
                    return false;
                }
                return true;
            }
            return false;
        }

        public override bool IsOfType(Kind objectType)
        {
            if( objectType == Kind.AisUtcAndDateInquiryMessage )
            {
                return true;
            }
            return base.IsOfType( objectType );
        }

        public int Spare1
        {
            get => _spare1;
            set
            {
                if( _spare1 != value )
                {
                    _spare1 = value;
                    OnPropertyChanged( );
                }
            }
        }
        public int DestinationMmsi
        {
            get => _destinationMmsi;
            set
            {
                if( _destinationMmsi != value )
                {
                    _destinationMmsi = value;
                    OnPropertyChanged( );
                }
            }
        }
        public int Spare2
        {
            get => _spare2;
            set
            {
                if( _spare2 != value )
                {
                    _spare2 = value;
                    OnPropertyChanged( );
                }
            }
        }

        public override void WriteTo( [ DisallowNull ] BinaryWriter destination )
        {
            base.WriteTo( destination );
            destination.Write( _spare1 );
            destination.Write( _destinationMmsi );
            destination.Write( _spare2 );
        }

        public override void ReadFrom([DisallowNull] BinaryReader source)
        {
            base.ReadFrom( source );
            _spare1 = source.ReadInt32( );
            _destinationMmsi = source.ReadInt32( );
            _spare2 = source.ReadInt32( );
        }

    }
    public class AisUtcAndDateResponseMessageObject : AisMessageObject
    {
        DateTime _datetime;
        Types.PositionAccuracy _positionAccuracy = Types.PositionAccuracy.Low;
        double _longitude = 0.0;
        double _latitude = 0.0;
        Types.PositionFixType _positionFixType = Types.PositionFixType.Undefined1;
        int _spare = 0;
        Types.Raim _raim = Types.Raim.NotInUse;
        int _radioStatus = 0;
        public AisUtcAndDateResponseMessageObject( )
        {
        }

        public AisUtcAndDateResponseMessageObject( ObjectState objectState, Guid id, long rowVersion, Guid aisDevice, DateTime receivedTimestamp, long messageSequenceNumber, int repeat, Guid mmsi, DateTime datetime, Types.PositionAccuracy positionAccuracy, double longitude, double latitude, Types.PositionFixType positionFixType, int spare, Types.Raim raim, int radioStatus )
            : base( objectState, id, rowVersion, aisDevice, receivedTimestamp, messageSequenceNumber, repeat, mmsi )
        {
            _datetime = datetime;
            _positionAccuracy = positionAccuracy;
            _longitude = longitude;
            _latitude = latitude;
            _positionFixType = positionFixType;
            _spare = spare;
            _raim = raim;
            _radioStatus = radioStatus;
        }

        public override Kind GetObjectType()
        {
            return Kind.AisUtcAndDateResponseMessage;
        }

        public override BaseData<Kind> Create()
        {
            return new AisUtcAndDateResponseMessageObject( );
        }

        public override void AssignTo( BaseData<Kind> target )
        {
            base.AssignTo( target );
            var destination = ( AisUtcAndDateResponseMessageObject )target;
            destination._datetime = _datetime;
            destination._positionAccuracy = _positionAccuracy;
            destination._longitude = _longitude;
            destination._latitude = _latitude;
            destination._positionFixType = _positionFixType;
            destination._spare = _spare;
            destination._raim = _raim;
            destination._radioStatus = _radioStatus;
        }

        public override bool Equals(BaseData<Kind>? other)
        {
            if (base.Equals(other))
            {
                var obj = ( AisUtcAndDateResponseMessageObject )other;
                if( obj._datetime != _datetime )
                {
                    return false;
                }
                if( obj._positionAccuracy != _positionAccuracy )
                {
                    return false;
                }
                if( obj._longitude != _longitude )
                {
                    return false;
                }
                if( obj._latitude != _latitude )
                {
                    return false;
                }
                if( obj._positionFixType != _positionFixType )
                {
                    return false;
                }
                if( obj._spare != _spare )
                {
                    return false;
                }
                if( obj._raim != _raim )
                {
                    return false;
                }
                if( obj._radioStatus != _radioStatus )
                {
                    return false;
                }
                return true;
            }
            return false;
        }

        public override bool IsOfType(Kind objectType)
        {
            if( objectType == Kind.AisUtcAndDateResponseMessage )
            {
                return true;
            }
            return base.IsOfType( objectType );
        }

        public DateTime Datetime
        {
            get => _datetime;
            set
            {
                if( _datetime != value )
                {
                    _datetime = value;
                    OnPropertyChanged( );
                }
            }
        }
        public Types.PositionAccuracy PositionAccuracy
        {
            get => _positionAccuracy;
            set
            {
                if( _positionAccuracy != value )
                {
                    _positionAccuracy = value;
                    OnPropertyChanged( );
                }
            }
        }
        public double Longitude
        {
            get => _longitude;
            set
            {
                if( _longitude != value )
                {
                    _longitude = value;
                    OnPropertyChanged( );
                }
            }
        }
        public double Latitude
        {
            get => _latitude;
            set
            {
                if( _latitude != value )
                {
                    _latitude = value;
                    OnPropertyChanged( );
                }
            }
        }
        public Types.PositionFixType PositionFixType
        {
            get => _positionFixType;
            set
            {
                if( _positionFixType != value )
                {
                    _positionFixType = value;
                    OnPropertyChanged( );
                }
            }
        }
        public int Spare
        {
            get => _spare;
            set
            {
                if( _spare != value )
                {
                    _spare = value;
                    OnPropertyChanged( );
                }
            }
        }
        public Types.Raim Raim
        {
            get => _raim;
            set
            {
                if( _raim != value )
                {
                    _raim = value;
                    OnPropertyChanged( );
                }
            }
        }
        public int RadioStatus
        {
            get => _radioStatus;
            set
            {
                if( _radioStatus != value )
                {
                    _radioStatus = value;
                    OnPropertyChanged( );
                }
            }
        }

        public override void WriteTo( [ DisallowNull ] BinaryWriter destination )
        {
            base.WriteTo( destination );
            destination.Write( _datetime );
            destination.Write( _positionAccuracy );
            destination.Write( _longitude );
            destination.Write( _latitude );
            destination.Write( _positionFixType );
            destination.Write( _spare );
            destination.Write( _raim );
            destination.Write( _radioStatus );
        }

        public override void ReadFrom([DisallowNull] BinaryReader source)
        {
            base.ReadFrom( source );
            _datetime = source.ReadDateTime( );
            _positionAccuracy = source.ReadEnum<Types.PositionAccuracy>( );
            _longitude = source.ReadDouble( );
            _latitude = source.ReadDouble( );
            _positionFixType = source.ReadEnum<Types.PositionFixType>( );
            _spare = source.ReadInt32( );
            _raim = source.ReadEnum<Types.Raim>( );
            _radioStatus = source.ReadInt32( );
        }

    }
    public class AlarmStateChangeObject : BaseDataGuid<Kind>
    {
        long _rowVersion = 0;
        Guid _alarm;
        DateTime _timestamp;
        Types.AlarmState _state = Types.AlarmState.Unknown;
        public AlarmStateChangeObject( )
        {
        }

        public AlarmStateChangeObject( ObjectState objectState, Guid id, long rowVersion, Guid alarm, DateTime timestamp, Types.AlarmState state )
            : base( objectState, id )
        {
            _rowVersion = rowVersion;
            _alarm = alarm;
            _timestamp = timestamp;
            _state = state;
        }

        public override Kind GetObjectType()
        {
            return Kind.AlarmStateChange;
        }

        public override BaseData<Kind> Create()
        {
            return new AlarmStateChangeObject( );
        }

        public override void AssignTo( BaseData<Kind> target )
        {
            base.AssignTo( target );
            var destination = ( AlarmStateChangeObject )target;
            destination._rowVersion = _rowVersion;
            destination._alarm = _alarm;
            destination._timestamp = _timestamp;
            destination._state = _state;
        }

        public override bool Equals(BaseData<Kind>? other)
        {
            if (base.Equals(other))
            {
                var obj = ( AlarmStateChangeObject )other;
                if( obj._rowVersion != _rowVersion )
                {
                    return false;
                }
                if( obj._alarm != _alarm )
                {
                    return false;
                }
                if( obj._timestamp != _timestamp )
                {
                    return false;
                }
                if( obj._state != _state )
                {
                    return false;
                }
                return true;
            }
            return false;
        }

        public override bool IsOfType(Kind objectType)
        {
            if( objectType == Kind.AlarmStateChange )
            {
                return true;
            }
            return base.IsOfType( objectType );
        }

        public long RowVersion
        {
            get => _rowVersion;
            set
            {
                if( _rowVersion != value )
                {
                    _rowVersion = value;
                    OnPropertyChanged( );
                }
            }
        }
        public Guid Alarm
        {
            get => _alarm;
            set
            {
                if( _alarm != value )
                {
                    _alarm = value;
                    OnPropertyChanged( );
                }
            }
        }
        public DateTime Timestamp
        {
            get => _timestamp;
            set
            {
                if( _timestamp != value )
                {
                    _timestamp = value;
                    OnPropertyChanged( );
                }
            }
        }
        public Types.AlarmState State
        {
            get => _state;
            set
            {
                if( _state != value )
                {
                    _state = value;
                    OnPropertyChanged( );
                }
            }
        }

        public override void WriteTo( [ DisallowNull ] BinaryWriter destination )
        {
            base.WriteTo( destination );
            destination.Write( _rowVersion );
            destination.Write( _alarm );
            destination.Write( _timestamp );
            destination.Write( _state );
        }

        public override void ReadFrom([DisallowNull] BinaryReader source)
        {
            base.ReadFrom( source );
            _rowVersion = source.ReadInt64( );
            _alarm = source.ReadGuid( );
            _timestamp = source.ReadDateTime( );
            _state = source.ReadEnum<Types.AlarmState>( );
        }

    }
    public class BaseStationTypeObject : BaseDataGuid<Kind>
    {
        long _rowVersion = 0;
        string _name = string.Empty;
        public BaseStationTypeObject( )
        {
        }

        public BaseStationTypeObject( ObjectState objectState, Guid id, long rowVersion, string name )
            : base( objectState, id )
        {
            _rowVersion = rowVersion;
            _name = name;
        }

        public override Kind GetObjectType()
        {
            return Kind.BaseStationType;
        }

        public override BaseData<Kind> Create()
        {
            return new BaseStationTypeObject( );
        }

        public override void AssignTo( BaseData<Kind> target )
        {
            base.AssignTo( target );
            var destination = ( BaseStationTypeObject )target;
            destination._rowVersion = _rowVersion;
            destination._name = _name;
        }

        public override bool Equals(BaseData<Kind>? other)
        {
            if (base.Equals(other))
            {
                var obj = ( BaseStationTypeObject )other;
                if( obj._rowVersion != _rowVersion )
                {
                    return false;
                }
                if( obj._name != _name )
                {
                    return false;
                }
                return true;
            }
            return false;
        }

        public override bool IsOfType(Kind objectType)
        {
            if( objectType == Kind.BaseStationType )
            {
                return true;
            }
            return base.IsOfType( objectType );
        }

        public long RowVersion
        {
            get => _rowVersion;
            set
            {
                if( _rowVersion != value )
                {
                    _rowVersion = value;
                    OnPropertyChanged( );
                }
            }
        }
        public string Name
        {
            get => _name;
            set
            {
                if( _name != value )
                {
                    _name = value;
                    OnPropertyChanged( );
                }
            }
        }

        public override void WriteTo( [ DisallowNull ] BinaryWriter destination )
        {
            base.WriteTo( destination );
            destination.Write( _rowVersion );
            destination.Write( _name );
        }

        public override void ReadFrom([DisallowNull] BinaryReader source)
        {
            base.ReadFrom( source );
            _rowVersion = source.ReadInt64( );
            _name = source.ReadString( );
        }

    }
    public class BinaryTimeseriesValueObject : BaseDataGuid<Kind>
    {
        long _rowVersion = 0;
        Guid _timeseries;
        DateTime _timestamp;
        byte[] _value = Array.Empty<byte>();
        public BinaryTimeseriesValueObject( )
        {
        }

        public BinaryTimeseriesValueObject( ObjectState objectState, Guid id, long rowVersion, Guid timeseries, DateTime timestamp, byte[] value__ )
            : base( objectState, id )
        {
            _rowVersion = rowVersion;
            _timeseries = timeseries;
            _timestamp = timestamp;
            _value = value__;
        }

        public override Kind GetObjectType()
        {
            return Kind.BinaryTimeseriesValue;
        }

        public override BaseData<Kind> Create()
        {
            return new BinaryTimeseriesValueObject( );
        }

        public override void AssignTo( BaseData<Kind> target )
        {
            base.AssignTo( target );
            var destination = ( BinaryTimeseriesValueObject )target;
            destination._rowVersion = _rowVersion;
            destination._timeseries = _timeseries;
            destination._timestamp = _timestamp;
            destination._value = (byte[])_value.Clone( );
        }

        public override bool Equals(BaseData<Kind>? other)
        {
            if (base.Equals(other))
            {
                var obj = ( BinaryTimeseriesValueObject )other;
                if( obj._rowVersion != _rowVersion )
                {
                    return false;
                }
                if( obj._timeseries != _timeseries )
                {
                    return false;
                }
                if( obj._timestamp != _timestamp )
                {
                    return false;
                }
                if( obj._value.Equals( _value ) == false )
                {
                    return false;
                }
                return true;
            }
            return false;
        }

        public override bool IsOfType(Kind objectType)
        {
            if( objectType == Kind.BinaryTimeseriesValue )
            {
                return true;
            }
            return base.IsOfType( objectType );
        }

        public long RowVersion
        {
            get => _rowVersion;
            set
            {
                if( _rowVersion != value )
                {
                    _rowVersion = value;
                    OnPropertyChanged( );
                }
            }
        }
        public Guid Timeseries
        {
            get => _timeseries;
            set
            {
                if( _timeseries != value )
                {
                    _timeseries = value;
                    OnPropertyChanged( );
                }
            }
        }
        public DateTime Timestamp
        {
            get => _timestamp;
            set
            {
                if( _timestamp != value )
                {
                    _timestamp = value;
                    OnPropertyChanged( );
                }
            }
        }
        public byte[] Value
        {
            get => _value;
            set
            {
                if( _value != value )
                {
                    _value = value;
                    OnPropertyChanged( );
                }
            }
        }

        public override void WriteTo( [ DisallowNull ] BinaryWriter destination )
        {
            base.WriteTo( destination );
            destination.Write( _rowVersion );
            destination.Write( _timeseries );
            destination.Write( _timestamp );
            destination.WriteArray( _value );
        }

        public override void ReadFrom([DisallowNull] BinaryReader source)
        {
            base.ReadFrom( source );
            _rowVersion = source.ReadInt64( );
            _timeseries = source.ReadGuid( );
            _timestamp = source.ReadDateTime( );
            _value = source.ReadByteArray( );
        }

    }
    public class BookmarkObject : BaseDataGuid<Kind>
    {
        long _rowVersion = 0;
        Guid _view;
        string _name = string.Empty;
        DateTime? _timestamp;
        double _latitude = 0.0;
        double _longitude = 0.0;
        double _zoomLevel = 0.0;
        public BookmarkObject( )
        {
        }

        public BookmarkObject( ObjectState objectState, Guid id, long rowVersion, Guid view, string name, DateTime? timestamp, double latitude, double longitude, double zoomLevel )
            : base( objectState, id )
        {
            _rowVersion = rowVersion;
            _view = view;
            _name = name;
            _timestamp = timestamp;
            _latitude = latitude;
            _longitude = longitude;
            _zoomLevel = zoomLevel;
        }

        public override Kind GetObjectType()
        {
            return Kind.Bookmark;
        }

        public override BaseData<Kind> Create()
        {
            return new BookmarkObject( );
        }

        public override void AssignTo( BaseData<Kind> target )
        {
            base.AssignTo( target );
            var destination = ( BookmarkObject )target;
            destination._rowVersion = _rowVersion;
            destination._view = _view;
            destination._name = _name;
            destination._timestamp = _timestamp;
            destination._latitude = _latitude;
            destination._longitude = _longitude;
            destination._zoomLevel = _zoomLevel;
        }

        public override bool Equals(BaseData<Kind>? other)
        {
            if (base.Equals(other))
            {
                var obj = ( BookmarkObject )other;
                if( obj._rowVersion != _rowVersion )
                {
                    return false;
                }
                if( obj._view != _view )
                {
                    return false;
                }
                if( obj._name != _name )
                {
                    return false;
                }
                if( obj._timestamp != _timestamp )
                {
                    return false;
                }
                if( obj._latitude != _latitude )
                {
                    return false;
                }
                if( obj._longitude != _longitude )
                {
                    return false;
                }
                if( obj._zoomLevel != _zoomLevel )
                {
                    return false;
                }
                return true;
            }
            return false;
        }

        public override bool IsOfType(Kind objectType)
        {
            if( objectType == Kind.Bookmark )
            {
                return true;
            }
            return base.IsOfType( objectType );
        }

        public long RowVersion
        {
            get => _rowVersion;
            set
            {
                if( _rowVersion != value )
                {
                    _rowVersion = value;
                    OnPropertyChanged( );
                }
            }
        }
        public Guid View
        {
            get => _view;
            set
            {
                if( _view != value )
                {
                    _view = value;
                    OnPropertyChanged( );
                }
            }
        }
        public string Name
        {
            get => _name;
            set
            {
                if( _name != value )
                {
                    _name = value;
                    OnPropertyChanged( );
                }
            }
        }
        public DateTime? Timestamp
        {
            get => _timestamp;
            set
            {
                if( _timestamp != value )
                {
                    _timestamp = value;
                    OnPropertyChanged( );
                }
            }
        }
        public double Latitude
        {
            get => _latitude;
            set
            {
                if( _latitude != value )
                {
                    _latitude = value;
                    OnPropertyChanged( );
                }
            }
        }
        public double Longitude
        {
            get => _longitude;
            set
            {
                if( _longitude != value )
                {
                    _longitude = value;
                    OnPropertyChanged( );
                }
            }
        }
        public double ZoomLevel
        {
            get => _zoomLevel;
            set
            {
                if( _zoomLevel != value )
                {
                    _zoomLevel = value;
                    OnPropertyChanged( );
                }
            }
        }

        public override void WriteTo( [ DisallowNull ] BinaryWriter destination )
        {
            base.WriteTo( destination );
            destination.Write( _rowVersion );
            destination.Write( _view );
            destination.Write( _name );
            destination.Write( _timestamp );
            destination.Write( _latitude );
            destination.Write( _longitude );
            destination.Write( _zoomLevel );
        }

        public override void ReadFrom([DisallowNull] BinaryReader source)
        {
            base.ReadFrom( source );
            _rowVersion = source.ReadInt64( );
            _view = source.ReadGuid( );
            _name = source.ReadString( );
            _timestamp = source.ReadNullableDateTime( );
            _latitude = source.ReadDouble( );
            _longitude = source.ReadDouble( );
            _zoomLevel = source.ReadDouble( );
        }

    }
    public class BooleanTimeseriesValueObject : BaseDataGuid<Kind>
    {
        long _rowVersion = 0;
        Guid _timeseries;
        DateTime _timestamp;
        bool? _value;
        public BooleanTimeseriesValueObject( )
        {
        }

        public BooleanTimeseriesValueObject( ObjectState objectState, Guid id, long rowVersion, Guid timeseries, DateTime timestamp, bool? value__ )
            : base( objectState, id )
        {
            _rowVersion = rowVersion;
            _timeseries = timeseries;
            _timestamp = timestamp;
            _value = value__;
        }

        public override Kind GetObjectType()
        {
            return Kind.BooleanTimeseriesValue;
        }

        public override BaseData<Kind> Create()
        {
            return new BooleanTimeseriesValueObject( );
        }

        public override void AssignTo( BaseData<Kind> target )
        {
            base.AssignTo( target );
            var destination = ( BooleanTimeseriesValueObject )target;
            destination._rowVersion = _rowVersion;
            destination._timeseries = _timeseries;
            destination._timestamp = _timestamp;
            destination._value = _value;
        }

        public override bool Equals(BaseData<Kind>? other)
        {
            if (base.Equals(other))
            {
                var obj = ( BooleanTimeseriesValueObject )other;
                if( obj._rowVersion != _rowVersion )
                {
                    return false;
                }
                if( obj._timeseries != _timeseries )
                {
                    return false;
                }
                if( obj._timestamp != _timestamp )
                {
                    return false;
                }
                if( obj._value != _value )
                {
                    return false;
                }
                return true;
            }
            return false;
        }

        public override bool IsOfType(Kind objectType)
        {
            if( objectType == Kind.BooleanTimeseriesValue )
            {
                return true;
            }
            return base.IsOfType( objectType );
        }

        public long RowVersion
        {
            get => _rowVersion;
            set
            {
                if( _rowVersion != value )
                {
                    _rowVersion = value;
                    OnPropertyChanged( );
                }
            }
        }
        public Guid Timeseries
        {
            get => _timeseries;
            set
            {
                if( _timeseries != value )
                {
                    _timeseries = value;
                    OnPropertyChanged( );
                }
            }
        }
        public DateTime Timestamp
        {
            get => _timestamp;
            set
            {
                if( _timestamp != value )
                {
                    _timestamp = value;
                    OnPropertyChanged( );
                }
            }
        }
        public bool? Value
        {
            get => _value;
            set
            {
                if( _value != value )
                {
                    _value = value;
                    OnPropertyChanged( );
                }
            }
        }

        public override void WriteTo( [ DisallowNull ] BinaryWriter destination )
        {
            base.WriteTo( destination );
            destination.Write( _rowVersion );
            destination.Write( _timeseries );
            destination.Write( _timestamp );
            destination.Write( _value );
        }

        public override void ReadFrom([DisallowNull] BinaryReader source)
        {
            base.ReadFrom( source );
            _rowVersion = source.ReadInt64( );
            _timeseries = source.ReadGuid( );
            _timestamp = source.ReadDateTime( );
            _value = source.ReadNullableBoolean( );
        }

    }
    public class ByteTimeseriesValueObject : BaseDataGuid<Kind>
    {
        long _rowVersion = 0;
        Guid _timeseries;
        DateTime _timestamp;
        byte? _value;
        public ByteTimeseriesValueObject( )
        {
        }

        public ByteTimeseriesValueObject( ObjectState objectState, Guid id, long rowVersion, Guid timeseries, DateTime timestamp, byte? value__ )
            : base( objectState, id )
        {
            _rowVersion = rowVersion;
            _timeseries = timeseries;
            _timestamp = timestamp;
            _value = value__;
        }

        public override Kind GetObjectType()
        {
            return Kind.ByteTimeseriesValue;
        }

        public override BaseData<Kind> Create()
        {
            return new ByteTimeseriesValueObject( );
        }

        public override void AssignTo( BaseData<Kind> target )
        {
            base.AssignTo( target );
            var destination = ( ByteTimeseriesValueObject )target;
            destination._rowVersion = _rowVersion;
            destination._timeseries = _timeseries;
            destination._timestamp = _timestamp;
            destination._value = _value;
        }

        public override bool Equals(BaseData<Kind>? other)
        {
            if (base.Equals(other))
            {
                var obj = ( ByteTimeseriesValueObject )other;
                if( obj._rowVersion != _rowVersion )
                {
                    return false;
                }
                if( obj._timeseries != _timeseries )
                {
                    return false;
                }
                if( obj._timestamp != _timestamp )
                {
                    return false;
                }
                if( obj._value != _value )
                {
                    return false;
                }
                return true;
            }
            return false;
        }

        public override bool IsOfType(Kind objectType)
        {
            if( objectType == Kind.ByteTimeseriesValue )
            {
                return true;
            }
            return base.IsOfType( objectType );
        }

        public long RowVersion
        {
            get => _rowVersion;
            set
            {
                if( _rowVersion != value )
                {
                    _rowVersion = value;
                    OnPropertyChanged( );
                }
            }
        }
        public Guid Timeseries
        {
            get => _timeseries;
            set
            {
                if( _timeseries != value )
                {
                    _timeseries = value;
                    OnPropertyChanged( );
                }
            }
        }
        public DateTime Timestamp
        {
            get => _timestamp;
            set
            {
                if( _timestamp != value )
                {
                    _timestamp = value;
                    OnPropertyChanged( );
                }
            }
        }
        public byte? Value
        {
            get => _value;
            set
            {
                if( _value != value )
                {
                    _value = value;
                    OnPropertyChanged( );
                }
            }
        }

        public override void WriteTo( [ DisallowNull ] BinaryWriter destination )
        {
            base.WriteTo( destination );
            destination.Write( _rowVersion );
            destination.Write( _timeseries );
            destination.Write( _timestamp );
            destination.Write( _value );
        }

        public override void ReadFrom([DisallowNull] BinaryReader source)
        {
            base.ReadFrom( source );
            _rowVersion = source.ReadInt64( );
            _timeseries = source.ReadGuid( );
            _timestamp = source.ReadDateTime( );
            _value = source.ReadNullableByte( );
        }

    }
    public class CameraCommandObject : BaseDataGuid<Kind>
    {
        long _rowVersion = 0;
        Guid _camera;
        DateTime _timestamp;
        Types.DeviceCommandSourceType _deviceCommandSourceType = Types.DeviceCommandSourceType.Unknown;
        Guid _deviceCommandSourceId;
        Guid _reply;
        public CameraCommandObject( )
        {
        }

        public CameraCommandObject( ObjectState objectState, Guid id, long rowVersion, Guid camera, DateTime timestamp, Types.DeviceCommandSourceType deviceCommandSourceType, Guid deviceCommandSourceId, Guid reply )
            : base( objectState, id )
        {
            _rowVersion = rowVersion;
            _camera = camera;
            _timestamp = timestamp;
            _deviceCommandSourceType = deviceCommandSourceType;
            _deviceCommandSourceId = deviceCommandSourceId;
            _reply = reply;
        }

        public override Kind GetObjectType()
        {
            return Kind.CameraCommand;
        }

        public override BaseData<Kind> Create()
        {
            return new CameraCommandObject( );
        }

        public override void AssignTo( BaseData<Kind> target )
        {
            base.AssignTo( target );
            var destination = ( CameraCommandObject )target;
            destination._rowVersion = _rowVersion;
            destination._camera = _camera;
            destination._timestamp = _timestamp;
            destination._deviceCommandSourceType = _deviceCommandSourceType;
            destination._deviceCommandSourceId = _deviceCommandSourceId;
            destination._reply = _reply;
        }

        public override bool Equals(BaseData<Kind>? other)
        {
            if (base.Equals(other))
            {
                var obj = ( CameraCommandObject )other;
                if( obj._rowVersion != _rowVersion )
                {
                    return false;
                }
                if( obj._camera != _camera )
                {
                    return false;
                }
                if( obj._timestamp != _timestamp )
                {
                    return false;
                }
                if( obj._deviceCommandSourceType != _deviceCommandSourceType )
                {
                    return false;
                }
                if( obj._deviceCommandSourceId != _deviceCommandSourceId )
                {
                    return false;
                }
                if( obj._reply != _reply )
                {
                    return false;
                }
                return true;
            }
            return false;
        }

        public override bool IsOfType(Kind objectType)
        {
            if( objectType == Kind.CameraCommand )
            {
                return true;
            }
            return base.IsOfType( objectType );
        }

        public long RowVersion
        {
            get => _rowVersion;
            set
            {
                if( _rowVersion != value )
                {
                    _rowVersion = value;
                    OnPropertyChanged( );
                }
            }
        }
        public Guid Camera
        {
            get => _camera;
            set
            {
                if( _camera != value )
                {
                    _camera = value;
                    OnPropertyChanged( );
                }
            }
        }
        public DateTime Timestamp
        {
            get => _timestamp;
            set
            {
                if( _timestamp != value )
                {
                    _timestamp = value;
                    OnPropertyChanged( );
                }
            }
        }
        public Types.DeviceCommandSourceType DeviceCommandSourceType
        {
            get => _deviceCommandSourceType;
            set
            {
                if( _deviceCommandSourceType != value )
                {
                    _deviceCommandSourceType = value;
                    OnPropertyChanged( );
                }
            }
        }
        public Guid DeviceCommandSourceId
        {
            get => _deviceCommandSourceId;
            set
            {
                if( _deviceCommandSourceId != value )
                {
                    _deviceCommandSourceId = value;
                    OnPropertyChanged( );
                }
            }
        }
        public Guid Reply
        {
            get => _reply;
            set
            {
                if( _reply != value )
                {
                    _reply = value;
                    OnPropertyChanged( );
                }
            }
        }

        public override void WriteTo( [ DisallowNull ] BinaryWriter destination )
        {
            base.WriteTo( destination );
            destination.Write( _rowVersion );
            destination.Write( _camera );
            destination.Write( _timestamp );
            destination.Write( _deviceCommandSourceType );
            destination.Write( _deviceCommandSourceId );
            destination.Write( _reply );
        }

        public override void ReadFrom([DisallowNull] BinaryReader source)
        {
            base.ReadFrom( source );
            _rowVersion = source.ReadInt64( );
            _camera = source.ReadGuid( );
            _timestamp = source.ReadDateTime( );
            _deviceCommandSourceType = source.ReadEnum<Types.DeviceCommandSourceType>( );
            _deviceCommandSourceId = source.ReadGuid( );
            _reply = source.ReadGuid( );
        }

    }
    public class CameraCommandAbsoluteMoveObject : CameraCommandObject
    {
        Types.CameraPanTiltMode _positionPanTiltMode = Types.CameraPanTiltMode.Unknown;
        double? _panAngle;
        double? _tiltAngle;
        Types.CameraFocalLengthMode _positionFocalLengthMode = Types.CameraFocalLengthMode.Unknown;
        double? _focalLength;
        Types.CameraPanTiltMode _speedPanTiltMode = Types.CameraPanTiltMode.Unknown;
        double? _panSpeed;
        double? _tiltSpeed;
        Types.CameraFocalLengthMode _speedFocalLengthMode = Types.CameraFocalLengthMode.Unknown;
        double? _zoomSpeed;
        public CameraCommandAbsoluteMoveObject( )
        {
        }

        public CameraCommandAbsoluteMoveObject( ObjectState objectState, Guid id, long rowVersion, Guid camera, DateTime timestamp, Types.DeviceCommandSourceType deviceCommandSourceType, Guid deviceCommandSourceId, Guid reply, Types.CameraPanTiltMode positionPanTiltMode, double? panAngle, double? tiltAngle, Types.CameraFocalLengthMode positionFocalLengthMode, double? focalLength, Types.CameraPanTiltMode speedPanTiltMode, double? panSpeed, double? tiltSpeed, Types.CameraFocalLengthMode speedFocalLengthMode, double? zoomSpeed )
            : base( objectState, id, rowVersion, camera, timestamp, deviceCommandSourceType, deviceCommandSourceId, reply )
        {
            _positionPanTiltMode = positionPanTiltMode;
            _panAngle = panAngle;
            _tiltAngle = tiltAngle;
            _positionFocalLengthMode = positionFocalLengthMode;
            _focalLength = focalLength;
            _speedPanTiltMode = speedPanTiltMode;
            _panSpeed = panSpeed;
            _tiltSpeed = tiltSpeed;
            _speedFocalLengthMode = speedFocalLengthMode;
            _zoomSpeed = zoomSpeed;
        }

        public override Kind GetObjectType()
        {
            return Kind.CameraCommandAbsoluteMove;
        }

        public override BaseData<Kind> Create()
        {
            return new CameraCommandAbsoluteMoveObject( );
        }

        public override void AssignTo( BaseData<Kind> target )
        {
            base.AssignTo( target );
            var destination = ( CameraCommandAbsoluteMoveObject )target;
            destination._positionPanTiltMode = _positionPanTiltMode;
            destination._panAngle = _panAngle;
            destination._tiltAngle = _tiltAngle;
            destination._positionFocalLengthMode = _positionFocalLengthMode;
            destination._focalLength = _focalLength;
            destination._speedPanTiltMode = _speedPanTiltMode;
            destination._panSpeed = _panSpeed;
            destination._tiltSpeed = _tiltSpeed;
            destination._speedFocalLengthMode = _speedFocalLengthMode;
            destination._zoomSpeed = _zoomSpeed;
        }

        public override bool Equals(BaseData<Kind>? other)
        {
            if (base.Equals(other))
            {
                var obj = ( CameraCommandAbsoluteMoveObject )other;
                if( obj._positionPanTiltMode != _positionPanTiltMode )
                {
                    return false;
                }
                if( obj._panAngle != _panAngle )
                {
                    return false;
                }
                if( obj._tiltAngle != _tiltAngle )
                {
                    return false;
                }
                if( obj._positionFocalLengthMode != _positionFocalLengthMode )
                {
                    return false;
                }
                if( obj._focalLength != _focalLength )
                {
                    return false;
                }
                if( obj._speedPanTiltMode != _speedPanTiltMode )
                {
                    return false;
                }
                if( obj._panSpeed != _panSpeed )
                {
                    return false;
                }
                if( obj._tiltSpeed != _tiltSpeed )
                {
                    return false;
                }
                if( obj._speedFocalLengthMode != _speedFocalLengthMode )
                {
                    return false;
                }
                if( obj._zoomSpeed != _zoomSpeed )
                {
                    return false;
                }
                return true;
            }
            return false;
        }

        public override bool IsOfType(Kind objectType)
        {
            if( objectType == Kind.CameraCommandAbsoluteMove )
            {
                return true;
            }
            return base.IsOfType( objectType );
        }

        public Types.CameraPanTiltMode PositionPanTiltMode
        {
            get => _positionPanTiltMode;
            set
            {
                if( _positionPanTiltMode != value )
                {
                    _positionPanTiltMode = value;
                    OnPropertyChanged( );
                }
            }
        }
        public double? PanAngle
        {
            get => _panAngle;
            set
            {
                if( _panAngle != value )
                {
                    _panAngle = value;
                    OnPropertyChanged( );
                }
            }
        }
        public double? TiltAngle
        {
            get => _tiltAngle;
            set
            {
                if( _tiltAngle != value )
                {
                    _tiltAngle = value;
                    OnPropertyChanged( );
                }
            }
        }
        public Types.CameraFocalLengthMode PositionFocalLengthMode
        {
            get => _positionFocalLengthMode;
            set
            {
                if( _positionFocalLengthMode != value )
                {
                    _positionFocalLengthMode = value;
                    OnPropertyChanged( );
                }
            }
        }
        public double? FocalLength
        {
            get => _focalLength;
            set
            {
                if( _focalLength != value )
                {
                    _focalLength = value;
                    OnPropertyChanged( );
                }
            }
        }
        public Types.CameraPanTiltMode SpeedPanTiltMode
        {
            get => _speedPanTiltMode;
            set
            {
                if( _speedPanTiltMode != value )
                {
                    _speedPanTiltMode = value;
                    OnPropertyChanged( );
                }
            }
        }
        public double? PanSpeed
        {
            get => _panSpeed;
            set
            {
                if( _panSpeed != value )
                {
                    _panSpeed = value;
                    OnPropertyChanged( );
                }
            }
        }
        public double? TiltSpeed
        {
            get => _tiltSpeed;
            set
            {
                if( _tiltSpeed != value )
                {
                    _tiltSpeed = value;
                    OnPropertyChanged( );
                }
            }
        }
        public Types.CameraFocalLengthMode SpeedFocalLengthMode
        {
            get => _speedFocalLengthMode;
            set
            {
                if( _speedFocalLengthMode != value )
                {
                    _speedFocalLengthMode = value;
                    OnPropertyChanged( );
                }
            }
        }
        public double? ZoomSpeed
        {
            get => _zoomSpeed;
            set
            {
                if( _zoomSpeed != value )
                {
                    _zoomSpeed = value;
                    OnPropertyChanged( );
                }
            }
        }

        public override void WriteTo( [ DisallowNull ] BinaryWriter destination )
        {
            base.WriteTo( destination );
            destination.Write( _positionPanTiltMode );
            destination.Write( _panAngle );
            destination.Write( _tiltAngle );
            destination.Write( _positionFocalLengthMode );
            destination.Write( _focalLength );
            destination.Write( _speedPanTiltMode );
            destination.Write( _panSpeed );
            destination.Write( _tiltSpeed );
            destination.Write( _speedFocalLengthMode );
            destination.Write( _zoomSpeed );
        }

        public override void ReadFrom([DisallowNull] BinaryReader source)
        {
            base.ReadFrom( source );
            _positionPanTiltMode = source.ReadEnum<Types.CameraPanTiltMode>( );
            _panAngle = source.ReadNullableDouble( );
            _tiltAngle = source.ReadNullableDouble( );
            _positionFocalLengthMode = source.ReadEnum<Types.CameraFocalLengthMode>( );
            _focalLength = source.ReadNullableDouble( );
            _speedPanTiltMode = source.ReadEnum<Types.CameraPanTiltMode>( );
            _panSpeed = source.ReadNullableDouble( );
            _tiltSpeed = source.ReadNullableDouble( );
            _speedFocalLengthMode = source.ReadEnum<Types.CameraFocalLengthMode>( );
            _zoomSpeed = source.ReadNullableDouble( );
        }

    }
    public class CameraCommandAdjustPanTiltZoomObject : CameraCommandObject
    {
        double? _x;
        double? _y;
        double? _z;
        public CameraCommandAdjustPanTiltZoomObject( )
        {
        }

        public CameraCommandAdjustPanTiltZoomObject( ObjectState objectState, Guid id, long rowVersion, Guid camera, DateTime timestamp, Types.DeviceCommandSourceType deviceCommandSourceType, Guid deviceCommandSourceId, Guid reply, double? x, double? y, double? z )
            : base( objectState, id, rowVersion, camera, timestamp, deviceCommandSourceType, deviceCommandSourceId, reply )
        {
            _x = x;
            _y = y;
            _z = z;
        }

        public override Kind GetObjectType()
        {
            return Kind.CameraCommandAdjustPanTiltZoom;
        }

        public override BaseData<Kind> Create()
        {
            return new CameraCommandAdjustPanTiltZoomObject( );
        }

        public override void AssignTo( BaseData<Kind> target )
        {
            base.AssignTo( target );
            var destination = ( CameraCommandAdjustPanTiltZoomObject )target;
            destination._x = _x;
            destination._y = _y;
            destination._z = _z;
        }

        public override bool Equals(BaseData<Kind>? other)
        {
            if (base.Equals(other))
            {
                var obj = ( CameraCommandAdjustPanTiltZoomObject )other;
                if( obj._x != _x )
                {
                    return false;
                }
                if( obj._y != _y )
                {
                    return false;
                }
                if( obj._z != _z )
                {
                    return false;
                }
                return true;
            }
            return false;
        }

        public override bool IsOfType(Kind objectType)
        {
            if( objectType == Kind.CameraCommandAdjustPanTiltZoom )
            {
                return true;
            }
            return base.IsOfType( objectType );
        }

        public double? X
        {
            get => _x;
            set
            {
                if( _x != value )
                {
                    _x = value;
                    OnPropertyChanged( );
                }
            }
        }
        public double? Y
        {
            get => _y;
            set
            {
                if( _y != value )
                {
                    _y = value;
                    OnPropertyChanged( );
                }
            }
        }
        public double? Z
        {
            get => _z;
            set
            {
                if( _z != value )
                {
                    _z = value;
                    OnPropertyChanged( );
                }
            }
        }

        public override void WriteTo( [ DisallowNull ] BinaryWriter destination )
        {
            base.WriteTo( destination );
            destination.Write( _x );
            destination.Write( _y );
            destination.Write( _z );
        }

        public override void ReadFrom([DisallowNull] BinaryReader source)
        {
            base.ReadFrom( source );
            _x = source.ReadNullableDouble( );
            _y = source.ReadNullableDouble( );
            _z = source.ReadNullableDouble( );
        }

    }
    public class CameraCommandContinuousMoveObject : CameraCommandObject
    {
        bool _normalized = false;
        double? _panVelocity;
        double? _tiltVelocity;
        double? _zoomVelocity;
        TimeSpan? _duration;
        public CameraCommandContinuousMoveObject( )
        {
        }

        public CameraCommandContinuousMoveObject( ObjectState objectState, Guid id, long rowVersion, Guid camera, DateTime timestamp, Types.DeviceCommandSourceType deviceCommandSourceType, Guid deviceCommandSourceId, Guid reply, bool normalized, double? panVelocity, double? tiltVelocity, double? zoomVelocity, TimeSpan? duration )
            : base( objectState, id, rowVersion, camera, timestamp, deviceCommandSourceType, deviceCommandSourceId, reply )
        {
            _normalized = normalized;
            _panVelocity = panVelocity;
            _tiltVelocity = tiltVelocity;
            _zoomVelocity = zoomVelocity;
            _duration = duration;
        }

        public override Kind GetObjectType()
        {
            return Kind.CameraCommandContinuousMove;
        }

        public override BaseData<Kind> Create()
        {
            return new CameraCommandContinuousMoveObject( );
        }

        public override void AssignTo( BaseData<Kind> target )
        {
            base.AssignTo( target );
            var destination = ( CameraCommandContinuousMoveObject )target;
            destination._normalized = _normalized;
            destination._panVelocity = _panVelocity;
            destination._tiltVelocity = _tiltVelocity;
            destination._zoomVelocity = _zoomVelocity;
            destination._duration = _duration;
        }

        public override bool Equals(BaseData<Kind>? other)
        {
            if (base.Equals(other))
            {
                var obj = ( CameraCommandContinuousMoveObject )other;
                if( obj._normalized != _normalized )
                {
                    return false;
                }
                if( obj._panVelocity != _panVelocity )
                {
                    return false;
                }
                if( obj._tiltVelocity != _tiltVelocity )
                {
                    return false;
                }
                if( obj._zoomVelocity != _zoomVelocity )
                {
                    return false;
                }
                if( obj._duration != _duration )
                {
                    return false;
                }
                return true;
            }
            return false;
        }

        public override bool IsOfType(Kind objectType)
        {
            if( objectType == Kind.CameraCommandContinuousMove )
            {
                return true;
            }
            return base.IsOfType( objectType );
        }

        public bool Normalized
        {
            get => _normalized;
            set
            {
                if( _normalized != value )
                {
                    _normalized = value;
                    OnPropertyChanged( );
                }
            }
        }
        public double? PanVelocity
        {
            get => _panVelocity;
            set
            {
                if( _panVelocity != value )
                {
                    _panVelocity = value;
                    OnPropertyChanged( );
                }
            }
        }
        public double? TiltVelocity
        {
            get => _tiltVelocity;
            set
            {
                if( _tiltVelocity != value )
                {
                    _tiltVelocity = value;
                    OnPropertyChanged( );
                }
            }
        }
        public double? ZoomVelocity
        {
            get => _zoomVelocity;
            set
            {
                if( _zoomVelocity != value )
                {
                    _zoomVelocity = value;
                    OnPropertyChanged( );
                }
            }
        }
        public TimeSpan? Duration
        {
            get => _duration;
            set
            {
                if( _duration != value )
                {
                    _duration = value;
                    OnPropertyChanged( );
                }
            }
        }

        public override void WriteTo( [ DisallowNull ] BinaryWriter destination )
        {
            base.WriteTo( destination );
            destination.Write( _normalized );
            destination.Write( _panVelocity );
            destination.Write( _tiltVelocity );
            destination.Write( _zoomVelocity );
            destination.Write( _duration );
        }

        public override void ReadFrom([DisallowNull] BinaryReader source)
        {
            base.ReadFrom( source );
            _normalized = source.ReadBoolean( );
            _panVelocity = source.ReadNullableDouble( );
            _tiltVelocity = source.ReadNullableDouble( );
            _zoomVelocity = source.ReadNullableDouble( );
            _duration = source.ReadNullableTimeSpan( );
        }

    }
    public class CameraCommandGeoMoveObject : CameraCommandObject
    {
        double _latitude = 0.0;
        double _longitude = 0.0;
        double? _altitude;
        double? _viewportWidth;
        double? _viewportHeight;
        public CameraCommandGeoMoveObject( )
        {
        }

        public CameraCommandGeoMoveObject( ObjectState objectState, Guid id, long rowVersion, Guid camera, DateTime timestamp, Types.DeviceCommandSourceType deviceCommandSourceType, Guid deviceCommandSourceId, Guid reply, double latitude, double longitude, double? altitude, double? viewportWidth, double? viewportHeight )
            : base( objectState, id, rowVersion, camera, timestamp, deviceCommandSourceType, deviceCommandSourceId, reply )
        {
            _latitude = latitude;
            _longitude = longitude;
            _altitude = altitude;
            _viewportWidth = viewportWidth;
            _viewportHeight = viewportHeight;
        }

        public override Kind GetObjectType()
        {
            return Kind.CameraCommandGeoMove;
        }

        public override BaseData<Kind> Create()
        {
            return new CameraCommandGeoMoveObject( );
        }

        public override void AssignTo( BaseData<Kind> target )
        {
            base.AssignTo( target );
            var destination = ( CameraCommandGeoMoveObject )target;
            destination._latitude = _latitude;
            destination._longitude = _longitude;
            destination._altitude = _altitude;
            destination._viewportWidth = _viewportWidth;
            destination._viewportHeight = _viewportHeight;
        }

        public override bool Equals(BaseData<Kind>? other)
        {
            if (base.Equals(other))
            {
                var obj = ( CameraCommandGeoMoveObject )other;
                if( obj._latitude != _latitude )
                {
                    return false;
                }
                if( obj._longitude != _longitude )
                {
                    return false;
                }
                if( obj._altitude != _altitude )
                {
                    return false;
                }
                if( obj._viewportWidth != _viewportWidth )
                {
                    return false;
                }
                if( obj._viewportHeight != _viewportHeight )
                {
                    return false;
                }
                return true;
            }
            return false;
        }

        public override bool IsOfType(Kind objectType)
        {
            if( objectType == Kind.CameraCommandGeoMove )
            {
                return true;
            }
            return base.IsOfType( objectType );
        }

        public double Latitude
        {
            get => _latitude;
            set
            {
                if( _latitude != value )
                {
                    _latitude = value;
                    OnPropertyChanged( );
                }
            }
        }
        public double Longitude
        {
            get => _longitude;
            set
            {
                if( _longitude != value )
                {
                    _longitude = value;
                    OnPropertyChanged( );
                }
            }
        }
        public double? Altitude
        {
            get => _altitude;
            set
            {
                if( _altitude != value )
                {
                    _altitude = value;
                    OnPropertyChanged( );
                }
            }
        }
        public double? ViewportWidth
        {
            get => _viewportWidth;
            set
            {
                if( _viewportWidth != value )
                {
                    _viewportWidth = value;
                    OnPropertyChanged( );
                }
            }
        }
        public double? ViewportHeight
        {
            get => _viewportHeight;
            set
            {
                if( _viewportHeight != value )
                {
                    _viewportHeight = value;
                    OnPropertyChanged( );
                }
            }
        }

        public override void WriteTo( [ DisallowNull ] BinaryWriter destination )
        {
            base.WriteTo( destination );
            destination.Write( _latitude );
            destination.Write( _longitude );
            destination.Write( _altitude );
            destination.Write( _viewportWidth );
            destination.Write( _viewportHeight );
        }

        public override void ReadFrom([DisallowNull] BinaryReader source)
        {
            base.ReadFrom( source );
            _latitude = source.ReadDouble( );
            _longitude = source.ReadDouble( );
            _altitude = source.ReadNullableDouble( );
            _viewportWidth = source.ReadNullableDouble( );
            _viewportHeight = source.ReadNullableDouble( );
        }

    }
    public class CameraCommandRelativeMoveObject : CameraCommandObject
    {
        bool _normalized = false;
        double? _panAngle;
        double? _tiltAngle;
        double? _focalLength;
        double? _panSpeed;
        double? _tiltSpeed;
        double? _zoomSpeed;
        public CameraCommandRelativeMoveObject( )
        {
        }

        public CameraCommandRelativeMoveObject( ObjectState objectState, Guid id, long rowVersion, Guid camera, DateTime timestamp, Types.DeviceCommandSourceType deviceCommandSourceType, Guid deviceCommandSourceId, Guid reply, bool normalized, double? panAngle, double? tiltAngle, double? focalLength, double? panSpeed, double? tiltSpeed, double? zoomSpeed )
            : base( objectState, id, rowVersion, camera, timestamp, deviceCommandSourceType, deviceCommandSourceId, reply )
        {
            _normalized = normalized;
            _panAngle = panAngle;
            _tiltAngle = tiltAngle;
            _focalLength = focalLength;
            _panSpeed = panSpeed;
            _tiltSpeed = tiltSpeed;
            _zoomSpeed = zoomSpeed;
        }

        public override Kind GetObjectType()
        {
            return Kind.CameraCommandRelativeMove;
        }

        public override BaseData<Kind> Create()
        {
            return new CameraCommandRelativeMoveObject( );
        }

        public override void AssignTo( BaseData<Kind> target )
        {
            base.AssignTo( target );
            var destination = ( CameraCommandRelativeMoveObject )target;
            destination._normalized = _normalized;
            destination._panAngle = _panAngle;
            destination._tiltAngle = _tiltAngle;
            destination._focalLength = _focalLength;
            destination._panSpeed = _panSpeed;
            destination._tiltSpeed = _tiltSpeed;
            destination._zoomSpeed = _zoomSpeed;
        }

        public override bool Equals(BaseData<Kind>? other)
        {
            if (base.Equals(other))
            {
                var obj = ( CameraCommandRelativeMoveObject )other;
                if( obj._normalized != _normalized )
                {
                    return false;
                }
                if( obj._panAngle != _panAngle )
                {
                    return false;
                }
                if( obj._tiltAngle != _tiltAngle )
                {
                    return false;
                }
                if( obj._focalLength != _focalLength )
                {
                    return false;
                }
                if( obj._panSpeed != _panSpeed )
                {
                    return false;
                }
                if( obj._tiltSpeed != _tiltSpeed )
                {
                    return false;
                }
                if( obj._zoomSpeed != _zoomSpeed )
                {
                    return false;
                }
                return true;
            }
            return false;
        }

        public override bool IsOfType(Kind objectType)
        {
            if( objectType == Kind.CameraCommandRelativeMove )
            {
                return true;
            }
            return base.IsOfType( objectType );
        }

        public bool Normalized
        {
            get => _normalized;
            set
            {
                if( _normalized != value )
                {
                    _normalized = value;
                    OnPropertyChanged( );
                }
            }
        }
        public double? PanAngle
        {
            get => _panAngle;
            set
            {
                if( _panAngle != value )
                {
                    _panAngle = value;
                    OnPropertyChanged( );
                }
            }
        }
        public double? TiltAngle
        {
            get => _tiltAngle;
            set
            {
                if( _tiltAngle != value )
                {
                    _tiltAngle = value;
                    OnPropertyChanged( );
                }
            }
        }
        public double? FocalLength
        {
            get => _focalLength;
            set
            {
                if( _focalLength != value )
                {
                    _focalLength = value;
                    OnPropertyChanged( );
                }
            }
        }
        public double? PanSpeed
        {
            get => _panSpeed;
            set
            {
                if( _panSpeed != value )
                {
                    _panSpeed = value;
                    OnPropertyChanged( );
                }
            }
        }
        public double? TiltSpeed
        {
            get => _tiltSpeed;
            set
            {
                if( _tiltSpeed != value )
                {
                    _tiltSpeed = value;
                    OnPropertyChanged( );
                }
            }
        }
        public double? ZoomSpeed
        {
            get => _zoomSpeed;
            set
            {
                if( _zoomSpeed != value )
                {
                    _zoomSpeed = value;
                    OnPropertyChanged( );
                }
            }
        }

        public override void WriteTo( [ DisallowNull ] BinaryWriter destination )
        {
            base.WriteTo( destination );
            destination.Write( _normalized );
            destination.Write( _panAngle );
            destination.Write( _tiltAngle );
            destination.Write( _focalLength );
            destination.Write( _panSpeed );
            destination.Write( _tiltSpeed );
            destination.Write( _zoomSpeed );
        }

        public override void ReadFrom([DisallowNull] BinaryReader source)
        {
            base.ReadFrom( source );
            _normalized = source.ReadBoolean( );
            _panAngle = source.ReadNullableDouble( );
            _tiltAngle = source.ReadNullableDouble( );
            _focalLength = source.ReadNullableDouble( );
            _panSpeed = source.ReadNullableDouble( );
            _tiltSpeed = source.ReadNullableDouble( );
            _zoomSpeed = source.ReadNullableDouble( );
        }

    }
    public class CameraCommandReleasePTZOwnershipObject : CameraCommandObject
    {
        public CameraCommandReleasePTZOwnershipObject( )
        {
        }

        public CameraCommandReleasePTZOwnershipObject( ObjectState objectState, Guid id, long rowVersion, Guid camera, DateTime timestamp, Types.DeviceCommandSourceType deviceCommandSourceType, Guid deviceCommandSourceId, Guid reply )
            : base( objectState, id, rowVersion, camera, timestamp, deviceCommandSourceType, deviceCommandSourceId, reply )
        {
        }

        public override Kind GetObjectType()
        {
            return Kind.CameraCommandReleasePTZOwnership;
        }

        public override BaseData<Kind> Create()
        {
            return new CameraCommandReleasePTZOwnershipObject( );
        }

        public override bool IsOfType(Kind objectType)
        {
            if( objectType == Kind.CameraCommandReleasePTZOwnership )
            {
                return true;
            }
            return base.IsOfType( objectType );
        }

    }
    public class CameraCommandRequestPTZOwnershipObject : CameraCommandObject
    {
        public CameraCommandRequestPTZOwnershipObject( )
        {
        }

        public CameraCommandRequestPTZOwnershipObject( ObjectState objectState, Guid id, long rowVersion, Guid camera, DateTime timestamp, Types.DeviceCommandSourceType deviceCommandSourceType, Guid deviceCommandSourceId, Guid reply )
            : base( objectState, id, rowVersion, camera, timestamp, deviceCommandSourceType, deviceCommandSourceId, reply )
        {
        }

        public override Kind GetObjectType()
        {
            return Kind.CameraCommandRequestPTZOwnership;
        }

        public override BaseData<Kind> Create()
        {
            return new CameraCommandRequestPTZOwnershipObject( );
        }

        public override bool IsOfType(Kind objectType)
        {
            if( objectType == Kind.CameraCommandRequestPTZOwnership )
            {
                return true;
            }
            return base.IsOfType( objectType );
        }

    }
    public class CameraCommandSetAutoFocusObject : CameraCommandObject
    {
        bool _enabled = false;
        public CameraCommandSetAutoFocusObject( )
        {
        }

        public CameraCommandSetAutoFocusObject( ObjectState objectState, Guid id, long rowVersion, Guid camera, DateTime timestamp, Types.DeviceCommandSourceType deviceCommandSourceType, Guid deviceCommandSourceId, Guid reply, bool enabled )
            : base( objectState, id, rowVersion, camera, timestamp, deviceCommandSourceType, deviceCommandSourceId, reply )
        {
            _enabled = enabled;
        }

        public override Kind GetObjectType()
        {
            return Kind.CameraCommandSetAutoFocus;
        }

        public override BaseData<Kind> Create()
        {
            return new CameraCommandSetAutoFocusObject( );
        }

        public override void AssignTo( BaseData<Kind> target )
        {
            base.AssignTo( target );
            var destination = ( CameraCommandSetAutoFocusObject )target;
            destination._enabled = _enabled;
        }

        public override bool Equals(BaseData<Kind>? other)
        {
            if (base.Equals(other))
            {
                var obj = ( CameraCommandSetAutoFocusObject )other;
                if( obj._enabled != _enabled )
                {
                    return false;
                }
                return true;
            }
            return false;
        }

        public override bool IsOfType(Kind objectType)
        {
            if( objectType == Kind.CameraCommandSetAutoFocus )
            {
                return true;
            }
            return base.IsOfType( objectType );
        }

        public bool Enabled
        {
            get => _enabled;
            set
            {
                if( _enabled != value )
                {
                    _enabled = value;
                    OnPropertyChanged( );
                }
            }
        }

        public override void WriteTo( [ DisallowNull ] BinaryWriter destination )
        {
            base.WriteTo( destination );
            destination.Write( _enabled );
        }

        public override void ReadFrom([DisallowNull] BinaryReader source)
        {
            base.ReadFrom( source );
            _enabled = source.ReadBoolean( );
        }

    }
    public class CameraCommandSetBlackAndWhiteObject : CameraCommandObject
    {
        bool _enabled = false;
        public CameraCommandSetBlackAndWhiteObject( )
        {
        }

        public CameraCommandSetBlackAndWhiteObject( ObjectState objectState, Guid id, long rowVersion, Guid camera, DateTime timestamp, Types.DeviceCommandSourceType deviceCommandSourceType, Guid deviceCommandSourceId, Guid reply, bool enabled )
            : base( objectState, id, rowVersion, camera, timestamp, deviceCommandSourceType, deviceCommandSourceId, reply )
        {
            _enabled = enabled;
        }

        public override Kind GetObjectType()
        {
            return Kind.CameraCommandSetBlackAndWhite;
        }

        public override BaseData<Kind> Create()
        {
            return new CameraCommandSetBlackAndWhiteObject( );
        }

        public override void AssignTo( BaseData<Kind> target )
        {
            base.AssignTo( target );
            var destination = ( CameraCommandSetBlackAndWhiteObject )target;
            destination._enabled = _enabled;
        }

        public override bool Equals(BaseData<Kind>? other)
        {
            if (base.Equals(other))
            {
                var obj = ( CameraCommandSetBlackAndWhiteObject )other;
                if( obj._enabled != _enabled )
                {
                    return false;
                }
                return true;
            }
            return false;
        }

        public override bool IsOfType(Kind objectType)
        {
            if( objectType == Kind.CameraCommandSetBlackAndWhite )
            {
                return true;
            }
            return base.IsOfType( objectType );
        }

        public bool Enabled
        {
            get => _enabled;
            set
            {
                if( _enabled != value )
                {
                    _enabled = value;
                    OnPropertyChanged( );
                }
            }
        }

        public override void WriteTo( [ DisallowNull ] BinaryWriter destination )
        {
            base.WriteTo( destination );
            destination.Write( _enabled );
        }

        public override void ReadFrom([DisallowNull] BinaryReader source)
        {
            base.ReadFrom( source );
            _enabled = source.ReadBoolean( );
        }

    }
    public class CameraCommandSetFollowedObject : CameraCommandObject
    {
        Guid _trackId;
        Types.CameraFollowReason _reason = Types.CameraFollowReason.Alarm;
        public CameraCommandSetFollowedObject( )
        {
        }

        public CameraCommandSetFollowedObject( ObjectState objectState, Guid id, long rowVersion, Guid camera, DateTime timestamp, Types.DeviceCommandSourceType deviceCommandSourceType, Guid deviceCommandSourceId, Guid reply, Guid trackId, Types.CameraFollowReason reason )
            : base( objectState, id, rowVersion, camera, timestamp, deviceCommandSourceType, deviceCommandSourceId, reply )
        {
            _trackId = trackId;
            _reason = reason;
        }

        public override Kind GetObjectType()
        {
            return Kind.CameraCommandSetFollowed;
        }

        public override BaseData<Kind> Create()
        {
            return new CameraCommandSetFollowedObject( );
        }

        public override void AssignTo( BaseData<Kind> target )
        {
            base.AssignTo( target );
            var destination = ( CameraCommandSetFollowedObject )target;
            destination._trackId = _trackId;
            destination._reason = _reason;
        }

        public override bool Equals(BaseData<Kind>? other)
        {
            if (base.Equals(other))
            {
                var obj = ( CameraCommandSetFollowedObject )other;
                if( obj._trackId != _trackId )
                {
                    return false;
                }
                if( obj._reason != _reason )
                {
                    return false;
                }
                return true;
            }
            return false;
        }

        public override bool IsOfType(Kind objectType)
        {
            if( objectType == Kind.CameraCommandSetFollowed )
            {
                return true;
            }
            return base.IsOfType( objectType );
        }

        public Guid TrackId
        {
            get => _trackId;
            set
            {
                if( _trackId != value )
                {
                    _trackId = value;
                    OnPropertyChanged( );
                }
            }
        }
        public Types.CameraFollowReason Reason
        {
            get => _reason;
            set
            {
                if( _reason != value )
                {
                    _reason = value;
                    OnPropertyChanged( );
                }
            }
        }

        public override void WriteTo( [ DisallowNull ] BinaryWriter destination )
        {
            base.WriteTo( destination );
            destination.Write( _trackId );
            destination.Write( _reason );
        }

        public override void ReadFrom([DisallowNull] BinaryReader source)
        {
            base.ReadFrom( source );
            _trackId = source.ReadGuid( );
            _reason = source.ReadEnum<Types.CameraFollowReason>( );
        }

    }
    public class CameraCommandSetInfraRedLampObject : CameraCommandObject
    {
        bool _enabled = false;
        public CameraCommandSetInfraRedLampObject( )
        {
        }

        public CameraCommandSetInfraRedLampObject( ObjectState objectState, Guid id, long rowVersion, Guid camera, DateTime timestamp, Types.DeviceCommandSourceType deviceCommandSourceType, Guid deviceCommandSourceId, Guid reply, bool enabled )
            : base( objectState, id, rowVersion, camera, timestamp, deviceCommandSourceType, deviceCommandSourceId, reply )
        {
            _enabled = enabled;
        }

        public override Kind GetObjectType()
        {
            return Kind.CameraCommandSetInfraRedLamp;
        }

        public override BaseData<Kind> Create()
        {
            return new CameraCommandSetInfraRedLampObject( );
        }

        public override void AssignTo( BaseData<Kind> target )
        {
            base.AssignTo( target );
            var destination = ( CameraCommandSetInfraRedLampObject )target;
            destination._enabled = _enabled;
        }

        public override bool Equals(BaseData<Kind>? other)
        {
            if (base.Equals(other))
            {
                var obj = ( CameraCommandSetInfraRedLampObject )other;
                if( obj._enabled != _enabled )
                {
                    return false;
                }
                return true;
            }
            return false;
        }

        public override bool IsOfType(Kind objectType)
        {
            if( objectType == Kind.CameraCommandSetInfraRedLamp )
            {
                return true;
            }
            return base.IsOfType( objectType );
        }

        public bool Enabled
        {
            get => _enabled;
            set
            {
                if( _enabled != value )
                {
                    _enabled = value;
                    OnPropertyChanged( );
                }
            }
        }

        public override void WriteTo( [ DisallowNull ] BinaryWriter destination )
        {
            base.WriteTo( destination );
            destination.Write( _enabled );
        }

        public override void ReadFrom([DisallowNull] BinaryReader source)
        {
            base.ReadFrom( source );
            _enabled = source.ReadBoolean( );
        }

    }
    public class CameraCommandSetWasherObject : CameraCommandObject
    {
        bool _enabled = false;
        public CameraCommandSetWasherObject( )
        {
        }

        public CameraCommandSetWasherObject( ObjectState objectState, Guid id, long rowVersion, Guid camera, DateTime timestamp, Types.DeviceCommandSourceType deviceCommandSourceType, Guid deviceCommandSourceId, Guid reply, bool enabled )
            : base( objectState, id, rowVersion, camera, timestamp, deviceCommandSourceType, deviceCommandSourceId, reply )
        {
            _enabled = enabled;
        }

        public override Kind GetObjectType()
        {
            return Kind.CameraCommandSetWasher;
        }

        public override BaseData<Kind> Create()
        {
            return new CameraCommandSetWasherObject( );
        }

        public override void AssignTo( BaseData<Kind> target )
        {
            base.AssignTo( target );
            var destination = ( CameraCommandSetWasherObject )target;
            destination._enabled = _enabled;
        }

        public override bool Equals(BaseData<Kind>? other)
        {
            if (base.Equals(other))
            {
                var obj = ( CameraCommandSetWasherObject )other;
                if( obj._enabled != _enabled )
                {
                    return false;
                }
                return true;
            }
            return false;
        }

        public override bool IsOfType(Kind objectType)
        {
            if( objectType == Kind.CameraCommandSetWasher )
            {
                return true;
            }
            return base.IsOfType( objectType );
        }

        public bool Enabled
        {
            get => _enabled;
            set
            {
                if( _enabled != value )
                {
                    _enabled = value;
                    OnPropertyChanged( );
                }
            }
        }

        public override void WriteTo( [ DisallowNull ] BinaryWriter destination )
        {
            base.WriteTo( destination );
            destination.Write( _enabled );
        }

        public override void ReadFrom([DisallowNull] BinaryReader source)
        {
            base.ReadFrom( source );
            _enabled = source.ReadBoolean( );
        }

    }
    public class CameraCommandSetWiperObject : CameraCommandObject
    {
        bool _enabled = false;
        public CameraCommandSetWiperObject( )
        {
        }

        public CameraCommandSetWiperObject( ObjectState objectState, Guid id, long rowVersion, Guid camera, DateTime timestamp, Types.DeviceCommandSourceType deviceCommandSourceType, Guid deviceCommandSourceId, Guid reply, bool enabled )
            : base( objectState, id, rowVersion, camera, timestamp, deviceCommandSourceType, deviceCommandSourceId, reply )
        {
            _enabled = enabled;
        }

        public override Kind GetObjectType()
        {
            return Kind.CameraCommandSetWiper;
        }

        public override BaseData<Kind> Create()
        {
            return new CameraCommandSetWiperObject( );
        }

        public override void AssignTo( BaseData<Kind> target )
        {
            base.AssignTo( target );
            var destination = ( CameraCommandSetWiperObject )target;
            destination._enabled = _enabled;
        }

        public override bool Equals(BaseData<Kind>? other)
        {
            if (base.Equals(other))
            {
                var obj = ( CameraCommandSetWiperObject )other;
                if( obj._enabled != _enabled )
                {
                    return false;
                }
                return true;
            }
            return false;
        }

        public override bool IsOfType(Kind objectType)
        {
            if( objectType == Kind.CameraCommandSetWiper )
            {
                return true;
            }
            return base.IsOfType( objectType );
        }

        public bool Enabled
        {
            get => _enabled;
            set
            {
                if( _enabled != value )
                {
                    _enabled = value;
                    OnPropertyChanged( );
                }
            }
        }

        public override void WriteTo( [ DisallowNull ] BinaryWriter destination )
        {
            base.WriteTo( destination );
            destination.Write( _enabled );
        }

        public override void ReadFrom([DisallowNull] BinaryReader source)
        {
            base.ReadFrom( source );
            _enabled = source.ReadBoolean( );
        }

    }
    public class CameraCommandStopObject : CameraCommandObject
    {
        bool _panTilt = false;
        bool _zoom = false;
        public CameraCommandStopObject( )
        {
        }

        public CameraCommandStopObject( ObjectState objectState, Guid id, long rowVersion, Guid camera, DateTime timestamp, Types.DeviceCommandSourceType deviceCommandSourceType, Guid deviceCommandSourceId, Guid reply, bool panTilt, bool zoom )
            : base( objectState, id, rowVersion, camera, timestamp, deviceCommandSourceType, deviceCommandSourceId, reply )
        {
            _panTilt = panTilt;
            _zoom = zoom;
        }

        public override Kind GetObjectType()
        {
            return Kind.CameraCommandStop;
        }

        public override BaseData<Kind> Create()
        {
            return new CameraCommandStopObject( );
        }

        public override void AssignTo( BaseData<Kind> target )
        {
            base.AssignTo( target );
            var destination = ( CameraCommandStopObject )target;
            destination._panTilt = _panTilt;
            destination._zoom = _zoom;
        }

        public override bool Equals(BaseData<Kind>? other)
        {
            if (base.Equals(other))
            {
                var obj = ( CameraCommandStopObject )other;
                if( obj._panTilt != _panTilt )
                {
                    return false;
                }
                if( obj._zoom != _zoom )
                {
                    return false;
                }
                return true;
            }
            return false;
        }

        public override bool IsOfType(Kind objectType)
        {
            if( objectType == Kind.CameraCommandStop )
            {
                return true;
            }
            return base.IsOfType( objectType );
        }

        public bool PanTilt
        {
            get => _panTilt;
            set
            {
                if( _panTilt != value )
                {
                    _panTilt = value;
                    OnPropertyChanged( );
                }
            }
        }
        public bool Zoom
        {
            get => _zoom;
            set
            {
                if( _zoom != value )
                {
                    _zoom = value;
                    OnPropertyChanged( );
                }
            }
        }

        public override void WriteTo( [ DisallowNull ] BinaryWriter destination )
        {
            base.WriteTo( destination );
            destination.Write( _panTilt );
            destination.Write( _zoom );
        }

        public override void ReadFrom([DisallowNull] BinaryReader source)
        {
            base.ReadFrom( source );
            _panTilt = source.ReadBoolean( );
            _zoom = source.ReadBoolean( );
        }

    }
    public class CameraCommandReplyObject : BaseDataGuid<Kind>
    {
        long _rowVersion = 0;
        Guid _camera;
        DateTime _timestamp;
        Guid _command;
        Types.DeviceCommandReplyStatus _status = Types.DeviceCommandReplyStatus.Unknown;
        string _message = string.Empty;
        double _panAngle = 0.0;
        double _tiltAngle = 0.0;
        double _focalLength = 0.0;
        public CameraCommandReplyObject( )
        {
        }

        public CameraCommandReplyObject( ObjectState objectState, Guid id, long rowVersion, Guid camera, DateTime timestamp, Guid command, Types.DeviceCommandReplyStatus status, string message, double panAngle, double tiltAngle, double focalLength )
            : base( objectState, id )
        {
            _rowVersion = rowVersion;
            _camera = camera;
            _timestamp = timestamp;
            _command = command;
            _status = status;
            _message = message;
            _panAngle = panAngle;
            _tiltAngle = tiltAngle;
            _focalLength = focalLength;
        }

        public override Kind GetObjectType()
        {
            return Kind.CameraCommandReply;
        }

        public override BaseData<Kind> Create()
        {
            return new CameraCommandReplyObject( );
        }

        public override void AssignTo( BaseData<Kind> target )
        {
            base.AssignTo( target );
            var destination = ( CameraCommandReplyObject )target;
            destination._rowVersion = _rowVersion;
            destination._camera = _camera;
            destination._timestamp = _timestamp;
            destination._command = _command;
            destination._status = _status;
            destination._message = _message;
            destination._panAngle = _panAngle;
            destination._tiltAngle = _tiltAngle;
            destination._focalLength = _focalLength;
        }

        public override bool Equals(BaseData<Kind>? other)
        {
            if (base.Equals(other))
            {
                var obj = ( CameraCommandReplyObject )other;
                if( obj._rowVersion != _rowVersion )
                {
                    return false;
                }
                if( obj._camera != _camera )
                {
                    return false;
                }
                if( obj._timestamp != _timestamp )
                {
                    return false;
                }
                if( obj._command != _command )
                {
                    return false;
                }
                if( obj._status != _status )
                {
                    return false;
                }
                if( obj._message != _message )
                {
                    return false;
                }
                if( obj._panAngle != _panAngle )
                {
                    return false;
                }
                if( obj._tiltAngle != _tiltAngle )
                {
                    return false;
                }
                if( obj._focalLength != _focalLength )
                {
                    return false;
                }
                return true;
            }
            return false;
        }

        public override bool IsOfType(Kind objectType)
        {
            if( objectType == Kind.CameraCommandReply )
            {
                return true;
            }
            return base.IsOfType( objectType );
        }

        public long RowVersion
        {
            get => _rowVersion;
            set
            {
                if( _rowVersion != value )
                {
                    _rowVersion = value;
                    OnPropertyChanged( );
                }
            }
        }
        public Guid Camera
        {
            get => _camera;
            set
            {
                if( _camera != value )
                {
                    _camera = value;
                    OnPropertyChanged( );
                }
            }
        }
        public DateTime Timestamp
        {
            get => _timestamp;
            set
            {
                if( _timestamp != value )
                {
                    _timestamp = value;
                    OnPropertyChanged( );
                }
            }
        }
        public Guid Command
        {
            get => _command;
            set
            {
                if( _command != value )
                {
                    _command = value;
                    OnPropertyChanged( );
                }
            }
        }
        public Types.DeviceCommandReplyStatus Status
        {
            get => _status;
            set
            {
                if( _status != value )
                {
                    _status = value;
                    OnPropertyChanged( );
                }
            }
        }
        public string Message
        {
            get => _message;
            set
            {
                if( _message != value )
                {
                    _message = value;
                    OnPropertyChanged( );
                }
            }
        }
        public double PanAngle
        {
            get => _panAngle;
            set
            {
                if( _panAngle != value )
                {
                    _panAngle = value;
                    OnPropertyChanged( );
                }
            }
        }
        public double TiltAngle
        {
            get => _tiltAngle;
            set
            {
                if( _tiltAngle != value )
                {
                    _tiltAngle = value;
                    OnPropertyChanged( );
                }
            }
        }
        public double FocalLength
        {
            get => _focalLength;
            set
            {
                if( _focalLength != value )
                {
                    _focalLength = value;
                    OnPropertyChanged( );
                }
            }
        }

        public override void WriteTo( [ DisallowNull ] BinaryWriter destination )
        {
            base.WriteTo( destination );
            destination.Write( _rowVersion );
            destination.Write( _camera );
            destination.Write( _timestamp );
            destination.Write( _command );
            destination.Write( _status );
            destination.Write( _message );
            destination.Write( _panAngle );
            destination.Write( _tiltAngle );
            destination.Write( _focalLength );
        }

        public override void ReadFrom([DisallowNull] BinaryReader source)
        {
            base.ReadFrom( source );
            _rowVersion = source.ReadInt64( );
            _camera = source.ReadGuid( );
            _timestamp = source.ReadDateTime( );
            _command = source.ReadGuid( );
            _status = source.ReadEnum<Types.DeviceCommandReplyStatus>( );
            _message = source.ReadString( );
            _panAngle = source.ReadDouble( );
            _tiltAngle = source.ReadDouble( );
            _focalLength = source.ReadDouble( );
        }

    }
    public class CameraConfigurationObject : BaseDataGuid<Kind>
    {
        long _rowVersion = 0;
        Guid _camera;
        DateTime _timestamp;
        Types.CameraControlProtocol _cameraControlProtocol = Types.CameraControlProtocol.Unknown;
        string _cameraURL = string.Empty;
        string _configurationURL = string.Empty;
        string _userName = string.Empty;
        string _password = string.Empty;
        bool _useRtspUriOverride = false;
        string _rtspUriOverride = string.Empty;
        double _latitude = 0.0;
        double _longitude = 0.0;
        double _altitude = 0.0;
        bool _useRelativePosition = false;
        Types.CameraPanTiltMode _panTiltMode = Types.CameraPanTiltMode.Unknown;
        double _minTiltAngle = 0.0;
        double _maxTiltAngle = 0.0;
        double _minTiltScaleAngle = 0.0;
        double _maxTiltScaleAngle = 0.0;
        bool _useReverseTiltAngle = false;
        bool _useReverseNormalizedTiltAngle = false;
        double _minTiltVelocity = 0.0;
        double _maxTiltVelocity = 0.0;
        double _minTiltSpeed = 0.0;
        double _maxTiltSpeed = 0.0;
        double _minPanAngle = 0.0;
        double _maxPanAngle = 0.0;
        double _minPanScaleAngle = 0.0;
        double _maxPanScaleAngle = 0.0;
        bool _useReversePanAngle = false;
        bool _useReverseNormalizedPanAngle = false;
        double _minPanVelocity = 0.0;
        double _maxPanVelocity = 0.0;
        double _minPanSpeed = 0.0;
        double _maxPanSpeed = 0.0;
        Types.CameraFocalLengthMode _focalLengthMode = Types.CameraFocalLengthMode.Unknown;
        double _minFocalLength = 0.0;
        double _maxFocalLength = 0.0;
        double _minFocalLengthScale = 0.0;
        double _maxFocalLengthScale = 0.0;
        double _minZoomVelocity = 0.0;
        double _maxZoomVelocity = 0.0;
        double _minZoomSpeed = 0.0;
        double _maxZoomSpeed = 0.0;
        double _imageSensorWidth = 0.0;
        double _imageSensorHeight = 0.0;
        double _homePanAngle = 0.0;
        double _homeTiltAngle = 0.0;
        double _homeFocalLength = 0.0;
        double _panOffset = 0.0;
        double _tiltOffset = 0.0;
        double _aimAltitude = 0.0;
        double _minimumTargetWidth = 0.0;
        TimeSpan _targetLockTimeout;
        TimeSpan _updateStatusInterval;
        TimeSpan _readTimeout;
        TimeSpan _moveCommandStatusDelay;
        string _ptzProfileName = string.Empty;
        string _ptzConfigurationToken = string.Empty;
        string _videoSourceToken = string.Empty;
        public CameraConfigurationObject( )
        {
        }

        public CameraConfigurationObject( ObjectState objectState, Guid id, long rowVersion, Guid camera, DateTime timestamp, Types.CameraControlProtocol cameraControlProtocol, string cameraURL, string configurationURL, string userName, string password, bool useRtspUriOverride, string rtspUriOverride, double latitude, double longitude, double altitude, bool useRelativePosition, Types.CameraPanTiltMode panTiltMode, double minTiltAngle, double maxTiltAngle, double minTiltScaleAngle, double maxTiltScaleAngle, bool useReverseTiltAngle, bool useReverseNormalizedTiltAngle, double minTiltVelocity, double maxTiltVelocity, double minTiltSpeed, double maxTiltSpeed, double minPanAngle, double maxPanAngle, double minPanScaleAngle, double maxPanScaleAngle, bool useReversePanAngle, bool useReverseNormalizedPanAngle, double minPanVelocity, double maxPanVelocity, double minPanSpeed, double maxPanSpeed, Types.CameraFocalLengthMode focalLengthMode, double minFocalLength, double maxFocalLength, double minFocalLengthScale, double maxFocalLengthScale, double minZoomVelocity, double maxZoomVelocity, double minZoomSpeed, double maxZoomSpeed, double imageSensorWidth, double imageSensorHeight, double homePanAngle, double homeTiltAngle, double homeFocalLength, double panOffset, double tiltOffset, double aimAltitude, double minimumTargetWidth, TimeSpan targetLockTimeout, TimeSpan updateStatusInterval, TimeSpan readTimeout, TimeSpan moveCommandStatusDelay, string ptzProfileName, string ptzConfigurationToken, string videoSourceToken )
            : base( objectState, id )
        {
            _rowVersion = rowVersion;
            _camera = camera;
            _timestamp = timestamp;
            _cameraControlProtocol = cameraControlProtocol;
            _cameraURL = cameraURL;
            _configurationURL = configurationURL;
            _userName = userName;
            _password = password;
            _useRtspUriOverride = useRtspUriOverride;
            _rtspUriOverride = rtspUriOverride;
            _latitude = latitude;
            _longitude = longitude;
            _altitude = altitude;
            _useRelativePosition = useRelativePosition;
            _panTiltMode = panTiltMode;
            _minTiltAngle = minTiltAngle;
            _maxTiltAngle = maxTiltAngle;
            _minTiltScaleAngle = minTiltScaleAngle;
            _maxTiltScaleAngle = maxTiltScaleAngle;
            _useReverseTiltAngle = useReverseTiltAngle;
            _useReverseNormalizedTiltAngle = useReverseNormalizedTiltAngle;
            _minTiltVelocity = minTiltVelocity;
            _maxTiltVelocity = maxTiltVelocity;
            _minTiltSpeed = minTiltSpeed;
            _maxTiltSpeed = maxTiltSpeed;
            _minPanAngle = minPanAngle;
            _maxPanAngle = maxPanAngle;
            _minPanScaleAngle = minPanScaleAngle;
            _maxPanScaleAngle = maxPanScaleAngle;
            _useReversePanAngle = useReversePanAngle;
            _useReverseNormalizedPanAngle = useReverseNormalizedPanAngle;
            _minPanVelocity = minPanVelocity;
            _maxPanVelocity = maxPanVelocity;
            _minPanSpeed = minPanSpeed;
            _maxPanSpeed = maxPanSpeed;
            _focalLengthMode = focalLengthMode;
            _minFocalLength = minFocalLength;
            _maxFocalLength = maxFocalLength;
            _minFocalLengthScale = minFocalLengthScale;
            _maxFocalLengthScale = maxFocalLengthScale;
            _minZoomVelocity = minZoomVelocity;
            _maxZoomVelocity = maxZoomVelocity;
            _minZoomSpeed = minZoomSpeed;
            _maxZoomSpeed = maxZoomSpeed;
            _imageSensorWidth = imageSensorWidth;
            _imageSensorHeight = imageSensorHeight;
            _homePanAngle = homePanAngle;
            _homeTiltAngle = homeTiltAngle;
            _homeFocalLength = homeFocalLength;
            _panOffset = panOffset;
            _tiltOffset = tiltOffset;
            _aimAltitude = aimAltitude;
            _minimumTargetWidth = minimumTargetWidth;
            _targetLockTimeout = targetLockTimeout;
            _updateStatusInterval = updateStatusInterval;
            _readTimeout = readTimeout;
            _moveCommandStatusDelay = moveCommandStatusDelay;
            _ptzProfileName = ptzProfileName;
            _ptzConfigurationToken = ptzConfigurationToken;
            _videoSourceToken = videoSourceToken;
        }

        public override Kind GetObjectType()
        {
            return Kind.CameraConfiguration;
        }

        public override BaseData<Kind> Create()
        {
            return new CameraConfigurationObject( );
        }

        public override void AssignTo( BaseData<Kind> target )
        {
            base.AssignTo( target );
            var destination = ( CameraConfigurationObject )target;
            destination._rowVersion = _rowVersion;
            destination._camera = _camera;
            destination._timestamp = _timestamp;
            destination._cameraControlProtocol = _cameraControlProtocol;
            destination._cameraURL = _cameraURL;
            destination._configurationURL = _configurationURL;
            destination._userName = _userName;
            destination._password = _password;
            destination._useRtspUriOverride = _useRtspUriOverride;
            destination._rtspUriOverride = _rtspUriOverride;
            destination._latitude = _latitude;
            destination._longitude = _longitude;
            destination._altitude = _altitude;
            destination._useRelativePosition = _useRelativePosition;
            destination._panTiltMode = _panTiltMode;
            destination._minTiltAngle = _minTiltAngle;
            destination._maxTiltAngle = _maxTiltAngle;
            destination._minTiltScaleAngle = _minTiltScaleAngle;
            destination._maxTiltScaleAngle = _maxTiltScaleAngle;
            destination._useReverseTiltAngle = _useReverseTiltAngle;
            destination._useReverseNormalizedTiltAngle = _useReverseNormalizedTiltAngle;
            destination._minTiltVelocity = _minTiltVelocity;
            destination._maxTiltVelocity = _maxTiltVelocity;
            destination._minTiltSpeed = _minTiltSpeed;
            destination._maxTiltSpeed = _maxTiltSpeed;
            destination._minPanAngle = _minPanAngle;
            destination._maxPanAngle = _maxPanAngle;
            destination._minPanScaleAngle = _minPanScaleAngle;
            destination._maxPanScaleAngle = _maxPanScaleAngle;
            destination._useReversePanAngle = _useReversePanAngle;
            destination._useReverseNormalizedPanAngle = _useReverseNormalizedPanAngle;
            destination._minPanVelocity = _minPanVelocity;
            destination._maxPanVelocity = _maxPanVelocity;
            destination._minPanSpeed = _minPanSpeed;
            destination._maxPanSpeed = _maxPanSpeed;
            destination._focalLengthMode = _focalLengthMode;
            destination._minFocalLength = _minFocalLength;
            destination._maxFocalLength = _maxFocalLength;
            destination._minFocalLengthScale = _minFocalLengthScale;
            destination._maxFocalLengthScale = _maxFocalLengthScale;
            destination._minZoomVelocity = _minZoomVelocity;
            destination._maxZoomVelocity = _maxZoomVelocity;
            destination._minZoomSpeed = _minZoomSpeed;
            destination._maxZoomSpeed = _maxZoomSpeed;
            destination._imageSensorWidth = _imageSensorWidth;
            destination._imageSensorHeight = _imageSensorHeight;
            destination._homePanAngle = _homePanAngle;
            destination._homeTiltAngle = _homeTiltAngle;
            destination._homeFocalLength = _homeFocalLength;
            destination._panOffset = _panOffset;
            destination._tiltOffset = _tiltOffset;
            destination._aimAltitude = _aimAltitude;
            destination._minimumTargetWidth = _minimumTargetWidth;
            destination._targetLockTimeout = _targetLockTimeout;
            destination._updateStatusInterval = _updateStatusInterval;
            destination._readTimeout = _readTimeout;
            destination._moveCommandStatusDelay = _moveCommandStatusDelay;
            destination._ptzProfileName = _ptzProfileName;
            destination._ptzConfigurationToken = _ptzConfigurationToken;
            destination._videoSourceToken = _videoSourceToken;
        }

        public override bool Equals(BaseData<Kind>? other)
        {
            if (base.Equals(other))
            {
                var obj = ( CameraConfigurationObject )other;
                if( obj._rowVersion != _rowVersion )
                {
                    return false;
                }
                if( obj._camera != _camera )
                {
                    return false;
                }
                if( obj._timestamp != _timestamp )
                {
                    return false;
                }
                if( obj._cameraControlProtocol != _cameraControlProtocol )
                {
                    return false;
                }
                if( obj._cameraURL != _cameraURL )
                {
                    return false;
                }
                if( obj._configurationURL != _configurationURL )
                {
                    return false;
                }
                if( obj._userName != _userName )
                {
                    return false;
                }
                if( obj._password != _password )
                {
                    return false;
                }
                if( obj._useRtspUriOverride != _useRtspUriOverride )
                {
                    return false;
                }
                if( obj._rtspUriOverride != _rtspUriOverride )
                {
                    return false;
                }
                if( obj._latitude != _latitude )
                {
                    return false;
                }
                if( obj._longitude != _longitude )
                {
                    return false;
                }
                if( obj._altitude != _altitude )
                {
                    return false;
                }
                if( obj._useRelativePosition != _useRelativePosition )
                {
                    return false;
                }
                if( obj._panTiltMode != _panTiltMode )
                {
                    return false;
                }
                if( obj._minTiltAngle != _minTiltAngle )
                {
                    return false;
                }
                if( obj._maxTiltAngle != _maxTiltAngle )
                {
                    return false;
                }
                if( obj._minTiltScaleAngle != _minTiltScaleAngle )
                {
                    return false;
                }
                if( obj._maxTiltScaleAngle != _maxTiltScaleAngle )
                {
                    return false;
                }
                if( obj._useReverseTiltAngle != _useReverseTiltAngle )
                {
                    return false;
                }
                if( obj._useReverseNormalizedTiltAngle != _useReverseNormalizedTiltAngle )
                {
                    return false;
                }
                if( obj._minTiltVelocity != _minTiltVelocity )
                {
                    return false;
                }
                if( obj._maxTiltVelocity != _maxTiltVelocity )
                {
                    return false;
                }
                if( obj._minTiltSpeed != _minTiltSpeed )
                {
                    return false;
                }
                if( obj._maxTiltSpeed != _maxTiltSpeed )
                {
                    return false;
                }
                if( obj._minPanAngle != _minPanAngle )
                {
                    return false;
                }
                if( obj._maxPanAngle != _maxPanAngle )
                {
                    return false;
                }
                if( obj._minPanScaleAngle != _minPanScaleAngle )
                {
                    return false;
                }
                if( obj._maxPanScaleAngle != _maxPanScaleAngle )
                {
                    return false;
                }
                if( obj._useReversePanAngle != _useReversePanAngle )
                {
                    return false;
                }
                if( obj._useReverseNormalizedPanAngle != _useReverseNormalizedPanAngle )
                {
                    return false;
                }
                if( obj._minPanVelocity != _minPanVelocity )
                {
                    return false;
                }
                if( obj._maxPanVelocity != _maxPanVelocity )
                {
                    return false;
                }
                if( obj._minPanSpeed != _minPanSpeed )
                {
                    return false;
                }
                if( obj._maxPanSpeed != _maxPanSpeed )
                {
                    return false;
                }
                if( obj._focalLengthMode != _focalLengthMode )
                {
                    return false;
                }
                if( obj._minFocalLength != _minFocalLength )
                {
                    return false;
                }
                if( obj._maxFocalLength != _maxFocalLength )
                {
                    return false;
                }
                if( obj._minFocalLengthScale != _minFocalLengthScale )
                {
                    return false;
                }
                if( obj._maxFocalLengthScale != _maxFocalLengthScale )
                {
                    return false;
                }
                if( obj._minZoomVelocity != _minZoomVelocity )
                {
                    return false;
                }
                if( obj._maxZoomVelocity != _maxZoomVelocity )
                {
                    return false;
                }
                if( obj._minZoomSpeed != _minZoomSpeed )
                {
                    return false;
                }
                if( obj._maxZoomSpeed != _maxZoomSpeed )
                {
                    return false;
                }
                if( obj._imageSensorWidth != _imageSensorWidth )
                {
                    return false;
                }
                if( obj._imageSensorHeight != _imageSensorHeight )
                {
                    return false;
                }
                if( obj._homePanAngle != _homePanAngle )
                {
                    return false;
                }
                if( obj._homeTiltAngle != _homeTiltAngle )
                {
                    return false;
                }
                if( obj._homeFocalLength != _homeFocalLength )
                {
                    return false;
                }
                if( obj._panOffset != _panOffset )
                {
                    return false;
                }
                if( obj._tiltOffset != _tiltOffset )
                {
                    return false;
                }
                if( obj._aimAltitude != _aimAltitude )
                {
                    return false;
                }
                if( obj._minimumTargetWidth != _minimumTargetWidth )
                {
                    return false;
                }
                if( obj._targetLockTimeout != _targetLockTimeout )
                {
                    return false;
                }
                if( obj._updateStatusInterval != _updateStatusInterval )
                {
                    return false;
                }
                if( obj._readTimeout != _readTimeout )
                {
                    return false;
                }
                if( obj._moveCommandStatusDelay != _moveCommandStatusDelay )
                {
                    return false;
                }
                if( obj._ptzProfileName != _ptzProfileName )
                {
                    return false;
                }
                if( obj._ptzConfigurationToken != _ptzConfigurationToken )
                {
                    return false;
                }
                if( obj._videoSourceToken != _videoSourceToken )
                {
                    return false;
                }
                return true;
            }
            return false;
        }

        public override bool IsOfType(Kind objectType)
        {
            if( objectType == Kind.CameraConfiguration )
            {
                return true;
            }
            return base.IsOfType( objectType );
        }

        public long RowVersion
        {
            get => _rowVersion;
            set
            {
                if( _rowVersion != value )
                {
                    _rowVersion = value;
                    OnPropertyChanged( );
                }
            }
        }
        public Guid Camera
        {
            get => _camera;
            set
            {
                if( _camera != value )
                {
                    _camera = value;
                    OnPropertyChanged( );
                }
            }
        }
        public DateTime Timestamp
        {
            get => _timestamp;
            set
            {
                if( _timestamp != value )
                {
                    _timestamp = value;
                    OnPropertyChanged( );
                }
            }
        }
        public Types.CameraControlProtocol CameraControlProtocol
        {
            get => _cameraControlProtocol;
            set
            {
                if( _cameraControlProtocol != value )
                {
                    _cameraControlProtocol = value;
                    OnPropertyChanged( );
                }
            }
        }
        public string CameraURL
        {
            get => _cameraURL;
            set
            {
                if( _cameraURL != value )
                {
                    _cameraURL = value;
                    OnPropertyChanged( );
                }
            }
        }
        public string ConfigurationURL
        {
            get => _configurationURL;
            set
            {
                if( _configurationURL != value )
                {
                    _configurationURL = value;
                    OnPropertyChanged( );
                }
            }
        }
        public string UserName
        {
            get => _userName;
            set
            {
                if( _userName != value )
                {
                    _userName = value;
                    OnPropertyChanged( );
                }
            }
        }
        public string Password
        {
            get => _password;
            set
            {
                if( _password != value )
                {
                    _password = value;
                    OnPropertyChanged( );
                }
            }
        }
        public bool UseRtspUriOverride
        {
            get => _useRtspUriOverride;
            set
            {
                if( _useRtspUriOverride != value )
                {
                    _useRtspUriOverride = value;
                    OnPropertyChanged( );
                }
            }
        }
        public string RtspUriOverride
        {
            get => _rtspUriOverride;
            set
            {
                if( _rtspUriOverride != value )
                {
                    _rtspUriOverride = value;
                    OnPropertyChanged( );
                }
            }
        }
        public double Latitude
        {
            get => _latitude;
            set
            {
                if( _latitude != value )
                {
                    _latitude = value;
                    OnPropertyChanged( );
                }
            }
        }
        public double Longitude
        {
            get => _longitude;
            set
            {
                if( _longitude != value )
                {
                    _longitude = value;
                    OnPropertyChanged( );
                }
            }
        }
        public double Altitude
        {
            get => _altitude;
            set
            {
                if( _altitude != value )
                {
                    _altitude = value;
                    OnPropertyChanged( );
                }
            }
        }
        public bool UseRelativePosition
        {
            get => _useRelativePosition;
            set
            {
                if( _useRelativePosition != value )
                {
                    _useRelativePosition = value;
                    OnPropertyChanged( );
                }
            }
        }
        public Types.CameraPanTiltMode PanTiltMode
        {
            get => _panTiltMode;
            set
            {
                if( _panTiltMode != value )
                {
                    _panTiltMode = value;
                    OnPropertyChanged( );
                }
            }
        }
        public double MinTiltAngle
        {
            get => _minTiltAngle;
            set
            {
                if( _minTiltAngle != value )
                {
                    _minTiltAngle = value;
                    OnPropertyChanged( );
                }
            }
        }
        public double MaxTiltAngle
        {
            get => _maxTiltAngle;
            set
            {
                if( _maxTiltAngle != value )
                {
                    _maxTiltAngle = value;
                    OnPropertyChanged( );
                }
            }
        }
        public double MinTiltScaleAngle
        {
            get => _minTiltScaleAngle;
            set
            {
                if( _minTiltScaleAngle != value )
                {
                    _minTiltScaleAngle = value;
                    OnPropertyChanged( );
                }
            }
        }
        public double MaxTiltScaleAngle
        {
            get => _maxTiltScaleAngle;
            set
            {
                if( _maxTiltScaleAngle != value )
                {
                    _maxTiltScaleAngle = value;
                    OnPropertyChanged( );
                }
            }
        }
        public bool UseReverseTiltAngle
        {
            get => _useReverseTiltAngle;
            set
            {
                if( _useReverseTiltAngle != value )
                {
                    _useReverseTiltAngle = value;
                    OnPropertyChanged( );
                }
            }
        }
        public bool UseReverseNormalizedTiltAngle
        {
            get => _useReverseNormalizedTiltAngle;
            set
            {
                if( _useReverseNormalizedTiltAngle != value )
                {
                    _useReverseNormalizedTiltAngle = value;
                    OnPropertyChanged( );
                }
            }
        }
        public double MinTiltVelocity
        {
            get => _minTiltVelocity;
            set
            {
                if( _minTiltVelocity != value )
                {
                    _minTiltVelocity = value;
                    OnPropertyChanged( );
                }
            }
        }
        public double MaxTiltVelocity
        {
            get => _maxTiltVelocity;
            set
            {
                if( _maxTiltVelocity != value )
                {
                    _maxTiltVelocity = value;
                    OnPropertyChanged( );
                }
            }
        }
        public double MinTiltSpeed
        {
            get => _minTiltSpeed;
            set
            {
                if( _minTiltSpeed != value )
                {
                    _minTiltSpeed = value;
                    OnPropertyChanged( );
                }
            }
        }
        public double MaxTiltSpeed
        {
            get => _maxTiltSpeed;
            set
            {
                if( _maxTiltSpeed != value )
                {
                    _maxTiltSpeed = value;
                    OnPropertyChanged( );
                }
            }
        }
        public double MinPanAngle
        {
            get => _minPanAngle;
            set
            {
                if( _minPanAngle != value )
                {
                    _minPanAngle = value;
                    OnPropertyChanged( );
                }
            }
        }
        public double MaxPanAngle
        {
            get => _maxPanAngle;
            set
            {
                if( _maxPanAngle != value )
                {
                    _maxPanAngle = value;
                    OnPropertyChanged( );
                }
            }
        }
        public double MinPanScaleAngle
        {
            get => _minPanScaleAngle;
            set
            {
                if( _minPanScaleAngle != value )
                {
                    _minPanScaleAngle = value;
                    OnPropertyChanged( );
                }
            }
        }
        public double MaxPanScaleAngle
        {
            get => _maxPanScaleAngle;
            set
            {
                if( _maxPanScaleAngle != value )
                {
                    _maxPanScaleAngle = value;
                    OnPropertyChanged( );
                }
            }
        }
        public bool UseReversePanAngle
        {
            get => _useReversePanAngle;
            set
            {
                if( _useReversePanAngle != value )
                {
                    _useReversePanAngle = value;
                    OnPropertyChanged( );
                }
            }
        }
        public bool UseReverseNormalizedPanAngle
        {
            get => _useReverseNormalizedPanAngle;
            set
            {
                if( _useReverseNormalizedPanAngle != value )
                {
                    _useReverseNormalizedPanAngle = value;
                    OnPropertyChanged( );
                }
            }
        }
        public double MinPanVelocity
        {
            get => _minPanVelocity;
            set
            {
                if( _minPanVelocity != value )
                {
                    _minPanVelocity = value;
                    OnPropertyChanged( );
                }
            }
        }
        public double MaxPanVelocity
        {
            get => _maxPanVelocity;
            set
            {
                if( _maxPanVelocity != value )
                {
                    _maxPanVelocity = value;
                    OnPropertyChanged( );
                }
            }
        }
        public double MinPanSpeed
        {
            get => _minPanSpeed;
            set
            {
                if( _minPanSpeed != value )
                {
                    _minPanSpeed = value;
                    OnPropertyChanged( );
                }
            }
        }
        public double MaxPanSpeed
        {
            get => _maxPanSpeed;
            set
            {
                if( _maxPanSpeed != value )
                {
                    _maxPanSpeed = value;
                    OnPropertyChanged( );
                }
            }
        }
        public Types.CameraFocalLengthMode FocalLengthMode
        {
            get => _focalLengthMode;
            set
            {
                if( _focalLengthMode != value )
                {
                    _focalLengthMode = value;
                    OnPropertyChanged( );
                }
            }
        }
        public double MinFocalLength
        {
            get => _minFocalLength;
            set
            {
                if( _minFocalLength != value )
                {
                    _minFocalLength = value;
                    OnPropertyChanged( );
                }
            }
        }
        public double MaxFocalLength
        {
            get => _maxFocalLength;
            set
            {
                if( _maxFocalLength != value )
                {
                    _maxFocalLength = value;
                    OnPropertyChanged( );
                }
            }
        }
        public double MinFocalLengthScale
        {
            get => _minFocalLengthScale;
            set
            {
                if( _minFocalLengthScale != value )
                {
                    _minFocalLengthScale = value;
                    OnPropertyChanged( );
                }
            }
        }
        public double MaxFocalLengthScale
        {
            get => _maxFocalLengthScale;
            set
            {
                if( _maxFocalLengthScale != value )
                {
                    _maxFocalLengthScale = value;
                    OnPropertyChanged( );
                }
            }
        }
        public double MinZoomVelocity
        {
            get => _minZoomVelocity;
            set
            {
                if( _minZoomVelocity != value )
                {
                    _minZoomVelocity = value;
                    OnPropertyChanged( );
                }
            }
        }
        public double MaxZoomVelocity
        {
            get => _maxZoomVelocity;
            set
            {
                if( _maxZoomVelocity != value )
                {
                    _maxZoomVelocity = value;
                    OnPropertyChanged( );
                }
            }
        }
        public double MinZoomSpeed
        {
            get => _minZoomSpeed;
            set
            {
                if( _minZoomSpeed != value )
                {
                    _minZoomSpeed = value;
                    OnPropertyChanged( );
                }
            }
        }
        public double MaxZoomSpeed
        {
            get => _maxZoomSpeed;
            set
            {
                if( _maxZoomSpeed != value )
                {
                    _maxZoomSpeed = value;
                    OnPropertyChanged( );
                }
            }
        }
        public double ImageSensorWidth
        {
            get => _imageSensorWidth;
            set
            {
                if( _imageSensorWidth != value )
                {
                    _imageSensorWidth = value;
                    OnPropertyChanged( );
                }
            }
        }
        public double ImageSensorHeight
        {
            get => _imageSensorHeight;
            set
            {
                if( _imageSensorHeight != value )
                {
                    _imageSensorHeight = value;
                    OnPropertyChanged( );
                }
            }
        }
        public double HomePanAngle
        {
            get => _homePanAngle;
            set
            {
                if( _homePanAngle != value )
                {
                    _homePanAngle = value;
                    OnPropertyChanged( );
                }
            }
        }
        public double HomeTiltAngle
        {
            get => _homeTiltAngle;
            set
            {
                if( _homeTiltAngle != value )
                {
                    _homeTiltAngle = value;
                    OnPropertyChanged( );
                }
            }
        }
        public double HomeFocalLength
        {
            get => _homeFocalLength;
            set
            {
                if( _homeFocalLength != value )
                {
                    _homeFocalLength = value;
                    OnPropertyChanged( );
                }
            }
        }
        public double PanOffset
        {
            get => _panOffset;
            set
            {
                if( _panOffset != value )
                {
                    _panOffset = value;
                    OnPropertyChanged( );
                }
            }
        }
        public double TiltOffset
        {
            get => _tiltOffset;
            set
            {
                if( _tiltOffset != value )
                {
                    _tiltOffset = value;
                    OnPropertyChanged( );
                }
            }
        }
        public double AimAltitude
        {
            get => _aimAltitude;
            set
            {
                if( _aimAltitude != value )
                {
                    _aimAltitude = value;
                    OnPropertyChanged( );
                }
            }
        }
        public double MinimumTargetWidth
        {
            get => _minimumTargetWidth;
            set
            {
                if( _minimumTargetWidth != value )
                {
                    _minimumTargetWidth = value;
                    OnPropertyChanged( );
                }
            }
        }
        public TimeSpan TargetLockTimeout
        {
            get => _targetLockTimeout;
            set
            {
                if( _targetLockTimeout != value )
                {
                    _targetLockTimeout = value;
                    OnPropertyChanged( );
                }
            }
        }
        public TimeSpan UpdateStatusInterval
        {
            get => _updateStatusInterval;
            set
            {
                if( _updateStatusInterval != value )
                {
                    _updateStatusInterval = value;
                    OnPropertyChanged( );
                }
            }
        }
        public TimeSpan ReadTimeout
        {
            get => _readTimeout;
            set
            {
                if( _readTimeout != value )
                {
                    _readTimeout = value;
                    OnPropertyChanged( );
                }
            }
        }
        public TimeSpan MoveCommandStatusDelay
        {
            get => _moveCommandStatusDelay;
            set
            {
                if( _moveCommandStatusDelay != value )
                {
                    _moveCommandStatusDelay = value;
                    OnPropertyChanged( );
                }
            }
        }
        public string PtzProfileName
        {
            get => _ptzProfileName;
            set
            {
                if( _ptzProfileName != value )
                {
                    _ptzProfileName = value;
                    OnPropertyChanged( );
                }
            }
        }
        public string PtzConfigurationToken
        {
            get => _ptzConfigurationToken;
            set
            {
                if( _ptzConfigurationToken != value )
                {
                    _ptzConfigurationToken = value;
                    OnPropertyChanged( );
                }
            }
        }
        public string VideoSourceToken
        {
            get => _videoSourceToken;
            set
            {
                if( _videoSourceToken != value )
                {
                    _videoSourceToken = value;
                    OnPropertyChanged( );
                }
            }
        }

        public override void WriteTo( [ DisallowNull ] BinaryWriter destination )
        {
            base.WriteTo( destination );
            destination.Write( _rowVersion );
            destination.Write( _camera );
            destination.Write( _timestamp );
            destination.Write( _cameraControlProtocol );
            destination.Write( _cameraURL );
            destination.Write( _configurationURL );
            destination.Write( _userName );
            destination.Write( _password );
            destination.Write( _useRtspUriOverride );
            destination.Write( _rtspUriOverride );
            destination.Write( _latitude );
            destination.Write( _longitude );
            destination.Write( _altitude );
            destination.Write( _useRelativePosition );
            destination.Write( _panTiltMode );
            destination.Write( _minTiltAngle );
            destination.Write( _maxTiltAngle );
            destination.Write( _minTiltScaleAngle );
            destination.Write( _maxTiltScaleAngle );
            destination.Write( _useReverseTiltAngle );
            destination.Write( _useReverseNormalizedTiltAngle );
            destination.Write( _minTiltVelocity );
            destination.Write( _maxTiltVelocity );
            destination.Write( _minTiltSpeed );
            destination.Write( _maxTiltSpeed );
            destination.Write( _minPanAngle );
            destination.Write( _maxPanAngle );
            destination.Write( _minPanScaleAngle );
            destination.Write( _maxPanScaleAngle );
            destination.Write( _useReversePanAngle );
            destination.Write( _useReverseNormalizedPanAngle );
            destination.Write( _minPanVelocity );
            destination.Write( _maxPanVelocity );
            destination.Write( _minPanSpeed );
            destination.Write( _maxPanSpeed );
            destination.Write( _focalLengthMode );
            destination.Write( _minFocalLength );
            destination.Write( _maxFocalLength );
            destination.Write( _minFocalLengthScale );
            destination.Write( _maxFocalLengthScale );
            destination.Write( _minZoomVelocity );
            destination.Write( _maxZoomVelocity );
            destination.Write( _minZoomSpeed );
            destination.Write( _maxZoomSpeed );
            destination.Write( _imageSensorWidth );
            destination.Write( _imageSensorHeight );
            destination.Write( _homePanAngle );
            destination.Write( _homeTiltAngle );
            destination.Write( _homeFocalLength );
            destination.Write( _panOffset );
            destination.Write( _tiltOffset );
            destination.Write( _aimAltitude );
            destination.Write( _minimumTargetWidth );
            destination.Write( _targetLockTimeout );
            destination.Write( _updateStatusInterval );
            destination.Write( _readTimeout );
            destination.Write( _moveCommandStatusDelay );
            destination.Write( _ptzProfileName );
            destination.Write( _ptzConfigurationToken );
            destination.Write( _videoSourceToken );
        }

        public override void ReadFrom([DisallowNull] BinaryReader source)
        {
            base.ReadFrom( source );
            _rowVersion = source.ReadInt64( );
            _camera = source.ReadGuid( );
            _timestamp = source.ReadDateTime( );
            _cameraControlProtocol = source.ReadEnum<Types.CameraControlProtocol>( );
            _cameraURL = source.ReadString( );
            _configurationURL = source.ReadString( );
            _userName = source.ReadString( );
            _password = source.ReadString( );
            _useRtspUriOverride = source.ReadBoolean( );
            _rtspUriOverride = source.ReadString( );
            _latitude = source.ReadDouble( );
            _longitude = source.ReadDouble( );
            _altitude = source.ReadDouble( );
            _useRelativePosition = source.ReadBoolean( );
            _panTiltMode = source.ReadEnum<Types.CameraPanTiltMode>( );
            _minTiltAngle = source.ReadDouble( );
            _maxTiltAngle = source.ReadDouble( );
            _minTiltScaleAngle = source.ReadDouble( );
            _maxTiltScaleAngle = source.ReadDouble( );
            _useReverseTiltAngle = source.ReadBoolean( );
            _useReverseNormalizedTiltAngle = source.ReadBoolean( );
            _minTiltVelocity = source.ReadDouble( );
            _maxTiltVelocity = source.ReadDouble( );
            _minTiltSpeed = source.ReadDouble( );
            _maxTiltSpeed = source.ReadDouble( );
            _minPanAngle = source.ReadDouble( );
            _maxPanAngle = source.ReadDouble( );
            _minPanScaleAngle = source.ReadDouble( );
            _maxPanScaleAngle = source.ReadDouble( );
            _useReversePanAngle = source.ReadBoolean( );
            _useReverseNormalizedPanAngle = source.ReadBoolean( );
            _minPanVelocity = source.ReadDouble( );
            _maxPanVelocity = source.ReadDouble( );
            _minPanSpeed = source.ReadDouble( );
            _maxPanSpeed = source.ReadDouble( );
            _focalLengthMode = source.ReadEnum<Types.CameraFocalLengthMode>( );
            _minFocalLength = source.ReadDouble( );
            _maxFocalLength = source.ReadDouble( );
            _minFocalLengthScale = source.ReadDouble( );
            _maxFocalLengthScale = source.ReadDouble( );
            _minZoomVelocity = source.ReadDouble( );
            _maxZoomVelocity = source.ReadDouble( );
            _minZoomSpeed = source.ReadDouble( );
            _maxZoomSpeed = source.ReadDouble( );
            _imageSensorWidth = source.ReadDouble( );
            _imageSensorHeight = source.ReadDouble( );
            _homePanAngle = source.ReadDouble( );
            _homeTiltAngle = source.ReadDouble( );
            _homeFocalLength = source.ReadDouble( );
            _panOffset = source.ReadDouble( );
            _tiltOffset = source.ReadDouble( );
            _aimAltitude = source.ReadDouble( );
            _minimumTargetWidth = source.ReadDouble( );
            _targetLockTimeout = source.ReadTimeSpan( );
            _updateStatusInterval = source.ReadTimeSpan( );
            _readTimeout = source.ReadTimeSpan( );
            _moveCommandStatusDelay = source.ReadTimeSpan( );
            _ptzProfileName = source.ReadString( );
            _ptzConfigurationToken = source.ReadString( );
            _videoSourceToken = source.ReadString( );
        }

    }
    public class CameraPanCalibrationObject : BaseDataGuid<Kind>
    {
        long _rowVersion = 0;
        Guid _camera;
        DateTime _timestamp;
        public CameraPanCalibrationObject( )
        {
        }

        public CameraPanCalibrationObject( ObjectState objectState, Guid id, long rowVersion, Guid camera, DateTime timestamp )
            : base( objectState, id )
        {
            _rowVersion = rowVersion;
            _camera = camera;
            _timestamp = timestamp;
        }

        public override Kind GetObjectType()
        {
            return Kind.CameraPanCalibration;
        }

        public override BaseData<Kind> Create()
        {
            return new CameraPanCalibrationObject( );
        }

        public override void AssignTo( BaseData<Kind> target )
        {
            base.AssignTo( target );
            var destination = ( CameraPanCalibrationObject )target;
            destination._rowVersion = _rowVersion;
            destination._camera = _camera;
            destination._timestamp = _timestamp;
        }

        public override bool Equals(BaseData<Kind>? other)
        {
            if (base.Equals(other))
            {
                var obj = ( CameraPanCalibrationObject )other;
                if( obj._rowVersion != _rowVersion )
                {
                    return false;
                }
                if( obj._camera != _camera )
                {
                    return false;
                }
                if( obj._timestamp != _timestamp )
                {
                    return false;
                }
                return true;
            }
            return false;
        }

        public override bool IsOfType(Kind objectType)
        {
            if( objectType == Kind.CameraPanCalibration )
            {
                return true;
            }
            return base.IsOfType( objectType );
        }

        public long RowVersion
        {
            get => _rowVersion;
            set
            {
                if( _rowVersion != value )
                {
                    _rowVersion = value;
                    OnPropertyChanged( );
                }
            }
        }
        public Guid Camera
        {
            get => _camera;
            set
            {
                if( _camera != value )
                {
                    _camera = value;
                    OnPropertyChanged( );
                }
            }
        }
        public DateTime Timestamp
        {
            get => _timestamp;
            set
            {
                if( _timestamp != value )
                {
                    _timestamp = value;
                    OnPropertyChanged( );
                }
            }
        }

        public override void WriteTo( [ DisallowNull ] BinaryWriter destination )
        {
            base.WriteTo( destination );
            destination.Write( _rowVersion );
            destination.Write( _camera );
            destination.Write( _timestamp );
        }

        public override void ReadFrom([DisallowNull] BinaryReader source)
        {
            base.ReadFrom( source );
            _rowVersion = source.ReadInt64( );
            _camera = source.ReadGuid( );
            _timestamp = source.ReadDateTime( );
        }

    }
    public class CameraPanCalibrationValueObject : BaseDataGuid<Kind>
    {
        long _rowVersion = 0;
        Guid _panCalibration;
        double _panAngle = 0.0;
        double _panOffset = 0.0;
        public CameraPanCalibrationValueObject( )
        {
        }

        public CameraPanCalibrationValueObject( ObjectState objectState, Guid id, long rowVersion, Guid panCalibration, double panAngle, double panOffset )
            : base( objectState, id )
        {
            _rowVersion = rowVersion;
            _panCalibration = panCalibration;
            _panAngle = panAngle;
            _panOffset = panOffset;
        }

        public override Kind GetObjectType()
        {
            return Kind.CameraPanCalibrationValue;
        }

        public override BaseData<Kind> Create()
        {
            return new CameraPanCalibrationValueObject( );
        }

        public override void AssignTo( BaseData<Kind> target )
        {
            base.AssignTo( target );
            var destination = ( CameraPanCalibrationValueObject )target;
            destination._rowVersion = _rowVersion;
            destination._panCalibration = _panCalibration;
            destination._panAngle = _panAngle;
            destination._panOffset = _panOffset;
        }

        public override bool Equals(BaseData<Kind>? other)
        {
            if (base.Equals(other))
            {
                var obj = ( CameraPanCalibrationValueObject )other;
                if( obj._rowVersion != _rowVersion )
                {
                    return false;
                }
                if( obj._panCalibration != _panCalibration )
                {
                    return false;
                }
                if( obj._panAngle != _panAngle )
                {
                    return false;
                }
                if( obj._panOffset != _panOffset )
                {
                    return false;
                }
                return true;
            }
            return false;
        }

        public override bool IsOfType(Kind objectType)
        {
            if( objectType == Kind.CameraPanCalibrationValue )
            {
                return true;
            }
            return base.IsOfType( objectType );
        }

        public long RowVersion
        {
            get => _rowVersion;
            set
            {
                if( _rowVersion != value )
                {
                    _rowVersion = value;
                    OnPropertyChanged( );
                }
            }
        }
        public Guid PanCalibration
        {
            get => _panCalibration;
            set
            {
                if( _panCalibration != value )
                {
                    _panCalibration = value;
                    OnPropertyChanged( );
                }
            }
        }
        public double PanAngle
        {
            get => _panAngle;
            set
            {
                if( _panAngle != value )
                {
                    _panAngle = value;
                    OnPropertyChanged( );
                }
            }
        }
        public double PanOffset
        {
            get => _panOffset;
            set
            {
                if( _panOffset != value )
                {
                    _panOffset = value;
                    OnPropertyChanged( );
                }
            }
        }

        public override void WriteTo( [ DisallowNull ] BinaryWriter destination )
        {
            base.WriteTo( destination );
            destination.Write( _rowVersion );
            destination.Write( _panCalibration );
            destination.Write( _panAngle );
            destination.Write( _panOffset );
        }

        public override void ReadFrom([DisallowNull] BinaryReader source)
        {
            base.ReadFrom( source );
            _rowVersion = source.ReadInt64( );
            _panCalibration = source.ReadGuid( );
            _panAngle = source.ReadDouble( );
            _panOffset = source.ReadDouble( );
        }

    }
    public class CameraStatusObject : BaseDataGuid<Kind>
    {
        long _rowVersion = 0;
        Guid _camera;
        Guid _track;
        DateTime _timestamp;
        Types.CameraPanTiltMode _positionPanTiltMode = Types.CameraPanTiltMode.Unknown;
        double _panAngle = 0.0;
        double _tiltAngle = 0.0;
        Types.CameraFocalLengthMode _positionFocalLengthMode = Types.CameraFocalLengthMode.Unknown;
        double _focalLength = 0.0;
        Types.CameraMoveStatus _panTiltMoveStatus = Types.CameraMoveStatus.Unknown;
        Types.CameraMoveStatus _zoomMoveStatus = Types.CameraMoveStatus.Unknown;
        Types.CameraPanTiltMode _velocityPanTiltMode = Types.CameraPanTiltMode.Unknown;
        double? _panVelocity;
        double? _tiltVelocity;
        Types.CameraFocalLengthMode _velocityFocalLengthMode = Types.CameraFocalLengthMode.Unknown;
        double? _zoomVelocity;
        Types.CameraFeatures _activeFeatures = Types.CameraFeatures.None;
        string _error = string.Empty;
        public CameraStatusObject( )
        {
        }

        public CameraStatusObject( ObjectState objectState, Guid id, long rowVersion, Guid camera, Guid track, DateTime timestamp, Types.CameraPanTiltMode positionPanTiltMode, double panAngle, double tiltAngle, Types.CameraFocalLengthMode positionFocalLengthMode, double focalLength, Types.CameraMoveStatus panTiltMoveStatus, Types.CameraMoveStatus zoomMoveStatus, Types.CameraPanTiltMode velocityPanTiltMode, double? panVelocity, double? tiltVelocity, Types.CameraFocalLengthMode velocityFocalLengthMode, double? zoomVelocity, Types.CameraFeatures activeFeatures, string error )
            : base( objectState, id )
        {
            _rowVersion = rowVersion;
            _camera = camera;
            _track = track;
            _timestamp = timestamp;
            _positionPanTiltMode = positionPanTiltMode;
            _panAngle = panAngle;
            _tiltAngle = tiltAngle;
            _positionFocalLengthMode = positionFocalLengthMode;
            _focalLength = focalLength;
            _panTiltMoveStatus = panTiltMoveStatus;
            _zoomMoveStatus = zoomMoveStatus;
            _velocityPanTiltMode = velocityPanTiltMode;
            _panVelocity = panVelocity;
            _tiltVelocity = tiltVelocity;
            _velocityFocalLengthMode = velocityFocalLengthMode;
            _zoomVelocity = zoomVelocity;
            _activeFeatures = activeFeatures;
            _error = error;
        }

        public override Kind GetObjectType()
        {
            return Kind.CameraStatus;
        }

        public override BaseData<Kind> Create()
        {
            return new CameraStatusObject( );
        }

        public override void AssignTo( BaseData<Kind> target )
        {
            base.AssignTo( target );
            var destination = ( CameraStatusObject )target;
            destination._rowVersion = _rowVersion;
            destination._camera = _camera;
            destination._track = _track;
            destination._timestamp = _timestamp;
            destination._positionPanTiltMode = _positionPanTiltMode;
            destination._panAngle = _panAngle;
            destination._tiltAngle = _tiltAngle;
            destination._positionFocalLengthMode = _positionFocalLengthMode;
            destination._focalLength = _focalLength;
            destination._panTiltMoveStatus = _panTiltMoveStatus;
            destination._zoomMoveStatus = _zoomMoveStatus;
            destination._velocityPanTiltMode = _velocityPanTiltMode;
            destination._panVelocity = _panVelocity;
            destination._tiltVelocity = _tiltVelocity;
            destination._velocityFocalLengthMode = _velocityFocalLengthMode;
            destination._zoomVelocity = _zoomVelocity;
            destination._activeFeatures = _activeFeatures;
            destination._error = _error;
        }

        public override bool Equals(BaseData<Kind>? other)
        {
            if (base.Equals(other))
            {
                var obj = ( CameraStatusObject )other;
                if( obj._rowVersion != _rowVersion )
                {
                    return false;
                }
                if( obj._camera != _camera )
                {
                    return false;
                }
                if( obj._track != _track )
                {
                    return false;
                }
                if( obj._timestamp != _timestamp )
                {
                    return false;
                }
                if( obj._positionPanTiltMode != _positionPanTiltMode )
                {
                    return false;
                }
                if( obj._panAngle != _panAngle )
                {
                    return false;
                }
                if( obj._tiltAngle != _tiltAngle )
                {
                    return false;
                }
                if( obj._positionFocalLengthMode != _positionFocalLengthMode )
                {
                    return false;
                }
                if( obj._focalLength != _focalLength )
                {
                    return false;
                }
                if( obj._panTiltMoveStatus != _panTiltMoveStatus )
                {
                    return false;
                }
                if( obj._zoomMoveStatus != _zoomMoveStatus )
                {
                    return false;
                }
                if( obj._velocityPanTiltMode != _velocityPanTiltMode )
                {
                    return false;
                }
                if( obj._panVelocity != _panVelocity )
                {
                    return false;
                }
                if( obj._tiltVelocity != _tiltVelocity )
                {
                    return false;
                }
                if( obj._velocityFocalLengthMode != _velocityFocalLengthMode )
                {
                    return false;
                }
                if( obj._zoomVelocity != _zoomVelocity )
                {
                    return false;
                }
                if( obj._activeFeatures != _activeFeatures )
                {
                    return false;
                }
                if( obj._error != _error )
                {
                    return false;
                }
                return true;
            }
            return false;
        }

        public override bool IsOfType(Kind objectType)
        {
            if( objectType == Kind.CameraStatus )
            {
                return true;
            }
            return base.IsOfType( objectType );
        }

        public long RowVersion
        {
            get => _rowVersion;
            set
            {
                if( _rowVersion != value )
                {
                    _rowVersion = value;
                    OnPropertyChanged( );
                }
            }
        }
        public Guid Camera
        {
            get => _camera;
            set
            {
                if( _camera != value )
                {
                    _camera = value;
                    OnPropertyChanged( );
                }
            }
        }
        public Guid Track
        {
            get => _track;
            set
            {
                if( _track != value )
                {
                    _track = value;
                    OnPropertyChanged( );
                }
            }
        }
        public DateTime Timestamp
        {
            get => _timestamp;
            set
            {
                if( _timestamp != value )
                {
                    _timestamp = value;
                    OnPropertyChanged( );
                }
            }
        }
        public Types.CameraPanTiltMode PositionPanTiltMode
        {
            get => _positionPanTiltMode;
            set
            {
                if( _positionPanTiltMode != value )
                {
                    _positionPanTiltMode = value;
                    OnPropertyChanged( );
                }
            }
        }
        public double PanAngle
        {
            get => _panAngle;
            set
            {
                if( _panAngle != value )
                {
                    _panAngle = value;
                    OnPropertyChanged( );
                }
            }
        }
        public double TiltAngle
        {
            get => _tiltAngle;
            set
            {
                if( _tiltAngle != value )
                {
                    _tiltAngle = value;
                    OnPropertyChanged( );
                }
            }
        }
        public Types.CameraFocalLengthMode PositionFocalLengthMode
        {
            get => _positionFocalLengthMode;
            set
            {
                if( _positionFocalLengthMode != value )
                {
                    _positionFocalLengthMode = value;
                    OnPropertyChanged( );
                }
            }
        }
        public double FocalLength
        {
            get => _focalLength;
            set
            {
                if( _focalLength != value )
                {
                    _focalLength = value;
                    OnPropertyChanged( );
                }
            }
        }
        public Types.CameraMoveStatus PanTiltMoveStatus
        {
            get => _panTiltMoveStatus;
            set
            {
                if( _panTiltMoveStatus != value )
                {
                    _panTiltMoveStatus = value;
                    OnPropertyChanged( );
                }
            }
        }
        public Types.CameraMoveStatus ZoomMoveStatus
        {
            get => _zoomMoveStatus;
            set
            {
                if( _zoomMoveStatus != value )
                {
                    _zoomMoveStatus = value;
                    OnPropertyChanged( );
                }
            }
        }
        public Types.CameraPanTiltMode VelocityPanTiltMode
        {
            get => _velocityPanTiltMode;
            set
            {
                if( _velocityPanTiltMode != value )
                {
                    _velocityPanTiltMode = value;
                    OnPropertyChanged( );
                }
            }
        }
        public double? PanVelocity
        {
            get => _panVelocity;
            set
            {
                if( _panVelocity != value )
                {
                    _panVelocity = value;
                    OnPropertyChanged( );
                }
            }
        }
        public double? TiltVelocity
        {
            get => _tiltVelocity;
            set
            {
                if( _tiltVelocity != value )
                {
                    _tiltVelocity = value;
                    OnPropertyChanged( );
                }
            }
        }
        public Types.CameraFocalLengthMode VelocityFocalLengthMode
        {
            get => _velocityFocalLengthMode;
            set
            {
                if( _velocityFocalLengthMode != value )
                {
                    _velocityFocalLengthMode = value;
                    OnPropertyChanged( );
                }
            }
        }
        public double? ZoomVelocity
        {
            get => _zoomVelocity;
            set
            {
                if( _zoomVelocity != value )
                {
                    _zoomVelocity = value;
                    OnPropertyChanged( );
                }
            }
        }
        public Types.CameraFeatures ActiveFeatures
        {
            get => _activeFeatures;
            set
            {
                if( _activeFeatures != value )
                {
                    _activeFeatures = value;
                    OnPropertyChanged( );
                }
            }
        }
        public string Error
        {
            get => _error;
            set
            {
                if( _error != value )
                {
                    _error = value;
                    OnPropertyChanged( );
                }
            }
        }

        public override void WriteTo( [ DisallowNull ] BinaryWriter destination )
        {
            base.WriteTo( destination );
            destination.Write( _rowVersion );
            destination.Write( _camera );
            destination.Write( _track );
            destination.Write( _timestamp );
            destination.Write( _positionPanTiltMode );
            destination.Write( _panAngle );
            destination.Write( _tiltAngle );
            destination.Write( _positionFocalLengthMode );
            destination.Write( _focalLength );
            destination.Write( _panTiltMoveStatus );
            destination.Write( _zoomMoveStatus );
            destination.Write( _velocityPanTiltMode );
            destination.Write( _panVelocity );
            destination.Write( _tiltVelocity );
            destination.Write( _velocityFocalLengthMode );
            destination.Write( _zoomVelocity );
            destination.Write( _activeFeatures );
            destination.Write( _error );
        }

        public override void ReadFrom([DisallowNull] BinaryReader source)
        {
            base.ReadFrom( source );
            _rowVersion = source.ReadInt64( );
            _camera = source.ReadGuid( );
            _track = source.ReadGuid( );
            _timestamp = source.ReadDateTime( );
            _positionPanTiltMode = source.ReadEnum<Types.CameraPanTiltMode>( );
            _panAngle = source.ReadDouble( );
            _tiltAngle = source.ReadDouble( );
            _positionFocalLengthMode = source.ReadEnum<Types.CameraFocalLengthMode>( );
            _focalLength = source.ReadDouble( );
            _panTiltMoveStatus = source.ReadEnum<Types.CameraMoveStatus>( );
            _zoomMoveStatus = source.ReadEnum<Types.CameraMoveStatus>( );
            _velocityPanTiltMode = source.ReadEnum<Types.CameraPanTiltMode>( );
            _panVelocity = source.ReadNullableDouble( );
            _tiltVelocity = source.ReadNullableDouble( );
            _velocityFocalLengthMode = source.ReadEnum<Types.CameraFocalLengthMode>( );
            _zoomVelocity = source.ReadNullableDouble( );
            _activeFeatures = source.ReadEnum<Types.CameraFeatures>( );
            _error = source.ReadString( );
        }

    }
    public class CameraTiltCalibrationObject : BaseDataGuid<Kind>
    {
        long _rowVersion = 0;
        Guid _camera;
        DateTime _timestamp;
        public CameraTiltCalibrationObject( )
        {
        }

        public CameraTiltCalibrationObject( ObjectState objectState, Guid id, long rowVersion, Guid camera, DateTime timestamp )
            : base( objectState, id )
        {
            _rowVersion = rowVersion;
            _camera = camera;
            _timestamp = timestamp;
        }

        public override Kind GetObjectType()
        {
            return Kind.CameraTiltCalibration;
        }

        public override BaseData<Kind> Create()
        {
            return new CameraTiltCalibrationObject( );
        }

        public override void AssignTo( BaseData<Kind> target )
        {
            base.AssignTo( target );
            var destination = ( CameraTiltCalibrationObject )target;
            destination._rowVersion = _rowVersion;
            destination._camera = _camera;
            destination._timestamp = _timestamp;
        }

        public override bool Equals(BaseData<Kind>? other)
        {
            if (base.Equals(other))
            {
                var obj = ( CameraTiltCalibrationObject )other;
                if( obj._rowVersion != _rowVersion )
                {
                    return false;
                }
                if( obj._camera != _camera )
                {
                    return false;
                }
                if( obj._timestamp != _timestamp )
                {
                    return false;
                }
                return true;
            }
            return false;
        }

        public override bool IsOfType(Kind objectType)
        {
            if( objectType == Kind.CameraTiltCalibration )
            {
                return true;
            }
            return base.IsOfType( objectType );
        }

        public long RowVersion
        {
            get => _rowVersion;
            set
            {
                if( _rowVersion != value )
                {
                    _rowVersion = value;
                    OnPropertyChanged( );
                }
            }
        }
        public Guid Camera
        {
            get => _camera;
            set
            {
                if( _camera != value )
                {
                    _camera = value;
                    OnPropertyChanged( );
                }
            }
        }
        public DateTime Timestamp
        {
            get => _timestamp;
            set
            {
                if( _timestamp != value )
                {
                    _timestamp = value;
                    OnPropertyChanged( );
                }
            }
        }

        public override void WriteTo( [ DisallowNull ] BinaryWriter destination )
        {
            base.WriteTo( destination );
            destination.Write( _rowVersion );
            destination.Write( _camera );
            destination.Write( _timestamp );
        }

        public override void ReadFrom([DisallowNull] BinaryReader source)
        {
            base.ReadFrom( source );
            _rowVersion = source.ReadInt64( );
            _camera = source.ReadGuid( );
            _timestamp = source.ReadDateTime( );
        }

    }
    public class CameraTiltCalibrationValueObject : BaseDataGuid<Kind>
    {
        long _rowVersion = 0;
        Guid _tiltCalibration;
        double _panAngle = 0.0;
        double _tiltOffset = 0.0;
        public CameraTiltCalibrationValueObject( )
        {
        }

        public CameraTiltCalibrationValueObject( ObjectState objectState, Guid id, long rowVersion, Guid tiltCalibration, double panAngle, double tiltOffset )
            : base( objectState, id )
        {
            _rowVersion = rowVersion;
            _tiltCalibration = tiltCalibration;
            _panAngle = panAngle;
            _tiltOffset = tiltOffset;
        }

        public override Kind GetObjectType()
        {
            return Kind.CameraTiltCalibrationValue;
        }

        public override BaseData<Kind> Create()
        {
            return new CameraTiltCalibrationValueObject( );
        }

        public override void AssignTo( BaseData<Kind> target )
        {
            base.AssignTo( target );
            var destination = ( CameraTiltCalibrationValueObject )target;
            destination._rowVersion = _rowVersion;
            destination._tiltCalibration = _tiltCalibration;
            destination._panAngle = _panAngle;
            destination._tiltOffset = _tiltOffset;
        }

        public override bool Equals(BaseData<Kind>? other)
        {
            if (base.Equals(other))
            {
                var obj = ( CameraTiltCalibrationValueObject )other;
                if( obj._rowVersion != _rowVersion )
                {
                    return false;
                }
                if( obj._tiltCalibration != _tiltCalibration )
                {
                    return false;
                }
                if( obj._panAngle != _panAngle )
                {
                    return false;
                }
                if( obj._tiltOffset != _tiltOffset )
                {
                    return false;
                }
                return true;
            }
            return false;
        }

        public override bool IsOfType(Kind objectType)
        {
            if( objectType == Kind.CameraTiltCalibrationValue )
            {
                return true;
            }
            return base.IsOfType( objectType );
        }

        public long RowVersion
        {
            get => _rowVersion;
            set
            {
                if( _rowVersion != value )
                {
                    _rowVersion = value;
                    OnPropertyChanged( );
                }
            }
        }
        public Guid TiltCalibration
        {
            get => _tiltCalibration;
            set
            {
                if( _tiltCalibration != value )
                {
                    _tiltCalibration = value;
                    OnPropertyChanged( );
                }
            }
        }
        public double PanAngle
        {
            get => _panAngle;
            set
            {
                if( _panAngle != value )
                {
                    _panAngle = value;
                    OnPropertyChanged( );
                }
            }
        }
        public double TiltOffset
        {
            get => _tiltOffset;
            set
            {
                if( _tiltOffset != value )
                {
                    _tiltOffset = value;
                    OnPropertyChanged( );
                }
            }
        }

        public override void WriteTo( [ DisallowNull ] BinaryWriter destination )
        {
            base.WriteTo( destination );
            destination.Write( _rowVersion );
            destination.Write( _tiltCalibration );
            destination.Write( _panAngle );
            destination.Write( _tiltOffset );
        }

        public override void ReadFrom([DisallowNull] BinaryReader source)
        {
            base.ReadFrom( source );
            _rowVersion = source.ReadInt64( );
            _tiltCalibration = source.ReadGuid( );
            _panAngle = source.ReadDouble( );
            _tiltOffset = source.ReadDouble( );
        }

    }
    public class CameraZoomCalibrationObject : BaseDataGuid<Kind>
    {
        long _rowVersion = 0;
        Guid _camera;
        DateTime _timestamp;
        public CameraZoomCalibrationObject( )
        {
        }

        public CameraZoomCalibrationObject( ObjectState objectState, Guid id, long rowVersion, Guid camera, DateTime timestamp )
            : base( objectState, id )
        {
            _rowVersion = rowVersion;
            _camera = camera;
            _timestamp = timestamp;
        }

        public override Kind GetObjectType()
        {
            return Kind.CameraZoomCalibration;
        }

        public override BaseData<Kind> Create()
        {
            return new CameraZoomCalibrationObject( );
        }

        public override void AssignTo( BaseData<Kind> target )
        {
            base.AssignTo( target );
            var destination = ( CameraZoomCalibrationObject )target;
            destination._rowVersion = _rowVersion;
            destination._camera = _camera;
            destination._timestamp = _timestamp;
        }

        public override bool Equals(BaseData<Kind>? other)
        {
            if (base.Equals(other))
            {
                var obj = ( CameraZoomCalibrationObject )other;
                if( obj._rowVersion != _rowVersion )
                {
                    return false;
                }
                if( obj._camera != _camera )
                {
                    return false;
                }
                if( obj._timestamp != _timestamp )
                {
                    return false;
                }
                return true;
            }
            return false;
        }

        public override bool IsOfType(Kind objectType)
        {
            if( objectType == Kind.CameraZoomCalibration )
            {
                return true;
            }
            return base.IsOfType( objectType );
        }

        public long RowVersion
        {
            get => _rowVersion;
            set
            {
                if( _rowVersion != value )
                {
                    _rowVersion = value;
                    OnPropertyChanged( );
                }
            }
        }
        public Guid Camera
        {
            get => _camera;
            set
            {
                if( _camera != value )
                {
                    _camera = value;
                    OnPropertyChanged( );
                }
            }
        }
        public DateTime Timestamp
        {
            get => _timestamp;
            set
            {
                if( _timestamp != value )
                {
                    _timestamp = value;
                    OnPropertyChanged( );
                }
            }
        }

        public override void WriteTo( [ DisallowNull ] BinaryWriter destination )
        {
            base.WriteTo( destination );
            destination.Write( _rowVersion );
            destination.Write( _camera );
            destination.Write( _timestamp );
        }

        public override void ReadFrom([DisallowNull] BinaryReader source)
        {
            base.ReadFrom( source );
            _rowVersion = source.ReadInt64( );
            _camera = source.ReadGuid( );
            _timestamp = source.ReadDateTime( );
        }

    }
    public class CameraZoomCalibrationValueObject : BaseDataGuid<Kind>
    {
        long _rowVersion = 0;
        Guid _zoomCalibration;
        double _focalLength = 0.0;
        double _focalLengthOffset = 0.0;
        public CameraZoomCalibrationValueObject( )
        {
        }

        public CameraZoomCalibrationValueObject( ObjectState objectState, Guid id, long rowVersion, Guid zoomCalibration, double focalLength, double focalLengthOffset )
            : base( objectState, id )
        {
            _rowVersion = rowVersion;
            _zoomCalibration = zoomCalibration;
            _focalLength = focalLength;
            _focalLengthOffset = focalLengthOffset;
        }

        public override Kind GetObjectType()
        {
            return Kind.CameraZoomCalibrationValue;
        }

        public override BaseData<Kind> Create()
        {
            return new CameraZoomCalibrationValueObject( );
        }

        public override void AssignTo( BaseData<Kind> target )
        {
            base.AssignTo( target );
            var destination = ( CameraZoomCalibrationValueObject )target;
            destination._rowVersion = _rowVersion;
            destination._zoomCalibration = _zoomCalibration;
            destination._focalLength = _focalLength;
            destination._focalLengthOffset = _focalLengthOffset;
        }

        public override bool Equals(BaseData<Kind>? other)
        {
            if (base.Equals(other))
            {
                var obj = ( CameraZoomCalibrationValueObject )other;
                if( obj._rowVersion != _rowVersion )
                {
                    return false;
                }
                if( obj._zoomCalibration != _zoomCalibration )
                {
                    return false;
                }
                if( obj._focalLength != _focalLength )
                {
                    return false;
                }
                if( obj._focalLengthOffset != _focalLengthOffset )
                {
                    return false;
                }
                return true;
            }
            return false;
        }

        public override bool IsOfType(Kind objectType)
        {
            if( objectType == Kind.CameraZoomCalibrationValue )
            {
                return true;
            }
            return base.IsOfType( objectType );
        }

        public long RowVersion
        {
            get => _rowVersion;
            set
            {
                if( _rowVersion != value )
                {
                    _rowVersion = value;
                    OnPropertyChanged( );
                }
            }
        }
        public Guid ZoomCalibration
        {
            get => _zoomCalibration;
            set
            {
                if( _zoomCalibration != value )
                {
                    _zoomCalibration = value;
                    OnPropertyChanged( );
                }
            }
        }
        public double FocalLength
        {
            get => _focalLength;
            set
            {
                if( _focalLength != value )
                {
                    _focalLength = value;
                    OnPropertyChanged( );
                }
            }
        }
        public double FocalLengthOffset
        {
            get => _focalLengthOffset;
            set
            {
                if( _focalLengthOffset != value )
                {
                    _focalLengthOffset = value;
                    OnPropertyChanged( );
                }
            }
        }

        public override void WriteTo( [ DisallowNull ] BinaryWriter destination )
        {
            base.WriteTo( destination );
            destination.Write( _rowVersion );
            destination.Write( _zoomCalibration );
            destination.Write( _focalLength );
            destination.Write( _focalLengthOffset );
        }

        public override void ReadFrom([DisallowNull] BinaryReader source)
        {
            base.ReadFrom( source );
            _rowVersion = source.ReadInt64( );
            _zoomCalibration = source.ReadGuid( );
            _focalLength = source.ReadDouble( );
            _focalLengthOffset = source.ReadDouble( );
        }

    }
    public abstract class CatalogElementObject : BaseDataGuid<Kind>
    {
        long _rowVersion = 0;
        Guid _catalog;
        string _name = string.Empty;
        protected CatalogElementObject( )
        {
        }

        protected CatalogElementObject( ObjectState objectState, Guid id, long rowVersion, Guid catalog, string name )
            : base( objectState, id )
        {
            _rowVersion = rowVersion;
            _catalog = catalog;
            _name = name;
        }

        public override void AssignTo( BaseData<Kind> target )
        {
            base.AssignTo( target );
            var destination = ( CatalogElementObject )target;
            destination._rowVersion = _rowVersion;
            destination._catalog = _catalog;
            destination._name = _name;
        }

        public override bool Equals(BaseData<Kind>? other)
        {
            if (base.Equals(other))
            {
                var obj = ( CatalogElementObject )other;
                if( obj._rowVersion != _rowVersion )
                {
                    return false;
                }
                if( obj._catalog != _catalog )
                {
                    return false;
                }
                if( obj._name != _name )
                {
                    return false;
                }
                return true;
            }
            return false;
        }

        public override bool IsOfType(Kind objectType)
        {
            if( objectType == Kind.CatalogElement )
            {
                return true;
            }
            return base.IsOfType( objectType );
        }

        public long RowVersion
        {
            get => _rowVersion;
            set
            {
                if( _rowVersion != value )
                {
                    _rowVersion = value;
                    OnPropertyChanged( );
                }
            }
        }
        public Guid Catalog
        {
            get => _catalog;
            set
            {
                if( _catalog != value )
                {
                    _catalog = value;
                    OnPropertyChanged( );
                }
            }
        }
        public string Name
        {
            get => _name;
            set
            {
                if( _name != value )
                {
                    _name = value;
                    OnPropertyChanged( );
                }
            }
        }

        public override void WriteTo( [ DisallowNull ] BinaryWriter destination )
        {
            base.WriteTo( destination );
            destination.Write( _rowVersion );
            destination.Write( _catalog );
            destination.Write( _name );
        }

        public override void ReadFrom([DisallowNull] BinaryReader source)
        {
            base.ReadFrom( source );
            _rowVersion = source.ReadInt64( );
            _catalog = source.ReadGuid( );
            _name = source.ReadString( );
        }

    }
    public class CatalogObject : CatalogElementObject
    {
        public CatalogObject( )
        {
        }

        public CatalogObject( ObjectState objectState, Guid id, long rowVersion, Guid catalog, string name )
            : base( objectState, id, rowVersion, catalog, name )
        {
        }

        public override Kind GetObjectType()
        {
            return Kind.Catalog;
        }

        public override BaseData<Kind> Create()
        {
            return new CatalogObject( );
        }

        public override bool IsOfType(Kind objectType)
        {
            if( objectType == Kind.Catalog )
            {
                return true;
            }
            return base.IsOfType( objectType );
        }

    }
    public class ElementObject : CatalogElementObject
    {
        Guid _elementType;
        public ElementObject( )
        {
        }

        public ElementObject( ObjectState objectState, Guid id, long rowVersion, Guid catalog, string name, Guid elementType )
            : base( objectState, id, rowVersion, catalog, name )
        {
            _elementType = elementType;
        }

        public override Kind GetObjectType()
        {
            return Kind.Element;
        }

        public override BaseData<Kind> Create()
        {
            return new ElementObject( );
        }

        public override void AssignTo( BaseData<Kind> target )
        {
            base.AssignTo( target );
            var destination = ( ElementObject )target;
            destination._elementType = _elementType;
        }

        public override bool Equals(BaseData<Kind>? other)
        {
            if (base.Equals(other))
            {
                var obj = ( ElementObject )other;
                if( obj._elementType != _elementType )
                {
                    return false;
                }
                return true;
            }
            return false;
        }

        public override bool IsOfType(Kind objectType)
        {
            if( objectType == Kind.Element )
            {
                return true;
            }
            return base.IsOfType( objectType );
        }

        public Guid ElementType
        {
            get => _elementType;
            set
            {
                if( _elementType != value )
                {
                    _elementType = value;
                    OnPropertyChanged( );
                }
            }
        }

        public override void WriteTo( [ DisallowNull ] BinaryWriter destination )
        {
            base.WriteTo( destination );
            destination.Write( _elementType );
        }

        public override void ReadFrom([DisallowNull] BinaryReader source)
        {
            base.ReadFrom( source );
            _elementType = source.ReadGuid( );
        }

    }
    public class CollectionInfoObject : BaseDataGuid<Kind>
    {
        long _rowVersion = 0;
        long _count = 0;
        public CollectionInfoObject( )
        {
        }

        public CollectionInfoObject( ObjectState objectState, Guid id, long rowVersion, long count )
            : base( objectState, id )
        {
            _rowVersion = rowVersion;
            _count = count;
        }

        public override Kind GetObjectType()
        {
            return Kind.CollectionInfo;
        }

        public override BaseData<Kind> Create()
        {
            return new CollectionInfoObject( );
        }

        public override void AssignTo( BaseData<Kind> target )
        {
            base.AssignTo( target );
            var destination = ( CollectionInfoObject )target;
            destination._rowVersion = _rowVersion;
            destination._count = _count;
        }

        public override bool Equals(BaseData<Kind>? other)
        {
            if (base.Equals(other))
            {
                var obj = ( CollectionInfoObject )other;
                if( obj._rowVersion != _rowVersion )
                {
                    return false;
                }
                if( obj._count != _count )
                {
                    return false;
                }
                return true;
            }
            return false;
        }

        public override bool IsOfType(Kind objectType)
        {
            if( objectType == Kind.CollectionInfo )
            {
                return true;
            }
            return base.IsOfType( objectType );
        }

        public long RowVersion
        {
            get => _rowVersion;
            set
            {
                if( _rowVersion != value )
                {
                    _rowVersion = value;
                    OnPropertyChanged( );
                }
            }
        }
        public long Count
        {
            get => _count;
            set
            {
                if( _count != value )
                {
                    _count = value;
                    OnPropertyChanged( );
                }
            }
        }

        public override void WriteTo( [ DisallowNull ] BinaryWriter destination )
        {
            base.WriteTo( destination );
            destination.Write( _rowVersion );
            destination.Write( _count );
        }

        public override void ReadFrom([DisallowNull] BinaryReader source)
        {
            base.ReadFrom( source );
            _rowVersion = source.ReadInt64( );
            _count = source.ReadInt64( );
        }

    }
    public class CountryObject : BaseDataGuid<Kind>
    {
        long _rowVersion = 0;
        string _name = string.Empty;
        int _code = 0;
        string _alpha2 = string.Empty;
        string _alpha3 = string.Empty;
        public CountryObject( )
        {
        }

        public CountryObject( ObjectState objectState, Guid id, long rowVersion, string name, int code, string alpha2, string alpha3 )
            : base( objectState, id )
        {
            _rowVersion = rowVersion;
            _name = name;
            _code = code;
            _alpha2 = alpha2;
            _alpha3 = alpha3;
        }

        public override Kind GetObjectType()
        {
            return Kind.Country;
        }

        public override BaseData<Kind> Create()
        {
            return new CountryObject( );
        }

        public override void AssignTo( BaseData<Kind> target )
        {
            base.AssignTo( target );
            var destination = ( CountryObject )target;
            destination._rowVersion = _rowVersion;
            destination._name = _name;
            destination._code = _code;
            destination._alpha2 = _alpha2;
            destination._alpha3 = _alpha3;
        }

        public override bool Equals(BaseData<Kind>? other)
        {
            if (base.Equals(other))
            {
                var obj = ( CountryObject )other;
                if( obj._rowVersion != _rowVersion )
                {
                    return false;
                }
                if( obj._name != _name )
                {
                    return false;
                }
                if( obj._code != _code )
                {
                    return false;
                }
                if( obj._alpha2 != _alpha2 )
                {
                    return false;
                }
                if( obj._alpha3 != _alpha3 )
                {
                    return false;
                }
                return true;
            }
            return false;
        }

        public override bool IsOfType(Kind objectType)
        {
            if( objectType == Kind.Country )
            {
                return true;
            }
            return base.IsOfType( objectType );
        }

        public long RowVersion
        {
            get => _rowVersion;
            set
            {
                if( _rowVersion != value )
                {
                    _rowVersion = value;
                    OnPropertyChanged( );
                }
            }
        }
        public string Name
        {
            get => _name;
            set
            {
                if( _name != value )
                {
                    _name = value;
                    OnPropertyChanged( );
                }
            }
        }
        public int Code
        {
            get => _code;
            set
            {
                if( _code != value )
                {
                    _code = value;
                    OnPropertyChanged( );
                }
            }
        }
        public string Alpha2
        {
            get => _alpha2;
            set
            {
                if( _alpha2 != value )
                {
                    _alpha2 = value;
                    OnPropertyChanged( );
                }
            }
        }
        public string Alpha3
        {
            get => _alpha3;
            set
            {
                if( _alpha3 != value )
                {
                    _alpha3 = value;
                    OnPropertyChanged( );
                }
            }
        }

        public override void WriteTo( [ DisallowNull ] BinaryWriter destination )
        {
            base.WriteTo( destination );
            destination.Write( _rowVersion );
            destination.Write( _name );
            destination.Write( _code );
            destination.Write( _alpha2 );
            destination.Write( _alpha3 );
        }

        public override void ReadFrom([DisallowNull] BinaryReader source)
        {
            base.ReadFrom( source );
            _rowVersion = source.ReadInt64( );
            _name = source.ReadString( );
            _code = source.ReadInt32( );
            _alpha2 = source.ReadString( );
            _alpha3 = source.ReadString( );
        }

    }
    public class CursorInfoObject : BaseDataGuid<Kind>
    {
        long _rowVersion = 0;
        int _typeCode = 0;
        public CursorInfoObject( )
        {
        }

        public CursorInfoObject( ObjectState objectState, Guid id, long rowVersion, int typeCode )
            : base( objectState, id )
        {
            _rowVersion = rowVersion;
            _typeCode = typeCode;
        }

        public override Kind GetObjectType()
        {
            return Kind.CursorInfo;
        }

        public override BaseData<Kind> Create()
        {
            return new CursorInfoObject( );
        }

        public override void AssignTo( BaseData<Kind> target )
        {
            base.AssignTo( target );
            var destination = ( CursorInfoObject )target;
            destination._rowVersion = _rowVersion;
            destination._typeCode = _typeCode;
        }

        public override bool Equals(BaseData<Kind>? other)
        {
            if (base.Equals(other))
            {
                var obj = ( CursorInfoObject )other;
                if( obj._rowVersion != _rowVersion )
                {
                    return false;
                }
                if( obj._typeCode != _typeCode )
                {
                    return false;
                }
                return true;
            }
            return false;
        }

        public override bool IsOfType(Kind objectType)
        {
            if( objectType == Kind.CursorInfo )
            {
                return true;
            }
            return base.IsOfType( objectType );
        }

        public long RowVersion
        {
            get => _rowVersion;
            set
            {
                if( _rowVersion != value )
                {
                    _rowVersion = value;
                    OnPropertyChanged( );
                }
            }
        }
        public int TypeCode
        {
            get => _typeCode;
            set
            {
                if( _typeCode != value )
                {
                    _typeCode = value;
                    OnPropertyChanged( );
                }
            }
        }

        public override void WriteTo( [ DisallowNull ] BinaryWriter destination )
        {
            base.WriteTo( destination );
            destination.Write( _rowVersion );
            destination.Write( _typeCode );
        }

        public override void ReadFrom([DisallowNull] BinaryReader source)
        {
            base.ReadFrom( source );
            _rowVersion = source.ReadInt64( );
            _typeCode = source.ReadInt32( );
        }

    }
    public class DateTimeTimeseriesValueObject : BaseDataGuid<Kind>
    {
        long _rowVersion = 0;
        Guid _timeseries;
        DateTime _timestamp;
        DateTime? _value;
        public DateTimeTimeseriesValueObject( )
        {
        }

        public DateTimeTimeseriesValueObject( ObjectState objectState, Guid id, long rowVersion, Guid timeseries, DateTime timestamp, DateTime? value__ )
            : base( objectState, id )
        {
            _rowVersion = rowVersion;
            _timeseries = timeseries;
            _timestamp = timestamp;
            _value = value__;
        }

        public override Kind GetObjectType()
        {
            return Kind.DateTimeTimeseriesValue;
        }

        public override BaseData<Kind> Create()
        {
            return new DateTimeTimeseriesValueObject( );
        }

        public override void AssignTo( BaseData<Kind> target )
        {
            base.AssignTo( target );
            var destination = ( DateTimeTimeseriesValueObject )target;
            destination._rowVersion = _rowVersion;
            destination._timeseries = _timeseries;
            destination._timestamp = _timestamp;
            destination._value = _value;
        }

        public override bool Equals(BaseData<Kind>? other)
        {
            if (base.Equals(other))
            {
                var obj = ( DateTimeTimeseriesValueObject )other;
                if( obj._rowVersion != _rowVersion )
                {
                    return false;
                }
                if( obj._timeseries != _timeseries )
                {
                    return false;
                }
                if( obj._timestamp != _timestamp )
                {
                    return false;
                }
                if( obj._value != _value )
                {
                    return false;
                }
                return true;
            }
            return false;
        }

        public override bool IsOfType(Kind objectType)
        {
            if( objectType == Kind.DateTimeTimeseriesValue )
            {
                return true;
            }
            return base.IsOfType( objectType );
        }

        public long RowVersion
        {
            get => _rowVersion;
            set
            {
                if( _rowVersion != value )
                {
                    _rowVersion = value;
                    OnPropertyChanged( );
                }
            }
        }
        public Guid Timeseries
        {
            get => _timeseries;
            set
            {
                if( _timeseries != value )
                {
                    _timeseries = value;
                    OnPropertyChanged( );
                }
            }
        }
        public DateTime Timestamp
        {
            get => _timestamp;
            set
            {
                if( _timestamp != value )
                {
                    _timestamp = value;
                    OnPropertyChanged( );
                }
            }
        }
        public DateTime? Value
        {
            get => _value;
            set
            {
                if( _value != value )
                {
                    _value = value;
                    OnPropertyChanged( );
                }
            }
        }

        public override void WriteTo( [ DisallowNull ] BinaryWriter destination )
        {
            base.WriteTo( destination );
            destination.Write( _rowVersion );
            destination.Write( _timeseries );
            destination.Write( _timestamp );
            destination.Write( _value );
        }

        public override void ReadFrom([DisallowNull] BinaryReader source)
        {
            base.ReadFrom( source );
            _rowVersion = source.ReadInt64( );
            _timeseries = source.ReadGuid( );
            _timestamp = source.ReadDateTime( );
            _value = source.ReadNullableDateTime( );
        }

    }
    public class DeviceHostObject : BaseDataGuid<Kind>
    {
        long _rowVersion = 0;
        string _name = string.Empty;
        public DeviceHostObject( )
        {
        }

        public DeviceHostObject( ObjectState objectState, Guid id, long rowVersion, string name )
            : base( objectState, id )
        {
            _rowVersion = rowVersion;
            _name = name;
        }

        public override Kind GetObjectType()
        {
            return Kind.DeviceHost;
        }

        public override BaseData<Kind> Create()
        {
            return new DeviceHostObject( );
        }

        public override void AssignTo( BaseData<Kind> target )
        {
            base.AssignTo( target );
            var destination = ( DeviceHostObject )target;
            destination._rowVersion = _rowVersion;
            destination._name = _name;
        }

        public override bool Equals(BaseData<Kind>? other)
        {
            if (base.Equals(other))
            {
                var obj = ( DeviceHostObject )other;
                if( obj._rowVersion != _rowVersion )
                {
                    return false;
                }
                if( obj._name != _name )
                {
                    return false;
                }
                return true;
            }
            return false;
        }

        public override bool IsOfType(Kind objectType)
        {
            if( objectType == Kind.DeviceHost )
            {
                return true;
            }
            return base.IsOfType( objectType );
        }

        public long RowVersion
        {
            get => _rowVersion;
            set
            {
                if( _rowVersion != value )
                {
                    _rowVersion = value;
                    OnPropertyChanged( );
                }
            }
        }
        public string Name
        {
            get => _name;
            set
            {
                if( _name != value )
                {
                    _name = value;
                    OnPropertyChanged( );
                }
            }
        }

        public override void WriteTo( [ DisallowNull ] BinaryWriter destination )
        {
            base.WriteTo( destination );
            destination.Write( _rowVersion );
            destination.Write( _name );
        }

        public override void ReadFrom([DisallowNull] BinaryReader source)
        {
            base.ReadFrom( source );
            _rowVersion = source.ReadInt64( );
            _name = source.ReadString( );
        }

    }
    public class DeviceHostConfigurationObject : BaseDataGuid<Kind>
    {
        long _rowVersion = 0;
        Guid _host;
        DateTime _timestamp;
        string _hostname = string.Empty;
        int _port = 0;
        string _queueName = string.Empty;
        public DeviceHostConfigurationObject( )
        {
        }

        public DeviceHostConfigurationObject( ObjectState objectState, Guid id, long rowVersion, Guid host, DateTime timestamp, string hostname, int port, string queueName )
            : base( objectState, id )
        {
            _rowVersion = rowVersion;
            _host = host;
            _timestamp = timestamp;
            _hostname = hostname;
            _port = port;
            _queueName = queueName;
        }

        public override Kind GetObjectType()
        {
            return Kind.DeviceHostConfiguration;
        }

        public override BaseData<Kind> Create()
        {
            return new DeviceHostConfigurationObject( );
        }

        public override void AssignTo( BaseData<Kind> target )
        {
            base.AssignTo( target );
            var destination = ( DeviceHostConfigurationObject )target;
            destination._rowVersion = _rowVersion;
            destination._host = _host;
            destination._timestamp = _timestamp;
            destination._hostname = _hostname;
            destination._port = _port;
            destination._queueName = _queueName;
        }

        public override bool Equals(BaseData<Kind>? other)
        {
            if (base.Equals(other))
            {
                var obj = ( DeviceHostConfigurationObject )other;
                if( obj._rowVersion != _rowVersion )
                {
                    return false;
                }
                if( obj._host != _host )
                {
                    return false;
                }
                if( obj._timestamp != _timestamp )
                {
                    return false;
                }
                if( obj._hostname != _hostname )
                {
                    return false;
                }
                if( obj._port != _port )
                {
                    return false;
                }
                if( obj._queueName != _queueName )
                {
                    return false;
                }
                return true;
            }
            return false;
        }

        public override bool IsOfType(Kind objectType)
        {
            if( objectType == Kind.DeviceHostConfiguration )
            {
                return true;
            }
            return base.IsOfType( objectType );
        }

        public long RowVersion
        {
            get => _rowVersion;
            set
            {
                if( _rowVersion != value )
                {
                    _rowVersion = value;
                    OnPropertyChanged( );
                }
            }
        }
        public Guid Host
        {
            get => _host;
            set
            {
                if( _host != value )
                {
                    _host = value;
                    OnPropertyChanged( );
                }
            }
        }
        public DateTime Timestamp
        {
            get => _timestamp;
            set
            {
                if( _timestamp != value )
                {
                    _timestamp = value;
                    OnPropertyChanged( );
                }
            }
        }
        public string Hostname
        {
            get => _hostname;
            set
            {
                if( _hostname != value )
                {
                    _hostname = value;
                    OnPropertyChanged( );
                }
            }
        }
        public int Port
        {
            get => _port;
            set
            {
                if( _port != value )
                {
                    _port = value;
                    OnPropertyChanged( );
                }
            }
        }
        public string QueueName
        {
            get => _queueName;
            set
            {
                if( _queueName != value )
                {
                    _queueName = value;
                    OnPropertyChanged( );
                }
            }
        }

        public override void WriteTo( [ DisallowNull ] BinaryWriter destination )
        {
            base.WriteTo( destination );
            destination.Write( _rowVersion );
            destination.Write( _host );
            destination.Write( _timestamp );
            destination.Write( _hostname );
            destination.Write( _port );
            destination.Write( _queueName );
        }

        public override void ReadFrom([DisallowNull] BinaryReader source)
        {
            base.ReadFrom( source );
            _rowVersion = source.ReadInt64( );
            _host = source.ReadGuid( );
            _timestamp = source.ReadDateTime( );
            _hostname = source.ReadString( );
            _port = source.ReadInt32( );
            _queueName = source.ReadString( );
        }

    }
    public class DoubleTimeseriesValueObject : BaseDataGuid<Kind>
    {
        long _rowVersion = 0;
        Guid _timeseries;
        DateTime _timestamp;
        double? _value;
        public DoubleTimeseriesValueObject( )
        {
        }

        public DoubleTimeseriesValueObject( ObjectState objectState, Guid id, long rowVersion, Guid timeseries, DateTime timestamp, double? value__ )
            : base( objectState, id )
        {
            _rowVersion = rowVersion;
            _timeseries = timeseries;
            _timestamp = timestamp;
            _value = value__;
        }

        public override Kind GetObjectType()
        {
            return Kind.DoubleTimeseriesValue;
        }

        public override BaseData<Kind> Create()
        {
            return new DoubleTimeseriesValueObject( );
        }

        public override void AssignTo( BaseData<Kind> target )
        {
            base.AssignTo( target );
            var destination = ( DoubleTimeseriesValueObject )target;
            destination._rowVersion = _rowVersion;
            destination._timeseries = _timeseries;
            destination._timestamp = _timestamp;
            destination._value = _value;
        }

        public override bool Equals(BaseData<Kind>? other)
        {
            if (base.Equals(other))
            {
                var obj = ( DoubleTimeseriesValueObject )other;
                if( obj._rowVersion != _rowVersion )
                {
                    return false;
                }
                if( obj._timeseries != _timeseries )
                {
                    return false;
                }
                if( obj._timestamp != _timestamp )
                {
                    return false;
                }
                if( obj._value != _value )
                {
                    return false;
                }
                return true;
            }
            return false;
        }

        public override bool IsOfType(Kind objectType)
        {
            if( objectType == Kind.DoubleTimeseriesValue )
            {
                return true;
            }
            return base.IsOfType( objectType );
        }

        public long RowVersion
        {
            get => _rowVersion;
            set
            {
                if( _rowVersion != value )
                {
                    _rowVersion = value;
                    OnPropertyChanged( );
                }
            }
        }
        public Guid Timeseries
        {
            get => _timeseries;
            set
            {
                if( _timeseries != value )
                {
                    _timeseries = value;
                    OnPropertyChanged( );
                }
            }
        }
        public DateTime Timestamp
        {
            get => _timestamp;
            set
            {
                if( _timestamp != value )
                {
                    _timestamp = value;
                    OnPropertyChanged( );
                }
            }
        }
        public double? Value
        {
            get => _value;
            set
            {
                if( _value != value )
                {
                    _value = value;
                    OnPropertyChanged( );
                }
            }
        }

        public override void WriteTo( [ DisallowNull ] BinaryWriter destination )
        {
            base.WriteTo( destination );
            destination.Write( _rowVersion );
            destination.Write( _timeseries );
            destination.Write( _timestamp );
            destination.Write( _value );
        }

        public override void ReadFrom([DisallowNull] BinaryReader source)
        {
            base.ReadFrom( source );
            _rowVersion = source.ReadInt64( );
            _timeseries = source.ReadGuid( );
            _timestamp = source.ReadDateTime( );
            _value = source.ReadNullableDouble( );
        }

    }
    public class FacilityTypeObject : BaseDataGuid<Kind>
    {
        long _rowVersion = 0;
        string _name = string.Empty;
        public FacilityTypeObject( )
        {
        }

        public FacilityTypeObject( ObjectState objectState, Guid id, long rowVersion, string name )
            : base( objectState, id )
        {
            _rowVersion = rowVersion;
            _name = name;
        }

        public override Kind GetObjectType()
        {
            return Kind.FacilityType;
        }

        public override BaseData<Kind> Create()
        {
            return new FacilityTypeObject( );
        }

        public override void AssignTo( BaseData<Kind> target )
        {
            base.AssignTo( target );
            var destination = ( FacilityTypeObject )target;
            destination._rowVersion = _rowVersion;
            destination._name = _name;
        }

        public override bool Equals(BaseData<Kind>? other)
        {
            if (base.Equals(other))
            {
                var obj = ( FacilityTypeObject )other;
                if( obj._rowVersion != _rowVersion )
                {
                    return false;
                }
                if( obj._name != _name )
                {
                    return false;
                }
                return true;
            }
            return false;
        }

        public override bool IsOfType(Kind objectType)
        {
            if( objectType == Kind.FacilityType )
            {
                return true;
            }
            return base.IsOfType( objectType );
        }

        public long RowVersion
        {
            get => _rowVersion;
            set
            {
                if( _rowVersion != value )
                {
                    _rowVersion = value;
                    OnPropertyChanged( );
                }
            }
        }
        public string Name
        {
            get => _name;
            set
            {
                if( _name != value )
                {
                    _name = value;
                    OnPropertyChanged( );
                }
            }
        }

        public override void WriteTo( [ DisallowNull ] BinaryWriter destination )
        {
            base.WriteTo( destination );
            destination.Write( _rowVersion );
            destination.Write( _name );
        }

        public override void ReadFrom([DisallowNull] BinaryReader source)
        {
            base.ReadFrom( source );
            _rowVersion = source.ReadInt64( );
            _name = source.ReadString( );
        }

    }
    public class GeoPosition2DTimeseriesValueObject : BaseDataGuid<Kind>
    {
        long _rowVersion = 0;
        Guid _timeseries;
        DateTime _timestamp;
        double? _latitude;
        double? _longitude;
        public GeoPosition2DTimeseriesValueObject( )
        {
        }

        public GeoPosition2DTimeseriesValueObject( ObjectState objectState, Guid id, long rowVersion, Guid timeseries, DateTime timestamp, double? latitude, double? longitude )
            : base( objectState, id )
        {
            _rowVersion = rowVersion;
            _timeseries = timeseries;
            _timestamp = timestamp;
            _latitude = latitude;
            _longitude = longitude;
        }

        public override Kind GetObjectType()
        {
            return Kind.GeoPosition2DTimeseriesValue;
        }

        public override BaseData<Kind> Create()
        {
            return new GeoPosition2DTimeseriesValueObject( );
        }

        public override void AssignTo( BaseData<Kind> target )
        {
            base.AssignTo( target );
            var destination = ( GeoPosition2DTimeseriesValueObject )target;
            destination._rowVersion = _rowVersion;
            destination._timeseries = _timeseries;
            destination._timestamp = _timestamp;
            destination._latitude = _latitude;
            destination._longitude = _longitude;
        }

        public override bool Equals(BaseData<Kind>? other)
        {
            if (base.Equals(other))
            {
                var obj = ( GeoPosition2DTimeseriesValueObject )other;
                if( obj._rowVersion != _rowVersion )
                {
                    return false;
                }
                if( obj._timeseries != _timeseries )
                {
                    return false;
                }
                if( obj._timestamp != _timestamp )
                {
                    return false;
                }
                if( obj._latitude != _latitude )
                {
                    return false;
                }
                if( obj._longitude != _longitude )
                {
                    return false;
                }
                return true;
            }
            return false;
        }

        public override bool IsOfType(Kind objectType)
        {
            if( objectType == Kind.GeoPosition2DTimeseriesValue )
            {
                return true;
            }
            return base.IsOfType( objectType );
        }

        public long RowVersion
        {
            get => _rowVersion;
            set
            {
                if( _rowVersion != value )
                {
                    _rowVersion = value;
                    OnPropertyChanged( );
                }
            }
        }
        public Guid Timeseries
        {
            get => _timeseries;
            set
            {
                if( _timeseries != value )
                {
                    _timeseries = value;
                    OnPropertyChanged( );
                }
            }
        }
        public DateTime Timestamp
        {
            get => _timestamp;
            set
            {
                if( _timestamp != value )
                {
                    _timestamp = value;
                    OnPropertyChanged( );
                }
            }
        }
        public double? Latitude
        {
            get => _latitude;
            set
            {
                if( _latitude != value )
                {
                    _latitude = value;
                    OnPropertyChanged( );
                }
            }
        }
        public double? Longitude
        {
            get => _longitude;
            set
            {
                if( _longitude != value )
                {
                    _longitude = value;
                    OnPropertyChanged( );
                }
            }
        }

        public override void WriteTo( [ DisallowNull ] BinaryWriter destination )
        {
            base.WriteTo( destination );
            destination.Write( _rowVersion );
            destination.Write( _timeseries );
            destination.Write( _timestamp );
            destination.Write( _latitude );
            destination.Write( _longitude );
        }

        public override void ReadFrom([DisallowNull] BinaryReader source)
        {
            base.ReadFrom( source );
            _rowVersion = source.ReadInt64( );
            _timeseries = source.ReadGuid( );
            _timestamp = source.ReadDateTime( );
            _latitude = source.ReadNullableDouble( );
            _longitude = source.ReadNullableDouble( );
        }

    }
    public class GeoPosition3DTimeseriesValueObject : BaseDataGuid<Kind>
    {
        long _rowVersion = 0;
        Guid _timeseries;
        DateTime _timestamp;
        double? _latitude;
        double? _longitude;
        double? _altitude;
        public GeoPosition3DTimeseriesValueObject( )
        {
        }

        public GeoPosition3DTimeseriesValueObject( ObjectState objectState, Guid id, long rowVersion, Guid timeseries, DateTime timestamp, double? latitude, double? longitude, double? altitude )
            : base( objectState, id )
        {
            _rowVersion = rowVersion;
            _timeseries = timeseries;
            _timestamp = timestamp;
            _latitude = latitude;
            _longitude = longitude;
            _altitude = altitude;
        }

        public override Kind GetObjectType()
        {
            return Kind.GeoPosition3DTimeseriesValue;
        }

        public override BaseData<Kind> Create()
        {
            return new GeoPosition3DTimeseriesValueObject( );
        }

        public override void AssignTo( BaseData<Kind> target )
        {
            base.AssignTo( target );
            var destination = ( GeoPosition3DTimeseriesValueObject )target;
            destination._rowVersion = _rowVersion;
            destination._timeseries = _timeseries;
            destination._timestamp = _timestamp;
            destination._latitude = _latitude;
            destination._longitude = _longitude;
            destination._altitude = _altitude;
        }

        public override bool Equals(BaseData<Kind>? other)
        {
            if (base.Equals(other))
            {
                var obj = ( GeoPosition3DTimeseriesValueObject )other;
                if( obj._rowVersion != _rowVersion )
                {
                    return false;
                }
                if( obj._timeseries != _timeseries )
                {
                    return false;
                }
                if( obj._timestamp != _timestamp )
                {
                    return false;
                }
                if( obj._latitude != _latitude )
                {
                    return false;
                }
                if( obj._longitude != _longitude )
                {
                    return false;
                }
                if( obj._altitude != _altitude )
                {
                    return false;
                }
                return true;
            }
            return false;
        }

        public override bool IsOfType(Kind objectType)
        {
            if( objectType == Kind.GeoPosition3DTimeseriesValue )
            {
                return true;
            }
            return base.IsOfType( objectType );
        }

        public long RowVersion
        {
            get => _rowVersion;
            set
            {
                if( _rowVersion != value )
                {
                    _rowVersion = value;
                    OnPropertyChanged( );
                }
            }
        }
        public Guid Timeseries
        {
            get => _timeseries;
            set
            {
                if( _timeseries != value )
                {
                    _timeseries = value;
                    OnPropertyChanged( );
                }
            }
        }
        public DateTime Timestamp
        {
            get => _timestamp;
            set
            {
                if( _timestamp != value )
                {
                    _timestamp = value;
                    OnPropertyChanged( );
                }
            }
        }
        public double? Latitude
        {
            get => _latitude;
            set
            {
                if( _latitude != value )
                {
                    _latitude = value;
                    OnPropertyChanged( );
                }
            }
        }
        public double? Longitude
        {
            get => _longitude;
            set
            {
                if( _longitude != value )
                {
                    _longitude = value;
                    OnPropertyChanged( );
                }
            }
        }
        public double? Altitude
        {
            get => _altitude;
            set
            {
                if( _altitude != value )
                {
                    _altitude = value;
                    OnPropertyChanged( );
                }
            }
        }

        public override void WriteTo( [ DisallowNull ] BinaryWriter destination )
        {
            base.WriteTo( destination );
            destination.Write( _rowVersion );
            destination.Write( _timeseries );
            destination.Write( _timestamp );
            destination.Write( _latitude );
            destination.Write( _longitude );
            destination.Write( _altitude );
        }

        public override void ReadFrom([DisallowNull] BinaryReader source)
        {
            base.ReadFrom( source );
            _rowVersion = source.ReadInt64( );
            _timeseries = source.ReadGuid( );
            _timestamp = source.ReadDateTime( );
            _latitude = source.ReadNullableDouble( );
            _longitude = source.ReadNullableDouble( );
            _altitude = source.ReadNullableDouble( );
        }

    }
    public class GNSSDeviceCommandObject : BaseDataGuid<Kind>
    {
        long _rowVersion = 0;
        Guid _gNSSDevice;
        DateTime _timestamp;
        Types.DeviceCommandSourceType _deviceCommandSourceType = Types.DeviceCommandSourceType.Unknown;
        Guid _deviceCommandSourceId;
        Guid _reply;
        public GNSSDeviceCommandObject( )
        {
        }

        public GNSSDeviceCommandObject( ObjectState objectState, Guid id, long rowVersion, Guid gNSSDevice, DateTime timestamp, Types.DeviceCommandSourceType deviceCommandSourceType, Guid deviceCommandSourceId, Guid reply )
            : base( objectState, id )
        {
            _rowVersion = rowVersion;
            _gNSSDevice = gNSSDevice;
            _timestamp = timestamp;
            _deviceCommandSourceType = deviceCommandSourceType;
            _deviceCommandSourceId = deviceCommandSourceId;
            _reply = reply;
        }

        public override Kind GetObjectType()
        {
            return Kind.GNSSDeviceCommand;
        }

        public override BaseData<Kind> Create()
        {
            return new GNSSDeviceCommandObject( );
        }

        public override void AssignTo( BaseData<Kind> target )
        {
            base.AssignTo( target );
            var destination = ( GNSSDeviceCommandObject )target;
            destination._rowVersion = _rowVersion;
            destination._gNSSDevice = _gNSSDevice;
            destination._timestamp = _timestamp;
            destination._deviceCommandSourceType = _deviceCommandSourceType;
            destination._deviceCommandSourceId = _deviceCommandSourceId;
            destination._reply = _reply;
        }

        public override bool Equals(BaseData<Kind>? other)
        {
            if (base.Equals(other))
            {
                var obj = ( GNSSDeviceCommandObject )other;
                if( obj._rowVersion != _rowVersion )
                {
                    return false;
                }
                if( obj._gNSSDevice != _gNSSDevice )
                {
                    return false;
                }
                if( obj._timestamp != _timestamp )
                {
                    return false;
                }
                if( obj._deviceCommandSourceType != _deviceCommandSourceType )
                {
                    return false;
                }
                if( obj._deviceCommandSourceId != _deviceCommandSourceId )
                {
                    return false;
                }
                if( obj._reply != _reply )
                {
                    return false;
                }
                return true;
            }
            return false;
        }

        public override bool IsOfType(Kind objectType)
        {
            if( objectType == Kind.GNSSDeviceCommand )
            {
                return true;
            }
            return base.IsOfType( objectType );
        }

        public long RowVersion
        {
            get => _rowVersion;
            set
            {
                if( _rowVersion != value )
                {
                    _rowVersion = value;
                    OnPropertyChanged( );
                }
            }
        }
        public Guid GNSSDevice
        {
            get => _gNSSDevice;
            set
            {
                if( _gNSSDevice != value )
                {
                    _gNSSDevice = value;
                    OnPropertyChanged( );
                }
            }
        }
        public DateTime Timestamp
        {
            get => _timestamp;
            set
            {
                if( _timestamp != value )
                {
                    _timestamp = value;
                    OnPropertyChanged( );
                }
            }
        }
        public Types.DeviceCommandSourceType DeviceCommandSourceType
        {
            get => _deviceCommandSourceType;
            set
            {
                if( _deviceCommandSourceType != value )
                {
                    _deviceCommandSourceType = value;
                    OnPropertyChanged( );
                }
            }
        }
        public Guid DeviceCommandSourceId
        {
            get => _deviceCommandSourceId;
            set
            {
                if( _deviceCommandSourceId != value )
                {
                    _deviceCommandSourceId = value;
                    OnPropertyChanged( );
                }
            }
        }
        public Guid Reply
        {
            get => _reply;
            set
            {
                if( _reply != value )
                {
                    _reply = value;
                    OnPropertyChanged( );
                }
            }
        }

        public override void WriteTo( [ DisallowNull ] BinaryWriter destination )
        {
            base.WriteTo( destination );
            destination.Write( _rowVersion );
            destination.Write( _gNSSDevice );
            destination.Write( _timestamp );
            destination.Write( _deviceCommandSourceType );
            destination.Write( _deviceCommandSourceId );
            destination.Write( _reply );
        }

        public override void ReadFrom([DisallowNull] BinaryReader source)
        {
            base.ReadFrom( source );
            _rowVersion = source.ReadInt64( );
            _gNSSDevice = source.ReadGuid( );
            _timestamp = source.ReadDateTime( );
            _deviceCommandSourceType = source.ReadEnum<Types.DeviceCommandSourceType>( );
            _deviceCommandSourceId = source.ReadGuid( );
            _reply = source.ReadGuid( );
        }

    }
    public class GNSSDeviceCommandReplyObject : BaseDataGuid<Kind>
    {
        long _rowVersion = 0;
        Guid _gNSSDevice;
        DateTime _timestamp;
        Guid _command;
        Types.DeviceCommandReplyStatus _status = Types.DeviceCommandReplyStatus.Unknown;
        string _message = string.Empty;
        public GNSSDeviceCommandReplyObject( )
        {
        }

        public GNSSDeviceCommandReplyObject( ObjectState objectState, Guid id, long rowVersion, Guid gNSSDevice, DateTime timestamp, Guid command, Types.DeviceCommandReplyStatus status, string message )
            : base( objectState, id )
        {
            _rowVersion = rowVersion;
            _gNSSDevice = gNSSDevice;
            _timestamp = timestamp;
            _command = command;
            _status = status;
            _message = message;
        }

        public override Kind GetObjectType()
        {
            return Kind.GNSSDeviceCommandReply;
        }

        public override BaseData<Kind> Create()
        {
            return new GNSSDeviceCommandReplyObject( );
        }

        public override void AssignTo( BaseData<Kind> target )
        {
            base.AssignTo( target );
            var destination = ( GNSSDeviceCommandReplyObject )target;
            destination._rowVersion = _rowVersion;
            destination._gNSSDevice = _gNSSDevice;
            destination._timestamp = _timestamp;
            destination._command = _command;
            destination._status = _status;
            destination._message = _message;
        }

        public override bool Equals(BaseData<Kind>? other)
        {
            if (base.Equals(other))
            {
                var obj = ( GNSSDeviceCommandReplyObject )other;
                if( obj._rowVersion != _rowVersion )
                {
                    return false;
                }
                if( obj._gNSSDevice != _gNSSDevice )
                {
                    return false;
                }
                if( obj._timestamp != _timestamp )
                {
                    return false;
                }
                if( obj._command != _command )
                {
                    return false;
                }
                if( obj._status != _status )
                {
                    return false;
                }
                if( obj._message != _message )
                {
                    return false;
                }
                return true;
            }
            return false;
        }

        public override bool IsOfType(Kind objectType)
        {
            if( objectType == Kind.GNSSDeviceCommandReply )
            {
                return true;
            }
            return base.IsOfType( objectType );
        }

        public long RowVersion
        {
            get => _rowVersion;
            set
            {
                if( _rowVersion != value )
                {
                    _rowVersion = value;
                    OnPropertyChanged( );
                }
            }
        }
        public Guid GNSSDevice
        {
            get => _gNSSDevice;
            set
            {
                if( _gNSSDevice != value )
                {
                    _gNSSDevice = value;
                    OnPropertyChanged( );
                }
            }
        }
        public DateTime Timestamp
        {
            get => _timestamp;
            set
            {
                if( _timestamp != value )
                {
                    _timestamp = value;
                    OnPropertyChanged( );
                }
            }
        }
        public Guid Command
        {
            get => _command;
            set
            {
                if( _command != value )
                {
                    _command = value;
                    OnPropertyChanged( );
                }
            }
        }
        public Types.DeviceCommandReplyStatus Status
        {
            get => _status;
            set
            {
                if( _status != value )
                {
                    _status = value;
                    OnPropertyChanged( );
                }
            }
        }
        public string Message
        {
            get => _message;
            set
            {
                if( _message != value )
                {
                    _message = value;
                    OnPropertyChanged( );
                }
            }
        }

        public override void WriteTo( [ DisallowNull ] BinaryWriter destination )
        {
            base.WriteTo( destination );
            destination.Write( _rowVersion );
            destination.Write( _gNSSDevice );
            destination.Write( _timestamp );
            destination.Write( _command );
            destination.Write( _status );
            destination.Write( _message );
        }

        public override void ReadFrom([DisallowNull] BinaryReader source)
        {
            base.ReadFrom( source );
            _rowVersion = source.ReadInt64( );
            _gNSSDevice = source.ReadGuid( );
            _timestamp = source.ReadDateTime( );
            _command = source.ReadGuid( );
            _status = source.ReadEnum<Types.DeviceCommandReplyStatus>( );
            _message = source.ReadString( );
        }

    }
    public class GNSSDeviceConfigurationObject : BaseDataGuid<Kind>
    {
        long _rowVersion = 0;
        Guid _gNSSDevice;
        DateTime _timestamp;
        double _defaultLatitude = 0.0;
        double _defaultLongitude = 0.0;
        double _defaultAltitude = 0.0;
        double _latitudeOffset = 0.0;
        double _longitudeOffset = 0.0;
        double _altitudeOffset = 0.0;
        public GNSSDeviceConfigurationObject( )
        {
        }

        public GNSSDeviceConfigurationObject( ObjectState objectState, Guid id, long rowVersion, Guid gNSSDevice, DateTime timestamp, double defaultLatitude, double defaultLongitude, double defaultAltitude, double latitudeOffset, double longitudeOffset, double altitudeOffset )
            : base( objectState, id )
        {
            _rowVersion = rowVersion;
            _gNSSDevice = gNSSDevice;
            _timestamp = timestamp;
            _defaultLatitude = defaultLatitude;
            _defaultLongitude = defaultLongitude;
            _defaultAltitude = defaultAltitude;
            _latitudeOffset = latitudeOffset;
            _longitudeOffset = longitudeOffset;
            _altitudeOffset = altitudeOffset;
        }

        public override Kind GetObjectType()
        {
            return Kind.GNSSDeviceConfiguration;
        }

        public override BaseData<Kind> Create()
        {
            return new GNSSDeviceConfigurationObject( );
        }

        public override void AssignTo( BaseData<Kind> target )
        {
            base.AssignTo( target );
            var destination = ( GNSSDeviceConfigurationObject )target;
            destination._rowVersion = _rowVersion;
            destination._gNSSDevice = _gNSSDevice;
            destination._timestamp = _timestamp;
            destination._defaultLatitude = _defaultLatitude;
            destination._defaultLongitude = _defaultLongitude;
            destination._defaultAltitude = _defaultAltitude;
            destination._latitudeOffset = _latitudeOffset;
            destination._longitudeOffset = _longitudeOffset;
            destination._altitudeOffset = _altitudeOffset;
        }

        public override bool Equals(BaseData<Kind>? other)
        {
            if (base.Equals(other))
            {
                var obj = ( GNSSDeviceConfigurationObject )other;
                if( obj._rowVersion != _rowVersion )
                {
                    return false;
                }
                if( obj._gNSSDevice != _gNSSDevice )
                {
                    return false;
                }
                if( obj._timestamp != _timestamp )
                {
                    return false;
                }
                if( obj._defaultLatitude != _defaultLatitude )
                {
                    return false;
                }
                if( obj._defaultLongitude != _defaultLongitude )
                {
                    return false;
                }
                if( obj._defaultAltitude != _defaultAltitude )
                {
                    return false;
                }
                if( obj._latitudeOffset != _latitudeOffset )
                {
                    return false;
                }
                if( obj._longitudeOffset != _longitudeOffset )
                {
                    return false;
                }
                if( obj._altitudeOffset != _altitudeOffset )
                {
                    return false;
                }
                return true;
            }
            return false;
        }

        public override bool IsOfType(Kind objectType)
        {
            if( objectType == Kind.GNSSDeviceConfiguration )
            {
                return true;
            }
            return base.IsOfType( objectType );
        }

        public long RowVersion
        {
            get => _rowVersion;
            set
            {
                if( _rowVersion != value )
                {
                    _rowVersion = value;
                    OnPropertyChanged( );
                }
            }
        }
        public Guid GNSSDevice
        {
            get => _gNSSDevice;
            set
            {
                if( _gNSSDevice != value )
                {
                    _gNSSDevice = value;
                    OnPropertyChanged( );
                }
            }
        }
        public DateTime Timestamp
        {
            get => _timestamp;
            set
            {
                if( _timestamp != value )
                {
                    _timestamp = value;
                    OnPropertyChanged( );
                }
            }
        }
        public double DefaultLatitude
        {
            get => _defaultLatitude;
            set
            {
                if( _defaultLatitude != value )
                {
                    _defaultLatitude = value;
                    OnPropertyChanged( );
                }
            }
        }
        public double DefaultLongitude
        {
            get => _defaultLongitude;
            set
            {
                if( _defaultLongitude != value )
                {
                    _defaultLongitude = value;
                    OnPropertyChanged( );
                }
            }
        }
        public double DefaultAltitude
        {
            get => _defaultAltitude;
            set
            {
                if( _defaultAltitude != value )
                {
                    _defaultAltitude = value;
                    OnPropertyChanged( );
                }
            }
        }
        public double LatitudeOffset
        {
            get => _latitudeOffset;
            set
            {
                if( _latitudeOffset != value )
                {
                    _latitudeOffset = value;
                    OnPropertyChanged( );
                }
            }
        }
        public double LongitudeOffset
        {
            get => _longitudeOffset;
            set
            {
                if( _longitudeOffset != value )
                {
                    _longitudeOffset = value;
                    OnPropertyChanged( );
                }
            }
        }
        public double AltitudeOffset
        {
            get => _altitudeOffset;
            set
            {
                if( _altitudeOffset != value )
                {
                    _altitudeOffset = value;
                    OnPropertyChanged( );
                }
            }
        }

        public override void WriteTo( [ DisallowNull ] BinaryWriter destination )
        {
            base.WriteTo( destination );
            destination.Write( _rowVersion );
            destination.Write( _gNSSDevice );
            destination.Write( _timestamp );
            destination.Write( _defaultLatitude );
            destination.Write( _defaultLongitude );
            destination.Write( _defaultAltitude );
            destination.Write( _latitudeOffset );
            destination.Write( _longitudeOffset );
            destination.Write( _altitudeOffset );
        }

        public override void ReadFrom([DisallowNull] BinaryReader source)
        {
            base.ReadFrom( source );
            _rowVersion = source.ReadInt64( );
            _gNSSDevice = source.ReadGuid( );
            _timestamp = source.ReadDateTime( );
            _defaultLatitude = source.ReadDouble( );
            _defaultLongitude = source.ReadDouble( );
            _defaultAltitude = source.ReadDouble( );
            _latitudeOffset = source.ReadDouble( );
            _longitudeOffset = source.ReadDouble( );
            _altitudeOffset = source.ReadDouble( );
        }

    }
    public class GuidTimeseriesValueObject : BaseDataGuid<Kind>
    {
        long _rowVersion = 0;
        Guid _timeseries;
        DateTime _timestamp;
        Guid? _value;
        public GuidTimeseriesValueObject( )
        {
        }

        public GuidTimeseriesValueObject( ObjectState objectState, Guid id, long rowVersion, Guid timeseries, DateTime timestamp, Guid? value__ )
            : base( objectState, id )
        {
            _rowVersion = rowVersion;
            _timeseries = timeseries;
            _timestamp = timestamp;
            _value = value__;
        }

        public override Kind GetObjectType()
        {
            return Kind.GuidTimeseriesValue;
        }

        public override BaseData<Kind> Create()
        {
            return new GuidTimeseriesValueObject( );
        }

        public override void AssignTo( BaseData<Kind> target )
        {
            base.AssignTo( target );
            var destination = ( GuidTimeseriesValueObject )target;
            destination._rowVersion = _rowVersion;
            destination._timeseries = _timeseries;
            destination._timestamp = _timestamp;
            destination._value = _value;
        }

        public override bool Equals(BaseData<Kind>? other)
        {
            if (base.Equals(other))
            {
                var obj = ( GuidTimeseriesValueObject )other;
                if( obj._rowVersion != _rowVersion )
                {
                    return false;
                }
                if( obj._timeseries != _timeseries )
                {
                    return false;
                }
                if( obj._timestamp != _timestamp )
                {
                    return false;
                }
                if( obj._value != _value )
                {
                    return false;
                }
                return true;
            }
            return false;
        }

        public override bool IsOfType(Kind objectType)
        {
            if( objectType == Kind.GuidTimeseriesValue )
            {
                return true;
            }
            return base.IsOfType( objectType );
        }

        public long RowVersion
        {
            get => _rowVersion;
            set
            {
                if( _rowVersion != value )
                {
                    _rowVersion = value;
                    OnPropertyChanged( );
                }
            }
        }
        public Guid Timeseries
        {
            get => _timeseries;
            set
            {
                if( _timeseries != value )
                {
                    _timeseries = value;
                    OnPropertyChanged( );
                }
            }
        }
        public DateTime Timestamp
        {
            get => _timestamp;
            set
            {
                if( _timestamp != value )
                {
                    _timestamp = value;
                    OnPropertyChanged( );
                }
            }
        }
        public Guid? Value
        {
            get => _value;
            set
            {
                if( _value != value )
                {
                    _value = value;
                    OnPropertyChanged( );
                }
            }
        }

        public override void WriteTo( [ DisallowNull ] BinaryWriter destination )
        {
            base.WriteTo( destination );
            destination.Write( _rowVersion );
            destination.Write( _timeseries );
            destination.Write( _timestamp );
            destination.Write( _value );
        }

        public override void ReadFrom([DisallowNull] BinaryReader source)
        {
            base.ReadFrom( source );
            _rowVersion = source.ReadInt64( );
            _timeseries = source.ReadGuid( );
            _timestamp = source.ReadDateTime( );
            _value = source.ReadNullableGuid( );
        }

    }
    public class GyroDeviceCommandObject : BaseDataGuid<Kind>
    {
        long _rowVersion = 0;
        Guid _gyroDevice;
        DateTime _timestamp;
        Types.DeviceCommandSourceType _deviceCommandSourceType = Types.DeviceCommandSourceType.Unknown;
        Guid _deviceCommandSourceId;
        Guid _reply;
        public GyroDeviceCommandObject( )
        {
        }

        public GyroDeviceCommandObject( ObjectState objectState, Guid id, long rowVersion, Guid gyroDevice, DateTime timestamp, Types.DeviceCommandSourceType deviceCommandSourceType, Guid deviceCommandSourceId, Guid reply )
            : base( objectState, id )
        {
            _rowVersion = rowVersion;
            _gyroDevice = gyroDevice;
            _timestamp = timestamp;
            _deviceCommandSourceType = deviceCommandSourceType;
            _deviceCommandSourceId = deviceCommandSourceId;
            _reply = reply;
        }

        public override Kind GetObjectType()
        {
            return Kind.GyroDeviceCommand;
        }

        public override BaseData<Kind> Create()
        {
            return new GyroDeviceCommandObject( );
        }

        public override void AssignTo( BaseData<Kind> target )
        {
            base.AssignTo( target );
            var destination = ( GyroDeviceCommandObject )target;
            destination._rowVersion = _rowVersion;
            destination._gyroDevice = _gyroDevice;
            destination._timestamp = _timestamp;
            destination._deviceCommandSourceType = _deviceCommandSourceType;
            destination._deviceCommandSourceId = _deviceCommandSourceId;
            destination._reply = _reply;
        }

        public override bool Equals(BaseData<Kind>? other)
        {
            if (base.Equals(other))
            {
                var obj = ( GyroDeviceCommandObject )other;
                if( obj._rowVersion != _rowVersion )
                {
                    return false;
                }
                if( obj._gyroDevice != _gyroDevice )
                {
                    return false;
                }
                if( obj._timestamp != _timestamp )
                {
                    return false;
                }
                if( obj._deviceCommandSourceType != _deviceCommandSourceType )
                {
                    return false;
                }
                if( obj._deviceCommandSourceId != _deviceCommandSourceId )
                {
                    return false;
                }
                if( obj._reply != _reply )
                {
                    return false;
                }
                return true;
            }
            return false;
        }

        public override bool IsOfType(Kind objectType)
        {
            if( objectType == Kind.GyroDeviceCommand )
            {
                return true;
            }
            return base.IsOfType( objectType );
        }

        public long RowVersion
        {
            get => _rowVersion;
            set
            {
                if( _rowVersion != value )
                {
                    _rowVersion = value;
                    OnPropertyChanged( );
                }
            }
        }
        public Guid GyroDevice
        {
            get => _gyroDevice;
            set
            {
                if( _gyroDevice != value )
                {
                    _gyroDevice = value;
                    OnPropertyChanged( );
                }
            }
        }
        public DateTime Timestamp
        {
            get => _timestamp;
            set
            {
                if( _timestamp != value )
                {
                    _timestamp = value;
                    OnPropertyChanged( );
                }
            }
        }
        public Types.DeviceCommandSourceType DeviceCommandSourceType
        {
            get => _deviceCommandSourceType;
            set
            {
                if( _deviceCommandSourceType != value )
                {
                    _deviceCommandSourceType = value;
                    OnPropertyChanged( );
                }
            }
        }
        public Guid DeviceCommandSourceId
        {
            get => _deviceCommandSourceId;
            set
            {
                if( _deviceCommandSourceId != value )
                {
                    _deviceCommandSourceId = value;
                    OnPropertyChanged( );
                }
            }
        }
        public Guid Reply
        {
            get => _reply;
            set
            {
                if( _reply != value )
                {
                    _reply = value;
                    OnPropertyChanged( );
                }
            }
        }

        public override void WriteTo( [ DisallowNull ] BinaryWriter destination )
        {
            base.WriteTo( destination );
            destination.Write( _rowVersion );
            destination.Write( _gyroDevice );
            destination.Write( _timestamp );
            destination.Write( _deviceCommandSourceType );
            destination.Write( _deviceCommandSourceId );
            destination.Write( _reply );
        }

        public override void ReadFrom([DisallowNull] BinaryReader source)
        {
            base.ReadFrom( source );
            _rowVersion = source.ReadInt64( );
            _gyroDevice = source.ReadGuid( );
            _timestamp = source.ReadDateTime( );
            _deviceCommandSourceType = source.ReadEnum<Types.DeviceCommandSourceType>( );
            _deviceCommandSourceId = source.ReadGuid( );
            _reply = source.ReadGuid( );
        }

    }
    public class GyroDeviceCommandReplyObject : BaseDataGuid<Kind>
    {
        long _rowVersion = 0;
        Guid _gyroDevice;
        DateTime _timestamp;
        Guid _command;
        Types.DeviceCommandReplyStatus _status = Types.DeviceCommandReplyStatus.Unknown;
        string _message = string.Empty;
        public GyroDeviceCommandReplyObject( )
        {
        }

        public GyroDeviceCommandReplyObject( ObjectState objectState, Guid id, long rowVersion, Guid gyroDevice, DateTime timestamp, Guid command, Types.DeviceCommandReplyStatus status, string message )
            : base( objectState, id )
        {
            _rowVersion = rowVersion;
            _gyroDevice = gyroDevice;
            _timestamp = timestamp;
            _command = command;
            _status = status;
            _message = message;
        }

        public override Kind GetObjectType()
        {
            return Kind.GyroDeviceCommandReply;
        }

        public override BaseData<Kind> Create()
        {
            return new GyroDeviceCommandReplyObject( );
        }

        public override void AssignTo( BaseData<Kind> target )
        {
            base.AssignTo( target );
            var destination = ( GyroDeviceCommandReplyObject )target;
            destination._rowVersion = _rowVersion;
            destination._gyroDevice = _gyroDevice;
            destination._timestamp = _timestamp;
            destination._command = _command;
            destination._status = _status;
            destination._message = _message;
        }

        public override bool Equals(BaseData<Kind>? other)
        {
            if (base.Equals(other))
            {
                var obj = ( GyroDeviceCommandReplyObject )other;
                if( obj._rowVersion != _rowVersion )
                {
                    return false;
                }
                if( obj._gyroDevice != _gyroDevice )
                {
                    return false;
                }
                if( obj._timestamp != _timestamp )
                {
                    return false;
                }
                if( obj._command != _command )
                {
                    return false;
                }
                if( obj._status != _status )
                {
                    return false;
                }
                if( obj._message != _message )
                {
                    return false;
                }
                return true;
            }
            return false;
        }

        public override bool IsOfType(Kind objectType)
        {
            if( objectType == Kind.GyroDeviceCommandReply )
            {
                return true;
            }
            return base.IsOfType( objectType );
        }

        public long RowVersion
        {
            get => _rowVersion;
            set
            {
                if( _rowVersion != value )
                {
                    _rowVersion = value;
                    OnPropertyChanged( );
                }
            }
        }
        public Guid GyroDevice
        {
            get => _gyroDevice;
            set
            {
                if( _gyroDevice != value )
                {
                    _gyroDevice = value;
                    OnPropertyChanged( );
                }
            }
        }
        public DateTime Timestamp
        {
            get => _timestamp;
            set
            {
                if( _timestamp != value )
                {
                    _timestamp = value;
                    OnPropertyChanged( );
                }
            }
        }
        public Guid Command
        {
            get => _command;
            set
            {
                if( _command != value )
                {
                    _command = value;
                    OnPropertyChanged( );
                }
            }
        }
        public Types.DeviceCommandReplyStatus Status
        {
            get => _status;
            set
            {
                if( _status != value )
                {
                    _status = value;
                    OnPropertyChanged( );
                }
            }
        }
        public string Message
        {
            get => _message;
            set
            {
                if( _message != value )
                {
                    _message = value;
                    OnPropertyChanged( );
                }
            }
        }

        public override void WriteTo( [ DisallowNull ] BinaryWriter destination )
        {
            base.WriteTo( destination );
            destination.Write( _rowVersion );
            destination.Write( _gyroDevice );
            destination.Write( _timestamp );
            destination.Write( _command );
            destination.Write( _status );
            destination.Write( _message );
        }

        public override void ReadFrom([DisallowNull] BinaryReader source)
        {
            base.ReadFrom( source );
            _rowVersion = source.ReadInt64( );
            _gyroDevice = source.ReadGuid( );
            _timestamp = source.ReadDateTime( );
            _command = source.ReadGuid( );
            _status = source.ReadEnum<Types.DeviceCommandReplyStatus>( );
            _message = source.ReadString( );
        }

    }
    public class GyroDeviceConfigurationObject : BaseDataGuid<Kind>
    {
        long _rowVersion = 0;
        Guid _gyroDevice;
        DateTime _timestamp;
        double _defaultHeadingTrueNorth = 0.0;
        double _defaultMagneticTrueNorth = 0.0;
        double _headingTrueNorthOffset = 0.0;
        double _headingMagneticNorthOffset = 0.0;
        string _pitchTransducerName = string.Empty;
        string _rollTransducerName = string.Empty;
        public GyroDeviceConfigurationObject( )
        {
        }

        public GyroDeviceConfigurationObject( ObjectState objectState, Guid id, long rowVersion, Guid gyroDevice, DateTime timestamp, double defaultHeadingTrueNorth, double defaultMagneticTrueNorth, double headingTrueNorthOffset, double headingMagneticNorthOffset, string pitchTransducerName, string rollTransducerName )
            : base( objectState, id )
        {
            _rowVersion = rowVersion;
            _gyroDevice = gyroDevice;
            _timestamp = timestamp;
            _defaultHeadingTrueNorth = defaultHeadingTrueNorth;
            _defaultMagneticTrueNorth = defaultMagneticTrueNorth;
            _headingTrueNorthOffset = headingTrueNorthOffset;
            _headingMagneticNorthOffset = headingMagneticNorthOffset;
            _pitchTransducerName = pitchTransducerName;
            _rollTransducerName = rollTransducerName;
        }

        public override Kind GetObjectType()
        {
            return Kind.GyroDeviceConfiguration;
        }

        public override BaseData<Kind> Create()
        {
            return new GyroDeviceConfigurationObject( );
        }

        public override void AssignTo( BaseData<Kind> target )
        {
            base.AssignTo( target );
            var destination = ( GyroDeviceConfigurationObject )target;
            destination._rowVersion = _rowVersion;
            destination._gyroDevice = _gyroDevice;
            destination._timestamp = _timestamp;
            destination._defaultHeadingTrueNorth = _defaultHeadingTrueNorth;
            destination._defaultMagneticTrueNorth = _defaultMagneticTrueNorth;
            destination._headingTrueNorthOffset = _headingTrueNorthOffset;
            destination._headingMagneticNorthOffset = _headingMagneticNorthOffset;
            destination._pitchTransducerName = _pitchTransducerName;
            destination._rollTransducerName = _rollTransducerName;
        }

        public override bool Equals(BaseData<Kind>? other)
        {
            if (base.Equals(other))
            {
                var obj = ( GyroDeviceConfigurationObject )other;
                if( obj._rowVersion != _rowVersion )
                {
                    return false;
                }
                if( obj._gyroDevice != _gyroDevice )
                {
                    return false;
                }
                if( obj._timestamp != _timestamp )
                {
                    return false;
                }
                if( obj._defaultHeadingTrueNorth != _defaultHeadingTrueNorth )
                {
                    return false;
                }
                if( obj._defaultMagneticTrueNorth != _defaultMagneticTrueNorth )
                {
                    return false;
                }
                if( obj._headingTrueNorthOffset != _headingTrueNorthOffset )
                {
                    return false;
                }
                if( obj._headingMagneticNorthOffset != _headingMagneticNorthOffset )
                {
                    return false;
                }
                if( obj._pitchTransducerName != _pitchTransducerName )
                {
                    return false;
                }
                if( obj._rollTransducerName != _rollTransducerName )
                {
                    return false;
                }
                return true;
            }
            return false;
        }

        public override bool IsOfType(Kind objectType)
        {
            if( objectType == Kind.GyroDeviceConfiguration )
            {
                return true;
            }
            return base.IsOfType( objectType );
        }

        public long RowVersion
        {
            get => _rowVersion;
            set
            {
                if( _rowVersion != value )
                {
                    _rowVersion = value;
                    OnPropertyChanged( );
                }
            }
        }
        public Guid GyroDevice
        {
            get => _gyroDevice;
            set
            {
                if( _gyroDevice != value )
                {
                    _gyroDevice = value;
                    OnPropertyChanged( );
                }
            }
        }
        public DateTime Timestamp
        {
            get => _timestamp;
            set
            {
                if( _timestamp != value )
                {
                    _timestamp = value;
                    OnPropertyChanged( );
                }
            }
        }
        public double DefaultHeadingTrueNorth
        {
            get => _defaultHeadingTrueNorth;
            set
            {
                if( _defaultHeadingTrueNorth != value )
                {
                    _defaultHeadingTrueNorth = value;
                    OnPropertyChanged( );
                }
            }
        }
        public double DefaultMagneticTrueNorth
        {
            get => _defaultMagneticTrueNorth;
            set
            {
                if( _defaultMagneticTrueNorth != value )
                {
                    _defaultMagneticTrueNorth = value;
                    OnPropertyChanged( );
                }
            }
        }
        public double HeadingTrueNorthOffset
        {
            get => _headingTrueNorthOffset;
            set
            {
                if( _headingTrueNorthOffset != value )
                {
                    _headingTrueNorthOffset = value;
                    OnPropertyChanged( );
                }
            }
        }
        public double HeadingMagneticNorthOffset
        {
            get => _headingMagneticNorthOffset;
            set
            {
                if( _headingMagneticNorthOffset != value )
                {
                    _headingMagneticNorthOffset = value;
                    OnPropertyChanged( );
                }
            }
        }
        public string PitchTransducerName
        {
            get => _pitchTransducerName;
            set
            {
                if( _pitchTransducerName != value )
                {
                    _pitchTransducerName = value;
                    OnPropertyChanged( );
                }
            }
        }
        public string RollTransducerName
        {
            get => _rollTransducerName;
            set
            {
                if( _rollTransducerName != value )
                {
                    _rollTransducerName = value;
                    OnPropertyChanged( );
                }
            }
        }

        public override void WriteTo( [ DisallowNull ] BinaryWriter destination )
        {
            base.WriteTo( destination );
            destination.Write( _rowVersion );
            destination.Write( _gyroDevice );
            destination.Write( _timestamp );
            destination.Write( _defaultHeadingTrueNorth );
            destination.Write( _defaultMagneticTrueNorth );
            destination.Write( _headingTrueNorthOffset );
            destination.Write( _headingMagneticNorthOffset );
            destination.Write( _pitchTransducerName );
            destination.Write( _rollTransducerName );
        }

        public override void ReadFrom([DisallowNull] BinaryReader source)
        {
            base.ReadFrom( source );
            _rowVersion = source.ReadInt64( );
            _gyroDevice = source.ReadGuid( );
            _timestamp = source.ReadDateTime( );
            _defaultHeadingTrueNorth = source.ReadDouble( );
            _defaultMagneticTrueNorth = source.ReadDouble( );
            _headingTrueNorthOffset = source.ReadDouble( );
            _headingMagneticNorthOffset = source.ReadDouble( );
            _pitchTransducerName = source.ReadString( );
            _rollTransducerName = source.ReadString( );
        }

    }
    public abstract class IdentityObject : BaseDataGuid<Kind>
    {
        long _rowVersion = 0;
        protected IdentityObject( )
        {
        }

        protected IdentityObject( ObjectState objectState, Guid id, long rowVersion )
            : base( objectState, id )
        {
            _rowVersion = rowVersion;
        }

        public override void AssignTo( BaseData<Kind> target )
        {
            base.AssignTo( target );
            var destination = ( IdentityObject )target;
            destination._rowVersion = _rowVersion;
        }

        public override bool Equals(BaseData<Kind>? other)
        {
            if (base.Equals(other))
            {
                var obj = ( IdentityObject )other;
                if( obj._rowVersion != _rowVersion )
                {
                    return false;
                }
                return true;
            }
            return false;
        }

        public override bool IsOfType(Kind objectType)
        {
            if( objectType == Kind.Identity )
            {
                return true;
            }
            return base.IsOfType( objectType );
        }

        public long RowVersion
        {
            get => _rowVersion;
            set
            {
                if( _rowVersion != value )
                {
                    _rowVersion = value;
                    OnPropertyChanged( );
                }
            }
        }

        public override void WriteTo( [ DisallowNull ] BinaryWriter destination )
        {
            base.WriteTo( destination );
            destination.Write( _rowVersion );
        }

        public override void ReadFrom([DisallowNull] BinaryReader source)
        {
            base.ReadFrom( source );
            _rowVersion = source.ReadInt64( );
        }

    }
    public class CallsignObject : IdentityObject
    {
        string _identifier = string.Empty;
        public CallsignObject( )
        {
        }

        public CallsignObject( ObjectState objectState, Guid id, long rowVersion, string identifier )
            : base( objectState, id, rowVersion )
        {
            _identifier = identifier;
        }

        public override Kind GetObjectType()
        {
            return Kind.Callsign;
        }

        public override BaseData<Kind> Create()
        {
            return new CallsignObject( );
        }

        public override void AssignTo( BaseData<Kind> target )
        {
            base.AssignTo( target );
            var destination = ( CallsignObject )target;
            destination._identifier = _identifier;
        }

        public override bool Equals(BaseData<Kind>? other)
        {
            if (base.Equals(other))
            {
                var obj = ( CallsignObject )other;
                if( obj._identifier != _identifier )
                {
                    return false;
                }
                return true;
            }
            return false;
        }

        public override bool IsOfType(Kind objectType)
        {
            if( objectType == Kind.Callsign )
            {
                return true;
            }
            return base.IsOfType( objectType );
        }

        public string Identifier
        {
            get => _identifier;
            set
            {
                if( _identifier != value )
                {
                    _identifier = value;
                    OnPropertyChanged( );
                }
            }
        }

        public override void WriteTo( [ DisallowNull ] BinaryWriter destination )
        {
            base.WriteTo( destination );
            destination.Write( _identifier );
        }

        public override void ReadFrom([DisallowNull] BinaryReader source)
        {
            base.ReadFrom( source );
            _identifier = source.ReadString( );
        }

    }
    public class InternationalMaritimeOrganizationNumberObject : IdentityObject
    {
        long _identifier = 0;
        public InternationalMaritimeOrganizationNumberObject( )
        {
        }

        public InternationalMaritimeOrganizationNumberObject( ObjectState objectState, Guid id, long rowVersion, long identifier )
            : base( objectState, id, rowVersion )
        {
            _identifier = identifier;
        }

        public override Kind GetObjectType()
        {
            return Kind.InternationalMaritimeOrganizationNumber;
        }

        public override BaseData<Kind> Create()
        {
            return new InternationalMaritimeOrganizationNumberObject( );
        }

        public override void AssignTo( BaseData<Kind> target )
        {
            base.AssignTo( target );
            var destination = ( InternationalMaritimeOrganizationNumberObject )target;
            destination._identifier = _identifier;
        }

        public override bool Equals(BaseData<Kind>? other)
        {
            if (base.Equals(other))
            {
                var obj = ( InternationalMaritimeOrganizationNumberObject )other;
                if( obj._identifier != _identifier )
                {
                    return false;
                }
                return true;
            }
            return false;
        }

        public override bool IsOfType(Kind objectType)
        {
            if( objectType == Kind.InternationalMaritimeOrganizationNumber )
            {
                return true;
            }
            return base.IsOfType( objectType );
        }

        public long Identifier
        {
            get => _identifier;
            set
            {
                if( _identifier != value )
                {
                    _identifier = value;
                    OnPropertyChanged( );
                }
            }
        }

        public override void WriteTo( [ DisallowNull ] BinaryWriter destination )
        {
            base.WriteTo( destination );
            destination.Write( _identifier );
        }

        public override void ReadFrom([DisallowNull] BinaryReader source)
        {
            base.ReadFrom( source );
            _identifier = source.ReadInt64( );
        }

    }
    public class MaritimeMobileServiceIdentityObject : IdentityObject
    {
        long _identifier = 0;
        public MaritimeMobileServiceIdentityObject( )
        {
        }

        public MaritimeMobileServiceIdentityObject( ObjectState objectState, Guid id, long rowVersion, long identifier )
            : base( objectState, id, rowVersion )
        {
            _identifier = identifier;
        }

        public override Kind GetObjectType()
        {
            return Kind.MaritimeMobileServiceIdentity;
        }

        public override BaseData<Kind> Create()
        {
            return new MaritimeMobileServiceIdentityObject( );
        }

        public override void AssignTo( BaseData<Kind> target )
        {
            base.AssignTo( target );
            var destination = ( MaritimeMobileServiceIdentityObject )target;
            destination._identifier = _identifier;
        }

        public override bool Equals(BaseData<Kind>? other)
        {
            if (base.Equals(other))
            {
                var obj = ( MaritimeMobileServiceIdentityObject )other;
                if( obj._identifier != _identifier )
                {
                    return false;
                }
                return true;
            }
            return false;
        }

        public override bool IsOfType(Kind objectType)
        {
            if( objectType == Kind.MaritimeMobileServiceIdentity )
            {
                return true;
            }
            return base.IsOfType( objectType );
        }

        public long Identifier
        {
            get => _identifier;
            set
            {
                if( _identifier != value )
                {
                    _identifier = value;
                    OnPropertyChanged( );
                }
            }
        }

        public override void WriteTo( [ DisallowNull ] BinaryWriter destination )
        {
            base.WriteTo( destination );
            destination.Write( _identifier );
        }

        public override void ReadFrom([DisallowNull] BinaryReader source)
        {
            base.ReadFrom( source );
            _identifier = source.ReadInt64( );
        }

    }
    public class NameObject : IdentityObject
    {
        string _text = string.Empty;
        public NameObject( )
        {
        }

        public NameObject( ObjectState objectState, Guid id, long rowVersion, string text )
            : base( objectState, id, rowVersion )
        {
            _text = text;
        }

        public override Kind GetObjectType()
        {
            return Kind.Name;
        }

        public override BaseData<Kind> Create()
        {
            return new NameObject( );
        }

        public override void AssignTo( BaseData<Kind> target )
        {
            base.AssignTo( target );
            var destination = ( NameObject )target;
            destination._text = _text;
        }

        public override bool Equals(BaseData<Kind>? other)
        {
            if (base.Equals(other))
            {
                var obj = ( NameObject )other;
                if( obj._text != _text )
                {
                    return false;
                }
                return true;
            }
            return false;
        }

        public override bool IsOfType(Kind objectType)
        {
            if( objectType == Kind.Name )
            {
                return true;
            }
            return base.IsOfType( objectType );
        }

        public string Text
        {
            get => _text;
            set
            {
                if( _text != value )
                {
                    _text = value;
                    OnPropertyChanged( );
                }
            }
        }

        public override void WriteTo( [ DisallowNull ] BinaryWriter destination )
        {
            base.WriteTo( destination );
            destination.Write( _text );
        }

        public override void ReadFrom([DisallowNull] BinaryReader source)
        {
            base.ReadFrom( source );
            _text = source.ReadString( );
        }

    }
    public class Int16TimeseriesValueObject : BaseDataGuid<Kind>
    {
        long _rowVersion = 0;
        Guid _timeseries;
        DateTime _timestamp;
        short? _value;
        public Int16TimeseriesValueObject( )
        {
        }

        public Int16TimeseriesValueObject( ObjectState objectState, Guid id, long rowVersion, Guid timeseries, DateTime timestamp, short? value__ )
            : base( objectState, id )
        {
            _rowVersion = rowVersion;
            _timeseries = timeseries;
            _timestamp = timestamp;
            _value = value__;
        }

        public override Kind GetObjectType()
        {
            return Kind.Int16TimeseriesValue;
        }

        public override BaseData<Kind> Create()
        {
            return new Int16TimeseriesValueObject( );
        }

        public override void AssignTo( BaseData<Kind> target )
        {
            base.AssignTo( target );
            var destination = ( Int16TimeseriesValueObject )target;
            destination._rowVersion = _rowVersion;
            destination._timeseries = _timeseries;
            destination._timestamp = _timestamp;
            destination._value = _value;
        }

        public override bool Equals(BaseData<Kind>? other)
        {
            if (base.Equals(other))
            {
                var obj = ( Int16TimeseriesValueObject )other;
                if( obj._rowVersion != _rowVersion )
                {
                    return false;
                }
                if( obj._timeseries != _timeseries )
                {
                    return false;
                }
                if( obj._timestamp != _timestamp )
                {
                    return false;
                }
                if( obj._value != _value )
                {
                    return false;
                }
                return true;
            }
            return false;
        }

        public override bool IsOfType(Kind objectType)
        {
            if( objectType == Kind.Int16TimeseriesValue )
            {
                return true;
            }
            return base.IsOfType( objectType );
        }

        public long RowVersion
        {
            get => _rowVersion;
            set
            {
                if( _rowVersion != value )
                {
                    _rowVersion = value;
                    OnPropertyChanged( );
                }
            }
        }
        public Guid Timeseries
        {
            get => _timeseries;
            set
            {
                if( _timeseries != value )
                {
                    _timeseries = value;
                    OnPropertyChanged( );
                }
            }
        }
        public DateTime Timestamp
        {
            get => _timestamp;
            set
            {
                if( _timestamp != value )
                {
                    _timestamp = value;
                    OnPropertyChanged( );
                }
            }
        }
        public short? Value
        {
            get => _value;
            set
            {
                if( _value != value )
                {
                    _value = value;
                    OnPropertyChanged( );
                }
            }
        }

        public override void WriteTo( [ DisallowNull ] BinaryWriter destination )
        {
            base.WriteTo( destination );
            destination.Write( _rowVersion );
            destination.Write( _timeseries );
            destination.Write( _timestamp );
            destination.Write( _value );
        }

        public override void ReadFrom([DisallowNull] BinaryReader source)
        {
            base.ReadFrom( source );
            _rowVersion = source.ReadInt64( );
            _timeseries = source.ReadGuid( );
            _timestamp = source.ReadDateTime( );
            _value = source.ReadNullableInt16( );
        }

    }
    public class Int32TimeseriesValueObject : BaseDataGuid<Kind>
    {
        long _rowVersion = 0;
        Guid _timeseries;
        DateTime _timestamp;
        int? _value;
        public Int32TimeseriesValueObject( )
        {
        }

        public Int32TimeseriesValueObject( ObjectState objectState, Guid id, long rowVersion, Guid timeseries, DateTime timestamp, int? value__ )
            : base( objectState, id )
        {
            _rowVersion = rowVersion;
            _timeseries = timeseries;
            _timestamp = timestamp;
            _value = value__;
        }

        public override Kind GetObjectType()
        {
            return Kind.Int32TimeseriesValue;
        }

        public override BaseData<Kind> Create()
        {
            return new Int32TimeseriesValueObject( );
        }

        public override void AssignTo( BaseData<Kind> target )
        {
            base.AssignTo( target );
            var destination = ( Int32TimeseriesValueObject )target;
            destination._rowVersion = _rowVersion;
            destination._timeseries = _timeseries;
            destination._timestamp = _timestamp;
            destination._value = _value;
        }

        public override bool Equals(BaseData<Kind>? other)
        {
            if (base.Equals(other))
            {
                var obj = ( Int32TimeseriesValueObject )other;
                if( obj._rowVersion != _rowVersion )
                {
                    return false;
                }
                if( obj._timeseries != _timeseries )
                {
                    return false;
                }
                if( obj._timestamp != _timestamp )
                {
                    return false;
                }
                if( obj._value != _value )
                {
                    return false;
                }
                return true;
            }
            return false;
        }

        public override bool IsOfType(Kind objectType)
        {
            if( objectType == Kind.Int32TimeseriesValue )
            {
                return true;
            }
            return base.IsOfType( objectType );
        }

        public long RowVersion
        {
            get => _rowVersion;
            set
            {
                if( _rowVersion != value )
                {
                    _rowVersion = value;
                    OnPropertyChanged( );
                }
            }
        }
        public Guid Timeseries
        {
            get => _timeseries;
            set
            {
                if( _timeseries != value )
                {
                    _timeseries = value;
                    OnPropertyChanged( );
                }
            }
        }
        public DateTime Timestamp
        {
            get => _timestamp;
            set
            {
                if( _timestamp != value )
                {
                    _timestamp = value;
                    OnPropertyChanged( );
                }
            }
        }
        public int? Value
        {
            get => _value;
            set
            {
                if( _value != value )
                {
                    _value = value;
                    OnPropertyChanged( );
                }
            }
        }

        public override void WriteTo( [ DisallowNull ] BinaryWriter destination )
        {
            base.WriteTo( destination );
            destination.Write( _rowVersion );
            destination.Write( _timeseries );
            destination.Write( _timestamp );
            destination.Write( _value );
        }

        public override void ReadFrom([DisallowNull] BinaryReader source)
        {
            base.ReadFrom( source );
            _rowVersion = source.ReadInt64( );
            _timeseries = source.ReadGuid( );
            _timestamp = source.ReadDateTime( );
            _value = source.ReadNullableInt32( );
        }

    }
    public class Int64TimeseriesValueObject : BaseDataGuid<Kind>
    {
        long _rowVersion = 0;
        Guid _timeseries;
        DateTime _timestamp;
        long? _value;
        public Int64TimeseriesValueObject( )
        {
        }

        public Int64TimeseriesValueObject( ObjectState objectState, Guid id, long rowVersion, Guid timeseries, DateTime timestamp, long? value__ )
            : base( objectState, id )
        {
            _rowVersion = rowVersion;
            _timeseries = timeseries;
            _timestamp = timestamp;
            _value = value__;
        }

        public override Kind GetObjectType()
        {
            return Kind.Int64TimeseriesValue;
        }

        public override BaseData<Kind> Create()
        {
            return new Int64TimeseriesValueObject( );
        }

        public override void AssignTo( BaseData<Kind> target )
        {
            base.AssignTo( target );
            var destination = ( Int64TimeseriesValueObject )target;
            destination._rowVersion = _rowVersion;
            destination._timeseries = _timeseries;
            destination._timestamp = _timestamp;
            destination._value = _value;
        }

        public override bool Equals(BaseData<Kind>? other)
        {
            if (base.Equals(other))
            {
                var obj = ( Int64TimeseriesValueObject )other;
                if( obj._rowVersion != _rowVersion )
                {
                    return false;
                }
                if( obj._timeseries != _timeseries )
                {
                    return false;
                }
                if( obj._timestamp != _timestamp )
                {
                    return false;
                }
                if( obj._value != _value )
                {
                    return false;
                }
                return true;
            }
            return false;
        }

        public override bool IsOfType(Kind objectType)
        {
            if( objectType == Kind.Int64TimeseriesValue )
            {
                return true;
            }
            return base.IsOfType( objectType );
        }

        public long RowVersion
        {
            get => _rowVersion;
            set
            {
                if( _rowVersion != value )
                {
                    _rowVersion = value;
                    OnPropertyChanged( );
                }
            }
        }
        public Guid Timeseries
        {
            get => _timeseries;
            set
            {
                if( _timeseries != value )
                {
                    _timeseries = value;
                    OnPropertyChanged( );
                }
            }
        }
        public DateTime Timestamp
        {
            get => _timestamp;
            set
            {
                if( _timestamp != value )
                {
                    _timestamp = value;
                    OnPropertyChanged( );
                }
            }
        }
        public long? Value
        {
            get => _value;
            set
            {
                if( _value != value )
                {
                    _value = value;
                    OnPropertyChanged( );
                }
            }
        }

        public override void WriteTo( [ DisallowNull ] BinaryWriter destination )
        {
            base.WriteTo( destination );
            destination.Write( _rowVersion );
            destination.Write( _timeseries );
            destination.Write( _timestamp );
            destination.Write( _value );
        }

        public override void ReadFrom([DisallowNull] BinaryReader source)
        {
            base.ReadFrom( source );
            _rowVersion = source.ReadInt64( );
            _timeseries = source.ReadGuid( );
            _timestamp = source.ReadDateTime( );
            _value = source.ReadNullableInt64( );
        }

    }
    public abstract class ItemObject : BaseDataGuid<Kind>
    {
        long _rowVersion = 0;
        protected ItemObject( )
        {
        }

        protected ItemObject( ObjectState objectState, Guid id, long rowVersion )
            : base( objectState, id )
        {
            _rowVersion = rowVersion;
        }

        public override void AssignTo( BaseData<Kind> target )
        {
            base.AssignTo( target );
            var destination = ( ItemObject )target;
            destination._rowVersion = _rowVersion;
        }

        public override bool Equals(BaseData<Kind>? other)
        {
            if (base.Equals(other))
            {
                var obj = ( ItemObject )other;
                if( obj._rowVersion != _rowVersion )
                {
                    return false;
                }
                return true;
            }
            return false;
        }

        public override bool IsOfType(Kind objectType)
        {
            if( objectType == Kind.Item )
            {
                return true;
            }
            return base.IsOfType( objectType );
        }

        public long RowVersion
        {
            get => _rowVersion;
            set
            {
                if( _rowVersion != value )
                {
                    _rowVersion = value;
                    OnPropertyChanged( );
                }
            }
        }

        public override void WriteTo( [ DisallowNull ] BinaryWriter destination )
        {
            base.WriteTo( destination );
            destination.Write( _rowVersion );
        }

        public override void ReadFrom([DisallowNull] BinaryReader source)
        {
            base.ReadFrom( source );
            _rowVersion = source.ReadInt64( );
        }

    }
    public class BaseStationObject : ItemObject
    {
        string _name = string.Empty;
        Guid _type;
        public BaseStationObject( )
        {
        }

        public BaseStationObject( ObjectState objectState, Guid id, long rowVersion, string name, Guid type )
            : base( objectState, id, rowVersion )
        {
            _name = name;
            _type = type;
        }

        public override Kind GetObjectType()
        {
            return Kind.BaseStation;
        }

        public override BaseData<Kind> Create()
        {
            return new BaseStationObject( );
        }

        public override void AssignTo( BaseData<Kind> target )
        {
            base.AssignTo( target );
            var destination = ( BaseStationObject )target;
            destination._name = _name;
            destination._type = _type;
        }

        public override bool Equals(BaseData<Kind>? other)
        {
            if (base.Equals(other))
            {
                var obj = ( BaseStationObject )other;
                if( obj._name != _name )
                {
                    return false;
                }
                if( obj._type != _type )
                {
                    return false;
                }
                return true;
            }
            return false;
        }

        public override bool IsOfType(Kind objectType)
        {
            if( objectType == Kind.BaseStation )
            {
                return true;
            }
            return base.IsOfType( objectType );
        }

        public string Name
        {
            get => _name;
            set
            {
                if( _name != value )
                {
                    _name = value;
                    OnPropertyChanged( );
                }
            }
        }
        public Guid Type
        {
            get => _type;
            set
            {
                if( _type != value )
                {
                    _type = value;
                    OnPropertyChanged( );
                }
            }
        }

        public override void WriteTo( [ DisallowNull ] BinaryWriter destination )
        {
            base.WriteTo( destination );
            destination.Write( _name );
            destination.Write( _type );
        }

        public override void ReadFrom([DisallowNull] BinaryReader source)
        {
            base.ReadFrom( source );
            _name = source.ReadString( );
            _type = source.ReadGuid( );
        }

    }
    public abstract class DeviceObject : ItemObject
    {
        Guid _host;
        string _name = string.Empty;
        string _description = string.Empty;
        Guid _enabledTimeseries;
        protected DeviceObject( )
        {
        }

        protected DeviceObject( ObjectState objectState, Guid id, long rowVersion, Guid host, string name, string description, Guid enabledTimeseries )
            : base( objectState, id, rowVersion )
        {
            _host = host;
            _name = name;
            _description = description;
            _enabledTimeseries = enabledTimeseries;
        }

        public override void AssignTo( BaseData<Kind> target )
        {
            base.AssignTo( target );
            var destination = ( DeviceObject )target;
            destination._host = _host;
            destination._name = _name;
            destination._description = _description;
            destination._enabledTimeseries = _enabledTimeseries;
        }

        public override bool Equals(BaseData<Kind>? other)
        {
            if (base.Equals(other))
            {
                var obj = ( DeviceObject )other;
                if( obj._host != _host )
                {
                    return false;
                }
                if( obj._name != _name )
                {
                    return false;
                }
                if( obj._description != _description )
                {
                    return false;
                }
                if( obj._enabledTimeseries != _enabledTimeseries )
                {
                    return false;
                }
                return true;
            }
            return false;
        }

        public override bool IsOfType(Kind objectType)
        {
            if( objectType == Kind.Device )
            {
                return true;
            }
            return base.IsOfType( objectType );
        }

        public Guid Host
        {
            get => _host;
            set
            {
                if( _host != value )
                {
                    _host = value;
                    OnPropertyChanged( );
                }
            }
        }
        public string Name
        {
            get => _name;
            set
            {
                if( _name != value )
                {
                    _name = value;
                    OnPropertyChanged( );
                }
            }
        }
        public string Description
        {
            get => _description;
            set
            {
                if( _description != value )
                {
                    _description = value;
                    OnPropertyChanged( );
                }
            }
        }
        public Guid EnabledTimeseries
        {
            get => _enabledTimeseries;
            set
            {
                if( _enabledTimeseries != value )
                {
                    _enabledTimeseries = value;
                    OnPropertyChanged( );
                }
            }
        }

        public override void WriteTo( [ DisallowNull ] BinaryWriter destination )
        {
            base.WriteTo( destination );
            destination.Write( _host );
            destination.Write( _name );
            destination.Write( _description );
            destination.Write( _enabledTimeseries );
        }

        public override void ReadFrom([DisallowNull] BinaryReader source)
        {
            base.ReadFrom( source );
            _host = source.ReadGuid( );
            _name = source.ReadString( );
            _description = source.ReadString( );
            _enabledTimeseries = source.ReadGuid( );
        }

    }
    public class CameraDeviceObject : DeviceObject
    {
        public CameraDeviceObject( )
        {
        }

        public CameraDeviceObject( ObjectState objectState, Guid id, long rowVersion, Guid host, string name, string description, Guid enabledTimeseries )
            : base( objectState, id, rowVersion, host, name, description, enabledTimeseries )
        {
        }

        public override Kind GetObjectType()
        {
            return Kind.CameraDevice;
        }

        public override BaseData<Kind> Create()
        {
            return new CameraDeviceObject( );
        }

        public override bool IsOfType(Kind objectType)
        {
            if( objectType == Kind.CameraDevice )
            {
                return true;
            }
            return base.IsOfType( objectType );
        }

    }
    public class GNSSDeviceObject : DeviceObject
    {
        Guid _latitudeTimeseries;
        Guid _longitudeTimeseries;
        Guid _altitudeTimeseries;
        public GNSSDeviceObject( )
        {
        }

        public GNSSDeviceObject( ObjectState objectState, Guid id, long rowVersion, Guid host, string name, string description, Guid enabledTimeseries, Guid latitudeTimeseries, Guid longitudeTimeseries, Guid altitudeTimeseries )
            : base( objectState, id, rowVersion, host, name, description, enabledTimeseries )
        {
            _latitudeTimeseries = latitudeTimeseries;
            _longitudeTimeseries = longitudeTimeseries;
            _altitudeTimeseries = altitudeTimeseries;
        }

        public override Kind GetObjectType()
        {
            return Kind.GNSSDevice;
        }

        public override BaseData<Kind> Create()
        {
            return new GNSSDeviceObject( );
        }

        public override void AssignTo( BaseData<Kind> target )
        {
            base.AssignTo( target );
            var destination = ( GNSSDeviceObject )target;
            destination._latitudeTimeseries = _latitudeTimeseries;
            destination._longitudeTimeseries = _longitudeTimeseries;
            destination._altitudeTimeseries = _altitudeTimeseries;
        }

        public override bool Equals(BaseData<Kind>? other)
        {
            if (base.Equals(other))
            {
                var obj = ( GNSSDeviceObject )other;
                if( obj._latitudeTimeseries != _latitudeTimeseries )
                {
                    return false;
                }
                if( obj._longitudeTimeseries != _longitudeTimeseries )
                {
                    return false;
                }
                if( obj._altitudeTimeseries != _altitudeTimeseries )
                {
                    return false;
                }
                return true;
            }
            return false;
        }

        public override bool IsOfType(Kind objectType)
        {
            if( objectType == Kind.GNSSDevice )
            {
                return true;
            }
            return base.IsOfType( objectType );
        }

        public Guid LatitudeTimeseries
        {
            get => _latitudeTimeseries;
            set
            {
                if( _latitudeTimeseries != value )
                {
                    _latitudeTimeseries = value;
                    OnPropertyChanged( );
                }
            }
        }
        public Guid LongitudeTimeseries
        {
            get => _longitudeTimeseries;
            set
            {
                if( _longitudeTimeseries != value )
                {
                    _longitudeTimeseries = value;
                    OnPropertyChanged( );
                }
            }
        }
        public Guid AltitudeTimeseries
        {
            get => _altitudeTimeseries;
            set
            {
                if( _altitudeTimeseries != value )
                {
                    _altitudeTimeseries = value;
                    OnPropertyChanged( );
                }
            }
        }

        public override void WriteTo( [ DisallowNull ] BinaryWriter destination )
        {
            base.WriteTo( destination );
            destination.Write( _latitudeTimeseries );
            destination.Write( _longitudeTimeseries );
            destination.Write( _altitudeTimeseries );
        }

        public override void ReadFrom([DisallowNull] BinaryReader source)
        {
            base.ReadFrom( source );
            _latitudeTimeseries = source.ReadGuid( );
            _longitudeTimeseries = source.ReadGuid( );
            _altitudeTimeseries = source.ReadGuid( );
        }

    }
    public class GyroDeviceObject : DeviceObject
    {
        Guid _headingTrueNorthTimeseries;
        Guid _headingMagneticNorthTimeseries;
        Guid _pitchTimeseries;
        Guid _rateOfTurnTimeseries;
        Guid _rollTimeseries;
        Guid _courseTimeseries;
        Guid _speedTimeseries;
        Guid _gNSSDevice;
        public GyroDeviceObject( )
        {
        }

        public GyroDeviceObject( ObjectState objectState, Guid id, long rowVersion, Guid host, string name, string description, Guid enabledTimeseries, Guid headingTrueNorthTimeseries, Guid headingMagneticNorthTimeseries, Guid pitchTimeseries, Guid rateOfTurnTimeseries, Guid rollTimeseries, Guid courseTimeseries, Guid speedTimeseries, Guid gNSSDevice )
            : base( objectState, id, rowVersion, host, name, description, enabledTimeseries )
        {
            _headingTrueNorthTimeseries = headingTrueNorthTimeseries;
            _headingMagneticNorthTimeseries = headingMagneticNorthTimeseries;
            _pitchTimeseries = pitchTimeseries;
            _rateOfTurnTimeseries = rateOfTurnTimeseries;
            _rollTimeseries = rollTimeseries;
            _courseTimeseries = courseTimeseries;
            _speedTimeseries = speedTimeseries;
            _gNSSDevice = gNSSDevice;
        }

        public override Kind GetObjectType()
        {
            return Kind.GyroDevice;
        }

        public override BaseData<Kind> Create()
        {
            return new GyroDeviceObject( );
        }

        public override void AssignTo( BaseData<Kind> target )
        {
            base.AssignTo( target );
            var destination = ( GyroDeviceObject )target;
            destination._headingTrueNorthTimeseries = _headingTrueNorthTimeseries;
            destination._headingMagneticNorthTimeseries = _headingMagneticNorthTimeseries;
            destination._pitchTimeseries = _pitchTimeseries;
            destination._rateOfTurnTimeseries = _rateOfTurnTimeseries;
            destination._rollTimeseries = _rollTimeseries;
            destination._courseTimeseries = _courseTimeseries;
            destination._speedTimeseries = _speedTimeseries;
            destination._gNSSDevice = _gNSSDevice;
        }

        public override bool Equals(BaseData<Kind>? other)
        {
            if (base.Equals(other))
            {
                var obj = ( GyroDeviceObject )other;
                if( obj._headingTrueNorthTimeseries != _headingTrueNorthTimeseries )
                {
                    return false;
                }
                if( obj._headingMagneticNorthTimeseries != _headingMagneticNorthTimeseries )
                {
                    return false;
                }
                if( obj._pitchTimeseries != _pitchTimeseries )
                {
                    return false;
                }
                if( obj._rateOfTurnTimeseries != _rateOfTurnTimeseries )
                {
                    return false;
                }
                if( obj._rollTimeseries != _rollTimeseries )
                {
                    return false;
                }
                if( obj._courseTimeseries != _courseTimeseries )
                {
                    return false;
                }
                if( obj._speedTimeseries != _speedTimeseries )
                {
                    return false;
                }
                if( obj._gNSSDevice != _gNSSDevice )
                {
                    return false;
                }
                return true;
            }
            return false;
        }

        public override bool IsOfType(Kind objectType)
        {
            if( objectType == Kind.GyroDevice )
            {
                return true;
            }
            return base.IsOfType( objectType );
        }

        public Guid HeadingTrueNorthTimeseries
        {
            get => _headingTrueNorthTimeseries;
            set
            {
                if( _headingTrueNorthTimeseries != value )
                {
                    _headingTrueNorthTimeseries = value;
                    OnPropertyChanged( );
                }
            }
        }
        public Guid HeadingMagneticNorthTimeseries
        {
            get => _headingMagneticNorthTimeseries;
            set
            {
                if( _headingMagneticNorthTimeseries != value )
                {
                    _headingMagneticNorthTimeseries = value;
                    OnPropertyChanged( );
                }
            }
        }
        public Guid PitchTimeseries
        {
            get => _pitchTimeseries;
            set
            {
                if( _pitchTimeseries != value )
                {
                    _pitchTimeseries = value;
                    OnPropertyChanged( );
                }
            }
        }
        public Guid RateOfTurnTimeseries
        {
            get => _rateOfTurnTimeseries;
            set
            {
                if( _rateOfTurnTimeseries != value )
                {
                    _rateOfTurnTimeseries = value;
                    OnPropertyChanged( );
                }
            }
        }
        public Guid RollTimeseries
        {
            get => _rollTimeseries;
            set
            {
                if( _rollTimeseries != value )
                {
                    _rollTimeseries = value;
                    OnPropertyChanged( );
                }
            }
        }
        public Guid CourseTimeseries
        {
            get => _courseTimeseries;
            set
            {
                if( _courseTimeseries != value )
                {
                    _courseTimeseries = value;
                    OnPropertyChanged( );
                }
            }
        }
        public Guid SpeedTimeseries
        {
            get => _speedTimeseries;
            set
            {
                if( _speedTimeseries != value )
                {
                    _speedTimeseries = value;
                    OnPropertyChanged( );
                }
            }
        }
        public Guid GNSSDevice
        {
            get => _gNSSDevice;
            set
            {
                if( _gNSSDevice != value )
                {
                    _gNSSDevice = value;
                    OnPropertyChanged( );
                }
            }
        }

        public override void WriteTo( [ DisallowNull ] BinaryWriter destination )
        {
            base.WriteTo( destination );
            destination.Write( _headingTrueNorthTimeseries );
            destination.Write( _headingMagneticNorthTimeseries );
            destination.Write( _pitchTimeseries );
            destination.Write( _rateOfTurnTimeseries );
            destination.Write( _rollTimeseries );
            destination.Write( _courseTimeseries );
            destination.Write( _speedTimeseries );
            destination.Write( _gNSSDevice );
        }

        public override void ReadFrom([DisallowNull] BinaryReader source)
        {
            base.ReadFrom( source );
            _headingTrueNorthTimeseries = source.ReadGuid( );
            _headingMagneticNorthTimeseries = source.ReadGuid( );
            _pitchTimeseries = source.ReadGuid( );
            _rateOfTurnTimeseries = source.ReadGuid( );
            _rollTimeseries = source.ReadGuid( );
            _courseTimeseries = source.ReadGuid( );
            _speedTimeseries = source.ReadGuid( );
            _gNSSDevice = source.ReadGuid( );
        }

    }
    public class LineInputDeviceObject : DeviceObject
    {
        public LineInputDeviceObject( )
        {
        }

        public LineInputDeviceObject( ObjectState objectState, Guid id, long rowVersion, Guid host, string name, string description, Guid enabledTimeseries )
            : base( objectState, id, rowVersion, host, name, description, enabledTimeseries )
        {
        }

        public override Kind GetObjectType()
        {
            return Kind.LineInputDevice;
        }

        public override BaseData<Kind> Create()
        {
            return new LineInputDeviceObject( );
        }

        public override bool IsOfType(Kind objectType)
        {
            if( objectType == Kind.LineInputDevice )
            {
                return true;
            }
            return base.IsOfType( objectType );
        }

    }
    public class OilSpillDetectorDeviceObject : DeviceObject
    {
        public OilSpillDetectorDeviceObject( )
        {
        }

        public OilSpillDetectorDeviceObject( ObjectState objectState, Guid id, long rowVersion, Guid host, string name, string description, Guid enabledTimeseries )
            : base( objectState, id, rowVersion, host, name, description, enabledTimeseries )
        {
        }

        public override Kind GetObjectType()
        {
            return Kind.OilSpillDetectorDevice;
        }

        public override BaseData<Kind> Create()
        {
            return new OilSpillDetectorDeviceObject( );
        }

        public override bool IsOfType(Kind objectType)
        {
            if( objectType == Kind.OilSpillDetectorDevice )
            {
                return true;
            }
            return base.IsOfType( objectType );
        }

    }
    public class RadioDeviceObject : DeviceObject
    {
        public RadioDeviceObject( )
        {
        }

        public RadioDeviceObject( ObjectState objectState, Guid id, long rowVersion, Guid host, string name, string description, Guid enabledTimeseries )
            : base( objectState, id, rowVersion, host, name, description, enabledTimeseries )
        {
        }

        public override Kind GetObjectType()
        {
            return Kind.RadioDevice;
        }

        public override BaseData<Kind> Create()
        {
            return new RadioDeviceObject( );
        }

        public override bool IsOfType(Kind objectType)
        {
            if( objectType == Kind.RadioDevice )
            {
                return true;
            }
            return base.IsOfType( objectType );
        }

    }
    public class RadomeDeviceObject : DeviceObject
    {
        Guid? _radar;
        Guid _pressureTimeseries;
        Guid _temperatureTimeseries;
        Guid _dewPointTimeseries;
        Guid _statusTimeseries;
        public RadomeDeviceObject( )
        {
        }

        public RadomeDeviceObject( ObjectState objectState, Guid id, long rowVersion, Guid host, string name, string description, Guid enabledTimeseries, Guid? radar, Guid pressureTimeseries, Guid temperatureTimeseries, Guid dewPointTimeseries, Guid statusTimeseries )
            : base( objectState, id, rowVersion, host, name, description, enabledTimeseries )
        {
            _radar = radar;
            _pressureTimeseries = pressureTimeseries;
            _temperatureTimeseries = temperatureTimeseries;
            _dewPointTimeseries = dewPointTimeseries;
            _statusTimeseries = statusTimeseries;
        }

        public override Kind GetObjectType()
        {
            return Kind.RadomeDevice;
        }

        public override BaseData<Kind> Create()
        {
            return new RadomeDeviceObject( );
        }

        public override void AssignTo( BaseData<Kind> target )
        {
            base.AssignTo( target );
            var destination = ( RadomeDeviceObject )target;
            destination._radar = _radar;
            destination._pressureTimeseries = _pressureTimeseries;
            destination._temperatureTimeseries = _temperatureTimeseries;
            destination._dewPointTimeseries = _dewPointTimeseries;
            destination._statusTimeseries = _statusTimeseries;
        }

        public override bool Equals(BaseData<Kind>? other)
        {
            if (base.Equals(other))
            {
                var obj = ( RadomeDeviceObject )other;
                if( obj._radar != _radar )
                {
                    return false;
                }
                if( obj._pressureTimeseries != _pressureTimeseries )
                {
                    return false;
                }
                if( obj._temperatureTimeseries != _temperatureTimeseries )
                {
                    return false;
                }
                if( obj._dewPointTimeseries != _dewPointTimeseries )
                {
                    return false;
                }
                if( obj._statusTimeseries != _statusTimeseries )
                {
                    return false;
                }
                return true;
            }
            return false;
        }

        public override bool IsOfType(Kind objectType)
        {
            if( objectType == Kind.RadomeDevice )
            {
                return true;
            }
            return base.IsOfType( objectType );
        }

        public Guid? Radar
        {
            get => _radar;
            set
            {
                if( _radar != value )
                {
                    _radar = value;
                    OnPropertyChanged( );
                }
            }
        }
        public Guid PressureTimeseries
        {
            get => _pressureTimeseries;
            set
            {
                if( _pressureTimeseries != value )
                {
                    _pressureTimeseries = value;
                    OnPropertyChanged( );
                }
            }
        }
        public Guid TemperatureTimeseries
        {
            get => _temperatureTimeseries;
            set
            {
                if( _temperatureTimeseries != value )
                {
                    _temperatureTimeseries = value;
                    OnPropertyChanged( );
                }
            }
        }
        public Guid DewPointTimeseries
        {
            get => _dewPointTimeseries;
            set
            {
                if( _dewPointTimeseries != value )
                {
                    _dewPointTimeseries = value;
                    OnPropertyChanged( );
                }
            }
        }
        public Guid StatusTimeseries
        {
            get => _statusTimeseries;
            set
            {
                if( _statusTimeseries != value )
                {
                    _statusTimeseries = value;
                    OnPropertyChanged( );
                }
            }
        }

        public override void WriteTo( [ DisallowNull ] BinaryWriter destination )
        {
            base.WriteTo( destination );
            destination.Write( _radar );
            destination.Write( _pressureTimeseries );
            destination.Write( _temperatureTimeseries );
            destination.Write( _dewPointTimeseries );
            destination.Write( _statusTimeseries );
        }

        public override void ReadFrom([DisallowNull] BinaryReader source)
        {
            base.ReadFrom( source );
            _radar = source.ReadNullableGuid( );
            _pressureTimeseries = source.ReadGuid( );
            _temperatureTimeseries = source.ReadGuid( );
            _dewPointTimeseries = source.ReadGuid( );
            _statusTimeseries = source.ReadGuid( );
        }

    }
    public abstract class TrackerDeviceObject : DeviceObject
    {
        protected TrackerDeviceObject( )
        {
        }

        protected TrackerDeviceObject( ObjectState objectState, Guid id, long rowVersion, Guid host, string name, string description, Guid enabledTimeseries )
            : base( objectState, id, rowVersion, host, name, description, enabledTimeseries )
        {
        }

        public override bool IsOfType(Kind objectType)
        {
            if( objectType == Kind.TrackerDevice )
            {
                return true;
            }
            return base.IsOfType( objectType );
        }

    }
    public class AisDeviceObject : TrackerDeviceObject
    {
        public AisDeviceObject( )
        {
        }

        public AisDeviceObject( ObjectState objectState, Guid id, long rowVersion, Guid host, string name, string description, Guid enabledTimeseries )
            : base( objectState, id, rowVersion, host, name, description, enabledTimeseries )
        {
        }

        public override Kind GetObjectType()
        {
            return Kind.AisDevice;
        }

        public override BaseData<Kind> Create()
        {
            return new AisDeviceObject( );
        }

        public override bool IsOfType(Kind objectType)
        {
            if( objectType == Kind.AisDevice )
            {
                return true;
            }
            return base.IsOfType( objectType );
        }

    }
    public class RadarDeviceObject : TrackerDeviceObject
    {
        Guid _saveSettingsTimeseries;
        Guid _powerOnTimeseries;
        Guid _trackingOnTimeseries;
        Guid _radarPulseTimeseries;
        Guid _tuningTimeseries;
        Guid _blankSector1Timeseries;
        Guid _sector1StartTimeseries;
        Guid _sector1EndTimeseries;
        Guid _blankSector2Timeseries;
        Guid _sector2StartTimeseries;
        Guid _sector2EndTimeseries;
        Guid _enableAutomaticFrequencyControlTimeseries;
        Guid _azimuthOffsetTimeseries;
        Guid _enableSensitivityTimeControlTimeseries;
        Guid _automaticSensitivityTimeControlTimeseries;
        Guid _sensitivityTimeControlLevelTimeseries;
        Guid _enableFastTimeConstantTimeseries;
        Guid _fastTimeConstantLevelTimeseries;
        Guid _fastTimeConstantModeTimeseries;
        Guid _latitudeTimeseries;
        Guid _longitudeTimeseries;
        Guid? _radome;
        Guid? _gNSSDevice;
        public RadarDeviceObject( )
        {
        }

        public RadarDeviceObject( ObjectState objectState, Guid id, long rowVersion, Guid host, string name, string description, Guid enabledTimeseries, Guid saveSettingsTimeseries, Guid powerOnTimeseries, Guid trackingOnTimeseries, Guid radarPulseTimeseries, Guid tuningTimeseries, Guid blankSector1Timeseries, Guid sector1StartTimeseries, Guid sector1EndTimeseries, Guid blankSector2Timeseries, Guid sector2StartTimeseries, Guid sector2EndTimeseries, Guid enableAutomaticFrequencyControlTimeseries, Guid azimuthOffsetTimeseries, Guid enableSensitivityTimeControlTimeseries, Guid automaticSensitivityTimeControlTimeseries, Guid sensitivityTimeControlLevelTimeseries, Guid enableFastTimeConstantTimeseries, Guid fastTimeConstantLevelTimeseries, Guid fastTimeConstantModeTimeseries, Guid latitudeTimeseries, Guid longitudeTimeseries, Guid? radome, Guid? gNSSDevice )
            : base( objectState, id, rowVersion, host, name, description, enabledTimeseries )
        {
            _saveSettingsTimeseries = saveSettingsTimeseries;
            _powerOnTimeseries = powerOnTimeseries;
            _trackingOnTimeseries = trackingOnTimeseries;
            _radarPulseTimeseries = radarPulseTimeseries;
            _tuningTimeseries = tuningTimeseries;
            _blankSector1Timeseries = blankSector1Timeseries;
            _sector1StartTimeseries = sector1StartTimeseries;
            _sector1EndTimeseries = sector1EndTimeseries;
            _blankSector2Timeseries = blankSector2Timeseries;
            _sector2StartTimeseries = sector2StartTimeseries;
            _sector2EndTimeseries = sector2EndTimeseries;
            _enableAutomaticFrequencyControlTimeseries = enableAutomaticFrequencyControlTimeseries;
            _azimuthOffsetTimeseries = azimuthOffsetTimeseries;
            _enableSensitivityTimeControlTimeseries = enableSensitivityTimeControlTimeseries;
            _automaticSensitivityTimeControlTimeseries = automaticSensitivityTimeControlTimeseries;
            _sensitivityTimeControlLevelTimeseries = sensitivityTimeControlLevelTimeseries;
            _enableFastTimeConstantTimeseries = enableFastTimeConstantTimeseries;
            _fastTimeConstantLevelTimeseries = fastTimeConstantLevelTimeseries;
            _fastTimeConstantModeTimeseries = fastTimeConstantModeTimeseries;
            _latitudeTimeseries = latitudeTimeseries;
            _longitudeTimeseries = longitudeTimeseries;
            _radome = radome;
            _gNSSDevice = gNSSDevice;
        }

        public override Kind GetObjectType()
        {
            return Kind.RadarDevice;
        }

        public override BaseData<Kind> Create()
        {
            return new RadarDeviceObject( );
        }

        public override void AssignTo( BaseData<Kind> target )
        {
            base.AssignTo( target );
            var destination = ( RadarDeviceObject )target;
            destination._saveSettingsTimeseries = _saveSettingsTimeseries;
            destination._powerOnTimeseries = _powerOnTimeseries;
            destination._trackingOnTimeseries = _trackingOnTimeseries;
            destination._radarPulseTimeseries = _radarPulseTimeseries;
            destination._tuningTimeseries = _tuningTimeseries;
            destination._blankSector1Timeseries = _blankSector1Timeseries;
            destination._sector1StartTimeseries = _sector1StartTimeseries;
            destination._sector1EndTimeseries = _sector1EndTimeseries;
            destination._blankSector2Timeseries = _blankSector2Timeseries;
            destination._sector2StartTimeseries = _sector2StartTimeseries;
            destination._sector2EndTimeseries = _sector2EndTimeseries;
            destination._enableAutomaticFrequencyControlTimeseries = _enableAutomaticFrequencyControlTimeseries;
            destination._azimuthOffsetTimeseries = _azimuthOffsetTimeseries;
            destination._enableSensitivityTimeControlTimeseries = _enableSensitivityTimeControlTimeseries;
            destination._automaticSensitivityTimeControlTimeseries = _automaticSensitivityTimeControlTimeseries;
            destination._sensitivityTimeControlLevelTimeseries = _sensitivityTimeControlLevelTimeseries;
            destination._enableFastTimeConstantTimeseries = _enableFastTimeConstantTimeseries;
            destination._fastTimeConstantLevelTimeseries = _fastTimeConstantLevelTimeseries;
            destination._fastTimeConstantModeTimeseries = _fastTimeConstantModeTimeseries;
            destination._latitudeTimeseries = _latitudeTimeseries;
            destination._longitudeTimeseries = _longitudeTimeseries;
            destination._radome = _radome;
            destination._gNSSDevice = _gNSSDevice;
        }

        public override bool Equals(BaseData<Kind>? other)
        {
            if (base.Equals(other))
            {
                var obj = ( RadarDeviceObject )other;
                if( obj._saveSettingsTimeseries != _saveSettingsTimeseries )
                {
                    return false;
                }
                if( obj._powerOnTimeseries != _powerOnTimeseries )
                {
                    return false;
                }
                if( obj._trackingOnTimeseries != _trackingOnTimeseries )
                {
                    return false;
                }
                if( obj._radarPulseTimeseries != _radarPulseTimeseries )
                {
                    return false;
                }
                if( obj._tuningTimeseries != _tuningTimeseries )
                {
                    return false;
                }
                if( obj._blankSector1Timeseries != _blankSector1Timeseries )
                {
                    return false;
                }
                if( obj._sector1StartTimeseries != _sector1StartTimeseries )
                {
                    return false;
                }
                if( obj._sector1EndTimeseries != _sector1EndTimeseries )
                {
                    return false;
                }
                if( obj._blankSector2Timeseries != _blankSector2Timeseries )
                {
                    return false;
                }
                if( obj._sector2StartTimeseries != _sector2StartTimeseries )
                {
                    return false;
                }
                if( obj._sector2EndTimeseries != _sector2EndTimeseries )
                {
                    return false;
                }
                if( obj._enableAutomaticFrequencyControlTimeseries != _enableAutomaticFrequencyControlTimeseries )
                {
                    return false;
                }
                if( obj._azimuthOffsetTimeseries != _azimuthOffsetTimeseries )
                {
                    return false;
                }
                if( obj._enableSensitivityTimeControlTimeseries != _enableSensitivityTimeControlTimeseries )
                {
                    return false;
                }
                if( obj._automaticSensitivityTimeControlTimeseries != _automaticSensitivityTimeControlTimeseries )
                {
                    return false;
                }
                if( obj._sensitivityTimeControlLevelTimeseries != _sensitivityTimeControlLevelTimeseries )
                {
                    return false;
                }
                if( obj._enableFastTimeConstantTimeseries != _enableFastTimeConstantTimeseries )
                {
                    return false;
                }
                if( obj._fastTimeConstantLevelTimeseries != _fastTimeConstantLevelTimeseries )
                {
                    return false;
                }
                if( obj._fastTimeConstantModeTimeseries != _fastTimeConstantModeTimeseries )
                {
                    return false;
                }
                if( obj._latitudeTimeseries != _latitudeTimeseries )
                {
                    return false;
                }
                if( obj._longitudeTimeseries != _longitudeTimeseries )
                {
                    return false;
                }
                if( obj._radome != _radome )
                {
                    return false;
                }
                if( obj._gNSSDevice != _gNSSDevice )
                {
                    return false;
                }
                return true;
            }
            return false;
        }

        public override bool IsOfType(Kind objectType)
        {
            if( objectType == Kind.RadarDevice )
            {
                return true;
            }
            return base.IsOfType( objectType );
        }

        public Guid SaveSettingsTimeseries
        {
            get => _saveSettingsTimeseries;
            set
            {
                if( _saveSettingsTimeseries != value )
                {
                    _saveSettingsTimeseries = value;
                    OnPropertyChanged( );
                }
            }
        }
        public Guid PowerOnTimeseries
        {
            get => _powerOnTimeseries;
            set
            {
                if( _powerOnTimeseries != value )
                {
                    _powerOnTimeseries = value;
                    OnPropertyChanged( );
                }
            }
        }
        public Guid TrackingOnTimeseries
        {
            get => _trackingOnTimeseries;
            set
            {
                if( _trackingOnTimeseries != value )
                {
                    _trackingOnTimeseries = value;
                    OnPropertyChanged( );
                }
            }
        }
        public Guid RadarPulseTimeseries
        {
            get => _radarPulseTimeseries;
            set
            {
                if( _radarPulseTimeseries != value )
                {
                    _radarPulseTimeseries = value;
                    OnPropertyChanged( );
                }
            }
        }
        public Guid TuningTimeseries
        {
            get => _tuningTimeseries;
            set
            {
                if( _tuningTimeseries != value )
                {
                    _tuningTimeseries = value;
                    OnPropertyChanged( );
                }
            }
        }
        public Guid BlankSector1Timeseries
        {
            get => _blankSector1Timeseries;
            set
            {
                if( _blankSector1Timeseries != value )
                {
                    _blankSector1Timeseries = value;
                    OnPropertyChanged( );
                }
            }
        }
        public Guid Sector1StartTimeseries
        {
            get => _sector1StartTimeseries;
            set
            {
                if( _sector1StartTimeseries != value )
                {
                    _sector1StartTimeseries = value;
                    OnPropertyChanged( );
                }
            }
        }
        public Guid Sector1EndTimeseries
        {
            get => _sector1EndTimeseries;
            set
            {
                if( _sector1EndTimeseries != value )
                {
                    _sector1EndTimeseries = value;
                    OnPropertyChanged( );
                }
            }
        }
        public Guid BlankSector2Timeseries
        {
            get => _blankSector2Timeseries;
            set
            {
                if( _blankSector2Timeseries != value )
                {
                    _blankSector2Timeseries = value;
                    OnPropertyChanged( );
                }
            }
        }
        public Guid Sector2StartTimeseries
        {
            get => _sector2StartTimeseries;
            set
            {
                if( _sector2StartTimeseries != value )
                {
                    _sector2StartTimeseries = value;
                    OnPropertyChanged( );
                }
            }
        }
        public Guid Sector2EndTimeseries
        {
            get => _sector2EndTimeseries;
            set
            {
                if( _sector2EndTimeseries != value )
                {
                    _sector2EndTimeseries = value;
                    OnPropertyChanged( );
                }
            }
        }
        public Guid EnableAutomaticFrequencyControlTimeseries
        {
            get => _enableAutomaticFrequencyControlTimeseries;
            set
            {
                if( _enableAutomaticFrequencyControlTimeseries != value )
                {
                    _enableAutomaticFrequencyControlTimeseries = value;
                    OnPropertyChanged( );
                }
            }
        }
        public Guid AzimuthOffsetTimeseries
        {
            get => _azimuthOffsetTimeseries;
            set
            {
                if( _azimuthOffsetTimeseries != value )
                {
                    _azimuthOffsetTimeseries = value;
                    OnPropertyChanged( );
                }
            }
        }
        public Guid EnableSensitivityTimeControlTimeseries
        {
            get => _enableSensitivityTimeControlTimeseries;
            set
            {
                if( _enableSensitivityTimeControlTimeseries != value )
                {
                    _enableSensitivityTimeControlTimeseries = value;
                    OnPropertyChanged( );
                }
            }
        }
        public Guid AutomaticSensitivityTimeControlTimeseries
        {
            get => _automaticSensitivityTimeControlTimeseries;
            set
            {
                if( _automaticSensitivityTimeControlTimeseries != value )
                {
                    _automaticSensitivityTimeControlTimeseries = value;
                    OnPropertyChanged( );
                }
            }
        }
        public Guid SensitivityTimeControlLevelTimeseries
        {
            get => _sensitivityTimeControlLevelTimeseries;
            set
            {
                if( _sensitivityTimeControlLevelTimeseries != value )
                {
                    _sensitivityTimeControlLevelTimeseries = value;
                    OnPropertyChanged( );
                }
            }
        }
        public Guid EnableFastTimeConstantTimeseries
        {
            get => _enableFastTimeConstantTimeseries;
            set
            {
                if( _enableFastTimeConstantTimeseries != value )
                {
                    _enableFastTimeConstantTimeseries = value;
                    OnPropertyChanged( );
                }
            }
        }
        public Guid FastTimeConstantLevelTimeseries
        {
            get => _fastTimeConstantLevelTimeseries;
            set
            {
                if( _fastTimeConstantLevelTimeseries != value )
                {
                    _fastTimeConstantLevelTimeseries = value;
                    OnPropertyChanged( );
                }
            }
        }
        public Guid FastTimeConstantModeTimeseries
        {
            get => _fastTimeConstantModeTimeseries;
            set
            {
                if( _fastTimeConstantModeTimeseries != value )
                {
                    _fastTimeConstantModeTimeseries = value;
                    OnPropertyChanged( );
                }
            }
        }
        public Guid LatitudeTimeseries
        {
            get => _latitudeTimeseries;
            set
            {
                if( _latitudeTimeseries != value )
                {
                    _latitudeTimeseries = value;
                    OnPropertyChanged( );
                }
            }
        }
        public Guid LongitudeTimeseries
        {
            get => _longitudeTimeseries;
            set
            {
                if( _longitudeTimeseries != value )
                {
                    _longitudeTimeseries = value;
                    OnPropertyChanged( );
                }
            }
        }
        public Guid? Radome
        {
            get => _radome;
            set
            {
                if( _radome != value )
                {
                    _radome = value;
                    OnPropertyChanged( );
                }
            }
        }
        public Guid? GNSSDevice
        {
            get => _gNSSDevice;
            set
            {
                if( _gNSSDevice != value )
                {
                    _gNSSDevice = value;
                    OnPropertyChanged( );
                }
            }
        }

        public override void WriteTo( [ DisallowNull ] BinaryWriter destination )
        {
            base.WriteTo( destination );
            destination.Write( _saveSettingsTimeseries );
            destination.Write( _powerOnTimeseries );
            destination.Write( _trackingOnTimeseries );
            destination.Write( _radarPulseTimeseries );
            destination.Write( _tuningTimeseries );
            destination.Write( _blankSector1Timeseries );
            destination.Write( _sector1StartTimeseries );
            destination.Write( _sector1EndTimeseries );
            destination.Write( _blankSector2Timeseries );
            destination.Write( _sector2StartTimeseries );
            destination.Write( _sector2EndTimeseries );
            destination.Write( _enableAutomaticFrequencyControlTimeseries );
            destination.Write( _azimuthOffsetTimeseries );
            destination.Write( _enableSensitivityTimeControlTimeseries );
            destination.Write( _automaticSensitivityTimeControlTimeseries );
            destination.Write( _sensitivityTimeControlLevelTimeseries );
            destination.Write( _enableFastTimeConstantTimeseries );
            destination.Write( _fastTimeConstantLevelTimeseries );
            destination.Write( _fastTimeConstantModeTimeseries );
            destination.Write( _latitudeTimeseries );
            destination.Write( _longitudeTimeseries );
            destination.Write( _radome );
            destination.Write( _gNSSDevice );
        }

        public override void ReadFrom([DisallowNull] BinaryReader source)
        {
            base.ReadFrom( source );
            _saveSettingsTimeseries = source.ReadGuid( );
            _powerOnTimeseries = source.ReadGuid( );
            _trackingOnTimeseries = source.ReadGuid( );
            _radarPulseTimeseries = source.ReadGuid( );
            _tuningTimeseries = source.ReadGuid( );
            _blankSector1Timeseries = source.ReadGuid( );
            _sector1StartTimeseries = source.ReadGuid( );
            _sector1EndTimeseries = source.ReadGuid( );
            _blankSector2Timeseries = source.ReadGuid( );
            _sector2StartTimeseries = source.ReadGuid( );
            _sector2EndTimeseries = source.ReadGuid( );
            _enableAutomaticFrequencyControlTimeseries = source.ReadGuid( );
            _azimuthOffsetTimeseries = source.ReadGuid( );
            _enableSensitivityTimeControlTimeseries = source.ReadGuid( );
            _automaticSensitivityTimeControlTimeseries = source.ReadGuid( );
            _sensitivityTimeControlLevelTimeseries = source.ReadGuid( );
            _enableFastTimeConstantTimeseries = source.ReadGuid( );
            _fastTimeConstantLevelTimeseries = source.ReadGuid( );
            _fastTimeConstantModeTimeseries = source.ReadGuid( );
            _latitudeTimeseries = source.ReadGuid( );
            _longitudeTimeseries = source.ReadGuid( );
            _radome = source.ReadNullableGuid( );
            _gNSSDevice = source.ReadNullableGuid( );
        }

    }
    public class WeatherStationDeviceObject : DeviceObject
    {
        Guid _barometricPressureTimeseries;
        Guid _airTemperatureTimeseries;
        Guid _waterTemperatureTimeseries;
        Guid _relativeHumidityTimeseries;
        Guid _absoluteHumidityTimeseries;
        Guid _dewPointTimeseries;
        Guid _windDirectionTimeseries;
        Guid _windSpeedTimeseries;
        Guid _gyro;
        public WeatherStationDeviceObject( )
        {
        }

        public WeatherStationDeviceObject( ObjectState objectState, Guid id, long rowVersion, Guid host, string name, string description, Guid enabledTimeseries, Guid barometricPressureTimeseries, Guid airTemperatureTimeseries, Guid waterTemperatureTimeseries, Guid relativeHumidityTimeseries, Guid absoluteHumidityTimeseries, Guid dewPointTimeseries, Guid windDirectionTimeseries, Guid windSpeedTimeseries, Guid gyro )
            : base( objectState, id, rowVersion, host, name, description, enabledTimeseries )
        {
            _barometricPressureTimeseries = barometricPressureTimeseries;
            _airTemperatureTimeseries = airTemperatureTimeseries;
            _waterTemperatureTimeseries = waterTemperatureTimeseries;
            _relativeHumidityTimeseries = relativeHumidityTimeseries;
            _absoluteHumidityTimeseries = absoluteHumidityTimeseries;
            _dewPointTimeseries = dewPointTimeseries;
            _windDirectionTimeseries = windDirectionTimeseries;
            _windSpeedTimeseries = windSpeedTimeseries;
            _gyro = gyro;
        }

        public override Kind GetObjectType()
        {
            return Kind.WeatherStationDevice;
        }

        public override BaseData<Kind> Create()
        {
            return new WeatherStationDeviceObject( );
        }

        public override void AssignTo( BaseData<Kind> target )
        {
            base.AssignTo( target );
            var destination = ( WeatherStationDeviceObject )target;
            destination._barometricPressureTimeseries = _barometricPressureTimeseries;
            destination._airTemperatureTimeseries = _airTemperatureTimeseries;
            destination._waterTemperatureTimeseries = _waterTemperatureTimeseries;
            destination._relativeHumidityTimeseries = _relativeHumidityTimeseries;
            destination._absoluteHumidityTimeseries = _absoluteHumidityTimeseries;
            destination._dewPointTimeseries = _dewPointTimeseries;
            destination._windDirectionTimeseries = _windDirectionTimeseries;
            destination._windSpeedTimeseries = _windSpeedTimeseries;
            destination._gyro = _gyro;
        }

        public override bool Equals(BaseData<Kind>? other)
        {
            if (base.Equals(other))
            {
                var obj = ( WeatherStationDeviceObject )other;
                if( obj._barometricPressureTimeseries != _barometricPressureTimeseries )
                {
                    return false;
                }
                if( obj._airTemperatureTimeseries != _airTemperatureTimeseries )
                {
                    return false;
                }
                if( obj._waterTemperatureTimeseries != _waterTemperatureTimeseries )
                {
                    return false;
                }
                if( obj._relativeHumidityTimeseries != _relativeHumidityTimeseries )
                {
                    return false;
                }
                if( obj._absoluteHumidityTimeseries != _absoluteHumidityTimeseries )
                {
                    return false;
                }
                if( obj._dewPointTimeseries != _dewPointTimeseries )
                {
                    return false;
                }
                if( obj._windDirectionTimeseries != _windDirectionTimeseries )
                {
                    return false;
                }
                if( obj._windSpeedTimeseries != _windSpeedTimeseries )
                {
                    return false;
                }
                if( obj._gyro != _gyro )
                {
                    return false;
                }
                return true;
            }
            return false;
        }

        public override bool IsOfType(Kind objectType)
        {
            if( objectType == Kind.WeatherStationDevice )
            {
                return true;
            }
            return base.IsOfType( objectType );
        }

        public Guid BarometricPressureTimeseries
        {
            get => _barometricPressureTimeseries;
            set
            {
                if( _barometricPressureTimeseries != value )
                {
                    _barometricPressureTimeseries = value;
                    OnPropertyChanged( );
                }
            }
        }
        public Guid AirTemperatureTimeseries
        {
            get => _airTemperatureTimeseries;
            set
            {
                if( _airTemperatureTimeseries != value )
                {
                    _airTemperatureTimeseries = value;
                    OnPropertyChanged( );
                }
            }
        }
        public Guid WaterTemperatureTimeseries
        {
            get => _waterTemperatureTimeseries;
            set
            {
                if( _waterTemperatureTimeseries != value )
                {
                    _waterTemperatureTimeseries = value;
                    OnPropertyChanged( );
                }
            }
        }
        public Guid RelativeHumidityTimeseries
        {
            get => _relativeHumidityTimeseries;
            set
            {
                if( _relativeHumidityTimeseries != value )
                {
                    _relativeHumidityTimeseries = value;
                    OnPropertyChanged( );
                }
            }
        }
        public Guid AbsoluteHumidityTimeseries
        {
            get => _absoluteHumidityTimeseries;
            set
            {
                if( _absoluteHumidityTimeseries != value )
                {
                    _absoluteHumidityTimeseries = value;
                    OnPropertyChanged( );
                }
            }
        }
        public Guid DewPointTimeseries
        {
            get => _dewPointTimeseries;
            set
            {
                if( _dewPointTimeseries != value )
                {
                    _dewPointTimeseries = value;
                    OnPropertyChanged( );
                }
            }
        }
        public Guid WindDirectionTimeseries
        {
            get => _windDirectionTimeseries;
            set
            {
                if( _windDirectionTimeseries != value )
                {
                    _windDirectionTimeseries = value;
                    OnPropertyChanged( );
                }
            }
        }
        public Guid WindSpeedTimeseries
        {
            get => _windSpeedTimeseries;
            set
            {
                if( _windSpeedTimeseries != value )
                {
                    _windSpeedTimeseries = value;
                    OnPropertyChanged( );
                }
            }
        }
        public Guid Gyro
        {
            get => _gyro;
            set
            {
                if( _gyro != value )
                {
                    _gyro = value;
                    OnPropertyChanged( );
                }
            }
        }

        public override void WriteTo( [ DisallowNull ] BinaryWriter destination )
        {
            base.WriteTo( destination );
            destination.Write( _barometricPressureTimeseries );
            destination.Write( _airTemperatureTimeseries );
            destination.Write( _waterTemperatureTimeseries );
            destination.Write( _relativeHumidityTimeseries );
            destination.Write( _absoluteHumidityTimeseries );
            destination.Write( _dewPointTimeseries );
            destination.Write( _windDirectionTimeseries );
            destination.Write( _windSpeedTimeseries );
            destination.Write( _gyro );
        }

        public override void ReadFrom([DisallowNull] BinaryReader source)
        {
            base.ReadFrom( source );
            _barometricPressureTimeseries = source.ReadGuid( );
            _airTemperatureTimeseries = source.ReadGuid( );
            _waterTemperatureTimeseries = source.ReadGuid( );
            _relativeHumidityTimeseries = source.ReadGuid( );
            _absoluteHumidityTimeseries = source.ReadGuid( );
            _dewPointTimeseries = source.ReadGuid( );
            _windDirectionTimeseries = source.ReadGuid( );
            _windSpeedTimeseries = source.ReadGuid( );
            _gyro = source.ReadGuid( );
        }

    }
    public class FacilityObject : ItemObject
    {
        string _name = string.Empty;
        Guid _type;
        double _longitude = 0.0;
        double _latitude = 0.0;
        double _altitude = 0.0;
        public FacilityObject( )
        {
        }

        public FacilityObject( ObjectState objectState, Guid id, long rowVersion, string name, Guid type, double longitude, double latitude, double altitude )
            : base( objectState, id, rowVersion )
        {
            _name = name;
            _type = type;
            _longitude = longitude;
            _latitude = latitude;
            _altitude = altitude;
        }

        public override Kind GetObjectType()
        {
            return Kind.Facility;
        }

        public override BaseData<Kind> Create()
        {
            return new FacilityObject( );
        }

        public override void AssignTo( BaseData<Kind> target )
        {
            base.AssignTo( target );
            var destination = ( FacilityObject )target;
            destination._name = _name;
            destination._type = _type;
            destination._longitude = _longitude;
            destination._latitude = _latitude;
            destination._altitude = _altitude;
        }

        public override bool Equals(BaseData<Kind>? other)
        {
            if (base.Equals(other))
            {
                var obj = ( FacilityObject )other;
                if( obj._name != _name )
                {
                    return false;
                }
                if( obj._type != _type )
                {
                    return false;
                }
                if( obj._longitude != _longitude )
                {
                    return false;
                }
                if( obj._latitude != _latitude )
                {
                    return false;
                }
                if( obj._altitude != _altitude )
                {
                    return false;
                }
                return true;
            }
            return false;
        }

        public override bool IsOfType(Kind objectType)
        {
            if( objectType == Kind.Facility )
            {
                return true;
            }
            return base.IsOfType( objectType );
        }

        public string Name
        {
            get => _name;
            set
            {
                if( _name != value )
                {
                    _name = value;
                    OnPropertyChanged( );
                }
            }
        }
        public Guid Type
        {
            get => _type;
            set
            {
                if( _type != value )
                {
                    _type = value;
                    OnPropertyChanged( );
                }
            }
        }
        public double Longitude
        {
            get => _longitude;
            set
            {
                if( _longitude != value )
                {
                    _longitude = value;
                    OnPropertyChanged( );
                }
            }
        }
        public double Latitude
        {
            get => _latitude;
            set
            {
                if( _latitude != value )
                {
                    _latitude = value;
                    OnPropertyChanged( );
                }
            }
        }
        public double Altitude
        {
            get => _altitude;
            set
            {
                if( _altitude != value )
                {
                    _altitude = value;
                    OnPropertyChanged( );
                }
            }
        }

        public override void WriteTo( [ DisallowNull ] BinaryWriter destination )
        {
            base.WriteTo( destination );
            destination.Write( _name );
            destination.Write( _type );
            destination.Write( _longitude );
            destination.Write( _latitude );
            destination.Write( _altitude );
        }

        public override void ReadFrom([DisallowNull] BinaryReader source)
        {
            base.ReadFrom( source );
            _name = source.ReadString( );
            _type = source.ReadGuid( );
            _longitude = source.ReadDouble( );
            _latitude = source.ReadDouble( );
            _altitude = source.ReadDouble( );
        }

    }
    public abstract class TrackableItemObject : ItemObject
    {
        protected TrackableItemObject( )
        {
        }

        protected TrackableItemObject( ObjectState objectState, Guid id, long rowVersion )
            : base( objectState, id, rowVersion )
        {
        }

        public override bool IsOfType(Kind objectType)
        {
            if( objectType == Kind.TrackableItem )
            {
                return true;
            }
            return base.IsOfType( objectType );
        }

    }
    public class AircraftObject : TrackableItemObject
    {
        string _name = string.Empty;
        Guid _type;
        public AircraftObject( )
        {
        }

        public AircraftObject( ObjectState objectState, Guid id, long rowVersion, string name, Guid type )
            : base( objectState, id, rowVersion )
        {
            _name = name;
            _type = type;
        }

        public override Kind GetObjectType()
        {
            return Kind.Aircraft;
        }

        public override BaseData<Kind> Create()
        {
            return new AircraftObject( );
        }

        public override void AssignTo( BaseData<Kind> target )
        {
            base.AssignTo( target );
            var destination = ( AircraftObject )target;
            destination._name = _name;
            destination._type = _type;
        }

        public override bool Equals(BaseData<Kind>? other)
        {
            if (base.Equals(other))
            {
                var obj = ( AircraftObject )other;
                if( obj._name != _name )
                {
                    return false;
                }
                if( obj._type != _type )
                {
                    return false;
                }
                return true;
            }
            return false;
        }

        public override bool IsOfType(Kind objectType)
        {
            if( objectType == Kind.Aircraft )
            {
                return true;
            }
            return base.IsOfType( objectType );
        }

        public string Name
        {
            get => _name;
            set
            {
                if( _name != value )
                {
                    _name = value;
                    OnPropertyChanged( );
                }
            }
        }
        public Guid Type
        {
            get => _type;
            set
            {
                if( _type != value )
                {
                    _type = value;
                    OnPropertyChanged( );
                }
            }
        }

        public override void WriteTo( [ DisallowNull ] BinaryWriter destination )
        {
            base.WriteTo( destination );
            destination.Write( _name );
            destination.Write( _type );
        }

        public override void ReadFrom([DisallowNull] BinaryReader source)
        {
            base.ReadFrom( source );
            _name = source.ReadString( );
            _type = source.ReadGuid( );
        }

    }
    public class AisAidToNavigationObject : TrackableItemObject
    {
        string _name = string.Empty;
        Guid _mMSI;
        Types.NavigationalAidType _navigationalAidType = Types.NavigationalAidType.NotSpecified;
        Guid _position;
        bool _isVirtual = false;
        int _toBow = 0;
        int _toStern = 0;
        int _toPort = 0;
        int _toStarboard = 0;
        Guid _offPositionTimeseries;
        public AisAidToNavigationObject( )
        {
        }

        public AisAidToNavigationObject( ObjectState objectState, Guid id, long rowVersion, string name, Guid mMSI, Types.NavigationalAidType navigationalAidType, Guid position, bool isVirtual, int toBow, int toStern, int toPort, int toStarboard, Guid offPositionTimeseries )
            : base( objectState, id, rowVersion )
        {
            _name = name;
            _mMSI = mMSI;
            _navigationalAidType = navigationalAidType;
            _position = position;
            _isVirtual = isVirtual;
            _toBow = toBow;
            _toStern = toStern;
            _toPort = toPort;
            _toStarboard = toStarboard;
            _offPositionTimeseries = offPositionTimeseries;
        }

        public override Kind GetObjectType()
        {
            return Kind.AisAidToNavigation;
        }

        public override BaseData<Kind> Create()
        {
            return new AisAidToNavigationObject( );
        }

        public override void AssignTo( BaseData<Kind> target )
        {
            base.AssignTo( target );
            var destination = ( AisAidToNavigationObject )target;
            destination._name = _name;
            destination._mMSI = _mMSI;
            destination._navigationalAidType = _navigationalAidType;
            destination._position = _position;
            destination._isVirtual = _isVirtual;
            destination._toBow = _toBow;
            destination._toStern = _toStern;
            destination._toPort = _toPort;
            destination._toStarboard = _toStarboard;
            destination._offPositionTimeseries = _offPositionTimeseries;
        }

        public override bool Equals(BaseData<Kind>? other)
        {
            if (base.Equals(other))
            {
                var obj = ( AisAidToNavigationObject )other;
                if( obj._name != _name )
                {
                    return false;
                }
                if( obj._mMSI != _mMSI )
                {
                    return false;
                }
                if( obj._navigationalAidType != _navigationalAidType )
                {
                    return false;
                }
                if( obj._position != _position )
                {
                    return false;
                }
                if( obj._isVirtual != _isVirtual )
                {
                    return false;
                }
                if( obj._toBow != _toBow )
                {
                    return false;
                }
                if( obj._toStern != _toStern )
                {
                    return false;
                }
                if( obj._toPort != _toPort )
                {
                    return false;
                }
                if( obj._toStarboard != _toStarboard )
                {
                    return false;
                }
                if( obj._offPositionTimeseries != _offPositionTimeseries )
                {
                    return false;
                }
                return true;
            }
            return false;
        }

        public override bool IsOfType(Kind objectType)
        {
            if( objectType == Kind.AisAidToNavigation )
            {
                return true;
            }
            return base.IsOfType( objectType );
        }

        public string Name
        {
            get => _name;
            set
            {
                if( _name != value )
                {
                    _name = value;
                    OnPropertyChanged( );
                }
            }
        }
        public Guid MMSI
        {
            get => _mMSI;
            set
            {
                if( _mMSI != value )
                {
                    _mMSI = value;
                    OnPropertyChanged( );
                }
            }
        }
        public Types.NavigationalAidType NavigationalAidType
        {
            get => _navigationalAidType;
            set
            {
                if( _navigationalAidType != value )
                {
                    _navigationalAidType = value;
                    OnPropertyChanged( );
                }
            }
        }
        public Guid Position
        {
            get => _position;
            set
            {
                if( _position != value )
                {
                    _position = value;
                    OnPropertyChanged( );
                }
            }
        }
        public bool IsVirtual
        {
            get => _isVirtual;
            set
            {
                if( _isVirtual != value )
                {
                    _isVirtual = value;
                    OnPropertyChanged( );
                }
            }
        }
        public int ToBow
        {
            get => _toBow;
            set
            {
                if( _toBow != value )
                {
                    _toBow = value;
                    OnPropertyChanged( );
                }
            }
        }
        public int ToStern
        {
            get => _toStern;
            set
            {
                if( _toStern != value )
                {
                    _toStern = value;
                    OnPropertyChanged( );
                }
            }
        }
        public int ToPort
        {
            get => _toPort;
            set
            {
                if( _toPort != value )
                {
                    _toPort = value;
                    OnPropertyChanged( );
                }
            }
        }
        public int ToStarboard
        {
            get => _toStarboard;
            set
            {
                if( _toStarboard != value )
                {
                    _toStarboard = value;
                    OnPropertyChanged( );
                }
            }
        }
        public Guid OffPositionTimeseries
        {
            get => _offPositionTimeseries;
            set
            {
                if( _offPositionTimeseries != value )
                {
                    _offPositionTimeseries = value;
                    OnPropertyChanged( );
                }
            }
        }

        public override void WriteTo( [ DisallowNull ] BinaryWriter destination )
        {
            base.WriteTo( destination );
            destination.Write( _name );
            destination.Write( _mMSI );
            destination.Write( _navigationalAidType );
            destination.Write( _position );
            destination.Write( _isVirtual );
            destination.Write( _toBow );
            destination.Write( _toStern );
            destination.Write( _toPort );
            destination.Write( _toStarboard );
            destination.Write( _offPositionTimeseries );
        }

        public override void ReadFrom([DisallowNull] BinaryReader source)
        {
            base.ReadFrom( source );
            _name = source.ReadString( );
            _mMSI = source.ReadGuid( );
            _navigationalAidType = source.ReadEnum<Types.NavigationalAidType>( );
            _position = source.ReadGuid( );
            _isVirtual = source.ReadBoolean( );
            _toBow = source.ReadInt32( );
            _toStern = source.ReadInt32( );
            _toPort = source.ReadInt32( );
            _toStarboard = source.ReadInt32( );
            _offPositionTimeseries = source.ReadGuid( );
        }

    }
    public class VehicleObject : TrackableItemObject
    {
        string _name = string.Empty;
        Guid _type;
        public VehicleObject( )
        {
        }

        public VehicleObject( ObjectState objectState, Guid id, long rowVersion, string name, Guid type )
            : base( objectState, id, rowVersion )
        {
            _name = name;
            _type = type;
        }

        public override Kind GetObjectType()
        {
            return Kind.Vehicle;
        }

        public override BaseData<Kind> Create()
        {
            return new VehicleObject( );
        }

        public override void AssignTo( BaseData<Kind> target )
        {
            base.AssignTo( target );
            var destination = ( VehicleObject )target;
            destination._name = _name;
            destination._type = _type;
        }

        public override bool Equals(BaseData<Kind>? other)
        {
            if (base.Equals(other))
            {
                var obj = ( VehicleObject )other;
                if( obj._name != _name )
                {
                    return false;
                }
                if( obj._type != _type )
                {
                    return false;
                }
                return true;
            }
            return false;
        }

        public override bool IsOfType(Kind objectType)
        {
            if( objectType == Kind.Vehicle )
            {
                return true;
            }
            return base.IsOfType( objectType );
        }

        public string Name
        {
            get => _name;
            set
            {
                if( _name != value )
                {
                    _name = value;
                    OnPropertyChanged( );
                }
            }
        }
        public Guid Type
        {
            get => _type;
            set
            {
                if( _type != value )
                {
                    _type = value;
                    OnPropertyChanged( );
                }
            }
        }

        public override void WriteTo( [ DisallowNull ] BinaryWriter destination )
        {
            base.WriteTo( destination );
            destination.Write( _name );
            destination.Write( _type );
        }

        public override void ReadFrom([DisallowNull] BinaryReader source)
        {
            base.ReadFrom( source );
            _name = source.ReadString( );
            _type = source.ReadGuid( );
        }

    }
    public class VesselObject : TrackableItemObject
    {
        string _name = string.Empty;
        Guid _type;
        int _toBow = 0;
        int _toStern = 0;
        int _toPort = 0;
        int _toStarboard = 0;
        Guid _draughtTimeseries;
        Guid _personsOnBoardTimeseries;
        public VesselObject( )
        {
        }

        public VesselObject( ObjectState objectState, Guid id, long rowVersion, string name, Guid type, int toBow, int toStern, int toPort, int toStarboard, Guid draughtTimeseries, Guid personsOnBoardTimeseries )
            : base( objectState, id, rowVersion )
        {
            _name = name;
            _type = type;
            _toBow = toBow;
            _toStern = toStern;
            _toPort = toPort;
            _toStarboard = toStarboard;
            _draughtTimeseries = draughtTimeseries;
            _personsOnBoardTimeseries = personsOnBoardTimeseries;
        }

        public override Kind GetObjectType()
        {
            return Kind.Vessel;
        }

        public override BaseData<Kind> Create()
        {
            return new VesselObject( );
        }

        public override void AssignTo( BaseData<Kind> target )
        {
            base.AssignTo( target );
            var destination = ( VesselObject )target;
            destination._name = _name;
            destination._type = _type;
            destination._toBow = _toBow;
            destination._toStern = _toStern;
            destination._toPort = _toPort;
            destination._toStarboard = _toStarboard;
            destination._draughtTimeseries = _draughtTimeseries;
            destination._personsOnBoardTimeseries = _personsOnBoardTimeseries;
        }

        public override bool Equals(BaseData<Kind>? other)
        {
            if (base.Equals(other))
            {
                var obj = ( VesselObject )other;
                if( obj._name != _name )
                {
                    return false;
                }
                if( obj._type != _type )
                {
                    return false;
                }
                if( obj._toBow != _toBow )
                {
                    return false;
                }
                if( obj._toStern != _toStern )
                {
                    return false;
                }
                if( obj._toPort != _toPort )
                {
                    return false;
                }
                if( obj._toStarboard != _toStarboard )
                {
                    return false;
                }
                if( obj._draughtTimeseries != _draughtTimeseries )
                {
                    return false;
                }
                if( obj._personsOnBoardTimeseries != _personsOnBoardTimeseries )
                {
                    return false;
                }
                return true;
            }
            return false;
        }

        public override bool IsOfType(Kind objectType)
        {
            if( objectType == Kind.Vessel )
            {
                return true;
            }
            return base.IsOfType( objectType );
        }

        public string Name
        {
            get => _name;
            set
            {
                if( _name != value )
                {
                    _name = value;
                    OnPropertyChanged( );
                }
            }
        }
        public Guid Type
        {
            get => _type;
            set
            {
                if( _type != value )
                {
                    _type = value;
                    OnPropertyChanged( );
                }
            }
        }
        public int ToBow
        {
            get => _toBow;
            set
            {
                if( _toBow != value )
                {
                    _toBow = value;
                    OnPropertyChanged( );
                }
            }
        }
        public int ToStern
        {
            get => _toStern;
            set
            {
                if( _toStern != value )
                {
                    _toStern = value;
                    OnPropertyChanged( );
                }
            }
        }
        public int ToPort
        {
            get => _toPort;
            set
            {
                if( _toPort != value )
                {
                    _toPort = value;
                    OnPropertyChanged( );
                }
            }
        }
        public int ToStarboard
        {
            get => _toStarboard;
            set
            {
                if( _toStarboard != value )
                {
                    _toStarboard = value;
                    OnPropertyChanged( );
                }
            }
        }
        public Guid DraughtTimeseries
        {
            get => _draughtTimeseries;
            set
            {
                if( _draughtTimeseries != value )
                {
                    _draughtTimeseries = value;
                    OnPropertyChanged( );
                }
            }
        }
        public Guid PersonsOnBoardTimeseries
        {
            get => _personsOnBoardTimeseries;
            set
            {
                if( _personsOnBoardTimeseries != value )
                {
                    _personsOnBoardTimeseries = value;
                    OnPropertyChanged( );
                }
            }
        }

        public override void WriteTo( [ DisallowNull ] BinaryWriter destination )
        {
            base.WriteTo( destination );
            destination.Write( _name );
            destination.Write( _type );
            destination.Write( _toBow );
            destination.Write( _toStern );
            destination.Write( _toPort );
            destination.Write( _toStarboard );
            destination.Write( _draughtTimeseries );
            destination.Write( _personsOnBoardTimeseries );
        }

        public override void ReadFrom([DisallowNull] BinaryReader source)
        {
            base.ReadFrom( source );
            _name = source.ReadString( );
            _type = source.ReadGuid( );
            _toBow = source.ReadInt32( );
            _toStern = source.ReadInt32( );
            _toPort = source.ReadInt32( );
            _toStarboard = source.ReadInt32( );
            _draughtTimeseries = source.ReadGuid( );
            _personsOnBoardTimeseries = source.ReadGuid( );
        }

    }
    public class ItemIdentityLinkObject : BaseDataGuid<Kind>
    {
        long _rowVersion = 0;
        Guid _item;
        Guid _identity;
        DateTime _start;
        DateTime? _end;
        public ItemIdentityLinkObject( )
        {
        }

        public ItemIdentityLinkObject( ObjectState objectState, Guid id, long rowVersion, Guid item, Guid identity, DateTime start, DateTime? end )
            : base( objectState, id )
        {
            _rowVersion = rowVersion;
            _item = item;
            _identity = identity;
            _start = start;
            _end = end;
        }

        public override Kind GetObjectType()
        {
            return Kind.ItemIdentityLink;
        }

        public override BaseData<Kind> Create()
        {
            return new ItemIdentityLinkObject( );
        }

        public override void AssignTo( BaseData<Kind> target )
        {
            base.AssignTo( target );
            var destination = ( ItemIdentityLinkObject )target;
            destination._rowVersion = _rowVersion;
            destination._item = _item;
            destination._identity = _identity;
            destination._start = _start;
            destination._end = _end;
        }

        public override bool Equals(BaseData<Kind>? other)
        {
            if (base.Equals(other))
            {
                var obj = ( ItemIdentityLinkObject )other;
                if( obj._rowVersion != _rowVersion )
                {
                    return false;
                }
                if( obj._item != _item )
                {
                    return false;
                }
                if( obj._identity != _identity )
                {
                    return false;
                }
                if( obj._start != _start )
                {
                    return false;
                }
                if( obj._end != _end )
                {
                    return false;
                }
                return true;
            }
            return false;
        }

        public override bool IsOfType(Kind objectType)
        {
            if( objectType == Kind.ItemIdentityLink )
            {
                return true;
            }
            return base.IsOfType( objectType );
        }

        public long RowVersion
        {
            get => _rowVersion;
            set
            {
                if( _rowVersion != value )
                {
                    _rowVersion = value;
                    OnPropertyChanged( );
                }
            }
        }
        public Guid Item
        {
            get => _item;
            set
            {
                if( _item != value )
                {
                    _item = value;
                    OnPropertyChanged( );
                }
            }
        }
        public Guid Identity
        {
            get => _identity;
            set
            {
                if( _identity != value )
                {
                    _identity = value;
                    OnPropertyChanged( );
                }
            }
        }
        public DateTime Start
        {
            get => _start;
            set
            {
                if( _start != value )
                {
                    _start = value;
                    OnPropertyChanged( );
                }
            }
        }
        public DateTime? End
        {
            get => _end;
            set
            {
                if( _end != value )
                {
                    _end = value;
                    OnPropertyChanged( );
                }
            }
        }

        public override void WriteTo( [ DisallowNull ] BinaryWriter destination )
        {
            base.WriteTo( destination );
            destination.Write( _rowVersion );
            destination.Write( _item );
            destination.Write( _identity );
            destination.Write( _start );
            destination.Write( _end );
        }

        public override void ReadFrom([DisallowNull] BinaryReader source)
        {
            base.ReadFrom( source );
            _rowVersion = source.ReadInt64( );
            _item = source.ReadGuid( );
            _identity = source.ReadGuid( );
            _start = source.ReadDateTime( );
            _end = source.ReadNullableDateTime( );
        }

    }
    public class ItemParentChildLinkObject : BaseDataGuid<Kind>
    {
        long _rowVersion = 0;
        Guid _parent;
        Guid _child;
        DateTime _timestamp;
        public ItemParentChildLinkObject( )
        {
        }

        public ItemParentChildLinkObject( ObjectState objectState, Guid id, long rowVersion, Guid parent, Guid child, DateTime timestamp )
            : base( objectState, id )
        {
            _rowVersion = rowVersion;
            _parent = parent;
            _child = child;
            _timestamp = timestamp;
        }

        public override Kind GetObjectType()
        {
            return Kind.ItemParentChildLink;
        }

        public override BaseData<Kind> Create()
        {
            return new ItemParentChildLinkObject( );
        }

        public override void AssignTo( BaseData<Kind> target )
        {
            base.AssignTo( target );
            var destination = ( ItemParentChildLinkObject )target;
            destination._rowVersion = _rowVersion;
            destination._parent = _parent;
            destination._child = _child;
            destination._timestamp = _timestamp;
        }

        public override bool Equals(BaseData<Kind>? other)
        {
            if (base.Equals(other))
            {
                var obj = ( ItemParentChildLinkObject )other;
                if( obj._rowVersion != _rowVersion )
                {
                    return false;
                }
                if( obj._parent != _parent )
                {
                    return false;
                }
                if( obj._child != _child )
                {
                    return false;
                }
                if( obj._timestamp != _timestamp )
                {
                    return false;
                }
                return true;
            }
            return false;
        }

        public override bool IsOfType(Kind objectType)
        {
            if( objectType == Kind.ItemParentChildLink )
            {
                return true;
            }
            return base.IsOfType( objectType );
        }

        public long RowVersion
        {
            get => _rowVersion;
            set
            {
                if( _rowVersion != value )
                {
                    _rowVersion = value;
                    OnPropertyChanged( );
                }
            }
        }
        public Guid Parent
        {
            get => _parent;
            set
            {
                if( _parent != value )
                {
                    _parent = value;
                    OnPropertyChanged( );
                }
            }
        }
        public Guid Child
        {
            get => _child;
            set
            {
                if( _child != value )
                {
                    _child = value;
                    OnPropertyChanged( );
                }
            }
        }
        public DateTime Timestamp
        {
            get => _timestamp;
            set
            {
                if( _timestamp != value )
                {
                    _timestamp = value;
                    OnPropertyChanged( );
                }
            }
        }

        public override void WriteTo( [ DisallowNull ] BinaryWriter destination )
        {
            base.WriteTo( destination );
            destination.Write( _rowVersion );
            destination.Write( _parent );
            destination.Write( _child );
            destination.Write( _timestamp );
        }

        public override void ReadFrom([DisallowNull] BinaryReader source)
        {
            base.ReadFrom( source );
            _rowVersion = source.ReadInt64( );
            _parent = source.ReadGuid( );
            _child = source.ReadGuid( );
            _timestamp = source.ReadDateTime( );
        }

    }
    public class LineInputDeviceCommandObject : BaseDataGuid<Kind>
    {
        long _rowVersion = 0;
        Guid _lineInputDevice;
        DateTime _timestamp;
        Types.DeviceCommandSourceType _deviceCommandSourceType = Types.DeviceCommandSourceType.Unknown;
        Guid _deviceCommandSourceId;
        Guid _reply;
        public LineInputDeviceCommandObject( )
        {
        }

        public LineInputDeviceCommandObject( ObjectState objectState, Guid id, long rowVersion, Guid lineInputDevice, DateTime timestamp, Types.DeviceCommandSourceType deviceCommandSourceType, Guid deviceCommandSourceId, Guid reply )
            : base( objectState, id )
        {
            _rowVersion = rowVersion;
            _lineInputDevice = lineInputDevice;
            _timestamp = timestamp;
            _deviceCommandSourceType = deviceCommandSourceType;
            _deviceCommandSourceId = deviceCommandSourceId;
            _reply = reply;
        }

        public override Kind GetObjectType()
        {
            return Kind.LineInputDeviceCommand;
        }

        public override BaseData<Kind> Create()
        {
            return new LineInputDeviceCommandObject( );
        }

        public override void AssignTo( BaseData<Kind> target )
        {
            base.AssignTo( target );
            var destination = ( LineInputDeviceCommandObject )target;
            destination._rowVersion = _rowVersion;
            destination._lineInputDevice = _lineInputDevice;
            destination._timestamp = _timestamp;
            destination._deviceCommandSourceType = _deviceCommandSourceType;
            destination._deviceCommandSourceId = _deviceCommandSourceId;
            destination._reply = _reply;
        }

        public override bool Equals(BaseData<Kind>? other)
        {
            if (base.Equals(other))
            {
                var obj = ( LineInputDeviceCommandObject )other;
                if( obj._rowVersion != _rowVersion )
                {
                    return false;
                }
                if( obj._lineInputDevice != _lineInputDevice )
                {
                    return false;
                }
                if( obj._timestamp != _timestamp )
                {
                    return false;
                }
                if( obj._deviceCommandSourceType != _deviceCommandSourceType )
                {
                    return false;
                }
                if( obj._deviceCommandSourceId != _deviceCommandSourceId )
                {
                    return false;
                }
                if( obj._reply != _reply )
                {
                    return false;
                }
                return true;
            }
            return false;
        }

        public override bool IsOfType(Kind objectType)
        {
            if( objectType == Kind.LineInputDeviceCommand )
            {
                return true;
            }
            return base.IsOfType( objectType );
        }

        public long RowVersion
        {
            get => _rowVersion;
            set
            {
                if( _rowVersion != value )
                {
                    _rowVersion = value;
                    OnPropertyChanged( );
                }
            }
        }
        public Guid LineInputDevice
        {
            get => _lineInputDevice;
            set
            {
                if( _lineInputDevice != value )
                {
                    _lineInputDevice = value;
                    OnPropertyChanged( );
                }
            }
        }
        public DateTime Timestamp
        {
            get => _timestamp;
            set
            {
                if( _timestamp != value )
                {
                    _timestamp = value;
                    OnPropertyChanged( );
                }
            }
        }
        public Types.DeviceCommandSourceType DeviceCommandSourceType
        {
            get => _deviceCommandSourceType;
            set
            {
                if( _deviceCommandSourceType != value )
                {
                    _deviceCommandSourceType = value;
                    OnPropertyChanged( );
                }
            }
        }
        public Guid DeviceCommandSourceId
        {
            get => _deviceCommandSourceId;
            set
            {
                if( _deviceCommandSourceId != value )
                {
                    _deviceCommandSourceId = value;
                    OnPropertyChanged( );
                }
            }
        }
        public Guid Reply
        {
            get => _reply;
            set
            {
                if( _reply != value )
                {
                    _reply = value;
                    OnPropertyChanged( );
                }
            }
        }

        public override void WriteTo( [ DisallowNull ] BinaryWriter destination )
        {
            base.WriteTo( destination );
            destination.Write( _rowVersion );
            destination.Write( _lineInputDevice );
            destination.Write( _timestamp );
            destination.Write( _deviceCommandSourceType );
            destination.Write( _deviceCommandSourceId );
            destination.Write( _reply );
        }

        public override void ReadFrom([DisallowNull] BinaryReader source)
        {
            base.ReadFrom( source );
            _rowVersion = source.ReadInt64( );
            _lineInputDevice = source.ReadGuid( );
            _timestamp = source.ReadDateTime( );
            _deviceCommandSourceType = source.ReadEnum<Types.DeviceCommandSourceType>( );
            _deviceCommandSourceId = source.ReadGuid( );
            _reply = source.ReadGuid( );
        }

    }
    public class LineInputDeviceCommandReplyObject : BaseDataGuid<Kind>
    {
        long _rowVersion = 0;
        Guid _lineInputDevice;
        DateTime _timestamp;
        Guid _command;
        Types.DeviceCommandReplyStatus _status = Types.DeviceCommandReplyStatus.Unknown;
        string _message = string.Empty;
        public LineInputDeviceCommandReplyObject( )
        {
        }

        public LineInputDeviceCommandReplyObject( ObjectState objectState, Guid id, long rowVersion, Guid lineInputDevice, DateTime timestamp, Guid command, Types.DeviceCommandReplyStatus status, string message )
            : base( objectState, id )
        {
            _rowVersion = rowVersion;
            _lineInputDevice = lineInputDevice;
            _timestamp = timestamp;
            _command = command;
            _status = status;
            _message = message;
        }

        public override Kind GetObjectType()
        {
            return Kind.LineInputDeviceCommandReply;
        }

        public override BaseData<Kind> Create()
        {
            return new LineInputDeviceCommandReplyObject( );
        }

        public override void AssignTo( BaseData<Kind> target )
        {
            base.AssignTo( target );
            var destination = ( LineInputDeviceCommandReplyObject )target;
            destination._rowVersion = _rowVersion;
            destination._lineInputDevice = _lineInputDevice;
            destination._timestamp = _timestamp;
            destination._command = _command;
            destination._status = _status;
            destination._message = _message;
        }

        public override bool Equals(BaseData<Kind>? other)
        {
            if (base.Equals(other))
            {
                var obj = ( LineInputDeviceCommandReplyObject )other;
                if( obj._rowVersion != _rowVersion )
                {
                    return false;
                }
                if( obj._lineInputDevice != _lineInputDevice )
                {
                    return false;
                }
                if( obj._timestamp != _timestamp )
                {
                    return false;
                }
                if( obj._command != _command )
                {
                    return false;
                }
                if( obj._status != _status )
                {
                    return false;
                }
                if( obj._message != _message )
                {
                    return false;
                }
                return true;
            }
            return false;
        }

        public override bool IsOfType(Kind objectType)
        {
            if( objectType == Kind.LineInputDeviceCommandReply )
            {
                return true;
            }
            return base.IsOfType( objectType );
        }

        public long RowVersion
        {
            get => _rowVersion;
            set
            {
                if( _rowVersion != value )
                {
                    _rowVersion = value;
                    OnPropertyChanged( );
                }
            }
        }
        public Guid LineInputDevice
        {
            get => _lineInputDevice;
            set
            {
                if( _lineInputDevice != value )
                {
                    _lineInputDevice = value;
                    OnPropertyChanged( );
                }
            }
        }
        public DateTime Timestamp
        {
            get => _timestamp;
            set
            {
                if( _timestamp != value )
                {
                    _timestamp = value;
                    OnPropertyChanged( );
                }
            }
        }
        public Guid Command
        {
            get => _command;
            set
            {
                if( _command != value )
                {
                    _command = value;
                    OnPropertyChanged( );
                }
            }
        }
        public Types.DeviceCommandReplyStatus Status
        {
            get => _status;
            set
            {
                if( _status != value )
                {
                    _status = value;
                    OnPropertyChanged( );
                }
            }
        }
        public string Message
        {
            get => _message;
            set
            {
                if( _message != value )
                {
                    _message = value;
                    OnPropertyChanged( );
                }
            }
        }

        public override void WriteTo( [ DisallowNull ] BinaryWriter destination )
        {
            base.WriteTo( destination );
            destination.Write( _rowVersion );
            destination.Write( _lineInputDevice );
            destination.Write( _timestamp );
            destination.Write( _command );
            destination.Write( _status );
            destination.Write( _message );
        }

        public override void ReadFrom([DisallowNull] BinaryReader source)
        {
            base.ReadFrom( source );
            _rowVersion = source.ReadInt64( );
            _lineInputDevice = source.ReadGuid( );
            _timestamp = source.ReadDateTime( );
            _command = source.ReadGuid( );
            _status = source.ReadEnum<Types.DeviceCommandReplyStatus>( );
            _message = source.ReadString( );
        }

    }
    public class LineInputDeviceConfigurationObject : BaseDataGuid<Kind>
    {
        long _rowVersion = 0;
        Guid _lineInputDevice;
        DateTime _timestamp;
        bool _storeReceivedSentences = false;
        bool _storeSentMessages = false;
        bool _storeUnsentMessages = false;
        bool _nMEA = false;
        bool _strictNMEA = false;
        Types.LineInputDeviceConnectionType _connectionType = Types.LineInputDeviceConnectionType.Unknown;
        int _udpReceivePort = 0;
        string _udpSendHostname = string.Empty;
        int _udpSendPort = 0;
        string _tcpHostname = string.Empty;
        int _tcpPort = 0;
        bool _useHttpLogin = false;
        string _loginHostname = string.Empty;
        int _loginPort = 0;
        string _userName = string.Empty;
        string _password = string.Empty;
        string _comPort = string.Empty;
        int _baudRate = 0;
        int _dataBits = 0;
        bool _discardNull = false;
        bool _dtrEnable = false;
        Types.Handshake _handshake = Types.Handshake.None;
        string _newLine = string.Empty;
        Types.Parity _parity = Types.Parity.None;
        byte _parityReplace = 0;
        int _readBufferSize = 0;
        TimeSpan _readTimeout;
        int _receivedBytesThreshold = 0;
        bool _rtsEnable = false;
        Types.StopBits _stopBits = Types.StopBits.None;
        int _writeBufferSize = 0;
        TimeSpan _writeTimeout;
        string _pairedComPort = string.Empty;
        public LineInputDeviceConfigurationObject( )
        {
        }

        public LineInputDeviceConfigurationObject( ObjectState objectState, Guid id, long rowVersion, Guid lineInputDevice, DateTime timestamp, bool storeReceivedSentences, bool storeSentMessages, bool storeUnsentMessages, bool nMEA, bool strictNMEA, Types.LineInputDeviceConnectionType connectionType, int udpReceivePort, string udpSendHostname, int udpSendPort, string tcpHostname, int tcpPort, bool useHttpLogin, string loginHostname, int loginPort, string userName, string password, string comPort, int baudRate, int dataBits, bool discardNull, bool dtrEnable, Types.Handshake handshake, string newLine, Types.Parity parity, byte parityReplace, int readBufferSize, TimeSpan readTimeout, int receivedBytesThreshold, bool rtsEnable, Types.StopBits stopBits, int writeBufferSize, TimeSpan writeTimeout, string pairedComPort )
            : base( objectState, id )
        {
            _rowVersion = rowVersion;
            _lineInputDevice = lineInputDevice;
            _timestamp = timestamp;
            _storeReceivedSentences = storeReceivedSentences;
            _storeSentMessages = storeSentMessages;
            _storeUnsentMessages = storeUnsentMessages;
            _nMEA = nMEA;
            _strictNMEA = strictNMEA;
            _connectionType = connectionType;
            _udpReceivePort = udpReceivePort;
            _udpSendHostname = udpSendHostname;
            _udpSendPort = udpSendPort;
            _tcpHostname = tcpHostname;
            _tcpPort = tcpPort;
            _useHttpLogin = useHttpLogin;
            _loginHostname = loginHostname;
            _loginPort = loginPort;
            _userName = userName;
            _password = password;
            _comPort = comPort;
            _baudRate = baudRate;
            _dataBits = dataBits;
            _discardNull = discardNull;
            _dtrEnable = dtrEnable;
            _handshake = handshake;
            _newLine = newLine;
            _parity = parity;
            _parityReplace = parityReplace;
            _readBufferSize = readBufferSize;
            _readTimeout = readTimeout;
            _receivedBytesThreshold = receivedBytesThreshold;
            _rtsEnable = rtsEnable;
            _stopBits = stopBits;
            _writeBufferSize = writeBufferSize;
            _writeTimeout = writeTimeout;
            _pairedComPort = pairedComPort;
        }

        public override Kind GetObjectType()
        {
            return Kind.LineInputDeviceConfiguration;
        }

        public override BaseData<Kind> Create()
        {
            return new LineInputDeviceConfigurationObject( );
        }

        public override void AssignTo( BaseData<Kind> target )
        {
            base.AssignTo( target );
            var destination = ( LineInputDeviceConfigurationObject )target;
            destination._rowVersion = _rowVersion;
            destination._lineInputDevice = _lineInputDevice;
            destination._timestamp = _timestamp;
            destination._storeReceivedSentences = _storeReceivedSentences;
            destination._storeSentMessages = _storeSentMessages;
            destination._storeUnsentMessages = _storeUnsentMessages;
            destination._nMEA = _nMEA;
            destination._strictNMEA = _strictNMEA;
            destination._connectionType = _connectionType;
            destination._udpReceivePort = _udpReceivePort;
            destination._udpSendHostname = _udpSendHostname;
            destination._udpSendPort = _udpSendPort;
            destination._tcpHostname = _tcpHostname;
            destination._tcpPort = _tcpPort;
            destination._useHttpLogin = _useHttpLogin;
            destination._loginHostname = _loginHostname;
            destination._loginPort = _loginPort;
            destination._userName = _userName;
            destination._password = _password;
            destination._comPort = _comPort;
            destination._baudRate = _baudRate;
            destination._dataBits = _dataBits;
            destination._discardNull = _discardNull;
            destination._dtrEnable = _dtrEnable;
            destination._handshake = _handshake;
            destination._newLine = _newLine;
            destination._parity = _parity;
            destination._parityReplace = _parityReplace;
            destination._readBufferSize = _readBufferSize;
            destination._readTimeout = _readTimeout;
            destination._receivedBytesThreshold = _receivedBytesThreshold;
            destination._rtsEnable = _rtsEnable;
            destination._stopBits = _stopBits;
            destination._writeBufferSize = _writeBufferSize;
            destination._writeTimeout = _writeTimeout;
            destination._pairedComPort = _pairedComPort;
        }

        public override bool Equals(BaseData<Kind>? other)
        {
            if (base.Equals(other))
            {
                var obj = ( LineInputDeviceConfigurationObject )other;
                if( obj._rowVersion != _rowVersion )
                {
                    return false;
                }
                if( obj._lineInputDevice != _lineInputDevice )
                {
                    return false;
                }
                if( obj._timestamp != _timestamp )
                {
                    return false;
                }
                if( obj._storeReceivedSentences != _storeReceivedSentences )
                {
                    return false;
                }
                if( obj._storeSentMessages != _storeSentMessages )
                {
                    return false;
                }
                if( obj._storeUnsentMessages != _storeUnsentMessages )
                {
                    return false;
                }
                if( obj._nMEA != _nMEA )
                {
                    return false;
                }
                if( obj._strictNMEA != _strictNMEA )
                {
                    return false;
                }
                if( obj._connectionType != _connectionType )
                {
                    return false;
                }
                if( obj._udpReceivePort != _udpReceivePort )
                {
                    return false;
                }
                if( obj._udpSendHostname != _udpSendHostname )
                {
                    return false;
                }
                if( obj._udpSendPort != _udpSendPort )
                {
                    return false;
                }
                if( obj._tcpHostname != _tcpHostname )
                {
                    return false;
                }
                if( obj._tcpPort != _tcpPort )
                {
                    return false;
                }
                if( obj._useHttpLogin != _useHttpLogin )
                {
                    return false;
                }
                if( obj._loginHostname != _loginHostname )
                {
                    return false;
                }
                if( obj._loginPort != _loginPort )
                {
                    return false;
                }
                if( obj._userName != _userName )
                {
                    return false;
                }
                if( obj._password != _password )
                {
                    return false;
                }
                if( obj._comPort != _comPort )
                {
                    return false;
                }
                if( obj._baudRate != _baudRate )
                {
                    return false;
                }
                if( obj._dataBits != _dataBits )
                {
                    return false;
                }
                if( obj._discardNull != _discardNull )
                {
                    return false;
                }
                if( obj._dtrEnable != _dtrEnable )
                {
                    return false;
                }
                if( obj._handshake != _handshake )
                {
                    return false;
                }
                if( obj._newLine != _newLine )
                {
                    return false;
                }
                if( obj._parity != _parity )
                {
                    return false;
                }
                if( obj._parityReplace != _parityReplace )
                {
                    return false;
                }
                if( obj._readBufferSize != _readBufferSize )
                {
                    return false;
                }
                if( obj._readTimeout != _readTimeout )
                {
                    return false;
                }
                if( obj._receivedBytesThreshold != _receivedBytesThreshold )
                {
                    return false;
                }
                if( obj._rtsEnable != _rtsEnable )
                {
                    return false;
                }
                if( obj._stopBits != _stopBits )
                {
                    return false;
                }
                if( obj._writeBufferSize != _writeBufferSize )
                {
                    return false;
                }
                if( obj._writeTimeout != _writeTimeout )
                {
                    return false;
                }
                if( obj._pairedComPort != _pairedComPort )
                {
                    return false;
                }
                return true;
            }
            return false;
        }

        public override bool IsOfType(Kind objectType)
        {
            if( objectType == Kind.LineInputDeviceConfiguration )
            {
                return true;
            }
            return base.IsOfType( objectType );
        }

        public long RowVersion
        {
            get => _rowVersion;
            set
            {
                if( _rowVersion != value )
                {
                    _rowVersion = value;
                    OnPropertyChanged( );
                }
            }
        }
        public Guid LineInputDevice
        {
            get => _lineInputDevice;
            set
            {
                if( _lineInputDevice != value )
                {
                    _lineInputDevice = value;
                    OnPropertyChanged( );
                }
            }
        }
        public DateTime Timestamp
        {
            get => _timestamp;
            set
            {
                if( _timestamp != value )
                {
                    _timestamp = value;
                    OnPropertyChanged( );
                }
            }
        }
        public bool StoreReceivedSentences
        {
            get => _storeReceivedSentences;
            set
            {
                if( _storeReceivedSentences != value )
                {
                    _storeReceivedSentences = value;
                    OnPropertyChanged( );
                }
            }
        }
        public bool StoreSentMessages
        {
            get => _storeSentMessages;
            set
            {
                if( _storeSentMessages != value )
                {
                    _storeSentMessages = value;
                    OnPropertyChanged( );
                }
            }
        }
        public bool StoreUnsentMessages
        {
            get => _storeUnsentMessages;
            set
            {
                if( _storeUnsentMessages != value )
                {
                    _storeUnsentMessages = value;
                    OnPropertyChanged( );
                }
            }
        }
        public bool NMEA
        {
            get => _nMEA;
            set
            {
                if( _nMEA != value )
                {
                    _nMEA = value;
                    OnPropertyChanged( );
                }
            }
        }
        public bool StrictNMEA
        {
            get => _strictNMEA;
            set
            {
                if( _strictNMEA != value )
                {
                    _strictNMEA = value;
                    OnPropertyChanged( );
                }
            }
        }
        public Types.LineInputDeviceConnectionType ConnectionType
        {
            get => _connectionType;
            set
            {
                if( _connectionType != value )
                {
                    _connectionType = value;
                    OnPropertyChanged( );
                }
            }
        }
        public int UdpReceivePort
        {
            get => _udpReceivePort;
            set
            {
                if( _udpReceivePort != value )
                {
                    _udpReceivePort = value;
                    OnPropertyChanged( );
                }
            }
        }
        public string UdpSendHostname
        {
            get => _udpSendHostname;
            set
            {
                if( _udpSendHostname != value )
                {
                    _udpSendHostname = value;
                    OnPropertyChanged( );
                }
            }
        }
        public int UdpSendPort
        {
            get => _udpSendPort;
            set
            {
                if( _udpSendPort != value )
                {
                    _udpSendPort = value;
                    OnPropertyChanged( );
                }
            }
        }
        public string TcpHostname
        {
            get => _tcpHostname;
            set
            {
                if( _tcpHostname != value )
                {
                    _tcpHostname = value;
                    OnPropertyChanged( );
                }
            }
        }
        public int TcpPort
        {
            get => _tcpPort;
            set
            {
                if( _tcpPort != value )
                {
                    _tcpPort = value;
                    OnPropertyChanged( );
                }
            }
        }
        public bool UseHttpLogin
        {
            get => _useHttpLogin;
            set
            {
                if( _useHttpLogin != value )
                {
                    _useHttpLogin = value;
                    OnPropertyChanged( );
                }
            }
        }
        public string LoginHostname
        {
            get => _loginHostname;
            set
            {
                if( _loginHostname != value )
                {
                    _loginHostname = value;
                    OnPropertyChanged( );
                }
            }
        }
        public int LoginPort
        {
            get => _loginPort;
            set
            {
                if( _loginPort != value )
                {
                    _loginPort = value;
                    OnPropertyChanged( );
                }
            }
        }
        public string UserName
        {
            get => _userName;
            set
            {
                if( _userName != value )
                {
                    _userName = value;
                    OnPropertyChanged( );
                }
            }
        }
        public string Password
        {
            get => _password;
            set
            {
                if( _password != value )
                {
                    _password = value;
                    OnPropertyChanged( );
                }
            }
        }
        public string ComPort
        {
            get => _comPort;
            set
            {
                if( _comPort != value )
                {
                    _comPort = value;
                    OnPropertyChanged( );
                }
            }
        }
        public int BaudRate
        {
            get => _baudRate;
            set
            {
                if( _baudRate != value )
                {
                    _baudRate = value;
                    OnPropertyChanged( );
                }
            }
        }
        public int DataBits
        {
            get => _dataBits;
            set
            {
                if( _dataBits != value )
                {
                    _dataBits = value;
                    OnPropertyChanged( );
                }
            }
        }
        public bool DiscardNull
        {
            get => _discardNull;
            set
            {
                if( _discardNull != value )
                {
                    _discardNull = value;
                    OnPropertyChanged( );
                }
            }
        }
        public bool DtrEnable
        {
            get => _dtrEnable;
            set
            {
                if( _dtrEnable != value )
                {
                    _dtrEnable = value;
                    OnPropertyChanged( );
                }
            }
        }
        public Types.Handshake Handshake
        {
            get => _handshake;
            set
            {
                if( _handshake != value )
                {
                    _handshake = value;
                    OnPropertyChanged( );
                }
            }
        }
        public string NewLine
        {
            get => _newLine;
            set
            {
                if( _newLine != value )
                {
                    _newLine = value;
                    OnPropertyChanged( );
                }
            }
        }
        public Types.Parity Parity
        {
            get => _parity;
            set
            {
                if( _parity != value )
                {
                    _parity = value;
                    OnPropertyChanged( );
                }
            }
        }
        public byte ParityReplace
        {
            get => _parityReplace;
            set
            {
                if( _parityReplace != value )
                {
                    _parityReplace = value;
                    OnPropertyChanged( );
                }
            }
        }
        public int ReadBufferSize
        {
            get => _readBufferSize;
            set
            {
                if( _readBufferSize != value )
                {
                    _readBufferSize = value;
                    OnPropertyChanged( );
                }
            }
        }
        public TimeSpan ReadTimeout
        {
            get => _readTimeout;
            set
            {
                if( _readTimeout != value )
                {
                    _readTimeout = value;
                    OnPropertyChanged( );
                }
            }
        }
        public int ReceivedBytesThreshold
        {
            get => _receivedBytesThreshold;
            set
            {
                if( _receivedBytesThreshold != value )
                {
                    _receivedBytesThreshold = value;
                    OnPropertyChanged( );
                }
            }
        }
        public bool RtsEnable
        {
            get => _rtsEnable;
            set
            {
                if( _rtsEnable != value )
                {
                    _rtsEnable = value;
                    OnPropertyChanged( );
                }
            }
        }
        public Types.StopBits StopBits
        {
            get => _stopBits;
            set
            {
                if( _stopBits != value )
                {
                    _stopBits = value;
                    OnPropertyChanged( );
                }
            }
        }
        public int WriteBufferSize
        {
            get => _writeBufferSize;
            set
            {
                if( _writeBufferSize != value )
                {
                    _writeBufferSize = value;
                    OnPropertyChanged( );
                }
            }
        }
        public TimeSpan WriteTimeout
        {
            get => _writeTimeout;
            set
            {
                if( _writeTimeout != value )
                {
                    _writeTimeout = value;
                    OnPropertyChanged( );
                }
            }
        }
        public string PairedComPort
        {
            get => _pairedComPort;
            set
            {
                if( _pairedComPort != value )
                {
                    _pairedComPort = value;
                    OnPropertyChanged( );
                }
            }
        }

        public override void WriteTo( [ DisallowNull ] BinaryWriter destination )
        {
            base.WriteTo( destination );
            destination.Write( _rowVersion );
            destination.Write( _lineInputDevice );
            destination.Write( _timestamp );
            destination.Write( _storeReceivedSentences );
            destination.Write( _storeSentMessages );
            destination.Write( _storeUnsentMessages );
            destination.Write( _nMEA );
            destination.Write( _strictNMEA );
            destination.Write( _connectionType );
            destination.Write( _udpReceivePort );
            destination.Write( _udpSendHostname );
            destination.Write( _udpSendPort );
            destination.Write( _tcpHostname );
            destination.Write( _tcpPort );
            destination.Write( _useHttpLogin );
            destination.Write( _loginHostname );
            destination.Write( _loginPort );
            destination.Write( _userName );
            destination.Write( _password );
            destination.Write( _comPort );
            destination.Write( _baudRate );
            destination.Write( _dataBits );
            destination.Write( _discardNull );
            destination.Write( _dtrEnable );
            destination.Write( _handshake );
            destination.Write( _newLine );
            destination.Write( _parity );
            destination.Write( _parityReplace );
            destination.Write( _readBufferSize );
            destination.Write( _readTimeout );
            destination.Write( _receivedBytesThreshold );
            destination.Write( _rtsEnable );
            destination.Write( _stopBits );
            destination.Write( _writeBufferSize );
            destination.Write( _writeTimeout );
            destination.Write( _pairedComPort );
        }

        public override void ReadFrom([DisallowNull] BinaryReader source)
        {
            base.ReadFrom( source );
            _rowVersion = source.ReadInt64( );
            _lineInputDevice = source.ReadGuid( );
            _timestamp = source.ReadDateTime( );
            _storeReceivedSentences = source.ReadBoolean( );
            _storeSentMessages = source.ReadBoolean( );
            _storeUnsentMessages = source.ReadBoolean( );
            _nMEA = source.ReadBoolean( );
            _strictNMEA = source.ReadBoolean( );
            _connectionType = source.ReadEnum<Types.LineInputDeviceConnectionType>( );
            _udpReceivePort = source.ReadInt32( );
            _udpSendHostname = source.ReadString( );
            _udpSendPort = source.ReadInt32( );
            _tcpHostname = source.ReadString( );
            _tcpPort = source.ReadInt32( );
            _useHttpLogin = source.ReadBoolean( );
            _loginHostname = source.ReadString( );
            _loginPort = source.ReadInt32( );
            _userName = source.ReadString( );
            _password = source.ReadString( );
            _comPort = source.ReadString( );
            _baudRate = source.ReadInt32( );
            _dataBits = source.ReadInt32( );
            _discardNull = source.ReadBoolean( );
            _dtrEnable = source.ReadBoolean( );
            _handshake = source.ReadEnum<Types.Handshake>( );
            _newLine = source.ReadString( );
            _parity = source.ReadEnum<Types.Parity>( );
            _parityReplace = source.ReadByte( );
            _readBufferSize = source.ReadInt32( );
            _readTimeout = source.ReadTimeSpan( );
            _receivedBytesThreshold = source.ReadInt32( );
            _rtsEnable = source.ReadBoolean( );
            _stopBits = source.ReadEnum<Types.StopBits>( );
            _writeBufferSize = source.ReadInt32( );
            _writeTimeout = source.ReadTimeSpan( );
            _pairedComPort = source.ReadString( );
        }

    }
    public class LineInputMessageRoutingObject : BaseDataGuid<Kind>
    {
        long _rowVersion = 0;
        Guid _lineInputDevice;
        string _type = string.Empty;
        public LineInputMessageRoutingObject( )
        {
        }

        public LineInputMessageRoutingObject( ObjectState objectState, Guid id, long rowVersion, Guid lineInputDevice, string type )
            : base( objectState, id )
        {
            _rowVersion = rowVersion;
            _lineInputDevice = lineInputDevice;
            _type = type;
        }

        public override Kind GetObjectType()
        {
            return Kind.LineInputMessageRouting;
        }

        public override BaseData<Kind> Create()
        {
            return new LineInputMessageRoutingObject( );
        }

        public override void AssignTo( BaseData<Kind> target )
        {
            base.AssignTo( target );
            var destination = ( LineInputMessageRoutingObject )target;
            destination._rowVersion = _rowVersion;
            destination._lineInputDevice = _lineInputDevice;
            destination._type = _type;
        }

        public override bool Equals(BaseData<Kind>? other)
        {
            if (base.Equals(other))
            {
                var obj = ( LineInputMessageRoutingObject )other;
                if( obj._rowVersion != _rowVersion )
                {
                    return false;
                }
                if( obj._lineInputDevice != _lineInputDevice )
                {
                    return false;
                }
                if( obj._type != _type )
                {
                    return false;
                }
                return true;
            }
            return false;
        }

        public override bool IsOfType(Kind objectType)
        {
            if( objectType == Kind.LineInputMessageRouting )
            {
                return true;
            }
            return base.IsOfType( objectType );
        }

        public long RowVersion
        {
            get => _rowVersion;
            set
            {
                if( _rowVersion != value )
                {
                    _rowVersion = value;
                    OnPropertyChanged( );
                }
            }
        }
        public Guid LineInputDevice
        {
            get => _lineInputDevice;
            set
            {
                if( _lineInputDevice != value )
                {
                    _lineInputDevice = value;
                    OnPropertyChanged( );
                }
            }
        }
        public string Type
        {
            get => _type;
            set
            {
                if( _type != value )
                {
                    _type = value;
                    OnPropertyChanged( );
                }
            }
        }

        public override void WriteTo( [ DisallowNull ] BinaryWriter destination )
        {
            base.WriteTo( destination );
            destination.Write( _rowVersion );
            destination.Write( _lineInputDevice );
            destination.Write( _type );
        }

        public override void ReadFrom([DisallowNull] BinaryReader source)
        {
            base.ReadFrom( source );
            _rowVersion = source.ReadInt64( );
            _lineInputDevice = source.ReadGuid( );
            _type = source.ReadString( );
        }

    }
    public class LineInputMessageRoutingDestinationObject : BaseDataGuid<Kind>
    {
        long _rowVersion = 0;
        Guid _routing;
        Guid _listener;
        public LineInputMessageRoutingDestinationObject( )
        {
        }

        public LineInputMessageRoutingDestinationObject( ObjectState objectState, Guid id, long rowVersion, Guid routing, Guid listener )
            : base( objectState, id )
        {
            _rowVersion = rowVersion;
            _routing = routing;
            _listener = listener;
        }

        public override Kind GetObjectType()
        {
            return Kind.LineInputMessageRoutingDestination;
        }

        public override BaseData<Kind> Create()
        {
            return new LineInputMessageRoutingDestinationObject( );
        }

        public override void AssignTo( BaseData<Kind> target )
        {
            base.AssignTo( target );
            var destination = ( LineInputMessageRoutingDestinationObject )target;
            destination._rowVersion = _rowVersion;
            destination._routing = _routing;
            destination._listener = _listener;
        }

        public override bool Equals(BaseData<Kind>? other)
        {
            if (base.Equals(other))
            {
                var obj = ( LineInputMessageRoutingDestinationObject )other;
                if( obj._rowVersion != _rowVersion )
                {
                    return false;
                }
                if( obj._routing != _routing )
                {
                    return false;
                }
                if( obj._listener != _listener )
                {
                    return false;
                }
                return true;
            }
            return false;
        }

        public override bool IsOfType(Kind objectType)
        {
            if( objectType == Kind.LineInputMessageRoutingDestination )
            {
                return true;
            }
            return base.IsOfType( objectType );
        }

        public long RowVersion
        {
            get => _rowVersion;
            set
            {
                if( _rowVersion != value )
                {
                    _rowVersion = value;
                    OnPropertyChanged( );
                }
            }
        }
        public Guid Routing
        {
            get => _routing;
            set
            {
                if( _routing != value )
                {
                    _routing = value;
                    OnPropertyChanged( );
                }
            }
        }
        public Guid Listener
        {
            get => _listener;
            set
            {
                if( _listener != value )
                {
                    _listener = value;
                    OnPropertyChanged( );
                }
            }
        }

        public override void WriteTo( [ DisallowNull ] BinaryWriter destination )
        {
            base.WriteTo( destination );
            destination.Write( _rowVersion );
            destination.Write( _routing );
            destination.Write( _listener );
        }

        public override void ReadFrom([DisallowNull] BinaryReader source)
        {
            base.ReadFrom( source );
            _rowVersion = source.ReadInt64( );
            _routing = source.ReadGuid( );
            _listener = source.ReadGuid( );
        }

    }
    public class LineInputWhiteListEntryObject : BaseDataGuid<Kind>
    {
        long _rowVersion = 0;
        Guid _lineInputDevice;
        string _hostName = string.Empty;
        int _port = 0;
        public LineInputWhiteListEntryObject( )
        {
        }

        public LineInputWhiteListEntryObject( ObjectState objectState, Guid id, long rowVersion, Guid lineInputDevice, string hostName, int port )
            : base( objectState, id )
        {
            _rowVersion = rowVersion;
            _lineInputDevice = lineInputDevice;
            _hostName = hostName;
            _port = port;
        }

        public override Kind GetObjectType()
        {
            return Kind.LineInputWhiteListEntry;
        }

        public override BaseData<Kind> Create()
        {
            return new LineInputWhiteListEntryObject( );
        }

        public override void AssignTo( BaseData<Kind> target )
        {
            base.AssignTo( target );
            var destination = ( LineInputWhiteListEntryObject )target;
            destination._rowVersion = _rowVersion;
            destination._lineInputDevice = _lineInputDevice;
            destination._hostName = _hostName;
            destination._port = _port;
        }

        public override bool Equals(BaseData<Kind>? other)
        {
            if (base.Equals(other))
            {
                var obj = ( LineInputWhiteListEntryObject )other;
                if( obj._rowVersion != _rowVersion )
                {
                    return false;
                }
                if( obj._lineInputDevice != _lineInputDevice )
                {
                    return false;
                }
                if( obj._hostName != _hostName )
                {
                    return false;
                }
                if( obj._port != _port )
                {
                    return false;
                }
                return true;
            }
            return false;
        }

        public override bool IsOfType(Kind objectType)
        {
            if( objectType == Kind.LineInputWhiteListEntry )
            {
                return true;
            }
            return base.IsOfType( objectType );
        }

        public long RowVersion
        {
            get => _rowVersion;
            set
            {
                if( _rowVersion != value )
                {
                    _rowVersion = value;
                    OnPropertyChanged( );
                }
            }
        }
        public Guid LineInputDevice
        {
            get => _lineInputDevice;
            set
            {
                if( _lineInputDevice != value )
                {
                    _lineInputDevice = value;
                    OnPropertyChanged( );
                }
            }
        }
        public string HostName
        {
            get => _hostName;
            set
            {
                if( _hostName != value )
                {
                    _hostName = value;
                    OnPropertyChanged( );
                }
            }
        }
        public int Port
        {
            get => _port;
            set
            {
                if( _port != value )
                {
                    _port = value;
                    OnPropertyChanged( );
                }
            }
        }

        public override void WriteTo( [ DisallowNull ] BinaryWriter destination )
        {
            base.WriteTo( destination );
            destination.Write( _rowVersion );
            destination.Write( _lineInputDevice );
            destination.Write( _hostName );
            destination.Write( _port );
        }

        public override void ReadFrom([DisallowNull] BinaryReader source)
        {
            base.ReadFrom( source );
            _rowVersion = source.ReadInt64( );
            _lineInputDevice = source.ReadGuid( );
            _hostName = source.ReadString( );
            _port = source.ReadInt32( );
        }

    }
    public class LogApplicationObject : BaseDataGuid<Kind>
    {
        long _rowVersion = 0;
        string _name = string.Empty;
        string _description = string.Empty;
        public LogApplicationObject( )
        {
        }

        public LogApplicationObject( ObjectState objectState, Guid id, long rowVersion, string name, string description )
            : base( objectState, id )
        {
            _rowVersion = rowVersion;
            _name = name;
            _description = description;
        }

        public override Kind GetObjectType()
        {
            return Kind.LogApplication;
        }

        public override BaseData<Kind> Create()
        {
            return new LogApplicationObject( );
        }

        public override void AssignTo( BaseData<Kind> target )
        {
            base.AssignTo( target );
            var destination = ( LogApplicationObject )target;
            destination._rowVersion = _rowVersion;
            destination._name = _name;
            destination._description = _description;
        }

        public override bool Equals(BaseData<Kind>? other)
        {
            if (base.Equals(other))
            {
                var obj = ( LogApplicationObject )other;
                if( obj._rowVersion != _rowVersion )
                {
                    return false;
                }
                if( obj._name != _name )
                {
                    return false;
                }
                if( obj._description != _description )
                {
                    return false;
                }
                return true;
            }
            return false;
        }

        public override bool IsOfType(Kind objectType)
        {
            if( objectType == Kind.LogApplication )
            {
                return true;
            }
            return base.IsOfType( objectType );
        }

        public long RowVersion
        {
            get => _rowVersion;
            set
            {
                if( _rowVersion != value )
                {
                    _rowVersion = value;
                    OnPropertyChanged( );
                }
            }
        }
        public string Name
        {
            get => _name;
            set
            {
                if( _name != value )
                {
                    _name = value;
                    OnPropertyChanged( );
                }
            }
        }
        public string Description
        {
            get => _description;
            set
            {
                if( _description != value )
                {
                    _description = value;
                    OnPropertyChanged( );
                }
            }
        }

        public override void WriteTo( [ DisallowNull ] BinaryWriter destination )
        {
            base.WriteTo( destination );
            destination.Write( _rowVersion );
            destination.Write( _name );
            destination.Write( _description );
        }

        public override void ReadFrom([DisallowNull] BinaryReader source)
        {
            base.ReadFrom( source );
            _rowVersion = source.ReadInt64( );
            _name = source.ReadString( );
            _description = source.ReadString( );
        }

    }
    public class LogApplicationConfigurationObject : BaseDataGuid<Kind>
    {
        long _rowVersion = 0;
        Guid _application;
        DateTime _timestamp;
        bool _finest = false;
        bool _finer = false;
        bool _fine = false;
        bool _info = false;
        bool _notice = false;
        bool _warn = false;
        bool _error = false;
        bool _severe = false;
        bool _critical = false;
        bool _alert = false;
        bool _fatal = false;
        bool _emergency = false;
        public LogApplicationConfigurationObject( )
        {
        }

        public LogApplicationConfigurationObject( ObjectState objectState, Guid id, long rowVersion, Guid application, DateTime timestamp, bool finest, bool finer, bool fine, bool info, bool notice, bool warn, bool error, bool severe, bool critical, bool alert, bool fatal, bool emergency )
            : base( objectState, id )
        {
            _rowVersion = rowVersion;
            _application = application;
            _timestamp = timestamp;
            _finest = finest;
            _finer = finer;
            _fine = fine;
            _info = info;
            _notice = notice;
            _warn = warn;
            _error = error;
            _severe = severe;
            _critical = critical;
            _alert = alert;
            _fatal = fatal;
            _emergency = emergency;
        }

        public override Kind GetObjectType()
        {
            return Kind.LogApplicationConfiguration;
        }

        public override BaseData<Kind> Create()
        {
            return new LogApplicationConfigurationObject( );
        }

        public override void AssignTo( BaseData<Kind> target )
        {
            base.AssignTo( target );
            var destination = ( LogApplicationConfigurationObject )target;
            destination._rowVersion = _rowVersion;
            destination._application = _application;
            destination._timestamp = _timestamp;
            destination._finest = _finest;
            destination._finer = _finer;
            destination._fine = _fine;
            destination._info = _info;
            destination._notice = _notice;
            destination._warn = _warn;
            destination._error = _error;
            destination._severe = _severe;
            destination._critical = _critical;
            destination._alert = _alert;
            destination._fatal = _fatal;
            destination._emergency = _emergency;
        }

        public override bool Equals(BaseData<Kind>? other)
        {
            if (base.Equals(other))
            {
                var obj = ( LogApplicationConfigurationObject )other;
                if( obj._rowVersion != _rowVersion )
                {
                    return false;
                }
                if( obj._application != _application )
                {
                    return false;
                }
                if( obj._timestamp != _timestamp )
                {
                    return false;
                }
                if( obj._finest != _finest )
                {
                    return false;
                }
                if( obj._finer != _finer )
                {
                    return false;
                }
                if( obj._fine != _fine )
                {
                    return false;
                }
                if( obj._info != _info )
                {
                    return false;
                }
                if( obj._notice != _notice )
                {
                    return false;
                }
                if( obj._warn != _warn )
                {
                    return false;
                }
                if( obj._error != _error )
                {
                    return false;
                }
                if( obj._severe != _severe )
                {
                    return false;
                }
                if( obj._critical != _critical )
                {
                    return false;
                }
                if( obj._alert != _alert )
                {
                    return false;
                }
                if( obj._fatal != _fatal )
                {
                    return false;
                }
                if( obj._emergency != _emergency )
                {
                    return false;
                }
                return true;
            }
            return false;
        }

        public override bool IsOfType(Kind objectType)
        {
            if( objectType == Kind.LogApplicationConfiguration )
            {
                return true;
            }
            return base.IsOfType( objectType );
        }

        public long RowVersion
        {
            get => _rowVersion;
            set
            {
                if( _rowVersion != value )
                {
                    _rowVersion = value;
                    OnPropertyChanged( );
                }
            }
        }
        public Guid Application
        {
            get => _application;
            set
            {
                if( _application != value )
                {
                    _application = value;
                    OnPropertyChanged( );
                }
            }
        }
        public DateTime Timestamp
        {
            get => _timestamp;
            set
            {
                if( _timestamp != value )
                {
                    _timestamp = value;
                    OnPropertyChanged( );
                }
            }
        }
        public bool Finest
        {
            get => _finest;
            set
            {
                if( _finest != value )
                {
                    _finest = value;
                    OnPropertyChanged( );
                }
            }
        }
        public bool Finer
        {
            get => _finer;
            set
            {
                if( _finer != value )
                {
                    _finer = value;
                    OnPropertyChanged( );
                }
            }
        }
        public bool Fine
        {
            get => _fine;
            set
            {
                if( _fine != value )
                {
                    _fine = value;
                    OnPropertyChanged( );
                }
            }
        }
        public bool Info
        {
            get => _info;
            set
            {
                if( _info != value )
                {
                    _info = value;
                    OnPropertyChanged( );
                }
            }
        }
        public bool Notice
        {
            get => _notice;
            set
            {
                if( _notice != value )
                {
                    _notice = value;
                    OnPropertyChanged( );
                }
            }
        }
        public bool Warn
        {
            get => _warn;
            set
            {
                if( _warn != value )
                {
                    _warn = value;
                    OnPropertyChanged( );
                }
            }
        }
        public bool Error
        {
            get => _error;
            set
            {
                if( _error != value )
                {
                    _error = value;
                    OnPropertyChanged( );
                }
            }
        }
        public bool Severe
        {
            get => _severe;
            set
            {
                if( _severe != value )
                {
                    _severe = value;
                    OnPropertyChanged( );
                }
            }
        }
        public bool Critical
        {
            get => _critical;
            set
            {
                if( _critical != value )
                {
                    _critical = value;
                    OnPropertyChanged( );
                }
            }
        }
        public bool Alert
        {
            get => _alert;
            set
            {
                if( _alert != value )
                {
                    _alert = value;
                    OnPropertyChanged( );
                }
            }
        }
        public bool Fatal
        {
            get => _fatal;
            set
            {
                if( _fatal != value )
                {
                    _fatal = value;
                    OnPropertyChanged( );
                }
            }
        }
        public bool Emergency
        {
            get => _emergency;
            set
            {
                if( _emergency != value )
                {
                    _emergency = value;
                    OnPropertyChanged( );
                }
            }
        }

        public override void WriteTo( [ DisallowNull ] BinaryWriter destination )
        {
            base.WriteTo( destination );
            destination.Write( _rowVersion );
            destination.Write( _application );
            destination.Write( _timestamp );
            destination.Write( _finest );
            destination.Write( _finer );
            destination.Write( _fine );
            destination.Write( _info );
            destination.Write( _notice );
            destination.Write( _warn );
            destination.Write( _error );
            destination.Write( _severe );
            destination.Write( _critical );
            destination.Write( _alert );
            destination.Write( _fatal );
            destination.Write( _emergency );
        }

        public override void ReadFrom([DisallowNull] BinaryReader source)
        {
            base.ReadFrom( source );
            _rowVersion = source.ReadInt64( );
            _application = source.ReadGuid( );
            _timestamp = source.ReadDateTime( );
            _finest = source.ReadBoolean( );
            _finer = source.ReadBoolean( );
            _fine = source.ReadBoolean( );
            _info = source.ReadBoolean( );
            _notice = source.ReadBoolean( );
            _warn = source.ReadBoolean( );
            _error = source.ReadBoolean( );
            _severe = source.ReadBoolean( );
            _critical = source.ReadBoolean( );
            _alert = source.ReadBoolean( );
            _fatal = source.ReadBoolean( );
            _emergency = source.ReadBoolean( );
        }

    }
    public class LogHostObject : BaseDataGuid<Kind>
    {
        long _rowVersion = 0;
        string _computerName = string.Empty;
        string _description = string.Empty;
        public LogHostObject( )
        {
        }

        public LogHostObject( ObjectState objectState, Guid id, long rowVersion, string computerName, string description )
            : base( objectState, id )
        {
            _rowVersion = rowVersion;
            _computerName = computerName;
            _description = description;
        }

        public override Kind GetObjectType()
        {
            return Kind.LogHost;
        }

        public override BaseData<Kind> Create()
        {
            return new LogHostObject( );
        }

        public override void AssignTo( BaseData<Kind> target )
        {
            base.AssignTo( target );
            var destination = ( LogHostObject )target;
            destination._rowVersion = _rowVersion;
            destination._computerName = _computerName;
            destination._description = _description;
        }

        public override bool Equals(BaseData<Kind>? other)
        {
            if (base.Equals(other))
            {
                var obj = ( LogHostObject )other;
                if( obj._rowVersion != _rowVersion )
                {
                    return false;
                }
                if( obj._computerName != _computerName )
                {
                    return false;
                }
                if( obj._description != _description )
                {
                    return false;
                }
                return true;
            }
            return false;
        }

        public override bool IsOfType(Kind objectType)
        {
            if( objectType == Kind.LogHost )
            {
                return true;
            }
            return base.IsOfType( objectType );
        }

        public long RowVersion
        {
            get => _rowVersion;
            set
            {
                if( _rowVersion != value )
                {
                    _rowVersion = value;
                    OnPropertyChanged( );
                }
            }
        }
        public string ComputerName
        {
            get => _computerName;
            set
            {
                if( _computerName != value )
                {
                    _computerName = value;
                    OnPropertyChanged( );
                }
            }
        }
        public string Description
        {
            get => _description;
            set
            {
                if( _description != value )
                {
                    _description = value;
                    OnPropertyChanged( );
                }
            }
        }

        public override void WriteTo( [ DisallowNull ] BinaryWriter destination )
        {
            base.WriteTo( destination );
            destination.Write( _rowVersion );
            destination.Write( _computerName );
            destination.Write( _description );
        }

        public override void ReadFrom([DisallowNull] BinaryReader source)
        {
            base.ReadFrom( source );
            _rowVersion = source.ReadInt64( );
            _computerName = source.ReadString( );
            _description = source.ReadString( );
        }

    }
    public class LogHostConfigurationObject : BaseDataGuid<Kind>
    {
        long _rowVersion = 0;
        Guid _host;
        DateTime _timestamp;
        bool _finest = false;
        bool _finer = false;
        bool _fine = false;
        bool _info = false;
        bool _notice = false;
        bool _warn = false;
        bool _error = false;
        bool _severe = false;
        bool _critical = false;
        bool _alert = false;
        bool _fatal = false;
        bool _emergency = false;
        public LogHostConfigurationObject( )
        {
        }

        public LogHostConfigurationObject( ObjectState objectState, Guid id, long rowVersion, Guid host, DateTime timestamp, bool finest, bool finer, bool fine, bool info, bool notice, bool warn, bool error, bool severe, bool critical, bool alert, bool fatal, bool emergency )
            : base( objectState, id )
        {
            _rowVersion = rowVersion;
            _host = host;
            _timestamp = timestamp;
            _finest = finest;
            _finer = finer;
            _fine = fine;
            _info = info;
            _notice = notice;
            _warn = warn;
            _error = error;
            _severe = severe;
            _critical = critical;
            _alert = alert;
            _fatal = fatal;
            _emergency = emergency;
        }

        public override Kind GetObjectType()
        {
            return Kind.LogHostConfiguration;
        }

        public override BaseData<Kind> Create()
        {
            return new LogHostConfigurationObject( );
        }

        public override void AssignTo( BaseData<Kind> target )
        {
            base.AssignTo( target );
            var destination = ( LogHostConfigurationObject )target;
            destination._rowVersion = _rowVersion;
            destination._host = _host;
            destination._timestamp = _timestamp;
            destination._finest = _finest;
            destination._finer = _finer;
            destination._fine = _fine;
            destination._info = _info;
            destination._notice = _notice;
            destination._warn = _warn;
            destination._error = _error;
            destination._severe = _severe;
            destination._critical = _critical;
            destination._alert = _alert;
            destination._fatal = _fatal;
            destination._emergency = _emergency;
        }

        public override bool Equals(BaseData<Kind>? other)
        {
            if (base.Equals(other))
            {
                var obj = ( LogHostConfigurationObject )other;
                if( obj._rowVersion != _rowVersion )
                {
                    return false;
                }
                if( obj._host != _host )
                {
                    return false;
                }
                if( obj._timestamp != _timestamp )
                {
                    return false;
                }
                if( obj._finest != _finest )
                {
                    return false;
                }
                if( obj._finer != _finer )
                {
                    return false;
                }
                if( obj._fine != _fine )
                {
                    return false;
                }
                if( obj._info != _info )
                {
                    return false;
                }
                if( obj._notice != _notice )
                {
                    return false;
                }
                if( obj._warn != _warn )
                {
                    return false;
                }
                if( obj._error != _error )
                {
                    return false;
                }
                if( obj._severe != _severe )
                {
                    return false;
                }
                if( obj._critical != _critical )
                {
                    return false;
                }
                if( obj._alert != _alert )
                {
                    return false;
                }
                if( obj._fatal != _fatal )
                {
                    return false;
                }
                if( obj._emergency != _emergency )
                {
                    return false;
                }
                return true;
            }
            return false;
        }

        public override bool IsOfType(Kind objectType)
        {
            if( objectType == Kind.LogHostConfiguration )
            {
                return true;
            }
            return base.IsOfType( objectType );
        }

        public long RowVersion
        {
            get => _rowVersion;
            set
            {
                if( _rowVersion != value )
                {
                    _rowVersion = value;
                    OnPropertyChanged( );
                }
            }
        }
        public Guid Host
        {
            get => _host;
            set
            {
                if( _host != value )
                {
                    _host = value;
                    OnPropertyChanged( );
                }
            }
        }
        public DateTime Timestamp
        {
            get => _timestamp;
            set
            {
                if( _timestamp != value )
                {
                    _timestamp = value;
                    OnPropertyChanged( );
                }
            }
        }
        public bool Finest
        {
            get => _finest;
            set
            {
                if( _finest != value )
                {
                    _finest = value;
                    OnPropertyChanged( );
                }
            }
        }
        public bool Finer
        {
            get => _finer;
            set
            {
                if( _finer != value )
                {
                    _finer = value;
                    OnPropertyChanged( );
                }
            }
        }
        public bool Fine
        {
            get => _fine;
            set
            {
                if( _fine != value )
                {
                    _fine = value;
                    OnPropertyChanged( );
                }
            }
        }
        public bool Info
        {
            get => _info;
            set
            {
                if( _info != value )
                {
                    _info = value;
                    OnPropertyChanged( );
                }
            }
        }
        public bool Notice
        {
            get => _notice;
            set
            {
                if( _notice != value )
                {
                    _notice = value;
                    OnPropertyChanged( );
                }
            }
        }
        public bool Warn
        {
            get => _warn;
            set
            {
                if( _warn != value )
                {
                    _warn = value;
                    OnPropertyChanged( );
                }
            }
        }
        public bool Error
        {
            get => _error;
            set
            {
                if( _error != value )
                {
                    _error = value;
                    OnPropertyChanged( );
                }
            }
        }
        public bool Severe
        {
            get => _severe;
            set
            {
                if( _severe != value )
                {
                    _severe = value;
                    OnPropertyChanged( );
                }
            }
        }
        public bool Critical
        {
            get => _critical;
            set
            {
                if( _critical != value )
                {
                    _critical = value;
                    OnPropertyChanged( );
                }
            }
        }
        public bool Alert
        {
            get => _alert;
            set
            {
                if( _alert != value )
                {
                    _alert = value;
                    OnPropertyChanged( );
                }
            }
        }
        public bool Fatal
        {
            get => _fatal;
            set
            {
                if( _fatal != value )
                {
                    _fatal = value;
                    OnPropertyChanged( );
                }
            }
        }
        public bool Emergency
        {
            get => _emergency;
            set
            {
                if( _emergency != value )
                {
                    _emergency = value;
                    OnPropertyChanged( );
                }
            }
        }

        public override void WriteTo( [ DisallowNull ] BinaryWriter destination )
        {
            base.WriteTo( destination );
            destination.Write( _rowVersion );
            destination.Write( _host );
            destination.Write( _timestamp );
            destination.Write( _finest );
            destination.Write( _finer );
            destination.Write( _fine );
            destination.Write( _info );
            destination.Write( _notice );
            destination.Write( _warn );
            destination.Write( _error );
            destination.Write( _severe );
            destination.Write( _critical );
            destination.Write( _alert );
            destination.Write( _fatal );
            destination.Write( _emergency );
        }

        public override void ReadFrom([DisallowNull] BinaryReader source)
        {
            base.ReadFrom( source );
            _rowVersion = source.ReadInt64( );
            _host = source.ReadGuid( );
            _timestamp = source.ReadDateTime( );
            _finest = source.ReadBoolean( );
            _finer = source.ReadBoolean( );
            _fine = source.ReadBoolean( );
            _info = source.ReadBoolean( );
            _notice = source.ReadBoolean( );
            _warn = source.ReadBoolean( );
            _error = source.ReadBoolean( );
            _severe = source.ReadBoolean( );
            _critical = source.ReadBoolean( );
            _alert = source.ReadBoolean( );
            _fatal = source.ReadBoolean( );
            _emergency = source.ReadBoolean( );
        }

    }
    public class LogLocationObject : BaseDataGuid<Kind>
    {
        long _rowVersion = 0;
        string _fileName = string.Empty;
        int _lineNumber = 0;
        string _namespace = string.Empty;
        string _className = string.Empty;
        string _methodName = string.Empty;
        public LogLocationObject( )
        {
        }

        public LogLocationObject( ObjectState objectState, Guid id, long rowVersion, string fileName, int lineNumber, string namespace__, string className, string methodName )
            : base( objectState, id )
        {
            _rowVersion = rowVersion;
            _fileName = fileName;
            _lineNumber = lineNumber;
            _namespace = namespace__;
            _className = className;
            _methodName = methodName;
        }

        public override Kind GetObjectType()
        {
            return Kind.LogLocation;
        }

        public override BaseData<Kind> Create()
        {
            return new LogLocationObject( );
        }

        public override void AssignTo( BaseData<Kind> target )
        {
            base.AssignTo( target );
            var destination = ( LogLocationObject )target;
            destination._rowVersion = _rowVersion;
            destination._fileName = _fileName;
            destination._lineNumber = _lineNumber;
            destination._namespace = _namespace;
            destination._className = _className;
            destination._methodName = _methodName;
        }

        public override bool Equals(BaseData<Kind>? other)
        {
            if (base.Equals(other))
            {
                var obj = ( LogLocationObject )other;
                if( obj._rowVersion != _rowVersion )
                {
                    return false;
                }
                if( obj._fileName != _fileName )
                {
                    return false;
                }
                if( obj._lineNumber != _lineNumber )
                {
                    return false;
                }
                if( obj._namespace != _namespace )
                {
                    return false;
                }
                if( obj._className != _className )
                {
                    return false;
                }
                if( obj._methodName != _methodName )
                {
                    return false;
                }
                return true;
            }
            return false;
        }

        public override bool IsOfType(Kind objectType)
        {
            if( objectType == Kind.LogLocation )
            {
                return true;
            }
            return base.IsOfType( objectType );
        }

        public long RowVersion
        {
            get => _rowVersion;
            set
            {
                if( _rowVersion != value )
                {
                    _rowVersion = value;
                    OnPropertyChanged( );
                }
            }
        }
        public string FileName
        {
            get => _fileName;
            set
            {
                if( _fileName != value )
                {
                    _fileName = value;
                    OnPropertyChanged( );
                }
            }
        }
        public int LineNumber
        {
            get => _lineNumber;
            set
            {
                if( _lineNumber != value )
                {
                    _lineNumber = value;
                    OnPropertyChanged( );
                }
            }
        }
        public string Namespace
        {
            get => _namespace;
            set
            {
                if( _namespace != value )
                {
                    _namespace = value;
                    OnPropertyChanged( );
                }
            }
        }
        public string ClassName
        {
            get => _className;
            set
            {
                if( _className != value )
                {
                    _className = value;
                    OnPropertyChanged( );
                }
            }
        }
        public string MethodName
        {
            get => _methodName;
            set
            {
                if( _methodName != value )
                {
                    _methodName = value;
                    OnPropertyChanged( );
                }
            }
        }

        public override void WriteTo( [ DisallowNull ] BinaryWriter destination )
        {
            base.WriteTo( destination );
            destination.Write( _rowVersion );
            destination.Write( _fileName );
            destination.Write( _lineNumber );
            destination.Write( _namespace );
            destination.Write( _className );
            destination.Write( _methodName );
        }

        public override void ReadFrom([DisallowNull] BinaryReader source)
        {
            base.ReadFrom( source );
            _rowVersion = source.ReadInt64( );
            _fileName = source.ReadString( );
            _lineNumber = source.ReadInt32( );
            _namespace = source.ReadString( );
            _className = source.ReadString( );
            _methodName = source.ReadString( );
        }

    }
    public class LogProcessObject : BaseDataGuid<Kind>
    {
        long _rowVersion = 0;
        Guid _application;
        Guid _host;
        DateTime _started;
        DateTime? _stopped;
        long _processId = 0;
        string _path = string.Empty;
        string _identity = string.Empty;
        public LogProcessObject( )
        {
        }

        public LogProcessObject( ObjectState objectState, Guid id, long rowVersion, Guid application, Guid host, DateTime started, DateTime? stopped, long processId, string path, string identity )
            : base( objectState, id )
        {
            _rowVersion = rowVersion;
            _application = application;
            _host = host;
            _started = started;
            _stopped = stopped;
            _processId = processId;
            _path = path;
            _identity = identity;
        }

        public override Kind GetObjectType()
        {
            return Kind.LogProcess;
        }

        public override BaseData<Kind> Create()
        {
            return new LogProcessObject( );
        }

        public override void AssignTo( BaseData<Kind> target )
        {
            base.AssignTo( target );
            var destination = ( LogProcessObject )target;
            destination._rowVersion = _rowVersion;
            destination._application = _application;
            destination._host = _host;
            destination._started = _started;
            destination._stopped = _stopped;
            destination._processId = _processId;
            destination._path = _path;
            destination._identity = _identity;
        }

        public override bool Equals(BaseData<Kind>? other)
        {
            if (base.Equals(other))
            {
                var obj = ( LogProcessObject )other;
                if( obj._rowVersion != _rowVersion )
                {
                    return false;
                }
                if( obj._application != _application )
                {
                    return false;
                }
                if( obj._host != _host )
                {
                    return false;
                }
                if( obj._started != _started )
                {
                    return false;
                }
                if( obj._stopped != _stopped )
                {
                    return false;
                }
                if( obj._processId != _processId )
                {
                    return false;
                }
                if( obj._path != _path )
                {
                    return false;
                }
                if( obj._identity != _identity )
                {
                    return false;
                }
                return true;
            }
            return false;
        }

        public override bool IsOfType(Kind objectType)
        {
            if( objectType == Kind.LogProcess )
            {
                return true;
            }
            return base.IsOfType( objectType );
        }

        public long RowVersion
        {
            get => _rowVersion;
            set
            {
                if( _rowVersion != value )
                {
                    _rowVersion = value;
                    OnPropertyChanged( );
                }
            }
        }
        public Guid Application
        {
            get => _application;
            set
            {
                if( _application != value )
                {
                    _application = value;
                    OnPropertyChanged( );
                }
            }
        }
        public Guid Host
        {
            get => _host;
            set
            {
                if( _host != value )
                {
                    _host = value;
                    OnPropertyChanged( );
                }
            }
        }
        public DateTime Started
        {
            get => _started;
            set
            {
                if( _started != value )
                {
                    _started = value;
                    OnPropertyChanged( );
                }
            }
        }
        public DateTime? Stopped
        {
            get => _stopped;
            set
            {
                if( _stopped != value )
                {
                    _stopped = value;
                    OnPropertyChanged( );
                }
            }
        }
        public long ProcessId
        {
            get => _processId;
            set
            {
                if( _processId != value )
                {
                    _processId = value;
                    OnPropertyChanged( );
                }
            }
        }
        public string Path
        {
            get => _path;
            set
            {
                if( _path != value )
                {
                    _path = value;
                    OnPropertyChanged( );
                }
            }
        }
        public string Identity
        {
            get => _identity;
            set
            {
                if( _identity != value )
                {
                    _identity = value;
                    OnPropertyChanged( );
                }
            }
        }

        public override void WriteTo( [ DisallowNull ] BinaryWriter destination )
        {
            base.WriteTo( destination );
            destination.Write( _rowVersion );
            destination.Write( _application );
            destination.Write( _host );
            destination.Write( _started );
            destination.Write( _stopped );
            destination.Write( _processId );
            destination.Write( _path );
            destination.Write( _identity );
        }

        public override void ReadFrom([DisallowNull] BinaryReader source)
        {
            base.ReadFrom( source );
            _rowVersion = source.ReadInt64( );
            _application = source.ReadGuid( );
            _host = source.ReadGuid( );
            _started = source.ReadDateTime( );
            _stopped = source.ReadNullableDateTime( );
            _processId = source.ReadInt64( );
            _path = source.ReadString( );
            _identity = source.ReadString( );
        }

    }
    public class LogRecordObject : BaseDataGuid<Kind>
    {
        long _rowVersion = 0;
        Guid _thread;
        long _sequenceNumber = 0;
        Types.LogLevel _level = Types.LogLevel.Unknown;
        DateTime _timestamp;
        int _depth = 0;
        Guid _location;
        string _message = string.Empty;
        string _exceptionString = string.Empty;
        byte[] _propertiesData = Array.Empty<byte>();
        public LogRecordObject( )
        {
        }

        public LogRecordObject( ObjectState objectState, Guid id, long rowVersion, Guid thread, long sequenceNumber, Types.LogLevel level, DateTime timestamp, int depth, Guid location, string message, string exceptionString, byte[] propertiesData )
            : base( objectState, id )
        {
            _rowVersion = rowVersion;
            _thread = thread;
            _sequenceNumber = sequenceNumber;
            _level = level;
            _timestamp = timestamp;
            _depth = depth;
            _location = location;
            _message = message;
            _exceptionString = exceptionString;
            _propertiesData = propertiesData;
        }

        public override Kind GetObjectType()
        {
            return Kind.LogRecord;
        }

        public override BaseData<Kind> Create()
        {
            return new LogRecordObject( );
        }

        public override void AssignTo( BaseData<Kind> target )
        {
            base.AssignTo( target );
            var destination = ( LogRecordObject )target;
            destination._rowVersion = _rowVersion;
            destination._thread = _thread;
            destination._sequenceNumber = _sequenceNumber;
            destination._level = _level;
            destination._timestamp = _timestamp;
            destination._depth = _depth;
            destination._location = _location;
            destination._message = _message;
            destination._exceptionString = _exceptionString;
            destination._propertiesData = (byte[])_propertiesData.Clone( );
        }

        public override bool Equals(BaseData<Kind>? other)
        {
            if (base.Equals(other))
            {
                var obj = ( LogRecordObject )other;
                if( obj._rowVersion != _rowVersion )
                {
                    return false;
                }
                if( obj._thread != _thread )
                {
                    return false;
                }
                if( obj._sequenceNumber != _sequenceNumber )
                {
                    return false;
                }
                if( obj._level != _level )
                {
                    return false;
                }
                if( obj._timestamp != _timestamp )
                {
                    return false;
                }
                if( obj._depth != _depth )
                {
                    return false;
                }
                if( obj._location != _location )
                {
                    return false;
                }
                if( obj._message != _message )
                {
                    return false;
                }
                if( obj._exceptionString != _exceptionString )
                {
                    return false;
                }
                if( obj._propertiesData.Equals( _propertiesData ) == false )
                {
                    return false;
                }
                return true;
            }
            return false;
        }

        public override bool IsOfType(Kind objectType)
        {
            if( objectType == Kind.LogRecord )
            {
                return true;
            }
            return base.IsOfType( objectType );
        }

        public long RowVersion
        {
            get => _rowVersion;
            set
            {
                if( _rowVersion != value )
                {
                    _rowVersion = value;
                    OnPropertyChanged( );
                }
            }
        }
        public Guid Thread
        {
            get => _thread;
            set
            {
                if( _thread != value )
                {
                    _thread = value;
                    OnPropertyChanged( );
                }
            }
        }
        public long SequenceNumber
        {
            get => _sequenceNumber;
            set
            {
                if( _sequenceNumber != value )
                {
                    _sequenceNumber = value;
                    OnPropertyChanged( );
                }
            }
        }
        public Types.LogLevel Level
        {
            get => _level;
            set
            {
                if( _level != value )
                {
                    _level = value;
                    OnPropertyChanged( );
                }
            }
        }
        public DateTime Timestamp
        {
            get => _timestamp;
            set
            {
                if( _timestamp != value )
                {
                    _timestamp = value;
                    OnPropertyChanged( );
                }
            }
        }
        public int Depth
        {
            get => _depth;
            set
            {
                if( _depth != value )
                {
                    _depth = value;
                    OnPropertyChanged( );
                }
            }
        }
        public Guid Location
        {
            get => _location;
            set
            {
                if( _location != value )
                {
                    _location = value;
                    OnPropertyChanged( );
                }
            }
        }
        public string Message
        {
            get => _message;
            set
            {
                if( _message != value )
                {
                    _message = value;
                    OnPropertyChanged( );
                }
            }
        }
        public string ExceptionString
        {
            get => _exceptionString;
            set
            {
                if( _exceptionString != value )
                {
                    _exceptionString = value;
                    OnPropertyChanged( );
                }
            }
        }
        public byte[] PropertiesData
        {
            get => _propertiesData;
            set
            {
                if( _propertiesData != value )
                {
                    _propertiesData = value;
                    OnPropertyChanged( );
                }
            }
        }

        public override void WriteTo( [ DisallowNull ] BinaryWriter destination )
        {
            base.WriteTo( destination );
            destination.Write( _rowVersion );
            destination.Write( _thread );
            destination.Write( _sequenceNumber );
            destination.Write( _level );
            destination.Write( _timestamp );
            destination.Write( _depth );
            destination.Write( _location );
            destination.Write( _message );
            destination.Write( _exceptionString );
            destination.WriteArray( _propertiesData );
        }

        public override void ReadFrom([DisallowNull] BinaryReader source)
        {
            base.ReadFrom( source );
            _rowVersion = source.ReadInt64( );
            _thread = source.ReadGuid( );
            _sequenceNumber = source.ReadInt64( );
            _level = source.ReadEnum<Types.LogLevel>( );
            _timestamp = source.ReadDateTime( );
            _depth = source.ReadInt32( );
            _location = source.ReadGuid( );
            _message = source.ReadString( );
            _exceptionString = source.ReadString( );
            _propertiesData = source.ReadByteArray( );
        }

    }
    public class LogThreadObject : BaseDataGuid<Kind>
    {
        long _rowVersion = 0;
        Guid _process;
        DateTime _started;
        DateTime? _stopped;
        long _threadId = 0;
        string _name = string.Empty;
        public LogThreadObject( )
        {
        }

        public LogThreadObject( ObjectState objectState, Guid id, long rowVersion, Guid process, DateTime started, DateTime? stopped, long threadId, string name )
            : base( objectState, id )
        {
            _rowVersion = rowVersion;
            _process = process;
            _started = started;
            _stopped = stopped;
            _threadId = threadId;
            _name = name;
        }

        public override Kind GetObjectType()
        {
            return Kind.LogThread;
        }

        public override BaseData<Kind> Create()
        {
            return new LogThreadObject( );
        }

        public override void AssignTo( BaseData<Kind> target )
        {
            base.AssignTo( target );
            var destination = ( LogThreadObject )target;
            destination._rowVersion = _rowVersion;
            destination._process = _process;
            destination._started = _started;
            destination._stopped = _stopped;
            destination._threadId = _threadId;
            destination._name = _name;
        }

        public override bool Equals(BaseData<Kind>? other)
        {
            if (base.Equals(other))
            {
                var obj = ( LogThreadObject )other;
                if( obj._rowVersion != _rowVersion )
                {
                    return false;
                }
                if( obj._process != _process )
                {
                    return false;
                }
                if( obj._started != _started )
                {
                    return false;
                }
                if( obj._stopped != _stopped )
                {
                    return false;
                }
                if( obj._threadId != _threadId )
                {
                    return false;
                }
                if( obj._name != _name )
                {
                    return false;
                }
                return true;
            }
            return false;
        }

        public override bool IsOfType(Kind objectType)
        {
            if( objectType == Kind.LogThread )
            {
                return true;
            }
            return base.IsOfType( objectType );
        }

        public long RowVersion
        {
            get => _rowVersion;
            set
            {
                if( _rowVersion != value )
                {
                    _rowVersion = value;
                    OnPropertyChanged( );
                }
            }
        }
        public Guid Process
        {
            get => _process;
            set
            {
                if( _process != value )
                {
                    _process = value;
                    OnPropertyChanged( );
                }
            }
        }
        public DateTime Started
        {
            get => _started;
            set
            {
                if( _started != value )
                {
                    _started = value;
                    OnPropertyChanged( );
                }
            }
        }
        public DateTime? Stopped
        {
            get => _stopped;
            set
            {
                if( _stopped != value )
                {
                    _stopped = value;
                    OnPropertyChanged( );
                }
            }
        }
        public long ThreadId
        {
            get => _threadId;
            set
            {
                if( _threadId != value )
                {
                    _threadId = value;
                    OnPropertyChanged( );
                }
            }
        }
        public string Name
        {
            get => _name;
            set
            {
                if( _name != value )
                {
                    _name = value;
                    OnPropertyChanged( );
                }
            }
        }

        public override void WriteTo( [ DisallowNull ] BinaryWriter destination )
        {
            base.WriteTo( destination );
            destination.Write( _rowVersion );
            destination.Write( _process );
            destination.Write( _started );
            destination.Write( _stopped );
            destination.Write( _threadId );
            destination.Write( _name );
        }

        public override void ReadFrom([DisallowNull] BinaryReader source)
        {
            base.ReadFrom( source );
            _rowVersion = source.ReadInt64( );
            _process = source.ReadGuid( );
            _started = source.ReadDateTime( );
            _stopped = source.ReadNullableDateTime( );
            _threadId = source.ReadInt64( );
            _name = source.ReadString( );
        }

    }
    public class LogTraceEntryObject : BaseDataGuid<Kind>
    {
        long _rowVersion = 0;
        Guid _thread;
        long _sequenceNumber = 0;
        Guid _location;
        int _depth = 0;
        DateTime _entered;
        DateTime? _ended;
        public LogTraceEntryObject( )
        {
        }

        public LogTraceEntryObject( ObjectState objectState, Guid id, long rowVersion, Guid thread, long sequenceNumber, Guid location, int depth, DateTime entered, DateTime? ended )
            : base( objectState, id )
        {
            _rowVersion = rowVersion;
            _thread = thread;
            _sequenceNumber = sequenceNumber;
            _location = location;
            _depth = depth;
            _entered = entered;
            _ended = ended;
        }

        public override Kind GetObjectType()
        {
            return Kind.LogTraceEntry;
        }

        public override BaseData<Kind> Create()
        {
            return new LogTraceEntryObject( );
        }

        public override void AssignTo( BaseData<Kind> target )
        {
            base.AssignTo( target );
            var destination = ( LogTraceEntryObject )target;
            destination._rowVersion = _rowVersion;
            destination._thread = _thread;
            destination._sequenceNumber = _sequenceNumber;
            destination._location = _location;
            destination._depth = _depth;
            destination._entered = _entered;
            destination._ended = _ended;
        }

        public override bool Equals(BaseData<Kind>? other)
        {
            if (base.Equals(other))
            {
                var obj = ( LogTraceEntryObject )other;
                if( obj._rowVersion != _rowVersion )
                {
                    return false;
                }
                if( obj._thread != _thread )
                {
                    return false;
                }
                if( obj._sequenceNumber != _sequenceNumber )
                {
                    return false;
                }
                if( obj._location != _location )
                {
                    return false;
                }
                if( obj._depth != _depth )
                {
                    return false;
                }
                if( obj._entered != _entered )
                {
                    return false;
                }
                if( obj._ended != _ended )
                {
                    return false;
                }
                return true;
            }
            return false;
        }

        public override bool IsOfType(Kind objectType)
        {
            if( objectType == Kind.LogTraceEntry )
            {
                return true;
            }
            return base.IsOfType( objectType );
        }

        public long RowVersion
        {
            get => _rowVersion;
            set
            {
                if( _rowVersion != value )
                {
                    _rowVersion = value;
                    OnPropertyChanged( );
                }
            }
        }
        public Guid Thread
        {
            get => _thread;
            set
            {
                if( _thread != value )
                {
                    _thread = value;
                    OnPropertyChanged( );
                }
            }
        }
        public long SequenceNumber
        {
            get => _sequenceNumber;
            set
            {
                if( _sequenceNumber != value )
                {
                    _sequenceNumber = value;
                    OnPropertyChanged( );
                }
            }
        }
        public Guid Location
        {
            get => _location;
            set
            {
                if( _location != value )
                {
                    _location = value;
                    OnPropertyChanged( );
                }
            }
        }
        public int Depth
        {
            get => _depth;
            set
            {
                if( _depth != value )
                {
                    _depth = value;
                    OnPropertyChanged( );
                }
            }
        }
        public DateTime Entered
        {
            get => _entered;
            set
            {
                if( _entered != value )
                {
                    _entered = value;
                    OnPropertyChanged( );
                }
            }
        }
        public DateTime? Ended
        {
            get => _ended;
            set
            {
                if( _ended != value )
                {
                    _ended = value;
                    OnPropertyChanged( );
                }
            }
        }

        public override void WriteTo( [ DisallowNull ] BinaryWriter destination )
        {
            base.WriteTo( destination );
            destination.Write( _rowVersion );
            destination.Write( _thread );
            destination.Write( _sequenceNumber );
            destination.Write( _location );
            destination.Write( _depth );
            destination.Write( _entered );
            destination.Write( _ended );
        }

        public override void ReadFrom([DisallowNull] BinaryReader source)
        {
            base.ReadFrom( source );
            _rowVersion = source.ReadInt64( );
            _thread = source.ReadGuid( );
            _sequenceNumber = source.ReadInt64( );
            _location = source.ReadGuid( );
            _depth = source.ReadInt32( );
            _entered = source.ReadDateTime( );
            _ended = source.ReadNullableDateTime( );
        }

    }
    public class MapElementObject : BaseDataGuid<Kind>
    {
        long _rowVersion = 0;
        Guid _item;
        Types.MapElementType _elementType = Types.MapElementType.Unknown;
        double _latitude = 0.0;
        double _longitude = 0.0;
        double _angle = 0.0;
        double _left = 0.0;
        double _top = 0.0;
        double _width = 0.0;
        double _height = 0.0;
        string _label = string.Empty;
        byte[] _data = Array.Empty<byte>();
        public MapElementObject( )
        {
        }

        public MapElementObject( ObjectState objectState, Guid id, long rowVersion, Guid item, Types.MapElementType elementType, double latitude, double longitude, double angle, double left, double top, double width, double height, string label, byte[] data )
            : base( objectState, id )
        {
            _rowVersion = rowVersion;
            _item = item;
            _elementType = elementType;
            _latitude = latitude;
            _longitude = longitude;
            _angle = angle;
            _left = left;
            _top = top;
            _width = width;
            _height = height;
            _label = label;
            _data = data;
        }

        public override Kind GetObjectType()
        {
            return Kind.MapElement;
        }

        public override BaseData<Kind> Create()
        {
            return new MapElementObject( );
        }

        public override void AssignTo( BaseData<Kind> target )
        {
            base.AssignTo( target );
            var destination = ( MapElementObject )target;
            destination._rowVersion = _rowVersion;
            destination._item = _item;
            destination._elementType = _elementType;
            destination._latitude = _latitude;
            destination._longitude = _longitude;
            destination._angle = _angle;
            destination._left = _left;
            destination._top = _top;
            destination._width = _width;
            destination._height = _height;
            destination._label = _label;
            destination._data = (byte[])_data.Clone( );
        }

        public override bool Equals(BaseData<Kind>? other)
        {
            if (base.Equals(other))
            {
                var obj = ( MapElementObject )other;
                if( obj._rowVersion != _rowVersion )
                {
                    return false;
                }
                if( obj._item != _item )
                {
                    return false;
                }
                if( obj._elementType != _elementType )
                {
                    return false;
                }
                if( obj._latitude != _latitude )
                {
                    return false;
                }
                if( obj._longitude != _longitude )
                {
                    return false;
                }
                if( obj._angle != _angle )
                {
                    return false;
                }
                if( obj._left != _left )
                {
                    return false;
                }
                if( obj._top != _top )
                {
                    return false;
                }
                if( obj._width != _width )
                {
                    return false;
                }
                if( obj._height != _height )
                {
                    return false;
                }
                if( obj._label != _label )
                {
                    return false;
                }
                if( obj._data.Equals( _data ) == false )
                {
                    return false;
                }
                return true;
            }
            return false;
        }

        public override bool IsOfType(Kind objectType)
        {
            if( objectType == Kind.MapElement )
            {
                return true;
            }
            return base.IsOfType( objectType );
        }

        public long RowVersion
        {
            get => _rowVersion;
            set
            {
                if( _rowVersion != value )
                {
                    _rowVersion = value;
                    OnPropertyChanged( );
                }
            }
        }
        public Guid Item
        {
            get => _item;
            set
            {
                if( _item != value )
                {
                    _item = value;
                    OnPropertyChanged( );
                }
            }
        }
        public Types.MapElementType ElementType
        {
            get => _elementType;
            set
            {
                if( _elementType != value )
                {
                    _elementType = value;
                    OnPropertyChanged( );
                }
            }
        }
        public double Latitude
        {
            get => _latitude;
            set
            {
                if( _latitude != value )
                {
                    _latitude = value;
                    OnPropertyChanged( );
                }
            }
        }
        public double Longitude
        {
            get => _longitude;
            set
            {
                if( _longitude != value )
                {
                    _longitude = value;
                    OnPropertyChanged( );
                }
            }
        }
        public double Angle
        {
            get => _angle;
            set
            {
                if( _angle != value )
                {
                    _angle = value;
                    OnPropertyChanged( );
                }
            }
        }
        public double Left
        {
            get => _left;
            set
            {
                if( _left != value )
                {
                    _left = value;
                    OnPropertyChanged( );
                }
            }
        }
        public double Top
        {
            get => _top;
            set
            {
                if( _top != value )
                {
                    _top = value;
                    OnPropertyChanged( );
                }
            }
        }
        public double Width
        {
            get => _width;
            set
            {
                if( _width != value )
                {
                    _width = value;
                    OnPropertyChanged( );
                }
            }
        }
        public double Height
        {
            get => _height;
            set
            {
                if( _height != value )
                {
                    _height = value;
                    OnPropertyChanged( );
                }
            }
        }
        public string Label
        {
            get => _label;
            set
            {
                if( _label != value )
                {
                    _label = value;
                    OnPropertyChanged( );
                }
            }
        }
        public byte[] Data
        {
            get => _data;
            set
            {
                if( _data != value )
                {
                    _data = value;
                    OnPropertyChanged( );
                }
            }
        }

        public override void WriteTo( [ DisallowNull ] BinaryWriter destination )
        {
            base.WriteTo( destination );
            destination.Write( _rowVersion );
            destination.Write( _item );
            destination.Write( _elementType );
            destination.Write( _latitude );
            destination.Write( _longitude );
            destination.Write( _angle );
            destination.Write( _left );
            destination.Write( _top );
            destination.Write( _width );
            destination.Write( _height );
            destination.Write( _label );
            destination.WriteArray( _data );
        }

        public override void ReadFrom([DisallowNull] BinaryReader source)
        {
            base.ReadFrom( source );
            _rowVersion = source.ReadInt64( );
            _item = source.ReadGuid( );
            _elementType = source.ReadEnum<Types.MapElementType>( );
            _latitude = source.ReadDouble( );
            _longitude = source.ReadDouble( );
            _angle = source.ReadDouble( );
            _left = source.ReadDouble( );
            _top = source.ReadDouble( );
            _width = source.ReadDouble( );
            _height = source.ReadDouble( );
            _label = source.ReadString( );
            _data = source.ReadByteArray( );
        }

    }
    public class MapInfoObject : BaseDataGuid<Kind>
    {
        long _rowVersion = 0;
        int _scale = 0;
        double _latitude = 0.0;
        double _longitude = 0.0;
        double _northWestLatitude = 0.0;
        double _northWestLongitude = 0.0;
        double _southEastLatitude = 0.0;
        double _southEastLongitude = 0.0;
        byte[] _image = Array.Empty<byte>();
        public MapInfoObject( )
        {
        }

        public MapInfoObject( ObjectState objectState, Guid id, long rowVersion, int scale, double latitude, double longitude, double northWestLatitude, double northWestLongitude, double southEastLatitude, double southEastLongitude, byte[] image )
            : base( objectState, id )
        {
            _rowVersion = rowVersion;
            _scale = scale;
            _latitude = latitude;
            _longitude = longitude;
            _northWestLatitude = northWestLatitude;
            _northWestLongitude = northWestLongitude;
            _southEastLatitude = southEastLatitude;
            _southEastLongitude = southEastLongitude;
            _image = image;
        }

        public override Kind GetObjectType()
        {
            return Kind.MapInfo;
        }

        public override BaseData<Kind> Create()
        {
            return new MapInfoObject( );
        }

        public override void AssignTo( BaseData<Kind> target )
        {
            base.AssignTo( target );
            var destination = ( MapInfoObject )target;
            destination._rowVersion = _rowVersion;
            destination._scale = _scale;
            destination._latitude = _latitude;
            destination._longitude = _longitude;
            destination._northWestLatitude = _northWestLatitude;
            destination._northWestLongitude = _northWestLongitude;
            destination._southEastLatitude = _southEastLatitude;
            destination._southEastLongitude = _southEastLongitude;
            destination._image = (byte[])_image.Clone( );
        }

        public override bool Equals(BaseData<Kind>? other)
        {
            if (base.Equals(other))
            {
                var obj = ( MapInfoObject )other;
                if( obj._rowVersion != _rowVersion )
                {
                    return false;
                }
                if( obj._scale != _scale )
                {
                    return false;
                }
                if( obj._latitude != _latitude )
                {
                    return false;
                }
                if( obj._longitude != _longitude )
                {
                    return false;
                }
                if( obj._northWestLatitude != _northWestLatitude )
                {
                    return false;
                }
                if( obj._northWestLongitude != _northWestLongitude )
                {
                    return false;
                }
                if( obj._southEastLatitude != _southEastLatitude )
                {
                    return false;
                }
                if( obj._southEastLongitude != _southEastLongitude )
                {
                    return false;
                }
                if( obj._image.Equals( _image ) == false )
                {
                    return false;
                }
                return true;
            }
            return false;
        }

        public override bool IsOfType(Kind objectType)
        {
            if( objectType == Kind.MapInfo )
            {
                return true;
            }
            return base.IsOfType( objectType );
        }

        public long RowVersion
        {
            get => _rowVersion;
            set
            {
                if( _rowVersion != value )
                {
                    _rowVersion = value;
                    OnPropertyChanged( );
                }
            }
        }
        public int Scale
        {
            get => _scale;
            set
            {
                if( _scale != value )
                {
                    _scale = value;
                    OnPropertyChanged( );
                }
            }
        }
        public double Latitude
        {
            get => _latitude;
            set
            {
                if( _latitude != value )
                {
                    _latitude = value;
                    OnPropertyChanged( );
                }
            }
        }
        public double Longitude
        {
            get => _longitude;
            set
            {
                if( _longitude != value )
                {
                    _longitude = value;
                    OnPropertyChanged( );
                }
            }
        }
        public double NorthWestLatitude
        {
            get => _northWestLatitude;
            set
            {
                if( _northWestLatitude != value )
                {
                    _northWestLatitude = value;
                    OnPropertyChanged( );
                }
            }
        }
        public double NorthWestLongitude
        {
            get => _northWestLongitude;
            set
            {
                if( _northWestLongitude != value )
                {
                    _northWestLongitude = value;
                    OnPropertyChanged( );
                }
            }
        }
        public double SouthEastLatitude
        {
            get => _southEastLatitude;
            set
            {
                if( _southEastLatitude != value )
                {
                    _southEastLatitude = value;
                    OnPropertyChanged( );
                }
            }
        }
        public double SouthEastLongitude
        {
            get => _southEastLongitude;
            set
            {
                if( _southEastLongitude != value )
                {
                    _southEastLongitude = value;
                    OnPropertyChanged( );
                }
            }
        }
        public byte[] Image
        {
            get => _image;
            set
            {
                if( _image != value )
                {
                    _image = value;
                    OnPropertyChanged( );
                }
            }
        }

        public override void WriteTo( [ DisallowNull ] BinaryWriter destination )
        {
            base.WriteTo( destination );
            destination.Write( _rowVersion );
            destination.Write( _scale );
            destination.Write( _latitude );
            destination.Write( _longitude );
            destination.Write( _northWestLatitude );
            destination.Write( _northWestLongitude );
            destination.Write( _southEastLatitude );
            destination.Write( _southEastLongitude );
            destination.WriteArray( _image );
        }

        public override void ReadFrom([DisallowNull] BinaryReader source)
        {
            base.ReadFrom( source );
            _rowVersion = source.ReadInt64( );
            _scale = source.ReadInt32( );
            _latitude = source.ReadDouble( );
            _longitude = source.ReadDouble( );
            _northWestLatitude = source.ReadDouble( );
            _northWestLongitude = source.ReadDouble( );
            _southEastLatitude = source.ReadDouble( );
            _southEastLongitude = source.ReadDouble( );
            _image = source.ReadByteArray( );
        }

    }
    public class MapServiceOptionsObject : BaseDataGuid<Kind>
    {
        long _rowVersion = 0;
        DateTime _timestamp;
        string _ipAddress = string.Empty;
        int _port = 0;
        double _imageScaleFactorX = 0.0;
        double _imageOffsetX = 0.0;
        double _imageScaleFactorY = 0.0;
        double _imageOffsetY = 0.0;
        public MapServiceOptionsObject( )
        {
        }

        public MapServiceOptionsObject( ObjectState objectState, Guid id, long rowVersion, DateTime timestamp, string ipAddress, int port, double imageScaleFactorX, double imageOffsetX, double imageScaleFactorY, double imageOffsetY )
            : base( objectState, id )
        {
            _rowVersion = rowVersion;
            _timestamp = timestamp;
            _ipAddress = ipAddress;
            _port = port;
            _imageScaleFactorX = imageScaleFactorX;
            _imageOffsetX = imageOffsetX;
            _imageScaleFactorY = imageScaleFactorY;
            _imageOffsetY = imageOffsetY;
        }

        public override Kind GetObjectType()
        {
            return Kind.MapServiceOptions;
        }

        public override BaseData<Kind> Create()
        {
            return new MapServiceOptionsObject( );
        }

        public override void AssignTo( BaseData<Kind> target )
        {
            base.AssignTo( target );
            var destination = ( MapServiceOptionsObject )target;
            destination._rowVersion = _rowVersion;
            destination._timestamp = _timestamp;
            destination._ipAddress = _ipAddress;
            destination._port = _port;
            destination._imageScaleFactorX = _imageScaleFactorX;
            destination._imageOffsetX = _imageOffsetX;
            destination._imageScaleFactorY = _imageScaleFactorY;
            destination._imageOffsetY = _imageOffsetY;
        }

        public override bool Equals(BaseData<Kind>? other)
        {
            if (base.Equals(other))
            {
                var obj = ( MapServiceOptionsObject )other;
                if( obj._rowVersion != _rowVersion )
                {
                    return false;
                }
                if( obj._timestamp != _timestamp )
                {
                    return false;
                }
                if( obj._ipAddress != _ipAddress )
                {
                    return false;
                }
                if( obj._port != _port )
                {
                    return false;
                }
                if( obj._imageScaleFactorX != _imageScaleFactorX )
                {
                    return false;
                }
                if( obj._imageOffsetX != _imageOffsetX )
                {
                    return false;
                }
                if( obj._imageScaleFactorY != _imageScaleFactorY )
                {
                    return false;
                }
                if( obj._imageOffsetY != _imageOffsetY )
                {
                    return false;
                }
                return true;
            }
            return false;
        }

        public override bool IsOfType(Kind objectType)
        {
            if( objectType == Kind.MapServiceOptions )
            {
                return true;
            }
            return base.IsOfType( objectType );
        }

        public long RowVersion
        {
            get => _rowVersion;
            set
            {
                if( _rowVersion != value )
                {
                    _rowVersion = value;
                    OnPropertyChanged( );
                }
            }
        }
        public DateTime Timestamp
        {
            get => _timestamp;
            set
            {
                if( _timestamp != value )
                {
                    _timestamp = value;
                    OnPropertyChanged( );
                }
            }
        }
        public string IpAddress
        {
            get => _ipAddress;
            set
            {
                if( _ipAddress != value )
                {
                    _ipAddress = value;
                    OnPropertyChanged( );
                }
            }
        }
        public int Port
        {
            get => _port;
            set
            {
                if( _port != value )
                {
                    _port = value;
                    OnPropertyChanged( );
                }
            }
        }
        public double ImageScaleFactorX
        {
            get => _imageScaleFactorX;
            set
            {
                if( _imageScaleFactorX != value )
                {
                    _imageScaleFactorX = value;
                    OnPropertyChanged( );
                }
            }
        }
        public double ImageOffsetX
        {
            get => _imageOffsetX;
            set
            {
                if( _imageOffsetX != value )
                {
                    _imageOffsetX = value;
                    OnPropertyChanged( );
                }
            }
        }
        public double ImageScaleFactorY
        {
            get => _imageScaleFactorY;
            set
            {
                if( _imageScaleFactorY != value )
                {
                    _imageScaleFactorY = value;
                    OnPropertyChanged( );
                }
            }
        }
        public double ImageOffsetY
        {
            get => _imageOffsetY;
            set
            {
                if( _imageOffsetY != value )
                {
                    _imageOffsetY = value;
                    OnPropertyChanged( );
                }
            }
        }

        public override void WriteTo( [ DisallowNull ] BinaryWriter destination )
        {
            base.WriteTo( destination );
            destination.Write( _rowVersion );
            destination.Write( _timestamp );
            destination.Write( _ipAddress );
            destination.Write( _port );
            destination.Write( _imageScaleFactorX );
            destination.Write( _imageOffsetX );
            destination.Write( _imageScaleFactorY );
            destination.Write( _imageOffsetY );
        }

        public override void ReadFrom([DisallowNull] BinaryReader source)
        {
            base.ReadFrom( source );
            _rowVersion = source.ReadInt64( );
            _timestamp = source.ReadDateTime( );
            _ipAddress = source.ReadString( );
            _port = source.ReadInt32( );
            _imageScaleFactorX = source.ReadDouble( );
            _imageOffsetX = source.ReadDouble( );
            _imageScaleFactorY = source.ReadDouble( );
            _imageOffsetY = source.ReadDouble( );
        }

    }
    public class MaritimeIdentificationDigitsObject : BaseDataGuid<Kind>
    {
        long _rowVersion = 0;
        int _code = 0;
        Guid _country;
        public MaritimeIdentificationDigitsObject( )
        {
        }

        public MaritimeIdentificationDigitsObject( ObjectState objectState, Guid id, long rowVersion, int code, Guid country )
            : base( objectState, id )
        {
            _rowVersion = rowVersion;
            _code = code;
            _country = country;
        }

        public override Kind GetObjectType()
        {
            return Kind.MaritimeIdentificationDigits;
        }

        public override BaseData<Kind> Create()
        {
            return new MaritimeIdentificationDigitsObject( );
        }

        public override void AssignTo( BaseData<Kind> target )
        {
            base.AssignTo( target );
            var destination = ( MaritimeIdentificationDigitsObject )target;
            destination._rowVersion = _rowVersion;
            destination._code = _code;
            destination._country = _country;
        }

        public override bool Equals(BaseData<Kind>? other)
        {
            if (base.Equals(other))
            {
                var obj = ( MaritimeIdentificationDigitsObject )other;
                if( obj._rowVersion != _rowVersion )
                {
                    return false;
                }
                if( obj._code != _code )
                {
                    return false;
                }
                if( obj._country != _country )
                {
                    return false;
                }
                return true;
            }
            return false;
        }

        public override bool IsOfType(Kind objectType)
        {
            if( objectType == Kind.MaritimeIdentificationDigits )
            {
                return true;
            }
            return base.IsOfType( objectType );
        }

        public long RowVersion
        {
            get => _rowVersion;
            set
            {
                if( _rowVersion != value )
                {
                    _rowVersion = value;
                    OnPropertyChanged( );
                }
            }
        }
        public int Code
        {
            get => _code;
            set
            {
                if( _code != value )
                {
                    _code = value;
                    OnPropertyChanged( );
                }
            }
        }
        public Guid Country
        {
            get => _country;
            set
            {
                if( _country != value )
                {
                    _country = value;
                    OnPropertyChanged( );
                }
            }
        }

        public override void WriteTo( [ DisallowNull ] BinaryWriter destination )
        {
            base.WriteTo( destination );
            destination.Write( _rowVersion );
            destination.Write( _code );
            destination.Write( _country );
        }

        public override void ReadFrom([DisallowNull] BinaryReader source)
        {
            base.ReadFrom( source );
            _rowVersion = source.ReadInt64( );
            _code = source.ReadInt32( );
            _country = source.ReadGuid( );
        }

    }
    public class MediaProxySessionObject : BaseDataGuid<Kind>
    {
        long _rowVersion = 0;
        Guid _service;
        string _name = string.Empty;
        Guid _enabledTimeseries;
        public MediaProxySessionObject( )
        {
        }

        public MediaProxySessionObject( ObjectState objectState, Guid id, long rowVersion, Guid service, string name, Guid enabledTimeseries )
            : base( objectState, id )
        {
            _rowVersion = rowVersion;
            _service = service;
            _name = name;
            _enabledTimeseries = enabledTimeseries;
        }

        public override Kind GetObjectType()
        {
            return Kind.MediaProxySession;
        }

        public override BaseData<Kind> Create()
        {
            return new MediaProxySessionObject( );
        }

        public override void AssignTo( BaseData<Kind> target )
        {
            base.AssignTo( target );
            var destination = ( MediaProxySessionObject )target;
            destination._rowVersion = _rowVersion;
            destination._service = _service;
            destination._name = _name;
            destination._enabledTimeseries = _enabledTimeseries;
        }

        public override bool Equals(BaseData<Kind>? other)
        {
            if (base.Equals(other))
            {
                var obj = ( MediaProxySessionObject )other;
                if( obj._rowVersion != _rowVersion )
                {
                    return false;
                }
                if( obj._service != _service )
                {
                    return false;
                }
                if( obj._name != _name )
                {
                    return false;
                }
                if( obj._enabledTimeseries != _enabledTimeseries )
                {
                    return false;
                }
                return true;
            }
            return false;
        }

        public override bool IsOfType(Kind objectType)
        {
            if( objectType == Kind.MediaProxySession )
            {
                return true;
            }
            return base.IsOfType( objectType );
        }

        public long RowVersion
        {
            get => _rowVersion;
            set
            {
                if( _rowVersion != value )
                {
                    _rowVersion = value;
                    OnPropertyChanged( );
                }
            }
        }
        public Guid Service
        {
            get => _service;
            set
            {
                if( _service != value )
                {
                    _service = value;
                    OnPropertyChanged( );
                }
            }
        }
        public string Name
        {
            get => _name;
            set
            {
                if( _name != value )
                {
                    _name = value;
                    OnPropertyChanged( );
                }
            }
        }
        public Guid EnabledTimeseries
        {
            get => _enabledTimeseries;
            set
            {
                if( _enabledTimeseries != value )
                {
                    _enabledTimeseries = value;
                    OnPropertyChanged( );
                }
            }
        }

        public override void WriteTo( [ DisallowNull ] BinaryWriter destination )
        {
            base.WriteTo( destination );
            destination.Write( _rowVersion );
            destination.Write( _service );
            destination.Write( _name );
            destination.Write( _enabledTimeseries );
        }

        public override void ReadFrom([DisallowNull] BinaryReader source)
        {
            base.ReadFrom( source );
            _rowVersion = source.ReadInt64( );
            _service = source.ReadGuid( );
            _name = source.ReadString( );
            _enabledTimeseries = source.ReadGuid( );
        }

    }
    public class MediaProxySessionFileObject : BaseDataGuid<Kind>
    {
        long _rowVersion = 0;
        Guid _proxySession;
        DateTime _timestamp;
        string _streamName = string.Empty;
        public MediaProxySessionFileObject( )
        {
        }

        public MediaProxySessionFileObject( ObjectState objectState, Guid id, long rowVersion, Guid proxySession, DateTime timestamp, string streamName )
            : base( objectState, id )
        {
            _rowVersion = rowVersion;
            _proxySession = proxySession;
            _timestamp = timestamp;
            _streamName = streamName;
        }

        public override Kind GetObjectType()
        {
            return Kind.MediaProxySessionFile;
        }

        public override BaseData<Kind> Create()
        {
            return new MediaProxySessionFileObject( );
        }

        public override void AssignTo( BaseData<Kind> target )
        {
            base.AssignTo( target );
            var destination = ( MediaProxySessionFileObject )target;
            destination._rowVersion = _rowVersion;
            destination._proxySession = _proxySession;
            destination._timestamp = _timestamp;
            destination._streamName = _streamName;
        }

        public override bool Equals(BaseData<Kind>? other)
        {
            if (base.Equals(other))
            {
                var obj = ( MediaProxySessionFileObject )other;
                if( obj._rowVersion != _rowVersion )
                {
                    return false;
                }
                if( obj._proxySession != _proxySession )
                {
                    return false;
                }
                if( obj._timestamp != _timestamp )
                {
                    return false;
                }
                if( obj._streamName != _streamName )
                {
                    return false;
                }
                return true;
            }
            return false;
        }

        public override bool IsOfType(Kind objectType)
        {
            if( objectType == Kind.MediaProxySessionFile )
            {
                return true;
            }
            return base.IsOfType( objectType );
        }

        public long RowVersion
        {
            get => _rowVersion;
            set
            {
                if( _rowVersion != value )
                {
                    _rowVersion = value;
                    OnPropertyChanged( );
                }
            }
        }
        public Guid ProxySession
        {
            get => _proxySession;
            set
            {
                if( _proxySession != value )
                {
                    _proxySession = value;
                    OnPropertyChanged( );
                }
            }
        }
        public DateTime Timestamp
        {
            get => _timestamp;
            set
            {
                if( _timestamp != value )
                {
                    _timestamp = value;
                    OnPropertyChanged( );
                }
            }
        }
        public string StreamName
        {
            get => _streamName;
            set
            {
                if( _streamName != value )
                {
                    _streamName = value;
                    OnPropertyChanged( );
                }
            }
        }

        public override void WriteTo( [ DisallowNull ] BinaryWriter destination )
        {
            base.WriteTo( destination );
            destination.Write( _rowVersion );
            destination.Write( _proxySession );
            destination.Write( _timestamp );
            destination.Write( _streamName );
        }

        public override void ReadFrom([DisallowNull] BinaryReader source)
        {
            base.ReadFrom( source );
            _rowVersion = source.ReadInt64( );
            _proxySession = source.ReadGuid( );
            _timestamp = source.ReadDateTime( );
            _streamName = source.ReadString( );
        }

    }
    public class MediaProxySessionOptionsObject : BaseDataGuid<Kind>
    {
        long _rowVersion = 0;
        Guid _proxySession;
        DateTime _timestamp;
        string _sourceStreamUrl = string.Empty;
        string _streamName = string.Empty;
        Types.MediaProxySessionMode _mode = Types.MediaProxySessionMode.Unknown;
        int _tunnelOverHTTPPortNumber = 0;
        string _username = string.Empty;
        string _password = string.Empty;
        int _recorderPortNumber = 0;
        Types.MediaProxySessionType _sessionType = Types.MediaProxySessionType.Unknown;
        TimeSpan _maxFileTime;
        TimeSpan _maxFileRetention;
        string _videoDirectory = string.Empty;
        public MediaProxySessionOptionsObject( )
        {
        }

        public MediaProxySessionOptionsObject( ObjectState objectState, Guid id, long rowVersion, Guid proxySession, DateTime timestamp, string sourceStreamUrl, string streamName, Types.MediaProxySessionMode mode, int tunnelOverHTTPPortNumber, string username, string password, int recorderPortNumber, Types.MediaProxySessionType sessionType, TimeSpan maxFileTime, TimeSpan maxFileRetention, string videoDirectory )
            : base( objectState, id )
        {
            _rowVersion = rowVersion;
            _proxySession = proxySession;
            _timestamp = timestamp;
            _sourceStreamUrl = sourceStreamUrl;
            _streamName = streamName;
            _mode = mode;
            _tunnelOverHTTPPortNumber = tunnelOverHTTPPortNumber;
            _username = username;
            _password = password;
            _recorderPortNumber = recorderPortNumber;
            _sessionType = sessionType;
            _maxFileTime = maxFileTime;
            _maxFileRetention = maxFileRetention;
            _videoDirectory = videoDirectory;
        }

        public override Kind GetObjectType()
        {
            return Kind.MediaProxySessionOptions;
        }

        public override BaseData<Kind> Create()
        {
            return new MediaProxySessionOptionsObject( );
        }

        public override void AssignTo( BaseData<Kind> target )
        {
            base.AssignTo( target );
            var destination = ( MediaProxySessionOptionsObject )target;
            destination._rowVersion = _rowVersion;
            destination._proxySession = _proxySession;
            destination._timestamp = _timestamp;
            destination._sourceStreamUrl = _sourceStreamUrl;
            destination._streamName = _streamName;
            destination._mode = _mode;
            destination._tunnelOverHTTPPortNumber = _tunnelOverHTTPPortNumber;
            destination._username = _username;
            destination._password = _password;
            destination._recorderPortNumber = _recorderPortNumber;
            destination._sessionType = _sessionType;
            destination._maxFileTime = _maxFileTime;
            destination._maxFileRetention = _maxFileRetention;
            destination._videoDirectory = _videoDirectory;
        }

        public override bool Equals(BaseData<Kind>? other)
        {
            if (base.Equals(other))
            {
                var obj = ( MediaProxySessionOptionsObject )other;
                if( obj._rowVersion != _rowVersion )
                {
                    return false;
                }
                if( obj._proxySession != _proxySession )
                {
                    return false;
                }
                if( obj._timestamp != _timestamp )
                {
                    return false;
                }
                if( obj._sourceStreamUrl != _sourceStreamUrl )
                {
                    return false;
                }
                if( obj._streamName != _streamName )
                {
                    return false;
                }
                if( obj._mode != _mode )
                {
                    return false;
                }
                if( obj._tunnelOverHTTPPortNumber != _tunnelOverHTTPPortNumber )
                {
                    return false;
                }
                if( obj._username != _username )
                {
                    return false;
                }
                if( obj._password != _password )
                {
                    return false;
                }
                if( obj._recorderPortNumber != _recorderPortNumber )
                {
                    return false;
                }
                if( obj._sessionType != _sessionType )
                {
                    return false;
                }
                if( obj._maxFileTime != _maxFileTime )
                {
                    return false;
                }
                if( obj._maxFileRetention != _maxFileRetention )
                {
                    return false;
                }
                if( obj._videoDirectory != _videoDirectory )
                {
                    return false;
                }
                return true;
            }
            return false;
        }

        public override bool IsOfType(Kind objectType)
        {
            if( objectType == Kind.MediaProxySessionOptions )
            {
                return true;
            }
            return base.IsOfType( objectType );
        }

        public long RowVersion
        {
            get => _rowVersion;
            set
            {
                if( _rowVersion != value )
                {
                    _rowVersion = value;
                    OnPropertyChanged( );
                }
            }
        }
        public Guid ProxySession
        {
            get => _proxySession;
            set
            {
                if( _proxySession != value )
                {
                    _proxySession = value;
                    OnPropertyChanged( );
                }
            }
        }
        public DateTime Timestamp
        {
            get => _timestamp;
            set
            {
                if( _timestamp != value )
                {
                    _timestamp = value;
                    OnPropertyChanged( );
                }
            }
        }
        public string SourceStreamUrl
        {
            get => _sourceStreamUrl;
            set
            {
                if( _sourceStreamUrl != value )
                {
                    _sourceStreamUrl = value;
                    OnPropertyChanged( );
                }
            }
        }
        public string StreamName
        {
            get => _streamName;
            set
            {
                if( _streamName != value )
                {
                    _streamName = value;
                    OnPropertyChanged( );
                }
            }
        }
        public Types.MediaProxySessionMode Mode
        {
            get => _mode;
            set
            {
                if( _mode != value )
                {
                    _mode = value;
                    OnPropertyChanged( );
                }
            }
        }
        public int TunnelOverHTTPPortNumber
        {
            get => _tunnelOverHTTPPortNumber;
            set
            {
                if( _tunnelOverHTTPPortNumber != value )
                {
                    _tunnelOverHTTPPortNumber = value;
                    OnPropertyChanged( );
                }
            }
        }
        public string Username
        {
            get => _username;
            set
            {
                if( _username != value )
                {
                    _username = value;
                    OnPropertyChanged( );
                }
            }
        }
        public string Password
        {
            get => _password;
            set
            {
                if( _password != value )
                {
                    _password = value;
                    OnPropertyChanged( );
                }
            }
        }
        public int RecorderPortNumber
        {
            get => _recorderPortNumber;
            set
            {
                if( _recorderPortNumber != value )
                {
                    _recorderPortNumber = value;
                    OnPropertyChanged( );
                }
            }
        }
        public Types.MediaProxySessionType SessionType
        {
            get => _sessionType;
            set
            {
                if( _sessionType != value )
                {
                    _sessionType = value;
                    OnPropertyChanged( );
                }
            }
        }
        public TimeSpan MaxFileTime
        {
            get => _maxFileTime;
            set
            {
                if( _maxFileTime != value )
                {
                    _maxFileTime = value;
                    OnPropertyChanged( );
                }
            }
        }
        public TimeSpan MaxFileRetention
        {
            get => _maxFileRetention;
            set
            {
                if( _maxFileRetention != value )
                {
                    _maxFileRetention = value;
                    OnPropertyChanged( );
                }
            }
        }
        public string VideoDirectory
        {
            get => _videoDirectory;
            set
            {
                if( _videoDirectory != value )
                {
                    _videoDirectory = value;
                    OnPropertyChanged( );
                }
            }
        }

        public override void WriteTo( [ DisallowNull ] BinaryWriter destination )
        {
            base.WriteTo( destination );
            destination.Write( _rowVersion );
            destination.Write( _proxySession );
            destination.Write( _timestamp );
            destination.Write( _sourceStreamUrl );
            destination.Write( _streamName );
            destination.Write( _mode );
            destination.Write( _tunnelOverHTTPPortNumber );
            destination.Write( _username );
            destination.Write( _password );
            destination.Write( _recorderPortNumber );
            destination.Write( _sessionType );
            destination.Write( _maxFileTime );
            destination.Write( _maxFileRetention );
            destination.Write( _videoDirectory );
        }

        public override void ReadFrom([DisallowNull] BinaryReader source)
        {
            base.ReadFrom( source );
            _rowVersion = source.ReadInt64( );
            _proxySession = source.ReadGuid( );
            _timestamp = source.ReadDateTime( );
            _sourceStreamUrl = source.ReadString( );
            _streamName = source.ReadString( );
            _mode = source.ReadEnum<Types.MediaProxySessionMode>( );
            _tunnelOverHTTPPortNumber = source.ReadInt32( );
            _username = source.ReadString( );
            _password = source.ReadString( );
            _recorderPortNumber = source.ReadInt32( );
            _sessionType = source.ReadEnum<Types.MediaProxySessionType>( );
            _maxFileTime = source.ReadTimeSpan( );
            _maxFileRetention = source.ReadTimeSpan( );
            _videoDirectory = source.ReadString( );
        }

    }
    public class MediaServiceObject : BaseDataGuid<Kind>
    {
        long _rowVersion = 0;
        Guid _enabledTimeseries;
        public MediaServiceObject( )
        {
        }

        public MediaServiceObject( ObjectState objectState, Guid id, long rowVersion, Guid enabledTimeseries )
            : base( objectState, id )
        {
            _rowVersion = rowVersion;
            _enabledTimeseries = enabledTimeseries;
        }

        public override Kind GetObjectType()
        {
            return Kind.MediaService;
        }

        public override BaseData<Kind> Create()
        {
            return new MediaServiceObject( );
        }

        public override void AssignTo( BaseData<Kind> target )
        {
            base.AssignTo( target );
            var destination = ( MediaServiceObject )target;
            destination._rowVersion = _rowVersion;
            destination._enabledTimeseries = _enabledTimeseries;
        }

        public override bool Equals(BaseData<Kind>? other)
        {
            if (base.Equals(other))
            {
                var obj = ( MediaServiceObject )other;
                if( obj._rowVersion != _rowVersion )
                {
                    return false;
                }
                if( obj._enabledTimeseries != _enabledTimeseries )
                {
                    return false;
                }
                return true;
            }
            return false;
        }

        public override bool IsOfType(Kind objectType)
        {
            if( objectType == Kind.MediaService )
            {
                return true;
            }
            return base.IsOfType( objectType );
        }

        public long RowVersion
        {
            get => _rowVersion;
            set
            {
                if( _rowVersion != value )
                {
                    _rowVersion = value;
                    OnPropertyChanged( );
                }
            }
        }
        public Guid EnabledTimeseries
        {
            get => _enabledTimeseries;
            set
            {
                if( _enabledTimeseries != value )
                {
                    _enabledTimeseries = value;
                    OnPropertyChanged( );
                }
            }
        }

        public override void WriteTo( [ DisallowNull ] BinaryWriter destination )
        {
            base.WriteTo( destination );
            destination.Write( _rowVersion );
            destination.Write( _enabledTimeseries );
        }

        public override void ReadFrom([DisallowNull] BinaryReader source)
        {
            base.ReadFrom( source );
            _rowVersion = source.ReadInt64( );
            _enabledTimeseries = source.ReadGuid( );
        }

    }
    public class MediaServiceOptionsObject : BaseDataGuid<Kind>
    {
        long _rowVersion = 0;
        Guid _mediaService;
        DateTime _timestamp;
        int _rtspPortNumber = 0;
        int _httpPortNumber = 0;
        public MediaServiceOptionsObject( )
        {
        }

        public MediaServiceOptionsObject( ObjectState objectState, Guid id, long rowVersion, Guid mediaService, DateTime timestamp, int rtspPortNumber, int httpPortNumber )
            : base( objectState, id )
        {
            _rowVersion = rowVersion;
            _mediaService = mediaService;
            _timestamp = timestamp;
            _rtspPortNumber = rtspPortNumber;
            _httpPortNumber = httpPortNumber;
        }

        public override Kind GetObjectType()
        {
            return Kind.MediaServiceOptions;
        }

        public override BaseData<Kind> Create()
        {
            return new MediaServiceOptionsObject( );
        }

        public override void AssignTo( BaseData<Kind> target )
        {
            base.AssignTo( target );
            var destination = ( MediaServiceOptionsObject )target;
            destination._rowVersion = _rowVersion;
            destination._mediaService = _mediaService;
            destination._timestamp = _timestamp;
            destination._rtspPortNumber = _rtspPortNumber;
            destination._httpPortNumber = _httpPortNumber;
        }

        public override bool Equals(BaseData<Kind>? other)
        {
            if (base.Equals(other))
            {
                var obj = ( MediaServiceOptionsObject )other;
                if( obj._rowVersion != _rowVersion )
                {
                    return false;
                }
                if( obj._mediaService != _mediaService )
                {
                    return false;
                }
                if( obj._timestamp != _timestamp )
                {
                    return false;
                }
                if( obj._rtspPortNumber != _rtspPortNumber )
                {
                    return false;
                }
                if( obj._httpPortNumber != _httpPortNumber )
                {
                    return false;
                }
                return true;
            }
            return false;
        }

        public override bool IsOfType(Kind objectType)
        {
            if( objectType == Kind.MediaServiceOptions )
            {
                return true;
            }
            return base.IsOfType( objectType );
        }

        public long RowVersion
        {
            get => _rowVersion;
            set
            {
                if( _rowVersion != value )
                {
                    _rowVersion = value;
                    OnPropertyChanged( );
                }
            }
        }
        public Guid MediaService
        {
            get => _mediaService;
            set
            {
                if( _mediaService != value )
                {
                    _mediaService = value;
                    OnPropertyChanged( );
                }
            }
        }
        public DateTime Timestamp
        {
            get => _timestamp;
            set
            {
                if( _timestamp != value )
                {
                    _timestamp = value;
                    OnPropertyChanged( );
                }
            }
        }
        public int RtspPortNumber
        {
            get => _rtspPortNumber;
            set
            {
                if( _rtspPortNumber != value )
                {
                    _rtspPortNumber = value;
                    OnPropertyChanged( );
                }
            }
        }
        public int HttpPortNumber
        {
            get => _httpPortNumber;
            set
            {
                if( _httpPortNumber != value )
                {
                    _httpPortNumber = value;
                    OnPropertyChanged( );
                }
            }
        }

        public override void WriteTo( [ DisallowNull ] BinaryWriter destination )
        {
            base.WriteTo( destination );
            destination.Write( _rowVersion );
            destination.Write( _mediaService );
            destination.Write( _timestamp );
            destination.Write( _rtspPortNumber );
            destination.Write( _httpPortNumber );
        }

        public override void ReadFrom([DisallowNull] BinaryReader source)
        {
            base.ReadFrom( source );
            _rowVersion = source.ReadInt64( );
            _mediaService = source.ReadGuid( );
            _timestamp = source.ReadDateTime( );
            _rtspPortNumber = source.ReadInt32( );
            _httpPortNumber = source.ReadInt32( );
        }

    }
    public abstract class NamespaceElementObject : BaseDataGuid<Kind>
    {
        long _rowVersion = 0;
        Guid _namespace;
        string _name = string.Empty;
        string _description = string.Empty;
        protected NamespaceElementObject( )
        {
        }

        protected NamespaceElementObject( ObjectState objectState, Guid id, long rowVersion, Guid namespace__, string name, string description )
            : base( objectState, id )
        {
            _rowVersion = rowVersion;
            _namespace = namespace__;
            _name = name;
            _description = description;
        }

        public override void AssignTo( BaseData<Kind> target )
        {
            base.AssignTo( target );
            var destination = ( NamespaceElementObject )target;
            destination._rowVersion = _rowVersion;
            destination._namespace = _namespace;
            destination._name = _name;
            destination._description = _description;
        }

        public override bool Equals(BaseData<Kind>? other)
        {
            if (base.Equals(other))
            {
                var obj = ( NamespaceElementObject )other;
                if( obj._rowVersion != _rowVersion )
                {
                    return false;
                }
                if( obj._namespace != _namespace )
                {
                    return false;
                }
                if( obj._name != _name )
                {
                    return false;
                }
                if( obj._description != _description )
                {
                    return false;
                }
                return true;
            }
            return false;
        }

        public override bool IsOfType(Kind objectType)
        {
            if( objectType == Kind.NamespaceElement )
            {
                return true;
            }
            return base.IsOfType( objectType );
        }

        public long RowVersion
        {
            get => _rowVersion;
            set
            {
                if( _rowVersion != value )
                {
                    _rowVersion = value;
                    OnPropertyChanged( );
                }
            }
        }
        public Guid Namespace
        {
            get => _namespace;
            set
            {
                if( _namespace != value )
                {
                    _namespace = value;
                    OnPropertyChanged( );
                }
            }
        }
        public string Name
        {
            get => _name;
            set
            {
                if( _name != value )
                {
                    _name = value;
                    OnPropertyChanged( );
                }
            }
        }
        public string Description
        {
            get => _description;
            set
            {
                if( _description != value )
                {
                    _description = value;
                    OnPropertyChanged( );
                }
            }
        }

        public override void WriteTo( [ DisallowNull ] BinaryWriter destination )
        {
            base.WriteTo( destination );
            destination.Write( _rowVersion );
            destination.Write( _namespace );
            destination.Write( _name );
            destination.Write( _description );
        }

        public override void ReadFrom([DisallowNull] BinaryReader source)
        {
            base.ReadFrom( source );
            _rowVersion = source.ReadInt64( );
            _namespace = source.ReadGuid( );
            _name = source.ReadString( );
            _description = source.ReadString( );
        }

    }
    public class ElementTypeObject : NamespaceElementObject
    {
        public ElementTypeObject( )
        {
        }

        public ElementTypeObject( ObjectState objectState, Guid id, long rowVersion, Guid namespace__, string name, string description )
            : base( objectState, id, rowVersion, namespace__, name, description )
        {
        }

        public override Kind GetObjectType()
        {
            return Kind.ElementType;
        }

        public override BaseData<Kind> Create()
        {
            return new ElementTypeObject( );
        }

        public override bool IsOfType(Kind objectType)
        {
            if( objectType == Kind.ElementType )
            {
                return true;
            }
            return base.IsOfType( objectType );
        }

    }
    public class NamespaceObject : NamespaceElementObject
    {
        public NamespaceObject( )
        {
        }

        public NamespaceObject( ObjectState objectState, Guid id, long rowVersion, Guid namespace__, string name, string description )
            : base( objectState, id, rowVersion, namespace__, name, description )
        {
        }

        public override Kind GetObjectType()
        {
            return Kind.Namespace;
        }

        public override BaseData<Kind> Create()
        {
            return new NamespaceObject( );
        }

        public override bool IsOfType(Kind objectType)
        {
            if( objectType == Kind.Namespace )
            {
                return true;
            }
            return base.IsOfType( objectType );
        }

    }
    public class OilSpillObject : BaseDataGuid<Kind>
    {
        long _rowVersion = 0;
        Guid _oilSpillDetector;
        DateTime _timestamp;
        double _oilArea = 0.0;
        byte[] _shape = Array.Empty<byte>();
        byte[] _bSI = Array.Empty<byte>();
        byte[] _oil = Array.Empty<byte>();
        byte[] _trace = Array.Empty<byte>();
        public OilSpillObject( )
        {
        }

        public OilSpillObject( ObjectState objectState, Guid id, long rowVersion, Guid oilSpillDetector, DateTime timestamp, double oilArea, byte[] shape, byte[] bSI, byte[] oil, byte[] trace )
            : base( objectState, id )
        {
            _rowVersion = rowVersion;
            _oilSpillDetector = oilSpillDetector;
            _timestamp = timestamp;
            _oilArea = oilArea;
            _shape = shape;
            _bSI = bSI;
            _oil = oil;
            _trace = trace;
        }

        public override Kind GetObjectType()
        {
            return Kind.OilSpill;
        }

        public override BaseData<Kind> Create()
        {
            return new OilSpillObject( );
        }

        public override void AssignTo( BaseData<Kind> target )
        {
            base.AssignTo( target );
            var destination = ( OilSpillObject )target;
            destination._rowVersion = _rowVersion;
            destination._oilSpillDetector = _oilSpillDetector;
            destination._timestamp = _timestamp;
            destination._oilArea = _oilArea;
            destination._shape = (byte[])_shape.Clone( );
            destination._bSI = (byte[])_bSI.Clone( );
            destination._oil = (byte[])_oil.Clone( );
            destination._trace = (byte[])_trace.Clone( );
        }

        public override bool Equals(BaseData<Kind>? other)
        {
            if (base.Equals(other))
            {
                var obj = ( OilSpillObject )other;
                if( obj._rowVersion != _rowVersion )
                {
                    return false;
                }
                if( obj._oilSpillDetector != _oilSpillDetector )
                {
                    return false;
                }
                if( obj._timestamp != _timestamp )
                {
                    return false;
                }
                if( obj._oilArea != _oilArea )
                {
                    return false;
                }
                if( obj._shape.Equals( _shape ) == false )
                {
                    return false;
                }
                if( obj._bSI.Equals( _bSI ) == false )
                {
                    return false;
                }
                if( obj._oil.Equals( _oil ) == false )
                {
                    return false;
                }
                if( obj._trace.Equals( _trace ) == false )
                {
                    return false;
                }
                return true;
            }
            return false;
        }

        public override bool IsOfType(Kind objectType)
        {
            if( objectType == Kind.OilSpill )
            {
                return true;
            }
            return base.IsOfType( objectType );
        }

        public long RowVersion
        {
            get => _rowVersion;
            set
            {
                if( _rowVersion != value )
                {
                    _rowVersion = value;
                    OnPropertyChanged( );
                }
            }
        }
        public Guid OilSpillDetector
        {
            get => _oilSpillDetector;
            set
            {
                if( _oilSpillDetector != value )
                {
                    _oilSpillDetector = value;
                    OnPropertyChanged( );
                }
            }
        }
        public DateTime Timestamp
        {
            get => _timestamp;
            set
            {
                if( _timestamp != value )
                {
                    _timestamp = value;
                    OnPropertyChanged( );
                }
            }
        }
        public double OilArea
        {
            get => _oilArea;
            set
            {
                if( _oilArea != value )
                {
                    _oilArea = value;
                    OnPropertyChanged( );
                }
            }
        }
        public byte[] Shape
        {
            get => _shape;
            set
            {
                if( _shape != value )
                {
                    _shape = value;
                    OnPropertyChanged( );
                }
            }
        }
        public byte[] BSI
        {
            get => _bSI;
            set
            {
                if( _bSI != value )
                {
                    _bSI = value;
                    OnPropertyChanged( );
                }
            }
        }
        public byte[] Oil
        {
            get => _oil;
            set
            {
                if( _oil != value )
                {
                    _oil = value;
                    OnPropertyChanged( );
                }
            }
        }
        public byte[] Trace
        {
            get => _trace;
            set
            {
                if( _trace != value )
                {
                    _trace = value;
                    OnPropertyChanged( );
                }
            }
        }

        public override void WriteTo( [ DisallowNull ] BinaryWriter destination )
        {
            base.WriteTo( destination );
            destination.Write( _rowVersion );
            destination.Write( _oilSpillDetector );
            destination.Write( _timestamp );
            destination.Write( _oilArea );
            destination.WriteArray( _shape );
            destination.WriteArray( _bSI );
            destination.WriteArray( _oil );
            destination.WriteArray( _trace );
        }

        public override void ReadFrom([DisallowNull] BinaryReader source)
        {
            base.ReadFrom( source );
            _rowVersion = source.ReadInt64( );
            _oilSpillDetector = source.ReadGuid( );
            _timestamp = source.ReadDateTime( );
            _oilArea = source.ReadDouble( );
            _shape = source.ReadByteArray( );
            _bSI = source.ReadByteArray( );
            _oil = source.ReadByteArray( );
            _trace = source.ReadByteArray( );
        }

    }
    public class OilSpillDetectorCommandObject : BaseDataGuid<Kind>
    {
        long _rowVersion = 0;
        Guid _oilSpillDetector;
        DateTime _timestamp;
        Types.DeviceCommandSourceType _deviceCommandSourceType = Types.DeviceCommandSourceType.Unknown;
        Guid _deviceCommandSourceId;
        Guid _reply;
        public OilSpillDetectorCommandObject( )
        {
        }

        public OilSpillDetectorCommandObject( ObjectState objectState, Guid id, long rowVersion, Guid oilSpillDetector, DateTime timestamp, Types.DeviceCommandSourceType deviceCommandSourceType, Guid deviceCommandSourceId, Guid reply )
            : base( objectState, id )
        {
            _rowVersion = rowVersion;
            _oilSpillDetector = oilSpillDetector;
            _timestamp = timestamp;
            _deviceCommandSourceType = deviceCommandSourceType;
            _deviceCommandSourceId = deviceCommandSourceId;
            _reply = reply;
        }

        public override Kind GetObjectType()
        {
            return Kind.OilSpillDetectorCommand;
        }

        public override BaseData<Kind> Create()
        {
            return new OilSpillDetectorCommandObject( );
        }

        public override void AssignTo( BaseData<Kind> target )
        {
            base.AssignTo( target );
            var destination = ( OilSpillDetectorCommandObject )target;
            destination._rowVersion = _rowVersion;
            destination._oilSpillDetector = _oilSpillDetector;
            destination._timestamp = _timestamp;
            destination._deviceCommandSourceType = _deviceCommandSourceType;
            destination._deviceCommandSourceId = _deviceCommandSourceId;
            destination._reply = _reply;
        }

        public override bool Equals(BaseData<Kind>? other)
        {
            if (base.Equals(other))
            {
                var obj = ( OilSpillDetectorCommandObject )other;
                if( obj._rowVersion != _rowVersion )
                {
                    return false;
                }
                if( obj._oilSpillDetector != _oilSpillDetector )
                {
                    return false;
                }
                if( obj._timestamp != _timestamp )
                {
                    return false;
                }
                if( obj._deviceCommandSourceType != _deviceCommandSourceType )
                {
                    return false;
                }
                if( obj._deviceCommandSourceId != _deviceCommandSourceId )
                {
                    return false;
                }
                if( obj._reply != _reply )
                {
                    return false;
                }
                return true;
            }
            return false;
        }

        public override bool IsOfType(Kind objectType)
        {
            if( objectType == Kind.OilSpillDetectorCommand )
            {
                return true;
            }
            return base.IsOfType( objectType );
        }

        public long RowVersion
        {
            get => _rowVersion;
            set
            {
                if( _rowVersion != value )
                {
                    _rowVersion = value;
                    OnPropertyChanged( );
                }
            }
        }
        public Guid OilSpillDetector
        {
            get => _oilSpillDetector;
            set
            {
                if( _oilSpillDetector != value )
                {
                    _oilSpillDetector = value;
                    OnPropertyChanged( );
                }
            }
        }
        public DateTime Timestamp
        {
            get => _timestamp;
            set
            {
                if( _timestamp != value )
                {
                    _timestamp = value;
                    OnPropertyChanged( );
                }
            }
        }
        public Types.DeviceCommandSourceType DeviceCommandSourceType
        {
            get => _deviceCommandSourceType;
            set
            {
                if( _deviceCommandSourceType != value )
                {
                    _deviceCommandSourceType = value;
                    OnPropertyChanged( );
                }
            }
        }
        public Guid DeviceCommandSourceId
        {
            get => _deviceCommandSourceId;
            set
            {
                if( _deviceCommandSourceId != value )
                {
                    _deviceCommandSourceId = value;
                    OnPropertyChanged( );
                }
            }
        }
        public Guid Reply
        {
            get => _reply;
            set
            {
                if( _reply != value )
                {
                    _reply = value;
                    OnPropertyChanged( );
                }
            }
        }

        public override void WriteTo( [ DisallowNull ] BinaryWriter destination )
        {
            base.WriteTo( destination );
            destination.Write( _rowVersion );
            destination.Write( _oilSpillDetector );
            destination.Write( _timestamp );
            destination.Write( _deviceCommandSourceType );
            destination.Write( _deviceCommandSourceId );
            destination.Write( _reply );
        }

        public override void ReadFrom([DisallowNull] BinaryReader source)
        {
            base.ReadFrom( source );
            _rowVersion = source.ReadInt64( );
            _oilSpillDetector = source.ReadGuid( );
            _timestamp = source.ReadDateTime( );
            _deviceCommandSourceType = source.ReadEnum<Types.DeviceCommandSourceType>( );
            _deviceCommandSourceId = source.ReadGuid( );
            _reply = source.ReadGuid( );
        }

    }
    public class OilSpillDetectorCommandReplyObject : BaseDataGuid<Kind>
    {
        long _rowVersion = 0;
        Guid _oilSpillDetector;
        DateTime _timestamp;
        Guid _command;
        Types.DeviceCommandReplyStatus _status = Types.DeviceCommandReplyStatus.Unknown;
        string _message = string.Empty;
        public OilSpillDetectorCommandReplyObject( )
        {
        }

        public OilSpillDetectorCommandReplyObject( ObjectState objectState, Guid id, long rowVersion, Guid oilSpillDetector, DateTime timestamp, Guid command, Types.DeviceCommandReplyStatus status, string message )
            : base( objectState, id )
        {
            _rowVersion = rowVersion;
            _oilSpillDetector = oilSpillDetector;
            _timestamp = timestamp;
            _command = command;
            _status = status;
            _message = message;
        }

        public override Kind GetObjectType()
        {
            return Kind.OilSpillDetectorCommandReply;
        }

        public override BaseData<Kind> Create()
        {
            return new OilSpillDetectorCommandReplyObject( );
        }

        public override void AssignTo( BaseData<Kind> target )
        {
            base.AssignTo( target );
            var destination = ( OilSpillDetectorCommandReplyObject )target;
            destination._rowVersion = _rowVersion;
            destination._oilSpillDetector = _oilSpillDetector;
            destination._timestamp = _timestamp;
            destination._command = _command;
            destination._status = _status;
            destination._message = _message;
        }

        public override bool Equals(BaseData<Kind>? other)
        {
            if (base.Equals(other))
            {
                var obj = ( OilSpillDetectorCommandReplyObject )other;
                if( obj._rowVersion != _rowVersion )
                {
                    return false;
                }
                if( obj._oilSpillDetector != _oilSpillDetector )
                {
                    return false;
                }
                if( obj._timestamp != _timestamp )
                {
                    return false;
                }
                if( obj._command != _command )
                {
                    return false;
                }
                if( obj._status != _status )
                {
                    return false;
                }
                if( obj._message != _message )
                {
                    return false;
                }
                return true;
            }
            return false;
        }

        public override bool IsOfType(Kind objectType)
        {
            if( objectType == Kind.OilSpillDetectorCommandReply )
            {
                return true;
            }
            return base.IsOfType( objectType );
        }

        public long RowVersion
        {
            get => _rowVersion;
            set
            {
                if( _rowVersion != value )
                {
                    _rowVersion = value;
                    OnPropertyChanged( );
                }
            }
        }
        public Guid OilSpillDetector
        {
            get => _oilSpillDetector;
            set
            {
                if( _oilSpillDetector != value )
                {
                    _oilSpillDetector = value;
                    OnPropertyChanged( );
                }
            }
        }
        public DateTime Timestamp
        {
            get => _timestamp;
            set
            {
                if( _timestamp != value )
                {
                    _timestamp = value;
                    OnPropertyChanged( );
                }
            }
        }
        public Guid Command
        {
            get => _command;
            set
            {
                if( _command != value )
                {
                    _command = value;
                    OnPropertyChanged( );
                }
            }
        }
        public Types.DeviceCommandReplyStatus Status
        {
            get => _status;
            set
            {
                if( _status != value )
                {
                    _status = value;
                    OnPropertyChanged( );
                }
            }
        }
        public string Message
        {
            get => _message;
            set
            {
                if( _message != value )
                {
                    _message = value;
                    OnPropertyChanged( );
                }
            }
        }

        public override void WriteTo( [ DisallowNull ] BinaryWriter destination )
        {
            base.WriteTo( destination );
            destination.Write( _rowVersion );
            destination.Write( _oilSpillDetector );
            destination.Write( _timestamp );
            destination.Write( _command );
            destination.Write( _status );
            destination.Write( _message );
        }

        public override void ReadFrom([DisallowNull] BinaryReader source)
        {
            base.ReadFrom( source );
            _rowVersion = source.ReadInt64( );
            _oilSpillDetector = source.ReadGuid( );
            _timestamp = source.ReadDateTime( );
            _command = source.ReadGuid( );
            _status = source.ReadEnum<Types.DeviceCommandReplyStatus>( );
            _message = source.ReadString( );
        }

    }
    public class OilSpillDetectorConfigurationObject : BaseDataGuid<Kind>
    {
        long _rowVersion = 0;
        Guid _oilSpillDetector;
        DateTime _timestamp;
        double _range = 0.0;
        double _startAngle = 0.0;
        double _endAngle = 0.0;
        double _startRange = 0.0;
        double _endRange = 0.0;
        int _updateRate = 0;
        TimeSpan _statusSendTime;
        bool _drawBorder = false;
        byte[] _colors = Array.Empty<byte>();
        bool _sendToServer = false;
        string _directory = string.Empty;
        bool _transparentWater = false;
        bool _savePictures = false;
        bool _sendAsTarget = false;
        bool _writeLog = false;
        string _targetFilePrefix = string.Empty;
        Guid _targetMMSI;
        double _latitude = 0.0;
        double _longitude = 0.0;
        bool _testSourceEnabled = false;
        string _proxyServer = string.Empty;
        bool _useProxyServer = false;
        public OilSpillDetectorConfigurationObject( )
        {
        }

        public OilSpillDetectorConfigurationObject( ObjectState objectState, Guid id, long rowVersion, Guid oilSpillDetector, DateTime timestamp, double range, double startAngle, double endAngle, double startRange, double endRange, int updateRate, TimeSpan statusSendTime, bool drawBorder, byte[] colors, bool sendToServer, string directory, bool transparentWater, bool savePictures, bool sendAsTarget, bool writeLog, string targetFilePrefix, Guid targetMMSI, double latitude, double longitude, bool testSourceEnabled, string proxyServer, bool useProxyServer )
            : base( objectState, id )
        {
            _rowVersion = rowVersion;
            _oilSpillDetector = oilSpillDetector;
            _timestamp = timestamp;
            _range = range;
            _startAngle = startAngle;
            _endAngle = endAngle;
            _startRange = startRange;
            _endRange = endRange;
            _updateRate = updateRate;
            _statusSendTime = statusSendTime;
            _drawBorder = drawBorder;
            _colors = colors;
            _sendToServer = sendToServer;
            _directory = directory;
            _transparentWater = transparentWater;
            _savePictures = savePictures;
            _sendAsTarget = sendAsTarget;
            _writeLog = writeLog;
            _targetFilePrefix = targetFilePrefix;
            _targetMMSI = targetMMSI;
            _latitude = latitude;
            _longitude = longitude;
            _testSourceEnabled = testSourceEnabled;
            _proxyServer = proxyServer;
            _useProxyServer = useProxyServer;
        }

        public override Kind GetObjectType()
        {
            return Kind.OilSpillDetectorConfiguration;
        }

        public override BaseData<Kind> Create()
        {
            return new OilSpillDetectorConfigurationObject( );
        }

        public override void AssignTo( BaseData<Kind> target )
        {
            base.AssignTo( target );
            var destination = ( OilSpillDetectorConfigurationObject )target;
            destination._rowVersion = _rowVersion;
            destination._oilSpillDetector = _oilSpillDetector;
            destination._timestamp = _timestamp;
            destination._range = _range;
            destination._startAngle = _startAngle;
            destination._endAngle = _endAngle;
            destination._startRange = _startRange;
            destination._endRange = _endRange;
            destination._updateRate = _updateRate;
            destination._statusSendTime = _statusSendTime;
            destination._drawBorder = _drawBorder;
            destination._colors = (byte[])_colors.Clone( );
            destination._sendToServer = _sendToServer;
            destination._directory = _directory;
            destination._transparentWater = _transparentWater;
            destination._savePictures = _savePictures;
            destination._sendAsTarget = _sendAsTarget;
            destination._writeLog = _writeLog;
            destination._targetFilePrefix = _targetFilePrefix;
            destination._targetMMSI = _targetMMSI;
            destination._latitude = _latitude;
            destination._longitude = _longitude;
            destination._testSourceEnabled = _testSourceEnabled;
            destination._proxyServer = _proxyServer;
            destination._useProxyServer = _useProxyServer;
        }

        public override bool Equals(BaseData<Kind>? other)
        {
            if (base.Equals(other))
            {
                var obj = ( OilSpillDetectorConfigurationObject )other;
                if( obj._rowVersion != _rowVersion )
                {
                    return false;
                }
                if( obj._oilSpillDetector != _oilSpillDetector )
                {
                    return false;
                }
                if( obj._timestamp != _timestamp )
                {
                    return false;
                }
                if( obj._range != _range )
                {
                    return false;
                }
                if( obj._startAngle != _startAngle )
                {
                    return false;
                }
                if( obj._endAngle != _endAngle )
                {
                    return false;
                }
                if( obj._startRange != _startRange )
                {
                    return false;
                }
                if( obj._endRange != _endRange )
                {
                    return false;
                }
                if( obj._updateRate != _updateRate )
                {
                    return false;
                }
                if( obj._statusSendTime != _statusSendTime )
                {
                    return false;
                }
                if( obj._drawBorder != _drawBorder )
                {
                    return false;
                }
                if( obj._colors.Equals( _colors ) == false )
                {
                    return false;
                }
                if( obj._sendToServer != _sendToServer )
                {
                    return false;
                }
                if( obj._directory != _directory )
                {
                    return false;
                }
                if( obj._transparentWater != _transparentWater )
                {
                    return false;
                }
                if( obj._savePictures != _savePictures )
                {
                    return false;
                }
                if( obj._sendAsTarget != _sendAsTarget )
                {
                    return false;
                }
                if( obj._writeLog != _writeLog )
                {
                    return false;
                }
                if( obj._targetFilePrefix != _targetFilePrefix )
                {
                    return false;
                }
                if( obj._targetMMSI != _targetMMSI )
                {
                    return false;
                }
                if( obj._latitude != _latitude )
                {
                    return false;
                }
                if( obj._longitude != _longitude )
                {
                    return false;
                }
                if( obj._testSourceEnabled != _testSourceEnabled )
                {
                    return false;
                }
                if( obj._proxyServer != _proxyServer )
                {
                    return false;
                }
                if( obj._useProxyServer != _useProxyServer )
                {
                    return false;
                }
                return true;
            }
            return false;
        }

        public override bool IsOfType(Kind objectType)
        {
            if( objectType == Kind.OilSpillDetectorConfiguration )
            {
                return true;
            }
            return base.IsOfType( objectType );
        }

        public long RowVersion
        {
            get => _rowVersion;
            set
            {
                if( _rowVersion != value )
                {
                    _rowVersion = value;
                    OnPropertyChanged( );
                }
            }
        }
        public Guid OilSpillDetector
        {
            get => _oilSpillDetector;
            set
            {
                if( _oilSpillDetector != value )
                {
                    _oilSpillDetector = value;
                    OnPropertyChanged( );
                }
            }
        }
        public DateTime Timestamp
        {
            get => _timestamp;
            set
            {
                if( _timestamp != value )
                {
                    _timestamp = value;
                    OnPropertyChanged( );
                }
            }
        }
        public double Range
        {
            get => _range;
            set
            {
                if( _range != value )
                {
                    _range = value;
                    OnPropertyChanged( );
                }
            }
        }
        public double StartAngle
        {
            get => _startAngle;
            set
            {
                if( _startAngle != value )
                {
                    _startAngle = value;
                    OnPropertyChanged( );
                }
            }
        }
        public double EndAngle
        {
            get => _endAngle;
            set
            {
                if( _endAngle != value )
                {
                    _endAngle = value;
                    OnPropertyChanged( );
                }
            }
        }
        public double StartRange
        {
            get => _startRange;
            set
            {
                if( _startRange != value )
                {
                    _startRange = value;
                    OnPropertyChanged( );
                }
            }
        }
        public double EndRange
        {
            get => _endRange;
            set
            {
                if( _endRange != value )
                {
                    _endRange = value;
                    OnPropertyChanged( );
                }
            }
        }
        public int UpdateRate
        {
            get => _updateRate;
            set
            {
                if( _updateRate != value )
                {
                    _updateRate = value;
                    OnPropertyChanged( );
                }
            }
        }
        public TimeSpan StatusSendTime
        {
            get => _statusSendTime;
            set
            {
                if( _statusSendTime != value )
                {
                    _statusSendTime = value;
                    OnPropertyChanged( );
                }
            }
        }
        public bool DrawBorder
        {
            get => _drawBorder;
            set
            {
                if( _drawBorder != value )
                {
                    _drawBorder = value;
                    OnPropertyChanged( );
                }
            }
        }
        public byte[] Colors
        {
            get => _colors;
            set
            {
                if( _colors != value )
                {
                    _colors = value;
                    OnPropertyChanged( );
                }
            }
        }
        public bool SendToServer
        {
            get => _sendToServer;
            set
            {
                if( _sendToServer != value )
                {
                    _sendToServer = value;
                    OnPropertyChanged( );
                }
            }
        }
        public string Directory
        {
            get => _directory;
            set
            {
                if( _directory != value )
                {
                    _directory = value;
                    OnPropertyChanged( );
                }
            }
        }
        public bool TransparentWater
        {
            get => _transparentWater;
            set
            {
                if( _transparentWater != value )
                {
                    _transparentWater = value;
                    OnPropertyChanged( );
                }
            }
        }
        public bool SavePictures
        {
            get => _savePictures;
            set
            {
                if( _savePictures != value )
                {
                    _savePictures = value;
                    OnPropertyChanged( );
                }
            }
        }
        public bool SendAsTarget
        {
            get => _sendAsTarget;
            set
            {
                if( _sendAsTarget != value )
                {
                    _sendAsTarget = value;
                    OnPropertyChanged( );
                }
            }
        }
        public bool WriteLog
        {
            get => _writeLog;
            set
            {
                if( _writeLog != value )
                {
                    _writeLog = value;
                    OnPropertyChanged( );
                }
            }
        }
        public string TargetFilePrefix
        {
            get => _targetFilePrefix;
            set
            {
                if( _targetFilePrefix != value )
                {
                    _targetFilePrefix = value;
                    OnPropertyChanged( );
                }
            }
        }
        public Guid TargetMMSI
        {
            get => _targetMMSI;
            set
            {
                if( _targetMMSI != value )
                {
                    _targetMMSI = value;
                    OnPropertyChanged( );
                }
            }
        }
        public double Latitude
        {
            get => _latitude;
            set
            {
                if( _latitude != value )
                {
                    _latitude = value;
                    OnPropertyChanged( );
                }
            }
        }
        public double Longitude
        {
            get => _longitude;
            set
            {
                if( _longitude != value )
                {
                    _longitude = value;
                    OnPropertyChanged( );
                }
            }
        }
        public bool TestSourceEnabled
        {
            get => _testSourceEnabled;
            set
            {
                if( _testSourceEnabled != value )
                {
                    _testSourceEnabled = value;
                    OnPropertyChanged( );
                }
            }
        }
        public string ProxyServer
        {
            get => _proxyServer;
            set
            {
                if( _proxyServer != value )
                {
                    _proxyServer = value;
                    OnPropertyChanged( );
                }
            }
        }
        public bool UseProxyServer
        {
            get => _useProxyServer;
            set
            {
                if( _useProxyServer != value )
                {
                    _useProxyServer = value;
                    OnPropertyChanged( );
                }
            }
        }

        public override void WriteTo( [ DisallowNull ] BinaryWriter destination )
        {
            base.WriteTo( destination );
            destination.Write( _rowVersion );
            destination.Write( _oilSpillDetector );
            destination.Write( _timestamp );
            destination.Write( _range );
            destination.Write( _startAngle );
            destination.Write( _endAngle );
            destination.Write( _startRange );
            destination.Write( _endRange );
            destination.Write( _updateRate );
            destination.Write( _statusSendTime );
            destination.Write( _drawBorder );
            destination.WriteArray( _colors );
            destination.Write( _sendToServer );
            destination.Write( _directory );
            destination.Write( _transparentWater );
            destination.Write( _savePictures );
            destination.Write( _sendAsTarget );
            destination.Write( _writeLog );
            destination.Write( _targetFilePrefix );
            destination.Write( _targetMMSI );
            destination.Write( _latitude );
            destination.Write( _longitude );
            destination.Write( _testSourceEnabled );
            destination.Write( _proxyServer );
            destination.Write( _useProxyServer );
        }

        public override void ReadFrom([DisallowNull] BinaryReader source)
        {
            base.ReadFrom( source );
            _rowVersion = source.ReadInt64( );
            _oilSpillDetector = source.ReadGuid( );
            _timestamp = source.ReadDateTime( );
            _range = source.ReadDouble( );
            _startAngle = source.ReadDouble( );
            _endAngle = source.ReadDouble( );
            _startRange = source.ReadDouble( );
            _endRange = source.ReadDouble( );
            _updateRate = source.ReadInt32( );
            _statusSendTime = source.ReadTimeSpan( );
            _drawBorder = source.ReadBoolean( );
            _colors = source.ReadByteArray( );
            _sendToServer = source.ReadBoolean( );
            _directory = source.ReadString( );
            _transparentWater = source.ReadBoolean( );
            _savePictures = source.ReadBoolean( );
            _sendAsTarget = source.ReadBoolean( );
            _writeLog = source.ReadBoolean( );
            _targetFilePrefix = source.ReadString( );
            _targetMMSI = source.ReadGuid( );
            _latitude = source.ReadDouble( );
            _longitude = source.ReadDouble( );
            _testSourceEnabled = source.ReadBoolean( );
            _proxyServer = source.ReadString( );
            _useProxyServer = source.ReadBoolean( );
        }

    }
    public class Position2DTimeseriesValueObject : BaseDataGuid<Kind>
    {
        long _rowVersion = 0;
        Guid _timeseries;
        DateTime _timestamp;
        double? _x;
        double? _y;
        public Position2DTimeseriesValueObject( )
        {
        }

        public Position2DTimeseriesValueObject( ObjectState objectState, Guid id, long rowVersion, Guid timeseries, DateTime timestamp, double? x, double? y )
            : base( objectState, id )
        {
            _rowVersion = rowVersion;
            _timeseries = timeseries;
            _timestamp = timestamp;
            _x = x;
            _y = y;
        }

        public override Kind GetObjectType()
        {
            return Kind.Position2DTimeseriesValue;
        }

        public override BaseData<Kind> Create()
        {
            return new Position2DTimeseriesValueObject( );
        }

        public override void AssignTo( BaseData<Kind> target )
        {
            base.AssignTo( target );
            var destination = ( Position2DTimeseriesValueObject )target;
            destination._rowVersion = _rowVersion;
            destination._timeseries = _timeseries;
            destination._timestamp = _timestamp;
            destination._x = _x;
            destination._y = _y;
        }

        public override bool Equals(BaseData<Kind>? other)
        {
            if (base.Equals(other))
            {
                var obj = ( Position2DTimeseriesValueObject )other;
                if( obj._rowVersion != _rowVersion )
                {
                    return false;
                }
                if( obj._timeseries != _timeseries )
                {
                    return false;
                }
                if( obj._timestamp != _timestamp )
                {
                    return false;
                }
                if( obj._x != _x )
                {
                    return false;
                }
                if( obj._y != _y )
                {
                    return false;
                }
                return true;
            }
            return false;
        }

        public override bool IsOfType(Kind objectType)
        {
            if( objectType == Kind.Position2DTimeseriesValue )
            {
                return true;
            }
            return base.IsOfType( objectType );
        }

        public long RowVersion
        {
            get => _rowVersion;
            set
            {
                if( _rowVersion != value )
                {
                    _rowVersion = value;
                    OnPropertyChanged( );
                }
            }
        }
        public Guid Timeseries
        {
            get => _timeseries;
            set
            {
                if( _timeseries != value )
                {
                    _timeseries = value;
                    OnPropertyChanged( );
                }
            }
        }
        public DateTime Timestamp
        {
            get => _timestamp;
            set
            {
                if( _timestamp != value )
                {
                    _timestamp = value;
                    OnPropertyChanged( );
                }
            }
        }
        public double? X
        {
            get => _x;
            set
            {
                if( _x != value )
                {
                    _x = value;
                    OnPropertyChanged( );
                }
            }
        }
        public double? Y
        {
            get => _y;
            set
            {
                if( _y != value )
                {
                    _y = value;
                    OnPropertyChanged( );
                }
            }
        }

        public override void WriteTo( [ DisallowNull ] BinaryWriter destination )
        {
            base.WriteTo( destination );
            destination.Write( _rowVersion );
            destination.Write( _timeseries );
            destination.Write( _timestamp );
            destination.Write( _x );
            destination.Write( _y );
        }

        public override void ReadFrom([DisallowNull] BinaryReader source)
        {
            base.ReadFrom( source );
            _rowVersion = source.ReadInt64( );
            _timeseries = source.ReadGuid( );
            _timestamp = source.ReadDateTime( );
            _x = source.ReadNullableDouble( );
            _y = source.ReadNullableDouble( );
        }

    }
    public class Position3DTimeseriesValueObject : BaseDataGuid<Kind>
    {
        long _rowVersion = 0;
        Guid _timeseries;
        DateTime _timestamp;
        double? _x;
        double? _y;
        double? _z;
        public Position3DTimeseriesValueObject( )
        {
        }

        public Position3DTimeseriesValueObject( ObjectState objectState, Guid id, long rowVersion, Guid timeseries, DateTime timestamp, double? x, double? y, double? z )
            : base( objectState, id )
        {
            _rowVersion = rowVersion;
            _timeseries = timeseries;
            _timestamp = timestamp;
            _x = x;
            _y = y;
            _z = z;
        }

        public override Kind GetObjectType()
        {
            return Kind.Position3DTimeseriesValue;
        }

        public override BaseData<Kind> Create()
        {
            return new Position3DTimeseriesValueObject( );
        }

        public override void AssignTo( BaseData<Kind> target )
        {
            base.AssignTo( target );
            var destination = ( Position3DTimeseriesValueObject )target;
            destination._rowVersion = _rowVersion;
            destination._timeseries = _timeseries;
            destination._timestamp = _timestamp;
            destination._x = _x;
            destination._y = _y;
            destination._z = _z;
        }

        public override bool Equals(BaseData<Kind>? other)
        {
            if (base.Equals(other))
            {
                var obj = ( Position3DTimeseriesValueObject )other;
                if( obj._rowVersion != _rowVersion )
                {
                    return false;
                }
                if( obj._timeseries != _timeseries )
                {
                    return false;
                }
                if( obj._timestamp != _timestamp )
                {
                    return false;
                }
                if( obj._x != _x )
                {
                    return false;
                }
                if( obj._y != _y )
                {
                    return false;
                }
                if( obj._z != _z )
                {
                    return false;
                }
                return true;
            }
            return false;
        }

        public override bool IsOfType(Kind objectType)
        {
            if( objectType == Kind.Position3DTimeseriesValue )
            {
                return true;
            }
            return base.IsOfType( objectType );
        }

        public long RowVersion
        {
            get => _rowVersion;
            set
            {
                if( _rowVersion != value )
                {
                    _rowVersion = value;
                    OnPropertyChanged( );
                }
            }
        }
        public Guid Timeseries
        {
            get => _timeseries;
            set
            {
                if( _timeseries != value )
                {
                    _timeseries = value;
                    OnPropertyChanged( );
                }
            }
        }
        public DateTime Timestamp
        {
            get => _timestamp;
            set
            {
                if( _timestamp != value )
                {
                    _timestamp = value;
                    OnPropertyChanged( );
                }
            }
        }
        public double? X
        {
            get => _x;
            set
            {
                if( _x != value )
                {
                    _x = value;
                    OnPropertyChanged( );
                }
            }
        }
        public double? Y
        {
            get => _y;
            set
            {
                if( _y != value )
                {
                    _y = value;
                    OnPropertyChanged( );
                }
            }
        }
        public double? Z
        {
            get => _z;
            set
            {
                if( _z != value )
                {
                    _z = value;
                    OnPropertyChanged( );
                }
            }
        }

        public override void WriteTo( [ DisallowNull ] BinaryWriter destination )
        {
            base.WriteTo( destination );
            destination.Write( _rowVersion );
            destination.Write( _timeseries );
            destination.Write( _timestamp );
            destination.Write( _x );
            destination.Write( _y );
            destination.Write( _z );
        }

        public override void ReadFrom([DisallowNull] BinaryReader source)
        {
            base.ReadFrom( source );
            _rowVersion = source.ReadInt64( );
            _timeseries = source.ReadGuid( );
            _timestamp = source.ReadDateTime( );
            _x = source.ReadNullableDouble( );
            _y = source.ReadNullableDouble( );
            _z = source.ReadNullableDouble( );
        }

    }
    public class ProcessTrackValueResultObject : BaseDataGuid<Kind>
    {
        long _rowVersion = 0;
        bool _createdNewTrack = false;
        Guid _trackId;
        public ProcessTrackValueResultObject( )
        {
        }

        public ProcessTrackValueResultObject( ObjectState objectState, Guid id, long rowVersion, bool createdNewTrack, Guid trackId )
            : base( objectState, id )
        {
            _rowVersion = rowVersion;
            _createdNewTrack = createdNewTrack;
            _trackId = trackId;
        }

        public override Kind GetObjectType()
        {
            return Kind.ProcessTrackValueResult;
        }

        public override BaseData<Kind> Create()
        {
            return new ProcessTrackValueResultObject( );
        }

        public override void AssignTo( BaseData<Kind> target )
        {
            base.AssignTo( target );
            var destination = ( ProcessTrackValueResultObject )target;
            destination._rowVersion = _rowVersion;
            destination._createdNewTrack = _createdNewTrack;
            destination._trackId = _trackId;
        }

        public override bool Equals(BaseData<Kind>? other)
        {
            if (base.Equals(other))
            {
                var obj = ( ProcessTrackValueResultObject )other;
                if( obj._rowVersion != _rowVersion )
                {
                    return false;
                }
                if( obj._createdNewTrack != _createdNewTrack )
                {
                    return false;
                }
                if( obj._trackId != _trackId )
                {
                    return false;
                }
                return true;
            }
            return false;
        }

        public override bool IsOfType(Kind objectType)
        {
            if( objectType == Kind.ProcessTrackValueResult )
            {
                return true;
            }
            return base.IsOfType( objectType );
        }

        public long RowVersion
        {
            get => _rowVersion;
            set
            {
                if( _rowVersion != value )
                {
                    _rowVersion = value;
                    OnPropertyChanged( );
                }
            }
        }
        public bool CreatedNewTrack
        {
            get => _createdNewTrack;
            set
            {
                if( _createdNewTrack != value )
                {
                    _createdNewTrack = value;
                    OnPropertyChanged( );
                }
            }
        }
        public Guid TrackId
        {
            get => _trackId;
            set
            {
                if( _trackId != value )
                {
                    _trackId = value;
                    OnPropertyChanged( );
                }
            }
        }

        public override void WriteTo( [ DisallowNull ] BinaryWriter destination )
        {
            base.WriteTo( destination );
            destination.Write( _rowVersion );
            destination.Write( _createdNewTrack );
            destination.Write( _trackId );
        }

        public override void ReadFrom([DisallowNull] BinaryReader source)
        {
            base.ReadFrom( source );
            _rowVersion = source.ReadInt64( );
            _createdNewTrack = source.ReadBoolean( );
            _trackId = source.ReadGuid( );
        }

    }
    public abstract class PropertyObject : BaseDataGuid<Kind>
    {
        long _rowVersion = 0;
        Guid _element;
        Guid _definition;
        protected PropertyObject( )
        {
        }

        protected PropertyObject( ObjectState objectState, Guid id, long rowVersion, Guid element, Guid definition )
            : base( objectState, id )
        {
            _rowVersion = rowVersion;
            _element = element;
            _definition = definition;
        }

        public override void AssignTo( BaseData<Kind> target )
        {
            base.AssignTo( target );
            var destination = ( PropertyObject )target;
            destination._rowVersion = _rowVersion;
            destination._element = _element;
            destination._definition = _definition;
        }

        public override bool Equals(BaseData<Kind>? other)
        {
            if (base.Equals(other))
            {
                var obj = ( PropertyObject )other;
                if( obj._rowVersion != _rowVersion )
                {
                    return false;
                }
                if( obj._element != _element )
                {
                    return false;
                }
                if( obj._definition != _definition )
                {
                    return false;
                }
                return true;
            }
            return false;
        }

        public override bool IsOfType(Kind objectType)
        {
            if( objectType == Kind.Property )
            {
                return true;
            }
            return base.IsOfType( objectType );
        }

        public long RowVersion
        {
            get => _rowVersion;
            set
            {
                if( _rowVersion != value )
                {
                    _rowVersion = value;
                    OnPropertyChanged( );
                }
            }
        }
        public Guid Element
        {
            get => _element;
            set
            {
                if( _element != value )
                {
                    _element = value;
                    OnPropertyChanged( );
                }
            }
        }
        public Guid Definition
        {
            get => _definition;
            set
            {
                if( _definition != value )
                {
                    _definition = value;
                    OnPropertyChanged( );
                }
            }
        }

        public override void WriteTo( [ DisallowNull ] BinaryWriter destination )
        {
            base.WriteTo( destination );
            destination.Write( _rowVersion );
            destination.Write( _element );
            destination.Write( _definition );
        }

        public override void ReadFrom([DisallowNull] BinaryReader source)
        {
            base.ReadFrom( source );
            _rowVersion = source.ReadInt64( );
            _element = source.ReadGuid( );
            _definition = source.ReadGuid( );
        }

    }
    public class BinaryPropertyObject : PropertyObject
    {
        byte[] _value = Array.Empty<byte>();
        public BinaryPropertyObject( )
        {
        }

        public BinaryPropertyObject( ObjectState objectState, Guid id, long rowVersion, Guid element, Guid definition, byte[] value__ )
            : base( objectState, id, rowVersion, element, definition )
        {
            _value = value__;
        }

        public override Kind GetObjectType()
        {
            return Kind.BinaryProperty;
        }

        public override BaseData<Kind> Create()
        {
            return new BinaryPropertyObject( );
        }

        public override void AssignTo( BaseData<Kind> target )
        {
            base.AssignTo( target );
            var destination = ( BinaryPropertyObject )target;
            destination._value = (byte[])_value.Clone( );
        }

        public override bool Equals(BaseData<Kind>? other)
        {
            if (base.Equals(other))
            {
                var obj = ( BinaryPropertyObject )other;
                if( obj._value.Equals( _value ) == false )
                {
                    return false;
                }
                return true;
            }
            return false;
        }

        public override bool IsOfType(Kind objectType)
        {
            if( objectType == Kind.BinaryProperty )
            {
                return true;
            }
            return base.IsOfType( objectType );
        }

        public byte[] Value
        {
            get => _value;
            set
            {
                if( _value != value )
                {
                    _value = value;
                    OnPropertyChanged( );
                }
            }
        }

        public override void WriteTo( [ DisallowNull ] BinaryWriter destination )
        {
            base.WriteTo( destination );
            destination.WriteArray( _value );
        }

        public override void ReadFrom([DisallowNull] BinaryReader source)
        {
            base.ReadFrom( source );
            _value = source.ReadByteArray( );
        }

    }
    public class BooleanPropertyObject : PropertyObject
    {
        bool _value = false;
        public BooleanPropertyObject( )
        {
        }

        public BooleanPropertyObject( ObjectState objectState, Guid id, long rowVersion, Guid element, Guid definition, bool value__ )
            : base( objectState, id, rowVersion, element, definition )
        {
            _value = value__;
        }

        public override Kind GetObjectType()
        {
            return Kind.BooleanProperty;
        }

        public override BaseData<Kind> Create()
        {
            return new BooleanPropertyObject( );
        }

        public override void AssignTo( BaseData<Kind> target )
        {
            base.AssignTo( target );
            var destination = ( BooleanPropertyObject )target;
            destination._value = _value;
        }

        public override bool Equals(BaseData<Kind>? other)
        {
            if (base.Equals(other))
            {
                var obj = ( BooleanPropertyObject )other;
                if( obj._value != _value )
                {
                    return false;
                }
                return true;
            }
            return false;
        }

        public override bool IsOfType(Kind objectType)
        {
            if( objectType == Kind.BooleanProperty )
            {
                return true;
            }
            return base.IsOfType( objectType );
        }

        public bool Value
        {
            get => _value;
            set
            {
                if( _value != value )
                {
                    _value = value;
                    OnPropertyChanged( );
                }
            }
        }

        public override void WriteTo( [ DisallowNull ] BinaryWriter destination )
        {
            base.WriteTo( destination );
            destination.Write( _value );
        }

        public override void ReadFrom([DisallowNull] BinaryReader source)
        {
            base.ReadFrom( source );
            _value = source.ReadBoolean( );
        }

    }
    public class BytePropertyObject : PropertyObject
    {
        byte _value = 0;
        public BytePropertyObject( )
        {
        }

        public BytePropertyObject( ObjectState objectState, Guid id, long rowVersion, Guid element, Guid definition, byte value__ )
            : base( objectState, id, rowVersion, element, definition )
        {
            _value = value__;
        }

        public override Kind GetObjectType()
        {
            return Kind.ByteProperty;
        }

        public override BaseData<Kind> Create()
        {
            return new BytePropertyObject( );
        }

        public override void AssignTo( BaseData<Kind> target )
        {
            base.AssignTo( target );
            var destination = ( BytePropertyObject )target;
            destination._value = _value;
        }

        public override bool Equals(BaseData<Kind>? other)
        {
            if (base.Equals(other))
            {
                var obj = ( BytePropertyObject )other;
                if( obj._value != _value )
                {
                    return false;
                }
                return true;
            }
            return false;
        }

        public override bool IsOfType(Kind objectType)
        {
            if( objectType == Kind.ByteProperty )
            {
                return true;
            }
            return base.IsOfType( objectType );
        }

        public byte Value
        {
            get => _value;
            set
            {
                if( _value != value )
                {
                    _value = value;
                    OnPropertyChanged( );
                }
            }
        }

        public override void WriteTo( [ DisallowNull ] BinaryWriter destination )
        {
            base.WriteTo( destination );
            destination.Write( _value );
        }

        public override void ReadFrom([DisallowNull] BinaryReader source)
        {
            base.ReadFrom( source );
            _value = source.ReadByte( );
        }

    }
    public class DateTimePropertyObject : PropertyObject
    {
        DateTime _value;
        public DateTimePropertyObject( )
        {
        }

        public DateTimePropertyObject( ObjectState objectState, Guid id, long rowVersion, Guid element, Guid definition, DateTime value__ )
            : base( objectState, id, rowVersion, element, definition )
        {
            _value = value__;
        }

        public override Kind GetObjectType()
        {
            return Kind.DateTimeProperty;
        }

        public override BaseData<Kind> Create()
        {
            return new DateTimePropertyObject( );
        }

        public override void AssignTo( BaseData<Kind> target )
        {
            base.AssignTo( target );
            var destination = ( DateTimePropertyObject )target;
            destination._value = _value;
        }

        public override bool Equals(BaseData<Kind>? other)
        {
            if (base.Equals(other))
            {
                var obj = ( DateTimePropertyObject )other;
                if( obj._value != _value )
                {
                    return false;
                }
                return true;
            }
            return false;
        }

        public override bool IsOfType(Kind objectType)
        {
            if( objectType == Kind.DateTimeProperty )
            {
                return true;
            }
            return base.IsOfType( objectType );
        }

        public DateTime Value
        {
            get => _value;
            set
            {
                if( _value != value )
                {
                    _value = value;
                    OnPropertyChanged( );
                }
            }
        }

        public override void WriteTo( [ DisallowNull ] BinaryWriter destination )
        {
            base.WriteTo( destination );
            destination.Write( _value );
        }

        public override void ReadFrom([DisallowNull] BinaryReader source)
        {
            base.ReadFrom( source );
            _value = source.ReadDateTime( );
        }

    }
    public class DoublePropertyObject : PropertyObject
    {
        double _value = 0.0;
        public DoublePropertyObject( )
        {
        }

        public DoublePropertyObject( ObjectState objectState, Guid id, long rowVersion, Guid element, Guid definition, double value__ )
            : base( objectState, id, rowVersion, element, definition )
        {
            _value = value__;
        }

        public override Kind GetObjectType()
        {
            return Kind.DoubleProperty;
        }

        public override BaseData<Kind> Create()
        {
            return new DoublePropertyObject( );
        }

        public override void AssignTo( BaseData<Kind> target )
        {
            base.AssignTo( target );
            var destination = ( DoublePropertyObject )target;
            destination._value = _value;
        }

        public override bool Equals(BaseData<Kind>? other)
        {
            if (base.Equals(other))
            {
                var obj = ( DoublePropertyObject )other;
                if( obj._value != _value )
                {
                    return false;
                }
                return true;
            }
            return false;
        }

        public override bool IsOfType(Kind objectType)
        {
            if( objectType == Kind.DoubleProperty )
            {
                return true;
            }
            return base.IsOfType( objectType );
        }

        public double Value
        {
            get => _value;
            set
            {
                if( _value != value )
                {
                    _value = value;
                    OnPropertyChanged( );
                }
            }
        }

        public override void WriteTo( [ DisallowNull ] BinaryWriter destination )
        {
            base.WriteTo( destination );
            destination.Write( _value );
        }

        public override void ReadFrom([DisallowNull] BinaryReader source)
        {
            base.ReadFrom( source );
            _value = source.ReadDouble( );
        }

    }
    public class GuidPropertyObject : PropertyObject
    {
        Guid _value;
        public GuidPropertyObject( )
        {
        }

        public GuidPropertyObject( ObjectState objectState, Guid id, long rowVersion, Guid element, Guid definition, Guid value__ )
            : base( objectState, id, rowVersion, element, definition )
        {
            _value = value__;
        }

        public override Kind GetObjectType()
        {
            return Kind.GuidProperty;
        }

        public override BaseData<Kind> Create()
        {
            return new GuidPropertyObject( );
        }

        public override void AssignTo( BaseData<Kind> target )
        {
            base.AssignTo( target );
            var destination = ( GuidPropertyObject )target;
            destination._value = _value;
        }

        public override bool Equals(BaseData<Kind>? other)
        {
            if (base.Equals(other))
            {
                var obj = ( GuidPropertyObject )other;
                if( obj._value != _value )
                {
                    return false;
                }
                return true;
            }
            return false;
        }

        public override bool IsOfType(Kind objectType)
        {
            if( objectType == Kind.GuidProperty )
            {
                return true;
            }
            return base.IsOfType( objectType );
        }

        public Guid Value
        {
            get => _value;
            set
            {
                if( _value != value )
                {
                    _value = value;
                    OnPropertyChanged( );
                }
            }
        }

        public override void WriteTo( [ DisallowNull ] BinaryWriter destination )
        {
            base.WriteTo( destination );
            destination.Write( _value );
        }

        public override void ReadFrom([DisallowNull] BinaryReader source)
        {
            base.ReadFrom( source );
            _value = source.ReadGuid( );
        }

    }
    public class Int16PropertyObject : PropertyObject
    {
        short _value = 0;
        public Int16PropertyObject( )
        {
        }

        public Int16PropertyObject( ObjectState objectState, Guid id, long rowVersion, Guid element, Guid definition, short value__ )
            : base( objectState, id, rowVersion, element, definition )
        {
            _value = value__;
        }

        public override Kind GetObjectType()
        {
            return Kind.Int16Property;
        }

        public override BaseData<Kind> Create()
        {
            return new Int16PropertyObject( );
        }

        public override void AssignTo( BaseData<Kind> target )
        {
            base.AssignTo( target );
            var destination = ( Int16PropertyObject )target;
            destination._value = _value;
        }

        public override bool Equals(BaseData<Kind>? other)
        {
            if (base.Equals(other))
            {
                var obj = ( Int16PropertyObject )other;
                if( obj._value != _value )
                {
                    return false;
                }
                return true;
            }
            return false;
        }

        public override bool IsOfType(Kind objectType)
        {
            if( objectType == Kind.Int16Property )
            {
                return true;
            }
            return base.IsOfType( objectType );
        }

        public short Value
        {
            get => _value;
            set
            {
                if( _value != value )
                {
                    _value = value;
                    OnPropertyChanged( );
                }
            }
        }

        public override void WriteTo( [ DisallowNull ] BinaryWriter destination )
        {
            base.WriteTo( destination );
            destination.Write( _value );
        }

        public override void ReadFrom([DisallowNull] BinaryReader source)
        {
            base.ReadFrom( source );
            _value = source.ReadInt16( );
        }

    }
    public class Int32PropertyObject : PropertyObject
    {
        int _value = 0;
        public Int32PropertyObject( )
        {
        }

        public Int32PropertyObject( ObjectState objectState, Guid id, long rowVersion, Guid element, Guid definition, int value__ )
            : base( objectState, id, rowVersion, element, definition )
        {
            _value = value__;
        }

        public override Kind GetObjectType()
        {
            return Kind.Int32Property;
        }

        public override BaseData<Kind> Create()
        {
            return new Int32PropertyObject( );
        }

        public override void AssignTo( BaseData<Kind> target )
        {
            base.AssignTo( target );
            var destination = ( Int32PropertyObject )target;
            destination._value = _value;
        }

        public override bool Equals(BaseData<Kind>? other)
        {
            if (base.Equals(other))
            {
                var obj = ( Int32PropertyObject )other;
                if( obj._value != _value )
                {
                    return false;
                }
                return true;
            }
            return false;
        }

        public override bool IsOfType(Kind objectType)
        {
            if( objectType == Kind.Int32Property )
            {
                return true;
            }
            return base.IsOfType( objectType );
        }

        public int Value
        {
            get => _value;
            set
            {
                if( _value != value )
                {
                    _value = value;
                    OnPropertyChanged( );
                }
            }
        }

        public override void WriteTo( [ DisallowNull ] BinaryWriter destination )
        {
            base.WriteTo( destination );
            destination.Write( _value );
        }

        public override void ReadFrom([DisallowNull] BinaryReader source)
        {
            base.ReadFrom( source );
            _value = source.ReadInt32( );
        }

    }
    public class Int64PropertyObject : PropertyObject
    {
        long _value = 0;
        public Int64PropertyObject( )
        {
        }

        public Int64PropertyObject( ObjectState objectState, Guid id, long rowVersion, Guid element, Guid definition, long value__ )
            : base( objectState, id, rowVersion, element, definition )
        {
            _value = value__;
        }

        public override Kind GetObjectType()
        {
            return Kind.Int64Property;
        }

        public override BaseData<Kind> Create()
        {
            return new Int64PropertyObject( );
        }

        public override void AssignTo( BaseData<Kind> target )
        {
            base.AssignTo( target );
            var destination = ( Int64PropertyObject )target;
            destination._value = _value;
        }

        public override bool Equals(BaseData<Kind>? other)
        {
            if (base.Equals(other))
            {
                var obj = ( Int64PropertyObject )other;
                if( obj._value != _value )
                {
                    return false;
                }
                return true;
            }
            return false;
        }

        public override bool IsOfType(Kind objectType)
        {
            if( objectType == Kind.Int64Property )
            {
                return true;
            }
            return base.IsOfType( objectType );
        }

        public long Value
        {
            get => _value;
            set
            {
                if( _value != value )
                {
                    _value = value;
                    OnPropertyChanged( );
                }
            }
        }

        public override void WriteTo( [ DisallowNull ] BinaryWriter destination )
        {
            base.WriteTo( destination );
            destination.Write( _value );
        }

        public override void ReadFrom([DisallowNull] BinaryReader source)
        {
            base.ReadFrom( source );
            _value = source.ReadInt64( );
        }

    }
    public class ReferencePropertyObject : PropertyObject
    {
        Guid _value;
        public ReferencePropertyObject( )
        {
        }

        public ReferencePropertyObject( ObjectState objectState, Guid id, long rowVersion, Guid element, Guid definition, Guid value__ )
            : base( objectState, id, rowVersion, element, definition )
        {
            _value = value__;
        }

        public override Kind GetObjectType()
        {
            return Kind.ReferenceProperty;
        }

        public override BaseData<Kind> Create()
        {
            return new ReferencePropertyObject( );
        }

        public override void AssignTo( BaseData<Kind> target )
        {
            base.AssignTo( target );
            var destination = ( ReferencePropertyObject )target;
            destination._value = _value;
        }

        public override bool Equals(BaseData<Kind>? other)
        {
            if (base.Equals(other))
            {
                var obj = ( ReferencePropertyObject )other;
                if( obj._value != _value )
                {
                    return false;
                }
                return true;
            }
            return false;
        }

        public override bool IsOfType(Kind objectType)
        {
            if( objectType == Kind.ReferenceProperty )
            {
                return true;
            }
            return base.IsOfType( objectType );
        }

        public Guid Value
        {
            get => _value;
            set
            {
                if( _value != value )
                {
                    _value = value;
                    OnPropertyChanged( );
                }
            }
        }

        public override void WriteTo( [ DisallowNull ] BinaryWriter destination )
        {
            base.WriteTo( destination );
            destination.Write( _value );
        }

        public override void ReadFrom([DisallowNull] BinaryReader source)
        {
            base.ReadFrom( source );
            _value = source.ReadGuid( );
        }

    }
    public class SBytePropertyObject : PropertyObject
    {
        sbyte _value = 0;
        public SBytePropertyObject( )
        {
        }

        public SBytePropertyObject( ObjectState objectState, Guid id, long rowVersion, Guid element, Guid definition, sbyte value__ )
            : base( objectState, id, rowVersion, element, definition )
        {
            _value = value__;
        }

        public override Kind GetObjectType()
        {
            return Kind.SByteProperty;
        }

        public override BaseData<Kind> Create()
        {
            return new SBytePropertyObject( );
        }

        public override void AssignTo( BaseData<Kind> target )
        {
            base.AssignTo( target );
            var destination = ( SBytePropertyObject )target;
            destination._value = _value;
        }

        public override bool Equals(BaseData<Kind>? other)
        {
            if (base.Equals(other))
            {
                var obj = ( SBytePropertyObject )other;
                if( obj._value != _value )
                {
                    return false;
                }
                return true;
            }
            return false;
        }

        public override bool IsOfType(Kind objectType)
        {
            if( objectType == Kind.SByteProperty )
            {
                return true;
            }
            return base.IsOfType( objectType );
        }

        public sbyte Value
        {
            get => _value;
            set
            {
                if( _value != value )
                {
                    _value = value;
                    OnPropertyChanged( );
                }
            }
        }

        public override void WriteTo( [ DisallowNull ] BinaryWriter destination )
        {
            base.WriteTo( destination );
            destination.Write( _value );
        }

        public override void ReadFrom([DisallowNull] BinaryReader source)
        {
            base.ReadFrom( source );
            _value = source.ReadSByte( );
        }

    }
    public class SinglePropertyObject : PropertyObject
    {
        float _value = 0.0f;
        public SinglePropertyObject( )
        {
        }

        public SinglePropertyObject( ObjectState objectState, Guid id, long rowVersion, Guid element, Guid definition, float value__ )
            : base( objectState, id, rowVersion, element, definition )
        {
            _value = value__;
        }

        public override Kind GetObjectType()
        {
            return Kind.SingleProperty;
        }

        public override BaseData<Kind> Create()
        {
            return new SinglePropertyObject( );
        }

        public override void AssignTo( BaseData<Kind> target )
        {
            base.AssignTo( target );
            var destination = ( SinglePropertyObject )target;
            destination._value = _value;
        }

        public override bool Equals(BaseData<Kind>? other)
        {
            if (base.Equals(other))
            {
                var obj = ( SinglePropertyObject )other;
                if( obj._value != _value )
                {
                    return false;
                }
                return true;
            }
            return false;
        }

        public override bool IsOfType(Kind objectType)
        {
            if( objectType == Kind.SingleProperty )
            {
                return true;
            }
            return base.IsOfType( objectType );
        }

        public float Value
        {
            get => _value;
            set
            {
                if( _value != value )
                {
                    _value = value;
                    OnPropertyChanged( );
                }
            }
        }

        public override void WriteTo( [ DisallowNull ] BinaryWriter destination )
        {
            base.WriteTo( destination );
            destination.Write( _value );
        }

        public override void ReadFrom([DisallowNull] BinaryReader source)
        {
            base.ReadFrom( source );
            _value = source.ReadSingle( );
        }

    }
    public class StringPropertyObject : PropertyObject
    {
        string _value = string.Empty;
        public StringPropertyObject( )
        {
        }

        public StringPropertyObject( ObjectState objectState, Guid id, long rowVersion, Guid element, Guid definition, string value__ )
            : base( objectState, id, rowVersion, element, definition )
        {
            _value = value__;
        }

        public override Kind GetObjectType()
        {
            return Kind.StringProperty;
        }

        public override BaseData<Kind> Create()
        {
            return new StringPropertyObject( );
        }

        public override void AssignTo( BaseData<Kind> target )
        {
            base.AssignTo( target );
            var destination = ( StringPropertyObject )target;
            destination._value = _value;
        }

        public override bool Equals(BaseData<Kind>? other)
        {
            if (base.Equals(other))
            {
                var obj = ( StringPropertyObject )other;
                if( obj._value != _value )
                {
                    return false;
                }
                return true;
            }
            return false;
        }

        public override bool IsOfType(Kind objectType)
        {
            if( objectType == Kind.StringProperty )
            {
                return true;
            }
            return base.IsOfType( objectType );
        }

        public string Value
        {
            get => _value;
            set
            {
                if( _value != value )
                {
                    _value = value;
                    OnPropertyChanged( );
                }
            }
        }

        public override void WriteTo( [ DisallowNull ] BinaryWriter destination )
        {
            base.WriteTo( destination );
            destination.Write( _value );
        }

        public override void ReadFrom([DisallowNull] BinaryReader source)
        {
            base.ReadFrom( source );
            _value = source.ReadString( );
        }

    }
    public abstract class TimeseriesPropertyObject : PropertyObject
    {
        protected TimeseriesPropertyObject( )
        {
        }

        protected TimeseriesPropertyObject( ObjectState objectState, Guid id, long rowVersion, Guid element, Guid definition )
            : base( objectState, id, rowVersion, element, definition )
        {
        }

        public override bool IsOfType(Kind objectType)
        {
            if( objectType == Kind.TimeseriesProperty )
            {
                return true;
            }
            return base.IsOfType( objectType );
        }

    }
    public class BinaryTimeseriesPropertyObject : TimeseriesPropertyObject
    {
        Guid _timeseries;
        public BinaryTimeseriesPropertyObject( )
        {
        }

        public BinaryTimeseriesPropertyObject( ObjectState objectState, Guid id, long rowVersion, Guid element, Guid definition, Guid timeseries )
            : base( objectState, id, rowVersion, element, definition )
        {
            _timeseries = timeseries;
        }

        public override Kind GetObjectType()
        {
            return Kind.BinaryTimeseriesProperty;
        }

        public override BaseData<Kind> Create()
        {
            return new BinaryTimeseriesPropertyObject( );
        }

        public override void AssignTo( BaseData<Kind> target )
        {
            base.AssignTo( target );
            var destination = ( BinaryTimeseriesPropertyObject )target;
            destination._timeseries = _timeseries;
        }

        public override bool Equals(BaseData<Kind>? other)
        {
            if (base.Equals(other))
            {
                var obj = ( BinaryTimeseriesPropertyObject )other;
                if( obj._timeseries != _timeseries )
                {
                    return false;
                }
                return true;
            }
            return false;
        }

        public override bool IsOfType(Kind objectType)
        {
            if( objectType == Kind.BinaryTimeseriesProperty )
            {
                return true;
            }
            return base.IsOfType( objectType );
        }

        public Guid Timeseries
        {
            get => _timeseries;
            set
            {
                if( _timeseries != value )
                {
                    _timeseries = value;
                    OnPropertyChanged( );
                }
            }
        }

        public override void WriteTo( [ DisallowNull ] BinaryWriter destination )
        {
            base.WriteTo( destination );
            destination.Write( _timeseries );
        }

        public override void ReadFrom([DisallowNull] BinaryReader source)
        {
            base.ReadFrom( source );
            _timeseries = source.ReadGuid( );
        }

    }
    public class BooleanTimeseriesPropertyObject : TimeseriesPropertyObject
    {
        Guid _timeseries;
        public BooleanTimeseriesPropertyObject( )
        {
        }

        public BooleanTimeseriesPropertyObject( ObjectState objectState, Guid id, long rowVersion, Guid element, Guid definition, Guid timeseries )
            : base( objectState, id, rowVersion, element, definition )
        {
            _timeseries = timeseries;
        }

        public override Kind GetObjectType()
        {
            return Kind.BooleanTimeseriesProperty;
        }

        public override BaseData<Kind> Create()
        {
            return new BooleanTimeseriesPropertyObject( );
        }

        public override void AssignTo( BaseData<Kind> target )
        {
            base.AssignTo( target );
            var destination = ( BooleanTimeseriesPropertyObject )target;
            destination._timeseries = _timeseries;
        }

        public override bool Equals(BaseData<Kind>? other)
        {
            if (base.Equals(other))
            {
                var obj = ( BooleanTimeseriesPropertyObject )other;
                if( obj._timeseries != _timeseries )
                {
                    return false;
                }
                return true;
            }
            return false;
        }

        public override bool IsOfType(Kind objectType)
        {
            if( objectType == Kind.BooleanTimeseriesProperty )
            {
                return true;
            }
            return base.IsOfType( objectType );
        }

        public Guid Timeseries
        {
            get => _timeseries;
            set
            {
                if( _timeseries != value )
                {
                    _timeseries = value;
                    OnPropertyChanged( );
                }
            }
        }

        public override void WriteTo( [ DisallowNull ] BinaryWriter destination )
        {
            base.WriteTo( destination );
            destination.Write( _timeseries );
        }

        public override void ReadFrom([DisallowNull] BinaryReader source)
        {
            base.ReadFrom( source );
            _timeseries = source.ReadGuid( );
        }

    }
    public class ByteTimeseriesPropertyObject : TimeseriesPropertyObject
    {
        Guid _timeseries;
        public ByteTimeseriesPropertyObject( )
        {
        }

        public ByteTimeseriesPropertyObject( ObjectState objectState, Guid id, long rowVersion, Guid element, Guid definition, Guid timeseries )
            : base( objectState, id, rowVersion, element, definition )
        {
            _timeseries = timeseries;
        }

        public override Kind GetObjectType()
        {
            return Kind.ByteTimeseriesProperty;
        }

        public override BaseData<Kind> Create()
        {
            return new ByteTimeseriesPropertyObject( );
        }

        public override void AssignTo( BaseData<Kind> target )
        {
            base.AssignTo( target );
            var destination = ( ByteTimeseriesPropertyObject )target;
            destination._timeseries = _timeseries;
        }

        public override bool Equals(BaseData<Kind>? other)
        {
            if (base.Equals(other))
            {
                var obj = ( ByteTimeseriesPropertyObject )other;
                if( obj._timeseries != _timeseries )
                {
                    return false;
                }
                return true;
            }
            return false;
        }

        public override bool IsOfType(Kind objectType)
        {
            if( objectType == Kind.ByteTimeseriesProperty )
            {
                return true;
            }
            return base.IsOfType( objectType );
        }

        public Guid Timeseries
        {
            get => _timeseries;
            set
            {
                if( _timeseries != value )
                {
                    _timeseries = value;
                    OnPropertyChanged( );
                }
            }
        }

        public override void WriteTo( [ DisallowNull ] BinaryWriter destination )
        {
            base.WriteTo( destination );
            destination.Write( _timeseries );
        }

        public override void ReadFrom([DisallowNull] BinaryReader source)
        {
            base.ReadFrom( source );
            _timeseries = source.ReadGuid( );
        }

    }
    public class DateTimeTimeseriesPropertyObject : TimeseriesPropertyObject
    {
        Guid _timeseries;
        public DateTimeTimeseriesPropertyObject( )
        {
        }

        public DateTimeTimeseriesPropertyObject( ObjectState objectState, Guid id, long rowVersion, Guid element, Guid definition, Guid timeseries )
            : base( objectState, id, rowVersion, element, definition )
        {
            _timeseries = timeseries;
        }

        public override Kind GetObjectType()
        {
            return Kind.DateTimeTimeseriesProperty;
        }

        public override BaseData<Kind> Create()
        {
            return new DateTimeTimeseriesPropertyObject( );
        }

        public override void AssignTo( BaseData<Kind> target )
        {
            base.AssignTo( target );
            var destination = ( DateTimeTimeseriesPropertyObject )target;
            destination._timeseries = _timeseries;
        }

        public override bool Equals(BaseData<Kind>? other)
        {
            if (base.Equals(other))
            {
                var obj = ( DateTimeTimeseriesPropertyObject )other;
                if( obj._timeseries != _timeseries )
                {
                    return false;
                }
                return true;
            }
            return false;
        }

        public override bool IsOfType(Kind objectType)
        {
            if( objectType == Kind.DateTimeTimeseriesProperty )
            {
                return true;
            }
            return base.IsOfType( objectType );
        }

        public Guid Timeseries
        {
            get => _timeseries;
            set
            {
                if( _timeseries != value )
                {
                    _timeseries = value;
                    OnPropertyChanged( );
                }
            }
        }

        public override void WriteTo( [ DisallowNull ] BinaryWriter destination )
        {
            base.WriteTo( destination );
            destination.Write( _timeseries );
        }

        public override void ReadFrom([DisallowNull] BinaryReader source)
        {
            base.ReadFrom( source );
            _timeseries = source.ReadGuid( );
        }

    }
    public class DoubleTimeseriesPropertyObject : TimeseriesPropertyObject
    {
        Guid _timeseries;
        public DoubleTimeseriesPropertyObject( )
        {
        }

        public DoubleTimeseriesPropertyObject( ObjectState objectState, Guid id, long rowVersion, Guid element, Guid definition, Guid timeseries )
            : base( objectState, id, rowVersion, element, definition )
        {
            _timeseries = timeseries;
        }

        public override Kind GetObjectType()
        {
            return Kind.DoubleTimeseriesProperty;
        }

        public override BaseData<Kind> Create()
        {
            return new DoubleTimeseriesPropertyObject( );
        }

        public override void AssignTo( BaseData<Kind> target )
        {
            base.AssignTo( target );
            var destination = ( DoubleTimeseriesPropertyObject )target;
            destination._timeseries = _timeseries;
        }

        public override bool Equals(BaseData<Kind>? other)
        {
            if (base.Equals(other))
            {
                var obj = ( DoubleTimeseriesPropertyObject )other;
                if( obj._timeseries != _timeseries )
                {
                    return false;
                }
                return true;
            }
            return false;
        }

        public override bool IsOfType(Kind objectType)
        {
            if( objectType == Kind.DoubleTimeseriesProperty )
            {
                return true;
            }
            return base.IsOfType( objectType );
        }

        public Guid Timeseries
        {
            get => _timeseries;
            set
            {
                if( _timeseries != value )
                {
                    _timeseries = value;
                    OnPropertyChanged( );
                }
            }
        }

        public override void WriteTo( [ DisallowNull ] BinaryWriter destination )
        {
            base.WriteTo( destination );
            destination.Write( _timeseries );
        }

        public override void ReadFrom([DisallowNull] BinaryReader source)
        {
            base.ReadFrom( source );
            _timeseries = source.ReadGuid( );
        }

    }
    public class GuidTimeseriesPropertyObject : TimeseriesPropertyObject
    {
        Guid _timeseries;
        public GuidTimeseriesPropertyObject( )
        {
        }

        public GuidTimeseriesPropertyObject( ObjectState objectState, Guid id, long rowVersion, Guid element, Guid definition, Guid timeseries )
            : base( objectState, id, rowVersion, element, definition )
        {
            _timeseries = timeseries;
        }

        public override Kind GetObjectType()
        {
            return Kind.GuidTimeseriesProperty;
        }

        public override BaseData<Kind> Create()
        {
            return new GuidTimeseriesPropertyObject( );
        }

        public override void AssignTo( BaseData<Kind> target )
        {
            base.AssignTo( target );
            var destination = ( GuidTimeseriesPropertyObject )target;
            destination._timeseries = _timeseries;
        }

        public override bool Equals(BaseData<Kind>? other)
        {
            if (base.Equals(other))
            {
                var obj = ( GuidTimeseriesPropertyObject )other;
                if( obj._timeseries != _timeseries )
                {
                    return false;
                }
                return true;
            }
            return false;
        }

        public override bool IsOfType(Kind objectType)
        {
            if( objectType == Kind.GuidTimeseriesProperty )
            {
                return true;
            }
            return base.IsOfType( objectType );
        }

        public Guid Timeseries
        {
            get => _timeseries;
            set
            {
                if( _timeseries != value )
                {
                    _timeseries = value;
                    OnPropertyChanged( );
                }
            }
        }

        public override void WriteTo( [ DisallowNull ] BinaryWriter destination )
        {
            base.WriteTo( destination );
            destination.Write( _timeseries );
        }

        public override void ReadFrom([DisallowNull] BinaryReader source)
        {
            base.ReadFrom( source );
            _timeseries = source.ReadGuid( );
        }

    }
    public class Int16TimeseriesPropertyObject : TimeseriesPropertyObject
    {
        Guid _timeseries;
        public Int16TimeseriesPropertyObject( )
        {
        }

        public Int16TimeseriesPropertyObject( ObjectState objectState, Guid id, long rowVersion, Guid element, Guid definition, Guid timeseries )
            : base( objectState, id, rowVersion, element, definition )
        {
            _timeseries = timeseries;
        }

        public override Kind GetObjectType()
        {
            return Kind.Int16TimeseriesProperty;
        }

        public override BaseData<Kind> Create()
        {
            return new Int16TimeseriesPropertyObject( );
        }

        public override void AssignTo( BaseData<Kind> target )
        {
            base.AssignTo( target );
            var destination = ( Int16TimeseriesPropertyObject )target;
            destination._timeseries = _timeseries;
        }

        public override bool Equals(BaseData<Kind>? other)
        {
            if (base.Equals(other))
            {
                var obj = ( Int16TimeseriesPropertyObject )other;
                if( obj._timeseries != _timeseries )
                {
                    return false;
                }
                return true;
            }
            return false;
        }

        public override bool IsOfType(Kind objectType)
        {
            if( objectType == Kind.Int16TimeseriesProperty )
            {
                return true;
            }
            return base.IsOfType( objectType );
        }

        public Guid Timeseries
        {
            get => _timeseries;
            set
            {
                if( _timeseries != value )
                {
                    _timeseries = value;
                    OnPropertyChanged( );
                }
            }
        }

        public override void WriteTo( [ DisallowNull ] BinaryWriter destination )
        {
            base.WriteTo( destination );
            destination.Write( _timeseries );
        }

        public override void ReadFrom([DisallowNull] BinaryReader source)
        {
            base.ReadFrom( source );
            _timeseries = source.ReadGuid( );
        }

    }
    public class Int32TimeseriesPropertyObject : TimeseriesPropertyObject
    {
        Guid _timeseries;
        public Int32TimeseriesPropertyObject( )
        {
        }

        public Int32TimeseriesPropertyObject( ObjectState objectState, Guid id, long rowVersion, Guid element, Guid definition, Guid timeseries )
            : base( objectState, id, rowVersion, element, definition )
        {
            _timeseries = timeseries;
        }

        public override Kind GetObjectType()
        {
            return Kind.Int32TimeseriesProperty;
        }

        public override BaseData<Kind> Create()
        {
            return new Int32TimeseriesPropertyObject( );
        }

        public override void AssignTo( BaseData<Kind> target )
        {
            base.AssignTo( target );
            var destination = ( Int32TimeseriesPropertyObject )target;
            destination._timeseries = _timeseries;
        }

        public override bool Equals(BaseData<Kind>? other)
        {
            if (base.Equals(other))
            {
                var obj = ( Int32TimeseriesPropertyObject )other;
                if( obj._timeseries != _timeseries )
                {
                    return false;
                }
                return true;
            }
            return false;
        }

        public override bool IsOfType(Kind objectType)
        {
            if( objectType == Kind.Int32TimeseriesProperty )
            {
                return true;
            }
            return base.IsOfType( objectType );
        }

        public Guid Timeseries
        {
            get => _timeseries;
            set
            {
                if( _timeseries != value )
                {
                    _timeseries = value;
                    OnPropertyChanged( );
                }
            }
        }

        public override void WriteTo( [ DisallowNull ] BinaryWriter destination )
        {
            base.WriteTo( destination );
            destination.Write( _timeseries );
        }

        public override void ReadFrom([DisallowNull] BinaryReader source)
        {
            base.ReadFrom( source );
            _timeseries = source.ReadGuid( );
        }

    }
    public class Int64TimeseriesPropertyObject : TimeseriesPropertyObject
    {
        Guid _timeseries;
        public Int64TimeseriesPropertyObject( )
        {
        }

        public Int64TimeseriesPropertyObject( ObjectState objectState, Guid id, long rowVersion, Guid element, Guid definition, Guid timeseries )
            : base( objectState, id, rowVersion, element, definition )
        {
            _timeseries = timeseries;
        }

        public override Kind GetObjectType()
        {
            return Kind.Int64TimeseriesProperty;
        }

        public override BaseData<Kind> Create()
        {
            return new Int64TimeseriesPropertyObject( );
        }

        public override void AssignTo( BaseData<Kind> target )
        {
            base.AssignTo( target );
            var destination = ( Int64TimeseriesPropertyObject )target;
            destination._timeseries = _timeseries;
        }

        public override bool Equals(BaseData<Kind>? other)
        {
            if (base.Equals(other))
            {
                var obj = ( Int64TimeseriesPropertyObject )other;
                if( obj._timeseries != _timeseries )
                {
                    return false;
                }
                return true;
            }
            return false;
        }

        public override bool IsOfType(Kind objectType)
        {
            if( objectType == Kind.Int64TimeseriesProperty )
            {
                return true;
            }
            return base.IsOfType( objectType );
        }

        public Guid Timeseries
        {
            get => _timeseries;
            set
            {
                if( _timeseries != value )
                {
                    _timeseries = value;
                    OnPropertyChanged( );
                }
            }
        }

        public override void WriteTo( [ DisallowNull ] BinaryWriter destination )
        {
            base.WriteTo( destination );
            destination.Write( _timeseries );
        }

        public override void ReadFrom([DisallowNull] BinaryReader source)
        {
            base.ReadFrom( source );
            _timeseries = source.ReadGuid( );
        }

    }
    public class ReferenceTimeseriesPropertyObject : TimeseriesPropertyObject
    {
        Guid _timeseries;
        public ReferenceTimeseriesPropertyObject( )
        {
        }

        public ReferenceTimeseriesPropertyObject( ObjectState objectState, Guid id, long rowVersion, Guid element, Guid definition, Guid timeseries )
            : base( objectState, id, rowVersion, element, definition )
        {
            _timeseries = timeseries;
        }

        public override Kind GetObjectType()
        {
            return Kind.ReferenceTimeseriesProperty;
        }

        public override BaseData<Kind> Create()
        {
            return new ReferenceTimeseriesPropertyObject( );
        }

        public override void AssignTo( BaseData<Kind> target )
        {
            base.AssignTo( target );
            var destination = ( ReferenceTimeseriesPropertyObject )target;
            destination._timeseries = _timeseries;
        }

        public override bool Equals(BaseData<Kind>? other)
        {
            if (base.Equals(other))
            {
                var obj = ( ReferenceTimeseriesPropertyObject )other;
                if( obj._timeseries != _timeseries )
                {
                    return false;
                }
                return true;
            }
            return false;
        }

        public override bool IsOfType(Kind objectType)
        {
            if( objectType == Kind.ReferenceTimeseriesProperty )
            {
                return true;
            }
            return base.IsOfType( objectType );
        }

        public Guid Timeseries
        {
            get => _timeseries;
            set
            {
                if( _timeseries != value )
                {
                    _timeseries = value;
                    OnPropertyChanged( );
                }
            }
        }

        public override void WriteTo( [ DisallowNull ] BinaryWriter destination )
        {
            base.WriteTo( destination );
            destination.Write( _timeseries );
        }

        public override void ReadFrom([DisallowNull] BinaryReader source)
        {
            base.ReadFrom( source );
            _timeseries = source.ReadGuid( );
        }

    }
    public class SByteTimeseriesPropertyObject : TimeseriesPropertyObject
    {
        Guid _timeseries;
        public SByteTimeseriesPropertyObject( )
        {
        }

        public SByteTimeseriesPropertyObject( ObjectState objectState, Guid id, long rowVersion, Guid element, Guid definition, Guid timeseries )
            : base( objectState, id, rowVersion, element, definition )
        {
            _timeseries = timeseries;
        }

        public override Kind GetObjectType()
        {
            return Kind.SByteTimeseriesProperty;
        }

        public override BaseData<Kind> Create()
        {
            return new SByteTimeseriesPropertyObject( );
        }

        public override void AssignTo( BaseData<Kind> target )
        {
            base.AssignTo( target );
            var destination = ( SByteTimeseriesPropertyObject )target;
            destination._timeseries = _timeseries;
        }

        public override bool Equals(BaseData<Kind>? other)
        {
            if (base.Equals(other))
            {
                var obj = ( SByteTimeseriesPropertyObject )other;
                if( obj._timeseries != _timeseries )
                {
                    return false;
                }
                return true;
            }
            return false;
        }

        public override bool IsOfType(Kind objectType)
        {
            if( objectType == Kind.SByteTimeseriesProperty )
            {
                return true;
            }
            return base.IsOfType( objectType );
        }

        public Guid Timeseries
        {
            get => _timeseries;
            set
            {
                if( _timeseries != value )
                {
                    _timeseries = value;
                    OnPropertyChanged( );
                }
            }
        }

        public override void WriteTo( [ DisallowNull ] BinaryWriter destination )
        {
            base.WriteTo( destination );
            destination.Write( _timeseries );
        }

        public override void ReadFrom([DisallowNull] BinaryReader source)
        {
            base.ReadFrom( source );
            _timeseries = source.ReadGuid( );
        }

    }
    public class SingleTimeseriesPropertyObject : TimeseriesPropertyObject
    {
        Guid _timeseries;
        public SingleTimeseriesPropertyObject( )
        {
        }

        public SingleTimeseriesPropertyObject( ObjectState objectState, Guid id, long rowVersion, Guid element, Guid definition, Guid timeseries )
            : base( objectState, id, rowVersion, element, definition )
        {
            _timeseries = timeseries;
        }

        public override Kind GetObjectType()
        {
            return Kind.SingleTimeseriesProperty;
        }

        public override BaseData<Kind> Create()
        {
            return new SingleTimeseriesPropertyObject( );
        }

        public override void AssignTo( BaseData<Kind> target )
        {
            base.AssignTo( target );
            var destination = ( SingleTimeseriesPropertyObject )target;
            destination._timeseries = _timeseries;
        }

        public override bool Equals(BaseData<Kind>? other)
        {
            if (base.Equals(other))
            {
                var obj = ( SingleTimeseriesPropertyObject )other;
                if( obj._timeseries != _timeseries )
                {
                    return false;
                }
                return true;
            }
            return false;
        }

        public override bool IsOfType(Kind objectType)
        {
            if( objectType == Kind.SingleTimeseriesProperty )
            {
                return true;
            }
            return base.IsOfType( objectType );
        }

        public Guid Timeseries
        {
            get => _timeseries;
            set
            {
                if( _timeseries != value )
                {
                    _timeseries = value;
                    OnPropertyChanged( );
                }
            }
        }

        public override void WriteTo( [ DisallowNull ] BinaryWriter destination )
        {
            base.WriteTo( destination );
            destination.Write( _timeseries );
        }

        public override void ReadFrom([DisallowNull] BinaryReader source)
        {
            base.ReadFrom( source );
            _timeseries = source.ReadGuid( );
        }

    }
    public class StringTimeseriesPropertyObject : TimeseriesPropertyObject
    {
        Guid _timeseries;
        public StringTimeseriesPropertyObject( )
        {
        }

        public StringTimeseriesPropertyObject( ObjectState objectState, Guid id, long rowVersion, Guid element, Guid definition, Guid timeseries )
            : base( objectState, id, rowVersion, element, definition )
        {
            _timeseries = timeseries;
        }

        public override Kind GetObjectType()
        {
            return Kind.StringTimeseriesProperty;
        }

        public override BaseData<Kind> Create()
        {
            return new StringTimeseriesPropertyObject( );
        }

        public override void AssignTo( BaseData<Kind> target )
        {
            base.AssignTo( target );
            var destination = ( StringTimeseriesPropertyObject )target;
            destination._timeseries = _timeseries;
        }

        public override bool Equals(BaseData<Kind>? other)
        {
            if (base.Equals(other))
            {
                var obj = ( StringTimeseriesPropertyObject )other;
                if( obj._timeseries != _timeseries )
                {
                    return false;
                }
                return true;
            }
            return false;
        }

        public override bool IsOfType(Kind objectType)
        {
            if( objectType == Kind.StringTimeseriesProperty )
            {
                return true;
            }
            return base.IsOfType( objectType );
        }

        public Guid Timeseries
        {
            get => _timeseries;
            set
            {
                if( _timeseries != value )
                {
                    _timeseries = value;
                    OnPropertyChanged( );
                }
            }
        }

        public override void WriteTo( [ DisallowNull ] BinaryWriter destination )
        {
            base.WriteTo( destination );
            destination.Write( _timeseries );
        }

        public override void ReadFrom([DisallowNull] BinaryReader source)
        {
            base.ReadFrom( source );
            _timeseries = source.ReadGuid( );
        }

    }
    public class TimeSpanTimeseriesPropertyObject : TimeseriesPropertyObject
    {
        Guid _timeseries;
        public TimeSpanTimeseriesPropertyObject( )
        {
        }

        public TimeSpanTimeseriesPropertyObject( ObjectState objectState, Guid id, long rowVersion, Guid element, Guid definition, Guid timeseries )
            : base( objectState, id, rowVersion, element, definition )
        {
            _timeseries = timeseries;
        }

        public override Kind GetObjectType()
        {
            return Kind.TimeSpanTimeseriesProperty;
        }

        public override BaseData<Kind> Create()
        {
            return new TimeSpanTimeseriesPropertyObject( );
        }

        public override void AssignTo( BaseData<Kind> target )
        {
            base.AssignTo( target );
            var destination = ( TimeSpanTimeseriesPropertyObject )target;
            destination._timeseries = _timeseries;
        }

        public override bool Equals(BaseData<Kind>? other)
        {
            if (base.Equals(other))
            {
                var obj = ( TimeSpanTimeseriesPropertyObject )other;
                if( obj._timeseries != _timeseries )
                {
                    return false;
                }
                return true;
            }
            return false;
        }

        public override bool IsOfType(Kind objectType)
        {
            if( objectType == Kind.TimeSpanTimeseriesProperty )
            {
                return true;
            }
            return base.IsOfType( objectType );
        }

        public Guid Timeseries
        {
            get => _timeseries;
            set
            {
                if( _timeseries != value )
                {
                    _timeseries = value;
                    OnPropertyChanged( );
                }
            }
        }

        public override void WriteTo( [ DisallowNull ] BinaryWriter destination )
        {
            base.WriteTo( destination );
            destination.Write( _timeseries );
        }

        public override void ReadFrom([DisallowNull] BinaryReader source)
        {
            base.ReadFrom( source );
            _timeseries = source.ReadGuid( );
        }

    }
    public class UInt16TimeseriesPropertyObject : TimeseriesPropertyObject
    {
        Guid _timeseries;
        public UInt16TimeseriesPropertyObject( )
        {
        }

        public UInt16TimeseriesPropertyObject( ObjectState objectState, Guid id, long rowVersion, Guid element, Guid definition, Guid timeseries )
            : base( objectState, id, rowVersion, element, definition )
        {
            _timeseries = timeseries;
        }

        public override Kind GetObjectType()
        {
            return Kind.UInt16TimeseriesProperty;
        }

        public override BaseData<Kind> Create()
        {
            return new UInt16TimeseriesPropertyObject( );
        }

        public override void AssignTo( BaseData<Kind> target )
        {
            base.AssignTo( target );
            var destination = ( UInt16TimeseriesPropertyObject )target;
            destination._timeseries = _timeseries;
        }

        public override bool Equals(BaseData<Kind>? other)
        {
            if (base.Equals(other))
            {
                var obj = ( UInt16TimeseriesPropertyObject )other;
                if( obj._timeseries != _timeseries )
                {
                    return false;
                }
                return true;
            }
            return false;
        }

        public override bool IsOfType(Kind objectType)
        {
            if( objectType == Kind.UInt16TimeseriesProperty )
            {
                return true;
            }
            return base.IsOfType( objectType );
        }

        public Guid Timeseries
        {
            get => _timeseries;
            set
            {
                if( _timeseries != value )
                {
                    _timeseries = value;
                    OnPropertyChanged( );
                }
            }
        }

        public override void WriteTo( [ DisallowNull ] BinaryWriter destination )
        {
            base.WriteTo( destination );
            destination.Write( _timeseries );
        }

        public override void ReadFrom([DisallowNull] BinaryReader source)
        {
            base.ReadFrom( source );
            _timeseries = source.ReadGuid( );
        }

    }
    public class UInt32TimeseriesPropertyObject : TimeseriesPropertyObject
    {
        Guid _timeseries;
        public UInt32TimeseriesPropertyObject( )
        {
        }

        public UInt32TimeseriesPropertyObject( ObjectState objectState, Guid id, long rowVersion, Guid element, Guid definition, Guid timeseries )
            : base( objectState, id, rowVersion, element, definition )
        {
            _timeseries = timeseries;
        }

        public override Kind GetObjectType()
        {
            return Kind.UInt32TimeseriesProperty;
        }

        public override BaseData<Kind> Create()
        {
            return new UInt32TimeseriesPropertyObject( );
        }

        public override void AssignTo( BaseData<Kind> target )
        {
            base.AssignTo( target );
            var destination = ( UInt32TimeseriesPropertyObject )target;
            destination._timeseries = _timeseries;
        }

        public override bool Equals(BaseData<Kind>? other)
        {
            if (base.Equals(other))
            {
                var obj = ( UInt32TimeseriesPropertyObject )other;
                if( obj._timeseries != _timeseries )
                {
                    return false;
                }
                return true;
            }
            return false;
        }

        public override bool IsOfType(Kind objectType)
        {
            if( objectType == Kind.UInt32TimeseriesProperty )
            {
                return true;
            }
            return base.IsOfType( objectType );
        }

        public Guid Timeseries
        {
            get => _timeseries;
            set
            {
                if( _timeseries != value )
                {
                    _timeseries = value;
                    OnPropertyChanged( );
                }
            }
        }

        public override void WriteTo( [ DisallowNull ] BinaryWriter destination )
        {
            base.WriteTo( destination );
            destination.Write( _timeseries );
        }

        public override void ReadFrom([DisallowNull] BinaryReader source)
        {
            base.ReadFrom( source );
            _timeseries = source.ReadGuid( );
        }

    }
    public class UInt64TimeseriesPropertyObject : TimeseriesPropertyObject
    {
        Guid _timeseries;
        public UInt64TimeseriesPropertyObject( )
        {
        }

        public UInt64TimeseriesPropertyObject( ObjectState objectState, Guid id, long rowVersion, Guid element, Guid definition, Guid timeseries )
            : base( objectState, id, rowVersion, element, definition )
        {
            _timeseries = timeseries;
        }

        public override Kind GetObjectType()
        {
            return Kind.UInt64TimeseriesProperty;
        }

        public override BaseData<Kind> Create()
        {
            return new UInt64TimeseriesPropertyObject( );
        }

        public override void AssignTo( BaseData<Kind> target )
        {
            base.AssignTo( target );
            var destination = ( UInt64TimeseriesPropertyObject )target;
            destination._timeseries = _timeseries;
        }

        public override bool Equals(BaseData<Kind>? other)
        {
            if (base.Equals(other))
            {
                var obj = ( UInt64TimeseriesPropertyObject )other;
                if( obj._timeseries != _timeseries )
                {
                    return false;
                }
                return true;
            }
            return false;
        }

        public override bool IsOfType(Kind objectType)
        {
            if( objectType == Kind.UInt64TimeseriesProperty )
            {
                return true;
            }
            return base.IsOfType( objectType );
        }

        public Guid Timeseries
        {
            get => _timeseries;
            set
            {
                if( _timeseries != value )
                {
                    _timeseries = value;
                    OnPropertyChanged( );
                }
            }
        }

        public override void WriteTo( [ DisallowNull ] BinaryWriter destination )
        {
            base.WriteTo( destination );
            destination.Write( _timeseries );
        }

        public override void ReadFrom([DisallowNull] BinaryReader source)
        {
            base.ReadFrom( source );
            _timeseries = source.ReadGuid( );
        }

    }
    public class TimeSpanPropertyObject : PropertyObject
    {
        TimeSpan _value;
        public TimeSpanPropertyObject( )
        {
        }

        public TimeSpanPropertyObject( ObjectState objectState, Guid id, long rowVersion, Guid element, Guid definition, TimeSpan value__ )
            : base( objectState, id, rowVersion, element, definition )
        {
            _value = value__;
        }

        public override Kind GetObjectType()
        {
            return Kind.TimeSpanProperty;
        }

        public override BaseData<Kind> Create()
        {
            return new TimeSpanPropertyObject( );
        }

        public override void AssignTo( BaseData<Kind> target )
        {
            base.AssignTo( target );
            var destination = ( TimeSpanPropertyObject )target;
            destination._value = _value;
        }

        public override bool Equals(BaseData<Kind>? other)
        {
            if (base.Equals(other))
            {
                var obj = ( TimeSpanPropertyObject )other;
                if( obj._value != _value )
                {
                    return false;
                }
                return true;
            }
            return false;
        }

        public override bool IsOfType(Kind objectType)
        {
            if( objectType == Kind.TimeSpanProperty )
            {
                return true;
            }
            return base.IsOfType( objectType );
        }

        public TimeSpan Value
        {
            get => _value;
            set
            {
                if( _value != value )
                {
                    _value = value;
                    OnPropertyChanged( );
                }
            }
        }

        public override void WriteTo( [ DisallowNull ] BinaryWriter destination )
        {
            base.WriteTo( destination );
            destination.Write( _value );
        }

        public override void ReadFrom([DisallowNull] BinaryReader source)
        {
            base.ReadFrom( source );
            _value = source.ReadTimeSpan( );
        }

    }
    public class UInt16PropertyObject : PropertyObject
    {
        ushort _value = 0;
        public UInt16PropertyObject( )
        {
        }

        public UInt16PropertyObject( ObjectState objectState, Guid id, long rowVersion, Guid element, Guid definition, ushort value__ )
            : base( objectState, id, rowVersion, element, definition )
        {
            _value = value__;
        }

        public override Kind GetObjectType()
        {
            return Kind.UInt16Property;
        }

        public override BaseData<Kind> Create()
        {
            return new UInt16PropertyObject( );
        }

        public override void AssignTo( BaseData<Kind> target )
        {
            base.AssignTo( target );
            var destination = ( UInt16PropertyObject )target;
            destination._value = _value;
        }

        public override bool Equals(BaseData<Kind>? other)
        {
            if (base.Equals(other))
            {
                var obj = ( UInt16PropertyObject )other;
                if( obj._value != _value )
                {
                    return false;
                }
                return true;
            }
            return false;
        }

        public override bool IsOfType(Kind objectType)
        {
            if( objectType == Kind.UInt16Property )
            {
                return true;
            }
            return base.IsOfType( objectType );
        }

        public ushort Value
        {
            get => _value;
            set
            {
                if( _value != value )
                {
                    _value = value;
                    OnPropertyChanged( );
                }
            }
        }

        public override void WriteTo( [ DisallowNull ] BinaryWriter destination )
        {
            base.WriteTo( destination );
            destination.Write( _value );
        }

        public override void ReadFrom([DisallowNull] BinaryReader source)
        {
            base.ReadFrom( source );
            _value = source.ReadUInt16( );
        }

    }
    public class UInt32PropertyObject : PropertyObject
    {
        uint _value = 0;
        public UInt32PropertyObject( )
        {
        }

        public UInt32PropertyObject( ObjectState objectState, Guid id, long rowVersion, Guid element, Guid definition, uint value__ )
            : base( objectState, id, rowVersion, element, definition )
        {
            _value = value__;
        }

        public override Kind GetObjectType()
        {
            return Kind.UInt32Property;
        }

        public override BaseData<Kind> Create()
        {
            return new UInt32PropertyObject( );
        }

        public override void AssignTo( BaseData<Kind> target )
        {
            base.AssignTo( target );
            var destination = ( UInt32PropertyObject )target;
            destination._value = _value;
        }

        public override bool Equals(BaseData<Kind>? other)
        {
            if (base.Equals(other))
            {
                var obj = ( UInt32PropertyObject )other;
                if( obj._value != _value )
                {
                    return false;
                }
                return true;
            }
            return false;
        }

        public override bool IsOfType(Kind objectType)
        {
            if( objectType == Kind.UInt32Property )
            {
                return true;
            }
            return base.IsOfType( objectType );
        }

        public uint Value
        {
            get => _value;
            set
            {
                if( _value != value )
                {
                    _value = value;
                    OnPropertyChanged( );
                }
            }
        }

        public override void WriteTo( [ DisallowNull ] BinaryWriter destination )
        {
            base.WriteTo( destination );
            destination.Write( _value );
        }

        public override void ReadFrom([DisallowNull] BinaryReader source)
        {
            base.ReadFrom( source );
            _value = source.ReadUInt32( );
        }

    }
    public class UInt64PropertyObject : PropertyObject
    {
        long _value = 0;
        public UInt64PropertyObject( )
        {
        }

        public UInt64PropertyObject( ObjectState objectState, Guid id, long rowVersion, Guid element, Guid definition, long value__ )
            : base( objectState, id, rowVersion, element, definition )
        {
            _value = value__;
        }

        public override Kind GetObjectType()
        {
            return Kind.UInt64Property;
        }

        public override BaseData<Kind> Create()
        {
            return new UInt64PropertyObject( );
        }

        public override void AssignTo( BaseData<Kind> target )
        {
            base.AssignTo( target );
            var destination = ( UInt64PropertyObject )target;
            destination._value = _value;
        }

        public override bool Equals(BaseData<Kind>? other)
        {
            if (base.Equals(other))
            {
                var obj = ( UInt64PropertyObject )other;
                if( obj._value != _value )
                {
                    return false;
                }
                return true;
            }
            return false;
        }

        public override bool IsOfType(Kind objectType)
        {
            if( objectType == Kind.UInt64Property )
            {
                return true;
            }
            return base.IsOfType( objectType );
        }

        public long Value
        {
            get => _value;
            set
            {
                if( _value != value )
                {
                    _value = value;
                    OnPropertyChanged( );
                }
            }
        }

        public override void WriteTo( [ DisallowNull ] BinaryWriter destination )
        {
            base.WriteTo( destination );
            destination.Write( _value );
        }

        public override void ReadFrom([DisallowNull] BinaryReader source)
        {
            base.ReadFrom( source );
            _value = source.ReadInt64( );
        }

    }
    public abstract class PropertyDefinitionObject : BaseDataGuid<Kind>
    {
        long _rowVersion = 0;
        Guid _elementType;
        string _name = string.Empty;
        string _description = string.Empty;
        protected PropertyDefinitionObject( )
        {
        }

        protected PropertyDefinitionObject( ObjectState objectState, Guid id, long rowVersion, Guid elementType, string name, string description )
            : base( objectState, id )
        {
            _rowVersion = rowVersion;
            _elementType = elementType;
            _name = name;
            _description = description;
        }

        public override void AssignTo( BaseData<Kind> target )
        {
            base.AssignTo( target );
            var destination = ( PropertyDefinitionObject )target;
            destination._rowVersion = _rowVersion;
            destination._elementType = _elementType;
            destination._name = _name;
            destination._description = _description;
        }

        public override bool Equals(BaseData<Kind>? other)
        {
            if (base.Equals(other))
            {
                var obj = ( PropertyDefinitionObject )other;
                if( obj._rowVersion != _rowVersion )
                {
                    return false;
                }
                if( obj._elementType != _elementType )
                {
                    return false;
                }
                if( obj._name != _name )
                {
                    return false;
                }
                if( obj._description != _description )
                {
                    return false;
                }
                return true;
            }
            return false;
        }

        public override bool IsOfType(Kind objectType)
        {
            if( objectType == Kind.PropertyDefinition )
            {
                return true;
            }
            return base.IsOfType( objectType );
        }

        public long RowVersion
        {
            get => _rowVersion;
            set
            {
                if( _rowVersion != value )
                {
                    _rowVersion = value;
                    OnPropertyChanged( );
                }
            }
        }
        public Guid ElementType
        {
            get => _elementType;
            set
            {
                if( _elementType != value )
                {
                    _elementType = value;
                    OnPropertyChanged( );
                }
            }
        }
        public string Name
        {
            get => _name;
            set
            {
                if( _name != value )
                {
                    _name = value;
                    OnPropertyChanged( );
                }
            }
        }
        public string Description
        {
            get => _description;
            set
            {
                if( _description != value )
                {
                    _description = value;
                    OnPropertyChanged( );
                }
            }
        }

        public override void WriteTo( [ DisallowNull ] BinaryWriter destination )
        {
            base.WriteTo( destination );
            destination.Write( _rowVersion );
            destination.Write( _elementType );
            destination.Write( _name );
            destination.Write( _description );
        }

        public override void ReadFrom([DisallowNull] BinaryReader source)
        {
            base.ReadFrom( source );
            _rowVersion = source.ReadInt64( );
            _elementType = source.ReadGuid( );
            _name = source.ReadString( );
            _description = source.ReadString( );
        }

    }
    public class BinaryPropertyDefinitionObject : PropertyDefinitionObject
    {
        byte[] _defaultValue = Array.Empty<byte>();
        public BinaryPropertyDefinitionObject( )
        {
        }

        public BinaryPropertyDefinitionObject( ObjectState objectState, Guid id, long rowVersion, Guid elementType, string name, string description, byte[] defaultValue )
            : base( objectState, id, rowVersion, elementType, name, description )
        {
            _defaultValue = defaultValue;
        }

        public override Kind GetObjectType()
        {
            return Kind.BinaryPropertyDefinition;
        }

        public override BaseData<Kind> Create()
        {
            return new BinaryPropertyDefinitionObject( );
        }

        public override void AssignTo( BaseData<Kind> target )
        {
            base.AssignTo( target );
            var destination = ( BinaryPropertyDefinitionObject )target;
            destination._defaultValue = (byte[])_defaultValue.Clone( );
        }

        public override bool Equals(BaseData<Kind>? other)
        {
            if (base.Equals(other))
            {
                var obj = ( BinaryPropertyDefinitionObject )other;
                if( obj._defaultValue.Equals( _defaultValue ) == false )
                {
                    return false;
                }
                return true;
            }
            return false;
        }

        public override bool IsOfType(Kind objectType)
        {
            if( objectType == Kind.BinaryPropertyDefinition )
            {
                return true;
            }
            return base.IsOfType( objectType );
        }

        public byte[] DefaultValue
        {
            get => _defaultValue;
            set
            {
                if( _defaultValue != value )
                {
                    _defaultValue = value;
                    OnPropertyChanged( );
                }
            }
        }

        public override void WriteTo( [ DisallowNull ] BinaryWriter destination )
        {
            base.WriteTo( destination );
            destination.WriteArray( _defaultValue );
        }

        public override void ReadFrom([DisallowNull] BinaryReader source)
        {
            base.ReadFrom( source );
            _defaultValue = source.ReadByteArray( );
        }

    }
    public class BooleanPropertyDefinitionObject : PropertyDefinitionObject
    {
        bool _defaultValue = false;
        public BooleanPropertyDefinitionObject( )
        {
        }

        public BooleanPropertyDefinitionObject( ObjectState objectState, Guid id, long rowVersion, Guid elementType, string name, string description, bool defaultValue )
            : base( objectState, id, rowVersion, elementType, name, description )
        {
            _defaultValue = defaultValue;
        }

        public override Kind GetObjectType()
        {
            return Kind.BooleanPropertyDefinition;
        }

        public override BaseData<Kind> Create()
        {
            return new BooleanPropertyDefinitionObject( );
        }

        public override void AssignTo( BaseData<Kind> target )
        {
            base.AssignTo( target );
            var destination = ( BooleanPropertyDefinitionObject )target;
            destination._defaultValue = _defaultValue;
        }

        public override bool Equals(BaseData<Kind>? other)
        {
            if (base.Equals(other))
            {
                var obj = ( BooleanPropertyDefinitionObject )other;
                if( obj._defaultValue != _defaultValue )
                {
                    return false;
                }
                return true;
            }
            return false;
        }

        public override bool IsOfType(Kind objectType)
        {
            if( objectType == Kind.BooleanPropertyDefinition )
            {
                return true;
            }
            return base.IsOfType( objectType );
        }

        public bool DefaultValue
        {
            get => _defaultValue;
            set
            {
                if( _defaultValue != value )
                {
                    _defaultValue = value;
                    OnPropertyChanged( );
                }
            }
        }

        public override void WriteTo( [ DisallowNull ] BinaryWriter destination )
        {
            base.WriteTo( destination );
            destination.Write( _defaultValue );
        }

        public override void ReadFrom([DisallowNull] BinaryReader source)
        {
            base.ReadFrom( source );
            _defaultValue = source.ReadBoolean( );
        }

    }
    public class BytePropertyDefinitionObject : PropertyDefinitionObject
    {
        byte _defaultValue = 0;
        byte _minValue = 0;
        byte _maxValue = 0;
        public BytePropertyDefinitionObject( )
        {
        }

        public BytePropertyDefinitionObject( ObjectState objectState, Guid id, long rowVersion, Guid elementType, string name, string description, byte defaultValue, byte minValue, byte maxValue )
            : base( objectState, id, rowVersion, elementType, name, description )
        {
            _defaultValue = defaultValue;
            _minValue = minValue;
            _maxValue = maxValue;
        }

        public override Kind GetObjectType()
        {
            return Kind.BytePropertyDefinition;
        }

        public override BaseData<Kind> Create()
        {
            return new BytePropertyDefinitionObject( );
        }

        public override void AssignTo( BaseData<Kind> target )
        {
            base.AssignTo( target );
            var destination = ( BytePropertyDefinitionObject )target;
            destination._defaultValue = _defaultValue;
            destination._minValue = _minValue;
            destination._maxValue = _maxValue;
        }

        public override bool Equals(BaseData<Kind>? other)
        {
            if (base.Equals(other))
            {
                var obj = ( BytePropertyDefinitionObject )other;
                if( obj._defaultValue != _defaultValue )
                {
                    return false;
                }
                if( obj._minValue != _minValue )
                {
                    return false;
                }
                if( obj._maxValue != _maxValue )
                {
                    return false;
                }
                return true;
            }
            return false;
        }

        public override bool IsOfType(Kind objectType)
        {
            if( objectType == Kind.BytePropertyDefinition )
            {
                return true;
            }
            return base.IsOfType( objectType );
        }

        public byte DefaultValue
        {
            get => _defaultValue;
            set
            {
                if( _defaultValue != value )
                {
                    _defaultValue = value;
                    OnPropertyChanged( );
                }
            }
        }
        public byte MinValue
        {
            get => _minValue;
            set
            {
                if( _minValue != value )
                {
                    _minValue = value;
                    OnPropertyChanged( );
                }
            }
        }
        public byte MaxValue
        {
            get => _maxValue;
            set
            {
                if( _maxValue != value )
                {
                    _maxValue = value;
                    OnPropertyChanged( );
                }
            }
        }

        public override void WriteTo( [ DisallowNull ] BinaryWriter destination )
        {
            base.WriteTo( destination );
            destination.Write( _defaultValue );
            destination.Write( _minValue );
            destination.Write( _maxValue );
        }

        public override void ReadFrom([DisallowNull] BinaryReader source)
        {
            base.ReadFrom( source );
            _defaultValue = source.ReadByte( );
            _minValue = source.ReadByte( );
            _maxValue = source.ReadByte( );
        }

    }
    public class DateTimePropertyDefinitionObject : PropertyDefinitionObject
    {
        string _defaultValue = string.Empty;
        string _minValue = string.Empty;
        string _maxValue = string.Empty;
        public DateTimePropertyDefinitionObject( )
        {
        }

        public DateTimePropertyDefinitionObject( ObjectState objectState, Guid id, long rowVersion, Guid elementType, string name, string description, string defaultValue, string minValue, string maxValue )
            : base( objectState, id, rowVersion, elementType, name, description )
        {
            _defaultValue = defaultValue;
            _minValue = minValue;
            _maxValue = maxValue;
        }

        public override Kind GetObjectType()
        {
            return Kind.DateTimePropertyDefinition;
        }

        public override BaseData<Kind> Create()
        {
            return new DateTimePropertyDefinitionObject( );
        }

        public override void AssignTo( BaseData<Kind> target )
        {
            base.AssignTo( target );
            var destination = ( DateTimePropertyDefinitionObject )target;
            destination._defaultValue = _defaultValue;
            destination._minValue = _minValue;
            destination._maxValue = _maxValue;
        }

        public override bool Equals(BaseData<Kind>? other)
        {
            if (base.Equals(other))
            {
                var obj = ( DateTimePropertyDefinitionObject )other;
                if( obj._defaultValue != _defaultValue )
                {
                    return false;
                }
                if( obj._minValue != _minValue )
                {
                    return false;
                }
                if( obj._maxValue != _maxValue )
                {
                    return false;
                }
                return true;
            }
            return false;
        }

        public override bool IsOfType(Kind objectType)
        {
            if( objectType == Kind.DateTimePropertyDefinition )
            {
                return true;
            }
            return base.IsOfType( objectType );
        }

        public string DefaultValue
        {
            get => _defaultValue;
            set
            {
                if( _defaultValue != value )
                {
                    _defaultValue = value;
                    OnPropertyChanged( );
                }
            }
        }
        public string MinValue
        {
            get => _minValue;
            set
            {
                if( _minValue != value )
                {
                    _minValue = value;
                    OnPropertyChanged( );
                }
            }
        }
        public string MaxValue
        {
            get => _maxValue;
            set
            {
                if( _maxValue != value )
                {
                    _maxValue = value;
                    OnPropertyChanged( );
                }
            }
        }

        public override void WriteTo( [ DisallowNull ] BinaryWriter destination )
        {
            base.WriteTo( destination );
            destination.Write( _defaultValue );
            destination.Write( _minValue );
            destination.Write( _maxValue );
        }

        public override void ReadFrom([DisallowNull] BinaryReader source)
        {
            base.ReadFrom( source );
            _defaultValue = source.ReadString( );
            _minValue = source.ReadString( );
            _maxValue = source.ReadString( );
        }

    }
    public class DoublePropertyDefinitionObject : PropertyDefinitionObject
    {
        double _defaultValue = 0.0;
        double _minValue = 0.0;
        double _maxValue = 0.0;
        public DoublePropertyDefinitionObject( )
        {
        }

        public DoublePropertyDefinitionObject( ObjectState objectState, Guid id, long rowVersion, Guid elementType, string name, string description, double defaultValue, double minValue, double maxValue )
            : base( objectState, id, rowVersion, elementType, name, description )
        {
            _defaultValue = defaultValue;
            _minValue = minValue;
            _maxValue = maxValue;
        }

        public override Kind GetObjectType()
        {
            return Kind.DoublePropertyDefinition;
        }

        public override BaseData<Kind> Create()
        {
            return new DoublePropertyDefinitionObject( );
        }

        public override void AssignTo( BaseData<Kind> target )
        {
            base.AssignTo( target );
            var destination = ( DoublePropertyDefinitionObject )target;
            destination._defaultValue = _defaultValue;
            destination._minValue = _minValue;
            destination._maxValue = _maxValue;
        }

        public override bool Equals(BaseData<Kind>? other)
        {
            if (base.Equals(other))
            {
                var obj = ( DoublePropertyDefinitionObject )other;
                if( obj._defaultValue != _defaultValue )
                {
                    return false;
                }
                if( obj._minValue != _minValue )
                {
                    return false;
                }
                if( obj._maxValue != _maxValue )
                {
                    return false;
                }
                return true;
            }
            return false;
        }

        public override bool IsOfType(Kind objectType)
        {
            if( objectType == Kind.DoublePropertyDefinition )
            {
                return true;
            }
            return base.IsOfType( objectType );
        }

        public double DefaultValue
        {
            get => _defaultValue;
            set
            {
                if( _defaultValue != value )
                {
                    _defaultValue = value;
                    OnPropertyChanged( );
                }
            }
        }
        public double MinValue
        {
            get => _minValue;
            set
            {
                if( _minValue != value )
                {
                    _minValue = value;
                    OnPropertyChanged( );
                }
            }
        }
        public double MaxValue
        {
            get => _maxValue;
            set
            {
                if( _maxValue != value )
                {
                    _maxValue = value;
                    OnPropertyChanged( );
                }
            }
        }

        public override void WriteTo( [ DisallowNull ] BinaryWriter destination )
        {
            base.WriteTo( destination );
            destination.Write( _defaultValue );
            destination.Write( _minValue );
            destination.Write( _maxValue );
        }

        public override void ReadFrom([DisallowNull] BinaryReader source)
        {
            base.ReadFrom( source );
            _defaultValue = source.ReadDouble( );
            _minValue = source.ReadDouble( );
            _maxValue = source.ReadDouble( );
        }

    }
    public class GuidPropertyDefinitionObject : PropertyDefinitionObject
    {
        Guid _defaultValue;
        public GuidPropertyDefinitionObject( )
        {
        }

        public GuidPropertyDefinitionObject( ObjectState objectState, Guid id, long rowVersion, Guid elementType, string name, string description, Guid defaultValue )
            : base( objectState, id, rowVersion, elementType, name, description )
        {
            _defaultValue = defaultValue;
        }

        public override Kind GetObjectType()
        {
            return Kind.GuidPropertyDefinition;
        }

        public override BaseData<Kind> Create()
        {
            return new GuidPropertyDefinitionObject( );
        }

        public override void AssignTo( BaseData<Kind> target )
        {
            base.AssignTo( target );
            var destination = ( GuidPropertyDefinitionObject )target;
            destination._defaultValue = _defaultValue;
        }

        public override bool Equals(BaseData<Kind>? other)
        {
            if (base.Equals(other))
            {
                var obj = ( GuidPropertyDefinitionObject )other;
                if( obj._defaultValue != _defaultValue )
                {
                    return false;
                }
                return true;
            }
            return false;
        }

        public override bool IsOfType(Kind objectType)
        {
            if( objectType == Kind.GuidPropertyDefinition )
            {
                return true;
            }
            return base.IsOfType( objectType );
        }

        public Guid DefaultValue
        {
            get => _defaultValue;
            set
            {
                if( _defaultValue != value )
                {
                    _defaultValue = value;
                    OnPropertyChanged( );
                }
            }
        }

        public override void WriteTo( [ DisallowNull ] BinaryWriter destination )
        {
            base.WriteTo( destination );
            destination.Write( _defaultValue );
        }

        public override void ReadFrom([DisallowNull] BinaryReader source)
        {
            base.ReadFrom( source );
            _defaultValue = source.ReadGuid( );
        }

    }
    public class Int16PropertyDefinitionObject : PropertyDefinitionObject
    {
        short _defaultValue = 0;
        short _minValue = 0;
        short _maxValue = 0;
        public Int16PropertyDefinitionObject( )
        {
        }

        public Int16PropertyDefinitionObject( ObjectState objectState, Guid id, long rowVersion, Guid elementType, string name, string description, short defaultValue, short minValue, short maxValue )
            : base( objectState, id, rowVersion, elementType, name, description )
        {
            _defaultValue = defaultValue;
            _minValue = minValue;
            _maxValue = maxValue;
        }

        public override Kind GetObjectType()
        {
            return Kind.Int16PropertyDefinition;
        }

        public override BaseData<Kind> Create()
        {
            return new Int16PropertyDefinitionObject( );
        }

        public override void AssignTo( BaseData<Kind> target )
        {
            base.AssignTo( target );
            var destination = ( Int16PropertyDefinitionObject )target;
            destination._defaultValue = _defaultValue;
            destination._minValue = _minValue;
            destination._maxValue = _maxValue;
        }

        public override bool Equals(BaseData<Kind>? other)
        {
            if (base.Equals(other))
            {
                var obj = ( Int16PropertyDefinitionObject )other;
                if( obj._defaultValue != _defaultValue )
                {
                    return false;
                }
                if( obj._minValue != _minValue )
                {
                    return false;
                }
                if( obj._maxValue != _maxValue )
                {
                    return false;
                }
                return true;
            }
            return false;
        }

        public override bool IsOfType(Kind objectType)
        {
            if( objectType == Kind.Int16PropertyDefinition )
            {
                return true;
            }
            return base.IsOfType( objectType );
        }

        public short DefaultValue
        {
            get => _defaultValue;
            set
            {
                if( _defaultValue != value )
                {
                    _defaultValue = value;
                    OnPropertyChanged( );
                }
            }
        }
        public short MinValue
        {
            get => _minValue;
            set
            {
                if( _minValue != value )
                {
                    _minValue = value;
                    OnPropertyChanged( );
                }
            }
        }
        public short MaxValue
        {
            get => _maxValue;
            set
            {
                if( _maxValue != value )
                {
                    _maxValue = value;
                    OnPropertyChanged( );
                }
            }
        }

        public override void WriteTo( [ DisallowNull ] BinaryWriter destination )
        {
            base.WriteTo( destination );
            destination.Write( _defaultValue );
            destination.Write( _minValue );
            destination.Write( _maxValue );
        }

        public override void ReadFrom([DisallowNull] BinaryReader source)
        {
            base.ReadFrom( source );
            _defaultValue = source.ReadInt16( );
            _minValue = source.ReadInt16( );
            _maxValue = source.ReadInt16( );
        }

    }
    public class Int32PropertyDefinitionObject : PropertyDefinitionObject
    {
        int _defaultValue = 0;
        int _minValue = 0;
        int _maxValue = 0;
        public Int32PropertyDefinitionObject( )
        {
        }

        public Int32PropertyDefinitionObject( ObjectState objectState, Guid id, long rowVersion, Guid elementType, string name, string description, int defaultValue, int minValue, int maxValue )
            : base( objectState, id, rowVersion, elementType, name, description )
        {
            _defaultValue = defaultValue;
            _minValue = minValue;
            _maxValue = maxValue;
        }

        public override Kind GetObjectType()
        {
            return Kind.Int32PropertyDefinition;
        }

        public override BaseData<Kind> Create()
        {
            return new Int32PropertyDefinitionObject( );
        }

        public override void AssignTo( BaseData<Kind> target )
        {
            base.AssignTo( target );
            var destination = ( Int32PropertyDefinitionObject )target;
            destination._defaultValue = _defaultValue;
            destination._minValue = _minValue;
            destination._maxValue = _maxValue;
        }

        public override bool Equals(BaseData<Kind>? other)
        {
            if (base.Equals(other))
            {
                var obj = ( Int32PropertyDefinitionObject )other;
                if( obj._defaultValue != _defaultValue )
                {
                    return false;
                }
                if( obj._minValue != _minValue )
                {
                    return false;
                }
                if( obj._maxValue != _maxValue )
                {
                    return false;
                }
                return true;
            }
            return false;
        }

        public override bool IsOfType(Kind objectType)
        {
            if( objectType == Kind.Int32PropertyDefinition )
            {
                return true;
            }
            return base.IsOfType( objectType );
        }

        public int DefaultValue
        {
            get => _defaultValue;
            set
            {
                if( _defaultValue != value )
                {
                    _defaultValue = value;
                    OnPropertyChanged( );
                }
            }
        }
        public int MinValue
        {
            get => _minValue;
            set
            {
                if( _minValue != value )
                {
                    _minValue = value;
                    OnPropertyChanged( );
                }
            }
        }
        public int MaxValue
        {
            get => _maxValue;
            set
            {
                if( _maxValue != value )
                {
                    _maxValue = value;
                    OnPropertyChanged( );
                }
            }
        }

        public override void WriteTo( [ DisallowNull ] BinaryWriter destination )
        {
            base.WriteTo( destination );
            destination.Write( _defaultValue );
            destination.Write( _minValue );
            destination.Write( _maxValue );
        }

        public override void ReadFrom([DisallowNull] BinaryReader source)
        {
            base.ReadFrom( source );
            _defaultValue = source.ReadInt32( );
            _minValue = source.ReadInt32( );
            _maxValue = source.ReadInt32( );
        }

    }
    public class Int64PropertyDefinitionObject : PropertyDefinitionObject
    {
        long _defaultValue = 0;
        long _minValue = 0;
        long _maxValue = 0;
        public Int64PropertyDefinitionObject( )
        {
        }

        public Int64PropertyDefinitionObject( ObjectState objectState, Guid id, long rowVersion, Guid elementType, string name, string description, long defaultValue, long minValue, long maxValue )
            : base( objectState, id, rowVersion, elementType, name, description )
        {
            _defaultValue = defaultValue;
            _minValue = minValue;
            _maxValue = maxValue;
        }

        public override Kind GetObjectType()
        {
            return Kind.Int64PropertyDefinition;
        }

        public override BaseData<Kind> Create()
        {
            return new Int64PropertyDefinitionObject( );
        }

        public override void AssignTo( BaseData<Kind> target )
        {
            base.AssignTo( target );
            var destination = ( Int64PropertyDefinitionObject )target;
            destination._defaultValue = _defaultValue;
            destination._minValue = _minValue;
            destination._maxValue = _maxValue;
        }

        public override bool Equals(BaseData<Kind>? other)
        {
            if (base.Equals(other))
            {
                var obj = ( Int64PropertyDefinitionObject )other;
                if( obj._defaultValue != _defaultValue )
                {
                    return false;
                }
                if( obj._minValue != _minValue )
                {
                    return false;
                }
                if( obj._maxValue != _maxValue )
                {
                    return false;
                }
                return true;
            }
            return false;
        }

        public override bool IsOfType(Kind objectType)
        {
            if( objectType == Kind.Int64PropertyDefinition )
            {
                return true;
            }
            return base.IsOfType( objectType );
        }

        public long DefaultValue
        {
            get => _defaultValue;
            set
            {
                if( _defaultValue != value )
                {
                    _defaultValue = value;
                    OnPropertyChanged( );
                }
            }
        }
        public long MinValue
        {
            get => _minValue;
            set
            {
                if( _minValue != value )
                {
                    _minValue = value;
                    OnPropertyChanged( );
                }
            }
        }
        public long MaxValue
        {
            get => _maxValue;
            set
            {
                if( _maxValue != value )
                {
                    _maxValue = value;
                    OnPropertyChanged( );
                }
            }
        }

        public override void WriteTo( [ DisallowNull ] BinaryWriter destination )
        {
            base.WriteTo( destination );
            destination.Write( _defaultValue );
            destination.Write( _minValue );
            destination.Write( _maxValue );
        }

        public override void ReadFrom([DisallowNull] BinaryReader source)
        {
            base.ReadFrom( source );
            _defaultValue = source.ReadInt64( );
            _minValue = source.ReadInt64( );
            _maxValue = source.ReadInt64( );
        }

    }
    public class ReferencePropertyDefinitionObject : PropertyDefinitionObject
    {
        Guid _defaultValue;
        Guid _referencedElementType;
        public ReferencePropertyDefinitionObject( )
        {
        }

        public ReferencePropertyDefinitionObject( ObjectState objectState, Guid id, long rowVersion, Guid elementType, string name, string description, Guid defaultValue, Guid referencedElementType )
            : base( objectState, id, rowVersion, elementType, name, description )
        {
            _defaultValue = defaultValue;
            _referencedElementType = referencedElementType;
        }

        public override Kind GetObjectType()
        {
            return Kind.ReferencePropertyDefinition;
        }

        public override BaseData<Kind> Create()
        {
            return new ReferencePropertyDefinitionObject( );
        }

        public override void AssignTo( BaseData<Kind> target )
        {
            base.AssignTo( target );
            var destination = ( ReferencePropertyDefinitionObject )target;
            destination._defaultValue = _defaultValue;
            destination._referencedElementType = _referencedElementType;
        }

        public override bool Equals(BaseData<Kind>? other)
        {
            if (base.Equals(other))
            {
                var obj = ( ReferencePropertyDefinitionObject )other;
                if( obj._defaultValue != _defaultValue )
                {
                    return false;
                }
                if( obj._referencedElementType != _referencedElementType )
                {
                    return false;
                }
                return true;
            }
            return false;
        }

        public override bool IsOfType(Kind objectType)
        {
            if( objectType == Kind.ReferencePropertyDefinition )
            {
                return true;
            }
            return base.IsOfType( objectType );
        }

        public Guid DefaultValue
        {
            get => _defaultValue;
            set
            {
                if( _defaultValue != value )
                {
                    _defaultValue = value;
                    OnPropertyChanged( );
                }
            }
        }
        public Guid ReferencedElementType
        {
            get => _referencedElementType;
            set
            {
                if( _referencedElementType != value )
                {
                    _referencedElementType = value;
                    OnPropertyChanged( );
                }
            }
        }

        public override void WriteTo( [ DisallowNull ] BinaryWriter destination )
        {
            base.WriteTo( destination );
            destination.Write( _defaultValue );
            destination.Write( _referencedElementType );
        }

        public override void ReadFrom([DisallowNull] BinaryReader source)
        {
            base.ReadFrom( source );
            _defaultValue = source.ReadGuid( );
            _referencedElementType = source.ReadGuid( );
        }

    }
    public class SBytePropertyDefinitionObject : PropertyDefinitionObject
    {
        sbyte _defaultValue = 0;
        sbyte _minValue = 0;
        sbyte _maxValue = 0;
        public SBytePropertyDefinitionObject( )
        {
        }

        public SBytePropertyDefinitionObject( ObjectState objectState, Guid id, long rowVersion, Guid elementType, string name, string description, sbyte defaultValue, sbyte minValue, sbyte maxValue )
            : base( objectState, id, rowVersion, elementType, name, description )
        {
            _defaultValue = defaultValue;
            _minValue = minValue;
            _maxValue = maxValue;
        }

        public override Kind GetObjectType()
        {
            return Kind.SBytePropertyDefinition;
        }

        public override BaseData<Kind> Create()
        {
            return new SBytePropertyDefinitionObject( );
        }

        public override void AssignTo( BaseData<Kind> target )
        {
            base.AssignTo( target );
            var destination = ( SBytePropertyDefinitionObject )target;
            destination._defaultValue = _defaultValue;
            destination._minValue = _minValue;
            destination._maxValue = _maxValue;
        }

        public override bool Equals(BaseData<Kind>? other)
        {
            if (base.Equals(other))
            {
                var obj = ( SBytePropertyDefinitionObject )other;
                if( obj._defaultValue != _defaultValue )
                {
                    return false;
                }
                if( obj._minValue != _minValue )
                {
                    return false;
                }
                if( obj._maxValue != _maxValue )
                {
                    return false;
                }
                return true;
            }
            return false;
        }

        public override bool IsOfType(Kind objectType)
        {
            if( objectType == Kind.SBytePropertyDefinition )
            {
                return true;
            }
            return base.IsOfType( objectType );
        }

        public sbyte DefaultValue
        {
            get => _defaultValue;
            set
            {
                if( _defaultValue != value )
                {
                    _defaultValue = value;
                    OnPropertyChanged( );
                }
            }
        }
        public sbyte MinValue
        {
            get => _minValue;
            set
            {
                if( _minValue != value )
                {
                    _minValue = value;
                    OnPropertyChanged( );
                }
            }
        }
        public sbyte MaxValue
        {
            get => _maxValue;
            set
            {
                if( _maxValue != value )
                {
                    _maxValue = value;
                    OnPropertyChanged( );
                }
            }
        }

        public override void WriteTo( [ DisallowNull ] BinaryWriter destination )
        {
            base.WriteTo( destination );
            destination.Write( _defaultValue );
            destination.Write( _minValue );
            destination.Write( _maxValue );
        }

        public override void ReadFrom([DisallowNull] BinaryReader source)
        {
            base.ReadFrom( source );
            _defaultValue = source.ReadSByte( );
            _minValue = source.ReadSByte( );
            _maxValue = source.ReadSByte( );
        }

    }
    public class SinglePropertyDefinitionObject : PropertyDefinitionObject
    {
        float _defaultValue = 0.0f;
        float _minValue = 0.0f;
        float _maxValue = 0.0f;
        public SinglePropertyDefinitionObject( )
        {
        }

        public SinglePropertyDefinitionObject( ObjectState objectState, Guid id, long rowVersion, Guid elementType, string name, string description, float defaultValue, float minValue, float maxValue )
            : base( objectState, id, rowVersion, elementType, name, description )
        {
            _defaultValue = defaultValue;
            _minValue = minValue;
            _maxValue = maxValue;
        }

        public override Kind GetObjectType()
        {
            return Kind.SinglePropertyDefinition;
        }

        public override BaseData<Kind> Create()
        {
            return new SinglePropertyDefinitionObject( );
        }

        public override void AssignTo( BaseData<Kind> target )
        {
            base.AssignTo( target );
            var destination = ( SinglePropertyDefinitionObject )target;
            destination._defaultValue = _defaultValue;
            destination._minValue = _minValue;
            destination._maxValue = _maxValue;
        }

        public override bool Equals(BaseData<Kind>? other)
        {
            if (base.Equals(other))
            {
                var obj = ( SinglePropertyDefinitionObject )other;
                if( obj._defaultValue != _defaultValue )
                {
                    return false;
                }
                if( obj._minValue != _minValue )
                {
                    return false;
                }
                if( obj._maxValue != _maxValue )
                {
                    return false;
                }
                return true;
            }
            return false;
        }

        public override bool IsOfType(Kind objectType)
        {
            if( objectType == Kind.SinglePropertyDefinition )
            {
                return true;
            }
            return base.IsOfType( objectType );
        }

        public float DefaultValue
        {
            get => _defaultValue;
            set
            {
                if( _defaultValue != value )
                {
                    _defaultValue = value;
                    OnPropertyChanged( );
                }
            }
        }
        public float MinValue
        {
            get => _minValue;
            set
            {
                if( _minValue != value )
                {
                    _minValue = value;
                    OnPropertyChanged( );
                }
            }
        }
        public float MaxValue
        {
            get => _maxValue;
            set
            {
                if( _maxValue != value )
                {
                    _maxValue = value;
                    OnPropertyChanged( );
                }
            }
        }

        public override void WriteTo( [ DisallowNull ] BinaryWriter destination )
        {
            base.WriteTo( destination );
            destination.Write( _defaultValue );
            destination.Write( _minValue );
            destination.Write( _maxValue );
        }

        public override void ReadFrom([DisallowNull] BinaryReader source)
        {
            base.ReadFrom( source );
            _defaultValue = source.ReadSingle( );
            _minValue = source.ReadSingle( );
            _maxValue = source.ReadSingle( );
        }

    }
    public class StringPropertyDefinitionObject : PropertyDefinitionObject
    {
        string _defaultValue = string.Empty;
        string _pattern = string.Empty;
        public StringPropertyDefinitionObject( )
        {
        }

        public StringPropertyDefinitionObject( ObjectState objectState, Guid id, long rowVersion, Guid elementType, string name, string description, string defaultValue, string pattern )
            : base( objectState, id, rowVersion, elementType, name, description )
        {
            _defaultValue = defaultValue;
            _pattern = pattern;
        }

        public override Kind GetObjectType()
        {
            return Kind.StringPropertyDefinition;
        }

        public override BaseData<Kind> Create()
        {
            return new StringPropertyDefinitionObject( );
        }

        public override void AssignTo( BaseData<Kind> target )
        {
            base.AssignTo( target );
            var destination = ( StringPropertyDefinitionObject )target;
            destination._defaultValue = _defaultValue;
            destination._pattern = _pattern;
        }

        public override bool Equals(BaseData<Kind>? other)
        {
            if (base.Equals(other))
            {
                var obj = ( StringPropertyDefinitionObject )other;
                if( obj._defaultValue != _defaultValue )
                {
                    return false;
                }
                if( obj._pattern != _pattern )
                {
                    return false;
                }
                return true;
            }
            return false;
        }

        public override bool IsOfType(Kind objectType)
        {
            if( objectType == Kind.StringPropertyDefinition )
            {
                return true;
            }
            return base.IsOfType( objectType );
        }

        public string DefaultValue
        {
            get => _defaultValue;
            set
            {
                if( _defaultValue != value )
                {
                    _defaultValue = value;
                    OnPropertyChanged( );
                }
            }
        }
        public string Pattern
        {
            get => _pattern;
            set
            {
                if( _pattern != value )
                {
                    _pattern = value;
                    OnPropertyChanged( );
                }
            }
        }

        public override void WriteTo( [ DisallowNull ] BinaryWriter destination )
        {
            base.WriteTo( destination );
            destination.Write( _defaultValue );
            destination.Write( _pattern );
        }

        public override void ReadFrom([DisallowNull] BinaryReader source)
        {
            base.ReadFrom( source );
            _defaultValue = source.ReadString( );
            _pattern = source.ReadString( );
        }

    }
    public abstract class TimeseriesPropertyDefinitionObject : PropertyDefinitionObject
    {
        protected TimeseriesPropertyDefinitionObject( )
        {
        }

        protected TimeseriesPropertyDefinitionObject( ObjectState objectState, Guid id, long rowVersion, Guid elementType, string name, string description )
            : base( objectState, id, rowVersion, elementType, name, description )
        {
        }

        public override bool IsOfType(Kind objectType)
        {
            if( objectType == Kind.TimeseriesPropertyDefinition )
            {
                return true;
            }
            return base.IsOfType( objectType );
        }

    }
    public class BinaryTimeseriesPropertyDefinitionObject : TimeseriesPropertyDefinitionObject
    {
        public BinaryTimeseriesPropertyDefinitionObject( )
        {
        }

        public BinaryTimeseriesPropertyDefinitionObject( ObjectState objectState, Guid id, long rowVersion, Guid elementType, string name, string description )
            : base( objectState, id, rowVersion, elementType, name, description )
        {
        }

        public override Kind GetObjectType()
        {
            return Kind.BinaryTimeseriesPropertyDefinition;
        }

        public override BaseData<Kind> Create()
        {
            return new BinaryTimeseriesPropertyDefinitionObject( );
        }

        public override bool IsOfType(Kind objectType)
        {
            if( objectType == Kind.BinaryTimeseriesPropertyDefinition )
            {
                return true;
            }
            return base.IsOfType( objectType );
        }

    }
    public class BooleanTimeseriesPropertyDefinitionObject : TimeseriesPropertyDefinitionObject
    {
        public BooleanTimeseriesPropertyDefinitionObject( )
        {
        }

        public BooleanTimeseriesPropertyDefinitionObject( ObjectState objectState, Guid id, long rowVersion, Guid elementType, string name, string description )
            : base( objectState, id, rowVersion, elementType, name, description )
        {
        }

        public override Kind GetObjectType()
        {
            return Kind.BooleanTimeseriesPropertyDefinition;
        }

        public override BaseData<Kind> Create()
        {
            return new BooleanTimeseriesPropertyDefinitionObject( );
        }

        public override bool IsOfType(Kind objectType)
        {
            if( objectType == Kind.BooleanTimeseriesPropertyDefinition )
            {
                return true;
            }
            return base.IsOfType( objectType );
        }

    }
    public class ByteTimeseriesPropertyDefinitionObject : TimeseriesPropertyDefinitionObject
    {
        byte _minValue = 0;
        byte _maxValue = 0;
        public ByteTimeseriesPropertyDefinitionObject( )
        {
        }

        public ByteTimeseriesPropertyDefinitionObject( ObjectState objectState, Guid id, long rowVersion, Guid elementType, string name, string description, byte minValue, byte maxValue )
            : base( objectState, id, rowVersion, elementType, name, description )
        {
            _minValue = minValue;
            _maxValue = maxValue;
        }

        public override Kind GetObjectType()
        {
            return Kind.ByteTimeseriesPropertyDefinition;
        }

        public override BaseData<Kind> Create()
        {
            return new ByteTimeseriesPropertyDefinitionObject( );
        }

        public override void AssignTo( BaseData<Kind> target )
        {
            base.AssignTo( target );
            var destination = ( ByteTimeseriesPropertyDefinitionObject )target;
            destination._minValue = _minValue;
            destination._maxValue = _maxValue;
        }

        public override bool Equals(BaseData<Kind>? other)
        {
            if (base.Equals(other))
            {
                var obj = ( ByteTimeseriesPropertyDefinitionObject )other;
                if( obj._minValue != _minValue )
                {
                    return false;
                }
                if( obj._maxValue != _maxValue )
                {
                    return false;
                }
                return true;
            }
            return false;
        }

        public override bool IsOfType(Kind objectType)
        {
            if( objectType == Kind.ByteTimeseriesPropertyDefinition )
            {
                return true;
            }
            return base.IsOfType( objectType );
        }

        public byte MinValue
        {
            get => _minValue;
            set
            {
                if( _minValue != value )
                {
                    _minValue = value;
                    OnPropertyChanged( );
                }
            }
        }
        public byte MaxValue
        {
            get => _maxValue;
            set
            {
                if( _maxValue != value )
                {
                    _maxValue = value;
                    OnPropertyChanged( );
                }
            }
        }

        public override void WriteTo( [ DisallowNull ] BinaryWriter destination )
        {
            base.WriteTo( destination );
            destination.Write( _minValue );
            destination.Write( _maxValue );
        }

        public override void ReadFrom([DisallowNull] BinaryReader source)
        {
            base.ReadFrom( source );
            _minValue = source.ReadByte( );
            _maxValue = source.ReadByte( );
        }

    }
    public class DateTimeTimeseriesPropertyDefinitionObject : TimeseriesPropertyDefinitionObject
    {
        string _minValue = string.Empty;
        string _maxValue = string.Empty;
        public DateTimeTimeseriesPropertyDefinitionObject( )
        {
        }

        public DateTimeTimeseriesPropertyDefinitionObject( ObjectState objectState, Guid id, long rowVersion, Guid elementType, string name, string description, string minValue, string maxValue )
            : base( objectState, id, rowVersion, elementType, name, description )
        {
            _minValue = minValue;
            _maxValue = maxValue;
        }

        public override Kind GetObjectType()
        {
            return Kind.DateTimeTimeseriesPropertyDefinition;
        }

        public override BaseData<Kind> Create()
        {
            return new DateTimeTimeseriesPropertyDefinitionObject( );
        }

        public override void AssignTo( BaseData<Kind> target )
        {
            base.AssignTo( target );
            var destination = ( DateTimeTimeseriesPropertyDefinitionObject )target;
            destination._minValue = _minValue;
            destination._maxValue = _maxValue;
        }

        public override bool Equals(BaseData<Kind>? other)
        {
            if (base.Equals(other))
            {
                var obj = ( DateTimeTimeseriesPropertyDefinitionObject )other;
                if( obj._minValue != _minValue )
                {
                    return false;
                }
                if( obj._maxValue != _maxValue )
                {
                    return false;
                }
                return true;
            }
            return false;
        }

        public override bool IsOfType(Kind objectType)
        {
            if( objectType == Kind.DateTimeTimeseriesPropertyDefinition )
            {
                return true;
            }
            return base.IsOfType( objectType );
        }

        public string MinValue
        {
            get => _minValue;
            set
            {
                if( _minValue != value )
                {
                    _minValue = value;
                    OnPropertyChanged( );
                }
            }
        }
        public string MaxValue
        {
            get => _maxValue;
            set
            {
                if( _maxValue != value )
                {
                    _maxValue = value;
                    OnPropertyChanged( );
                }
            }
        }

        public override void WriteTo( [ DisallowNull ] BinaryWriter destination )
        {
            base.WriteTo( destination );
            destination.Write( _minValue );
            destination.Write( _maxValue );
        }

        public override void ReadFrom([DisallowNull] BinaryReader source)
        {
            base.ReadFrom( source );
            _minValue = source.ReadString( );
            _maxValue = source.ReadString( );
        }

    }
    public class DoubleTimeseriesPropertyDefinitionObject : TimeseriesPropertyDefinitionObject
    {
        double _minValue = 0.0;
        double _maxValue = 0.0;
        public DoubleTimeseriesPropertyDefinitionObject( )
        {
        }

        public DoubleTimeseriesPropertyDefinitionObject( ObjectState objectState, Guid id, long rowVersion, Guid elementType, string name, string description, double minValue, double maxValue )
            : base( objectState, id, rowVersion, elementType, name, description )
        {
            _minValue = minValue;
            _maxValue = maxValue;
        }

        public override Kind GetObjectType()
        {
            return Kind.DoubleTimeseriesPropertyDefinition;
        }

        public override BaseData<Kind> Create()
        {
            return new DoubleTimeseriesPropertyDefinitionObject( );
        }

        public override void AssignTo( BaseData<Kind> target )
        {
            base.AssignTo( target );
            var destination = ( DoubleTimeseriesPropertyDefinitionObject )target;
            destination._minValue = _minValue;
            destination._maxValue = _maxValue;
        }

        public override bool Equals(BaseData<Kind>? other)
        {
            if (base.Equals(other))
            {
                var obj = ( DoubleTimeseriesPropertyDefinitionObject )other;
                if( obj._minValue != _minValue )
                {
                    return false;
                }
                if( obj._maxValue != _maxValue )
                {
                    return false;
                }
                return true;
            }
            return false;
        }

        public override bool IsOfType(Kind objectType)
        {
            if( objectType == Kind.DoubleTimeseriesPropertyDefinition )
            {
                return true;
            }
            return base.IsOfType( objectType );
        }

        public double MinValue
        {
            get => _minValue;
            set
            {
                if( _minValue != value )
                {
                    _minValue = value;
                    OnPropertyChanged( );
                }
            }
        }
        public double MaxValue
        {
            get => _maxValue;
            set
            {
                if( _maxValue != value )
                {
                    _maxValue = value;
                    OnPropertyChanged( );
                }
            }
        }

        public override void WriteTo( [ DisallowNull ] BinaryWriter destination )
        {
            base.WriteTo( destination );
            destination.Write( _minValue );
            destination.Write( _maxValue );
        }

        public override void ReadFrom([DisallowNull] BinaryReader source)
        {
            base.ReadFrom( source );
            _minValue = source.ReadDouble( );
            _maxValue = source.ReadDouble( );
        }

    }
    public class GuidTimeseriesPropertyDefinitionObject : TimeseriesPropertyDefinitionObject
    {
        public GuidTimeseriesPropertyDefinitionObject( )
        {
        }

        public GuidTimeseriesPropertyDefinitionObject( ObjectState objectState, Guid id, long rowVersion, Guid elementType, string name, string description )
            : base( objectState, id, rowVersion, elementType, name, description )
        {
        }

        public override Kind GetObjectType()
        {
            return Kind.GuidTimeseriesPropertyDefinition;
        }

        public override BaseData<Kind> Create()
        {
            return new GuidTimeseriesPropertyDefinitionObject( );
        }

        public override bool IsOfType(Kind objectType)
        {
            if( objectType == Kind.GuidTimeseriesPropertyDefinition )
            {
                return true;
            }
            return base.IsOfType( objectType );
        }

    }
    public class Int16TimeseriesPropertyDefinitionObject : TimeseriesPropertyDefinitionObject
    {
        short _minValue = 0;
        short _maxValue = 0;
        public Int16TimeseriesPropertyDefinitionObject( )
        {
        }

        public Int16TimeseriesPropertyDefinitionObject( ObjectState objectState, Guid id, long rowVersion, Guid elementType, string name, string description, short minValue, short maxValue )
            : base( objectState, id, rowVersion, elementType, name, description )
        {
            _minValue = minValue;
            _maxValue = maxValue;
        }

        public override Kind GetObjectType()
        {
            return Kind.Int16TimeseriesPropertyDefinition;
        }

        public override BaseData<Kind> Create()
        {
            return new Int16TimeseriesPropertyDefinitionObject( );
        }

        public override void AssignTo( BaseData<Kind> target )
        {
            base.AssignTo( target );
            var destination = ( Int16TimeseriesPropertyDefinitionObject )target;
            destination._minValue = _minValue;
            destination._maxValue = _maxValue;
        }

        public override bool Equals(BaseData<Kind>? other)
        {
            if (base.Equals(other))
            {
                var obj = ( Int16TimeseriesPropertyDefinitionObject )other;
                if( obj._minValue != _minValue )
                {
                    return false;
                }
                if( obj._maxValue != _maxValue )
                {
                    return false;
                }
                return true;
            }
            return false;
        }

        public override bool IsOfType(Kind objectType)
        {
            if( objectType == Kind.Int16TimeseriesPropertyDefinition )
            {
                return true;
            }
            return base.IsOfType( objectType );
        }

        public short MinValue
        {
            get => _minValue;
            set
            {
                if( _minValue != value )
                {
                    _minValue = value;
                    OnPropertyChanged( );
                }
            }
        }
        public short MaxValue
        {
            get => _maxValue;
            set
            {
                if( _maxValue != value )
                {
                    _maxValue = value;
                    OnPropertyChanged( );
                }
            }
        }

        public override void WriteTo( [ DisallowNull ] BinaryWriter destination )
        {
            base.WriteTo( destination );
            destination.Write( _minValue );
            destination.Write( _maxValue );
        }

        public override void ReadFrom([DisallowNull] BinaryReader source)
        {
            base.ReadFrom( source );
            _minValue = source.ReadInt16( );
            _maxValue = source.ReadInt16( );
        }

    }
    public class Int32TimeseriesPropertyDefinitionObject : TimeseriesPropertyDefinitionObject
    {
        int _minValue = 0;
        int _maxValue = 0;
        public Int32TimeseriesPropertyDefinitionObject( )
        {
        }

        public Int32TimeseriesPropertyDefinitionObject( ObjectState objectState, Guid id, long rowVersion, Guid elementType, string name, string description, int minValue, int maxValue )
            : base( objectState, id, rowVersion, elementType, name, description )
        {
            _minValue = minValue;
            _maxValue = maxValue;
        }

        public override Kind GetObjectType()
        {
            return Kind.Int32TimeseriesPropertyDefinition;
        }

        public override BaseData<Kind> Create()
        {
            return new Int32TimeseriesPropertyDefinitionObject( );
        }

        public override void AssignTo( BaseData<Kind> target )
        {
            base.AssignTo( target );
            var destination = ( Int32TimeseriesPropertyDefinitionObject )target;
            destination._minValue = _minValue;
            destination._maxValue = _maxValue;
        }

        public override bool Equals(BaseData<Kind>? other)
        {
            if (base.Equals(other))
            {
                var obj = ( Int32TimeseriesPropertyDefinitionObject )other;
                if( obj._minValue != _minValue )
                {
                    return false;
                }
                if( obj._maxValue != _maxValue )
                {
                    return false;
                }
                return true;
            }
            return false;
        }

        public override bool IsOfType(Kind objectType)
        {
            if( objectType == Kind.Int32TimeseriesPropertyDefinition )
            {
                return true;
            }
            return base.IsOfType( objectType );
        }

        public int MinValue
        {
            get => _minValue;
            set
            {
                if( _minValue != value )
                {
                    _minValue = value;
                    OnPropertyChanged( );
                }
            }
        }
        public int MaxValue
        {
            get => _maxValue;
            set
            {
                if( _maxValue != value )
                {
                    _maxValue = value;
                    OnPropertyChanged( );
                }
            }
        }

        public override void WriteTo( [ DisallowNull ] BinaryWriter destination )
        {
            base.WriteTo( destination );
            destination.Write( _minValue );
            destination.Write( _maxValue );
        }

        public override void ReadFrom([DisallowNull] BinaryReader source)
        {
            base.ReadFrom( source );
            _minValue = source.ReadInt32( );
            _maxValue = source.ReadInt32( );
        }

    }
    public class Int64TimeseriesPropertyDefinitionObject : TimeseriesPropertyDefinitionObject
    {
        long _minValue = 0;
        long _maxValue = 0;
        public Int64TimeseriesPropertyDefinitionObject( )
        {
        }

        public Int64TimeseriesPropertyDefinitionObject( ObjectState objectState, Guid id, long rowVersion, Guid elementType, string name, string description, long minValue, long maxValue )
            : base( objectState, id, rowVersion, elementType, name, description )
        {
            _minValue = minValue;
            _maxValue = maxValue;
        }

        public override Kind GetObjectType()
        {
            return Kind.Int64TimeseriesPropertyDefinition;
        }

        public override BaseData<Kind> Create()
        {
            return new Int64TimeseriesPropertyDefinitionObject( );
        }

        public override void AssignTo( BaseData<Kind> target )
        {
            base.AssignTo( target );
            var destination = ( Int64TimeseriesPropertyDefinitionObject )target;
            destination._minValue = _minValue;
            destination._maxValue = _maxValue;
        }

        public override bool Equals(BaseData<Kind>? other)
        {
            if (base.Equals(other))
            {
                var obj = ( Int64TimeseriesPropertyDefinitionObject )other;
                if( obj._minValue != _minValue )
                {
                    return false;
                }
                if( obj._maxValue != _maxValue )
                {
                    return false;
                }
                return true;
            }
            return false;
        }

        public override bool IsOfType(Kind objectType)
        {
            if( objectType == Kind.Int64TimeseriesPropertyDefinition )
            {
                return true;
            }
            return base.IsOfType( objectType );
        }

        public long MinValue
        {
            get => _minValue;
            set
            {
                if( _minValue != value )
                {
                    _minValue = value;
                    OnPropertyChanged( );
                }
            }
        }
        public long MaxValue
        {
            get => _maxValue;
            set
            {
                if( _maxValue != value )
                {
                    _maxValue = value;
                    OnPropertyChanged( );
                }
            }
        }

        public override void WriteTo( [ DisallowNull ] BinaryWriter destination )
        {
            base.WriteTo( destination );
            destination.Write( _minValue );
            destination.Write( _maxValue );
        }

        public override void ReadFrom([DisallowNull] BinaryReader source)
        {
            base.ReadFrom( source );
            _minValue = source.ReadInt64( );
            _maxValue = source.ReadInt64( );
        }

    }
    public class ReferenceTimeseriesPropertyDefinitionObject : TimeseriesPropertyDefinitionObject
    {
        Guid _referencedElementType;
        public ReferenceTimeseriesPropertyDefinitionObject( )
        {
        }

        public ReferenceTimeseriesPropertyDefinitionObject( ObjectState objectState, Guid id, long rowVersion, Guid elementType, string name, string description, Guid referencedElementType )
            : base( objectState, id, rowVersion, elementType, name, description )
        {
            _referencedElementType = referencedElementType;
        }

        public override Kind GetObjectType()
        {
            return Kind.ReferenceTimeseriesPropertyDefinition;
        }

        public override BaseData<Kind> Create()
        {
            return new ReferenceTimeseriesPropertyDefinitionObject( );
        }

        public override void AssignTo( BaseData<Kind> target )
        {
            base.AssignTo( target );
            var destination = ( ReferenceTimeseriesPropertyDefinitionObject )target;
            destination._referencedElementType = _referencedElementType;
        }

        public override bool Equals(BaseData<Kind>? other)
        {
            if (base.Equals(other))
            {
                var obj = ( ReferenceTimeseriesPropertyDefinitionObject )other;
                if( obj._referencedElementType != _referencedElementType )
                {
                    return false;
                }
                return true;
            }
            return false;
        }

        public override bool IsOfType(Kind objectType)
        {
            if( objectType == Kind.ReferenceTimeseriesPropertyDefinition )
            {
                return true;
            }
            return base.IsOfType( objectType );
        }

        public Guid ReferencedElementType
        {
            get => _referencedElementType;
            set
            {
                if( _referencedElementType != value )
                {
                    _referencedElementType = value;
                    OnPropertyChanged( );
                }
            }
        }

        public override void WriteTo( [ DisallowNull ] BinaryWriter destination )
        {
            base.WriteTo( destination );
            destination.Write( _referencedElementType );
        }

        public override void ReadFrom([DisallowNull] BinaryReader source)
        {
            base.ReadFrom( source );
            _referencedElementType = source.ReadGuid( );
        }

    }
    public class SByteTimeseriesPropertyDefinitionObject : TimeseriesPropertyDefinitionObject
    {
        sbyte _minValue = 0;
        sbyte _maxValue = 0;
        public SByteTimeseriesPropertyDefinitionObject( )
        {
        }

        public SByteTimeseriesPropertyDefinitionObject( ObjectState objectState, Guid id, long rowVersion, Guid elementType, string name, string description, sbyte minValue, sbyte maxValue )
            : base( objectState, id, rowVersion, elementType, name, description )
        {
            _minValue = minValue;
            _maxValue = maxValue;
        }

        public override Kind GetObjectType()
        {
            return Kind.SByteTimeseriesPropertyDefinition;
        }

        public override BaseData<Kind> Create()
        {
            return new SByteTimeseriesPropertyDefinitionObject( );
        }

        public override void AssignTo( BaseData<Kind> target )
        {
            base.AssignTo( target );
            var destination = ( SByteTimeseriesPropertyDefinitionObject )target;
            destination._minValue = _minValue;
            destination._maxValue = _maxValue;
        }

        public override bool Equals(BaseData<Kind>? other)
        {
            if (base.Equals(other))
            {
                var obj = ( SByteTimeseriesPropertyDefinitionObject )other;
                if( obj._minValue != _minValue )
                {
                    return false;
                }
                if( obj._maxValue != _maxValue )
                {
                    return false;
                }
                return true;
            }
            return false;
        }

        public override bool IsOfType(Kind objectType)
        {
            if( objectType == Kind.SByteTimeseriesPropertyDefinition )
            {
                return true;
            }
            return base.IsOfType( objectType );
        }

        public sbyte MinValue
        {
            get => _minValue;
            set
            {
                if( _minValue != value )
                {
                    _minValue = value;
                    OnPropertyChanged( );
                }
            }
        }
        public sbyte MaxValue
        {
            get => _maxValue;
            set
            {
                if( _maxValue != value )
                {
                    _maxValue = value;
                    OnPropertyChanged( );
                }
            }
        }

        public override void WriteTo( [ DisallowNull ] BinaryWriter destination )
        {
            base.WriteTo( destination );
            destination.Write( _minValue );
            destination.Write( _maxValue );
        }

        public override void ReadFrom([DisallowNull] BinaryReader source)
        {
            base.ReadFrom( source );
            _minValue = source.ReadSByte( );
            _maxValue = source.ReadSByte( );
        }

    }
    public class SingleTimeseriesPropertyDefinitionObject : TimeseriesPropertyDefinitionObject
    {
        float _minValue = 0.0f;
        float _maxValue = 0.0f;
        public SingleTimeseriesPropertyDefinitionObject( )
        {
        }

        public SingleTimeseriesPropertyDefinitionObject( ObjectState objectState, Guid id, long rowVersion, Guid elementType, string name, string description, float minValue, float maxValue )
            : base( objectState, id, rowVersion, elementType, name, description )
        {
            _minValue = minValue;
            _maxValue = maxValue;
        }

        public override Kind GetObjectType()
        {
            return Kind.SingleTimeseriesPropertyDefinition;
        }

        public override BaseData<Kind> Create()
        {
            return new SingleTimeseriesPropertyDefinitionObject( );
        }

        public override void AssignTo( BaseData<Kind> target )
        {
            base.AssignTo( target );
            var destination = ( SingleTimeseriesPropertyDefinitionObject )target;
            destination._minValue = _minValue;
            destination._maxValue = _maxValue;
        }

        public override bool Equals(BaseData<Kind>? other)
        {
            if (base.Equals(other))
            {
                var obj = ( SingleTimeseriesPropertyDefinitionObject )other;
                if( obj._minValue != _minValue )
                {
                    return false;
                }
                if( obj._maxValue != _maxValue )
                {
                    return false;
                }
                return true;
            }
            return false;
        }

        public override bool IsOfType(Kind objectType)
        {
            if( objectType == Kind.SingleTimeseriesPropertyDefinition )
            {
                return true;
            }
            return base.IsOfType( objectType );
        }

        public float MinValue
        {
            get => _minValue;
            set
            {
                if( _minValue != value )
                {
                    _minValue = value;
                    OnPropertyChanged( );
                }
            }
        }
        public float MaxValue
        {
            get => _maxValue;
            set
            {
                if( _maxValue != value )
                {
                    _maxValue = value;
                    OnPropertyChanged( );
                }
            }
        }

        public override void WriteTo( [ DisallowNull ] BinaryWriter destination )
        {
            base.WriteTo( destination );
            destination.Write( _minValue );
            destination.Write( _maxValue );
        }

        public override void ReadFrom([DisallowNull] BinaryReader source)
        {
            base.ReadFrom( source );
            _minValue = source.ReadSingle( );
            _maxValue = source.ReadSingle( );
        }

    }
    public class StringTimeseriesPropertyDefinitionObject : TimeseriesPropertyDefinitionObject
    {
        string _pattern = string.Empty;
        public StringTimeseriesPropertyDefinitionObject( )
        {
        }

        public StringTimeseriesPropertyDefinitionObject( ObjectState objectState, Guid id, long rowVersion, Guid elementType, string name, string description, string pattern )
            : base( objectState, id, rowVersion, elementType, name, description )
        {
            _pattern = pattern;
        }

        public override Kind GetObjectType()
        {
            return Kind.StringTimeseriesPropertyDefinition;
        }

        public override BaseData<Kind> Create()
        {
            return new StringTimeseriesPropertyDefinitionObject( );
        }

        public override void AssignTo( BaseData<Kind> target )
        {
            base.AssignTo( target );
            var destination = ( StringTimeseriesPropertyDefinitionObject )target;
            destination._pattern = _pattern;
        }

        public override bool Equals(BaseData<Kind>? other)
        {
            if (base.Equals(other))
            {
                var obj = ( StringTimeseriesPropertyDefinitionObject )other;
                if( obj._pattern != _pattern )
                {
                    return false;
                }
                return true;
            }
            return false;
        }

        public override bool IsOfType(Kind objectType)
        {
            if( objectType == Kind.StringTimeseriesPropertyDefinition )
            {
                return true;
            }
            return base.IsOfType( objectType );
        }

        public string Pattern
        {
            get => _pattern;
            set
            {
                if( _pattern != value )
                {
                    _pattern = value;
                    OnPropertyChanged( );
                }
            }
        }

        public override void WriteTo( [ DisallowNull ] BinaryWriter destination )
        {
            base.WriteTo( destination );
            destination.Write( _pattern );
        }

        public override void ReadFrom([DisallowNull] BinaryReader source)
        {
            base.ReadFrom( source );
            _pattern = source.ReadString( );
        }

    }
    public class TimeSpanTimeseriesPropertyDefinitionObject : TimeseriesPropertyDefinitionObject
    {
        TimeSpan _minValue;
        TimeSpan _maxValue;
        public TimeSpanTimeseriesPropertyDefinitionObject( )
        {
        }

        public TimeSpanTimeseriesPropertyDefinitionObject( ObjectState objectState, Guid id, long rowVersion, Guid elementType, string name, string description, TimeSpan minValue, TimeSpan maxValue )
            : base( objectState, id, rowVersion, elementType, name, description )
        {
            _minValue = minValue;
            _maxValue = maxValue;
        }

        public override Kind GetObjectType()
        {
            return Kind.TimeSpanTimeseriesPropertyDefinition;
        }

        public override BaseData<Kind> Create()
        {
            return new TimeSpanTimeseriesPropertyDefinitionObject( );
        }

        public override void AssignTo( BaseData<Kind> target )
        {
            base.AssignTo( target );
            var destination = ( TimeSpanTimeseriesPropertyDefinitionObject )target;
            destination._minValue = _minValue;
            destination._maxValue = _maxValue;
        }

        public override bool Equals(BaseData<Kind>? other)
        {
            if (base.Equals(other))
            {
                var obj = ( TimeSpanTimeseriesPropertyDefinitionObject )other;
                if( obj._minValue != _minValue )
                {
                    return false;
                }
                if( obj._maxValue != _maxValue )
                {
                    return false;
                }
                return true;
            }
            return false;
        }

        public override bool IsOfType(Kind objectType)
        {
            if( objectType == Kind.TimeSpanTimeseriesPropertyDefinition )
            {
                return true;
            }
            return base.IsOfType( objectType );
        }

        public TimeSpan MinValue
        {
            get => _minValue;
            set
            {
                if( _minValue != value )
                {
                    _minValue = value;
                    OnPropertyChanged( );
                }
            }
        }
        public TimeSpan MaxValue
        {
            get => _maxValue;
            set
            {
                if( _maxValue != value )
                {
                    _maxValue = value;
                    OnPropertyChanged( );
                }
            }
        }

        public override void WriteTo( [ DisallowNull ] BinaryWriter destination )
        {
            base.WriteTo( destination );
            destination.Write( _minValue );
            destination.Write( _maxValue );
        }

        public override void ReadFrom([DisallowNull] BinaryReader source)
        {
            base.ReadFrom( source );
            _minValue = source.ReadTimeSpan( );
            _maxValue = source.ReadTimeSpan( );
        }

    }
    public class UInt16TimeseriesPropertyDefinitionObject : TimeseriesPropertyDefinitionObject
    {
        ushort _minValue = 0;
        ushort _maxValue = 0;
        public UInt16TimeseriesPropertyDefinitionObject( )
        {
        }

        public UInt16TimeseriesPropertyDefinitionObject( ObjectState objectState, Guid id, long rowVersion, Guid elementType, string name, string description, ushort minValue, ushort maxValue )
            : base( objectState, id, rowVersion, elementType, name, description )
        {
            _minValue = minValue;
            _maxValue = maxValue;
        }

        public override Kind GetObjectType()
        {
            return Kind.UInt16TimeseriesPropertyDefinition;
        }

        public override BaseData<Kind> Create()
        {
            return new UInt16TimeseriesPropertyDefinitionObject( );
        }

        public override void AssignTo( BaseData<Kind> target )
        {
            base.AssignTo( target );
            var destination = ( UInt16TimeseriesPropertyDefinitionObject )target;
            destination._minValue = _minValue;
            destination._maxValue = _maxValue;
        }

        public override bool Equals(BaseData<Kind>? other)
        {
            if (base.Equals(other))
            {
                var obj = ( UInt16TimeseriesPropertyDefinitionObject )other;
                if( obj._minValue != _minValue )
                {
                    return false;
                }
                if( obj._maxValue != _maxValue )
                {
                    return false;
                }
                return true;
            }
            return false;
        }

        public override bool IsOfType(Kind objectType)
        {
            if( objectType == Kind.UInt16TimeseriesPropertyDefinition )
            {
                return true;
            }
            return base.IsOfType( objectType );
        }

        public ushort MinValue
        {
            get => _minValue;
            set
            {
                if( _minValue != value )
                {
                    _minValue = value;
                    OnPropertyChanged( );
                }
            }
        }
        public ushort MaxValue
        {
            get => _maxValue;
            set
            {
                if( _maxValue != value )
                {
                    _maxValue = value;
                    OnPropertyChanged( );
                }
            }
        }

        public override void WriteTo( [ DisallowNull ] BinaryWriter destination )
        {
            base.WriteTo( destination );
            destination.Write( _minValue );
            destination.Write( _maxValue );
        }

        public override void ReadFrom([DisallowNull] BinaryReader source)
        {
            base.ReadFrom( source );
            _minValue = source.ReadUInt16( );
            _maxValue = source.ReadUInt16( );
        }

    }
    public class UInt32TimeseriesPropertyDefinitionObject : TimeseriesPropertyDefinitionObject
    {
        uint _minValue = 0;
        uint _maxValue = 0;
        public UInt32TimeseriesPropertyDefinitionObject( )
        {
        }

        public UInt32TimeseriesPropertyDefinitionObject( ObjectState objectState, Guid id, long rowVersion, Guid elementType, string name, string description, uint minValue, uint maxValue )
            : base( objectState, id, rowVersion, elementType, name, description )
        {
            _minValue = minValue;
            _maxValue = maxValue;
        }

        public override Kind GetObjectType()
        {
            return Kind.UInt32TimeseriesPropertyDefinition;
        }

        public override BaseData<Kind> Create()
        {
            return new UInt32TimeseriesPropertyDefinitionObject( );
        }

        public override void AssignTo( BaseData<Kind> target )
        {
            base.AssignTo( target );
            var destination = ( UInt32TimeseriesPropertyDefinitionObject )target;
            destination._minValue = _minValue;
            destination._maxValue = _maxValue;
        }

        public override bool Equals(BaseData<Kind>? other)
        {
            if (base.Equals(other))
            {
                var obj = ( UInt32TimeseriesPropertyDefinitionObject )other;
                if( obj._minValue != _minValue )
                {
                    return false;
                }
                if( obj._maxValue != _maxValue )
                {
                    return false;
                }
                return true;
            }
            return false;
        }

        public override bool IsOfType(Kind objectType)
        {
            if( objectType == Kind.UInt32TimeseriesPropertyDefinition )
            {
                return true;
            }
            return base.IsOfType( objectType );
        }

        public uint MinValue
        {
            get => _minValue;
            set
            {
                if( _minValue != value )
                {
                    _minValue = value;
                    OnPropertyChanged( );
                }
            }
        }
        public uint MaxValue
        {
            get => _maxValue;
            set
            {
                if( _maxValue != value )
                {
                    _maxValue = value;
                    OnPropertyChanged( );
                }
            }
        }

        public override void WriteTo( [ DisallowNull ] BinaryWriter destination )
        {
            base.WriteTo( destination );
            destination.Write( _minValue );
            destination.Write( _maxValue );
        }

        public override void ReadFrom([DisallowNull] BinaryReader source)
        {
            base.ReadFrom( source );
            _minValue = source.ReadUInt32( );
            _maxValue = source.ReadUInt32( );
        }

    }
    public class UInt64TimeseriesPropertyDefinitionObject : TimeseriesPropertyDefinitionObject
    {
        long _minValue = 0;
        long _maxValue = 0;
        public UInt64TimeseriesPropertyDefinitionObject( )
        {
        }

        public UInt64TimeseriesPropertyDefinitionObject( ObjectState objectState, Guid id, long rowVersion, Guid elementType, string name, string description, long minValue, long maxValue )
            : base( objectState, id, rowVersion, elementType, name, description )
        {
            _minValue = minValue;
            _maxValue = maxValue;
        }

        public override Kind GetObjectType()
        {
            return Kind.UInt64TimeseriesPropertyDefinition;
        }

        public override BaseData<Kind> Create()
        {
            return new UInt64TimeseriesPropertyDefinitionObject( );
        }

        public override void AssignTo( BaseData<Kind> target )
        {
            base.AssignTo( target );
            var destination = ( UInt64TimeseriesPropertyDefinitionObject )target;
            destination._minValue = _minValue;
            destination._maxValue = _maxValue;
        }

        public override bool Equals(BaseData<Kind>? other)
        {
            if (base.Equals(other))
            {
                var obj = ( UInt64TimeseriesPropertyDefinitionObject )other;
                if( obj._minValue != _minValue )
                {
                    return false;
                }
                if( obj._maxValue != _maxValue )
                {
                    return false;
                }
                return true;
            }
            return false;
        }

        public override bool IsOfType(Kind objectType)
        {
            if( objectType == Kind.UInt64TimeseriesPropertyDefinition )
            {
                return true;
            }
            return base.IsOfType( objectType );
        }

        public long MinValue
        {
            get => _minValue;
            set
            {
                if( _minValue != value )
                {
                    _minValue = value;
                    OnPropertyChanged( );
                }
            }
        }
        public long MaxValue
        {
            get => _maxValue;
            set
            {
                if( _maxValue != value )
                {
                    _maxValue = value;
                    OnPropertyChanged( );
                }
            }
        }

        public override void WriteTo( [ DisallowNull ] BinaryWriter destination )
        {
            base.WriteTo( destination );
            destination.Write( _minValue );
            destination.Write( _maxValue );
        }

        public override void ReadFrom([DisallowNull] BinaryReader source)
        {
            base.ReadFrom( source );
            _minValue = source.ReadInt64( );
            _maxValue = source.ReadInt64( );
        }

    }
    public class TimeSpanPropertyDefinitionObject : PropertyDefinitionObject
    {
        TimeSpan _defaultValue;
        TimeSpan _minValue;
        TimeSpan _maxValue;
        public TimeSpanPropertyDefinitionObject( )
        {
        }

        public TimeSpanPropertyDefinitionObject( ObjectState objectState, Guid id, long rowVersion, Guid elementType, string name, string description, TimeSpan defaultValue, TimeSpan minValue, TimeSpan maxValue )
            : base( objectState, id, rowVersion, elementType, name, description )
        {
            _defaultValue = defaultValue;
            _minValue = minValue;
            _maxValue = maxValue;
        }

        public override Kind GetObjectType()
        {
            return Kind.TimeSpanPropertyDefinition;
        }

        public override BaseData<Kind> Create()
        {
            return new TimeSpanPropertyDefinitionObject( );
        }

        public override void AssignTo( BaseData<Kind> target )
        {
            base.AssignTo( target );
            var destination = ( TimeSpanPropertyDefinitionObject )target;
            destination._defaultValue = _defaultValue;
            destination._minValue = _minValue;
            destination._maxValue = _maxValue;
        }

        public override bool Equals(BaseData<Kind>? other)
        {
            if (base.Equals(other))
            {
                var obj = ( TimeSpanPropertyDefinitionObject )other;
                if( obj._defaultValue != _defaultValue )
                {
                    return false;
                }
                if( obj._minValue != _minValue )
                {
                    return false;
                }
                if( obj._maxValue != _maxValue )
                {
                    return false;
                }
                return true;
            }
            return false;
        }

        public override bool IsOfType(Kind objectType)
        {
            if( objectType == Kind.TimeSpanPropertyDefinition )
            {
                return true;
            }
            return base.IsOfType( objectType );
        }

        public TimeSpan DefaultValue
        {
            get => _defaultValue;
            set
            {
                if( _defaultValue != value )
                {
                    _defaultValue = value;
                    OnPropertyChanged( );
                }
            }
        }
        public TimeSpan MinValue
        {
            get => _minValue;
            set
            {
                if( _minValue != value )
                {
                    _minValue = value;
                    OnPropertyChanged( );
                }
            }
        }
        public TimeSpan MaxValue
        {
            get => _maxValue;
            set
            {
                if( _maxValue != value )
                {
                    _maxValue = value;
                    OnPropertyChanged( );
                }
            }
        }

        public override void WriteTo( [ DisallowNull ] BinaryWriter destination )
        {
            base.WriteTo( destination );
            destination.Write( _defaultValue );
            destination.Write( _minValue );
            destination.Write( _maxValue );
        }

        public override void ReadFrom([DisallowNull] BinaryReader source)
        {
            base.ReadFrom( source );
            _defaultValue = source.ReadTimeSpan( );
            _minValue = source.ReadTimeSpan( );
            _maxValue = source.ReadTimeSpan( );
        }

    }
    public class UInt16PropertyDefinitionObject : PropertyDefinitionObject
    {
        ushort _defaultValue = 0;
        ushort _minValue = 0;
        ushort _maxValue = 0;
        public UInt16PropertyDefinitionObject( )
        {
        }

        public UInt16PropertyDefinitionObject( ObjectState objectState, Guid id, long rowVersion, Guid elementType, string name, string description, ushort defaultValue, ushort minValue, ushort maxValue )
            : base( objectState, id, rowVersion, elementType, name, description )
        {
            _defaultValue = defaultValue;
            _minValue = minValue;
            _maxValue = maxValue;
        }

        public override Kind GetObjectType()
        {
            return Kind.UInt16PropertyDefinition;
        }

        public override BaseData<Kind> Create()
        {
            return new UInt16PropertyDefinitionObject( );
        }

        public override void AssignTo( BaseData<Kind> target )
        {
            base.AssignTo( target );
            var destination = ( UInt16PropertyDefinitionObject )target;
            destination._defaultValue = _defaultValue;
            destination._minValue = _minValue;
            destination._maxValue = _maxValue;
        }

        public override bool Equals(BaseData<Kind>? other)
        {
            if (base.Equals(other))
            {
                var obj = ( UInt16PropertyDefinitionObject )other;
                if( obj._defaultValue != _defaultValue )
                {
                    return false;
                }
                if( obj._minValue != _minValue )
                {
                    return false;
                }
                if( obj._maxValue != _maxValue )
                {
                    return false;
                }
                return true;
            }
            return false;
        }

        public override bool IsOfType(Kind objectType)
        {
            if( objectType == Kind.UInt16PropertyDefinition )
            {
                return true;
            }
            return base.IsOfType( objectType );
        }

        public ushort DefaultValue
        {
            get => _defaultValue;
            set
            {
                if( _defaultValue != value )
                {
                    _defaultValue = value;
                    OnPropertyChanged( );
                }
            }
        }
        public ushort MinValue
        {
            get => _minValue;
            set
            {
                if( _minValue != value )
                {
                    _minValue = value;
                    OnPropertyChanged( );
                }
            }
        }
        public ushort MaxValue
        {
            get => _maxValue;
            set
            {
                if( _maxValue != value )
                {
                    _maxValue = value;
                    OnPropertyChanged( );
                }
            }
        }

        public override void WriteTo( [ DisallowNull ] BinaryWriter destination )
        {
            base.WriteTo( destination );
            destination.Write( _defaultValue );
            destination.Write( _minValue );
            destination.Write( _maxValue );
        }

        public override void ReadFrom([DisallowNull] BinaryReader source)
        {
            base.ReadFrom( source );
            _defaultValue = source.ReadUInt16( );
            _minValue = source.ReadUInt16( );
            _maxValue = source.ReadUInt16( );
        }

    }
    public class UInt32PropertyDefinitionObject : PropertyDefinitionObject
    {
        uint _defaultValue = 0;
        uint _minValue = 0;
        uint _maxValue = 0;
        public UInt32PropertyDefinitionObject( )
        {
        }

        public UInt32PropertyDefinitionObject( ObjectState objectState, Guid id, long rowVersion, Guid elementType, string name, string description, uint defaultValue, uint minValue, uint maxValue )
            : base( objectState, id, rowVersion, elementType, name, description )
        {
            _defaultValue = defaultValue;
            _minValue = minValue;
            _maxValue = maxValue;
        }

        public override Kind GetObjectType()
        {
            return Kind.UInt32PropertyDefinition;
        }

        public override BaseData<Kind> Create()
        {
            return new UInt32PropertyDefinitionObject( );
        }

        public override void AssignTo( BaseData<Kind> target )
        {
            base.AssignTo( target );
            var destination = ( UInt32PropertyDefinitionObject )target;
            destination._defaultValue = _defaultValue;
            destination._minValue = _minValue;
            destination._maxValue = _maxValue;
        }

        public override bool Equals(BaseData<Kind>? other)
        {
            if (base.Equals(other))
            {
                var obj = ( UInt32PropertyDefinitionObject )other;
                if( obj._defaultValue != _defaultValue )
                {
                    return false;
                }
                if( obj._minValue != _minValue )
                {
                    return false;
                }
                if( obj._maxValue != _maxValue )
                {
                    return false;
                }
                return true;
            }
            return false;
        }

        public override bool IsOfType(Kind objectType)
        {
            if( objectType == Kind.UInt32PropertyDefinition )
            {
                return true;
            }
            return base.IsOfType( objectType );
        }

        public uint DefaultValue
        {
            get => _defaultValue;
            set
            {
                if( _defaultValue != value )
                {
                    _defaultValue = value;
                    OnPropertyChanged( );
                }
            }
        }
        public uint MinValue
        {
            get => _minValue;
            set
            {
                if( _minValue != value )
                {
                    _minValue = value;
                    OnPropertyChanged( );
                }
            }
        }
        public uint MaxValue
        {
            get => _maxValue;
            set
            {
                if( _maxValue != value )
                {
                    _maxValue = value;
                    OnPropertyChanged( );
                }
            }
        }

        public override void WriteTo( [ DisallowNull ] BinaryWriter destination )
        {
            base.WriteTo( destination );
            destination.Write( _defaultValue );
            destination.Write( _minValue );
            destination.Write( _maxValue );
        }

        public override void ReadFrom([DisallowNull] BinaryReader source)
        {
            base.ReadFrom( source );
            _defaultValue = source.ReadUInt32( );
            _minValue = source.ReadUInt32( );
            _maxValue = source.ReadUInt32( );
        }

    }
    public class UInt64PropertyDefinitionObject : PropertyDefinitionObject
    {
        long _defaultValue = 0;
        long _minValue = 0;
        long _maxValue = 0;
        public UInt64PropertyDefinitionObject( )
        {
        }

        public UInt64PropertyDefinitionObject( ObjectState objectState, Guid id, long rowVersion, Guid elementType, string name, string description, long defaultValue, long minValue, long maxValue )
            : base( objectState, id, rowVersion, elementType, name, description )
        {
            _defaultValue = defaultValue;
            _minValue = minValue;
            _maxValue = maxValue;
        }

        public override Kind GetObjectType()
        {
            return Kind.UInt64PropertyDefinition;
        }

        public override BaseData<Kind> Create()
        {
            return new UInt64PropertyDefinitionObject( );
        }

        public override void AssignTo( BaseData<Kind> target )
        {
            base.AssignTo( target );
            var destination = ( UInt64PropertyDefinitionObject )target;
            destination._defaultValue = _defaultValue;
            destination._minValue = _minValue;
            destination._maxValue = _maxValue;
        }

        public override bool Equals(BaseData<Kind>? other)
        {
            if (base.Equals(other))
            {
                var obj = ( UInt64PropertyDefinitionObject )other;
                if( obj._defaultValue != _defaultValue )
                {
                    return false;
                }
                if( obj._minValue != _minValue )
                {
                    return false;
                }
                if( obj._maxValue != _maxValue )
                {
                    return false;
                }
                return true;
            }
            return false;
        }

        public override bool IsOfType(Kind objectType)
        {
            if( objectType == Kind.UInt64PropertyDefinition )
            {
                return true;
            }
            return base.IsOfType( objectType );
        }

        public long DefaultValue
        {
            get => _defaultValue;
            set
            {
                if( _defaultValue != value )
                {
                    _defaultValue = value;
                    OnPropertyChanged( );
                }
            }
        }
        public long MinValue
        {
            get => _minValue;
            set
            {
                if( _minValue != value )
                {
                    _minValue = value;
                    OnPropertyChanged( );
                }
            }
        }
        public long MaxValue
        {
            get => _maxValue;
            set
            {
                if( _maxValue != value )
                {
                    _maxValue = value;
                    OnPropertyChanged( );
                }
            }
        }

        public override void WriteTo( [ DisallowNull ] BinaryWriter destination )
        {
            base.WriteTo( destination );
            destination.Write( _defaultValue );
            destination.Write( _minValue );
            destination.Write( _maxValue );
        }

        public override void ReadFrom([DisallowNull] BinaryReader source)
        {
            base.ReadFrom( source );
            _defaultValue = source.ReadInt64( );
            _minValue = source.ReadInt64( );
            _maxValue = source.ReadInt64( );
        }

    }
    public class RadarAlarmStatusObject : BaseDataGuid<Kind>
    {
        long _rowVersion = 0;
        Guid _radar;
        DateTime _timestamp;
        Types.AlarmState _type = Types.AlarmState.Unknown;
        public RadarAlarmStatusObject( )
        {
        }

        public RadarAlarmStatusObject( ObjectState objectState, Guid id, long rowVersion, Guid radar, DateTime timestamp, Types.AlarmState type )
            : base( objectState, id )
        {
            _rowVersion = rowVersion;
            _radar = radar;
            _timestamp = timestamp;
            _type = type;
        }

        public override Kind GetObjectType()
        {
            return Kind.RadarAlarmStatus;
        }

        public override BaseData<Kind> Create()
        {
            return new RadarAlarmStatusObject( );
        }

        public override void AssignTo( BaseData<Kind> target )
        {
            base.AssignTo( target );
            var destination = ( RadarAlarmStatusObject )target;
            destination._rowVersion = _rowVersion;
            destination._radar = _radar;
            destination._timestamp = _timestamp;
            destination._type = _type;
        }

        public override bool Equals(BaseData<Kind>? other)
        {
            if (base.Equals(other))
            {
                var obj = ( RadarAlarmStatusObject )other;
                if( obj._rowVersion != _rowVersion )
                {
                    return false;
                }
                if( obj._radar != _radar )
                {
                    return false;
                }
                if( obj._timestamp != _timestamp )
                {
                    return false;
                }
                if( obj._type != _type )
                {
                    return false;
                }
                return true;
            }
            return false;
        }

        public override bool IsOfType(Kind objectType)
        {
            if( objectType == Kind.RadarAlarmStatus )
            {
                return true;
            }
            return base.IsOfType( objectType );
        }

        public long RowVersion
        {
            get => _rowVersion;
            set
            {
                if( _rowVersion != value )
                {
                    _rowVersion = value;
                    OnPropertyChanged( );
                }
            }
        }
        public Guid Radar
        {
            get => _radar;
            set
            {
                if( _radar != value )
                {
                    _radar = value;
                    OnPropertyChanged( );
                }
            }
        }
        public DateTime Timestamp
        {
            get => _timestamp;
            set
            {
                if( _timestamp != value )
                {
                    _timestamp = value;
                    OnPropertyChanged( );
                }
            }
        }
        public Types.AlarmState Type
        {
            get => _type;
            set
            {
                if( _type != value )
                {
                    _type = value;
                    OnPropertyChanged( );
                }
            }
        }

        public override void WriteTo( [ DisallowNull ] BinaryWriter destination )
        {
            base.WriteTo( destination );
            destination.Write( _rowVersion );
            destination.Write( _radar );
            destination.Write( _timestamp );
            destination.Write( _type );
        }

        public override void ReadFrom([DisallowNull] BinaryReader source)
        {
            base.ReadFrom( source );
            _rowVersion = source.ReadInt64( );
            _radar = source.ReadGuid( );
            _timestamp = source.ReadDateTime( );
            _type = source.ReadEnum<Types.AlarmState>( );
        }

    }
    public class RadarCommandObject : BaseDataGuid<Kind>
    {
        long _rowVersion = 0;
        Guid _radar;
        DateTime _timestamp;
        Types.DeviceCommandSourceType _deviceCommandSourceType = Types.DeviceCommandSourceType.Unknown;
        Guid _deviceCommandSourceId;
        Guid _reply;
        public RadarCommandObject( )
        {
        }

        public RadarCommandObject( ObjectState objectState, Guid id, long rowVersion, Guid radar, DateTime timestamp, Types.DeviceCommandSourceType deviceCommandSourceType, Guid deviceCommandSourceId, Guid reply )
            : base( objectState, id )
        {
            _rowVersion = rowVersion;
            _radar = radar;
            _timestamp = timestamp;
            _deviceCommandSourceType = deviceCommandSourceType;
            _deviceCommandSourceId = deviceCommandSourceId;
            _reply = reply;
        }

        public override Kind GetObjectType()
        {
            return Kind.RadarCommand;
        }

        public override BaseData<Kind> Create()
        {
            return new RadarCommandObject( );
        }

        public override void AssignTo( BaseData<Kind> target )
        {
            base.AssignTo( target );
            var destination = ( RadarCommandObject )target;
            destination._rowVersion = _rowVersion;
            destination._radar = _radar;
            destination._timestamp = _timestamp;
            destination._deviceCommandSourceType = _deviceCommandSourceType;
            destination._deviceCommandSourceId = _deviceCommandSourceId;
            destination._reply = _reply;
        }

        public override bool Equals(BaseData<Kind>? other)
        {
            if (base.Equals(other))
            {
                var obj = ( RadarCommandObject )other;
                if( obj._rowVersion != _rowVersion )
                {
                    return false;
                }
                if( obj._radar != _radar )
                {
                    return false;
                }
                if( obj._timestamp != _timestamp )
                {
                    return false;
                }
                if( obj._deviceCommandSourceType != _deviceCommandSourceType )
                {
                    return false;
                }
                if( obj._deviceCommandSourceId != _deviceCommandSourceId )
                {
                    return false;
                }
                if( obj._reply != _reply )
                {
                    return false;
                }
                return true;
            }
            return false;
        }

        public override bool IsOfType(Kind objectType)
        {
            if( objectType == Kind.RadarCommand )
            {
                return true;
            }
            return base.IsOfType( objectType );
        }

        public long RowVersion
        {
            get => _rowVersion;
            set
            {
                if( _rowVersion != value )
                {
                    _rowVersion = value;
                    OnPropertyChanged( );
                }
            }
        }
        public Guid Radar
        {
            get => _radar;
            set
            {
                if( _radar != value )
                {
                    _radar = value;
                    OnPropertyChanged( );
                }
            }
        }
        public DateTime Timestamp
        {
            get => _timestamp;
            set
            {
                if( _timestamp != value )
                {
                    _timestamp = value;
                    OnPropertyChanged( );
                }
            }
        }
        public Types.DeviceCommandSourceType DeviceCommandSourceType
        {
            get => _deviceCommandSourceType;
            set
            {
                if( _deviceCommandSourceType != value )
                {
                    _deviceCommandSourceType = value;
                    OnPropertyChanged( );
                }
            }
        }
        public Guid DeviceCommandSourceId
        {
            get => _deviceCommandSourceId;
            set
            {
                if( _deviceCommandSourceId != value )
                {
                    _deviceCommandSourceId = value;
                    OnPropertyChanged( );
                }
            }
        }
        public Guid Reply
        {
            get => _reply;
            set
            {
                if( _reply != value )
                {
                    _reply = value;
                    OnPropertyChanged( );
                }
            }
        }

        public override void WriteTo( [ DisallowNull ] BinaryWriter destination )
        {
            base.WriteTo( destination );
            destination.Write( _rowVersion );
            destination.Write( _radar );
            destination.Write( _timestamp );
            destination.Write( _deviceCommandSourceType );
            destination.Write( _deviceCommandSourceId );
            destination.Write( _reply );
        }

        public override void ReadFrom([DisallowNull] BinaryReader source)
        {
            base.ReadFrom( source );
            _rowVersion = source.ReadInt64( );
            _radar = source.ReadGuid( );
            _timestamp = source.ReadDateTime( );
            _deviceCommandSourceType = source.ReadEnum<Types.DeviceCommandSourceType>( );
            _deviceCommandSourceId = source.ReadGuid( );
            _reply = source.ReadGuid( );
        }

    }
    public class RadarCommandGetStatusObject : RadarCommandObject
    {
        public RadarCommandGetStatusObject( )
        {
        }

        public RadarCommandGetStatusObject( ObjectState objectState, Guid id, long rowVersion, Guid radar, DateTime timestamp, Types.DeviceCommandSourceType deviceCommandSourceType, Guid deviceCommandSourceId, Guid reply )
            : base( objectState, id, rowVersion, radar, timestamp, deviceCommandSourceType, deviceCommandSourceId, reply )
        {
        }

        public override Kind GetObjectType()
        {
            return Kind.RadarCommandGetStatus;
        }

        public override BaseData<Kind> Create()
        {
            return new RadarCommandGetStatusObject( );
        }

        public override bool IsOfType(Kind objectType)
        {
            if( objectType == Kind.RadarCommandGetStatus )
            {
                return true;
            }
            return base.IsOfType( objectType );
        }

    }
    public class RadarCommandReplyObject : BaseDataGuid<Kind>
    {
        long _rowVersion = 0;
        Guid _radar;
        DateTime _timestamp;
        Guid _command;
        Types.DeviceCommandReplyStatus _status = Types.DeviceCommandReplyStatus.Unknown;
        string _message = string.Empty;
        public RadarCommandReplyObject( )
        {
        }

        public RadarCommandReplyObject( ObjectState objectState, Guid id, long rowVersion, Guid radar, DateTime timestamp, Guid command, Types.DeviceCommandReplyStatus status, string message )
            : base( objectState, id )
        {
            _rowVersion = rowVersion;
            _radar = radar;
            _timestamp = timestamp;
            _command = command;
            _status = status;
            _message = message;
        }

        public override Kind GetObjectType()
        {
            return Kind.RadarCommandReply;
        }

        public override BaseData<Kind> Create()
        {
            return new RadarCommandReplyObject( );
        }

        public override void AssignTo( BaseData<Kind> target )
        {
            base.AssignTo( target );
            var destination = ( RadarCommandReplyObject )target;
            destination._rowVersion = _rowVersion;
            destination._radar = _radar;
            destination._timestamp = _timestamp;
            destination._command = _command;
            destination._status = _status;
            destination._message = _message;
        }

        public override bool Equals(BaseData<Kind>? other)
        {
            if (base.Equals(other))
            {
                var obj = ( RadarCommandReplyObject )other;
                if( obj._rowVersion != _rowVersion )
                {
                    return false;
                }
                if( obj._radar != _radar )
                {
                    return false;
                }
                if( obj._timestamp != _timestamp )
                {
                    return false;
                }
                if( obj._command != _command )
                {
                    return false;
                }
                if( obj._status != _status )
                {
                    return false;
                }
                if( obj._message != _message )
                {
                    return false;
                }
                return true;
            }
            return false;
        }

        public override bool IsOfType(Kind objectType)
        {
            if( objectType == Kind.RadarCommandReply )
            {
                return true;
            }
            return base.IsOfType( objectType );
        }

        public long RowVersion
        {
            get => _rowVersion;
            set
            {
                if( _rowVersion != value )
                {
                    _rowVersion = value;
                    OnPropertyChanged( );
                }
            }
        }
        public Guid Radar
        {
            get => _radar;
            set
            {
                if( _radar != value )
                {
                    _radar = value;
                    OnPropertyChanged( );
                }
            }
        }
        public DateTime Timestamp
        {
            get => _timestamp;
            set
            {
                if( _timestamp != value )
                {
                    _timestamp = value;
                    OnPropertyChanged( );
                }
            }
        }
        public Guid Command
        {
            get => _command;
            set
            {
                if( _command != value )
                {
                    _command = value;
                    OnPropertyChanged( );
                }
            }
        }
        public Types.DeviceCommandReplyStatus Status
        {
            get => _status;
            set
            {
                if( _status != value )
                {
                    _status = value;
                    OnPropertyChanged( );
                }
            }
        }
        public string Message
        {
            get => _message;
            set
            {
                if( _message != value )
                {
                    _message = value;
                    OnPropertyChanged( );
                }
            }
        }

        public override void WriteTo( [ DisallowNull ] BinaryWriter destination )
        {
            base.WriteTo( destination );
            destination.Write( _rowVersion );
            destination.Write( _radar );
            destination.Write( _timestamp );
            destination.Write( _command );
            destination.Write( _status );
            destination.Write( _message );
        }

        public override void ReadFrom([DisallowNull] BinaryReader source)
        {
            base.ReadFrom( source );
            _rowVersion = source.ReadInt64( );
            _radar = source.ReadGuid( );
            _timestamp = source.ReadDateTime( );
            _command = source.ReadGuid( );
            _status = source.ReadEnum<Types.DeviceCommandReplyStatus>( );
            _message = source.ReadString( );
        }

    }
    public class RadarCommandReplyGetStatusObject : RadarCommandReplyObject
    {
        int _azimuthCount = 0;
        int _triggerCount = 0;
        TimeSpan _rotationCount;
        Types.RadarPulse _pulse = Types.RadarPulse.Short;
        bool _tx = false;
        public RadarCommandReplyGetStatusObject( )
        {
        }

        public RadarCommandReplyGetStatusObject( ObjectState objectState, Guid id, long rowVersion, Guid radar, DateTime timestamp, Guid command, Types.DeviceCommandReplyStatus status, string message, int azimuthCount, int triggerCount, TimeSpan rotationCount, Types.RadarPulse pulse, bool tx )
            : base( objectState, id, rowVersion, radar, timestamp, command, status, message )
        {
            _azimuthCount = azimuthCount;
            _triggerCount = triggerCount;
            _rotationCount = rotationCount;
            _pulse = pulse;
            _tx = tx;
        }

        public override Kind GetObjectType()
        {
            return Kind.RadarCommandReplyGetStatus;
        }

        public override BaseData<Kind> Create()
        {
            return new RadarCommandReplyGetStatusObject( );
        }

        public override void AssignTo( BaseData<Kind> target )
        {
            base.AssignTo( target );
            var destination = ( RadarCommandReplyGetStatusObject )target;
            destination._azimuthCount = _azimuthCount;
            destination._triggerCount = _triggerCount;
            destination._rotationCount = _rotationCount;
            destination._pulse = _pulse;
            destination._tx = _tx;
        }

        public override bool Equals(BaseData<Kind>? other)
        {
            if (base.Equals(other))
            {
                var obj = ( RadarCommandReplyGetStatusObject )other;
                if( obj._azimuthCount != _azimuthCount )
                {
                    return false;
                }
                if( obj._triggerCount != _triggerCount )
                {
                    return false;
                }
                if( obj._rotationCount != _rotationCount )
                {
                    return false;
                }
                if( obj._pulse != _pulse )
                {
                    return false;
                }
                if( obj._tx != _tx )
                {
                    return false;
                }
                return true;
            }
            return false;
        }

        public override bool IsOfType(Kind objectType)
        {
            if( objectType == Kind.RadarCommandReplyGetStatus )
            {
                return true;
            }
            return base.IsOfType( objectType );
        }

        public int AzimuthCount
        {
            get => _azimuthCount;
            set
            {
                if( _azimuthCount != value )
                {
                    _azimuthCount = value;
                    OnPropertyChanged( );
                }
            }
        }
        public int TriggerCount
        {
            get => _triggerCount;
            set
            {
                if( _triggerCount != value )
                {
                    _triggerCount = value;
                    OnPropertyChanged( );
                }
            }
        }
        public TimeSpan RotationCount
        {
            get => _rotationCount;
            set
            {
                if( _rotationCount != value )
                {
                    _rotationCount = value;
                    OnPropertyChanged( );
                }
            }
        }
        public Types.RadarPulse Pulse
        {
            get => _pulse;
            set
            {
                if( _pulse != value )
                {
                    _pulse = value;
                    OnPropertyChanged( );
                }
            }
        }
        public bool Tx
        {
            get => _tx;
            set
            {
                if( _tx != value )
                {
                    _tx = value;
                    OnPropertyChanged( );
                }
            }
        }

        public override void WriteTo( [ DisallowNull ] BinaryWriter destination )
        {
            base.WriteTo( destination );
            destination.Write( _azimuthCount );
            destination.Write( _triggerCount );
            destination.Write( _rotationCount );
            destination.Write( _pulse );
            destination.Write( _tx );
        }

        public override void ReadFrom([DisallowNull] BinaryReader source)
        {
            base.ReadFrom( source );
            _azimuthCount = source.ReadInt32( );
            _triggerCount = source.ReadInt32( );
            _rotationCount = source.ReadTimeSpan( );
            _pulse = source.ReadEnum<Types.RadarPulse>( );
            _tx = source.ReadBoolean( );
        }

    }
    public class RadarConfigurationObject : BaseDataGuid<Kind>
    {
        long _rowVersion = 0;
        Guid _radar;
        DateTime _timestamp;
        int _radarProtocolVersion = 0;
        string _radarIPAddress = string.Empty;
        int _radarPort = 0;
        int _radarConfigurationPort = 0;
        TimeSpan _skipMagicTimeout;
        TimeSpan _readTimeout;
        TimeSpan _synchronizationInterval;
        int _targetsRefreshRate = 0;
        int _range = 0;
        int _sectorCount = 0;
        int _sectorOffset = 0;
        uint _imageColor = 0;
        uint? _imageSubstitutionColor;
        uint _transparentColor = 0;
        double _imageScaleFactorX = 0.0;
        double _imageOffsetX = 0.0;
        double _imageScaleFactorY = 0.0;
        double _imageOffsetY = 0.0;
        Types.RadarImageType _radarImageType = Types.RadarImageType.MaskedProcessed;
        uint _trackColor = 0;
        uint _vectorColor = 0;
        bool _enableNmea = false;
        string _nmeaReceiverIPAddress = string.Empty;
        int _nmeaReceiverPort = 0;
        string _nmeaReceiverSourceId = string.Empty;
        public RadarConfigurationObject( )
        {
        }

        public RadarConfigurationObject( ObjectState objectState, Guid id, long rowVersion, Guid radar, DateTime timestamp, int radarProtocolVersion, string radarIPAddress, int radarPort, int radarConfigurationPort, TimeSpan skipMagicTimeout, TimeSpan readTimeout, TimeSpan synchronizationInterval, int targetsRefreshRate, int range, int sectorCount, int sectorOffset, uint imageColor, uint? imageSubstitutionColor, uint transparentColor, double imageScaleFactorX, double imageOffsetX, double imageScaleFactorY, double imageOffsetY, Types.RadarImageType radarImageType, uint trackColor, uint vectorColor, bool enableNmea, string nmeaReceiverIPAddress, int nmeaReceiverPort, string nmeaReceiverSourceId )
            : base( objectState, id )
        {
            _rowVersion = rowVersion;
            _radar = radar;
            _timestamp = timestamp;
            _radarProtocolVersion = radarProtocolVersion;
            _radarIPAddress = radarIPAddress;
            _radarPort = radarPort;
            _radarConfigurationPort = radarConfigurationPort;
            _skipMagicTimeout = skipMagicTimeout;
            _readTimeout = readTimeout;
            _synchronizationInterval = synchronizationInterval;
            _targetsRefreshRate = targetsRefreshRate;
            _range = range;
            _sectorCount = sectorCount;
            _sectorOffset = sectorOffset;
            _imageColor = imageColor;
            _imageSubstitutionColor = imageSubstitutionColor;
            _transparentColor = transparentColor;
            _imageScaleFactorX = imageScaleFactorX;
            _imageOffsetX = imageOffsetX;
            _imageScaleFactorY = imageScaleFactorY;
            _imageOffsetY = imageOffsetY;
            _radarImageType = radarImageType;
            _trackColor = trackColor;
            _vectorColor = vectorColor;
            _enableNmea = enableNmea;
            _nmeaReceiverIPAddress = nmeaReceiverIPAddress;
            _nmeaReceiverPort = nmeaReceiverPort;
            _nmeaReceiverSourceId = nmeaReceiverSourceId;
        }

        public override Kind GetObjectType()
        {
            return Kind.RadarConfiguration;
        }

        public override BaseData<Kind> Create()
        {
            return new RadarConfigurationObject( );
        }

        public override void AssignTo( BaseData<Kind> target )
        {
            base.AssignTo( target );
            var destination = ( RadarConfigurationObject )target;
            destination._rowVersion = _rowVersion;
            destination._radar = _radar;
            destination._timestamp = _timestamp;
            destination._radarProtocolVersion = _radarProtocolVersion;
            destination._radarIPAddress = _radarIPAddress;
            destination._radarPort = _radarPort;
            destination._radarConfigurationPort = _radarConfigurationPort;
            destination._skipMagicTimeout = _skipMagicTimeout;
            destination._readTimeout = _readTimeout;
            destination._synchronizationInterval = _synchronizationInterval;
            destination._targetsRefreshRate = _targetsRefreshRate;
            destination._range = _range;
            destination._sectorCount = _sectorCount;
            destination._sectorOffset = _sectorOffset;
            destination._imageColor = _imageColor;
            destination._imageSubstitutionColor = _imageSubstitutionColor;
            destination._transparentColor = _transparentColor;
            destination._imageScaleFactorX = _imageScaleFactorX;
            destination._imageOffsetX = _imageOffsetX;
            destination._imageScaleFactorY = _imageScaleFactorY;
            destination._imageOffsetY = _imageOffsetY;
            destination._radarImageType = _radarImageType;
            destination._trackColor = _trackColor;
            destination._vectorColor = _vectorColor;
            destination._enableNmea = _enableNmea;
            destination._nmeaReceiverIPAddress = _nmeaReceiverIPAddress;
            destination._nmeaReceiverPort = _nmeaReceiverPort;
            destination._nmeaReceiverSourceId = _nmeaReceiverSourceId;
        }

        public override bool Equals(BaseData<Kind>? other)
        {
            if (base.Equals(other))
            {
                var obj = ( RadarConfigurationObject )other;
                if( obj._rowVersion != _rowVersion )
                {
                    return false;
                }
                if( obj._radar != _radar )
                {
                    return false;
                }
                if( obj._timestamp != _timestamp )
                {
                    return false;
                }
                if( obj._radarProtocolVersion != _radarProtocolVersion )
                {
                    return false;
                }
                if( obj._radarIPAddress != _radarIPAddress )
                {
                    return false;
                }
                if( obj._radarPort != _radarPort )
                {
                    return false;
                }
                if( obj._radarConfigurationPort != _radarConfigurationPort )
                {
                    return false;
                }
                if( obj._skipMagicTimeout != _skipMagicTimeout )
                {
                    return false;
                }
                if( obj._readTimeout != _readTimeout )
                {
                    return false;
                }
                if( obj._synchronizationInterval != _synchronizationInterval )
                {
                    return false;
                }
                if( obj._targetsRefreshRate != _targetsRefreshRate )
                {
                    return false;
                }
                if( obj._range != _range )
                {
                    return false;
                }
                if( obj._sectorCount != _sectorCount )
                {
                    return false;
                }
                if( obj._sectorOffset != _sectorOffset )
                {
                    return false;
                }
                if( obj._imageColor != _imageColor )
                {
                    return false;
                }
                if( obj._imageSubstitutionColor != _imageSubstitutionColor )
                {
                    return false;
                }
                if( obj._transparentColor != _transparentColor )
                {
                    return false;
                }
                if( obj._imageScaleFactorX != _imageScaleFactorX )
                {
                    return false;
                }
                if( obj._imageOffsetX != _imageOffsetX )
                {
                    return false;
                }
                if( obj._imageScaleFactorY != _imageScaleFactorY )
                {
                    return false;
                }
                if( obj._imageOffsetY != _imageOffsetY )
                {
                    return false;
                }
                if( obj._radarImageType != _radarImageType )
                {
                    return false;
                }
                if( obj._trackColor != _trackColor )
                {
                    return false;
                }
                if( obj._vectorColor != _vectorColor )
                {
                    return false;
                }
                if( obj._enableNmea != _enableNmea )
                {
                    return false;
                }
                if( obj._nmeaReceiverIPAddress != _nmeaReceiverIPAddress )
                {
                    return false;
                }
                if( obj._nmeaReceiverPort != _nmeaReceiverPort )
                {
                    return false;
                }
                if( obj._nmeaReceiverSourceId != _nmeaReceiverSourceId )
                {
                    return false;
                }
                return true;
            }
            return false;
        }

        public override bool IsOfType(Kind objectType)
        {
            if( objectType == Kind.RadarConfiguration )
            {
                return true;
            }
            return base.IsOfType( objectType );
        }

        public long RowVersion
        {
            get => _rowVersion;
            set
            {
                if( _rowVersion != value )
                {
                    _rowVersion = value;
                    OnPropertyChanged( );
                }
            }
        }
        public Guid Radar
        {
            get => _radar;
            set
            {
                if( _radar != value )
                {
                    _radar = value;
                    OnPropertyChanged( );
                }
            }
        }
        public DateTime Timestamp
        {
            get => _timestamp;
            set
            {
                if( _timestamp != value )
                {
                    _timestamp = value;
                    OnPropertyChanged( );
                }
            }
        }
        public int RadarProtocolVersion
        {
            get => _radarProtocolVersion;
            set
            {
                if( _radarProtocolVersion != value )
                {
                    _radarProtocolVersion = value;
                    OnPropertyChanged( );
                }
            }
        }
        public string RadarIPAddress
        {
            get => _radarIPAddress;
            set
            {
                if( _radarIPAddress != value )
                {
                    _radarIPAddress = value;
                    OnPropertyChanged( );
                }
            }
        }
        public int RadarPort
        {
            get => _radarPort;
            set
            {
                if( _radarPort != value )
                {
                    _radarPort = value;
                    OnPropertyChanged( );
                }
            }
        }
        public int RadarConfigurationPort
        {
            get => _radarConfigurationPort;
            set
            {
                if( _radarConfigurationPort != value )
                {
                    _radarConfigurationPort = value;
                    OnPropertyChanged( );
                }
            }
        }
        public TimeSpan SkipMagicTimeout
        {
            get => _skipMagicTimeout;
            set
            {
                if( _skipMagicTimeout != value )
                {
                    _skipMagicTimeout = value;
                    OnPropertyChanged( );
                }
            }
        }
        public TimeSpan ReadTimeout
        {
            get => _readTimeout;
            set
            {
                if( _readTimeout != value )
                {
                    _readTimeout = value;
                    OnPropertyChanged( );
                }
            }
        }
        public TimeSpan SynchronizationInterval
        {
            get => _synchronizationInterval;
            set
            {
                if( _synchronizationInterval != value )
                {
                    _synchronizationInterval = value;
                    OnPropertyChanged( );
                }
            }
        }
        public int TargetsRefreshRate
        {
            get => _targetsRefreshRate;
            set
            {
                if( _targetsRefreshRate != value )
                {
                    _targetsRefreshRate = value;
                    OnPropertyChanged( );
                }
            }
        }
        public int Range
        {
            get => _range;
            set
            {
                if( _range != value )
                {
                    _range = value;
                    OnPropertyChanged( );
                }
            }
        }
        public int SectorCount
        {
            get => _sectorCount;
            set
            {
                if( _sectorCount != value )
                {
                    _sectorCount = value;
                    OnPropertyChanged( );
                }
            }
        }
        public int SectorOffset
        {
            get => _sectorOffset;
            set
            {
                if( _sectorOffset != value )
                {
                    _sectorOffset = value;
                    OnPropertyChanged( );
                }
            }
        }
        public uint ImageColor
        {
            get => _imageColor;
            set
            {
                if( _imageColor != value )
                {
                    _imageColor = value;
                    OnPropertyChanged( );
                }
            }
        }
        public uint? ImageSubstitutionColor
        {
            get => _imageSubstitutionColor;
            set
            {
                if( _imageSubstitutionColor != value )
                {
                    _imageSubstitutionColor = value;
                    OnPropertyChanged( );
                }
            }
        }
        public uint TransparentColor
        {
            get => _transparentColor;
            set
            {
                if( _transparentColor != value )
                {
                    _transparentColor = value;
                    OnPropertyChanged( );
                }
            }
        }
        public double ImageScaleFactorX
        {
            get => _imageScaleFactorX;
            set
            {
                if( _imageScaleFactorX != value )
                {
                    _imageScaleFactorX = value;
                    OnPropertyChanged( );
                }
            }
        }
        public double ImageOffsetX
        {
            get => _imageOffsetX;
            set
            {
                if( _imageOffsetX != value )
                {
                    _imageOffsetX = value;
                    OnPropertyChanged( );
                }
            }
        }
        public double ImageScaleFactorY
        {
            get => _imageScaleFactorY;
            set
            {
                if( _imageScaleFactorY != value )
                {
                    _imageScaleFactorY = value;
                    OnPropertyChanged( );
                }
            }
        }
        public double ImageOffsetY
        {
            get => _imageOffsetY;
            set
            {
                if( _imageOffsetY != value )
                {
                    _imageOffsetY = value;
                    OnPropertyChanged( );
                }
            }
        }
        public Types.RadarImageType RadarImageType
        {
            get => _radarImageType;
            set
            {
                if( _radarImageType != value )
                {
                    _radarImageType = value;
                    OnPropertyChanged( );
                }
            }
        }
        public uint TrackColor
        {
            get => _trackColor;
            set
            {
                if( _trackColor != value )
                {
                    _trackColor = value;
                    OnPropertyChanged( );
                }
            }
        }
        public uint VectorColor
        {
            get => _vectorColor;
            set
            {
                if( _vectorColor != value )
                {
                    _vectorColor = value;
                    OnPropertyChanged( );
                }
            }
        }
        public bool EnableNmea
        {
            get => _enableNmea;
            set
            {
                if( _enableNmea != value )
                {
                    _enableNmea = value;
                    OnPropertyChanged( );
                }
            }
        }
        public string NmeaReceiverIPAddress
        {
            get => _nmeaReceiverIPAddress;
            set
            {
                if( _nmeaReceiverIPAddress != value )
                {
                    _nmeaReceiverIPAddress = value;
                    OnPropertyChanged( );
                }
            }
        }
        public int NmeaReceiverPort
        {
            get => _nmeaReceiverPort;
            set
            {
                if( _nmeaReceiverPort != value )
                {
                    _nmeaReceiverPort = value;
                    OnPropertyChanged( );
                }
            }
        }
        public string NmeaReceiverSourceId
        {
            get => _nmeaReceiverSourceId;
            set
            {
                if( _nmeaReceiverSourceId != value )
                {
                    _nmeaReceiverSourceId = value;
                    OnPropertyChanged( );
                }
            }
        }

        public override void WriteTo( [ DisallowNull ] BinaryWriter destination )
        {
            base.WriteTo( destination );
            destination.Write( _rowVersion );
            destination.Write( _radar );
            destination.Write( _timestamp );
            destination.Write( _radarProtocolVersion );
            destination.Write( _radarIPAddress );
            destination.Write( _radarPort );
            destination.Write( _radarConfigurationPort );
            destination.Write( _skipMagicTimeout );
            destination.Write( _readTimeout );
            destination.Write( _synchronizationInterval );
            destination.Write( _targetsRefreshRate );
            destination.Write( _range );
            destination.Write( _sectorCount );
            destination.Write( _sectorOffset );
            destination.Write( _imageColor );
            destination.Write( _imageSubstitutionColor );
            destination.Write( _transparentColor );
            destination.Write( _imageScaleFactorX );
            destination.Write( _imageOffsetX );
            destination.Write( _imageScaleFactorY );
            destination.Write( _imageOffsetY );
            destination.Write( _radarImageType );
            destination.Write( _trackColor );
            destination.Write( _vectorColor );
            destination.Write( _enableNmea );
            destination.Write( _nmeaReceiverIPAddress );
            destination.Write( _nmeaReceiverPort );
            destination.Write( _nmeaReceiverSourceId );
        }

        public override void ReadFrom([DisallowNull] BinaryReader source)
        {
            base.ReadFrom( source );
            _rowVersion = source.ReadInt64( );
            _radar = source.ReadGuid( );
            _timestamp = source.ReadDateTime( );
            _radarProtocolVersion = source.ReadInt32( );
            _radarIPAddress = source.ReadString( );
            _radarPort = source.ReadInt32( );
            _radarConfigurationPort = source.ReadInt32( );
            _skipMagicTimeout = source.ReadTimeSpan( );
            _readTimeout = source.ReadTimeSpan( );
            _synchronizationInterval = source.ReadTimeSpan( );
            _targetsRefreshRate = source.ReadInt32( );
            _range = source.ReadInt32( );
            _sectorCount = source.ReadInt32( );
            _sectorOffset = source.ReadInt32( );
            _imageColor = source.ReadUInt32( );
            _imageSubstitutionColor = source.ReadNullableUInt32( );
            _transparentColor = source.ReadUInt32( );
            _imageScaleFactorX = source.ReadDouble( );
            _imageOffsetX = source.ReadDouble( );
            _imageScaleFactorY = source.ReadDouble( );
            _imageOffsetY = source.ReadDouble( );
            _radarImageType = source.ReadEnum<Types.RadarImageType>( );
            _trackColor = source.ReadUInt32( );
            _vectorColor = source.ReadUInt32( );
            _enableNmea = source.ReadBoolean( );
            _nmeaReceiverIPAddress = source.ReadString( );
            _nmeaReceiverPort = source.ReadInt32( );
            _nmeaReceiverSourceId = source.ReadString( );
        }

    }
    public class RadarImageObject : BaseDataGuid<Kind>
    {
        long _rowVersion = 0;
        Guid _radar;
        DateTime _timestamp;
        uint _depth = 0;
        int _resolution = 0;
        int _range = 0;
        byte[] _image = Array.Empty<byte>();
        public RadarImageObject( )
        {
        }

        public RadarImageObject( ObjectState objectState, Guid id, long rowVersion, Guid radar, DateTime timestamp, uint depth, int resolution, int range, byte[] image )
            : base( objectState, id )
        {
            _rowVersion = rowVersion;
            _radar = radar;
            _timestamp = timestamp;
            _depth = depth;
            _resolution = resolution;
            _range = range;
            _image = image;
        }

        public override Kind GetObjectType()
        {
            return Kind.RadarImage;
        }

        public override BaseData<Kind> Create()
        {
            return new RadarImageObject( );
        }

        public override void AssignTo( BaseData<Kind> target )
        {
            base.AssignTo( target );
            var destination = ( RadarImageObject )target;
            destination._rowVersion = _rowVersion;
            destination._radar = _radar;
            destination._timestamp = _timestamp;
            destination._depth = _depth;
            destination._resolution = _resolution;
            destination._range = _range;
            destination._image = (byte[])_image.Clone( );
        }

        public override bool Equals(BaseData<Kind>? other)
        {
            if (base.Equals(other))
            {
                var obj = ( RadarImageObject )other;
                if( obj._rowVersion != _rowVersion )
                {
                    return false;
                }
                if( obj._radar != _radar )
                {
                    return false;
                }
                if( obj._timestamp != _timestamp )
                {
                    return false;
                }
                if( obj._depth != _depth )
                {
                    return false;
                }
                if( obj._resolution != _resolution )
                {
                    return false;
                }
                if( obj._range != _range )
                {
                    return false;
                }
                if( obj._image.Equals( _image ) == false )
                {
                    return false;
                }
                return true;
            }
            return false;
        }

        public override bool IsOfType(Kind objectType)
        {
            if( objectType == Kind.RadarImage )
            {
                return true;
            }
            return base.IsOfType( objectType );
        }

        public long RowVersion
        {
            get => _rowVersion;
            set
            {
                if( _rowVersion != value )
                {
                    _rowVersion = value;
                    OnPropertyChanged( );
                }
            }
        }
        public Guid Radar
        {
            get => _radar;
            set
            {
                if( _radar != value )
                {
                    _radar = value;
                    OnPropertyChanged( );
                }
            }
        }
        public DateTime Timestamp
        {
            get => _timestamp;
            set
            {
                if( _timestamp != value )
                {
                    _timestamp = value;
                    OnPropertyChanged( );
                }
            }
        }
        public uint Depth
        {
            get => _depth;
            set
            {
                if( _depth != value )
                {
                    _depth = value;
                    OnPropertyChanged( );
                }
            }
        }
        public int Resolution
        {
            get => _resolution;
            set
            {
                if( _resolution != value )
                {
                    _resolution = value;
                    OnPropertyChanged( );
                }
            }
        }
        public int Range
        {
            get => _range;
            set
            {
                if( _range != value )
                {
                    _range = value;
                    OnPropertyChanged( );
                }
            }
        }
        public byte[] Image
        {
            get => _image;
            set
            {
                if( _image != value )
                {
                    _image = value;
                    OnPropertyChanged( );
                }
            }
        }

        public override void WriteTo( [ DisallowNull ] BinaryWriter destination )
        {
            base.WriteTo( destination );
            destination.Write( _rowVersion );
            destination.Write( _radar );
            destination.Write( _timestamp );
            destination.Write( _depth );
            destination.Write( _resolution );
            destination.Write( _range );
            destination.WriteArray( _image );
        }

        public override void ReadFrom([DisallowNull] BinaryReader source)
        {
            base.ReadFrom( source );
            _rowVersion = source.ReadInt64( );
            _radar = source.ReadGuid( );
            _timestamp = source.ReadDateTime( );
            _depth = source.ReadUInt32( );
            _resolution = source.ReadInt32( );
            _range = source.ReadInt32( );
            _image = source.ReadByteArray( );
        }

    }
    public class RadarRawTrackTableObject : BaseDataGuid<Kind>
    {
        long _rowVersion = 0;
        Guid _radar;
        DateTime _timestamp;
        int _count = 0;
        byte[] _table = Array.Empty<byte>();
        public RadarRawTrackTableObject( )
        {
        }

        public RadarRawTrackTableObject( ObjectState objectState, Guid id, long rowVersion, Guid radar, DateTime timestamp, int count, byte[] table )
            : base( objectState, id )
        {
            _rowVersion = rowVersion;
            _radar = radar;
            _timestamp = timestamp;
            _count = count;
            _table = table;
        }

        public override Kind GetObjectType()
        {
            return Kind.RadarRawTrackTable;
        }

        public override BaseData<Kind> Create()
        {
            return new RadarRawTrackTableObject( );
        }

        public override void AssignTo( BaseData<Kind> target )
        {
            base.AssignTo( target );
            var destination = ( RadarRawTrackTableObject )target;
            destination._rowVersion = _rowVersion;
            destination._radar = _radar;
            destination._timestamp = _timestamp;
            destination._count = _count;
            destination._table = (byte[])_table.Clone( );
        }

        public override bool Equals(BaseData<Kind>? other)
        {
            if (base.Equals(other))
            {
                var obj = ( RadarRawTrackTableObject )other;
                if( obj._rowVersion != _rowVersion )
                {
                    return false;
                }
                if( obj._radar != _radar )
                {
                    return false;
                }
                if( obj._timestamp != _timestamp )
                {
                    return false;
                }
                if( obj._count != _count )
                {
                    return false;
                }
                if( obj._table.Equals( _table ) == false )
                {
                    return false;
                }
                return true;
            }
            return false;
        }

        public override bool IsOfType(Kind objectType)
        {
            if( objectType == Kind.RadarRawTrackTable )
            {
                return true;
            }
            return base.IsOfType( objectType );
        }

        public long RowVersion
        {
            get => _rowVersion;
            set
            {
                if( _rowVersion != value )
                {
                    _rowVersion = value;
                    OnPropertyChanged( );
                }
            }
        }
        public Guid Radar
        {
            get => _radar;
            set
            {
                if( _radar != value )
                {
                    _radar = value;
                    OnPropertyChanged( );
                }
            }
        }
        public DateTime Timestamp
        {
            get => _timestamp;
            set
            {
                if( _timestamp != value )
                {
                    _timestamp = value;
                    OnPropertyChanged( );
                }
            }
        }
        public int Count
        {
            get => _count;
            set
            {
                if( _count != value )
                {
                    _count = value;
                    OnPropertyChanged( );
                }
            }
        }
        public byte[] Table
        {
            get => _table;
            set
            {
                if( _table != value )
                {
                    _table = value;
                    OnPropertyChanged( );
                }
            }
        }

        public override void WriteTo( [ DisallowNull ] BinaryWriter destination )
        {
            base.WriteTo( destination );
            destination.Write( _rowVersion );
            destination.Write( _radar );
            destination.Write( _timestamp );
            destination.Write( _count );
            destination.WriteArray( _table );
        }

        public override void ReadFrom([DisallowNull] BinaryReader source)
        {
            base.ReadFrom( source );
            _rowVersion = source.ReadInt64( );
            _radar = source.ReadGuid( );
            _timestamp = source.ReadDateTime( );
            _count = source.ReadInt32( );
            _table = source.ReadByteArray( );
        }

    }
    public class RadarStatusObject : BaseDataGuid<Kind>
    {
        long _rowVersion = 0;
        Guid _radar;
        DateTime _timestamp;
        int _azimuthCount = 0;
        int _triggerCount = 0;
        TimeSpan _rotationTime;
        Types.RadarPulse _pulse = Types.RadarPulse.Short;
        bool _tx = false;
        bool _tracking = false;
        public RadarStatusObject( )
        {
        }

        public RadarStatusObject( ObjectState objectState, Guid id, long rowVersion, Guid radar, DateTime timestamp, int azimuthCount, int triggerCount, TimeSpan rotationTime, Types.RadarPulse pulse, bool tx, bool tracking )
            : base( objectState, id )
        {
            _rowVersion = rowVersion;
            _radar = radar;
            _timestamp = timestamp;
            _azimuthCount = azimuthCount;
            _triggerCount = triggerCount;
            _rotationTime = rotationTime;
            _pulse = pulse;
            _tx = tx;
            _tracking = tracking;
        }

        public override Kind GetObjectType()
        {
            return Kind.RadarStatus;
        }

        public override BaseData<Kind> Create()
        {
            return new RadarStatusObject( );
        }

        public override void AssignTo( BaseData<Kind> target )
        {
            base.AssignTo( target );
            var destination = ( RadarStatusObject )target;
            destination._rowVersion = _rowVersion;
            destination._radar = _radar;
            destination._timestamp = _timestamp;
            destination._azimuthCount = _azimuthCount;
            destination._triggerCount = _triggerCount;
            destination._rotationTime = _rotationTime;
            destination._pulse = _pulse;
            destination._tx = _tx;
            destination._tracking = _tracking;
        }

        public override bool Equals(BaseData<Kind>? other)
        {
            if (base.Equals(other))
            {
                var obj = ( RadarStatusObject )other;
                if( obj._rowVersion != _rowVersion )
                {
                    return false;
                }
                if( obj._radar != _radar )
                {
                    return false;
                }
                if( obj._timestamp != _timestamp )
                {
                    return false;
                }
                if( obj._azimuthCount != _azimuthCount )
                {
                    return false;
                }
                if( obj._triggerCount != _triggerCount )
                {
                    return false;
                }
                if( obj._rotationTime != _rotationTime )
                {
                    return false;
                }
                if( obj._pulse != _pulse )
                {
                    return false;
                }
                if( obj._tx != _tx )
                {
                    return false;
                }
                if( obj._tracking != _tracking )
                {
                    return false;
                }
                return true;
            }
            return false;
        }

        public override bool IsOfType(Kind objectType)
        {
            if( objectType == Kind.RadarStatus )
            {
                return true;
            }
            return base.IsOfType( objectType );
        }

        public long RowVersion
        {
            get => _rowVersion;
            set
            {
                if( _rowVersion != value )
                {
                    _rowVersion = value;
                    OnPropertyChanged( );
                }
            }
        }
        public Guid Radar
        {
            get => _radar;
            set
            {
                if( _radar != value )
                {
                    _radar = value;
                    OnPropertyChanged( );
                }
            }
        }
        public DateTime Timestamp
        {
            get => _timestamp;
            set
            {
                if( _timestamp != value )
                {
                    _timestamp = value;
                    OnPropertyChanged( );
                }
            }
        }
        public int AzimuthCount
        {
            get => _azimuthCount;
            set
            {
                if( _azimuthCount != value )
                {
                    _azimuthCount = value;
                    OnPropertyChanged( );
                }
            }
        }
        public int TriggerCount
        {
            get => _triggerCount;
            set
            {
                if( _triggerCount != value )
                {
                    _triggerCount = value;
                    OnPropertyChanged( );
                }
            }
        }
        public TimeSpan RotationTime
        {
            get => _rotationTime;
            set
            {
                if( _rotationTime != value )
                {
                    _rotationTime = value;
                    OnPropertyChanged( );
                }
            }
        }
        public Types.RadarPulse Pulse
        {
            get => _pulse;
            set
            {
                if( _pulse != value )
                {
                    _pulse = value;
                    OnPropertyChanged( );
                }
            }
        }
        public bool Tx
        {
            get => _tx;
            set
            {
                if( _tx != value )
                {
                    _tx = value;
                    OnPropertyChanged( );
                }
            }
        }
        public bool Tracking
        {
            get => _tracking;
            set
            {
                if( _tracking != value )
                {
                    _tracking = value;
                    OnPropertyChanged( );
                }
            }
        }

        public override void WriteTo( [ DisallowNull ] BinaryWriter destination )
        {
            base.WriteTo( destination );
            destination.Write( _rowVersion );
            destination.Write( _radar );
            destination.Write( _timestamp );
            destination.Write( _azimuthCount );
            destination.Write( _triggerCount );
            destination.Write( _rotationTime );
            destination.Write( _pulse );
            destination.Write( _tx );
            destination.Write( _tracking );
        }

        public override void ReadFrom([DisallowNull] BinaryReader source)
        {
            base.ReadFrom( source );
            _rowVersion = source.ReadInt64( );
            _radar = source.ReadGuid( );
            _timestamp = source.ReadDateTime( );
            _azimuthCount = source.ReadInt32( );
            _triggerCount = source.ReadInt32( );
            _rotationTime = source.ReadTimeSpan( );
            _pulse = source.ReadEnum<Types.RadarPulse>( );
            _tx = source.ReadBoolean( );
            _tracking = source.ReadBoolean( );
        }

    }
    public class RadioCommandObject : BaseDataGuid<Kind>
    {
        long _rowVersion = 0;
        Guid _radio;
        DateTime _timestamp;
        Types.DeviceCommandSourceType _deviceCommandSourceType = Types.DeviceCommandSourceType.Unknown;
        Guid _deviceCommandSourceId;
        Guid _reply;
        public RadioCommandObject( )
        {
        }

        public RadioCommandObject( ObjectState objectState, Guid id, long rowVersion, Guid radio, DateTime timestamp, Types.DeviceCommandSourceType deviceCommandSourceType, Guid deviceCommandSourceId, Guid reply )
            : base( objectState, id )
        {
            _rowVersion = rowVersion;
            _radio = radio;
            _timestamp = timestamp;
            _deviceCommandSourceType = deviceCommandSourceType;
            _deviceCommandSourceId = deviceCommandSourceId;
            _reply = reply;
        }

        public override Kind GetObjectType()
        {
            return Kind.RadioCommand;
        }

        public override BaseData<Kind> Create()
        {
            return new RadioCommandObject( );
        }

        public override void AssignTo( BaseData<Kind> target )
        {
            base.AssignTo( target );
            var destination = ( RadioCommandObject )target;
            destination._rowVersion = _rowVersion;
            destination._radio = _radio;
            destination._timestamp = _timestamp;
            destination._deviceCommandSourceType = _deviceCommandSourceType;
            destination._deviceCommandSourceId = _deviceCommandSourceId;
            destination._reply = _reply;
        }

        public override bool Equals(BaseData<Kind>? other)
        {
            if (base.Equals(other))
            {
                var obj = ( RadioCommandObject )other;
                if( obj._rowVersion != _rowVersion )
                {
                    return false;
                }
                if( obj._radio != _radio )
                {
                    return false;
                }
                if( obj._timestamp != _timestamp )
                {
                    return false;
                }
                if( obj._deviceCommandSourceType != _deviceCommandSourceType )
                {
                    return false;
                }
                if( obj._deviceCommandSourceId != _deviceCommandSourceId )
                {
                    return false;
                }
                if( obj._reply != _reply )
                {
                    return false;
                }
                return true;
            }
            return false;
        }

        public override bool IsOfType(Kind objectType)
        {
            if( objectType == Kind.RadioCommand )
            {
                return true;
            }
            return base.IsOfType( objectType );
        }

        public long RowVersion
        {
            get => _rowVersion;
            set
            {
                if( _rowVersion != value )
                {
                    _rowVersion = value;
                    OnPropertyChanged( );
                }
            }
        }
        public Guid Radio
        {
            get => _radio;
            set
            {
                if( _radio != value )
                {
                    _radio = value;
                    OnPropertyChanged( );
                }
            }
        }
        public DateTime Timestamp
        {
            get => _timestamp;
            set
            {
                if( _timestamp != value )
                {
                    _timestamp = value;
                    OnPropertyChanged( );
                }
            }
        }
        public Types.DeviceCommandSourceType DeviceCommandSourceType
        {
            get => _deviceCommandSourceType;
            set
            {
                if( _deviceCommandSourceType != value )
                {
                    _deviceCommandSourceType = value;
                    OnPropertyChanged( );
                }
            }
        }
        public Guid DeviceCommandSourceId
        {
            get => _deviceCommandSourceId;
            set
            {
                if( _deviceCommandSourceId != value )
                {
                    _deviceCommandSourceId = value;
                    OnPropertyChanged( );
                }
            }
        }
        public Guid Reply
        {
            get => _reply;
            set
            {
                if( _reply != value )
                {
                    _reply = value;
                    OnPropertyChanged( );
                }
            }
        }

        public override void WriteTo( [ DisallowNull ] BinaryWriter destination )
        {
            base.WriteTo( destination );
            destination.Write( _rowVersion );
            destination.Write( _radio );
            destination.Write( _timestamp );
            destination.Write( _deviceCommandSourceType );
            destination.Write( _deviceCommandSourceId );
            destination.Write( _reply );
        }

        public override void ReadFrom([DisallowNull] BinaryReader source)
        {
            base.ReadFrom( source );
            _rowVersion = source.ReadInt64( );
            _radio = source.ReadGuid( );
            _timestamp = source.ReadDateTime( );
            _deviceCommandSourceType = source.ReadEnum<Types.DeviceCommandSourceType>( );
            _deviceCommandSourceId = source.ReadGuid( );
            _reply = source.ReadGuid( );
        }

    }
    public class RadioCommandReplyObject : BaseDataGuid<Kind>
    {
        long _rowVersion = 0;
        Guid _radio;
        DateTime _timestamp;
        Guid _command;
        Types.DeviceCommandReplyStatus _status = Types.DeviceCommandReplyStatus.Unknown;
        string _message = string.Empty;
        public RadioCommandReplyObject( )
        {
        }

        public RadioCommandReplyObject( ObjectState objectState, Guid id, long rowVersion, Guid radio, DateTime timestamp, Guid command, Types.DeviceCommandReplyStatus status, string message )
            : base( objectState, id )
        {
            _rowVersion = rowVersion;
            _radio = radio;
            _timestamp = timestamp;
            _command = command;
            _status = status;
            _message = message;
        }

        public override Kind GetObjectType()
        {
            return Kind.RadioCommandReply;
        }

        public override BaseData<Kind> Create()
        {
            return new RadioCommandReplyObject( );
        }

        public override void AssignTo( BaseData<Kind> target )
        {
            base.AssignTo( target );
            var destination = ( RadioCommandReplyObject )target;
            destination._rowVersion = _rowVersion;
            destination._radio = _radio;
            destination._timestamp = _timestamp;
            destination._command = _command;
            destination._status = _status;
            destination._message = _message;
        }

        public override bool Equals(BaseData<Kind>? other)
        {
            if (base.Equals(other))
            {
                var obj = ( RadioCommandReplyObject )other;
                if( obj._rowVersion != _rowVersion )
                {
                    return false;
                }
                if( obj._radio != _radio )
                {
                    return false;
                }
                if( obj._timestamp != _timestamp )
                {
                    return false;
                }
                if( obj._command != _command )
                {
                    return false;
                }
                if( obj._status != _status )
                {
                    return false;
                }
                if( obj._message != _message )
                {
                    return false;
                }
                return true;
            }
            return false;
        }

        public override bool IsOfType(Kind objectType)
        {
            if( objectType == Kind.RadioCommandReply )
            {
                return true;
            }
            return base.IsOfType( objectType );
        }

        public long RowVersion
        {
            get => _rowVersion;
            set
            {
                if( _rowVersion != value )
                {
                    _rowVersion = value;
                    OnPropertyChanged( );
                }
            }
        }
        public Guid Radio
        {
            get => _radio;
            set
            {
                if( _radio != value )
                {
                    _radio = value;
                    OnPropertyChanged( );
                }
            }
        }
        public DateTime Timestamp
        {
            get => _timestamp;
            set
            {
                if( _timestamp != value )
                {
                    _timestamp = value;
                    OnPropertyChanged( );
                }
            }
        }
        public Guid Command
        {
            get => _command;
            set
            {
                if( _command != value )
                {
                    _command = value;
                    OnPropertyChanged( );
                }
            }
        }
        public Types.DeviceCommandReplyStatus Status
        {
            get => _status;
            set
            {
                if( _status != value )
                {
                    _status = value;
                    OnPropertyChanged( );
                }
            }
        }
        public string Message
        {
            get => _message;
            set
            {
                if( _message != value )
                {
                    _message = value;
                    OnPropertyChanged( );
                }
            }
        }

        public override void WriteTo( [ DisallowNull ] BinaryWriter destination )
        {
            base.WriteTo( destination );
            destination.Write( _rowVersion );
            destination.Write( _radio );
            destination.Write( _timestamp );
            destination.Write( _command );
            destination.Write( _status );
            destination.Write( _message );
        }

        public override void ReadFrom([DisallowNull] BinaryReader source)
        {
            base.ReadFrom( source );
            _rowVersion = source.ReadInt64( );
            _radio = source.ReadGuid( );
            _timestamp = source.ReadDateTime( );
            _command = source.ReadGuid( );
            _status = source.ReadEnum<Types.DeviceCommandReplyStatus>( );
            _message = source.ReadString( );
        }

    }
    public class RadioConfigurationObject : BaseDataGuid<Kind>
    {
        long _rowVersion = 0;
        Guid _radio;
        DateTime _timestamp;
        double _longitude = 0.0;
        double _latitude = 0.0;
        string _playbackUrl = string.Empty;
        string _radioIPAddress = string.Empty;
        int _radioPort = 0;
        string _ed137IPAddress = string.Empty;
        int _ed137Port = 0;
        public RadioConfigurationObject( )
        {
        }

        public RadioConfigurationObject( ObjectState objectState, Guid id, long rowVersion, Guid radio, DateTime timestamp, double longitude, double latitude, string playbackUrl, string radioIPAddress, int radioPort, string ed137IPAddress, int ed137Port )
            : base( objectState, id )
        {
            _rowVersion = rowVersion;
            _radio = radio;
            _timestamp = timestamp;
            _longitude = longitude;
            _latitude = latitude;
            _playbackUrl = playbackUrl;
            _radioIPAddress = radioIPAddress;
            _radioPort = radioPort;
            _ed137IPAddress = ed137IPAddress;
            _ed137Port = ed137Port;
        }

        public override Kind GetObjectType()
        {
            return Kind.RadioConfiguration;
        }

        public override BaseData<Kind> Create()
        {
            return new RadioConfigurationObject( );
        }

        public override void AssignTo( BaseData<Kind> target )
        {
            base.AssignTo( target );
            var destination = ( RadioConfigurationObject )target;
            destination._rowVersion = _rowVersion;
            destination._radio = _radio;
            destination._timestamp = _timestamp;
            destination._longitude = _longitude;
            destination._latitude = _latitude;
            destination._playbackUrl = _playbackUrl;
            destination._radioIPAddress = _radioIPAddress;
            destination._radioPort = _radioPort;
            destination._ed137IPAddress = _ed137IPAddress;
            destination._ed137Port = _ed137Port;
        }

        public override bool Equals(BaseData<Kind>? other)
        {
            if (base.Equals(other))
            {
                var obj = ( RadioConfigurationObject )other;
                if( obj._rowVersion != _rowVersion )
                {
                    return false;
                }
                if( obj._radio != _radio )
                {
                    return false;
                }
                if( obj._timestamp != _timestamp )
                {
                    return false;
                }
                if( obj._longitude != _longitude )
                {
                    return false;
                }
                if( obj._latitude != _latitude )
                {
                    return false;
                }
                if( obj._playbackUrl != _playbackUrl )
                {
                    return false;
                }
                if( obj._radioIPAddress != _radioIPAddress )
                {
                    return false;
                }
                if( obj._radioPort != _radioPort )
                {
                    return false;
                }
                if( obj._ed137IPAddress != _ed137IPAddress )
                {
                    return false;
                }
                if( obj._ed137Port != _ed137Port )
                {
                    return false;
                }
                return true;
            }
            return false;
        }

        public override bool IsOfType(Kind objectType)
        {
            if( objectType == Kind.RadioConfiguration )
            {
                return true;
            }
            return base.IsOfType( objectType );
        }

        public long RowVersion
        {
            get => _rowVersion;
            set
            {
                if( _rowVersion != value )
                {
                    _rowVersion = value;
                    OnPropertyChanged( );
                }
            }
        }
        public Guid Radio
        {
            get => _radio;
            set
            {
                if( _radio != value )
                {
                    _radio = value;
                    OnPropertyChanged( );
                }
            }
        }
        public DateTime Timestamp
        {
            get => _timestamp;
            set
            {
                if( _timestamp != value )
                {
                    _timestamp = value;
                    OnPropertyChanged( );
                }
            }
        }
        public double Longitude
        {
            get => _longitude;
            set
            {
                if( _longitude != value )
                {
                    _longitude = value;
                    OnPropertyChanged( );
                }
            }
        }
        public double Latitude
        {
            get => _latitude;
            set
            {
                if( _latitude != value )
                {
                    _latitude = value;
                    OnPropertyChanged( );
                }
            }
        }
        public string PlaybackUrl
        {
            get => _playbackUrl;
            set
            {
                if( _playbackUrl != value )
                {
                    _playbackUrl = value;
                    OnPropertyChanged( );
                }
            }
        }
        public string RadioIPAddress
        {
            get => _radioIPAddress;
            set
            {
                if( _radioIPAddress != value )
                {
                    _radioIPAddress = value;
                    OnPropertyChanged( );
                }
            }
        }
        public int RadioPort
        {
            get => _radioPort;
            set
            {
                if( _radioPort != value )
                {
                    _radioPort = value;
                    OnPropertyChanged( );
                }
            }
        }
        public string Ed137IPAddress
        {
            get => _ed137IPAddress;
            set
            {
                if( _ed137IPAddress != value )
                {
                    _ed137IPAddress = value;
                    OnPropertyChanged( );
                }
            }
        }
        public int Ed137Port
        {
            get => _ed137Port;
            set
            {
                if( _ed137Port != value )
                {
                    _ed137Port = value;
                    OnPropertyChanged( );
                }
            }
        }

        public override void WriteTo( [ DisallowNull ] BinaryWriter destination )
        {
            base.WriteTo( destination );
            destination.Write( _rowVersion );
            destination.Write( _radio );
            destination.Write( _timestamp );
            destination.Write( _longitude );
            destination.Write( _latitude );
            destination.Write( _playbackUrl );
            destination.Write( _radioIPAddress );
            destination.Write( _radioPort );
            destination.Write( _ed137IPAddress );
            destination.Write( _ed137Port );
        }

        public override void ReadFrom([DisallowNull] BinaryReader source)
        {
            base.ReadFrom( source );
            _rowVersion = source.ReadInt64( );
            _radio = source.ReadGuid( );
            _timestamp = source.ReadDateTime( );
            _longitude = source.ReadDouble( );
            _latitude = source.ReadDouble( );
            _playbackUrl = source.ReadString( );
            _radioIPAddress = source.ReadString( );
            _radioPort = source.ReadInt32( );
            _ed137IPAddress = source.ReadString( );
            _ed137Port = source.ReadInt32( );
        }

    }
    public class RadomeCommandObject : BaseDataGuid<Kind>
    {
        long _rowVersion = 0;
        Guid _radome;
        DateTime _timestamp;
        Types.DeviceCommandSourceType _deviceCommandSourceType = Types.DeviceCommandSourceType.Unknown;
        Guid _deviceCommandSourceId;
        Guid _reply;
        public RadomeCommandObject( )
        {
        }

        public RadomeCommandObject( ObjectState objectState, Guid id, long rowVersion, Guid radome, DateTime timestamp, Types.DeviceCommandSourceType deviceCommandSourceType, Guid deviceCommandSourceId, Guid reply )
            : base( objectState, id )
        {
            _rowVersion = rowVersion;
            _radome = radome;
            _timestamp = timestamp;
            _deviceCommandSourceType = deviceCommandSourceType;
            _deviceCommandSourceId = deviceCommandSourceId;
            _reply = reply;
        }

        public override Kind GetObjectType()
        {
            return Kind.RadomeCommand;
        }

        public override BaseData<Kind> Create()
        {
            return new RadomeCommandObject( );
        }

        public override void AssignTo( BaseData<Kind> target )
        {
            base.AssignTo( target );
            var destination = ( RadomeCommandObject )target;
            destination._rowVersion = _rowVersion;
            destination._radome = _radome;
            destination._timestamp = _timestamp;
            destination._deviceCommandSourceType = _deviceCommandSourceType;
            destination._deviceCommandSourceId = _deviceCommandSourceId;
            destination._reply = _reply;
        }

        public override bool Equals(BaseData<Kind>? other)
        {
            if (base.Equals(other))
            {
                var obj = ( RadomeCommandObject )other;
                if( obj._rowVersion != _rowVersion )
                {
                    return false;
                }
                if( obj._radome != _radome )
                {
                    return false;
                }
                if( obj._timestamp != _timestamp )
                {
                    return false;
                }
                if( obj._deviceCommandSourceType != _deviceCommandSourceType )
                {
                    return false;
                }
                if( obj._deviceCommandSourceId != _deviceCommandSourceId )
                {
                    return false;
                }
                if( obj._reply != _reply )
                {
                    return false;
                }
                return true;
            }
            return false;
        }

        public override bool IsOfType(Kind objectType)
        {
            if( objectType == Kind.RadomeCommand )
            {
                return true;
            }
            return base.IsOfType( objectType );
        }

        public long RowVersion
        {
            get => _rowVersion;
            set
            {
                if( _rowVersion != value )
                {
                    _rowVersion = value;
                    OnPropertyChanged( );
                }
            }
        }
        public Guid Radome
        {
            get => _radome;
            set
            {
                if( _radome != value )
                {
                    _radome = value;
                    OnPropertyChanged( );
                }
            }
        }
        public DateTime Timestamp
        {
            get => _timestamp;
            set
            {
                if( _timestamp != value )
                {
                    _timestamp = value;
                    OnPropertyChanged( );
                }
            }
        }
        public Types.DeviceCommandSourceType DeviceCommandSourceType
        {
            get => _deviceCommandSourceType;
            set
            {
                if( _deviceCommandSourceType != value )
                {
                    _deviceCommandSourceType = value;
                    OnPropertyChanged( );
                }
            }
        }
        public Guid DeviceCommandSourceId
        {
            get => _deviceCommandSourceId;
            set
            {
                if( _deviceCommandSourceId != value )
                {
                    _deviceCommandSourceId = value;
                    OnPropertyChanged( );
                }
            }
        }
        public Guid Reply
        {
            get => _reply;
            set
            {
                if( _reply != value )
                {
                    _reply = value;
                    OnPropertyChanged( );
                }
            }
        }

        public override void WriteTo( [ DisallowNull ] BinaryWriter destination )
        {
            base.WriteTo( destination );
            destination.Write( _rowVersion );
            destination.Write( _radome );
            destination.Write( _timestamp );
            destination.Write( _deviceCommandSourceType );
            destination.Write( _deviceCommandSourceId );
            destination.Write( _reply );
        }

        public override void ReadFrom([DisallowNull] BinaryReader source)
        {
            base.ReadFrom( source );
            _rowVersion = source.ReadInt64( );
            _radome = source.ReadGuid( );
            _timestamp = source.ReadDateTime( );
            _deviceCommandSourceType = source.ReadEnum<Types.DeviceCommandSourceType>( );
            _deviceCommandSourceId = source.ReadGuid( );
            _reply = source.ReadGuid( );
        }

    }
    public class RadomeCommandReplyObject : BaseDataGuid<Kind>
    {
        long _rowVersion = 0;
        Guid _radome;
        DateTime _timestamp;
        Guid _command;
        Types.DeviceCommandReplyStatus _status = Types.DeviceCommandReplyStatus.Unknown;
        string _message = string.Empty;
        public RadomeCommandReplyObject( )
        {
        }

        public RadomeCommandReplyObject( ObjectState objectState, Guid id, long rowVersion, Guid radome, DateTime timestamp, Guid command, Types.DeviceCommandReplyStatus status, string message )
            : base( objectState, id )
        {
            _rowVersion = rowVersion;
            _radome = radome;
            _timestamp = timestamp;
            _command = command;
            _status = status;
            _message = message;
        }

        public override Kind GetObjectType()
        {
            return Kind.RadomeCommandReply;
        }

        public override BaseData<Kind> Create()
        {
            return new RadomeCommandReplyObject( );
        }

        public override void AssignTo( BaseData<Kind> target )
        {
            base.AssignTo( target );
            var destination = ( RadomeCommandReplyObject )target;
            destination._rowVersion = _rowVersion;
            destination._radome = _radome;
            destination._timestamp = _timestamp;
            destination._command = _command;
            destination._status = _status;
            destination._message = _message;
        }

        public override bool Equals(BaseData<Kind>? other)
        {
            if (base.Equals(other))
            {
                var obj = ( RadomeCommandReplyObject )other;
                if( obj._rowVersion != _rowVersion )
                {
                    return false;
                }
                if( obj._radome != _radome )
                {
                    return false;
                }
                if( obj._timestamp != _timestamp )
                {
                    return false;
                }
                if( obj._command != _command )
                {
                    return false;
                }
                if( obj._status != _status )
                {
                    return false;
                }
                if( obj._message != _message )
                {
                    return false;
                }
                return true;
            }
            return false;
        }

        public override bool IsOfType(Kind objectType)
        {
            if( objectType == Kind.RadomeCommandReply )
            {
                return true;
            }
            return base.IsOfType( objectType );
        }

        public long RowVersion
        {
            get => _rowVersion;
            set
            {
                if( _rowVersion != value )
                {
                    _rowVersion = value;
                    OnPropertyChanged( );
                }
            }
        }
        public Guid Radome
        {
            get => _radome;
            set
            {
                if( _radome != value )
                {
                    _radome = value;
                    OnPropertyChanged( );
                }
            }
        }
        public DateTime Timestamp
        {
            get => _timestamp;
            set
            {
                if( _timestamp != value )
                {
                    _timestamp = value;
                    OnPropertyChanged( );
                }
            }
        }
        public Guid Command
        {
            get => _command;
            set
            {
                if( _command != value )
                {
                    _command = value;
                    OnPropertyChanged( );
                }
            }
        }
        public Types.DeviceCommandReplyStatus Status
        {
            get => _status;
            set
            {
                if( _status != value )
                {
                    _status = value;
                    OnPropertyChanged( );
                }
            }
        }
        public string Message
        {
            get => _message;
            set
            {
                if( _message != value )
                {
                    _message = value;
                    OnPropertyChanged( );
                }
            }
        }

        public override void WriteTo( [ DisallowNull ] BinaryWriter destination )
        {
            base.WriteTo( destination );
            destination.Write( _rowVersion );
            destination.Write( _radome );
            destination.Write( _timestamp );
            destination.Write( _command );
            destination.Write( _status );
            destination.Write( _message );
        }

        public override void ReadFrom([DisallowNull] BinaryReader source)
        {
            base.ReadFrom( source );
            _rowVersion = source.ReadInt64( );
            _radome = source.ReadGuid( );
            _timestamp = source.ReadDateTime( );
            _command = source.ReadGuid( );
            _status = source.ReadEnum<Types.DeviceCommandReplyStatus>( );
            _message = source.ReadString( );
        }

    }
    public class RadomeConfigurationObject : BaseDataGuid<Kind>
    {
        long _rowVersion = 0;
        Guid _radome;
        DateTime _timestamp;
        TimeSpan _interval;
        double _lowPressureLimit = 0.0;
        double _highPressureLimit = 0.0;
        double _lowTemperatureLimit = 0.0;
        double _highTemperatureLimit = 0.0;
        public RadomeConfigurationObject( )
        {
        }

        public RadomeConfigurationObject( ObjectState objectState, Guid id, long rowVersion, Guid radome, DateTime timestamp, TimeSpan interval, double lowPressureLimit, double highPressureLimit, double lowTemperatureLimit, double highTemperatureLimit )
            : base( objectState, id )
        {
            _rowVersion = rowVersion;
            _radome = radome;
            _timestamp = timestamp;
            _interval = interval;
            _lowPressureLimit = lowPressureLimit;
            _highPressureLimit = highPressureLimit;
            _lowTemperatureLimit = lowTemperatureLimit;
            _highTemperatureLimit = highTemperatureLimit;
        }

        public override Kind GetObjectType()
        {
            return Kind.RadomeConfiguration;
        }

        public override BaseData<Kind> Create()
        {
            return new RadomeConfigurationObject( );
        }

        public override void AssignTo( BaseData<Kind> target )
        {
            base.AssignTo( target );
            var destination = ( RadomeConfigurationObject )target;
            destination._rowVersion = _rowVersion;
            destination._radome = _radome;
            destination._timestamp = _timestamp;
            destination._interval = _interval;
            destination._lowPressureLimit = _lowPressureLimit;
            destination._highPressureLimit = _highPressureLimit;
            destination._lowTemperatureLimit = _lowTemperatureLimit;
            destination._highTemperatureLimit = _highTemperatureLimit;
        }

        public override bool Equals(BaseData<Kind>? other)
        {
            if (base.Equals(other))
            {
                var obj = ( RadomeConfigurationObject )other;
                if( obj._rowVersion != _rowVersion )
                {
                    return false;
                }
                if( obj._radome != _radome )
                {
                    return false;
                }
                if( obj._timestamp != _timestamp )
                {
                    return false;
                }
                if( obj._interval != _interval )
                {
                    return false;
                }
                if( obj._lowPressureLimit != _lowPressureLimit )
                {
                    return false;
                }
                if( obj._highPressureLimit != _highPressureLimit )
                {
                    return false;
                }
                if( obj._lowTemperatureLimit != _lowTemperatureLimit )
                {
                    return false;
                }
                if( obj._highTemperatureLimit != _highTemperatureLimit )
                {
                    return false;
                }
                return true;
            }
            return false;
        }

        public override bool IsOfType(Kind objectType)
        {
            if( objectType == Kind.RadomeConfiguration )
            {
                return true;
            }
            return base.IsOfType( objectType );
        }

        public long RowVersion
        {
            get => _rowVersion;
            set
            {
                if( _rowVersion != value )
                {
                    _rowVersion = value;
                    OnPropertyChanged( );
                }
            }
        }
        public Guid Radome
        {
            get => _radome;
            set
            {
                if( _radome != value )
                {
                    _radome = value;
                    OnPropertyChanged( );
                }
            }
        }
        public DateTime Timestamp
        {
            get => _timestamp;
            set
            {
                if( _timestamp != value )
                {
                    _timestamp = value;
                    OnPropertyChanged( );
                }
            }
        }
        public TimeSpan Interval
        {
            get => _interval;
            set
            {
                if( _interval != value )
                {
                    _interval = value;
                    OnPropertyChanged( );
                }
            }
        }
        public double LowPressureLimit
        {
            get => _lowPressureLimit;
            set
            {
                if( _lowPressureLimit != value )
                {
                    _lowPressureLimit = value;
                    OnPropertyChanged( );
                }
            }
        }
        public double HighPressureLimit
        {
            get => _highPressureLimit;
            set
            {
                if( _highPressureLimit != value )
                {
                    _highPressureLimit = value;
                    OnPropertyChanged( );
                }
            }
        }
        public double LowTemperatureLimit
        {
            get => _lowTemperatureLimit;
            set
            {
                if( _lowTemperatureLimit != value )
                {
                    _lowTemperatureLimit = value;
                    OnPropertyChanged( );
                }
            }
        }
        public double HighTemperatureLimit
        {
            get => _highTemperatureLimit;
            set
            {
                if( _highTemperatureLimit != value )
                {
                    _highTemperatureLimit = value;
                    OnPropertyChanged( );
                }
            }
        }

        public override void WriteTo( [ DisallowNull ] BinaryWriter destination )
        {
            base.WriteTo( destination );
            destination.Write( _rowVersion );
            destination.Write( _radome );
            destination.Write( _timestamp );
            destination.Write( _interval );
            destination.Write( _lowPressureLimit );
            destination.Write( _highPressureLimit );
            destination.Write( _lowTemperatureLimit );
            destination.Write( _highTemperatureLimit );
        }

        public override void ReadFrom([DisallowNull] BinaryReader source)
        {
            base.ReadFrom( source );
            _rowVersion = source.ReadInt64( );
            _radome = source.ReadGuid( );
            _timestamp = source.ReadDateTime( );
            _interval = source.ReadTimeSpan( );
            _lowPressureLimit = source.ReadDouble( );
            _highPressureLimit = source.ReadDouble( );
            _lowTemperatureLimit = source.ReadDouble( );
            _highTemperatureLimit = source.ReadDouble( );
        }

    }
    public class ReferenceTimeseriesValueObject : BaseDataGuid<Kind>
    {
        long _rowVersion = 0;
        Guid _timeseries;
        DateTime _timestamp;
        Guid _value;
        public ReferenceTimeseriesValueObject( )
        {
        }

        public ReferenceTimeseriesValueObject( ObjectState objectState, Guid id, long rowVersion, Guid timeseries, DateTime timestamp, Guid value__ )
            : base( objectState, id )
        {
            _rowVersion = rowVersion;
            _timeseries = timeseries;
            _timestamp = timestamp;
            _value = value__;
        }

        public override Kind GetObjectType()
        {
            return Kind.ReferenceTimeseriesValue;
        }

        public override BaseData<Kind> Create()
        {
            return new ReferenceTimeseriesValueObject( );
        }

        public override void AssignTo( BaseData<Kind> target )
        {
            base.AssignTo( target );
            var destination = ( ReferenceTimeseriesValueObject )target;
            destination._rowVersion = _rowVersion;
            destination._timeseries = _timeseries;
            destination._timestamp = _timestamp;
            destination._value = _value;
        }

        public override bool Equals(BaseData<Kind>? other)
        {
            if (base.Equals(other))
            {
                var obj = ( ReferenceTimeseriesValueObject )other;
                if( obj._rowVersion != _rowVersion )
                {
                    return false;
                }
                if( obj._timeseries != _timeseries )
                {
                    return false;
                }
                if( obj._timestamp != _timestamp )
                {
                    return false;
                }
                if( obj._value != _value )
                {
                    return false;
                }
                return true;
            }
            return false;
        }

        public override bool IsOfType(Kind objectType)
        {
            if( objectType == Kind.ReferenceTimeseriesValue )
            {
                return true;
            }
            return base.IsOfType( objectType );
        }

        public long RowVersion
        {
            get => _rowVersion;
            set
            {
                if( _rowVersion != value )
                {
                    _rowVersion = value;
                    OnPropertyChanged( );
                }
            }
        }
        public Guid Timeseries
        {
            get => _timeseries;
            set
            {
                if( _timeseries != value )
                {
                    _timeseries = value;
                    OnPropertyChanged( );
                }
            }
        }
        public DateTime Timestamp
        {
            get => _timestamp;
            set
            {
                if( _timestamp != value )
                {
                    _timestamp = value;
                    OnPropertyChanged( );
                }
            }
        }
        public Guid Value
        {
            get => _value;
            set
            {
                if( _value != value )
                {
                    _value = value;
                    OnPropertyChanged( );
                }
            }
        }

        public override void WriteTo( [ DisallowNull ] BinaryWriter destination )
        {
            base.WriteTo( destination );
            destination.Write( _rowVersion );
            destination.Write( _timeseries );
            destination.Write( _timestamp );
            destination.Write( _value );
        }

        public override void ReadFrom([DisallowNull] BinaryReader source)
        {
            base.ReadFrom( source );
            _rowVersion = source.ReadInt64( );
            _timeseries = source.ReadGuid( );
            _timestamp = source.ReadDateTime( );
            _value = source.ReadGuid( );
        }

    }
    public class SByteTimeseriesValueObject : BaseDataGuid<Kind>
    {
        long _rowVersion = 0;
        Guid _timeseries;
        DateTime _timestamp;
        sbyte? _value;
        public SByteTimeseriesValueObject( )
        {
        }

        public SByteTimeseriesValueObject( ObjectState objectState, Guid id, long rowVersion, Guid timeseries, DateTime timestamp, sbyte? value__ )
            : base( objectState, id )
        {
            _rowVersion = rowVersion;
            _timeseries = timeseries;
            _timestamp = timestamp;
            _value = value__;
        }

        public override Kind GetObjectType()
        {
            return Kind.SByteTimeseriesValue;
        }

        public override BaseData<Kind> Create()
        {
            return new SByteTimeseriesValueObject( );
        }

        public override void AssignTo( BaseData<Kind> target )
        {
            base.AssignTo( target );
            var destination = ( SByteTimeseriesValueObject )target;
            destination._rowVersion = _rowVersion;
            destination._timeseries = _timeseries;
            destination._timestamp = _timestamp;
            destination._value = _value;
        }

        public override bool Equals(BaseData<Kind>? other)
        {
            if (base.Equals(other))
            {
                var obj = ( SByteTimeseriesValueObject )other;
                if( obj._rowVersion != _rowVersion )
                {
                    return false;
                }
                if( obj._timeseries != _timeseries )
                {
                    return false;
                }
                if( obj._timestamp != _timestamp )
                {
                    return false;
                }
                if( obj._value != _value )
                {
                    return false;
                }
                return true;
            }
            return false;
        }

        public override bool IsOfType(Kind objectType)
        {
            if( objectType == Kind.SByteTimeseriesValue )
            {
                return true;
            }
            return base.IsOfType( objectType );
        }

        public long RowVersion
        {
            get => _rowVersion;
            set
            {
                if( _rowVersion != value )
                {
                    _rowVersion = value;
                    OnPropertyChanged( );
                }
            }
        }
        public Guid Timeseries
        {
            get => _timeseries;
            set
            {
                if( _timeseries != value )
                {
                    _timeseries = value;
                    OnPropertyChanged( );
                }
            }
        }
        public DateTime Timestamp
        {
            get => _timestamp;
            set
            {
                if( _timestamp != value )
                {
                    _timestamp = value;
                    OnPropertyChanged( );
                }
            }
        }
        public sbyte? Value
        {
            get => _value;
            set
            {
                if( _value != value )
                {
                    _value = value;
                    OnPropertyChanged( );
                }
            }
        }

        public override void WriteTo( [ DisallowNull ] BinaryWriter destination )
        {
            base.WriteTo( destination );
            destination.Write( _rowVersion );
            destination.Write( _timeseries );
            destination.Write( _timestamp );
            destination.Write( _value );
        }

        public override void ReadFrom([DisallowNull] BinaryReader source)
        {
            base.ReadFrom( source );
            _rowVersion = source.ReadInt64( );
            _timeseries = source.ReadGuid( );
            _timestamp = source.ReadDateTime( );
            _value = source.ReadNullableSByte( );
        }

    }
    public class SecurityDomainObject : BaseDataGuid<Kind>
    {
        long _rowVersion = 0;
        string _name = string.Empty;
        string _description = string.Empty;
        public SecurityDomainObject( )
        {
        }

        public SecurityDomainObject( ObjectState objectState, Guid id, long rowVersion, string name, string description )
            : base( objectState, id )
        {
            _rowVersion = rowVersion;
            _name = name;
            _description = description;
        }

        public override Kind GetObjectType()
        {
            return Kind.SecurityDomain;
        }

        public override BaseData<Kind> Create()
        {
            return new SecurityDomainObject( );
        }

        public override void AssignTo( BaseData<Kind> target )
        {
            base.AssignTo( target );
            var destination = ( SecurityDomainObject )target;
            destination._rowVersion = _rowVersion;
            destination._name = _name;
            destination._description = _description;
        }

        public override bool Equals(BaseData<Kind>? other)
        {
            if (base.Equals(other))
            {
                var obj = ( SecurityDomainObject )other;
                if( obj._rowVersion != _rowVersion )
                {
                    return false;
                }
                if( obj._name != _name )
                {
                    return false;
                }
                if( obj._description != _description )
                {
                    return false;
                }
                return true;
            }
            return false;
        }

        public override bool IsOfType(Kind objectType)
        {
            if( objectType == Kind.SecurityDomain )
            {
                return true;
            }
            return base.IsOfType( objectType );
        }

        public long RowVersion
        {
            get => _rowVersion;
            set
            {
                if( _rowVersion != value )
                {
                    _rowVersion = value;
                    OnPropertyChanged( );
                }
            }
        }
        public string Name
        {
            get => _name;
            set
            {
                if( _name != value )
                {
                    _name = value;
                    OnPropertyChanged( );
                }
            }
        }
        public string Description
        {
            get => _description;
            set
            {
                if( _description != value )
                {
                    _description = value;
                    OnPropertyChanged( );
                }
            }
        }

        public override void WriteTo( [ DisallowNull ] BinaryWriter destination )
        {
            base.WriteTo( destination );
            destination.Write( _rowVersion );
            destination.Write( _name );
            destination.Write( _description );
        }

        public override void ReadFrom([DisallowNull] BinaryReader source)
        {
            base.ReadFrom( source );
            _rowVersion = source.ReadInt64( );
            _name = source.ReadString( );
            _description = source.ReadString( );
        }

    }
    public abstract class SecurityIdentifierObject : BaseDataGuid<Kind>
    {
        long _rowVersion = 0;
        Guid _domain;
        string _identity = string.Empty;
        string _description = string.Empty;
        protected SecurityIdentifierObject( )
        {
        }

        protected SecurityIdentifierObject( ObjectState objectState, Guid id, long rowVersion, Guid domain, string identity, string description )
            : base( objectState, id )
        {
            _rowVersion = rowVersion;
            _domain = domain;
            _identity = identity;
            _description = description;
        }

        public override void AssignTo( BaseData<Kind> target )
        {
            base.AssignTo( target );
            var destination = ( SecurityIdentifierObject )target;
            destination._rowVersion = _rowVersion;
            destination._domain = _domain;
            destination._identity = _identity;
            destination._description = _description;
        }

        public override bool Equals(BaseData<Kind>? other)
        {
            if (base.Equals(other))
            {
                var obj = ( SecurityIdentifierObject )other;
                if( obj._rowVersion != _rowVersion )
                {
                    return false;
                }
                if( obj._domain != _domain )
                {
                    return false;
                }
                if( obj._identity != _identity )
                {
                    return false;
                }
                if( obj._description != _description )
                {
                    return false;
                }
                return true;
            }
            return false;
        }

        public override bool IsOfType(Kind objectType)
        {
            if( objectType == Kind.SecurityIdentifier )
            {
                return true;
            }
            return base.IsOfType( objectType );
        }

        public long RowVersion
        {
            get => _rowVersion;
            set
            {
                if( _rowVersion != value )
                {
                    _rowVersion = value;
                    OnPropertyChanged( );
                }
            }
        }
        public Guid Domain
        {
            get => _domain;
            set
            {
                if( _domain != value )
                {
                    _domain = value;
                    OnPropertyChanged( );
                }
            }
        }
        public string Identity
        {
            get => _identity;
            set
            {
                if( _identity != value )
                {
                    _identity = value;
                    OnPropertyChanged( );
                }
            }
        }
        public string Description
        {
            get => _description;
            set
            {
                if( _description != value )
                {
                    _description = value;
                    OnPropertyChanged( );
                }
            }
        }

        public override void WriteTo( [ DisallowNull ] BinaryWriter destination )
        {
            base.WriteTo( destination );
            destination.Write( _rowVersion );
            destination.Write( _domain );
            destination.Write( _identity );
            destination.Write( _description );
        }

        public override void ReadFrom([DisallowNull] BinaryReader source)
        {
            base.ReadFrom( source );
            _rowVersion = source.ReadInt64( );
            _domain = source.ReadGuid( );
            _identity = source.ReadString( );
            _description = source.ReadString( );
        }

    }
    public class SecurityLoginObject : SecurityIdentifierObject
    {
        public SecurityLoginObject( )
        {
        }

        public SecurityLoginObject( ObjectState objectState, Guid id, long rowVersion, Guid domain, string identity, string description )
            : base( objectState, id, rowVersion, domain, identity, description )
        {
        }

        public override Kind GetObjectType()
        {
            return Kind.SecurityLogin;
        }

        public override BaseData<Kind> Create()
        {
            return new SecurityLoginObject( );
        }

        public override bool IsOfType(Kind objectType)
        {
            if( objectType == Kind.SecurityLogin )
            {
                return true;
            }
            return base.IsOfType( objectType );
        }

    }
    public class SecurityRoleObject : SecurityIdentifierObject
    {
        string _name = string.Empty;
        public SecurityRoleObject( )
        {
        }

        public SecurityRoleObject( ObjectState objectState, Guid id, long rowVersion, Guid domain, string identity, string description, string name )
            : base( objectState, id, rowVersion, domain, identity, description )
        {
            _name = name;
        }

        public override Kind GetObjectType()
        {
            return Kind.SecurityRole;
        }

        public override BaseData<Kind> Create()
        {
            return new SecurityRoleObject( );
        }

        public override void AssignTo( BaseData<Kind> target )
        {
            base.AssignTo( target );
            var destination = ( SecurityRoleObject )target;
            destination._name = _name;
        }

        public override bool Equals(BaseData<Kind>? other)
        {
            if (base.Equals(other))
            {
                var obj = ( SecurityRoleObject )other;
                if( obj._name != _name )
                {
                    return false;
                }
                return true;
            }
            return false;
        }

        public override bool IsOfType(Kind objectType)
        {
            if( objectType == Kind.SecurityRole )
            {
                return true;
            }
            return base.IsOfType( objectType );
        }

        public string Name
        {
            get => _name;
            set
            {
                if( _name != value )
                {
                    _name = value;
                    OnPropertyChanged( );
                }
            }
        }

        public override void WriteTo( [ DisallowNull ] BinaryWriter destination )
        {
            base.WriteTo( destination );
            destination.Write( _name );
        }

        public override void ReadFrom([DisallowNull] BinaryReader source)
        {
            base.ReadFrom( source );
            _name = source.ReadString( );
        }

    }
    public class SecurityIdentifierRoleLinkObject : BaseDataGuid<Kind>
    {
        long _rowVersion = 0;
        Guid _member;
        Guid _role;
        DateTime _start;
        DateTime? _end;
        public SecurityIdentifierRoleLinkObject( )
        {
        }

        public SecurityIdentifierRoleLinkObject( ObjectState objectState, Guid id, long rowVersion, Guid member, Guid role, DateTime start, DateTime? end )
            : base( objectState, id )
        {
            _rowVersion = rowVersion;
            _member = member;
            _role = role;
            _start = start;
            _end = end;
        }

        public override Kind GetObjectType()
        {
            return Kind.SecurityIdentifierRoleLink;
        }

        public override BaseData<Kind> Create()
        {
            return new SecurityIdentifierRoleLinkObject( );
        }

        public override void AssignTo( BaseData<Kind> target )
        {
            base.AssignTo( target );
            var destination = ( SecurityIdentifierRoleLinkObject )target;
            destination._rowVersion = _rowVersion;
            destination._member = _member;
            destination._role = _role;
            destination._start = _start;
            destination._end = _end;
        }

        public override bool Equals(BaseData<Kind>? other)
        {
            if (base.Equals(other))
            {
                var obj = ( SecurityIdentifierRoleLinkObject )other;
                if( obj._rowVersion != _rowVersion )
                {
                    return false;
                }
                if( obj._member != _member )
                {
                    return false;
                }
                if( obj._role != _role )
                {
                    return false;
                }
                if( obj._start != _start )
                {
                    return false;
                }
                if( obj._end != _end )
                {
                    return false;
                }
                return true;
            }
            return false;
        }

        public override bool IsOfType(Kind objectType)
        {
            if( objectType == Kind.SecurityIdentifierRoleLink )
            {
                return true;
            }
            return base.IsOfType( objectType );
        }

        public long RowVersion
        {
            get => _rowVersion;
            set
            {
                if( _rowVersion != value )
                {
                    _rowVersion = value;
                    OnPropertyChanged( );
                }
            }
        }
        public Guid Member
        {
            get => _member;
            set
            {
                if( _member != value )
                {
                    _member = value;
                    OnPropertyChanged( );
                }
            }
        }
        public Guid Role
        {
            get => _role;
            set
            {
                if( _role != value )
                {
                    _role = value;
                    OnPropertyChanged( );
                }
            }
        }
        public DateTime Start
        {
            get => _start;
            set
            {
                if( _start != value )
                {
                    _start = value;
                    OnPropertyChanged( );
                }
            }
        }
        public DateTime? End
        {
            get => _end;
            set
            {
                if( _end != value )
                {
                    _end = value;
                    OnPropertyChanged( );
                }
            }
        }

        public override void WriteTo( [ DisallowNull ] BinaryWriter destination )
        {
            base.WriteTo( destination );
            destination.Write( _rowVersion );
            destination.Write( _member );
            destination.Write( _role );
            destination.Write( _start );
            destination.Write( _end );
        }

        public override void ReadFrom([DisallowNull] BinaryReader source)
        {
            base.ReadFrom( source );
            _rowVersion = source.ReadInt64( );
            _member = source.ReadGuid( );
            _role = source.ReadGuid( );
            _start = source.ReadDateTime( );
            _end = source.ReadNullableDateTime( );
        }

    }
    public class SecurityLoginSessionObject : BaseDataGuid<Kind>
    {
        long _rowVersion = 0;
        Guid _login;
        DateTime _fromTime;
        DateTime? _throughTime;
        Guid _clientSession;
        string _notificationQueueName = string.Empty;
        string _messageQueueName = string.Empty;
        public SecurityLoginSessionObject( )
        {
        }

        public SecurityLoginSessionObject( ObjectState objectState, Guid id, long rowVersion, Guid login, DateTime fromTime, DateTime? throughTime, Guid clientSession, string notificationQueueName, string messageQueueName )
            : base( objectState, id )
        {
            _rowVersion = rowVersion;
            _login = login;
            _fromTime = fromTime;
            _throughTime = throughTime;
            _clientSession = clientSession;
            _notificationQueueName = notificationQueueName;
            _messageQueueName = messageQueueName;
        }

        public override Kind GetObjectType()
        {
            return Kind.SecurityLoginSession;
        }

        public override BaseData<Kind> Create()
        {
            return new SecurityLoginSessionObject( );
        }

        public override void AssignTo( BaseData<Kind> target )
        {
            base.AssignTo( target );
            var destination = ( SecurityLoginSessionObject )target;
            destination._rowVersion = _rowVersion;
            destination._login = _login;
            destination._fromTime = _fromTime;
            destination._throughTime = _throughTime;
            destination._clientSession = _clientSession;
            destination._notificationQueueName = _notificationQueueName;
            destination._messageQueueName = _messageQueueName;
        }

        public override bool Equals(BaseData<Kind>? other)
        {
            if (base.Equals(other))
            {
                var obj = ( SecurityLoginSessionObject )other;
                if( obj._rowVersion != _rowVersion )
                {
                    return false;
                }
                if( obj._login != _login )
                {
                    return false;
                }
                if( obj._fromTime != _fromTime )
                {
                    return false;
                }
                if( obj._throughTime != _throughTime )
                {
                    return false;
                }
                if( obj._clientSession != _clientSession )
                {
                    return false;
                }
                if( obj._notificationQueueName != _notificationQueueName )
                {
                    return false;
                }
                if( obj._messageQueueName != _messageQueueName )
                {
                    return false;
                }
                return true;
            }
            return false;
        }

        public override bool IsOfType(Kind objectType)
        {
            if( objectType == Kind.SecurityLoginSession )
            {
                return true;
            }
            return base.IsOfType( objectType );
        }

        public long RowVersion
        {
            get => _rowVersion;
            set
            {
                if( _rowVersion != value )
                {
                    _rowVersion = value;
                    OnPropertyChanged( );
                }
            }
        }
        public Guid Login
        {
            get => _login;
            set
            {
                if( _login != value )
                {
                    _login = value;
                    OnPropertyChanged( );
                }
            }
        }
        public DateTime FromTime
        {
            get => _fromTime;
            set
            {
                if( _fromTime != value )
                {
                    _fromTime = value;
                    OnPropertyChanged( );
                }
            }
        }
        public DateTime? ThroughTime
        {
            get => _throughTime;
            set
            {
                if( _throughTime != value )
                {
                    _throughTime = value;
                    OnPropertyChanged( );
                }
            }
        }
        public Guid ClientSession
        {
            get => _clientSession;
            set
            {
                if( _clientSession != value )
                {
                    _clientSession = value;
                    OnPropertyChanged( );
                }
            }
        }
        public string NotificationQueueName
        {
            get => _notificationQueueName;
            set
            {
                if( _notificationQueueName != value )
                {
                    _notificationQueueName = value;
                    OnPropertyChanged( );
                }
            }
        }
        public string MessageQueueName
        {
            get => _messageQueueName;
            set
            {
                if( _messageQueueName != value )
                {
                    _messageQueueName = value;
                    OnPropertyChanged( );
                }
            }
        }

        public override void WriteTo( [ DisallowNull ] BinaryWriter destination )
        {
            base.WriteTo( destination );
            destination.Write( _rowVersion );
            destination.Write( _login );
            destination.Write( _fromTime );
            destination.Write( _throughTime );
            destination.Write( _clientSession );
            destination.Write( _notificationQueueName );
            destination.Write( _messageQueueName );
        }

        public override void ReadFrom([DisallowNull] BinaryReader source)
        {
            base.ReadFrom( source );
            _rowVersion = source.ReadInt64( );
            _login = source.ReadGuid( );
            _fromTime = source.ReadDateTime( );
            _throughTime = source.ReadNullableDateTime( );
            _clientSession = source.ReadGuid( );
            _notificationQueueName = source.ReadString( );
            _messageQueueName = source.ReadString( );
        }

    }
    public class SecurityPermissionObject : BaseDataGuid<Kind>
    {
        long _rowVersion = 0;
        Guid _identifier;
        DateTime _timestamp;
        int _typeCode = 0;
        bool _canCreate = false;
        bool _canRead = false;
        bool _canUpdate = false;
        bool _canDelete = false;
        public SecurityPermissionObject( )
        {
        }

        public SecurityPermissionObject( ObjectState objectState, Guid id, long rowVersion, Guid identifier, DateTime timestamp, int typeCode, bool canCreate, bool canRead, bool canUpdate, bool canDelete )
            : base( objectState, id )
        {
            _rowVersion = rowVersion;
            _identifier = identifier;
            _timestamp = timestamp;
            _typeCode = typeCode;
            _canCreate = canCreate;
            _canRead = canRead;
            _canUpdate = canUpdate;
            _canDelete = canDelete;
        }

        public override Kind GetObjectType()
        {
            return Kind.SecurityPermission;
        }

        public override BaseData<Kind> Create()
        {
            return new SecurityPermissionObject( );
        }

        public override void AssignTo( BaseData<Kind> target )
        {
            base.AssignTo( target );
            var destination = ( SecurityPermissionObject )target;
            destination._rowVersion = _rowVersion;
            destination._identifier = _identifier;
            destination._timestamp = _timestamp;
            destination._typeCode = _typeCode;
            destination._canCreate = _canCreate;
            destination._canRead = _canRead;
            destination._canUpdate = _canUpdate;
            destination._canDelete = _canDelete;
        }

        public override bool Equals(BaseData<Kind>? other)
        {
            if (base.Equals(other))
            {
                var obj = ( SecurityPermissionObject )other;
                if( obj._rowVersion != _rowVersion )
                {
                    return false;
                }
                if( obj._identifier != _identifier )
                {
                    return false;
                }
                if( obj._timestamp != _timestamp )
                {
                    return false;
                }
                if( obj._typeCode != _typeCode )
                {
                    return false;
                }
                if( obj._canCreate != _canCreate )
                {
                    return false;
                }
                if( obj._canRead != _canRead )
                {
                    return false;
                }
                if( obj._canUpdate != _canUpdate )
                {
                    return false;
                }
                if( obj._canDelete != _canDelete )
                {
                    return false;
                }
                return true;
            }
            return false;
        }

        public override bool IsOfType(Kind objectType)
        {
            if( objectType == Kind.SecurityPermission )
            {
                return true;
            }
            return base.IsOfType( objectType );
        }

        public long RowVersion
        {
            get => _rowVersion;
            set
            {
                if( _rowVersion != value )
                {
                    _rowVersion = value;
                    OnPropertyChanged( );
                }
            }
        }
        public Guid Identifier
        {
            get => _identifier;
            set
            {
                if( _identifier != value )
                {
                    _identifier = value;
                    OnPropertyChanged( );
                }
            }
        }
        public DateTime Timestamp
        {
            get => _timestamp;
            set
            {
                if( _timestamp != value )
                {
                    _timestamp = value;
                    OnPropertyChanged( );
                }
            }
        }
        public int TypeCode
        {
            get => _typeCode;
            set
            {
                if( _typeCode != value )
                {
                    _typeCode = value;
                    OnPropertyChanged( );
                }
            }
        }
        public bool CanCreate
        {
            get => _canCreate;
            set
            {
                if( _canCreate != value )
                {
                    _canCreate = value;
                    OnPropertyChanged( );
                }
            }
        }
        public bool CanRead
        {
            get => _canRead;
            set
            {
                if( _canRead != value )
                {
                    _canRead = value;
                    OnPropertyChanged( );
                }
            }
        }
        public bool CanUpdate
        {
            get => _canUpdate;
            set
            {
                if( _canUpdate != value )
                {
                    _canUpdate = value;
                    OnPropertyChanged( );
                }
            }
        }
        public bool CanDelete
        {
            get => _canDelete;
            set
            {
                if( _canDelete != value )
                {
                    _canDelete = value;
                    OnPropertyChanged( );
                }
            }
        }

        public override void WriteTo( [ DisallowNull ] BinaryWriter destination )
        {
            base.WriteTo( destination );
            destination.Write( _rowVersion );
            destination.Write( _identifier );
            destination.Write( _timestamp );
            destination.Write( _typeCode );
            destination.Write( _canCreate );
            destination.Write( _canRead );
            destination.Write( _canUpdate );
            destination.Write( _canDelete );
        }

        public override void ReadFrom([DisallowNull] BinaryReader source)
        {
            base.ReadFrom( source );
            _rowVersion = source.ReadInt64( );
            _identifier = source.ReadGuid( );
            _timestamp = source.ReadDateTime( );
            _typeCode = source.ReadInt32( );
            _canCreate = source.ReadBoolean( );
            _canRead = source.ReadBoolean( );
            _canUpdate = source.ReadBoolean( );
            _canDelete = source.ReadBoolean( );
        }

    }
    public class SingleTimeseriesValueObject : BaseDataGuid<Kind>
    {
        long _rowVersion = 0;
        Guid _timeseries;
        DateTime _timestamp;
        float? _value;
        public SingleTimeseriesValueObject( )
        {
        }

        public SingleTimeseriesValueObject( ObjectState objectState, Guid id, long rowVersion, Guid timeseries, DateTime timestamp, float? value__ )
            : base( objectState, id )
        {
            _rowVersion = rowVersion;
            _timeseries = timeseries;
            _timestamp = timestamp;
            _value = value__;
        }

        public override Kind GetObjectType()
        {
            return Kind.SingleTimeseriesValue;
        }

        public override BaseData<Kind> Create()
        {
            return new SingleTimeseriesValueObject( );
        }

        public override void AssignTo( BaseData<Kind> target )
        {
            base.AssignTo( target );
            var destination = ( SingleTimeseriesValueObject )target;
            destination._rowVersion = _rowVersion;
            destination._timeseries = _timeseries;
            destination._timestamp = _timestamp;
            destination._value = _value;
        }

        public override bool Equals(BaseData<Kind>? other)
        {
            if (base.Equals(other))
            {
                var obj = ( SingleTimeseriesValueObject )other;
                if( obj._rowVersion != _rowVersion )
                {
                    return false;
                }
                if( obj._timeseries != _timeseries )
                {
                    return false;
                }
                if( obj._timestamp != _timestamp )
                {
                    return false;
                }
                if( obj._value != _value )
                {
                    return false;
                }
                return true;
            }
            return false;
        }

        public override bool IsOfType(Kind objectType)
        {
            if( objectType == Kind.SingleTimeseriesValue )
            {
                return true;
            }
            return base.IsOfType( objectType );
        }

        public long RowVersion
        {
            get => _rowVersion;
            set
            {
                if( _rowVersion != value )
                {
                    _rowVersion = value;
                    OnPropertyChanged( );
                }
            }
        }
        public Guid Timeseries
        {
            get => _timeseries;
            set
            {
                if( _timeseries != value )
                {
                    _timeseries = value;
                    OnPropertyChanged( );
                }
            }
        }
        public DateTime Timestamp
        {
            get => _timestamp;
            set
            {
                if( _timestamp != value )
                {
                    _timestamp = value;
                    OnPropertyChanged( );
                }
            }
        }
        public float? Value
        {
            get => _value;
            set
            {
                if( _value != value )
                {
                    _value = value;
                    OnPropertyChanged( );
                }
            }
        }

        public override void WriteTo( [ DisallowNull ] BinaryWriter destination )
        {
            base.WriteTo( destination );
            destination.Write( _rowVersion );
            destination.Write( _timeseries );
            destination.Write( _timestamp );
            destination.Write( _value );
        }

        public override void ReadFrom([DisallowNull] BinaryReader source)
        {
            base.ReadFrom( source );
            _rowVersion = source.ReadInt64( );
            _timeseries = source.ReadGuid( );
            _timestamp = source.ReadDateTime( );
            _value = source.ReadNullableSingle( );
        }

    }
    public class StringTimeseriesValueObject : BaseDataGuid<Kind>
    {
        long _rowVersion = 0;
        Guid _timeseries;
        DateTime _timestamp;
        string _value = string.Empty;
        public StringTimeseriesValueObject( )
        {
        }

        public StringTimeseriesValueObject( ObjectState objectState, Guid id, long rowVersion, Guid timeseries, DateTime timestamp, string value__ )
            : base( objectState, id )
        {
            _rowVersion = rowVersion;
            _timeseries = timeseries;
            _timestamp = timestamp;
            _value = value__;
        }

        public override Kind GetObjectType()
        {
            return Kind.StringTimeseriesValue;
        }

        public override BaseData<Kind> Create()
        {
            return new StringTimeseriesValueObject( );
        }

        public override void AssignTo( BaseData<Kind> target )
        {
            base.AssignTo( target );
            var destination = ( StringTimeseriesValueObject )target;
            destination._rowVersion = _rowVersion;
            destination._timeseries = _timeseries;
            destination._timestamp = _timestamp;
            destination._value = _value;
        }

        public override bool Equals(BaseData<Kind>? other)
        {
            if (base.Equals(other))
            {
                var obj = ( StringTimeseriesValueObject )other;
                if( obj._rowVersion != _rowVersion )
                {
                    return false;
                }
                if( obj._timeseries != _timeseries )
                {
                    return false;
                }
                if( obj._timestamp != _timestamp )
                {
                    return false;
                }
                if( obj._value != _value )
                {
                    return false;
                }
                return true;
            }
            return false;
        }

        public override bool IsOfType(Kind objectType)
        {
            if( objectType == Kind.StringTimeseriesValue )
            {
                return true;
            }
            return base.IsOfType( objectType );
        }

        public long RowVersion
        {
            get => _rowVersion;
            set
            {
                if( _rowVersion != value )
                {
                    _rowVersion = value;
                    OnPropertyChanged( );
                }
            }
        }
        public Guid Timeseries
        {
            get => _timeseries;
            set
            {
                if( _timeseries != value )
                {
                    _timeseries = value;
                    OnPropertyChanged( );
                }
            }
        }
        public DateTime Timestamp
        {
            get => _timestamp;
            set
            {
                if( _timestamp != value )
                {
                    _timestamp = value;
                    OnPropertyChanged( );
                }
            }
        }
        public string Value
        {
            get => _value;
            set
            {
                if( _value != value )
                {
                    _value = value;
                    OnPropertyChanged( );
                }
            }
        }

        public override void WriteTo( [ DisallowNull ] BinaryWriter destination )
        {
            base.WriteTo( destination );
            destination.Write( _rowVersion );
            destination.Write( _timeseries );
            destination.Write( _timestamp );
            destination.Write( _value );
        }

        public override void ReadFrom([DisallowNull] BinaryReader source)
        {
            base.ReadFrom( source );
            _rowVersion = source.ReadInt64( );
            _timeseries = source.ReadGuid( );
            _timestamp = source.ReadDateTime( );
            _value = source.ReadString( );
        }

    }
    public abstract class TimeseriesCatalogElementObject : BaseDataGuid<Kind>
    {
        long _rowVersion = 0;
        Guid? _catalog;
        string _name = string.Empty;
        protected TimeseriesCatalogElementObject( )
        {
        }

        protected TimeseriesCatalogElementObject( ObjectState objectState, Guid id, long rowVersion, Guid? catalog, string name )
            : base( objectState, id )
        {
            _rowVersion = rowVersion;
            _catalog = catalog;
            _name = name;
        }

        public override void AssignTo( BaseData<Kind> target )
        {
            base.AssignTo( target );
            var destination = ( TimeseriesCatalogElementObject )target;
            destination._rowVersion = _rowVersion;
            destination._catalog = _catalog;
            destination._name = _name;
        }

        public override bool Equals(BaseData<Kind>? other)
        {
            if (base.Equals(other))
            {
                var obj = ( TimeseriesCatalogElementObject )other;
                if( obj._rowVersion != _rowVersion )
                {
                    return false;
                }
                if( obj._catalog != _catalog )
                {
                    return false;
                }
                if( obj._name != _name )
                {
                    return false;
                }
                return true;
            }
            return false;
        }

        public override bool IsOfType(Kind objectType)
        {
            if( objectType == Kind.TimeseriesCatalogElement )
            {
                return true;
            }
            return base.IsOfType( objectType );
        }

        public long RowVersion
        {
            get => _rowVersion;
            set
            {
                if( _rowVersion != value )
                {
                    _rowVersion = value;
                    OnPropertyChanged( );
                }
            }
        }
        public Guid? Catalog
        {
            get => _catalog;
            set
            {
                if( _catalog != value )
                {
                    _catalog = value;
                    OnPropertyChanged( );
                }
            }
        }
        public string Name
        {
            get => _name;
            set
            {
                if( _name != value )
                {
                    _name = value;
                    OnPropertyChanged( );
                }
            }
        }

        public override void WriteTo( [ DisallowNull ] BinaryWriter destination )
        {
            base.WriteTo( destination );
            destination.Write( _rowVersion );
            destination.Write( _catalog );
            destination.Write( _name );
        }

        public override void ReadFrom([DisallowNull] BinaryReader source)
        {
            base.ReadFrom( source );
            _rowVersion = source.ReadInt64( );
            _catalog = source.ReadNullableGuid( );
            _name = source.ReadString( );
        }

    }
    public abstract class TimeseriesObject : TimeseriesCatalogElementObject
    {
        TimeSpan _maxRetention;
        protected TimeseriesObject( )
        {
        }

        protected TimeseriesObject( ObjectState objectState, Guid id, long rowVersion, Guid? catalog, string name, TimeSpan maxRetention )
            : base( objectState, id, rowVersion, catalog, name )
        {
            _maxRetention = maxRetention;
        }

        public override void AssignTo( BaseData<Kind> target )
        {
            base.AssignTo( target );
            var destination = ( TimeseriesObject )target;
            destination._maxRetention = _maxRetention;
        }

        public override bool Equals(BaseData<Kind>? other)
        {
            if (base.Equals(other))
            {
                var obj = ( TimeseriesObject )other;
                if( obj._maxRetention != _maxRetention )
                {
                    return false;
                }
                return true;
            }
            return false;
        }

        public override bool IsOfType(Kind objectType)
        {
            if( objectType == Kind.Timeseries )
            {
                return true;
            }
            return base.IsOfType( objectType );
        }

        public TimeSpan MaxRetention
        {
            get => _maxRetention;
            set
            {
                if( _maxRetention != value )
                {
                    _maxRetention = value;
                    OnPropertyChanged( );
                }
            }
        }

        public override void WriteTo( [ DisallowNull ] BinaryWriter destination )
        {
            base.WriteTo( destination );
            destination.Write( _maxRetention );
        }

        public override void ReadFrom([DisallowNull] BinaryReader source)
        {
            base.ReadFrom( source );
            _maxRetention = source.ReadTimeSpan( );
        }

    }
    public class BinaryTimeseriesObject : TimeseriesObject
    {
        public BinaryTimeseriesObject( )
        {
        }

        public BinaryTimeseriesObject( ObjectState objectState, Guid id, long rowVersion, Guid? catalog, string name, TimeSpan maxRetention )
            : base( objectState, id, rowVersion, catalog, name, maxRetention )
        {
        }

        public override Kind GetObjectType()
        {
            return Kind.BinaryTimeseries;
        }

        public override BaseData<Kind> Create()
        {
            return new BinaryTimeseriesObject( );
        }

        public override bool IsOfType(Kind objectType)
        {
            if( objectType == Kind.BinaryTimeseries )
            {
                return true;
            }
            return base.IsOfType( objectType );
        }

    }
    public class BooleanTimeseriesObject : TimeseriesObject
    {
        public BooleanTimeseriesObject( )
        {
        }

        public BooleanTimeseriesObject( ObjectState objectState, Guid id, long rowVersion, Guid? catalog, string name, TimeSpan maxRetention )
            : base( objectState, id, rowVersion, catalog, name, maxRetention )
        {
        }

        public override Kind GetObjectType()
        {
            return Kind.BooleanTimeseries;
        }

        public override BaseData<Kind> Create()
        {
            return new BooleanTimeseriesObject( );
        }

        public override bool IsOfType(Kind objectType)
        {
            if( objectType == Kind.BooleanTimeseries )
            {
                return true;
            }
            return base.IsOfType( objectType );
        }

    }
    public class AisAidToNavigationOffPositionTimeseriesObject : BooleanTimeseriesObject
    {
        Guid _aidToNavigation;
        public AisAidToNavigationOffPositionTimeseriesObject( )
        {
        }

        public AisAidToNavigationOffPositionTimeseriesObject( ObjectState objectState, Guid id, long rowVersion, Guid? catalog, string name, TimeSpan maxRetention, Guid aidToNavigation )
            : base( objectState, id, rowVersion, catalog, name, maxRetention )
        {
            _aidToNavigation = aidToNavigation;
        }

        public override Kind GetObjectType()
        {
            return Kind.AisAidToNavigationOffPositionTimeseries;
        }

        public override BaseData<Kind> Create()
        {
            return new AisAidToNavigationOffPositionTimeseriesObject( );
        }

        public override void AssignTo( BaseData<Kind> target )
        {
            base.AssignTo( target );
            var destination = ( AisAidToNavigationOffPositionTimeseriesObject )target;
            destination._aidToNavigation = _aidToNavigation;
        }

        public override bool Equals(BaseData<Kind>? other)
        {
            if (base.Equals(other))
            {
                var obj = ( AisAidToNavigationOffPositionTimeseriesObject )other;
                if( obj._aidToNavigation != _aidToNavigation )
                {
                    return false;
                }
                return true;
            }
            return false;
        }

        public override bool IsOfType(Kind objectType)
        {
            if( objectType == Kind.AisAidToNavigationOffPositionTimeseries )
            {
                return true;
            }
            return base.IsOfType( objectType );
        }

        public Guid AidToNavigation
        {
            get => _aidToNavigation;
            set
            {
                if( _aidToNavigation != value )
                {
                    _aidToNavigation = value;
                    OnPropertyChanged( );
                }
            }
        }

        public override void WriteTo( [ DisallowNull ] BinaryWriter destination )
        {
            base.WriteTo( destination );
            destination.Write( _aidToNavigation );
        }

        public override void ReadFrom([DisallowNull] BinaryReader source)
        {
            base.ReadFrom( source );
            _aidToNavigation = source.ReadGuid( );
        }

    }
    public class DeviceEnabledTimeseriesObject : BooleanTimeseriesObject
    {
        Guid? _device;
        public DeviceEnabledTimeseriesObject( )
        {
        }

        public DeviceEnabledTimeseriesObject( ObjectState objectState, Guid id, long rowVersion, Guid? catalog, string name, TimeSpan maxRetention, Guid? device )
            : base( objectState, id, rowVersion, catalog, name, maxRetention )
        {
            _device = device;
        }

        public override Kind GetObjectType()
        {
            return Kind.DeviceEnabledTimeseries;
        }

        public override BaseData<Kind> Create()
        {
            return new DeviceEnabledTimeseriesObject( );
        }

        public override void AssignTo( BaseData<Kind> target )
        {
            base.AssignTo( target );
            var destination = ( DeviceEnabledTimeseriesObject )target;
            destination._device = _device;
        }

        public override bool Equals(BaseData<Kind>? other)
        {
            if (base.Equals(other))
            {
                var obj = ( DeviceEnabledTimeseriesObject )other;
                if( obj._device != _device )
                {
                    return false;
                }
                return true;
            }
            return false;
        }

        public override bool IsOfType(Kind objectType)
        {
            if( objectType == Kind.DeviceEnabledTimeseries )
            {
                return true;
            }
            return base.IsOfType( objectType );
        }

        public Guid? Device
        {
            get => _device;
            set
            {
                if( _device != value )
                {
                    _device = value;
                    OnPropertyChanged( );
                }
            }
        }

        public override void WriteTo( [ DisallowNull ] BinaryWriter destination )
        {
            base.WriteTo( destination );
            destination.Write( _device );
        }

        public override void ReadFrom([DisallowNull] BinaryReader source)
        {
            base.ReadFrom( source );
            _device = source.ReadNullableGuid( );
        }

    }
    public class RadarAutomaticSensitivityTimeControlTimeseriesObject : BooleanTimeseriesObject
    {
        Guid _radar;
        public RadarAutomaticSensitivityTimeControlTimeseriesObject( )
        {
        }

        public RadarAutomaticSensitivityTimeControlTimeseriesObject( ObjectState objectState, Guid id, long rowVersion, Guid? catalog, string name, TimeSpan maxRetention, Guid radar )
            : base( objectState, id, rowVersion, catalog, name, maxRetention )
        {
            _radar = radar;
        }

        public override Kind GetObjectType()
        {
            return Kind.RadarAutomaticSensitivityTimeControlTimeseries;
        }

        public override BaseData<Kind> Create()
        {
            return new RadarAutomaticSensitivityTimeControlTimeseriesObject( );
        }

        public override void AssignTo( BaseData<Kind> target )
        {
            base.AssignTo( target );
            var destination = ( RadarAutomaticSensitivityTimeControlTimeseriesObject )target;
            destination._radar = _radar;
        }

        public override bool Equals(BaseData<Kind>? other)
        {
            if (base.Equals(other))
            {
                var obj = ( RadarAutomaticSensitivityTimeControlTimeseriesObject )other;
                if( obj._radar != _radar )
                {
                    return false;
                }
                return true;
            }
            return false;
        }

        public override bool IsOfType(Kind objectType)
        {
            if( objectType == Kind.RadarAutomaticSensitivityTimeControlTimeseries )
            {
                return true;
            }
            return base.IsOfType( objectType );
        }

        public Guid Radar
        {
            get => _radar;
            set
            {
                if( _radar != value )
                {
                    _radar = value;
                    OnPropertyChanged( );
                }
            }
        }

        public override void WriteTo( [ DisallowNull ] BinaryWriter destination )
        {
            base.WriteTo( destination );
            destination.Write( _radar );
        }

        public override void ReadFrom([DisallowNull] BinaryReader source)
        {
            base.ReadFrom( source );
            _radar = source.ReadGuid( );
        }

    }
    public class RadarBlankSector1TimeseriesObject : BooleanTimeseriesObject
    {
        Guid _radar;
        public RadarBlankSector1TimeseriesObject( )
        {
        }

        public RadarBlankSector1TimeseriesObject( ObjectState objectState, Guid id, long rowVersion, Guid? catalog, string name, TimeSpan maxRetention, Guid radar )
            : base( objectState, id, rowVersion, catalog, name, maxRetention )
        {
            _radar = radar;
        }

        public override Kind GetObjectType()
        {
            return Kind.RadarBlankSector1Timeseries;
        }

        public override BaseData<Kind> Create()
        {
            return new RadarBlankSector1TimeseriesObject( );
        }

        public override void AssignTo( BaseData<Kind> target )
        {
            base.AssignTo( target );
            var destination = ( RadarBlankSector1TimeseriesObject )target;
            destination._radar = _radar;
        }

        public override bool Equals(BaseData<Kind>? other)
        {
            if (base.Equals(other))
            {
                var obj = ( RadarBlankSector1TimeseriesObject )other;
                if( obj._radar != _radar )
                {
                    return false;
                }
                return true;
            }
            return false;
        }

        public override bool IsOfType(Kind objectType)
        {
            if( objectType == Kind.RadarBlankSector1Timeseries )
            {
                return true;
            }
            return base.IsOfType( objectType );
        }

        public Guid Radar
        {
            get => _radar;
            set
            {
                if( _radar != value )
                {
                    _radar = value;
                    OnPropertyChanged( );
                }
            }
        }

        public override void WriteTo( [ DisallowNull ] BinaryWriter destination )
        {
            base.WriteTo( destination );
            destination.Write( _radar );
        }

        public override void ReadFrom([DisallowNull] BinaryReader source)
        {
            base.ReadFrom( source );
            _radar = source.ReadGuid( );
        }

    }
    public class RadarBlankSector2TimeseriesObject : BooleanTimeseriesObject
    {
        Guid _radar;
        public RadarBlankSector2TimeseriesObject( )
        {
        }

        public RadarBlankSector2TimeseriesObject( ObjectState objectState, Guid id, long rowVersion, Guid? catalog, string name, TimeSpan maxRetention, Guid radar )
            : base( objectState, id, rowVersion, catalog, name, maxRetention )
        {
            _radar = radar;
        }

        public override Kind GetObjectType()
        {
            return Kind.RadarBlankSector2Timeseries;
        }

        public override BaseData<Kind> Create()
        {
            return new RadarBlankSector2TimeseriesObject( );
        }

        public override void AssignTo( BaseData<Kind> target )
        {
            base.AssignTo( target );
            var destination = ( RadarBlankSector2TimeseriesObject )target;
            destination._radar = _radar;
        }

        public override bool Equals(BaseData<Kind>? other)
        {
            if (base.Equals(other))
            {
                var obj = ( RadarBlankSector2TimeseriesObject )other;
                if( obj._radar != _radar )
                {
                    return false;
                }
                return true;
            }
            return false;
        }

        public override bool IsOfType(Kind objectType)
        {
            if( objectType == Kind.RadarBlankSector2Timeseries )
            {
                return true;
            }
            return base.IsOfType( objectType );
        }

        public Guid Radar
        {
            get => _radar;
            set
            {
                if( _radar != value )
                {
                    _radar = value;
                    OnPropertyChanged( );
                }
            }
        }

        public override void WriteTo( [ DisallowNull ] BinaryWriter destination )
        {
            base.WriteTo( destination );
            destination.Write( _radar );
        }

        public override void ReadFrom([DisallowNull] BinaryReader source)
        {
            base.ReadFrom( source );
            _radar = source.ReadGuid( );
        }

    }
    public class RadarEnableAutomaticFrequencyControlTimeseriesObject : BooleanTimeseriesObject
    {
        Guid _radar;
        public RadarEnableAutomaticFrequencyControlTimeseriesObject( )
        {
        }

        public RadarEnableAutomaticFrequencyControlTimeseriesObject( ObjectState objectState, Guid id, long rowVersion, Guid? catalog, string name, TimeSpan maxRetention, Guid radar )
            : base( objectState, id, rowVersion, catalog, name, maxRetention )
        {
            _radar = radar;
        }

        public override Kind GetObjectType()
        {
            return Kind.RadarEnableAutomaticFrequencyControlTimeseries;
        }

        public override BaseData<Kind> Create()
        {
            return new RadarEnableAutomaticFrequencyControlTimeseriesObject( );
        }

        public override void AssignTo( BaseData<Kind> target )
        {
            base.AssignTo( target );
            var destination = ( RadarEnableAutomaticFrequencyControlTimeseriesObject )target;
            destination._radar = _radar;
        }

        public override bool Equals(BaseData<Kind>? other)
        {
            if (base.Equals(other))
            {
                var obj = ( RadarEnableAutomaticFrequencyControlTimeseriesObject )other;
                if( obj._radar != _radar )
                {
                    return false;
                }
                return true;
            }
            return false;
        }

        public override bool IsOfType(Kind objectType)
        {
            if( objectType == Kind.RadarEnableAutomaticFrequencyControlTimeseries )
            {
                return true;
            }
            return base.IsOfType( objectType );
        }

        public Guid Radar
        {
            get => _radar;
            set
            {
                if( _radar != value )
                {
                    _radar = value;
                    OnPropertyChanged( );
                }
            }
        }

        public override void WriteTo( [ DisallowNull ] BinaryWriter destination )
        {
            base.WriteTo( destination );
            destination.Write( _radar );
        }

        public override void ReadFrom([DisallowNull] BinaryReader source)
        {
            base.ReadFrom( source );
            _radar = source.ReadGuid( );
        }

    }
    public class RadarEnableFastTimeConstantTimeseriesObject : BooleanTimeseriesObject
    {
        Guid _radar;
        public RadarEnableFastTimeConstantTimeseriesObject( )
        {
        }

        public RadarEnableFastTimeConstantTimeseriesObject( ObjectState objectState, Guid id, long rowVersion, Guid? catalog, string name, TimeSpan maxRetention, Guid radar )
            : base( objectState, id, rowVersion, catalog, name, maxRetention )
        {
            _radar = radar;
        }

        public override Kind GetObjectType()
        {
            return Kind.RadarEnableFastTimeConstantTimeseries;
        }

        public override BaseData<Kind> Create()
        {
            return new RadarEnableFastTimeConstantTimeseriesObject( );
        }

        public override void AssignTo( BaseData<Kind> target )
        {
            base.AssignTo( target );
            var destination = ( RadarEnableFastTimeConstantTimeseriesObject )target;
            destination._radar = _radar;
        }

        public override bool Equals(BaseData<Kind>? other)
        {
            if (base.Equals(other))
            {
                var obj = ( RadarEnableFastTimeConstantTimeseriesObject )other;
                if( obj._radar != _radar )
                {
                    return false;
                }
                return true;
            }
            return false;
        }

        public override bool IsOfType(Kind objectType)
        {
            if( objectType == Kind.RadarEnableFastTimeConstantTimeseries )
            {
                return true;
            }
            return base.IsOfType( objectType );
        }

        public Guid Radar
        {
            get => _radar;
            set
            {
                if( _radar != value )
                {
                    _radar = value;
                    OnPropertyChanged( );
                }
            }
        }

        public override void WriteTo( [ DisallowNull ] BinaryWriter destination )
        {
            base.WriteTo( destination );
            destination.Write( _radar );
        }

        public override void ReadFrom([DisallowNull] BinaryReader source)
        {
            base.ReadFrom( source );
            _radar = source.ReadGuid( );
        }

    }
    public class RadarEnableSensitivityTimeControlTimeseriesObject : BooleanTimeseriesObject
    {
        Guid _radar;
        public RadarEnableSensitivityTimeControlTimeseriesObject( )
        {
        }

        public RadarEnableSensitivityTimeControlTimeseriesObject( ObjectState objectState, Guid id, long rowVersion, Guid? catalog, string name, TimeSpan maxRetention, Guid radar )
            : base( objectState, id, rowVersion, catalog, name, maxRetention )
        {
            _radar = radar;
        }

        public override Kind GetObjectType()
        {
            return Kind.RadarEnableSensitivityTimeControlTimeseries;
        }

        public override BaseData<Kind> Create()
        {
            return new RadarEnableSensitivityTimeControlTimeseriesObject( );
        }

        public override void AssignTo( BaseData<Kind> target )
        {
            base.AssignTo( target );
            var destination = ( RadarEnableSensitivityTimeControlTimeseriesObject )target;
            destination._radar = _radar;
        }

        public override bool Equals(BaseData<Kind>? other)
        {
            if (base.Equals(other))
            {
                var obj = ( RadarEnableSensitivityTimeControlTimeseriesObject )other;
                if( obj._radar != _radar )
                {
                    return false;
                }
                return true;
            }
            return false;
        }

        public override bool IsOfType(Kind objectType)
        {
            if( objectType == Kind.RadarEnableSensitivityTimeControlTimeseries )
            {
                return true;
            }
            return base.IsOfType( objectType );
        }

        public Guid Radar
        {
            get => _radar;
            set
            {
                if( _radar != value )
                {
                    _radar = value;
                    OnPropertyChanged( );
                }
            }
        }

        public override void WriteTo( [ DisallowNull ] BinaryWriter destination )
        {
            base.WriteTo( destination );
            destination.Write( _radar );
        }

        public override void ReadFrom([DisallowNull] BinaryReader source)
        {
            base.ReadFrom( source );
            _radar = source.ReadGuid( );
        }

    }
    public class RadarPowerOnTimeseriesObject : BooleanTimeseriesObject
    {
        Guid _radar;
        public RadarPowerOnTimeseriesObject( )
        {
        }

        public RadarPowerOnTimeseriesObject( ObjectState objectState, Guid id, long rowVersion, Guid? catalog, string name, TimeSpan maxRetention, Guid radar )
            : base( objectState, id, rowVersion, catalog, name, maxRetention )
        {
            _radar = radar;
        }

        public override Kind GetObjectType()
        {
            return Kind.RadarPowerOnTimeseries;
        }

        public override BaseData<Kind> Create()
        {
            return new RadarPowerOnTimeseriesObject( );
        }

        public override void AssignTo( BaseData<Kind> target )
        {
            base.AssignTo( target );
            var destination = ( RadarPowerOnTimeseriesObject )target;
            destination._radar = _radar;
        }

        public override bool Equals(BaseData<Kind>? other)
        {
            if (base.Equals(other))
            {
                var obj = ( RadarPowerOnTimeseriesObject )other;
                if( obj._radar != _radar )
                {
                    return false;
                }
                return true;
            }
            return false;
        }

        public override bool IsOfType(Kind objectType)
        {
            if( objectType == Kind.RadarPowerOnTimeseries )
            {
                return true;
            }
            return base.IsOfType( objectType );
        }

        public Guid Radar
        {
            get => _radar;
            set
            {
                if( _radar != value )
                {
                    _radar = value;
                    OnPropertyChanged( );
                }
            }
        }

        public override void WriteTo( [ DisallowNull ] BinaryWriter destination )
        {
            base.WriteTo( destination );
            destination.Write( _radar );
        }

        public override void ReadFrom([DisallowNull] BinaryReader source)
        {
            base.ReadFrom( source );
            _radar = source.ReadGuid( );
        }

    }
    public class RadarSaveSettingsTimeseriesObject : BooleanTimeseriesObject
    {
        Guid _radar;
        public RadarSaveSettingsTimeseriesObject( )
        {
        }

        public RadarSaveSettingsTimeseriesObject( ObjectState objectState, Guid id, long rowVersion, Guid? catalog, string name, TimeSpan maxRetention, Guid radar )
            : base( objectState, id, rowVersion, catalog, name, maxRetention )
        {
            _radar = radar;
        }

        public override Kind GetObjectType()
        {
            return Kind.RadarSaveSettingsTimeseries;
        }

        public override BaseData<Kind> Create()
        {
            return new RadarSaveSettingsTimeseriesObject( );
        }

        public override void AssignTo( BaseData<Kind> target )
        {
            base.AssignTo( target );
            var destination = ( RadarSaveSettingsTimeseriesObject )target;
            destination._radar = _radar;
        }

        public override bool Equals(BaseData<Kind>? other)
        {
            if (base.Equals(other))
            {
                var obj = ( RadarSaveSettingsTimeseriesObject )other;
                if( obj._radar != _radar )
                {
                    return false;
                }
                return true;
            }
            return false;
        }

        public override bool IsOfType(Kind objectType)
        {
            if( objectType == Kind.RadarSaveSettingsTimeseries )
            {
                return true;
            }
            return base.IsOfType( objectType );
        }

        public Guid Radar
        {
            get => _radar;
            set
            {
                if( _radar != value )
                {
                    _radar = value;
                    OnPropertyChanged( );
                }
            }
        }

        public override void WriteTo( [ DisallowNull ] BinaryWriter destination )
        {
            base.WriteTo( destination );
            destination.Write( _radar );
        }

        public override void ReadFrom([DisallowNull] BinaryReader source)
        {
            base.ReadFrom( source );
            _radar = source.ReadGuid( );
        }

    }
    public class RadarTrackingTimeseriesObject : BooleanTimeseriesObject
    {
        Guid _radar;
        public RadarTrackingTimeseriesObject( )
        {
        }

        public RadarTrackingTimeseriesObject( ObjectState objectState, Guid id, long rowVersion, Guid? catalog, string name, TimeSpan maxRetention, Guid radar )
            : base( objectState, id, rowVersion, catalog, name, maxRetention )
        {
            _radar = radar;
        }

        public override Kind GetObjectType()
        {
            return Kind.RadarTrackingTimeseries;
        }

        public override BaseData<Kind> Create()
        {
            return new RadarTrackingTimeseriesObject( );
        }

        public override void AssignTo( BaseData<Kind> target )
        {
            base.AssignTo( target );
            var destination = ( RadarTrackingTimeseriesObject )target;
            destination._radar = _radar;
        }

        public override bool Equals(BaseData<Kind>? other)
        {
            if (base.Equals(other))
            {
                var obj = ( RadarTrackingTimeseriesObject )other;
                if( obj._radar != _radar )
                {
                    return false;
                }
                return true;
            }
            return false;
        }

        public override bool IsOfType(Kind objectType)
        {
            if( objectType == Kind.RadarTrackingTimeseries )
            {
                return true;
            }
            return base.IsOfType( objectType );
        }

        public Guid Radar
        {
            get => _radar;
            set
            {
                if( _radar != value )
                {
                    _radar = value;
                    OnPropertyChanged( );
                }
            }
        }

        public override void WriteTo( [ DisallowNull ] BinaryWriter destination )
        {
            base.WriteTo( destination );
            destination.Write( _radar );
        }

        public override void ReadFrom([DisallowNull] BinaryReader source)
        {
            base.ReadFrom( source );
            _radar = source.ReadGuid( );
        }

    }
    public class MediaProxySessionEnabledTimeseriesObject : BooleanTimeseriesObject
    {
        Guid _proxySession;
        public MediaProxySessionEnabledTimeseriesObject( )
        {
        }

        public MediaProxySessionEnabledTimeseriesObject( ObjectState objectState, Guid id, long rowVersion, Guid? catalog, string name, TimeSpan maxRetention, Guid proxySession )
            : base( objectState, id, rowVersion, catalog, name, maxRetention )
        {
            _proxySession = proxySession;
        }

        public override Kind GetObjectType()
        {
            return Kind.MediaProxySessionEnabledTimeseries;
        }

        public override BaseData<Kind> Create()
        {
            return new MediaProxySessionEnabledTimeseriesObject( );
        }

        public override void AssignTo( BaseData<Kind> target )
        {
            base.AssignTo( target );
            var destination = ( MediaProxySessionEnabledTimeseriesObject )target;
            destination._proxySession = _proxySession;
        }

        public override bool Equals(BaseData<Kind>? other)
        {
            if (base.Equals(other))
            {
                var obj = ( MediaProxySessionEnabledTimeseriesObject )other;
                if( obj._proxySession != _proxySession )
                {
                    return false;
                }
                return true;
            }
            return false;
        }

        public override bool IsOfType(Kind objectType)
        {
            if( objectType == Kind.MediaProxySessionEnabledTimeseries )
            {
                return true;
            }
            return base.IsOfType( objectType );
        }

        public Guid ProxySession
        {
            get => _proxySession;
            set
            {
                if( _proxySession != value )
                {
                    _proxySession = value;
                    OnPropertyChanged( );
                }
            }
        }

        public override void WriteTo( [ DisallowNull ] BinaryWriter destination )
        {
            base.WriteTo( destination );
            destination.Write( _proxySession );
        }

        public override void ReadFrom([DisallowNull] BinaryReader source)
        {
            base.ReadFrom( source );
            _proxySession = source.ReadGuid( );
        }

    }
    public class MediaServiceEnabledTimeseriesObject : BooleanTimeseriesObject
    {
        Guid _service;
        public MediaServiceEnabledTimeseriesObject( )
        {
        }

        public MediaServiceEnabledTimeseriesObject( ObjectState objectState, Guid id, long rowVersion, Guid? catalog, string name, TimeSpan maxRetention, Guid service )
            : base( objectState, id, rowVersion, catalog, name, maxRetention )
        {
            _service = service;
        }

        public override Kind GetObjectType()
        {
            return Kind.MediaServiceEnabledTimeseries;
        }

        public override BaseData<Kind> Create()
        {
            return new MediaServiceEnabledTimeseriesObject( );
        }

        public override void AssignTo( BaseData<Kind> target )
        {
            base.AssignTo( target );
            var destination = ( MediaServiceEnabledTimeseriesObject )target;
            destination._service = _service;
        }

        public override bool Equals(BaseData<Kind>? other)
        {
            if (base.Equals(other))
            {
                var obj = ( MediaServiceEnabledTimeseriesObject )other;
                if( obj._service != _service )
                {
                    return false;
                }
                return true;
            }
            return false;
        }

        public override bool IsOfType(Kind objectType)
        {
            if( objectType == Kind.MediaServiceEnabledTimeseries )
            {
                return true;
            }
            return base.IsOfType( objectType );
        }

        public Guid Service
        {
            get => _service;
            set
            {
                if( _service != value )
                {
                    _service = value;
                    OnPropertyChanged( );
                }
            }
        }

        public override void WriteTo( [ DisallowNull ] BinaryWriter destination )
        {
            base.WriteTo( destination );
            destination.Write( _service );
        }

        public override void ReadFrom([DisallowNull] BinaryReader source)
        {
            base.ReadFrom( source );
            _service = source.ReadGuid( );
        }

    }
    public class ByteTimeseriesObject : TimeseriesObject
    {
        public ByteTimeseriesObject( )
        {
        }

        public ByteTimeseriesObject( ObjectState objectState, Guid id, long rowVersion, Guid? catalog, string name, TimeSpan maxRetention )
            : base( objectState, id, rowVersion, catalog, name, maxRetention )
        {
        }

        public override Kind GetObjectType()
        {
            return Kind.ByteTimeseries;
        }

        public override BaseData<Kind> Create()
        {
            return new ByteTimeseriesObject( );
        }

        public override bool IsOfType(Kind objectType)
        {
            if( objectType == Kind.ByteTimeseries )
            {
                return true;
            }
            return base.IsOfType( objectType );
        }

    }
    public class DateTimeTimeseriesObject : TimeseriesObject
    {
        public DateTimeTimeseriesObject( )
        {
        }

        public DateTimeTimeseriesObject( ObjectState objectState, Guid id, long rowVersion, Guid? catalog, string name, TimeSpan maxRetention )
            : base( objectState, id, rowVersion, catalog, name, maxRetention )
        {
        }

        public override Kind GetObjectType()
        {
            return Kind.DateTimeTimeseries;
        }

        public override BaseData<Kind> Create()
        {
            return new DateTimeTimeseriesObject( );
        }

        public override bool IsOfType(Kind objectType)
        {
            if( objectType == Kind.DateTimeTimeseries )
            {
                return true;
            }
            return base.IsOfType( objectType );
        }

    }
    public class DoubleTimeseriesObject : TimeseriesObject
    {
        public DoubleTimeseriesObject( )
        {
        }

        public DoubleTimeseriesObject( ObjectState objectState, Guid id, long rowVersion, Guid? catalog, string name, TimeSpan maxRetention )
            : base( objectState, id, rowVersion, catalog, name, maxRetention )
        {
        }

        public override Kind GetObjectType()
        {
            return Kind.DoubleTimeseries;
        }

        public override BaseData<Kind> Create()
        {
            return new DoubleTimeseriesObject( );
        }

        public override bool IsOfType(Kind objectType)
        {
            if( objectType == Kind.DoubleTimeseries )
            {
                return true;
            }
            return base.IsOfType( objectType );
        }

    }
    public class GNSSAltitudeTimeseriesObject : DoubleTimeseriesObject
    {
        Guid _gNSSDevice;
        public GNSSAltitudeTimeseriesObject( )
        {
        }

        public GNSSAltitudeTimeseriesObject( ObjectState objectState, Guid id, long rowVersion, Guid? catalog, string name, TimeSpan maxRetention, Guid gNSSDevice )
            : base( objectState, id, rowVersion, catalog, name, maxRetention )
        {
            _gNSSDevice = gNSSDevice;
        }

        public override Kind GetObjectType()
        {
            return Kind.GNSSAltitudeTimeseries;
        }

        public override BaseData<Kind> Create()
        {
            return new GNSSAltitudeTimeseriesObject( );
        }

        public override void AssignTo( BaseData<Kind> target )
        {
            base.AssignTo( target );
            var destination = ( GNSSAltitudeTimeseriesObject )target;
            destination._gNSSDevice = _gNSSDevice;
        }

        public override bool Equals(BaseData<Kind>? other)
        {
            if (base.Equals(other))
            {
                var obj = ( GNSSAltitudeTimeseriesObject )other;
                if( obj._gNSSDevice != _gNSSDevice )
                {
                    return false;
                }
                return true;
            }
            return false;
        }

        public override bool IsOfType(Kind objectType)
        {
            if( objectType == Kind.GNSSAltitudeTimeseries )
            {
                return true;
            }
            return base.IsOfType( objectType );
        }

        public Guid GNSSDevice
        {
            get => _gNSSDevice;
            set
            {
                if( _gNSSDevice != value )
                {
                    _gNSSDevice = value;
                    OnPropertyChanged( );
                }
            }
        }

        public override void WriteTo( [ DisallowNull ] BinaryWriter destination )
        {
            base.WriteTo( destination );
            destination.Write( _gNSSDevice );
        }

        public override void ReadFrom([DisallowNull] BinaryReader source)
        {
            base.ReadFrom( source );
            _gNSSDevice = source.ReadGuid( );
        }

    }
    public class GNSSLatitudeTimeseriesObject : DoubleTimeseriesObject
    {
        Guid _gNSSDevice;
        public GNSSLatitudeTimeseriesObject( )
        {
        }

        public GNSSLatitudeTimeseriesObject( ObjectState objectState, Guid id, long rowVersion, Guid? catalog, string name, TimeSpan maxRetention, Guid gNSSDevice )
            : base( objectState, id, rowVersion, catalog, name, maxRetention )
        {
            _gNSSDevice = gNSSDevice;
        }

        public override Kind GetObjectType()
        {
            return Kind.GNSSLatitudeTimeseries;
        }

        public override BaseData<Kind> Create()
        {
            return new GNSSLatitudeTimeseriesObject( );
        }

        public override void AssignTo( BaseData<Kind> target )
        {
            base.AssignTo( target );
            var destination = ( GNSSLatitudeTimeseriesObject )target;
            destination._gNSSDevice = _gNSSDevice;
        }

        public override bool Equals(BaseData<Kind>? other)
        {
            if (base.Equals(other))
            {
                var obj = ( GNSSLatitudeTimeseriesObject )other;
                if( obj._gNSSDevice != _gNSSDevice )
                {
                    return false;
                }
                return true;
            }
            return false;
        }

        public override bool IsOfType(Kind objectType)
        {
            if( objectType == Kind.GNSSLatitudeTimeseries )
            {
                return true;
            }
            return base.IsOfType( objectType );
        }

        public Guid GNSSDevice
        {
            get => _gNSSDevice;
            set
            {
                if( _gNSSDevice != value )
                {
                    _gNSSDevice = value;
                    OnPropertyChanged( );
                }
            }
        }

        public override void WriteTo( [ DisallowNull ] BinaryWriter destination )
        {
            base.WriteTo( destination );
            destination.Write( _gNSSDevice );
        }

        public override void ReadFrom([DisallowNull] BinaryReader source)
        {
            base.ReadFrom( source );
            _gNSSDevice = source.ReadGuid( );
        }

    }
    public class GNSSLongitudeTimeseriesObject : DoubleTimeseriesObject
    {
        Guid _gNSSDevice;
        public GNSSLongitudeTimeseriesObject( )
        {
        }

        public GNSSLongitudeTimeseriesObject( ObjectState objectState, Guid id, long rowVersion, Guid? catalog, string name, TimeSpan maxRetention, Guid gNSSDevice )
            : base( objectState, id, rowVersion, catalog, name, maxRetention )
        {
            _gNSSDevice = gNSSDevice;
        }

        public override Kind GetObjectType()
        {
            return Kind.GNSSLongitudeTimeseries;
        }

        public override BaseData<Kind> Create()
        {
            return new GNSSLongitudeTimeseriesObject( );
        }

        public override void AssignTo( BaseData<Kind> target )
        {
            base.AssignTo( target );
            var destination = ( GNSSLongitudeTimeseriesObject )target;
            destination._gNSSDevice = _gNSSDevice;
        }

        public override bool Equals(BaseData<Kind>? other)
        {
            if (base.Equals(other))
            {
                var obj = ( GNSSLongitudeTimeseriesObject )other;
                if( obj._gNSSDevice != _gNSSDevice )
                {
                    return false;
                }
                return true;
            }
            return false;
        }

        public override bool IsOfType(Kind objectType)
        {
            if( objectType == Kind.GNSSLongitudeTimeseries )
            {
                return true;
            }
            return base.IsOfType( objectType );
        }

        public Guid GNSSDevice
        {
            get => _gNSSDevice;
            set
            {
                if( _gNSSDevice != value )
                {
                    _gNSSDevice = value;
                    OnPropertyChanged( );
                }
            }
        }

        public override void WriteTo( [ DisallowNull ] BinaryWriter destination )
        {
            base.WriteTo( destination );
            destination.Write( _gNSSDevice );
        }

        public override void ReadFrom([DisallowNull] BinaryReader source)
        {
            base.ReadFrom( source );
            _gNSSDevice = source.ReadGuid( );
        }

    }
    public class GyroCourseTimeseriesObject : DoubleTimeseriesObject
    {
        Guid _gyroDevice;
        public GyroCourseTimeseriesObject( )
        {
        }

        public GyroCourseTimeseriesObject( ObjectState objectState, Guid id, long rowVersion, Guid? catalog, string name, TimeSpan maxRetention, Guid gyroDevice )
            : base( objectState, id, rowVersion, catalog, name, maxRetention )
        {
            _gyroDevice = gyroDevice;
        }

        public override Kind GetObjectType()
        {
            return Kind.GyroCourseTimeseries;
        }

        public override BaseData<Kind> Create()
        {
            return new GyroCourseTimeseriesObject( );
        }

        public override void AssignTo( BaseData<Kind> target )
        {
            base.AssignTo( target );
            var destination = ( GyroCourseTimeseriesObject )target;
            destination._gyroDevice = _gyroDevice;
        }

        public override bool Equals(BaseData<Kind>? other)
        {
            if (base.Equals(other))
            {
                var obj = ( GyroCourseTimeseriesObject )other;
                if( obj._gyroDevice != _gyroDevice )
                {
                    return false;
                }
                return true;
            }
            return false;
        }

        public override bool IsOfType(Kind objectType)
        {
            if( objectType == Kind.GyroCourseTimeseries )
            {
                return true;
            }
            return base.IsOfType( objectType );
        }

        public Guid GyroDevice
        {
            get => _gyroDevice;
            set
            {
                if( _gyroDevice != value )
                {
                    _gyroDevice = value;
                    OnPropertyChanged( );
                }
            }
        }

        public override void WriteTo( [ DisallowNull ] BinaryWriter destination )
        {
            base.WriteTo( destination );
            destination.Write( _gyroDevice );
        }

        public override void ReadFrom([DisallowNull] BinaryReader source)
        {
            base.ReadFrom( source );
            _gyroDevice = source.ReadGuid( );
        }

    }
    public class GyroHeadingMagneticNorthTimeseriesObject : DoubleTimeseriesObject
    {
        Guid _gyroDevice;
        public GyroHeadingMagneticNorthTimeseriesObject( )
        {
        }

        public GyroHeadingMagneticNorthTimeseriesObject( ObjectState objectState, Guid id, long rowVersion, Guid? catalog, string name, TimeSpan maxRetention, Guid gyroDevice )
            : base( objectState, id, rowVersion, catalog, name, maxRetention )
        {
            _gyroDevice = gyroDevice;
        }

        public override Kind GetObjectType()
        {
            return Kind.GyroHeadingMagneticNorthTimeseries;
        }

        public override BaseData<Kind> Create()
        {
            return new GyroHeadingMagneticNorthTimeseriesObject( );
        }

        public override void AssignTo( BaseData<Kind> target )
        {
            base.AssignTo( target );
            var destination = ( GyroHeadingMagneticNorthTimeseriesObject )target;
            destination._gyroDevice = _gyroDevice;
        }

        public override bool Equals(BaseData<Kind>? other)
        {
            if (base.Equals(other))
            {
                var obj = ( GyroHeadingMagneticNorthTimeseriesObject )other;
                if( obj._gyroDevice != _gyroDevice )
                {
                    return false;
                }
                return true;
            }
            return false;
        }

        public override bool IsOfType(Kind objectType)
        {
            if( objectType == Kind.GyroHeadingMagneticNorthTimeseries )
            {
                return true;
            }
            return base.IsOfType( objectType );
        }

        public Guid GyroDevice
        {
            get => _gyroDevice;
            set
            {
                if( _gyroDevice != value )
                {
                    _gyroDevice = value;
                    OnPropertyChanged( );
                }
            }
        }

        public override void WriteTo( [ DisallowNull ] BinaryWriter destination )
        {
            base.WriteTo( destination );
            destination.Write( _gyroDevice );
        }

        public override void ReadFrom([DisallowNull] BinaryReader source)
        {
            base.ReadFrom( source );
            _gyroDevice = source.ReadGuid( );
        }

    }
    public class GyroHeadingTrueNorthTimeseriesObject : DoubleTimeseriesObject
    {
        Guid _gyroDevice;
        public GyroHeadingTrueNorthTimeseriesObject( )
        {
        }

        public GyroHeadingTrueNorthTimeseriesObject( ObjectState objectState, Guid id, long rowVersion, Guid? catalog, string name, TimeSpan maxRetention, Guid gyroDevice )
            : base( objectState, id, rowVersion, catalog, name, maxRetention )
        {
            _gyroDevice = gyroDevice;
        }

        public override Kind GetObjectType()
        {
            return Kind.GyroHeadingTrueNorthTimeseries;
        }

        public override BaseData<Kind> Create()
        {
            return new GyroHeadingTrueNorthTimeseriesObject( );
        }

        public override void AssignTo( BaseData<Kind> target )
        {
            base.AssignTo( target );
            var destination = ( GyroHeadingTrueNorthTimeseriesObject )target;
            destination._gyroDevice = _gyroDevice;
        }

        public override bool Equals(BaseData<Kind>? other)
        {
            if (base.Equals(other))
            {
                var obj = ( GyroHeadingTrueNorthTimeseriesObject )other;
                if( obj._gyroDevice != _gyroDevice )
                {
                    return false;
                }
                return true;
            }
            return false;
        }

        public override bool IsOfType(Kind objectType)
        {
            if( objectType == Kind.GyroHeadingTrueNorthTimeseries )
            {
                return true;
            }
            return base.IsOfType( objectType );
        }

        public Guid GyroDevice
        {
            get => _gyroDevice;
            set
            {
                if( _gyroDevice != value )
                {
                    _gyroDevice = value;
                    OnPropertyChanged( );
                }
            }
        }

        public override void WriteTo( [ DisallowNull ] BinaryWriter destination )
        {
            base.WriteTo( destination );
            destination.Write( _gyroDevice );
        }

        public override void ReadFrom([DisallowNull] BinaryReader source)
        {
            base.ReadFrom( source );
            _gyroDevice = source.ReadGuid( );
        }

    }
    public class GyroPitchTimeseriesObject : DoubleTimeseriesObject
    {
        Guid _gyroDevice;
        public GyroPitchTimeseriesObject( )
        {
        }

        public GyroPitchTimeseriesObject( ObjectState objectState, Guid id, long rowVersion, Guid? catalog, string name, TimeSpan maxRetention, Guid gyroDevice )
            : base( objectState, id, rowVersion, catalog, name, maxRetention )
        {
            _gyroDevice = gyroDevice;
        }

        public override Kind GetObjectType()
        {
            return Kind.GyroPitchTimeseries;
        }

        public override BaseData<Kind> Create()
        {
            return new GyroPitchTimeseriesObject( );
        }

        public override void AssignTo( BaseData<Kind> target )
        {
            base.AssignTo( target );
            var destination = ( GyroPitchTimeseriesObject )target;
            destination._gyroDevice = _gyroDevice;
        }

        public override bool Equals(BaseData<Kind>? other)
        {
            if (base.Equals(other))
            {
                var obj = ( GyroPitchTimeseriesObject )other;
                if( obj._gyroDevice != _gyroDevice )
                {
                    return false;
                }
                return true;
            }
            return false;
        }

        public override bool IsOfType(Kind objectType)
        {
            if( objectType == Kind.GyroPitchTimeseries )
            {
                return true;
            }
            return base.IsOfType( objectType );
        }

        public Guid GyroDevice
        {
            get => _gyroDevice;
            set
            {
                if( _gyroDevice != value )
                {
                    _gyroDevice = value;
                    OnPropertyChanged( );
                }
            }
        }

        public override void WriteTo( [ DisallowNull ] BinaryWriter destination )
        {
            base.WriteTo( destination );
            destination.Write( _gyroDevice );
        }

        public override void ReadFrom([DisallowNull] BinaryReader source)
        {
            base.ReadFrom( source );
            _gyroDevice = source.ReadGuid( );
        }

    }
    public class GyroRateOfTurnTimeseriesObject : DoubleTimeseriesObject
    {
        Guid _gyroDevice;
        public GyroRateOfTurnTimeseriesObject( )
        {
        }

        public GyroRateOfTurnTimeseriesObject( ObjectState objectState, Guid id, long rowVersion, Guid? catalog, string name, TimeSpan maxRetention, Guid gyroDevice )
            : base( objectState, id, rowVersion, catalog, name, maxRetention )
        {
            _gyroDevice = gyroDevice;
        }

        public override Kind GetObjectType()
        {
            return Kind.GyroRateOfTurnTimeseries;
        }

        public override BaseData<Kind> Create()
        {
            return new GyroRateOfTurnTimeseriesObject( );
        }

        public override void AssignTo( BaseData<Kind> target )
        {
            base.AssignTo( target );
            var destination = ( GyroRateOfTurnTimeseriesObject )target;
            destination._gyroDevice = _gyroDevice;
        }

        public override bool Equals(BaseData<Kind>? other)
        {
            if (base.Equals(other))
            {
                var obj = ( GyroRateOfTurnTimeseriesObject )other;
                if( obj._gyroDevice != _gyroDevice )
                {
                    return false;
                }
                return true;
            }
            return false;
        }

        public override bool IsOfType(Kind objectType)
        {
            if( objectType == Kind.GyroRateOfTurnTimeseries )
            {
                return true;
            }
            return base.IsOfType( objectType );
        }

        public Guid GyroDevice
        {
            get => _gyroDevice;
            set
            {
                if( _gyroDevice != value )
                {
                    _gyroDevice = value;
                    OnPropertyChanged( );
                }
            }
        }

        public override void WriteTo( [ DisallowNull ] BinaryWriter destination )
        {
            base.WriteTo( destination );
            destination.Write( _gyroDevice );
        }

        public override void ReadFrom([DisallowNull] BinaryReader source)
        {
            base.ReadFrom( source );
            _gyroDevice = source.ReadGuid( );
        }

    }
    public class GyroRollTimeseriesObject : DoubleTimeseriesObject
    {
        Guid _gyroDevice;
        public GyroRollTimeseriesObject( )
        {
        }

        public GyroRollTimeseriesObject( ObjectState objectState, Guid id, long rowVersion, Guid? catalog, string name, TimeSpan maxRetention, Guid gyroDevice )
            : base( objectState, id, rowVersion, catalog, name, maxRetention )
        {
            _gyroDevice = gyroDevice;
        }

        public override Kind GetObjectType()
        {
            return Kind.GyroRollTimeseries;
        }

        public override BaseData<Kind> Create()
        {
            return new GyroRollTimeseriesObject( );
        }

        public override void AssignTo( BaseData<Kind> target )
        {
            base.AssignTo( target );
            var destination = ( GyroRollTimeseriesObject )target;
            destination._gyroDevice = _gyroDevice;
        }

        public override bool Equals(BaseData<Kind>? other)
        {
            if (base.Equals(other))
            {
                var obj = ( GyroRollTimeseriesObject )other;
                if( obj._gyroDevice != _gyroDevice )
                {
                    return false;
                }
                return true;
            }
            return false;
        }

        public override bool IsOfType(Kind objectType)
        {
            if( objectType == Kind.GyroRollTimeseries )
            {
                return true;
            }
            return base.IsOfType( objectType );
        }

        public Guid GyroDevice
        {
            get => _gyroDevice;
            set
            {
                if( _gyroDevice != value )
                {
                    _gyroDevice = value;
                    OnPropertyChanged( );
                }
            }
        }

        public override void WriteTo( [ DisallowNull ] BinaryWriter destination )
        {
            base.WriteTo( destination );
            destination.Write( _gyroDevice );
        }

        public override void ReadFrom([DisallowNull] BinaryReader source)
        {
            base.ReadFrom( source );
            _gyroDevice = source.ReadGuid( );
        }

    }
    public class GyroSpeedTimeseriesObject : DoubleTimeseriesObject
    {
        Guid _gyroDevice;
        public GyroSpeedTimeseriesObject( )
        {
        }

        public GyroSpeedTimeseriesObject( ObjectState objectState, Guid id, long rowVersion, Guid? catalog, string name, TimeSpan maxRetention, Guid gyroDevice )
            : base( objectState, id, rowVersion, catalog, name, maxRetention )
        {
            _gyroDevice = gyroDevice;
        }

        public override Kind GetObjectType()
        {
            return Kind.GyroSpeedTimeseries;
        }

        public override BaseData<Kind> Create()
        {
            return new GyroSpeedTimeseriesObject( );
        }

        public override void AssignTo( BaseData<Kind> target )
        {
            base.AssignTo( target );
            var destination = ( GyroSpeedTimeseriesObject )target;
            destination._gyroDevice = _gyroDevice;
        }

        public override bool Equals(BaseData<Kind>? other)
        {
            if (base.Equals(other))
            {
                var obj = ( GyroSpeedTimeseriesObject )other;
                if( obj._gyroDevice != _gyroDevice )
                {
                    return false;
                }
                return true;
            }
            return false;
        }

        public override bool IsOfType(Kind objectType)
        {
            if( objectType == Kind.GyroSpeedTimeseries )
            {
                return true;
            }
            return base.IsOfType( objectType );
        }

        public Guid GyroDevice
        {
            get => _gyroDevice;
            set
            {
                if( _gyroDevice != value )
                {
                    _gyroDevice = value;
                    OnPropertyChanged( );
                }
            }
        }

        public override void WriteTo( [ DisallowNull ] BinaryWriter destination )
        {
            base.WriteTo( destination );
            destination.Write( _gyroDevice );
        }

        public override void ReadFrom([DisallowNull] BinaryReader source)
        {
            base.ReadFrom( source );
            _gyroDevice = source.ReadGuid( );
        }

    }
    public class RadarLatitudeTimeseriesObject : DoubleTimeseriesObject
    {
        Guid _radar;
        public RadarLatitudeTimeseriesObject( )
        {
        }

        public RadarLatitudeTimeseriesObject( ObjectState objectState, Guid id, long rowVersion, Guid? catalog, string name, TimeSpan maxRetention, Guid radar )
            : base( objectState, id, rowVersion, catalog, name, maxRetention )
        {
            _radar = radar;
        }

        public override Kind GetObjectType()
        {
            return Kind.RadarLatitudeTimeseries;
        }

        public override BaseData<Kind> Create()
        {
            return new RadarLatitudeTimeseriesObject( );
        }

        public override void AssignTo( BaseData<Kind> target )
        {
            base.AssignTo( target );
            var destination = ( RadarLatitudeTimeseriesObject )target;
            destination._radar = _radar;
        }

        public override bool Equals(BaseData<Kind>? other)
        {
            if (base.Equals(other))
            {
                var obj = ( RadarLatitudeTimeseriesObject )other;
                if( obj._radar != _radar )
                {
                    return false;
                }
                return true;
            }
            return false;
        }

        public override bool IsOfType(Kind objectType)
        {
            if( objectType == Kind.RadarLatitudeTimeseries )
            {
                return true;
            }
            return base.IsOfType( objectType );
        }

        public Guid Radar
        {
            get => _radar;
            set
            {
                if( _radar != value )
                {
                    _radar = value;
                    OnPropertyChanged( );
                }
            }
        }

        public override void WriteTo( [ DisallowNull ] BinaryWriter destination )
        {
            base.WriteTo( destination );
            destination.Write( _radar );
        }

        public override void ReadFrom([DisallowNull] BinaryReader source)
        {
            base.ReadFrom( source );
            _radar = source.ReadGuid( );
        }

    }
    public class RadarLongitudeTimeseriesObject : DoubleTimeseriesObject
    {
        Guid _radar;
        public RadarLongitudeTimeseriesObject( )
        {
        }

        public RadarLongitudeTimeseriesObject( ObjectState objectState, Guid id, long rowVersion, Guid? catalog, string name, TimeSpan maxRetention, Guid radar )
            : base( objectState, id, rowVersion, catalog, name, maxRetention )
        {
            _radar = radar;
        }

        public override Kind GetObjectType()
        {
            return Kind.RadarLongitudeTimeseries;
        }

        public override BaseData<Kind> Create()
        {
            return new RadarLongitudeTimeseriesObject( );
        }

        public override void AssignTo( BaseData<Kind> target )
        {
            base.AssignTo( target );
            var destination = ( RadarLongitudeTimeseriesObject )target;
            destination._radar = _radar;
        }

        public override bool Equals(BaseData<Kind>? other)
        {
            if (base.Equals(other))
            {
                var obj = ( RadarLongitudeTimeseriesObject )other;
                if( obj._radar != _radar )
                {
                    return false;
                }
                return true;
            }
            return false;
        }

        public override bool IsOfType(Kind objectType)
        {
            if( objectType == Kind.RadarLongitudeTimeseries )
            {
                return true;
            }
            return base.IsOfType( objectType );
        }

        public Guid Radar
        {
            get => _radar;
            set
            {
                if( _radar != value )
                {
                    _radar = value;
                    OnPropertyChanged( );
                }
            }
        }

        public override void WriteTo( [ DisallowNull ] BinaryWriter destination )
        {
            base.WriteTo( destination );
            destination.Write( _radar );
        }

        public override void ReadFrom([DisallowNull] BinaryReader source)
        {
            base.ReadFrom( source );
            _radar = source.ReadGuid( );
        }

    }
    public class RadomeDewPointTimeseriesObject : DoubleTimeseriesObject
    {
        Guid _radome;
        public RadomeDewPointTimeseriesObject( )
        {
        }

        public RadomeDewPointTimeseriesObject( ObjectState objectState, Guid id, long rowVersion, Guid? catalog, string name, TimeSpan maxRetention, Guid radome )
            : base( objectState, id, rowVersion, catalog, name, maxRetention )
        {
            _radome = radome;
        }

        public override Kind GetObjectType()
        {
            return Kind.RadomeDewPointTimeseries;
        }

        public override BaseData<Kind> Create()
        {
            return new RadomeDewPointTimeseriesObject( );
        }

        public override void AssignTo( BaseData<Kind> target )
        {
            base.AssignTo( target );
            var destination = ( RadomeDewPointTimeseriesObject )target;
            destination._radome = _radome;
        }

        public override bool Equals(BaseData<Kind>? other)
        {
            if (base.Equals(other))
            {
                var obj = ( RadomeDewPointTimeseriesObject )other;
                if( obj._radome != _radome )
                {
                    return false;
                }
                return true;
            }
            return false;
        }

        public override bool IsOfType(Kind objectType)
        {
            if( objectType == Kind.RadomeDewPointTimeseries )
            {
                return true;
            }
            return base.IsOfType( objectType );
        }

        public Guid Radome
        {
            get => _radome;
            set
            {
                if( _radome != value )
                {
                    _radome = value;
                    OnPropertyChanged( );
                }
            }
        }

        public override void WriteTo( [ DisallowNull ] BinaryWriter destination )
        {
            base.WriteTo( destination );
            destination.Write( _radome );
        }

        public override void ReadFrom([DisallowNull] BinaryReader source)
        {
            base.ReadFrom( source );
            _radome = source.ReadGuid( );
        }

    }
    public class RadomePressureTimeseriesObject : DoubleTimeseriesObject
    {
        Guid _radome;
        public RadomePressureTimeseriesObject( )
        {
        }

        public RadomePressureTimeseriesObject( ObjectState objectState, Guid id, long rowVersion, Guid? catalog, string name, TimeSpan maxRetention, Guid radome )
            : base( objectState, id, rowVersion, catalog, name, maxRetention )
        {
            _radome = radome;
        }

        public override Kind GetObjectType()
        {
            return Kind.RadomePressureTimeseries;
        }

        public override BaseData<Kind> Create()
        {
            return new RadomePressureTimeseriesObject( );
        }

        public override void AssignTo( BaseData<Kind> target )
        {
            base.AssignTo( target );
            var destination = ( RadomePressureTimeseriesObject )target;
            destination._radome = _radome;
        }

        public override bool Equals(BaseData<Kind>? other)
        {
            if (base.Equals(other))
            {
                var obj = ( RadomePressureTimeseriesObject )other;
                if( obj._radome != _radome )
                {
                    return false;
                }
                return true;
            }
            return false;
        }

        public override bool IsOfType(Kind objectType)
        {
            if( objectType == Kind.RadomePressureTimeseries )
            {
                return true;
            }
            return base.IsOfType( objectType );
        }

        public Guid Radome
        {
            get => _radome;
            set
            {
                if( _radome != value )
                {
                    _radome = value;
                    OnPropertyChanged( );
                }
            }
        }

        public override void WriteTo( [ DisallowNull ] BinaryWriter destination )
        {
            base.WriteTo( destination );
            destination.Write( _radome );
        }

        public override void ReadFrom([DisallowNull] BinaryReader source)
        {
            base.ReadFrom( source );
            _radome = source.ReadGuid( );
        }

    }
    public class RadomeTemperatureTimeseriesObject : DoubleTimeseriesObject
    {
        Guid _radome;
        public RadomeTemperatureTimeseriesObject( )
        {
        }

        public RadomeTemperatureTimeseriesObject( ObjectState objectState, Guid id, long rowVersion, Guid? catalog, string name, TimeSpan maxRetention, Guid radome )
            : base( objectState, id, rowVersion, catalog, name, maxRetention )
        {
            _radome = radome;
        }

        public override Kind GetObjectType()
        {
            return Kind.RadomeTemperatureTimeseries;
        }

        public override BaseData<Kind> Create()
        {
            return new RadomeTemperatureTimeseriesObject( );
        }

        public override void AssignTo( BaseData<Kind> target )
        {
            base.AssignTo( target );
            var destination = ( RadomeTemperatureTimeseriesObject )target;
            destination._radome = _radome;
        }

        public override bool Equals(BaseData<Kind>? other)
        {
            if (base.Equals(other))
            {
                var obj = ( RadomeTemperatureTimeseriesObject )other;
                if( obj._radome != _radome )
                {
                    return false;
                }
                return true;
            }
            return false;
        }

        public override bool IsOfType(Kind objectType)
        {
            if( objectType == Kind.RadomeTemperatureTimeseries )
            {
                return true;
            }
            return base.IsOfType( objectType );
        }

        public Guid Radome
        {
            get => _radome;
            set
            {
                if( _radome != value )
                {
                    _radome = value;
                    OnPropertyChanged( );
                }
            }
        }

        public override void WriteTo( [ DisallowNull ] BinaryWriter destination )
        {
            base.WriteTo( destination );
            destination.Write( _radome );
        }

        public override void ReadFrom([DisallowNull] BinaryReader source)
        {
            base.ReadFrom( source );
            _radome = source.ReadGuid( );
        }

    }
    public class VesselDraughtTimeseriesObject : DoubleTimeseriesObject
    {
        Guid _vessel;
        public VesselDraughtTimeseriesObject( )
        {
        }

        public VesselDraughtTimeseriesObject( ObjectState objectState, Guid id, long rowVersion, Guid? catalog, string name, TimeSpan maxRetention, Guid vessel )
            : base( objectState, id, rowVersion, catalog, name, maxRetention )
        {
            _vessel = vessel;
        }

        public override Kind GetObjectType()
        {
            return Kind.VesselDraughtTimeseries;
        }

        public override BaseData<Kind> Create()
        {
            return new VesselDraughtTimeseriesObject( );
        }

        public override void AssignTo( BaseData<Kind> target )
        {
            base.AssignTo( target );
            var destination = ( VesselDraughtTimeseriesObject )target;
            destination._vessel = _vessel;
        }

        public override bool Equals(BaseData<Kind>? other)
        {
            if (base.Equals(other))
            {
                var obj = ( VesselDraughtTimeseriesObject )other;
                if( obj._vessel != _vessel )
                {
                    return false;
                }
                return true;
            }
            return false;
        }

        public override bool IsOfType(Kind objectType)
        {
            if( objectType == Kind.VesselDraughtTimeseries )
            {
                return true;
            }
            return base.IsOfType( objectType );
        }

        public Guid Vessel
        {
            get => _vessel;
            set
            {
                if( _vessel != value )
                {
                    _vessel = value;
                    OnPropertyChanged( );
                }
            }
        }

        public override void WriteTo( [ DisallowNull ] BinaryWriter destination )
        {
            base.WriteTo( destination );
            destination.Write( _vessel );
        }

        public override void ReadFrom([DisallowNull] BinaryReader source)
        {
            base.ReadFrom( source );
            _vessel = source.ReadGuid( );
        }

    }
    public class ViewLatitudeTimeseriesObject : DoubleTimeseriesObject
    {
        Guid _view;
        public ViewLatitudeTimeseriesObject( )
        {
        }

        public ViewLatitudeTimeseriesObject( ObjectState objectState, Guid id, long rowVersion, Guid? catalog, string name, TimeSpan maxRetention, Guid view )
            : base( objectState, id, rowVersion, catalog, name, maxRetention )
        {
            _view = view;
        }

        public override Kind GetObjectType()
        {
            return Kind.ViewLatitudeTimeseries;
        }

        public override BaseData<Kind> Create()
        {
            return new ViewLatitudeTimeseriesObject( );
        }

        public override void AssignTo( BaseData<Kind> target )
        {
            base.AssignTo( target );
            var destination = ( ViewLatitudeTimeseriesObject )target;
            destination._view = _view;
        }

        public override bool Equals(BaseData<Kind>? other)
        {
            if (base.Equals(other))
            {
                var obj = ( ViewLatitudeTimeseriesObject )other;
                if( obj._view != _view )
                {
                    return false;
                }
                return true;
            }
            return false;
        }

        public override bool IsOfType(Kind objectType)
        {
            if( objectType == Kind.ViewLatitudeTimeseries )
            {
                return true;
            }
            return base.IsOfType( objectType );
        }

        public Guid View
        {
            get => _view;
            set
            {
                if( _view != value )
                {
                    _view = value;
                    OnPropertyChanged( );
                }
            }
        }

        public override void WriteTo( [ DisallowNull ] BinaryWriter destination )
        {
            base.WriteTo( destination );
            destination.Write( _view );
        }

        public override void ReadFrom([DisallowNull] BinaryReader source)
        {
            base.ReadFrom( source );
            _view = source.ReadGuid( );
        }

    }
    public class ViewLongitudeTimeseriesObject : DoubleTimeseriesObject
    {
        Guid _view;
        public ViewLongitudeTimeseriesObject( )
        {
        }

        public ViewLongitudeTimeseriesObject( ObjectState objectState, Guid id, long rowVersion, Guid? catalog, string name, TimeSpan maxRetention, Guid view )
            : base( objectState, id, rowVersion, catalog, name, maxRetention )
        {
            _view = view;
        }

        public override Kind GetObjectType()
        {
            return Kind.ViewLongitudeTimeseries;
        }

        public override BaseData<Kind> Create()
        {
            return new ViewLongitudeTimeseriesObject( );
        }

        public override void AssignTo( BaseData<Kind> target )
        {
            base.AssignTo( target );
            var destination = ( ViewLongitudeTimeseriesObject )target;
            destination._view = _view;
        }

        public override bool Equals(BaseData<Kind>? other)
        {
            if (base.Equals(other))
            {
                var obj = ( ViewLongitudeTimeseriesObject )other;
                if( obj._view != _view )
                {
                    return false;
                }
                return true;
            }
            return false;
        }

        public override bool IsOfType(Kind objectType)
        {
            if( objectType == Kind.ViewLongitudeTimeseries )
            {
                return true;
            }
            return base.IsOfType( objectType );
        }

        public Guid View
        {
            get => _view;
            set
            {
                if( _view != value )
                {
                    _view = value;
                    OnPropertyChanged( );
                }
            }
        }

        public override void WriteTo( [ DisallowNull ] BinaryWriter destination )
        {
            base.WriteTo( destination );
            destination.Write( _view );
        }

        public override void ReadFrom([DisallowNull] BinaryReader source)
        {
            base.ReadFrom( source );
            _view = source.ReadGuid( );
        }

    }
    public class ViewZoomLevelTimeseriesObject : DoubleTimeseriesObject
    {
        Guid _view;
        public ViewZoomLevelTimeseriesObject( )
        {
        }

        public ViewZoomLevelTimeseriesObject( ObjectState objectState, Guid id, long rowVersion, Guid? catalog, string name, TimeSpan maxRetention, Guid view )
            : base( objectState, id, rowVersion, catalog, name, maxRetention )
        {
            _view = view;
        }

        public override Kind GetObjectType()
        {
            return Kind.ViewZoomLevelTimeseries;
        }

        public override BaseData<Kind> Create()
        {
            return new ViewZoomLevelTimeseriesObject( );
        }

        public override void AssignTo( BaseData<Kind> target )
        {
            base.AssignTo( target );
            var destination = ( ViewZoomLevelTimeseriesObject )target;
            destination._view = _view;
        }

        public override bool Equals(BaseData<Kind>? other)
        {
            if (base.Equals(other))
            {
                var obj = ( ViewZoomLevelTimeseriesObject )other;
                if( obj._view != _view )
                {
                    return false;
                }
                return true;
            }
            return false;
        }

        public override bool IsOfType(Kind objectType)
        {
            if( objectType == Kind.ViewZoomLevelTimeseries )
            {
                return true;
            }
            return base.IsOfType( objectType );
        }

        public Guid View
        {
            get => _view;
            set
            {
                if( _view != value )
                {
                    _view = value;
                    OnPropertyChanged( );
                }
            }
        }

        public override void WriteTo( [ DisallowNull ] BinaryWriter destination )
        {
            base.WriteTo( destination );
            destination.Write( _view );
        }

        public override void ReadFrom([DisallowNull] BinaryReader source)
        {
            base.ReadFrom( source );
            _view = source.ReadGuid( );
        }

    }
    public class WeatherStationAbsoluteHumidityTimeseriesObject : DoubleTimeseriesObject
    {
        Guid _weatherStation;
        public WeatherStationAbsoluteHumidityTimeseriesObject( )
        {
        }

        public WeatherStationAbsoluteHumidityTimeseriesObject( ObjectState objectState, Guid id, long rowVersion, Guid? catalog, string name, TimeSpan maxRetention, Guid weatherStation )
            : base( objectState, id, rowVersion, catalog, name, maxRetention )
        {
            _weatherStation = weatherStation;
        }

        public override Kind GetObjectType()
        {
            return Kind.WeatherStationAbsoluteHumidityTimeseries;
        }

        public override BaseData<Kind> Create()
        {
            return new WeatherStationAbsoluteHumidityTimeseriesObject( );
        }

        public override void AssignTo( BaseData<Kind> target )
        {
            base.AssignTo( target );
            var destination = ( WeatherStationAbsoluteHumidityTimeseriesObject )target;
            destination._weatherStation = _weatherStation;
        }

        public override bool Equals(BaseData<Kind>? other)
        {
            if (base.Equals(other))
            {
                var obj = ( WeatherStationAbsoluteHumidityTimeseriesObject )other;
                if( obj._weatherStation != _weatherStation )
                {
                    return false;
                }
                return true;
            }
            return false;
        }

        public override bool IsOfType(Kind objectType)
        {
            if( objectType == Kind.WeatherStationAbsoluteHumidityTimeseries )
            {
                return true;
            }
            return base.IsOfType( objectType );
        }

        public Guid WeatherStation
        {
            get => _weatherStation;
            set
            {
                if( _weatherStation != value )
                {
                    _weatherStation = value;
                    OnPropertyChanged( );
                }
            }
        }

        public override void WriteTo( [ DisallowNull ] BinaryWriter destination )
        {
            base.WriteTo( destination );
            destination.Write( _weatherStation );
        }

        public override void ReadFrom([DisallowNull] BinaryReader source)
        {
            base.ReadFrom( source );
            _weatherStation = source.ReadGuid( );
        }

    }
    public class WeatherStationAirTemperatureTimeseriesObject : DoubleTimeseriesObject
    {
        Guid _weatherStation;
        public WeatherStationAirTemperatureTimeseriesObject( )
        {
        }

        public WeatherStationAirTemperatureTimeseriesObject( ObjectState objectState, Guid id, long rowVersion, Guid? catalog, string name, TimeSpan maxRetention, Guid weatherStation )
            : base( objectState, id, rowVersion, catalog, name, maxRetention )
        {
            _weatherStation = weatherStation;
        }

        public override Kind GetObjectType()
        {
            return Kind.WeatherStationAirTemperatureTimeseries;
        }

        public override BaseData<Kind> Create()
        {
            return new WeatherStationAirTemperatureTimeseriesObject( );
        }

        public override void AssignTo( BaseData<Kind> target )
        {
            base.AssignTo( target );
            var destination = ( WeatherStationAirTemperatureTimeseriesObject )target;
            destination._weatherStation = _weatherStation;
        }

        public override bool Equals(BaseData<Kind>? other)
        {
            if (base.Equals(other))
            {
                var obj = ( WeatherStationAirTemperatureTimeseriesObject )other;
                if( obj._weatherStation != _weatherStation )
                {
                    return false;
                }
                return true;
            }
            return false;
        }

        public override bool IsOfType(Kind objectType)
        {
            if( objectType == Kind.WeatherStationAirTemperatureTimeseries )
            {
                return true;
            }
            return base.IsOfType( objectType );
        }

        public Guid WeatherStation
        {
            get => _weatherStation;
            set
            {
                if( _weatherStation != value )
                {
                    _weatherStation = value;
                    OnPropertyChanged( );
                }
            }
        }

        public override void WriteTo( [ DisallowNull ] BinaryWriter destination )
        {
            base.WriteTo( destination );
            destination.Write( _weatherStation );
        }

        public override void ReadFrom([DisallowNull] BinaryReader source)
        {
            base.ReadFrom( source );
            _weatherStation = source.ReadGuid( );
        }

    }
    public class WeatherStationBarometricPressureTimeseriesObject : DoubleTimeseriesObject
    {
        Guid _weatherStation;
        public WeatherStationBarometricPressureTimeseriesObject( )
        {
        }

        public WeatherStationBarometricPressureTimeseriesObject( ObjectState objectState, Guid id, long rowVersion, Guid? catalog, string name, TimeSpan maxRetention, Guid weatherStation )
            : base( objectState, id, rowVersion, catalog, name, maxRetention )
        {
            _weatherStation = weatherStation;
        }

        public override Kind GetObjectType()
        {
            return Kind.WeatherStationBarometricPressureTimeseries;
        }

        public override BaseData<Kind> Create()
        {
            return new WeatherStationBarometricPressureTimeseriesObject( );
        }

        public override void AssignTo( BaseData<Kind> target )
        {
            base.AssignTo( target );
            var destination = ( WeatherStationBarometricPressureTimeseriesObject )target;
            destination._weatherStation = _weatherStation;
        }

        public override bool Equals(BaseData<Kind>? other)
        {
            if (base.Equals(other))
            {
                var obj = ( WeatherStationBarometricPressureTimeseriesObject )other;
                if( obj._weatherStation != _weatherStation )
                {
                    return false;
                }
                return true;
            }
            return false;
        }

        public override bool IsOfType(Kind objectType)
        {
            if( objectType == Kind.WeatherStationBarometricPressureTimeseries )
            {
                return true;
            }
            return base.IsOfType( objectType );
        }

        public Guid WeatherStation
        {
            get => _weatherStation;
            set
            {
                if( _weatherStation != value )
                {
                    _weatherStation = value;
                    OnPropertyChanged( );
                }
            }
        }

        public override void WriteTo( [ DisallowNull ] BinaryWriter destination )
        {
            base.WriteTo( destination );
            destination.Write( _weatherStation );
        }

        public override void ReadFrom([DisallowNull] BinaryReader source)
        {
            base.ReadFrom( source );
            _weatherStation = source.ReadGuid( );
        }

    }
    public class WeatherStationDewPointTimeseriesObject : DoubleTimeseriesObject
    {
        Guid _weatherStation;
        public WeatherStationDewPointTimeseriesObject( )
        {
        }

        public WeatherStationDewPointTimeseriesObject( ObjectState objectState, Guid id, long rowVersion, Guid? catalog, string name, TimeSpan maxRetention, Guid weatherStation )
            : base( objectState, id, rowVersion, catalog, name, maxRetention )
        {
            _weatherStation = weatherStation;
        }

        public override Kind GetObjectType()
        {
            return Kind.WeatherStationDewPointTimeseries;
        }

        public override BaseData<Kind> Create()
        {
            return new WeatherStationDewPointTimeseriesObject( );
        }

        public override void AssignTo( BaseData<Kind> target )
        {
            base.AssignTo( target );
            var destination = ( WeatherStationDewPointTimeseriesObject )target;
            destination._weatherStation = _weatherStation;
        }

        public override bool Equals(BaseData<Kind>? other)
        {
            if (base.Equals(other))
            {
                var obj = ( WeatherStationDewPointTimeseriesObject )other;
                if( obj._weatherStation != _weatherStation )
                {
                    return false;
                }
                return true;
            }
            return false;
        }

        public override bool IsOfType(Kind objectType)
        {
            if( objectType == Kind.WeatherStationDewPointTimeseries )
            {
                return true;
            }
            return base.IsOfType( objectType );
        }

        public Guid WeatherStation
        {
            get => _weatherStation;
            set
            {
                if( _weatherStation != value )
                {
                    _weatherStation = value;
                    OnPropertyChanged( );
                }
            }
        }

        public override void WriteTo( [ DisallowNull ] BinaryWriter destination )
        {
            base.WriteTo( destination );
            destination.Write( _weatherStation );
        }

        public override void ReadFrom([DisallowNull] BinaryReader source)
        {
            base.ReadFrom( source );
            _weatherStation = source.ReadGuid( );
        }

    }
    public class WeatherStationRelativeHumidityTimeseriesObject : DoubleTimeseriesObject
    {
        Guid _weatherStation;
        public WeatherStationRelativeHumidityTimeseriesObject( )
        {
        }

        public WeatherStationRelativeHumidityTimeseriesObject( ObjectState objectState, Guid id, long rowVersion, Guid? catalog, string name, TimeSpan maxRetention, Guid weatherStation )
            : base( objectState, id, rowVersion, catalog, name, maxRetention )
        {
            _weatherStation = weatherStation;
        }

        public override Kind GetObjectType()
        {
            return Kind.WeatherStationRelativeHumidityTimeseries;
        }

        public override BaseData<Kind> Create()
        {
            return new WeatherStationRelativeHumidityTimeseriesObject( );
        }

        public override void AssignTo( BaseData<Kind> target )
        {
            base.AssignTo( target );
            var destination = ( WeatherStationRelativeHumidityTimeseriesObject )target;
            destination._weatherStation = _weatherStation;
        }

        public override bool Equals(BaseData<Kind>? other)
        {
            if (base.Equals(other))
            {
                var obj = ( WeatherStationRelativeHumidityTimeseriesObject )other;
                if( obj._weatherStation != _weatherStation )
                {
                    return false;
                }
                return true;
            }
            return false;
        }

        public override bool IsOfType(Kind objectType)
        {
            if( objectType == Kind.WeatherStationRelativeHumidityTimeseries )
            {
                return true;
            }
            return base.IsOfType( objectType );
        }

        public Guid WeatherStation
        {
            get => _weatherStation;
            set
            {
                if( _weatherStation != value )
                {
                    _weatherStation = value;
                    OnPropertyChanged( );
                }
            }
        }

        public override void WriteTo( [ DisallowNull ] BinaryWriter destination )
        {
            base.WriteTo( destination );
            destination.Write( _weatherStation );
        }

        public override void ReadFrom([DisallowNull] BinaryReader source)
        {
            base.ReadFrom( source );
            _weatherStation = source.ReadGuid( );
        }

    }
    public class WeatherStationWaterTemperatureTimeseriesObject : DoubleTimeseriesObject
    {
        Guid _weatherStation;
        public WeatherStationWaterTemperatureTimeseriesObject( )
        {
        }

        public WeatherStationWaterTemperatureTimeseriesObject( ObjectState objectState, Guid id, long rowVersion, Guid? catalog, string name, TimeSpan maxRetention, Guid weatherStation )
            : base( objectState, id, rowVersion, catalog, name, maxRetention )
        {
            _weatherStation = weatherStation;
        }

        public override Kind GetObjectType()
        {
            return Kind.WeatherStationWaterTemperatureTimeseries;
        }

        public override BaseData<Kind> Create()
        {
            return new WeatherStationWaterTemperatureTimeseriesObject( );
        }

        public override void AssignTo( BaseData<Kind> target )
        {
            base.AssignTo( target );
            var destination = ( WeatherStationWaterTemperatureTimeseriesObject )target;
            destination._weatherStation = _weatherStation;
        }

        public override bool Equals(BaseData<Kind>? other)
        {
            if (base.Equals(other))
            {
                var obj = ( WeatherStationWaterTemperatureTimeseriesObject )other;
                if( obj._weatherStation != _weatherStation )
                {
                    return false;
                }
                return true;
            }
            return false;
        }

        public override bool IsOfType(Kind objectType)
        {
            if( objectType == Kind.WeatherStationWaterTemperatureTimeseries )
            {
                return true;
            }
            return base.IsOfType( objectType );
        }

        public Guid WeatherStation
        {
            get => _weatherStation;
            set
            {
                if( _weatherStation != value )
                {
                    _weatherStation = value;
                    OnPropertyChanged( );
                }
            }
        }

        public override void WriteTo( [ DisallowNull ] BinaryWriter destination )
        {
            base.WriteTo( destination );
            destination.Write( _weatherStation );
        }

        public override void ReadFrom([DisallowNull] BinaryReader source)
        {
            base.ReadFrom( source );
            _weatherStation = source.ReadGuid( );
        }

    }
    public class WeatherStationWindDirectionTimeseriesObject : DoubleTimeseriesObject
    {
        Guid _weatherStation;
        public WeatherStationWindDirectionTimeseriesObject( )
        {
        }

        public WeatherStationWindDirectionTimeseriesObject( ObjectState objectState, Guid id, long rowVersion, Guid? catalog, string name, TimeSpan maxRetention, Guid weatherStation )
            : base( objectState, id, rowVersion, catalog, name, maxRetention )
        {
            _weatherStation = weatherStation;
        }

        public override Kind GetObjectType()
        {
            return Kind.WeatherStationWindDirectionTimeseries;
        }

        public override BaseData<Kind> Create()
        {
            return new WeatherStationWindDirectionTimeseriesObject( );
        }

        public override void AssignTo( BaseData<Kind> target )
        {
            base.AssignTo( target );
            var destination = ( WeatherStationWindDirectionTimeseriesObject )target;
            destination._weatherStation = _weatherStation;
        }

        public override bool Equals(BaseData<Kind>? other)
        {
            if (base.Equals(other))
            {
                var obj = ( WeatherStationWindDirectionTimeseriesObject )other;
                if( obj._weatherStation != _weatherStation )
                {
                    return false;
                }
                return true;
            }
            return false;
        }

        public override bool IsOfType(Kind objectType)
        {
            if( objectType == Kind.WeatherStationWindDirectionTimeseries )
            {
                return true;
            }
            return base.IsOfType( objectType );
        }

        public Guid WeatherStation
        {
            get => _weatherStation;
            set
            {
                if( _weatherStation != value )
                {
                    _weatherStation = value;
                    OnPropertyChanged( );
                }
            }
        }

        public override void WriteTo( [ DisallowNull ] BinaryWriter destination )
        {
            base.WriteTo( destination );
            destination.Write( _weatherStation );
        }

        public override void ReadFrom([DisallowNull] BinaryReader source)
        {
            base.ReadFrom( source );
            _weatherStation = source.ReadGuid( );
        }

    }
    public class WeatherStationWindSpeedTimeseriesObject : DoubleTimeseriesObject
    {
        Guid _weatherStation;
        public WeatherStationWindSpeedTimeseriesObject( )
        {
        }

        public WeatherStationWindSpeedTimeseriesObject( ObjectState objectState, Guid id, long rowVersion, Guid? catalog, string name, TimeSpan maxRetention, Guid weatherStation )
            : base( objectState, id, rowVersion, catalog, name, maxRetention )
        {
            _weatherStation = weatherStation;
        }

        public override Kind GetObjectType()
        {
            return Kind.WeatherStationWindSpeedTimeseries;
        }

        public override BaseData<Kind> Create()
        {
            return new WeatherStationWindSpeedTimeseriesObject( );
        }

        public override void AssignTo( BaseData<Kind> target )
        {
            base.AssignTo( target );
            var destination = ( WeatherStationWindSpeedTimeseriesObject )target;
            destination._weatherStation = _weatherStation;
        }

        public override bool Equals(BaseData<Kind>? other)
        {
            if (base.Equals(other))
            {
                var obj = ( WeatherStationWindSpeedTimeseriesObject )other;
                if( obj._weatherStation != _weatherStation )
                {
                    return false;
                }
                return true;
            }
            return false;
        }

        public override bool IsOfType(Kind objectType)
        {
            if( objectType == Kind.WeatherStationWindSpeedTimeseries )
            {
                return true;
            }
            return base.IsOfType( objectType );
        }

        public Guid WeatherStation
        {
            get => _weatherStation;
            set
            {
                if( _weatherStation != value )
                {
                    _weatherStation = value;
                    OnPropertyChanged( );
                }
            }
        }

        public override void WriteTo( [ DisallowNull ] BinaryWriter destination )
        {
            base.WriteTo( destination );
            destination.Write( _weatherStation );
        }

        public override void ReadFrom([DisallowNull] BinaryReader source)
        {
            base.ReadFrom( source );
            _weatherStation = source.ReadGuid( );
        }

    }
    public class GeoPosition2DTimeseriesObject : TimeseriesObject
    {
        public GeoPosition2DTimeseriesObject( )
        {
        }

        public GeoPosition2DTimeseriesObject( ObjectState objectState, Guid id, long rowVersion, Guid? catalog, string name, TimeSpan maxRetention )
            : base( objectState, id, rowVersion, catalog, name, maxRetention )
        {
        }

        public override Kind GetObjectType()
        {
            return Kind.GeoPosition2DTimeseries;
        }

        public override BaseData<Kind> Create()
        {
            return new GeoPosition2DTimeseriesObject( );
        }

        public override bool IsOfType(Kind objectType)
        {
            if( objectType == Kind.GeoPosition2DTimeseries )
            {
                return true;
            }
            return base.IsOfType( objectType );
        }

    }
    public class AisAidToNavigationPositionTimeseriesObject : GeoPosition2DTimeseriesObject
    {
        Guid _aidToNavigation;
        public AisAidToNavigationPositionTimeseriesObject( )
        {
        }

        public AisAidToNavigationPositionTimeseriesObject( ObjectState objectState, Guid id, long rowVersion, Guid? catalog, string name, TimeSpan maxRetention, Guid aidToNavigation )
            : base( objectState, id, rowVersion, catalog, name, maxRetention )
        {
            _aidToNavigation = aidToNavigation;
        }

        public override Kind GetObjectType()
        {
            return Kind.AisAidToNavigationPositionTimeseries;
        }

        public override BaseData<Kind> Create()
        {
            return new AisAidToNavigationPositionTimeseriesObject( );
        }

        public override void AssignTo( BaseData<Kind> target )
        {
            base.AssignTo( target );
            var destination = ( AisAidToNavigationPositionTimeseriesObject )target;
            destination._aidToNavigation = _aidToNavigation;
        }

        public override bool Equals(BaseData<Kind>? other)
        {
            if (base.Equals(other))
            {
                var obj = ( AisAidToNavigationPositionTimeseriesObject )other;
                if( obj._aidToNavigation != _aidToNavigation )
                {
                    return false;
                }
                return true;
            }
            return false;
        }

        public override bool IsOfType(Kind objectType)
        {
            if( objectType == Kind.AisAidToNavigationPositionTimeseries )
            {
                return true;
            }
            return base.IsOfType( objectType );
        }

        public Guid AidToNavigation
        {
            get => _aidToNavigation;
            set
            {
                if( _aidToNavigation != value )
                {
                    _aidToNavigation = value;
                    OnPropertyChanged( );
                }
            }
        }

        public override void WriteTo( [ DisallowNull ] BinaryWriter destination )
        {
            base.WriteTo( destination );
            destination.Write( _aidToNavigation );
        }

        public override void ReadFrom([DisallowNull] BinaryReader source)
        {
            base.ReadFrom( source );
            _aidToNavigation = source.ReadGuid( );
        }

    }
    public class GeoPosition3DTimeseriesObject : TimeseriesObject
    {
        public GeoPosition3DTimeseriesObject( )
        {
        }

        public GeoPosition3DTimeseriesObject( ObjectState objectState, Guid id, long rowVersion, Guid? catalog, string name, TimeSpan maxRetention )
            : base( objectState, id, rowVersion, catalog, name, maxRetention )
        {
        }

        public override Kind GetObjectType()
        {
            return Kind.GeoPosition3DTimeseries;
        }

        public override BaseData<Kind> Create()
        {
            return new GeoPosition3DTimeseriesObject( );
        }

        public override bool IsOfType(Kind objectType)
        {
            if( objectType == Kind.GeoPosition3DTimeseries )
            {
                return true;
            }
            return base.IsOfType( objectType );
        }

    }
    public class GuidTimeseriesObject : TimeseriesObject
    {
        public GuidTimeseriesObject( )
        {
        }

        public GuidTimeseriesObject( ObjectState objectState, Guid id, long rowVersion, Guid? catalog, string name, TimeSpan maxRetention )
            : base( objectState, id, rowVersion, catalog, name, maxRetention )
        {
        }

        public override Kind GetObjectType()
        {
            return Kind.GuidTimeseries;
        }

        public override BaseData<Kind> Create()
        {
            return new GuidTimeseriesObject( );
        }

        public override bool IsOfType(Kind objectType)
        {
            if( objectType == Kind.GuidTimeseries )
            {
                return true;
            }
            return base.IsOfType( objectType );
        }

    }
    public class Int16TimeseriesObject : TimeseriesObject
    {
        public Int16TimeseriesObject( )
        {
        }

        public Int16TimeseriesObject( ObjectState objectState, Guid id, long rowVersion, Guid? catalog, string name, TimeSpan maxRetention )
            : base( objectState, id, rowVersion, catalog, name, maxRetention )
        {
        }

        public override Kind GetObjectType()
        {
            return Kind.Int16Timeseries;
        }

        public override BaseData<Kind> Create()
        {
            return new Int16TimeseriesObject( );
        }

        public override bool IsOfType(Kind objectType)
        {
            if( objectType == Kind.Int16Timeseries )
            {
                return true;
            }
            return base.IsOfType( objectType );
        }

    }
    public class Int32TimeseriesObject : TimeseriesObject
    {
        public Int32TimeseriesObject( )
        {
        }

        public Int32TimeseriesObject( ObjectState objectState, Guid id, long rowVersion, Guid? catalog, string name, TimeSpan maxRetention )
            : base( objectState, id, rowVersion, catalog, name, maxRetention )
        {
        }

        public override Kind GetObjectType()
        {
            return Kind.Int32Timeseries;
        }

        public override BaseData<Kind> Create()
        {
            return new Int32TimeseriesObject( );
        }

        public override bool IsOfType(Kind objectType)
        {
            if( objectType == Kind.Int32Timeseries )
            {
                return true;
            }
            return base.IsOfType( objectType );
        }

    }
    public class RadarAzimuthOffsetTimeseriesObject : Int32TimeseriesObject
    {
        Guid _radar;
        public RadarAzimuthOffsetTimeseriesObject( )
        {
        }

        public RadarAzimuthOffsetTimeseriesObject( ObjectState objectState, Guid id, long rowVersion, Guid? catalog, string name, TimeSpan maxRetention, Guid radar )
            : base( objectState, id, rowVersion, catalog, name, maxRetention )
        {
            _radar = radar;
        }

        public override Kind GetObjectType()
        {
            return Kind.RadarAzimuthOffsetTimeseries;
        }

        public override BaseData<Kind> Create()
        {
            return new RadarAzimuthOffsetTimeseriesObject( );
        }

        public override void AssignTo( BaseData<Kind> target )
        {
            base.AssignTo( target );
            var destination = ( RadarAzimuthOffsetTimeseriesObject )target;
            destination._radar = _radar;
        }

        public override bool Equals(BaseData<Kind>? other)
        {
            if (base.Equals(other))
            {
                var obj = ( RadarAzimuthOffsetTimeseriesObject )other;
                if( obj._radar != _radar )
                {
                    return false;
                }
                return true;
            }
            return false;
        }

        public override bool IsOfType(Kind objectType)
        {
            if( objectType == Kind.RadarAzimuthOffsetTimeseries )
            {
                return true;
            }
            return base.IsOfType( objectType );
        }

        public Guid Radar
        {
            get => _radar;
            set
            {
                if( _radar != value )
                {
                    _radar = value;
                    OnPropertyChanged( );
                }
            }
        }

        public override void WriteTo( [ DisallowNull ] BinaryWriter destination )
        {
            base.WriteTo( destination );
            destination.Write( _radar );
        }

        public override void ReadFrom([DisallowNull] BinaryReader source)
        {
            base.ReadFrom( source );
            _radar = source.ReadGuid( );
        }

    }
    public class RadarFastTimeConstantLevelTimeseriesObject : Int32TimeseriesObject
    {
        Guid _radar;
        public RadarFastTimeConstantLevelTimeseriesObject( )
        {
        }

        public RadarFastTimeConstantLevelTimeseriesObject( ObjectState objectState, Guid id, long rowVersion, Guid? catalog, string name, TimeSpan maxRetention, Guid radar )
            : base( objectState, id, rowVersion, catalog, name, maxRetention )
        {
            _radar = radar;
        }

        public override Kind GetObjectType()
        {
            return Kind.RadarFastTimeConstantLevelTimeseries;
        }

        public override BaseData<Kind> Create()
        {
            return new RadarFastTimeConstantLevelTimeseriesObject( );
        }

        public override void AssignTo( BaseData<Kind> target )
        {
            base.AssignTo( target );
            var destination = ( RadarFastTimeConstantLevelTimeseriesObject )target;
            destination._radar = _radar;
        }

        public override bool Equals(BaseData<Kind>? other)
        {
            if (base.Equals(other))
            {
                var obj = ( RadarFastTimeConstantLevelTimeseriesObject )other;
                if( obj._radar != _radar )
                {
                    return false;
                }
                return true;
            }
            return false;
        }

        public override bool IsOfType(Kind objectType)
        {
            if( objectType == Kind.RadarFastTimeConstantLevelTimeseries )
            {
                return true;
            }
            return base.IsOfType( objectType );
        }

        public Guid Radar
        {
            get => _radar;
            set
            {
                if( _radar != value )
                {
                    _radar = value;
                    OnPropertyChanged( );
                }
            }
        }

        public override void WriteTo( [ DisallowNull ] BinaryWriter destination )
        {
            base.WriteTo( destination );
            destination.Write( _radar );
        }

        public override void ReadFrom([DisallowNull] BinaryReader source)
        {
            base.ReadFrom( source );
            _radar = source.ReadGuid( );
        }

    }
    public class RadarFastTimeConstantModeTimeseriesObject : Int32TimeseriesObject
    {
        Guid _radar;
        public RadarFastTimeConstantModeTimeseriesObject( )
        {
        }

        public RadarFastTimeConstantModeTimeseriesObject( ObjectState objectState, Guid id, long rowVersion, Guid? catalog, string name, TimeSpan maxRetention, Guid radar )
            : base( objectState, id, rowVersion, catalog, name, maxRetention )
        {
            _radar = radar;
        }

        public override Kind GetObjectType()
        {
            return Kind.RadarFastTimeConstantModeTimeseries;
        }

        public override BaseData<Kind> Create()
        {
            return new RadarFastTimeConstantModeTimeseriesObject( );
        }

        public override void AssignTo( BaseData<Kind> target )
        {
            base.AssignTo( target );
            var destination = ( RadarFastTimeConstantModeTimeseriesObject )target;
            destination._radar = _radar;
        }

        public override bool Equals(BaseData<Kind>? other)
        {
            if (base.Equals(other))
            {
                var obj = ( RadarFastTimeConstantModeTimeseriesObject )other;
                if( obj._radar != _radar )
                {
                    return false;
                }
                return true;
            }
            return false;
        }

        public override bool IsOfType(Kind objectType)
        {
            if( objectType == Kind.RadarFastTimeConstantModeTimeseries )
            {
                return true;
            }
            return base.IsOfType( objectType );
        }

        public Guid Radar
        {
            get => _radar;
            set
            {
                if( _radar != value )
                {
                    _radar = value;
                    OnPropertyChanged( );
                }
            }
        }

        public override void WriteTo( [ DisallowNull ] BinaryWriter destination )
        {
            base.WriteTo( destination );
            destination.Write( _radar );
        }

        public override void ReadFrom([DisallowNull] BinaryReader source)
        {
            base.ReadFrom( source );
            _radar = source.ReadGuid( );
        }

    }
    public class RadarPulseTimeseriesObject : Int32TimeseriesObject
    {
        Guid _radar;
        public RadarPulseTimeseriesObject( )
        {
        }

        public RadarPulseTimeseriesObject( ObjectState objectState, Guid id, long rowVersion, Guid? catalog, string name, TimeSpan maxRetention, Guid radar )
            : base( objectState, id, rowVersion, catalog, name, maxRetention )
        {
            _radar = radar;
        }

        public override Kind GetObjectType()
        {
            return Kind.RadarPulseTimeseries;
        }

        public override BaseData<Kind> Create()
        {
            return new RadarPulseTimeseriesObject( );
        }

        public override void AssignTo( BaseData<Kind> target )
        {
            base.AssignTo( target );
            var destination = ( RadarPulseTimeseriesObject )target;
            destination._radar = _radar;
        }

        public override bool Equals(BaseData<Kind>? other)
        {
            if (base.Equals(other))
            {
                var obj = ( RadarPulseTimeseriesObject )other;
                if( obj._radar != _radar )
                {
                    return false;
                }
                return true;
            }
            return false;
        }

        public override bool IsOfType(Kind objectType)
        {
            if( objectType == Kind.RadarPulseTimeseries )
            {
                return true;
            }
            return base.IsOfType( objectType );
        }

        public Guid Radar
        {
            get => _radar;
            set
            {
                if( _radar != value )
                {
                    _radar = value;
                    OnPropertyChanged( );
                }
            }
        }

        public override void WriteTo( [ DisallowNull ] BinaryWriter destination )
        {
            base.WriteTo( destination );
            destination.Write( _radar );
        }

        public override void ReadFrom([DisallowNull] BinaryReader source)
        {
            base.ReadFrom( source );
            _radar = source.ReadGuid( );
        }

    }
    public class RadarSector1EndTimeseriesObject : Int32TimeseriesObject
    {
        Guid _radar;
        public RadarSector1EndTimeseriesObject( )
        {
        }

        public RadarSector1EndTimeseriesObject( ObjectState objectState, Guid id, long rowVersion, Guid? catalog, string name, TimeSpan maxRetention, Guid radar )
            : base( objectState, id, rowVersion, catalog, name, maxRetention )
        {
            _radar = radar;
        }

        public override Kind GetObjectType()
        {
            return Kind.RadarSector1EndTimeseries;
        }

        public override BaseData<Kind> Create()
        {
            return new RadarSector1EndTimeseriesObject( );
        }

        public override void AssignTo( BaseData<Kind> target )
        {
            base.AssignTo( target );
            var destination = ( RadarSector1EndTimeseriesObject )target;
            destination._radar = _radar;
        }

        public override bool Equals(BaseData<Kind>? other)
        {
            if (base.Equals(other))
            {
                var obj = ( RadarSector1EndTimeseriesObject )other;
                if( obj._radar != _radar )
                {
                    return false;
                }
                return true;
            }
            return false;
        }

        public override bool IsOfType(Kind objectType)
        {
            if( objectType == Kind.RadarSector1EndTimeseries )
            {
                return true;
            }
            return base.IsOfType( objectType );
        }

        public Guid Radar
        {
            get => _radar;
            set
            {
                if( _radar != value )
                {
                    _radar = value;
                    OnPropertyChanged( );
                }
            }
        }

        public override void WriteTo( [ DisallowNull ] BinaryWriter destination )
        {
            base.WriteTo( destination );
            destination.Write( _radar );
        }

        public override void ReadFrom([DisallowNull] BinaryReader source)
        {
            base.ReadFrom( source );
            _radar = source.ReadGuid( );
        }

    }
    public class RadarSector1StartTimeseriesObject : Int32TimeseriesObject
    {
        Guid _radar;
        public RadarSector1StartTimeseriesObject( )
        {
        }

        public RadarSector1StartTimeseriesObject( ObjectState objectState, Guid id, long rowVersion, Guid? catalog, string name, TimeSpan maxRetention, Guid radar )
            : base( objectState, id, rowVersion, catalog, name, maxRetention )
        {
            _radar = radar;
        }

        public override Kind GetObjectType()
        {
            return Kind.RadarSector1StartTimeseries;
        }

        public override BaseData<Kind> Create()
        {
            return new RadarSector1StartTimeseriesObject( );
        }

        public override void AssignTo( BaseData<Kind> target )
        {
            base.AssignTo( target );
            var destination = ( RadarSector1StartTimeseriesObject )target;
            destination._radar = _radar;
        }

        public override bool Equals(BaseData<Kind>? other)
        {
            if (base.Equals(other))
            {
                var obj = ( RadarSector1StartTimeseriesObject )other;
                if( obj._radar != _radar )
                {
                    return false;
                }
                return true;
            }
            return false;
        }

        public override bool IsOfType(Kind objectType)
        {
            if( objectType == Kind.RadarSector1StartTimeseries )
            {
                return true;
            }
            return base.IsOfType( objectType );
        }

        public Guid Radar
        {
            get => _radar;
            set
            {
                if( _radar != value )
                {
                    _radar = value;
                    OnPropertyChanged( );
                }
            }
        }

        public override void WriteTo( [ DisallowNull ] BinaryWriter destination )
        {
            base.WriteTo( destination );
            destination.Write( _radar );
        }

        public override void ReadFrom([DisallowNull] BinaryReader source)
        {
            base.ReadFrom( source );
            _radar = source.ReadGuid( );
        }

    }
    public class RadarSector2EndTimeseriesObject : Int32TimeseriesObject
    {
        Guid _radar;
        public RadarSector2EndTimeseriesObject( )
        {
        }

        public RadarSector2EndTimeseriesObject( ObjectState objectState, Guid id, long rowVersion, Guid? catalog, string name, TimeSpan maxRetention, Guid radar )
            : base( objectState, id, rowVersion, catalog, name, maxRetention )
        {
            _radar = radar;
        }

        public override Kind GetObjectType()
        {
            return Kind.RadarSector2EndTimeseries;
        }

        public override BaseData<Kind> Create()
        {
            return new RadarSector2EndTimeseriesObject( );
        }

        public override void AssignTo( BaseData<Kind> target )
        {
            base.AssignTo( target );
            var destination = ( RadarSector2EndTimeseriesObject )target;
            destination._radar = _radar;
        }

        public override bool Equals(BaseData<Kind>? other)
        {
            if (base.Equals(other))
            {
                var obj = ( RadarSector2EndTimeseriesObject )other;
                if( obj._radar != _radar )
                {
                    return false;
                }
                return true;
            }
            return false;
        }

        public override bool IsOfType(Kind objectType)
        {
            if( objectType == Kind.RadarSector2EndTimeseries )
            {
                return true;
            }
            return base.IsOfType( objectType );
        }

        public Guid Radar
        {
            get => _radar;
            set
            {
                if( _radar != value )
                {
                    _radar = value;
                    OnPropertyChanged( );
                }
            }
        }

        public override void WriteTo( [ DisallowNull ] BinaryWriter destination )
        {
            base.WriteTo( destination );
            destination.Write( _radar );
        }

        public override void ReadFrom([DisallowNull] BinaryReader source)
        {
            base.ReadFrom( source );
            _radar = source.ReadGuid( );
        }

    }
    public class RadarSector2StartTimeseriesObject : Int32TimeseriesObject
    {
        Guid _radar;
        public RadarSector2StartTimeseriesObject( )
        {
        }

        public RadarSector2StartTimeseriesObject( ObjectState objectState, Guid id, long rowVersion, Guid? catalog, string name, TimeSpan maxRetention, Guid radar )
            : base( objectState, id, rowVersion, catalog, name, maxRetention )
        {
            _radar = radar;
        }

        public override Kind GetObjectType()
        {
            return Kind.RadarSector2StartTimeseries;
        }

        public override BaseData<Kind> Create()
        {
            return new RadarSector2StartTimeseriesObject( );
        }

        public override void AssignTo( BaseData<Kind> target )
        {
            base.AssignTo( target );
            var destination = ( RadarSector2StartTimeseriesObject )target;
            destination._radar = _radar;
        }

        public override bool Equals(BaseData<Kind>? other)
        {
            if (base.Equals(other))
            {
                var obj = ( RadarSector2StartTimeseriesObject )other;
                if( obj._radar != _radar )
                {
                    return false;
                }
                return true;
            }
            return false;
        }

        public override bool IsOfType(Kind objectType)
        {
            if( objectType == Kind.RadarSector2StartTimeseries )
            {
                return true;
            }
            return base.IsOfType( objectType );
        }

        public Guid Radar
        {
            get => _radar;
            set
            {
                if( _radar != value )
                {
                    _radar = value;
                    OnPropertyChanged( );
                }
            }
        }

        public override void WriteTo( [ DisallowNull ] BinaryWriter destination )
        {
            base.WriteTo( destination );
            destination.Write( _radar );
        }

        public override void ReadFrom([DisallowNull] BinaryReader source)
        {
            base.ReadFrom( source );
            _radar = source.ReadGuid( );
        }

    }
    public class RadarSensitivityTimeControlLevelTimeseriesObject : Int32TimeseriesObject
    {
        Guid _radar;
        public RadarSensitivityTimeControlLevelTimeseriesObject( )
        {
        }

        public RadarSensitivityTimeControlLevelTimeseriesObject( ObjectState objectState, Guid id, long rowVersion, Guid? catalog, string name, TimeSpan maxRetention, Guid radar )
            : base( objectState, id, rowVersion, catalog, name, maxRetention )
        {
            _radar = radar;
        }

        public override Kind GetObjectType()
        {
            return Kind.RadarSensitivityTimeControlLevelTimeseries;
        }

        public override BaseData<Kind> Create()
        {
            return new RadarSensitivityTimeControlLevelTimeseriesObject( );
        }

        public override void AssignTo( BaseData<Kind> target )
        {
            base.AssignTo( target );
            var destination = ( RadarSensitivityTimeControlLevelTimeseriesObject )target;
            destination._radar = _radar;
        }

        public override bool Equals(BaseData<Kind>? other)
        {
            if (base.Equals(other))
            {
                var obj = ( RadarSensitivityTimeControlLevelTimeseriesObject )other;
                if( obj._radar != _radar )
                {
                    return false;
                }
                return true;
            }
            return false;
        }

        public override bool IsOfType(Kind objectType)
        {
            if( objectType == Kind.RadarSensitivityTimeControlLevelTimeseries )
            {
                return true;
            }
            return base.IsOfType( objectType );
        }

        public Guid Radar
        {
            get => _radar;
            set
            {
                if( _radar != value )
                {
                    _radar = value;
                    OnPropertyChanged( );
                }
            }
        }

        public override void WriteTo( [ DisallowNull ] BinaryWriter destination )
        {
            base.WriteTo( destination );
            destination.Write( _radar );
        }

        public override void ReadFrom([DisallowNull] BinaryReader source)
        {
            base.ReadFrom( source );
            _radar = source.ReadGuid( );
        }

    }
    public class RadarTuningTimeseriesObject : Int32TimeseriesObject
    {
        Guid _radar;
        public RadarTuningTimeseriesObject( )
        {
        }

        public RadarTuningTimeseriesObject( ObjectState objectState, Guid id, long rowVersion, Guid? catalog, string name, TimeSpan maxRetention, Guid radar )
            : base( objectState, id, rowVersion, catalog, name, maxRetention )
        {
            _radar = radar;
        }

        public override Kind GetObjectType()
        {
            return Kind.RadarTuningTimeseries;
        }

        public override BaseData<Kind> Create()
        {
            return new RadarTuningTimeseriesObject( );
        }

        public override void AssignTo( BaseData<Kind> target )
        {
            base.AssignTo( target );
            var destination = ( RadarTuningTimeseriesObject )target;
            destination._radar = _radar;
        }

        public override bool Equals(BaseData<Kind>? other)
        {
            if (base.Equals(other))
            {
                var obj = ( RadarTuningTimeseriesObject )other;
                if( obj._radar != _radar )
                {
                    return false;
                }
                return true;
            }
            return false;
        }

        public override bool IsOfType(Kind objectType)
        {
            if( objectType == Kind.RadarTuningTimeseries )
            {
                return true;
            }
            return base.IsOfType( objectType );
        }

        public Guid Radar
        {
            get => _radar;
            set
            {
                if( _radar != value )
                {
                    _radar = value;
                    OnPropertyChanged( );
                }
            }
        }

        public override void WriteTo( [ DisallowNull ] BinaryWriter destination )
        {
            base.WriteTo( destination );
            destination.Write( _radar );
        }

        public override void ReadFrom([DisallowNull] BinaryReader source)
        {
            base.ReadFrom( source );
            _radar = source.ReadGuid( );
        }

    }
    public class VesselPersonsOnBoardTimeseriesObject : Int32TimeseriesObject
    {
        Guid _vessel;
        public VesselPersonsOnBoardTimeseriesObject( )
        {
        }

        public VesselPersonsOnBoardTimeseriesObject( ObjectState objectState, Guid id, long rowVersion, Guid? catalog, string name, TimeSpan maxRetention, Guid vessel )
            : base( objectState, id, rowVersion, catalog, name, maxRetention )
        {
            _vessel = vessel;
        }

        public override Kind GetObjectType()
        {
            return Kind.VesselPersonsOnBoardTimeseries;
        }

        public override BaseData<Kind> Create()
        {
            return new VesselPersonsOnBoardTimeseriesObject( );
        }

        public override void AssignTo( BaseData<Kind> target )
        {
            base.AssignTo( target );
            var destination = ( VesselPersonsOnBoardTimeseriesObject )target;
            destination._vessel = _vessel;
        }

        public override bool Equals(BaseData<Kind>? other)
        {
            if (base.Equals(other))
            {
                var obj = ( VesselPersonsOnBoardTimeseriesObject )other;
                if( obj._vessel != _vessel )
                {
                    return false;
                }
                return true;
            }
            return false;
        }

        public override bool IsOfType(Kind objectType)
        {
            if( objectType == Kind.VesselPersonsOnBoardTimeseries )
            {
                return true;
            }
            return base.IsOfType( objectType );
        }

        public Guid Vessel
        {
            get => _vessel;
            set
            {
                if( _vessel != value )
                {
                    _vessel = value;
                    OnPropertyChanged( );
                }
            }
        }

        public override void WriteTo( [ DisallowNull ] BinaryWriter destination )
        {
            base.WriteTo( destination );
            destination.Write( _vessel );
        }

        public override void ReadFrom([DisallowNull] BinaryReader source)
        {
            base.ReadFrom( source );
            _vessel = source.ReadGuid( );
        }

    }
    public class Int64TimeseriesObject : TimeseriesObject
    {
        public Int64TimeseriesObject( )
        {
        }

        public Int64TimeseriesObject( ObjectState objectState, Guid id, long rowVersion, Guid? catalog, string name, TimeSpan maxRetention )
            : base( objectState, id, rowVersion, catalog, name, maxRetention )
        {
        }

        public override Kind GetObjectType()
        {
            return Kind.Int64Timeseries;
        }

        public override BaseData<Kind> Create()
        {
            return new Int64TimeseriesObject( );
        }

        public override bool IsOfType(Kind objectType)
        {
            if( objectType == Kind.Int64Timeseries )
            {
                return true;
            }
            return base.IsOfType( objectType );
        }

    }
    public class Position2DTimeseriesObject : TimeseriesObject
    {
        public Position2DTimeseriesObject( )
        {
        }

        public Position2DTimeseriesObject( ObjectState objectState, Guid id, long rowVersion, Guid? catalog, string name, TimeSpan maxRetention )
            : base( objectState, id, rowVersion, catalog, name, maxRetention )
        {
        }

        public override Kind GetObjectType()
        {
            return Kind.Position2DTimeseries;
        }

        public override BaseData<Kind> Create()
        {
            return new Position2DTimeseriesObject( );
        }

        public override bool IsOfType(Kind objectType)
        {
            if( objectType == Kind.Position2DTimeseries )
            {
                return true;
            }
            return base.IsOfType( objectType );
        }

    }
    public class Position3DTimeseriesObject : TimeseriesObject
    {
        public Position3DTimeseriesObject( )
        {
        }

        public Position3DTimeseriesObject( ObjectState objectState, Guid id, long rowVersion, Guid? catalog, string name, TimeSpan maxRetention )
            : base( objectState, id, rowVersion, catalog, name, maxRetention )
        {
        }

        public override Kind GetObjectType()
        {
            return Kind.Position3DTimeseries;
        }

        public override BaseData<Kind> Create()
        {
            return new Position3DTimeseriesObject( );
        }

        public override bool IsOfType(Kind objectType)
        {
            if( objectType == Kind.Position3DTimeseries )
            {
                return true;
            }
            return base.IsOfType( objectType );
        }

    }
    public class ReferenceTimeseriesObject : TimeseriesObject
    {
        public ReferenceTimeseriesObject( )
        {
        }

        public ReferenceTimeseriesObject( ObjectState objectState, Guid id, long rowVersion, Guid? catalog, string name, TimeSpan maxRetention )
            : base( objectState, id, rowVersion, catalog, name, maxRetention )
        {
        }

        public override Kind GetObjectType()
        {
            return Kind.ReferenceTimeseries;
        }

        public override BaseData<Kind> Create()
        {
            return new ReferenceTimeseriesObject( );
        }

        public override bool IsOfType(Kind objectType)
        {
            if( objectType == Kind.ReferenceTimeseries )
            {
                return true;
            }
            return base.IsOfType( objectType );
        }

    }
    public class SByteTimeseriesObject : TimeseriesObject
    {
        public SByteTimeseriesObject( )
        {
        }

        public SByteTimeseriesObject( ObjectState objectState, Guid id, long rowVersion, Guid? catalog, string name, TimeSpan maxRetention )
            : base( objectState, id, rowVersion, catalog, name, maxRetention )
        {
        }

        public override Kind GetObjectType()
        {
            return Kind.SByteTimeseries;
        }

        public override BaseData<Kind> Create()
        {
            return new SByteTimeseriesObject( );
        }

        public override bool IsOfType(Kind objectType)
        {
            if( objectType == Kind.SByteTimeseries )
            {
                return true;
            }
            return base.IsOfType( objectType );
        }

    }
    public class SingleTimeseriesObject : TimeseriesObject
    {
        public SingleTimeseriesObject( )
        {
        }

        public SingleTimeseriesObject( ObjectState objectState, Guid id, long rowVersion, Guid? catalog, string name, TimeSpan maxRetention )
            : base( objectState, id, rowVersion, catalog, name, maxRetention )
        {
        }

        public override Kind GetObjectType()
        {
            return Kind.SingleTimeseries;
        }

        public override BaseData<Kind> Create()
        {
            return new SingleTimeseriesObject( );
        }

        public override bool IsOfType(Kind objectType)
        {
            if( objectType == Kind.SingleTimeseries )
            {
                return true;
            }
            return base.IsOfType( objectType );
        }

    }
    public class StringTimeseriesObject : TimeseriesObject
    {
        public StringTimeseriesObject( )
        {
        }

        public StringTimeseriesObject( ObjectState objectState, Guid id, long rowVersion, Guid? catalog, string name, TimeSpan maxRetention )
            : base( objectState, id, rowVersion, catalog, name, maxRetention )
        {
        }

        public override Kind GetObjectType()
        {
            return Kind.StringTimeseries;
        }

        public override BaseData<Kind> Create()
        {
            return new StringTimeseriesObject( );
        }

        public override bool IsOfType(Kind objectType)
        {
            if( objectType == Kind.StringTimeseries )
            {
                return true;
            }
            return base.IsOfType( objectType );
        }

    }
    public class TimeSpanTimeseriesObject : TimeseriesObject
    {
        public TimeSpanTimeseriesObject( )
        {
        }

        public TimeSpanTimeseriesObject( ObjectState objectState, Guid id, long rowVersion, Guid? catalog, string name, TimeSpan maxRetention )
            : base( objectState, id, rowVersion, catalog, name, maxRetention )
        {
        }

        public override Kind GetObjectType()
        {
            return Kind.TimeSpanTimeseries;
        }

        public override BaseData<Kind> Create()
        {
            return new TimeSpanTimeseriesObject( );
        }

        public override bool IsOfType(Kind objectType)
        {
            if( objectType == Kind.TimeSpanTimeseries )
            {
                return true;
            }
            return base.IsOfType( objectType );
        }

    }
    public class UInt16TimeseriesObject : TimeseriesObject
    {
        public UInt16TimeseriesObject( )
        {
        }

        public UInt16TimeseriesObject( ObjectState objectState, Guid id, long rowVersion, Guid? catalog, string name, TimeSpan maxRetention )
            : base( objectState, id, rowVersion, catalog, name, maxRetention )
        {
        }

        public override Kind GetObjectType()
        {
            return Kind.UInt16Timeseries;
        }

        public override BaseData<Kind> Create()
        {
            return new UInt16TimeseriesObject( );
        }

        public override bool IsOfType(Kind objectType)
        {
            if( objectType == Kind.UInt16Timeseries )
            {
                return true;
            }
            return base.IsOfType( objectType );
        }

    }
    public class UInt32TimeseriesObject : TimeseriesObject
    {
        public UInt32TimeseriesObject( )
        {
        }

        public UInt32TimeseriesObject( ObjectState objectState, Guid id, long rowVersion, Guid? catalog, string name, TimeSpan maxRetention )
            : base( objectState, id, rowVersion, catalog, name, maxRetention )
        {
        }

        public override Kind GetObjectType()
        {
            return Kind.UInt32Timeseries;
        }

        public override BaseData<Kind> Create()
        {
            return new UInt32TimeseriesObject( );
        }

        public override bool IsOfType(Kind objectType)
        {
            if( objectType == Kind.UInt32Timeseries )
            {
                return true;
            }
            return base.IsOfType( objectType );
        }

    }
    public class RadomeStatusTimeseriesObject : UInt32TimeseriesObject
    {
        Guid _radome;
        public RadomeStatusTimeseriesObject( )
        {
        }

        public RadomeStatusTimeseriesObject( ObjectState objectState, Guid id, long rowVersion, Guid? catalog, string name, TimeSpan maxRetention, Guid radome )
            : base( objectState, id, rowVersion, catalog, name, maxRetention )
        {
            _radome = radome;
        }

        public override Kind GetObjectType()
        {
            return Kind.RadomeStatusTimeseries;
        }

        public override BaseData<Kind> Create()
        {
            return new RadomeStatusTimeseriesObject( );
        }

        public override void AssignTo( BaseData<Kind> target )
        {
            base.AssignTo( target );
            var destination = ( RadomeStatusTimeseriesObject )target;
            destination._radome = _radome;
        }

        public override bool Equals(BaseData<Kind>? other)
        {
            if (base.Equals(other))
            {
                var obj = ( RadomeStatusTimeseriesObject )other;
                if( obj._radome != _radome )
                {
                    return false;
                }
                return true;
            }
            return false;
        }

        public override bool IsOfType(Kind objectType)
        {
            if( objectType == Kind.RadomeStatusTimeseries )
            {
                return true;
            }
            return base.IsOfType( objectType );
        }

        public Guid Radome
        {
            get => _radome;
            set
            {
                if( _radome != value )
                {
                    _radome = value;
                    OnPropertyChanged( );
                }
            }
        }

        public override void WriteTo( [ DisallowNull ] BinaryWriter destination )
        {
            base.WriteTo( destination );
            destination.Write( _radome );
        }

        public override void ReadFrom([DisallowNull] BinaryReader source)
        {
            base.ReadFrom( source );
            _radome = source.ReadGuid( );
        }

    }
    public class UInt64TimeseriesObject : TimeseriesObject
    {
        public UInt64TimeseriesObject( )
        {
        }

        public UInt64TimeseriesObject( ObjectState objectState, Guid id, long rowVersion, Guid? catalog, string name, TimeSpan maxRetention )
            : base( objectState, id, rowVersion, catalog, name, maxRetention )
        {
        }

        public override Kind GetObjectType()
        {
            return Kind.UInt64Timeseries;
        }

        public override BaseData<Kind> Create()
        {
            return new UInt64TimeseriesObject( );
        }

        public override bool IsOfType(Kind objectType)
        {
            if( objectType == Kind.UInt64Timeseries )
            {
                return true;
            }
            return base.IsOfType( objectType );
        }

    }
    public class TimeseriesCatalogObject : TimeseriesCatalogElementObject
    {
        public TimeseriesCatalogObject( )
        {
        }

        public TimeseriesCatalogObject( ObjectState objectState, Guid id, long rowVersion, Guid? catalog, string name )
            : base( objectState, id, rowVersion, catalog, name )
        {
        }

        public override Kind GetObjectType()
        {
            return Kind.TimeseriesCatalog;
        }

        public override BaseData<Kind> Create()
        {
            return new TimeseriesCatalogObject( );
        }

        public override bool IsOfType(Kind objectType)
        {
            if( objectType == Kind.TimeseriesCatalog )
            {
                return true;
            }
            return base.IsOfType( objectType );
        }

    }
    public class TimeseriesInfoObject : BaseDataGuid<Kind>
    {
        long _rowVersion = 0;
        DateTime? _firstTimestamp;
        DateTime? _lastTimestamp;
        long _count = 0;
        public TimeseriesInfoObject( )
        {
        }

        public TimeseriesInfoObject( ObjectState objectState, Guid id, long rowVersion, DateTime? firstTimestamp, DateTime? lastTimestamp, long count )
            : base( objectState, id )
        {
            _rowVersion = rowVersion;
            _firstTimestamp = firstTimestamp;
            _lastTimestamp = lastTimestamp;
            _count = count;
        }

        public override Kind GetObjectType()
        {
            return Kind.TimeseriesInfo;
        }

        public override BaseData<Kind> Create()
        {
            return new TimeseriesInfoObject( );
        }

        public override void AssignTo( BaseData<Kind> target )
        {
            base.AssignTo( target );
            var destination = ( TimeseriesInfoObject )target;
            destination._rowVersion = _rowVersion;
            destination._firstTimestamp = _firstTimestamp;
            destination._lastTimestamp = _lastTimestamp;
            destination._count = _count;
        }

        public override bool Equals(BaseData<Kind>? other)
        {
            if (base.Equals(other))
            {
                var obj = ( TimeseriesInfoObject )other;
                if( obj._rowVersion != _rowVersion )
                {
                    return false;
                }
                if( obj._firstTimestamp != _firstTimestamp )
                {
                    return false;
                }
                if( obj._lastTimestamp != _lastTimestamp )
                {
                    return false;
                }
                if( obj._count != _count )
                {
                    return false;
                }
                return true;
            }
            return false;
        }

        public override bool IsOfType(Kind objectType)
        {
            if( objectType == Kind.TimeseriesInfo )
            {
                return true;
            }
            return base.IsOfType( objectType );
        }

        public long RowVersion
        {
            get => _rowVersion;
            set
            {
                if( _rowVersion != value )
                {
                    _rowVersion = value;
                    OnPropertyChanged( );
                }
            }
        }
        public DateTime? FirstTimestamp
        {
            get => _firstTimestamp;
            set
            {
                if( _firstTimestamp != value )
                {
                    _firstTimestamp = value;
                    OnPropertyChanged( );
                }
            }
        }
        public DateTime? LastTimestamp
        {
            get => _lastTimestamp;
            set
            {
                if( _lastTimestamp != value )
                {
                    _lastTimestamp = value;
                    OnPropertyChanged( );
                }
            }
        }
        public long Count
        {
            get => _count;
            set
            {
                if( _count != value )
                {
                    _count = value;
                    OnPropertyChanged( );
                }
            }
        }

        public override void WriteTo( [ DisallowNull ] BinaryWriter destination )
        {
            base.WriteTo( destination );
            destination.Write( _rowVersion );
            destination.Write( _firstTimestamp );
            destination.Write( _lastTimestamp );
            destination.Write( _count );
        }

        public override void ReadFrom([DisallowNull] BinaryReader source)
        {
            base.ReadFrom( source );
            _rowVersion = source.ReadInt64( );
            _firstTimestamp = source.ReadNullableDateTime( );
            _lastTimestamp = source.ReadNullableDateTime( );
            _count = source.ReadInt64( );
        }

    }
    public class TimeSpanTimeseriesValueObject : BaseDataGuid<Kind>
    {
        long _rowVersion = 0;
        Guid _timeseries;
        DateTime _timestamp;
        TimeSpan? _value;
        public TimeSpanTimeseriesValueObject( )
        {
        }

        public TimeSpanTimeseriesValueObject( ObjectState objectState, Guid id, long rowVersion, Guid timeseries, DateTime timestamp, TimeSpan? value__ )
            : base( objectState, id )
        {
            _rowVersion = rowVersion;
            _timeseries = timeseries;
            _timestamp = timestamp;
            _value = value__;
        }

        public override Kind GetObjectType()
        {
            return Kind.TimeSpanTimeseriesValue;
        }

        public override BaseData<Kind> Create()
        {
            return new TimeSpanTimeseriesValueObject( );
        }

        public override void AssignTo( BaseData<Kind> target )
        {
            base.AssignTo( target );
            var destination = ( TimeSpanTimeseriesValueObject )target;
            destination._rowVersion = _rowVersion;
            destination._timeseries = _timeseries;
            destination._timestamp = _timestamp;
            destination._value = _value;
        }

        public override bool Equals(BaseData<Kind>? other)
        {
            if (base.Equals(other))
            {
                var obj = ( TimeSpanTimeseriesValueObject )other;
                if( obj._rowVersion != _rowVersion )
                {
                    return false;
                }
                if( obj._timeseries != _timeseries )
                {
                    return false;
                }
                if( obj._timestamp != _timestamp )
                {
                    return false;
                }
                if( obj._value != _value )
                {
                    return false;
                }
                return true;
            }
            return false;
        }

        public override bool IsOfType(Kind objectType)
        {
            if( objectType == Kind.TimeSpanTimeseriesValue )
            {
                return true;
            }
            return base.IsOfType( objectType );
        }

        public long RowVersion
        {
            get => _rowVersion;
            set
            {
                if( _rowVersion != value )
                {
                    _rowVersion = value;
                    OnPropertyChanged( );
                }
            }
        }
        public Guid Timeseries
        {
            get => _timeseries;
            set
            {
                if( _timeseries != value )
                {
                    _timeseries = value;
                    OnPropertyChanged( );
                }
            }
        }
        public DateTime Timestamp
        {
            get => _timestamp;
            set
            {
                if( _timestamp != value )
                {
                    _timestamp = value;
                    OnPropertyChanged( );
                }
            }
        }
        public TimeSpan? Value
        {
            get => _value;
            set
            {
                if( _value != value )
                {
                    _value = value;
                    OnPropertyChanged( );
                }
            }
        }

        public override void WriteTo( [ DisallowNull ] BinaryWriter destination )
        {
            base.WriteTo( destination );
            destination.Write( _rowVersion );
            destination.Write( _timeseries );
            destination.Write( _timestamp );
            destination.Write( _value );
        }

        public override void ReadFrom([DisallowNull] BinaryReader source)
        {
            base.ReadFrom( source );
            _rowVersion = source.ReadInt64( );
            _timeseries = source.ReadGuid( );
            _timestamp = source.ReadDateTime( );
            _value = source.ReadNullableTimeSpan( );
        }

    }
    public class TrackableItemTrackLinkObject : BaseDataGuid<Kind>
    {
        long _rowVersion = 0;
        Guid _item;
        Guid _track;
        DateTime _start;
        DateTime? _end;
        public TrackableItemTrackLinkObject( )
        {
        }

        public TrackableItemTrackLinkObject( ObjectState objectState, Guid id, long rowVersion, Guid item, Guid track, DateTime start, DateTime? end )
            : base( objectState, id )
        {
            _rowVersion = rowVersion;
            _item = item;
            _track = track;
            _start = start;
            _end = end;
        }

        public override Kind GetObjectType()
        {
            return Kind.TrackableItemTrackLink;
        }

        public override BaseData<Kind> Create()
        {
            return new TrackableItemTrackLinkObject( );
        }

        public override void AssignTo( BaseData<Kind> target )
        {
            base.AssignTo( target );
            var destination = ( TrackableItemTrackLinkObject )target;
            destination._rowVersion = _rowVersion;
            destination._item = _item;
            destination._track = _track;
            destination._start = _start;
            destination._end = _end;
        }

        public override bool Equals(BaseData<Kind>? other)
        {
            if (base.Equals(other))
            {
                var obj = ( TrackableItemTrackLinkObject )other;
                if( obj._rowVersion != _rowVersion )
                {
                    return false;
                }
                if( obj._item != _item )
                {
                    return false;
                }
                if( obj._track != _track )
                {
                    return false;
                }
                if( obj._start != _start )
                {
                    return false;
                }
                if( obj._end != _end )
                {
                    return false;
                }
                return true;
            }
            return false;
        }

        public override bool IsOfType(Kind objectType)
        {
            if( objectType == Kind.TrackableItemTrackLink )
            {
                return true;
            }
            return base.IsOfType( objectType );
        }

        public long RowVersion
        {
            get => _rowVersion;
            set
            {
                if( _rowVersion != value )
                {
                    _rowVersion = value;
                    OnPropertyChanged( );
                }
            }
        }
        public Guid Item
        {
            get => _item;
            set
            {
                if( _item != value )
                {
                    _item = value;
                    OnPropertyChanged( );
                }
            }
        }
        public Guid Track
        {
            get => _track;
            set
            {
                if( _track != value )
                {
                    _track = value;
                    OnPropertyChanged( );
                }
            }
        }
        public DateTime Start
        {
            get => _start;
            set
            {
                if( _start != value )
                {
                    _start = value;
                    OnPropertyChanged( );
                }
            }
        }
        public DateTime? End
        {
            get => _end;
            set
            {
                if( _end != value )
                {
                    _end = value;
                    OnPropertyChanged( );
                }
            }
        }

        public override void WriteTo( [ DisallowNull ] BinaryWriter destination )
        {
            base.WriteTo( destination );
            destination.Write( _rowVersion );
            destination.Write( _item );
            destination.Write( _track );
            destination.Write( _start );
            destination.Write( _end );
        }

        public override void ReadFrom([DisallowNull] BinaryReader source)
        {
            base.ReadFrom( source );
            _rowVersion = source.ReadInt64( );
            _item = source.ReadGuid( );
            _track = source.ReadGuid( );
            _start = source.ReadDateTime( );
            _end = source.ReadNullableDateTime( );
        }

    }
    public abstract class TrackBaseObject : BaseDataGuid<Kind>
    {
        long _rowVersion = 0;
        Guid _tracker;
        long _trackNumber = 0;
        DateTime _timestamp;
        protected TrackBaseObject( )
        {
        }

        protected TrackBaseObject( ObjectState objectState, Guid id, long rowVersion, Guid tracker, long trackNumber, DateTime timestamp )
            : base( objectState, id )
        {
            _rowVersion = rowVersion;
            _tracker = tracker;
            _trackNumber = trackNumber;
            _timestamp = timestamp;
        }

        public override void AssignTo( BaseData<Kind> target )
        {
            base.AssignTo( target );
            var destination = ( TrackBaseObject )target;
            destination._rowVersion = _rowVersion;
            destination._tracker = _tracker;
            destination._trackNumber = _trackNumber;
            destination._timestamp = _timestamp;
        }

        public override bool Equals(BaseData<Kind>? other)
        {
            if (base.Equals(other))
            {
                var obj = ( TrackBaseObject )other;
                if( obj._rowVersion != _rowVersion )
                {
                    return false;
                }
                if( obj._tracker != _tracker )
                {
                    return false;
                }
                if( obj._trackNumber != _trackNumber )
                {
                    return false;
                }
                if( obj._timestamp != _timestamp )
                {
                    return false;
                }
                return true;
            }
            return false;
        }

        public override bool IsOfType(Kind objectType)
        {
            if( objectType == Kind.TrackBase )
            {
                return true;
            }
            return base.IsOfType( objectType );
        }

        public long RowVersion
        {
            get => _rowVersion;
            set
            {
                if( _rowVersion != value )
                {
                    _rowVersion = value;
                    OnPropertyChanged( );
                }
            }
        }
        public Guid Tracker
        {
            get => _tracker;
            set
            {
                if( _tracker != value )
                {
                    _tracker = value;
                    OnPropertyChanged( );
                }
            }
        }
        public long TrackNumber
        {
            get => _trackNumber;
            set
            {
                if( _trackNumber != value )
                {
                    _trackNumber = value;
                    OnPropertyChanged( );
                }
            }
        }
        public DateTime Timestamp
        {
            get => _timestamp;
            set
            {
                if( _timestamp != value )
                {
                    _timestamp = value;
                    OnPropertyChanged( );
                }
            }
        }

        public override void WriteTo( [ DisallowNull ] BinaryWriter destination )
        {
            base.WriteTo( destination );
            destination.Write( _rowVersion );
            destination.Write( _tracker );
            destination.Write( _trackNumber );
            destination.Write( _timestamp );
        }

        public override void ReadFrom([DisallowNull] BinaryReader source)
        {
            base.ReadFrom( source );
            _rowVersion = source.ReadInt64( );
            _tracker = source.ReadGuid( );
            _trackNumber = source.ReadInt64( );
            _timestamp = source.ReadDateTime( );
        }

    }
    public class TrackObject : TrackBaseObject
    {
        public TrackObject( )
        {
        }

        public TrackObject( ObjectState objectState, Guid id, long rowVersion, Guid tracker, long trackNumber, DateTime timestamp )
            : base( objectState, id, rowVersion, tracker, trackNumber, timestamp )
        {
        }

        public override Kind GetObjectType()
        {
            return Kind.Track;
        }

        public override BaseData<Kind> Create()
        {
            return new TrackObject( );
        }

        public override bool IsOfType(Kind objectType)
        {
            if( objectType == Kind.Track )
            {
                return true;
            }
            return base.IsOfType( objectType );
        }

    }
    public class Track3DObject : TrackBaseObject
    {
        public Track3DObject( )
        {
        }

        public Track3DObject( ObjectState objectState, Guid id, long rowVersion, Guid tracker, long trackNumber, DateTime timestamp )
            : base( objectState, id, rowVersion, tracker, trackNumber, timestamp )
        {
        }

        public override Kind GetObjectType()
        {
            return Kind.Track3D;
        }

        public override BaseData<Kind> Create()
        {
            return new Track3DObject( );
        }

        public override bool IsOfType(Kind objectType)
        {
            if( objectType == Kind.Track3D )
            {
                return true;
            }
            return base.IsOfType( objectType );
        }

    }
    public class TrackerFilterParametersObject : BaseDataGuid<Kind>
    {
        long _rowVersion = 0;
        Guid _tracker;
        string _name = string.Empty;
        public TrackerFilterParametersObject( )
        {
        }

        public TrackerFilterParametersObject( ObjectState objectState, Guid id, long rowVersion, Guid tracker, string name )
            : base( objectState, id )
        {
            _rowVersion = rowVersion;
            _tracker = tracker;
            _name = name;
        }

        public override Kind GetObjectType()
        {
            return Kind.TrackerFilterParameters;
        }

        public override BaseData<Kind> Create()
        {
            return new TrackerFilterParametersObject( );
        }

        public override void AssignTo( BaseData<Kind> target )
        {
            base.AssignTo( target );
            var destination = ( TrackerFilterParametersObject )target;
            destination._rowVersion = _rowVersion;
            destination._tracker = _tracker;
            destination._name = _name;
        }

        public override bool Equals(BaseData<Kind>? other)
        {
            if (base.Equals(other))
            {
                var obj = ( TrackerFilterParametersObject )other;
                if( obj._rowVersion != _rowVersion )
                {
                    return false;
                }
                if( obj._tracker != _tracker )
                {
                    return false;
                }
                if( obj._name != _name )
                {
                    return false;
                }
                return true;
            }
            return false;
        }

        public override bool IsOfType(Kind objectType)
        {
            if( objectType == Kind.TrackerFilterParameters )
            {
                return true;
            }
            return base.IsOfType( objectType );
        }

        public long RowVersion
        {
            get => _rowVersion;
            set
            {
                if( _rowVersion != value )
                {
                    _rowVersion = value;
                    OnPropertyChanged( );
                }
            }
        }
        public Guid Tracker
        {
            get => _tracker;
            set
            {
                if( _tracker != value )
                {
                    _tracker = value;
                    OnPropertyChanged( );
                }
            }
        }
        public string Name
        {
            get => _name;
            set
            {
                if( _name != value )
                {
                    _name = value;
                    OnPropertyChanged( );
                }
            }
        }

        public override void WriteTo( [ DisallowNull ] BinaryWriter destination )
        {
            base.WriteTo( destination );
            destination.Write( _rowVersion );
            destination.Write( _tracker );
            destination.Write( _name );
        }

        public override void ReadFrom([DisallowNull] BinaryReader source)
        {
            base.ReadFrom( source );
            _rowVersion = source.ReadInt64( );
            _tracker = source.ReadGuid( );
            _name = source.ReadString( );
        }

    }
    public class TrackerFilterParametersConfigurationObject : BaseDataGuid<Kind>
    {
        long _rowVersion = 0;
        Guid _parameters;
        DateTime _timestamp;
        bool _useNaivePredictor = false;
        int _numberOfPoints = 0;
        int _windowSize = 0;
        int _stabilizeCount = 0;
        int _maxBadPoints = 0;
        Types.TrackerFilterModelType _modelType = Types.TrackerFilterModelType.Unknown;
        double _sigmaR = 0.0;
        double _sigmaAcc = 0.0;
        double _tauVel = 0.0;
        double _tauAcc = 0.0;
        double _deltaRMin = 0.0;
        double _deltaVMax = 0.0;
        double _deltaAMax = 0.0;
        public TrackerFilterParametersConfigurationObject( )
        {
        }

        public TrackerFilterParametersConfigurationObject( ObjectState objectState, Guid id, long rowVersion, Guid parameters, DateTime timestamp, bool useNaivePredictor, int numberOfPoints, int windowSize, int stabilizeCount, int maxBadPoints, Types.TrackerFilterModelType modelType, double sigmaR, double sigmaAcc, double tauVel, double tauAcc, double deltaRMin, double deltaVMax, double deltaAMax )
            : base( objectState, id )
        {
            _rowVersion = rowVersion;
            _parameters = parameters;
            _timestamp = timestamp;
            _useNaivePredictor = useNaivePredictor;
            _numberOfPoints = numberOfPoints;
            _windowSize = windowSize;
            _stabilizeCount = stabilizeCount;
            _maxBadPoints = maxBadPoints;
            _modelType = modelType;
            _sigmaR = sigmaR;
            _sigmaAcc = sigmaAcc;
            _tauVel = tauVel;
            _tauAcc = tauAcc;
            _deltaRMin = deltaRMin;
            _deltaVMax = deltaVMax;
            _deltaAMax = deltaAMax;
        }

        public override Kind GetObjectType()
        {
            return Kind.TrackerFilterParametersConfiguration;
        }

        public override BaseData<Kind> Create()
        {
            return new TrackerFilterParametersConfigurationObject( );
        }

        public override void AssignTo( BaseData<Kind> target )
        {
            base.AssignTo( target );
            var destination = ( TrackerFilterParametersConfigurationObject )target;
            destination._rowVersion = _rowVersion;
            destination._parameters = _parameters;
            destination._timestamp = _timestamp;
            destination._useNaivePredictor = _useNaivePredictor;
            destination._numberOfPoints = _numberOfPoints;
            destination._windowSize = _windowSize;
            destination._stabilizeCount = _stabilizeCount;
            destination._maxBadPoints = _maxBadPoints;
            destination._modelType = _modelType;
            destination._sigmaR = _sigmaR;
            destination._sigmaAcc = _sigmaAcc;
            destination._tauVel = _tauVel;
            destination._tauAcc = _tauAcc;
            destination._deltaRMin = _deltaRMin;
            destination._deltaVMax = _deltaVMax;
            destination._deltaAMax = _deltaAMax;
        }

        public override bool Equals(BaseData<Kind>? other)
        {
            if (base.Equals(other))
            {
                var obj = ( TrackerFilterParametersConfigurationObject )other;
                if( obj._rowVersion != _rowVersion )
                {
                    return false;
                }
                if( obj._parameters != _parameters )
                {
                    return false;
                }
                if( obj._timestamp != _timestamp )
                {
                    return false;
                }
                if( obj._useNaivePredictor != _useNaivePredictor )
                {
                    return false;
                }
                if( obj._numberOfPoints != _numberOfPoints )
                {
                    return false;
                }
                if( obj._windowSize != _windowSize )
                {
                    return false;
                }
                if( obj._stabilizeCount != _stabilizeCount )
                {
                    return false;
                }
                if( obj._maxBadPoints != _maxBadPoints )
                {
                    return false;
                }
                if( obj._modelType != _modelType )
                {
                    return false;
                }
                if( obj._sigmaR != _sigmaR )
                {
                    return false;
                }
                if( obj._sigmaAcc != _sigmaAcc )
                {
                    return false;
                }
                if( obj._tauVel != _tauVel )
                {
                    return false;
                }
                if( obj._tauAcc != _tauAcc )
                {
                    return false;
                }
                if( obj._deltaRMin != _deltaRMin )
                {
                    return false;
                }
                if( obj._deltaVMax != _deltaVMax )
                {
                    return false;
                }
                if( obj._deltaAMax != _deltaAMax )
                {
                    return false;
                }
                return true;
            }
            return false;
        }

        public override bool IsOfType(Kind objectType)
        {
            if( objectType == Kind.TrackerFilterParametersConfiguration )
            {
                return true;
            }
            return base.IsOfType( objectType );
        }

        public long RowVersion
        {
            get => _rowVersion;
            set
            {
                if( _rowVersion != value )
                {
                    _rowVersion = value;
                    OnPropertyChanged( );
                }
            }
        }
        public Guid Parameters
        {
            get => _parameters;
            set
            {
                if( _parameters != value )
                {
                    _parameters = value;
                    OnPropertyChanged( );
                }
            }
        }
        public DateTime Timestamp
        {
            get => _timestamp;
            set
            {
                if( _timestamp != value )
                {
                    _timestamp = value;
                    OnPropertyChanged( );
                }
            }
        }
        public bool UseNaivePredictor
        {
            get => _useNaivePredictor;
            set
            {
                if( _useNaivePredictor != value )
                {
                    _useNaivePredictor = value;
                    OnPropertyChanged( );
                }
            }
        }
        public int NumberOfPoints
        {
            get => _numberOfPoints;
            set
            {
                if( _numberOfPoints != value )
                {
                    _numberOfPoints = value;
                    OnPropertyChanged( );
                }
            }
        }
        public int WindowSize
        {
            get => _windowSize;
            set
            {
                if( _windowSize != value )
                {
                    _windowSize = value;
                    OnPropertyChanged( );
                }
            }
        }
        public int StabilizeCount
        {
            get => _stabilizeCount;
            set
            {
                if( _stabilizeCount != value )
                {
                    _stabilizeCount = value;
                    OnPropertyChanged( );
                }
            }
        }
        public int MaxBadPoints
        {
            get => _maxBadPoints;
            set
            {
                if( _maxBadPoints != value )
                {
                    _maxBadPoints = value;
                    OnPropertyChanged( );
                }
            }
        }
        public Types.TrackerFilterModelType ModelType
        {
            get => _modelType;
            set
            {
                if( _modelType != value )
                {
                    _modelType = value;
                    OnPropertyChanged( );
                }
            }
        }
        public double SigmaR
        {
            get => _sigmaR;
            set
            {
                if( _sigmaR != value )
                {
                    _sigmaR = value;
                    OnPropertyChanged( );
                }
            }
        }
        public double SigmaAcc
        {
            get => _sigmaAcc;
            set
            {
                if( _sigmaAcc != value )
                {
                    _sigmaAcc = value;
                    OnPropertyChanged( );
                }
            }
        }
        public double TauVel
        {
            get => _tauVel;
            set
            {
                if( _tauVel != value )
                {
                    _tauVel = value;
                    OnPropertyChanged( );
                }
            }
        }
        public double TauAcc
        {
            get => _tauAcc;
            set
            {
                if( _tauAcc != value )
                {
                    _tauAcc = value;
                    OnPropertyChanged( );
                }
            }
        }
        public double DeltaRMin
        {
            get => _deltaRMin;
            set
            {
                if( _deltaRMin != value )
                {
                    _deltaRMin = value;
                    OnPropertyChanged( );
                }
            }
        }
        public double DeltaVMax
        {
            get => _deltaVMax;
            set
            {
                if( _deltaVMax != value )
                {
                    _deltaVMax = value;
                    OnPropertyChanged( );
                }
            }
        }
        public double DeltaAMax
        {
            get => _deltaAMax;
            set
            {
                if( _deltaAMax != value )
                {
                    _deltaAMax = value;
                    OnPropertyChanged( );
                }
            }
        }

        public override void WriteTo( [ DisallowNull ] BinaryWriter destination )
        {
            base.WriteTo( destination );
            destination.Write( _rowVersion );
            destination.Write( _parameters );
            destination.Write( _timestamp );
            destination.Write( _useNaivePredictor );
            destination.Write( _numberOfPoints );
            destination.Write( _windowSize );
            destination.Write( _stabilizeCount );
            destination.Write( _maxBadPoints );
            destination.Write( _modelType );
            destination.Write( _sigmaR );
            destination.Write( _sigmaAcc );
            destination.Write( _tauVel );
            destination.Write( _tauAcc );
            destination.Write( _deltaRMin );
            destination.Write( _deltaVMax );
            destination.Write( _deltaAMax );
        }

        public override void ReadFrom([DisallowNull] BinaryReader source)
        {
            base.ReadFrom( source );
            _rowVersion = source.ReadInt64( );
            _parameters = source.ReadGuid( );
            _timestamp = source.ReadDateTime( );
            _useNaivePredictor = source.ReadBoolean( );
            _numberOfPoints = source.ReadInt32( );
            _windowSize = source.ReadInt32( );
            _stabilizeCount = source.ReadInt32( );
            _maxBadPoints = source.ReadInt32( );
            _modelType = source.ReadEnum<Types.TrackerFilterModelType>( );
            _sigmaR = source.ReadDouble( );
            _sigmaAcc = source.ReadDouble( );
            _tauVel = source.ReadDouble( );
            _tauAcc = source.ReadDouble( );
            _deltaRMin = source.ReadDouble( );
            _deltaVMax = source.ReadDouble( );
            _deltaAMax = source.ReadDouble( );
        }

    }
    public class TrackInfoObject : BaseDataGuid<Kind>
    {
        long _rowVersion = 0;
        DateTime? _firstTimestamp;
        DateTime? _lastTimestamp;
        long _count = 0;
        double? _northWestLatitude;
        double? _northWestLongitude;
        double? _southEastLatitude;
        double? _southEastLongitude;
        public TrackInfoObject( )
        {
        }

        public TrackInfoObject( ObjectState objectState, Guid id, long rowVersion, DateTime? firstTimestamp, DateTime? lastTimestamp, long count, double? northWestLatitude, double? northWestLongitude, double? southEastLatitude, double? southEastLongitude )
            : base( objectState, id )
        {
            _rowVersion = rowVersion;
            _firstTimestamp = firstTimestamp;
            _lastTimestamp = lastTimestamp;
            _count = count;
            _northWestLatitude = northWestLatitude;
            _northWestLongitude = northWestLongitude;
            _southEastLatitude = southEastLatitude;
            _southEastLongitude = southEastLongitude;
        }

        public override Kind GetObjectType()
        {
            return Kind.TrackInfo;
        }

        public override BaseData<Kind> Create()
        {
            return new TrackInfoObject( );
        }

        public override void AssignTo( BaseData<Kind> target )
        {
            base.AssignTo( target );
            var destination = ( TrackInfoObject )target;
            destination._rowVersion = _rowVersion;
            destination._firstTimestamp = _firstTimestamp;
            destination._lastTimestamp = _lastTimestamp;
            destination._count = _count;
            destination._northWestLatitude = _northWestLatitude;
            destination._northWestLongitude = _northWestLongitude;
            destination._southEastLatitude = _southEastLatitude;
            destination._southEastLongitude = _southEastLongitude;
        }

        public override bool Equals(BaseData<Kind>? other)
        {
            if (base.Equals(other))
            {
                var obj = ( TrackInfoObject )other;
                if( obj._rowVersion != _rowVersion )
                {
                    return false;
                }
                if( obj._firstTimestamp != _firstTimestamp )
                {
                    return false;
                }
                if( obj._lastTimestamp != _lastTimestamp )
                {
                    return false;
                }
                if( obj._count != _count )
                {
                    return false;
                }
                if( obj._northWestLatitude != _northWestLatitude )
                {
                    return false;
                }
                if( obj._northWestLongitude != _northWestLongitude )
                {
                    return false;
                }
                if( obj._southEastLatitude != _southEastLatitude )
                {
                    return false;
                }
                if( obj._southEastLongitude != _southEastLongitude )
                {
                    return false;
                }
                return true;
            }
            return false;
        }

        public override bool IsOfType(Kind objectType)
        {
            if( objectType == Kind.TrackInfo )
            {
                return true;
            }
            return base.IsOfType( objectType );
        }

        public long RowVersion
        {
            get => _rowVersion;
            set
            {
                if( _rowVersion != value )
                {
                    _rowVersion = value;
                    OnPropertyChanged( );
                }
            }
        }
        public DateTime? FirstTimestamp
        {
            get => _firstTimestamp;
            set
            {
                if( _firstTimestamp != value )
                {
                    _firstTimestamp = value;
                    OnPropertyChanged( );
                }
            }
        }
        public DateTime? LastTimestamp
        {
            get => _lastTimestamp;
            set
            {
                if( _lastTimestamp != value )
                {
                    _lastTimestamp = value;
                    OnPropertyChanged( );
                }
            }
        }
        public long Count
        {
            get => _count;
            set
            {
                if( _count != value )
                {
                    _count = value;
                    OnPropertyChanged( );
                }
            }
        }
        public double? NorthWestLatitude
        {
            get => _northWestLatitude;
            set
            {
                if( _northWestLatitude != value )
                {
                    _northWestLatitude = value;
                    OnPropertyChanged( );
                }
            }
        }
        public double? NorthWestLongitude
        {
            get => _northWestLongitude;
            set
            {
                if( _northWestLongitude != value )
                {
                    _northWestLongitude = value;
                    OnPropertyChanged( );
                }
            }
        }
        public double? SouthEastLatitude
        {
            get => _southEastLatitude;
            set
            {
                if( _southEastLatitude != value )
                {
                    _southEastLatitude = value;
                    OnPropertyChanged( );
                }
            }
        }
        public double? SouthEastLongitude
        {
            get => _southEastLongitude;
            set
            {
                if( _southEastLongitude != value )
                {
                    _southEastLongitude = value;
                    OnPropertyChanged( );
                }
            }
        }

        public override void WriteTo( [ DisallowNull ] BinaryWriter destination )
        {
            base.WriteTo( destination );
            destination.Write( _rowVersion );
            destination.Write( _firstTimestamp );
            destination.Write( _lastTimestamp );
            destination.Write( _count );
            destination.Write( _northWestLatitude );
            destination.Write( _northWestLongitude );
            destination.Write( _southEastLatitude );
            destination.Write( _southEastLongitude );
        }

        public override void ReadFrom([DisallowNull] BinaryReader source)
        {
            base.ReadFrom( source );
            _rowVersion = source.ReadInt64( );
            _firstTimestamp = source.ReadNullableDateTime( );
            _lastTimestamp = source.ReadNullableDateTime( );
            _count = source.ReadInt64( );
            _northWestLatitude = source.ReadNullableDouble( );
            _northWestLongitude = source.ReadNullableDouble( );
            _southEastLatitude = source.ReadNullableDouble( );
            _southEastLongitude = source.ReadNullableDouble( );
        }

    }
    public class TrackingServiceOptionsObject : BaseDataGuid<Kind>
    {
        long _rowVersion = 0;
        DateTime _timestamp;
        TimeSpan _timerInterval;
        TimeSpan _maxAgeOfCurrentTrackValue;
        double _falseThreshold = 0.0;
        double _distanceThreshold = 0.0;
        double _distanceUnmergeThreshold = 0.0;
        long _unmergeLatency = 0;
        bool _kalmanFiltering = false;
        double _maxCourseDeviation = 0.0;
        double _maxSpeedDeviation = 0.0;
        double _minimumSpeedThreshold = 0.0;
        public TrackingServiceOptionsObject( )
        {
        }

        public TrackingServiceOptionsObject( ObjectState objectState, Guid id, long rowVersion, DateTime timestamp, TimeSpan timerInterval, TimeSpan maxAgeOfCurrentTrackValue, double falseThreshold, double distanceThreshold, double distanceUnmergeThreshold, long unmergeLatency, bool kalmanFiltering, double maxCourseDeviation, double maxSpeedDeviation, double minimumSpeedThreshold )
            : base( objectState, id )
        {
            _rowVersion = rowVersion;
            _timestamp = timestamp;
            _timerInterval = timerInterval;
            _maxAgeOfCurrentTrackValue = maxAgeOfCurrentTrackValue;
            _falseThreshold = falseThreshold;
            _distanceThreshold = distanceThreshold;
            _distanceUnmergeThreshold = distanceUnmergeThreshold;
            _unmergeLatency = unmergeLatency;
            _kalmanFiltering = kalmanFiltering;
            _maxCourseDeviation = maxCourseDeviation;
            _maxSpeedDeviation = maxSpeedDeviation;
            _minimumSpeedThreshold = minimumSpeedThreshold;
        }

        public override Kind GetObjectType()
        {
            return Kind.TrackingServiceOptions;
        }

        public override BaseData<Kind> Create()
        {
            return new TrackingServiceOptionsObject( );
        }

        public override void AssignTo( BaseData<Kind> target )
        {
            base.AssignTo( target );
            var destination = ( TrackingServiceOptionsObject )target;
            destination._rowVersion = _rowVersion;
            destination._timestamp = _timestamp;
            destination._timerInterval = _timerInterval;
            destination._maxAgeOfCurrentTrackValue = _maxAgeOfCurrentTrackValue;
            destination._falseThreshold = _falseThreshold;
            destination._distanceThreshold = _distanceThreshold;
            destination._distanceUnmergeThreshold = _distanceUnmergeThreshold;
            destination._unmergeLatency = _unmergeLatency;
            destination._kalmanFiltering = _kalmanFiltering;
            destination._maxCourseDeviation = _maxCourseDeviation;
            destination._maxSpeedDeviation = _maxSpeedDeviation;
            destination._minimumSpeedThreshold = _minimumSpeedThreshold;
        }

        public override bool Equals(BaseData<Kind>? other)
        {
            if (base.Equals(other))
            {
                var obj = ( TrackingServiceOptionsObject )other;
                if( obj._rowVersion != _rowVersion )
                {
                    return false;
                }
                if( obj._timestamp != _timestamp )
                {
                    return false;
                }
                if( obj._timerInterval != _timerInterval )
                {
                    return false;
                }
                if( obj._maxAgeOfCurrentTrackValue != _maxAgeOfCurrentTrackValue )
                {
                    return false;
                }
                if( obj._falseThreshold != _falseThreshold )
                {
                    return false;
                }
                if( obj._distanceThreshold != _distanceThreshold )
                {
                    return false;
                }
                if( obj._distanceUnmergeThreshold != _distanceUnmergeThreshold )
                {
                    return false;
                }
                if( obj._unmergeLatency != _unmergeLatency )
                {
                    return false;
                }
                if( obj._kalmanFiltering != _kalmanFiltering )
                {
                    return false;
                }
                if( obj._maxCourseDeviation != _maxCourseDeviation )
                {
                    return false;
                }
                if( obj._maxSpeedDeviation != _maxSpeedDeviation )
                {
                    return false;
                }
                if( obj._minimumSpeedThreshold != _minimumSpeedThreshold )
                {
                    return false;
                }
                return true;
            }
            return false;
        }

        public override bool IsOfType(Kind objectType)
        {
            if( objectType == Kind.TrackingServiceOptions )
            {
                return true;
            }
            return base.IsOfType( objectType );
        }

        public long RowVersion
        {
            get => _rowVersion;
            set
            {
                if( _rowVersion != value )
                {
                    _rowVersion = value;
                    OnPropertyChanged( );
                }
            }
        }
        public DateTime Timestamp
        {
            get => _timestamp;
            set
            {
                if( _timestamp != value )
                {
                    _timestamp = value;
                    OnPropertyChanged( );
                }
            }
        }
        public TimeSpan TimerInterval
        {
            get => _timerInterval;
            set
            {
                if( _timerInterval != value )
                {
                    _timerInterval = value;
                    OnPropertyChanged( );
                }
            }
        }
        public TimeSpan MaxAgeOfCurrentTrackValue
        {
            get => _maxAgeOfCurrentTrackValue;
            set
            {
                if( _maxAgeOfCurrentTrackValue != value )
                {
                    _maxAgeOfCurrentTrackValue = value;
                    OnPropertyChanged( );
                }
            }
        }
        public double FalseThreshold
        {
            get => _falseThreshold;
            set
            {
                if( _falseThreshold != value )
                {
                    _falseThreshold = value;
                    OnPropertyChanged( );
                }
            }
        }
        public double DistanceThreshold
        {
            get => _distanceThreshold;
            set
            {
                if( _distanceThreshold != value )
                {
                    _distanceThreshold = value;
                    OnPropertyChanged( );
                }
            }
        }
        public double DistanceUnmergeThreshold
        {
            get => _distanceUnmergeThreshold;
            set
            {
                if( _distanceUnmergeThreshold != value )
                {
                    _distanceUnmergeThreshold = value;
                    OnPropertyChanged( );
                }
            }
        }
        public long UnmergeLatency
        {
            get => _unmergeLatency;
            set
            {
                if( _unmergeLatency != value )
                {
                    _unmergeLatency = value;
                    OnPropertyChanged( );
                }
            }
        }
        public bool KalmanFiltering
        {
            get => _kalmanFiltering;
            set
            {
                if( _kalmanFiltering != value )
                {
                    _kalmanFiltering = value;
                    OnPropertyChanged( );
                }
            }
        }
        public double MaxCourseDeviation
        {
            get => _maxCourseDeviation;
            set
            {
                if( _maxCourseDeviation != value )
                {
                    _maxCourseDeviation = value;
                    OnPropertyChanged( );
                }
            }
        }
        public double MaxSpeedDeviation
        {
            get => _maxSpeedDeviation;
            set
            {
                if( _maxSpeedDeviation != value )
                {
                    _maxSpeedDeviation = value;
                    OnPropertyChanged( );
                }
            }
        }
        public double MinimumSpeedThreshold
        {
            get => _minimumSpeedThreshold;
            set
            {
                if( _minimumSpeedThreshold != value )
                {
                    _minimumSpeedThreshold = value;
                    OnPropertyChanged( );
                }
            }
        }

        public override void WriteTo( [ DisallowNull ] BinaryWriter destination )
        {
            base.WriteTo( destination );
            destination.Write( _rowVersion );
            destination.Write( _timestamp );
            destination.Write( _timerInterval );
            destination.Write( _maxAgeOfCurrentTrackValue );
            destination.Write( _falseThreshold );
            destination.Write( _distanceThreshold );
            destination.Write( _distanceUnmergeThreshold );
            destination.Write( _unmergeLatency );
            destination.Write( _kalmanFiltering );
            destination.Write( _maxCourseDeviation );
            destination.Write( _maxSpeedDeviation );
            destination.Write( _minimumSpeedThreshold );
        }

        public override void ReadFrom([DisallowNull] BinaryReader source)
        {
            base.ReadFrom( source );
            _rowVersion = source.ReadInt64( );
            _timestamp = source.ReadDateTime( );
            _timerInterval = source.ReadTimeSpan( );
            _maxAgeOfCurrentTrackValue = source.ReadTimeSpan( );
            _falseThreshold = source.ReadDouble( );
            _distanceThreshold = source.ReadDouble( );
            _distanceUnmergeThreshold = source.ReadDouble( );
            _unmergeLatency = source.ReadInt64( );
            _kalmanFiltering = source.ReadBoolean( );
            _maxCourseDeviation = source.ReadDouble( );
            _maxSpeedDeviation = source.ReadDouble( );
            _minimumSpeedThreshold = source.ReadDouble( );
        }

    }
    public class TrackLinkObject : BaseDataGuid<Kind>
    {
        long _rowVersion = 0;
        Guid _primary;
        Guid _secondary;
        DateTime _start;
        DateTime? _end;
        public TrackLinkObject( )
        {
        }

        public TrackLinkObject( ObjectState objectState, Guid id, long rowVersion, Guid primary, Guid secondary, DateTime start, DateTime? end )
            : base( objectState, id )
        {
            _rowVersion = rowVersion;
            _primary = primary;
            _secondary = secondary;
            _start = start;
            _end = end;
        }

        public override Kind GetObjectType()
        {
            return Kind.TrackLink;
        }

        public override BaseData<Kind> Create()
        {
            return new TrackLinkObject( );
        }

        public override void AssignTo( BaseData<Kind> target )
        {
            base.AssignTo( target );
            var destination = ( TrackLinkObject )target;
            destination._rowVersion = _rowVersion;
            destination._primary = _primary;
            destination._secondary = _secondary;
            destination._start = _start;
            destination._end = _end;
        }

        public override bool Equals(BaseData<Kind>? other)
        {
            if (base.Equals(other))
            {
                var obj = ( TrackLinkObject )other;
                if( obj._rowVersion != _rowVersion )
                {
                    return false;
                }
                if( obj._primary != _primary )
                {
                    return false;
                }
                if( obj._secondary != _secondary )
                {
                    return false;
                }
                if( obj._start != _start )
                {
                    return false;
                }
                if( obj._end != _end )
                {
                    return false;
                }
                return true;
            }
            return false;
        }

        public override bool IsOfType(Kind objectType)
        {
            if( objectType == Kind.TrackLink )
            {
                return true;
            }
            return base.IsOfType( objectType );
        }

        public long RowVersion
        {
            get => _rowVersion;
            set
            {
                if( _rowVersion != value )
                {
                    _rowVersion = value;
                    OnPropertyChanged( );
                }
            }
        }
        public Guid Primary
        {
            get => _primary;
            set
            {
                if( _primary != value )
                {
                    _primary = value;
                    OnPropertyChanged( );
                }
            }
        }
        public Guid Secondary
        {
            get => _secondary;
            set
            {
                if( _secondary != value )
                {
                    _secondary = value;
                    OnPropertyChanged( );
                }
            }
        }
        public DateTime Start
        {
            get => _start;
            set
            {
                if( _start != value )
                {
                    _start = value;
                    OnPropertyChanged( );
                }
            }
        }
        public DateTime? End
        {
            get => _end;
            set
            {
                if( _end != value )
                {
                    _end = value;
                    OnPropertyChanged( );
                }
            }
        }

        public override void WriteTo( [ DisallowNull ] BinaryWriter destination )
        {
            base.WriteTo( destination );
            destination.Write( _rowVersion );
            destination.Write( _primary );
            destination.Write( _secondary );
            destination.Write( _start );
            destination.Write( _end );
        }

        public override void ReadFrom([DisallowNull] BinaryReader source)
        {
            base.ReadFrom( source );
            _rowVersion = source.ReadInt64( );
            _primary = source.ReadGuid( );
            _secondary = source.ReadGuid( );
            _start = source.ReadDateTime( );
            _end = source.ReadNullableDateTime( );
        }

    }
    public class TrackValueObject : BaseDataGuid<Kind>
    {
        long _rowVersion = 0;
        Guid _track;
        DateTime _timestamp;
        Types.TrackFlags _flags = Types.TrackFlags.None;
        Types.TrackStatus _status = Types.TrackStatus.Unknown;
        double _latitude = 0.0;
        double _longitude = 0.0;
        double _speed = 0.0;
        double _course = 0.0;
        double _heading = 0.0;
        public TrackValueObject( )
        {
        }

        public TrackValueObject( ObjectState objectState, Guid id, long rowVersion, Guid track, DateTime timestamp, Types.TrackFlags flags, Types.TrackStatus status, double latitude, double longitude, double speed, double course, double heading )
            : base( objectState, id )
        {
            _rowVersion = rowVersion;
            _track = track;
            _timestamp = timestamp;
            _flags = flags;
            _status = status;
            _latitude = latitude;
            _longitude = longitude;
            _speed = speed;
            _course = course;
            _heading = heading;
        }

        public override Kind GetObjectType()
        {
            return Kind.TrackValue;
        }

        public override BaseData<Kind> Create()
        {
            return new TrackValueObject( );
        }

        public override void AssignTo( BaseData<Kind> target )
        {
            base.AssignTo( target );
            var destination = ( TrackValueObject )target;
            destination._rowVersion = _rowVersion;
            destination._track = _track;
            destination._timestamp = _timestamp;
            destination._flags = _flags;
            destination._status = _status;
            destination._latitude = _latitude;
            destination._longitude = _longitude;
            destination._speed = _speed;
            destination._course = _course;
            destination._heading = _heading;
        }

        public override bool Equals(BaseData<Kind>? other)
        {
            if (base.Equals(other))
            {
                var obj = ( TrackValueObject )other;
                if( obj._rowVersion != _rowVersion )
                {
                    return false;
                }
                if( obj._track != _track )
                {
                    return false;
                }
                if( obj._timestamp != _timestamp )
                {
                    return false;
                }
                if( obj._flags != _flags )
                {
                    return false;
                }
                if( obj._status != _status )
                {
                    return false;
                }
                if( obj._latitude != _latitude )
                {
                    return false;
                }
                if( obj._longitude != _longitude )
                {
                    return false;
                }
                if( obj._speed != _speed )
                {
                    return false;
                }
                if( obj._course != _course )
                {
                    return false;
                }
                if( obj._heading != _heading )
                {
                    return false;
                }
                return true;
            }
            return false;
        }

        public override bool IsOfType(Kind objectType)
        {
            if( objectType == Kind.TrackValue )
            {
                return true;
            }
            return base.IsOfType( objectType );
        }

        public long RowVersion
        {
            get => _rowVersion;
            set
            {
                if( _rowVersion != value )
                {
                    _rowVersion = value;
                    OnPropertyChanged( );
                }
            }
        }
        public Guid Track
        {
            get => _track;
            set
            {
                if( _track != value )
                {
                    _track = value;
                    OnPropertyChanged( );
                }
            }
        }
        public DateTime Timestamp
        {
            get => _timestamp;
            set
            {
                if( _timestamp != value )
                {
                    _timestamp = value;
                    OnPropertyChanged( );
                }
            }
        }
        public Types.TrackFlags Flags
        {
            get => _flags;
            set
            {
                if( _flags != value )
                {
                    _flags = value;
                    OnPropertyChanged( );
                }
            }
        }
        public Types.TrackStatus Status
        {
            get => _status;
            set
            {
                if( _status != value )
                {
                    _status = value;
                    OnPropertyChanged( );
                }
            }
        }
        public double Latitude
        {
            get => _latitude;
            set
            {
                if( _latitude != value )
                {
                    _latitude = value;
                    OnPropertyChanged( );
                }
            }
        }
        public double Longitude
        {
            get => _longitude;
            set
            {
                if( _longitude != value )
                {
                    _longitude = value;
                    OnPropertyChanged( );
                }
            }
        }
        public double Speed
        {
            get => _speed;
            set
            {
                if( _speed != value )
                {
                    _speed = value;
                    OnPropertyChanged( );
                }
            }
        }
        public double Course
        {
            get => _course;
            set
            {
                if( _course != value )
                {
                    _course = value;
                    OnPropertyChanged( );
                }
            }
        }
        public double Heading
        {
            get => _heading;
            set
            {
                if( _heading != value )
                {
                    _heading = value;
                    OnPropertyChanged( );
                }
            }
        }

        public override void WriteTo( [ DisallowNull ] BinaryWriter destination )
        {
            base.WriteTo( destination );
            destination.Write( _rowVersion );
            destination.Write( _track );
            destination.Write( _timestamp );
            destination.Write( _flags );
            destination.Write( _status );
            destination.Write( _latitude );
            destination.Write( _longitude );
            destination.Write( _speed );
            destination.Write( _course );
            destination.Write( _heading );
        }

        public override void ReadFrom([DisallowNull] BinaryReader source)
        {
            base.ReadFrom( source );
            _rowVersion = source.ReadInt64( );
            _track = source.ReadGuid( );
            _timestamp = source.ReadDateTime( );
            _flags = source.ReadEnum<Types.TrackFlags>( );
            _status = source.ReadEnum<Types.TrackStatus>( );
            _latitude = source.ReadDouble( );
            _longitude = source.ReadDouble( );
            _speed = source.ReadDouble( );
            _course = source.ReadDouble( );
            _heading = source.ReadDouble( );
        }

    }
    public class TrackValue3DObject : BaseDataGuid<Kind>
    {
        long _rowVersion = 0;
        Guid _track;
        DateTime _timestamp;
        Types.TrackFlags3D _flags = Types.TrackFlags3D.None;
        uint _status = 0;
        double _latitude = 0.0;
        double _longitude = 0.0;
        double _altitude = 0.0;
        double _speed = 0.0;
        double _course = 0.0;
        double _rateOfClimb = 0.0;
        public TrackValue3DObject( )
        {
        }

        public TrackValue3DObject( ObjectState objectState, Guid id, long rowVersion, Guid track, DateTime timestamp, Types.TrackFlags3D flags, uint status, double latitude, double longitude, double altitude, double speed, double course, double rateOfClimb )
            : base( objectState, id )
        {
            _rowVersion = rowVersion;
            _track = track;
            _timestamp = timestamp;
            _flags = flags;
            _status = status;
            _latitude = latitude;
            _longitude = longitude;
            _altitude = altitude;
            _speed = speed;
            _course = course;
            _rateOfClimb = rateOfClimb;
        }

        public override Kind GetObjectType()
        {
            return Kind.TrackValue3D;
        }

        public override BaseData<Kind> Create()
        {
            return new TrackValue3DObject( );
        }

        public override void AssignTo( BaseData<Kind> target )
        {
            base.AssignTo( target );
            var destination = ( TrackValue3DObject )target;
            destination._rowVersion = _rowVersion;
            destination._track = _track;
            destination._timestamp = _timestamp;
            destination._flags = _flags;
            destination._status = _status;
            destination._latitude = _latitude;
            destination._longitude = _longitude;
            destination._altitude = _altitude;
            destination._speed = _speed;
            destination._course = _course;
            destination._rateOfClimb = _rateOfClimb;
        }

        public override bool Equals(BaseData<Kind>? other)
        {
            if (base.Equals(other))
            {
                var obj = ( TrackValue3DObject )other;
                if( obj._rowVersion != _rowVersion )
                {
                    return false;
                }
                if( obj._track != _track )
                {
                    return false;
                }
                if( obj._timestamp != _timestamp )
                {
                    return false;
                }
                if( obj._flags != _flags )
                {
                    return false;
                }
                if( obj._status != _status )
                {
                    return false;
                }
                if( obj._latitude != _latitude )
                {
                    return false;
                }
                if( obj._longitude != _longitude )
                {
                    return false;
                }
                if( obj._altitude != _altitude )
                {
                    return false;
                }
                if( obj._speed != _speed )
                {
                    return false;
                }
                if( obj._course != _course )
                {
                    return false;
                }
                if( obj._rateOfClimb != _rateOfClimb )
                {
                    return false;
                }
                return true;
            }
            return false;
        }

        public override bool IsOfType(Kind objectType)
        {
            if( objectType == Kind.TrackValue3D )
            {
                return true;
            }
            return base.IsOfType( objectType );
        }

        public long RowVersion
        {
            get => _rowVersion;
            set
            {
                if( _rowVersion != value )
                {
                    _rowVersion = value;
                    OnPropertyChanged( );
                }
            }
        }
        public Guid Track
        {
            get => _track;
            set
            {
                if( _track != value )
                {
                    _track = value;
                    OnPropertyChanged( );
                }
            }
        }
        public DateTime Timestamp
        {
            get => _timestamp;
            set
            {
                if( _timestamp != value )
                {
                    _timestamp = value;
                    OnPropertyChanged( );
                }
            }
        }
        public Types.TrackFlags3D Flags
        {
            get => _flags;
            set
            {
                if( _flags != value )
                {
                    _flags = value;
                    OnPropertyChanged( );
                }
            }
        }
        public uint Status
        {
            get => _status;
            set
            {
                if( _status != value )
                {
                    _status = value;
                    OnPropertyChanged( );
                }
            }
        }
        public double Latitude
        {
            get => _latitude;
            set
            {
                if( _latitude != value )
                {
                    _latitude = value;
                    OnPropertyChanged( );
                }
            }
        }
        public double Longitude
        {
            get => _longitude;
            set
            {
                if( _longitude != value )
                {
                    _longitude = value;
                    OnPropertyChanged( );
                }
            }
        }
        public double Altitude
        {
            get => _altitude;
            set
            {
                if( _altitude != value )
                {
                    _altitude = value;
                    OnPropertyChanged( );
                }
            }
        }
        public double Speed
        {
            get => _speed;
            set
            {
                if( _speed != value )
                {
                    _speed = value;
                    OnPropertyChanged( );
                }
            }
        }
        public double Course
        {
            get => _course;
            set
            {
                if( _course != value )
                {
                    _course = value;
                    OnPropertyChanged( );
                }
            }
        }
        public double RateOfClimb
        {
            get => _rateOfClimb;
            set
            {
                if( _rateOfClimb != value )
                {
                    _rateOfClimb = value;
                    OnPropertyChanged( );
                }
            }
        }

        public override void WriteTo( [ DisallowNull ] BinaryWriter destination )
        {
            base.WriteTo( destination );
            destination.Write( _rowVersion );
            destination.Write( _track );
            destination.Write( _timestamp );
            destination.Write( _flags );
            destination.Write( _status );
            destination.Write( _latitude );
            destination.Write( _longitude );
            destination.Write( _altitude );
            destination.Write( _speed );
            destination.Write( _course );
            destination.Write( _rateOfClimb );
        }

        public override void ReadFrom([DisallowNull] BinaryReader source)
        {
            base.ReadFrom( source );
            _rowVersion = source.ReadInt64( );
            _track = source.ReadGuid( );
            _timestamp = source.ReadDateTime( );
            _flags = source.ReadEnum<Types.TrackFlags3D>( );
            _status = source.ReadUInt32( );
            _latitude = source.ReadDouble( );
            _longitude = source.ReadDouble( );
            _altitude = source.ReadDouble( );
            _speed = source.ReadDouble( );
            _course = source.ReadDouble( );
            _rateOfClimb = source.ReadDouble( );
        }

    }
    public class UInt16TimeseriesValueObject : BaseDataGuid<Kind>
    {
        long _rowVersion = 0;
        Guid _timeseries;
        DateTime _timestamp;
        ushort? _value;
        public UInt16TimeseriesValueObject( )
        {
        }

        public UInt16TimeseriesValueObject( ObjectState objectState, Guid id, long rowVersion, Guid timeseries, DateTime timestamp, ushort? value__ )
            : base( objectState, id )
        {
            _rowVersion = rowVersion;
            _timeseries = timeseries;
            _timestamp = timestamp;
            _value = value__;
        }

        public override Kind GetObjectType()
        {
            return Kind.UInt16TimeseriesValue;
        }

        public override BaseData<Kind> Create()
        {
            return new UInt16TimeseriesValueObject( );
        }

        public override void AssignTo( BaseData<Kind> target )
        {
            base.AssignTo( target );
            var destination = ( UInt16TimeseriesValueObject )target;
            destination._rowVersion = _rowVersion;
            destination._timeseries = _timeseries;
            destination._timestamp = _timestamp;
            destination._value = _value;
        }

        public override bool Equals(BaseData<Kind>? other)
        {
            if (base.Equals(other))
            {
                var obj = ( UInt16TimeseriesValueObject )other;
                if( obj._rowVersion != _rowVersion )
                {
                    return false;
                }
                if( obj._timeseries != _timeseries )
                {
                    return false;
                }
                if( obj._timestamp != _timestamp )
                {
                    return false;
                }
                if( obj._value != _value )
                {
                    return false;
                }
                return true;
            }
            return false;
        }

        public override bool IsOfType(Kind objectType)
        {
            if( objectType == Kind.UInt16TimeseriesValue )
            {
                return true;
            }
            return base.IsOfType( objectType );
        }

        public long RowVersion
        {
            get => _rowVersion;
            set
            {
                if( _rowVersion != value )
                {
                    _rowVersion = value;
                    OnPropertyChanged( );
                }
            }
        }
        public Guid Timeseries
        {
            get => _timeseries;
            set
            {
                if( _timeseries != value )
                {
                    _timeseries = value;
                    OnPropertyChanged( );
                }
            }
        }
        public DateTime Timestamp
        {
            get => _timestamp;
            set
            {
                if( _timestamp != value )
                {
                    _timestamp = value;
                    OnPropertyChanged( );
                }
            }
        }
        public ushort? Value
        {
            get => _value;
            set
            {
                if( _value != value )
                {
                    _value = value;
                    OnPropertyChanged( );
                }
            }
        }

        public override void WriteTo( [ DisallowNull ] BinaryWriter destination )
        {
            base.WriteTo( destination );
            destination.Write( _rowVersion );
            destination.Write( _timeseries );
            destination.Write( _timestamp );
            destination.Write( _value );
        }

        public override void ReadFrom([DisallowNull] BinaryReader source)
        {
            base.ReadFrom( source );
            _rowVersion = source.ReadInt64( );
            _timeseries = source.ReadGuid( );
            _timestamp = source.ReadDateTime( );
            _value = source.ReadNullableUInt16( );
        }

    }
    public class UInt32TimeseriesValueObject : BaseDataGuid<Kind>
    {
        long _rowVersion = 0;
        Guid _timeseries;
        DateTime _timestamp;
        uint? _value;
        public UInt32TimeseriesValueObject( )
        {
        }

        public UInt32TimeseriesValueObject( ObjectState objectState, Guid id, long rowVersion, Guid timeseries, DateTime timestamp, uint? value__ )
            : base( objectState, id )
        {
            _rowVersion = rowVersion;
            _timeseries = timeseries;
            _timestamp = timestamp;
            _value = value__;
        }

        public override Kind GetObjectType()
        {
            return Kind.UInt32TimeseriesValue;
        }

        public override BaseData<Kind> Create()
        {
            return new UInt32TimeseriesValueObject( );
        }

        public override void AssignTo( BaseData<Kind> target )
        {
            base.AssignTo( target );
            var destination = ( UInt32TimeseriesValueObject )target;
            destination._rowVersion = _rowVersion;
            destination._timeseries = _timeseries;
            destination._timestamp = _timestamp;
            destination._value = _value;
        }

        public override bool Equals(BaseData<Kind>? other)
        {
            if (base.Equals(other))
            {
                var obj = ( UInt32TimeseriesValueObject )other;
                if( obj._rowVersion != _rowVersion )
                {
                    return false;
                }
                if( obj._timeseries != _timeseries )
                {
                    return false;
                }
                if( obj._timestamp != _timestamp )
                {
                    return false;
                }
                if( obj._value != _value )
                {
                    return false;
                }
                return true;
            }
            return false;
        }

        public override bool IsOfType(Kind objectType)
        {
            if( objectType == Kind.UInt32TimeseriesValue )
            {
                return true;
            }
            return base.IsOfType( objectType );
        }

        public long RowVersion
        {
            get => _rowVersion;
            set
            {
                if( _rowVersion != value )
                {
                    _rowVersion = value;
                    OnPropertyChanged( );
                }
            }
        }
        public Guid Timeseries
        {
            get => _timeseries;
            set
            {
                if( _timeseries != value )
                {
                    _timeseries = value;
                    OnPropertyChanged( );
                }
            }
        }
        public DateTime Timestamp
        {
            get => _timestamp;
            set
            {
                if( _timestamp != value )
                {
                    _timestamp = value;
                    OnPropertyChanged( );
                }
            }
        }
        public uint? Value
        {
            get => _value;
            set
            {
                if( _value != value )
                {
                    _value = value;
                    OnPropertyChanged( );
                }
            }
        }

        public override void WriteTo( [ DisallowNull ] BinaryWriter destination )
        {
            base.WriteTo( destination );
            destination.Write( _rowVersion );
            destination.Write( _timeseries );
            destination.Write( _timestamp );
            destination.Write( _value );
        }

        public override void ReadFrom([DisallowNull] BinaryReader source)
        {
            base.ReadFrom( source );
            _rowVersion = source.ReadInt64( );
            _timeseries = source.ReadGuid( );
            _timestamp = source.ReadDateTime( );
            _value = source.ReadNullableUInt32( );
        }

    }
    public class UInt64TimeseriesValueObject : BaseDataGuid<Kind>
    {
        long _rowVersion = 0;
        Guid _timeseries;
        DateTime _timestamp;
        long? _value;
        public UInt64TimeseriesValueObject( )
        {
        }

        public UInt64TimeseriesValueObject( ObjectState objectState, Guid id, long rowVersion, Guid timeseries, DateTime timestamp, long? value__ )
            : base( objectState, id )
        {
            _rowVersion = rowVersion;
            _timeseries = timeseries;
            _timestamp = timestamp;
            _value = value__;
        }

        public override Kind GetObjectType()
        {
            return Kind.UInt64TimeseriesValue;
        }

        public override BaseData<Kind> Create()
        {
            return new UInt64TimeseriesValueObject( );
        }

        public override void AssignTo( BaseData<Kind> target )
        {
            base.AssignTo( target );
            var destination = ( UInt64TimeseriesValueObject )target;
            destination._rowVersion = _rowVersion;
            destination._timeseries = _timeseries;
            destination._timestamp = _timestamp;
            destination._value = _value;
        }

        public override bool Equals(BaseData<Kind>? other)
        {
            if (base.Equals(other))
            {
                var obj = ( UInt64TimeseriesValueObject )other;
                if( obj._rowVersion != _rowVersion )
                {
                    return false;
                }
                if( obj._timeseries != _timeseries )
                {
                    return false;
                }
                if( obj._timestamp != _timestamp )
                {
                    return false;
                }
                if( obj._value != _value )
                {
                    return false;
                }
                return true;
            }
            return false;
        }

        public override bool IsOfType(Kind objectType)
        {
            if( objectType == Kind.UInt64TimeseriesValue )
            {
                return true;
            }
            return base.IsOfType( objectType );
        }

        public long RowVersion
        {
            get => _rowVersion;
            set
            {
                if( _rowVersion != value )
                {
                    _rowVersion = value;
                    OnPropertyChanged( );
                }
            }
        }
        public Guid Timeseries
        {
            get => _timeseries;
            set
            {
                if( _timeseries != value )
                {
                    _timeseries = value;
                    OnPropertyChanged( );
                }
            }
        }
        public DateTime Timestamp
        {
            get => _timestamp;
            set
            {
                if( _timestamp != value )
                {
                    _timestamp = value;
                    OnPropertyChanged( );
                }
            }
        }
        public long? Value
        {
            get => _value;
            set
            {
                if( _value != value )
                {
                    _value = value;
                    OnPropertyChanged( );
                }
            }
        }

        public override void WriteTo( [ DisallowNull ] BinaryWriter destination )
        {
            base.WriteTo( destination );
            destination.Write( _rowVersion );
            destination.Write( _timeseries );
            destination.Write( _timestamp );
            destination.Write( _value );
        }

        public override void ReadFrom([DisallowNull] BinaryReader source)
        {
            base.ReadFrom( source );
            _rowVersion = source.ReadInt64( );
            _timeseries = source.ReadGuid( );
            _timestamp = source.ReadDateTime( );
            _value = source.ReadNullableInt64( );
        }

    }
    public class VehicleTypeObject : BaseDataGuid<Kind>
    {
        long _rowVersion = 0;
        string _name = string.Empty;
        public VehicleTypeObject( )
        {
        }

        public VehicleTypeObject( ObjectState objectState, Guid id, long rowVersion, string name )
            : base( objectState, id )
        {
            _rowVersion = rowVersion;
            _name = name;
        }

        public override Kind GetObjectType()
        {
            return Kind.VehicleType;
        }

        public override BaseData<Kind> Create()
        {
            return new VehicleTypeObject( );
        }

        public override void AssignTo( BaseData<Kind> target )
        {
            base.AssignTo( target );
            var destination = ( VehicleTypeObject )target;
            destination._rowVersion = _rowVersion;
            destination._name = _name;
        }

        public override bool Equals(BaseData<Kind>? other)
        {
            if (base.Equals(other))
            {
                var obj = ( VehicleTypeObject )other;
                if( obj._rowVersion != _rowVersion )
                {
                    return false;
                }
                if( obj._name != _name )
                {
                    return false;
                }
                return true;
            }
            return false;
        }

        public override bool IsOfType(Kind objectType)
        {
            if( objectType == Kind.VehicleType )
            {
                return true;
            }
            return base.IsOfType( objectType );
        }

        public long RowVersion
        {
            get => _rowVersion;
            set
            {
                if( _rowVersion != value )
                {
                    _rowVersion = value;
                    OnPropertyChanged( );
                }
            }
        }
        public string Name
        {
            get => _name;
            set
            {
                if( _name != value )
                {
                    _name = value;
                    OnPropertyChanged( );
                }
            }
        }

        public override void WriteTo( [ DisallowNull ] BinaryWriter destination )
        {
            base.WriteTo( destination );
            destination.Write( _rowVersion );
            destination.Write( _name );
        }

        public override void ReadFrom([DisallowNull] BinaryReader source)
        {
            base.ReadFrom( source );
            _rowVersion = source.ReadInt64( );
            _name = source.ReadString( );
        }

    }
    public class VesselTypeObject : BaseDataGuid<Kind>
    {
        long _rowVersion = 0;
        string _name = string.Empty;
        int _code = 0;
        public VesselTypeObject( )
        {
        }

        public VesselTypeObject( ObjectState objectState, Guid id, long rowVersion, string name, int code )
            : base( objectState, id )
        {
            _rowVersion = rowVersion;
            _name = name;
            _code = code;
        }

        public override Kind GetObjectType()
        {
            return Kind.VesselType;
        }

        public override BaseData<Kind> Create()
        {
            return new VesselTypeObject( );
        }

        public override void AssignTo( BaseData<Kind> target )
        {
            base.AssignTo( target );
            var destination = ( VesselTypeObject )target;
            destination._rowVersion = _rowVersion;
            destination._name = _name;
            destination._code = _code;
        }

        public override bool Equals(BaseData<Kind>? other)
        {
            if (base.Equals(other))
            {
                var obj = ( VesselTypeObject )other;
                if( obj._rowVersion != _rowVersion )
                {
                    return false;
                }
                if( obj._name != _name )
                {
                    return false;
                }
                if( obj._code != _code )
                {
                    return false;
                }
                return true;
            }
            return false;
        }

        public override bool IsOfType(Kind objectType)
        {
            if( objectType == Kind.VesselType )
            {
                return true;
            }
            return base.IsOfType( objectType );
        }

        public long RowVersion
        {
            get => _rowVersion;
            set
            {
                if( _rowVersion != value )
                {
                    _rowVersion = value;
                    OnPropertyChanged( );
                }
            }
        }
        public string Name
        {
            get => _name;
            set
            {
                if( _name != value )
                {
                    _name = value;
                    OnPropertyChanged( );
                }
            }
        }
        public int Code
        {
            get => _code;
            set
            {
                if( _code != value )
                {
                    _code = value;
                    OnPropertyChanged( );
                }
            }
        }

        public override void WriteTo( [ DisallowNull ] BinaryWriter destination )
        {
            base.WriteTo( destination );
            destination.Write( _rowVersion );
            destination.Write( _name );
            destination.Write( _code );
        }

        public override void ReadFrom([DisallowNull] BinaryReader source)
        {
            base.ReadFrom( source );
            _rowVersion = source.ReadInt64( );
            _name = source.ReadString( );
            _code = source.ReadInt32( );
        }

    }
    public class ViewObject : BaseDataGuid<Kind>
    {
        long _rowVersion = 0;
        string _name = string.Empty;
        Guid _latitudeTimeseries;
        Guid _longitudeTimeseries;
        Guid _zoomLevelTimeseries;
        public ViewObject( )
        {
        }

        public ViewObject( ObjectState objectState, Guid id, long rowVersion, string name, Guid latitudeTimeseries, Guid longitudeTimeseries, Guid zoomLevelTimeseries )
            : base( objectState, id )
        {
            _rowVersion = rowVersion;
            _name = name;
            _latitudeTimeseries = latitudeTimeseries;
            _longitudeTimeseries = longitudeTimeseries;
            _zoomLevelTimeseries = zoomLevelTimeseries;
        }

        public override Kind GetObjectType()
        {
            return Kind.View;
        }

        public override BaseData<Kind> Create()
        {
            return new ViewObject( );
        }

        public override void AssignTo( BaseData<Kind> target )
        {
            base.AssignTo( target );
            var destination = ( ViewObject )target;
            destination._rowVersion = _rowVersion;
            destination._name = _name;
            destination._latitudeTimeseries = _latitudeTimeseries;
            destination._longitudeTimeseries = _longitudeTimeseries;
            destination._zoomLevelTimeseries = _zoomLevelTimeseries;
        }

        public override bool Equals(BaseData<Kind>? other)
        {
            if (base.Equals(other))
            {
                var obj = ( ViewObject )other;
                if( obj._rowVersion != _rowVersion )
                {
                    return false;
                }
                if( obj._name != _name )
                {
                    return false;
                }
                if( obj._latitudeTimeseries != _latitudeTimeseries )
                {
                    return false;
                }
                if( obj._longitudeTimeseries != _longitudeTimeseries )
                {
                    return false;
                }
                if( obj._zoomLevelTimeseries != _zoomLevelTimeseries )
                {
                    return false;
                }
                return true;
            }
            return false;
        }

        public override bool IsOfType(Kind objectType)
        {
            if( objectType == Kind.View )
            {
                return true;
            }
            return base.IsOfType( objectType );
        }

        public long RowVersion
        {
            get => _rowVersion;
            set
            {
                if( _rowVersion != value )
                {
                    _rowVersion = value;
                    OnPropertyChanged( );
                }
            }
        }
        public string Name
        {
            get => _name;
            set
            {
                if( _name != value )
                {
                    _name = value;
                    OnPropertyChanged( );
                }
            }
        }
        public Guid LatitudeTimeseries
        {
            get => _latitudeTimeseries;
            set
            {
                if( _latitudeTimeseries != value )
                {
                    _latitudeTimeseries = value;
                    OnPropertyChanged( );
                }
            }
        }
        public Guid LongitudeTimeseries
        {
            get => _longitudeTimeseries;
            set
            {
                if( _longitudeTimeseries != value )
                {
                    _longitudeTimeseries = value;
                    OnPropertyChanged( );
                }
            }
        }
        public Guid ZoomLevelTimeseries
        {
            get => _zoomLevelTimeseries;
            set
            {
                if( _zoomLevelTimeseries != value )
                {
                    _zoomLevelTimeseries = value;
                    OnPropertyChanged( );
                }
            }
        }

        public override void WriteTo( [ DisallowNull ] BinaryWriter destination )
        {
            base.WriteTo( destination );
            destination.Write( _rowVersion );
            destination.Write( _name );
            destination.Write( _latitudeTimeseries );
            destination.Write( _longitudeTimeseries );
            destination.Write( _zoomLevelTimeseries );
        }

        public override void ReadFrom([DisallowNull] BinaryReader source)
        {
            base.ReadFrom( source );
            _rowVersion = source.ReadInt64( );
            _name = source.ReadString( );
            _latitudeTimeseries = source.ReadGuid( );
            _longitudeTimeseries = source.ReadGuid( );
            _zoomLevelTimeseries = source.ReadGuid( );
        }

    }
    public class ViewCameraLinkObject : BaseDataGuid<Kind>
    {
        long _rowVersion = 0;
        Guid _view;
        Guid _camera;
        DateTime _start;
        DateTime? _end;
        public ViewCameraLinkObject( )
        {
        }

        public ViewCameraLinkObject( ObjectState objectState, Guid id, long rowVersion, Guid view, Guid camera, DateTime start, DateTime? end )
            : base( objectState, id )
        {
            _rowVersion = rowVersion;
            _view = view;
            _camera = camera;
            _start = start;
            _end = end;
        }

        public override Kind GetObjectType()
        {
            return Kind.ViewCameraLink;
        }

        public override BaseData<Kind> Create()
        {
            return new ViewCameraLinkObject( );
        }

        public override void AssignTo( BaseData<Kind> target )
        {
            base.AssignTo( target );
            var destination = ( ViewCameraLinkObject )target;
            destination._rowVersion = _rowVersion;
            destination._view = _view;
            destination._camera = _camera;
            destination._start = _start;
            destination._end = _end;
        }

        public override bool Equals(BaseData<Kind>? other)
        {
            if (base.Equals(other))
            {
                var obj = ( ViewCameraLinkObject )other;
                if( obj._rowVersion != _rowVersion )
                {
                    return false;
                }
                if( obj._view != _view )
                {
                    return false;
                }
                if( obj._camera != _camera )
                {
                    return false;
                }
                if( obj._start != _start )
                {
                    return false;
                }
                if( obj._end != _end )
                {
                    return false;
                }
                return true;
            }
            return false;
        }

        public override bool IsOfType(Kind objectType)
        {
            if( objectType == Kind.ViewCameraLink )
            {
                return true;
            }
            return base.IsOfType( objectType );
        }

        public long RowVersion
        {
            get => _rowVersion;
            set
            {
                if( _rowVersion != value )
                {
                    _rowVersion = value;
                    OnPropertyChanged( );
                }
            }
        }
        public Guid View
        {
            get => _view;
            set
            {
                if( _view != value )
                {
                    _view = value;
                    OnPropertyChanged( );
                }
            }
        }
        public Guid Camera
        {
            get => _camera;
            set
            {
                if( _camera != value )
                {
                    _camera = value;
                    OnPropertyChanged( );
                }
            }
        }
        public DateTime Start
        {
            get => _start;
            set
            {
                if( _start != value )
                {
                    _start = value;
                    OnPropertyChanged( );
                }
            }
        }
        public DateTime? End
        {
            get => _end;
            set
            {
                if( _end != value )
                {
                    _end = value;
                    OnPropertyChanged( );
                }
            }
        }

        public override void WriteTo( [ DisallowNull ] BinaryWriter destination )
        {
            base.WriteTo( destination );
            destination.Write( _rowVersion );
            destination.Write( _view );
            destination.Write( _camera );
            destination.Write( _start );
            destination.Write( _end );
        }

        public override void ReadFrom([DisallowNull] BinaryReader source)
        {
            base.ReadFrom( source );
            _rowVersion = source.ReadInt64( );
            _view = source.ReadGuid( );
            _camera = source.ReadGuid( );
            _start = source.ReadDateTime( );
            _end = source.ReadNullableDateTime( );
        }

    }
    public class ViewTrackerLinkObject : BaseDataGuid<Kind>
    {
        long _rowVersion = 0;
        Guid _view;
        Guid _tracker;
        DateTime _start;
        DateTime? _end;
        public ViewTrackerLinkObject( )
        {
        }

        public ViewTrackerLinkObject( ObjectState objectState, Guid id, long rowVersion, Guid view, Guid tracker, DateTime start, DateTime? end )
            : base( objectState, id )
        {
            _rowVersion = rowVersion;
            _view = view;
            _tracker = tracker;
            _start = start;
            _end = end;
        }

        public override Kind GetObjectType()
        {
            return Kind.ViewTrackerLink;
        }

        public override BaseData<Kind> Create()
        {
            return new ViewTrackerLinkObject( );
        }

        public override void AssignTo( BaseData<Kind> target )
        {
            base.AssignTo( target );
            var destination = ( ViewTrackerLinkObject )target;
            destination._rowVersion = _rowVersion;
            destination._view = _view;
            destination._tracker = _tracker;
            destination._start = _start;
            destination._end = _end;
        }

        public override bool Equals(BaseData<Kind>? other)
        {
            if (base.Equals(other))
            {
                var obj = ( ViewTrackerLinkObject )other;
                if( obj._rowVersion != _rowVersion )
                {
                    return false;
                }
                if( obj._view != _view )
                {
                    return false;
                }
                if( obj._tracker != _tracker )
                {
                    return false;
                }
                if( obj._start != _start )
                {
                    return false;
                }
                if( obj._end != _end )
                {
                    return false;
                }
                return true;
            }
            return false;
        }

        public override bool IsOfType(Kind objectType)
        {
            if( objectType == Kind.ViewTrackerLink )
            {
                return true;
            }
            return base.IsOfType( objectType );
        }

        public long RowVersion
        {
            get => _rowVersion;
            set
            {
                if( _rowVersion != value )
                {
                    _rowVersion = value;
                    OnPropertyChanged( );
                }
            }
        }
        public Guid View
        {
            get => _view;
            set
            {
                if( _view != value )
                {
                    _view = value;
                    OnPropertyChanged( );
                }
            }
        }
        public Guid Tracker
        {
            get => _tracker;
            set
            {
                if( _tracker != value )
                {
                    _tracker = value;
                    OnPropertyChanged( );
                }
            }
        }
        public DateTime Start
        {
            get => _start;
            set
            {
                if( _start != value )
                {
                    _start = value;
                    OnPropertyChanged( );
                }
            }
        }
        public DateTime? End
        {
            get => _end;
            set
            {
                if( _end != value )
                {
                    _end = value;
                    OnPropertyChanged( );
                }
            }
        }

        public override void WriteTo( [ DisallowNull ] BinaryWriter destination )
        {
            base.WriteTo( destination );
            destination.Write( _rowVersion );
            destination.Write( _view );
            destination.Write( _tracker );
            destination.Write( _start );
            destination.Write( _end );
        }

        public override void ReadFrom([DisallowNull] BinaryReader source)
        {
            base.ReadFrom( source );
            _rowVersion = source.ReadInt64( );
            _view = source.ReadGuid( );
            _tracker = source.ReadGuid( );
            _start = source.ReadDateTime( );
            _end = source.ReadNullableDateTime( );
        }

    }
    public class WeatherStationCommandObject : BaseDataGuid<Kind>
    {
        long _rowVersion = 0;
        Guid _weatherStation;
        DateTime _timestamp;
        Types.DeviceCommandSourceType _deviceCommandSourceType = Types.DeviceCommandSourceType.Unknown;
        Guid _deviceCommandSourceId;
        Guid _reply;
        public WeatherStationCommandObject( )
        {
        }

        public WeatherStationCommandObject( ObjectState objectState, Guid id, long rowVersion, Guid weatherStation, DateTime timestamp, Types.DeviceCommandSourceType deviceCommandSourceType, Guid deviceCommandSourceId, Guid reply )
            : base( objectState, id )
        {
            _rowVersion = rowVersion;
            _weatherStation = weatherStation;
            _timestamp = timestamp;
            _deviceCommandSourceType = deviceCommandSourceType;
            _deviceCommandSourceId = deviceCommandSourceId;
            _reply = reply;
        }

        public override Kind GetObjectType()
        {
            return Kind.WeatherStationCommand;
        }

        public override BaseData<Kind> Create()
        {
            return new WeatherStationCommandObject( );
        }

        public override void AssignTo( BaseData<Kind> target )
        {
            base.AssignTo( target );
            var destination = ( WeatherStationCommandObject )target;
            destination._rowVersion = _rowVersion;
            destination._weatherStation = _weatherStation;
            destination._timestamp = _timestamp;
            destination._deviceCommandSourceType = _deviceCommandSourceType;
            destination._deviceCommandSourceId = _deviceCommandSourceId;
            destination._reply = _reply;
        }

        public override bool Equals(BaseData<Kind>? other)
        {
            if (base.Equals(other))
            {
                var obj = ( WeatherStationCommandObject )other;
                if( obj._rowVersion != _rowVersion )
                {
                    return false;
                }
                if( obj._weatherStation != _weatherStation )
                {
                    return false;
                }
                if( obj._timestamp != _timestamp )
                {
                    return false;
                }
                if( obj._deviceCommandSourceType != _deviceCommandSourceType )
                {
                    return false;
                }
                if( obj._deviceCommandSourceId != _deviceCommandSourceId )
                {
                    return false;
                }
                if( obj._reply != _reply )
                {
                    return false;
                }
                return true;
            }
            return false;
        }

        public override bool IsOfType(Kind objectType)
        {
            if( objectType == Kind.WeatherStationCommand )
            {
                return true;
            }
            return base.IsOfType( objectType );
        }

        public long RowVersion
        {
            get => _rowVersion;
            set
            {
                if( _rowVersion != value )
                {
                    _rowVersion = value;
                    OnPropertyChanged( );
                }
            }
        }
        public Guid WeatherStation
        {
            get => _weatherStation;
            set
            {
                if( _weatherStation != value )
                {
                    _weatherStation = value;
                    OnPropertyChanged( );
                }
            }
        }
        public DateTime Timestamp
        {
            get => _timestamp;
            set
            {
                if( _timestamp != value )
                {
                    _timestamp = value;
                    OnPropertyChanged( );
                }
            }
        }
        public Types.DeviceCommandSourceType DeviceCommandSourceType
        {
            get => _deviceCommandSourceType;
            set
            {
                if( _deviceCommandSourceType != value )
                {
                    _deviceCommandSourceType = value;
                    OnPropertyChanged( );
                }
            }
        }
        public Guid DeviceCommandSourceId
        {
            get => _deviceCommandSourceId;
            set
            {
                if( _deviceCommandSourceId != value )
                {
                    _deviceCommandSourceId = value;
                    OnPropertyChanged( );
                }
            }
        }
        public Guid Reply
        {
            get => _reply;
            set
            {
                if( _reply != value )
                {
                    _reply = value;
                    OnPropertyChanged( );
                }
            }
        }

        public override void WriteTo( [ DisallowNull ] BinaryWriter destination )
        {
            base.WriteTo( destination );
            destination.Write( _rowVersion );
            destination.Write( _weatherStation );
            destination.Write( _timestamp );
            destination.Write( _deviceCommandSourceType );
            destination.Write( _deviceCommandSourceId );
            destination.Write( _reply );
        }

        public override void ReadFrom([DisallowNull] BinaryReader source)
        {
            base.ReadFrom( source );
            _rowVersion = source.ReadInt64( );
            _weatherStation = source.ReadGuid( );
            _timestamp = source.ReadDateTime( );
            _deviceCommandSourceType = source.ReadEnum<Types.DeviceCommandSourceType>( );
            _deviceCommandSourceId = source.ReadGuid( );
            _reply = source.ReadGuid( );
        }

    }
    public class WeatherStationCommandReplyObject : BaseDataGuid<Kind>
    {
        long _rowVersion = 0;
        Guid _weatherStation;
        DateTime _timestamp;
        Guid _command;
        Types.DeviceCommandReplyStatus _status = Types.DeviceCommandReplyStatus.Unknown;
        string _message = string.Empty;
        public WeatherStationCommandReplyObject( )
        {
        }

        public WeatherStationCommandReplyObject( ObjectState objectState, Guid id, long rowVersion, Guid weatherStation, DateTime timestamp, Guid command, Types.DeviceCommandReplyStatus status, string message )
            : base( objectState, id )
        {
            _rowVersion = rowVersion;
            _weatherStation = weatherStation;
            _timestamp = timestamp;
            _command = command;
            _status = status;
            _message = message;
        }

        public override Kind GetObjectType()
        {
            return Kind.WeatherStationCommandReply;
        }

        public override BaseData<Kind> Create()
        {
            return new WeatherStationCommandReplyObject( );
        }

        public override void AssignTo( BaseData<Kind> target )
        {
            base.AssignTo( target );
            var destination = ( WeatherStationCommandReplyObject )target;
            destination._rowVersion = _rowVersion;
            destination._weatherStation = _weatherStation;
            destination._timestamp = _timestamp;
            destination._command = _command;
            destination._status = _status;
            destination._message = _message;
        }

        public override bool Equals(BaseData<Kind>? other)
        {
            if (base.Equals(other))
            {
                var obj = ( WeatherStationCommandReplyObject )other;
                if( obj._rowVersion != _rowVersion )
                {
                    return false;
                }
                if( obj._weatherStation != _weatherStation )
                {
                    return false;
                }
                if( obj._timestamp != _timestamp )
                {
                    return false;
                }
                if( obj._command != _command )
                {
                    return false;
                }
                if( obj._status != _status )
                {
                    return false;
                }
                if( obj._message != _message )
                {
                    return false;
                }
                return true;
            }
            return false;
        }

        public override bool IsOfType(Kind objectType)
        {
            if( objectType == Kind.WeatherStationCommandReply )
            {
                return true;
            }
            return base.IsOfType( objectType );
        }

        public long RowVersion
        {
            get => _rowVersion;
            set
            {
                if( _rowVersion != value )
                {
                    _rowVersion = value;
                    OnPropertyChanged( );
                }
            }
        }
        public Guid WeatherStation
        {
            get => _weatherStation;
            set
            {
                if( _weatherStation != value )
                {
                    _weatherStation = value;
                    OnPropertyChanged( );
                }
            }
        }
        public DateTime Timestamp
        {
            get => _timestamp;
            set
            {
                if( _timestamp != value )
                {
                    _timestamp = value;
                    OnPropertyChanged( );
                }
            }
        }
        public Guid Command
        {
            get => _command;
            set
            {
                if( _command != value )
                {
                    _command = value;
                    OnPropertyChanged( );
                }
            }
        }
        public Types.DeviceCommandReplyStatus Status
        {
            get => _status;
            set
            {
                if( _status != value )
                {
                    _status = value;
                    OnPropertyChanged( );
                }
            }
        }
        public string Message
        {
            get => _message;
            set
            {
                if( _message != value )
                {
                    _message = value;
                    OnPropertyChanged( );
                }
            }
        }

        public override void WriteTo( [ DisallowNull ] BinaryWriter destination )
        {
            base.WriteTo( destination );
            destination.Write( _rowVersion );
            destination.Write( _weatherStation );
            destination.Write( _timestamp );
            destination.Write( _command );
            destination.Write( _status );
            destination.Write( _message );
        }

        public override void ReadFrom([DisallowNull] BinaryReader source)
        {
            base.ReadFrom( source );
            _rowVersion = source.ReadInt64( );
            _weatherStation = source.ReadGuid( );
            _timestamp = source.ReadDateTime( );
            _command = source.ReadGuid( );
            _status = source.ReadEnum<Types.DeviceCommandReplyStatus>( );
            _message = source.ReadString( );
        }

    }
    public class WeatherStationConfigurationObject : BaseDataGuid<Kind>
    {
        long _rowVersion = 0;
        Guid _weatherStation;
        DateTime _timestamp;
        TimeSpan _noDataTimeOut;
        TimeSpan _sendInterval;
        double _latitude = 0.0;
        double _longitude = 0.0;
        double _gyroOffset = 0.0;
        bool _enableAveraging = false;
        TimeSpan _averagingInterval;
        public WeatherStationConfigurationObject( )
        {
        }

        public WeatherStationConfigurationObject( ObjectState objectState, Guid id, long rowVersion, Guid weatherStation, DateTime timestamp, TimeSpan noDataTimeOut, TimeSpan sendInterval, double latitude, double longitude, double gyroOffset, bool enableAveraging, TimeSpan averagingInterval )
            : base( objectState, id )
        {
            _rowVersion = rowVersion;
            _weatherStation = weatherStation;
            _timestamp = timestamp;
            _noDataTimeOut = noDataTimeOut;
            _sendInterval = sendInterval;
            _latitude = latitude;
            _longitude = longitude;
            _gyroOffset = gyroOffset;
            _enableAveraging = enableAveraging;
            _averagingInterval = averagingInterval;
        }

        public override Kind GetObjectType()
        {
            return Kind.WeatherStationConfiguration;
        }

        public override BaseData<Kind> Create()
        {
            return new WeatherStationConfigurationObject( );
        }

        public override void AssignTo( BaseData<Kind> target )
        {
            base.AssignTo( target );
            var destination = ( WeatherStationConfigurationObject )target;
            destination._rowVersion = _rowVersion;
            destination._weatherStation = _weatherStation;
            destination._timestamp = _timestamp;
            destination._noDataTimeOut = _noDataTimeOut;
            destination._sendInterval = _sendInterval;
            destination._latitude = _latitude;
            destination._longitude = _longitude;
            destination._gyroOffset = _gyroOffset;
            destination._enableAveraging = _enableAveraging;
            destination._averagingInterval = _averagingInterval;
        }

        public override bool Equals(BaseData<Kind>? other)
        {
            if (base.Equals(other))
            {
                var obj = ( WeatherStationConfigurationObject )other;
                if( obj._rowVersion != _rowVersion )
                {
                    return false;
                }
                if( obj._weatherStation != _weatherStation )
                {
                    return false;
                }
                if( obj._timestamp != _timestamp )
                {
                    return false;
                }
                if( obj._noDataTimeOut != _noDataTimeOut )
                {
                    return false;
                }
                if( obj._sendInterval != _sendInterval )
                {
                    return false;
                }
                if( obj._latitude != _latitude )
                {
                    return false;
                }
                if( obj._longitude != _longitude )
                {
                    return false;
                }
                if( obj._gyroOffset != _gyroOffset )
                {
                    return false;
                }
                if( obj._enableAveraging != _enableAveraging )
                {
                    return false;
                }
                if( obj._averagingInterval != _averagingInterval )
                {
                    return false;
                }
                return true;
            }
            return false;
        }

        public override bool IsOfType(Kind objectType)
        {
            if( objectType == Kind.WeatherStationConfiguration )
            {
                return true;
            }
            return base.IsOfType( objectType );
        }

        public long RowVersion
        {
            get => _rowVersion;
            set
            {
                if( _rowVersion != value )
                {
                    _rowVersion = value;
                    OnPropertyChanged( );
                }
            }
        }
        public Guid WeatherStation
        {
            get => _weatherStation;
            set
            {
                if( _weatherStation != value )
                {
                    _weatherStation = value;
                    OnPropertyChanged( );
                }
            }
        }
        public DateTime Timestamp
        {
            get => _timestamp;
            set
            {
                if( _timestamp != value )
                {
                    _timestamp = value;
                    OnPropertyChanged( );
                }
            }
        }
        public TimeSpan NoDataTimeOut
        {
            get => _noDataTimeOut;
            set
            {
                if( _noDataTimeOut != value )
                {
                    _noDataTimeOut = value;
                    OnPropertyChanged( );
                }
            }
        }
        public TimeSpan SendInterval
        {
            get => _sendInterval;
            set
            {
                if( _sendInterval != value )
                {
                    _sendInterval = value;
                    OnPropertyChanged( );
                }
            }
        }
        public double Latitude
        {
            get => _latitude;
            set
            {
                if( _latitude != value )
                {
                    _latitude = value;
                    OnPropertyChanged( );
                }
            }
        }
        public double Longitude
        {
            get => _longitude;
            set
            {
                if( _longitude != value )
                {
                    _longitude = value;
                    OnPropertyChanged( );
                }
            }
        }
        public double GyroOffset
        {
            get => _gyroOffset;
            set
            {
                if( _gyroOffset != value )
                {
                    _gyroOffset = value;
                    OnPropertyChanged( );
                }
            }
        }
        public bool EnableAveraging
        {
            get => _enableAveraging;
            set
            {
                if( _enableAveraging != value )
                {
                    _enableAveraging = value;
                    OnPropertyChanged( );
                }
            }
        }
        public TimeSpan AveragingInterval
        {
            get => _averagingInterval;
            set
            {
                if( _averagingInterval != value )
                {
                    _averagingInterval = value;
                    OnPropertyChanged( );
                }
            }
        }

        public override void WriteTo( [ DisallowNull ] BinaryWriter destination )
        {
            base.WriteTo( destination );
            destination.Write( _rowVersion );
            destination.Write( _weatherStation );
            destination.Write( _timestamp );
            destination.Write( _noDataTimeOut );
            destination.Write( _sendInterval );
            destination.Write( _latitude );
            destination.Write( _longitude );
            destination.Write( _gyroOffset );
            destination.Write( _enableAveraging );
            destination.Write( _averagingInterval );
        }

        public override void ReadFrom([DisallowNull] BinaryReader source)
        {
            base.ReadFrom( source );
            _rowVersion = source.ReadInt64( );
            _weatherStation = source.ReadGuid( );
            _timestamp = source.ReadDateTime( );
            _noDataTimeOut = source.ReadTimeSpan( );
            _sendInterval = source.ReadTimeSpan( );
            _latitude = source.ReadDouble( );
            _longitude = source.ReadDouble( );
            _gyroOffset = source.ReadDouble( );
            _enableAveraging = source.ReadBoolean( );
            _averagingInterval = source.ReadTimeSpan( );
        }

    }
    public abstract class ZoneObject : BaseDataGuid<Kind>
    {
        long _rowVersion = 0;
        string _name = string.Empty;
        double _longitude = 0.0;
        double _latitude = 0.0;
        Types.ZoneAlarmType _alarmType = Types.ZoneAlarmType.None;
        TimeSpan _alarmTime;
        TimeSpan _radarTrackMinimumLifetime;
        double _speed = 0.0;
        uint _strokeColor = 0;
        uint _fillColor = 0;
        protected ZoneObject( )
        {
        }

        protected ZoneObject( ObjectState objectState, Guid id, long rowVersion, string name, double longitude, double latitude, Types.ZoneAlarmType alarmType, TimeSpan alarmTime, TimeSpan radarTrackMinimumLifetime, double speed, uint strokeColor, uint fillColor )
            : base( objectState, id )
        {
            _rowVersion = rowVersion;
            _name = name;
            _longitude = longitude;
            _latitude = latitude;
            _alarmType = alarmType;
            _alarmTime = alarmTime;
            _radarTrackMinimumLifetime = radarTrackMinimumLifetime;
            _speed = speed;
            _strokeColor = strokeColor;
            _fillColor = fillColor;
        }

        public override void AssignTo( BaseData<Kind> target )
        {
            base.AssignTo( target );
            var destination = ( ZoneObject )target;
            destination._rowVersion = _rowVersion;
            destination._name = _name;
            destination._longitude = _longitude;
            destination._latitude = _latitude;
            destination._alarmType = _alarmType;
            destination._alarmTime = _alarmTime;
            destination._radarTrackMinimumLifetime = _radarTrackMinimumLifetime;
            destination._speed = _speed;
            destination._strokeColor = _strokeColor;
            destination._fillColor = _fillColor;
        }

        public override bool Equals(BaseData<Kind>? other)
        {
            if (base.Equals(other))
            {
                var obj = ( ZoneObject )other;
                if( obj._rowVersion != _rowVersion )
                {
                    return false;
                }
                if( obj._name != _name )
                {
                    return false;
                }
                if( obj._longitude != _longitude )
                {
                    return false;
                }
                if( obj._latitude != _latitude )
                {
                    return false;
                }
                if( obj._alarmType != _alarmType )
                {
                    return false;
                }
                if( obj._alarmTime != _alarmTime )
                {
                    return false;
                }
                if( obj._radarTrackMinimumLifetime != _radarTrackMinimumLifetime )
                {
                    return false;
                }
                if( obj._speed != _speed )
                {
                    return false;
                }
                if( obj._strokeColor != _strokeColor )
                {
                    return false;
                }
                if( obj._fillColor != _fillColor )
                {
                    return false;
                }
                return true;
            }
            return false;
        }

        public override bool IsOfType(Kind objectType)
        {
            if( objectType == Kind.Zone )
            {
                return true;
            }
            return base.IsOfType( objectType );
        }

        public long RowVersion
        {
            get => _rowVersion;
            set
            {
                if( _rowVersion != value )
                {
                    _rowVersion = value;
                    OnPropertyChanged( );
                }
            }
        }
        public string Name
        {
            get => _name;
            set
            {
                if( _name != value )
                {
                    _name = value;
                    OnPropertyChanged( );
                }
            }
        }
        public double Longitude
        {
            get => _longitude;
            set
            {
                if( _longitude != value )
                {
                    _longitude = value;
                    OnPropertyChanged( );
                }
            }
        }
        public double Latitude
        {
            get => _latitude;
            set
            {
                if( _latitude != value )
                {
                    _latitude = value;
                    OnPropertyChanged( );
                }
            }
        }
        public Types.ZoneAlarmType AlarmType
        {
            get => _alarmType;
            set
            {
                if( _alarmType != value )
                {
                    _alarmType = value;
                    OnPropertyChanged( );
                }
            }
        }
        public TimeSpan AlarmTime
        {
            get => _alarmTime;
            set
            {
                if( _alarmTime != value )
                {
                    _alarmTime = value;
                    OnPropertyChanged( );
                }
            }
        }
        public TimeSpan RadarTrackMinimumLifetime
        {
            get => _radarTrackMinimumLifetime;
            set
            {
                if( _radarTrackMinimumLifetime != value )
                {
                    _radarTrackMinimumLifetime = value;
                    OnPropertyChanged( );
                }
            }
        }
        public double Speed
        {
            get => _speed;
            set
            {
                if( _speed != value )
                {
                    _speed = value;
                    OnPropertyChanged( );
                }
            }
        }
        public uint StrokeColor
        {
            get => _strokeColor;
            set
            {
                if( _strokeColor != value )
                {
                    _strokeColor = value;
                    OnPropertyChanged( );
                }
            }
        }
        public uint FillColor
        {
            get => _fillColor;
            set
            {
                if( _fillColor != value )
                {
                    _fillColor = value;
                    OnPropertyChanged( );
                }
            }
        }

        public override void WriteTo( [ DisallowNull ] BinaryWriter destination )
        {
            base.WriteTo( destination );
            destination.Write( _rowVersion );
            destination.Write( _name );
            destination.Write( _longitude );
            destination.Write( _latitude );
            destination.Write( _alarmType );
            destination.Write( _alarmTime );
            destination.Write( _radarTrackMinimumLifetime );
            destination.Write( _speed );
            destination.Write( _strokeColor );
            destination.Write( _fillColor );
        }

        public override void ReadFrom([DisallowNull] BinaryReader source)
        {
            base.ReadFrom( source );
            _rowVersion = source.ReadInt64( );
            _name = source.ReadString( );
            _longitude = source.ReadDouble( );
            _latitude = source.ReadDouble( );
            _alarmType = source.ReadEnum<Types.ZoneAlarmType>( );
            _alarmTime = source.ReadTimeSpan( );
            _radarTrackMinimumLifetime = source.ReadTimeSpan( );
            _speed = source.ReadDouble( );
            _strokeColor = source.ReadUInt32( );
            _fillColor = source.ReadUInt32( );
        }

    }
    public class CircularZoneObject : ZoneObject
    {
        double _radius = 0.0;
        public CircularZoneObject( )
        {
        }

        public CircularZoneObject( ObjectState objectState, Guid id, long rowVersion, string name, double longitude, double latitude, Types.ZoneAlarmType alarmType, TimeSpan alarmTime, TimeSpan radarTrackMinimumLifetime, double speed, uint strokeColor, uint fillColor, double radius )
            : base( objectState, id, rowVersion, name, longitude, latitude, alarmType, alarmTime, radarTrackMinimumLifetime, speed, strokeColor, fillColor )
        {
            _radius = radius;
        }

        public override Kind GetObjectType()
        {
            return Kind.CircularZone;
        }

        public override BaseData<Kind> Create()
        {
            return new CircularZoneObject( );
        }

        public override void AssignTo( BaseData<Kind> target )
        {
            base.AssignTo( target );
            var destination = ( CircularZoneObject )target;
            destination._radius = _radius;
        }

        public override bool Equals(BaseData<Kind>? other)
        {
            if (base.Equals(other))
            {
                var obj = ( CircularZoneObject )other;
                if( obj._radius != _radius )
                {
                    return false;
                }
                return true;
            }
            return false;
        }

        public override bool IsOfType(Kind objectType)
        {
            if( objectType == Kind.CircularZone )
            {
                return true;
            }
            return base.IsOfType( objectType );
        }

        public double Radius
        {
            get => _radius;
            set
            {
                if( _radius != value )
                {
                    _radius = value;
                    OnPropertyChanged( );
                }
            }
        }

        public override void WriteTo( [ DisallowNull ] BinaryWriter destination )
        {
            base.WriteTo( destination );
            destination.Write( _radius );
        }

        public override void ReadFrom([DisallowNull] BinaryReader source)
        {
            base.ReadFrom( source );
            _radius = source.ReadDouble( );
        }

    }
    public class PolygonZoneObject : ZoneObject
    {
        byte[] _polygon = Array.Empty<byte>();
        public PolygonZoneObject( )
        {
        }

        public PolygonZoneObject( ObjectState objectState, Guid id, long rowVersion, string name, double longitude, double latitude, Types.ZoneAlarmType alarmType, TimeSpan alarmTime, TimeSpan radarTrackMinimumLifetime, double speed, uint strokeColor, uint fillColor, byte[] polygon )
            : base( objectState, id, rowVersion, name, longitude, latitude, alarmType, alarmTime, radarTrackMinimumLifetime, speed, strokeColor, fillColor )
        {
            _polygon = polygon;
        }

        public override Kind GetObjectType()
        {
            return Kind.PolygonZone;
        }

        public override BaseData<Kind> Create()
        {
            return new PolygonZoneObject( );
        }

        public override void AssignTo( BaseData<Kind> target )
        {
            base.AssignTo( target );
            var destination = ( PolygonZoneObject )target;
            destination._polygon = (byte[])_polygon.Clone( );
        }

        public override bool Equals(BaseData<Kind>? other)
        {
            if (base.Equals(other))
            {
                var obj = ( PolygonZoneObject )other;
                if( obj._polygon.Equals( _polygon ) == false )
                {
                    return false;
                }
                return true;
            }
            return false;
        }

        public override bool IsOfType(Kind objectType)
        {
            if( objectType == Kind.PolygonZone )
            {
                return true;
            }
            return base.IsOfType( objectType );
        }

        public byte[] Polygon
        {
            get => _polygon;
            set
            {
                if( _polygon != value )
                {
                    _polygon = value;
                    OnPropertyChanged( );
                }
            }
        }

        public override void WriteTo( [ DisallowNull ] BinaryWriter destination )
        {
            base.WriteTo( destination );
            destination.WriteArray( _polygon );
        }

        public override void ReadFrom([DisallowNull] BinaryReader source)
        {
            base.ReadFrom( source );
            _polygon = source.ReadByteArray( );
        }

    }
    public class ZoneExceptionsObject : BaseDataGuid<Kind>
    {
        long _rowVersion = 0;
        Guid _zone;
        DateTime _timestamp;
        public ZoneExceptionsObject( )
        {
        }

        public ZoneExceptionsObject( ObjectState objectState, Guid id, long rowVersion, Guid zone, DateTime timestamp )
            : base( objectState, id )
        {
            _rowVersion = rowVersion;
            _zone = zone;
            _timestamp = timestamp;
        }

        public override Kind GetObjectType()
        {
            return Kind.ZoneExceptions;
        }

        public override BaseData<Kind> Create()
        {
            return new ZoneExceptionsObject( );
        }

        public override void AssignTo( BaseData<Kind> target )
        {
            base.AssignTo( target );
            var destination = ( ZoneExceptionsObject )target;
            destination._rowVersion = _rowVersion;
            destination._zone = _zone;
            destination._timestamp = _timestamp;
        }

        public override bool Equals(BaseData<Kind>? other)
        {
            if (base.Equals(other))
            {
                var obj = ( ZoneExceptionsObject )other;
                if( obj._rowVersion != _rowVersion )
                {
                    return false;
                }
                if( obj._zone != _zone )
                {
                    return false;
                }
                if( obj._timestamp != _timestamp )
                {
                    return false;
                }
                return true;
            }
            return false;
        }

        public override bool IsOfType(Kind objectType)
        {
            if( objectType == Kind.ZoneExceptions )
            {
                return true;
            }
            return base.IsOfType( objectType );
        }

        public long RowVersion
        {
            get => _rowVersion;
            set
            {
                if( _rowVersion != value )
                {
                    _rowVersion = value;
                    OnPropertyChanged( );
                }
            }
        }
        public Guid Zone
        {
            get => _zone;
            set
            {
                if( _zone != value )
                {
                    _zone = value;
                    OnPropertyChanged( );
                }
            }
        }
        public DateTime Timestamp
        {
            get => _timestamp;
            set
            {
                if( _timestamp != value )
                {
                    _timestamp = value;
                    OnPropertyChanged( );
                }
            }
        }

        public override void WriteTo( [ DisallowNull ] BinaryWriter destination )
        {
            base.WriteTo( destination );
            destination.Write( _rowVersion );
            destination.Write( _zone );
            destination.Write( _timestamp );
        }

        public override void ReadFrom([DisallowNull] BinaryReader source)
        {
            base.ReadFrom( source );
            _rowVersion = source.ReadInt64( );
            _zone = source.ReadGuid( );
            _timestamp = source.ReadDateTime( );
        }

    }
    public class ZoneExceptionsVesselLinkObject : BaseDataGuid<Kind>
    {
        long _rowVersion = 0;
        Guid _zoneExceptions;
        Guid _vessel;
        public ZoneExceptionsVesselLinkObject( )
        {
        }

        public ZoneExceptionsVesselLinkObject( ObjectState objectState, Guid id, long rowVersion, Guid zoneExceptions, Guid vessel )
            : base( objectState, id )
        {
            _rowVersion = rowVersion;
            _zoneExceptions = zoneExceptions;
            _vessel = vessel;
        }

        public override Kind GetObjectType()
        {
            return Kind.ZoneExceptionsVesselLink;
        }

        public override BaseData<Kind> Create()
        {
            return new ZoneExceptionsVesselLinkObject( );
        }

        public override void AssignTo( BaseData<Kind> target )
        {
            base.AssignTo( target );
            var destination = ( ZoneExceptionsVesselLinkObject )target;
            destination._rowVersion = _rowVersion;
            destination._zoneExceptions = _zoneExceptions;
            destination._vessel = _vessel;
        }

        public override bool Equals(BaseData<Kind>? other)
        {
            if (base.Equals(other))
            {
                var obj = ( ZoneExceptionsVesselLinkObject )other;
                if( obj._rowVersion != _rowVersion )
                {
                    return false;
                }
                if( obj._zoneExceptions != _zoneExceptions )
                {
                    return false;
                }
                if( obj._vessel != _vessel )
                {
                    return false;
                }
                return true;
            }
            return false;
        }

        public override bool IsOfType(Kind objectType)
        {
            if( objectType == Kind.ZoneExceptionsVesselLink )
            {
                return true;
            }
            return base.IsOfType( objectType );
        }

        public long RowVersion
        {
            get => _rowVersion;
            set
            {
                if( _rowVersion != value )
                {
                    _rowVersion = value;
                    OnPropertyChanged( );
                }
            }
        }
        public Guid ZoneExceptions
        {
            get => _zoneExceptions;
            set
            {
                if( _zoneExceptions != value )
                {
                    _zoneExceptions = value;
                    OnPropertyChanged( );
                }
            }
        }
        public Guid Vessel
        {
            get => _vessel;
            set
            {
                if( _vessel != value )
                {
                    _vessel = value;
                    OnPropertyChanged( );
                }
            }
        }

        public override void WriteTo( [ DisallowNull ] BinaryWriter destination )
        {
            base.WriteTo( destination );
            destination.Write( _rowVersion );
            destination.Write( _zoneExceptions );
            destination.Write( _vessel );
        }

        public override void ReadFrom([DisallowNull] BinaryReader source)
        {
            base.ReadFrom( source );
            _rowVersion = source.ReadInt64( );
            _zoneExceptions = source.ReadGuid( );
            _vessel = source.ReadGuid( );
        }

    }
    public class ZoneTrackAlarmObject : BaseDataGuid<Kind>
    {
        long _rowVersion = 0;
        Guid _track;
        Guid _zone;
        Guid _radarTrack;
        DateTime _timestamp;
        double _latitude = 0.0;
        double _longitude = 0.0;
        double _speed = 0.0;
        double? _course;
        double? _heading;
        double _enterLatitude = 0.0;
        double _enterLongitude = 0.0;
        double? _leaveLatitude;
        double? _leaveLongitude;
        public ZoneTrackAlarmObject( )
        {
        }

        public ZoneTrackAlarmObject( ObjectState objectState, Guid id, long rowVersion, Guid track, Guid zone, Guid radarTrack, DateTime timestamp, double latitude, double longitude, double speed, double? course, double? heading, double enterLatitude, double enterLongitude, double? leaveLatitude, double? leaveLongitude )
            : base( objectState, id )
        {
            _rowVersion = rowVersion;
            _track = track;
            _zone = zone;
            _radarTrack = radarTrack;
            _timestamp = timestamp;
            _latitude = latitude;
            _longitude = longitude;
            _speed = speed;
            _course = course;
            _heading = heading;
            _enterLatitude = enterLatitude;
            _enterLongitude = enterLongitude;
            _leaveLatitude = leaveLatitude;
            _leaveLongitude = leaveLongitude;
        }

        public override Kind GetObjectType()
        {
            return Kind.ZoneTrackAlarm;
        }

        public override BaseData<Kind> Create()
        {
            return new ZoneTrackAlarmObject( );
        }

        public override void AssignTo( BaseData<Kind> target )
        {
            base.AssignTo( target );
            var destination = ( ZoneTrackAlarmObject )target;
            destination._rowVersion = _rowVersion;
            destination._track = _track;
            destination._zone = _zone;
            destination._radarTrack = _radarTrack;
            destination._timestamp = _timestamp;
            destination._latitude = _latitude;
            destination._longitude = _longitude;
            destination._speed = _speed;
            destination._course = _course;
            destination._heading = _heading;
            destination._enterLatitude = _enterLatitude;
            destination._enterLongitude = _enterLongitude;
            destination._leaveLatitude = _leaveLatitude;
            destination._leaveLongitude = _leaveLongitude;
        }

        public override bool Equals(BaseData<Kind>? other)
        {
            if (base.Equals(other))
            {
                var obj = ( ZoneTrackAlarmObject )other;
                if( obj._rowVersion != _rowVersion )
                {
                    return false;
                }
                if( obj._track != _track )
                {
                    return false;
                }
                if( obj._zone != _zone )
                {
                    return false;
                }
                if( obj._radarTrack != _radarTrack )
                {
                    return false;
                }
                if( obj._timestamp != _timestamp )
                {
                    return false;
                }
                if( obj._latitude != _latitude )
                {
                    return false;
                }
                if( obj._longitude != _longitude )
                {
                    return false;
                }
                if( obj._speed != _speed )
                {
                    return false;
                }
                if( obj._course != _course )
                {
                    return false;
                }
                if( obj._heading != _heading )
                {
                    return false;
                }
                if( obj._enterLatitude != _enterLatitude )
                {
                    return false;
                }
                if( obj._enterLongitude != _enterLongitude )
                {
                    return false;
                }
                if( obj._leaveLatitude != _leaveLatitude )
                {
                    return false;
                }
                if( obj._leaveLongitude != _leaveLongitude )
                {
                    return false;
                }
                return true;
            }
            return false;
        }

        public override bool IsOfType(Kind objectType)
        {
            if( objectType == Kind.ZoneTrackAlarm )
            {
                return true;
            }
            return base.IsOfType( objectType );
        }

        public long RowVersion
        {
            get => _rowVersion;
            set
            {
                if( _rowVersion != value )
                {
                    _rowVersion = value;
                    OnPropertyChanged( );
                }
            }
        }
        public Guid Track
        {
            get => _track;
            set
            {
                if( _track != value )
                {
                    _track = value;
                    OnPropertyChanged( );
                }
            }
        }
        public Guid Zone
        {
            get => _zone;
            set
            {
                if( _zone != value )
                {
                    _zone = value;
                    OnPropertyChanged( );
                }
            }
        }
        public Guid RadarTrack
        {
            get => _radarTrack;
            set
            {
                if( _radarTrack != value )
                {
                    _radarTrack = value;
                    OnPropertyChanged( );
                }
            }
        }
        public DateTime Timestamp
        {
            get => _timestamp;
            set
            {
                if( _timestamp != value )
                {
                    _timestamp = value;
                    OnPropertyChanged( );
                }
            }
        }
        public double Latitude
        {
            get => _latitude;
            set
            {
                if( _latitude != value )
                {
                    _latitude = value;
                    OnPropertyChanged( );
                }
            }
        }
        public double Longitude
        {
            get => _longitude;
            set
            {
                if( _longitude != value )
                {
                    _longitude = value;
                    OnPropertyChanged( );
                }
            }
        }
        public double Speed
        {
            get => _speed;
            set
            {
                if( _speed != value )
                {
                    _speed = value;
                    OnPropertyChanged( );
                }
            }
        }
        public double? Course
        {
            get => _course;
            set
            {
                if( _course != value )
                {
                    _course = value;
                    OnPropertyChanged( );
                }
            }
        }
        public double? Heading
        {
            get => _heading;
            set
            {
                if( _heading != value )
                {
                    _heading = value;
                    OnPropertyChanged( );
                }
            }
        }
        public double EnterLatitude
        {
            get => _enterLatitude;
            set
            {
                if( _enterLatitude != value )
                {
                    _enterLatitude = value;
                    OnPropertyChanged( );
                }
            }
        }
        public double EnterLongitude
        {
            get => _enterLongitude;
            set
            {
                if( _enterLongitude != value )
                {
                    _enterLongitude = value;
                    OnPropertyChanged( );
                }
            }
        }
        public double? LeaveLatitude
        {
            get => _leaveLatitude;
            set
            {
                if( _leaveLatitude != value )
                {
                    _leaveLatitude = value;
                    OnPropertyChanged( );
                }
            }
        }
        public double? LeaveLongitude
        {
            get => _leaveLongitude;
            set
            {
                if( _leaveLongitude != value )
                {
                    _leaveLongitude = value;
                    OnPropertyChanged( );
                }
            }
        }

        public override void WriteTo( [ DisallowNull ] BinaryWriter destination )
        {
            base.WriteTo( destination );
            destination.Write( _rowVersion );
            destination.Write( _track );
            destination.Write( _zone );
            destination.Write( _radarTrack );
            destination.Write( _timestamp );
            destination.Write( _latitude );
            destination.Write( _longitude );
            destination.Write( _speed );
            destination.Write( _course );
            destination.Write( _heading );
            destination.Write( _enterLatitude );
            destination.Write( _enterLongitude );
            destination.Write( _leaveLatitude );
            destination.Write( _leaveLongitude );
        }

        public override void ReadFrom([DisallowNull] BinaryReader source)
        {
            base.ReadFrom( source );
            _rowVersion = source.ReadInt64( );
            _track = source.ReadGuid( );
            _zone = source.ReadGuid( );
            _radarTrack = source.ReadGuid( );
            _timestamp = source.ReadDateTime( );
            _latitude = source.ReadDouble( );
            _longitude = source.ReadDouble( );
            _speed = source.ReadDouble( );
            _course = source.ReadNullableDouble( );
            _heading = source.ReadNullableDouble( );
            _enterLatitude = source.ReadDouble( );
            _enterLongitude = source.ReadDouble( );
            _leaveLatitude = source.ReadNullableDouble( );
            _leaveLongitude = source.ReadNullableDouble( );
        }

    }
}
