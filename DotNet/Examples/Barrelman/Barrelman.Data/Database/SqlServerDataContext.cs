using System;
using System.Diagnostics.CodeAnalysis;
using System.IO;
using System.Runtime.CompilerServices;
using System.Text;

using Microsoft.Data.SqlClient;
using Microsoft.Extensions.Logging;

using Harlinn.Common.Core.Net;
using Harlinn.Common.Core.Net.Data;
using Harlinn.Common.Core.Net.Data.SqlClient;
using Harlinn.Common.Core.Net.IO;

using Barrelman.Data.Types;

namespace Barrelman.Data.Database
{
    public class SqlServerDataContext : IDataContext
    {
        ILoggerFactory _loggerFactory;
        ILogger _logger;
        SqlConnection? _sqlConnection;
        bool _ownsConnection;
        bool _isDisposed = false;
        StoredProcedures _storedProcedures;

        public SqlServerDataContext( [DisallowNull] ILoggerFactory loggerFactory, [DisallowNull] SqlConnection sqlConnection, bool ownsConnection = true )
        {
            _loggerFactory = loggerFactory;
            _logger = loggerFactory.CreateLogger<DataReaderWrapper>( );
            _sqlConnection = sqlConnection;
            _ownsConnection = ownsConnection;
            _storedProcedures = new StoredProcedures( loggerFactory, sqlConnection );
        }

        #region IDisposable Members
        public void Dispose( )
        {
            try
            {
                if ( !_isDisposed )
                {
                    _isDisposed = true;

                    OnDispose( );
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        protected virtual void OnDispose( )
        {
            try
            {
                DisposeConnection( );
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        protected virtual void DisposeConnection( )
        {
            try
            {
                if ( ( _sqlConnection != null ) && ( _ownsConnection ) )
                {
                    SqlConnection sqlConnection = _sqlConnection;
                    _sqlConnection = null;
                    sqlConnection.Dispose( );
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        #endregion

        protected void LogException([DisallowNull] Exception exc, [CallerMemberName] string methodName = "" )
        {
            string exceptionMessageText = exc.Message;
            string messageText = string.Format( "Exception in{ 0 } - {1}", methodName, exceptionMessageText );

            _logger.LogError( exc, messageText );
#if DEBUG
            if ( System.Diagnostics.Debugger.IsAttached )
            {
                System.Diagnostics.Debugger.Log( 1, "Exception", messageText );
                System.Diagnostics.Debugger.Break( );
            }
#endif
        }

        SqlConnection GetSqlConnection( )
        {
            return _sqlConnection;
        }

        public bool Merge( BaseDataGuid<Kind> dataObject )
        {
            return _storedProcedures.Merge( dataObject );
        }

        public bool Insert( BaseDataGuid<Kind> dataObject )
        {
            return _storedProcedures.Insert( dataObject );
        }

        public bool Update( BaseDataGuid<Kind> dataObject )
        {
            return _storedProcedures.Update( dataObject );
        }

        public bool Delete( BaseDataGuid<Kind> dataObject )
        {
            return _storedProcedures.Delete( dataObject );
        }

        // ---------------------------------------------------------------------
        // AircraftType queries
        // ---------------------------------------------------------------------
        public SimpleAircraftTypeDataReader GetAircraftTypeByIdDataReader( Guid id )
        {
            const string sql = SimpleAircraftTypeDataReader.BaseQuery + "WHERE " + SimpleAircraftTypeDataReader.ViewAliasName + ".[Id] = @id"; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                sqlCommandParameters.AddGuid( "@id", id );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleAircraftTypeDataReader = new SimpleAircraftTypeDataReader( _loggerFactory, sqlDataReader );
                return simpleAircraftTypeDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public AircraftTypeObject? GetAircraftTypeById( Guid id )
        {
            var simpleAircraftTypeDataReader = GetAircraftTypeByIdDataReader( id );
            using ( simpleAircraftTypeDataReader )
            {
                if ( simpleAircraftTypeDataReader.Read( ) )
                {
                    var result = simpleAircraftTypeDataReader.GetDataObject( );
                    return result;
                }
            }
            return null;
        }

        public void GetAircraftTypeById( Guid id, Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleAircraftTypeDataReader = GetAircraftTypeByIdDataReader( id );
                using ( simpleAircraftTypeDataReader )
                {
                    if ( simpleAircraftTypeDataReader.Read( ) )
                    {
                        destinationWriter.Write( true );
                        simpleAircraftTypeDataReader.WriteTo( destinationWriter );
                    }
                    else
                    {
                        destinationWriter.Write( false );
                    }
                }
            }
        }

        public SimpleAircraftTypeDataReader GetAircraftTypeCollectionDataReader( )
        {
            const string sql = SimpleAircraftTypeDataReader.BaseQuery; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleAircraftTypeDataReader = new SimpleAircraftTypeDataReader( _loggerFactory, sqlDataReader );
                return simpleAircraftTypeDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public IList<AircraftTypeObject> GetAircraftTypeCollection( )
        {
            var result = new List<AircraftTypeObject>( );
            var simpleAircraftTypeDataReader = GetAircraftTypeCollectionDataReader( );
            using ( simpleAircraftTypeDataReader )
            {
                while ( simpleAircraftTypeDataReader.Read( ) )
                {
                    var data = simpleAircraftTypeDataReader.GetDataObject( );
                    result.Add( data );
                }
            }
            return result;
        }

        public void GetAircraftTypeCollection( Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleAircraftTypeDataReader = GetAircraftTypeCollectionDataReader( );
                using ( simpleAircraftTypeDataReader )
                {
                    simpleAircraftTypeDataReader.WriteResultSetTo( destinationWriter );
                }
            }
        }

        public SimpleAircraftTypeDataReader GetAircraftTypeByNameDataReader( string name )
        {
            const string sql = SimpleAircraftTypeDataReader.BaseQuery + " WHERE " +
                    SimpleAircraftTypeDataReader.ViewAliasName + ".[Name] = @name " +
                    " ORDER BY " + SimpleAircraftTypeDataReader.ViewAliasName + ".[Name]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var nameParameter = sqlCommandParameters.AddNVarChar( "@name", name, 127 );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleAircraftTypeDataReader = new SimpleAircraftTypeDataReader( _loggerFactory, sqlDataReader );
                return simpleAircraftTypeDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public AircraftTypeObject? GetAircraftTypeByName( string name )
        {
            throw new NotImplementedException( );
        }
        // ---------------------------------------------------------------------
        // AisDeviceCommand queries
        // ---------------------------------------------------------------------
        public SimpleAisDeviceCommandDataReader GetAisDeviceCommandByIdDataReader( Guid id )
        {
            const string sql = SimpleAisDeviceCommandDataReader.BaseQuery + "WHERE " + SimpleAisDeviceCommandDataReader.ViewAliasName + ".[Id] = @id"; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                sqlCommandParameters.AddGuid( "@id", id );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleAisDeviceCommandDataReader = new SimpleAisDeviceCommandDataReader( _loggerFactory, sqlDataReader );
                return simpleAisDeviceCommandDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public AisDeviceCommandObject? GetAisDeviceCommandById( Guid id )
        {
            var simpleAisDeviceCommandDataReader = GetAisDeviceCommandByIdDataReader( id );
            using ( simpleAisDeviceCommandDataReader )
            {
                if ( simpleAisDeviceCommandDataReader.Read( ) )
                {
                    var result = simpleAisDeviceCommandDataReader.GetDataObject( );
                    return result;
                }
            }
            return null;
        }

        public void GetAisDeviceCommandById( Guid id, Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleAisDeviceCommandDataReader = GetAisDeviceCommandByIdDataReader( id );
                using ( simpleAisDeviceCommandDataReader )
                {
                    if ( simpleAisDeviceCommandDataReader.Read( ) )
                    {
                        destinationWriter.Write( true );
                        simpleAisDeviceCommandDataReader.WriteTo( destinationWriter );
                    }
                    else
                    {
                        destinationWriter.Write( false );
                    }
                }
            }
        }

        public SimpleAisDeviceCommandDataReader GetAisDeviceCommandCollectionDataReader( )
        {
            const string sql = SimpleAisDeviceCommandDataReader.BaseQuery; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleAisDeviceCommandDataReader = new SimpleAisDeviceCommandDataReader( _loggerFactory, sqlDataReader );
                return simpleAisDeviceCommandDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public IList<AisDeviceCommandObject> GetAisDeviceCommandCollection( )
        {
            var result = new List<AisDeviceCommandObject>( );
            var simpleAisDeviceCommandDataReader = GetAisDeviceCommandCollectionDataReader( );
            using ( simpleAisDeviceCommandDataReader )
            {
                while ( simpleAisDeviceCommandDataReader.Read( ) )
                {
                    var data = simpleAisDeviceCommandDataReader.GetDataObject( );
                    result.Add( data );
                }
            }
            return result;
        }

        public void GetAisDeviceCommandCollection( Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleAisDeviceCommandDataReader = GetAisDeviceCommandCollectionDataReader( );
                using ( simpleAisDeviceCommandDataReader )
                {
                    simpleAisDeviceCommandDataReader.WriteResultSetTo( destinationWriter );
                }
            }
        }

        public SimpleAisDeviceCommandDataReader GetAisDeviceCommandCollectionByAisDeviceDataReader( Guid aisDevice )
        {
            const string sql = SimpleAisDeviceCommandDataReader.BaseQuery + " WHERE " +
                    SimpleAisDeviceCommandDataReader.ViewAliasName + ".[AisDevice] = @aisDevice " +
                    " ORDER BY " + SimpleAisDeviceCommandDataReader.ViewAliasName + ".[AisDevice]," +SimpleAisDeviceCommandDataReader.ViewAliasName + ".[Timestamp]," +SimpleAisDeviceCommandDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var aisDeviceParameter = sqlCommandParameters.AddReference( "@aisDevice", aisDevice );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleAisDeviceCommandDataReader = new SimpleAisDeviceCommandDataReader( _loggerFactory, sqlDataReader );
                return simpleAisDeviceCommandDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<AisDeviceCommandObject> GetAisDeviceCommandCollectionByAisDevice( Guid aisDevice )
        {
            throw new NotImplementedException( );
        }
        public SimpleAisDeviceCommandDataReader GetAisDeviceCommandCollectionByAisDeviceAndTimestampDataReader( Guid aisDevice, DateTime timestamp )
        {
            const string sql = SimpleAisDeviceCommandDataReader.BaseQuery + " WHERE " +
                    SimpleAisDeviceCommandDataReader.ViewAliasName + ".[AisDevice] = @aisDevice AND " +
                    SimpleAisDeviceCommandDataReader.ViewAliasName + ".[Timestamp] = @timestamp " +
                    " ORDER BY " + SimpleAisDeviceCommandDataReader.ViewAliasName + ".[AisDevice]," +SimpleAisDeviceCommandDataReader.ViewAliasName + ".[Timestamp]," +SimpleAisDeviceCommandDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var aisDeviceParameter = sqlCommandParameters.AddReference( "@aisDevice", aisDevice );
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@timestamp", timestamp );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleAisDeviceCommandDataReader = new SimpleAisDeviceCommandDataReader( _loggerFactory, sqlDataReader );
                return simpleAisDeviceCommandDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<AisDeviceCommandObject> GetAisDeviceCommandCollectionByAisDeviceAndTimestamp( Guid aisDevice, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<AisDeviceCommandObject> GetAisDeviceCommandCollectionByAisDeviceAtTimestamp( Guid aisDevice, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<AisDeviceCommandObject> GetAisDeviceCommandCollectionByAisDeviceFromTimestamp( Guid aisDevice, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<AisDeviceCommandObject> GetAisDeviceCommandCollectionByAisDeviceUntilTimestamp( Guid aisDevice, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<AisDeviceCommandObject> GetAisDeviceCommandCollectionByAisDeviceOverTimestamp( Guid aisDevice, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException( );
        }
        public SimpleAisDeviceCommandDataReader GetAisDeviceCommandCollectionByTimestampDataReader( DateTime timestamp )
        {
            const string sql = SimpleAisDeviceCommandDataReader.BaseQuery + " WHERE " +
                    SimpleAisDeviceCommandDataReader.ViewAliasName + ".[Timestamp] = @timestamp " +
                    " ORDER BY " + SimpleAisDeviceCommandDataReader.ViewAliasName + ".[Timestamp]," +SimpleAisDeviceCommandDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@timestamp", timestamp );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleAisDeviceCommandDataReader = new SimpleAisDeviceCommandDataReader( _loggerFactory, sqlDataReader );
                return simpleAisDeviceCommandDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<AisDeviceCommandObject> GetAisDeviceCommandCollectionByTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<AisDeviceCommandObject> GetAisDeviceCommandCollectionAtTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<AisDeviceCommandObject> GetAisDeviceCommandCollectionFromTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<AisDeviceCommandObject> GetAisDeviceCommandCollectionUntilTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<AisDeviceCommandObject> GetAisDeviceCommandCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException( );
        }
        public SimpleAisDeviceCommandDataReader GetAisDeviceCommandCollectionByReplyDataReader( Guid? reply )
        {
            const string sql = SimpleAisDeviceCommandDataReader.BaseQuery + " WHERE " +
                    SimpleAisDeviceCommandDataReader.ViewAliasName + ".[Reply] = @reply " +
                    " ORDER BY " + SimpleAisDeviceCommandDataReader.ViewAliasName + ".[Reply]," +SimpleAisDeviceCommandDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var replyParameter = sqlCommandParameters.AddReference( "@reply", reply );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleAisDeviceCommandDataReader = new SimpleAisDeviceCommandDataReader( _loggerFactory, sqlDataReader );
                return simpleAisDeviceCommandDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<AisDeviceCommandObject> GetAisDeviceCommandCollectionByReply( Guid? reply )
        {
            throw new NotImplementedException( );
        }
        public IList<AisDeviceCommandObject> GetAisDeviceCommandCollectionByReplyIsNull(  )
        {
            throw new NotImplementedException( );
        }
        // ---------------------------------------------------------------------
        // AisDeviceCommandReply queries
        // ---------------------------------------------------------------------
        public SimpleAisDeviceCommandReplyDataReader GetAisDeviceCommandReplyByIdDataReader( Guid id )
        {
            const string sql = SimpleAisDeviceCommandReplyDataReader.BaseQuery + "WHERE " + SimpleAisDeviceCommandReplyDataReader.ViewAliasName + ".[Id] = @id"; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                sqlCommandParameters.AddGuid( "@id", id );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleAisDeviceCommandReplyDataReader = new SimpleAisDeviceCommandReplyDataReader( _loggerFactory, sqlDataReader );
                return simpleAisDeviceCommandReplyDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public AisDeviceCommandReplyObject? GetAisDeviceCommandReplyById( Guid id )
        {
            var simpleAisDeviceCommandReplyDataReader = GetAisDeviceCommandReplyByIdDataReader( id );
            using ( simpleAisDeviceCommandReplyDataReader )
            {
                if ( simpleAisDeviceCommandReplyDataReader.Read( ) )
                {
                    var result = simpleAisDeviceCommandReplyDataReader.GetDataObject( );
                    return result;
                }
            }
            return null;
        }

        public void GetAisDeviceCommandReplyById( Guid id, Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleAisDeviceCommandReplyDataReader = GetAisDeviceCommandReplyByIdDataReader( id );
                using ( simpleAisDeviceCommandReplyDataReader )
                {
                    if ( simpleAisDeviceCommandReplyDataReader.Read( ) )
                    {
                        destinationWriter.Write( true );
                        simpleAisDeviceCommandReplyDataReader.WriteTo( destinationWriter );
                    }
                    else
                    {
                        destinationWriter.Write( false );
                    }
                }
            }
        }

        public SimpleAisDeviceCommandReplyDataReader GetAisDeviceCommandReplyCollectionDataReader( )
        {
            const string sql = SimpleAisDeviceCommandReplyDataReader.BaseQuery; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleAisDeviceCommandReplyDataReader = new SimpleAisDeviceCommandReplyDataReader( _loggerFactory, sqlDataReader );
                return simpleAisDeviceCommandReplyDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public IList<AisDeviceCommandReplyObject> GetAisDeviceCommandReplyCollection( )
        {
            var result = new List<AisDeviceCommandReplyObject>( );
            var simpleAisDeviceCommandReplyDataReader = GetAisDeviceCommandReplyCollectionDataReader( );
            using ( simpleAisDeviceCommandReplyDataReader )
            {
                while ( simpleAisDeviceCommandReplyDataReader.Read( ) )
                {
                    var data = simpleAisDeviceCommandReplyDataReader.GetDataObject( );
                    result.Add( data );
                }
            }
            return result;
        }

        public void GetAisDeviceCommandReplyCollection( Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleAisDeviceCommandReplyDataReader = GetAisDeviceCommandReplyCollectionDataReader( );
                using ( simpleAisDeviceCommandReplyDataReader )
                {
                    simpleAisDeviceCommandReplyDataReader.WriteResultSetTo( destinationWriter );
                }
            }
        }

        public SimpleAisDeviceCommandReplyDataReader GetAisDeviceCommandReplyCollectionByAisDeviceDataReader( Guid aisDevice )
        {
            const string sql = SimpleAisDeviceCommandReplyDataReader.BaseQuery + " WHERE " +
                    SimpleAisDeviceCommandReplyDataReader.ViewAliasName + ".[AisDevice] = @aisDevice " +
                    " ORDER BY " + SimpleAisDeviceCommandReplyDataReader.ViewAliasName + ".[AisDevice]," +SimpleAisDeviceCommandReplyDataReader.ViewAliasName + ".[Timestamp]," +SimpleAisDeviceCommandReplyDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var aisDeviceParameter = sqlCommandParameters.AddReference( "@aisDevice", aisDevice );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleAisDeviceCommandReplyDataReader = new SimpleAisDeviceCommandReplyDataReader( _loggerFactory, sqlDataReader );
                return simpleAisDeviceCommandReplyDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<AisDeviceCommandReplyObject> GetAisDeviceCommandReplyCollectionByAisDevice( Guid aisDevice )
        {
            throw new NotImplementedException( );
        }
        public SimpleAisDeviceCommandReplyDataReader GetAisDeviceCommandReplyCollectionByAisDeviceAndTimestampDataReader( Guid aisDevice, DateTime timestamp )
        {
            const string sql = SimpleAisDeviceCommandReplyDataReader.BaseQuery + " WHERE " +
                    SimpleAisDeviceCommandReplyDataReader.ViewAliasName + ".[AisDevice] = @aisDevice AND " +
                    SimpleAisDeviceCommandReplyDataReader.ViewAliasName + ".[Timestamp] = @timestamp " +
                    " ORDER BY " + SimpleAisDeviceCommandReplyDataReader.ViewAliasName + ".[AisDevice]," +SimpleAisDeviceCommandReplyDataReader.ViewAliasName + ".[Timestamp]," +SimpleAisDeviceCommandReplyDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var aisDeviceParameter = sqlCommandParameters.AddReference( "@aisDevice", aisDevice );
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@timestamp", timestamp );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleAisDeviceCommandReplyDataReader = new SimpleAisDeviceCommandReplyDataReader( _loggerFactory, sqlDataReader );
                return simpleAisDeviceCommandReplyDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<AisDeviceCommandReplyObject> GetAisDeviceCommandReplyCollectionByAisDeviceAndTimestamp( Guid aisDevice, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<AisDeviceCommandReplyObject> GetAisDeviceCommandReplyCollectionByAisDeviceAtTimestamp( Guid aisDevice, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<AisDeviceCommandReplyObject> GetAisDeviceCommandReplyCollectionByAisDeviceFromTimestamp( Guid aisDevice, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<AisDeviceCommandReplyObject> GetAisDeviceCommandReplyCollectionByAisDeviceUntilTimestamp( Guid aisDevice, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<AisDeviceCommandReplyObject> GetAisDeviceCommandReplyCollectionByAisDeviceOverTimestamp( Guid aisDevice, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException( );
        }
        public SimpleAisDeviceCommandReplyDataReader GetAisDeviceCommandReplyCollectionByTimestampDataReader( DateTime timestamp )
        {
            const string sql = SimpleAisDeviceCommandReplyDataReader.BaseQuery + " WHERE " +
                    SimpleAisDeviceCommandReplyDataReader.ViewAliasName + ".[Timestamp] = @timestamp " +
                    " ORDER BY " + SimpleAisDeviceCommandReplyDataReader.ViewAliasName + ".[Timestamp]," +SimpleAisDeviceCommandReplyDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@timestamp", timestamp );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleAisDeviceCommandReplyDataReader = new SimpleAisDeviceCommandReplyDataReader( _loggerFactory, sqlDataReader );
                return simpleAisDeviceCommandReplyDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<AisDeviceCommandReplyObject> GetAisDeviceCommandReplyCollectionByTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<AisDeviceCommandReplyObject> GetAisDeviceCommandReplyCollectionAtTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<AisDeviceCommandReplyObject> GetAisDeviceCommandReplyCollectionFromTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<AisDeviceCommandReplyObject> GetAisDeviceCommandReplyCollectionUntilTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<AisDeviceCommandReplyObject> GetAisDeviceCommandReplyCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException( );
        }
        public SimpleAisDeviceCommandReplyDataReader GetAisDeviceCommandReplyByCommandDataReader( Guid command )
        {
            const string sql = SimpleAisDeviceCommandReplyDataReader.BaseQuery + " WHERE " +
                    SimpleAisDeviceCommandReplyDataReader.ViewAliasName + ".[Command] = @command " +
                    " ORDER BY " + SimpleAisDeviceCommandReplyDataReader.ViewAliasName + ".[Command]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var commandParameter = sqlCommandParameters.AddReference( "@command", command );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleAisDeviceCommandReplyDataReader = new SimpleAisDeviceCommandReplyDataReader( _loggerFactory, sqlDataReader );
                return simpleAisDeviceCommandReplyDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public AisDeviceCommandReplyObject? GetAisDeviceCommandReplyByCommand( Guid command )
        {
            throw new NotImplementedException( );
        }
        // ---------------------------------------------------------------------
        // AisDeviceConfiguration queries
        // ---------------------------------------------------------------------
        public SimpleAisDeviceConfigurationDataReader GetAisDeviceConfigurationByIdDataReader( Guid id )
        {
            const string sql = SimpleAisDeviceConfigurationDataReader.BaseQuery + "WHERE " + SimpleAisDeviceConfigurationDataReader.ViewAliasName + ".[Id] = @id"; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                sqlCommandParameters.AddGuid( "@id", id );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleAisDeviceConfigurationDataReader = new SimpleAisDeviceConfigurationDataReader( _loggerFactory, sqlDataReader );
                return simpleAisDeviceConfigurationDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public AisDeviceConfigurationObject? GetAisDeviceConfigurationById( Guid id )
        {
            var simpleAisDeviceConfigurationDataReader = GetAisDeviceConfigurationByIdDataReader( id );
            using ( simpleAisDeviceConfigurationDataReader )
            {
                if ( simpleAisDeviceConfigurationDataReader.Read( ) )
                {
                    var result = simpleAisDeviceConfigurationDataReader.GetDataObject( );
                    return result;
                }
            }
            return null;
        }

        public void GetAisDeviceConfigurationById( Guid id, Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleAisDeviceConfigurationDataReader = GetAisDeviceConfigurationByIdDataReader( id );
                using ( simpleAisDeviceConfigurationDataReader )
                {
                    if ( simpleAisDeviceConfigurationDataReader.Read( ) )
                    {
                        destinationWriter.Write( true );
                        simpleAisDeviceConfigurationDataReader.WriteTo( destinationWriter );
                    }
                    else
                    {
                        destinationWriter.Write( false );
                    }
                }
            }
        }

        public SimpleAisDeviceConfigurationDataReader GetAisDeviceConfigurationCollectionDataReader( )
        {
            const string sql = SimpleAisDeviceConfigurationDataReader.BaseQuery; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleAisDeviceConfigurationDataReader = new SimpleAisDeviceConfigurationDataReader( _loggerFactory, sqlDataReader );
                return simpleAisDeviceConfigurationDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public IList<AisDeviceConfigurationObject> GetAisDeviceConfigurationCollection( )
        {
            var result = new List<AisDeviceConfigurationObject>( );
            var simpleAisDeviceConfigurationDataReader = GetAisDeviceConfigurationCollectionDataReader( );
            using ( simpleAisDeviceConfigurationDataReader )
            {
                while ( simpleAisDeviceConfigurationDataReader.Read( ) )
                {
                    var data = simpleAisDeviceConfigurationDataReader.GetDataObject( );
                    result.Add( data );
                }
            }
            return result;
        }

        public void GetAisDeviceConfigurationCollection( Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleAisDeviceConfigurationDataReader = GetAisDeviceConfigurationCollectionDataReader( );
                using ( simpleAisDeviceConfigurationDataReader )
                {
                    simpleAisDeviceConfigurationDataReader.WriteResultSetTo( destinationWriter );
                }
            }
        }

        public SimpleAisDeviceConfigurationDataReader GetAisDeviceConfigurationCollectionByAisDeviceDataReader( Guid aisDevice )
        {
            const string sql = SimpleAisDeviceConfigurationDataReader.BaseQuery + " WHERE " +
                    SimpleAisDeviceConfigurationDataReader.ViewAliasName + ".[AisDevice] = @aisDevice " +
                    " ORDER BY " + SimpleAisDeviceConfigurationDataReader.ViewAliasName + ".[AisDevice]," +SimpleAisDeviceConfigurationDataReader.ViewAliasName + ".[Timestamp]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var aisDeviceParameter = sqlCommandParameters.AddReference( "@aisDevice", aisDevice );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleAisDeviceConfigurationDataReader = new SimpleAisDeviceConfigurationDataReader( _loggerFactory, sqlDataReader );
                return simpleAisDeviceConfigurationDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<AisDeviceConfigurationObject> GetAisDeviceConfigurationCollectionByAisDevice( Guid aisDevice )
        {
            throw new NotImplementedException( );
        }
        public SimpleAisDeviceConfigurationDataReader GetAisDeviceConfigurationByAisDeviceAndTimestampDataReader( Guid aisDevice, DateTime timestamp )
        {
            const string sql = SimpleAisDeviceConfigurationDataReader.BaseQuery + " WHERE " +
                    SimpleAisDeviceConfigurationDataReader.ViewAliasName + ".[AisDevice] = @aisDevice AND " +
                    SimpleAisDeviceConfigurationDataReader.ViewAliasName + ".[Timestamp] = @timestamp " +
                    " ORDER BY " + SimpleAisDeviceConfigurationDataReader.ViewAliasName + ".[AisDevice]," +SimpleAisDeviceConfigurationDataReader.ViewAliasName + ".[Timestamp]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var aisDeviceParameter = sqlCommandParameters.AddReference( "@aisDevice", aisDevice );
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@timestamp", timestamp );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleAisDeviceConfigurationDataReader = new SimpleAisDeviceConfigurationDataReader( _loggerFactory, sqlDataReader );
                return simpleAisDeviceConfigurationDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public AisDeviceConfigurationObject? GetAisDeviceConfigurationByAisDeviceAndTimestamp( Guid aisDevice, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public AisDeviceConfigurationObject? GetAisDeviceConfigurationByAisDeviceAtTimestamp( Guid aisDevice, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<AisDeviceConfigurationObject> GetAisDeviceConfigurationByAisDeviceFromTimestamp( Guid aisDevice, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<AisDeviceConfigurationObject> GetAisDeviceConfigurationByAisDeviceUntilTimestamp( Guid aisDevice, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<AisDeviceConfigurationObject> GetAisDeviceConfigurationByAisDeviceOverTimestamp( Guid aisDevice, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException( );
        }
        public SimpleAisDeviceConfigurationDataReader GetAisDeviceConfigurationCollectionByTimestampDataReader( DateTime timestamp )
        {
            const string sql = SimpleAisDeviceConfigurationDataReader.BaseQuery + " WHERE " +
                    SimpleAisDeviceConfigurationDataReader.ViewAliasName + ".[Timestamp] = @timestamp " +
                    " ORDER BY " + SimpleAisDeviceConfigurationDataReader.ViewAliasName + ".[Timestamp]," +SimpleAisDeviceConfigurationDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@timestamp", timestamp );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleAisDeviceConfigurationDataReader = new SimpleAisDeviceConfigurationDataReader( _loggerFactory, sqlDataReader );
                return simpleAisDeviceConfigurationDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<AisDeviceConfigurationObject> GetAisDeviceConfigurationCollectionByTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<AisDeviceConfigurationObject> GetAisDeviceConfigurationCollectionAtTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<AisDeviceConfigurationObject> GetAisDeviceConfigurationCollectionFromTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<AisDeviceConfigurationObject> GetAisDeviceConfigurationCollectionUntilTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<AisDeviceConfigurationObject> GetAisDeviceConfigurationCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException( );
        }
        // ---------------------------------------------------------------------
        // AisDeviceRawMessage queries
        // ---------------------------------------------------------------------
        public SimpleAisDeviceRawMessageDataReader GetAisDeviceRawMessageByIdDataReader( Guid id )
        {
            const string sql = SimpleAisDeviceRawMessageDataReader.BaseQuery + "WHERE " + SimpleAisDeviceRawMessageDataReader.ViewAliasName + ".[Id] = @id"; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                sqlCommandParameters.AddGuid( "@id", id );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleAisDeviceRawMessageDataReader = new SimpleAisDeviceRawMessageDataReader( _loggerFactory, sqlDataReader );
                return simpleAisDeviceRawMessageDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public AisDeviceRawMessageObject? GetAisDeviceRawMessageById( Guid id )
        {
            var simpleAisDeviceRawMessageDataReader = GetAisDeviceRawMessageByIdDataReader( id );
            using ( simpleAisDeviceRawMessageDataReader )
            {
                if ( simpleAisDeviceRawMessageDataReader.Read( ) )
                {
                    var result = simpleAisDeviceRawMessageDataReader.GetDataObject( );
                    return result;
                }
            }
            return null;
        }

        public void GetAisDeviceRawMessageById( Guid id, Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleAisDeviceRawMessageDataReader = GetAisDeviceRawMessageByIdDataReader( id );
                using ( simpleAisDeviceRawMessageDataReader )
                {
                    if ( simpleAisDeviceRawMessageDataReader.Read( ) )
                    {
                        destinationWriter.Write( true );
                        simpleAisDeviceRawMessageDataReader.WriteTo( destinationWriter );
                    }
                    else
                    {
                        destinationWriter.Write( false );
                    }
                }
            }
        }

        public SimpleAisDeviceRawMessageDataReader GetAisDeviceRawMessageCollectionDataReader( )
        {
            const string sql = SimpleAisDeviceRawMessageDataReader.BaseQuery; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleAisDeviceRawMessageDataReader = new SimpleAisDeviceRawMessageDataReader( _loggerFactory, sqlDataReader );
                return simpleAisDeviceRawMessageDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public IList<AisDeviceRawMessageObject> GetAisDeviceRawMessageCollection( )
        {
            var result = new List<AisDeviceRawMessageObject>( );
            var simpleAisDeviceRawMessageDataReader = GetAisDeviceRawMessageCollectionDataReader( );
            using ( simpleAisDeviceRawMessageDataReader )
            {
                while ( simpleAisDeviceRawMessageDataReader.Read( ) )
                {
                    var data = simpleAisDeviceRawMessageDataReader.GetDataObject( );
                    result.Add( data );
                }
            }
            return result;
        }

        public void GetAisDeviceRawMessageCollection( Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleAisDeviceRawMessageDataReader = GetAisDeviceRawMessageCollectionDataReader( );
                using ( simpleAisDeviceRawMessageDataReader )
                {
                    simpleAisDeviceRawMessageDataReader.WriteResultSetTo( destinationWriter );
                }
            }
        }

        public SimpleAisDeviceRawMessageDataReader GetAisDeviceRawMessageCollectionByAisDeviceDataReader( Guid aisDevice )
        {
            const string sql = SimpleAisDeviceRawMessageDataReader.BaseQuery + " WHERE " +
                    SimpleAisDeviceRawMessageDataReader.ViewAliasName + ".[AisDevice] = @aisDevice " +
                    " ORDER BY " + SimpleAisDeviceRawMessageDataReader.ViewAliasName + ".[AisDevice]," +SimpleAisDeviceRawMessageDataReader.ViewAliasName + ".[Timestamp]," +SimpleAisDeviceRawMessageDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var aisDeviceParameter = sqlCommandParameters.AddReference( "@aisDevice", aisDevice );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleAisDeviceRawMessageDataReader = new SimpleAisDeviceRawMessageDataReader( _loggerFactory, sqlDataReader );
                return simpleAisDeviceRawMessageDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<AisDeviceRawMessageObject> GetAisDeviceRawMessageCollectionByAisDevice( Guid aisDevice )
        {
            throw new NotImplementedException( );
        }
        public SimpleAisDeviceRawMessageDataReader GetAisDeviceRawMessageCollectionByAisDeviceAndTimestampDataReader( Guid aisDevice, DateTime timestamp )
        {
            const string sql = SimpleAisDeviceRawMessageDataReader.BaseQuery + " WHERE " +
                    SimpleAisDeviceRawMessageDataReader.ViewAliasName + ".[AisDevice] = @aisDevice AND " +
                    SimpleAisDeviceRawMessageDataReader.ViewAliasName + ".[Timestamp] = @timestamp " +
                    " ORDER BY " + SimpleAisDeviceRawMessageDataReader.ViewAliasName + ".[AisDevice]," +SimpleAisDeviceRawMessageDataReader.ViewAliasName + ".[Timestamp]," +SimpleAisDeviceRawMessageDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var aisDeviceParameter = sqlCommandParameters.AddReference( "@aisDevice", aisDevice );
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@timestamp", timestamp );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleAisDeviceRawMessageDataReader = new SimpleAisDeviceRawMessageDataReader( _loggerFactory, sqlDataReader );
                return simpleAisDeviceRawMessageDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<AisDeviceRawMessageObject> GetAisDeviceRawMessageCollectionByAisDeviceAndTimestamp( Guid aisDevice, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<AisDeviceRawMessageObject> GetAisDeviceRawMessageCollectionByAisDeviceAtTimestamp( Guid aisDevice, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<AisDeviceRawMessageObject> GetAisDeviceRawMessageCollectionByAisDeviceFromTimestamp( Guid aisDevice, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<AisDeviceRawMessageObject> GetAisDeviceRawMessageCollectionByAisDeviceUntilTimestamp( Guid aisDevice, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<AisDeviceRawMessageObject> GetAisDeviceRawMessageCollectionByAisDeviceOverTimestamp( Guid aisDevice, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException( );
        }
        public SimpleAisDeviceRawMessageDataReader GetAisDeviceRawMessageCollectionByTimestampDataReader( DateTime timestamp )
        {
            const string sql = SimpleAisDeviceRawMessageDataReader.BaseQuery + " WHERE " +
                    SimpleAisDeviceRawMessageDataReader.ViewAliasName + ".[Timestamp] = @timestamp " +
                    " ORDER BY " + SimpleAisDeviceRawMessageDataReader.ViewAliasName + ".[Timestamp]," +SimpleAisDeviceRawMessageDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@timestamp", timestamp );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleAisDeviceRawMessageDataReader = new SimpleAisDeviceRawMessageDataReader( _loggerFactory, sqlDataReader );
                return simpleAisDeviceRawMessageDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<AisDeviceRawMessageObject> GetAisDeviceRawMessageCollectionByTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<AisDeviceRawMessageObject> GetAisDeviceRawMessageCollectionAtTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<AisDeviceRawMessageObject> GetAisDeviceRawMessageCollectionFromTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<AisDeviceRawMessageObject> GetAisDeviceRawMessageCollectionUntilTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<AisDeviceRawMessageObject> GetAisDeviceRawMessageCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException( );
        }
        // ---------------------------------------------------------------------
        // AisDeviceRawSentence queries
        // ---------------------------------------------------------------------
        public SimpleAisDeviceRawSentenceDataReader GetAisDeviceRawSentenceByIdDataReader( Guid id )
        {
            const string sql = SimpleAisDeviceRawSentenceDataReader.BaseQuery + "WHERE " + SimpleAisDeviceRawSentenceDataReader.ViewAliasName + ".[Id] = @id"; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                sqlCommandParameters.AddGuid( "@id", id );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleAisDeviceRawSentenceDataReader = new SimpleAisDeviceRawSentenceDataReader( _loggerFactory, sqlDataReader );
                return simpleAisDeviceRawSentenceDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public AisDeviceRawSentenceObject? GetAisDeviceRawSentenceById( Guid id )
        {
            var simpleAisDeviceRawSentenceDataReader = GetAisDeviceRawSentenceByIdDataReader( id );
            using ( simpleAisDeviceRawSentenceDataReader )
            {
                if ( simpleAisDeviceRawSentenceDataReader.Read( ) )
                {
                    var result = simpleAisDeviceRawSentenceDataReader.GetDataObject( );
                    return result;
                }
            }
            return null;
        }

        public void GetAisDeviceRawSentenceById( Guid id, Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleAisDeviceRawSentenceDataReader = GetAisDeviceRawSentenceByIdDataReader( id );
                using ( simpleAisDeviceRawSentenceDataReader )
                {
                    if ( simpleAisDeviceRawSentenceDataReader.Read( ) )
                    {
                        destinationWriter.Write( true );
                        simpleAisDeviceRawSentenceDataReader.WriteTo( destinationWriter );
                    }
                    else
                    {
                        destinationWriter.Write( false );
                    }
                }
            }
        }

        public SimpleAisDeviceRawSentenceDataReader GetAisDeviceRawSentenceCollectionDataReader( )
        {
            const string sql = SimpleAisDeviceRawSentenceDataReader.BaseQuery; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleAisDeviceRawSentenceDataReader = new SimpleAisDeviceRawSentenceDataReader( _loggerFactory, sqlDataReader );
                return simpleAisDeviceRawSentenceDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public IList<AisDeviceRawSentenceObject> GetAisDeviceRawSentenceCollection( )
        {
            var result = new List<AisDeviceRawSentenceObject>( );
            var simpleAisDeviceRawSentenceDataReader = GetAisDeviceRawSentenceCollectionDataReader( );
            using ( simpleAisDeviceRawSentenceDataReader )
            {
                while ( simpleAisDeviceRawSentenceDataReader.Read( ) )
                {
                    var data = simpleAisDeviceRawSentenceDataReader.GetDataObject( );
                    result.Add( data );
                }
            }
            return result;
        }

        public void GetAisDeviceRawSentenceCollection( Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleAisDeviceRawSentenceDataReader = GetAisDeviceRawSentenceCollectionDataReader( );
                using ( simpleAisDeviceRawSentenceDataReader )
                {
                    simpleAisDeviceRawSentenceDataReader.WriteResultSetTo( destinationWriter );
                }
            }
        }

        public SimpleAisDeviceRawSentenceDataReader GetAisDeviceRawSentenceCollectionByAisDeviceDataReader( Guid aisDevice )
        {
            const string sql = SimpleAisDeviceRawSentenceDataReader.BaseQuery + " WHERE " +
                    SimpleAisDeviceRawSentenceDataReader.ViewAliasName + ".[AisDevice] = @aisDevice " +
                    " ORDER BY " + SimpleAisDeviceRawSentenceDataReader.ViewAliasName + ".[AisDevice]," +SimpleAisDeviceRawSentenceDataReader.ViewAliasName + ".[Timestamp]," +SimpleAisDeviceRawSentenceDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var aisDeviceParameter = sqlCommandParameters.AddReference( "@aisDevice", aisDevice );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleAisDeviceRawSentenceDataReader = new SimpleAisDeviceRawSentenceDataReader( _loggerFactory, sqlDataReader );
                return simpleAisDeviceRawSentenceDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<AisDeviceRawSentenceObject> GetAisDeviceRawSentenceCollectionByAisDevice( Guid aisDevice )
        {
            throw new NotImplementedException( );
        }
        public SimpleAisDeviceRawSentenceDataReader GetAisDeviceRawSentenceCollectionByAisDeviceAndTimestampDataReader( Guid aisDevice, DateTime timestamp )
        {
            const string sql = SimpleAisDeviceRawSentenceDataReader.BaseQuery + " WHERE " +
                    SimpleAisDeviceRawSentenceDataReader.ViewAliasName + ".[AisDevice] = @aisDevice AND " +
                    SimpleAisDeviceRawSentenceDataReader.ViewAliasName + ".[Timestamp] = @timestamp " +
                    " ORDER BY " + SimpleAisDeviceRawSentenceDataReader.ViewAliasName + ".[AisDevice]," +SimpleAisDeviceRawSentenceDataReader.ViewAliasName + ".[Timestamp]," +SimpleAisDeviceRawSentenceDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var aisDeviceParameter = sqlCommandParameters.AddReference( "@aisDevice", aisDevice );
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@timestamp", timestamp );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleAisDeviceRawSentenceDataReader = new SimpleAisDeviceRawSentenceDataReader( _loggerFactory, sqlDataReader );
                return simpleAisDeviceRawSentenceDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<AisDeviceRawSentenceObject> GetAisDeviceRawSentenceCollectionByAisDeviceAndTimestamp( Guid aisDevice, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<AisDeviceRawSentenceObject> GetAisDeviceRawSentenceCollectionByAisDeviceAtTimestamp( Guid aisDevice, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<AisDeviceRawSentenceObject> GetAisDeviceRawSentenceCollectionByAisDeviceFromTimestamp( Guid aisDevice, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<AisDeviceRawSentenceObject> GetAisDeviceRawSentenceCollectionByAisDeviceUntilTimestamp( Guid aisDevice, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<AisDeviceRawSentenceObject> GetAisDeviceRawSentenceCollectionByAisDeviceOverTimestamp( Guid aisDevice, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException( );
        }
        public SimpleAisDeviceRawSentenceDataReader GetAisDeviceRawSentenceCollectionByTimestampDataReader( DateTime timestamp )
        {
            const string sql = SimpleAisDeviceRawSentenceDataReader.BaseQuery + " WHERE " +
                    SimpleAisDeviceRawSentenceDataReader.ViewAliasName + ".[Timestamp] = @timestamp " +
                    " ORDER BY " + SimpleAisDeviceRawSentenceDataReader.ViewAliasName + ".[Timestamp]," +SimpleAisDeviceRawSentenceDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@timestamp", timestamp );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleAisDeviceRawSentenceDataReader = new SimpleAisDeviceRawSentenceDataReader( _loggerFactory, sqlDataReader );
                return simpleAisDeviceRawSentenceDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<AisDeviceRawSentenceObject> GetAisDeviceRawSentenceCollectionByTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<AisDeviceRawSentenceObject> GetAisDeviceRawSentenceCollectionAtTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<AisDeviceRawSentenceObject> GetAisDeviceRawSentenceCollectionFromTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<AisDeviceRawSentenceObject> GetAisDeviceRawSentenceCollectionUntilTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<AisDeviceRawSentenceObject> GetAisDeviceRawSentenceCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException( );
        }
        // ---------------------------------------------------------------------
        // AisMessage queries
        // ---------------------------------------------------------------------
        public ComplexAisMessageDataReader GetAisMessageByIdDataReader( Guid id )
        {
            const string sql = ComplexAisMessageDataReader.BaseQuery + "WHERE " + ComplexAisMessageDataReader.ViewAliasName + ".[Id] = @id"; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                sqlCommandParameters.AddGuid( "@id", id );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var complexAisMessageDataReader = new ComplexAisMessageDataReader( _loggerFactory, sqlDataReader );
                return complexAisMessageDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public AisMessageObject? GetAisMessageById( Guid id )
        {
            var complexAisMessageDataReader = GetAisMessageByIdDataReader( id );
            using ( complexAisMessageDataReader )
            {
                if ( complexAisMessageDataReader.Read( ) )
                {
                    var result = complexAisMessageDataReader.GetDataObject( );
                    return result;
                }
            }
            return null;
        }

        public void GetAisMessageById( Guid id, Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var complexAisMessageDataReader = GetAisMessageByIdDataReader( id );
                using ( complexAisMessageDataReader )
                {
                    if ( complexAisMessageDataReader.Read( ) )
                    {
                        destinationWriter.Write( true );
                        complexAisMessageDataReader.WriteTo( destinationWriter );
                    }
                    else
                    {
                        destinationWriter.Write( false );
                    }
                }
            }
        }

        public ComplexAisMessageDataReader GetAisMessageCollectionDataReader( )
        {
            const string sql = ComplexAisMessageDataReader.BaseQuery; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var complexAisMessageDataReader = new ComplexAisMessageDataReader( _loggerFactory, sqlDataReader );
                return complexAisMessageDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public IList<AisMessageObject> GetAisMessageCollection( )
        {
            var result = new List<AisMessageObject>( );
            var complexAisMessageDataReader = GetAisMessageCollectionDataReader( );
            using ( complexAisMessageDataReader )
            {
                while ( complexAisMessageDataReader.Read( ) )
                {
                    var data = complexAisMessageDataReader.GetDataObject( );
                    result.Add( data );
                }
            }
            return result;
        }

        public void GetAisMessageCollection( Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var complexAisMessageDataReader = GetAisMessageCollectionDataReader( );
                using ( complexAisMessageDataReader )
                {
                    complexAisMessageDataReader.WriteResultSetTo( destinationWriter );
                }
            }
        }

        public ComplexAisMessageDataReader GetAisMessageCollectionByAisDeviceDataReader( Guid aisDevice )
        {
            const string sql = ComplexAisMessageDataReader.BaseQuery + " WHERE " +
                    ComplexAisMessageDataReader.ViewAliasName + ".[AisDevice] = @aisDevice " +
                    " ORDER BY " + ComplexAisMessageDataReader.ViewAliasName + ".[AisDevice]," +ComplexAisMessageDataReader.ViewAliasName + ".[ReceivedTimestamp]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var aisDeviceParameter = sqlCommandParameters.AddReference( "@aisDevice", aisDevice );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var complexAisMessageDataReader = new ComplexAisMessageDataReader( _loggerFactory, sqlDataReader );
                return complexAisMessageDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<AisMessageObject> GetAisMessageCollectionByAisDevice( Guid aisDevice )
        {
            throw new NotImplementedException( );
        }
        public ComplexAisMessageDataReader GetAisMessageByAisDeviceAndReceivedTimestampDataReader( Guid aisDevice, DateTime receivedTimestamp )
        {
            const string sql = ComplexAisMessageDataReader.BaseQuery + " WHERE " +
                    ComplexAisMessageDataReader.ViewAliasName + ".[AisDevice] = @aisDevice AND " +
                    ComplexAisMessageDataReader.ViewAliasName + ".[ReceivedTimestamp] = @receivedTimestamp " +
                    " ORDER BY " + ComplexAisMessageDataReader.ViewAliasName + ".[AisDevice]," +ComplexAisMessageDataReader.ViewAliasName + ".[ReceivedTimestamp]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var aisDeviceParameter = sqlCommandParameters.AddReference( "@aisDevice", aisDevice );
                var receivedTimestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@receivedTimestamp", receivedTimestamp );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var complexAisMessageDataReader = new ComplexAisMessageDataReader( _loggerFactory, sqlDataReader );
                return complexAisMessageDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public AisMessageObject? GetAisMessageByAisDeviceAndReceivedTimestamp( Guid aisDevice, DateTime receivedTimestamp )
        {
            throw new NotImplementedException( );
        }
        public AisMessageObject? GetAisMessageByAisDeviceAtReceivedTimestamp( Guid aisDevice, DateTime receivedTimestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<AisMessageObject> GetAisMessageByAisDeviceFromReceivedTimestamp( Guid aisDevice, DateTime receivedTimestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<AisMessageObject> GetAisMessageByAisDeviceUntilReceivedTimestamp( Guid aisDevice, DateTime receivedTimestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<AisMessageObject> GetAisMessageByAisDeviceOverReceivedTimestamp( Guid aisDevice, DateTime fromReceivedTimestamp, DateTime untilReceivedTimestamp )
        {
            throw new NotImplementedException( );
        }
        public ComplexAisMessageDataReader GetAisMessageCollectionByReceivedTimestampDataReader( DateTime receivedTimestamp )
        {
            const string sql = ComplexAisMessageDataReader.BaseQuery + " WHERE " +
                    ComplexAisMessageDataReader.ViewAliasName + ".[ReceivedTimestamp] = @receivedTimestamp " +
                    " ORDER BY " + ComplexAisMessageDataReader.ViewAliasName + ".[ReceivedTimestamp]," +ComplexAisMessageDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var receivedTimestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@receivedTimestamp", receivedTimestamp );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var complexAisMessageDataReader = new ComplexAisMessageDataReader( _loggerFactory, sqlDataReader );
                return complexAisMessageDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<AisMessageObject> GetAisMessageCollectionByReceivedTimestamp( DateTime receivedTimestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<AisMessageObject> GetAisMessageCollectionAtReceivedTimestamp( DateTime receivedTimestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<AisMessageObject> GetAisMessageCollectionFromReceivedTimestamp( DateTime receivedTimestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<AisMessageObject> GetAisMessageCollectionUntilReceivedTimestamp( DateTime receivedTimestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<AisMessageObject> GetAisMessageCollectionOverReceivedTimestamp( DateTime fromReceivedTimestamp, DateTime untilReceivedTimestamp )
        {
            throw new NotImplementedException( );
        }
        public ComplexAisMessageDataReader GetAisMessageCollectionByMmsiDataReader( Guid mmsi )
        {
            const string sql = ComplexAisMessageDataReader.BaseQuery + " WHERE " +
                    ComplexAisMessageDataReader.ViewAliasName + ".[Mmsi] = @mmsi " +
                    " ORDER BY " + ComplexAisMessageDataReader.ViewAliasName + ".[Mmsi]," +ComplexAisMessageDataReader.ViewAliasName + ".[MessageSequenceNumber]," +ComplexAisMessageDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var mmsiParameter = sqlCommandParameters.AddReference( "@mmsi", mmsi );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var complexAisMessageDataReader = new ComplexAisMessageDataReader( _loggerFactory, sqlDataReader );
                return complexAisMessageDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<AisMessageObject> GetAisMessageCollectionByMmsi( Guid mmsi )
        {
            throw new NotImplementedException( );
        }
        public ComplexAisMessageDataReader GetAisMessageCollectionByMmsiAndMessageSequenceNumberDataReader( Guid mmsi, long messageSequenceNumber )
        {
            const string sql = ComplexAisMessageDataReader.BaseQuery + " WHERE " +
                    ComplexAisMessageDataReader.ViewAliasName + ".[Mmsi] = @mmsi AND " +
                    ComplexAisMessageDataReader.ViewAliasName + ".[MessageSequenceNumber] = @messageSequenceNumber " +
                    " ORDER BY " + ComplexAisMessageDataReader.ViewAliasName + ".[Mmsi]," +ComplexAisMessageDataReader.ViewAliasName + ".[MessageSequenceNumber]," +ComplexAisMessageDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var mmsiParameter = sqlCommandParameters.AddReference( "@mmsi", mmsi );
                var messageSequenceNumberParameter = sqlCommandParameters.AddInt64( "@messageSequenceNumber", messageSequenceNumber );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var complexAisMessageDataReader = new ComplexAisMessageDataReader( _loggerFactory, sqlDataReader );
                return complexAisMessageDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<AisMessageObject> GetAisMessageCollectionByMmsiAndMessageSequenceNumber( Guid mmsi, long messageSequenceNumber )
        {
            throw new NotImplementedException( );
        }
        public IList<AisMessageObject> GetAisMessageCollectionByMmsiFromMessageSequenceNumber( Guid mmsi, long messageSequenceNumber )
        {
            throw new NotImplementedException( );
        }
        public IList<AisMessageObject> GetAisMessageCollectionByMmsiUntilMessageSequenceNumber( Guid mmsi, long messageSequenceNumber )
        {
            throw new NotImplementedException( );
        }
        public IList<AisMessageObject> GetAisMessageCollectionByMmsiOverMessageSequenceNumber( Guid mmsi, long fromMessageSequenceNumber, long untilMessageSequenceNumber )
        {
            throw new NotImplementedException( );
        }
        // ---------------------------------------------------------------------
        // AidToNavigationReportMessage queries
        // ---------------------------------------------------------------------
        public SimpleAidToNavigationReportMessageDataReader GetAidToNavigationReportMessageByIdDataReader( Guid id )
        {
            const string sql = SimpleAidToNavigationReportMessageDataReader.BaseQuery + "WHERE " + SimpleAidToNavigationReportMessageDataReader.ViewAliasName + ".[Id] = @id"; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                sqlCommandParameters.AddGuid( "@id", id );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleAidToNavigationReportMessageDataReader = new SimpleAidToNavigationReportMessageDataReader( _loggerFactory, sqlDataReader );
                return simpleAidToNavigationReportMessageDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public AidToNavigationReportMessageObject? GetAidToNavigationReportMessageById( Guid id )
        {
            var simpleAidToNavigationReportMessageDataReader = GetAidToNavigationReportMessageByIdDataReader( id );
            using ( simpleAidToNavigationReportMessageDataReader )
            {
                if ( simpleAidToNavigationReportMessageDataReader.Read( ) )
                {
                    var result = simpleAidToNavigationReportMessageDataReader.GetDataObject( );
                    return result;
                }
            }
            return null;
        }

        public void GetAidToNavigationReportMessageById( Guid id, Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleAidToNavigationReportMessageDataReader = GetAidToNavigationReportMessageByIdDataReader( id );
                using ( simpleAidToNavigationReportMessageDataReader )
                {
                    if ( simpleAidToNavigationReportMessageDataReader.Read( ) )
                    {
                        destinationWriter.Write( true );
                        simpleAidToNavigationReportMessageDataReader.WriteTo( destinationWriter );
                    }
                    else
                    {
                        destinationWriter.Write( false );
                    }
                }
            }
        }

        public SimpleAidToNavigationReportMessageDataReader GetAidToNavigationReportMessageCollectionDataReader( )
        {
            const string sql = SimpleAidToNavigationReportMessageDataReader.BaseQuery; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleAidToNavigationReportMessageDataReader = new SimpleAidToNavigationReportMessageDataReader( _loggerFactory, sqlDataReader );
                return simpleAidToNavigationReportMessageDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public IList<AidToNavigationReportMessageObject> GetAidToNavigationReportMessageCollection( )
        {
            var result = new List<AidToNavigationReportMessageObject>( );
            var simpleAidToNavigationReportMessageDataReader = GetAidToNavigationReportMessageCollectionDataReader( );
            using ( simpleAidToNavigationReportMessageDataReader )
            {
                while ( simpleAidToNavigationReportMessageDataReader.Read( ) )
                {
                    var data = simpleAidToNavigationReportMessageDataReader.GetDataObject( );
                    result.Add( data );
                }
            }
            return result;
        }

        public void GetAidToNavigationReportMessageCollection( Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleAidToNavigationReportMessageDataReader = GetAidToNavigationReportMessageCollectionDataReader( );
                using ( simpleAidToNavigationReportMessageDataReader )
                {
                    simpleAidToNavigationReportMessageDataReader.WriteResultSetTo( destinationWriter );
                }
            }
        }

        public SimpleAidToNavigationReportMessageDataReader GetAidToNavigationReportMessageCollectionByAisDeviceDataReader( Guid aisDevice )
        {
            const string sql = SimpleAidToNavigationReportMessageDataReader.BaseQuery + " WHERE " +
                    SimpleAidToNavigationReportMessageDataReader.ViewAliasName + ".[AisDevice] = @aisDevice " +
                    " ORDER BY " + SimpleAidToNavigationReportMessageDataReader.ViewAliasName + ".[AisDevice]," +SimpleAidToNavigationReportMessageDataReader.ViewAliasName + ".[ReceivedTimestamp]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var aisDeviceParameter = sqlCommandParameters.AddReference( "@aisDevice", aisDevice );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleAidToNavigationReportMessageDataReader = new SimpleAidToNavigationReportMessageDataReader( _loggerFactory, sqlDataReader );
                return simpleAidToNavigationReportMessageDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<AidToNavigationReportMessageObject> GetAidToNavigationReportMessageCollectionByAisDevice( Guid aisDevice )
        {
            throw new NotImplementedException( );
        }
        public SimpleAidToNavigationReportMessageDataReader GetAidToNavigationReportMessageByAisDeviceAndReceivedTimestampDataReader( Guid aisDevice, DateTime receivedTimestamp )
        {
            const string sql = SimpleAidToNavigationReportMessageDataReader.BaseQuery + " WHERE " +
                    SimpleAidToNavigationReportMessageDataReader.ViewAliasName + ".[AisDevice] = @aisDevice AND " +
                    SimpleAidToNavigationReportMessageDataReader.ViewAliasName + ".[ReceivedTimestamp] = @receivedTimestamp " +
                    " ORDER BY " + SimpleAidToNavigationReportMessageDataReader.ViewAliasName + ".[AisDevice]," +SimpleAidToNavigationReportMessageDataReader.ViewAliasName + ".[ReceivedTimestamp]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var aisDeviceParameter = sqlCommandParameters.AddReference( "@aisDevice", aisDevice );
                var receivedTimestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@receivedTimestamp", receivedTimestamp );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleAidToNavigationReportMessageDataReader = new SimpleAidToNavigationReportMessageDataReader( _loggerFactory, sqlDataReader );
                return simpleAidToNavigationReportMessageDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public AidToNavigationReportMessageObject? GetAidToNavigationReportMessageByAisDeviceAndReceivedTimestamp( Guid aisDevice, DateTime receivedTimestamp )
        {
            throw new NotImplementedException( );
        }
        public AidToNavigationReportMessageObject? GetAidToNavigationReportMessageByAisDeviceAtReceivedTimestamp( Guid aisDevice, DateTime receivedTimestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<AidToNavigationReportMessageObject> GetAidToNavigationReportMessageByAisDeviceFromReceivedTimestamp( Guid aisDevice, DateTime receivedTimestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<AidToNavigationReportMessageObject> GetAidToNavigationReportMessageByAisDeviceUntilReceivedTimestamp( Guid aisDevice, DateTime receivedTimestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<AidToNavigationReportMessageObject> GetAidToNavigationReportMessageByAisDeviceOverReceivedTimestamp( Guid aisDevice, DateTime fromReceivedTimestamp, DateTime untilReceivedTimestamp )
        {
            throw new NotImplementedException( );
        }
        public SimpleAidToNavigationReportMessageDataReader GetAidToNavigationReportMessageCollectionByReceivedTimestampDataReader( DateTime receivedTimestamp )
        {
            const string sql = SimpleAidToNavigationReportMessageDataReader.BaseQuery + " WHERE " +
                    SimpleAidToNavigationReportMessageDataReader.ViewAliasName + ".[ReceivedTimestamp] = @receivedTimestamp " +
                    " ORDER BY " + SimpleAidToNavigationReportMessageDataReader.ViewAliasName + ".[ReceivedTimestamp]," +SimpleAidToNavigationReportMessageDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var receivedTimestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@receivedTimestamp", receivedTimestamp );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleAidToNavigationReportMessageDataReader = new SimpleAidToNavigationReportMessageDataReader( _loggerFactory, sqlDataReader );
                return simpleAidToNavigationReportMessageDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<AidToNavigationReportMessageObject> GetAidToNavigationReportMessageCollectionByReceivedTimestamp( DateTime receivedTimestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<AidToNavigationReportMessageObject> GetAidToNavigationReportMessageCollectionAtReceivedTimestamp( DateTime receivedTimestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<AidToNavigationReportMessageObject> GetAidToNavigationReportMessageCollectionFromReceivedTimestamp( DateTime receivedTimestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<AidToNavigationReportMessageObject> GetAidToNavigationReportMessageCollectionUntilReceivedTimestamp( DateTime receivedTimestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<AidToNavigationReportMessageObject> GetAidToNavigationReportMessageCollectionOverReceivedTimestamp( DateTime fromReceivedTimestamp, DateTime untilReceivedTimestamp )
        {
            throw new NotImplementedException( );
        }
        public SimpleAidToNavigationReportMessageDataReader GetAidToNavigationReportMessageCollectionByMmsiDataReader( Guid mmsi )
        {
            const string sql = SimpleAidToNavigationReportMessageDataReader.BaseQuery + " WHERE " +
                    SimpleAidToNavigationReportMessageDataReader.ViewAliasName + ".[Mmsi] = @mmsi " +
                    " ORDER BY " + SimpleAidToNavigationReportMessageDataReader.ViewAliasName + ".[Mmsi]," +SimpleAidToNavigationReportMessageDataReader.ViewAliasName + ".[MessageSequenceNumber]," +SimpleAidToNavigationReportMessageDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var mmsiParameter = sqlCommandParameters.AddReference( "@mmsi", mmsi );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleAidToNavigationReportMessageDataReader = new SimpleAidToNavigationReportMessageDataReader( _loggerFactory, sqlDataReader );
                return simpleAidToNavigationReportMessageDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<AidToNavigationReportMessageObject> GetAidToNavigationReportMessageCollectionByMmsi( Guid mmsi )
        {
            throw new NotImplementedException( );
        }
        public SimpleAidToNavigationReportMessageDataReader GetAidToNavigationReportMessageCollectionByMmsiAndMessageSequenceNumberDataReader( Guid mmsi, long messageSequenceNumber )
        {
            const string sql = SimpleAidToNavigationReportMessageDataReader.BaseQuery + " WHERE " +
                    SimpleAidToNavigationReportMessageDataReader.ViewAliasName + ".[Mmsi] = @mmsi AND " +
                    SimpleAidToNavigationReportMessageDataReader.ViewAliasName + ".[MessageSequenceNumber] = @messageSequenceNumber " +
                    " ORDER BY " + SimpleAidToNavigationReportMessageDataReader.ViewAliasName + ".[Mmsi]," +SimpleAidToNavigationReportMessageDataReader.ViewAliasName + ".[MessageSequenceNumber]," +SimpleAidToNavigationReportMessageDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var mmsiParameter = sqlCommandParameters.AddReference( "@mmsi", mmsi );
                var messageSequenceNumberParameter = sqlCommandParameters.AddInt64( "@messageSequenceNumber", messageSequenceNumber );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleAidToNavigationReportMessageDataReader = new SimpleAidToNavigationReportMessageDataReader( _loggerFactory, sqlDataReader );
                return simpleAidToNavigationReportMessageDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<AidToNavigationReportMessageObject> GetAidToNavigationReportMessageCollectionByMmsiAndMessageSequenceNumber( Guid mmsi, long messageSequenceNumber )
        {
            throw new NotImplementedException( );
        }
        public IList<AidToNavigationReportMessageObject> GetAidToNavigationReportMessageCollectionByMmsiFromMessageSequenceNumber( Guid mmsi, long messageSequenceNumber )
        {
            throw new NotImplementedException( );
        }
        public IList<AidToNavigationReportMessageObject> GetAidToNavigationReportMessageCollectionByMmsiUntilMessageSequenceNumber( Guid mmsi, long messageSequenceNumber )
        {
            throw new NotImplementedException( );
        }
        public IList<AidToNavigationReportMessageObject> GetAidToNavigationReportMessageCollectionByMmsiOverMessageSequenceNumber( Guid mmsi, long fromMessageSequenceNumber, long untilMessageSequenceNumber )
        {
            throw new NotImplementedException( );
        }
        // ---------------------------------------------------------------------
        // AisAddressedSafetyRelatedMessage queries
        // ---------------------------------------------------------------------
        public SimpleAisAddressedSafetyRelatedMessageDataReader GetAisAddressedSafetyRelatedMessageByIdDataReader( Guid id )
        {
            const string sql = SimpleAisAddressedSafetyRelatedMessageDataReader.BaseQuery + "WHERE " + SimpleAisAddressedSafetyRelatedMessageDataReader.ViewAliasName + ".[Id] = @id"; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                sqlCommandParameters.AddGuid( "@id", id );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleAisAddressedSafetyRelatedMessageDataReader = new SimpleAisAddressedSafetyRelatedMessageDataReader( _loggerFactory, sqlDataReader );
                return simpleAisAddressedSafetyRelatedMessageDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public AisAddressedSafetyRelatedMessageObject? GetAisAddressedSafetyRelatedMessageById( Guid id )
        {
            var simpleAisAddressedSafetyRelatedMessageDataReader = GetAisAddressedSafetyRelatedMessageByIdDataReader( id );
            using ( simpleAisAddressedSafetyRelatedMessageDataReader )
            {
                if ( simpleAisAddressedSafetyRelatedMessageDataReader.Read( ) )
                {
                    var result = simpleAisAddressedSafetyRelatedMessageDataReader.GetDataObject( );
                    return result;
                }
            }
            return null;
        }

        public void GetAisAddressedSafetyRelatedMessageById( Guid id, Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleAisAddressedSafetyRelatedMessageDataReader = GetAisAddressedSafetyRelatedMessageByIdDataReader( id );
                using ( simpleAisAddressedSafetyRelatedMessageDataReader )
                {
                    if ( simpleAisAddressedSafetyRelatedMessageDataReader.Read( ) )
                    {
                        destinationWriter.Write( true );
                        simpleAisAddressedSafetyRelatedMessageDataReader.WriteTo( destinationWriter );
                    }
                    else
                    {
                        destinationWriter.Write( false );
                    }
                }
            }
        }

        public SimpleAisAddressedSafetyRelatedMessageDataReader GetAisAddressedSafetyRelatedMessageCollectionDataReader( )
        {
            const string sql = SimpleAisAddressedSafetyRelatedMessageDataReader.BaseQuery; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleAisAddressedSafetyRelatedMessageDataReader = new SimpleAisAddressedSafetyRelatedMessageDataReader( _loggerFactory, sqlDataReader );
                return simpleAisAddressedSafetyRelatedMessageDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public IList<AisAddressedSafetyRelatedMessageObject> GetAisAddressedSafetyRelatedMessageCollection( )
        {
            var result = new List<AisAddressedSafetyRelatedMessageObject>( );
            var simpleAisAddressedSafetyRelatedMessageDataReader = GetAisAddressedSafetyRelatedMessageCollectionDataReader( );
            using ( simpleAisAddressedSafetyRelatedMessageDataReader )
            {
                while ( simpleAisAddressedSafetyRelatedMessageDataReader.Read( ) )
                {
                    var data = simpleAisAddressedSafetyRelatedMessageDataReader.GetDataObject( );
                    result.Add( data );
                }
            }
            return result;
        }

        public void GetAisAddressedSafetyRelatedMessageCollection( Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleAisAddressedSafetyRelatedMessageDataReader = GetAisAddressedSafetyRelatedMessageCollectionDataReader( );
                using ( simpleAisAddressedSafetyRelatedMessageDataReader )
                {
                    simpleAisAddressedSafetyRelatedMessageDataReader.WriteResultSetTo( destinationWriter );
                }
            }
        }

        public SimpleAisAddressedSafetyRelatedMessageDataReader GetAisAddressedSafetyRelatedMessageCollectionByAisDeviceDataReader( Guid aisDevice )
        {
            const string sql = SimpleAisAddressedSafetyRelatedMessageDataReader.BaseQuery + " WHERE " +
                    SimpleAisAddressedSafetyRelatedMessageDataReader.ViewAliasName + ".[AisDevice] = @aisDevice " +
                    " ORDER BY " + SimpleAisAddressedSafetyRelatedMessageDataReader.ViewAliasName + ".[AisDevice]," +SimpleAisAddressedSafetyRelatedMessageDataReader.ViewAliasName + ".[ReceivedTimestamp]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var aisDeviceParameter = sqlCommandParameters.AddReference( "@aisDevice", aisDevice );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleAisAddressedSafetyRelatedMessageDataReader = new SimpleAisAddressedSafetyRelatedMessageDataReader( _loggerFactory, sqlDataReader );
                return simpleAisAddressedSafetyRelatedMessageDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<AisAddressedSafetyRelatedMessageObject> GetAisAddressedSafetyRelatedMessageCollectionByAisDevice( Guid aisDevice )
        {
            throw new NotImplementedException( );
        }
        public SimpleAisAddressedSafetyRelatedMessageDataReader GetAisAddressedSafetyRelatedMessageByAisDeviceAndReceivedTimestampDataReader( Guid aisDevice, DateTime receivedTimestamp )
        {
            const string sql = SimpleAisAddressedSafetyRelatedMessageDataReader.BaseQuery + " WHERE " +
                    SimpleAisAddressedSafetyRelatedMessageDataReader.ViewAliasName + ".[AisDevice] = @aisDevice AND " +
                    SimpleAisAddressedSafetyRelatedMessageDataReader.ViewAliasName + ".[ReceivedTimestamp] = @receivedTimestamp " +
                    " ORDER BY " + SimpleAisAddressedSafetyRelatedMessageDataReader.ViewAliasName + ".[AisDevice]," +SimpleAisAddressedSafetyRelatedMessageDataReader.ViewAliasName + ".[ReceivedTimestamp]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var aisDeviceParameter = sqlCommandParameters.AddReference( "@aisDevice", aisDevice );
                var receivedTimestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@receivedTimestamp", receivedTimestamp );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleAisAddressedSafetyRelatedMessageDataReader = new SimpleAisAddressedSafetyRelatedMessageDataReader( _loggerFactory, sqlDataReader );
                return simpleAisAddressedSafetyRelatedMessageDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public AisAddressedSafetyRelatedMessageObject? GetAisAddressedSafetyRelatedMessageByAisDeviceAndReceivedTimestamp( Guid aisDevice, DateTime receivedTimestamp )
        {
            throw new NotImplementedException( );
        }
        public AisAddressedSafetyRelatedMessageObject? GetAisAddressedSafetyRelatedMessageByAisDeviceAtReceivedTimestamp( Guid aisDevice, DateTime receivedTimestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<AisAddressedSafetyRelatedMessageObject> GetAisAddressedSafetyRelatedMessageByAisDeviceFromReceivedTimestamp( Guid aisDevice, DateTime receivedTimestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<AisAddressedSafetyRelatedMessageObject> GetAisAddressedSafetyRelatedMessageByAisDeviceUntilReceivedTimestamp( Guid aisDevice, DateTime receivedTimestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<AisAddressedSafetyRelatedMessageObject> GetAisAddressedSafetyRelatedMessageByAisDeviceOverReceivedTimestamp( Guid aisDevice, DateTime fromReceivedTimestamp, DateTime untilReceivedTimestamp )
        {
            throw new NotImplementedException( );
        }
        public SimpleAisAddressedSafetyRelatedMessageDataReader GetAisAddressedSafetyRelatedMessageCollectionByReceivedTimestampDataReader( DateTime receivedTimestamp )
        {
            const string sql = SimpleAisAddressedSafetyRelatedMessageDataReader.BaseQuery + " WHERE " +
                    SimpleAisAddressedSafetyRelatedMessageDataReader.ViewAliasName + ".[ReceivedTimestamp] = @receivedTimestamp " +
                    " ORDER BY " + SimpleAisAddressedSafetyRelatedMessageDataReader.ViewAliasName + ".[ReceivedTimestamp]," +SimpleAisAddressedSafetyRelatedMessageDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var receivedTimestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@receivedTimestamp", receivedTimestamp );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleAisAddressedSafetyRelatedMessageDataReader = new SimpleAisAddressedSafetyRelatedMessageDataReader( _loggerFactory, sqlDataReader );
                return simpleAisAddressedSafetyRelatedMessageDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<AisAddressedSafetyRelatedMessageObject> GetAisAddressedSafetyRelatedMessageCollectionByReceivedTimestamp( DateTime receivedTimestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<AisAddressedSafetyRelatedMessageObject> GetAisAddressedSafetyRelatedMessageCollectionAtReceivedTimestamp( DateTime receivedTimestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<AisAddressedSafetyRelatedMessageObject> GetAisAddressedSafetyRelatedMessageCollectionFromReceivedTimestamp( DateTime receivedTimestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<AisAddressedSafetyRelatedMessageObject> GetAisAddressedSafetyRelatedMessageCollectionUntilReceivedTimestamp( DateTime receivedTimestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<AisAddressedSafetyRelatedMessageObject> GetAisAddressedSafetyRelatedMessageCollectionOverReceivedTimestamp( DateTime fromReceivedTimestamp, DateTime untilReceivedTimestamp )
        {
            throw new NotImplementedException( );
        }
        public SimpleAisAddressedSafetyRelatedMessageDataReader GetAisAddressedSafetyRelatedMessageCollectionByMmsiDataReader( Guid mmsi )
        {
            const string sql = SimpleAisAddressedSafetyRelatedMessageDataReader.BaseQuery + " WHERE " +
                    SimpleAisAddressedSafetyRelatedMessageDataReader.ViewAliasName + ".[Mmsi] = @mmsi " +
                    " ORDER BY " + SimpleAisAddressedSafetyRelatedMessageDataReader.ViewAliasName + ".[Mmsi]," +SimpleAisAddressedSafetyRelatedMessageDataReader.ViewAliasName + ".[MessageSequenceNumber]," +SimpleAisAddressedSafetyRelatedMessageDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var mmsiParameter = sqlCommandParameters.AddReference( "@mmsi", mmsi );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleAisAddressedSafetyRelatedMessageDataReader = new SimpleAisAddressedSafetyRelatedMessageDataReader( _loggerFactory, sqlDataReader );
                return simpleAisAddressedSafetyRelatedMessageDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<AisAddressedSafetyRelatedMessageObject> GetAisAddressedSafetyRelatedMessageCollectionByMmsi( Guid mmsi )
        {
            throw new NotImplementedException( );
        }
        public SimpleAisAddressedSafetyRelatedMessageDataReader GetAisAddressedSafetyRelatedMessageCollectionByMmsiAndMessageSequenceNumberDataReader( Guid mmsi, long messageSequenceNumber )
        {
            const string sql = SimpleAisAddressedSafetyRelatedMessageDataReader.BaseQuery + " WHERE " +
                    SimpleAisAddressedSafetyRelatedMessageDataReader.ViewAliasName + ".[Mmsi] = @mmsi AND " +
                    SimpleAisAddressedSafetyRelatedMessageDataReader.ViewAliasName + ".[MessageSequenceNumber] = @messageSequenceNumber " +
                    " ORDER BY " + SimpleAisAddressedSafetyRelatedMessageDataReader.ViewAliasName + ".[Mmsi]," +SimpleAisAddressedSafetyRelatedMessageDataReader.ViewAliasName + ".[MessageSequenceNumber]," +SimpleAisAddressedSafetyRelatedMessageDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var mmsiParameter = sqlCommandParameters.AddReference( "@mmsi", mmsi );
                var messageSequenceNumberParameter = sqlCommandParameters.AddInt64( "@messageSequenceNumber", messageSequenceNumber );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleAisAddressedSafetyRelatedMessageDataReader = new SimpleAisAddressedSafetyRelatedMessageDataReader( _loggerFactory, sqlDataReader );
                return simpleAisAddressedSafetyRelatedMessageDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<AisAddressedSafetyRelatedMessageObject> GetAisAddressedSafetyRelatedMessageCollectionByMmsiAndMessageSequenceNumber( Guid mmsi, long messageSequenceNumber )
        {
            throw new NotImplementedException( );
        }
        public IList<AisAddressedSafetyRelatedMessageObject> GetAisAddressedSafetyRelatedMessageCollectionByMmsiFromMessageSequenceNumber( Guid mmsi, long messageSequenceNumber )
        {
            throw new NotImplementedException( );
        }
        public IList<AisAddressedSafetyRelatedMessageObject> GetAisAddressedSafetyRelatedMessageCollectionByMmsiUntilMessageSequenceNumber( Guid mmsi, long messageSequenceNumber )
        {
            throw new NotImplementedException( );
        }
        public IList<AisAddressedSafetyRelatedMessageObject> GetAisAddressedSafetyRelatedMessageCollectionByMmsiOverMessageSequenceNumber( Guid mmsi, long fromMessageSequenceNumber, long untilMessageSequenceNumber )
        {
            throw new NotImplementedException( );
        }
        public SimpleAisAddressedSafetyRelatedMessageDataReader GetAisAddressedSafetyRelatedMessageCollectionByDestinationMmsiDataReader( Guid destinationMmsi )
        {
            const string sql = SimpleAisAddressedSafetyRelatedMessageDataReader.BaseQuery + " WHERE " +
                    SimpleAisAddressedSafetyRelatedMessageDataReader.ViewAliasName + ".[DestinationMmsi] = @destinationMmsi " +
                    " ORDER BY " + SimpleAisAddressedSafetyRelatedMessageDataReader.ViewAliasName + ".[DestinationMmsi]," +SimpleAisAddressedSafetyRelatedMessageDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var destinationMmsiParameter = sqlCommandParameters.AddReference( "@destinationMmsi", destinationMmsi );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleAisAddressedSafetyRelatedMessageDataReader = new SimpleAisAddressedSafetyRelatedMessageDataReader( _loggerFactory, sqlDataReader );
                return simpleAisAddressedSafetyRelatedMessageDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<AisAddressedSafetyRelatedMessageObject> GetAisAddressedSafetyRelatedMessageCollectionByDestinationMmsi( Guid destinationMmsi )
        {
            throw new NotImplementedException( );
        }
        // ---------------------------------------------------------------------
        // AisBaseStationReportMessage queries
        // ---------------------------------------------------------------------
        public SimpleAisBaseStationReportMessageDataReader GetAisBaseStationReportMessageByIdDataReader( Guid id )
        {
            const string sql = SimpleAisBaseStationReportMessageDataReader.BaseQuery + "WHERE " + SimpleAisBaseStationReportMessageDataReader.ViewAliasName + ".[Id] = @id"; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                sqlCommandParameters.AddGuid( "@id", id );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleAisBaseStationReportMessageDataReader = new SimpleAisBaseStationReportMessageDataReader( _loggerFactory, sqlDataReader );
                return simpleAisBaseStationReportMessageDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public AisBaseStationReportMessageObject? GetAisBaseStationReportMessageById( Guid id )
        {
            var simpleAisBaseStationReportMessageDataReader = GetAisBaseStationReportMessageByIdDataReader( id );
            using ( simpleAisBaseStationReportMessageDataReader )
            {
                if ( simpleAisBaseStationReportMessageDataReader.Read( ) )
                {
                    var result = simpleAisBaseStationReportMessageDataReader.GetDataObject( );
                    return result;
                }
            }
            return null;
        }

        public void GetAisBaseStationReportMessageById( Guid id, Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleAisBaseStationReportMessageDataReader = GetAisBaseStationReportMessageByIdDataReader( id );
                using ( simpleAisBaseStationReportMessageDataReader )
                {
                    if ( simpleAisBaseStationReportMessageDataReader.Read( ) )
                    {
                        destinationWriter.Write( true );
                        simpleAisBaseStationReportMessageDataReader.WriteTo( destinationWriter );
                    }
                    else
                    {
                        destinationWriter.Write( false );
                    }
                }
            }
        }

        public SimpleAisBaseStationReportMessageDataReader GetAisBaseStationReportMessageCollectionDataReader( )
        {
            const string sql = SimpleAisBaseStationReportMessageDataReader.BaseQuery; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleAisBaseStationReportMessageDataReader = new SimpleAisBaseStationReportMessageDataReader( _loggerFactory, sqlDataReader );
                return simpleAisBaseStationReportMessageDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public IList<AisBaseStationReportMessageObject> GetAisBaseStationReportMessageCollection( )
        {
            var result = new List<AisBaseStationReportMessageObject>( );
            var simpleAisBaseStationReportMessageDataReader = GetAisBaseStationReportMessageCollectionDataReader( );
            using ( simpleAisBaseStationReportMessageDataReader )
            {
                while ( simpleAisBaseStationReportMessageDataReader.Read( ) )
                {
                    var data = simpleAisBaseStationReportMessageDataReader.GetDataObject( );
                    result.Add( data );
                }
            }
            return result;
        }

        public void GetAisBaseStationReportMessageCollection( Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleAisBaseStationReportMessageDataReader = GetAisBaseStationReportMessageCollectionDataReader( );
                using ( simpleAisBaseStationReportMessageDataReader )
                {
                    simpleAisBaseStationReportMessageDataReader.WriteResultSetTo( destinationWriter );
                }
            }
        }

        public SimpleAisBaseStationReportMessageDataReader GetAisBaseStationReportMessageCollectionByAisDeviceDataReader( Guid aisDevice )
        {
            const string sql = SimpleAisBaseStationReportMessageDataReader.BaseQuery + " WHERE " +
                    SimpleAisBaseStationReportMessageDataReader.ViewAliasName + ".[AisDevice] = @aisDevice " +
                    " ORDER BY " + SimpleAisBaseStationReportMessageDataReader.ViewAliasName + ".[AisDevice]," +SimpleAisBaseStationReportMessageDataReader.ViewAliasName + ".[ReceivedTimestamp]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var aisDeviceParameter = sqlCommandParameters.AddReference( "@aisDevice", aisDevice );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleAisBaseStationReportMessageDataReader = new SimpleAisBaseStationReportMessageDataReader( _loggerFactory, sqlDataReader );
                return simpleAisBaseStationReportMessageDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<AisBaseStationReportMessageObject> GetAisBaseStationReportMessageCollectionByAisDevice( Guid aisDevice )
        {
            throw new NotImplementedException( );
        }
        public SimpleAisBaseStationReportMessageDataReader GetAisBaseStationReportMessageByAisDeviceAndReceivedTimestampDataReader( Guid aisDevice, DateTime receivedTimestamp )
        {
            const string sql = SimpleAisBaseStationReportMessageDataReader.BaseQuery + " WHERE " +
                    SimpleAisBaseStationReportMessageDataReader.ViewAliasName + ".[AisDevice] = @aisDevice AND " +
                    SimpleAisBaseStationReportMessageDataReader.ViewAliasName + ".[ReceivedTimestamp] = @receivedTimestamp " +
                    " ORDER BY " + SimpleAisBaseStationReportMessageDataReader.ViewAliasName + ".[AisDevice]," +SimpleAisBaseStationReportMessageDataReader.ViewAliasName + ".[ReceivedTimestamp]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var aisDeviceParameter = sqlCommandParameters.AddReference( "@aisDevice", aisDevice );
                var receivedTimestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@receivedTimestamp", receivedTimestamp );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleAisBaseStationReportMessageDataReader = new SimpleAisBaseStationReportMessageDataReader( _loggerFactory, sqlDataReader );
                return simpleAisBaseStationReportMessageDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public AisBaseStationReportMessageObject? GetAisBaseStationReportMessageByAisDeviceAndReceivedTimestamp( Guid aisDevice, DateTime receivedTimestamp )
        {
            throw new NotImplementedException( );
        }
        public AisBaseStationReportMessageObject? GetAisBaseStationReportMessageByAisDeviceAtReceivedTimestamp( Guid aisDevice, DateTime receivedTimestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<AisBaseStationReportMessageObject> GetAisBaseStationReportMessageByAisDeviceFromReceivedTimestamp( Guid aisDevice, DateTime receivedTimestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<AisBaseStationReportMessageObject> GetAisBaseStationReportMessageByAisDeviceUntilReceivedTimestamp( Guid aisDevice, DateTime receivedTimestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<AisBaseStationReportMessageObject> GetAisBaseStationReportMessageByAisDeviceOverReceivedTimestamp( Guid aisDevice, DateTime fromReceivedTimestamp, DateTime untilReceivedTimestamp )
        {
            throw new NotImplementedException( );
        }
        public SimpleAisBaseStationReportMessageDataReader GetAisBaseStationReportMessageCollectionByReceivedTimestampDataReader( DateTime receivedTimestamp )
        {
            const string sql = SimpleAisBaseStationReportMessageDataReader.BaseQuery + " WHERE " +
                    SimpleAisBaseStationReportMessageDataReader.ViewAliasName + ".[ReceivedTimestamp] = @receivedTimestamp " +
                    " ORDER BY " + SimpleAisBaseStationReportMessageDataReader.ViewAliasName + ".[ReceivedTimestamp]," +SimpleAisBaseStationReportMessageDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var receivedTimestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@receivedTimestamp", receivedTimestamp );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleAisBaseStationReportMessageDataReader = new SimpleAisBaseStationReportMessageDataReader( _loggerFactory, sqlDataReader );
                return simpleAisBaseStationReportMessageDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<AisBaseStationReportMessageObject> GetAisBaseStationReportMessageCollectionByReceivedTimestamp( DateTime receivedTimestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<AisBaseStationReportMessageObject> GetAisBaseStationReportMessageCollectionAtReceivedTimestamp( DateTime receivedTimestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<AisBaseStationReportMessageObject> GetAisBaseStationReportMessageCollectionFromReceivedTimestamp( DateTime receivedTimestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<AisBaseStationReportMessageObject> GetAisBaseStationReportMessageCollectionUntilReceivedTimestamp( DateTime receivedTimestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<AisBaseStationReportMessageObject> GetAisBaseStationReportMessageCollectionOverReceivedTimestamp( DateTime fromReceivedTimestamp, DateTime untilReceivedTimestamp )
        {
            throw new NotImplementedException( );
        }
        public SimpleAisBaseStationReportMessageDataReader GetAisBaseStationReportMessageCollectionByMmsiDataReader( Guid mmsi )
        {
            const string sql = SimpleAisBaseStationReportMessageDataReader.BaseQuery + " WHERE " +
                    SimpleAisBaseStationReportMessageDataReader.ViewAliasName + ".[Mmsi] = @mmsi " +
                    " ORDER BY " + SimpleAisBaseStationReportMessageDataReader.ViewAliasName + ".[Mmsi]," +SimpleAisBaseStationReportMessageDataReader.ViewAliasName + ".[MessageSequenceNumber]," +SimpleAisBaseStationReportMessageDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var mmsiParameter = sqlCommandParameters.AddReference( "@mmsi", mmsi );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleAisBaseStationReportMessageDataReader = new SimpleAisBaseStationReportMessageDataReader( _loggerFactory, sqlDataReader );
                return simpleAisBaseStationReportMessageDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<AisBaseStationReportMessageObject> GetAisBaseStationReportMessageCollectionByMmsi( Guid mmsi )
        {
            throw new NotImplementedException( );
        }
        public SimpleAisBaseStationReportMessageDataReader GetAisBaseStationReportMessageCollectionByMmsiAndMessageSequenceNumberDataReader( Guid mmsi, long messageSequenceNumber )
        {
            const string sql = SimpleAisBaseStationReportMessageDataReader.BaseQuery + " WHERE " +
                    SimpleAisBaseStationReportMessageDataReader.ViewAliasName + ".[Mmsi] = @mmsi AND " +
                    SimpleAisBaseStationReportMessageDataReader.ViewAliasName + ".[MessageSequenceNumber] = @messageSequenceNumber " +
                    " ORDER BY " + SimpleAisBaseStationReportMessageDataReader.ViewAliasName + ".[Mmsi]," +SimpleAisBaseStationReportMessageDataReader.ViewAliasName + ".[MessageSequenceNumber]," +SimpleAisBaseStationReportMessageDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var mmsiParameter = sqlCommandParameters.AddReference( "@mmsi", mmsi );
                var messageSequenceNumberParameter = sqlCommandParameters.AddInt64( "@messageSequenceNumber", messageSequenceNumber );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleAisBaseStationReportMessageDataReader = new SimpleAisBaseStationReportMessageDataReader( _loggerFactory, sqlDataReader );
                return simpleAisBaseStationReportMessageDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<AisBaseStationReportMessageObject> GetAisBaseStationReportMessageCollectionByMmsiAndMessageSequenceNumber( Guid mmsi, long messageSequenceNumber )
        {
            throw new NotImplementedException( );
        }
        public IList<AisBaseStationReportMessageObject> GetAisBaseStationReportMessageCollectionByMmsiFromMessageSequenceNumber( Guid mmsi, long messageSequenceNumber )
        {
            throw new NotImplementedException( );
        }
        public IList<AisBaseStationReportMessageObject> GetAisBaseStationReportMessageCollectionByMmsiUntilMessageSequenceNumber( Guid mmsi, long messageSequenceNumber )
        {
            throw new NotImplementedException( );
        }
        public IList<AisBaseStationReportMessageObject> GetAisBaseStationReportMessageCollectionByMmsiOverMessageSequenceNumber( Guid mmsi, long fromMessageSequenceNumber, long untilMessageSequenceNumber )
        {
            throw new NotImplementedException( );
        }
        // ---------------------------------------------------------------------
        // AisBinaryAcknowledgeMessage queries
        // ---------------------------------------------------------------------
        public SimpleAisBinaryAcknowledgeMessageDataReader GetAisBinaryAcknowledgeMessageByIdDataReader( Guid id )
        {
            const string sql = SimpleAisBinaryAcknowledgeMessageDataReader.BaseQuery + "WHERE " + SimpleAisBinaryAcknowledgeMessageDataReader.ViewAliasName + ".[Id] = @id"; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                sqlCommandParameters.AddGuid( "@id", id );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleAisBinaryAcknowledgeMessageDataReader = new SimpleAisBinaryAcknowledgeMessageDataReader( _loggerFactory, sqlDataReader );
                return simpleAisBinaryAcknowledgeMessageDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public AisBinaryAcknowledgeMessageObject? GetAisBinaryAcknowledgeMessageById( Guid id )
        {
            var simpleAisBinaryAcknowledgeMessageDataReader = GetAisBinaryAcknowledgeMessageByIdDataReader( id );
            using ( simpleAisBinaryAcknowledgeMessageDataReader )
            {
                if ( simpleAisBinaryAcknowledgeMessageDataReader.Read( ) )
                {
                    var result = simpleAisBinaryAcknowledgeMessageDataReader.GetDataObject( );
                    return result;
                }
            }
            return null;
        }

        public void GetAisBinaryAcknowledgeMessageById( Guid id, Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleAisBinaryAcknowledgeMessageDataReader = GetAisBinaryAcknowledgeMessageByIdDataReader( id );
                using ( simpleAisBinaryAcknowledgeMessageDataReader )
                {
                    if ( simpleAisBinaryAcknowledgeMessageDataReader.Read( ) )
                    {
                        destinationWriter.Write( true );
                        simpleAisBinaryAcknowledgeMessageDataReader.WriteTo( destinationWriter );
                    }
                    else
                    {
                        destinationWriter.Write( false );
                    }
                }
            }
        }

        public SimpleAisBinaryAcknowledgeMessageDataReader GetAisBinaryAcknowledgeMessageCollectionDataReader( )
        {
            const string sql = SimpleAisBinaryAcknowledgeMessageDataReader.BaseQuery; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleAisBinaryAcknowledgeMessageDataReader = new SimpleAisBinaryAcknowledgeMessageDataReader( _loggerFactory, sqlDataReader );
                return simpleAisBinaryAcknowledgeMessageDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public IList<AisBinaryAcknowledgeMessageObject> GetAisBinaryAcknowledgeMessageCollection( )
        {
            var result = new List<AisBinaryAcknowledgeMessageObject>( );
            var simpleAisBinaryAcknowledgeMessageDataReader = GetAisBinaryAcknowledgeMessageCollectionDataReader( );
            using ( simpleAisBinaryAcknowledgeMessageDataReader )
            {
                while ( simpleAisBinaryAcknowledgeMessageDataReader.Read( ) )
                {
                    var data = simpleAisBinaryAcknowledgeMessageDataReader.GetDataObject( );
                    result.Add( data );
                }
            }
            return result;
        }

        public void GetAisBinaryAcknowledgeMessageCollection( Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleAisBinaryAcknowledgeMessageDataReader = GetAisBinaryAcknowledgeMessageCollectionDataReader( );
                using ( simpleAisBinaryAcknowledgeMessageDataReader )
                {
                    simpleAisBinaryAcknowledgeMessageDataReader.WriteResultSetTo( destinationWriter );
                }
            }
        }

        public SimpleAisBinaryAcknowledgeMessageDataReader GetAisBinaryAcknowledgeMessageCollectionByAisDeviceDataReader( Guid aisDevice )
        {
            const string sql = SimpleAisBinaryAcknowledgeMessageDataReader.BaseQuery + " WHERE " +
                    SimpleAisBinaryAcknowledgeMessageDataReader.ViewAliasName + ".[AisDevice] = @aisDevice " +
                    " ORDER BY " + SimpleAisBinaryAcknowledgeMessageDataReader.ViewAliasName + ".[AisDevice]," +SimpleAisBinaryAcknowledgeMessageDataReader.ViewAliasName + ".[ReceivedTimestamp]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var aisDeviceParameter = sqlCommandParameters.AddReference( "@aisDevice", aisDevice );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleAisBinaryAcknowledgeMessageDataReader = new SimpleAisBinaryAcknowledgeMessageDataReader( _loggerFactory, sqlDataReader );
                return simpleAisBinaryAcknowledgeMessageDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<AisBinaryAcknowledgeMessageObject> GetAisBinaryAcknowledgeMessageCollectionByAisDevice( Guid aisDevice )
        {
            throw new NotImplementedException( );
        }
        public SimpleAisBinaryAcknowledgeMessageDataReader GetAisBinaryAcknowledgeMessageByAisDeviceAndReceivedTimestampDataReader( Guid aisDevice, DateTime receivedTimestamp )
        {
            const string sql = SimpleAisBinaryAcknowledgeMessageDataReader.BaseQuery + " WHERE " +
                    SimpleAisBinaryAcknowledgeMessageDataReader.ViewAliasName + ".[AisDevice] = @aisDevice AND " +
                    SimpleAisBinaryAcknowledgeMessageDataReader.ViewAliasName + ".[ReceivedTimestamp] = @receivedTimestamp " +
                    " ORDER BY " + SimpleAisBinaryAcknowledgeMessageDataReader.ViewAliasName + ".[AisDevice]," +SimpleAisBinaryAcknowledgeMessageDataReader.ViewAliasName + ".[ReceivedTimestamp]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var aisDeviceParameter = sqlCommandParameters.AddReference( "@aisDevice", aisDevice );
                var receivedTimestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@receivedTimestamp", receivedTimestamp );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleAisBinaryAcknowledgeMessageDataReader = new SimpleAisBinaryAcknowledgeMessageDataReader( _loggerFactory, sqlDataReader );
                return simpleAisBinaryAcknowledgeMessageDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public AisBinaryAcknowledgeMessageObject? GetAisBinaryAcknowledgeMessageByAisDeviceAndReceivedTimestamp( Guid aisDevice, DateTime receivedTimestamp )
        {
            throw new NotImplementedException( );
        }
        public AisBinaryAcknowledgeMessageObject? GetAisBinaryAcknowledgeMessageByAisDeviceAtReceivedTimestamp( Guid aisDevice, DateTime receivedTimestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<AisBinaryAcknowledgeMessageObject> GetAisBinaryAcknowledgeMessageByAisDeviceFromReceivedTimestamp( Guid aisDevice, DateTime receivedTimestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<AisBinaryAcknowledgeMessageObject> GetAisBinaryAcknowledgeMessageByAisDeviceUntilReceivedTimestamp( Guid aisDevice, DateTime receivedTimestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<AisBinaryAcknowledgeMessageObject> GetAisBinaryAcknowledgeMessageByAisDeviceOverReceivedTimestamp( Guid aisDevice, DateTime fromReceivedTimestamp, DateTime untilReceivedTimestamp )
        {
            throw new NotImplementedException( );
        }
        public SimpleAisBinaryAcknowledgeMessageDataReader GetAisBinaryAcknowledgeMessageCollectionByReceivedTimestampDataReader( DateTime receivedTimestamp )
        {
            const string sql = SimpleAisBinaryAcknowledgeMessageDataReader.BaseQuery + " WHERE " +
                    SimpleAisBinaryAcknowledgeMessageDataReader.ViewAliasName + ".[ReceivedTimestamp] = @receivedTimestamp " +
                    " ORDER BY " + SimpleAisBinaryAcknowledgeMessageDataReader.ViewAliasName + ".[ReceivedTimestamp]," +SimpleAisBinaryAcknowledgeMessageDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var receivedTimestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@receivedTimestamp", receivedTimestamp );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleAisBinaryAcknowledgeMessageDataReader = new SimpleAisBinaryAcknowledgeMessageDataReader( _loggerFactory, sqlDataReader );
                return simpleAisBinaryAcknowledgeMessageDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<AisBinaryAcknowledgeMessageObject> GetAisBinaryAcknowledgeMessageCollectionByReceivedTimestamp( DateTime receivedTimestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<AisBinaryAcknowledgeMessageObject> GetAisBinaryAcknowledgeMessageCollectionAtReceivedTimestamp( DateTime receivedTimestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<AisBinaryAcknowledgeMessageObject> GetAisBinaryAcknowledgeMessageCollectionFromReceivedTimestamp( DateTime receivedTimestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<AisBinaryAcknowledgeMessageObject> GetAisBinaryAcknowledgeMessageCollectionUntilReceivedTimestamp( DateTime receivedTimestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<AisBinaryAcknowledgeMessageObject> GetAisBinaryAcknowledgeMessageCollectionOverReceivedTimestamp( DateTime fromReceivedTimestamp, DateTime untilReceivedTimestamp )
        {
            throw new NotImplementedException( );
        }
        public SimpleAisBinaryAcknowledgeMessageDataReader GetAisBinaryAcknowledgeMessageCollectionByMmsiDataReader( Guid mmsi )
        {
            const string sql = SimpleAisBinaryAcknowledgeMessageDataReader.BaseQuery + " WHERE " +
                    SimpleAisBinaryAcknowledgeMessageDataReader.ViewAliasName + ".[Mmsi] = @mmsi " +
                    " ORDER BY " + SimpleAisBinaryAcknowledgeMessageDataReader.ViewAliasName + ".[Mmsi]," +SimpleAisBinaryAcknowledgeMessageDataReader.ViewAliasName + ".[MessageSequenceNumber]," +SimpleAisBinaryAcknowledgeMessageDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var mmsiParameter = sqlCommandParameters.AddReference( "@mmsi", mmsi );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleAisBinaryAcknowledgeMessageDataReader = new SimpleAisBinaryAcknowledgeMessageDataReader( _loggerFactory, sqlDataReader );
                return simpleAisBinaryAcknowledgeMessageDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<AisBinaryAcknowledgeMessageObject> GetAisBinaryAcknowledgeMessageCollectionByMmsi( Guid mmsi )
        {
            throw new NotImplementedException( );
        }
        public SimpleAisBinaryAcknowledgeMessageDataReader GetAisBinaryAcknowledgeMessageCollectionByMmsiAndMessageSequenceNumberDataReader( Guid mmsi, long messageSequenceNumber )
        {
            const string sql = SimpleAisBinaryAcknowledgeMessageDataReader.BaseQuery + " WHERE " +
                    SimpleAisBinaryAcknowledgeMessageDataReader.ViewAliasName + ".[Mmsi] = @mmsi AND " +
                    SimpleAisBinaryAcknowledgeMessageDataReader.ViewAliasName + ".[MessageSequenceNumber] = @messageSequenceNumber " +
                    " ORDER BY " + SimpleAisBinaryAcknowledgeMessageDataReader.ViewAliasName + ".[Mmsi]," +SimpleAisBinaryAcknowledgeMessageDataReader.ViewAliasName + ".[MessageSequenceNumber]," +SimpleAisBinaryAcknowledgeMessageDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var mmsiParameter = sqlCommandParameters.AddReference( "@mmsi", mmsi );
                var messageSequenceNumberParameter = sqlCommandParameters.AddInt64( "@messageSequenceNumber", messageSequenceNumber );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleAisBinaryAcknowledgeMessageDataReader = new SimpleAisBinaryAcknowledgeMessageDataReader( _loggerFactory, sqlDataReader );
                return simpleAisBinaryAcknowledgeMessageDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<AisBinaryAcknowledgeMessageObject> GetAisBinaryAcknowledgeMessageCollectionByMmsiAndMessageSequenceNumber( Guid mmsi, long messageSequenceNumber )
        {
            throw new NotImplementedException( );
        }
        public IList<AisBinaryAcknowledgeMessageObject> GetAisBinaryAcknowledgeMessageCollectionByMmsiFromMessageSequenceNumber( Guid mmsi, long messageSequenceNumber )
        {
            throw new NotImplementedException( );
        }
        public IList<AisBinaryAcknowledgeMessageObject> GetAisBinaryAcknowledgeMessageCollectionByMmsiUntilMessageSequenceNumber( Guid mmsi, long messageSequenceNumber )
        {
            throw new NotImplementedException( );
        }
        public IList<AisBinaryAcknowledgeMessageObject> GetAisBinaryAcknowledgeMessageCollectionByMmsiOverMessageSequenceNumber( Guid mmsi, long fromMessageSequenceNumber, long untilMessageSequenceNumber )
        {
            throw new NotImplementedException( );
        }
        // ---------------------------------------------------------------------
        // AisBinaryAddressedMessage queries
        // ---------------------------------------------------------------------
        public SimpleAisBinaryAddressedMessageDataReader GetAisBinaryAddressedMessageByIdDataReader( Guid id )
        {
            const string sql = SimpleAisBinaryAddressedMessageDataReader.BaseQuery + "WHERE " + SimpleAisBinaryAddressedMessageDataReader.ViewAliasName + ".[Id] = @id"; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                sqlCommandParameters.AddGuid( "@id", id );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleAisBinaryAddressedMessageDataReader = new SimpleAisBinaryAddressedMessageDataReader( _loggerFactory, sqlDataReader );
                return simpleAisBinaryAddressedMessageDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public AisBinaryAddressedMessageObject? GetAisBinaryAddressedMessageById( Guid id )
        {
            var simpleAisBinaryAddressedMessageDataReader = GetAisBinaryAddressedMessageByIdDataReader( id );
            using ( simpleAisBinaryAddressedMessageDataReader )
            {
                if ( simpleAisBinaryAddressedMessageDataReader.Read( ) )
                {
                    var result = simpleAisBinaryAddressedMessageDataReader.GetDataObject( );
                    return result;
                }
            }
            return null;
        }

        public void GetAisBinaryAddressedMessageById( Guid id, Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleAisBinaryAddressedMessageDataReader = GetAisBinaryAddressedMessageByIdDataReader( id );
                using ( simpleAisBinaryAddressedMessageDataReader )
                {
                    if ( simpleAisBinaryAddressedMessageDataReader.Read( ) )
                    {
                        destinationWriter.Write( true );
                        simpleAisBinaryAddressedMessageDataReader.WriteTo( destinationWriter );
                    }
                    else
                    {
                        destinationWriter.Write( false );
                    }
                }
            }
        }

        public SimpleAisBinaryAddressedMessageDataReader GetAisBinaryAddressedMessageCollectionDataReader( )
        {
            const string sql = SimpleAisBinaryAddressedMessageDataReader.BaseQuery; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleAisBinaryAddressedMessageDataReader = new SimpleAisBinaryAddressedMessageDataReader( _loggerFactory, sqlDataReader );
                return simpleAisBinaryAddressedMessageDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public IList<AisBinaryAddressedMessageObject> GetAisBinaryAddressedMessageCollection( )
        {
            var result = new List<AisBinaryAddressedMessageObject>( );
            var simpleAisBinaryAddressedMessageDataReader = GetAisBinaryAddressedMessageCollectionDataReader( );
            using ( simpleAisBinaryAddressedMessageDataReader )
            {
                while ( simpleAisBinaryAddressedMessageDataReader.Read( ) )
                {
                    var data = simpleAisBinaryAddressedMessageDataReader.GetDataObject( );
                    result.Add( data );
                }
            }
            return result;
        }

        public void GetAisBinaryAddressedMessageCollection( Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleAisBinaryAddressedMessageDataReader = GetAisBinaryAddressedMessageCollectionDataReader( );
                using ( simpleAisBinaryAddressedMessageDataReader )
                {
                    simpleAisBinaryAddressedMessageDataReader.WriteResultSetTo( destinationWriter );
                }
            }
        }

        public SimpleAisBinaryAddressedMessageDataReader GetAisBinaryAddressedMessageCollectionByAisDeviceDataReader( Guid aisDevice )
        {
            const string sql = SimpleAisBinaryAddressedMessageDataReader.BaseQuery + " WHERE " +
                    SimpleAisBinaryAddressedMessageDataReader.ViewAliasName + ".[AisDevice] = @aisDevice " +
                    " ORDER BY " + SimpleAisBinaryAddressedMessageDataReader.ViewAliasName + ".[AisDevice]," +SimpleAisBinaryAddressedMessageDataReader.ViewAliasName + ".[ReceivedTimestamp]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var aisDeviceParameter = sqlCommandParameters.AddReference( "@aisDevice", aisDevice );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleAisBinaryAddressedMessageDataReader = new SimpleAisBinaryAddressedMessageDataReader( _loggerFactory, sqlDataReader );
                return simpleAisBinaryAddressedMessageDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<AisBinaryAddressedMessageObject> GetAisBinaryAddressedMessageCollectionByAisDevice( Guid aisDevice )
        {
            throw new NotImplementedException( );
        }
        public SimpleAisBinaryAddressedMessageDataReader GetAisBinaryAddressedMessageByAisDeviceAndReceivedTimestampDataReader( Guid aisDevice, DateTime receivedTimestamp )
        {
            const string sql = SimpleAisBinaryAddressedMessageDataReader.BaseQuery + " WHERE " +
                    SimpleAisBinaryAddressedMessageDataReader.ViewAliasName + ".[AisDevice] = @aisDevice AND " +
                    SimpleAisBinaryAddressedMessageDataReader.ViewAliasName + ".[ReceivedTimestamp] = @receivedTimestamp " +
                    " ORDER BY " + SimpleAisBinaryAddressedMessageDataReader.ViewAliasName + ".[AisDevice]," +SimpleAisBinaryAddressedMessageDataReader.ViewAliasName + ".[ReceivedTimestamp]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var aisDeviceParameter = sqlCommandParameters.AddReference( "@aisDevice", aisDevice );
                var receivedTimestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@receivedTimestamp", receivedTimestamp );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleAisBinaryAddressedMessageDataReader = new SimpleAisBinaryAddressedMessageDataReader( _loggerFactory, sqlDataReader );
                return simpleAisBinaryAddressedMessageDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public AisBinaryAddressedMessageObject? GetAisBinaryAddressedMessageByAisDeviceAndReceivedTimestamp( Guid aisDevice, DateTime receivedTimestamp )
        {
            throw new NotImplementedException( );
        }
        public AisBinaryAddressedMessageObject? GetAisBinaryAddressedMessageByAisDeviceAtReceivedTimestamp( Guid aisDevice, DateTime receivedTimestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<AisBinaryAddressedMessageObject> GetAisBinaryAddressedMessageByAisDeviceFromReceivedTimestamp( Guid aisDevice, DateTime receivedTimestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<AisBinaryAddressedMessageObject> GetAisBinaryAddressedMessageByAisDeviceUntilReceivedTimestamp( Guid aisDevice, DateTime receivedTimestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<AisBinaryAddressedMessageObject> GetAisBinaryAddressedMessageByAisDeviceOverReceivedTimestamp( Guid aisDevice, DateTime fromReceivedTimestamp, DateTime untilReceivedTimestamp )
        {
            throw new NotImplementedException( );
        }
        public SimpleAisBinaryAddressedMessageDataReader GetAisBinaryAddressedMessageCollectionByReceivedTimestampDataReader( DateTime receivedTimestamp )
        {
            const string sql = SimpleAisBinaryAddressedMessageDataReader.BaseQuery + " WHERE " +
                    SimpleAisBinaryAddressedMessageDataReader.ViewAliasName + ".[ReceivedTimestamp] = @receivedTimestamp " +
                    " ORDER BY " + SimpleAisBinaryAddressedMessageDataReader.ViewAliasName + ".[ReceivedTimestamp]," +SimpleAisBinaryAddressedMessageDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var receivedTimestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@receivedTimestamp", receivedTimestamp );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleAisBinaryAddressedMessageDataReader = new SimpleAisBinaryAddressedMessageDataReader( _loggerFactory, sqlDataReader );
                return simpleAisBinaryAddressedMessageDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<AisBinaryAddressedMessageObject> GetAisBinaryAddressedMessageCollectionByReceivedTimestamp( DateTime receivedTimestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<AisBinaryAddressedMessageObject> GetAisBinaryAddressedMessageCollectionAtReceivedTimestamp( DateTime receivedTimestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<AisBinaryAddressedMessageObject> GetAisBinaryAddressedMessageCollectionFromReceivedTimestamp( DateTime receivedTimestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<AisBinaryAddressedMessageObject> GetAisBinaryAddressedMessageCollectionUntilReceivedTimestamp( DateTime receivedTimestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<AisBinaryAddressedMessageObject> GetAisBinaryAddressedMessageCollectionOverReceivedTimestamp( DateTime fromReceivedTimestamp, DateTime untilReceivedTimestamp )
        {
            throw new NotImplementedException( );
        }
        public SimpleAisBinaryAddressedMessageDataReader GetAisBinaryAddressedMessageCollectionByMmsiDataReader( Guid mmsi )
        {
            const string sql = SimpleAisBinaryAddressedMessageDataReader.BaseQuery + " WHERE " +
                    SimpleAisBinaryAddressedMessageDataReader.ViewAliasName + ".[Mmsi] = @mmsi " +
                    " ORDER BY " + SimpleAisBinaryAddressedMessageDataReader.ViewAliasName + ".[Mmsi]," +SimpleAisBinaryAddressedMessageDataReader.ViewAliasName + ".[MessageSequenceNumber]," +SimpleAisBinaryAddressedMessageDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var mmsiParameter = sqlCommandParameters.AddReference( "@mmsi", mmsi );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleAisBinaryAddressedMessageDataReader = new SimpleAisBinaryAddressedMessageDataReader( _loggerFactory, sqlDataReader );
                return simpleAisBinaryAddressedMessageDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<AisBinaryAddressedMessageObject> GetAisBinaryAddressedMessageCollectionByMmsi( Guid mmsi )
        {
            throw new NotImplementedException( );
        }
        public SimpleAisBinaryAddressedMessageDataReader GetAisBinaryAddressedMessageCollectionByMmsiAndMessageSequenceNumberDataReader( Guid mmsi, long messageSequenceNumber )
        {
            const string sql = SimpleAisBinaryAddressedMessageDataReader.BaseQuery + " WHERE " +
                    SimpleAisBinaryAddressedMessageDataReader.ViewAliasName + ".[Mmsi] = @mmsi AND " +
                    SimpleAisBinaryAddressedMessageDataReader.ViewAliasName + ".[MessageSequenceNumber] = @messageSequenceNumber " +
                    " ORDER BY " + SimpleAisBinaryAddressedMessageDataReader.ViewAliasName + ".[Mmsi]," +SimpleAisBinaryAddressedMessageDataReader.ViewAliasName + ".[MessageSequenceNumber]," +SimpleAisBinaryAddressedMessageDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var mmsiParameter = sqlCommandParameters.AddReference( "@mmsi", mmsi );
                var messageSequenceNumberParameter = sqlCommandParameters.AddInt64( "@messageSequenceNumber", messageSequenceNumber );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleAisBinaryAddressedMessageDataReader = new SimpleAisBinaryAddressedMessageDataReader( _loggerFactory, sqlDataReader );
                return simpleAisBinaryAddressedMessageDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<AisBinaryAddressedMessageObject> GetAisBinaryAddressedMessageCollectionByMmsiAndMessageSequenceNumber( Guid mmsi, long messageSequenceNumber )
        {
            throw new NotImplementedException( );
        }
        public IList<AisBinaryAddressedMessageObject> GetAisBinaryAddressedMessageCollectionByMmsiFromMessageSequenceNumber( Guid mmsi, long messageSequenceNumber )
        {
            throw new NotImplementedException( );
        }
        public IList<AisBinaryAddressedMessageObject> GetAisBinaryAddressedMessageCollectionByMmsiUntilMessageSequenceNumber( Guid mmsi, long messageSequenceNumber )
        {
            throw new NotImplementedException( );
        }
        public IList<AisBinaryAddressedMessageObject> GetAisBinaryAddressedMessageCollectionByMmsiOverMessageSequenceNumber( Guid mmsi, long fromMessageSequenceNumber, long untilMessageSequenceNumber )
        {
            throw new NotImplementedException( );
        }
        public SimpleAisBinaryAddressedMessageDataReader GetAisBinaryAddressedMessageCollectionByDestinationMmsiDataReader( Guid destinationMmsi )
        {
            const string sql = SimpleAisBinaryAddressedMessageDataReader.BaseQuery + " WHERE " +
                    SimpleAisBinaryAddressedMessageDataReader.ViewAliasName + ".[DestinationMmsi] = @destinationMmsi " +
                    " ORDER BY " + SimpleAisBinaryAddressedMessageDataReader.ViewAliasName + ".[DestinationMmsi]," +SimpleAisBinaryAddressedMessageDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var destinationMmsiParameter = sqlCommandParameters.AddReference( "@destinationMmsi", destinationMmsi );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleAisBinaryAddressedMessageDataReader = new SimpleAisBinaryAddressedMessageDataReader( _loggerFactory, sqlDataReader );
                return simpleAisBinaryAddressedMessageDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<AisBinaryAddressedMessageObject> GetAisBinaryAddressedMessageCollectionByDestinationMmsi( Guid destinationMmsi )
        {
            throw new NotImplementedException( );
        }
        // ---------------------------------------------------------------------
        // AisBinaryBroadcastMessage queries
        // ---------------------------------------------------------------------
        public SimpleAisBinaryBroadcastMessageDataReader GetAisBinaryBroadcastMessageByIdDataReader( Guid id )
        {
            const string sql = SimpleAisBinaryBroadcastMessageDataReader.BaseQuery + "WHERE " + SimpleAisBinaryBroadcastMessageDataReader.ViewAliasName + ".[Id] = @id"; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                sqlCommandParameters.AddGuid( "@id", id );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleAisBinaryBroadcastMessageDataReader = new SimpleAisBinaryBroadcastMessageDataReader( _loggerFactory, sqlDataReader );
                return simpleAisBinaryBroadcastMessageDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public AisBinaryBroadcastMessageObject? GetAisBinaryBroadcastMessageById( Guid id )
        {
            var simpleAisBinaryBroadcastMessageDataReader = GetAisBinaryBroadcastMessageByIdDataReader( id );
            using ( simpleAisBinaryBroadcastMessageDataReader )
            {
                if ( simpleAisBinaryBroadcastMessageDataReader.Read( ) )
                {
                    var result = simpleAisBinaryBroadcastMessageDataReader.GetDataObject( );
                    return result;
                }
            }
            return null;
        }

        public void GetAisBinaryBroadcastMessageById( Guid id, Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleAisBinaryBroadcastMessageDataReader = GetAisBinaryBroadcastMessageByIdDataReader( id );
                using ( simpleAisBinaryBroadcastMessageDataReader )
                {
                    if ( simpleAisBinaryBroadcastMessageDataReader.Read( ) )
                    {
                        destinationWriter.Write( true );
                        simpleAisBinaryBroadcastMessageDataReader.WriteTo( destinationWriter );
                    }
                    else
                    {
                        destinationWriter.Write( false );
                    }
                }
            }
        }

        public SimpleAisBinaryBroadcastMessageDataReader GetAisBinaryBroadcastMessageCollectionDataReader( )
        {
            const string sql = SimpleAisBinaryBroadcastMessageDataReader.BaseQuery; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleAisBinaryBroadcastMessageDataReader = new SimpleAisBinaryBroadcastMessageDataReader( _loggerFactory, sqlDataReader );
                return simpleAisBinaryBroadcastMessageDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public IList<AisBinaryBroadcastMessageObject> GetAisBinaryBroadcastMessageCollection( )
        {
            var result = new List<AisBinaryBroadcastMessageObject>( );
            var simpleAisBinaryBroadcastMessageDataReader = GetAisBinaryBroadcastMessageCollectionDataReader( );
            using ( simpleAisBinaryBroadcastMessageDataReader )
            {
                while ( simpleAisBinaryBroadcastMessageDataReader.Read( ) )
                {
                    var data = simpleAisBinaryBroadcastMessageDataReader.GetDataObject( );
                    result.Add( data );
                }
            }
            return result;
        }

        public void GetAisBinaryBroadcastMessageCollection( Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleAisBinaryBroadcastMessageDataReader = GetAisBinaryBroadcastMessageCollectionDataReader( );
                using ( simpleAisBinaryBroadcastMessageDataReader )
                {
                    simpleAisBinaryBroadcastMessageDataReader.WriteResultSetTo( destinationWriter );
                }
            }
        }

        public SimpleAisBinaryBroadcastMessageDataReader GetAisBinaryBroadcastMessageCollectionByAisDeviceDataReader( Guid aisDevice )
        {
            const string sql = SimpleAisBinaryBroadcastMessageDataReader.BaseQuery + " WHERE " +
                    SimpleAisBinaryBroadcastMessageDataReader.ViewAliasName + ".[AisDevice] = @aisDevice " +
                    " ORDER BY " + SimpleAisBinaryBroadcastMessageDataReader.ViewAliasName + ".[AisDevice]," +SimpleAisBinaryBroadcastMessageDataReader.ViewAliasName + ".[ReceivedTimestamp]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var aisDeviceParameter = sqlCommandParameters.AddReference( "@aisDevice", aisDevice );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleAisBinaryBroadcastMessageDataReader = new SimpleAisBinaryBroadcastMessageDataReader( _loggerFactory, sqlDataReader );
                return simpleAisBinaryBroadcastMessageDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<AisBinaryBroadcastMessageObject> GetAisBinaryBroadcastMessageCollectionByAisDevice( Guid aisDevice )
        {
            throw new NotImplementedException( );
        }
        public SimpleAisBinaryBroadcastMessageDataReader GetAisBinaryBroadcastMessageByAisDeviceAndReceivedTimestampDataReader( Guid aisDevice, DateTime receivedTimestamp )
        {
            const string sql = SimpleAisBinaryBroadcastMessageDataReader.BaseQuery + " WHERE " +
                    SimpleAisBinaryBroadcastMessageDataReader.ViewAliasName + ".[AisDevice] = @aisDevice AND " +
                    SimpleAisBinaryBroadcastMessageDataReader.ViewAliasName + ".[ReceivedTimestamp] = @receivedTimestamp " +
                    " ORDER BY " + SimpleAisBinaryBroadcastMessageDataReader.ViewAliasName + ".[AisDevice]," +SimpleAisBinaryBroadcastMessageDataReader.ViewAliasName + ".[ReceivedTimestamp]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var aisDeviceParameter = sqlCommandParameters.AddReference( "@aisDevice", aisDevice );
                var receivedTimestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@receivedTimestamp", receivedTimestamp );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleAisBinaryBroadcastMessageDataReader = new SimpleAisBinaryBroadcastMessageDataReader( _loggerFactory, sqlDataReader );
                return simpleAisBinaryBroadcastMessageDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public AisBinaryBroadcastMessageObject? GetAisBinaryBroadcastMessageByAisDeviceAndReceivedTimestamp( Guid aisDevice, DateTime receivedTimestamp )
        {
            throw new NotImplementedException( );
        }
        public AisBinaryBroadcastMessageObject? GetAisBinaryBroadcastMessageByAisDeviceAtReceivedTimestamp( Guid aisDevice, DateTime receivedTimestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<AisBinaryBroadcastMessageObject> GetAisBinaryBroadcastMessageByAisDeviceFromReceivedTimestamp( Guid aisDevice, DateTime receivedTimestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<AisBinaryBroadcastMessageObject> GetAisBinaryBroadcastMessageByAisDeviceUntilReceivedTimestamp( Guid aisDevice, DateTime receivedTimestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<AisBinaryBroadcastMessageObject> GetAisBinaryBroadcastMessageByAisDeviceOverReceivedTimestamp( Guid aisDevice, DateTime fromReceivedTimestamp, DateTime untilReceivedTimestamp )
        {
            throw new NotImplementedException( );
        }
        public SimpleAisBinaryBroadcastMessageDataReader GetAisBinaryBroadcastMessageCollectionByReceivedTimestampDataReader( DateTime receivedTimestamp )
        {
            const string sql = SimpleAisBinaryBroadcastMessageDataReader.BaseQuery + " WHERE " +
                    SimpleAisBinaryBroadcastMessageDataReader.ViewAliasName + ".[ReceivedTimestamp] = @receivedTimestamp " +
                    " ORDER BY " + SimpleAisBinaryBroadcastMessageDataReader.ViewAliasName + ".[ReceivedTimestamp]," +SimpleAisBinaryBroadcastMessageDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var receivedTimestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@receivedTimestamp", receivedTimestamp );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleAisBinaryBroadcastMessageDataReader = new SimpleAisBinaryBroadcastMessageDataReader( _loggerFactory, sqlDataReader );
                return simpleAisBinaryBroadcastMessageDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<AisBinaryBroadcastMessageObject> GetAisBinaryBroadcastMessageCollectionByReceivedTimestamp( DateTime receivedTimestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<AisBinaryBroadcastMessageObject> GetAisBinaryBroadcastMessageCollectionAtReceivedTimestamp( DateTime receivedTimestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<AisBinaryBroadcastMessageObject> GetAisBinaryBroadcastMessageCollectionFromReceivedTimestamp( DateTime receivedTimestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<AisBinaryBroadcastMessageObject> GetAisBinaryBroadcastMessageCollectionUntilReceivedTimestamp( DateTime receivedTimestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<AisBinaryBroadcastMessageObject> GetAisBinaryBroadcastMessageCollectionOverReceivedTimestamp( DateTime fromReceivedTimestamp, DateTime untilReceivedTimestamp )
        {
            throw new NotImplementedException( );
        }
        public SimpleAisBinaryBroadcastMessageDataReader GetAisBinaryBroadcastMessageCollectionByMmsiDataReader( Guid mmsi )
        {
            const string sql = SimpleAisBinaryBroadcastMessageDataReader.BaseQuery + " WHERE " +
                    SimpleAisBinaryBroadcastMessageDataReader.ViewAliasName + ".[Mmsi] = @mmsi " +
                    " ORDER BY " + SimpleAisBinaryBroadcastMessageDataReader.ViewAliasName + ".[Mmsi]," +SimpleAisBinaryBroadcastMessageDataReader.ViewAliasName + ".[MessageSequenceNumber]," +SimpleAisBinaryBroadcastMessageDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var mmsiParameter = sqlCommandParameters.AddReference( "@mmsi", mmsi );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleAisBinaryBroadcastMessageDataReader = new SimpleAisBinaryBroadcastMessageDataReader( _loggerFactory, sqlDataReader );
                return simpleAisBinaryBroadcastMessageDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<AisBinaryBroadcastMessageObject> GetAisBinaryBroadcastMessageCollectionByMmsi( Guid mmsi )
        {
            throw new NotImplementedException( );
        }
        public SimpleAisBinaryBroadcastMessageDataReader GetAisBinaryBroadcastMessageCollectionByMmsiAndMessageSequenceNumberDataReader( Guid mmsi, long messageSequenceNumber )
        {
            const string sql = SimpleAisBinaryBroadcastMessageDataReader.BaseQuery + " WHERE " +
                    SimpleAisBinaryBroadcastMessageDataReader.ViewAliasName + ".[Mmsi] = @mmsi AND " +
                    SimpleAisBinaryBroadcastMessageDataReader.ViewAliasName + ".[MessageSequenceNumber] = @messageSequenceNumber " +
                    " ORDER BY " + SimpleAisBinaryBroadcastMessageDataReader.ViewAliasName + ".[Mmsi]," +SimpleAisBinaryBroadcastMessageDataReader.ViewAliasName + ".[MessageSequenceNumber]," +SimpleAisBinaryBroadcastMessageDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var mmsiParameter = sqlCommandParameters.AddReference( "@mmsi", mmsi );
                var messageSequenceNumberParameter = sqlCommandParameters.AddInt64( "@messageSequenceNumber", messageSequenceNumber );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleAisBinaryBroadcastMessageDataReader = new SimpleAisBinaryBroadcastMessageDataReader( _loggerFactory, sqlDataReader );
                return simpleAisBinaryBroadcastMessageDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<AisBinaryBroadcastMessageObject> GetAisBinaryBroadcastMessageCollectionByMmsiAndMessageSequenceNumber( Guid mmsi, long messageSequenceNumber )
        {
            throw new NotImplementedException( );
        }
        public IList<AisBinaryBroadcastMessageObject> GetAisBinaryBroadcastMessageCollectionByMmsiFromMessageSequenceNumber( Guid mmsi, long messageSequenceNumber )
        {
            throw new NotImplementedException( );
        }
        public IList<AisBinaryBroadcastMessageObject> GetAisBinaryBroadcastMessageCollectionByMmsiUntilMessageSequenceNumber( Guid mmsi, long messageSequenceNumber )
        {
            throw new NotImplementedException( );
        }
        public IList<AisBinaryBroadcastMessageObject> GetAisBinaryBroadcastMessageCollectionByMmsiOverMessageSequenceNumber( Guid mmsi, long fromMessageSequenceNumber, long untilMessageSequenceNumber )
        {
            throw new NotImplementedException( );
        }
        // ---------------------------------------------------------------------
        // AisDataLinkManagementMessage queries
        // ---------------------------------------------------------------------
        public SimpleAisDataLinkManagementMessageDataReader GetAisDataLinkManagementMessageByIdDataReader( Guid id )
        {
            const string sql = SimpleAisDataLinkManagementMessageDataReader.BaseQuery + "WHERE " + SimpleAisDataLinkManagementMessageDataReader.ViewAliasName + ".[Id] = @id"; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                sqlCommandParameters.AddGuid( "@id", id );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleAisDataLinkManagementMessageDataReader = new SimpleAisDataLinkManagementMessageDataReader( _loggerFactory, sqlDataReader );
                return simpleAisDataLinkManagementMessageDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public AisDataLinkManagementMessageObject? GetAisDataLinkManagementMessageById( Guid id )
        {
            var simpleAisDataLinkManagementMessageDataReader = GetAisDataLinkManagementMessageByIdDataReader( id );
            using ( simpleAisDataLinkManagementMessageDataReader )
            {
                if ( simpleAisDataLinkManagementMessageDataReader.Read( ) )
                {
                    var result = simpleAisDataLinkManagementMessageDataReader.GetDataObject( );
                    return result;
                }
            }
            return null;
        }

        public void GetAisDataLinkManagementMessageById( Guid id, Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleAisDataLinkManagementMessageDataReader = GetAisDataLinkManagementMessageByIdDataReader( id );
                using ( simpleAisDataLinkManagementMessageDataReader )
                {
                    if ( simpleAisDataLinkManagementMessageDataReader.Read( ) )
                    {
                        destinationWriter.Write( true );
                        simpleAisDataLinkManagementMessageDataReader.WriteTo( destinationWriter );
                    }
                    else
                    {
                        destinationWriter.Write( false );
                    }
                }
            }
        }

        public SimpleAisDataLinkManagementMessageDataReader GetAisDataLinkManagementMessageCollectionDataReader( )
        {
            const string sql = SimpleAisDataLinkManagementMessageDataReader.BaseQuery; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleAisDataLinkManagementMessageDataReader = new SimpleAisDataLinkManagementMessageDataReader( _loggerFactory, sqlDataReader );
                return simpleAisDataLinkManagementMessageDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public IList<AisDataLinkManagementMessageObject> GetAisDataLinkManagementMessageCollection( )
        {
            var result = new List<AisDataLinkManagementMessageObject>( );
            var simpleAisDataLinkManagementMessageDataReader = GetAisDataLinkManagementMessageCollectionDataReader( );
            using ( simpleAisDataLinkManagementMessageDataReader )
            {
                while ( simpleAisDataLinkManagementMessageDataReader.Read( ) )
                {
                    var data = simpleAisDataLinkManagementMessageDataReader.GetDataObject( );
                    result.Add( data );
                }
            }
            return result;
        }

        public void GetAisDataLinkManagementMessageCollection( Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleAisDataLinkManagementMessageDataReader = GetAisDataLinkManagementMessageCollectionDataReader( );
                using ( simpleAisDataLinkManagementMessageDataReader )
                {
                    simpleAisDataLinkManagementMessageDataReader.WriteResultSetTo( destinationWriter );
                }
            }
        }

        public SimpleAisDataLinkManagementMessageDataReader GetAisDataLinkManagementMessageCollectionByAisDeviceDataReader( Guid aisDevice )
        {
            const string sql = SimpleAisDataLinkManagementMessageDataReader.BaseQuery + " WHERE " +
                    SimpleAisDataLinkManagementMessageDataReader.ViewAliasName + ".[AisDevice] = @aisDevice " +
                    " ORDER BY " + SimpleAisDataLinkManagementMessageDataReader.ViewAliasName + ".[AisDevice]," +SimpleAisDataLinkManagementMessageDataReader.ViewAliasName + ".[ReceivedTimestamp]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var aisDeviceParameter = sqlCommandParameters.AddReference( "@aisDevice", aisDevice );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleAisDataLinkManagementMessageDataReader = new SimpleAisDataLinkManagementMessageDataReader( _loggerFactory, sqlDataReader );
                return simpleAisDataLinkManagementMessageDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<AisDataLinkManagementMessageObject> GetAisDataLinkManagementMessageCollectionByAisDevice( Guid aisDevice )
        {
            throw new NotImplementedException( );
        }
        public SimpleAisDataLinkManagementMessageDataReader GetAisDataLinkManagementMessageByAisDeviceAndReceivedTimestampDataReader( Guid aisDevice, DateTime receivedTimestamp )
        {
            const string sql = SimpleAisDataLinkManagementMessageDataReader.BaseQuery + " WHERE " +
                    SimpleAisDataLinkManagementMessageDataReader.ViewAliasName + ".[AisDevice] = @aisDevice AND " +
                    SimpleAisDataLinkManagementMessageDataReader.ViewAliasName + ".[ReceivedTimestamp] = @receivedTimestamp " +
                    " ORDER BY " + SimpleAisDataLinkManagementMessageDataReader.ViewAliasName + ".[AisDevice]," +SimpleAisDataLinkManagementMessageDataReader.ViewAliasName + ".[ReceivedTimestamp]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var aisDeviceParameter = sqlCommandParameters.AddReference( "@aisDevice", aisDevice );
                var receivedTimestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@receivedTimestamp", receivedTimestamp );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleAisDataLinkManagementMessageDataReader = new SimpleAisDataLinkManagementMessageDataReader( _loggerFactory, sqlDataReader );
                return simpleAisDataLinkManagementMessageDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public AisDataLinkManagementMessageObject? GetAisDataLinkManagementMessageByAisDeviceAndReceivedTimestamp( Guid aisDevice, DateTime receivedTimestamp )
        {
            throw new NotImplementedException( );
        }
        public AisDataLinkManagementMessageObject? GetAisDataLinkManagementMessageByAisDeviceAtReceivedTimestamp( Guid aisDevice, DateTime receivedTimestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<AisDataLinkManagementMessageObject> GetAisDataLinkManagementMessageByAisDeviceFromReceivedTimestamp( Guid aisDevice, DateTime receivedTimestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<AisDataLinkManagementMessageObject> GetAisDataLinkManagementMessageByAisDeviceUntilReceivedTimestamp( Guid aisDevice, DateTime receivedTimestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<AisDataLinkManagementMessageObject> GetAisDataLinkManagementMessageByAisDeviceOverReceivedTimestamp( Guid aisDevice, DateTime fromReceivedTimestamp, DateTime untilReceivedTimestamp )
        {
            throw new NotImplementedException( );
        }
        public SimpleAisDataLinkManagementMessageDataReader GetAisDataLinkManagementMessageCollectionByReceivedTimestampDataReader( DateTime receivedTimestamp )
        {
            const string sql = SimpleAisDataLinkManagementMessageDataReader.BaseQuery + " WHERE " +
                    SimpleAisDataLinkManagementMessageDataReader.ViewAliasName + ".[ReceivedTimestamp] = @receivedTimestamp " +
                    " ORDER BY " + SimpleAisDataLinkManagementMessageDataReader.ViewAliasName + ".[ReceivedTimestamp]," +SimpleAisDataLinkManagementMessageDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var receivedTimestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@receivedTimestamp", receivedTimestamp );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleAisDataLinkManagementMessageDataReader = new SimpleAisDataLinkManagementMessageDataReader( _loggerFactory, sqlDataReader );
                return simpleAisDataLinkManagementMessageDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<AisDataLinkManagementMessageObject> GetAisDataLinkManagementMessageCollectionByReceivedTimestamp( DateTime receivedTimestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<AisDataLinkManagementMessageObject> GetAisDataLinkManagementMessageCollectionAtReceivedTimestamp( DateTime receivedTimestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<AisDataLinkManagementMessageObject> GetAisDataLinkManagementMessageCollectionFromReceivedTimestamp( DateTime receivedTimestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<AisDataLinkManagementMessageObject> GetAisDataLinkManagementMessageCollectionUntilReceivedTimestamp( DateTime receivedTimestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<AisDataLinkManagementMessageObject> GetAisDataLinkManagementMessageCollectionOverReceivedTimestamp( DateTime fromReceivedTimestamp, DateTime untilReceivedTimestamp )
        {
            throw new NotImplementedException( );
        }
        public SimpleAisDataLinkManagementMessageDataReader GetAisDataLinkManagementMessageCollectionByMmsiDataReader( Guid mmsi )
        {
            const string sql = SimpleAisDataLinkManagementMessageDataReader.BaseQuery + " WHERE " +
                    SimpleAisDataLinkManagementMessageDataReader.ViewAliasName + ".[Mmsi] = @mmsi " +
                    " ORDER BY " + SimpleAisDataLinkManagementMessageDataReader.ViewAliasName + ".[Mmsi]," +SimpleAisDataLinkManagementMessageDataReader.ViewAliasName + ".[MessageSequenceNumber]," +SimpleAisDataLinkManagementMessageDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var mmsiParameter = sqlCommandParameters.AddReference( "@mmsi", mmsi );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleAisDataLinkManagementMessageDataReader = new SimpleAisDataLinkManagementMessageDataReader( _loggerFactory, sqlDataReader );
                return simpleAisDataLinkManagementMessageDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<AisDataLinkManagementMessageObject> GetAisDataLinkManagementMessageCollectionByMmsi( Guid mmsi )
        {
            throw new NotImplementedException( );
        }
        public SimpleAisDataLinkManagementMessageDataReader GetAisDataLinkManagementMessageCollectionByMmsiAndMessageSequenceNumberDataReader( Guid mmsi, long messageSequenceNumber )
        {
            const string sql = SimpleAisDataLinkManagementMessageDataReader.BaseQuery + " WHERE " +
                    SimpleAisDataLinkManagementMessageDataReader.ViewAliasName + ".[Mmsi] = @mmsi AND " +
                    SimpleAisDataLinkManagementMessageDataReader.ViewAliasName + ".[MessageSequenceNumber] = @messageSequenceNumber " +
                    " ORDER BY " + SimpleAisDataLinkManagementMessageDataReader.ViewAliasName + ".[Mmsi]," +SimpleAisDataLinkManagementMessageDataReader.ViewAliasName + ".[MessageSequenceNumber]," +SimpleAisDataLinkManagementMessageDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var mmsiParameter = sqlCommandParameters.AddReference( "@mmsi", mmsi );
                var messageSequenceNumberParameter = sqlCommandParameters.AddInt64( "@messageSequenceNumber", messageSequenceNumber );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleAisDataLinkManagementMessageDataReader = new SimpleAisDataLinkManagementMessageDataReader( _loggerFactory, sqlDataReader );
                return simpleAisDataLinkManagementMessageDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<AisDataLinkManagementMessageObject> GetAisDataLinkManagementMessageCollectionByMmsiAndMessageSequenceNumber( Guid mmsi, long messageSequenceNumber )
        {
            throw new NotImplementedException( );
        }
        public IList<AisDataLinkManagementMessageObject> GetAisDataLinkManagementMessageCollectionByMmsiFromMessageSequenceNumber( Guid mmsi, long messageSequenceNumber )
        {
            throw new NotImplementedException( );
        }
        public IList<AisDataLinkManagementMessageObject> GetAisDataLinkManagementMessageCollectionByMmsiUntilMessageSequenceNumber( Guid mmsi, long messageSequenceNumber )
        {
            throw new NotImplementedException( );
        }
        public IList<AisDataLinkManagementMessageObject> GetAisDataLinkManagementMessageCollectionByMmsiOverMessageSequenceNumber( Guid mmsi, long fromMessageSequenceNumber, long untilMessageSequenceNumber )
        {
            throw new NotImplementedException( );
        }
        // ---------------------------------------------------------------------
        // AisExtendedClassBCsPositionReportMessage queries
        // ---------------------------------------------------------------------
        public SimpleAisExtendedClassBCsPositionReportMessageDataReader GetAisExtendedClassBCsPositionReportMessageByIdDataReader( Guid id )
        {
            const string sql = SimpleAisExtendedClassBCsPositionReportMessageDataReader.BaseQuery + "WHERE " + SimpleAisExtendedClassBCsPositionReportMessageDataReader.ViewAliasName + ".[Id] = @id"; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                sqlCommandParameters.AddGuid( "@id", id );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleAisExtendedClassBCsPositionReportMessageDataReader = new SimpleAisExtendedClassBCsPositionReportMessageDataReader( _loggerFactory, sqlDataReader );
                return simpleAisExtendedClassBCsPositionReportMessageDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public AisExtendedClassBCsPositionReportMessageObject? GetAisExtendedClassBCsPositionReportMessageById( Guid id )
        {
            var simpleAisExtendedClassBCsPositionReportMessageDataReader = GetAisExtendedClassBCsPositionReportMessageByIdDataReader( id );
            using ( simpleAisExtendedClassBCsPositionReportMessageDataReader )
            {
                if ( simpleAisExtendedClassBCsPositionReportMessageDataReader.Read( ) )
                {
                    var result = simpleAisExtendedClassBCsPositionReportMessageDataReader.GetDataObject( );
                    return result;
                }
            }
            return null;
        }

        public void GetAisExtendedClassBCsPositionReportMessageById( Guid id, Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleAisExtendedClassBCsPositionReportMessageDataReader = GetAisExtendedClassBCsPositionReportMessageByIdDataReader( id );
                using ( simpleAisExtendedClassBCsPositionReportMessageDataReader )
                {
                    if ( simpleAisExtendedClassBCsPositionReportMessageDataReader.Read( ) )
                    {
                        destinationWriter.Write( true );
                        simpleAisExtendedClassBCsPositionReportMessageDataReader.WriteTo( destinationWriter );
                    }
                    else
                    {
                        destinationWriter.Write( false );
                    }
                }
            }
        }

        public SimpleAisExtendedClassBCsPositionReportMessageDataReader GetAisExtendedClassBCsPositionReportMessageCollectionDataReader( )
        {
            const string sql = SimpleAisExtendedClassBCsPositionReportMessageDataReader.BaseQuery; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleAisExtendedClassBCsPositionReportMessageDataReader = new SimpleAisExtendedClassBCsPositionReportMessageDataReader( _loggerFactory, sqlDataReader );
                return simpleAisExtendedClassBCsPositionReportMessageDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public IList<AisExtendedClassBCsPositionReportMessageObject> GetAisExtendedClassBCsPositionReportMessageCollection( )
        {
            var result = new List<AisExtendedClassBCsPositionReportMessageObject>( );
            var simpleAisExtendedClassBCsPositionReportMessageDataReader = GetAisExtendedClassBCsPositionReportMessageCollectionDataReader( );
            using ( simpleAisExtendedClassBCsPositionReportMessageDataReader )
            {
                while ( simpleAisExtendedClassBCsPositionReportMessageDataReader.Read( ) )
                {
                    var data = simpleAisExtendedClassBCsPositionReportMessageDataReader.GetDataObject( );
                    result.Add( data );
                }
            }
            return result;
        }

        public void GetAisExtendedClassBCsPositionReportMessageCollection( Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleAisExtendedClassBCsPositionReportMessageDataReader = GetAisExtendedClassBCsPositionReportMessageCollectionDataReader( );
                using ( simpleAisExtendedClassBCsPositionReportMessageDataReader )
                {
                    simpleAisExtendedClassBCsPositionReportMessageDataReader.WriteResultSetTo( destinationWriter );
                }
            }
        }

        public SimpleAisExtendedClassBCsPositionReportMessageDataReader GetAisExtendedClassBCsPositionReportMessageCollectionByAisDeviceDataReader( Guid aisDevice )
        {
            const string sql = SimpleAisExtendedClassBCsPositionReportMessageDataReader.BaseQuery + " WHERE " +
                    SimpleAisExtendedClassBCsPositionReportMessageDataReader.ViewAliasName + ".[AisDevice] = @aisDevice " +
                    " ORDER BY " + SimpleAisExtendedClassBCsPositionReportMessageDataReader.ViewAliasName + ".[AisDevice]," +SimpleAisExtendedClassBCsPositionReportMessageDataReader.ViewAliasName + ".[ReceivedTimestamp]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var aisDeviceParameter = sqlCommandParameters.AddReference( "@aisDevice", aisDevice );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleAisExtendedClassBCsPositionReportMessageDataReader = new SimpleAisExtendedClassBCsPositionReportMessageDataReader( _loggerFactory, sqlDataReader );
                return simpleAisExtendedClassBCsPositionReportMessageDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<AisExtendedClassBCsPositionReportMessageObject> GetAisExtendedClassBCsPositionReportMessageCollectionByAisDevice( Guid aisDevice )
        {
            throw new NotImplementedException( );
        }
        public SimpleAisExtendedClassBCsPositionReportMessageDataReader GetAisExtendedClassBCsPositionReportMessageByAisDeviceAndReceivedTimestampDataReader( Guid aisDevice, DateTime receivedTimestamp )
        {
            const string sql = SimpleAisExtendedClassBCsPositionReportMessageDataReader.BaseQuery + " WHERE " +
                    SimpleAisExtendedClassBCsPositionReportMessageDataReader.ViewAliasName + ".[AisDevice] = @aisDevice AND " +
                    SimpleAisExtendedClassBCsPositionReportMessageDataReader.ViewAliasName + ".[ReceivedTimestamp] = @receivedTimestamp " +
                    " ORDER BY " + SimpleAisExtendedClassBCsPositionReportMessageDataReader.ViewAliasName + ".[AisDevice]," +SimpleAisExtendedClassBCsPositionReportMessageDataReader.ViewAliasName + ".[ReceivedTimestamp]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var aisDeviceParameter = sqlCommandParameters.AddReference( "@aisDevice", aisDevice );
                var receivedTimestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@receivedTimestamp", receivedTimestamp );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleAisExtendedClassBCsPositionReportMessageDataReader = new SimpleAisExtendedClassBCsPositionReportMessageDataReader( _loggerFactory, sqlDataReader );
                return simpleAisExtendedClassBCsPositionReportMessageDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public AisExtendedClassBCsPositionReportMessageObject? GetAisExtendedClassBCsPositionReportMessageByAisDeviceAndReceivedTimestamp( Guid aisDevice, DateTime receivedTimestamp )
        {
            throw new NotImplementedException( );
        }
        public AisExtendedClassBCsPositionReportMessageObject? GetAisExtendedClassBCsPositionReportMessageByAisDeviceAtReceivedTimestamp( Guid aisDevice, DateTime receivedTimestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<AisExtendedClassBCsPositionReportMessageObject> GetAisExtendedClassBCsPositionReportMessageByAisDeviceFromReceivedTimestamp( Guid aisDevice, DateTime receivedTimestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<AisExtendedClassBCsPositionReportMessageObject> GetAisExtendedClassBCsPositionReportMessageByAisDeviceUntilReceivedTimestamp( Guid aisDevice, DateTime receivedTimestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<AisExtendedClassBCsPositionReportMessageObject> GetAisExtendedClassBCsPositionReportMessageByAisDeviceOverReceivedTimestamp( Guid aisDevice, DateTime fromReceivedTimestamp, DateTime untilReceivedTimestamp )
        {
            throw new NotImplementedException( );
        }
        public SimpleAisExtendedClassBCsPositionReportMessageDataReader GetAisExtendedClassBCsPositionReportMessageCollectionByReceivedTimestampDataReader( DateTime receivedTimestamp )
        {
            const string sql = SimpleAisExtendedClassBCsPositionReportMessageDataReader.BaseQuery + " WHERE " +
                    SimpleAisExtendedClassBCsPositionReportMessageDataReader.ViewAliasName + ".[ReceivedTimestamp] = @receivedTimestamp " +
                    " ORDER BY " + SimpleAisExtendedClassBCsPositionReportMessageDataReader.ViewAliasName + ".[ReceivedTimestamp]," +SimpleAisExtendedClassBCsPositionReportMessageDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var receivedTimestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@receivedTimestamp", receivedTimestamp );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleAisExtendedClassBCsPositionReportMessageDataReader = new SimpleAisExtendedClassBCsPositionReportMessageDataReader( _loggerFactory, sqlDataReader );
                return simpleAisExtendedClassBCsPositionReportMessageDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<AisExtendedClassBCsPositionReportMessageObject> GetAisExtendedClassBCsPositionReportMessageCollectionByReceivedTimestamp( DateTime receivedTimestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<AisExtendedClassBCsPositionReportMessageObject> GetAisExtendedClassBCsPositionReportMessageCollectionAtReceivedTimestamp( DateTime receivedTimestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<AisExtendedClassBCsPositionReportMessageObject> GetAisExtendedClassBCsPositionReportMessageCollectionFromReceivedTimestamp( DateTime receivedTimestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<AisExtendedClassBCsPositionReportMessageObject> GetAisExtendedClassBCsPositionReportMessageCollectionUntilReceivedTimestamp( DateTime receivedTimestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<AisExtendedClassBCsPositionReportMessageObject> GetAisExtendedClassBCsPositionReportMessageCollectionOverReceivedTimestamp( DateTime fromReceivedTimestamp, DateTime untilReceivedTimestamp )
        {
            throw new NotImplementedException( );
        }
        public SimpleAisExtendedClassBCsPositionReportMessageDataReader GetAisExtendedClassBCsPositionReportMessageCollectionByMmsiDataReader( Guid mmsi )
        {
            const string sql = SimpleAisExtendedClassBCsPositionReportMessageDataReader.BaseQuery + " WHERE " +
                    SimpleAisExtendedClassBCsPositionReportMessageDataReader.ViewAliasName + ".[Mmsi] = @mmsi " +
                    " ORDER BY " + SimpleAisExtendedClassBCsPositionReportMessageDataReader.ViewAliasName + ".[Mmsi]," +SimpleAisExtendedClassBCsPositionReportMessageDataReader.ViewAliasName + ".[MessageSequenceNumber]," +SimpleAisExtendedClassBCsPositionReportMessageDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var mmsiParameter = sqlCommandParameters.AddReference( "@mmsi", mmsi );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleAisExtendedClassBCsPositionReportMessageDataReader = new SimpleAisExtendedClassBCsPositionReportMessageDataReader( _loggerFactory, sqlDataReader );
                return simpleAisExtendedClassBCsPositionReportMessageDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<AisExtendedClassBCsPositionReportMessageObject> GetAisExtendedClassBCsPositionReportMessageCollectionByMmsi( Guid mmsi )
        {
            throw new NotImplementedException( );
        }
        public SimpleAisExtendedClassBCsPositionReportMessageDataReader GetAisExtendedClassBCsPositionReportMessageCollectionByMmsiAndMessageSequenceNumberDataReader( Guid mmsi, long messageSequenceNumber )
        {
            const string sql = SimpleAisExtendedClassBCsPositionReportMessageDataReader.BaseQuery + " WHERE " +
                    SimpleAisExtendedClassBCsPositionReportMessageDataReader.ViewAliasName + ".[Mmsi] = @mmsi AND " +
                    SimpleAisExtendedClassBCsPositionReportMessageDataReader.ViewAliasName + ".[MessageSequenceNumber] = @messageSequenceNumber " +
                    " ORDER BY " + SimpleAisExtendedClassBCsPositionReportMessageDataReader.ViewAliasName + ".[Mmsi]," +SimpleAisExtendedClassBCsPositionReportMessageDataReader.ViewAliasName + ".[MessageSequenceNumber]," +SimpleAisExtendedClassBCsPositionReportMessageDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var mmsiParameter = sqlCommandParameters.AddReference( "@mmsi", mmsi );
                var messageSequenceNumberParameter = sqlCommandParameters.AddInt64( "@messageSequenceNumber", messageSequenceNumber );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleAisExtendedClassBCsPositionReportMessageDataReader = new SimpleAisExtendedClassBCsPositionReportMessageDataReader( _loggerFactory, sqlDataReader );
                return simpleAisExtendedClassBCsPositionReportMessageDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<AisExtendedClassBCsPositionReportMessageObject> GetAisExtendedClassBCsPositionReportMessageCollectionByMmsiAndMessageSequenceNumber( Guid mmsi, long messageSequenceNumber )
        {
            throw new NotImplementedException( );
        }
        public IList<AisExtendedClassBCsPositionReportMessageObject> GetAisExtendedClassBCsPositionReportMessageCollectionByMmsiFromMessageSequenceNumber( Guid mmsi, long messageSequenceNumber )
        {
            throw new NotImplementedException( );
        }
        public IList<AisExtendedClassBCsPositionReportMessageObject> GetAisExtendedClassBCsPositionReportMessageCollectionByMmsiUntilMessageSequenceNumber( Guid mmsi, long messageSequenceNumber )
        {
            throw new NotImplementedException( );
        }
        public IList<AisExtendedClassBCsPositionReportMessageObject> GetAisExtendedClassBCsPositionReportMessageCollectionByMmsiOverMessageSequenceNumber( Guid mmsi, long fromMessageSequenceNumber, long untilMessageSequenceNumber )
        {
            throw new NotImplementedException( );
        }
        public SimpleAisExtendedClassBCsPositionReportMessageDataReader GetAisExtendedClassBCsPositionReportMessageCollectionByNameDataReader( Guid name )
        {
            const string sql = SimpleAisExtendedClassBCsPositionReportMessageDataReader.BaseQuery + " WHERE " +
                    SimpleAisExtendedClassBCsPositionReportMessageDataReader.ViewAliasName + ".[Name] = @name " +
                    " ORDER BY " + SimpleAisExtendedClassBCsPositionReportMessageDataReader.ViewAliasName + ".[Name]," +SimpleAisExtendedClassBCsPositionReportMessageDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var nameParameter = sqlCommandParameters.AddReference( "@name", name );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleAisExtendedClassBCsPositionReportMessageDataReader = new SimpleAisExtendedClassBCsPositionReportMessageDataReader( _loggerFactory, sqlDataReader );
                return simpleAisExtendedClassBCsPositionReportMessageDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<AisExtendedClassBCsPositionReportMessageObject> GetAisExtendedClassBCsPositionReportMessageCollectionByName( Guid name )
        {
            throw new NotImplementedException( );
        }
        // ---------------------------------------------------------------------
        // AisInterrogationMessage queries
        // ---------------------------------------------------------------------
        public SimpleAisInterrogationMessageDataReader GetAisInterrogationMessageByIdDataReader( Guid id )
        {
            const string sql = SimpleAisInterrogationMessageDataReader.BaseQuery + "WHERE " + SimpleAisInterrogationMessageDataReader.ViewAliasName + ".[Id] = @id"; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                sqlCommandParameters.AddGuid( "@id", id );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleAisInterrogationMessageDataReader = new SimpleAisInterrogationMessageDataReader( _loggerFactory, sqlDataReader );
                return simpleAisInterrogationMessageDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public AisInterrogationMessageObject? GetAisInterrogationMessageById( Guid id )
        {
            var simpleAisInterrogationMessageDataReader = GetAisInterrogationMessageByIdDataReader( id );
            using ( simpleAisInterrogationMessageDataReader )
            {
                if ( simpleAisInterrogationMessageDataReader.Read( ) )
                {
                    var result = simpleAisInterrogationMessageDataReader.GetDataObject( );
                    return result;
                }
            }
            return null;
        }

        public void GetAisInterrogationMessageById( Guid id, Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleAisInterrogationMessageDataReader = GetAisInterrogationMessageByIdDataReader( id );
                using ( simpleAisInterrogationMessageDataReader )
                {
                    if ( simpleAisInterrogationMessageDataReader.Read( ) )
                    {
                        destinationWriter.Write( true );
                        simpleAisInterrogationMessageDataReader.WriteTo( destinationWriter );
                    }
                    else
                    {
                        destinationWriter.Write( false );
                    }
                }
            }
        }

        public SimpleAisInterrogationMessageDataReader GetAisInterrogationMessageCollectionDataReader( )
        {
            const string sql = SimpleAisInterrogationMessageDataReader.BaseQuery; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleAisInterrogationMessageDataReader = new SimpleAisInterrogationMessageDataReader( _loggerFactory, sqlDataReader );
                return simpleAisInterrogationMessageDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public IList<AisInterrogationMessageObject> GetAisInterrogationMessageCollection( )
        {
            var result = new List<AisInterrogationMessageObject>( );
            var simpleAisInterrogationMessageDataReader = GetAisInterrogationMessageCollectionDataReader( );
            using ( simpleAisInterrogationMessageDataReader )
            {
                while ( simpleAisInterrogationMessageDataReader.Read( ) )
                {
                    var data = simpleAisInterrogationMessageDataReader.GetDataObject( );
                    result.Add( data );
                }
            }
            return result;
        }

        public void GetAisInterrogationMessageCollection( Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleAisInterrogationMessageDataReader = GetAisInterrogationMessageCollectionDataReader( );
                using ( simpleAisInterrogationMessageDataReader )
                {
                    simpleAisInterrogationMessageDataReader.WriteResultSetTo( destinationWriter );
                }
            }
        }

        public SimpleAisInterrogationMessageDataReader GetAisInterrogationMessageCollectionByAisDeviceDataReader( Guid aisDevice )
        {
            const string sql = SimpleAisInterrogationMessageDataReader.BaseQuery + " WHERE " +
                    SimpleAisInterrogationMessageDataReader.ViewAliasName + ".[AisDevice] = @aisDevice " +
                    " ORDER BY " + SimpleAisInterrogationMessageDataReader.ViewAliasName + ".[AisDevice]," +SimpleAisInterrogationMessageDataReader.ViewAliasName + ".[ReceivedTimestamp]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var aisDeviceParameter = sqlCommandParameters.AddReference( "@aisDevice", aisDevice );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleAisInterrogationMessageDataReader = new SimpleAisInterrogationMessageDataReader( _loggerFactory, sqlDataReader );
                return simpleAisInterrogationMessageDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<AisInterrogationMessageObject> GetAisInterrogationMessageCollectionByAisDevice( Guid aisDevice )
        {
            throw new NotImplementedException( );
        }
        public SimpleAisInterrogationMessageDataReader GetAisInterrogationMessageByAisDeviceAndReceivedTimestampDataReader( Guid aisDevice, DateTime receivedTimestamp )
        {
            const string sql = SimpleAisInterrogationMessageDataReader.BaseQuery + " WHERE " +
                    SimpleAisInterrogationMessageDataReader.ViewAliasName + ".[AisDevice] = @aisDevice AND " +
                    SimpleAisInterrogationMessageDataReader.ViewAliasName + ".[ReceivedTimestamp] = @receivedTimestamp " +
                    " ORDER BY " + SimpleAisInterrogationMessageDataReader.ViewAliasName + ".[AisDevice]," +SimpleAisInterrogationMessageDataReader.ViewAliasName + ".[ReceivedTimestamp]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var aisDeviceParameter = sqlCommandParameters.AddReference( "@aisDevice", aisDevice );
                var receivedTimestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@receivedTimestamp", receivedTimestamp );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleAisInterrogationMessageDataReader = new SimpleAisInterrogationMessageDataReader( _loggerFactory, sqlDataReader );
                return simpleAisInterrogationMessageDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public AisInterrogationMessageObject? GetAisInterrogationMessageByAisDeviceAndReceivedTimestamp( Guid aisDevice, DateTime receivedTimestamp )
        {
            throw new NotImplementedException( );
        }
        public AisInterrogationMessageObject? GetAisInterrogationMessageByAisDeviceAtReceivedTimestamp( Guid aisDevice, DateTime receivedTimestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<AisInterrogationMessageObject> GetAisInterrogationMessageByAisDeviceFromReceivedTimestamp( Guid aisDevice, DateTime receivedTimestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<AisInterrogationMessageObject> GetAisInterrogationMessageByAisDeviceUntilReceivedTimestamp( Guid aisDevice, DateTime receivedTimestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<AisInterrogationMessageObject> GetAisInterrogationMessageByAisDeviceOverReceivedTimestamp( Guid aisDevice, DateTime fromReceivedTimestamp, DateTime untilReceivedTimestamp )
        {
            throw new NotImplementedException( );
        }
        public SimpleAisInterrogationMessageDataReader GetAisInterrogationMessageCollectionByReceivedTimestampDataReader( DateTime receivedTimestamp )
        {
            const string sql = SimpleAisInterrogationMessageDataReader.BaseQuery + " WHERE " +
                    SimpleAisInterrogationMessageDataReader.ViewAliasName + ".[ReceivedTimestamp] = @receivedTimestamp " +
                    " ORDER BY " + SimpleAisInterrogationMessageDataReader.ViewAliasName + ".[ReceivedTimestamp]," +SimpleAisInterrogationMessageDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var receivedTimestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@receivedTimestamp", receivedTimestamp );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleAisInterrogationMessageDataReader = new SimpleAisInterrogationMessageDataReader( _loggerFactory, sqlDataReader );
                return simpleAisInterrogationMessageDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<AisInterrogationMessageObject> GetAisInterrogationMessageCollectionByReceivedTimestamp( DateTime receivedTimestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<AisInterrogationMessageObject> GetAisInterrogationMessageCollectionAtReceivedTimestamp( DateTime receivedTimestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<AisInterrogationMessageObject> GetAisInterrogationMessageCollectionFromReceivedTimestamp( DateTime receivedTimestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<AisInterrogationMessageObject> GetAisInterrogationMessageCollectionUntilReceivedTimestamp( DateTime receivedTimestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<AisInterrogationMessageObject> GetAisInterrogationMessageCollectionOverReceivedTimestamp( DateTime fromReceivedTimestamp, DateTime untilReceivedTimestamp )
        {
            throw new NotImplementedException( );
        }
        public SimpleAisInterrogationMessageDataReader GetAisInterrogationMessageCollectionByMmsiDataReader( Guid mmsi )
        {
            const string sql = SimpleAisInterrogationMessageDataReader.BaseQuery + " WHERE " +
                    SimpleAisInterrogationMessageDataReader.ViewAliasName + ".[Mmsi] = @mmsi " +
                    " ORDER BY " + SimpleAisInterrogationMessageDataReader.ViewAliasName + ".[Mmsi]," +SimpleAisInterrogationMessageDataReader.ViewAliasName + ".[MessageSequenceNumber]," +SimpleAisInterrogationMessageDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var mmsiParameter = sqlCommandParameters.AddReference( "@mmsi", mmsi );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleAisInterrogationMessageDataReader = new SimpleAisInterrogationMessageDataReader( _loggerFactory, sqlDataReader );
                return simpleAisInterrogationMessageDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<AisInterrogationMessageObject> GetAisInterrogationMessageCollectionByMmsi( Guid mmsi )
        {
            throw new NotImplementedException( );
        }
        public SimpleAisInterrogationMessageDataReader GetAisInterrogationMessageCollectionByMmsiAndMessageSequenceNumberDataReader( Guid mmsi, long messageSequenceNumber )
        {
            const string sql = SimpleAisInterrogationMessageDataReader.BaseQuery + " WHERE " +
                    SimpleAisInterrogationMessageDataReader.ViewAliasName + ".[Mmsi] = @mmsi AND " +
                    SimpleAisInterrogationMessageDataReader.ViewAliasName + ".[MessageSequenceNumber] = @messageSequenceNumber " +
                    " ORDER BY " + SimpleAisInterrogationMessageDataReader.ViewAliasName + ".[Mmsi]," +SimpleAisInterrogationMessageDataReader.ViewAliasName + ".[MessageSequenceNumber]," +SimpleAisInterrogationMessageDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var mmsiParameter = sqlCommandParameters.AddReference( "@mmsi", mmsi );
                var messageSequenceNumberParameter = sqlCommandParameters.AddInt64( "@messageSequenceNumber", messageSequenceNumber );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleAisInterrogationMessageDataReader = new SimpleAisInterrogationMessageDataReader( _loggerFactory, sqlDataReader );
                return simpleAisInterrogationMessageDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<AisInterrogationMessageObject> GetAisInterrogationMessageCollectionByMmsiAndMessageSequenceNumber( Guid mmsi, long messageSequenceNumber )
        {
            throw new NotImplementedException( );
        }
        public IList<AisInterrogationMessageObject> GetAisInterrogationMessageCollectionByMmsiFromMessageSequenceNumber( Guid mmsi, long messageSequenceNumber )
        {
            throw new NotImplementedException( );
        }
        public IList<AisInterrogationMessageObject> GetAisInterrogationMessageCollectionByMmsiUntilMessageSequenceNumber( Guid mmsi, long messageSequenceNumber )
        {
            throw new NotImplementedException( );
        }
        public IList<AisInterrogationMessageObject> GetAisInterrogationMessageCollectionByMmsiOverMessageSequenceNumber( Guid mmsi, long fromMessageSequenceNumber, long untilMessageSequenceNumber )
        {
            throw new NotImplementedException( );
        }
        // ---------------------------------------------------------------------
        // AisPositionReportClassAMessageBase queries
        // ---------------------------------------------------------------------
        public ComplexAisPositionReportClassAMessageBaseDataReader GetAisPositionReportClassAMessageBaseByIdDataReader( Guid id )
        {
            const string sql = ComplexAisPositionReportClassAMessageBaseDataReader.BaseQuery + "WHERE " + ComplexAisPositionReportClassAMessageBaseDataReader.ViewAliasName + ".[Id] = @id"; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                sqlCommandParameters.AddGuid( "@id", id );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var complexAisPositionReportClassAMessageBaseDataReader = new ComplexAisPositionReportClassAMessageBaseDataReader( _loggerFactory, sqlDataReader );
                return complexAisPositionReportClassAMessageBaseDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public AisPositionReportClassAMessageBaseObject? GetAisPositionReportClassAMessageBaseById( Guid id )
        {
            var complexAisPositionReportClassAMessageBaseDataReader = GetAisPositionReportClassAMessageBaseByIdDataReader( id );
            using ( complexAisPositionReportClassAMessageBaseDataReader )
            {
                if ( complexAisPositionReportClassAMessageBaseDataReader.Read( ) )
                {
                    var result = complexAisPositionReportClassAMessageBaseDataReader.GetDataObject( );
                    return result;
                }
            }
            return null;
        }

        public void GetAisPositionReportClassAMessageBaseById( Guid id, Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var complexAisPositionReportClassAMessageBaseDataReader = GetAisPositionReportClassAMessageBaseByIdDataReader( id );
                using ( complexAisPositionReportClassAMessageBaseDataReader )
                {
                    if ( complexAisPositionReportClassAMessageBaseDataReader.Read( ) )
                    {
                        destinationWriter.Write( true );
                        complexAisPositionReportClassAMessageBaseDataReader.WriteTo( destinationWriter );
                    }
                    else
                    {
                        destinationWriter.Write( false );
                    }
                }
            }
        }

        public ComplexAisPositionReportClassAMessageBaseDataReader GetAisPositionReportClassAMessageBaseCollectionDataReader( )
        {
            const string sql = ComplexAisPositionReportClassAMessageBaseDataReader.BaseQuery; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var complexAisPositionReportClassAMessageBaseDataReader = new ComplexAisPositionReportClassAMessageBaseDataReader( _loggerFactory, sqlDataReader );
                return complexAisPositionReportClassAMessageBaseDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public IList<AisPositionReportClassAMessageBaseObject> GetAisPositionReportClassAMessageBaseCollection( )
        {
            var result = new List<AisPositionReportClassAMessageBaseObject>( );
            var complexAisPositionReportClassAMessageBaseDataReader = GetAisPositionReportClassAMessageBaseCollectionDataReader( );
            using ( complexAisPositionReportClassAMessageBaseDataReader )
            {
                while ( complexAisPositionReportClassAMessageBaseDataReader.Read( ) )
                {
                    var data = complexAisPositionReportClassAMessageBaseDataReader.GetDataObject( );
                    result.Add( data );
                }
            }
            return result;
        }

        public void GetAisPositionReportClassAMessageBaseCollection( Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var complexAisPositionReportClassAMessageBaseDataReader = GetAisPositionReportClassAMessageBaseCollectionDataReader( );
                using ( complexAisPositionReportClassAMessageBaseDataReader )
                {
                    complexAisPositionReportClassAMessageBaseDataReader.WriteResultSetTo( destinationWriter );
                }
            }
        }

        public ComplexAisPositionReportClassAMessageBaseDataReader GetAisPositionReportClassAMessageBaseCollectionByAisDeviceDataReader( Guid aisDevice )
        {
            const string sql = ComplexAisPositionReportClassAMessageBaseDataReader.BaseQuery + " WHERE " +
                    ComplexAisPositionReportClassAMessageBaseDataReader.ViewAliasName + ".[AisDevice] = @aisDevice " +
                    " ORDER BY " + ComplexAisPositionReportClassAMessageBaseDataReader.ViewAliasName + ".[AisDevice]," +ComplexAisPositionReportClassAMessageBaseDataReader.ViewAliasName + ".[ReceivedTimestamp]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var aisDeviceParameter = sqlCommandParameters.AddReference( "@aisDevice", aisDevice );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var complexAisPositionReportClassAMessageBaseDataReader = new ComplexAisPositionReportClassAMessageBaseDataReader( _loggerFactory, sqlDataReader );
                return complexAisPositionReportClassAMessageBaseDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<AisPositionReportClassAMessageBaseObject> GetAisPositionReportClassAMessageBaseCollectionByAisDevice( Guid aisDevice )
        {
            throw new NotImplementedException( );
        }
        public ComplexAisPositionReportClassAMessageBaseDataReader GetAisPositionReportClassAMessageBaseByAisDeviceAndReceivedTimestampDataReader( Guid aisDevice, DateTime receivedTimestamp )
        {
            const string sql = ComplexAisPositionReportClassAMessageBaseDataReader.BaseQuery + " WHERE " +
                    ComplexAisPositionReportClassAMessageBaseDataReader.ViewAliasName + ".[AisDevice] = @aisDevice AND " +
                    ComplexAisPositionReportClassAMessageBaseDataReader.ViewAliasName + ".[ReceivedTimestamp] = @receivedTimestamp " +
                    " ORDER BY " + ComplexAisPositionReportClassAMessageBaseDataReader.ViewAliasName + ".[AisDevice]," +ComplexAisPositionReportClassAMessageBaseDataReader.ViewAliasName + ".[ReceivedTimestamp]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var aisDeviceParameter = sqlCommandParameters.AddReference( "@aisDevice", aisDevice );
                var receivedTimestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@receivedTimestamp", receivedTimestamp );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var complexAisPositionReportClassAMessageBaseDataReader = new ComplexAisPositionReportClassAMessageBaseDataReader( _loggerFactory, sqlDataReader );
                return complexAisPositionReportClassAMessageBaseDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public AisPositionReportClassAMessageBaseObject? GetAisPositionReportClassAMessageBaseByAisDeviceAndReceivedTimestamp( Guid aisDevice, DateTime receivedTimestamp )
        {
            throw new NotImplementedException( );
        }
        public AisPositionReportClassAMessageBaseObject? GetAisPositionReportClassAMessageBaseByAisDeviceAtReceivedTimestamp( Guid aisDevice, DateTime receivedTimestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<AisPositionReportClassAMessageBaseObject> GetAisPositionReportClassAMessageBaseByAisDeviceFromReceivedTimestamp( Guid aisDevice, DateTime receivedTimestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<AisPositionReportClassAMessageBaseObject> GetAisPositionReportClassAMessageBaseByAisDeviceUntilReceivedTimestamp( Guid aisDevice, DateTime receivedTimestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<AisPositionReportClassAMessageBaseObject> GetAisPositionReportClassAMessageBaseByAisDeviceOverReceivedTimestamp( Guid aisDevice, DateTime fromReceivedTimestamp, DateTime untilReceivedTimestamp )
        {
            throw new NotImplementedException( );
        }
        public ComplexAisPositionReportClassAMessageBaseDataReader GetAisPositionReportClassAMessageBaseCollectionByReceivedTimestampDataReader( DateTime receivedTimestamp )
        {
            const string sql = ComplexAisPositionReportClassAMessageBaseDataReader.BaseQuery + " WHERE " +
                    ComplexAisPositionReportClassAMessageBaseDataReader.ViewAliasName + ".[ReceivedTimestamp] = @receivedTimestamp " +
                    " ORDER BY " + ComplexAisPositionReportClassAMessageBaseDataReader.ViewAliasName + ".[ReceivedTimestamp]," +ComplexAisPositionReportClassAMessageBaseDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var receivedTimestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@receivedTimestamp", receivedTimestamp );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var complexAisPositionReportClassAMessageBaseDataReader = new ComplexAisPositionReportClassAMessageBaseDataReader( _loggerFactory, sqlDataReader );
                return complexAisPositionReportClassAMessageBaseDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<AisPositionReportClassAMessageBaseObject> GetAisPositionReportClassAMessageBaseCollectionByReceivedTimestamp( DateTime receivedTimestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<AisPositionReportClassAMessageBaseObject> GetAisPositionReportClassAMessageBaseCollectionAtReceivedTimestamp( DateTime receivedTimestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<AisPositionReportClassAMessageBaseObject> GetAisPositionReportClassAMessageBaseCollectionFromReceivedTimestamp( DateTime receivedTimestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<AisPositionReportClassAMessageBaseObject> GetAisPositionReportClassAMessageBaseCollectionUntilReceivedTimestamp( DateTime receivedTimestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<AisPositionReportClassAMessageBaseObject> GetAisPositionReportClassAMessageBaseCollectionOverReceivedTimestamp( DateTime fromReceivedTimestamp, DateTime untilReceivedTimestamp )
        {
            throw new NotImplementedException( );
        }
        public ComplexAisPositionReportClassAMessageBaseDataReader GetAisPositionReportClassAMessageBaseCollectionByMmsiDataReader( Guid mmsi )
        {
            const string sql = ComplexAisPositionReportClassAMessageBaseDataReader.BaseQuery + " WHERE " +
                    ComplexAisPositionReportClassAMessageBaseDataReader.ViewAliasName + ".[Mmsi] = @mmsi " +
                    " ORDER BY " + ComplexAisPositionReportClassAMessageBaseDataReader.ViewAliasName + ".[Mmsi]," +ComplexAisPositionReportClassAMessageBaseDataReader.ViewAliasName + ".[MessageSequenceNumber]," +ComplexAisPositionReportClassAMessageBaseDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var mmsiParameter = sqlCommandParameters.AddReference( "@mmsi", mmsi );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var complexAisPositionReportClassAMessageBaseDataReader = new ComplexAisPositionReportClassAMessageBaseDataReader( _loggerFactory, sqlDataReader );
                return complexAisPositionReportClassAMessageBaseDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<AisPositionReportClassAMessageBaseObject> GetAisPositionReportClassAMessageBaseCollectionByMmsi( Guid mmsi )
        {
            throw new NotImplementedException( );
        }
        public ComplexAisPositionReportClassAMessageBaseDataReader GetAisPositionReportClassAMessageBaseCollectionByMmsiAndMessageSequenceNumberDataReader( Guid mmsi, long messageSequenceNumber )
        {
            const string sql = ComplexAisPositionReportClassAMessageBaseDataReader.BaseQuery + " WHERE " +
                    ComplexAisPositionReportClassAMessageBaseDataReader.ViewAliasName + ".[Mmsi] = @mmsi AND " +
                    ComplexAisPositionReportClassAMessageBaseDataReader.ViewAliasName + ".[MessageSequenceNumber] = @messageSequenceNumber " +
                    " ORDER BY " + ComplexAisPositionReportClassAMessageBaseDataReader.ViewAliasName + ".[Mmsi]," +ComplexAisPositionReportClassAMessageBaseDataReader.ViewAliasName + ".[MessageSequenceNumber]," +ComplexAisPositionReportClassAMessageBaseDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var mmsiParameter = sqlCommandParameters.AddReference( "@mmsi", mmsi );
                var messageSequenceNumberParameter = sqlCommandParameters.AddInt64( "@messageSequenceNumber", messageSequenceNumber );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var complexAisPositionReportClassAMessageBaseDataReader = new ComplexAisPositionReportClassAMessageBaseDataReader( _loggerFactory, sqlDataReader );
                return complexAisPositionReportClassAMessageBaseDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<AisPositionReportClassAMessageBaseObject> GetAisPositionReportClassAMessageBaseCollectionByMmsiAndMessageSequenceNumber( Guid mmsi, long messageSequenceNumber )
        {
            throw new NotImplementedException( );
        }
        public IList<AisPositionReportClassAMessageBaseObject> GetAisPositionReportClassAMessageBaseCollectionByMmsiFromMessageSequenceNumber( Guid mmsi, long messageSequenceNumber )
        {
            throw new NotImplementedException( );
        }
        public IList<AisPositionReportClassAMessageBaseObject> GetAisPositionReportClassAMessageBaseCollectionByMmsiUntilMessageSequenceNumber( Guid mmsi, long messageSequenceNumber )
        {
            throw new NotImplementedException( );
        }
        public IList<AisPositionReportClassAMessageBaseObject> GetAisPositionReportClassAMessageBaseCollectionByMmsiOverMessageSequenceNumber( Guid mmsi, long fromMessageSequenceNumber, long untilMessageSequenceNumber )
        {
            throw new NotImplementedException( );
        }
        // ---------------------------------------------------------------------
        // AisPositionReportClassAAssignedScheduleMessage queries
        // ---------------------------------------------------------------------
        public SimpleAisPositionReportClassAAssignedScheduleMessageDataReader GetAisPositionReportClassAAssignedScheduleMessageByIdDataReader( Guid id )
        {
            const string sql = SimpleAisPositionReportClassAAssignedScheduleMessageDataReader.BaseQuery + "WHERE " + SimpleAisPositionReportClassAAssignedScheduleMessageDataReader.ViewAliasName + ".[Id] = @id"; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                sqlCommandParameters.AddGuid( "@id", id );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleAisPositionReportClassAAssignedScheduleMessageDataReader = new SimpleAisPositionReportClassAAssignedScheduleMessageDataReader( _loggerFactory, sqlDataReader );
                return simpleAisPositionReportClassAAssignedScheduleMessageDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public AisPositionReportClassAAssignedScheduleMessageObject? GetAisPositionReportClassAAssignedScheduleMessageById( Guid id )
        {
            var simpleAisPositionReportClassAAssignedScheduleMessageDataReader = GetAisPositionReportClassAAssignedScheduleMessageByIdDataReader( id );
            using ( simpleAisPositionReportClassAAssignedScheduleMessageDataReader )
            {
                if ( simpleAisPositionReportClassAAssignedScheduleMessageDataReader.Read( ) )
                {
                    var result = simpleAisPositionReportClassAAssignedScheduleMessageDataReader.GetDataObject( );
                    return result;
                }
            }
            return null;
        }

        public void GetAisPositionReportClassAAssignedScheduleMessageById( Guid id, Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleAisPositionReportClassAAssignedScheduleMessageDataReader = GetAisPositionReportClassAAssignedScheduleMessageByIdDataReader( id );
                using ( simpleAisPositionReportClassAAssignedScheduleMessageDataReader )
                {
                    if ( simpleAisPositionReportClassAAssignedScheduleMessageDataReader.Read( ) )
                    {
                        destinationWriter.Write( true );
                        simpleAisPositionReportClassAAssignedScheduleMessageDataReader.WriteTo( destinationWriter );
                    }
                    else
                    {
                        destinationWriter.Write( false );
                    }
                }
            }
        }

        public SimpleAisPositionReportClassAAssignedScheduleMessageDataReader GetAisPositionReportClassAAssignedScheduleMessageCollectionDataReader( )
        {
            const string sql = SimpleAisPositionReportClassAAssignedScheduleMessageDataReader.BaseQuery; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleAisPositionReportClassAAssignedScheduleMessageDataReader = new SimpleAisPositionReportClassAAssignedScheduleMessageDataReader( _loggerFactory, sqlDataReader );
                return simpleAisPositionReportClassAAssignedScheduleMessageDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public IList<AisPositionReportClassAAssignedScheduleMessageObject> GetAisPositionReportClassAAssignedScheduleMessageCollection( )
        {
            var result = new List<AisPositionReportClassAAssignedScheduleMessageObject>( );
            var simpleAisPositionReportClassAAssignedScheduleMessageDataReader = GetAisPositionReportClassAAssignedScheduleMessageCollectionDataReader( );
            using ( simpleAisPositionReportClassAAssignedScheduleMessageDataReader )
            {
                while ( simpleAisPositionReportClassAAssignedScheduleMessageDataReader.Read( ) )
                {
                    var data = simpleAisPositionReportClassAAssignedScheduleMessageDataReader.GetDataObject( );
                    result.Add( data );
                }
            }
            return result;
        }

        public void GetAisPositionReportClassAAssignedScheduleMessageCollection( Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleAisPositionReportClassAAssignedScheduleMessageDataReader = GetAisPositionReportClassAAssignedScheduleMessageCollectionDataReader( );
                using ( simpleAisPositionReportClassAAssignedScheduleMessageDataReader )
                {
                    simpleAisPositionReportClassAAssignedScheduleMessageDataReader.WriteResultSetTo( destinationWriter );
                }
            }
        }

        public SimpleAisPositionReportClassAAssignedScheduleMessageDataReader GetAisPositionReportClassAAssignedScheduleMessageCollectionByAisDeviceDataReader( Guid aisDevice )
        {
            const string sql = SimpleAisPositionReportClassAAssignedScheduleMessageDataReader.BaseQuery + " WHERE " +
                    SimpleAisPositionReportClassAAssignedScheduleMessageDataReader.ViewAliasName + ".[AisDevice] = @aisDevice " +
                    " ORDER BY " + SimpleAisPositionReportClassAAssignedScheduleMessageDataReader.ViewAliasName + ".[AisDevice]," +SimpleAisPositionReportClassAAssignedScheduleMessageDataReader.ViewAliasName + ".[ReceivedTimestamp]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var aisDeviceParameter = sqlCommandParameters.AddReference( "@aisDevice", aisDevice );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleAisPositionReportClassAAssignedScheduleMessageDataReader = new SimpleAisPositionReportClassAAssignedScheduleMessageDataReader( _loggerFactory, sqlDataReader );
                return simpleAisPositionReportClassAAssignedScheduleMessageDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<AisPositionReportClassAAssignedScheduleMessageObject> GetAisPositionReportClassAAssignedScheduleMessageCollectionByAisDevice( Guid aisDevice )
        {
            throw new NotImplementedException( );
        }
        public SimpleAisPositionReportClassAAssignedScheduleMessageDataReader GetAisPositionReportClassAAssignedScheduleMessageByAisDeviceAndReceivedTimestampDataReader( Guid aisDevice, DateTime receivedTimestamp )
        {
            const string sql = SimpleAisPositionReportClassAAssignedScheduleMessageDataReader.BaseQuery + " WHERE " +
                    SimpleAisPositionReportClassAAssignedScheduleMessageDataReader.ViewAliasName + ".[AisDevice] = @aisDevice AND " +
                    SimpleAisPositionReportClassAAssignedScheduleMessageDataReader.ViewAliasName + ".[ReceivedTimestamp] = @receivedTimestamp " +
                    " ORDER BY " + SimpleAisPositionReportClassAAssignedScheduleMessageDataReader.ViewAliasName + ".[AisDevice]," +SimpleAisPositionReportClassAAssignedScheduleMessageDataReader.ViewAliasName + ".[ReceivedTimestamp]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var aisDeviceParameter = sqlCommandParameters.AddReference( "@aisDevice", aisDevice );
                var receivedTimestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@receivedTimestamp", receivedTimestamp );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleAisPositionReportClassAAssignedScheduleMessageDataReader = new SimpleAisPositionReportClassAAssignedScheduleMessageDataReader( _loggerFactory, sqlDataReader );
                return simpleAisPositionReportClassAAssignedScheduleMessageDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public AisPositionReportClassAAssignedScheduleMessageObject? GetAisPositionReportClassAAssignedScheduleMessageByAisDeviceAndReceivedTimestamp( Guid aisDevice, DateTime receivedTimestamp )
        {
            throw new NotImplementedException( );
        }
        public AisPositionReportClassAAssignedScheduleMessageObject? GetAisPositionReportClassAAssignedScheduleMessageByAisDeviceAtReceivedTimestamp( Guid aisDevice, DateTime receivedTimestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<AisPositionReportClassAAssignedScheduleMessageObject> GetAisPositionReportClassAAssignedScheduleMessageByAisDeviceFromReceivedTimestamp( Guid aisDevice, DateTime receivedTimestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<AisPositionReportClassAAssignedScheduleMessageObject> GetAisPositionReportClassAAssignedScheduleMessageByAisDeviceUntilReceivedTimestamp( Guid aisDevice, DateTime receivedTimestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<AisPositionReportClassAAssignedScheduleMessageObject> GetAisPositionReportClassAAssignedScheduleMessageByAisDeviceOverReceivedTimestamp( Guid aisDevice, DateTime fromReceivedTimestamp, DateTime untilReceivedTimestamp )
        {
            throw new NotImplementedException( );
        }
        public SimpleAisPositionReportClassAAssignedScheduleMessageDataReader GetAisPositionReportClassAAssignedScheduleMessageCollectionByReceivedTimestampDataReader( DateTime receivedTimestamp )
        {
            const string sql = SimpleAisPositionReportClassAAssignedScheduleMessageDataReader.BaseQuery + " WHERE " +
                    SimpleAisPositionReportClassAAssignedScheduleMessageDataReader.ViewAliasName + ".[ReceivedTimestamp] = @receivedTimestamp " +
                    " ORDER BY " + SimpleAisPositionReportClassAAssignedScheduleMessageDataReader.ViewAliasName + ".[ReceivedTimestamp]," +SimpleAisPositionReportClassAAssignedScheduleMessageDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var receivedTimestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@receivedTimestamp", receivedTimestamp );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleAisPositionReportClassAAssignedScheduleMessageDataReader = new SimpleAisPositionReportClassAAssignedScheduleMessageDataReader( _loggerFactory, sqlDataReader );
                return simpleAisPositionReportClassAAssignedScheduleMessageDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<AisPositionReportClassAAssignedScheduleMessageObject> GetAisPositionReportClassAAssignedScheduleMessageCollectionByReceivedTimestamp( DateTime receivedTimestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<AisPositionReportClassAAssignedScheduleMessageObject> GetAisPositionReportClassAAssignedScheduleMessageCollectionAtReceivedTimestamp( DateTime receivedTimestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<AisPositionReportClassAAssignedScheduleMessageObject> GetAisPositionReportClassAAssignedScheduleMessageCollectionFromReceivedTimestamp( DateTime receivedTimestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<AisPositionReportClassAAssignedScheduleMessageObject> GetAisPositionReportClassAAssignedScheduleMessageCollectionUntilReceivedTimestamp( DateTime receivedTimestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<AisPositionReportClassAAssignedScheduleMessageObject> GetAisPositionReportClassAAssignedScheduleMessageCollectionOverReceivedTimestamp( DateTime fromReceivedTimestamp, DateTime untilReceivedTimestamp )
        {
            throw new NotImplementedException( );
        }
        public SimpleAisPositionReportClassAAssignedScheduleMessageDataReader GetAisPositionReportClassAAssignedScheduleMessageCollectionByMmsiDataReader( Guid mmsi )
        {
            const string sql = SimpleAisPositionReportClassAAssignedScheduleMessageDataReader.BaseQuery + " WHERE " +
                    SimpleAisPositionReportClassAAssignedScheduleMessageDataReader.ViewAliasName + ".[Mmsi] = @mmsi " +
                    " ORDER BY " + SimpleAisPositionReportClassAAssignedScheduleMessageDataReader.ViewAliasName + ".[Mmsi]," +SimpleAisPositionReportClassAAssignedScheduleMessageDataReader.ViewAliasName + ".[MessageSequenceNumber]," +SimpleAisPositionReportClassAAssignedScheduleMessageDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var mmsiParameter = sqlCommandParameters.AddReference( "@mmsi", mmsi );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleAisPositionReportClassAAssignedScheduleMessageDataReader = new SimpleAisPositionReportClassAAssignedScheduleMessageDataReader( _loggerFactory, sqlDataReader );
                return simpleAisPositionReportClassAAssignedScheduleMessageDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<AisPositionReportClassAAssignedScheduleMessageObject> GetAisPositionReportClassAAssignedScheduleMessageCollectionByMmsi( Guid mmsi )
        {
            throw new NotImplementedException( );
        }
        public SimpleAisPositionReportClassAAssignedScheduleMessageDataReader GetAisPositionReportClassAAssignedScheduleMessageCollectionByMmsiAndMessageSequenceNumberDataReader( Guid mmsi, long messageSequenceNumber )
        {
            const string sql = SimpleAisPositionReportClassAAssignedScheduleMessageDataReader.BaseQuery + " WHERE " +
                    SimpleAisPositionReportClassAAssignedScheduleMessageDataReader.ViewAliasName + ".[Mmsi] = @mmsi AND " +
                    SimpleAisPositionReportClassAAssignedScheduleMessageDataReader.ViewAliasName + ".[MessageSequenceNumber] = @messageSequenceNumber " +
                    " ORDER BY " + SimpleAisPositionReportClassAAssignedScheduleMessageDataReader.ViewAliasName + ".[Mmsi]," +SimpleAisPositionReportClassAAssignedScheduleMessageDataReader.ViewAliasName + ".[MessageSequenceNumber]," +SimpleAisPositionReportClassAAssignedScheduleMessageDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var mmsiParameter = sqlCommandParameters.AddReference( "@mmsi", mmsi );
                var messageSequenceNumberParameter = sqlCommandParameters.AddInt64( "@messageSequenceNumber", messageSequenceNumber );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleAisPositionReportClassAAssignedScheduleMessageDataReader = new SimpleAisPositionReportClassAAssignedScheduleMessageDataReader( _loggerFactory, sqlDataReader );
                return simpleAisPositionReportClassAAssignedScheduleMessageDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<AisPositionReportClassAAssignedScheduleMessageObject> GetAisPositionReportClassAAssignedScheduleMessageCollectionByMmsiAndMessageSequenceNumber( Guid mmsi, long messageSequenceNumber )
        {
            throw new NotImplementedException( );
        }
        public IList<AisPositionReportClassAAssignedScheduleMessageObject> GetAisPositionReportClassAAssignedScheduleMessageCollectionByMmsiFromMessageSequenceNumber( Guid mmsi, long messageSequenceNumber )
        {
            throw new NotImplementedException( );
        }
        public IList<AisPositionReportClassAAssignedScheduleMessageObject> GetAisPositionReportClassAAssignedScheduleMessageCollectionByMmsiUntilMessageSequenceNumber( Guid mmsi, long messageSequenceNumber )
        {
            throw new NotImplementedException( );
        }
        public IList<AisPositionReportClassAAssignedScheduleMessageObject> GetAisPositionReportClassAAssignedScheduleMessageCollectionByMmsiOverMessageSequenceNumber( Guid mmsi, long fromMessageSequenceNumber, long untilMessageSequenceNumber )
        {
            throw new NotImplementedException( );
        }
        // ---------------------------------------------------------------------
        // AisPositionReportClassAMessage queries
        // ---------------------------------------------------------------------
        public SimpleAisPositionReportClassAMessageDataReader GetAisPositionReportClassAMessageByIdDataReader( Guid id )
        {
            const string sql = SimpleAisPositionReportClassAMessageDataReader.BaseQuery + "WHERE " + SimpleAisPositionReportClassAMessageDataReader.ViewAliasName + ".[Id] = @id"; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                sqlCommandParameters.AddGuid( "@id", id );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleAisPositionReportClassAMessageDataReader = new SimpleAisPositionReportClassAMessageDataReader( _loggerFactory, sqlDataReader );
                return simpleAisPositionReportClassAMessageDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public AisPositionReportClassAMessageObject? GetAisPositionReportClassAMessageById( Guid id )
        {
            var simpleAisPositionReportClassAMessageDataReader = GetAisPositionReportClassAMessageByIdDataReader( id );
            using ( simpleAisPositionReportClassAMessageDataReader )
            {
                if ( simpleAisPositionReportClassAMessageDataReader.Read( ) )
                {
                    var result = simpleAisPositionReportClassAMessageDataReader.GetDataObject( );
                    return result;
                }
            }
            return null;
        }

        public void GetAisPositionReportClassAMessageById( Guid id, Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleAisPositionReportClassAMessageDataReader = GetAisPositionReportClassAMessageByIdDataReader( id );
                using ( simpleAisPositionReportClassAMessageDataReader )
                {
                    if ( simpleAisPositionReportClassAMessageDataReader.Read( ) )
                    {
                        destinationWriter.Write( true );
                        simpleAisPositionReportClassAMessageDataReader.WriteTo( destinationWriter );
                    }
                    else
                    {
                        destinationWriter.Write( false );
                    }
                }
            }
        }

        public SimpleAisPositionReportClassAMessageDataReader GetAisPositionReportClassAMessageCollectionDataReader( )
        {
            const string sql = SimpleAisPositionReportClassAMessageDataReader.BaseQuery; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleAisPositionReportClassAMessageDataReader = new SimpleAisPositionReportClassAMessageDataReader( _loggerFactory, sqlDataReader );
                return simpleAisPositionReportClassAMessageDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public IList<AisPositionReportClassAMessageObject> GetAisPositionReportClassAMessageCollection( )
        {
            var result = new List<AisPositionReportClassAMessageObject>( );
            var simpleAisPositionReportClassAMessageDataReader = GetAisPositionReportClassAMessageCollectionDataReader( );
            using ( simpleAisPositionReportClassAMessageDataReader )
            {
                while ( simpleAisPositionReportClassAMessageDataReader.Read( ) )
                {
                    var data = simpleAisPositionReportClassAMessageDataReader.GetDataObject( );
                    result.Add( data );
                }
            }
            return result;
        }

        public void GetAisPositionReportClassAMessageCollection( Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleAisPositionReportClassAMessageDataReader = GetAisPositionReportClassAMessageCollectionDataReader( );
                using ( simpleAisPositionReportClassAMessageDataReader )
                {
                    simpleAisPositionReportClassAMessageDataReader.WriteResultSetTo( destinationWriter );
                }
            }
        }

        public SimpleAisPositionReportClassAMessageDataReader GetAisPositionReportClassAMessageCollectionByAisDeviceDataReader( Guid aisDevice )
        {
            const string sql = SimpleAisPositionReportClassAMessageDataReader.BaseQuery + " WHERE " +
                    SimpleAisPositionReportClassAMessageDataReader.ViewAliasName + ".[AisDevice] = @aisDevice " +
                    " ORDER BY " + SimpleAisPositionReportClassAMessageDataReader.ViewAliasName + ".[AisDevice]," +SimpleAisPositionReportClassAMessageDataReader.ViewAliasName + ".[ReceivedTimestamp]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var aisDeviceParameter = sqlCommandParameters.AddReference( "@aisDevice", aisDevice );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleAisPositionReportClassAMessageDataReader = new SimpleAisPositionReportClassAMessageDataReader( _loggerFactory, sqlDataReader );
                return simpleAisPositionReportClassAMessageDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<AisPositionReportClassAMessageObject> GetAisPositionReportClassAMessageCollectionByAisDevice( Guid aisDevice )
        {
            throw new NotImplementedException( );
        }
        public SimpleAisPositionReportClassAMessageDataReader GetAisPositionReportClassAMessageByAisDeviceAndReceivedTimestampDataReader( Guid aisDevice, DateTime receivedTimestamp )
        {
            const string sql = SimpleAisPositionReportClassAMessageDataReader.BaseQuery + " WHERE " +
                    SimpleAisPositionReportClassAMessageDataReader.ViewAliasName + ".[AisDevice] = @aisDevice AND " +
                    SimpleAisPositionReportClassAMessageDataReader.ViewAliasName + ".[ReceivedTimestamp] = @receivedTimestamp " +
                    " ORDER BY " + SimpleAisPositionReportClassAMessageDataReader.ViewAliasName + ".[AisDevice]," +SimpleAisPositionReportClassAMessageDataReader.ViewAliasName + ".[ReceivedTimestamp]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var aisDeviceParameter = sqlCommandParameters.AddReference( "@aisDevice", aisDevice );
                var receivedTimestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@receivedTimestamp", receivedTimestamp );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleAisPositionReportClassAMessageDataReader = new SimpleAisPositionReportClassAMessageDataReader( _loggerFactory, sqlDataReader );
                return simpleAisPositionReportClassAMessageDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public AisPositionReportClassAMessageObject? GetAisPositionReportClassAMessageByAisDeviceAndReceivedTimestamp( Guid aisDevice, DateTime receivedTimestamp )
        {
            throw new NotImplementedException( );
        }
        public AisPositionReportClassAMessageObject? GetAisPositionReportClassAMessageByAisDeviceAtReceivedTimestamp( Guid aisDevice, DateTime receivedTimestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<AisPositionReportClassAMessageObject> GetAisPositionReportClassAMessageByAisDeviceFromReceivedTimestamp( Guid aisDevice, DateTime receivedTimestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<AisPositionReportClassAMessageObject> GetAisPositionReportClassAMessageByAisDeviceUntilReceivedTimestamp( Guid aisDevice, DateTime receivedTimestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<AisPositionReportClassAMessageObject> GetAisPositionReportClassAMessageByAisDeviceOverReceivedTimestamp( Guid aisDevice, DateTime fromReceivedTimestamp, DateTime untilReceivedTimestamp )
        {
            throw new NotImplementedException( );
        }
        public SimpleAisPositionReportClassAMessageDataReader GetAisPositionReportClassAMessageCollectionByReceivedTimestampDataReader( DateTime receivedTimestamp )
        {
            const string sql = SimpleAisPositionReportClassAMessageDataReader.BaseQuery + " WHERE " +
                    SimpleAisPositionReportClassAMessageDataReader.ViewAliasName + ".[ReceivedTimestamp] = @receivedTimestamp " +
                    " ORDER BY " + SimpleAisPositionReportClassAMessageDataReader.ViewAliasName + ".[ReceivedTimestamp]," +SimpleAisPositionReportClassAMessageDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var receivedTimestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@receivedTimestamp", receivedTimestamp );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleAisPositionReportClassAMessageDataReader = new SimpleAisPositionReportClassAMessageDataReader( _loggerFactory, sqlDataReader );
                return simpleAisPositionReportClassAMessageDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<AisPositionReportClassAMessageObject> GetAisPositionReportClassAMessageCollectionByReceivedTimestamp( DateTime receivedTimestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<AisPositionReportClassAMessageObject> GetAisPositionReportClassAMessageCollectionAtReceivedTimestamp( DateTime receivedTimestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<AisPositionReportClassAMessageObject> GetAisPositionReportClassAMessageCollectionFromReceivedTimestamp( DateTime receivedTimestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<AisPositionReportClassAMessageObject> GetAisPositionReportClassAMessageCollectionUntilReceivedTimestamp( DateTime receivedTimestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<AisPositionReportClassAMessageObject> GetAisPositionReportClassAMessageCollectionOverReceivedTimestamp( DateTime fromReceivedTimestamp, DateTime untilReceivedTimestamp )
        {
            throw new NotImplementedException( );
        }
        public SimpleAisPositionReportClassAMessageDataReader GetAisPositionReportClassAMessageCollectionByMmsiDataReader( Guid mmsi )
        {
            const string sql = SimpleAisPositionReportClassAMessageDataReader.BaseQuery + " WHERE " +
                    SimpleAisPositionReportClassAMessageDataReader.ViewAliasName + ".[Mmsi] = @mmsi " +
                    " ORDER BY " + SimpleAisPositionReportClassAMessageDataReader.ViewAliasName + ".[Mmsi]," +SimpleAisPositionReportClassAMessageDataReader.ViewAliasName + ".[MessageSequenceNumber]," +SimpleAisPositionReportClassAMessageDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var mmsiParameter = sqlCommandParameters.AddReference( "@mmsi", mmsi );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleAisPositionReportClassAMessageDataReader = new SimpleAisPositionReportClassAMessageDataReader( _loggerFactory, sqlDataReader );
                return simpleAisPositionReportClassAMessageDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<AisPositionReportClassAMessageObject> GetAisPositionReportClassAMessageCollectionByMmsi( Guid mmsi )
        {
            throw new NotImplementedException( );
        }
        public SimpleAisPositionReportClassAMessageDataReader GetAisPositionReportClassAMessageCollectionByMmsiAndMessageSequenceNumberDataReader( Guid mmsi, long messageSequenceNumber )
        {
            const string sql = SimpleAisPositionReportClassAMessageDataReader.BaseQuery + " WHERE " +
                    SimpleAisPositionReportClassAMessageDataReader.ViewAliasName + ".[Mmsi] = @mmsi AND " +
                    SimpleAisPositionReportClassAMessageDataReader.ViewAliasName + ".[MessageSequenceNumber] = @messageSequenceNumber " +
                    " ORDER BY " + SimpleAisPositionReportClassAMessageDataReader.ViewAliasName + ".[Mmsi]," +SimpleAisPositionReportClassAMessageDataReader.ViewAliasName + ".[MessageSequenceNumber]," +SimpleAisPositionReportClassAMessageDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var mmsiParameter = sqlCommandParameters.AddReference( "@mmsi", mmsi );
                var messageSequenceNumberParameter = sqlCommandParameters.AddInt64( "@messageSequenceNumber", messageSequenceNumber );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleAisPositionReportClassAMessageDataReader = new SimpleAisPositionReportClassAMessageDataReader( _loggerFactory, sqlDataReader );
                return simpleAisPositionReportClassAMessageDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<AisPositionReportClassAMessageObject> GetAisPositionReportClassAMessageCollectionByMmsiAndMessageSequenceNumber( Guid mmsi, long messageSequenceNumber )
        {
            throw new NotImplementedException( );
        }
        public IList<AisPositionReportClassAMessageObject> GetAisPositionReportClassAMessageCollectionByMmsiFromMessageSequenceNumber( Guid mmsi, long messageSequenceNumber )
        {
            throw new NotImplementedException( );
        }
        public IList<AisPositionReportClassAMessageObject> GetAisPositionReportClassAMessageCollectionByMmsiUntilMessageSequenceNumber( Guid mmsi, long messageSequenceNumber )
        {
            throw new NotImplementedException( );
        }
        public IList<AisPositionReportClassAMessageObject> GetAisPositionReportClassAMessageCollectionByMmsiOverMessageSequenceNumber( Guid mmsi, long fromMessageSequenceNumber, long untilMessageSequenceNumber )
        {
            throw new NotImplementedException( );
        }
        // ---------------------------------------------------------------------
        // AisPositionReportClassAResponseToInterrogationMessage queries
        // ---------------------------------------------------------------------
        public SimpleAisPositionReportClassAResponseToInterrogationMessageDataReader GetAisPositionReportClassAResponseToInterrogationMessageByIdDataReader( Guid id )
        {
            const string sql = SimpleAisPositionReportClassAResponseToInterrogationMessageDataReader.BaseQuery + "WHERE " + SimpleAisPositionReportClassAResponseToInterrogationMessageDataReader.ViewAliasName + ".[Id] = @id"; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                sqlCommandParameters.AddGuid( "@id", id );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleAisPositionReportClassAResponseToInterrogationMessageDataReader = new SimpleAisPositionReportClassAResponseToInterrogationMessageDataReader( _loggerFactory, sqlDataReader );
                return simpleAisPositionReportClassAResponseToInterrogationMessageDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public AisPositionReportClassAResponseToInterrogationMessageObject? GetAisPositionReportClassAResponseToInterrogationMessageById( Guid id )
        {
            var simpleAisPositionReportClassAResponseToInterrogationMessageDataReader = GetAisPositionReportClassAResponseToInterrogationMessageByIdDataReader( id );
            using ( simpleAisPositionReportClassAResponseToInterrogationMessageDataReader )
            {
                if ( simpleAisPositionReportClassAResponseToInterrogationMessageDataReader.Read( ) )
                {
                    var result = simpleAisPositionReportClassAResponseToInterrogationMessageDataReader.GetDataObject( );
                    return result;
                }
            }
            return null;
        }

        public void GetAisPositionReportClassAResponseToInterrogationMessageById( Guid id, Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleAisPositionReportClassAResponseToInterrogationMessageDataReader = GetAisPositionReportClassAResponseToInterrogationMessageByIdDataReader( id );
                using ( simpleAisPositionReportClassAResponseToInterrogationMessageDataReader )
                {
                    if ( simpleAisPositionReportClassAResponseToInterrogationMessageDataReader.Read( ) )
                    {
                        destinationWriter.Write( true );
                        simpleAisPositionReportClassAResponseToInterrogationMessageDataReader.WriteTo( destinationWriter );
                    }
                    else
                    {
                        destinationWriter.Write( false );
                    }
                }
            }
        }

        public SimpleAisPositionReportClassAResponseToInterrogationMessageDataReader GetAisPositionReportClassAResponseToInterrogationMessageCollectionDataReader( )
        {
            const string sql = SimpleAisPositionReportClassAResponseToInterrogationMessageDataReader.BaseQuery; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleAisPositionReportClassAResponseToInterrogationMessageDataReader = new SimpleAisPositionReportClassAResponseToInterrogationMessageDataReader( _loggerFactory, sqlDataReader );
                return simpleAisPositionReportClassAResponseToInterrogationMessageDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public IList<AisPositionReportClassAResponseToInterrogationMessageObject> GetAisPositionReportClassAResponseToInterrogationMessageCollection( )
        {
            var result = new List<AisPositionReportClassAResponseToInterrogationMessageObject>( );
            var simpleAisPositionReportClassAResponseToInterrogationMessageDataReader = GetAisPositionReportClassAResponseToInterrogationMessageCollectionDataReader( );
            using ( simpleAisPositionReportClassAResponseToInterrogationMessageDataReader )
            {
                while ( simpleAisPositionReportClassAResponseToInterrogationMessageDataReader.Read( ) )
                {
                    var data = simpleAisPositionReportClassAResponseToInterrogationMessageDataReader.GetDataObject( );
                    result.Add( data );
                }
            }
            return result;
        }

        public void GetAisPositionReportClassAResponseToInterrogationMessageCollection( Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleAisPositionReportClassAResponseToInterrogationMessageDataReader = GetAisPositionReportClassAResponseToInterrogationMessageCollectionDataReader( );
                using ( simpleAisPositionReportClassAResponseToInterrogationMessageDataReader )
                {
                    simpleAisPositionReportClassAResponseToInterrogationMessageDataReader.WriteResultSetTo( destinationWriter );
                }
            }
        }

        public SimpleAisPositionReportClassAResponseToInterrogationMessageDataReader GetAisPositionReportClassAResponseToInterrogationMessageCollectionByAisDeviceDataReader( Guid aisDevice )
        {
            const string sql = SimpleAisPositionReportClassAResponseToInterrogationMessageDataReader.BaseQuery + " WHERE " +
                    SimpleAisPositionReportClassAResponseToInterrogationMessageDataReader.ViewAliasName + ".[AisDevice] = @aisDevice " +
                    " ORDER BY " + SimpleAisPositionReportClassAResponseToInterrogationMessageDataReader.ViewAliasName + ".[AisDevice]," +SimpleAisPositionReportClassAResponseToInterrogationMessageDataReader.ViewAliasName + ".[ReceivedTimestamp]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var aisDeviceParameter = sqlCommandParameters.AddReference( "@aisDevice", aisDevice );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleAisPositionReportClassAResponseToInterrogationMessageDataReader = new SimpleAisPositionReportClassAResponseToInterrogationMessageDataReader( _loggerFactory, sqlDataReader );
                return simpleAisPositionReportClassAResponseToInterrogationMessageDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<AisPositionReportClassAResponseToInterrogationMessageObject> GetAisPositionReportClassAResponseToInterrogationMessageCollectionByAisDevice( Guid aisDevice )
        {
            throw new NotImplementedException( );
        }
        public SimpleAisPositionReportClassAResponseToInterrogationMessageDataReader GetAisPositionReportClassAResponseToInterrogationMessageByAisDeviceAndReceivedTimestampDataReader( Guid aisDevice, DateTime receivedTimestamp )
        {
            const string sql = SimpleAisPositionReportClassAResponseToInterrogationMessageDataReader.BaseQuery + " WHERE " +
                    SimpleAisPositionReportClassAResponseToInterrogationMessageDataReader.ViewAliasName + ".[AisDevice] = @aisDevice AND " +
                    SimpleAisPositionReportClassAResponseToInterrogationMessageDataReader.ViewAliasName + ".[ReceivedTimestamp] = @receivedTimestamp " +
                    " ORDER BY " + SimpleAisPositionReportClassAResponseToInterrogationMessageDataReader.ViewAliasName + ".[AisDevice]," +SimpleAisPositionReportClassAResponseToInterrogationMessageDataReader.ViewAliasName + ".[ReceivedTimestamp]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var aisDeviceParameter = sqlCommandParameters.AddReference( "@aisDevice", aisDevice );
                var receivedTimestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@receivedTimestamp", receivedTimestamp );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleAisPositionReportClassAResponseToInterrogationMessageDataReader = new SimpleAisPositionReportClassAResponseToInterrogationMessageDataReader( _loggerFactory, sqlDataReader );
                return simpleAisPositionReportClassAResponseToInterrogationMessageDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public AisPositionReportClassAResponseToInterrogationMessageObject? GetAisPositionReportClassAResponseToInterrogationMessageByAisDeviceAndReceivedTimestamp( Guid aisDevice, DateTime receivedTimestamp )
        {
            throw new NotImplementedException( );
        }
        public AisPositionReportClassAResponseToInterrogationMessageObject? GetAisPositionReportClassAResponseToInterrogationMessageByAisDeviceAtReceivedTimestamp( Guid aisDevice, DateTime receivedTimestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<AisPositionReportClassAResponseToInterrogationMessageObject> GetAisPositionReportClassAResponseToInterrogationMessageByAisDeviceFromReceivedTimestamp( Guid aisDevice, DateTime receivedTimestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<AisPositionReportClassAResponseToInterrogationMessageObject> GetAisPositionReportClassAResponseToInterrogationMessageByAisDeviceUntilReceivedTimestamp( Guid aisDevice, DateTime receivedTimestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<AisPositionReportClassAResponseToInterrogationMessageObject> GetAisPositionReportClassAResponseToInterrogationMessageByAisDeviceOverReceivedTimestamp( Guid aisDevice, DateTime fromReceivedTimestamp, DateTime untilReceivedTimestamp )
        {
            throw new NotImplementedException( );
        }
        public SimpleAisPositionReportClassAResponseToInterrogationMessageDataReader GetAisPositionReportClassAResponseToInterrogationMessageCollectionByReceivedTimestampDataReader( DateTime receivedTimestamp )
        {
            const string sql = SimpleAisPositionReportClassAResponseToInterrogationMessageDataReader.BaseQuery + " WHERE " +
                    SimpleAisPositionReportClassAResponseToInterrogationMessageDataReader.ViewAliasName + ".[ReceivedTimestamp] = @receivedTimestamp " +
                    " ORDER BY " + SimpleAisPositionReportClassAResponseToInterrogationMessageDataReader.ViewAliasName + ".[ReceivedTimestamp]," +SimpleAisPositionReportClassAResponseToInterrogationMessageDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var receivedTimestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@receivedTimestamp", receivedTimestamp );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleAisPositionReportClassAResponseToInterrogationMessageDataReader = new SimpleAisPositionReportClassAResponseToInterrogationMessageDataReader( _loggerFactory, sqlDataReader );
                return simpleAisPositionReportClassAResponseToInterrogationMessageDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<AisPositionReportClassAResponseToInterrogationMessageObject> GetAisPositionReportClassAResponseToInterrogationMessageCollectionByReceivedTimestamp( DateTime receivedTimestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<AisPositionReportClassAResponseToInterrogationMessageObject> GetAisPositionReportClassAResponseToInterrogationMessageCollectionAtReceivedTimestamp( DateTime receivedTimestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<AisPositionReportClassAResponseToInterrogationMessageObject> GetAisPositionReportClassAResponseToInterrogationMessageCollectionFromReceivedTimestamp( DateTime receivedTimestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<AisPositionReportClassAResponseToInterrogationMessageObject> GetAisPositionReportClassAResponseToInterrogationMessageCollectionUntilReceivedTimestamp( DateTime receivedTimestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<AisPositionReportClassAResponseToInterrogationMessageObject> GetAisPositionReportClassAResponseToInterrogationMessageCollectionOverReceivedTimestamp( DateTime fromReceivedTimestamp, DateTime untilReceivedTimestamp )
        {
            throw new NotImplementedException( );
        }
        public SimpleAisPositionReportClassAResponseToInterrogationMessageDataReader GetAisPositionReportClassAResponseToInterrogationMessageCollectionByMmsiDataReader( Guid mmsi )
        {
            const string sql = SimpleAisPositionReportClassAResponseToInterrogationMessageDataReader.BaseQuery + " WHERE " +
                    SimpleAisPositionReportClassAResponseToInterrogationMessageDataReader.ViewAliasName + ".[Mmsi] = @mmsi " +
                    " ORDER BY " + SimpleAisPositionReportClassAResponseToInterrogationMessageDataReader.ViewAliasName + ".[Mmsi]," +SimpleAisPositionReportClassAResponseToInterrogationMessageDataReader.ViewAliasName + ".[MessageSequenceNumber]," +SimpleAisPositionReportClassAResponseToInterrogationMessageDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var mmsiParameter = sqlCommandParameters.AddReference( "@mmsi", mmsi );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleAisPositionReportClassAResponseToInterrogationMessageDataReader = new SimpleAisPositionReportClassAResponseToInterrogationMessageDataReader( _loggerFactory, sqlDataReader );
                return simpleAisPositionReportClassAResponseToInterrogationMessageDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<AisPositionReportClassAResponseToInterrogationMessageObject> GetAisPositionReportClassAResponseToInterrogationMessageCollectionByMmsi( Guid mmsi )
        {
            throw new NotImplementedException( );
        }
        public SimpleAisPositionReportClassAResponseToInterrogationMessageDataReader GetAisPositionReportClassAResponseToInterrogationMessageCollectionByMmsiAndMessageSequenceNumberDataReader( Guid mmsi, long messageSequenceNumber )
        {
            const string sql = SimpleAisPositionReportClassAResponseToInterrogationMessageDataReader.BaseQuery + " WHERE " +
                    SimpleAisPositionReportClassAResponseToInterrogationMessageDataReader.ViewAliasName + ".[Mmsi] = @mmsi AND " +
                    SimpleAisPositionReportClassAResponseToInterrogationMessageDataReader.ViewAliasName + ".[MessageSequenceNumber] = @messageSequenceNumber " +
                    " ORDER BY " + SimpleAisPositionReportClassAResponseToInterrogationMessageDataReader.ViewAliasName + ".[Mmsi]," +SimpleAisPositionReportClassAResponseToInterrogationMessageDataReader.ViewAliasName + ".[MessageSequenceNumber]," +SimpleAisPositionReportClassAResponseToInterrogationMessageDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var mmsiParameter = sqlCommandParameters.AddReference( "@mmsi", mmsi );
                var messageSequenceNumberParameter = sqlCommandParameters.AddInt64( "@messageSequenceNumber", messageSequenceNumber );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleAisPositionReportClassAResponseToInterrogationMessageDataReader = new SimpleAisPositionReportClassAResponseToInterrogationMessageDataReader( _loggerFactory, sqlDataReader );
                return simpleAisPositionReportClassAResponseToInterrogationMessageDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<AisPositionReportClassAResponseToInterrogationMessageObject> GetAisPositionReportClassAResponseToInterrogationMessageCollectionByMmsiAndMessageSequenceNumber( Guid mmsi, long messageSequenceNumber )
        {
            throw new NotImplementedException( );
        }
        public IList<AisPositionReportClassAResponseToInterrogationMessageObject> GetAisPositionReportClassAResponseToInterrogationMessageCollectionByMmsiFromMessageSequenceNumber( Guid mmsi, long messageSequenceNumber )
        {
            throw new NotImplementedException( );
        }
        public IList<AisPositionReportClassAResponseToInterrogationMessageObject> GetAisPositionReportClassAResponseToInterrogationMessageCollectionByMmsiUntilMessageSequenceNumber( Guid mmsi, long messageSequenceNumber )
        {
            throw new NotImplementedException( );
        }
        public IList<AisPositionReportClassAResponseToInterrogationMessageObject> GetAisPositionReportClassAResponseToInterrogationMessageCollectionByMmsiOverMessageSequenceNumber( Guid mmsi, long fromMessageSequenceNumber, long untilMessageSequenceNumber )
        {
            throw new NotImplementedException( );
        }
        // ---------------------------------------------------------------------
        // AisPositionReportForLongRangeApplicationsMessage queries
        // ---------------------------------------------------------------------
        public SimpleAisPositionReportForLongRangeApplicationsMessageDataReader GetAisPositionReportForLongRangeApplicationsMessageByIdDataReader( Guid id )
        {
            const string sql = SimpleAisPositionReportForLongRangeApplicationsMessageDataReader.BaseQuery + "WHERE " + SimpleAisPositionReportForLongRangeApplicationsMessageDataReader.ViewAliasName + ".[Id] = @id"; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                sqlCommandParameters.AddGuid( "@id", id );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleAisPositionReportForLongRangeApplicationsMessageDataReader = new SimpleAisPositionReportForLongRangeApplicationsMessageDataReader( _loggerFactory, sqlDataReader );
                return simpleAisPositionReportForLongRangeApplicationsMessageDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public AisPositionReportForLongRangeApplicationsMessageObject? GetAisPositionReportForLongRangeApplicationsMessageById( Guid id )
        {
            var simpleAisPositionReportForLongRangeApplicationsMessageDataReader = GetAisPositionReportForLongRangeApplicationsMessageByIdDataReader( id );
            using ( simpleAisPositionReportForLongRangeApplicationsMessageDataReader )
            {
                if ( simpleAisPositionReportForLongRangeApplicationsMessageDataReader.Read( ) )
                {
                    var result = simpleAisPositionReportForLongRangeApplicationsMessageDataReader.GetDataObject( );
                    return result;
                }
            }
            return null;
        }

        public void GetAisPositionReportForLongRangeApplicationsMessageById( Guid id, Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleAisPositionReportForLongRangeApplicationsMessageDataReader = GetAisPositionReportForLongRangeApplicationsMessageByIdDataReader( id );
                using ( simpleAisPositionReportForLongRangeApplicationsMessageDataReader )
                {
                    if ( simpleAisPositionReportForLongRangeApplicationsMessageDataReader.Read( ) )
                    {
                        destinationWriter.Write( true );
                        simpleAisPositionReportForLongRangeApplicationsMessageDataReader.WriteTo( destinationWriter );
                    }
                    else
                    {
                        destinationWriter.Write( false );
                    }
                }
            }
        }

        public SimpleAisPositionReportForLongRangeApplicationsMessageDataReader GetAisPositionReportForLongRangeApplicationsMessageCollectionDataReader( )
        {
            const string sql = SimpleAisPositionReportForLongRangeApplicationsMessageDataReader.BaseQuery; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleAisPositionReportForLongRangeApplicationsMessageDataReader = new SimpleAisPositionReportForLongRangeApplicationsMessageDataReader( _loggerFactory, sqlDataReader );
                return simpleAisPositionReportForLongRangeApplicationsMessageDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public IList<AisPositionReportForLongRangeApplicationsMessageObject> GetAisPositionReportForLongRangeApplicationsMessageCollection( )
        {
            var result = new List<AisPositionReportForLongRangeApplicationsMessageObject>( );
            var simpleAisPositionReportForLongRangeApplicationsMessageDataReader = GetAisPositionReportForLongRangeApplicationsMessageCollectionDataReader( );
            using ( simpleAisPositionReportForLongRangeApplicationsMessageDataReader )
            {
                while ( simpleAisPositionReportForLongRangeApplicationsMessageDataReader.Read( ) )
                {
                    var data = simpleAisPositionReportForLongRangeApplicationsMessageDataReader.GetDataObject( );
                    result.Add( data );
                }
            }
            return result;
        }

        public void GetAisPositionReportForLongRangeApplicationsMessageCollection( Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleAisPositionReportForLongRangeApplicationsMessageDataReader = GetAisPositionReportForLongRangeApplicationsMessageCollectionDataReader( );
                using ( simpleAisPositionReportForLongRangeApplicationsMessageDataReader )
                {
                    simpleAisPositionReportForLongRangeApplicationsMessageDataReader.WriteResultSetTo( destinationWriter );
                }
            }
        }

        public SimpleAisPositionReportForLongRangeApplicationsMessageDataReader GetAisPositionReportForLongRangeApplicationsMessageCollectionByAisDeviceDataReader( Guid aisDevice )
        {
            const string sql = SimpleAisPositionReportForLongRangeApplicationsMessageDataReader.BaseQuery + " WHERE " +
                    SimpleAisPositionReportForLongRangeApplicationsMessageDataReader.ViewAliasName + ".[AisDevice] = @aisDevice " +
                    " ORDER BY " + SimpleAisPositionReportForLongRangeApplicationsMessageDataReader.ViewAliasName + ".[AisDevice]," +SimpleAisPositionReportForLongRangeApplicationsMessageDataReader.ViewAliasName + ".[ReceivedTimestamp]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var aisDeviceParameter = sqlCommandParameters.AddReference( "@aisDevice", aisDevice );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleAisPositionReportForLongRangeApplicationsMessageDataReader = new SimpleAisPositionReportForLongRangeApplicationsMessageDataReader( _loggerFactory, sqlDataReader );
                return simpleAisPositionReportForLongRangeApplicationsMessageDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<AisPositionReportForLongRangeApplicationsMessageObject> GetAisPositionReportForLongRangeApplicationsMessageCollectionByAisDevice( Guid aisDevice )
        {
            throw new NotImplementedException( );
        }
        public SimpleAisPositionReportForLongRangeApplicationsMessageDataReader GetAisPositionReportForLongRangeApplicationsMessageByAisDeviceAndReceivedTimestampDataReader( Guid aisDevice, DateTime receivedTimestamp )
        {
            const string sql = SimpleAisPositionReportForLongRangeApplicationsMessageDataReader.BaseQuery + " WHERE " +
                    SimpleAisPositionReportForLongRangeApplicationsMessageDataReader.ViewAliasName + ".[AisDevice] = @aisDevice AND " +
                    SimpleAisPositionReportForLongRangeApplicationsMessageDataReader.ViewAliasName + ".[ReceivedTimestamp] = @receivedTimestamp " +
                    " ORDER BY " + SimpleAisPositionReportForLongRangeApplicationsMessageDataReader.ViewAliasName + ".[AisDevice]," +SimpleAisPositionReportForLongRangeApplicationsMessageDataReader.ViewAliasName + ".[ReceivedTimestamp]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var aisDeviceParameter = sqlCommandParameters.AddReference( "@aisDevice", aisDevice );
                var receivedTimestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@receivedTimestamp", receivedTimestamp );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleAisPositionReportForLongRangeApplicationsMessageDataReader = new SimpleAisPositionReportForLongRangeApplicationsMessageDataReader( _loggerFactory, sqlDataReader );
                return simpleAisPositionReportForLongRangeApplicationsMessageDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public AisPositionReportForLongRangeApplicationsMessageObject? GetAisPositionReportForLongRangeApplicationsMessageByAisDeviceAndReceivedTimestamp( Guid aisDevice, DateTime receivedTimestamp )
        {
            throw new NotImplementedException( );
        }
        public AisPositionReportForLongRangeApplicationsMessageObject? GetAisPositionReportForLongRangeApplicationsMessageByAisDeviceAtReceivedTimestamp( Guid aisDevice, DateTime receivedTimestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<AisPositionReportForLongRangeApplicationsMessageObject> GetAisPositionReportForLongRangeApplicationsMessageByAisDeviceFromReceivedTimestamp( Guid aisDevice, DateTime receivedTimestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<AisPositionReportForLongRangeApplicationsMessageObject> GetAisPositionReportForLongRangeApplicationsMessageByAisDeviceUntilReceivedTimestamp( Guid aisDevice, DateTime receivedTimestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<AisPositionReportForLongRangeApplicationsMessageObject> GetAisPositionReportForLongRangeApplicationsMessageByAisDeviceOverReceivedTimestamp( Guid aisDevice, DateTime fromReceivedTimestamp, DateTime untilReceivedTimestamp )
        {
            throw new NotImplementedException( );
        }
        public SimpleAisPositionReportForLongRangeApplicationsMessageDataReader GetAisPositionReportForLongRangeApplicationsMessageCollectionByReceivedTimestampDataReader( DateTime receivedTimestamp )
        {
            const string sql = SimpleAisPositionReportForLongRangeApplicationsMessageDataReader.BaseQuery + " WHERE " +
                    SimpleAisPositionReportForLongRangeApplicationsMessageDataReader.ViewAliasName + ".[ReceivedTimestamp] = @receivedTimestamp " +
                    " ORDER BY " + SimpleAisPositionReportForLongRangeApplicationsMessageDataReader.ViewAliasName + ".[ReceivedTimestamp]," +SimpleAisPositionReportForLongRangeApplicationsMessageDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var receivedTimestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@receivedTimestamp", receivedTimestamp );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleAisPositionReportForLongRangeApplicationsMessageDataReader = new SimpleAisPositionReportForLongRangeApplicationsMessageDataReader( _loggerFactory, sqlDataReader );
                return simpleAisPositionReportForLongRangeApplicationsMessageDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<AisPositionReportForLongRangeApplicationsMessageObject> GetAisPositionReportForLongRangeApplicationsMessageCollectionByReceivedTimestamp( DateTime receivedTimestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<AisPositionReportForLongRangeApplicationsMessageObject> GetAisPositionReportForLongRangeApplicationsMessageCollectionAtReceivedTimestamp( DateTime receivedTimestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<AisPositionReportForLongRangeApplicationsMessageObject> GetAisPositionReportForLongRangeApplicationsMessageCollectionFromReceivedTimestamp( DateTime receivedTimestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<AisPositionReportForLongRangeApplicationsMessageObject> GetAisPositionReportForLongRangeApplicationsMessageCollectionUntilReceivedTimestamp( DateTime receivedTimestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<AisPositionReportForLongRangeApplicationsMessageObject> GetAisPositionReportForLongRangeApplicationsMessageCollectionOverReceivedTimestamp( DateTime fromReceivedTimestamp, DateTime untilReceivedTimestamp )
        {
            throw new NotImplementedException( );
        }
        public SimpleAisPositionReportForLongRangeApplicationsMessageDataReader GetAisPositionReportForLongRangeApplicationsMessageCollectionByMmsiDataReader( Guid mmsi )
        {
            const string sql = SimpleAisPositionReportForLongRangeApplicationsMessageDataReader.BaseQuery + " WHERE " +
                    SimpleAisPositionReportForLongRangeApplicationsMessageDataReader.ViewAliasName + ".[Mmsi] = @mmsi " +
                    " ORDER BY " + SimpleAisPositionReportForLongRangeApplicationsMessageDataReader.ViewAliasName + ".[Mmsi]," +SimpleAisPositionReportForLongRangeApplicationsMessageDataReader.ViewAliasName + ".[MessageSequenceNumber]," +SimpleAisPositionReportForLongRangeApplicationsMessageDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var mmsiParameter = sqlCommandParameters.AddReference( "@mmsi", mmsi );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleAisPositionReportForLongRangeApplicationsMessageDataReader = new SimpleAisPositionReportForLongRangeApplicationsMessageDataReader( _loggerFactory, sqlDataReader );
                return simpleAisPositionReportForLongRangeApplicationsMessageDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<AisPositionReportForLongRangeApplicationsMessageObject> GetAisPositionReportForLongRangeApplicationsMessageCollectionByMmsi( Guid mmsi )
        {
            throw new NotImplementedException( );
        }
        public SimpleAisPositionReportForLongRangeApplicationsMessageDataReader GetAisPositionReportForLongRangeApplicationsMessageCollectionByMmsiAndMessageSequenceNumberDataReader( Guid mmsi, long messageSequenceNumber )
        {
            const string sql = SimpleAisPositionReportForLongRangeApplicationsMessageDataReader.BaseQuery + " WHERE " +
                    SimpleAisPositionReportForLongRangeApplicationsMessageDataReader.ViewAliasName + ".[Mmsi] = @mmsi AND " +
                    SimpleAisPositionReportForLongRangeApplicationsMessageDataReader.ViewAliasName + ".[MessageSequenceNumber] = @messageSequenceNumber " +
                    " ORDER BY " + SimpleAisPositionReportForLongRangeApplicationsMessageDataReader.ViewAliasName + ".[Mmsi]," +SimpleAisPositionReportForLongRangeApplicationsMessageDataReader.ViewAliasName + ".[MessageSequenceNumber]," +SimpleAisPositionReportForLongRangeApplicationsMessageDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var mmsiParameter = sqlCommandParameters.AddReference( "@mmsi", mmsi );
                var messageSequenceNumberParameter = sqlCommandParameters.AddInt64( "@messageSequenceNumber", messageSequenceNumber );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleAisPositionReportForLongRangeApplicationsMessageDataReader = new SimpleAisPositionReportForLongRangeApplicationsMessageDataReader( _loggerFactory, sqlDataReader );
                return simpleAisPositionReportForLongRangeApplicationsMessageDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<AisPositionReportForLongRangeApplicationsMessageObject> GetAisPositionReportForLongRangeApplicationsMessageCollectionByMmsiAndMessageSequenceNumber( Guid mmsi, long messageSequenceNumber )
        {
            throw new NotImplementedException( );
        }
        public IList<AisPositionReportForLongRangeApplicationsMessageObject> GetAisPositionReportForLongRangeApplicationsMessageCollectionByMmsiFromMessageSequenceNumber( Guid mmsi, long messageSequenceNumber )
        {
            throw new NotImplementedException( );
        }
        public IList<AisPositionReportForLongRangeApplicationsMessageObject> GetAisPositionReportForLongRangeApplicationsMessageCollectionByMmsiUntilMessageSequenceNumber( Guid mmsi, long messageSequenceNumber )
        {
            throw new NotImplementedException( );
        }
        public IList<AisPositionReportForLongRangeApplicationsMessageObject> GetAisPositionReportForLongRangeApplicationsMessageCollectionByMmsiOverMessageSequenceNumber( Guid mmsi, long fromMessageSequenceNumber, long untilMessageSequenceNumber )
        {
            throw new NotImplementedException( );
        }
        // ---------------------------------------------------------------------
        // AisSafetyRelatedAcknowledgmentMessage queries
        // ---------------------------------------------------------------------
        public SimpleAisSafetyRelatedAcknowledgmentMessageDataReader GetAisSafetyRelatedAcknowledgmentMessageByIdDataReader( Guid id )
        {
            const string sql = SimpleAisSafetyRelatedAcknowledgmentMessageDataReader.BaseQuery + "WHERE " + SimpleAisSafetyRelatedAcknowledgmentMessageDataReader.ViewAliasName + ".[Id] = @id"; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                sqlCommandParameters.AddGuid( "@id", id );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleAisSafetyRelatedAcknowledgmentMessageDataReader = new SimpleAisSafetyRelatedAcknowledgmentMessageDataReader( _loggerFactory, sqlDataReader );
                return simpleAisSafetyRelatedAcknowledgmentMessageDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public AisSafetyRelatedAcknowledgmentMessageObject? GetAisSafetyRelatedAcknowledgmentMessageById( Guid id )
        {
            var simpleAisSafetyRelatedAcknowledgmentMessageDataReader = GetAisSafetyRelatedAcknowledgmentMessageByIdDataReader( id );
            using ( simpleAisSafetyRelatedAcknowledgmentMessageDataReader )
            {
                if ( simpleAisSafetyRelatedAcknowledgmentMessageDataReader.Read( ) )
                {
                    var result = simpleAisSafetyRelatedAcknowledgmentMessageDataReader.GetDataObject( );
                    return result;
                }
            }
            return null;
        }

        public void GetAisSafetyRelatedAcknowledgmentMessageById( Guid id, Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleAisSafetyRelatedAcknowledgmentMessageDataReader = GetAisSafetyRelatedAcknowledgmentMessageByIdDataReader( id );
                using ( simpleAisSafetyRelatedAcknowledgmentMessageDataReader )
                {
                    if ( simpleAisSafetyRelatedAcknowledgmentMessageDataReader.Read( ) )
                    {
                        destinationWriter.Write( true );
                        simpleAisSafetyRelatedAcknowledgmentMessageDataReader.WriteTo( destinationWriter );
                    }
                    else
                    {
                        destinationWriter.Write( false );
                    }
                }
            }
        }

        public SimpleAisSafetyRelatedAcknowledgmentMessageDataReader GetAisSafetyRelatedAcknowledgmentMessageCollectionDataReader( )
        {
            const string sql = SimpleAisSafetyRelatedAcknowledgmentMessageDataReader.BaseQuery; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleAisSafetyRelatedAcknowledgmentMessageDataReader = new SimpleAisSafetyRelatedAcknowledgmentMessageDataReader( _loggerFactory, sqlDataReader );
                return simpleAisSafetyRelatedAcknowledgmentMessageDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public IList<AisSafetyRelatedAcknowledgmentMessageObject> GetAisSafetyRelatedAcknowledgmentMessageCollection( )
        {
            var result = new List<AisSafetyRelatedAcknowledgmentMessageObject>( );
            var simpleAisSafetyRelatedAcknowledgmentMessageDataReader = GetAisSafetyRelatedAcknowledgmentMessageCollectionDataReader( );
            using ( simpleAisSafetyRelatedAcknowledgmentMessageDataReader )
            {
                while ( simpleAisSafetyRelatedAcknowledgmentMessageDataReader.Read( ) )
                {
                    var data = simpleAisSafetyRelatedAcknowledgmentMessageDataReader.GetDataObject( );
                    result.Add( data );
                }
            }
            return result;
        }

        public void GetAisSafetyRelatedAcknowledgmentMessageCollection( Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleAisSafetyRelatedAcknowledgmentMessageDataReader = GetAisSafetyRelatedAcknowledgmentMessageCollectionDataReader( );
                using ( simpleAisSafetyRelatedAcknowledgmentMessageDataReader )
                {
                    simpleAisSafetyRelatedAcknowledgmentMessageDataReader.WriteResultSetTo( destinationWriter );
                }
            }
        }

        public SimpleAisSafetyRelatedAcknowledgmentMessageDataReader GetAisSafetyRelatedAcknowledgmentMessageCollectionByAisDeviceDataReader( Guid aisDevice )
        {
            const string sql = SimpleAisSafetyRelatedAcknowledgmentMessageDataReader.BaseQuery + " WHERE " +
                    SimpleAisSafetyRelatedAcknowledgmentMessageDataReader.ViewAliasName + ".[AisDevice] = @aisDevice " +
                    " ORDER BY " + SimpleAisSafetyRelatedAcknowledgmentMessageDataReader.ViewAliasName + ".[AisDevice]," +SimpleAisSafetyRelatedAcknowledgmentMessageDataReader.ViewAliasName + ".[ReceivedTimestamp]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var aisDeviceParameter = sqlCommandParameters.AddReference( "@aisDevice", aisDevice );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleAisSafetyRelatedAcknowledgmentMessageDataReader = new SimpleAisSafetyRelatedAcknowledgmentMessageDataReader( _loggerFactory, sqlDataReader );
                return simpleAisSafetyRelatedAcknowledgmentMessageDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<AisSafetyRelatedAcknowledgmentMessageObject> GetAisSafetyRelatedAcknowledgmentMessageCollectionByAisDevice( Guid aisDevice )
        {
            throw new NotImplementedException( );
        }
        public SimpleAisSafetyRelatedAcknowledgmentMessageDataReader GetAisSafetyRelatedAcknowledgmentMessageByAisDeviceAndReceivedTimestampDataReader( Guid aisDevice, DateTime receivedTimestamp )
        {
            const string sql = SimpleAisSafetyRelatedAcknowledgmentMessageDataReader.BaseQuery + " WHERE " +
                    SimpleAisSafetyRelatedAcknowledgmentMessageDataReader.ViewAliasName + ".[AisDevice] = @aisDevice AND " +
                    SimpleAisSafetyRelatedAcknowledgmentMessageDataReader.ViewAliasName + ".[ReceivedTimestamp] = @receivedTimestamp " +
                    " ORDER BY " + SimpleAisSafetyRelatedAcknowledgmentMessageDataReader.ViewAliasName + ".[AisDevice]," +SimpleAisSafetyRelatedAcknowledgmentMessageDataReader.ViewAliasName + ".[ReceivedTimestamp]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var aisDeviceParameter = sqlCommandParameters.AddReference( "@aisDevice", aisDevice );
                var receivedTimestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@receivedTimestamp", receivedTimestamp );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleAisSafetyRelatedAcknowledgmentMessageDataReader = new SimpleAisSafetyRelatedAcknowledgmentMessageDataReader( _loggerFactory, sqlDataReader );
                return simpleAisSafetyRelatedAcknowledgmentMessageDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public AisSafetyRelatedAcknowledgmentMessageObject? GetAisSafetyRelatedAcknowledgmentMessageByAisDeviceAndReceivedTimestamp( Guid aisDevice, DateTime receivedTimestamp )
        {
            throw new NotImplementedException( );
        }
        public AisSafetyRelatedAcknowledgmentMessageObject? GetAisSafetyRelatedAcknowledgmentMessageByAisDeviceAtReceivedTimestamp( Guid aisDevice, DateTime receivedTimestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<AisSafetyRelatedAcknowledgmentMessageObject> GetAisSafetyRelatedAcknowledgmentMessageByAisDeviceFromReceivedTimestamp( Guid aisDevice, DateTime receivedTimestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<AisSafetyRelatedAcknowledgmentMessageObject> GetAisSafetyRelatedAcknowledgmentMessageByAisDeviceUntilReceivedTimestamp( Guid aisDevice, DateTime receivedTimestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<AisSafetyRelatedAcknowledgmentMessageObject> GetAisSafetyRelatedAcknowledgmentMessageByAisDeviceOverReceivedTimestamp( Guid aisDevice, DateTime fromReceivedTimestamp, DateTime untilReceivedTimestamp )
        {
            throw new NotImplementedException( );
        }
        public SimpleAisSafetyRelatedAcknowledgmentMessageDataReader GetAisSafetyRelatedAcknowledgmentMessageCollectionByReceivedTimestampDataReader( DateTime receivedTimestamp )
        {
            const string sql = SimpleAisSafetyRelatedAcknowledgmentMessageDataReader.BaseQuery + " WHERE " +
                    SimpleAisSafetyRelatedAcknowledgmentMessageDataReader.ViewAliasName + ".[ReceivedTimestamp] = @receivedTimestamp " +
                    " ORDER BY " + SimpleAisSafetyRelatedAcknowledgmentMessageDataReader.ViewAliasName + ".[ReceivedTimestamp]," +SimpleAisSafetyRelatedAcknowledgmentMessageDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var receivedTimestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@receivedTimestamp", receivedTimestamp );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleAisSafetyRelatedAcknowledgmentMessageDataReader = new SimpleAisSafetyRelatedAcknowledgmentMessageDataReader( _loggerFactory, sqlDataReader );
                return simpleAisSafetyRelatedAcknowledgmentMessageDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<AisSafetyRelatedAcknowledgmentMessageObject> GetAisSafetyRelatedAcknowledgmentMessageCollectionByReceivedTimestamp( DateTime receivedTimestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<AisSafetyRelatedAcknowledgmentMessageObject> GetAisSafetyRelatedAcknowledgmentMessageCollectionAtReceivedTimestamp( DateTime receivedTimestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<AisSafetyRelatedAcknowledgmentMessageObject> GetAisSafetyRelatedAcknowledgmentMessageCollectionFromReceivedTimestamp( DateTime receivedTimestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<AisSafetyRelatedAcknowledgmentMessageObject> GetAisSafetyRelatedAcknowledgmentMessageCollectionUntilReceivedTimestamp( DateTime receivedTimestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<AisSafetyRelatedAcknowledgmentMessageObject> GetAisSafetyRelatedAcknowledgmentMessageCollectionOverReceivedTimestamp( DateTime fromReceivedTimestamp, DateTime untilReceivedTimestamp )
        {
            throw new NotImplementedException( );
        }
        public SimpleAisSafetyRelatedAcknowledgmentMessageDataReader GetAisSafetyRelatedAcknowledgmentMessageCollectionByMmsiDataReader( Guid mmsi )
        {
            const string sql = SimpleAisSafetyRelatedAcknowledgmentMessageDataReader.BaseQuery + " WHERE " +
                    SimpleAisSafetyRelatedAcknowledgmentMessageDataReader.ViewAliasName + ".[Mmsi] = @mmsi " +
                    " ORDER BY " + SimpleAisSafetyRelatedAcknowledgmentMessageDataReader.ViewAliasName + ".[Mmsi]," +SimpleAisSafetyRelatedAcknowledgmentMessageDataReader.ViewAliasName + ".[MessageSequenceNumber]," +SimpleAisSafetyRelatedAcknowledgmentMessageDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var mmsiParameter = sqlCommandParameters.AddReference( "@mmsi", mmsi );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleAisSafetyRelatedAcknowledgmentMessageDataReader = new SimpleAisSafetyRelatedAcknowledgmentMessageDataReader( _loggerFactory, sqlDataReader );
                return simpleAisSafetyRelatedAcknowledgmentMessageDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<AisSafetyRelatedAcknowledgmentMessageObject> GetAisSafetyRelatedAcknowledgmentMessageCollectionByMmsi( Guid mmsi )
        {
            throw new NotImplementedException( );
        }
        public SimpleAisSafetyRelatedAcknowledgmentMessageDataReader GetAisSafetyRelatedAcknowledgmentMessageCollectionByMmsiAndMessageSequenceNumberDataReader( Guid mmsi, long messageSequenceNumber )
        {
            const string sql = SimpleAisSafetyRelatedAcknowledgmentMessageDataReader.BaseQuery + " WHERE " +
                    SimpleAisSafetyRelatedAcknowledgmentMessageDataReader.ViewAliasName + ".[Mmsi] = @mmsi AND " +
                    SimpleAisSafetyRelatedAcknowledgmentMessageDataReader.ViewAliasName + ".[MessageSequenceNumber] = @messageSequenceNumber " +
                    " ORDER BY " + SimpleAisSafetyRelatedAcknowledgmentMessageDataReader.ViewAliasName + ".[Mmsi]," +SimpleAisSafetyRelatedAcknowledgmentMessageDataReader.ViewAliasName + ".[MessageSequenceNumber]," +SimpleAisSafetyRelatedAcknowledgmentMessageDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var mmsiParameter = sqlCommandParameters.AddReference( "@mmsi", mmsi );
                var messageSequenceNumberParameter = sqlCommandParameters.AddInt64( "@messageSequenceNumber", messageSequenceNumber );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleAisSafetyRelatedAcknowledgmentMessageDataReader = new SimpleAisSafetyRelatedAcknowledgmentMessageDataReader( _loggerFactory, sqlDataReader );
                return simpleAisSafetyRelatedAcknowledgmentMessageDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<AisSafetyRelatedAcknowledgmentMessageObject> GetAisSafetyRelatedAcknowledgmentMessageCollectionByMmsiAndMessageSequenceNumber( Guid mmsi, long messageSequenceNumber )
        {
            throw new NotImplementedException( );
        }
        public IList<AisSafetyRelatedAcknowledgmentMessageObject> GetAisSafetyRelatedAcknowledgmentMessageCollectionByMmsiFromMessageSequenceNumber( Guid mmsi, long messageSequenceNumber )
        {
            throw new NotImplementedException( );
        }
        public IList<AisSafetyRelatedAcknowledgmentMessageObject> GetAisSafetyRelatedAcknowledgmentMessageCollectionByMmsiUntilMessageSequenceNumber( Guid mmsi, long messageSequenceNumber )
        {
            throw new NotImplementedException( );
        }
        public IList<AisSafetyRelatedAcknowledgmentMessageObject> GetAisSafetyRelatedAcknowledgmentMessageCollectionByMmsiOverMessageSequenceNumber( Guid mmsi, long fromMessageSequenceNumber, long untilMessageSequenceNumber )
        {
            throw new NotImplementedException( );
        }
        // ---------------------------------------------------------------------
        // AisStandardClassBCsPositionReportMessage queries
        // ---------------------------------------------------------------------
        public SimpleAisStandardClassBCsPositionReportMessageDataReader GetAisStandardClassBCsPositionReportMessageByIdDataReader( Guid id )
        {
            const string sql = SimpleAisStandardClassBCsPositionReportMessageDataReader.BaseQuery + "WHERE " + SimpleAisStandardClassBCsPositionReportMessageDataReader.ViewAliasName + ".[Id] = @id"; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                sqlCommandParameters.AddGuid( "@id", id );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleAisStandardClassBCsPositionReportMessageDataReader = new SimpleAisStandardClassBCsPositionReportMessageDataReader( _loggerFactory, sqlDataReader );
                return simpleAisStandardClassBCsPositionReportMessageDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public AisStandardClassBCsPositionReportMessageObject? GetAisStandardClassBCsPositionReportMessageById( Guid id )
        {
            var simpleAisStandardClassBCsPositionReportMessageDataReader = GetAisStandardClassBCsPositionReportMessageByIdDataReader( id );
            using ( simpleAisStandardClassBCsPositionReportMessageDataReader )
            {
                if ( simpleAisStandardClassBCsPositionReportMessageDataReader.Read( ) )
                {
                    var result = simpleAisStandardClassBCsPositionReportMessageDataReader.GetDataObject( );
                    return result;
                }
            }
            return null;
        }

        public void GetAisStandardClassBCsPositionReportMessageById( Guid id, Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleAisStandardClassBCsPositionReportMessageDataReader = GetAisStandardClassBCsPositionReportMessageByIdDataReader( id );
                using ( simpleAisStandardClassBCsPositionReportMessageDataReader )
                {
                    if ( simpleAisStandardClassBCsPositionReportMessageDataReader.Read( ) )
                    {
                        destinationWriter.Write( true );
                        simpleAisStandardClassBCsPositionReportMessageDataReader.WriteTo( destinationWriter );
                    }
                    else
                    {
                        destinationWriter.Write( false );
                    }
                }
            }
        }

        public SimpleAisStandardClassBCsPositionReportMessageDataReader GetAisStandardClassBCsPositionReportMessageCollectionDataReader( )
        {
            const string sql = SimpleAisStandardClassBCsPositionReportMessageDataReader.BaseQuery; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleAisStandardClassBCsPositionReportMessageDataReader = new SimpleAisStandardClassBCsPositionReportMessageDataReader( _loggerFactory, sqlDataReader );
                return simpleAisStandardClassBCsPositionReportMessageDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public IList<AisStandardClassBCsPositionReportMessageObject> GetAisStandardClassBCsPositionReportMessageCollection( )
        {
            var result = new List<AisStandardClassBCsPositionReportMessageObject>( );
            var simpleAisStandardClassBCsPositionReportMessageDataReader = GetAisStandardClassBCsPositionReportMessageCollectionDataReader( );
            using ( simpleAisStandardClassBCsPositionReportMessageDataReader )
            {
                while ( simpleAisStandardClassBCsPositionReportMessageDataReader.Read( ) )
                {
                    var data = simpleAisStandardClassBCsPositionReportMessageDataReader.GetDataObject( );
                    result.Add( data );
                }
            }
            return result;
        }

        public void GetAisStandardClassBCsPositionReportMessageCollection( Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleAisStandardClassBCsPositionReportMessageDataReader = GetAisStandardClassBCsPositionReportMessageCollectionDataReader( );
                using ( simpleAisStandardClassBCsPositionReportMessageDataReader )
                {
                    simpleAisStandardClassBCsPositionReportMessageDataReader.WriteResultSetTo( destinationWriter );
                }
            }
        }

        public SimpleAisStandardClassBCsPositionReportMessageDataReader GetAisStandardClassBCsPositionReportMessageCollectionByAisDeviceDataReader( Guid aisDevice )
        {
            const string sql = SimpleAisStandardClassBCsPositionReportMessageDataReader.BaseQuery + " WHERE " +
                    SimpleAisStandardClassBCsPositionReportMessageDataReader.ViewAliasName + ".[AisDevice] = @aisDevice " +
                    " ORDER BY " + SimpleAisStandardClassBCsPositionReportMessageDataReader.ViewAliasName + ".[AisDevice]," +SimpleAisStandardClassBCsPositionReportMessageDataReader.ViewAliasName + ".[ReceivedTimestamp]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var aisDeviceParameter = sqlCommandParameters.AddReference( "@aisDevice", aisDevice );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleAisStandardClassBCsPositionReportMessageDataReader = new SimpleAisStandardClassBCsPositionReportMessageDataReader( _loggerFactory, sqlDataReader );
                return simpleAisStandardClassBCsPositionReportMessageDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<AisStandardClassBCsPositionReportMessageObject> GetAisStandardClassBCsPositionReportMessageCollectionByAisDevice( Guid aisDevice )
        {
            throw new NotImplementedException( );
        }
        public SimpleAisStandardClassBCsPositionReportMessageDataReader GetAisStandardClassBCsPositionReportMessageByAisDeviceAndReceivedTimestampDataReader( Guid aisDevice, DateTime receivedTimestamp )
        {
            const string sql = SimpleAisStandardClassBCsPositionReportMessageDataReader.BaseQuery + " WHERE " +
                    SimpleAisStandardClassBCsPositionReportMessageDataReader.ViewAliasName + ".[AisDevice] = @aisDevice AND " +
                    SimpleAisStandardClassBCsPositionReportMessageDataReader.ViewAliasName + ".[ReceivedTimestamp] = @receivedTimestamp " +
                    " ORDER BY " + SimpleAisStandardClassBCsPositionReportMessageDataReader.ViewAliasName + ".[AisDevice]," +SimpleAisStandardClassBCsPositionReportMessageDataReader.ViewAliasName + ".[ReceivedTimestamp]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var aisDeviceParameter = sqlCommandParameters.AddReference( "@aisDevice", aisDevice );
                var receivedTimestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@receivedTimestamp", receivedTimestamp );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleAisStandardClassBCsPositionReportMessageDataReader = new SimpleAisStandardClassBCsPositionReportMessageDataReader( _loggerFactory, sqlDataReader );
                return simpleAisStandardClassBCsPositionReportMessageDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public AisStandardClassBCsPositionReportMessageObject? GetAisStandardClassBCsPositionReportMessageByAisDeviceAndReceivedTimestamp( Guid aisDevice, DateTime receivedTimestamp )
        {
            throw new NotImplementedException( );
        }
        public AisStandardClassBCsPositionReportMessageObject? GetAisStandardClassBCsPositionReportMessageByAisDeviceAtReceivedTimestamp( Guid aisDevice, DateTime receivedTimestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<AisStandardClassBCsPositionReportMessageObject> GetAisStandardClassBCsPositionReportMessageByAisDeviceFromReceivedTimestamp( Guid aisDevice, DateTime receivedTimestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<AisStandardClassBCsPositionReportMessageObject> GetAisStandardClassBCsPositionReportMessageByAisDeviceUntilReceivedTimestamp( Guid aisDevice, DateTime receivedTimestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<AisStandardClassBCsPositionReportMessageObject> GetAisStandardClassBCsPositionReportMessageByAisDeviceOverReceivedTimestamp( Guid aisDevice, DateTime fromReceivedTimestamp, DateTime untilReceivedTimestamp )
        {
            throw new NotImplementedException( );
        }
        public SimpleAisStandardClassBCsPositionReportMessageDataReader GetAisStandardClassBCsPositionReportMessageCollectionByReceivedTimestampDataReader( DateTime receivedTimestamp )
        {
            const string sql = SimpleAisStandardClassBCsPositionReportMessageDataReader.BaseQuery + " WHERE " +
                    SimpleAisStandardClassBCsPositionReportMessageDataReader.ViewAliasName + ".[ReceivedTimestamp] = @receivedTimestamp " +
                    " ORDER BY " + SimpleAisStandardClassBCsPositionReportMessageDataReader.ViewAliasName + ".[ReceivedTimestamp]," +SimpleAisStandardClassBCsPositionReportMessageDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var receivedTimestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@receivedTimestamp", receivedTimestamp );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleAisStandardClassBCsPositionReportMessageDataReader = new SimpleAisStandardClassBCsPositionReportMessageDataReader( _loggerFactory, sqlDataReader );
                return simpleAisStandardClassBCsPositionReportMessageDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<AisStandardClassBCsPositionReportMessageObject> GetAisStandardClassBCsPositionReportMessageCollectionByReceivedTimestamp( DateTime receivedTimestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<AisStandardClassBCsPositionReportMessageObject> GetAisStandardClassBCsPositionReportMessageCollectionAtReceivedTimestamp( DateTime receivedTimestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<AisStandardClassBCsPositionReportMessageObject> GetAisStandardClassBCsPositionReportMessageCollectionFromReceivedTimestamp( DateTime receivedTimestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<AisStandardClassBCsPositionReportMessageObject> GetAisStandardClassBCsPositionReportMessageCollectionUntilReceivedTimestamp( DateTime receivedTimestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<AisStandardClassBCsPositionReportMessageObject> GetAisStandardClassBCsPositionReportMessageCollectionOverReceivedTimestamp( DateTime fromReceivedTimestamp, DateTime untilReceivedTimestamp )
        {
            throw new NotImplementedException( );
        }
        public SimpleAisStandardClassBCsPositionReportMessageDataReader GetAisStandardClassBCsPositionReportMessageCollectionByMmsiDataReader( Guid mmsi )
        {
            const string sql = SimpleAisStandardClassBCsPositionReportMessageDataReader.BaseQuery + " WHERE " +
                    SimpleAisStandardClassBCsPositionReportMessageDataReader.ViewAliasName + ".[Mmsi] = @mmsi " +
                    " ORDER BY " + SimpleAisStandardClassBCsPositionReportMessageDataReader.ViewAliasName + ".[Mmsi]," +SimpleAisStandardClassBCsPositionReportMessageDataReader.ViewAliasName + ".[MessageSequenceNumber]," +SimpleAisStandardClassBCsPositionReportMessageDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var mmsiParameter = sqlCommandParameters.AddReference( "@mmsi", mmsi );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleAisStandardClassBCsPositionReportMessageDataReader = new SimpleAisStandardClassBCsPositionReportMessageDataReader( _loggerFactory, sqlDataReader );
                return simpleAisStandardClassBCsPositionReportMessageDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<AisStandardClassBCsPositionReportMessageObject> GetAisStandardClassBCsPositionReportMessageCollectionByMmsi( Guid mmsi )
        {
            throw new NotImplementedException( );
        }
        public SimpleAisStandardClassBCsPositionReportMessageDataReader GetAisStandardClassBCsPositionReportMessageCollectionByMmsiAndMessageSequenceNumberDataReader( Guid mmsi, long messageSequenceNumber )
        {
            const string sql = SimpleAisStandardClassBCsPositionReportMessageDataReader.BaseQuery + " WHERE " +
                    SimpleAisStandardClassBCsPositionReportMessageDataReader.ViewAliasName + ".[Mmsi] = @mmsi AND " +
                    SimpleAisStandardClassBCsPositionReportMessageDataReader.ViewAliasName + ".[MessageSequenceNumber] = @messageSequenceNumber " +
                    " ORDER BY " + SimpleAisStandardClassBCsPositionReportMessageDataReader.ViewAliasName + ".[Mmsi]," +SimpleAisStandardClassBCsPositionReportMessageDataReader.ViewAliasName + ".[MessageSequenceNumber]," +SimpleAisStandardClassBCsPositionReportMessageDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var mmsiParameter = sqlCommandParameters.AddReference( "@mmsi", mmsi );
                var messageSequenceNumberParameter = sqlCommandParameters.AddInt64( "@messageSequenceNumber", messageSequenceNumber );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleAisStandardClassBCsPositionReportMessageDataReader = new SimpleAisStandardClassBCsPositionReportMessageDataReader( _loggerFactory, sqlDataReader );
                return simpleAisStandardClassBCsPositionReportMessageDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<AisStandardClassBCsPositionReportMessageObject> GetAisStandardClassBCsPositionReportMessageCollectionByMmsiAndMessageSequenceNumber( Guid mmsi, long messageSequenceNumber )
        {
            throw new NotImplementedException( );
        }
        public IList<AisStandardClassBCsPositionReportMessageObject> GetAisStandardClassBCsPositionReportMessageCollectionByMmsiFromMessageSequenceNumber( Guid mmsi, long messageSequenceNumber )
        {
            throw new NotImplementedException( );
        }
        public IList<AisStandardClassBCsPositionReportMessageObject> GetAisStandardClassBCsPositionReportMessageCollectionByMmsiUntilMessageSequenceNumber( Guid mmsi, long messageSequenceNumber )
        {
            throw new NotImplementedException( );
        }
        public IList<AisStandardClassBCsPositionReportMessageObject> GetAisStandardClassBCsPositionReportMessageCollectionByMmsiOverMessageSequenceNumber( Guid mmsi, long fromMessageSequenceNumber, long untilMessageSequenceNumber )
        {
            throw new NotImplementedException( );
        }
        // ---------------------------------------------------------------------
        // AisStandardSarAircraftPositionReportMessage queries
        // ---------------------------------------------------------------------
        public SimpleAisStandardSarAircraftPositionReportMessageDataReader GetAisStandardSarAircraftPositionReportMessageByIdDataReader( Guid id )
        {
            const string sql = SimpleAisStandardSarAircraftPositionReportMessageDataReader.BaseQuery + "WHERE " + SimpleAisStandardSarAircraftPositionReportMessageDataReader.ViewAliasName + ".[Id] = @id"; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                sqlCommandParameters.AddGuid( "@id", id );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleAisStandardSarAircraftPositionReportMessageDataReader = new SimpleAisStandardSarAircraftPositionReportMessageDataReader( _loggerFactory, sqlDataReader );
                return simpleAisStandardSarAircraftPositionReportMessageDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public AisStandardSarAircraftPositionReportMessageObject? GetAisStandardSarAircraftPositionReportMessageById( Guid id )
        {
            var simpleAisStandardSarAircraftPositionReportMessageDataReader = GetAisStandardSarAircraftPositionReportMessageByIdDataReader( id );
            using ( simpleAisStandardSarAircraftPositionReportMessageDataReader )
            {
                if ( simpleAisStandardSarAircraftPositionReportMessageDataReader.Read( ) )
                {
                    var result = simpleAisStandardSarAircraftPositionReportMessageDataReader.GetDataObject( );
                    return result;
                }
            }
            return null;
        }

        public void GetAisStandardSarAircraftPositionReportMessageById( Guid id, Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleAisStandardSarAircraftPositionReportMessageDataReader = GetAisStandardSarAircraftPositionReportMessageByIdDataReader( id );
                using ( simpleAisStandardSarAircraftPositionReportMessageDataReader )
                {
                    if ( simpleAisStandardSarAircraftPositionReportMessageDataReader.Read( ) )
                    {
                        destinationWriter.Write( true );
                        simpleAisStandardSarAircraftPositionReportMessageDataReader.WriteTo( destinationWriter );
                    }
                    else
                    {
                        destinationWriter.Write( false );
                    }
                }
            }
        }

        public SimpleAisStandardSarAircraftPositionReportMessageDataReader GetAisStandardSarAircraftPositionReportMessageCollectionDataReader( )
        {
            const string sql = SimpleAisStandardSarAircraftPositionReportMessageDataReader.BaseQuery; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleAisStandardSarAircraftPositionReportMessageDataReader = new SimpleAisStandardSarAircraftPositionReportMessageDataReader( _loggerFactory, sqlDataReader );
                return simpleAisStandardSarAircraftPositionReportMessageDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public IList<AisStandardSarAircraftPositionReportMessageObject> GetAisStandardSarAircraftPositionReportMessageCollection( )
        {
            var result = new List<AisStandardSarAircraftPositionReportMessageObject>( );
            var simpleAisStandardSarAircraftPositionReportMessageDataReader = GetAisStandardSarAircraftPositionReportMessageCollectionDataReader( );
            using ( simpleAisStandardSarAircraftPositionReportMessageDataReader )
            {
                while ( simpleAisStandardSarAircraftPositionReportMessageDataReader.Read( ) )
                {
                    var data = simpleAisStandardSarAircraftPositionReportMessageDataReader.GetDataObject( );
                    result.Add( data );
                }
            }
            return result;
        }

        public void GetAisStandardSarAircraftPositionReportMessageCollection( Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleAisStandardSarAircraftPositionReportMessageDataReader = GetAisStandardSarAircraftPositionReportMessageCollectionDataReader( );
                using ( simpleAisStandardSarAircraftPositionReportMessageDataReader )
                {
                    simpleAisStandardSarAircraftPositionReportMessageDataReader.WriteResultSetTo( destinationWriter );
                }
            }
        }

        public SimpleAisStandardSarAircraftPositionReportMessageDataReader GetAisStandardSarAircraftPositionReportMessageCollectionByAisDeviceDataReader( Guid aisDevice )
        {
            const string sql = SimpleAisStandardSarAircraftPositionReportMessageDataReader.BaseQuery + " WHERE " +
                    SimpleAisStandardSarAircraftPositionReportMessageDataReader.ViewAliasName + ".[AisDevice] = @aisDevice " +
                    " ORDER BY " + SimpleAisStandardSarAircraftPositionReportMessageDataReader.ViewAliasName + ".[AisDevice]," +SimpleAisStandardSarAircraftPositionReportMessageDataReader.ViewAliasName + ".[ReceivedTimestamp]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var aisDeviceParameter = sqlCommandParameters.AddReference( "@aisDevice", aisDevice );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleAisStandardSarAircraftPositionReportMessageDataReader = new SimpleAisStandardSarAircraftPositionReportMessageDataReader( _loggerFactory, sqlDataReader );
                return simpleAisStandardSarAircraftPositionReportMessageDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<AisStandardSarAircraftPositionReportMessageObject> GetAisStandardSarAircraftPositionReportMessageCollectionByAisDevice( Guid aisDevice )
        {
            throw new NotImplementedException( );
        }
        public SimpleAisStandardSarAircraftPositionReportMessageDataReader GetAisStandardSarAircraftPositionReportMessageByAisDeviceAndReceivedTimestampDataReader( Guid aisDevice, DateTime receivedTimestamp )
        {
            const string sql = SimpleAisStandardSarAircraftPositionReportMessageDataReader.BaseQuery + " WHERE " +
                    SimpleAisStandardSarAircraftPositionReportMessageDataReader.ViewAliasName + ".[AisDevice] = @aisDevice AND " +
                    SimpleAisStandardSarAircraftPositionReportMessageDataReader.ViewAliasName + ".[ReceivedTimestamp] = @receivedTimestamp " +
                    " ORDER BY " + SimpleAisStandardSarAircraftPositionReportMessageDataReader.ViewAliasName + ".[AisDevice]," +SimpleAisStandardSarAircraftPositionReportMessageDataReader.ViewAliasName + ".[ReceivedTimestamp]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var aisDeviceParameter = sqlCommandParameters.AddReference( "@aisDevice", aisDevice );
                var receivedTimestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@receivedTimestamp", receivedTimestamp );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleAisStandardSarAircraftPositionReportMessageDataReader = new SimpleAisStandardSarAircraftPositionReportMessageDataReader( _loggerFactory, sqlDataReader );
                return simpleAisStandardSarAircraftPositionReportMessageDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public AisStandardSarAircraftPositionReportMessageObject? GetAisStandardSarAircraftPositionReportMessageByAisDeviceAndReceivedTimestamp( Guid aisDevice, DateTime receivedTimestamp )
        {
            throw new NotImplementedException( );
        }
        public AisStandardSarAircraftPositionReportMessageObject? GetAisStandardSarAircraftPositionReportMessageByAisDeviceAtReceivedTimestamp( Guid aisDevice, DateTime receivedTimestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<AisStandardSarAircraftPositionReportMessageObject> GetAisStandardSarAircraftPositionReportMessageByAisDeviceFromReceivedTimestamp( Guid aisDevice, DateTime receivedTimestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<AisStandardSarAircraftPositionReportMessageObject> GetAisStandardSarAircraftPositionReportMessageByAisDeviceUntilReceivedTimestamp( Guid aisDevice, DateTime receivedTimestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<AisStandardSarAircraftPositionReportMessageObject> GetAisStandardSarAircraftPositionReportMessageByAisDeviceOverReceivedTimestamp( Guid aisDevice, DateTime fromReceivedTimestamp, DateTime untilReceivedTimestamp )
        {
            throw new NotImplementedException( );
        }
        public SimpleAisStandardSarAircraftPositionReportMessageDataReader GetAisStandardSarAircraftPositionReportMessageCollectionByReceivedTimestampDataReader( DateTime receivedTimestamp )
        {
            const string sql = SimpleAisStandardSarAircraftPositionReportMessageDataReader.BaseQuery + " WHERE " +
                    SimpleAisStandardSarAircraftPositionReportMessageDataReader.ViewAliasName + ".[ReceivedTimestamp] = @receivedTimestamp " +
                    " ORDER BY " + SimpleAisStandardSarAircraftPositionReportMessageDataReader.ViewAliasName + ".[ReceivedTimestamp]," +SimpleAisStandardSarAircraftPositionReportMessageDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var receivedTimestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@receivedTimestamp", receivedTimestamp );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleAisStandardSarAircraftPositionReportMessageDataReader = new SimpleAisStandardSarAircraftPositionReportMessageDataReader( _loggerFactory, sqlDataReader );
                return simpleAisStandardSarAircraftPositionReportMessageDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<AisStandardSarAircraftPositionReportMessageObject> GetAisStandardSarAircraftPositionReportMessageCollectionByReceivedTimestamp( DateTime receivedTimestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<AisStandardSarAircraftPositionReportMessageObject> GetAisStandardSarAircraftPositionReportMessageCollectionAtReceivedTimestamp( DateTime receivedTimestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<AisStandardSarAircraftPositionReportMessageObject> GetAisStandardSarAircraftPositionReportMessageCollectionFromReceivedTimestamp( DateTime receivedTimestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<AisStandardSarAircraftPositionReportMessageObject> GetAisStandardSarAircraftPositionReportMessageCollectionUntilReceivedTimestamp( DateTime receivedTimestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<AisStandardSarAircraftPositionReportMessageObject> GetAisStandardSarAircraftPositionReportMessageCollectionOverReceivedTimestamp( DateTime fromReceivedTimestamp, DateTime untilReceivedTimestamp )
        {
            throw new NotImplementedException( );
        }
        public SimpleAisStandardSarAircraftPositionReportMessageDataReader GetAisStandardSarAircraftPositionReportMessageCollectionByMmsiDataReader( Guid mmsi )
        {
            const string sql = SimpleAisStandardSarAircraftPositionReportMessageDataReader.BaseQuery + " WHERE " +
                    SimpleAisStandardSarAircraftPositionReportMessageDataReader.ViewAliasName + ".[Mmsi] = @mmsi " +
                    " ORDER BY " + SimpleAisStandardSarAircraftPositionReportMessageDataReader.ViewAliasName + ".[Mmsi]," +SimpleAisStandardSarAircraftPositionReportMessageDataReader.ViewAliasName + ".[MessageSequenceNumber]," +SimpleAisStandardSarAircraftPositionReportMessageDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var mmsiParameter = sqlCommandParameters.AddReference( "@mmsi", mmsi );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleAisStandardSarAircraftPositionReportMessageDataReader = new SimpleAisStandardSarAircraftPositionReportMessageDataReader( _loggerFactory, sqlDataReader );
                return simpleAisStandardSarAircraftPositionReportMessageDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<AisStandardSarAircraftPositionReportMessageObject> GetAisStandardSarAircraftPositionReportMessageCollectionByMmsi( Guid mmsi )
        {
            throw new NotImplementedException( );
        }
        public SimpleAisStandardSarAircraftPositionReportMessageDataReader GetAisStandardSarAircraftPositionReportMessageCollectionByMmsiAndMessageSequenceNumberDataReader( Guid mmsi, long messageSequenceNumber )
        {
            const string sql = SimpleAisStandardSarAircraftPositionReportMessageDataReader.BaseQuery + " WHERE " +
                    SimpleAisStandardSarAircraftPositionReportMessageDataReader.ViewAliasName + ".[Mmsi] = @mmsi AND " +
                    SimpleAisStandardSarAircraftPositionReportMessageDataReader.ViewAliasName + ".[MessageSequenceNumber] = @messageSequenceNumber " +
                    " ORDER BY " + SimpleAisStandardSarAircraftPositionReportMessageDataReader.ViewAliasName + ".[Mmsi]," +SimpleAisStandardSarAircraftPositionReportMessageDataReader.ViewAliasName + ".[MessageSequenceNumber]," +SimpleAisStandardSarAircraftPositionReportMessageDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var mmsiParameter = sqlCommandParameters.AddReference( "@mmsi", mmsi );
                var messageSequenceNumberParameter = sqlCommandParameters.AddInt64( "@messageSequenceNumber", messageSequenceNumber );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleAisStandardSarAircraftPositionReportMessageDataReader = new SimpleAisStandardSarAircraftPositionReportMessageDataReader( _loggerFactory, sqlDataReader );
                return simpleAisStandardSarAircraftPositionReportMessageDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<AisStandardSarAircraftPositionReportMessageObject> GetAisStandardSarAircraftPositionReportMessageCollectionByMmsiAndMessageSequenceNumber( Guid mmsi, long messageSequenceNumber )
        {
            throw new NotImplementedException( );
        }
        public IList<AisStandardSarAircraftPositionReportMessageObject> GetAisStandardSarAircraftPositionReportMessageCollectionByMmsiFromMessageSequenceNumber( Guid mmsi, long messageSequenceNumber )
        {
            throw new NotImplementedException( );
        }
        public IList<AisStandardSarAircraftPositionReportMessageObject> GetAisStandardSarAircraftPositionReportMessageCollectionByMmsiUntilMessageSequenceNumber( Guid mmsi, long messageSequenceNumber )
        {
            throw new NotImplementedException( );
        }
        public IList<AisStandardSarAircraftPositionReportMessageObject> GetAisStandardSarAircraftPositionReportMessageCollectionByMmsiOverMessageSequenceNumber( Guid mmsi, long fromMessageSequenceNumber, long untilMessageSequenceNumber )
        {
            throw new NotImplementedException( );
        }
        // ---------------------------------------------------------------------
        // AisStaticAndVoyageRelatedDataMessage queries
        // ---------------------------------------------------------------------
        public SimpleAisStaticAndVoyageRelatedDataMessageDataReader GetAisStaticAndVoyageRelatedDataMessageByIdDataReader( Guid id )
        {
            const string sql = SimpleAisStaticAndVoyageRelatedDataMessageDataReader.BaseQuery + "WHERE " + SimpleAisStaticAndVoyageRelatedDataMessageDataReader.ViewAliasName + ".[Id] = @id"; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                sqlCommandParameters.AddGuid( "@id", id );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleAisStaticAndVoyageRelatedDataMessageDataReader = new SimpleAisStaticAndVoyageRelatedDataMessageDataReader( _loggerFactory, sqlDataReader );
                return simpleAisStaticAndVoyageRelatedDataMessageDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public AisStaticAndVoyageRelatedDataMessageObject? GetAisStaticAndVoyageRelatedDataMessageById( Guid id )
        {
            var simpleAisStaticAndVoyageRelatedDataMessageDataReader = GetAisStaticAndVoyageRelatedDataMessageByIdDataReader( id );
            using ( simpleAisStaticAndVoyageRelatedDataMessageDataReader )
            {
                if ( simpleAisStaticAndVoyageRelatedDataMessageDataReader.Read( ) )
                {
                    var result = simpleAisStaticAndVoyageRelatedDataMessageDataReader.GetDataObject( );
                    return result;
                }
            }
            return null;
        }

        public void GetAisStaticAndVoyageRelatedDataMessageById( Guid id, Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleAisStaticAndVoyageRelatedDataMessageDataReader = GetAisStaticAndVoyageRelatedDataMessageByIdDataReader( id );
                using ( simpleAisStaticAndVoyageRelatedDataMessageDataReader )
                {
                    if ( simpleAisStaticAndVoyageRelatedDataMessageDataReader.Read( ) )
                    {
                        destinationWriter.Write( true );
                        simpleAisStaticAndVoyageRelatedDataMessageDataReader.WriteTo( destinationWriter );
                    }
                    else
                    {
                        destinationWriter.Write( false );
                    }
                }
            }
        }

        public SimpleAisStaticAndVoyageRelatedDataMessageDataReader GetAisStaticAndVoyageRelatedDataMessageCollectionDataReader( )
        {
            const string sql = SimpleAisStaticAndVoyageRelatedDataMessageDataReader.BaseQuery; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleAisStaticAndVoyageRelatedDataMessageDataReader = new SimpleAisStaticAndVoyageRelatedDataMessageDataReader( _loggerFactory, sqlDataReader );
                return simpleAisStaticAndVoyageRelatedDataMessageDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public IList<AisStaticAndVoyageRelatedDataMessageObject> GetAisStaticAndVoyageRelatedDataMessageCollection( )
        {
            var result = new List<AisStaticAndVoyageRelatedDataMessageObject>( );
            var simpleAisStaticAndVoyageRelatedDataMessageDataReader = GetAisStaticAndVoyageRelatedDataMessageCollectionDataReader( );
            using ( simpleAisStaticAndVoyageRelatedDataMessageDataReader )
            {
                while ( simpleAisStaticAndVoyageRelatedDataMessageDataReader.Read( ) )
                {
                    var data = simpleAisStaticAndVoyageRelatedDataMessageDataReader.GetDataObject( );
                    result.Add( data );
                }
            }
            return result;
        }

        public void GetAisStaticAndVoyageRelatedDataMessageCollection( Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleAisStaticAndVoyageRelatedDataMessageDataReader = GetAisStaticAndVoyageRelatedDataMessageCollectionDataReader( );
                using ( simpleAisStaticAndVoyageRelatedDataMessageDataReader )
                {
                    simpleAisStaticAndVoyageRelatedDataMessageDataReader.WriteResultSetTo( destinationWriter );
                }
            }
        }

        public SimpleAisStaticAndVoyageRelatedDataMessageDataReader GetAisStaticAndVoyageRelatedDataMessageCollectionByAisDeviceDataReader( Guid aisDevice )
        {
            const string sql = SimpleAisStaticAndVoyageRelatedDataMessageDataReader.BaseQuery + " WHERE " +
                    SimpleAisStaticAndVoyageRelatedDataMessageDataReader.ViewAliasName + ".[AisDevice] = @aisDevice " +
                    " ORDER BY " + SimpleAisStaticAndVoyageRelatedDataMessageDataReader.ViewAliasName + ".[AisDevice]," +SimpleAisStaticAndVoyageRelatedDataMessageDataReader.ViewAliasName + ".[ReceivedTimestamp]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var aisDeviceParameter = sqlCommandParameters.AddReference( "@aisDevice", aisDevice );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleAisStaticAndVoyageRelatedDataMessageDataReader = new SimpleAisStaticAndVoyageRelatedDataMessageDataReader( _loggerFactory, sqlDataReader );
                return simpleAisStaticAndVoyageRelatedDataMessageDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<AisStaticAndVoyageRelatedDataMessageObject> GetAisStaticAndVoyageRelatedDataMessageCollectionByAisDevice( Guid aisDevice )
        {
            throw new NotImplementedException( );
        }
        public SimpleAisStaticAndVoyageRelatedDataMessageDataReader GetAisStaticAndVoyageRelatedDataMessageByAisDeviceAndReceivedTimestampDataReader( Guid aisDevice, DateTime receivedTimestamp )
        {
            const string sql = SimpleAisStaticAndVoyageRelatedDataMessageDataReader.BaseQuery + " WHERE " +
                    SimpleAisStaticAndVoyageRelatedDataMessageDataReader.ViewAliasName + ".[AisDevice] = @aisDevice AND " +
                    SimpleAisStaticAndVoyageRelatedDataMessageDataReader.ViewAliasName + ".[ReceivedTimestamp] = @receivedTimestamp " +
                    " ORDER BY " + SimpleAisStaticAndVoyageRelatedDataMessageDataReader.ViewAliasName + ".[AisDevice]," +SimpleAisStaticAndVoyageRelatedDataMessageDataReader.ViewAliasName + ".[ReceivedTimestamp]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var aisDeviceParameter = sqlCommandParameters.AddReference( "@aisDevice", aisDevice );
                var receivedTimestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@receivedTimestamp", receivedTimestamp );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleAisStaticAndVoyageRelatedDataMessageDataReader = new SimpleAisStaticAndVoyageRelatedDataMessageDataReader( _loggerFactory, sqlDataReader );
                return simpleAisStaticAndVoyageRelatedDataMessageDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public AisStaticAndVoyageRelatedDataMessageObject? GetAisStaticAndVoyageRelatedDataMessageByAisDeviceAndReceivedTimestamp( Guid aisDevice, DateTime receivedTimestamp )
        {
            throw new NotImplementedException( );
        }
        public AisStaticAndVoyageRelatedDataMessageObject? GetAisStaticAndVoyageRelatedDataMessageByAisDeviceAtReceivedTimestamp( Guid aisDevice, DateTime receivedTimestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<AisStaticAndVoyageRelatedDataMessageObject> GetAisStaticAndVoyageRelatedDataMessageByAisDeviceFromReceivedTimestamp( Guid aisDevice, DateTime receivedTimestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<AisStaticAndVoyageRelatedDataMessageObject> GetAisStaticAndVoyageRelatedDataMessageByAisDeviceUntilReceivedTimestamp( Guid aisDevice, DateTime receivedTimestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<AisStaticAndVoyageRelatedDataMessageObject> GetAisStaticAndVoyageRelatedDataMessageByAisDeviceOverReceivedTimestamp( Guid aisDevice, DateTime fromReceivedTimestamp, DateTime untilReceivedTimestamp )
        {
            throw new NotImplementedException( );
        }
        public SimpleAisStaticAndVoyageRelatedDataMessageDataReader GetAisStaticAndVoyageRelatedDataMessageCollectionByReceivedTimestampDataReader( DateTime receivedTimestamp )
        {
            const string sql = SimpleAisStaticAndVoyageRelatedDataMessageDataReader.BaseQuery + " WHERE " +
                    SimpleAisStaticAndVoyageRelatedDataMessageDataReader.ViewAliasName + ".[ReceivedTimestamp] = @receivedTimestamp " +
                    " ORDER BY " + SimpleAisStaticAndVoyageRelatedDataMessageDataReader.ViewAliasName + ".[ReceivedTimestamp]," +SimpleAisStaticAndVoyageRelatedDataMessageDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var receivedTimestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@receivedTimestamp", receivedTimestamp );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleAisStaticAndVoyageRelatedDataMessageDataReader = new SimpleAisStaticAndVoyageRelatedDataMessageDataReader( _loggerFactory, sqlDataReader );
                return simpleAisStaticAndVoyageRelatedDataMessageDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<AisStaticAndVoyageRelatedDataMessageObject> GetAisStaticAndVoyageRelatedDataMessageCollectionByReceivedTimestamp( DateTime receivedTimestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<AisStaticAndVoyageRelatedDataMessageObject> GetAisStaticAndVoyageRelatedDataMessageCollectionAtReceivedTimestamp( DateTime receivedTimestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<AisStaticAndVoyageRelatedDataMessageObject> GetAisStaticAndVoyageRelatedDataMessageCollectionFromReceivedTimestamp( DateTime receivedTimestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<AisStaticAndVoyageRelatedDataMessageObject> GetAisStaticAndVoyageRelatedDataMessageCollectionUntilReceivedTimestamp( DateTime receivedTimestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<AisStaticAndVoyageRelatedDataMessageObject> GetAisStaticAndVoyageRelatedDataMessageCollectionOverReceivedTimestamp( DateTime fromReceivedTimestamp, DateTime untilReceivedTimestamp )
        {
            throw new NotImplementedException( );
        }
        public SimpleAisStaticAndVoyageRelatedDataMessageDataReader GetAisStaticAndVoyageRelatedDataMessageCollectionByMmsiDataReader( Guid mmsi )
        {
            const string sql = SimpleAisStaticAndVoyageRelatedDataMessageDataReader.BaseQuery + " WHERE " +
                    SimpleAisStaticAndVoyageRelatedDataMessageDataReader.ViewAliasName + ".[Mmsi] = @mmsi " +
                    " ORDER BY " + SimpleAisStaticAndVoyageRelatedDataMessageDataReader.ViewAliasName + ".[Mmsi]," +SimpleAisStaticAndVoyageRelatedDataMessageDataReader.ViewAliasName + ".[MessageSequenceNumber]," +SimpleAisStaticAndVoyageRelatedDataMessageDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var mmsiParameter = sqlCommandParameters.AddReference( "@mmsi", mmsi );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleAisStaticAndVoyageRelatedDataMessageDataReader = new SimpleAisStaticAndVoyageRelatedDataMessageDataReader( _loggerFactory, sqlDataReader );
                return simpleAisStaticAndVoyageRelatedDataMessageDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<AisStaticAndVoyageRelatedDataMessageObject> GetAisStaticAndVoyageRelatedDataMessageCollectionByMmsi( Guid mmsi )
        {
            throw new NotImplementedException( );
        }
        public SimpleAisStaticAndVoyageRelatedDataMessageDataReader GetAisStaticAndVoyageRelatedDataMessageCollectionByMmsiAndMessageSequenceNumberDataReader( Guid mmsi, long messageSequenceNumber )
        {
            const string sql = SimpleAisStaticAndVoyageRelatedDataMessageDataReader.BaseQuery + " WHERE " +
                    SimpleAisStaticAndVoyageRelatedDataMessageDataReader.ViewAliasName + ".[Mmsi] = @mmsi AND " +
                    SimpleAisStaticAndVoyageRelatedDataMessageDataReader.ViewAliasName + ".[MessageSequenceNumber] = @messageSequenceNumber " +
                    " ORDER BY " + SimpleAisStaticAndVoyageRelatedDataMessageDataReader.ViewAliasName + ".[Mmsi]," +SimpleAisStaticAndVoyageRelatedDataMessageDataReader.ViewAliasName + ".[MessageSequenceNumber]," +SimpleAisStaticAndVoyageRelatedDataMessageDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var mmsiParameter = sqlCommandParameters.AddReference( "@mmsi", mmsi );
                var messageSequenceNumberParameter = sqlCommandParameters.AddInt64( "@messageSequenceNumber", messageSequenceNumber );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleAisStaticAndVoyageRelatedDataMessageDataReader = new SimpleAisStaticAndVoyageRelatedDataMessageDataReader( _loggerFactory, sqlDataReader );
                return simpleAisStaticAndVoyageRelatedDataMessageDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<AisStaticAndVoyageRelatedDataMessageObject> GetAisStaticAndVoyageRelatedDataMessageCollectionByMmsiAndMessageSequenceNumber( Guid mmsi, long messageSequenceNumber )
        {
            throw new NotImplementedException( );
        }
        public IList<AisStaticAndVoyageRelatedDataMessageObject> GetAisStaticAndVoyageRelatedDataMessageCollectionByMmsiFromMessageSequenceNumber( Guid mmsi, long messageSequenceNumber )
        {
            throw new NotImplementedException( );
        }
        public IList<AisStaticAndVoyageRelatedDataMessageObject> GetAisStaticAndVoyageRelatedDataMessageCollectionByMmsiUntilMessageSequenceNumber( Guid mmsi, long messageSequenceNumber )
        {
            throw new NotImplementedException( );
        }
        public IList<AisStaticAndVoyageRelatedDataMessageObject> GetAisStaticAndVoyageRelatedDataMessageCollectionByMmsiOverMessageSequenceNumber( Guid mmsi, long fromMessageSequenceNumber, long untilMessageSequenceNumber )
        {
            throw new NotImplementedException( );
        }
        public SimpleAisStaticAndVoyageRelatedDataMessageDataReader GetAisStaticAndVoyageRelatedDataMessageCollectionByImoNumberDataReader( Guid imoNumber )
        {
            const string sql = SimpleAisStaticAndVoyageRelatedDataMessageDataReader.BaseQuery + " WHERE " +
                    SimpleAisStaticAndVoyageRelatedDataMessageDataReader.ViewAliasName + ".[ImoNumber] = @imoNumber " +
                    " ORDER BY " + SimpleAisStaticAndVoyageRelatedDataMessageDataReader.ViewAliasName + ".[ImoNumber]," +SimpleAisStaticAndVoyageRelatedDataMessageDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var imoNumberParameter = sqlCommandParameters.AddReference( "@imoNumber", imoNumber );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleAisStaticAndVoyageRelatedDataMessageDataReader = new SimpleAisStaticAndVoyageRelatedDataMessageDataReader( _loggerFactory, sqlDataReader );
                return simpleAisStaticAndVoyageRelatedDataMessageDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<AisStaticAndVoyageRelatedDataMessageObject> GetAisStaticAndVoyageRelatedDataMessageCollectionByImoNumber( Guid imoNumber )
        {
            throw new NotImplementedException( );
        }
        public SimpleAisStaticAndVoyageRelatedDataMessageDataReader GetAisStaticAndVoyageRelatedDataMessageCollectionByCallsignDataReader( Guid callsign )
        {
            const string sql = SimpleAisStaticAndVoyageRelatedDataMessageDataReader.BaseQuery + " WHERE " +
                    SimpleAisStaticAndVoyageRelatedDataMessageDataReader.ViewAliasName + ".[Callsign] = @callsign " +
                    " ORDER BY " + SimpleAisStaticAndVoyageRelatedDataMessageDataReader.ViewAliasName + ".[Callsign]," +SimpleAisStaticAndVoyageRelatedDataMessageDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var callsignParameter = sqlCommandParameters.AddReference( "@callsign", callsign );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleAisStaticAndVoyageRelatedDataMessageDataReader = new SimpleAisStaticAndVoyageRelatedDataMessageDataReader( _loggerFactory, sqlDataReader );
                return simpleAisStaticAndVoyageRelatedDataMessageDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<AisStaticAndVoyageRelatedDataMessageObject> GetAisStaticAndVoyageRelatedDataMessageCollectionByCallsign( Guid callsign )
        {
            throw new NotImplementedException( );
        }
        public SimpleAisStaticAndVoyageRelatedDataMessageDataReader GetAisStaticAndVoyageRelatedDataMessageCollectionByShipNameDataReader( Guid shipName )
        {
            const string sql = SimpleAisStaticAndVoyageRelatedDataMessageDataReader.BaseQuery + " WHERE " +
                    SimpleAisStaticAndVoyageRelatedDataMessageDataReader.ViewAliasName + ".[ShipName] = @shipName " +
                    " ORDER BY " + SimpleAisStaticAndVoyageRelatedDataMessageDataReader.ViewAliasName + ".[ShipName]," +SimpleAisStaticAndVoyageRelatedDataMessageDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var shipNameParameter = sqlCommandParameters.AddReference( "@shipName", shipName );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleAisStaticAndVoyageRelatedDataMessageDataReader = new SimpleAisStaticAndVoyageRelatedDataMessageDataReader( _loggerFactory, sqlDataReader );
                return simpleAisStaticAndVoyageRelatedDataMessageDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<AisStaticAndVoyageRelatedDataMessageObject> GetAisStaticAndVoyageRelatedDataMessageCollectionByShipName( Guid shipName )
        {
            throw new NotImplementedException( );
        }
        // ---------------------------------------------------------------------
        // AisStaticDataReportMessage queries
        // ---------------------------------------------------------------------
        public ComplexAisStaticDataReportMessageDataReader GetAisStaticDataReportMessageByIdDataReader( Guid id )
        {
            const string sql = ComplexAisStaticDataReportMessageDataReader.BaseQuery + "WHERE " + ComplexAisStaticDataReportMessageDataReader.ViewAliasName + ".[Id] = @id"; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                sqlCommandParameters.AddGuid( "@id", id );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var complexAisStaticDataReportMessageDataReader = new ComplexAisStaticDataReportMessageDataReader( _loggerFactory, sqlDataReader );
                return complexAisStaticDataReportMessageDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public AisStaticDataReportMessageObject? GetAisStaticDataReportMessageById( Guid id )
        {
            var complexAisStaticDataReportMessageDataReader = GetAisStaticDataReportMessageByIdDataReader( id );
            using ( complexAisStaticDataReportMessageDataReader )
            {
                if ( complexAisStaticDataReportMessageDataReader.Read( ) )
                {
                    var result = complexAisStaticDataReportMessageDataReader.GetDataObject( );
                    return result;
                }
            }
            return null;
        }

        public void GetAisStaticDataReportMessageById( Guid id, Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var complexAisStaticDataReportMessageDataReader = GetAisStaticDataReportMessageByIdDataReader( id );
                using ( complexAisStaticDataReportMessageDataReader )
                {
                    if ( complexAisStaticDataReportMessageDataReader.Read( ) )
                    {
                        destinationWriter.Write( true );
                        complexAisStaticDataReportMessageDataReader.WriteTo( destinationWriter );
                    }
                    else
                    {
                        destinationWriter.Write( false );
                    }
                }
            }
        }

        public ComplexAisStaticDataReportMessageDataReader GetAisStaticDataReportMessageCollectionDataReader( )
        {
            const string sql = ComplexAisStaticDataReportMessageDataReader.BaseQuery; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var complexAisStaticDataReportMessageDataReader = new ComplexAisStaticDataReportMessageDataReader( _loggerFactory, sqlDataReader );
                return complexAisStaticDataReportMessageDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public IList<AisStaticDataReportMessageObject> GetAisStaticDataReportMessageCollection( )
        {
            var result = new List<AisStaticDataReportMessageObject>( );
            var complexAisStaticDataReportMessageDataReader = GetAisStaticDataReportMessageCollectionDataReader( );
            using ( complexAisStaticDataReportMessageDataReader )
            {
                while ( complexAisStaticDataReportMessageDataReader.Read( ) )
                {
                    var data = complexAisStaticDataReportMessageDataReader.GetDataObject( );
                    result.Add( data );
                }
            }
            return result;
        }

        public void GetAisStaticDataReportMessageCollection( Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var complexAisStaticDataReportMessageDataReader = GetAisStaticDataReportMessageCollectionDataReader( );
                using ( complexAisStaticDataReportMessageDataReader )
                {
                    complexAisStaticDataReportMessageDataReader.WriteResultSetTo( destinationWriter );
                }
            }
        }

        public ComplexAisStaticDataReportMessageDataReader GetAisStaticDataReportMessageCollectionByAisDeviceDataReader( Guid aisDevice )
        {
            const string sql = ComplexAisStaticDataReportMessageDataReader.BaseQuery + " WHERE " +
                    ComplexAisStaticDataReportMessageDataReader.ViewAliasName + ".[AisDevice] = @aisDevice " +
                    " ORDER BY " + ComplexAisStaticDataReportMessageDataReader.ViewAliasName + ".[AisDevice]," +ComplexAisStaticDataReportMessageDataReader.ViewAliasName + ".[ReceivedTimestamp]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var aisDeviceParameter = sqlCommandParameters.AddReference( "@aisDevice", aisDevice );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var complexAisStaticDataReportMessageDataReader = new ComplexAisStaticDataReportMessageDataReader( _loggerFactory, sqlDataReader );
                return complexAisStaticDataReportMessageDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<AisStaticDataReportMessageObject> GetAisStaticDataReportMessageCollectionByAisDevice( Guid aisDevice )
        {
            throw new NotImplementedException( );
        }
        public ComplexAisStaticDataReportMessageDataReader GetAisStaticDataReportMessageByAisDeviceAndReceivedTimestampDataReader( Guid aisDevice, DateTime receivedTimestamp )
        {
            const string sql = ComplexAisStaticDataReportMessageDataReader.BaseQuery + " WHERE " +
                    ComplexAisStaticDataReportMessageDataReader.ViewAliasName + ".[AisDevice] = @aisDevice AND " +
                    ComplexAisStaticDataReportMessageDataReader.ViewAliasName + ".[ReceivedTimestamp] = @receivedTimestamp " +
                    " ORDER BY " + ComplexAisStaticDataReportMessageDataReader.ViewAliasName + ".[AisDevice]," +ComplexAisStaticDataReportMessageDataReader.ViewAliasName + ".[ReceivedTimestamp]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var aisDeviceParameter = sqlCommandParameters.AddReference( "@aisDevice", aisDevice );
                var receivedTimestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@receivedTimestamp", receivedTimestamp );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var complexAisStaticDataReportMessageDataReader = new ComplexAisStaticDataReportMessageDataReader( _loggerFactory, sqlDataReader );
                return complexAisStaticDataReportMessageDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public AisStaticDataReportMessageObject? GetAisStaticDataReportMessageByAisDeviceAndReceivedTimestamp( Guid aisDevice, DateTime receivedTimestamp )
        {
            throw new NotImplementedException( );
        }
        public AisStaticDataReportMessageObject? GetAisStaticDataReportMessageByAisDeviceAtReceivedTimestamp( Guid aisDevice, DateTime receivedTimestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<AisStaticDataReportMessageObject> GetAisStaticDataReportMessageByAisDeviceFromReceivedTimestamp( Guid aisDevice, DateTime receivedTimestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<AisStaticDataReportMessageObject> GetAisStaticDataReportMessageByAisDeviceUntilReceivedTimestamp( Guid aisDevice, DateTime receivedTimestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<AisStaticDataReportMessageObject> GetAisStaticDataReportMessageByAisDeviceOverReceivedTimestamp( Guid aisDevice, DateTime fromReceivedTimestamp, DateTime untilReceivedTimestamp )
        {
            throw new NotImplementedException( );
        }
        public ComplexAisStaticDataReportMessageDataReader GetAisStaticDataReportMessageCollectionByReceivedTimestampDataReader( DateTime receivedTimestamp )
        {
            const string sql = ComplexAisStaticDataReportMessageDataReader.BaseQuery + " WHERE " +
                    ComplexAisStaticDataReportMessageDataReader.ViewAliasName + ".[ReceivedTimestamp] = @receivedTimestamp " +
                    " ORDER BY " + ComplexAisStaticDataReportMessageDataReader.ViewAliasName + ".[ReceivedTimestamp]," +ComplexAisStaticDataReportMessageDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var receivedTimestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@receivedTimestamp", receivedTimestamp );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var complexAisStaticDataReportMessageDataReader = new ComplexAisStaticDataReportMessageDataReader( _loggerFactory, sqlDataReader );
                return complexAisStaticDataReportMessageDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<AisStaticDataReportMessageObject> GetAisStaticDataReportMessageCollectionByReceivedTimestamp( DateTime receivedTimestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<AisStaticDataReportMessageObject> GetAisStaticDataReportMessageCollectionAtReceivedTimestamp( DateTime receivedTimestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<AisStaticDataReportMessageObject> GetAisStaticDataReportMessageCollectionFromReceivedTimestamp( DateTime receivedTimestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<AisStaticDataReportMessageObject> GetAisStaticDataReportMessageCollectionUntilReceivedTimestamp( DateTime receivedTimestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<AisStaticDataReportMessageObject> GetAisStaticDataReportMessageCollectionOverReceivedTimestamp( DateTime fromReceivedTimestamp, DateTime untilReceivedTimestamp )
        {
            throw new NotImplementedException( );
        }
        public ComplexAisStaticDataReportMessageDataReader GetAisStaticDataReportMessageCollectionByMmsiDataReader( Guid mmsi )
        {
            const string sql = ComplexAisStaticDataReportMessageDataReader.BaseQuery + " WHERE " +
                    ComplexAisStaticDataReportMessageDataReader.ViewAliasName + ".[Mmsi] = @mmsi " +
                    " ORDER BY " + ComplexAisStaticDataReportMessageDataReader.ViewAliasName + ".[Mmsi]," +ComplexAisStaticDataReportMessageDataReader.ViewAliasName + ".[MessageSequenceNumber]," +ComplexAisStaticDataReportMessageDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var mmsiParameter = sqlCommandParameters.AddReference( "@mmsi", mmsi );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var complexAisStaticDataReportMessageDataReader = new ComplexAisStaticDataReportMessageDataReader( _loggerFactory, sqlDataReader );
                return complexAisStaticDataReportMessageDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<AisStaticDataReportMessageObject> GetAisStaticDataReportMessageCollectionByMmsi( Guid mmsi )
        {
            throw new NotImplementedException( );
        }
        public ComplexAisStaticDataReportMessageDataReader GetAisStaticDataReportMessageCollectionByMmsiAndMessageSequenceNumberDataReader( Guid mmsi, long messageSequenceNumber )
        {
            const string sql = ComplexAisStaticDataReportMessageDataReader.BaseQuery + " WHERE " +
                    ComplexAisStaticDataReportMessageDataReader.ViewAliasName + ".[Mmsi] = @mmsi AND " +
                    ComplexAisStaticDataReportMessageDataReader.ViewAliasName + ".[MessageSequenceNumber] = @messageSequenceNumber " +
                    " ORDER BY " + ComplexAisStaticDataReportMessageDataReader.ViewAliasName + ".[Mmsi]," +ComplexAisStaticDataReportMessageDataReader.ViewAliasName + ".[MessageSequenceNumber]," +ComplexAisStaticDataReportMessageDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var mmsiParameter = sqlCommandParameters.AddReference( "@mmsi", mmsi );
                var messageSequenceNumberParameter = sqlCommandParameters.AddInt64( "@messageSequenceNumber", messageSequenceNumber );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var complexAisStaticDataReportMessageDataReader = new ComplexAisStaticDataReportMessageDataReader( _loggerFactory, sqlDataReader );
                return complexAisStaticDataReportMessageDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<AisStaticDataReportMessageObject> GetAisStaticDataReportMessageCollectionByMmsiAndMessageSequenceNumber( Guid mmsi, long messageSequenceNumber )
        {
            throw new NotImplementedException( );
        }
        public IList<AisStaticDataReportMessageObject> GetAisStaticDataReportMessageCollectionByMmsiFromMessageSequenceNumber( Guid mmsi, long messageSequenceNumber )
        {
            throw new NotImplementedException( );
        }
        public IList<AisStaticDataReportMessageObject> GetAisStaticDataReportMessageCollectionByMmsiUntilMessageSequenceNumber( Guid mmsi, long messageSequenceNumber )
        {
            throw new NotImplementedException( );
        }
        public IList<AisStaticDataReportMessageObject> GetAisStaticDataReportMessageCollectionByMmsiOverMessageSequenceNumber( Guid mmsi, long fromMessageSequenceNumber, long untilMessageSequenceNumber )
        {
            throw new NotImplementedException( );
        }
        // ---------------------------------------------------------------------
        // AisStaticDataReportPartAMessage queries
        // ---------------------------------------------------------------------
        public SimpleAisStaticDataReportPartAMessageDataReader GetAisStaticDataReportPartAMessageByIdDataReader( Guid id )
        {
            const string sql = SimpleAisStaticDataReportPartAMessageDataReader.BaseQuery + "WHERE " + SimpleAisStaticDataReportPartAMessageDataReader.ViewAliasName + ".[Id] = @id"; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                sqlCommandParameters.AddGuid( "@id", id );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleAisStaticDataReportPartAMessageDataReader = new SimpleAisStaticDataReportPartAMessageDataReader( _loggerFactory, sqlDataReader );
                return simpleAisStaticDataReportPartAMessageDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public AisStaticDataReportPartAMessageObject? GetAisStaticDataReportPartAMessageById( Guid id )
        {
            var simpleAisStaticDataReportPartAMessageDataReader = GetAisStaticDataReportPartAMessageByIdDataReader( id );
            using ( simpleAisStaticDataReportPartAMessageDataReader )
            {
                if ( simpleAisStaticDataReportPartAMessageDataReader.Read( ) )
                {
                    var result = simpleAisStaticDataReportPartAMessageDataReader.GetDataObject( );
                    return result;
                }
            }
            return null;
        }

        public void GetAisStaticDataReportPartAMessageById( Guid id, Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleAisStaticDataReportPartAMessageDataReader = GetAisStaticDataReportPartAMessageByIdDataReader( id );
                using ( simpleAisStaticDataReportPartAMessageDataReader )
                {
                    if ( simpleAisStaticDataReportPartAMessageDataReader.Read( ) )
                    {
                        destinationWriter.Write( true );
                        simpleAisStaticDataReportPartAMessageDataReader.WriteTo( destinationWriter );
                    }
                    else
                    {
                        destinationWriter.Write( false );
                    }
                }
            }
        }

        public SimpleAisStaticDataReportPartAMessageDataReader GetAisStaticDataReportPartAMessageCollectionDataReader( )
        {
            const string sql = SimpleAisStaticDataReportPartAMessageDataReader.BaseQuery; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleAisStaticDataReportPartAMessageDataReader = new SimpleAisStaticDataReportPartAMessageDataReader( _loggerFactory, sqlDataReader );
                return simpleAisStaticDataReportPartAMessageDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public IList<AisStaticDataReportPartAMessageObject> GetAisStaticDataReportPartAMessageCollection( )
        {
            var result = new List<AisStaticDataReportPartAMessageObject>( );
            var simpleAisStaticDataReportPartAMessageDataReader = GetAisStaticDataReportPartAMessageCollectionDataReader( );
            using ( simpleAisStaticDataReportPartAMessageDataReader )
            {
                while ( simpleAisStaticDataReportPartAMessageDataReader.Read( ) )
                {
                    var data = simpleAisStaticDataReportPartAMessageDataReader.GetDataObject( );
                    result.Add( data );
                }
            }
            return result;
        }

        public void GetAisStaticDataReportPartAMessageCollection( Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleAisStaticDataReportPartAMessageDataReader = GetAisStaticDataReportPartAMessageCollectionDataReader( );
                using ( simpleAisStaticDataReportPartAMessageDataReader )
                {
                    simpleAisStaticDataReportPartAMessageDataReader.WriteResultSetTo( destinationWriter );
                }
            }
        }

        public SimpleAisStaticDataReportPartAMessageDataReader GetAisStaticDataReportPartAMessageCollectionByAisDeviceDataReader( Guid aisDevice )
        {
            const string sql = SimpleAisStaticDataReportPartAMessageDataReader.BaseQuery + " WHERE " +
                    SimpleAisStaticDataReportPartAMessageDataReader.ViewAliasName + ".[AisDevice] = @aisDevice " +
                    " ORDER BY " + SimpleAisStaticDataReportPartAMessageDataReader.ViewAliasName + ".[AisDevice]," +SimpleAisStaticDataReportPartAMessageDataReader.ViewAliasName + ".[ReceivedTimestamp]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var aisDeviceParameter = sqlCommandParameters.AddReference( "@aisDevice", aisDevice );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleAisStaticDataReportPartAMessageDataReader = new SimpleAisStaticDataReportPartAMessageDataReader( _loggerFactory, sqlDataReader );
                return simpleAisStaticDataReportPartAMessageDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<AisStaticDataReportPartAMessageObject> GetAisStaticDataReportPartAMessageCollectionByAisDevice( Guid aisDevice )
        {
            throw new NotImplementedException( );
        }
        public SimpleAisStaticDataReportPartAMessageDataReader GetAisStaticDataReportPartAMessageByAisDeviceAndReceivedTimestampDataReader( Guid aisDevice, DateTime receivedTimestamp )
        {
            const string sql = SimpleAisStaticDataReportPartAMessageDataReader.BaseQuery + " WHERE " +
                    SimpleAisStaticDataReportPartAMessageDataReader.ViewAliasName + ".[AisDevice] = @aisDevice AND " +
                    SimpleAisStaticDataReportPartAMessageDataReader.ViewAliasName + ".[ReceivedTimestamp] = @receivedTimestamp " +
                    " ORDER BY " + SimpleAisStaticDataReportPartAMessageDataReader.ViewAliasName + ".[AisDevice]," +SimpleAisStaticDataReportPartAMessageDataReader.ViewAliasName + ".[ReceivedTimestamp]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var aisDeviceParameter = sqlCommandParameters.AddReference( "@aisDevice", aisDevice );
                var receivedTimestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@receivedTimestamp", receivedTimestamp );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleAisStaticDataReportPartAMessageDataReader = new SimpleAisStaticDataReportPartAMessageDataReader( _loggerFactory, sqlDataReader );
                return simpleAisStaticDataReportPartAMessageDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public AisStaticDataReportPartAMessageObject? GetAisStaticDataReportPartAMessageByAisDeviceAndReceivedTimestamp( Guid aisDevice, DateTime receivedTimestamp )
        {
            throw new NotImplementedException( );
        }
        public AisStaticDataReportPartAMessageObject? GetAisStaticDataReportPartAMessageByAisDeviceAtReceivedTimestamp( Guid aisDevice, DateTime receivedTimestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<AisStaticDataReportPartAMessageObject> GetAisStaticDataReportPartAMessageByAisDeviceFromReceivedTimestamp( Guid aisDevice, DateTime receivedTimestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<AisStaticDataReportPartAMessageObject> GetAisStaticDataReportPartAMessageByAisDeviceUntilReceivedTimestamp( Guid aisDevice, DateTime receivedTimestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<AisStaticDataReportPartAMessageObject> GetAisStaticDataReportPartAMessageByAisDeviceOverReceivedTimestamp( Guid aisDevice, DateTime fromReceivedTimestamp, DateTime untilReceivedTimestamp )
        {
            throw new NotImplementedException( );
        }
        public SimpleAisStaticDataReportPartAMessageDataReader GetAisStaticDataReportPartAMessageCollectionByReceivedTimestampDataReader( DateTime receivedTimestamp )
        {
            const string sql = SimpleAisStaticDataReportPartAMessageDataReader.BaseQuery + " WHERE " +
                    SimpleAisStaticDataReportPartAMessageDataReader.ViewAliasName + ".[ReceivedTimestamp] = @receivedTimestamp " +
                    " ORDER BY " + SimpleAisStaticDataReportPartAMessageDataReader.ViewAliasName + ".[ReceivedTimestamp]," +SimpleAisStaticDataReportPartAMessageDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var receivedTimestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@receivedTimestamp", receivedTimestamp );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleAisStaticDataReportPartAMessageDataReader = new SimpleAisStaticDataReportPartAMessageDataReader( _loggerFactory, sqlDataReader );
                return simpleAisStaticDataReportPartAMessageDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<AisStaticDataReportPartAMessageObject> GetAisStaticDataReportPartAMessageCollectionByReceivedTimestamp( DateTime receivedTimestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<AisStaticDataReportPartAMessageObject> GetAisStaticDataReportPartAMessageCollectionAtReceivedTimestamp( DateTime receivedTimestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<AisStaticDataReportPartAMessageObject> GetAisStaticDataReportPartAMessageCollectionFromReceivedTimestamp( DateTime receivedTimestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<AisStaticDataReportPartAMessageObject> GetAisStaticDataReportPartAMessageCollectionUntilReceivedTimestamp( DateTime receivedTimestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<AisStaticDataReportPartAMessageObject> GetAisStaticDataReportPartAMessageCollectionOverReceivedTimestamp( DateTime fromReceivedTimestamp, DateTime untilReceivedTimestamp )
        {
            throw new NotImplementedException( );
        }
        public SimpleAisStaticDataReportPartAMessageDataReader GetAisStaticDataReportPartAMessageCollectionByMmsiDataReader( Guid mmsi )
        {
            const string sql = SimpleAisStaticDataReportPartAMessageDataReader.BaseQuery + " WHERE " +
                    SimpleAisStaticDataReportPartAMessageDataReader.ViewAliasName + ".[Mmsi] = @mmsi " +
                    " ORDER BY " + SimpleAisStaticDataReportPartAMessageDataReader.ViewAliasName + ".[Mmsi]," +SimpleAisStaticDataReportPartAMessageDataReader.ViewAliasName + ".[MessageSequenceNumber]," +SimpleAisStaticDataReportPartAMessageDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var mmsiParameter = sqlCommandParameters.AddReference( "@mmsi", mmsi );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleAisStaticDataReportPartAMessageDataReader = new SimpleAisStaticDataReportPartAMessageDataReader( _loggerFactory, sqlDataReader );
                return simpleAisStaticDataReportPartAMessageDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<AisStaticDataReportPartAMessageObject> GetAisStaticDataReportPartAMessageCollectionByMmsi( Guid mmsi )
        {
            throw new NotImplementedException( );
        }
        public SimpleAisStaticDataReportPartAMessageDataReader GetAisStaticDataReportPartAMessageCollectionByMmsiAndMessageSequenceNumberDataReader( Guid mmsi, long messageSequenceNumber )
        {
            const string sql = SimpleAisStaticDataReportPartAMessageDataReader.BaseQuery + " WHERE " +
                    SimpleAisStaticDataReportPartAMessageDataReader.ViewAliasName + ".[Mmsi] = @mmsi AND " +
                    SimpleAisStaticDataReportPartAMessageDataReader.ViewAliasName + ".[MessageSequenceNumber] = @messageSequenceNumber " +
                    " ORDER BY " + SimpleAisStaticDataReportPartAMessageDataReader.ViewAliasName + ".[Mmsi]," +SimpleAisStaticDataReportPartAMessageDataReader.ViewAliasName + ".[MessageSequenceNumber]," +SimpleAisStaticDataReportPartAMessageDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var mmsiParameter = sqlCommandParameters.AddReference( "@mmsi", mmsi );
                var messageSequenceNumberParameter = sqlCommandParameters.AddInt64( "@messageSequenceNumber", messageSequenceNumber );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleAisStaticDataReportPartAMessageDataReader = new SimpleAisStaticDataReportPartAMessageDataReader( _loggerFactory, sqlDataReader );
                return simpleAisStaticDataReportPartAMessageDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<AisStaticDataReportPartAMessageObject> GetAisStaticDataReportPartAMessageCollectionByMmsiAndMessageSequenceNumber( Guid mmsi, long messageSequenceNumber )
        {
            throw new NotImplementedException( );
        }
        public IList<AisStaticDataReportPartAMessageObject> GetAisStaticDataReportPartAMessageCollectionByMmsiFromMessageSequenceNumber( Guid mmsi, long messageSequenceNumber )
        {
            throw new NotImplementedException( );
        }
        public IList<AisStaticDataReportPartAMessageObject> GetAisStaticDataReportPartAMessageCollectionByMmsiUntilMessageSequenceNumber( Guid mmsi, long messageSequenceNumber )
        {
            throw new NotImplementedException( );
        }
        public IList<AisStaticDataReportPartAMessageObject> GetAisStaticDataReportPartAMessageCollectionByMmsiOverMessageSequenceNumber( Guid mmsi, long fromMessageSequenceNumber, long untilMessageSequenceNumber )
        {
            throw new NotImplementedException( );
        }
        public SimpleAisStaticDataReportPartAMessageDataReader GetAisStaticDataReportPartAMessageCollectionByShipNameDataReader( Guid shipName )
        {
            const string sql = SimpleAisStaticDataReportPartAMessageDataReader.BaseQuery + " WHERE " +
                    SimpleAisStaticDataReportPartAMessageDataReader.ViewAliasName + ".[ShipName] = @shipName " +
                    " ORDER BY " + SimpleAisStaticDataReportPartAMessageDataReader.ViewAliasName + ".[ShipName]," +SimpleAisStaticDataReportPartAMessageDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var shipNameParameter = sqlCommandParameters.AddReference( "@shipName", shipName );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleAisStaticDataReportPartAMessageDataReader = new SimpleAisStaticDataReportPartAMessageDataReader( _loggerFactory, sqlDataReader );
                return simpleAisStaticDataReportPartAMessageDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<AisStaticDataReportPartAMessageObject> GetAisStaticDataReportPartAMessageCollectionByShipName( Guid shipName )
        {
            throw new NotImplementedException( );
        }
        // ---------------------------------------------------------------------
        // AisStaticDataReportPartBMessage queries
        // ---------------------------------------------------------------------
        public SimpleAisStaticDataReportPartBMessageDataReader GetAisStaticDataReportPartBMessageByIdDataReader( Guid id )
        {
            const string sql = SimpleAisStaticDataReportPartBMessageDataReader.BaseQuery + "WHERE " + SimpleAisStaticDataReportPartBMessageDataReader.ViewAliasName + ".[Id] = @id"; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                sqlCommandParameters.AddGuid( "@id", id );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleAisStaticDataReportPartBMessageDataReader = new SimpleAisStaticDataReportPartBMessageDataReader( _loggerFactory, sqlDataReader );
                return simpleAisStaticDataReportPartBMessageDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public AisStaticDataReportPartBMessageObject? GetAisStaticDataReportPartBMessageById( Guid id )
        {
            var simpleAisStaticDataReportPartBMessageDataReader = GetAisStaticDataReportPartBMessageByIdDataReader( id );
            using ( simpleAisStaticDataReportPartBMessageDataReader )
            {
                if ( simpleAisStaticDataReportPartBMessageDataReader.Read( ) )
                {
                    var result = simpleAisStaticDataReportPartBMessageDataReader.GetDataObject( );
                    return result;
                }
            }
            return null;
        }

        public void GetAisStaticDataReportPartBMessageById( Guid id, Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleAisStaticDataReportPartBMessageDataReader = GetAisStaticDataReportPartBMessageByIdDataReader( id );
                using ( simpleAisStaticDataReportPartBMessageDataReader )
                {
                    if ( simpleAisStaticDataReportPartBMessageDataReader.Read( ) )
                    {
                        destinationWriter.Write( true );
                        simpleAisStaticDataReportPartBMessageDataReader.WriteTo( destinationWriter );
                    }
                    else
                    {
                        destinationWriter.Write( false );
                    }
                }
            }
        }

        public SimpleAisStaticDataReportPartBMessageDataReader GetAisStaticDataReportPartBMessageCollectionDataReader( )
        {
            const string sql = SimpleAisStaticDataReportPartBMessageDataReader.BaseQuery; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleAisStaticDataReportPartBMessageDataReader = new SimpleAisStaticDataReportPartBMessageDataReader( _loggerFactory, sqlDataReader );
                return simpleAisStaticDataReportPartBMessageDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public IList<AisStaticDataReportPartBMessageObject> GetAisStaticDataReportPartBMessageCollection( )
        {
            var result = new List<AisStaticDataReportPartBMessageObject>( );
            var simpleAisStaticDataReportPartBMessageDataReader = GetAisStaticDataReportPartBMessageCollectionDataReader( );
            using ( simpleAisStaticDataReportPartBMessageDataReader )
            {
                while ( simpleAisStaticDataReportPartBMessageDataReader.Read( ) )
                {
                    var data = simpleAisStaticDataReportPartBMessageDataReader.GetDataObject( );
                    result.Add( data );
                }
            }
            return result;
        }

        public void GetAisStaticDataReportPartBMessageCollection( Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleAisStaticDataReportPartBMessageDataReader = GetAisStaticDataReportPartBMessageCollectionDataReader( );
                using ( simpleAisStaticDataReportPartBMessageDataReader )
                {
                    simpleAisStaticDataReportPartBMessageDataReader.WriteResultSetTo( destinationWriter );
                }
            }
        }

        public SimpleAisStaticDataReportPartBMessageDataReader GetAisStaticDataReportPartBMessageCollectionByAisDeviceDataReader( Guid aisDevice )
        {
            const string sql = SimpleAisStaticDataReportPartBMessageDataReader.BaseQuery + " WHERE " +
                    SimpleAisStaticDataReportPartBMessageDataReader.ViewAliasName + ".[AisDevice] = @aisDevice " +
                    " ORDER BY " + SimpleAisStaticDataReportPartBMessageDataReader.ViewAliasName + ".[AisDevice]," +SimpleAisStaticDataReportPartBMessageDataReader.ViewAliasName + ".[ReceivedTimestamp]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var aisDeviceParameter = sqlCommandParameters.AddReference( "@aisDevice", aisDevice );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleAisStaticDataReportPartBMessageDataReader = new SimpleAisStaticDataReportPartBMessageDataReader( _loggerFactory, sqlDataReader );
                return simpleAisStaticDataReportPartBMessageDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<AisStaticDataReportPartBMessageObject> GetAisStaticDataReportPartBMessageCollectionByAisDevice( Guid aisDevice )
        {
            throw new NotImplementedException( );
        }
        public SimpleAisStaticDataReportPartBMessageDataReader GetAisStaticDataReportPartBMessageByAisDeviceAndReceivedTimestampDataReader( Guid aisDevice, DateTime receivedTimestamp )
        {
            const string sql = SimpleAisStaticDataReportPartBMessageDataReader.BaseQuery + " WHERE " +
                    SimpleAisStaticDataReportPartBMessageDataReader.ViewAliasName + ".[AisDevice] = @aisDevice AND " +
                    SimpleAisStaticDataReportPartBMessageDataReader.ViewAliasName + ".[ReceivedTimestamp] = @receivedTimestamp " +
                    " ORDER BY " + SimpleAisStaticDataReportPartBMessageDataReader.ViewAliasName + ".[AisDevice]," +SimpleAisStaticDataReportPartBMessageDataReader.ViewAliasName + ".[ReceivedTimestamp]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var aisDeviceParameter = sqlCommandParameters.AddReference( "@aisDevice", aisDevice );
                var receivedTimestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@receivedTimestamp", receivedTimestamp );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleAisStaticDataReportPartBMessageDataReader = new SimpleAisStaticDataReportPartBMessageDataReader( _loggerFactory, sqlDataReader );
                return simpleAisStaticDataReportPartBMessageDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public AisStaticDataReportPartBMessageObject? GetAisStaticDataReportPartBMessageByAisDeviceAndReceivedTimestamp( Guid aisDevice, DateTime receivedTimestamp )
        {
            throw new NotImplementedException( );
        }
        public AisStaticDataReportPartBMessageObject? GetAisStaticDataReportPartBMessageByAisDeviceAtReceivedTimestamp( Guid aisDevice, DateTime receivedTimestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<AisStaticDataReportPartBMessageObject> GetAisStaticDataReportPartBMessageByAisDeviceFromReceivedTimestamp( Guid aisDevice, DateTime receivedTimestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<AisStaticDataReportPartBMessageObject> GetAisStaticDataReportPartBMessageByAisDeviceUntilReceivedTimestamp( Guid aisDevice, DateTime receivedTimestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<AisStaticDataReportPartBMessageObject> GetAisStaticDataReportPartBMessageByAisDeviceOverReceivedTimestamp( Guid aisDevice, DateTime fromReceivedTimestamp, DateTime untilReceivedTimestamp )
        {
            throw new NotImplementedException( );
        }
        public SimpleAisStaticDataReportPartBMessageDataReader GetAisStaticDataReportPartBMessageCollectionByReceivedTimestampDataReader( DateTime receivedTimestamp )
        {
            const string sql = SimpleAisStaticDataReportPartBMessageDataReader.BaseQuery + " WHERE " +
                    SimpleAisStaticDataReportPartBMessageDataReader.ViewAliasName + ".[ReceivedTimestamp] = @receivedTimestamp " +
                    " ORDER BY " + SimpleAisStaticDataReportPartBMessageDataReader.ViewAliasName + ".[ReceivedTimestamp]," +SimpleAisStaticDataReportPartBMessageDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var receivedTimestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@receivedTimestamp", receivedTimestamp );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleAisStaticDataReportPartBMessageDataReader = new SimpleAisStaticDataReportPartBMessageDataReader( _loggerFactory, sqlDataReader );
                return simpleAisStaticDataReportPartBMessageDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<AisStaticDataReportPartBMessageObject> GetAisStaticDataReportPartBMessageCollectionByReceivedTimestamp( DateTime receivedTimestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<AisStaticDataReportPartBMessageObject> GetAisStaticDataReportPartBMessageCollectionAtReceivedTimestamp( DateTime receivedTimestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<AisStaticDataReportPartBMessageObject> GetAisStaticDataReportPartBMessageCollectionFromReceivedTimestamp( DateTime receivedTimestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<AisStaticDataReportPartBMessageObject> GetAisStaticDataReportPartBMessageCollectionUntilReceivedTimestamp( DateTime receivedTimestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<AisStaticDataReportPartBMessageObject> GetAisStaticDataReportPartBMessageCollectionOverReceivedTimestamp( DateTime fromReceivedTimestamp, DateTime untilReceivedTimestamp )
        {
            throw new NotImplementedException( );
        }
        public SimpleAisStaticDataReportPartBMessageDataReader GetAisStaticDataReportPartBMessageCollectionByMmsiDataReader( Guid mmsi )
        {
            const string sql = SimpleAisStaticDataReportPartBMessageDataReader.BaseQuery + " WHERE " +
                    SimpleAisStaticDataReportPartBMessageDataReader.ViewAliasName + ".[Mmsi] = @mmsi " +
                    " ORDER BY " + SimpleAisStaticDataReportPartBMessageDataReader.ViewAliasName + ".[Mmsi]," +SimpleAisStaticDataReportPartBMessageDataReader.ViewAliasName + ".[MessageSequenceNumber]," +SimpleAisStaticDataReportPartBMessageDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var mmsiParameter = sqlCommandParameters.AddReference( "@mmsi", mmsi );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleAisStaticDataReportPartBMessageDataReader = new SimpleAisStaticDataReportPartBMessageDataReader( _loggerFactory, sqlDataReader );
                return simpleAisStaticDataReportPartBMessageDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<AisStaticDataReportPartBMessageObject> GetAisStaticDataReportPartBMessageCollectionByMmsi( Guid mmsi )
        {
            throw new NotImplementedException( );
        }
        public SimpleAisStaticDataReportPartBMessageDataReader GetAisStaticDataReportPartBMessageCollectionByMmsiAndMessageSequenceNumberDataReader( Guid mmsi, long messageSequenceNumber )
        {
            const string sql = SimpleAisStaticDataReportPartBMessageDataReader.BaseQuery + " WHERE " +
                    SimpleAisStaticDataReportPartBMessageDataReader.ViewAliasName + ".[Mmsi] = @mmsi AND " +
                    SimpleAisStaticDataReportPartBMessageDataReader.ViewAliasName + ".[MessageSequenceNumber] = @messageSequenceNumber " +
                    " ORDER BY " + SimpleAisStaticDataReportPartBMessageDataReader.ViewAliasName + ".[Mmsi]," +SimpleAisStaticDataReportPartBMessageDataReader.ViewAliasName + ".[MessageSequenceNumber]," +SimpleAisStaticDataReportPartBMessageDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var mmsiParameter = sqlCommandParameters.AddReference( "@mmsi", mmsi );
                var messageSequenceNumberParameter = sqlCommandParameters.AddInt64( "@messageSequenceNumber", messageSequenceNumber );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleAisStaticDataReportPartBMessageDataReader = new SimpleAisStaticDataReportPartBMessageDataReader( _loggerFactory, sqlDataReader );
                return simpleAisStaticDataReportPartBMessageDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<AisStaticDataReportPartBMessageObject> GetAisStaticDataReportPartBMessageCollectionByMmsiAndMessageSequenceNumber( Guid mmsi, long messageSequenceNumber )
        {
            throw new NotImplementedException( );
        }
        public IList<AisStaticDataReportPartBMessageObject> GetAisStaticDataReportPartBMessageCollectionByMmsiFromMessageSequenceNumber( Guid mmsi, long messageSequenceNumber )
        {
            throw new NotImplementedException( );
        }
        public IList<AisStaticDataReportPartBMessageObject> GetAisStaticDataReportPartBMessageCollectionByMmsiUntilMessageSequenceNumber( Guid mmsi, long messageSequenceNumber )
        {
            throw new NotImplementedException( );
        }
        public IList<AisStaticDataReportPartBMessageObject> GetAisStaticDataReportPartBMessageCollectionByMmsiOverMessageSequenceNumber( Guid mmsi, long fromMessageSequenceNumber, long untilMessageSequenceNumber )
        {
            throw new NotImplementedException( );
        }
        public SimpleAisStaticDataReportPartBMessageDataReader GetAisStaticDataReportPartBMessageCollectionByCallsignDataReader( Guid callsign )
        {
            const string sql = SimpleAisStaticDataReportPartBMessageDataReader.BaseQuery + " WHERE " +
                    SimpleAisStaticDataReportPartBMessageDataReader.ViewAliasName + ".[Callsign] = @callsign " +
                    " ORDER BY " + SimpleAisStaticDataReportPartBMessageDataReader.ViewAliasName + ".[Callsign]," +SimpleAisStaticDataReportPartBMessageDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var callsignParameter = sqlCommandParameters.AddReference( "@callsign", callsign );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleAisStaticDataReportPartBMessageDataReader = new SimpleAisStaticDataReportPartBMessageDataReader( _loggerFactory, sqlDataReader );
                return simpleAisStaticDataReportPartBMessageDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<AisStaticDataReportPartBMessageObject> GetAisStaticDataReportPartBMessageCollectionByCallsign( Guid callsign )
        {
            throw new NotImplementedException( );
        }
        public SimpleAisStaticDataReportPartBMessageDataReader GetAisStaticDataReportPartBMessageCollectionByMothershipMmsiDataReader( Guid? mothershipMmsi )
        {
            const string sql = SimpleAisStaticDataReportPartBMessageDataReader.BaseQuery + " WHERE " +
                    SimpleAisStaticDataReportPartBMessageDataReader.ViewAliasName + ".[MothershipMmsi] = @mothershipMmsi " +
                    " ORDER BY " + SimpleAisStaticDataReportPartBMessageDataReader.ViewAliasName + ".[MothershipMmsi]," +SimpleAisStaticDataReportPartBMessageDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var mothershipMmsiParameter = sqlCommandParameters.AddReference( "@mothershipMmsi", mothershipMmsi );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleAisStaticDataReportPartBMessageDataReader = new SimpleAisStaticDataReportPartBMessageDataReader( _loggerFactory, sqlDataReader );
                return simpleAisStaticDataReportPartBMessageDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<AisStaticDataReportPartBMessageObject> GetAisStaticDataReportPartBMessageCollectionByMothershipMmsi( Guid? mothershipMmsi )
        {
            throw new NotImplementedException( );
        }
        public IList<AisStaticDataReportPartBMessageObject> GetAisStaticDataReportPartBMessageCollectionByMothershipMmsiIsNull(  )
        {
            throw new NotImplementedException( );
        }
        // ---------------------------------------------------------------------
        // AisUtcAndDateInquiryMessage queries
        // ---------------------------------------------------------------------
        public SimpleAisUtcAndDateInquiryMessageDataReader GetAisUtcAndDateInquiryMessageByIdDataReader( Guid id )
        {
            const string sql = SimpleAisUtcAndDateInquiryMessageDataReader.BaseQuery + "WHERE " + SimpleAisUtcAndDateInquiryMessageDataReader.ViewAliasName + ".[Id] = @id"; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                sqlCommandParameters.AddGuid( "@id", id );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleAisUtcAndDateInquiryMessageDataReader = new SimpleAisUtcAndDateInquiryMessageDataReader( _loggerFactory, sqlDataReader );
                return simpleAisUtcAndDateInquiryMessageDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public AisUtcAndDateInquiryMessageObject? GetAisUtcAndDateInquiryMessageById( Guid id )
        {
            var simpleAisUtcAndDateInquiryMessageDataReader = GetAisUtcAndDateInquiryMessageByIdDataReader( id );
            using ( simpleAisUtcAndDateInquiryMessageDataReader )
            {
                if ( simpleAisUtcAndDateInquiryMessageDataReader.Read( ) )
                {
                    var result = simpleAisUtcAndDateInquiryMessageDataReader.GetDataObject( );
                    return result;
                }
            }
            return null;
        }

        public void GetAisUtcAndDateInquiryMessageById( Guid id, Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleAisUtcAndDateInquiryMessageDataReader = GetAisUtcAndDateInquiryMessageByIdDataReader( id );
                using ( simpleAisUtcAndDateInquiryMessageDataReader )
                {
                    if ( simpleAisUtcAndDateInquiryMessageDataReader.Read( ) )
                    {
                        destinationWriter.Write( true );
                        simpleAisUtcAndDateInquiryMessageDataReader.WriteTo( destinationWriter );
                    }
                    else
                    {
                        destinationWriter.Write( false );
                    }
                }
            }
        }

        public SimpleAisUtcAndDateInquiryMessageDataReader GetAisUtcAndDateInquiryMessageCollectionDataReader( )
        {
            const string sql = SimpleAisUtcAndDateInquiryMessageDataReader.BaseQuery; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleAisUtcAndDateInquiryMessageDataReader = new SimpleAisUtcAndDateInquiryMessageDataReader( _loggerFactory, sqlDataReader );
                return simpleAisUtcAndDateInquiryMessageDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public IList<AisUtcAndDateInquiryMessageObject> GetAisUtcAndDateInquiryMessageCollection( )
        {
            var result = new List<AisUtcAndDateInquiryMessageObject>( );
            var simpleAisUtcAndDateInquiryMessageDataReader = GetAisUtcAndDateInquiryMessageCollectionDataReader( );
            using ( simpleAisUtcAndDateInquiryMessageDataReader )
            {
                while ( simpleAisUtcAndDateInquiryMessageDataReader.Read( ) )
                {
                    var data = simpleAisUtcAndDateInquiryMessageDataReader.GetDataObject( );
                    result.Add( data );
                }
            }
            return result;
        }

        public void GetAisUtcAndDateInquiryMessageCollection( Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleAisUtcAndDateInquiryMessageDataReader = GetAisUtcAndDateInquiryMessageCollectionDataReader( );
                using ( simpleAisUtcAndDateInquiryMessageDataReader )
                {
                    simpleAisUtcAndDateInquiryMessageDataReader.WriteResultSetTo( destinationWriter );
                }
            }
        }

        public SimpleAisUtcAndDateInquiryMessageDataReader GetAisUtcAndDateInquiryMessageCollectionByAisDeviceDataReader( Guid aisDevice )
        {
            const string sql = SimpleAisUtcAndDateInquiryMessageDataReader.BaseQuery + " WHERE " +
                    SimpleAisUtcAndDateInquiryMessageDataReader.ViewAliasName + ".[AisDevice] = @aisDevice " +
                    " ORDER BY " + SimpleAisUtcAndDateInquiryMessageDataReader.ViewAliasName + ".[AisDevice]," +SimpleAisUtcAndDateInquiryMessageDataReader.ViewAliasName + ".[ReceivedTimestamp]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var aisDeviceParameter = sqlCommandParameters.AddReference( "@aisDevice", aisDevice );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleAisUtcAndDateInquiryMessageDataReader = new SimpleAisUtcAndDateInquiryMessageDataReader( _loggerFactory, sqlDataReader );
                return simpleAisUtcAndDateInquiryMessageDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<AisUtcAndDateInquiryMessageObject> GetAisUtcAndDateInquiryMessageCollectionByAisDevice( Guid aisDevice )
        {
            throw new NotImplementedException( );
        }
        public SimpleAisUtcAndDateInquiryMessageDataReader GetAisUtcAndDateInquiryMessageByAisDeviceAndReceivedTimestampDataReader( Guid aisDevice, DateTime receivedTimestamp )
        {
            const string sql = SimpleAisUtcAndDateInquiryMessageDataReader.BaseQuery + " WHERE " +
                    SimpleAisUtcAndDateInquiryMessageDataReader.ViewAliasName + ".[AisDevice] = @aisDevice AND " +
                    SimpleAisUtcAndDateInquiryMessageDataReader.ViewAliasName + ".[ReceivedTimestamp] = @receivedTimestamp " +
                    " ORDER BY " + SimpleAisUtcAndDateInquiryMessageDataReader.ViewAliasName + ".[AisDevice]," +SimpleAisUtcAndDateInquiryMessageDataReader.ViewAliasName + ".[ReceivedTimestamp]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var aisDeviceParameter = sqlCommandParameters.AddReference( "@aisDevice", aisDevice );
                var receivedTimestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@receivedTimestamp", receivedTimestamp );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleAisUtcAndDateInquiryMessageDataReader = new SimpleAisUtcAndDateInquiryMessageDataReader( _loggerFactory, sqlDataReader );
                return simpleAisUtcAndDateInquiryMessageDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public AisUtcAndDateInquiryMessageObject? GetAisUtcAndDateInquiryMessageByAisDeviceAndReceivedTimestamp( Guid aisDevice, DateTime receivedTimestamp )
        {
            throw new NotImplementedException( );
        }
        public AisUtcAndDateInquiryMessageObject? GetAisUtcAndDateInquiryMessageByAisDeviceAtReceivedTimestamp( Guid aisDevice, DateTime receivedTimestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<AisUtcAndDateInquiryMessageObject> GetAisUtcAndDateInquiryMessageByAisDeviceFromReceivedTimestamp( Guid aisDevice, DateTime receivedTimestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<AisUtcAndDateInquiryMessageObject> GetAisUtcAndDateInquiryMessageByAisDeviceUntilReceivedTimestamp( Guid aisDevice, DateTime receivedTimestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<AisUtcAndDateInquiryMessageObject> GetAisUtcAndDateInquiryMessageByAisDeviceOverReceivedTimestamp( Guid aisDevice, DateTime fromReceivedTimestamp, DateTime untilReceivedTimestamp )
        {
            throw new NotImplementedException( );
        }
        public SimpleAisUtcAndDateInquiryMessageDataReader GetAisUtcAndDateInquiryMessageCollectionByReceivedTimestampDataReader( DateTime receivedTimestamp )
        {
            const string sql = SimpleAisUtcAndDateInquiryMessageDataReader.BaseQuery + " WHERE " +
                    SimpleAisUtcAndDateInquiryMessageDataReader.ViewAliasName + ".[ReceivedTimestamp] = @receivedTimestamp " +
                    " ORDER BY " + SimpleAisUtcAndDateInquiryMessageDataReader.ViewAliasName + ".[ReceivedTimestamp]," +SimpleAisUtcAndDateInquiryMessageDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var receivedTimestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@receivedTimestamp", receivedTimestamp );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleAisUtcAndDateInquiryMessageDataReader = new SimpleAisUtcAndDateInquiryMessageDataReader( _loggerFactory, sqlDataReader );
                return simpleAisUtcAndDateInquiryMessageDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<AisUtcAndDateInquiryMessageObject> GetAisUtcAndDateInquiryMessageCollectionByReceivedTimestamp( DateTime receivedTimestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<AisUtcAndDateInquiryMessageObject> GetAisUtcAndDateInquiryMessageCollectionAtReceivedTimestamp( DateTime receivedTimestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<AisUtcAndDateInquiryMessageObject> GetAisUtcAndDateInquiryMessageCollectionFromReceivedTimestamp( DateTime receivedTimestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<AisUtcAndDateInquiryMessageObject> GetAisUtcAndDateInquiryMessageCollectionUntilReceivedTimestamp( DateTime receivedTimestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<AisUtcAndDateInquiryMessageObject> GetAisUtcAndDateInquiryMessageCollectionOverReceivedTimestamp( DateTime fromReceivedTimestamp, DateTime untilReceivedTimestamp )
        {
            throw new NotImplementedException( );
        }
        public SimpleAisUtcAndDateInquiryMessageDataReader GetAisUtcAndDateInquiryMessageCollectionByMmsiDataReader( Guid mmsi )
        {
            const string sql = SimpleAisUtcAndDateInquiryMessageDataReader.BaseQuery + " WHERE " +
                    SimpleAisUtcAndDateInquiryMessageDataReader.ViewAliasName + ".[Mmsi] = @mmsi " +
                    " ORDER BY " + SimpleAisUtcAndDateInquiryMessageDataReader.ViewAliasName + ".[Mmsi]," +SimpleAisUtcAndDateInquiryMessageDataReader.ViewAliasName + ".[MessageSequenceNumber]," +SimpleAisUtcAndDateInquiryMessageDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var mmsiParameter = sqlCommandParameters.AddReference( "@mmsi", mmsi );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleAisUtcAndDateInquiryMessageDataReader = new SimpleAisUtcAndDateInquiryMessageDataReader( _loggerFactory, sqlDataReader );
                return simpleAisUtcAndDateInquiryMessageDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<AisUtcAndDateInquiryMessageObject> GetAisUtcAndDateInquiryMessageCollectionByMmsi( Guid mmsi )
        {
            throw new NotImplementedException( );
        }
        public SimpleAisUtcAndDateInquiryMessageDataReader GetAisUtcAndDateInquiryMessageCollectionByMmsiAndMessageSequenceNumberDataReader( Guid mmsi, long messageSequenceNumber )
        {
            const string sql = SimpleAisUtcAndDateInquiryMessageDataReader.BaseQuery + " WHERE " +
                    SimpleAisUtcAndDateInquiryMessageDataReader.ViewAliasName + ".[Mmsi] = @mmsi AND " +
                    SimpleAisUtcAndDateInquiryMessageDataReader.ViewAliasName + ".[MessageSequenceNumber] = @messageSequenceNumber " +
                    " ORDER BY " + SimpleAisUtcAndDateInquiryMessageDataReader.ViewAliasName + ".[Mmsi]," +SimpleAisUtcAndDateInquiryMessageDataReader.ViewAliasName + ".[MessageSequenceNumber]," +SimpleAisUtcAndDateInquiryMessageDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var mmsiParameter = sqlCommandParameters.AddReference( "@mmsi", mmsi );
                var messageSequenceNumberParameter = sqlCommandParameters.AddInt64( "@messageSequenceNumber", messageSequenceNumber );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleAisUtcAndDateInquiryMessageDataReader = new SimpleAisUtcAndDateInquiryMessageDataReader( _loggerFactory, sqlDataReader );
                return simpleAisUtcAndDateInquiryMessageDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<AisUtcAndDateInquiryMessageObject> GetAisUtcAndDateInquiryMessageCollectionByMmsiAndMessageSequenceNumber( Guid mmsi, long messageSequenceNumber )
        {
            throw new NotImplementedException( );
        }
        public IList<AisUtcAndDateInquiryMessageObject> GetAisUtcAndDateInquiryMessageCollectionByMmsiFromMessageSequenceNumber( Guid mmsi, long messageSequenceNumber )
        {
            throw new NotImplementedException( );
        }
        public IList<AisUtcAndDateInquiryMessageObject> GetAisUtcAndDateInquiryMessageCollectionByMmsiUntilMessageSequenceNumber( Guid mmsi, long messageSequenceNumber )
        {
            throw new NotImplementedException( );
        }
        public IList<AisUtcAndDateInquiryMessageObject> GetAisUtcAndDateInquiryMessageCollectionByMmsiOverMessageSequenceNumber( Guid mmsi, long fromMessageSequenceNumber, long untilMessageSequenceNumber )
        {
            throw new NotImplementedException( );
        }
        // ---------------------------------------------------------------------
        // AisUtcAndDateResponseMessage queries
        // ---------------------------------------------------------------------
        public SimpleAisUtcAndDateResponseMessageDataReader GetAisUtcAndDateResponseMessageByIdDataReader( Guid id )
        {
            const string sql = SimpleAisUtcAndDateResponseMessageDataReader.BaseQuery + "WHERE " + SimpleAisUtcAndDateResponseMessageDataReader.ViewAliasName + ".[Id] = @id"; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                sqlCommandParameters.AddGuid( "@id", id );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleAisUtcAndDateResponseMessageDataReader = new SimpleAisUtcAndDateResponseMessageDataReader( _loggerFactory, sqlDataReader );
                return simpleAisUtcAndDateResponseMessageDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public AisUtcAndDateResponseMessageObject? GetAisUtcAndDateResponseMessageById( Guid id )
        {
            var simpleAisUtcAndDateResponseMessageDataReader = GetAisUtcAndDateResponseMessageByIdDataReader( id );
            using ( simpleAisUtcAndDateResponseMessageDataReader )
            {
                if ( simpleAisUtcAndDateResponseMessageDataReader.Read( ) )
                {
                    var result = simpleAisUtcAndDateResponseMessageDataReader.GetDataObject( );
                    return result;
                }
            }
            return null;
        }

        public void GetAisUtcAndDateResponseMessageById( Guid id, Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleAisUtcAndDateResponseMessageDataReader = GetAisUtcAndDateResponseMessageByIdDataReader( id );
                using ( simpleAisUtcAndDateResponseMessageDataReader )
                {
                    if ( simpleAisUtcAndDateResponseMessageDataReader.Read( ) )
                    {
                        destinationWriter.Write( true );
                        simpleAisUtcAndDateResponseMessageDataReader.WriteTo( destinationWriter );
                    }
                    else
                    {
                        destinationWriter.Write( false );
                    }
                }
            }
        }

        public SimpleAisUtcAndDateResponseMessageDataReader GetAisUtcAndDateResponseMessageCollectionDataReader( )
        {
            const string sql = SimpleAisUtcAndDateResponseMessageDataReader.BaseQuery; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleAisUtcAndDateResponseMessageDataReader = new SimpleAisUtcAndDateResponseMessageDataReader( _loggerFactory, sqlDataReader );
                return simpleAisUtcAndDateResponseMessageDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public IList<AisUtcAndDateResponseMessageObject> GetAisUtcAndDateResponseMessageCollection( )
        {
            var result = new List<AisUtcAndDateResponseMessageObject>( );
            var simpleAisUtcAndDateResponseMessageDataReader = GetAisUtcAndDateResponseMessageCollectionDataReader( );
            using ( simpleAisUtcAndDateResponseMessageDataReader )
            {
                while ( simpleAisUtcAndDateResponseMessageDataReader.Read( ) )
                {
                    var data = simpleAisUtcAndDateResponseMessageDataReader.GetDataObject( );
                    result.Add( data );
                }
            }
            return result;
        }

        public void GetAisUtcAndDateResponseMessageCollection( Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleAisUtcAndDateResponseMessageDataReader = GetAisUtcAndDateResponseMessageCollectionDataReader( );
                using ( simpleAisUtcAndDateResponseMessageDataReader )
                {
                    simpleAisUtcAndDateResponseMessageDataReader.WriteResultSetTo( destinationWriter );
                }
            }
        }

        public SimpleAisUtcAndDateResponseMessageDataReader GetAisUtcAndDateResponseMessageCollectionByAisDeviceDataReader( Guid aisDevice )
        {
            const string sql = SimpleAisUtcAndDateResponseMessageDataReader.BaseQuery + " WHERE " +
                    SimpleAisUtcAndDateResponseMessageDataReader.ViewAliasName + ".[AisDevice] = @aisDevice " +
                    " ORDER BY " + SimpleAisUtcAndDateResponseMessageDataReader.ViewAliasName + ".[AisDevice]," +SimpleAisUtcAndDateResponseMessageDataReader.ViewAliasName + ".[ReceivedTimestamp]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var aisDeviceParameter = sqlCommandParameters.AddReference( "@aisDevice", aisDevice );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleAisUtcAndDateResponseMessageDataReader = new SimpleAisUtcAndDateResponseMessageDataReader( _loggerFactory, sqlDataReader );
                return simpleAisUtcAndDateResponseMessageDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<AisUtcAndDateResponseMessageObject> GetAisUtcAndDateResponseMessageCollectionByAisDevice( Guid aisDevice )
        {
            throw new NotImplementedException( );
        }
        public SimpleAisUtcAndDateResponseMessageDataReader GetAisUtcAndDateResponseMessageByAisDeviceAndReceivedTimestampDataReader( Guid aisDevice, DateTime receivedTimestamp )
        {
            const string sql = SimpleAisUtcAndDateResponseMessageDataReader.BaseQuery + " WHERE " +
                    SimpleAisUtcAndDateResponseMessageDataReader.ViewAliasName + ".[AisDevice] = @aisDevice AND " +
                    SimpleAisUtcAndDateResponseMessageDataReader.ViewAliasName + ".[ReceivedTimestamp] = @receivedTimestamp " +
                    " ORDER BY " + SimpleAisUtcAndDateResponseMessageDataReader.ViewAliasName + ".[AisDevice]," +SimpleAisUtcAndDateResponseMessageDataReader.ViewAliasName + ".[ReceivedTimestamp]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var aisDeviceParameter = sqlCommandParameters.AddReference( "@aisDevice", aisDevice );
                var receivedTimestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@receivedTimestamp", receivedTimestamp );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleAisUtcAndDateResponseMessageDataReader = new SimpleAisUtcAndDateResponseMessageDataReader( _loggerFactory, sqlDataReader );
                return simpleAisUtcAndDateResponseMessageDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public AisUtcAndDateResponseMessageObject? GetAisUtcAndDateResponseMessageByAisDeviceAndReceivedTimestamp( Guid aisDevice, DateTime receivedTimestamp )
        {
            throw new NotImplementedException( );
        }
        public AisUtcAndDateResponseMessageObject? GetAisUtcAndDateResponseMessageByAisDeviceAtReceivedTimestamp( Guid aisDevice, DateTime receivedTimestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<AisUtcAndDateResponseMessageObject> GetAisUtcAndDateResponseMessageByAisDeviceFromReceivedTimestamp( Guid aisDevice, DateTime receivedTimestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<AisUtcAndDateResponseMessageObject> GetAisUtcAndDateResponseMessageByAisDeviceUntilReceivedTimestamp( Guid aisDevice, DateTime receivedTimestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<AisUtcAndDateResponseMessageObject> GetAisUtcAndDateResponseMessageByAisDeviceOverReceivedTimestamp( Guid aisDevice, DateTime fromReceivedTimestamp, DateTime untilReceivedTimestamp )
        {
            throw new NotImplementedException( );
        }
        public SimpleAisUtcAndDateResponseMessageDataReader GetAisUtcAndDateResponseMessageCollectionByReceivedTimestampDataReader( DateTime receivedTimestamp )
        {
            const string sql = SimpleAisUtcAndDateResponseMessageDataReader.BaseQuery + " WHERE " +
                    SimpleAisUtcAndDateResponseMessageDataReader.ViewAliasName + ".[ReceivedTimestamp] = @receivedTimestamp " +
                    " ORDER BY " + SimpleAisUtcAndDateResponseMessageDataReader.ViewAliasName + ".[ReceivedTimestamp]," +SimpleAisUtcAndDateResponseMessageDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var receivedTimestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@receivedTimestamp", receivedTimestamp );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleAisUtcAndDateResponseMessageDataReader = new SimpleAisUtcAndDateResponseMessageDataReader( _loggerFactory, sqlDataReader );
                return simpleAisUtcAndDateResponseMessageDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<AisUtcAndDateResponseMessageObject> GetAisUtcAndDateResponseMessageCollectionByReceivedTimestamp( DateTime receivedTimestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<AisUtcAndDateResponseMessageObject> GetAisUtcAndDateResponseMessageCollectionAtReceivedTimestamp( DateTime receivedTimestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<AisUtcAndDateResponseMessageObject> GetAisUtcAndDateResponseMessageCollectionFromReceivedTimestamp( DateTime receivedTimestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<AisUtcAndDateResponseMessageObject> GetAisUtcAndDateResponseMessageCollectionUntilReceivedTimestamp( DateTime receivedTimestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<AisUtcAndDateResponseMessageObject> GetAisUtcAndDateResponseMessageCollectionOverReceivedTimestamp( DateTime fromReceivedTimestamp, DateTime untilReceivedTimestamp )
        {
            throw new NotImplementedException( );
        }
        public SimpleAisUtcAndDateResponseMessageDataReader GetAisUtcAndDateResponseMessageCollectionByMmsiDataReader( Guid mmsi )
        {
            const string sql = SimpleAisUtcAndDateResponseMessageDataReader.BaseQuery + " WHERE " +
                    SimpleAisUtcAndDateResponseMessageDataReader.ViewAliasName + ".[Mmsi] = @mmsi " +
                    " ORDER BY " + SimpleAisUtcAndDateResponseMessageDataReader.ViewAliasName + ".[Mmsi]," +SimpleAisUtcAndDateResponseMessageDataReader.ViewAliasName + ".[MessageSequenceNumber]," +SimpleAisUtcAndDateResponseMessageDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var mmsiParameter = sqlCommandParameters.AddReference( "@mmsi", mmsi );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleAisUtcAndDateResponseMessageDataReader = new SimpleAisUtcAndDateResponseMessageDataReader( _loggerFactory, sqlDataReader );
                return simpleAisUtcAndDateResponseMessageDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<AisUtcAndDateResponseMessageObject> GetAisUtcAndDateResponseMessageCollectionByMmsi( Guid mmsi )
        {
            throw new NotImplementedException( );
        }
        public SimpleAisUtcAndDateResponseMessageDataReader GetAisUtcAndDateResponseMessageCollectionByMmsiAndMessageSequenceNumberDataReader( Guid mmsi, long messageSequenceNumber )
        {
            const string sql = SimpleAisUtcAndDateResponseMessageDataReader.BaseQuery + " WHERE " +
                    SimpleAisUtcAndDateResponseMessageDataReader.ViewAliasName + ".[Mmsi] = @mmsi AND " +
                    SimpleAisUtcAndDateResponseMessageDataReader.ViewAliasName + ".[MessageSequenceNumber] = @messageSequenceNumber " +
                    " ORDER BY " + SimpleAisUtcAndDateResponseMessageDataReader.ViewAliasName + ".[Mmsi]," +SimpleAisUtcAndDateResponseMessageDataReader.ViewAliasName + ".[MessageSequenceNumber]," +SimpleAisUtcAndDateResponseMessageDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var mmsiParameter = sqlCommandParameters.AddReference( "@mmsi", mmsi );
                var messageSequenceNumberParameter = sqlCommandParameters.AddInt64( "@messageSequenceNumber", messageSequenceNumber );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleAisUtcAndDateResponseMessageDataReader = new SimpleAisUtcAndDateResponseMessageDataReader( _loggerFactory, sqlDataReader );
                return simpleAisUtcAndDateResponseMessageDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<AisUtcAndDateResponseMessageObject> GetAisUtcAndDateResponseMessageCollectionByMmsiAndMessageSequenceNumber( Guid mmsi, long messageSequenceNumber )
        {
            throw new NotImplementedException( );
        }
        public IList<AisUtcAndDateResponseMessageObject> GetAisUtcAndDateResponseMessageCollectionByMmsiFromMessageSequenceNumber( Guid mmsi, long messageSequenceNumber )
        {
            throw new NotImplementedException( );
        }
        public IList<AisUtcAndDateResponseMessageObject> GetAisUtcAndDateResponseMessageCollectionByMmsiUntilMessageSequenceNumber( Guid mmsi, long messageSequenceNumber )
        {
            throw new NotImplementedException( );
        }
        public IList<AisUtcAndDateResponseMessageObject> GetAisUtcAndDateResponseMessageCollectionByMmsiOverMessageSequenceNumber( Guid mmsi, long fromMessageSequenceNumber, long untilMessageSequenceNumber )
        {
            throw new NotImplementedException( );
        }
        // ---------------------------------------------------------------------
        // AlarmStateChange queries
        // ---------------------------------------------------------------------
        public SimpleAlarmStateChangeDataReader GetAlarmStateChangeByIdDataReader( Guid id )
        {
            const string sql = SimpleAlarmStateChangeDataReader.BaseQuery + "WHERE " + SimpleAlarmStateChangeDataReader.ViewAliasName + ".[Id] = @id"; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                sqlCommandParameters.AddGuid( "@id", id );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleAlarmStateChangeDataReader = new SimpleAlarmStateChangeDataReader( _loggerFactory, sqlDataReader );
                return simpleAlarmStateChangeDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public AlarmStateChangeObject? GetAlarmStateChangeById( Guid id )
        {
            var simpleAlarmStateChangeDataReader = GetAlarmStateChangeByIdDataReader( id );
            using ( simpleAlarmStateChangeDataReader )
            {
                if ( simpleAlarmStateChangeDataReader.Read( ) )
                {
                    var result = simpleAlarmStateChangeDataReader.GetDataObject( );
                    return result;
                }
            }
            return null;
        }

        public void GetAlarmStateChangeById( Guid id, Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleAlarmStateChangeDataReader = GetAlarmStateChangeByIdDataReader( id );
                using ( simpleAlarmStateChangeDataReader )
                {
                    if ( simpleAlarmStateChangeDataReader.Read( ) )
                    {
                        destinationWriter.Write( true );
                        simpleAlarmStateChangeDataReader.WriteTo( destinationWriter );
                    }
                    else
                    {
                        destinationWriter.Write( false );
                    }
                }
            }
        }

        public SimpleAlarmStateChangeDataReader GetAlarmStateChangeCollectionDataReader( )
        {
            const string sql = SimpleAlarmStateChangeDataReader.BaseQuery; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleAlarmStateChangeDataReader = new SimpleAlarmStateChangeDataReader( _loggerFactory, sqlDataReader );
                return simpleAlarmStateChangeDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public IList<AlarmStateChangeObject> GetAlarmStateChangeCollection( )
        {
            var result = new List<AlarmStateChangeObject>( );
            var simpleAlarmStateChangeDataReader = GetAlarmStateChangeCollectionDataReader( );
            using ( simpleAlarmStateChangeDataReader )
            {
                while ( simpleAlarmStateChangeDataReader.Read( ) )
                {
                    var data = simpleAlarmStateChangeDataReader.GetDataObject( );
                    result.Add( data );
                }
            }
            return result;
        }

        public void GetAlarmStateChangeCollection( Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleAlarmStateChangeDataReader = GetAlarmStateChangeCollectionDataReader( );
                using ( simpleAlarmStateChangeDataReader )
                {
                    simpleAlarmStateChangeDataReader.WriteResultSetTo( destinationWriter );
                }
            }
        }

        public SimpleAlarmStateChangeDataReader GetAlarmStateChangeCollectionByAlarmDataReader( Guid alarm )
        {
            const string sql = SimpleAlarmStateChangeDataReader.BaseQuery + " WHERE " +
                    SimpleAlarmStateChangeDataReader.ViewAliasName + ".[Alarm] = @alarm " +
                    " ORDER BY " + SimpleAlarmStateChangeDataReader.ViewAliasName + ".[Alarm]," +SimpleAlarmStateChangeDataReader.ViewAliasName + ".[Timestamp]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var alarmParameter = sqlCommandParameters.AddReference( "@alarm", alarm );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleAlarmStateChangeDataReader = new SimpleAlarmStateChangeDataReader( _loggerFactory, sqlDataReader );
                return simpleAlarmStateChangeDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<AlarmStateChangeObject> GetAlarmStateChangeCollectionByAlarm( Guid alarm )
        {
            throw new NotImplementedException( );
        }
        public SimpleAlarmStateChangeDataReader GetAlarmStateChangeByAlarmAndTimestampDataReader( Guid alarm, DateTime timestamp )
        {
            const string sql = SimpleAlarmStateChangeDataReader.BaseQuery + " WHERE " +
                    SimpleAlarmStateChangeDataReader.ViewAliasName + ".[Alarm] = @alarm AND " +
                    SimpleAlarmStateChangeDataReader.ViewAliasName + ".[Timestamp] = @timestamp " +
                    " ORDER BY " + SimpleAlarmStateChangeDataReader.ViewAliasName + ".[Alarm]," +SimpleAlarmStateChangeDataReader.ViewAliasName + ".[Timestamp]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var alarmParameter = sqlCommandParameters.AddReference( "@alarm", alarm );
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@timestamp", timestamp );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleAlarmStateChangeDataReader = new SimpleAlarmStateChangeDataReader( _loggerFactory, sqlDataReader );
                return simpleAlarmStateChangeDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public AlarmStateChangeObject? GetAlarmStateChangeByAlarmAndTimestamp( Guid alarm, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public AlarmStateChangeObject? GetAlarmStateChangeByAlarmAtTimestamp( Guid alarm, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<AlarmStateChangeObject> GetAlarmStateChangeByAlarmFromTimestamp( Guid alarm, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<AlarmStateChangeObject> GetAlarmStateChangeByAlarmUntilTimestamp( Guid alarm, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<AlarmStateChangeObject> GetAlarmStateChangeByAlarmOverTimestamp( Guid alarm, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException( );
        }
        public SimpleAlarmStateChangeDataReader GetAlarmStateChangeCollectionByTimestampDataReader( DateTime timestamp )
        {
            const string sql = SimpleAlarmStateChangeDataReader.BaseQuery + " WHERE " +
                    SimpleAlarmStateChangeDataReader.ViewAliasName + ".[Timestamp] = @timestamp " +
                    " ORDER BY " + SimpleAlarmStateChangeDataReader.ViewAliasName + ".[Timestamp]," +SimpleAlarmStateChangeDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@timestamp", timestamp );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleAlarmStateChangeDataReader = new SimpleAlarmStateChangeDataReader( _loggerFactory, sqlDataReader );
                return simpleAlarmStateChangeDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<AlarmStateChangeObject> GetAlarmStateChangeCollectionByTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<AlarmStateChangeObject> GetAlarmStateChangeCollectionAtTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<AlarmStateChangeObject> GetAlarmStateChangeCollectionFromTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<AlarmStateChangeObject> GetAlarmStateChangeCollectionUntilTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<AlarmStateChangeObject> GetAlarmStateChangeCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException( );
        }
        // ---------------------------------------------------------------------
        // BaseStationType queries
        // ---------------------------------------------------------------------
        public SimpleBaseStationTypeDataReader GetBaseStationTypeByIdDataReader( Guid id )
        {
            const string sql = SimpleBaseStationTypeDataReader.BaseQuery + "WHERE " + SimpleBaseStationTypeDataReader.ViewAliasName + ".[Id] = @id"; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                sqlCommandParameters.AddGuid( "@id", id );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleBaseStationTypeDataReader = new SimpleBaseStationTypeDataReader( _loggerFactory, sqlDataReader );
                return simpleBaseStationTypeDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public BaseStationTypeObject? GetBaseStationTypeById( Guid id )
        {
            var simpleBaseStationTypeDataReader = GetBaseStationTypeByIdDataReader( id );
            using ( simpleBaseStationTypeDataReader )
            {
                if ( simpleBaseStationTypeDataReader.Read( ) )
                {
                    var result = simpleBaseStationTypeDataReader.GetDataObject( );
                    return result;
                }
            }
            return null;
        }

        public void GetBaseStationTypeById( Guid id, Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleBaseStationTypeDataReader = GetBaseStationTypeByIdDataReader( id );
                using ( simpleBaseStationTypeDataReader )
                {
                    if ( simpleBaseStationTypeDataReader.Read( ) )
                    {
                        destinationWriter.Write( true );
                        simpleBaseStationTypeDataReader.WriteTo( destinationWriter );
                    }
                    else
                    {
                        destinationWriter.Write( false );
                    }
                }
            }
        }

        public SimpleBaseStationTypeDataReader GetBaseStationTypeCollectionDataReader( )
        {
            const string sql = SimpleBaseStationTypeDataReader.BaseQuery; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleBaseStationTypeDataReader = new SimpleBaseStationTypeDataReader( _loggerFactory, sqlDataReader );
                return simpleBaseStationTypeDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public IList<BaseStationTypeObject> GetBaseStationTypeCollection( )
        {
            var result = new List<BaseStationTypeObject>( );
            var simpleBaseStationTypeDataReader = GetBaseStationTypeCollectionDataReader( );
            using ( simpleBaseStationTypeDataReader )
            {
                while ( simpleBaseStationTypeDataReader.Read( ) )
                {
                    var data = simpleBaseStationTypeDataReader.GetDataObject( );
                    result.Add( data );
                }
            }
            return result;
        }

        public void GetBaseStationTypeCollection( Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleBaseStationTypeDataReader = GetBaseStationTypeCollectionDataReader( );
                using ( simpleBaseStationTypeDataReader )
                {
                    simpleBaseStationTypeDataReader.WriteResultSetTo( destinationWriter );
                }
            }
        }

        public SimpleBaseStationTypeDataReader GetBaseStationTypeByNameDataReader( string name )
        {
            const string sql = SimpleBaseStationTypeDataReader.BaseQuery + " WHERE " +
                    SimpleBaseStationTypeDataReader.ViewAliasName + ".[Name] = @name " +
                    " ORDER BY " + SimpleBaseStationTypeDataReader.ViewAliasName + ".[Name]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var nameParameter = sqlCommandParameters.AddNVarChar( "@name", name, 127 );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleBaseStationTypeDataReader = new SimpleBaseStationTypeDataReader( _loggerFactory, sqlDataReader );
                return simpleBaseStationTypeDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public BaseStationTypeObject? GetBaseStationTypeByName( string name )
        {
            throw new NotImplementedException( );
        }
        // ---------------------------------------------------------------------
        // BinaryTimeseriesValue queries
        // ---------------------------------------------------------------------
        public SimpleBinaryTimeseriesValueDataReader GetBinaryTimeseriesValueByIdDataReader( Guid id )
        {
            const string sql = SimpleBinaryTimeseriesValueDataReader.BaseQuery + "WHERE " + SimpleBinaryTimeseriesValueDataReader.ViewAliasName + ".[Id] = @id"; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                sqlCommandParameters.AddGuid( "@id", id );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleBinaryTimeseriesValueDataReader = new SimpleBinaryTimeseriesValueDataReader( _loggerFactory, sqlDataReader );
                return simpleBinaryTimeseriesValueDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public BinaryTimeseriesValueObject? GetBinaryTimeseriesValueById( Guid id )
        {
            var simpleBinaryTimeseriesValueDataReader = GetBinaryTimeseriesValueByIdDataReader( id );
            using ( simpleBinaryTimeseriesValueDataReader )
            {
                if ( simpleBinaryTimeseriesValueDataReader.Read( ) )
                {
                    var result = simpleBinaryTimeseriesValueDataReader.GetDataObject( );
                    return result;
                }
            }
            return null;
        }

        public void GetBinaryTimeseriesValueById( Guid id, Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleBinaryTimeseriesValueDataReader = GetBinaryTimeseriesValueByIdDataReader( id );
                using ( simpleBinaryTimeseriesValueDataReader )
                {
                    if ( simpleBinaryTimeseriesValueDataReader.Read( ) )
                    {
                        destinationWriter.Write( true );
                        simpleBinaryTimeseriesValueDataReader.WriteTo( destinationWriter );
                    }
                    else
                    {
                        destinationWriter.Write( false );
                    }
                }
            }
        }

        public SimpleBinaryTimeseriesValueDataReader GetBinaryTimeseriesValueCollectionDataReader( )
        {
            const string sql = SimpleBinaryTimeseriesValueDataReader.BaseQuery; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleBinaryTimeseriesValueDataReader = new SimpleBinaryTimeseriesValueDataReader( _loggerFactory, sqlDataReader );
                return simpleBinaryTimeseriesValueDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public IList<BinaryTimeseriesValueObject> GetBinaryTimeseriesValueCollection( )
        {
            var result = new List<BinaryTimeseriesValueObject>( );
            var simpleBinaryTimeseriesValueDataReader = GetBinaryTimeseriesValueCollectionDataReader( );
            using ( simpleBinaryTimeseriesValueDataReader )
            {
                while ( simpleBinaryTimeseriesValueDataReader.Read( ) )
                {
                    var data = simpleBinaryTimeseriesValueDataReader.GetDataObject( );
                    result.Add( data );
                }
            }
            return result;
        }

        public void GetBinaryTimeseriesValueCollection( Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleBinaryTimeseriesValueDataReader = GetBinaryTimeseriesValueCollectionDataReader( );
                using ( simpleBinaryTimeseriesValueDataReader )
                {
                    simpleBinaryTimeseriesValueDataReader.WriteResultSetTo( destinationWriter );
                }
            }
        }

        public SimpleBinaryTimeseriesValueDataReader GetBinaryTimeseriesValueCollectionByTimeseriesDataReader( Guid timeseries )
        {
            const string sql = SimpleBinaryTimeseriesValueDataReader.BaseQuery + " WHERE " +
                    SimpleBinaryTimeseriesValueDataReader.ViewAliasName + ".[Timeseries] = @timeseries " +
                    " ORDER BY " + SimpleBinaryTimeseriesValueDataReader.ViewAliasName + ".[Timeseries]," +SimpleBinaryTimeseriesValueDataReader.ViewAliasName + ".[Timestamp]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var timeseriesParameter = sqlCommandParameters.AddReference( "@timeseries", timeseries );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleBinaryTimeseriesValueDataReader = new SimpleBinaryTimeseriesValueDataReader( _loggerFactory, sqlDataReader );
                return simpleBinaryTimeseriesValueDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<BinaryTimeseriesValueObject> GetBinaryTimeseriesValueCollectionByTimeseries( Guid timeseries )
        {
            throw new NotImplementedException( );
        }
        public SimpleBinaryTimeseriesValueDataReader GetBinaryTimeseriesValueByTimeseriesAndTimestampDataReader( Guid timeseries, DateTime timestamp )
        {
            const string sql = SimpleBinaryTimeseriesValueDataReader.BaseQuery + " WHERE " +
                    SimpleBinaryTimeseriesValueDataReader.ViewAliasName + ".[Timeseries] = @timeseries AND " +
                    SimpleBinaryTimeseriesValueDataReader.ViewAliasName + ".[Timestamp] = @timestamp " +
                    " ORDER BY " + SimpleBinaryTimeseriesValueDataReader.ViewAliasName + ".[Timeseries]," +SimpleBinaryTimeseriesValueDataReader.ViewAliasName + ".[Timestamp]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var timeseriesParameter = sqlCommandParameters.AddReference( "@timeseries", timeseries );
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@timestamp", timestamp );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleBinaryTimeseriesValueDataReader = new SimpleBinaryTimeseriesValueDataReader( _loggerFactory, sqlDataReader );
                return simpleBinaryTimeseriesValueDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public BinaryTimeseriesValueObject? GetBinaryTimeseriesValueByTimeseriesAndTimestamp( Guid timeseries, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public BinaryTimeseriesValueObject? GetBinaryTimeseriesValueByTimeseriesAtTimestamp( Guid timeseries, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<BinaryTimeseriesValueObject> GetBinaryTimeseriesValueByTimeseriesFromTimestamp( Guid timeseries, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<BinaryTimeseriesValueObject> GetBinaryTimeseriesValueByTimeseriesUntilTimestamp( Guid timeseries, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<BinaryTimeseriesValueObject> GetBinaryTimeseriesValueByTimeseriesOverTimestamp( Guid timeseries, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException( );
        }
        public SimpleBinaryTimeseriesValueDataReader GetBinaryTimeseriesValueCollectionByTimestampDataReader( DateTime timestamp )
        {
            const string sql = SimpleBinaryTimeseriesValueDataReader.BaseQuery + " WHERE " +
                    SimpleBinaryTimeseriesValueDataReader.ViewAliasName + ".[Timestamp] = @timestamp " +
                    " ORDER BY " + SimpleBinaryTimeseriesValueDataReader.ViewAliasName + ".[Timestamp]," +SimpleBinaryTimeseriesValueDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@timestamp", timestamp );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleBinaryTimeseriesValueDataReader = new SimpleBinaryTimeseriesValueDataReader( _loggerFactory, sqlDataReader );
                return simpleBinaryTimeseriesValueDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<BinaryTimeseriesValueObject> GetBinaryTimeseriesValueCollectionByTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<BinaryTimeseriesValueObject> GetBinaryTimeseriesValueCollectionAtTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<BinaryTimeseriesValueObject> GetBinaryTimeseriesValueCollectionFromTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<BinaryTimeseriesValueObject> GetBinaryTimeseriesValueCollectionUntilTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<BinaryTimeseriesValueObject> GetBinaryTimeseriesValueCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException( );
        }
        // ---------------------------------------------------------------------
        // Bookmark queries
        // ---------------------------------------------------------------------
        public SimpleBookmarkDataReader GetBookmarkByIdDataReader( Guid id )
        {
            const string sql = SimpleBookmarkDataReader.BaseQuery + "WHERE " + SimpleBookmarkDataReader.ViewAliasName + ".[Id] = @id"; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                sqlCommandParameters.AddGuid( "@id", id );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleBookmarkDataReader = new SimpleBookmarkDataReader( _loggerFactory, sqlDataReader );
                return simpleBookmarkDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public BookmarkObject? GetBookmarkById( Guid id )
        {
            var simpleBookmarkDataReader = GetBookmarkByIdDataReader( id );
            using ( simpleBookmarkDataReader )
            {
                if ( simpleBookmarkDataReader.Read( ) )
                {
                    var result = simpleBookmarkDataReader.GetDataObject( );
                    return result;
                }
            }
            return null;
        }

        public void GetBookmarkById( Guid id, Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleBookmarkDataReader = GetBookmarkByIdDataReader( id );
                using ( simpleBookmarkDataReader )
                {
                    if ( simpleBookmarkDataReader.Read( ) )
                    {
                        destinationWriter.Write( true );
                        simpleBookmarkDataReader.WriteTo( destinationWriter );
                    }
                    else
                    {
                        destinationWriter.Write( false );
                    }
                }
            }
        }

        public SimpleBookmarkDataReader GetBookmarkCollectionDataReader( )
        {
            const string sql = SimpleBookmarkDataReader.BaseQuery; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleBookmarkDataReader = new SimpleBookmarkDataReader( _loggerFactory, sqlDataReader );
                return simpleBookmarkDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public IList<BookmarkObject> GetBookmarkCollection( )
        {
            var result = new List<BookmarkObject>( );
            var simpleBookmarkDataReader = GetBookmarkCollectionDataReader( );
            using ( simpleBookmarkDataReader )
            {
                while ( simpleBookmarkDataReader.Read( ) )
                {
                    var data = simpleBookmarkDataReader.GetDataObject( );
                    result.Add( data );
                }
            }
            return result;
        }

        public void GetBookmarkCollection( Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleBookmarkDataReader = GetBookmarkCollectionDataReader( );
                using ( simpleBookmarkDataReader )
                {
                    simpleBookmarkDataReader.WriteResultSetTo( destinationWriter );
                }
            }
        }

        public SimpleBookmarkDataReader GetBookmarkCollectionByViewDataReader( Guid view )
        {
            const string sql = SimpleBookmarkDataReader.BaseQuery + " WHERE " +
                    SimpleBookmarkDataReader.ViewAliasName + ".[View] = @view " +
                    " ORDER BY " + SimpleBookmarkDataReader.ViewAliasName + ".[View]," +SimpleBookmarkDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var viewParameter = sqlCommandParameters.AddReference( "@view", view );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleBookmarkDataReader = new SimpleBookmarkDataReader( _loggerFactory, sqlDataReader );
                return simpleBookmarkDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<BookmarkObject> GetBookmarkCollectionByView( Guid view )
        {
            throw new NotImplementedException( );
        }
        // ---------------------------------------------------------------------
        // BooleanTimeseriesValue queries
        // ---------------------------------------------------------------------
        public SimpleBooleanTimeseriesValueDataReader GetBooleanTimeseriesValueByIdDataReader( Guid id )
        {
            const string sql = SimpleBooleanTimeseriesValueDataReader.BaseQuery + "WHERE " + SimpleBooleanTimeseriesValueDataReader.ViewAliasName + ".[Id] = @id"; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                sqlCommandParameters.AddGuid( "@id", id );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleBooleanTimeseriesValueDataReader = new SimpleBooleanTimeseriesValueDataReader( _loggerFactory, sqlDataReader );
                return simpleBooleanTimeseriesValueDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public BooleanTimeseriesValueObject? GetBooleanTimeseriesValueById( Guid id )
        {
            var simpleBooleanTimeseriesValueDataReader = GetBooleanTimeseriesValueByIdDataReader( id );
            using ( simpleBooleanTimeseriesValueDataReader )
            {
                if ( simpleBooleanTimeseriesValueDataReader.Read( ) )
                {
                    var result = simpleBooleanTimeseriesValueDataReader.GetDataObject( );
                    return result;
                }
            }
            return null;
        }

        public void GetBooleanTimeseriesValueById( Guid id, Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleBooleanTimeseriesValueDataReader = GetBooleanTimeseriesValueByIdDataReader( id );
                using ( simpleBooleanTimeseriesValueDataReader )
                {
                    if ( simpleBooleanTimeseriesValueDataReader.Read( ) )
                    {
                        destinationWriter.Write( true );
                        simpleBooleanTimeseriesValueDataReader.WriteTo( destinationWriter );
                    }
                    else
                    {
                        destinationWriter.Write( false );
                    }
                }
            }
        }

        public SimpleBooleanTimeseriesValueDataReader GetBooleanTimeseriesValueCollectionDataReader( )
        {
            const string sql = SimpleBooleanTimeseriesValueDataReader.BaseQuery; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleBooleanTimeseriesValueDataReader = new SimpleBooleanTimeseriesValueDataReader( _loggerFactory, sqlDataReader );
                return simpleBooleanTimeseriesValueDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public IList<BooleanTimeseriesValueObject> GetBooleanTimeseriesValueCollection( )
        {
            var result = new List<BooleanTimeseriesValueObject>( );
            var simpleBooleanTimeseriesValueDataReader = GetBooleanTimeseriesValueCollectionDataReader( );
            using ( simpleBooleanTimeseriesValueDataReader )
            {
                while ( simpleBooleanTimeseriesValueDataReader.Read( ) )
                {
                    var data = simpleBooleanTimeseriesValueDataReader.GetDataObject( );
                    result.Add( data );
                }
            }
            return result;
        }

        public void GetBooleanTimeseriesValueCollection( Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleBooleanTimeseriesValueDataReader = GetBooleanTimeseriesValueCollectionDataReader( );
                using ( simpleBooleanTimeseriesValueDataReader )
                {
                    simpleBooleanTimeseriesValueDataReader.WriteResultSetTo( destinationWriter );
                }
            }
        }

        public SimpleBooleanTimeseriesValueDataReader GetBooleanTimeseriesValueCollectionByTimeseriesDataReader( Guid timeseries )
        {
            const string sql = SimpleBooleanTimeseriesValueDataReader.BaseQuery + " WHERE " +
                    SimpleBooleanTimeseriesValueDataReader.ViewAliasName + ".[Timeseries] = @timeseries " +
                    " ORDER BY " + SimpleBooleanTimeseriesValueDataReader.ViewAliasName + ".[Timeseries]," +SimpleBooleanTimeseriesValueDataReader.ViewAliasName + ".[Timestamp]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var timeseriesParameter = sqlCommandParameters.AddReference( "@timeseries", timeseries );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleBooleanTimeseriesValueDataReader = new SimpleBooleanTimeseriesValueDataReader( _loggerFactory, sqlDataReader );
                return simpleBooleanTimeseriesValueDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<BooleanTimeseriesValueObject> GetBooleanTimeseriesValueCollectionByTimeseries( Guid timeseries )
        {
            throw new NotImplementedException( );
        }
        public SimpleBooleanTimeseriesValueDataReader GetBooleanTimeseriesValueByTimeseriesAndTimestampDataReader( Guid timeseries, DateTime timestamp )
        {
            const string sql = SimpleBooleanTimeseriesValueDataReader.BaseQuery + " WHERE " +
                    SimpleBooleanTimeseriesValueDataReader.ViewAliasName + ".[Timeseries] = @timeseries AND " +
                    SimpleBooleanTimeseriesValueDataReader.ViewAliasName + ".[Timestamp] = @timestamp " +
                    " ORDER BY " + SimpleBooleanTimeseriesValueDataReader.ViewAliasName + ".[Timeseries]," +SimpleBooleanTimeseriesValueDataReader.ViewAliasName + ".[Timestamp]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var timeseriesParameter = sqlCommandParameters.AddReference( "@timeseries", timeseries );
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@timestamp", timestamp );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleBooleanTimeseriesValueDataReader = new SimpleBooleanTimeseriesValueDataReader( _loggerFactory, sqlDataReader );
                return simpleBooleanTimeseriesValueDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public BooleanTimeseriesValueObject? GetBooleanTimeseriesValueByTimeseriesAndTimestamp( Guid timeseries, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public BooleanTimeseriesValueObject? GetBooleanTimeseriesValueByTimeseriesAtTimestamp( Guid timeseries, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<BooleanTimeseriesValueObject> GetBooleanTimeseriesValueByTimeseriesFromTimestamp( Guid timeseries, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<BooleanTimeseriesValueObject> GetBooleanTimeseriesValueByTimeseriesUntilTimestamp( Guid timeseries, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<BooleanTimeseriesValueObject> GetBooleanTimeseriesValueByTimeseriesOverTimestamp( Guid timeseries, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException( );
        }
        public SimpleBooleanTimeseriesValueDataReader GetBooleanTimeseriesValueCollectionByTimestampDataReader( DateTime timestamp )
        {
            const string sql = SimpleBooleanTimeseriesValueDataReader.BaseQuery + " WHERE " +
                    SimpleBooleanTimeseriesValueDataReader.ViewAliasName + ".[Timestamp] = @timestamp " +
                    " ORDER BY " + SimpleBooleanTimeseriesValueDataReader.ViewAliasName + ".[Timestamp]," +SimpleBooleanTimeseriesValueDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@timestamp", timestamp );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleBooleanTimeseriesValueDataReader = new SimpleBooleanTimeseriesValueDataReader( _loggerFactory, sqlDataReader );
                return simpleBooleanTimeseriesValueDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<BooleanTimeseriesValueObject> GetBooleanTimeseriesValueCollectionByTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<BooleanTimeseriesValueObject> GetBooleanTimeseriesValueCollectionAtTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<BooleanTimeseriesValueObject> GetBooleanTimeseriesValueCollectionFromTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<BooleanTimeseriesValueObject> GetBooleanTimeseriesValueCollectionUntilTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<BooleanTimeseriesValueObject> GetBooleanTimeseriesValueCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException( );
        }
        // ---------------------------------------------------------------------
        // ByteTimeseriesValue queries
        // ---------------------------------------------------------------------
        public SimpleByteTimeseriesValueDataReader GetByteTimeseriesValueByIdDataReader( Guid id )
        {
            const string sql = SimpleByteTimeseriesValueDataReader.BaseQuery + "WHERE " + SimpleByteTimeseriesValueDataReader.ViewAliasName + ".[Id] = @id"; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                sqlCommandParameters.AddGuid( "@id", id );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleByteTimeseriesValueDataReader = new SimpleByteTimeseriesValueDataReader( _loggerFactory, sqlDataReader );
                return simpleByteTimeseriesValueDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public ByteTimeseriesValueObject? GetByteTimeseriesValueById( Guid id )
        {
            var simpleByteTimeseriesValueDataReader = GetByteTimeseriesValueByIdDataReader( id );
            using ( simpleByteTimeseriesValueDataReader )
            {
                if ( simpleByteTimeseriesValueDataReader.Read( ) )
                {
                    var result = simpleByteTimeseriesValueDataReader.GetDataObject( );
                    return result;
                }
            }
            return null;
        }

        public void GetByteTimeseriesValueById( Guid id, Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleByteTimeseriesValueDataReader = GetByteTimeseriesValueByIdDataReader( id );
                using ( simpleByteTimeseriesValueDataReader )
                {
                    if ( simpleByteTimeseriesValueDataReader.Read( ) )
                    {
                        destinationWriter.Write( true );
                        simpleByteTimeseriesValueDataReader.WriteTo( destinationWriter );
                    }
                    else
                    {
                        destinationWriter.Write( false );
                    }
                }
            }
        }

        public SimpleByteTimeseriesValueDataReader GetByteTimeseriesValueCollectionDataReader( )
        {
            const string sql = SimpleByteTimeseriesValueDataReader.BaseQuery; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleByteTimeseriesValueDataReader = new SimpleByteTimeseriesValueDataReader( _loggerFactory, sqlDataReader );
                return simpleByteTimeseriesValueDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public IList<ByteTimeseriesValueObject> GetByteTimeseriesValueCollection( )
        {
            var result = new List<ByteTimeseriesValueObject>( );
            var simpleByteTimeseriesValueDataReader = GetByteTimeseriesValueCollectionDataReader( );
            using ( simpleByteTimeseriesValueDataReader )
            {
                while ( simpleByteTimeseriesValueDataReader.Read( ) )
                {
                    var data = simpleByteTimeseriesValueDataReader.GetDataObject( );
                    result.Add( data );
                }
            }
            return result;
        }

        public void GetByteTimeseriesValueCollection( Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleByteTimeseriesValueDataReader = GetByteTimeseriesValueCollectionDataReader( );
                using ( simpleByteTimeseriesValueDataReader )
                {
                    simpleByteTimeseriesValueDataReader.WriteResultSetTo( destinationWriter );
                }
            }
        }

        public SimpleByteTimeseriesValueDataReader GetByteTimeseriesValueCollectionByTimeseriesDataReader( Guid timeseries )
        {
            const string sql = SimpleByteTimeseriesValueDataReader.BaseQuery + " WHERE " +
                    SimpleByteTimeseriesValueDataReader.ViewAliasName + ".[Timeseries] = @timeseries " +
                    " ORDER BY " + SimpleByteTimeseriesValueDataReader.ViewAliasName + ".[Timeseries]," +SimpleByteTimeseriesValueDataReader.ViewAliasName + ".[Timestamp]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var timeseriesParameter = sqlCommandParameters.AddReference( "@timeseries", timeseries );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleByteTimeseriesValueDataReader = new SimpleByteTimeseriesValueDataReader( _loggerFactory, sqlDataReader );
                return simpleByteTimeseriesValueDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<ByteTimeseriesValueObject> GetByteTimeseriesValueCollectionByTimeseries( Guid timeseries )
        {
            throw new NotImplementedException( );
        }
        public SimpleByteTimeseriesValueDataReader GetByteTimeseriesValueByTimeseriesAndTimestampDataReader( Guid timeseries, DateTime timestamp )
        {
            const string sql = SimpleByteTimeseriesValueDataReader.BaseQuery + " WHERE " +
                    SimpleByteTimeseriesValueDataReader.ViewAliasName + ".[Timeseries] = @timeseries AND " +
                    SimpleByteTimeseriesValueDataReader.ViewAliasName + ".[Timestamp] = @timestamp " +
                    " ORDER BY " + SimpleByteTimeseriesValueDataReader.ViewAliasName + ".[Timeseries]," +SimpleByteTimeseriesValueDataReader.ViewAliasName + ".[Timestamp]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var timeseriesParameter = sqlCommandParameters.AddReference( "@timeseries", timeseries );
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@timestamp", timestamp );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleByteTimeseriesValueDataReader = new SimpleByteTimeseriesValueDataReader( _loggerFactory, sqlDataReader );
                return simpleByteTimeseriesValueDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public ByteTimeseriesValueObject? GetByteTimeseriesValueByTimeseriesAndTimestamp( Guid timeseries, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public ByteTimeseriesValueObject? GetByteTimeseriesValueByTimeseriesAtTimestamp( Guid timeseries, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<ByteTimeseriesValueObject> GetByteTimeseriesValueByTimeseriesFromTimestamp( Guid timeseries, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<ByteTimeseriesValueObject> GetByteTimeseriesValueByTimeseriesUntilTimestamp( Guid timeseries, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<ByteTimeseriesValueObject> GetByteTimeseriesValueByTimeseriesOverTimestamp( Guid timeseries, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException( );
        }
        public SimpleByteTimeseriesValueDataReader GetByteTimeseriesValueCollectionByTimestampDataReader( DateTime timestamp )
        {
            const string sql = SimpleByteTimeseriesValueDataReader.BaseQuery + " WHERE " +
                    SimpleByteTimeseriesValueDataReader.ViewAliasName + ".[Timestamp] = @timestamp " +
                    " ORDER BY " + SimpleByteTimeseriesValueDataReader.ViewAliasName + ".[Timestamp]," +SimpleByteTimeseriesValueDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@timestamp", timestamp );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleByteTimeseriesValueDataReader = new SimpleByteTimeseriesValueDataReader( _loggerFactory, sqlDataReader );
                return simpleByteTimeseriesValueDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<ByteTimeseriesValueObject> GetByteTimeseriesValueCollectionByTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<ByteTimeseriesValueObject> GetByteTimeseriesValueCollectionAtTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<ByteTimeseriesValueObject> GetByteTimeseriesValueCollectionFromTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<ByteTimeseriesValueObject> GetByteTimeseriesValueCollectionUntilTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<ByteTimeseriesValueObject> GetByteTimeseriesValueCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException( );
        }
        // ---------------------------------------------------------------------
        // CameraCommand queries
        // ---------------------------------------------------------------------
        public ComplexCameraCommandDataReader GetCameraCommandByIdDataReader( Guid id )
        {
            const string sql = ComplexCameraCommandDataReader.BaseQuery + "WHERE " + ComplexCameraCommandDataReader.ViewAliasName + ".[Id] = @id"; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                sqlCommandParameters.AddGuid( "@id", id );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var complexCameraCommandDataReader = new ComplexCameraCommandDataReader( _loggerFactory, sqlDataReader );
                return complexCameraCommandDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public CameraCommandObject? GetCameraCommandById( Guid id )
        {
            var complexCameraCommandDataReader = GetCameraCommandByIdDataReader( id );
            using ( complexCameraCommandDataReader )
            {
                if ( complexCameraCommandDataReader.Read( ) )
                {
                    var result = complexCameraCommandDataReader.GetDataObject( );
                    return result;
                }
            }
            return null;
        }

        public void GetCameraCommandById( Guid id, Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var complexCameraCommandDataReader = GetCameraCommandByIdDataReader( id );
                using ( complexCameraCommandDataReader )
                {
                    if ( complexCameraCommandDataReader.Read( ) )
                    {
                        destinationWriter.Write( true );
                        complexCameraCommandDataReader.WriteTo( destinationWriter );
                    }
                    else
                    {
                        destinationWriter.Write( false );
                    }
                }
            }
        }

        public ComplexCameraCommandDataReader GetCameraCommandCollectionDataReader( )
        {
            const string sql = ComplexCameraCommandDataReader.BaseQuery; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var complexCameraCommandDataReader = new ComplexCameraCommandDataReader( _loggerFactory, sqlDataReader );
                return complexCameraCommandDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public IList<CameraCommandObject> GetCameraCommandCollection( )
        {
            var result = new List<CameraCommandObject>( );
            var complexCameraCommandDataReader = GetCameraCommandCollectionDataReader( );
            using ( complexCameraCommandDataReader )
            {
                while ( complexCameraCommandDataReader.Read( ) )
                {
                    var data = complexCameraCommandDataReader.GetDataObject( );
                    result.Add( data );
                }
            }
            return result;
        }

        public void GetCameraCommandCollection( Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var complexCameraCommandDataReader = GetCameraCommandCollectionDataReader( );
                using ( complexCameraCommandDataReader )
                {
                    complexCameraCommandDataReader.WriteResultSetTo( destinationWriter );
                }
            }
        }

        public ComplexCameraCommandDataReader GetCameraCommandCollectionByCameraDataReader( Guid camera )
        {
            const string sql = ComplexCameraCommandDataReader.BaseQuery + " WHERE " +
                    ComplexCameraCommandDataReader.ViewAliasName + ".[Camera] = @camera " +
                    " ORDER BY " + ComplexCameraCommandDataReader.ViewAliasName + ".[Camera]," +ComplexCameraCommandDataReader.ViewAliasName + ".[Timestamp]," +ComplexCameraCommandDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var cameraParameter = sqlCommandParameters.AddReference( "@camera", camera );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var complexCameraCommandDataReader = new ComplexCameraCommandDataReader( _loggerFactory, sqlDataReader );
                return complexCameraCommandDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<CameraCommandObject> GetCameraCommandCollectionByCamera( Guid camera )
        {
            throw new NotImplementedException( );
        }
        public ComplexCameraCommandDataReader GetCameraCommandCollectionByCameraAndTimestampDataReader( Guid camera, DateTime timestamp )
        {
            const string sql = ComplexCameraCommandDataReader.BaseQuery + " WHERE " +
                    ComplexCameraCommandDataReader.ViewAliasName + ".[Camera] = @camera AND " +
                    ComplexCameraCommandDataReader.ViewAliasName + ".[Timestamp] = @timestamp " +
                    " ORDER BY " + ComplexCameraCommandDataReader.ViewAliasName + ".[Camera]," +ComplexCameraCommandDataReader.ViewAliasName + ".[Timestamp]," +ComplexCameraCommandDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var cameraParameter = sqlCommandParameters.AddReference( "@camera", camera );
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@timestamp", timestamp );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var complexCameraCommandDataReader = new ComplexCameraCommandDataReader( _loggerFactory, sqlDataReader );
                return complexCameraCommandDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<CameraCommandObject> GetCameraCommandCollectionByCameraAndTimestamp( Guid camera, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<CameraCommandObject> GetCameraCommandCollectionByCameraAtTimestamp( Guid camera, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<CameraCommandObject> GetCameraCommandCollectionByCameraFromTimestamp( Guid camera, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<CameraCommandObject> GetCameraCommandCollectionByCameraUntilTimestamp( Guid camera, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<CameraCommandObject> GetCameraCommandCollectionByCameraOverTimestamp( Guid camera, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException( );
        }
        public ComplexCameraCommandDataReader GetCameraCommandCollectionByTimestampDataReader( DateTime timestamp )
        {
            const string sql = ComplexCameraCommandDataReader.BaseQuery + " WHERE " +
                    ComplexCameraCommandDataReader.ViewAliasName + ".[Timestamp] = @timestamp " +
                    " ORDER BY " + ComplexCameraCommandDataReader.ViewAliasName + ".[Timestamp]," +ComplexCameraCommandDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@timestamp", timestamp );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var complexCameraCommandDataReader = new ComplexCameraCommandDataReader( _loggerFactory, sqlDataReader );
                return complexCameraCommandDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<CameraCommandObject> GetCameraCommandCollectionByTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<CameraCommandObject> GetCameraCommandCollectionAtTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<CameraCommandObject> GetCameraCommandCollectionFromTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<CameraCommandObject> GetCameraCommandCollectionUntilTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<CameraCommandObject> GetCameraCommandCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException( );
        }
        public ComplexCameraCommandDataReader GetCameraCommandCollectionByReplyDataReader( Guid reply )
        {
            const string sql = ComplexCameraCommandDataReader.BaseQuery + " WHERE " +
                    ComplexCameraCommandDataReader.ViewAliasName + ".[Reply] = @reply " +
                    " ORDER BY " + ComplexCameraCommandDataReader.ViewAliasName + ".[Reply]," +ComplexCameraCommandDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var replyParameter = sqlCommandParameters.AddReference( "@reply", reply );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var complexCameraCommandDataReader = new ComplexCameraCommandDataReader( _loggerFactory, sqlDataReader );
                return complexCameraCommandDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<CameraCommandObject> GetCameraCommandCollectionByReply( Guid reply )
        {
            throw new NotImplementedException( );
        }
        // ---------------------------------------------------------------------
        // CameraCommandAbsoluteMove queries
        // ---------------------------------------------------------------------
        public SimpleCameraCommandAbsoluteMoveDataReader GetCameraCommandAbsoluteMoveByIdDataReader( Guid id )
        {
            const string sql = SimpleCameraCommandAbsoluteMoveDataReader.BaseQuery + "WHERE " + SimpleCameraCommandAbsoluteMoveDataReader.ViewAliasName + ".[Id] = @id"; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                sqlCommandParameters.AddGuid( "@id", id );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleCameraCommandAbsoluteMoveDataReader = new SimpleCameraCommandAbsoluteMoveDataReader( _loggerFactory, sqlDataReader );
                return simpleCameraCommandAbsoluteMoveDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public CameraCommandAbsoluteMoveObject? GetCameraCommandAbsoluteMoveById( Guid id )
        {
            var simpleCameraCommandAbsoluteMoveDataReader = GetCameraCommandAbsoluteMoveByIdDataReader( id );
            using ( simpleCameraCommandAbsoluteMoveDataReader )
            {
                if ( simpleCameraCommandAbsoluteMoveDataReader.Read( ) )
                {
                    var result = simpleCameraCommandAbsoluteMoveDataReader.GetDataObject( );
                    return result;
                }
            }
            return null;
        }

        public void GetCameraCommandAbsoluteMoveById( Guid id, Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleCameraCommandAbsoluteMoveDataReader = GetCameraCommandAbsoluteMoveByIdDataReader( id );
                using ( simpleCameraCommandAbsoluteMoveDataReader )
                {
                    if ( simpleCameraCommandAbsoluteMoveDataReader.Read( ) )
                    {
                        destinationWriter.Write( true );
                        simpleCameraCommandAbsoluteMoveDataReader.WriteTo( destinationWriter );
                    }
                    else
                    {
                        destinationWriter.Write( false );
                    }
                }
            }
        }

        public SimpleCameraCommandAbsoluteMoveDataReader GetCameraCommandAbsoluteMoveCollectionDataReader( )
        {
            const string sql = SimpleCameraCommandAbsoluteMoveDataReader.BaseQuery; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleCameraCommandAbsoluteMoveDataReader = new SimpleCameraCommandAbsoluteMoveDataReader( _loggerFactory, sqlDataReader );
                return simpleCameraCommandAbsoluteMoveDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public IList<CameraCommandAbsoluteMoveObject> GetCameraCommandAbsoluteMoveCollection( )
        {
            var result = new List<CameraCommandAbsoluteMoveObject>( );
            var simpleCameraCommandAbsoluteMoveDataReader = GetCameraCommandAbsoluteMoveCollectionDataReader( );
            using ( simpleCameraCommandAbsoluteMoveDataReader )
            {
                while ( simpleCameraCommandAbsoluteMoveDataReader.Read( ) )
                {
                    var data = simpleCameraCommandAbsoluteMoveDataReader.GetDataObject( );
                    result.Add( data );
                }
            }
            return result;
        }

        public void GetCameraCommandAbsoluteMoveCollection( Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleCameraCommandAbsoluteMoveDataReader = GetCameraCommandAbsoluteMoveCollectionDataReader( );
                using ( simpleCameraCommandAbsoluteMoveDataReader )
                {
                    simpleCameraCommandAbsoluteMoveDataReader.WriteResultSetTo( destinationWriter );
                }
            }
        }

        public SimpleCameraCommandAbsoluteMoveDataReader GetCameraCommandAbsoluteMoveCollectionByCameraDataReader( Guid camera )
        {
            const string sql = SimpleCameraCommandAbsoluteMoveDataReader.BaseQuery + " WHERE " +
                    SimpleCameraCommandAbsoluteMoveDataReader.ViewAliasName + ".[Camera] = @camera " +
                    " ORDER BY " + SimpleCameraCommandAbsoluteMoveDataReader.ViewAliasName + ".[Camera]," +SimpleCameraCommandAbsoluteMoveDataReader.ViewAliasName + ".[Timestamp]," +SimpleCameraCommandAbsoluteMoveDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var cameraParameter = sqlCommandParameters.AddReference( "@camera", camera );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleCameraCommandAbsoluteMoveDataReader = new SimpleCameraCommandAbsoluteMoveDataReader( _loggerFactory, sqlDataReader );
                return simpleCameraCommandAbsoluteMoveDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<CameraCommandAbsoluteMoveObject> GetCameraCommandAbsoluteMoveCollectionByCamera( Guid camera )
        {
            throw new NotImplementedException( );
        }
        public SimpleCameraCommandAbsoluteMoveDataReader GetCameraCommandAbsoluteMoveCollectionByCameraAndTimestampDataReader( Guid camera, DateTime timestamp )
        {
            const string sql = SimpleCameraCommandAbsoluteMoveDataReader.BaseQuery + " WHERE " +
                    SimpleCameraCommandAbsoluteMoveDataReader.ViewAliasName + ".[Camera] = @camera AND " +
                    SimpleCameraCommandAbsoluteMoveDataReader.ViewAliasName + ".[Timestamp] = @timestamp " +
                    " ORDER BY " + SimpleCameraCommandAbsoluteMoveDataReader.ViewAliasName + ".[Camera]," +SimpleCameraCommandAbsoluteMoveDataReader.ViewAliasName + ".[Timestamp]," +SimpleCameraCommandAbsoluteMoveDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var cameraParameter = sqlCommandParameters.AddReference( "@camera", camera );
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@timestamp", timestamp );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleCameraCommandAbsoluteMoveDataReader = new SimpleCameraCommandAbsoluteMoveDataReader( _loggerFactory, sqlDataReader );
                return simpleCameraCommandAbsoluteMoveDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<CameraCommandAbsoluteMoveObject> GetCameraCommandAbsoluteMoveCollectionByCameraAndTimestamp( Guid camera, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<CameraCommandAbsoluteMoveObject> GetCameraCommandAbsoluteMoveCollectionByCameraAtTimestamp( Guid camera, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<CameraCommandAbsoluteMoveObject> GetCameraCommandAbsoluteMoveCollectionByCameraFromTimestamp( Guid camera, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<CameraCommandAbsoluteMoveObject> GetCameraCommandAbsoluteMoveCollectionByCameraUntilTimestamp( Guid camera, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<CameraCommandAbsoluteMoveObject> GetCameraCommandAbsoluteMoveCollectionByCameraOverTimestamp( Guid camera, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException( );
        }
        public SimpleCameraCommandAbsoluteMoveDataReader GetCameraCommandAbsoluteMoveCollectionByTimestampDataReader( DateTime timestamp )
        {
            const string sql = SimpleCameraCommandAbsoluteMoveDataReader.BaseQuery + " WHERE " +
                    SimpleCameraCommandAbsoluteMoveDataReader.ViewAliasName + ".[Timestamp] = @timestamp " +
                    " ORDER BY " + SimpleCameraCommandAbsoluteMoveDataReader.ViewAliasName + ".[Timestamp]," +SimpleCameraCommandAbsoluteMoveDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@timestamp", timestamp );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleCameraCommandAbsoluteMoveDataReader = new SimpleCameraCommandAbsoluteMoveDataReader( _loggerFactory, sqlDataReader );
                return simpleCameraCommandAbsoluteMoveDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<CameraCommandAbsoluteMoveObject> GetCameraCommandAbsoluteMoveCollectionByTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<CameraCommandAbsoluteMoveObject> GetCameraCommandAbsoluteMoveCollectionAtTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<CameraCommandAbsoluteMoveObject> GetCameraCommandAbsoluteMoveCollectionFromTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<CameraCommandAbsoluteMoveObject> GetCameraCommandAbsoluteMoveCollectionUntilTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<CameraCommandAbsoluteMoveObject> GetCameraCommandAbsoluteMoveCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException( );
        }
        public SimpleCameraCommandAbsoluteMoveDataReader GetCameraCommandAbsoluteMoveCollectionByReplyDataReader( Guid reply )
        {
            const string sql = SimpleCameraCommandAbsoluteMoveDataReader.BaseQuery + " WHERE " +
                    SimpleCameraCommandAbsoluteMoveDataReader.ViewAliasName + ".[Reply] = @reply " +
                    " ORDER BY " + SimpleCameraCommandAbsoluteMoveDataReader.ViewAliasName + ".[Reply]," +SimpleCameraCommandAbsoluteMoveDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var replyParameter = sqlCommandParameters.AddReference( "@reply", reply );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleCameraCommandAbsoluteMoveDataReader = new SimpleCameraCommandAbsoluteMoveDataReader( _loggerFactory, sqlDataReader );
                return simpleCameraCommandAbsoluteMoveDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<CameraCommandAbsoluteMoveObject> GetCameraCommandAbsoluteMoveCollectionByReply( Guid reply )
        {
            throw new NotImplementedException( );
        }
        // ---------------------------------------------------------------------
        // CameraCommandAdjustPanTiltZoom queries
        // ---------------------------------------------------------------------
        public SimpleCameraCommandAdjustPanTiltZoomDataReader GetCameraCommandAdjustPanTiltZoomByIdDataReader( Guid id )
        {
            const string sql = SimpleCameraCommandAdjustPanTiltZoomDataReader.BaseQuery + "WHERE " + SimpleCameraCommandAdjustPanTiltZoomDataReader.ViewAliasName + ".[Id] = @id"; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                sqlCommandParameters.AddGuid( "@id", id );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleCameraCommandAdjustPanTiltZoomDataReader = new SimpleCameraCommandAdjustPanTiltZoomDataReader( _loggerFactory, sqlDataReader );
                return simpleCameraCommandAdjustPanTiltZoomDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public CameraCommandAdjustPanTiltZoomObject? GetCameraCommandAdjustPanTiltZoomById( Guid id )
        {
            var simpleCameraCommandAdjustPanTiltZoomDataReader = GetCameraCommandAdjustPanTiltZoomByIdDataReader( id );
            using ( simpleCameraCommandAdjustPanTiltZoomDataReader )
            {
                if ( simpleCameraCommandAdjustPanTiltZoomDataReader.Read( ) )
                {
                    var result = simpleCameraCommandAdjustPanTiltZoomDataReader.GetDataObject( );
                    return result;
                }
            }
            return null;
        }

        public void GetCameraCommandAdjustPanTiltZoomById( Guid id, Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleCameraCommandAdjustPanTiltZoomDataReader = GetCameraCommandAdjustPanTiltZoomByIdDataReader( id );
                using ( simpleCameraCommandAdjustPanTiltZoomDataReader )
                {
                    if ( simpleCameraCommandAdjustPanTiltZoomDataReader.Read( ) )
                    {
                        destinationWriter.Write( true );
                        simpleCameraCommandAdjustPanTiltZoomDataReader.WriteTo( destinationWriter );
                    }
                    else
                    {
                        destinationWriter.Write( false );
                    }
                }
            }
        }

        public SimpleCameraCommandAdjustPanTiltZoomDataReader GetCameraCommandAdjustPanTiltZoomCollectionDataReader( )
        {
            const string sql = SimpleCameraCommandAdjustPanTiltZoomDataReader.BaseQuery; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleCameraCommandAdjustPanTiltZoomDataReader = new SimpleCameraCommandAdjustPanTiltZoomDataReader( _loggerFactory, sqlDataReader );
                return simpleCameraCommandAdjustPanTiltZoomDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public IList<CameraCommandAdjustPanTiltZoomObject> GetCameraCommandAdjustPanTiltZoomCollection( )
        {
            var result = new List<CameraCommandAdjustPanTiltZoomObject>( );
            var simpleCameraCommandAdjustPanTiltZoomDataReader = GetCameraCommandAdjustPanTiltZoomCollectionDataReader( );
            using ( simpleCameraCommandAdjustPanTiltZoomDataReader )
            {
                while ( simpleCameraCommandAdjustPanTiltZoomDataReader.Read( ) )
                {
                    var data = simpleCameraCommandAdjustPanTiltZoomDataReader.GetDataObject( );
                    result.Add( data );
                }
            }
            return result;
        }

        public void GetCameraCommandAdjustPanTiltZoomCollection( Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleCameraCommandAdjustPanTiltZoomDataReader = GetCameraCommandAdjustPanTiltZoomCollectionDataReader( );
                using ( simpleCameraCommandAdjustPanTiltZoomDataReader )
                {
                    simpleCameraCommandAdjustPanTiltZoomDataReader.WriteResultSetTo( destinationWriter );
                }
            }
        }

        public SimpleCameraCommandAdjustPanTiltZoomDataReader GetCameraCommandAdjustPanTiltZoomCollectionByCameraDataReader( Guid camera )
        {
            const string sql = SimpleCameraCommandAdjustPanTiltZoomDataReader.BaseQuery + " WHERE " +
                    SimpleCameraCommandAdjustPanTiltZoomDataReader.ViewAliasName + ".[Camera] = @camera " +
                    " ORDER BY " + SimpleCameraCommandAdjustPanTiltZoomDataReader.ViewAliasName + ".[Camera]," +SimpleCameraCommandAdjustPanTiltZoomDataReader.ViewAliasName + ".[Timestamp]," +SimpleCameraCommandAdjustPanTiltZoomDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var cameraParameter = sqlCommandParameters.AddReference( "@camera", camera );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleCameraCommandAdjustPanTiltZoomDataReader = new SimpleCameraCommandAdjustPanTiltZoomDataReader( _loggerFactory, sqlDataReader );
                return simpleCameraCommandAdjustPanTiltZoomDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<CameraCommandAdjustPanTiltZoomObject> GetCameraCommandAdjustPanTiltZoomCollectionByCamera( Guid camera )
        {
            throw new NotImplementedException( );
        }
        public SimpleCameraCommandAdjustPanTiltZoomDataReader GetCameraCommandAdjustPanTiltZoomCollectionByCameraAndTimestampDataReader( Guid camera, DateTime timestamp )
        {
            const string sql = SimpleCameraCommandAdjustPanTiltZoomDataReader.BaseQuery + " WHERE " +
                    SimpleCameraCommandAdjustPanTiltZoomDataReader.ViewAliasName + ".[Camera] = @camera AND " +
                    SimpleCameraCommandAdjustPanTiltZoomDataReader.ViewAliasName + ".[Timestamp] = @timestamp " +
                    " ORDER BY " + SimpleCameraCommandAdjustPanTiltZoomDataReader.ViewAliasName + ".[Camera]," +SimpleCameraCommandAdjustPanTiltZoomDataReader.ViewAliasName + ".[Timestamp]," +SimpleCameraCommandAdjustPanTiltZoomDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var cameraParameter = sqlCommandParameters.AddReference( "@camera", camera );
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@timestamp", timestamp );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleCameraCommandAdjustPanTiltZoomDataReader = new SimpleCameraCommandAdjustPanTiltZoomDataReader( _loggerFactory, sqlDataReader );
                return simpleCameraCommandAdjustPanTiltZoomDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<CameraCommandAdjustPanTiltZoomObject> GetCameraCommandAdjustPanTiltZoomCollectionByCameraAndTimestamp( Guid camera, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<CameraCommandAdjustPanTiltZoomObject> GetCameraCommandAdjustPanTiltZoomCollectionByCameraAtTimestamp( Guid camera, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<CameraCommandAdjustPanTiltZoomObject> GetCameraCommandAdjustPanTiltZoomCollectionByCameraFromTimestamp( Guid camera, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<CameraCommandAdjustPanTiltZoomObject> GetCameraCommandAdjustPanTiltZoomCollectionByCameraUntilTimestamp( Guid camera, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<CameraCommandAdjustPanTiltZoomObject> GetCameraCommandAdjustPanTiltZoomCollectionByCameraOverTimestamp( Guid camera, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException( );
        }
        public SimpleCameraCommandAdjustPanTiltZoomDataReader GetCameraCommandAdjustPanTiltZoomCollectionByTimestampDataReader( DateTime timestamp )
        {
            const string sql = SimpleCameraCommandAdjustPanTiltZoomDataReader.BaseQuery + " WHERE " +
                    SimpleCameraCommandAdjustPanTiltZoomDataReader.ViewAliasName + ".[Timestamp] = @timestamp " +
                    " ORDER BY " + SimpleCameraCommandAdjustPanTiltZoomDataReader.ViewAliasName + ".[Timestamp]," +SimpleCameraCommandAdjustPanTiltZoomDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@timestamp", timestamp );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleCameraCommandAdjustPanTiltZoomDataReader = new SimpleCameraCommandAdjustPanTiltZoomDataReader( _loggerFactory, sqlDataReader );
                return simpleCameraCommandAdjustPanTiltZoomDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<CameraCommandAdjustPanTiltZoomObject> GetCameraCommandAdjustPanTiltZoomCollectionByTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<CameraCommandAdjustPanTiltZoomObject> GetCameraCommandAdjustPanTiltZoomCollectionAtTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<CameraCommandAdjustPanTiltZoomObject> GetCameraCommandAdjustPanTiltZoomCollectionFromTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<CameraCommandAdjustPanTiltZoomObject> GetCameraCommandAdjustPanTiltZoomCollectionUntilTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<CameraCommandAdjustPanTiltZoomObject> GetCameraCommandAdjustPanTiltZoomCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException( );
        }
        public SimpleCameraCommandAdjustPanTiltZoomDataReader GetCameraCommandAdjustPanTiltZoomCollectionByReplyDataReader( Guid reply )
        {
            const string sql = SimpleCameraCommandAdjustPanTiltZoomDataReader.BaseQuery + " WHERE " +
                    SimpleCameraCommandAdjustPanTiltZoomDataReader.ViewAliasName + ".[Reply] = @reply " +
                    " ORDER BY " + SimpleCameraCommandAdjustPanTiltZoomDataReader.ViewAliasName + ".[Reply]," +SimpleCameraCommandAdjustPanTiltZoomDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var replyParameter = sqlCommandParameters.AddReference( "@reply", reply );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleCameraCommandAdjustPanTiltZoomDataReader = new SimpleCameraCommandAdjustPanTiltZoomDataReader( _loggerFactory, sqlDataReader );
                return simpleCameraCommandAdjustPanTiltZoomDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<CameraCommandAdjustPanTiltZoomObject> GetCameraCommandAdjustPanTiltZoomCollectionByReply( Guid reply )
        {
            throw new NotImplementedException( );
        }
        // ---------------------------------------------------------------------
        // CameraCommandContinuousMove queries
        // ---------------------------------------------------------------------
        public SimpleCameraCommandContinuousMoveDataReader GetCameraCommandContinuousMoveByIdDataReader( Guid id )
        {
            const string sql = SimpleCameraCommandContinuousMoveDataReader.BaseQuery + "WHERE " + SimpleCameraCommandContinuousMoveDataReader.ViewAliasName + ".[Id] = @id"; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                sqlCommandParameters.AddGuid( "@id", id );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleCameraCommandContinuousMoveDataReader = new SimpleCameraCommandContinuousMoveDataReader( _loggerFactory, sqlDataReader );
                return simpleCameraCommandContinuousMoveDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public CameraCommandContinuousMoveObject? GetCameraCommandContinuousMoveById( Guid id )
        {
            var simpleCameraCommandContinuousMoveDataReader = GetCameraCommandContinuousMoveByIdDataReader( id );
            using ( simpleCameraCommandContinuousMoveDataReader )
            {
                if ( simpleCameraCommandContinuousMoveDataReader.Read( ) )
                {
                    var result = simpleCameraCommandContinuousMoveDataReader.GetDataObject( );
                    return result;
                }
            }
            return null;
        }

        public void GetCameraCommandContinuousMoveById( Guid id, Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleCameraCommandContinuousMoveDataReader = GetCameraCommandContinuousMoveByIdDataReader( id );
                using ( simpleCameraCommandContinuousMoveDataReader )
                {
                    if ( simpleCameraCommandContinuousMoveDataReader.Read( ) )
                    {
                        destinationWriter.Write( true );
                        simpleCameraCommandContinuousMoveDataReader.WriteTo( destinationWriter );
                    }
                    else
                    {
                        destinationWriter.Write( false );
                    }
                }
            }
        }

        public SimpleCameraCommandContinuousMoveDataReader GetCameraCommandContinuousMoveCollectionDataReader( )
        {
            const string sql = SimpleCameraCommandContinuousMoveDataReader.BaseQuery; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleCameraCommandContinuousMoveDataReader = new SimpleCameraCommandContinuousMoveDataReader( _loggerFactory, sqlDataReader );
                return simpleCameraCommandContinuousMoveDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public IList<CameraCommandContinuousMoveObject> GetCameraCommandContinuousMoveCollection( )
        {
            var result = new List<CameraCommandContinuousMoveObject>( );
            var simpleCameraCommandContinuousMoveDataReader = GetCameraCommandContinuousMoveCollectionDataReader( );
            using ( simpleCameraCommandContinuousMoveDataReader )
            {
                while ( simpleCameraCommandContinuousMoveDataReader.Read( ) )
                {
                    var data = simpleCameraCommandContinuousMoveDataReader.GetDataObject( );
                    result.Add( data );
                }
            }
            return result;
        }

        public void GetCameraCommandContinuousMoveCollection( Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleCameraCommandContinuousMoveDataReader = GetCameraCommandContinuousMoveCollectionDataReader( );
                using ( simpleCameraCommandContinuousMoveDataReader )
                {
                    simpleCameraCommandContinuousMoveDataReader.WriteResultSetTo( destinationWriter );
                }
            }
        }

        public SimpleCameraCommandContinuousMoveDataReader GetCameraCommandContinuousMoveCollectionByCameraDataReader( Guid camera )
        {
            const string sql = SimpleCameraCommandContinuousMoveDataReader.BaseQuery + " WHERE " +
                    SimpleCameraCommandContinuousMoveDataReader.ViewAliasName + ".[Camera] = @camera " +
                    " ORDER BY " + SimpleCameraCommandContinuousMoveDataReader.ViewAliasName + ".[Camera]," +SimpleCameraCommandContinuousMoveDataReader.ViewAliasName + ".[Timestamp]," +SimpleCameraCommandContinuousMoveDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var cameraParameter = sqlCommandParameters.AddReference( "@camera", camera );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleCameraCommandContinuousMoveDataReader = new SimpleCameraCommandContinuousMoveDataReader( _loggerFactory, sqlDataReader );
                return simpleCameraCommandContinuousMoveDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<CameraCommandContinuousMoveObject> GetCameraCommandContinuousMoveCollectionByCamera( Guid camera )
        {
            throw new NotImplementedException( );
        }
        public SimpleCameraCommandContinuousMoveDataReader GetCameraCommandContinuousMoveCollectionByCameraAndTimestampDataReader( Guid camera, DateTime timestamp )
        {
            const string sql = SimpleCameraCommandContinuousMoveDataReader.BaseQuery + " WHERE " +
                    SimpleCameraCommandContinuousMoveDataReader.ViewAliasName + ".[Camera] = @camera AND " +
                    SimpleCameraCommandContinuousMoveDataReader.ViewAliasName + ".[Timestamp] = @timestamp " +
                    " ORDER BY " + SimpleCameraCommandContinuousMoveDataReader.ViewAliasName + ".[Camera]," +SimpleCameraCommandContinuousMoveDataReader.ViewAliasName + ".[Timestamp]," +SimpleCameraCommandContinuousMoveDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var cameraParameter = sqlCommandParameters.AddReference( "@camera", camera );
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@timestamp", timestamp );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleCameraCommandContinuousMoveDataReader = new SimpleCameraCommandContinuousMoveDataReader( _loggerFactory, sqlDataReader );
                return simpleCameraCommandContinuousMoveDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<CameraCommandContinuousMoveObject> GetCameraCommandContinuousMoveCollectionByCameraAndTimestamp( Guid camera, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<CameraCommandContinuousMoveObject> GetCameraCommandContinuousMoveCollectionByCameraAtTimestamp( Guid camera, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<CameraCommandContinuousMoveObject> GetCameraCommandContinuousMoveCollectionByCameraFromTimestamp( Guid camera, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<CameraCommandContinuousMoveObject> GetCameraCommandContinuousMoveCollectionByCameraUntilTimestamp( Guid camera, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<CameraCommandContinuousMoveObject> GetCameraCommandContinuousMoveCollectionByCameraOverTimestamp( Guid camera, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException( );
        }
        public SimpleCameraCommandContinuousMoveDataReader GetCameraCommandContinuousMoveCollectionByTimestampDataReader( DateTime timestamp )
        {
            const string sql = SimpleCameraCommandContinuousMoveDataReader.BaseQuery + " WHERE " +
                    SimpleCameraCommandContinuousMoveDataReader.ViewAliasName + ".[Timestamp] = @timestamp " +
                    " ORDER BY " + SimpleCameraCommandContinuousMoveDataReader.ViewAliasName + ".[Timestamp]," +SimpleCameraCommandContinuousMoveDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@timestamp", timestamp );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleCameraCommandContinuousMoveDataReader = new SimpleCameraCommandContinuousMoveDataReader( _loggerFactory, sqlDataReader );
                return simpleCameraCommandContinuousMoveDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<CameraCommandContinuousMoveObject> GetCameraCommandContinuousMoveCollectionByTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<CameraCommandContinuousMoveObject> GetCameraCommandContinuousMoveCollectionAtTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<CameraCommandContinuousMoveObject> GetCameraCommandContinuousMoveCollectionFromTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<CameraCommandContinuousMoveObject> GetCameraCommandContinuousMoveCollectionUntilTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<CameraCommandContinuousMoveObject> GetCameraCommandContinuousMoveCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException( );
        }
        public SimpleCameraCommandContinuousMoveDataReader GetCameraCommandContinuousMoveCollectionByReplyDataReader( Guid reply )
        {
            const string sql = SimpleCameraCommandContinuousMoveDataReader.BaseQuery + " WHERE " +
                    SimpleCameraCommandContinuousMoveDataReader.ViewAliasName + ".[Reply] = @reply " +
                    " ORDER BY " + SimpleCameraCommandContinuousMoveDataReader.ViewAliasName + ".[Reply]," +SimpleCameraCommandContinuousMoveDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var replyParameter = sqlCommandParameters.AddReference( "@reply", reply );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleCameraCommandContinuousMoveDataReader = new SimpleCameraCommandContinuousMoveDataReader( _loggerFactory, sqlDataReader );
                return simpleCameraCommandContinuousMoveDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<CameraCommandContinuousMoveObject> GetCameraCommandContinuousMoveCollectionByReply( Guid reply )
        {
            throw new NotImplementedException( );
        }
        // ---------------------------------------------------------------------
        // CameraCommandGeoMove queries
        // ---------------------------------------------------------------------
        public SimpleCameraCommandGeoMoveDataReader GetCameraCommandGeoMoveByIdDataReader( Guid id )
        {
            const string sql = SimpleCameraCommandGeoMoveDataReader.BaseQuery + "WHERE " + SimpleCameraCommandGeoMoveDataReader.ViewAliasName + ".[Id] = @id"; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                sqlCommandParameters.AddGuid( "@id", id );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleCameraCommandGeoMoveDataReader = new SimpleCameraCommandGeoMoveDataReader( _loggerFactory, sqlDataReader );
                return simpleCameraCommandGeoMoveDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public CameraCommandGeoMoveObject? GetCameraCommandGeoMoveById( Guid id )
        {
            var simpleCameraCommandGeoMoveDataReader = GetCameraCommandGeoMoveByIdDataReader( id );
            using ( simpleCameraCommandGeoMoveDataReader )
            {
                if ( simpleCameraCommandGeoMoveDataReader.Read( ) )
                {
                    var result = simpleCameraCommandGeoMoveDataReader.GetDataObject( );
                    return result;
                }
            }
            return null;
        }

        public void GetCameraCommandGeoMoveById( Guid id, Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleCameraCommandGeoMoveDataReader = GetCameraCommandGeoMoveByIdDataReader( id );
                using ( simpleCameraCommandGeoMoveDataReader )
                {
                    if ( simpleCameraCommandGeoMoveDataReader.Read( ) )
                    {
                        destinationWriter.Write( true );
                        simpleCameraCommandGeoMoveDataReader.WriteTo( destinationWriter );
                    }
                    else
                    {
                        destinationWriter.Write( false );
                    }
                }
            }
        }

        public SimpleCameraCommandGeoMoveDataReader GetCameraCommandGeoMoveCollectionDataReader( )
        {
            const string sql = SimpleCameraCommandGeoMoveDataReader.BaseQuery; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleCameraCommandGeoMoveDataReader = new SimpleCameraCommandGeoMoveDataReader( _loggerFactory, sqlDataReader );
                return simpleCameraCommandGeoMoveDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public IList<CameraCommandGeoMoveObject> GetCameraCommandGeoMoveCollection( )
        {
            var result = new List<CameraCommandGeoMoveObject>( );
            var simpleCameraCommandGeoMoveDataReader = GetCameraCommandGeoMoveCollectionDataReader( );
            using ( simpleCameraCommandGeoMoveDataReader )
            {
                while ( simpleCameraCommandGeoMoveDataReader.Read( ) )
                {
                    var data = simpleCameraCommandGeoMoveDataReader.GetDataObject( );
                    result.Add( data );
                }
            }
            return result;
        }

        public void GetCameraCommandGeoMoveCollection( Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleCameraCommandGeoMoveDataReader = GetCameraCommandGeoMoveCollectionDataReader( );
                using ( simpleCameraCommandGeoMoveDataReader )
                {
                    simpleCameraCommandGeoMoveDataReader.WriteResultSetTo( destinationWriter );
                }
            }
        }

        public SimpleCameraCommandGeoMoveDataReader GetCameraCommandGeoMoveCollectionByCameraDataReader( Guid camera )
        {
            const string sql = SimpleCameraCommandGeoMoveDataReader.BaseQuery + " WHERE " +
                    SimpleCameraCommandGeoMoveDataReader.ViewAliasName + ".[Camera] = @camera " +
                    " ORDER BY " + SimpleCameraCommandGeoMoveDataReader.ViewAliasName + ".[Camera]," +SimpleCameraCommandGeoMoveDataReader.ViewAliasName + ".[Timestamp]," +SimpleCameraCommandGeoMoveDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var cameraParameter = sqlCommandParameters.AddReference( "@camera", camera );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleCameraCommandGeoMoveDataReader = new SimpleCameraCommandGeoMoveDataReader( _loggerFactory, sqlDataReader );
                return simpleCameraCommandGeoMoveDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<CameraCommandGeoMoveObject> GetCameraCommandGeoMoveCollectionByCamera( Guid camera )
        {
            throw new NotImplementedException( );
        }
        public SimpleCameraCommandGeoMoveDataReader GetCameraCommandGeoMoveCollectionByCameraAndTimestampDataReader( Guid camera, DateTime timestamp )
        {
            const string sql = SimpleCameraCommandGeoMoveDataReader.BaseQuery + " WHERE " +
                    SimpleCameraCommandGeoMoveDataReader.ViewAliasName + ".[Camera] = @camera AND " +
                    SimpleCameraCommandGeoMoveDataReader.ViewAliasName + ".[Timestamp] = @timestamp " +
                    " ORDER BY " + SimpleCameraCommandGeoMoveDataReader.ViewAliasName + ".[Camera]," +SimpleCameraCommandGeoMoveDataReader.ViewAliasName + ".[Timestamp]," +SimpleCameraCommandGeoMoveDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var cameraParameter = sqlCommandParameters.AddReference( "@camera", camera );
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@timestamp", timestamp );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleCameraCommandGeoMoveDataReader = new SimpleCameraCommandGeoMoveDataReader( _loggerFactory, sqlDataReader );
                return simpleCameraCommandGeoMoveDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<CameraCommandGeoMoveObject> GetCameraCommandGeoMoveCollectionByCameraAndTimestamp( Guid camera, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<CameraCommandGeoMoveObject> GetCameraCommandGeoMoveCollectionByCameraAtTimestamp( Guid camera, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<CameraCommandGeoMoveObject> GetCameraCommandGeoMoveCollectionByCameraFromTimestamp( Guid camera, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<CameraCommandGeoMoveObject> GetCameraCommandGeoMoveCollectionByCameraUntilTimestamp( Guid camera, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<CameraCommandGeoMoveObject> GetCameraCommandGeoMoveCollectionByCameraOverTimestamp( Guid camera, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException( );
        }
        public SimpleCameraCommandGeoMoveDataReader GetCameraCommandGeoMoveCollectionByTimestampDataReader( DateTime timestamp )
        {
            const string sql = SimpleCameraCommandGeoMoveDataReader.BaseQuery + " WHERE " +
                    SimpleCameraCommandGeoMoveDataReader.ViewAliasName + ".[Timestamp] = @timestamp " +
                    " ORDER BY " + SimpleCameraCommandGeoMoveDataReader.ViewAliasName + ".[Timestamp]," +SimpleCameraCommandGeoMoveDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@timestamp", timestamp );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleCameraCommandGeoMoveDataReader = new SimpleCameraCommandGeoMoveDataReader( _loggerFactory, sqlDataReader );
                return simpleCameraCommandGeoMoveDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<CameraCommandGeoMoveObject> GetCameraCommandGeoMoveCollectionByTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<CameraCommandGeoMoveObject> GetCameraCommandGeoMoveCollectionAtTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<CameraCommandGeoMoveObject> GetCameraCommandGeoMoveCollectionFromTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<CameraCommandGeoMoveObject> GetCameraCommandGeoMoveCollectionUntilTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<CameraCommandGeoMoveObject> GetCameraCommandGeoMoveCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException( );
        }
        public SimpleCameraCommandGeoMoveDataReader GetCameraCommandGeoMoveCollectionByReplyDataReader( Guid reply )
        {
            const string sql = SimpleCameraCommandGeoMoveDataReader.BaseQuery + " WHERE " +
                    SimpleCameraCommandGeoMoveDataReader.ViewAliasName + ".[Reply] = @reply " +
                    " ORDER BY " + SimpleCameraCommandGeoMoveDataReader.ViewAliasName + ".[Reply]," +SimpleCameraCommandGeoMoveDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var replyParameter = sqlCommandParameters.AddReference( "@reply", reply );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleCameraCommandGeoMoveDataReader = new SimpleCameraCommandGeoMoveDataReader( _loggerFactory, sqlDataReader );
                return simpleCameraCommandGeoMoveDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<CameraCommandGeoMoveObject> GetCameraCommandGeoMoveCollectionByReply( Guid reply )
        {
            throw new NotImplementedException( );
        }
        // ---------------------------------------------------------------------
        // CameraCommandRelativeMove queries
        // ---------------------------------------------------------------------
        public SimpleCameraCommandRelativeMoveDataReader GetCameraCommandRelativeMoveByIdDataReader( Guid id )
        {
            const string sql = SimpleCameraCommandRelativeMoveDataReader.BaseQuery + "WHERE " + SimpleCameraCommandRelativeMoveDataReader.ViewAliasName + ".[Id] = @id"; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                sqlCommandParameters.AddGuid( "@id", id );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleCameraCommandRelativeMoveDataReader = new SimpleCameraCommandRelativeMoveDataReader( _loggerFactory, sqlDataReader );
                return simpleCameraCommandRelativeMoveDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public CameraCommandRelativeMoveObject? GetCameraCommandRelativeMoveById( Guid id )
        {
            var simpleCameraCommandRelativeMoveDataReader = GetCameraCommandRelativeMoveByIdDataReader( id );
            using ( simpleCameraCommandRelativeMoveDataReader )
            {
                if ( simpleCameraCommandRelativeMoveDataReader.Read( ) )
                {
                    var result = simpleCameraCommandRelativeMoveDataReader.GetDataObject( );
                    return result;
                }
            }
            return null;
        }

        public void GetCameraCommandRelativeMoveById( Guid id, Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleCameraCommandRelativeMoveDataReader = GetCameraCommandRelativeMoveByIdDataReader( id );
                using ( simpleCameraCommandRelativeMoveDataReader )
                {
                    if ( simpleCameraCommandRelativeMoveDataReader.Read( ) )
                    {
                        destinationWriter.Write( true );
                        simpleCameraCommandRelativeMoveDataReader.WriteTo( destinationWriter );
                    }
                    else
                    {
                        destinationWriter.Write( false );
                    }
                }
            }
        }

        public SimpleCameraCommandRelativeMoveDataReader GetCameraCommandRelativeMoveCollectionDataReader( )
        {
            const string sql = SimpleCameraCommandRelativeMoveDataReader.BaseQuery; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleCameraCommandRelativeMoveDataReader = new SimpleCameraCommandRelativeMoveDataReader( _loggerFactory, sqlDataReader );
                return simpleCameraCommandRelativeMoveDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public IList<CameraCommandRelativeMoveObject> GetCameraCommandRelativeMoveCollection( )
        {
            var result = new List<CameraCommandRelativeMoveObject>( );
            var simpleCameraCommandRelativeMoveDataReader = GetCameraCommandRelativeMoveCollectionDataReader( );
            using ( simpleCameraCommandRelativeMoveDataReader )
            {
                while ( simpleCameraCommandRelativeMoveDataReader.Read( ) )
                {
                    var data = simpleCameraCommandRelativeMoveDataReader.GetDataObject( );
                    result.Add( data );
                }
            }
            return result;
        }

        public void GetCameraCommandRelativeMoveCollection( Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleCameraCommandRelativeMoveDataReader = GetCameraCommandRelativeMoveCollectionDataReader( );
                using ( simpleCameraCommandRelativeMoveDataReader )
                {
                    simpleCameraCommandRelativeMoveDataReader.WriteResultSetTo( destinationWriter );
                }
            }
        }

        public SimpleCameraCommandRelativeMoveDataReader GetCameraCommandRelativeMoveCollectionByCameraDataReader( Guid camera )
        {
            const string sql = SimpleCameraCommandRelativeMoveDataReader.BaseQuery + " WHERE " +
                    SimpleCameraCommandRelativeMoveDataReader.ViewAliasName + ".[Camera] = @camera " +
                    " ORDER BY " + SimpleCameraCommandRelativeMoveDataReader.ViewAliasName + ".[Camera]," +SimpleCameraCommandRelativeMoveDataReader.ViewAliasName + ".[Timestamp]," +SimpleCameraCommandRelativeMoveDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var cameraParameter = sqlCommandParameters.AddReference( "@camera", camera );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleCameraCommandRelativeMoveDataReader = new SimpleCameraCommandRelativeMoveDataReader( _loggerFactory, sqlDataReader );
                return simpleCameraCommandRelativeMoveDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<CameraCommandRelativeMoveObject> GetCameraCommandRelativeMoveCollectionByCamera( Guid camera )
        {
            throw new NotImplementedException( );
        }
        public SimpleCameraCommandRelativeMoveDataReader GetCameraCommandRelativeMoveCollectionByCameraAndTimestampDataReader( Guid camera, DateTime timestamp )
        {
            const string sql = SimpleCameraCommandRelativeMoveDataReader.BaseQuery + " WHERE " +
                    SimpleCameraCommandRelativeMoveDataReader.ViewAliasName + ".[Camera] = @camera AND " +
                    SimpleCameraCommandRelativeMoveDataReader.ViewAliasName + ".[Timestamp] = @timestamp " +
                    " ORDER BY " + SimpleCameraCommandRelativeMoveDataReader.ViewAliasName + ".[Camera]," +SimpleCameraCommandRelativeMoveDataReader.ViewAliasName + ".[Timestamp]," +SimpleCameraCommandRelativeMoveDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var cameraParameter = sqlCommandParameters.AddReference( "@camera", camera );
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@timestamp", timestamp );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleCameraCommandRelativeMoveDataReader = new SimpleCameraCommandRelativeMoveDataReader( _loggerFactory, sqlDataReader );
                return simpleCameraCommandRelativeMoveDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<CameraCommandRelativeMoveObject> GetCameraCommandRelativeMoveCollectionByCameraAndTimestamp( Guid camera, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<CameraCommandRelativeMoveObject> GetCameraCommandRelativeMoveCollectionByCameraAtTimestamp( Guid camera, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<CameraCommandRelativeMoveObject> GetCameraCommandRelativeMoveCollectionByCameraFromTimestamp( Guid camera, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<CameraCommandRelativeMoveObject> GetCameraCommandRelativeMoveCollectionByCameraUntilTimestamp( Guid camera, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<CameraCommandRelativeMoveObject> GetCameraCommandRelativeMoveCollectionByCameraOverTimestamp( Guid camera, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException( );
        }
        public SimpleCameraCommandRelativeMoveDataReader GetCameraCommandRelativeMoveCollectionByTimestampDataReader( DateTime timestamp )
        {
            const string sql = SimpleCameraCommandRelativeMoveDataReader.BaseQuery + " WHERE " +
                    SimpleCameraCommandRelativeMoveDataReader.ViewAliasName + ".[Timestamp] = @timestamp " +
                    " ORDER BY " + SimpleCameraCommandRelativeMoveDataReader.ViewAliasName + ".[Timestamp]," +SimpleCameraCommandRelativeMoveDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@timestamp", timestamp );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleCameraCommandRelativeMoveDataReader = new SimpleCameraCommandRelativeMoveDataReader( _loggerFactory, sqlDataReader );
                return simpleCameraCommandRelativeMoveDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<CameraCommandRelativeMoveObject> GetCameraCommandRelativeMoveCollectionByTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<CameraCommandRelativeMoveObject> GetCameraCommandRelativeMoveCollectionAtTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<CameraCommandRelativeMoveObject> GetCameraCommandRelativeMoveCollectionFromTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<CameraCommandRelativeMoveObject> GetCameraCommandRelativeMoveCollectionUntilTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<CameraCommandRelativeMoveObject> GetCameraCommandRelativeMoveCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException( );
        }
        public SimpleCameraCommandRelativeMoveDataReader GetCameraCommandRelativeMoveCollectionByReplyDataReader( Guid reply )
        {
            const string sql = SimpleCameraCommandRelativeMoveDataReader.BaseQuery + " WHERE " +
                    SimpleCameraCommandRelativeMoveDataReader.ViewAliasName + ".[Reply] = @reply " +
                    " ORDER BY " + SimpleCameraCommandRelativeMoveDataReader.ViewAliasName + ".[Reply]," +SimpleCameraCommandRelativeMoveDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var replyParameter = sqlCommandParameters.AddReference( "@reply", reply );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleCameraCommandRelativeMoveDataReader = new SimpleCameraCommandRelativeMoveDataReader( _loggerFactory, sqlDataReader );
                return simpleCameraCommandRelativeMoveDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<CameraCommandRelativeMoveObject> GetCameraCommandRelativeMoveCollectionByReply( Guid reply )
        {
            throw new NotImplementedException( );
        }
        // ---------------------------------------------------------------------
        // CameraCommandReleasePTZOwnership queries
        // ---------------------------------------------------------------------
        public SimpleCameraCommandReleasePTZOwnershipDataReader GetCameraCommandReleasePTZOwnershipByIdDataReader( Guid id )
        {
            const string sql = SimpleCameraCommandReleasePTZOwnershipDataReader.BaseQuery + "WHERE " + SimpleCameraCommandReleasePTZOwnershipDataReader.ViewAliasName + ".[Id] = @id"; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                sqlCommandParameters.AddGuid( "@id", id );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleCameraCommandReleasePTZOwnershipDataReader = new SimpleCameraCommandReleasePTZOwnershipDataReader( _loggerFactory, sqlDataReader );
                return simpleCameraCommandReleasePTZOwnershipDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public CameraCommandReleasePTZOwnershipObject? GetCameraCommandReleasePTZOwnershipById( Guid id )
        {
            var simpleCameraCommandReleasePTZOwnershipDataReader = GetCameraCommandReleasePTZOwnershipByIdDataReader( id );
            using ( simpleCameraCommandReleasePTZOwnershipDataReader )
            {
                if ( simpleCameraCommandReleasePTZOwnershipDataReader.Read( ) )
                {
                    var result = simpleCameraCommandReleasePTZOwnershipDataReader.GetDataObject( );
                    return result;
                }
            }
            return null;
        }

        public void GetCameraCommandReleasePTZOwnershipById( Guid id, Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleCameraCommandReleasePTZOwnershipDataReader = GetCameraCommandReleasePTZOwnershipByIdDataReader( id );
                using ( simpleCameraCommandReleasePTZOwnershipDataReader )
                {
                    if ( simpleCameraCommandReleasePTZOwnershipDataReader.Read( ) )
                    {
                        destinationWriter.Write( true );
                        simpleCameraCommandReleasePTZOwnershipDataReader.WriteTo( destinationWriter );
                    }
                    else
                    {
                        destinationWriter.Write( false );
                    }
                }
            }
        }

        public SimpleCameraCommandReleasePTZOwnershipDataReader GetCameraCommandReleasePTZOwnershipCollectionDataReader( )
        {
            const string sql = SimpleCameraCommandReleasePTZOwnershipDataReader.BaseQuery; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleCameraCommandReleasePTZOwnershipDataReader = new SimpleCameraCommandReleasePTZOwnershipDataReader( _loggerFactory, sqlDataReader );
                return simpleCameraCommandReleasePTZOwnershipDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public IList<CameraCommandReleasePTZOwnershipObject> GetCameraCommandReleasePTZOwnershipCollection( )
        {
            var result = new List<CameraCommandReleasePTZOwnershipObject>( );
            var simpleCameraCommandReleasePTZOwnershipDataReader = GetCameraCommandReleasePTZOwnershipCollectionDataReader( );
            using ( simpleCameraCommandReleasePTZOwnershipDataReader )
            {
                while ( simpleCameraCommandReleasePTZOwnershipDataReader.Read( ) )
                {
                    var data = simpleCameraCommandReleasePTZOwnershipDataReader.GetDataObject( );
                    result.Add( data );
                }
            }
            return result;
        }

        public void GetCameraCommandReleasePTZOwnershipCollection( Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleCameraCommandReleasePTZOwnershipDataReader = GetCameraCommandReleasePTZOwnershipCollectionDataReader( );
                using ( simpleCameraCommandReleasePTZOwnershipDataReader )
                {
                    simpleCameraCommandReleasePTZOwnershipDataReader.WriteResultSetTo( destinationWriter );
                }
            }
        }

        public SimpleCameraCommandReleasePTZOwnershipDataReader GetCameraCommandReleasePTZOwnershipCollectionByCameraDataReader( Guid camera )
        {
            const string sql = SimpleCameraCommandReleasePTZOwnershipDataReader.BaseQuery + " WHERE " +
                    SimpleCameraCommandReleasePTZOwnershipDataReader.ViewAliasName + ".[Camera] = @camera " +
                    " ORDER BY " + SimpleCameraCommandReleasePTZOwnershipDataReader.ViewAliasName + ".[Camera]," +SimpleCameraCommandReleasePTZOwnershipDataReader.ViewAliasName + ".[Timestamp]," +SimpleCameraCommandReleasePTZOwnershipDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var cameraParameter = sqlCommandParameters.AddReference( "@camera", camera );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleCameraCommandReleasePTZOwnershipDataReader = new SimpleCameraCommandReleasePTZOwnershipDataReader( _loggerFactory, sqlDataReader );
                return simpleCameraCommandReleasePTZOwnershipDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<CameraCommandReleasePTZOwnershipObject> GetCameraCommandReleasePTZOwnershipCollectionByCamera( Guid camera )
        {
            throw new NotImplementedException( );
        }
        public SimpleCameraCommandReleasePTZOwnershipDataReader GetCameraCommandReleasePTZOwnershipCollectionByCameraAndTimestampDataReader( Guid camera, DateTime timestamp )
        {
            const string sql = SimpleCameraCommandReleasePTZOwnershipDataReader.BaseQuery + " WHERE " +
                    SimpleCameraCommandReleasePTZOwnershipDataReader.ViewAliasName + ".[Camera] = @camera AND " +
                    SimpleCameraCommandReleasePTZOwnershipDataReader.ViewAliasName + ".[Timestamp] = @timestamp " +
                    " ORDER BY " + SimpleCameraCommandReleasePTZOwnershipDataReader.ViewAliasName + ".[Camera]," +SimpleCameraCommandReleasePTZOwnershipDataReader.ViewAliasName + ".[Timestamp]," +SimpleCameraCommandReleasePTZOwnershipDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var cameraParameter = sqlCommandParameters.AddReference( "@camera", camera );
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@timestamp", timestamp );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleCameraCommandReleasePTZOwnershipDataReader = new SimpleCameraCommandReleasePTZOwnershipDataReader( _loggerFactory, sqlDataReader );
                return simpleCameraCommandReleasePTZOwnershipDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<CameraCommandReleasePTZOwnershipObject> GetCameraCommandReleasePTZOwnershipCollectionByCameraAndTimestamp( Guid camera, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<CameraCommandReleasePTZOwnershipObject> GetCameraCommandReleasePTZOwnershipCollectionByCameraAtTimestamp( Guid camera, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<CameraCommandReleasePTZOwnershipObject> GetCameraCommandReleasePTZOwnershipCollectionByCameraFromTimestamp( Guid camera, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<CameraCommandReleasePTZOwnershipObject> GetCameraCommandReleasePTZOwnershipCollectionByCameraUntilTimestamp( Guid camera, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<CameraCommandReleasePTZOwnershipObject> GetCameraCommandReleasePTZOwnershipCollectionByCameraOverTimestamp( Guid camera, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException( );
        }
        public SimpleCameraCommandReleasePTZOwnershipDataReader GetCameraCommandReleasePTZOwnershipCollectionByTimestampDataReader( DateTime timestamp )
        {
            const string sql = SimpleCameraCommandReleasePTZOwnershipDataReader.BaseQuery + " WHERE " +
                    SimpleCameraCommandReleasePTZOwnershipDataReader.ViewAliasName + ".[Timestamp] = @timestamp " +
                    " ORDER BY " + SimpleCameraCommandReleasePTZOwnershipDataReader.ViewAliasName + ".[Timestamp]," +SimpleCameraCommandReleasePTZOwnershipDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@timestamp", timestamp );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleCameraCommandReleasePTZOwnershipDataReader = new SimpleCameraCommandReleasePTZOwnershipDataReader( _loggerFactory, sqlDataReader );
                return simpleCameraCommandReleasePTZOwnershipDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<CameraCommandReleasePTZOwnershipObject> GetCameraCommandReleasePTZOwnershipCollectionByTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<CameraCommandReleasePTZOwnershipObject> GetCameraCommandReleasePTZOwnershipCollectionAtTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<CameraCommandReleasePTZOwnershipObject> GetCameraCommandReleasePTZOwnershipCollectionFromTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<CameraCommandReleasePTZOwnershipObject> GetCameraCommandReleasePTZOwnershipCollectionUntilTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<CameraCommandReleasePTZOwnershipObject> GetCameraCommandReleasePTZOwnershipCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException( );
        }
        public SimpleCameraCommandReleasePTZOwnershipDataReader GetCameraCommandReleasePTZOwnershipCollectionByReplyDataReader( Guid reply )
        {
            const string sql = SimpleCameraCommandReleasePTZOwnershipDataReader.BaseQuery + " WHERE " +
                    SimpleCameraCommandReleasePTZOwnershipDataReader.ViewAliasName + ".[Reply] = @reply " +
                    " ORDER BY " + SimpleCameraCommandReleasePTZOwnershipDataReader.ViewAliasName + ".[Reply]," +SimpleCameraCommandReleasePTZOwnershipDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var replyParameter = sqlCommandParameters.AddReference( "@reply", reply );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleCameraCommandReleasePTZOwnershipDataReader = new SimpleCameraCommandReleasePTZOwnershipDataReader( _loggerFactory, sqlDataReader );
                return simpleCameraCommandReleasePTZOwnershipDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<CameraCommandReleasePTZOwnershipObject> GetCameraCommandReleasePTZOwnershipCollectionByReply( Guid reply )
        {
            throw new NotImplementedException( );
        }
        // ---------------------------------------------------------------------
        // CameraCommandRequestPTZOwnership queries
        // ---------------------------------------------------------------------
        public SimpleCameraCommandRequestPTZOwnershipDataReader GetCameraCommandRequestPTZOwnershipByIdDataReader( Guid id )
        {
            const string sql = SimpleCameraCommandRequestPTZOwnershipDataReader.BaseQuery + "WHERE " + SimpleCameraCommandRequestPTZOwnershipDataReader.ViewAliasName + ".[Id] = @id"; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                sqlCommandParameters.AddGuid( "@id", id );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleCameraCommandRequestPTZOwnershipDataReader = new SimpleCameraCommandRequestPTZOwnershipDataReader( _loggerFactory, sqlDataReader );
                return simpleCameraCommandRequestPTZOwnershipDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public CameraCommandRequestPTZOwnershipObject? GetCameraCommandRequestPTZOwnershipById( Guid id )
        {
            var simpleCameraCommandRequestPTZOwnershipDataReader = GetCameraCommandRequestPTZOwnershipByIdDataReader( id );
            using ( simpleCameraCommandRequestPTZOwnershipDataReader )
            {
                if ( simpleCameraCommandRequestPTZOwnershipDataReader.Read( ) )
                {
                    var result = simpleCameraCommandRequestPTZOwnershipDataReader.GetDataObject( );
                    return result;
                }
            }
            return null;
        }

        public void GetCameraCommandRequestPTZOwnershipById( Guid id, Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleCameraCommandRequestPTZOwnershipDataReader = GetCameraCommandRequestPTZOwnershipByIdDataReader( id );
                using ( simpleCameraCommandRequestPTZOwnershipDataReader )
                {
                    if ( simpleCameraCommandRequestPTZOwnershipDataReader.Read( ) )
                    {
                        destinationWriter.Write( true );
                        simpleCameraCommandRequestPTZOwnershipDataReader.WriteTo( destinationWriter );
                    }
                    else
                    {
                        destinationWriter.Write( false );
                    }
                }
            }
        }

        public SimpleCameraCommandRequestPTZOwnershipDataReader GetCameraCommandRequestPTZOwnershipCollectionDataReader( )
        {
            const string sql = SimpleCameraCommandRequestPTZOwnershipDataReader.BaseQuery; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleCameraCommandRequestPTZOwnershipDataReader = new SimpleCameraCommandRequestPTZOwnershipDataReader( _loggerFactory, sqlDataReader );
                return simpleCameraCommandRequestPTZOwnershipDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public IList<CameraCommandRequestPTZOwnershipObject> GetCameraCommandRequestPTZOwnershipCollection( )
        {
            var result = new List<CameraCommandRequestPTZOwnershipObject>( );
            var simpleCameraCommandRequestPTZOwnershipDataReader = GetCameraCommandRequestPTZOwnershipCollectionDataReader( );
            using ( simpleCameraCommandRequestPTZOwnershipDataReader )
            {
                while ( simpleCameraCommandRequestPTZOwnershipDataReader.Read( ) )
                {
                    var data = simpleCameraCommandRequestPTZOwnershipDataReader.GetDataObject( );
                    result.Add( data );
                }
            }
            return result;
        }

        public void GetCameraCommandRequestPTZOwnershipCollection( Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleCameraCommandRequestPTZOwnershipDataReader = GetCameraCommandRequestPTZOwnershipCollectionDataReader( );
                using ( simpleCameraCommandRequestPTZOwnershipDataReader )
                {
                    simpleCameraCommandRequestPTZOwnershipDataReader.WriteResultSetTo( destinationWriter );
                }
            }
        }

        public SimpleCameraCommandRequestPTZOwnershipDataReader GetCameraCommandRequestPTZOwnershipCollectionByCameraDataReader( Guid camera )
        {
            const string sql = SimpleCameraCommandRequestPTZOwnershipDataReader.BaseQuery + " WHERE " +
                    SimpleCameraCommandRequestPTZOwnershipDataReader.ViewAliasName + ".[Camera] = @camera " +
                    " ORDER BY " + SimpleCameraCommandRequestPTZOwnershipDataReader.ViewAliasName + ".[Camera]," +SimpleCameraCommandRequestPTZOwnershipDataReader.ViewAliasName + ".[Timestamp]," +SimpleCameraCommandRequestPTZOwnershipDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var cameraParameter = sqlCommandParameters.AddReference( "@camera", camera );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleCameraCommandRequestPTZOwnershipDataReader = new SimpleCameraCommandRequestPTZOwnershipDataReader( _loggerFactory, sqlDataReader );
                return simpleCameraCommandRequestPTZOwnershipDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<CameraCommandRequestPTZOwnershipObject> GetCameraCommandRequestPTZOwnershipCollectionByCamera( Guid camera )
        {
            throw new NotImplementedException( );
        }
        public SimpleCameraCommandRequestPTZOwnershipDataReader GetCameraCommandRequestPTZOwnershipCollectionByCameraAndTimestampDataReader( Guid camera, DateTime timestamp )
        {
            const string sql = SimpleCameraCommandRequestPTZOwnershipDataReader.BaseQuery + " WHERE " +
                    SimpleCameraCommandRequestPTZOwnershipDataReader.ViewAliasName + ".[Camera] = @camera AND " +
                    SimpleCameraCommandRequestPTZOwnershipDataReader.ViewAliasName + ".[Timestamp] = @timestamp " +
                    " ORDER BY " + SimpleCameraCommandRequestPTZOwnershipDataReader.ViewAliasName + ".[Camera]," +SimpleCameraCommandRequestPTZOwnershipDataReader.ViewAliasName + ".[Timestamp]," +SimpleCameraCommandRequestPTZOwnershipDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var cameraParameter = sqlCommandParameters.AddReference( "@camera", camera );
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@timestamp", timestamp );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleCameraCommandRequestPTZOwnershipDataReader = new SimpleCameraCommandRequestPTZOwnershipDataReader( _loggerFactory, sqlDataReader );
                return simpleCameraCommandRequestPTZOwnershipDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<CameraCommandRequestPTZOwnershipObject> GetCameraCommandRequestPTZOwnershipCollectionByCameraAndTimestamp( Guid camera, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<CameraCommandRequestPTZOwnershipObject> GetCameraCommandRequestPTZOwnershipCollectionByCameraAtTimestamp( Guid camera, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<CameraCommandRequestPTZOwnershipObject> GetCameraCommandRequestPTZOwnershipCollectionByCameraFromTimestamp( Guid camera, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<CameraCommandRequestPTZOwnershipObject> GetCameraCommandRequestPTZOwnershipCollectionByCameraUntilTimestamp( Guid camera, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<CameraCommandRequestPTZOwnershipObject> GetCameraCommandRequestPTZOwnershipCollectionByCameraOverTimestamp( Guid camera, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException( );
        }
        public SimpleCameraCommandRequestPTZOwnershipDataReader GetCameraCommandRequestPTZOwnershipCollectionByTimestampDataReader( DateTime timestamp )
        {
            const string sql = SimpleCameraCommandRequestPTZOwnershipDataReader.BaseQuery + " WHERE " +
                    SimpleCameraCommandRequestPTZOwnershipDataReader.ViewAliasName + ".[Timestamp] = @timestamp " +
                    " ORDER BY " + SimpleCameraCommandRequestPTZOwnershipDataReader.ViewAliasName + ".[Timestamp]," +SimpleCameraCommandRequestPTZOwnershipDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@timestamp", timestamp );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleCameraCommandRequestPTZOwnershipDataReader = new SimpleCameraCommandRequestPTZOwnershipDataReader( _loggerFactory, sqlDataReader );
                return simpleCameraCommandRequestPTZOwnershipDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<CameraCommandRequestPTZOwnershipObject> GetCameraCommandRequestPTZOwnershipCollectionByTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<CameraCommandRequestPTZOwnershipObject> GetCameraCommandRequestPTZOwnershipCollectionAtTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<CameraCommandRequestPTZOwnershipObject> GetCameraCommandRequestPTZOwnershipCollectionFromTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<CameraCommandRequestPTZOwnershipObject> GetCameraCommandRequestPTZOwnershipCollectionUntilTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<CameraCommandRequestPTZOwnershipObject> GetCameraCommandRequestPTZOwnershipCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException( );
        }
        public SimpleCameraCommandRequestPTZOwnershipDataReader GetCameraCommandRequestPTZOwnershipCollectionByReplyDataReader( Guid reply )
        {
            const string sql = SimpleCameraCommandRequestPTZOwnershipDataReader.BaseQuery + " WHERE " +
                    SimpleCameraCommandRequestPTZOwnershipDataReader.ViewAliasName + ".[Reply] = @reply " +
                    " ORDER BY " + SimpleCameraCommandRequestPTZOwnershipDataReader.ViewAliasName + ".[Reply]," +SimpleCameraCommandRequestPTZOwnershipDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var replyParameter = sqlCommandParameters.AddReference( "@reply", reply );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleCameraCommandRequestPTZOwnershipDataReader = new SimpleCameraCommandRequestPTZOwnershipDataReader( _loggerFactory, sqlDataReader );
                return simpleCameraCommandRequestPTZOwnershipDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<CameraCommandRequestPTZOwnershipObject> GetCameraCommandRequestPTZOwnershipCollectionByReply( Guid reply )
        {
            throw new NotImplementedException( );
        }
        // ---------------------------------------------------------------------
        // CameraCommandSetAutoFocus queries
        // ---------------------------------------------------------------------
        public SimpleCameraCommandSetAutoFocusDataReader GetCameraCommandSetAutoFocusByIdDataReader( Guid id )
        {
            const string sql = SimpleCameraCommandSetAutoFocusDataReader.BaseQuery + "WHERE " + SimpleCameraCommandSetAutoFocusDataReader.ViewAliasName + ".[Id] = @id"; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                sqlCommandParameters.AddGuid( "@id", id );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleCameraCommandSetAutoFocusDataReader = new SimpleCameraCommandSetAutoFocusDataReader( _loggerFactory, sqlDataReader );
                return simpleCameraCommandSetAutoFocusDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public CameraCommandSetAutoFocusObject? GetCameraCommandSetAutoFocusById( Guid id )
        {
            var simpleCameraCommandSetAutoFocusDataReader = GetCameraCommandSetAutoFocusByIdDataReader( id );
            using ( simpleCameraCommandSetAutoFocusDataReader )
            {
                if ( simpleCameraCommandSetAutoFocusDataReader.Read( ) )
                {
                    var result = simpleCameraCommandSetAutoFocusDataReader.GetDataObject( );
                    return result;
                }
            }
            return null;
        }

        public void GetCameraCommandSetAutoFocusById( Guid id, Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleCameraCommandSetAutoFocusDataReader = GetCameraCommandSetAutoFocusByIdDataReader( id );
                using ( simpleCameraCommandSetAutoFocusDataReader )
                {
                    if ( simpleCameraCommandSetAutoFocusDataReader.Read( ) )
                    {
                        destinationWriter.Write( true );
                        simpleCameraCommandSetAutoFocusDataReader.WriteTo( destinationWriter );
                    }
                    else
                    {
                        destinationWriter.Write( false );
                    }
                }
            }
        }

        public SimpleCameraCommandSetAutoFocusDataReader GetCameraCommandSetAutoFocusCollectionDataReader( )
        {
            const string sql = SimpleCameraCommandSetAutoFocusDataReader.BaseQuery; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleCameraCommandSetAutoFocusDataReader = new SimpleCameraCommandSetAutoFocusDataReader( _loggerFactory, sqlDataReader );
                return simpleCameraCommandSetAutoFocusDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public IList<CameraCommandSetAutoFocusObject> GetCameraCommandSetAutoFocusCollection( )
        {
            var result = new List<CameraCommandSetAutoFocusObject>( );
            var simpleCameraCommandSetAutoFocusDataReader = GetCameraCommandSetAutoFocusCollectionDataReader( );
            using ( simpleCameraCommandSetAutoFocusDataReader )
            {
                while ( simpleCameraCommandSetAutoFocusDataReader.Read( ) )
                {
                    var data = simpleCameraCommandSetAutoFocusDataReader.GetDataObject( );
                    result.Add( data );
                }
            }
            return result;
        }

        public void GetCameraCommandSetAutoFocusCollection( Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleCameraCommandSetAutoFocusDataReader = GetCameraCommandSetAutoFocusCollectionDataReader( );
                using ( simpleCameraCommandSetAutoFocusDataReader )
                {
                    simpleCameraCommandSetAutoFocusDataReader.WriteResultSetTo( destinationWriter );
                }
            }
        }

        public SimpleCameraCommandSetAutoFocusDataReader GetCameraCommandSetAutoFocusCollectionByCameraDataReader( Guid camera )
        {
            const string sql = SimpleCameraCommandSetAutoFocusDataReader.BaseQuery + " WHERE " +
                    SimpleCameraCommandSetAutoFocusDataReader.ViewAliasName + ".[Camera] = @camera " +
                    " ORDER BY " + SimpleCameraCommandSetAutoFocusDataReader.ViewAliasName + ".[Camera]," +SimpleCameraCommandSetAutoFocusDataReader.ViewAliasName + ".[Timestamp]," +SimpleCameraCommandSetAutoFocusDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var cameraParameter = sqlCommandParameters.AddReference( "@camera", camera );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleCameraCommandSetAutoFocusDataReader = new SimpleCameraCommandSetAutoFocusDataReader( _loggerFactory, sqlDataReader );
                return simpleCameraCommandSetAutoFocusDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<CameraCommandSetAutoFocusObject> GetCameraCommandSetAutoFocusCollectionByCamera( Guid camera )
        {
            throw new NotImplementedException( );
        }
        public SimpleCameraCommandSetAutoFocusDataReader GetCameraCommandSetAutoFocusCollectionByCameraAndTimestampDataReader( Guid camera, DateTime timestamp )
        {
            const string sql = SimpleCameraCommandSetAutoFocusDataReader.BaseQuery + " WHERE " +
                    SimpleCameraCommandSetAutoFocusDataReader.ViewAliasName + ".[Camera] = @camera AND " +
                    SimpleCameraCommandSetAutoFocusDataReader.ViewAliasName + ".[Timestamp] = @timestamp " +
                    " ORDER BY " + SimpleCameraCommandSetAutoFocusDataReader.ViewAliasName + ".[Camera]," +SimpleCameraCommandSetAutoFocusDataReader.ViewAliasName + ".[Timestamp]," +SimpleCameraCommandSetAutoFocusDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var cameraParameter = sqlCommandParameters.AddReference( "@camera", camera );
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@timestamp", timestamp );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleCameraCommandSetAutoFocusDataReader = new SimpleCameraCommandSetAutoFocusDataReader( _loggerFactory, sqlDataReader );
                return simpleCameraCommandSetAutoFocusDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<CameraCommandSetAutoFocusObject> GetCameraCommandSetAutoFocusCollectionByCameraAndTimestamp( Guid camera, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<CameraCommandSetAutoFocusObject> GetCameraCommandSetAutoFocusCollectionByCameraAtTimestamp( Guid camera, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<CameraCommandSetAutoFocusObject> GetCameraCommandSetAutoFocusCollectionByCameraFromTimestamp( Guid camera, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<CameraCommandSetAutoFocusObject> GetCameraCommandSetAutoFocusCollectionByCameraUntilTimestamp( Guid camera, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<CameraCommandSetAutoFocusObject> GetCameraCommandSetAutoFocusCollectionByCameraOverTimestamp( Guid camera, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException( );
        }
        public SimpleCameraCommandSetAutoFocusDataReader GetCameraCommandSetAutoFocusCollectionByTimestampDataReader( DateTime timestamp )
        {
            const string sql = SimpleCameraCommandSetAutoFocusDataReader.BaseQuery + " WHERE " +
                    SimpleCameraCommandSetAutoFocusDataReader.ViewAliasName + ".[Timestamp] = @timestamp " +
                    " ORDER BY " + SimpleCameraCommandSetAutoFocusDataReader.ViewAliasName + ".[Timestamp]," +SimpleCameraCommandSetAutoFocusDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@timestamp", timestamp );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleCameraCommandSetAutoFocusDataReader = new SimpleCameraCommandSetAutoFocusDataReader( _loggerFactory, sqlDataReader );
                return simpleCameraCommandSetAutoFocusDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<CameraCommandSetAutoFocusObject> GetCameraCommandSetAutoFocusCollectionByTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<CameraCommandSetAutoFocusObject> GetCameraCommandSetAutoFocusCollectionAtTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<CameraCommandSetAutoFocusObject> GetCameraCommandSetAutoFocusCollectionFromTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<CameraCommandSetAutoFocusObject> GetCameraCommandSetAutoFocusCollectionUntilTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<CameraCommandSetAutoFocusObject> GetCameraCommandSetAutoFocusCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException( );
        }
        public SimpleCameraCommandSetAutoFocusDataReader GetCameraCommandSetAutoFocusCollectionByReplyDataReader( Guid reply )
        {
            const string sql = SimpleCameraCommandSetAutoFocusDataReader.BaseQuery + " WHERE " +
                    SimpleCameraCommandSetAutoFocusDataReader.ViewAliasName + ".[Reply] = @reply " +
                    " ORDER BY " + SimpleCameraCommandSetAutoFocusDataReader.ViewAliasName + ".[Reply]," +SimpleCameraCommandSetAutoFocusDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var replyParameter = sqlCommandParameters.AddReference( "@reply", reply );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleCameraCommandSetAutoFocusDataReader = new SimpleCameraCommandSetAutoFocusDataReader( _loggerFactory, sqlDataReader );
                return simpleCameraCommandSetAutoFocusDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<CameraCommandSetAutoFocusObject> GetCameraCommandSetAutoFocusCollectionByReply( Guid reply )
        {
            throw new NotImplementedException( );
        }
        // ---------------------------------------------------------------------
        // CameraCommandSetBlackAndWhite queries
        // ---------------------------------------------------------------------
        public SimpleCameraCommandSetBlackAndWhiteDataReader GetCameraCommandSetBlackAndWhiteByIdDataReader( Guid id )
        {
            const string sql = SimpleCameraCommandSetBlackAndWhiteDataReader.BaseQuery + "WHERE " + SimpleCameraCommandSetBlackAndWhiteDataReader.ViewAliasName + ".[Id] = @id"; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                sqlCommandParameters.AddGuid( "@id", id );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleCameraCommandSetBlackAndWhiteDataReader = new SimpleCameraCommandSetBlackAndWhiteDataReader( _loggerFactory, sqlDataReader );
                return simpleCameraCommandSetBlackAndWhiteDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public CameraCommandSetBlackAndWhiteObject? GetCameraCommandSetBlackAndWhiteById( Guid id )
        {
            var simpleCameraCommandSetBlackAndWhiteDataReader = GetCameraCommandSetBlackAndWhiteByIdDataReader( id );
            using ( simpleCameraCommandSetBlackAndWhiteDataReader )
            {
                if ( simpleCameraCommandSetBlackAndWhiteDataReader.Read( ) )
                {
                    var result = simpleCameraCommandSetBlackAndWhiteDataReader.GetDataObject( );
                    return result;
                }
            }
            return null;
        }

        public void GetCameraCommandSetBlackAndWhiteById( Guid id, Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleCameraCommandSetBlackAndWhiteDataReader = GetCameraCommandSetBlackAndWhiteByIdDataReader( id );
                using ( simpleCameraCommandSetBlackAndWhiteDataReader )
                {
                    if ( simpleCameraCommandSetBlackAndWhiteDataReader.Read( ) )
                    {
                        destinationWriter.Write( true );
                        simpleCameraCommandSetBlackAndWhiteDataReader.WriteTo( destinationWriter );
                    }
                    else
                    {
                        destinationWriter.Write( false );
                    }
                }
            }
        }

        public SimpleCameraCommandSetBlackAndWhiteDataReader GetCameraCommandSetBlackAndWhiteCollectionDataReader( )
        {
            const string sql = SimpleCameraCommandSetBlackAndWhiteDataReader.BaseQuery; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleCameraCommandSetBlackAndWhiteDataReader = new SimpleCameraCommandSetBlackAndWhiteDataReader( _loggerFactory, sqlDataReader );
                return simpleCameraCommandSetBlackAndWhiteDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public IList<CameraCommandSetBlackAndWhiteObject> GetCameraCommandSetBlackAndWhiteCollection( )
        {
            var result = new List<CameraCommandSetBlackAndWhiteObject>( );
            var simpleCameraCommandSetBlackAndWhiteDataReader = GetCameraCommandSetBlackAndWhiteCollectionDataReader( );
            using ( simpleCameraCommandSetBlackAndWhiteDataReader )
            {
                while ( simpleCameraCommandSetBlackAndWhiteDataReader.Read( ) )
                {
                    var data = simpleCameraCommandSetBlackAndWhiteDataReader.GetDataObject( );
                    result.Add( data );
                }
            }
            return result;
        }

        public void GetCameraCommandSetBlackAndWhiteCollection( Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleCameraCommandSetBlackAndWhiteDataReader = GetCameraCommandSetBlackAndWhiteCollectionDataReader( );
                using ( simpleCameraCommandSetBlackAndWhiteDataReader )
                {
                    simpleCameraCommandSetBlackAndWhiteDataReader.WriteResultSetTo( destinationWriter );
                }
            }
        }

        public SimpleCameraCommandSetBlackAndWhiteDataReader GetCameraCommandSetBlackAndWhiteCollectionByCameraDataReader( Guid camera )
        {
            const string sql = SimpleCameraCommandSetBlackAndWhiteDataReader.BaseQuery + " WHERE " +
                    SimpleCameraCommandSetBlackAndWhiteDataReader.ViewAliasName + ".[Camera] = @camera " +
                    " ORDER BY " + SimpleCameraCommandSetBlackAndWhiteDataReader.ViewAliasName + ".[Camera]," +SimpleCameraCommandSetBlackAndWhiteDataReader.ViewAliasName + ".[Timestamp]," +SimpleCameraCommandSetBlackAndWhiteDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var cameraParameter = sqlCommandParameters.AddReference( "@camera", camera );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleCameraCommandSetBlackAndWhiteDataReader = new SimpleCameraCommandSetBlackAndWhiteDataReader( _loggerFactory, sqlDataReader );
                return simpleCameraCommandSetBlackAndWhiteDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<CameraCommandSetBlackAndWhiteObject> GetCameraCommandSetBlackAndWhiteCollectionByCamera( Guid camera )
        {
            throw new NotImplementedException( );
        }
        public SimpleCameraCommandSetBlackAndWhiteDataReader GetCameraCommandSetBlackAndWhiteCollectionByCameraAndTimestampDataReader( Guid camera, DateTime timestamp )
        {
            const string sql = SimpleCameraCommandSetBlackAndWhiteDataReader.BaseQuery + " WHERE " +
                    SimpleCameraCommandSetBlackAndWhiteDataReader.ViewAliasName + ".[Camera] = @camera AND " +
                    SimpleCameraCommandSetBlackAndWhiteDataReader.ViewAliasName + ".[Timestamp] = @timestamp " +
                    " ORDER BY " + SimpleCameraCommandSetBlackAndWhiteDataReader.ViewAliasName + ".[Camera]," +SimpleCameraCommandSetBlackAndWhiteDataReader.ViewAliasName + ".[Timestamp]," +SimpleCameraCommandSetBlackAndWhiteDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var cameraParameter = sqlCommandParameters.AddReference( "@camera", camera );
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@timestamp", timestamp );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleCameraCommandSetBlackAndWhiteDataReader = new SimpleCameraCommandSetBlackAndWhiteDataReader( _loggerFactory, sqlDataReader );
                return simpleCameraCommandSetBlackAndWhiteDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<CameraCommandSetBlackAndWhiteObject> GetCameraCommandSetBlackAndWhiteCollectionByCameraAndTimestamp( Guid camera, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<CameraCommandSetBlackAndWhiteObject> GetCameraCommandSetBlackAndWhiteCollectionByCameraAtTimestamp( Guid camera, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<CameraCommandSetBlackAndWhiteObject> GetCameraCommandSetBlackAndWhiteCollectionByCameraFromTimestamp( Guid camera, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<CameraCommandSetBlackAndWhiteObject> GetCameraCommandSetBlackAndWhiteCollectionByCameraUntilTimestamp( Guid camera, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<CameraCommandSetBlackAndWhiteObject> GetCameraCommandSetBlackAndWhiteCollectionByCameraOverTimestamp( Guid camera, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException( );
        }
        public SimpleCameraCommandSetBlackAndWhiteDataReader GetCameraCommandSetBlackAndWhiteCollectionByTimestampDataReader( DateTime timestamp )
        {
            const string sql = SimpleCameraCommandSetBlackAndWhiteDataReader.BaseQuery + " WHERE " +
                    SimpleCameraCommandSetBlackAndWhiteDataReader.ViewAliasName + ".[Timestamp] = @timestamp " +
                    " ORDER BY " + SimpleCameraCommandSetBlackAndWhiteDataReader.ViewAliasName + ".[Timestamp]," +SimpleCameraCommandSetBlackAndWhiteDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@timestamp", timestamp );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleCameraCommandSetBlackAndWhiteDataReader = new SimpleCameraCommandSetBlackAndWhiteDataReader( _loggerFactory, sqlDataReader );
                return simpleCameraCommandSetBlackAndWhiteDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<CameraCommandSetBlackAndWhiteObject> GetCameraCommandSetBlackAndWhiteCollectionByTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<CameraCommandSetBlackAndWhiteObject> GetCameraCommandSetBlackAndWhiteCollectionAtTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<CameraCommandSetBlackAndWhiteObject> GetCameraCommandSetBlackAndWhiteCollectionFromTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<CameraCommandSetBlackAndWhiteObject> GetCameraCommandSetBlackAndWhiteCollectionUntilTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<CameraCommandSetBlackAndWhiteObject> GetCameraCommandSetBlackAndWhiteCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException( );
        }
        public SimpleCameraCommandSetBlackAndWhiteDataReader GetCameraCommandSetBlackAndWhiteCollectionByReplyDataReader( Guid reply )
        {
            const string sql = SimpleCameraCommandSetBlackAndWhiteDataReader.BaseQuery + " WHERE " +
                    SimpleCameraCommandSetBlackAndWhiteDataReader.ViewAliasName + ".[Reply] = @reply " +
                    " ORDER BY " + SimpleCameraCommandSetBlackAndWhiteDataReader.ViewAliasName + ".[Reply]," +SimpleCameraCommandSetBlackAndWhiteDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var replyParameter = sqlCommandParameters.AddReference( "@reply", reply );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleCameraCommandSetBlackAndWhiteDataReader = new SimpleCameraCommandSetBlackAndWhiteDataReader( _loggerFactory, sqlDataReader );
                return simpleCameraCommandSetBlackAndWhiteDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<CameraCommandSetBlackAndWhiteObject> GetCameraCommandSetBlackAndWhiteCollectionByReply( Guid reply )
        {
            throw new NotImplementedException( );
        }
        // ---------------------------------------------------------------------
        // CameraCommandSetFollowed queries
        // ---------------------------------------------------------------------
        public SimpleCameraCommandSetFollowedDataReader GetCameraCommandSetFollowedByIdDataReader( Guid id )
        {
            const string sql = SimpleCameraCommandSetFollowedDataReader.BaseQuery + "WHERE " + SimpleCameraCommandSetFollowedDataReader.ViewAliasName + ".[Id] = @id"; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                sqlCommandParameters.AddGuid( "@id", id );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleCameraCommandSetFollowedDataReader = new SimpleCameraCommandSetFollowedDataReader( _loggerFactory, sqlDataReader );
                return simpleCameraCommandSetFollowedDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public CameraCommandSetFollowedObject? GetCameraCommandSetFollowedById( Guid id )
        {
            var simpleCameraCommandSetFollowedDataReader = GetCameraCommandSetFollowedByIdDataReader( id );
            using ( simpleCameraCommandSetFollowedDataReader )
            {
                if ( simpleCameraCommandSetFollowedDataReader.Read( ) )
                {
                    var result = simpleCameraCommandSetFollowedDataReader.GetDataObject( );
                    return result;
                }
            }
            return null;
        }

        public void GetCameraCommandSetFollowedById( Guid id, Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleCameraCommandSetFollowedDataReader = GetCameraCommandSetFollowedByIdDataReader( id );
                using ( simpleCameraCommandSetFollowedDataReader )
                {
                    if ( simpleCameraCommandSetFollowedDataReader.Read( ) )
                    {
                        destinationWriter.Write( true );
                        simpleCameraCommandSetFollowedDataReader.WriteTo( destinationWriter );
                    }
                    else
                    {
                        destinationWriter.Write( false );
                    }
                }
            }
        }

        public SimpleCameraCommandSetFollowedDataReader GetCameraCommandSetFollowedCollectionDataReader( )
        {
            const string sql = SimpleCameraCommandSetFollowedDataReader.BaseQuery; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleCameraCommandSetFollowedDataReader = new SimpleCameraCommandSetFollowedDataReader( _loggerFactory, sqlDataReader );
                return simpleCameraCommandSetFollowedDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public IList<CameraCommandSetFollowedObject> GetCameraCommandSetFollowedCollection( )
        {
            var result = new List<CameraCommandSetFollowedObject>( );
            var simpleCameraCommandSetFollowedDataReader = GetCameraCommandSetFollowedCollectionDataReader( );
            using ( simpleCameraCommandSetFollowedDataReader )
            {
                while ( simpleCameraCommandSetFollowedDataReader.Read( ) )
                {
                    var data = simpleCameraCommandSetFollowedDataReader.GetDataObject( );
                    result.Add( data );
                }
            }
            return result;
        }

        public void GetCameraCommandSetFollowedCollection( Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleCameraCommandSetFollowedDataReader = GetCameraCommandSetFollowedCollectionDataReader( );
                using ( simpleCameraCommandSetFollowedDataReader )
                {
                    simpleCameraCommandSetFollowedDataReader.WriteResultSetTo( destinationWriter );
                }
            }
        }

        public SimpleCameraCommandSetFollowedDataReader GetCameraCommandSetFollowedCollectionByCameraDataReader( Guid camera )
        {
            const string sql = SimpleCameraCommandSetFollowedDataReader.BaseQuery + " WHERE " +
                    SimpleCameraCommandSetFollowedDataReader.ViewAliasName + ".[Camera] = @camera " +
                    " ORDER BY " + SimpleCameraCommandSetFollowedDataReader.ViewAliasName + ".[Camera]," +SimpleCameraCommandSetFollowedDataReader.ViewAliasName + ".[Timestamp]," +SimpleCameraCommandSetFollowedDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var cameraParameter = sqlCommandParameters.AddReference( "@camera", camera );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleCameraCommandSetFollowedDataReader = new SimpleCameraCommandSetFollowedDataReader( _loggerFactory, sqlDataReader );
                return simpleCameraCommandSetFollowedDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<CameraCommandSetFollowedObject> GetCameraCommandSetFollowedCollectionByCamera( Guid camera )
        {
            throw new NotImplementedException( );
        }
        public SimpleCameraCommandSetFollowedDataReader GetCameraCommandSetFollowedCollectionByCameraAndTimestampDataReader( Guid camera, DateTime timestamp )
        {
            const string sql = SimpleCameraCommandSetFollowedDataReader.BaseQuery + " WHERE " +
                    SimpleCameraCommandSetFollowedDataReader.ViewAliasName + ".[Camera] = @camera AND " +
                    SimpleCameraCommandSetFollowedDataReader.ViewAliasName + ".[Timestamp] = @timestamp " +
                    " ORDER BY " + SimpleCameraCommandSetFollowedDataReader.ViewAliasName + ".[Camera]," +SimpleCameraCommandSetFollowedDataReader.ViewAliasName + ".[Timestamp]," +SimpleCameraCommandSetFollowedDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var cameraParameter = sqlCommandParameters.AddReference( "@camera", camera );
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@timestamp", timestamp );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleCameraCommandSetFollowedDataReader = new SimpleCameraCommandSetFollowedDataReader( _loggerFactory, sqlDataReader );
                return simpleCameraCommandSetFollowedDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<CameraCommandSetFollowedObject> GetCameraCommandSetFollowedCollectionByCameraAndTimestamp( Guid camera, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<CameraCommandSetFollowedObject> GetCameraCommandSetFollowedCollectionByCameraAtTimestamp( Guid camera, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<CameraCommandSetFollowedObject> GetCameraCommandSetFollowedCollectionByCameraFromTimestamp( Guid camera, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<CameraCommandSetFollowedObject> GetCameraCommandSetFollowedCollectionByCameraUntilTimestamp( Guid camera, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<CameraCommandSetFollowedObject> GetCameraCommandSetFollowedCollectionByCameraOverTimestamp( Guid camera, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException( );
        }
        public SimpleCameraCommandSetFollowedDataReader GetCameraCommandSetFollowedCollectionByTimestampDataReader( DateTime timestamp )
        {
            const string sql = SimpleCameraCommandSetFollowedDataReader.BaseQuery + " WHERE " +
                    SimpleCameraCommandSetFollowedDataReader.ViewAliasName + ".[Timestamp] = @timestamp " +
                    " ORDER BY " + SimpleCameraCommandSetFollowedDataReader.ViewAliasName + ".[Timestamp]," +SimpleCameraCommandSetFollowedDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@timestamp", timestamp );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleCameraCommandSetFollowedDataReader = new SimpleCameraCommandSetFollowedDataReader( _loggerFactory, sqlDataReader );
                return simpleCameraCommandSetFollowedDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<CameraCommandSetFollowedObject> GetCameraCommandSetFollowedCollectionByTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<CameraCommandSetFollowedObject> GetCameraCommandSetFollowedCollectionAtTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<CameraCommandSetFollowedObject> GetCameraCommandSetFollowedCollectionFromTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<CameraCommandSetFollowedObject> GetCameraCommandSetFollowedCollectionUntilTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<CameraCommandSetFollowedObject> GetCameraCommandSetFollowedCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException( );
        }
        public SimpleCameraCommandSetFollowedDataReader GetCameraCommandSetFollowedCollectionByReplyDataReader( Guid reply )
        {
            const string sql = SimpleCameraCommandSetFollowedDataReader.BaseQuery + " WHERE " +
                    SimpleCameraCommandSetFollowedDataReader.ViewAliasName + ".[Reply] = @reply " +
                    " ORDER BY " + SimpleCameraCommandSetFollowedDataReader.ViewAliasName + ".[Reply]," +SimpleCameraCommandSetFollowedDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var replyParameter = sqlCommandParameters.AddReference( "@reply", reply );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleCameraCommandSetFollowedDataReader = new SimpleCameraCommandSetFollowedDataReader( _loggerFactory, sqlDataReader );
                return simpleCameraCommandSetFollowedDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<CameraCommandSetFollowedObject> GetCameraCommandSetFollowedCollectionByReply( Guid reply )
        {
            throw new NotImplementedException( );
        }
        // ---------------------------------------------------------------------
        // CameraCommandSetInfraRedLamp queries
        // ---------------------------------------------------------------------
        public SimpleCameraCommandSetInfraRedLampDataReader GetCameraCommandSetInfraRedLampByIdDataReader( Guid id )
        {
            const string sql = SimpleCameraCommandSetInfraRedLampDataReader.BaseQuery + "WHERE " + SimpleCameraCommandSetInfraRedLampDataReader.ViewAliasName + ".[Id] = @id"; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                sqlCommandParameters.AddGuid( "@id", id );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleCameraCommandSetInfraRedLampDataReader = new SimpleCameraCommandSetInfraRedLampDataReader( _loggerFactory, sqlDataReader );
                return simpleCameraCommandSetInfraRedLampDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public CameraCommandSetInfraRedLampObject? GetCameraCommandSetInfraRedLampById( Guid id )
        {
            var simpleCameraCommandSetInfraRedLampDataReader = GetCameraCommandSetInfraRedLampByIdDataReader( id );
            using ( simpleCameraCommandSetInfraRedLampDataReader )
            {
                if ( simpleCameraCommandSetInfraRedLampDataReader.Read( ) )
                {
                    var result = simpleCameraCommandSetInfraRedLampDataReader.GetDataObject( );
                    return result;
                }
            }
            return null;
        }

        public void GetCameraCommandSetInfraRedLampById( Guid id, Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleCameraCommandSetInfraRedLampDataReader = GetCameraCommandSetInfraRedLampByIdDataReader( id );
                using ( simpleCameraCommandSetInfraRedLampDataReader )
                {
                    if ( simpleCameraCommandSetInfraRedLampDataReader.Read( ) )
                    {
                        destinationWriter.Write( true );
                        simpleCameraCommandSetInfraRedLampDataReader.WriteTo( destinationWriter );
                    }
                    else
                    {
                        destinationWriter.Write( false );
                    }
                }
            }
        }

        public SimpleCameraCommandSetInfraRedLampDataReader GetCameraCommandSetInfraRedLampCollectionDataReader( )
        {
            const string sql = SimpleCameraCommandSetInfraRedLampDataReader.BaseQuery; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleCameraCommandSetInfraRedLampDataReader = new SimpleCameraCommandSetInfraRedLampDataReader( _loggerFactory, sqlDataReader );
                return simpleCameraCommandSetInfraRedLampDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public IList<CameraCommandSetInfraRedLampObject> GetCameraCommandSetInfraRedLampCollection( )
        {
            var result = new List<CameraCommandSetInfraRedLampObject>( );
            var simpleCameraCommandSetInfraRedLampDataReader = GetCameraCommandSetInfraRedLampCollectionDataReader( );
            using ( simpleCameraCommandSetInfraRedLampDataReader )
            {
                while ( simpleCameraCommandSetInfraRedLampDataReader.Read( ) )
                {
                    var data = simpleCameraCommandSetInfraRedLampDataReader.GetDataObject( );
                    result.Add( data );
                }
            }
            return result;
        }

        public void GetCameraCommandSetInfraRedLampCollection( Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleCameraCommandSetInfraRedLampDataReader = GetCameraCommandSetInfraRedLampCollectionDataReader( );
                using ( simpleCameraCommandSetInfraRedLampDataReader )
                {
                    simpleCameraCommandSetInfraRedLampDataReader.WriteResultSetTo( destinationWriter );
                }
            }
        }

        public SimpleCameraCommandSetInfraRedLampDataReader GetCameraCommandSetInfraRedLampCollectionByCameraDataReader( Guid camera )
        {
            const string sql = SimpleCameraCommandSetInfraRedLampDataReader.BaseQuery + " WHERE " +
                    SimpleCameraCommandSetInfraRedLampDataReader.ViewAliasName + ".[Camera] = @camera " +
                    " ORDER BY " + SimpleCameraCommandSetInfraRedLampDataReader.ViewAliasName + ".[Camera]," +SimpleCameraCommandSetInfraRedLampDataReader.ViewAliasName + ".[Timestamp]," +SimpleCameraCommandSetInfraRedLampDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var cameraParameter = sqlCommandParameters.AddReference( "@camera", camera );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleCameraCommandSetInfraRedLampDataReader = new SimpleCameraCommandSetInfraRedLampDataReader( _loggerFactory, sqlDataReader );
                return simpleCameraCommandSetInfraRedLampDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<CameraCommandSetInfraRedLampObject> GetCameraCommandSetInfraRedLampCollectionByCamera( Guid camera )
        {
            throw new NotImplementedException( );
        }
        public SimpleCameraCommandSetInfraRedLampDataReader GetCameraCommandSetInfraRedLampCollectionByCameraAndTimestampDataReader( Guid camera, DateTime timestamp )
        {
            const string sql = SimpleCameraCommandSetInfraRedLampDataReader.BaseQuery + " WHERE " +
                    SimpleCameraCommandSetInfraRedLampDataReader.ViewAliasName + ".[Camera] = @camera AND " +
                    SimpleCameraCommandSetInfraRedLampDataReader.ViewAliasName + ".[Timestamp] = @timestamp " +
                    " ORDER BY " + SimpleCameraCommandSetInfraRedLampDataReader.ViewAliasName + ".[Camera]," +SimpleCameraCommandSetInfraRedLampDataReader.ViewAliasName + ".[Timestamp]," +SimpleCameraCommandSetInfraRedLampDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var cameraParameter = sqlCommandParameters.AddReference( "@camera", camera );
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@timestamp", timestamp );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleCameraCommandSetInfraRedLampDataReader = new SimpleCameraCommandSetInfraRedLampDataReader( _loggerFactory, sqlDataReader );
                return simpleCameraCommandSetInfraRedLampDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<CameraCommandSetInfraRedLampObject> GetCameraCommandSetInfraRedLampCollectionByCameraAndTimestamp( Guid camera, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<CameraCommandSetInfraRedLampObject> GetCameraCommandSetInfraRedLampCollectionByCameraAtTimestamp( Guid camera, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<CameraCommandSetInfraRedLampObject> GetCameraCommandSetInfraRedLampCollectionByCameraFromTimestamp( Guid camera, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<CameraCommandSetInfraRedLampObject> GetCameraCommandSetInfraRedLampCollectionByCameraUntilTimestamp( Guid camera, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<CameraCommandSetInfraRedLampObject> GetCameraCommandSetInfraRedLampCollectionByCameraOverTimestamp( Guid camera, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException( );
        }
        public SimpleCameraCommandSetInfraRedLampDataReader GetCameraCommandSetInfraRedLampCollectionByTimestampDataReader( DateTime timestamp )
        {
            const string sql = SimpleCameraCommandSetInfraRedLampDataReader.BaseQuery + " WHERE " +
                    SimpleCameraCommandSetInfraRedLampDataReader.ViewAliasName + ".[Timestamp] = @timestamp " +
                    " ORDER BY " + SimpleCameraCommandSetInfraRedLampDataReader.ViewAliasName + ".[Timestamp]," +SimpleCameraCommandSetInfraRedLampDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@timestamp", timestamp );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleCameraCommandSetInfraRedLampDataReader = new SimpleCameraCommandSetInfraRedLampDataReader( _loggerFactory, sqlDataReader );
                return simpleCameraCommandSetInfraRedLampDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<CameraCommandSetInfraRedLampObject> GetCameraCommandSetInfraRedLampCollectionByTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<CameraCommandSetInfraRedLampObject> GetCameraCommandSetInfraRedLampCollectionAtTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<CameraCommandSetInfraRedLampObject> GetCameraCommandSetInfraRedLampCollectionFromTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<CameraCommandSetInfraRedLampObject> GetCameraCommandSetInfraRedLampCollectionUntilTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<CameraCommandSetInfraRedLampObject> GetCameraCommandSetInfraRedLampCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException( );
        }
        public SimpleCameraCommandSetInfraRedLampDataReader GetCameraCommandSetInfraRedLampCollectionByReplyDataReader( Guid reply )
        {
            const string sql = SimpleCameraCommandSetInfraRedLampDataReader.BaseQuery + " WHERE " +
                    SimpleCameraCommandSetInfraRedLampDataReader.ViewAliasName + ".[Reply] = @reply " +
                    " ORDER BY " + SimpleCameraCommandSetInfraRedLampDataReader.ViewAliasName + ".[Reply]," +SimpleCameraCommandSetInfraRedLampDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var replyParameter = sqlCommandParameters.AddReference( "@reply", reply );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleCameraCommandSetInfraRedLampDataReader = new SimpleCameraCommandSetInfraRedLampDataReader( _loggerFactory, sqlDataReader );
                return simpleCameraCommandSetInfraRedLampDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<CameraCommandSetInfraRedLampObject> GetCameraCommandSetInfraRedLampCollectionByReply( Guid reply )
        {
            throw new NotImplementedException( );
        }
        // ---------------------------------------------------------------------
        // CameraCommandSetWasher queries
        // ---------------------------------------------------------------------
        public SimpleCameraCommandSetWasherDataReader GetCameraCommandSetWasherByIdDataReader( Guid id )
        {
            const string sql = SimpleCameraCommandSetWasherDataReader.BaseQuery + "WHERE " + SimpleCameraCommandSetWasherDataReader.ViewAliasName + ".[Id] = @id"; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                sqlCommandParameters.AddGuid( "@id", id );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleCameraCommandSetWasherDataReader = new SimpleCameraCommandSetWasherDataReader( _loggerFactory, sqlDataReader );
                return simpleCameraCommandSetWasherDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public CameraCommandSetWasherObject? GetCameraCommandSetWasherById( Guid id )
        {
            var simpleCameraCommandSetWasherDataReader = GetCameraCommandSetWasherByIdDataReader( id );
            using ( simpleCameraCommandSetWasherDataReader )
            {
                if ( simpleCameraCommandSetWasherDataReader.Read( ) )
                {
                    var result = simpleCameraCommandSetWasherDataReader.GetDataObject( );
                    return result;
                }
            }
            return null;
        }

        public void GetCameraCommandSetWasherById( Guid id, Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleCameraCommandSetWasherDataReader = GetCameraCommandSetWasherByIdDataReader( id );
                using ( simpleCameraCommandSetWasherDataReader )
                {
                    if ( simpleCameraCommandSetWasherDataReader.Read( ) )
                    {
                        destinationWriter.Write( true );
                        simpleCameraCommandSetWasherDataReader.WriteTo( destinationWriter );
                    }
                    else
                    {
                        destinationWriter.Write( false );
                    }
                }
            }
        }

        public SimpleCameraCommandSetWasherDataReader GetCameraCommandSetWasherCollectionDataReader( )
        {
            const string sql = SimpleCameraCommandSetWasherDataReader.BaseQuery; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleCameraCommandSetWasherDataReader = new SimpleCameraCommandSetWasherDataReader( _loggerFactory, sqlDataReader );
                return simpleCameraCommandSetWasherDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public IList<CameraCommandSetWasherObject> GetCameraCommandSetWasherCollection( )
        {
            var result = new List<CameraCommandSetWasherObject>( );
            var simpleCameraCommandSetWasherDataReader = GetCameraCommandSetWasherCollectionDataReader( );
            using ( simpleCameraCommandSetWasherDataReader )
            {
                while ( simpleCameraCommandSetWasherDataReader.Read( ) )
                {
                    var data = simpleCameraCommandSetWasherDataReader.GetDataObject( );
                    result.Add( data );
                }
            }
            return result;
        }

        public void GetCameraCommandSetWasherCollection( Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleCameraCommandSetWasherDataReader = GetCameraCommandSetWasherCollectionDataReader( );
                using ( simpleCameraCommandSetWasherDataReader )
                {
                    simpleCameraCommandSetWasherDataReader.WriteResultSetTo( destinationWriter );
                }
            }
        }

        public SimpleCameraCommandSetWasherDataReader GetCameraCommandSetWasherCollectionByCameraDataReader( Guid camera )
        {
            const string sql = SimpleCameraCommandSetWasherDataReader.BaseQuery + " WHERE " +
                    SimpleCameraCommandSetWasherDataReader.ViewAliasName + ".[Camera] = @camera " +
                    " ORDER BY " + SimpleCameraCommandSetWasherDataReader.ViewAliasName + ".[Camera]," +SimpleCameraCommandSetWasherDataReader.ViewAliasName + ".[Timestamp]," +SimpleCameraCommandSetWasherDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var cameraParameter = sqlCommandParameters.AddReference( "@camera", camera );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleCameraCommandSetWasherDataReader = new SimpleCameraCommandSetWasherDataReader( _loggerFactory, sqlDataReader );
                return simpleCameraCommandSetWasherDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<CameraCommandSetWasherObject> GetCameraCommandSetWasherCollectionByCamera( Guid camera )
        {
            throw new NotImplementedException( );
        }
        public SimpleCameraCommandSetWasherDataReader GetCameraCommandSetWasherCollectionByCameraAndTimestampDataReader( Guid camera, DateTime timestamp )
        {
            const string sql = SimpleCameraCommandSetWasherDataReader.BaseQuery + " WHERE " +
                    SimpleCameraCommandSetWasherDataReader.ViewAliasName + ".[Camera] = @camera AND " +
                    SimpleCameraCommandSetWasherDataReader.ViewAliasName + ".[Timestamp] = @timestamp " +
                    " ORDER BY " + SimpleCameraCommandSetWasherDataReader.ViewAliasName + ".[Camera]," +SimpleCameraCommandSetWasherDataReader.ViewAliasName + ".[Timestamp]," +SimpleCameraCommandSetWasherDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var cameraParameter = sqlCommandParameters.AddReference( "@camera", camera );
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@timestamp", timestamp );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleCameraCommandSetWasherDataReader = new SimpleCameraCommandSetWasherDataReader( _loggerFactory, sqlDataReader );
                return simpleCameraCommandSetWasherDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<CameraCommandSetWasherObject> GetCameraCommandSetWasherCollectionByCameraAndTimestamp( Guid camera, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<CameraCommandSetWasherObject> GetCameraCommandSetWasherCollectionByCameraAtTimestamp( Guid camera, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<CameraCommandSetWasherObject> GetCameraCommandSetWasherCollectionByCameraFromTimestamp( Guid camera, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<CameraCommandSetWasherObject> GetCameraCommandSetWasherCollectionByCameraUntilTimestamp( Guid camera, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<CameraCommandSetWasherObject> GetCameraCommandSetWasherCollectionByCameraOverTimestamp( Guid camera, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException( );
        }
        public SimpleCameraCommandSetWasherDataReader GetCameraCommandSetWasherCollectionByTimestampDataReader( DateTime timestamp )
        {
            const string sql = SimpleCameraCommandSetWasherDataReader.BaseQuery + " WHERE " +
                    SimpleCameraCommandSetWasherDataReader.ViewAliasName + ".[Timestamp] = @timestamp " +
                    " ORDER BY " + SimpleCameraCommandSetWasherDataReader.ViewAliasName + ".[Timestamp]," +SimpleCameraCommandSetWasherDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@timestamp", timestamp );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleCameraCommandSetWasherDataReader = new SimpleCameraCommandSetWasherDataReader( _loggerFactory, sqlDataReader );
                return simpleCameraCommandSetWasherDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<CameraCommandSetWasherObject> GetCameraCommandSetWasherCollectionByTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<CameraCommandSetWasherObject> GetCameraCommandSetWasherCollectionAtTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<CameraCommandSetWasherObject> GetCameraCommandSetWasherCollectionFromTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<CameraCommandSetWasherObject> GetCameraCommandSetWasherCollectionUntilTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<CameraCommandSetWasherObject> GetCameraCommandSetWasherCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException( );
        }
        public SimpleCameraCommandSetWasherDataReader GetCameraCommandSetWasherCollectionByReplyDataReader( Guid reply )
        {
            const string sql = SimpleCameraCommandSetWasherDataReader.BaseQuery + " WHERE " +
                    SimpleCameraCommandSetWasherDataReader.ViewAliasName + ".[Reply] = @reply " +
                    " ORDER BY " + SimpleCameraCommandSetWasherDataReader.ViewAliasName + ".[Reply]," +SimpleCameraCommandSetWasherDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var replyParameter = sqlCommandParameters.AddReference( "@reply", reply );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleCameraCommandSetWasherDataReader = new SimpleCameraCommandSetWasherDataReader( _loggerFactory, sqlDataReader );
                return simpleCameraCommandSetWasherDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<CameraCommandSetWasherObject> GetCameraCommandSetWasherCollectionByReply( Guid reply )
        {
            throw new NotImplementedException( );
        }
        // ---------------------------------------------------------------------
        // CameraCommandSetWiper queries
        // ---------------------------------------------------------------------
        public SimpleCameraCommandSetWiperDataReader GetCameraCommandSetWiperByIdDataReader( Guid id )
        {
            const string sql = SimpleCameraCommandSetWiperDataReader.BaseQuery + "WHERE " + SimpleCameraCommandSetWiperDataReader.ViewAliasName + ".[Id] = @id"; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                sqlCommandParameters.AddGuid( "@id", id );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleCameraCommandSetWiperDataReader = new SimpleCameraCommandSetWiperDataReader( _loggerFactory, sqlDataReader );
                return simpleCameraCommandSetWiperDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public CameraCommandSetWiperObject? GetCameraCommandSetWiperById( Guid id )
        {
            var simpleCameraCommandSetWiperDataReader = GetCameraCommandSetWiperByIdDataReader( id );
            using ( simpleCameraCommandSetWiperDataReader )
            {
                if ( simpleCameraCommandSetWiperDataReader.Read( ) )
                {
                    var result = simpleCameraCommandSetWiperDataReader.GetDataObject( );
                    return result;
                }
            }
            return null;
        }

        public void GetCameraCommandSetWiperById( Guid id, Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleCameraCommandSetWiperDataReader = GetCameraCommandSetWiperByIdDataReader( id );
                using ( simpleCameraCommandSetWiperDataReader )
                {
                    if ( simpleCameraCommandSetWiperDataReader.Read( ) )
                    {
                        destinationWriter.Write( true );
                        simpleCameraCommandSetWiperDataReader.WriteTo( destinationWriter );
                    }
                    else
                    {
                        destinationWriter.Write( false );
                    }
                }
            }
        }

        public SimpleCameraCommandSetWiperDataReader GetCameraCommandSetWiperCollectionDataReader( )
        {
            const string sql = SimpleCameraCommandSetWiperDataReader.BaseQuery; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleCameraCommandSetWiperDataReader = new SimpleCameraCommandSetWiperDataReader( _loggerFactory, sqlDataReader );
                return simpleCameraCommandSetWiperDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public IList<CameraCommandSetWiperObject> GetCameraCommandSetWiperCollection( )
        {
            var result = new List<CameraCommandSetWiperObject>( );
            var simpleCameraCommandSetWiperDataReader = GetCameraCommandSetWiperCollectionDataReader( );
            using ( simpleCameraCommandSetWiperDataReader )
            {
                while ( simpleCameraCommandSetWiperDataReader.Read( ) )
                {
                    var data = simpleCameraCommandSetWiperDataReader.GetDataObject( );
                    result.Add( data );
                }
            }
            return result;
        }

        public void GetCameraCommandSetWiperCollection( Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleCameraCommandSetWiperDataReader = GetCameraCommandSetWiperCollectionDataReader( );
                using ( simpleCameraCommandSetWiperDataReader )
                {
                    simpleCameraCommandSetWiperDataReader.WriteResultSetTo( destinationWriter );
                }
            }
        }

        public SimpleCameraCommandSetWiperDataReader GetCameraCommandSetWiperCollectionByCameraDataReader( Guid camera )
        {
            const string sql = SimpleCameraCommandSetWiperDataReader.BaseQuery + " WHERE " +
                    SimpleCameraCommandSetWiperDataReader.ViewAliasName + ".[Camera] = @camera " +
                    " ORDER BY " + SimpleCameraCommandSetWiperDataReader.ViewAliasName + ".[Camera]," +SimpleCameraCommandSetWiperDataReader.ViewAliasName + ".[Timestamp]," +SimpleCameraCommandSetWiperDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var cameraParameter = sqlCommandParameters.AddReference( "@camera", camera );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleCameraCommandSetWiperDataReader = new SimpleCameraCommandSetWiperDataReader( _loggerFactory, sqlDataReader );
                return simpleCameraCommandSetWiperDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<CameraCommandSetWiperObject> GetCameraCommandSetWiperCollectionByCamera( Guid camera )
        {
            throw new NotImplementedException( );
        }
        public SimpleCameraCommandSetWiperDataReader GetCameraCommandSetWiperCollectionByCameraAndTimestampDataReader( Guid camera, DateTime timestamp )
        {
            const string sql = SimpleCameraCommandSetWiperDataReader.BaseQuery + " WHERE " +
                    SimpleCameraCommandSetWiperDataReader.ViewAliasName + ".[Camera] = @camera AND " +
                    SimpleCameraCommandSetWiperDataReader.ViewAliasName + ".[Timestamp] = @timestamp " +
                    " ORDER BY " + SimpleCameraCommandSetWiperDataReader.ViewAliasName + ".[Camera]," +SimpleCameraCommandSetWiperDataReader.ViewAliasName + ".[Timestamp]," +SimpleCameraCommandSetWiperDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var cameraParameter = sqlCommandParameters.AddReference( "@camera", camera );
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@timestamp", timestamp );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleCameraCommandSetWiperDataReader = new SimpleCameraCommandSetWiperDataReader( _loggerFactory, sqlDataReader );
                return simpleCameraCommandSetWiperDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<CameraCommandSetWiperObject> GetCameraCommandSetWiperCollectionByCameraAndTimestamp( Guid camera, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<CameraCommandSetWiperObject> GetCameraCommandSetWiperCollectionByCameraAtTimestamp( Guid camera, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<CameraCommandSetWiperObject> GetCameraCommandSetWiperCollectionByCameraFromTimestamp( Guid camera, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<CameraCommandSetWiperObject> GetCameraCommandSetWiperCollectionByCameraUntilTimestamp( Guid camera, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<CameraCommandSetWiperObject> GetCameraCommandSetWiperCollectionByCameraOverTimestamp( Guid camera, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException( );
        }
        public SimpleCameraCommandSetWiperDataReader GetCameraCommandSetWiperCollectionByTimestampDataReader( DateTime timestamp )
        {
            const string sql = SimpleCameraCommandSetWiperDataReader.BaseQuery + " WHERE " +
                    SimpleCameraCommandSetWiperDataReader.ViewAliasName + ".[Timestamp] = @timestamp " +
                    " ORDER BY " + SimpleCameraCommandSetWiperDataReader.ViewAliasName + ".[Timestamp]," +SimpleCameraCommandSetWiperDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@timestamp", timestamp );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleCameraCommandSetWiperDataReader = new SimpleCameraCommandSetWiperDataReader( _loggerFactory, sqlDataReader );
                return simpleCameraCommandSetWiperDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<CameraCommandSetWiperObject> GetCameraCommandSetWiperCollectionByTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<CameraCommandSetWiperObject> GetCameraCommandSetWiperCollectionAtTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<CameraCommandSetWiperObject> GetCameraCommandSetWiperCollectionFromTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<CameraCommandSetWiperObject> GetCameraCommandSetWiperCollectionUntilTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<CameraCommandSetWiperObject> GetCameraCommandSetWiperCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException( );
        }
        public SimpleCameraCommandSetWiperDataReader GetCameraCommandSetWiperCollectionByReplyDataReader( Guid reply )
        {
            const string sql = SimpleCameraCommandSetWiperDataReader.BaseQuery + " WHERE " +
                    SimpleCameraCommandSetWiperDataReader.ViewAliasName + ".[Reply] = @reply " +
                    " ORDER BY " + SimpleCameraCommandSetWiperDataReader.ViewAliasName + ".[Reply]," +SimpleCameraCommandSetWiperDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var replyParameter = sqlCommandParameters.AddReference( "@reply", reply );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleCameraCommandSetWiperDataReader = new SimpleCameraCommandSetWiperDataReader( _loggerFactory, sqlDataReader );
                return simpleCameraCommandSetWiperDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<CameraCommandSetWiperObject> GetCameraCommandSetWiperCollectionByReply( Guid reply )
        {
            throw new NotImplementedException( );
        }
        // ---------------------------------------------------------------------
        // CameraCommandStop queries
        // ---------------------------------------------------------------------
        public SimpleCameraCommandStopDataReader GetCameraCommandStopByIdDataReader( Guid id )
        {
            const string sql = SimpleCameraCommandStopDataReader.BaseQuery + "WHERE " + SimpleCameraCommandStopDataReader.ViewAliasName + ".[Id] = @id"; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                sqlCommandParameters.AddGuid( "@id", id );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleCameraCommandStopDataReader = new SimpleCameraCommandStopDataReader( _loggerFactory, sqlDataReader );
                return simpleCameraCommandStopDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public CameraCommandStopObject? GetCameraCommandStopById( Guid id )
        {
            var simpleCameraCommandStopDataReader = GetCameraCommandStopByIdDataReader( id );
            using ( simpleCameraCommandStopDataReader )
            {
                if ( simpleCameraCommandStopDataReader.Read( ) )
                {
                    var result = simpleCameraCommandStopDataReader.GetDataObject( );
                    return result;
                }
            }
            return null;
        }

        public void GetCameraCommandStopById( Guid id, Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleCameraCommandStopDataReader = GetCameraCommandStopByIdDataReader( id );
                using ( simpleCameraCommandStopDataReader )
                {
                    if ( simpleCameraCommandStopDataReader.Read( ) )
                    {
                        destinationWriter.Write( true );
                        simpleCameraCommandStopDataReader.WriteTo( destinationWriter );
                    }
                    else
                    {
                        destinationWriter.Write( false );
                    }
                }
            }
        }

        public SimpleCameraCommandStopDataReader GetCameraCommandStopCollectionDataReader( )
        {
            const string sql = SimpleCameraCommandStopDataReader.BaseQuery; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleCameraCommandStopDataReader = new SimpleCameraCommandStopDataReader( _loggerFactory, sqlDataReader );
                return simpleCameraCommandStopDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public IList<CameraCommandStopObject> GetCameraCommandStopCollection( )
        {
            var result = new List<CameraCommandStopObject>( );
            var simpleCameraCommandStopDataReader = GetCameraCommandStopCollectionDataReader( );
            using ( simpleCameraCommandStopDataReader )
            {
                while ( simpleCameraCommandStopDataReader.Read( ) )
                {
                    var data = simpleCameraCommandStopDataReader.GetDataObject( );
                    result.Add( data );
                }
            }
            return result;
        }

        public void GetCameraCommandStopCollection( Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleCameraCommandStopDataReader = GetCameraCommandStopCollectionDataReader( );
                using ( simpleCameraCommandStopDataReader )
                {
                    simpleCameraCommandStopDataReader.WriteResultSetTo( destinationWriter );
                }
            }
        }

        public SimpleCameraCommandStopDataReader GetCameraCommandStopCollectionByCameraDataReader( Guid camera )
        {
            const string sql = SimpleCameraCommandStopDataReader.BaseQuery + " WHERE " +
                    SimpleCameraCommandStopDataReader.ViewAliasName + ".[Camera] = @camera " +
                    " ORDER BY " + SimpleCameraCommandStopDataReader.ViewAliasName + ".[Camera]," +SimpleCameraCommandStopDataReader.ViewAliasName + ".[Timestamp]," +SimpleCameraCommandStopDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var cameraParameter = sqlCommandParameters.AddReference( "@camera", camera );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleCameraCommandStopDataReader = new SimpleCameraCommandStopDataReader( _loggerFactory, sqlDataReader );
                return simpleCameraCommandStopDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<CameraCommandStopObject> GetCameraCommandStopCollectionByCamera( Guid camera )
        {
            throw new NotImplementedException( );
        }
        public SimpleCameraCommandStopDataReader GetCameraCommandStopCollectionByCameraAndTimestampDataReader( Guid camera, DateTime timestamp )
        {
            const string sql = SimpleCameraCommandStopDataReader.BaseQuery + " WHERE " +
                    SimpleCameraCommandStopDataReader.ViewAliasName + ".[Camera] = @camera AND " +
                    SimpleCameraCommandStopDataReader.ViewAliasName + ".[Timestamp] = @timestamp " +
                    " ORDER BY " + SimpleCameraCommandStopDataReader.ViewAliasName + ".[Camera]," +SimpleCameraCommandStopDataReader.ViewAliasName + ".[Timestamp]," +SimpleCameraCommandStopDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var cameraParameter = sqlCommandParameters.AddReference( "@camera", camera );
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@timestamp", timestamp );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleCameraCommandStopDataReader = new SimpleCameraCommandStopDataReader( _loggerFactory, sqlDataReader );
                return simpleCameraCommandStopDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<CameraCommandStopObject> GetCameraCommandStopCollectionByCameraAndTimestamp( Guid camera, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<CameraCommandStopObject> GetCameraCommandStopCollectionByCameraAtTimestamp( Guid camera, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<CameraCommandStopObject> GetCameraCommandStopCollectionByCameraFromTimestamp( Guid camera, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<CameraCommandStopObject> GetCameraCommandStopCollectionByCameraUntilTimestamp( Guid camera, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<CameraCommandStopObject> GetCameraCommandStopCollectionByCameraOverTimestamp( Guid camera, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException( );
        }
        public SimpleCameraCommandStopDataReader GetCameraCommandStopCollectionByTimestampDataReader( DateTime timestamp )
        {
            const string sql = SimpleCameraCommandStopDataReader.BaseQuery + " WHERE " +
                    SimpleCameraCommandStopDataReader.ViewAliasName + ".[Timestamp] = @timestamp " +
                    " ORDER BY " + SimpleCameraCommandStopDataReader.ViewAliasName + ".[Timestamp]," +SimpleCameraCommandStopDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@timestamp", timestamp );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleCameraCommandStopDataReader = new SimpleCameraCommandStopDataReader( _loggerFactory, sqlDataReader );
                return simpleCameraCommandStopDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<CameraCommandStopObject> GetCameraCommandStopCollectionByTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<CameraCommandStopObject> GetCameraCommandStopCollectionAtTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<CameraCommandStopObject> GetCameraCommandStopCollectionFromTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<CameraCommandStopObject> GetCameraCommandStopCollectionUntilTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<CameraCommandStopObject> GetCameraCommandStopCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException( );
        }
        public SimpleCameraCommandStopDataReader GetCameraCommandStopCollectionByReplyDataReader( Guid reply )
        {
            const string sql = SimpleCameraCommandStopDataReader.BaseQuery + " WHERE " +
                    SimpleCameraCommandStopDataReader.ViewAliasName + ".[Reply] = @reply " +
                    " ORDER BY " + SimpleCameraCommandStopDataReader.ViewAliasName + ".[Reply]," +SimpleCameraCommandStopDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var replyParameter = sqlCommandParameters.AddReference( "@reply", reply );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleCameraCommandStopDataReader = new SimpleCameraCommandStopDataReader( _loggerFactory, sqlDataReader );
                return simpleCameraCommandStopDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<CameraCommandStopObject> GetCameraCommandStopCollectionByReply( Guid reply )
        {
            throw new NotImplementedException( );
        }
        // ---------------------------------------------------------------------
        // CameraCommandReply queries
        // ---------------------------------------------------------------------
        public SimpleCameraCommandReplyDataReader GetCameraCommandReplyByIdDataReader( Guid id )
        {
            const string sql = SimpleCameraCommandReplyDataReader.BaseQuery + "WHERE " + SimpleCameraCommandReplyDataReader.ViewAliasName + ".[Id] = @id"; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                sqlCommandParameters.AddGuid( "@id", id );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleCameraCommandReplyDataReader = new SimpleCameraCommandReplyDataReader( _loggerFactory, sqlDataReader );
                return simpleCameraCommandReplyDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public CameraCommandReplyObject? GetCameraCommandReplyById( Guid id )
        {
            var simpleCameraCommandReplyDataReader = GetCameraCommandReplyByIdDataReader( id );
            using ( simpleCameraCommandReplyDataReader )
            {
                if ( simpleCameraCommandReplyDataReader.Read( ) )
                {
                    var result = simpleCameraCommandReplyDataReader.GetDataObject( );
                    return result;
                }
            }
            return null;
        }

        public void GetCameraCommandReplyById( Guid id, Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleCameraCommandReplyDataReader = GetCameraCommandReplyByIdDataReader( id );
                using ( simpleCameraCommandReplyDataReader )
                {
                    if ( simpleCameraCommandReplyDataReader.Read( ) )
                    {
                        destinationWriter.Write( true );
                        simpleCameraCommandReplyDataReader.WriteTo( destinationWriter );
                    }
                    else
                    {
                        destinationWriter.Write( false );
                    }
                }
            }
        }

        public SimpleCameraCommandReplyDataReader GetCameraCommandReplyCollectionDataReader( )
        {
            const string sql = SimpleCameraCommandReplyDataReader.BaseQuery; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleCameraCommandReplyDataReader = new SimpleCameraCommandReplyDataReader( _loggerFactory, sqlDataReader );
                return simpleCameraCommandReplyDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public IList<CameraCommandReplyObject> GetCameraCommandReplyCollection( )
        {
            var result = new List<CameraCommandReplyObject>( );
            var simpleCameraCommandReplyDataReader = GetCameraCommandReplyCollectionDataReader( );
            using ( simpleCameraCommandReplyDataReader )
            {
                while ( simpleCameraCommandReplyDataReader.Read( ) )
                {
                    var data = simpleCameraCommandReplyDataReader.GetDataObject( );
                    result.Add( data );
                }
            }
            return result;
        }

        public void GetCameraCommandReplyCollection( Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleCameraCommandReplyDataReader = GetCameraCommandReplyCollectionDataReader( );
                using ( simpleCameraCommandReplyDataReader )
                {
                    simpleCameraCommandReplyDataReader.WriteResultSetTo( destinationWriter );
                }
            }
        }

        public SimpleCameraCommandReplyDataReader GetCameraCommandReplyCollectionByCameraDataReader( Guid camera )
        {
            const string sql = SimpleCameraCommandReplyDataReader.BaseQuery + " WHERE " +
                    SimpleCameraCommandReplyDataReader.ViewAliasName + ".[Camera] = @camera " +
                    " ORDER BY " + SimpleCameraCommandReplyDataReader.ViewAliasName + ".[Camera]," +SimpleCameraCommandReplyDataReader.ViewAliasName + ".[Timestamp]," +SimpleCameraCommandReplyDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var cameraParameter = sqlCommandParameters.AddReference( "@camera", camera );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleCameraCommandReplyDataReader = new SimpleCameraCommandReplyDataReader( _loggerFactory, sqlDataReader );
                return simpleCameraCommandReplyDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<CameraCommandReplyObject> GetCameraCommandReplyCollectionByCamera( Guid camera )
        {
            throw new NotImplementedException( );
        }
        public SimpleCameraCommandReplyDataReader GetCameraCommandReplyCollectionByCameraAndTimestampDataReader( Guid camera, DateTime timestamp )
        {
            const string sql = SimpleCameraCommandReplyDataReader.BaseQuery + " WHERE " +
                    SimpleCameraCommandReplyDataReader.ViewAliasName + ".[Camera] = @camera AND " +
                    SimpleCameraCommandReplyDataReader.ViewAliasName + ".[Timestamp] = @timestamp " +
                    " ORDER BY " + SimpleCameraCommandReplyDataReader.ViewAliasName + ".[Camera]," +SimpleCameraCommandReplyDataReader.ViewAliasName + ".[Timestamp]," +SimpleCameraCommandReplyDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var cameraParameter = sqlCommandParameters.AddReference( "@camera", camera );
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@timestamp", timestamp );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleCameraCommandReplyDataReader = new SimpleCameraCommandReplyDataReader( _loggerFactory, sqlDataReader );
                return simpleCameraCommandReplyDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<CameraCommandReplyObject> GetCameraCommandReplyCollectionByCameraAndTimestamp( Guid camera, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<CameraCommandReplyObject> GetCameraCommandReplyCollectionByCameraAtTimestamp( Guid camera, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<CameraCommandReplyObject> GetCameraCommandReplyCollectionByCameraFromTimestamp( Guid camera, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<CameraCommandReplyObject> GetCameraCommandReplyCollectionByCameraUntilTimestamp( Guid camera, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<CameraCommandReplyObject> GetCameraCommandReplyCollectionByCameraOverTimestamp( Guid camera, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException( );
        }
        public SimpleCameraCommandReplyDataReader GetCameraCommandReplyCollectionByTimestampDataReader( DateTime timestamp )
        {
            const string sql = SimpleCameraCommandReplyDataReader.BaseQuery + " WHERE " +
                    SimpleCameraCommandReplyDataReader.ViewAliasName + ".[Timestamp] = @timestamp " +
                    " ORDER BY " + SimpleCameraCommandReplyDataReader.ViewAliasName + ".[Timestamp]," +SimpleCameraCommandReplyDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@timestamp", timestamp );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleCameraCommandReplyDataReader = new SimpleCameraCommandReplyDataReader( _loggerFactory, sqlDataReader );
                return simpleCameraCommandReplyDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<CameraCommandReplyObject> GetCameraCommandReplyCollectionByTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<CameraCommandReplyObject> GetCameraCommandReplyCollectionAtTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<CameraCommandReplyObject> GetCameraCommandReplyCollectionFromTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<CameraCommandReplyObject> GetCameraCommandReplyCollectionUntilTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<CameraCommandReplyObject> GetCameraCommandReplyCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException( );
        }
        public SimpleCameraCommandReplyDataReader GetCameraCommandReplyByCommandDataReader( Guid command )
        {
            const string sql = SimpleCameraCommandReplyDataReader.BaseQuery + " WHERE " +
                    SimpleCameraCommandReplyDataReader.ViewAliasName + ".[Command] = @command " +
                    " ORDER BY " + SimpleCameraCommandReplyDataReader.ViewAliasName + ".[Command]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var commandParameter = sqlCommandParameters.AddReference( "@command", command );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleCameraCommandReplyDataReader = new SimpleCameraCommandReplyDataReader( _loggerFactory, sqlDataReader );
                return simpleCameraCommandReplyDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public CameraCommandReplyObject? GetCameraCommandReplyByCommand( Guid command )
        {
            throw new NotImplementedException( );
        }
        // ---------------------------------------------------------------------
        // CameraConfiguration queries
        // ---------------------------------------------------------------------
        public SimpleCameraConfigurationDataReader GetCameraConfigurationByIdDataReader( Guid id )
        {
            const string sql = SimpleCameraConfigurationDataReader.BaseQuery + "WHERE " + SimpleCameraConfigurationDataReader.ViewAliasName + ".[Id] = @id"; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                sqlCommandParameters.AddGuid( "@id", id );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleCameraConfigurationDataReader = new SimpleCameraConfigurationDataReader( _loggerFactory, sqlDataReader );
                return simpleCameraConfigurationDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public CameraConfigurationObject? GetCameraConfigurationById( Guid id )
        {
            var simpleCameraConfigurationDataReader = GetCameraConfigurationByIdDataReader( id );
            using ( simpleCameraConfigurationDataReader )
            {
                if ( simpleCameraConfigurationDataReader.Read( ) )
                {
                    var result = simpleCameraConfigurationDataReader.GetDataObject( );
                    return result;
                }
            }
            return null;
        }

        public void GetCameraConfigurationById( Guid id, Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleCameraConfigurationDataReader = GetCameraConfigurationByIdDataReader( id );
                using ( simpleCameraConfigurationDataReader )
                {
                    if ( simpleCameraConfigurationDataReader.Read( ) )
                    {
                        destinationWriter.Write( true );
                        simpleCameraConfigurationDataReader.WriteTo( destinationWriter );
                    }
                    else
                    {
                        destinationWriter.Write( false );
                    }
                }
            }
        }

        public SimpleCameraConfigurationDataReader GetCameraConfigurationCollectionDataReader( )
        {
            const string sql = SimpleCameraConfigurationDataReader.BaseQuery; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleCameraConfigurationDataReader = new SimpleCameraConfigurationDataReader( _loggerFactory, sqlDataReader );
                return simpleCameraConfigurationDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public IList<CameraConfigurationObject> GetCameraConfigurationCollection( )
        {
            var result = new List<CameraConfigurationObject>( );
            var simpleCameraConfigurationDataReader = GetCameraConfigurationCollectionDataReader( );
            using ( simpleCameraConfigurationDataReader )
            {
                while ( simpleCameraConfigurationDataReader.Read( ) )
                {
                    var data = simpleCameraConfigurationDataReader.GetDataObject( );
                    result.Add( data );
                }
            }
            return result;
        }

        public void GetCameraConfigurationCollection( Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleCameraConfigurationDataReader = GetCameraConfigurationCollectionDataReader( );
                using ( simpleCameraConfigurationDataReader )
                {
                    simpleCameraConfigurationDataReader.WriteResultSetTo( destinationWriter );
                }
            }
        }

        public SimpleCameraConfigurationDataReader GetCameraConfigurationCollectionByCameraDataReader( Guid camera )
        {
            const string sql = SimpleCameraConfigurationDataReader.BaseQuery + " WHERE " +
                    SimpleCameraConfigurationDataReader.ViewAliasName + ".[Camera] = @camera " +
                    " ORDER BY " + SimpleCameraConfigurationDataReader.ViewAliasName + ".[Camera]," +SimpleCameraConfigurationDataReader.ViewAliasName + ".[Timestamp]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var cameraParameter = sqlCommandParameters.AddReference( "@camera", camera );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleCameraConfigurationDataReader = new SimpleCameraConfigurationDataReader( _loggerFactory, sqlDataReader );
                return simpleCameraConfigurationDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<CameraConfigurationObject> GetCameraConfigurationCollectionByCamera( Guid camera )
        {
            throw new NotImplementedException( );
        }
        public SimpleCameraConfigurationDataReader GetCameraConfigurationByCameraAndTimestampDataReader( Guid camera, DateTime timestamp )
        {
            const string sql = SimpleCameraConfigurationDataReader.BaseQuery + " WHERE " +
                    SimpleCameraConfigurationDataReader.ViewAliasName + ".[Camera] = @camera AND " +
                    SimpleCameraConfigurationDataReader.ViewAliasName + ".[Timestamp] = @timestamp " +
                    " ORDER BY " + SimpleCameraConfigurationDataReader.ViewAliasName + ".[Camera]," +SimpleCameraConfigurationDataReader.ViewAliasName + ".[Timestamp]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var cameraParameter = sqlCommandParameters.AddReference( "@camera", camera );
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@timestamp", timestamp );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleCameraConfigurationDataReader = new SimpleCameraConfigurationDataReader( _loggerFactory, sqlDataReader );
                return simpleCameraConfigurationDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public CameraConfigurationObject? GetCameraConfigurationByCameraAndTimestamp( Guid camera, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public CameraConfigurationObject? GetCameraConfigurationByCameraAtTimestamp( Guid camera, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<CameraConfigurationObject> GetCameraConfigurationByCameraFromTimestamp( Guid camera, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<CameraConfigurationObject> GetCameraConfigurationByCameraUntilTimestamp( Guid camera, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<CameraConfigurationObject> GetCameraConfigurationByCameraOverTimestamp( Guid camera, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException( );
        }
        public SimpleCameraConfigurationDataReader GetCameraConfigurationCollectionByTimestampDataReader( DateTime timestamp )
        {
            const string sql = SimpleCameraConfigurationDataReader.BaseQuery + " WHERE " +
                    SimpleCameraConfigurationDataReader.ViewAliasName + ".[Timestamp] = @timestamp " +
                    " ORDER BY " + SimpleCameraConfigurationDataReader.ViewAliasName + ".[Timestamp]," +SimpleCameraConfigurationDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@timestamp", timestamp );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleCameraConfigurationDataReader = new SimpleCameraConfigurationDataReader( _loggerFactory, sqlDataReader );
                return simpleCameraConfigurationDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<CameraConfigurationObject> GetCameraConfigurationCollectionByTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<CameraConfigurationObject> GetCameraConfigurationCollectionAtTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<CameraConfigurationObject> GetCameraConfigurationCollectionFromTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<CameraConfigurationObject> GetCameraConfigurationCollectionUntilTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<CameraConfigurationObject> GetCameraConfigurationCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException( );
        }
        // ---------------------------------------------------------------------
        // CameraPanCalibration queries
        // ---------------------------------------------------------------------
        public SimpleCameraPanCalibrationDataReader GetCameraPanCalibrationByIdDataReader( Guid id )
        {
            const string sql = SimpleCameraPanCalibrationDataReader.BaseQuery + "WHERE " + SimpleCameraPanCalibrationDataReader.ViewAliasName + ".[Id] = @id"; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                sqlCommandParameters.AddGuid( "@id", id );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleCameraPanCalibrationDataReader = new SimpleCameraPanCalibrationDataReader( _loggerFactory, sqlDataReader );
                return simpleCameraPanCalibrationDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public CameraPanCalibrationObject? GetCameraPanCalibrationById( Guid id )
        {
            var simpleCameraPanCalibrationDataReader = GetCameraPanCalibrationByIdDataReader( id );
            using ( simpleCameraPanCalibrationDataReader )
            {
                if ( simpleCameraPanCalibrationDataReader.Read( ) )
                {
                    var result = simpleCameraPanCalibrationDataReader.GetDataObject( );
                    return result;
                }
            }
            return null;
        }

        public void GetCameraPanCalibrationById( Guid id, Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleCameraPanCalibrationDataReader = GetCameraPanCalibrationByIdDataReader( id );
                using ( simpleCameraPanCalibrationDataReader )
                {
                    if ( simpleCameraPanCalibrationDataReader.Read( ) )
                    {
                        destinationWriter.Write( true );
                        simpleCameraPanCalibrationDataReader.WriteTo( destinationWriter );
                    }
                    else
                    {
                        destinationWriter.Write( false );
                    }
                }
            }
        }

        public SimpleCameraPanCalibrationDataReader GetCameraPanCalibrationCollectionDataReader( )
        {
            const string sql = SimpleCameraPanCalibrationDataReader.BaseQuery; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleCameraPanCalibrationDataReader = new SimpleCameraPanCalibrationDataReader( _loggerFactory, sqlDataReader );
                return simpleCameraPanCalibrationDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public IList<CameraPanCalibrationObject> GetCameraPanCalibrationCollection( )
        {
            var result = new List<CameraPanCalibrationObject>( );
            var simpleCameraPanCalibrationDataReader = GetCameraPanCalibrationCollectionDataReader( );
            using ( simpleCameraPanCalibrationDataReader )
            {
                while ( simpleCameraPanCalibrationDataReader.Read( ) )
                {
                    var data = simpleCameraPanCalibrationDataReader.GetDataObject( );
                    result.Add( data );
                }
            }
            return result;
        }

        public void GetCameraPanCalibrationCollection( Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleCameraPanCalibrationDataReader = GetCameraPanCalibrationCollectionDataReader( );
                using ( simpleCameraPanCalibrationDataReader )
                {
                    simpleCameraPanCalibrationDataReader.WriteResultSetTo( destinationWriter );
                }
            }
        }

        public SimpleCameraPanCalibrationDataReader GetCameraPanCalibrationCollectionByCameraDataReader( Guid camera )
        {
            const string sql = SimpleCameraPanCalibrationDataReader.BaseQuery + " WHERE " +
                    SimpleCameraPanCalibrationDataReader.ViewAliasName + ".[Camera] = @camera " +
                    " ORDER BY " + SimpleCameraPanCalibrationDataReader.ViewAliasName + ".[Camera]," +SimpleCameraPanCalibrationDataReader.ViewAliasName + ".[Timestamp]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var cameraParameter = sqlCommandParameters.AddReference( "@camera", camera );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleCameraPanCalibrationDataReader = new SimpleCameraPanCalibrationDataReader( _loggerFactory, sqlDataReader );
                return simpleCameraPanCalibrationDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<CameraPanCalibrationObject> GetCameraPanCalibrationCollectionByCamera( Guid camera )
        {
            throw new NotImplementedException( );
        }
        public SimpleCameraPanCalibrationDataReader GetCameraPanCalibrationByCameraAndTimestampDataReader( Guid camera, DateTime timestamp )
        {
            const string sql = SimpleCameraPanCalibrationDataReader.BaseQuery + " WHERE " +
                    SimpleCameraPanCalibrationDataReader.ViewAliasName + ".[Camera] = @camera AND " +
                    SimpleCameraPanCalibrationDataReader.ViewAliasName + ".[Timestamp] = @timestamp " +
                    " ORDER BY " + SimpleCameraPanCalibrationDataReader.ViewAliasName + ".[Camera]," +SimpleCameraPanCalibrationDataReader.ViewAliasName + ".[Timestamp]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var cameraParameter = sqlCommandParameters.AddReference( "@camera", camera );
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@timestamp", timestamp );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleCameraPanCalibrationDataReader = new SimpleCameraPanCalibrationDataReader( _loggerFactory, sqlDataReader );
                return simpleCameraPanCalibrationDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public CameraPanCalibrationObject? GetCameraPanCalibrationByCameraAndTimestamp( Guid camera, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public CameraPanCalibrationObject? GetCameraPanCalibrationByCameraAtTimestamp( Guid camera, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<CameraPanCalibrationObject> GetCameraPanCalibrationByCameraFromTimestamp( Guid camera, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<CameraPanCalibrationObject> GetCameraPanCalibrationByCameraUntilTimestamp( Guid camera, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<CameraPanCalibrationObject> GetCameraPanCalibrationByCameraOverTimestamp( Guid camera, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException( );
        }
        public SimpleCameraPanCalibrationDataReader GetCameraPanCalibrationCollectionByTimestampDataReader( DateTime timestamp )
        {
            const string sql = SimpleCameraPanCalibrationDataReader.BaseQuery + " WHERE " +
                    SimpleCameraPanCalibrationDataReader.ViewAliasName + ".[Timestamp] = @timestamp " +
                    " ORDER BY " + SimpleCameraPanCalibrationDataReader.ViewAliasName + ".[Timestamp]," +SimpleCameraPanCalibrationDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@timestamp", timestamp );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleCameraPanCalibrationDataReader = new SimpleCameraPanCalibrationDataReader( _loggerFactory, sqlDataReader );
                return simpleCameraPanCalibrationDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<CameraPanCalibrationObject> GetCameraPanCalibrationCollectionByTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<CameraPanCalibrationObject> GetCameraPanCalibrationCollectionAtTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<CameraPanCalibrationObject> GetCameraPanCalibrationCollectionFromTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<CameraPanCalibrationObject> GetCameraPanCalibrationCollectionUntilTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<CameraPanCalibrationObject> GetCameraPanCalibrationCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException( );
        }
        // ---------------------------------------------------------------------
        // CameraPanCalibrationValue queries
        // ---------------------------------------------------------------------
        public SimpleCameraPanCalibrationValueDataReader GetCameraPanCalibrationValueByIdDataReader( Guid id )
        {
            const string sql = SimpleCameraPanCalibrationValueDataReader.BaseQuery + "WHERE " + SimpleCameraPanCalibrationValueDataReader.ViewAliasName + ".[Id] = @id"; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                sqlCommandParameters.AddGuid( "@id", id );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleCameraPanCalibrationValueDataReader = new SimpleCameraPanCalibrationValueDataReader( _loggerFactory, sqlDataReader );
                return simpleCameraPanCalibrationValueDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public CameraPanCalibrationValueObject? GetCameraPanCalibrationValueById( Guid id )
        {
            var simpleCameraPanCalibrationValueDataReader = GetCameraPanCalibrationValueByIdDataReader( id );
            using ( simpleCameraPanCalibrationValueDataReader )
            {
                if ( simpleCameraPanCalibrationValueDataReader.Read( ) )
                {
                    var result = simpleCameraPanCalibrationValueDataReader.GetDataObject( );
                    return result;
                }
            }
            return null;
        }

        public void GetCameraPanCalibrationValueById( Guid id, Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleCameraPanCalibrationValueDataReader = GetCameraPanCalibrationValueByIdDataReader( id );
                using ( simpleCameraPanCalibrationValueDataReader )
                {
                    if ( simpleCameraPanCalibrationValueDataReader.Read( ) )
                    {
                        destinationWriter.Write( true );
                        simpleCameraPanCalibrationValueDataReader.WriteTo( destinationWriter );
                    }
                    else
                    {
                        destinationWriter.Write( false );
                    }
                }
            }
        }

        public SimpleCameraPanCalibrationValueDataReader GetCameraPanCalibrationValueCollectionDataReader( )
        {
            const string sql = SimpleCameraPanCalibrationValueDataReader.BaseQuery; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleCameraPanCalibrationValueDataReader = new SimpleCameraPanCalibrationValueDataReader( _loggerFactory, sqlDataReader );
                return simpleCameraPanCalibrationValueDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public IList<CameraPanCalibrationValueObject> GetCameraPanCalibrationValueCollection( )
        {
            var result = new List<CameraPanCalibrationValueObject>( );
            var simpleCameraPanCalibrationValueDataReader = GetCameraPanCalibrationValueCollectionDataReader( );
            using ( simpleCameraPanCalibrationValueDataReader )
            {
                while ( simpleCameraPanCalibrationValueDataReader.Read( ) )
                {
                    var data = simpleCameraPanCalibrationValueDataReader.GetDataObject( );
                    result.Add( data );
                }
            }
            return result;
        }

        public void GetCameraPanCalibrationValueCollection( Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleCameraPanCalibrationValueDataReader = GetCameraPanCalibrationValueCollectionDataReader( );
                using ( simpleCameraPanCalibrationValueDataReader )
                {
                    simpleCameraPanCalibrationValueDataReader.WriteResultSetTo( destinationWriter );
                }
            }
        }

        public SimpleCameraPanCalibrationValueDataReader GetCameraPanCalibrationValueCollectionByPanCalibrationDataReader( Guid panCalibration )
        {
            const string sql = SimpleCameraPanCalibrationValueDataReader.BaseQuery + " WHERE " +
                    SimpleCameraPanCalibrationValueDataReader.ViewAliasName + ".[PanCalibration] = @panCalibration " +
                    " ORDER BY " + SimpleCameraPanCalibrationValueDataReader.ViewAliasName + ".[PanCalibration]," +SimpleCameraPanCalibrationValueDataReader.ViewAliasName + ".[PanAngle]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var panCalibrationParameter = sqlCommandParameters.AddReference( "@panCalibration", panCalibration );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleCameraPanCalibrationValueDataReader = new SimpleCameraPanCalibrationValueDataReader( _loggerFactory, sqlDataReader );
                return simpleCameraPanCalibrationValueDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<CameraPanCalibrationValueObject> GetCameraPanCalibrationValueCollectionByPanCalibration( Guid panCalibration )
        {
            throw new NotImplementedException( );
        }
        public SimpleCameraPanCalibrationValueDataReader GetCameraPanCalibrationValueByPanCalibrationAndPanAngleDataReader( Guid panCalibration, double panAngle )
        {
            const string sql = SimpleCameraPanCalibrationValueDataReader.BaseQuery + " WHERE " +
                    SimpleCameraPanCalibrationValueDataReader.ViewAliasName + ".[PanCalibration] = @panCalibration AND " +
                    SimpleCameraPanCalibrationValueDataReader.ViewAliasName + ".[PanAngle] = @panAngle " +
                    " ORDER BY " + SimpleCameraPanCalibrationValueDataReader.ViewAliasName + ".[PanCalibration]," +SimpleCameraPanCalibrationValueDataReader.ViewAliasName + ".[PanAngle]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var panCalibrationParameter = sqlCommandParameters.AddReference( "@panCalibration", panCalibration );
                var panAngleParameter = sqlCommandParameters.AddDouble( "@panAngle", panAngle );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleCameraPanCalibrationValueDataReader = new SimpleCameraPanCalibrationValueDataReader( _loggerFactory, sqlDataReader );
                return simpleCameraPanCalibrationValueDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public CameraPanCalibrationValueObject? GetCameraPanCalibrationValueByPanCalibrationAndPanAngle( Guid panCalibration, double panAngle )
        {
            throw new NotImplementedException( );
        }
        public IList<CameraPanCalibrationValueObject> GetCameraPanCalibrationValueByPanCalibrationFromPanAngle( Guid panCalibration, double panAngle )
        {
            throw new NotImplementedException( );
        }
        public IList<CameraPanCalibrationValueObject> GetCameraPanCalibrationValueByPanCalibrationUntilPanAngle( Guid panCalibration, double panAngle )
        {
            throw new NotImplementedException( );
        }
        public IList<CameraPanCalibrationValueObject> GetCameraPanCalibrationValueByPanCalibrationOverPanAngle( Guid panCalibration, double fromPanAngle, double untilPanAngle )
        {
            throw new NotImplementedException( );
        }
        // ---------------------------------------------------------------------
        // CameraStatus queries
        // ---------------------------------------------------------------------
        public SimpleCameraStatusDataReader GetCameraStatusByIdDataReader( Guid id )
        {
            const string sql = SimpleCameraStatusDataReader.BaseQuery + "WHERE " + SimpleCameraStatusDataReader.ViewAliasName + ".[Id] = @id"; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                sqlCommandParameters.AddGuid( "@id", id );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleCameraStatusDataReader = new SimpleCameraStatusDataReader( _loggerFactory, sqlDataReader );
                return simpleCameraStatusDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public CameraStatusObject? GetCameraStatusById( Guid id )
        {
            var simpleCameraStatusDataReader = GetCameraStatusByIdDataReader( id );
            using ( simpleCameraStatusDataReader )
            {
                if ( simpleCameraStatusDataReader.Read( ) )
                {
                    var result = simpleCameraStatusDataReader.GetDataObject( );
                    return result;
                }
            }
            return null;
        }

        public void GetCameraStatusById( Guid id, Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleCameraStatusDataReader = GetCameraStatusByIdDataReader( id );
                using ( simpleCameraStatusDataReader )
                {
                    if ( simpleCameraStatusDataReader.Read( ) )
                    {
                        destinationWriter.Write( true );
                        simpleCameraStatusDataReader.WriteTo( destinationWriter );
                    }
                    else
                    {
                        destinationWriter.Write( false );
                    }
                }
            }
        }

        public SimpleCameraStatusDataReader GetCameraStatusCollectionDataReader( )
        {
            const string sql = SimpleCameraStatusDataReader.BaseQuery; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleCameraStatusDataReader = new SimpleCameraStatusDataReader( _loggerFactory, sqlDataReader );
                return simpleCameraStatusDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public IList<CameraStatusObject> GetCameraStatusCollection( )
        {
            var result = new List<CameraStatusObject>( );
            var simpleCameraStatusDataReader = GetCameraStatusCollectionDataReader( );
            using ( simpleCameraStatusDataReader )
            {
                while ( simpleCameraStatusDataReader.Read( ) )
                {
                    var data = simpleCameraStatusDataReader.GetDataObject( );
                    result.Add( data );
                }
            }
            return result;
        }

        public void GetCameraStatusCollection( Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleCameraStatusDataReader = GetCameraStatusCollectionDataReader( );
                using ( simpleCameraStatusDataReader )
                {
                    simpleCameraStatusDataReader.WriteResultSetTo( destinationWriter );
                }
            }
        }

        public SimpleCameraStatusDataReader GetCameraStatusCollectionByCameraDataReader( Guid camera )
        {
            const string sql = SimpleCameraStatusDataReader.BaseQuery + " WHERE " +
                    SimpleCameraStatusDataReader.ViewAliasName + ".[Camera] = @camera " +
                    " ORDER BY " + SimpleCameraStatusDataReader.ViewAliasName + ".[Camera]," +SimpleCameraStatusDataReader.ViewAliasName + ".[Timestamp]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var cameraParameter = sqlCommandParameters.AddReference( "@camera", camera );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleCameraStatusDataReader = new SimpleCameraStatusDataReader( _loggerFactory, sqlDataReader );
                return simpleCameraStatusDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<CameraStatusObject> GetCameraStatusCollectionByCamera( Guid camera )
        {
            throw new NotImplementedException( );
        }
        public SimpleCameraStatusDataReader GetCameraStatusByCameraAndTimestampDataReader( Guid camera, DateTime timestamp )
        {
            const string sql = SimpleCameraStatusDataReader.BaseQuery + " WHERE " +
                    SimpleCameraStatusDataReader.ViewAliasName + ".[Camera] = @camera AND " +
                    SimpleCameraStatusDataReader.ViewAliasName + ".[Timestamp] = @timestamp " +
                    " ORDER BY " + SimpleCameraStatusDataReader.ViewAliasName + ".[Camera]," +SimpleCameraStatusDataReader.ViewAliasName + ".[Timestamp]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var cameraParameter = sqlCommandParameters.AddReference( "@camera", camera );
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@timestamp", timestamp );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleCameraStatusDataReader = new SimpleCameraStatusDataReader( _loggerFactory, sqlDataReader );
                return simpleCameraStatusDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public CameraStatusObject? GetCameraStatusByCameraAndTimestamp( Guid camera, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public CameraStatusObject? GetCameraStatusByCameraAtTimestamp( Guid camera, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<CameraStatusObject> GetCameraStatusByCameraFromTimestamp( Guid camera, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<CameraStatusObject> GetCameraStatusByCameraUntilTimestamp( Guid camera, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<CameraStatusObject> GetCameraStatusByCameraOverTimestamp( Guid camera, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException( );
        }
        public SimpleCameraStatusDataReader GetCameraStatusCollectionByTrackDataReader( Guid track )
        {
            const string sql = SimpleCameraStatusDataReader.BaseQuery + " WHERE " +
                    SimpleCameraStatusDataReader.ViewAliasName + ".[Track] = @track " +
                    " ORDER BY " + SimpleCameraStatusDataReader.ViewAliasName + ".[Track]," +SimpleCameraStatusDataReader.ViewAliasName + ".[Timestamp]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var trackParameter = sqlCommandParameters.AddReference( "@track", track );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleCameraStatusDataReader = new SimpleCameraStatusDataReader( _loggerFactory, sqlDataReader );
                return simpleCameraStatusDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<CameraStatusObject> GetCameraStatusCollectionByTrack( Guid track )
        {
            throw new NotImplementedException( );
        }
        public SimpleCameraStatusDataReader GetCameraStatusByTrackAndTimestampDataReader( Guid track, DateTime timestamp )
        {
            const string sql = SimpleCameraStatusDataReader.BaseQuery + " WHERE " +
                    SimpleCameraStatusDataReader.ViewAliasName + ".[Track] = @track AND " +
                    SimpleCameraStatusDataReader.ViewAliasName + ".[Timestamp] = @timestamp " +
                    " ORDER BY " + SimpleCameraStatusDataReader.ViewAliasName + ".[Track]," +SimpleCameraStatusDataReader.ViewAliasName + ".[Timestamp]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var trackParameter = sqlCommandParameters.AddReference( "@track", track );
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@timestamp", timestamp );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleCameraStatusDataReader = new SimpleCameraStatusDataReader( _loggerFactory, sqlDataReader );
                return simpleCameraStatusDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public CameraStatusObject? GetCameraStatusByTrackAndTimestamp( Guid track, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public CameraStatusObject? GetCameraStatusByTrackAtTimestamp( Guid track, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<CameraStatusObject> GetCameraStatusByTrackFromTimestamp( Guid track, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<CameraStatusObject> GetCameraStatusByTrackUntilTimestamp( Guid track, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<CameraStatusObject> GetCameraStatusByTrackOverTimestamp( Guid track, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException( );
        }
        public SimpleCameraStatusDataReader GetCameraStatusCollectionByTimestampDataReader( DateTime timestamp )
        {
            const string sql = SimpleCameraStatusDataReader.BaseQuery + " WHERE " +
                    SimpleCameraStatusDataReader.ViewAliasName + ".[Timestamp] = @timestamp " +
                    " ORDER BY " + SimpleCameraStatusDataReader.ViewAliasName + ".[Timestamp]," +SimpleCameraStatusDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@timestamp", timestamp );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleCameraStatusDataReader = new SimpleCameraStatusDataReader( _loggerFactory, sqlDataReader );
                return simpleCameraStatusDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<CameraStatusObject> GetCameraStatusCollectionByTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<CameraStatusObject> GetCameraStatusCollectionAtTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<CameraStatusObject> GetCameraStatusCollectionFromTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<CameraStatusObject> GetCameraStatusCollectionUntilTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<CameraStatusObject> GetCameraStatusCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException( );
        }
        // ---------------------------------------------------------------------
        // CameraTiltCalibration queries
        // ---------------------------------------------------------------------
        public SimpleCameraTiltCalibrationDataReader GetCameraTiltCalibrationByIdDataReader( Guid id )
        {
            const string sql = SimpleCameraTiltCalibrationDataReader.BaseQuery + "WHERE " + SimpleCameraTiltCalibrationDataReader.ViewAliasName + ".[Id] = @id"; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                sqlCommandParameters.AddGuid( "@id", id );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleCameraTiltCalibrationDataReader = new SimpleCameraTiltCalibrationDataReader( _loggerFactory, sqlDataReader );
                return simpleCameraTiltCalibrationDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public CameraTiltCalibrationObject? GetCameraTiltCalibrationById( Guid id )
        {
            var simpleCameraTiltCalibrationDataReader = GetCameraTiltCalibrationByIdDataReader( id );
            using ( simpleCameraTiltCalibrationDataReader )
            {
                if ( simpleCameraTiltCalibrationDataReader.Read( ) )
                {
                    var result = simpleCameraTiltCalibrationDataReader.GetDataObject( );
                    return result;
                }
            }
            return null;
        }

        public void GetCameraTiltCalibrationById( Guid id, Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleCameraTiltCalibrationDataReader = GetCameraTiltCalibrationByIdDataReader( id );
                using ( simpleCameraTiltCalibrationDataReader )
                {
                    if ( simpleCameraTiltCalibrationDataReader.Read( ) )
                    {
                        destinationWriter.Write( true );
                        simpleCameraTiltCalibrationDataReader.WriteTo( destinationWriter );
                    }
                    else
                    {
                        destinationWriter.Write( false );
                    }
                }
            }
        }

        public SimpleCameraTiltCalibrationDataReader GetCameraTiltCalibrationCollectionDataReader( )
        {
            const string sql = SimpleCameraTiltCalibrationDataReader.BaseQuery; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleCameraTiltCalibrationDataReader = new SimpleCameraTiltCalibrationDataReader( _loggerFactory, sqlDataReader );
                return simpleCameraTiltCalibrationDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public IList<CameraTiltCalibrationObject> GetCameraTiltCalibrationCollection( )
        {
            var result = new List<CameraTiltCalibrationObject>( );
            var simpleCameraTiltCalibrationDataReader = GetCameraTiltCalibrationCollectionDataReader( );
            using ( simpleCameraTiltCalibrationDataReader )
            {
                while ( simpleCameraTiltCalibrationDataReader.Read( ) )
                {
                    var data = simpleCameraTiltCalibrationDataReader.GetDataObject( );
                    result.Add( data );
                }
            }
            return result;
        }

        public void GetCameraTiltCalibrationCollection( Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleCameraTiltCalibrationDataReader = GetCameraTiltCalibrationCollectionDataReader( );
                using ( simpleCameraTiltCalibrationDataReader )
                {
                    simpleCameraTiltCalibrationDataReader.WriteResultSetTo( destinationWriter );
                }
            }
        }

        public SimpleCameraTiltCalibrationDataReader GetCameraTiltCalibrationCollectionByCameraDataReader( Guid camera )
        {
            const string sql = SimpleCameraTiltCalibrationDataReader.BaseQuery + " WHERE " +
                    SimpleCameraTiltCalibrationDataReader.ViewAliasName + ".[Camera] = @camera " +
                    " ORDER BY " + SimpleCameraTiltCalibrationDataReader.ViewAliasName + ".[Camera]," +SimpleCameraTiltCalibrationDataReader.ViewAliasName + ".[Timestamp]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var cameraParameter = sqlCommandParameters.AddReference( "@camera", camera );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleCameraTiltCalibrationDataReader = new SimpleCameraTiltCalibrationDataReader( _loggerFactory, sqlDataReader );
                return simpleCameraTiltCalibrationDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<CameraTiltCalibrationObject> GetCameraTiltCalibrationCollectionByCamera( Guid camera )
        {
            throw new NotImplementedException( );
        }
        public SimpleCameraTiltCalibrationDataReader GetCameraTiltCalibrationByCameraAndTimestampDataReader( Guid camera, DateTime timestamp )
        {
            const string sql = SimpleCameraTiltCalibrationDataReader.BaseQuery + " WHERE " +
                    SimpleCameraTiltCalibrationDataReader.ViewAliasName + ".[Camera] = @camera AND " +
                    SimpleCameraTiltCalibrationDataReader.ViewAliasName + ".[Timestamp] = @timestamp " +
                    " ORDER BY " + SimpleCameraTiltCalibrationDataReader.ViewAliasName + ".[Camera]," +SimpleCameraTiltCalibrationDataReader.ViewAliasName + ".[Timestamp]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var cameraParameter = sqlCommandParameters.AddReference( "@camera", camera );
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@timestamp", timestamp );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleCameraTiltCalibrationDataReader = new SimpleCameraTiltCalibrationDataReader( _loggerFactory, sqlDataReader );
                return simpleCameraTiltCalibrationDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public CameraTiltCalibrationObject? GetCameraTiltCalibrationByCameraAndTimestamp( Guid camera, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public CameraTiltCalibrationObject? GetCameraTiltCalibrationByCameraAtTimestamp( Guid camera, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<CameraTiltCalibrationObject> GetCameraTiltCalibrationByCameraFromTimestamp( Guid camera, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<CameraTiltCalibrationObject> GetCameraTiltCalibrationByCameraUntilTimestamp( Guid camera, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<CameraTiltCalibrationObject> GetCameraTiltCalibrationByCameraOverTimestamp( Guid camera, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException( );
        }
        public SimpleCameraTiltCalibrationDataReader GetCameraTiltCalibrationCollectionByTimestampDataReader( DateTime timestamp )
        {
            const string sql = SimpleCameraTiltCalibrationDataReader.BaseQuery + " WHERE " +
                    SimpleCameraTiltCalibrationDataReader.ViewAliasName + ".[Timestamp] = @timestamp " +
                    " ORDER BY " + SimpleCameraTiltCalibrationDataReader.ViewAliasName + ".[Timestamp]," +SimpleCameraTiltCalibrationDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@timestamp", timestamp );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleCameraTiltCalibrationDataReader = new SimpleCameraTiltCalibrationDataReader( _loggerFactory, sqlDataReader );
                return simpleCameraTiltCalibrationDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<CameraTiltCalibrationObject> GetCameraTiltCalibrationCollectionByTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<CameraTiltCalibrationObject> GetCameraTiltCalibrationCollectionAtTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<CameraTiltCalibrationObject> GetCameraTiltCalibrationCollectionFromTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<CameraTiltCalibrationObject> GetCameraTiltCalibrationCollectionUntilTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<CameraTiltCalibrationObject> GetCameraTiltCalibrationCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException( );
        }
        // ---------------------------------------------------------------------
        // CameraTiltCalibrationValue queries
        // ---------------------------------------------------------------------
        public SimpleCameraTiltCalibrationValueDataReader GetCameraTiltCalibrationValueByIdDataReader( Guid id )
        {
            const string sql = SimpleCameraTiltCalibrationValueDataReader.BaseQuery + "WHERE " + SimpleCameraTiltCalibrationValueDataReader.ViewAliasName + ".[Id] = @id"; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                sqlCommandParameters.AddGuid( "@id", id );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleCameraTiltCalibrationValueDataReader = new SimpleCameraTiltCalibrationValueDataReader( _loggerFactory, sqlDataReader );
                return simpleCameraTiltCalibrationValueDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public CameraTiltCalibrationValueObject? GetCameraTiltCalibrationValueById( Guid id )
        {
            var simpleCameraTiltCalibrationValueDataReader = GetCameraTiltCalibrationValueByIdDataReader( id );
            using ( simpleCameraTiltCalibrationValueDataReader )
            {
                if ( simpleCameraTiltCalibrationValueDataReader.Read( ) )
                {
                    var result = simpleCameraTiltCalibrationValueDataReader.GetDataObject( );
                    return result;
                }
            }
            return null;
        }

        public void GetCameraTiltCalibrationValueById( Guid id, Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleCameraTiltCalibrationValueDataReader = GetCameraTiltCalibrationValueByIdDataReader( id );
                using ( simpleCameraTiltCalibrationValueDataReader )
                {
                    if ( simpleCameraTiltCalibrationValueDataReader.Read( ) )
                    {
                        destinationWriter.Write( true );
                        simpleCameraTiltCalibrationValueDataReader.WriteTo( destinationWriter );
                    }
                    else
                    {
                        destinationWriter.Write( false );
                    }
                }
            }
        }

        public SimpleCameraTiltCalibrationValueDataReader GetCameraTiltCalibrationValueCollectionDataReader( )
        {
            const string sql = SimpleCameraTiltCalibrationValueDataReader.BaseQuery; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleCameraTiltCalibrationValueDataReader = new SimpleCameraTiltCalibrationValueDataReader( _loggerFactory, sqlDataReader );
                return simpleCameraTiltCalibrationValueDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public IList<CameraTiltCalibrationValueObject> GetCameraTiltCalibrationValueCollection( )
        {
            var result = new List<CameraTiltCalibrationValueObject>( );
            var simpleCameraTiltCalibrationValueDataReader = GetCameraTiltCalibrationValueCollectionDataReader( );
            using ( simpleCameraTiltCalibrationValueDataReader )
            {
                while ( simpleCameraTiltCalibrationValueDataReader.Read( ) )
                {
                    var data = simpleCameraTiltCalibrationValueDataReader.GetDataObject( );
                    result.Add( data );
                }
            }
            return result;
        }

        public void GetCameraTiltCalibrationValueCollection( Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleCameraTiltCalibrationValueDataReader = GetCameraTiltCalibrationValueCollectionDataReader( );
                using ( simpleCameraTiltCalibrationValueDataReader )
                {
                    simpleCameraTiltCalibrationValueDataReader.WriteResultSetTo( destinationWriter );
                }
            }
        }

        public SimpleCameraTiltCalibrationValueDataReader GetCameraTiltCalibrationValueCollectionByTiltCalibrationDataReader( Guid tiltCalibration )
        {
            const string sql = SimpleCameraTiltCalibrationValueDataReader.BaseQuery + " WHERE " +
                    SimpleCameraTiltCalibrationValueDataReader.ViewAliasName + ".[TiltCalibration] = @tiltCalibration " +
                    " ORDER BY " + SimpleCameraTiltCalibrationValueDataReader.ViewAliasName + ".[TiltCalibration]," +SimpleCameraTiltCalibrationValueDataReader.ViewAliasName + ".[PanAngle]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var tiltCalibrationParameter = sqlCommandParameters.AddReference( "@tiltCalibration", tiltCalibration );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleCameraTiltCalibrationValueDataReader = new SimpleCameraTiltCalibrationValueDataReader( _loggerFactory, sqlDataReader );
                return simpleCameraTiltCalibrationValueDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<CameraTiltCalibrationValueObject> GetCameraTiltCalibrationValueCollectionByTiltCalibration( Guid tiltCalibration )
        {
            throw new NotImplementedException( );
        }
        public SimpleCameraTiltCalibrationValueDataReader GetCameraTiltCalibrationValueByTiltCalibrationAndPanAngleDataReader( Guid tiltCalibration, double panAngle )
        {
            const string sql = SimpleCameraTiltCalibrationValueDataReader.BaseQuery + " WHERE " +
                    SimpleCameraTiltCalibrationValueDataReader.ViewAliasName + ".[TiltCalibration] = @tiltCalibration AND " +
                    SimpleCameraTiltCalibrationValueDataReader.ViewAliasName + ".[PanAngle] = @panAngle " +
                    " ORDER BY " + SimpleCameraTiltCalibrationValueDataReader.ViewAliasName + ".[TiltCalibration]," +SimpleCameraTiltCalibrationValueDataReader.ViewAliasName + ".[PanAngle]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var tiltCalibrationParameter = sqlCommandParameters.AddReference( "@tiltCalibration", tiltCalibration );
                var panAngleParameter = sqlCommandParameters.AddDouble( "@panAngle", panAngle );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleCameraTiltCalibrationValueDataReader = new SimpleCameraTiltCalibrationValueDataReader( _loggerFactory, sqlDataReader );
                return simpleCameraTiltCalibrationValueDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public CameraTiltCalibrationValueObject? GetCameraTiltCalibrationValueByTiltCalibrationAndPanAngle( Guid tiltCalibration, double panAngle )
        {
            throw new NotImplementedException( );
        }
        public IList<CameraTiltCalibrationValueObject> GetCameraTiltCalibrationValueByTiltCalibrationFromPanAngle( Guid tiltCalibration, double panAngle )
        {
            throw new NotImplementedException( );
        }
        public IList<CameraTiltCalibrationValueObject> GetCameraTiltCalibrationValueByTiltCalibrationUntilPanAngle( Guid tiltCalibration, double panAngle )
        {
            throw new NotImplementedException( );
        }
        public IList<CameraTiltCalibrationValueObject> GetCameraTiltCalibrationValueByTiltCalibrationOverPanAngle( Guid tiltCalibration, double fromPanAngle, double untilPanAngle )
        {
            throw new NotImplementedException( );
        }
        // ---------------------------------------------------------------------
        // CameraZoomCalibration queries
        // ---------------------------------------------------------------------
        public SimpleCameraZoomCalibrationDataReader GetCameraZoomCalibrationByIdDataReader( Guid id )
        {
            const string sql = SimpleCameraZoomCalibrationDataReader.BaseQuery + "WHERE " + SimpleCameraZoomCalibrationDataReader.ViewAliasName + ".[Id] = @id"; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                sqlCommandParameters.AddGuid( "@id", id );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleCameraZoomCalibrationDataReader = new SimpleCameraZoomCalibrationDataReader( _loggerFactory, sqlDataReader );
                return simpleCameraZoomCalibrationDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public CameraZoomCalibrationObject? GetCameraZoomCalibrationById( Guid id )
        {
            var simpleCameraZoomCalibrationDataReader = GetCameraZoomCalibrationByIdDataReader( id );
            using ( simpleCameraZoomCalibrationDataReader )
            {
                if ( simpleCameraZoomCalibrationDataReader.Read( ) )
                {
                    var result = simpleCameraZoomCalibrationDataReader.GetDataObject( );
                    return result;
                }
            }
            return null;
        }

        public void GetCameraZoomCalibrationById( Guid id, Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleCameraZoomCalibrationDataReader = GetCameraZoomCalibrationByIdDataReader( id );
                using ( simpleCameraZoomCalibrationDataReader )
                {
                    if ( simpleCameraZoomCalibrationDataReader.Read( ) )
                    {
                        destinationWriter.Write( true );
                        simpleCameraZoomCalibrationDataReader.WriteTo( destinationWriter );
                    }
                    else
                    {
                        destinationWriter.Write( false );
                    }
                }
            }
        }

        public SimpleCameraZoomCalibrationDataReader GetCameraZoomCalibrationCollectionDataReader( )
        {
            const string sql = SimpleCameraZoomCalibrationDataReader.BaseQuery; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleCameraZoomCalibrationDataReader = new SimpleCameraZoomCalibrationDataReader( _loggerFactory, sqlDataReader );
                return simpleCameraZoomCalibrationDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public IList<CameraZoomCalibrationObject> GetCameraZoomCalibrationCollection( )
        {
            var result = new List<CameraZoomCalibrationObject>( );
            var simpleCameraZoomCalibrationDataReader = GetCameraZoomCalibrationCollectionDataReader( );
            using ( simpleCameraZoomCalibrationDataReader )
            {
                while ( simpleCameraZoomCalibrationDataReader.Read( ) )
                {
                    var data = simpleCameraZoomCalibrationDataReader.GetDataObject( );
                    result.Add( data );
                }
            }
            return result;
        }

        public void GetCameraZoomCalibrationCollection( Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleCameraZoomCalibrationDataReader = GetCameraZoomCalibrationCollectionDataReader( );
                using ( simpleCameraZoomCalibrationDataReader )
                {
                    simpleCameraZoomCalibrationDataReader.WriteResultSetTo( destinationWriter );
                }
            }
        }

        public SimpleCameraZoomCalibrationDataReader GetCameraZoomCalibrationCollectionByCameraDataReader( Guid camera )
        {
            const string sql = SimpleCameraZoomCalibrationDataReader.BaseQuery + " WHERE " +
                    SimpleCameraZoomCalibrationDataReader.ViewAliasName + ".[Camera] = @camera " +
                    " ORDER BY " + SimpleCameraZoomCalibrationDataReader.ViewAliasName + ".[Camera]," +SimpleCameraZoomCalibrationDataReader.ViewAliasName + ".[Timestamp]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var cameraParameter = sqlCommandParameters.AddReference( "@camera", camera );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleCameraZoomCalibrationDataReader = new SimpleCameraZoomCalibrationDataReader( _loggerFactory, sqlDataReader );
                return simpleCameraZoomCalibrationDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<CameraZoomCalibrationObject> GetCameraZoomCalibrationCollectionByCamera( Guid camera )
        {
            throw new NotImplementedException( );
        }
        public SimpleCameraZoomCalibrationDataReader GetCameraZoomCalibrationByCameraAndTimestampDataReader( Guid camera, DateTime timestamp )
        {
            const string sql = SimpleCameraZoomCalibrationDataReader.BaseQuery + " WHERE " +
                    SimpleCameraZoomCalibrationDataReader.ViewAliasName + ".[Camera] = @camera AND " +
                    SimpleCameraZoomCalibrationDataReader.ViewAliasName + ".[Timestamp] = @timestamp " +
                    " ORDER BY " + SimpleCameraZoomCalibrationDataReader.ViewAliasName + ".[Camera]," +SimpleCameraZoomCalibrationDataReader.ViewAliasName + ".[Timestamp]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var cameraParameter = sqlCommandParameters.AddReference( "@camera", camera );
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@timestamp", timestamp );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleCameraZoomCalibrationDataReader = new SimpleCameraZoomCalibrationDataReader( _loggerFactory, sqlDataReader );
                return simpleCameraZoomCalibrationDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public CameraZoomCalibrationObject? GetCameraZoomCalibrationByCameraAndTimestamp( Guid camera, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public CameraZoomCalibrationObject? GetCameraZoomCalibrationByCameraAtTimestamp( Guid camera, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<CameraZoomCalibrationObject> GetCameraZoomCalibrationByCameraFromTimestamp( Guid camera, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<CameraZoomCalibrationObject> GetCameraZoomCalibrationByCameraUntilTimestamp( Guid camera, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<CameraZoomCalibrationObject> GetCameraZoomCalibrationByCameraOverTimestamp( Guid camera, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException( );
        }
        public SimpleCameraZoomCalibrationDataReader GetCameraZoomCalibrationCollectionByTimestampDataReader( DateTime timestamp )
        {
            const string sql = SimpleCameraZoomCalibrationDataReader.BaseQuery + " WHERE " +
                    SimpleCameraZoomCalibrationDataReader.ViewAliasName + ".[Timestamp] = @timestamp " +
                    " ORDER BY " + SimpleCameraZoomCalibrationDataReader.ViewAliasName + ".[Timestamp]," +SimpleCameraZoomCalibrationDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@timestamp", timestamp );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleCameraZoomCalibrationDataReader = new SimpleCameraZoomCalibrationDataReader( _loggerFactory, sqlDataReader );
                return simpleCameraZoomCalibrationDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<CameraZoomCalibrationObject> GetCameraZoomCalibrationCollectionByTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<CameraZoomCalibrationObject> GetCameraZoomCalibrationCollectionAtTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<CameraZoomCalibrationObject> GetCameraZoomCalibrationCollectionFromTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<CameraZoomCalibrationObject> GetCameraZoomCalibrationCollectionUntilTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<CameraZoomCalibrationObject> GetCameraZoomCalibrationCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException( );
        }
        // ---------------------------------------------------------------------
        // CameraZoomCalibrationValue queries
        // ---------------------------------------------------------------------
        public SimpleCameraZoomCalibrationValueDataReader GetCameraZoomCalibrationValueByIdDataReader( Guid id )
        {
            const string sql = SimpleCameraZoomCalibrationValueDataReader.BaseQuery + "WHERE " + SimpleCameraZoomCalibrationValueDataReader.ViewAliasName + ".[Id] = @id"; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                sqlCommandParameters.AddGuid( "@id", id );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleCameraZoomCalibrationValueDataReader = new SimpleCameraZoomCalibrationValueDataReader( _loggerFactory, sqlDataReader );
                return simpleCameraZoomCalibrationValueDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public CameraZoomCalibrationValueObject? GetCameraZoomCalibrationValueById( Guid id )
        {
            var simpleCameraZoomCalibrationValueDataReader = GetCameraZoomCalibrationValueByIdDataReader( id );
            using ( simpleCameraZoomCalibrationValueDataReader )
            {
                if ( simpleCameraZoomCalibrationValueDataReader.Read( ) )
                {
                    var result = simpleCameraZoomCalibrationValueDataReader.GetDataObject( );
                    return result;
                }
            }
            return null;
        }

        public void GetCameraZoomCalibrationValueById( Guid id, Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleCameraZoomCalibrationValueDataReader = GetCameraZoomCalibrationValueByIdDataReader( id );
                using ( simpleCameraZoomCalibrationValueDataReader )
                {
                    if ( simpleCameraZoomCalibrationValueDataReader.Read( ) )
                    {
                        destinationWriter.Write( true );
                        simpleCameraZoomCalibrationValueDataReader.WriteTo( destinationWriter );
                    }
                    else
                    {
                        destinationWriter.Write( false );
                    }
                }
            }
        }

        public SimpleCameraZoomCalibrationValueDataReader GetCameraZoomCalibrationValueCollectionDataReader( )
        {
            const string sql = SimpleCameraZoomCalibrationValueDataReader.BaseQuery; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleCameraZoomCalibrationValueDataReader = new SimpleCameraZoomCalibrationValueDataReader( _loggerFactory, sqlDataReader );
                return simpleCameraZoomCalibrationValueDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public IList<CameraZoomCalibrationValueObject> GetCameraZoomCalibrationValueCollection( )
        {
            var result = new List<CameraZoomCalibrationValueObject>( );
            var simpleCameraZoomCalibrationValueDataReader = GetCameraZoomCalibrationValueCollectionDataReader( );
            using ( simpleCameraZoomCalibrationValueDataReader )
            {
                while ( simpleCameraZoomCalibrationValueDataReader.Read( ) )
                {
                    var data = simpleCameraZoomCalibrationValueDataReader.GetDataObject( );
                    result.Add( data );
                }
            }
            return result;
        }

        public void GetCameraZoomCalibrationValueCollection( Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleCameraZoomCalibrationValueDataReader = GetCameraZoomCalibrationValueCollectionDataReader( );
                using ( simpleCameraZoomCalibrationValueDataReader )
                {
                    simpleCameraZoomCalibrationValueDataReader.WriteResultSetTo( destinationWriter );
                }
            }
        }

        public SimpleCameraZoomCalibrationValueDataReader GetCameraZoomCalibrationValueCollectionByZoomCalibrationDataReader( Guid zoomCalibration )
        {
            const string sql = SimpleCameraZoomCalibrationValueDataReader.BaseQuery + " WHERE " +
                    SimpleCameraZoomCalibrationValueDataReader.ViewAliasName + ".[ZoomCalibration] = @zoomCalibration " +
                    " ORDER BY " + SimpleCameraZoomCalibrationValueDataReader.ViewAliasName + ".[ZoomCalibration]," +SimpleCameraZoomCalibrationValueDataReader.ViewAliasName + ".[FocalLength]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var zoomCalibrationParameter = sqlCommandParameters.AddReference( "@zoomCalibration", zoomCalibration );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleCameraZoomCalibrationValueDataReader = new SimpleCameraZoomCalibrationValueDataReader( _loggerFactory, sqlDataReader );
                return simpleCameraZoomCalibrationValueDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<CameraZoomCalibrationValueObject> GetCameraZoomCalibrationValueCollectionByZoomCalibration( Guid zoomCalibration )
        {
            throw new NotImplementedException( );
        }
        public SimpleCameraZoomCalibrationValueDataReader GetCameraZoomCalibrationValueByZoomCalibrationAndFocalLengthDataReader( Guid zoomCalibration, double focalLength )
        {
            const string sql = SimpleCameraZoomCalibrationValueDataReader.BaseQuery + " WHERE " +
                    SimpleCameraZoomCalibrationValueDataReader.ViewAliasName + ".[ZoomCalibration] = @zoomCalibration AND " +
                    SimpleCameraZoomCalibrationValueDataReader.ViewAliasName + ".[FocalLength] = @focalLength " +
                    " ORDER BY " + SimpleCameraZoomCalibrationValueDataReader.ViewAliasName + ".[ZoomCalibration]," +SimpleCameraZoomCalibrationValueDataReader.ViewAliasName + ".[FocalLength]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var zoomCalibrationParameter = sqlCommandParameters.AddReference( "@zoomCalibration", zoomCalibration );
                var focalLengthParameter = sqlCommandParameters.AddDouble( "@focalLength", focalLength );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleCameraZoomCalibrationValueDataReader = new SimpleCameraZoomCalibrationValueDataReader( _loggerFactory, sqlDataReader );
                return simpleCameraZoomCalibrationValueDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public CameraZoomCalibrationValueObject? GetCameraZoomCalibrationValueByZoomCalibrationAndFocalLength( Guid zoomCalibration, double focalLength )
        {
            throw new NotImplementedException( );
        }
        public IList<CameraZoomCalibrationValueObject> GetCameraZoomCalibrationValueByZoomCalibrationFromFocalLength( Guid zoomCalibration, double focalLength )
        {
            throw new NotImplementedException( );
        }
        public IList<CameraZoomCalibrationValueObject> GetCameraZoomCalibrationValueByZoomCalibrationUntilFocalLength( Guid zoomCalibration, double focalLength )
        {
            throw new NotImplementedException( );
        }
        public IList<CameraZoomCalibrationValueObject> GetCameraZoomCalibrationValueByZoomCalibrationOverFocalLength( Guid zoomCalibration, double fromFocalLength, double untilFocalLength )
        {
            throw new NotImplementedException( );
        }
        // ---------------------------------------------------------------------
        // CatalogElement queries
        // ---------------------------------------------------------------------
        public ComplexCatalogElementDataReader GetCatalogElementByIdDataReader( Guid id )
        {
            const string sql = ComplexCatalogElementDataReader.BaseQuery + "WHERE " + ComplexCatalogElementDataReader.ViewAliasName + ".[Id] = @id"; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                sqlCommandParameters.AddGuid( "@id", id );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var complexCatalogElementDataReader = new ComplexCatalogElementDataReader( _loggerFactory, sqlDataReader );
                return complexCatalogElementDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public CatalogElementObject? GetCatalogElementById( Guid id )
        {
            var complexCatalogElementDataReader = GetCatalogElementByIdDataReader( id );
            using ( complexCatalogElementDataReader )
            {
                if ( complexCatalogElementDataReader.Read( ) )
                {
                    var result = complexCatalogElementDataReader.GetDataObject( );
                    return result;
                }
            }
            return null;
        }

        public void GetCatalogElementById( Guid id, Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var complexCatalogElementDataReader = GetCatalogElementByIdDataReader( id );
                using ( complexCatalogElementDataReader )
                {
                    if ( complexCatalogElementDataReader.Read( ) )
                    {
                        destinationWriter.Write( true );
                        complexCatalogElementDataReader.WriteTo( destinationWriter );
                    }
                    else
                    {
                        destinationWriter.Write( false );
                    }
                }
            }
        }

        public ComplexCatalogElementDataReader GetCatalogElementCollectionDataReader( )
        {
            const string sql = ComplexCatalogElementDataReader.BaseQuery; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var complexCatalogElementDataReader = new ComplexCatalogElementDataReader( _loggerFactory, sqlDataReader );
                return complexCatalogElementDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public IList<CatalogElementObject> GetCatalogElementCollection( )
        {
            var result = new List<CatalogElementObject>( );
            var complexCatalogElementDataReader = GetCatalogElementCollectionDataReader( );
            using ( complexCatalogElementDataReader )
            {
                while ( complexCatalogElementDataReader.Read( ) )
                {
                    var data = complexCatalogElementDataReader.GetDataObject( );
                    result.Add( data );
                }
            }
            return result;
        }

        public void GetCatalogElementCollection( Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var complexCatalogElementDataReader = GetCatalogElementCollectionDataReader( );
                using ( complexCatalogElementDataReader )
                {
                    complexCatalogElementDataReader.WriteResultSetTo( destinationWriter );
                }
            }
        }

        public ComplexCatalogElementDataReader GetCatalogElementCollectionByCatalogDataReader( Guid catalog )
        {
            const string sql = ComplexCatalogElementDataReader.BaseQuery + " WHERE " +
                    ComplexCatalogElementDataReader.ViewAliasName + ".[Catalog] = @catalog " +
                    " ORDER BY " + ComplexCatalogElementDataReader.ViewAliasName + ".[Catalog]," +ComplexCatalogElementDataReader.ViewAliasName + ".[Name]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var catalogParameter = sqlCommandParameters.AddReference( "@catalog", catalog );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var complexCatalogElementDataReader = new ComplexCatalogElementDataReader( _loggerFactory, sqlDataReader );
                return complexCatalogElementDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<CatalogElementObject> GetCatalogElementCollectionByCatalog( Guid catalog )
        {
            throw new NotImplementedException( );
        }
        public ComplexCatalogElementDataReader GetCatalogElementByCatalogAndNameDataReader( Guid catalog, string name )
        {
            const string sql = ComplexCatalogElementDataReader.BaseQuery + " WHERE " +
                    ComplexCatalogElementDataReader.ViewAliasName + ".[Catalog] = @catalog AND " +
                    ComplexCatalogElementDataReader.ViewAliasName + ".[Name] = @name " +
                    " ORDER BY " + ComplexCatalogElementDataReader.ViewAliasName + ".[Catalog]," +ComplexCatalogElementDataReader.ViewAliasName + ".[Name]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var catalogParameter = sqlCommandParameters.AddReference( "@catalog", catalog );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@name", name, 127 );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var complexCatalogElementDataReader = new ComplexCatalogElementDataReader( _loggerFactory, sqlDataReader );
                return complexCatalogElementDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public CatalogElementObject? GetCatalogElementByCatalogAndName( Guid catalog, string name )
        {
            throw new NotImplementedException( );
        }
        // ---------------------------------------------------------------------
        // Catalog queries
        // ---------------------------------------------------------------------
        public SimpleCatalogDataReader GetCatalogByIdDataReader( Guid id )
        {
            const string sql = SimpleCatalogDataReader.BaseQuery + "WHERE " + SimpleCatalogDataReader.ViewAliasName + ".[Id] = @id"; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                sqlCommandParameters.AddGuid( "@id", id );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleCatalogDataReader = new SimpleCatalogDataReader( _loggerFactory, sqlDataReader );
                return simpleCatalogDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public CatalogObject? GetCatalogById( Guid id )
        {
            var simpleCatalogDataReader = GetCatalogByIdDataReader( id );
            using ( simpleCatalogDataReader )
            {
                if ( simpleCatalogDataReader.Read( ) )
                {
                    var result = simpleCatalogDataReader.GetDataObject( );
                    return result;
                }
            }
            return null;
        }

        public void GetCatalogById( Guid id, Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleCatalogDataReader = GetCatalogByIdDataReader( id );
                using ( simpleCatalogDataReader )
                {
                    if ( simpleCatalogDataReader.Read( ) )
                    {
                        destinationWriter.Write( true );
                        simpleCatalogDataReader.WriteTo( destinationWriter );
                    }
                    else
                    {
                        destinationWriter.Write( false );
                    }
                }
            }
        }

        public SimpleCatalogDataReader GetCatalogCollectionDataReader( )
        {
            const string sql = SimpleCatalogDataReader.BaseQuery; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleCatalogDataReader = new SimpleCatalogDataReader( _loggerFactory, sqlDataReader );
                return simpleCatalogDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public IList<CatalogObject> GetCatalogCollection( )
        {
            var result = new List<CatalogObject>( );
            var simpleCatalogDataReader = GetCatalogCollectionDataReader( );
            using ( simpleCatalogDataReader )
            {
                while ( simpleCatalogDataReader.Read( ) )
                {
                    var data = simpleCatalogDataReader.GetDataObject( );
                    result.Add( data );
                }
            }
            return result;
        }

        public void GetCatalogCollection( Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleCatalogDataReader = GetCatalogCollectionDataReader( );
                using ( simpleCatalogDataReader )
                {
                    simpleCatalogDataReader.WriteResultSetTo( destinationWriter );
                }
            }
        }

        public SimpleCatalogDataReader GetCatalogCollectionByCatalogDataReader( Guid catalog )
        {
            const string sql = SimpleCatalogDataReader.BaseQuery + " WHERE " +
                    SimpleCatalogDataReader.ViewAliasName + ".[Catalog] = @catalog " +
                    " ORDER BY " + SimpleCatalogDataReader.ViewAliasName + ".[Catalog]," +SimpleCatalogDataReader.ViewAliasName + ".[Name]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var catalogParameter = sqlCommandParameters.AddReference( "@catalog", catalog );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleCatalogDataReader = new SimpleCatalogDataReader( _loggerFactory, sqlDataReader );
                return simpleCatalogDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<CatalogObject> GetCatalogCollectionByCatalog( Guid catalog )
        {
            throw new NotImplementedException( );
        }
        public SimpleCatalogDataReader GetCatalogByCatalogAndNameDataReader( Guid catalog, string name )
        {
            const string sql = SimpleCatalogDataReader.BaseQuery + " WHERE " +
                    SimpleCatalogDataReader.ViewAliasName + ".[Catalog] = @catalog AND " +
                    SimpleCatalogDataReader.ViewAliasName + ".[Name] = @name " +
                    " ORDER BY " + SimpleCatalogDataReader.ViewAliasName + ".[Catalog]," +SimpleCatalogDataReader.ViewAliasName + ".[Name]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var catalogParameter = sqlCommandParameters.AddReference( "@catalog", catalog );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@name", name, 127 );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleCatalogDataReader = new SimpleCatalogDataReader( _loggerFactory, sqlDataReader );
                return simpleCatalogDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public CatalogObject? GetCatalogByCatalogAndName( Guid catalog, string name )
        {
            throw new NotImplementedException( );
        }
        // ---------------------------------------------------------------------
        // Element queries
        // ---------------------------------------------------------------------
        public SimpleElementDataReader GetElementByIdDataReader( Guid id )
        {
            const string sql = SimpleElementDataReader.BaseQuery + "WHERE " + SimpleElementDataReader.ViewAliasName + ".[Id] = @id"; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                sqlCommandParameters.AddGuid( "@id", id );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleElementDataReader = new SimpleElementDataReader( _loggerFactory, sqlDataReader );
                return simpleElementDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public ElementObject? GetElementById( Guid id )
        {
            var simpleElementDataReader = GetElementByIdDataReader( id );
            using ( simpleElementDataReader )
            {
                if ( simpleElementDataReader.Read( ) )
                {
                    var result = simpleElementDataReader.GetDataObject( );
                    return result;
                }
            }
            return null;
        }

        public void GetElementById( Guid id, Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleElementDataReader = GetElementByIdDataReader( id );
                using ( simpleElementDataReader )
                {
                    if ( simpleElementDataReader.Read( ) )
                    {
                        destinationWriter.Write( true );
                        simpleElementDataReader.WriteTo( destinationWriter );
                    }
                    else
                    {
                        destinationWriter.Write( false );
                    }
                }
            }
        }

        public SimpleElementDataReader GetElementCollectionDataReader( )
        {
            const string sql = SimpleElementDataReader.BaseQuery; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleElementDataReader = new SimpleElementDataReader( _loggerFactory, sqlDataReader );
                return simpleElementDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public IList<ElementObject> GetElementCollection( )
        {
            var result = new List<ElementObject>( );
            var simpleElementDataReader = GetElementCollectionDataReader( );
            using ( simpleElementDataReader )
            {
                while ( simpleElementDataReader.Read( ) )
                {
                    var data = simpleElementDataReader.GetDataObject( );
                    result.Add( data );
                }
            }
            return result;
        }

        public void GetElementCollection( Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleElementDataReader = GetElementCollectionDataReader( );
                using ( simpleElementDataReader )
                {
                    simpleElementDataReader.WriteResultSetTo( destinationWriter );
                }
            }
        }

        public SimpleElementDataReader GetElementCollectionByCatalogDataReader( Guid catalog )
        {
            const string sql = SimpleElementDataReader.BaseQuery + " WHERE " +
                    SimpleElementDataReader.ViewAliasName + ".[Catalog] = @catalog " +
                    " ORDER BY " + SimpleElementDataReader.ViewAliasName + ".[Catalog]," +SimpleElementDataReader.ViewAliasName + ".[Name]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var catalogParameter = sqlCommandParameters.AddReference( "@catalog", catalog );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleElementDataReader = new SimpleElementDataReader( _loggerFactory, sqlDataReader );
                return simpleElementDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<ElementObject> GetElementCollectionByCatalog( Guid catalog )
        {
            throw new NotImplementedException( );
        }
        public SimpleElementDataReader GetElementByCatalogAndNameDataReader( Guid catalog, string name )
        {
            const string sql = SimpleElementDataReader.BaseQuery + " WHERE " +
                    SimpleElementDataReader.ViewAliasName + ".[Catalog] = @catalog AND " +
                    SimpleElementDataReader.ViewAliasName + ".[Name] = @name " +
                    " ORDER BY " + SimpleElementDataReader.ViewAliasName + ".[Catalog]," +SimpleElementDataReader.ViewAliasName + ".[Name]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var catalogParameter = sqlCommandParameters.AddReference( "@catalog", catalog );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@name", name, 127 );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleElementDataReader = new SimpleElementDataReader( _loggerFactory, sqlDataReader );
                return simpleElementDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public ElementObject? GetElementByCatalogAndName( Guid catalog, string name )
        {
            throw new NotImplementedException( );
        }
        public SimpleElementDataReader GetElementCollectionByElementTypeDataReader( Guid elementType )
        {
            const string sql = SimpleElementDataReader.BaseQuery + " WHERE " +
                    SimpleElementDataReader.ViewAliasName + ".[ElementType] = @elementType " +
                    " ORDER BY " + SimpleElementDataReader.ViewAliasName + ".[ElementType]," +SimpleElementDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var elementTypeParameter = sqlCommandParameters.AddReference( "@elementType", elementType );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleElementDataReader = new SimpleElementDataReader( _loggerFactory, sqlDataReader );
                return simpleElementDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<ElementObject> GetElementCollectionByElementType( Guid elementType )
        {
            throw new NotImplementedException( );
        }
        // ---------------------------------------------------------------------
        // CollectionInfo queries
        // ---------------------------------------------------------------------
        public SimpleCollectionInfoDataReader GetCollectionInfoByIdDataReader( Guid id )
        {
            const string sql = SimpleCollectionInfoDataReader.BaseQuery + "WHERE " + SimpleCollectionInfoDataReader.ViewAliasName + ".[Id] = @id"; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                sqlCommandParameters.AddGuid( "@id", id );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleCollectionInfoDataReader = new SimpleCollectionInfoDataReader( _loggerFactory, sqlDataReader );
                return simpleCollectionInfoDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public CollectionInfoObject? GetCollectionInfoById( Guid id )
        {
            var simpleCollectionInfoDataReader = GetCollectionInfoByIdDataReader( id );
            using ( simpleCollectionInfoDataReader )
            {
                if ( simpleCollectionInfoDataReader.Read( ) )
                {
                    var result = simpleCollectionInfoDataReader.GetDataObject( );
                    return result;
                }
            }
            return null;
        }

        public void GetCollectionInfoById( Guid id, Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleCollectionInfoDataReader = GetCollectionInfoByIdDataReader( id );
                using ( simpleCollectionInfoDataReader )
                {
                    if ( simpleCollectionInfoDataReader.Read( ) )
                    {
                        destinationWriter.Write( true );
                        simpleCollectionInfoDataReader.WriteTo( destinationWriter );
                    }
                    else
                    {
                        destinationWriter.Write( false );
                    }
                }
            }
        }

        public SimpleCollectionInfoDataReader GetCollectionInfoCollectionDataReader( )
        {
            const string sql = SimpleCollectionInfoDataReader.BaseQuery; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleCollectionInfoDataReader = new SimpleCollectionInfoDataReader( _loggerFactory, sqlDataReader );
                return simpleCollectionInfoDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public IList<CollectionInfoObject> GetCollectionInfoCollection( )
        {
            var result = new List<CollectionInfoObject>( );
            var simpleCollectionInfoDataReader = GetCollectionInfoCollectionDataReader( );
            using ( simpleCollectionInfoDataReader )
            {
                while ( simpleCollectionInfoDataReader.Read( ) )
                {
                    var data = simpleCollectionInfoDataReader.GetDataObject( );
                    result.Add( data );
                }
            }
            return result;
        }

        public void GetCollectionInfoCollection( Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleCollectionInfoDataReader = GetCollectionInfoCollectionDataReader( );
                using ( simpleCollectionInfoDataReader )
                {
                    simpleCollectionInfoDataReader.WriteResultSetTo( destinationWriter );
                }
            }
        }

        // ---------------------------------------------------------------------
        // Country queries
        // ---------------------------------------------------------------------
        public SimpleCountryDataReader GetCountryByIdDataReader( Guid id )
        {
            const string sql = SimpleCountryDataReader.BaseQuery + "WHERE " + SimpleCountryDataReader.ViewAliasName + ".[Id] = @id"; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                sqlCommandParameters.AddGuid( "@id", id );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleCountryDataReader = new SimpleCountryDataReader( _loggerFactory, sqlDataReader );
                return simpleCountryDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public CountryObject? GetCountryById( Guid id )
        {
            var simpleCountryDataReader = GetCountryByIdDataReader( id );
            using ( simpleCountryDataReader )
            {
                if ( simpleCountryDataReader.Read( ) )
                {
                    var result = simpleCountryDataReader.GetDataObject( );
                    return result;
                }
            }
            return null;
        }

        public void GetCountryById( Guid id, Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleCountryDataReader = GetCountryByIdDataReader( id );
                using ( simpleCountryDataReader )
                {
                    if ( simpleCountryDataReader.Read( ) )
                    {
                        destinationWriter.Write( true );
                        simpleCountryDataReader.WriteTo( destinationWriter );
                    }
                    else
                    {
                        destinationWriter.Write( false );
                    }
                }
            }
        }

        public SimpleCountryDataReader GetCountryCollectionDataReader( )
        {
            const string sql = SimpleCountryDataReader.BaseQuery; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleCountryDataReader = new SimpleCountryDataReader( _loggerFactory, sqlDataReader );
                return simpleCountryDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public IList<CountryObject> GetCountryCollection( )
        {
            var result = new List<CountryObject>( );
            var simpleCountryDataReader = GetCountryCollectionDataReader( );
            using ( simpleCountryDataReader )
            {
                while ( simpleCountryDataReader.Read( ) )
                {
                    var data = simpleCountryDataReader.GetDataObject( );
                    result.Add( data );
                }
            }
            return result;
        }

        public void GetCountryCollection( Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleCountryDataReader = GetCountryCollectionDataReader( );
                using ( simpleCountryDataReader )
                {
                    simpleCountryDataReader.WriteResultSetTo( destinationWriter );
                }
            }
        }

        public SimpleCountryDataReader GetCountryByNameDataReader( string name )
        {
            const string sql = SimpleCountryDataReader.BaseQuery + " WHERE " +
                    SimpleCountryDataReader.ViewAliasName + ".[Name] = @name " +
                    " ORDER BY " + SimpleCountryDataReader.ViewAliasName + ".[Name]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var nameParameter = sqlCommandParameters.AddNVarChar( "@name", name, 127 );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleCountryDataReader = new SimpleCountryDataReader( _loggerFactory, sqlDataReader );
                return simpleCountryDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public CountryObject? GetCountryByName( string name )
        {
            throw new NotImplementedException( );
        }
        public SimpleCountryDataReader GetCountryByCodeDataReader( int code )
        {
            const string sql = SimpleCountryDataReader.BaseQuery + " WHERE " +
                    SimpleCountryDataReader.ViewAliasName + ".[Code] = @code " +
                    " ORDER BY " + SimpleCountryDataReader.ViewAliasName + ".[Code]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var codeParameter = sqlCommandParameters.AddInt32( "@code", code );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleCountryDataReader = new SimpleCountryDataReader( _loggerFactory, sqlDataReader );
                return simpleCountryDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public CountryObject? GetCountryByCode( int code )
        {
            throw new NotImplementedException( );
        }
        public IList<CountryObject> GetCountryFromCode( int code )
        {
            throw new NotImplementedException( );
        }
        public IList<CountryObject> GetCountryUntilCode( int code )
        {
            throw new NotImplementedException( );
        }
        public IList<CountryObject> GetCountryOverCode( int fromCode, int untilCode )
        {
            throw new NotImplementedException( );
        }
        public SimpleCountryDataReader GetCountryByAlpha2DataReader( string alpha2 )
        {
            const string sql = SimpleCountryDataReader.BaseQuery + " WHERE " +
                    SimpleCountryDataReader.ViewAliasName + ".[Alpha2] = @alpha2 " +
                    " ORDER BY " + SimpleCountryDataReader.ViewAliasName + ".[Alpha2]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var alpha2Parameter = sqlCommandParameters.AddNVarChar( "@alpha2", alpha2, 2 );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleCountryDataReader = new SimpleCountryDataReader( _loggerFactory, sqlDataReader );
                return simpleCountryDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public CountryObject? GetCountryByAlpha2( string alpha2 )
        {
            throw new NotImplementedException( );
        }
        public SimpleCountryDataReader GetCountryByAlpha3DataReader( string alpha3 )
        {
            const string sql = SimpleCountryDataReader.BaseQuery + " WHERE " +
                    SimpleCountryDataReader.ViewAliasName + ".[Alpha3] = @alpha3 " +
                    " ORDER BY " + SimpleCountryDataReader.ViewAliasName + ".[Alpha3]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var alpha3Parameter = sqlCommandParameters.AddNVarChar( "@alpha3", alpha3, 3 );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleCountryDataReader = new SimpleCountryDataReader( _loggerFactory, sqlDataReader );
                return simpleCountryDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public CountryObject? GetCountryByAlpha3( string alpha3 )
        {
            throw new NotImplementedException( );
        }
        // ---------------------------------------------------------------------
        // CursorInfo queries
        // ---------------------------------------------------------------------
        public SimpleCursorInfoDataReader GetCursorInfoByIdDataReader( Guid id )
        {
            const string sql = SimpleCursorInfoDataReader.BaseQuery + "WHERE " + SimpleCursorInfoDataReader.ViewAliasName + ".[Id] = @id"; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                sqlCommandParameters.AddGuid( "@id", id );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleCursorInfoDataReader = new SimpleCursorInfoDataReader( _loggerFactory, sqlDataReader );
                return simpleCursorInfoDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public CursorInfoObject? GetCursorInfoById( Guid id )
        {
            var simpleCursorInfoDataReader = GetCursorInfoByIdDataReader( id );
            using ( simpleCursorInfoDataReader )
            {
                if ( simpleCursorInfoDataReader.Read( ) )
                {
                    var result = simpleCursorInfoDataReader.GetDataObject( );
                    return result;
                }
            }
            return null;
        }

        public void GetCursorInfoById( Guid id, Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleCursorInfoDataReader = GetCursorInfoByIdDataReader( id );
                using ( simpleCursorInfoDataReader )
                {
                    if ( simpleCursorInfoDataReader.Read( ) )
                    {
                        destinationWriter.Write( true );
                        simpleCursorInfoDataReader.WriteTo( destinationWriter );
                    }
                    else
                    {
                        destinationWriter.Write( false );
                    }
                }
            }
        }

        public SimpleCursorInfoDataReader GetCursorInfoCollectionDataReader( )
        {
            const string sql = SimpleCursorInfoDataReader.BaseQuery; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleCursorInfoDataReader = new SimpleCursorInfoDataReader( _loggerFactory, sqlDataReader );
                return simpleCursorInfoDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public IList<CursorInfoObject> GetCursorInfoCollection( )
        {
            var result = new List<CursorInfoObject>( );
            var simpleCursorInfoDataReader = GetCursorInfoCollectionDataReader( );
            using ( simpleCursorInfoDataReader )
            {
                while ( simpleCursorInfoDataReader.Read( ) )
                {
                    var data = simpleCursorInfoDataReader.GetDataObject( );
                    result.Add( data );
                }
            }
            return result;
        }

        public void GetCursorInfoCollection( Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleCursorInfoDataReader = GetCursorInfoCollectionDataReader( );
                using ( simpleCursorInfoDataReader )
                {
                    simpleCursorInfoDataReader.WriteResultSetTo( destinationWriter );
                }
            }
        }

        // ---------------------------------------------------------------------
        // DateTimeTimeseriesValue queries
        // ---------------------------------------------------------------------
        public SimpleDateTimeTimeseriesValueDataReader GetDateTimeTimeseriesValueByIdDataReader( Guid id )
        {
            const string sql = SimpleDateTimeTimeseriesValueDataReader.BaseQuery + "WHERE " + SimpleDateTimeTimeseriesValueDataReader.ViewAliasName + ".[Id] = @id"; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                sqlCommandParameters.AddGuid( "@id", id );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleDateTimeTimeseriesValueDataReader = new SimpleDateTimeTimeseriesValueDataReader( _loggerFactory, sqlDataReader );
                return simpleDateTimeTimeseriesValueDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public DateTimeTimeseriesValueObject? GetDateTimeTimeseriesValueById( Guid id )
        {
            var simpleDateTimeTimeseriesValueDataReader = GetDateTimeTimeseriesValueByIdDataReader( id );
            using ( simpleDateTimeTimeseriesValueDataReader )
            {
                if ( simpleDateTimeTimeseriesValueDataReader.Read( ) )
                {
                    var result = simpleDateTimeTimeseriesValueDataReader.GetDataObject( );
                    return result;
                }
            }
            return null;
        }

        public void GetDateTimeTimeseriesValueById( Guid id, Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleDateTimeTimeseriesValueDataReader = GetDateTimeTimeseriesValueByIdDataReader( id );
                using ( simpleDateTimeTimeseriesValueDataReader )
                {
                    if ( simpleDateTimeTimeseriesValueDataReader.Read( ) )
                    {
                        destinationWriter.Write( true );
                        simpleDateTimeTimeseriesValueDataReader.WriteTo( destinationWriter );
                    }
                    else
                    {
                        destinationWriter.Write( false );
                    }
                }
            }
        }

        public SimpleDateTimeTimeseriesValueDataReader GetDateTimeTimeseriesValueCollectionDataReader( )
        {
            const string sql = SimpleDateTimeTimeseriesValueDataReader.BaseQuery; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleDateTimeTimeseriesValueDataReader = new SimpleDateTimeTimeseriesValueDataReader( _loggerFactory, sqlDataReader );
                return simpleDateTimeTimeseriesValueDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public IList<DateTimeTimeseriesValueObject> GetDateTimeTimeseriesValueCollection( )
        {
            var result = new List<DateTimeTimeseriesValueObject>( );
            var simpleDateTimeTimeseriesValueDataReader = GetDateTimeTimeseriesValueCollectionDataReader( );
            using ( simpleDateTimeTimeseriesValueDataReader )
            {
                while ( simpleDateTimeTimeseriesValueDataReader.Read( ) )
                {
                    var data = simpleDateTimeTimeseriesValueDataReader.GetDataObject( );
                    result.Add( data );
                }
            }
            return result;
        }

        public void GetDateTimeTimeseriesValueCollection( Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleDateTimeTimeseriesValueDataReader = GetDateTimeTimeseriesValueCollectionDataReader( );
                using ( simpleDateTimeTimeseriesValueDataReader )
                {
                    simpleDateTimeTimeseriesValueDataReader.WriteResultSetTo( destinationWriter );
                }
            }
        }

        public SimpleDateTimeTimeseriesValueDataReader GetDateTimeTimeseriesValueCollectionByTimeseriesDataReader( Guid timeseries )
        {
            const string sql = SimpleDateTimeTimeseriesValueDataReader.BaseQuery + " WHERE " +
                    SimpleDateTimeTimeseriesValueDataReader.ViewAliasName + ".[Timeseries] = @timeseries " +
                    " ORDER BY " + SimpleDateTimeTimeseriesValueDataReader.ViewAliasName + ".[Timeseries]," +SimpleDateTimeTimeseriesValueDataReader.ViewAliasName + ".[Timestamp]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var timeseriesParameter = sqlCommandParameters.AddReference( "@timeseries", timeseries );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleDateTimeTimeseriesValueDataReader = new SimpleDateTimeTimeseriesValueDataReader( _loggerFactory, sqlDataReader );
                return simpleDateTimeTimeseriesValueDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<DateTimeTimeseriesValueObject> GetDateTimeTimeseriesValueCollectionByTimeseries( Guid timeseries )
        {
            throw new NotImplementedException( );
        }
        public SimpleDateTimeTimeseriesValueDataReader GetDateTimeTimeseriesValueByTimeseriesAndTimestampDataReader( Guid timeseries, DateTime timestamp )
        {
            const string sql = SimpleDateTimeTimeseriesValueDataReader.BaseQuery + " WHERE " +
                    SimpleDateTimeTimeseriesValueDataReader.ViewAliasName + ".[Timeseries] = @timeseries AND " +
                    SimpleDateTimeTimeseriesValueDataReader.ViewAliasName + ".[Timestamp] = @timestamp " +
                    " ORDER BY " + SimpleDateTimeTimeseriesValueDataReader.ViewAliasName + ".[Timeseries]," +SimpleDateTimeTimeseriesValueDataReader.ViewAliasName + ".[Timestamp]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var timeseriesParameter = sqlCommandParameters.AddReference( "@timeseries", timeseries );
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@timestamp", timestamp );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleDateTimeTimeseriesValueDataReader = new SimpleDateTimeTimeseriesValueDataReader( _loggerFactory, sqlDataReader );
                return simpleDateTimeTimeseriesValueDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public DateTimeTimeseriesValueObject? GetDateTimeTimeseriesValueByTimeseriesAndTimestamp( Guid timeseries, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public DateTimeTimeseriesValueObject? GetDateTimeTimeseriesValueByTimeseriesAtTimestamp( Guid timeseries, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<DateTimeTimeseriesValueObject> GetDateTimeTimeseriesValueByTimeseriesFromTimestamp( Guid timeseries, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<DateTimeTimeseriesValueObject> GetDateTimeTimeseriesValueByTimeseriesUntilTimestamp( Guid timeseries, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<DateTimeTimeseriesValueObject> GetDateTimeTimeseriesValueByTimeseriesOverTimestamp( Guid timeseries, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException( );
        }
        public SimpleDateTimeTimeseriesValueDataReader GetDateTimeTimeseriesValueCollectionByTimestampDataReader( DateTime timestamp )
        {
            const string sql = SimpleDateTimeTimeseriesValueDataReader.BaseQuery + " WHERE " +
                    SimpleDateTimeTimeseriesValueDataReader.ViewAliasName + ".[Timestamp] = @timestamp " +
                    " ORDER BY " + SimpleDateTimeTimeseriesValueDataReader.ViewAliasName + ".[Timestamp]," +SimpleDateTimeTimeseriesValueDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@timestamp", timestamp );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleDateTimeTimeseriesValueDataReader = new SimpleDateTimeTimeseriesValueDataReader( _loggerFactory, sqlDataReader );
                return simpleDateTimeTimeseriesValueDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<DateTimeTimeseriesValueObject> GetDateTimeTimeseriesValueCollectionByTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<DateTimeTimeseriesValueObject> GetDateTimeTimeseriesValueCollectionAtTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<DateTimeTimeseriesValueObject> GetDateTimeTimeseriesValueCollectionFromTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<DateTimeTimeseriesValueObject> GetDateTimeTimeseriesValueCollectionUntilTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<DateTimeTimeseriesValueObject> GetDateTimeTimeseriesValueCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException( );
        }
        // ---------------------------------------------------------------------
        // DeviceHost queries
        // ---------------------------------------------------------------------
        public SimpleDeviceHostDataReader GetDeviceHostByIdDataReader( Guid id )
        {
            const string sql = SimpleDeviceHostDataReader.BaseQuery + "WHERE " + SimpleDeviceHostDataReader.ViewAliasName + ".[Id] = @id"; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                sqlCommandParameters.AddGuid( "@id", id );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleDeviceHostDataReader = new SimpleDeviceHostDataReader( _loggerFactory, sqlDataReader );
                return simpleDeviceHostDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public DeviceHostObject? GetDeviceHostById( Guid id )
        {
            var simpleDeviceHostDataReader = GetDeviceHostByIdDataReader( id );
            using ( simpleDeviceHostDataReader )
            {
                if ( simpleDeviceHostDataReader.Read( ) )
                {
                    var result = simpleDeviceHostDataReader.GetDataObject( );
                    return result;
                }
            }
            return null;
        }

        public void GetDeviceHostById( Guid id, Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleDeviceHostDataReader = GetDeviceHostByIdDataReader( id );
                using ( simpleDeviceHostDataReader )
                {
                    if ( simpleDeviceHostDataReader.Read( ) )
                    {
                        destinationWriter.Write( true );
                        simpleDeviceHostDataReader.WriteTo( destinationWriter );
                    }
                    else
                    {
                        destinationWriter.Write( false );
                    }
                }
            }
        }

        public SimpleDeviceHostDataReader GetDeviceHostCollectionDataReader( )
        {
            const string sql = SimpleDeviceHostDataReader.BaseQuery; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleDeviceHostDataReader = new SimpleDeviceHostDataReader( _loggerFactory, sqlDataReader );
                return simpleDeviceHostDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public IList<DeviceHostObject> GetDeviceHostCollection( )
        {
            var result = new List<DeviceHostObject>( );
            var simpleDeviceHostDataReader = GetDeviceHostCollectionDataReader( );
            using ( simpleDeviceHostDataReader )
            {
                while ( simpleDeviceHostDataReader.Read( ) )
                {
                    var data = simpleDeviceHostDataReader.GetDataObject( );
                    result.Add( data );
                }
            }
            return result;
        }

        public void GetDeviceHostCollection( Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleDeviceHostDataReader = GetDeviceHostCollectionDataReader( );
                using ( simpleDeviceHostDataReader )
                {
                    simpleDeviceHostDataReader.WriteResultSetTo( destinationWriter );
                }
            }
        }

        public SimpleDeviceHostDataReader GetDeviceHostByNameDataReader( string name )
        {
            const string sql = SimpleDeviceHostDataReader.BaseQuery + " WHERE " +
                    SimpleDeviceHostDataReader.ViewAliasName + ".[Name] = @name " +
                    " ORDER BY " + SimpleDeviceHostDataReader.ViewAliasName + ".[Name]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var nameParameter = sqlCommandParameters.AddNVarChar( "@name", name, 127 );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleDeviceHostDataReader = new SimpleDeviceHostDataReader( _loggerFactory, sqlDataReader );
                return simpleDeviceHostDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public DeviceHostObject? GetDeviceHostByName( string name )
        {
            throw new NotImplementedException( );
        }
        // ---------------------------------------------------------------------
        // DeviceHostConfiguration queries
        // ---------------------------------------------------------------------
        public SimpleDeviceHostConfigurationDataReader GetDeviceHostConfigurationByIdDataReader( Guid id )
        {
            const string sql = SimpleDeviceHostConfigurationDataReader.BaseQuery + "WHERE " + SimpleDeviceHostConfigurationDataReader.ViewAliasName + ".[Id] = @id"; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                sqlCommandParameters.AddGuid( "@id", id );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleDeviceHostConfigurationDataReader = new SimpleDeviceHostConfigurationDataReader( _loggerFactory, sqlDataReader );
                return simpleDeviceHostConfigurationDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public DeviceHostConfigurationObject? GetDeviceHostConfigurationById( Guid id )
        {
            var simpleDeviceHostConfigurationDataReader = GetDeviceHostConfigurationByIdDataReader( id );
            using ( simpleDeviceHostConfigurationDataReader )
            {
                if ( simpleDeviceHostConfigurationDataReader.Read( ) )
                {
                    var result = simpleDeviceHostConfigurationDataReader.GetDataObject( );
                    return result;
                }
            }
            return null;
        }

        public void GetDeviceHostConfigurationById( Guid id, Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleDeviceHostConfigurationDataReader = GetDeviceHostConfigurationByIdDataReader( id );
                using ( simpleDeviceHostConfigurationDataReader )
                {
                    if ( simpleDeviceHostConfigurationDataReader.Read( ) )
                    {
                        destinationWriter.Write( true );
                        simpleDeviceHostConfigurationDataReader.WriteTo( destinationWriter );
                    }
                    else
                    {
                        destinationWriter.Write( false );
                    }
                }
            }
        }

        public SimpleDeviceHostConfigurationDataReader GetDeviceHostConfigurationCollectionDataReader( )
        {
            const string sql = SimpleDeviceHostConfigurationDataReader.BaseQuery; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleDeviceHostConfigurationDataReader = new SimpleDeviceHostConfigurationDataReader( _loggerFactory, sqlDataReader );
                return simpleDeviceHostConfigurationDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public IList<DeviceHostConfigurationObject> GetDeviceHostConfigurationCollection( )
        {
            var result = new List<DeviceHostConfigurationObject>( );
            var simpleDeviceHostConfigurationDataReader = GetDeviceHostConfigurationCollectionDataReader( );
            using ( simpleDeviceHostConfigurationDataReader )
            {
                while ( simpleDeviceHostConfigurationDataReader.Read( ) )
                {
                    var data = simpleDeviceHostConfigurationDataReader.GetDataObject( );
                    result.Add( data );
                }
            }
            return result;
        }

        public void GetDeviceHostConfigurationCollection( Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleDeviceHostConfigurationDataReader = GetDeviceHostConfigurationCollectionDataReader( );
                using ( simpleDeviceHostConfigurationDataReader )
                {
                    simpleDeviceHostConfigurationDataReader.WriteResultSetTo( destinationWriter );
                }
            }
        }

        public SimpleDeviceHostConfigurationDataReader GetDeviceHostConfigurationCollectionByHostDataReader( Guid host )
        {
            const string sql = SimpleDeviceHostConfigurationDataReader.BaseQuery + " WHERE " +
                    SimpleDeviceHostConfigurationDataReader.ViewAliasName + ".[Host] = @host " +
                    " ORDER BY " + SimpleDeviceHostConfigurationDataReader.ViewAliasName + ".[Host]," +SimpleDeviceHostConfigurationDataReader.ViewAliasName + ".[Timestamp]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var hostParameter = sqlCommandParameters.AddReference( "@host", host );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleDeviceHostConfigurationDataReader = new SimpleDeviceHostConfigurationDataReader( _loggerFactory, sqlDataReader );
                return simpleDeviceHostConfigurationDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<DeviceHostConfigurationObject> GetDeviceHostConfigurationCollectionByHost( Guid host )
        {
            throw new NotImplementedException( );
        }
        public SimpleDeviceHostConfigurationDataReader GetDeviceHostConfigurationByHostAndTimestampDataReader( Guid host, DateTime timestamp )
        {
            const string sql = SimpleDeviceHostConfigurationDataReader.BaseQuery + " WHERE " +
                    SimpleDeviceHostConfigurationDataReader.ViewAliasName + ".[Host] = @host AND " +
                    SimpleDeviceHostConfigurationDataReader.ViewAliasName + ".[Timestamp] = @timestamp " +
                    " ORDER BY " + SimpleDeviceHostConfigurationDataReader.ViewAliasName + ".[Host]," +SimpleDeviceHostConfigurationDataReader.ViewAliasName + ".[Timestamp]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var hostParameter = sqlCommandParameters.AddReference( "@host", host );
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@timestamp", timestamp );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleDeviceHostConfigurationDataReader = new SimpleDeviceHostConfigurationDataReader( _loggerFactory, sqlDataReader );
                return simpleDeviceHostConfigurationDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public DeviceHostConfigurationObject? GetDeviceHostConfigurationByHostAndTimestamp( Guid host, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public DeviceHostConfigurationObject? GetDeviceHostConfigurationByHostAtTimestamp( Guid host, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<DeviceHostConfigurationObject> GetDeviceHostConfigurationByHostFromTimestamp( Guid host, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<DeviceHostConfigurationObject> GetDeviceHostConfigurationByHostUntilTimestamp( Guid host, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<DeviceHostConfigurationObject> GetDeviceHostConfigurationByHostOverTimestamp( Guid host, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException( );
        }
        public SimpleDeviceHostConfigurationDataReader GetDeviceHostConfigurationCollectionByTimestampDataReader( DateTime timestamp )
        {
            const string sql = SimpleDeviceHostConfigurationDataReader.BaseQuery + " WHERE " +
                    SimpleDeviceHostConfigurationDataReader.ViewAliasName + ".[Timestamp] = @timestamp " +
                    " ORDER BY " + SimpleDeviceHostConfigurationDataReader.ViewAliasName + ".[Timestamp]," +SimpleDeviceHostConfigurationDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@timestamp", timestamp );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleDeviceHostConfigurationDataReader = new SimpleDeviceHostConfigurationDataReader( _loggerFactory, sqlDataReader );
                return simpleDeviceHostConfigurationDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<DeviceHostConfigurationObject> GetDeviceHostConfigurationCollectionByTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<DeviceHostConfigurationObject> GetDeviceHostConfigurationCollectionAtTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<DeviceHostConfigurationObject> GetDeviceHostConfigurationCollectionFromTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<DeviceHostConfigurationObject> GetDeviceHostConfigurationCollectionUntilTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<DeviceHostConfigurationObject> GetDeviceHostConfigurationCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException( );
        }
        // ---------------------------------------------------------------------
        // DoubleTimeseriesValue queries
        // ---------------------------------------------------------------------
        public SimpleDoubleTimeseriesValueDataReader GetDoubleTimeseriesValueByIdDataReader( Guid id )
        {
            const string sql = SimpleDoubleTimeseriesValueDataReader.BaseQuery + "WHERE " + SimpleDoubleTimeseriesValueDataReader.ViewAliasName + ".[Id] = @id"; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                sqlCommandParameters.AddGuid( "@id", id );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleDoubleTimeseriesValueDataReader = new SimpleDoubleTimeseriesValueDataReader( _loggerFactory, sqlDataReader );
                return simpleDoubleTimeseriesValueDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public DoubleTimeseriesValueObject? GetDoubleTimeseriesValueById( Guid id )
        {
            var simpleDoubleTimeseriesValueDataReader = GetDoubleTimeseriesValueByIdDataReader( id );
            using ( simpleDoubleTimeseriesValueDataReader )
            {
                if ( simpleDoubleTimeseriesValueDataReader.Read( ) )
                {
                    var result = simpleDoubleTimeseriesValueDataReader.GetDataObject( );
                    return result;
                }
            }
            return null;
        }

        public void GetDoubleTimeseriesValueById( Guid id, Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleDoubleTimeseriesValueDataReader = GetDoubleTimeseriesValueByIdDataReader( id );
                using ( simpleDoubleTimeseriesValueDataReader )
                {
                    if ( simpleDoubleTimeseriesValueDataReader.Read( ) )
                    {
                        destinationWriter.Write( true );
                        simpleDoubleTimeseriesValueDataReader.WriteTo( destinationWriter );
                    }
                    else
                    {
                        destinationWriter.Write( false );
                    }
                }
            }
        }

        public SimpleDoubleTimeseriesValueDataReader GetDoubleTimeseriesValueCollectionDataReader( )
        {
            const string sql = SimpleDoubleTimeseriesValueDataReader.BaseQuery; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleDoubleTimeseriesValueDataReader = new SimpleDoubleTimeseriesValueDataReader( _loggerFactory, sqlDataReader );
                return simpleDoubleTimeseriesValueDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public IList<DoubleTimeseriesValueObject> GetDoubleTimeseriesValueCollection( )
        {
            var result = new List<DoubleTimeseriesValueObject>( );
            var simpleDoubleTimeseriesValueDataReader = GetDoubleTimeseriesValueCollectionDataReader( );
            using ( simpleDoubleTimeseriesValueDataReader )
            {
                while ( simpleDoubleTimeseriesValueDataReader.Read( ) )
                {
                    var data = simpleDoubleTimeseriesValueDataReader.GetDataObject( );
                    result.Add( data );
                }
            }
            return result;
        }

        public void GetDoubleTimeseriesValueCollection( Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleDoubleTimeseriesValueDataReader = GetDoubleTimeseriesValueCollectionDataReader( );
                using ( simpleDoubleTimeseriesValueDataReader )
                {
                    simpleDoubleTimeseriesValueDataReader.WriteResultSetTo( destinationWriter );
                }
            }
        }

        public SimpleDoubleTimeseriesValueDataReader GetDoubleTimeseriesValueCollectionByTimeseriesDataReader( Guid timeseries )
        {
            const string sql = SimpleDoubleTimeseriesValueDataReader.BaseQuery + " WHERE " +
                    SimpleDoubleTimeseriesValueDataReader.ViewAliasName + ".[Timeseries] = @timeseries " +
                    " ORDER BY " + SimpleDoubleTimeseriesValueDataReader.ViewAliasName + ".[Timeseries]," +SimpleDoubleTimeseriesValueDataReader.ViewAliasName + ".[Timestamp]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var timeseriesParameter = sqlCommandParameters.AddReference( "@timeseries", timeseries );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleDoubleTimeseriesValueDataReader = new SimpleDoubleTimeseriesValueDataReader( _loggerFactory, sqlDataReader );
                return simpleDoubleTimeseriesValueDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<DoubleTimeseriesValueObject> GetDoubleTimeseriesValueCollectionByTimeseries( Guid timeseries )
        {
            throw new NotImplementedException( );
        }
        public SimpleDoubleTimeseriesValueDataReader GetDoubleTimeseriesValueByTimeseriesAndTimestampDataReader( Guid timeseries, DateTime timestamp )
        {
            const string sql = SimpleDoubleTimeseriesValueDataReader.BaseQuery + " WHERE " +
                    SimpleDoubleTimeseriesValueDataReader.ViewAliasName + ".[Timeseries] = @timeseries AND " +
                    SimpleDoubleTimeseriesValueDataReader.ViewAliasName + ".[Timestamp] = @timestamp " +
                    " ORDER BY " + SimpleDoubleTimeseriesValueDataReader.ViewAliasName + ".[Timeseries]," +SimpleDoubleTimeseriesValueDataReader.ViewAliasName + ".[Timestamp]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var timeseriesParameter = sqlCommandParameters.AddReference( "@timeseries", timeseries );
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@timestamp", timestamp );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleDoubleTimeseriesValueDataReader = new SimpleDoubleTimeseriesValueDataReader( _loggerFactory, sqlDataReader );
                return simpleDoubleTimeseriesValueDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public DoubleTimeseriesValueObject? GetDoubleTimeseriesValueByTimeseriesAndTimestamp( Guid timeseries, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public DoubleTimeseriesValueObject? GetDoubleTimeseriesValueByTimeseriesAtTimestamp( Guid timeseries, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<DoubleTimeseriesValueObject> GetDoubleTimeseriesValueByTimeseriesFromTimestamp( Guid timeseries, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<DoubleTimeseriesValueObject> GetDoubleTimeseriesValueByTimeseriesUntilTimestamp( Guid timeseries, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<DoubleTimeseriesValueObject> GetDoubleTimeseriesValueByTimeseriesOverTimestamp( Guid timeseries, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException( );
        }
        public SimpleDoubleTimeseriesValueDataReader GetDoubleTimeseriesValueCollectionByTimestampDataReader( DateTime timestamp )
        {
            const string sql = SimpleDoubleTimeseriesValueDataReader.BaseQuery + " WHERE " +
                    SimpleDoubleTimeseriesValueDataReader.ViewAliasName + ".[Timestamp] = @timestamp " +
                    " ORDER BY " + SimpleDoubleTimeseriesValueDataReader.ViewAliasName + ".[Timestamp]," +SimpleDoubleTimeseriesValueDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@timestamp", timestamp );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleDoubleTimeseriesValueDataReader = new SimpleDoubleTimeseriesValueDataReader( _loggerFactory, sqlDataReader );
                return simpleDoubleTimeseriesValueDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<DoubleTimeseriesValueObject> GetDoubleTimeseriesValueCollectionByTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<DoubleTimeseriesValueObject> GetDoubleTimeseriesValueCollectionAtTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<DoubleTimeseriesValueObject> GetDoubleTimeseriesValueCollectionFromTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<DoubleTimeseriesValueObject> GetDoubleTimeseriesValueCollectionUntilTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<DoubleTimeseriesValueObject> GetDoubleTimeseriesValueCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException( );
        }
        // ---------------------------------------------------------------------
        // FacilityType queries
        // ---------------------------------------------------------------------
        public SimpleFacilityTypeDataReader GetFacilityTypeByIdDataReader( Guid id )
        {
            const string sql = SimpleFacilityTypeDataReader.BaseQuery + "WHERE " + SimpleFacilityTypeDataReader.ViewAliasName + ".[Id] = @id"; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                sqlCommandParameters.AddGuid( "@id", id );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleFacilityTypeDataReader = new SimpleFacilityTypeDataReader( _loggerFactory, sqlDataReader );
                return simpleFacilityTypeDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public FacilityTypeObject? GetFacilityTypeById( Guid id )
        {
            var simpleFacilityTypeDataReader = GetFacilityTypeByIdDataReader( id );
            using ( simpleFacilityTypeDataReader )
            {
                if ( simpleFacilityTypeDataReader.Read( ) )
                {
                    var result = simpleFacilityTypeDataReader.GetDataObject( );
                    return result;
                }
            }
            return null;
        }

        public void GetFacilityTypeById( Guid id, Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleFacilityTypeDataReader = GetFacilityTypeByIdDataReader( id );
                using ( simpleFacilityTypeDataReader )
                {
                    if ( simpleFacilityTypeDataReader.Read( ) )
                    {
                        destinationWriter.Write( true );
                        simpleFacilityTypeDataReader.WriteTo( destinationWriter );
                    }
                    else
                    {
                        destinationWriter.Write( false );
                    }
                }
            }
        }

        public SimpleFacilityTypeDataReader GetFacilityTypeCollectionDataReader( )
        {
            const string sql = SimpleFacilityTypeDataReader.BaseQuery; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleFacilityTypeDataReader = new SimpleFacilityTypeDataReader( _loggerFactory, sqlDataReader );
                return simpleFacilityTypeDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public IList<FacilityTypeObject> GetFacilityTypeCollection( )
        {
            var result = new List<FacilityTypeObject>( );
            var simpleFacilityTypeDataReader = GetFacilityTypeCollectionDataReader( );
            using ( simpleFacilityTypeDataReader )
            {
                while ( simpleFacilityTypeDataReader.Read( ) )
                {
                    var data = simpleFacilityTypeDataReader.GetDataObject( );
                    result.Add( data );
                }
            }
            return result;
        }

        public void GetFacilityTypeCollection( Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleFacilityTypeDataReader = GetFacilityTypeCollectionDataReader( );
                using ( simpleFacilityTypeDataReader )
                {
                    simpleFacilityTypeDataReader.WriteResultSetTo( destinationWriter );
                }
            }
        }

        public SimpleFacilityTypeDataReader GetFacilityTypeByNameDataReader( string name )
        {
            const string sql = SimpleFacilityTypeDataReader.BaseQuery + " WHERE " +
                    SimpleFacilityTypeDataReader.ViewAliasName + ".[Name] = @name " +
                    " ORDER BY " + SimpleFacilityTypeDataReader.ViewAliasName + ".[Name]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var nameParameter = sqlCommandParameters.AddNVarChar( "@name", name, 127 );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleFacilityTypeDataReader = new SimpleFacilityTypeDataReader( _loggerFactory, sqlDataReader );
                return simpleFacilityTypeDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public FacilityTypeObject? GetFacilityTypeByName( string name )
        {
            throw new NotImplementedException( );
        }
        // ---------------------------------------------------------------------
        // GeoPosition2DTimeseriesValue queries
        // ---------------------------------------------------------------------
        public SimpleGeoPosition2DTimeseriesValueDataReader GetGeoPosition2DTimeseriesValueByIdDataReader( Guid id )
        {
            const string sql = SimpleGeoPosition2DTimeseriesValueDataReader.BaseQuery + "WHERE " + SimpleGeoPosition2DTimeseriesValueDataReader.ViewAliasName + ".[Id] = @id"; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                sqlCommandParameters.AddGuid( "@id", id );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleGeoPosition2DTimeseriesValueDataReader = new SimpleGeoPosition2DTimeseriesValueDataReader( _loggerFactory, sqlDataReader );
                return simpleGeoPosition2DTimeseriesValueDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public GeoPosition2DTimeseriesValueObject? GetGeoPosition2DTimeseriesValueById( Guid id )
        {
            var simpleGeoPosition2DTimeseriesValueDataReader = GetGeoPosition2DTimeseriesValueByIdDataReader( id );
            using ( simpleGeoPosition2DTimeseriesValueDataReader )
            {
                if ( simpleGeoPosition2DTimeseriesValueDataReader.Read( ) )
                {
                    var result = simpleGeoPosition2DTimeseriesValueDataReader.GetDataObject( );
                    return result;
                }
            }
            return null;
        }

        public void GetGeoPosition2DTimeseriesValueById( Guid id, Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleGeoPosition2DTimeseriesValueDataReader = GetGeoPosition2DTimeseriesValueByIdDataReader( id );
                using ( simpleGeoPosition2DTimeseriesValueDataReader )
                {
                    if ( simpleGeoPosition2DTimeseriesValueDataReader.Read( ) )
                    {
                        destinationWriter.Write( true );
                        simpleGeoPosition2DTimeseriesValueDataReader.WriteTo( destinationWriter );
                    }
                    else
                    {
                        destinationWriter.Write( false );
                    }
                }
            }
        }

        public SimpleGeoPosition2DTimeseriesValueDataReader GetGeoPosition2DTimeseriesValueCollectionDataReader( )
        {
            const string sql = SimpleGeoPosition2DTimeseriesValueDataReader.BaseQuery; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleGeoPosition2DTimeseriesValueDataReader = new SimpleGeoPosition2DTimeseriesValueDataReader( _loggerFactory, sqlDataReader );
                return simpleGeoPosition2DTimeseriesValueDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public IList<GeoPosition2DTimeseriesValueObject> GetGeoPosition2DTimeseriesValueCollection( )
        {
            var result = new List<GeoPosition2DTimeseriesValueObject>( );
            var simpleGeoPosition2DTimeseriesValueDataReader = GetGeoPosition2DTimeseriesValueCollectionDataReader( );
            using ( simpleGeoPosition2DTimeseriesValueDataReader )
            {
                while ( simpleGeoPosition2DTimeseriesValueDataReader.Read( ) )
                {
                    var data = simpleGeoPosition2DTimeseriesValueDataReader.GetDataObject( );
                    result.Add( data );
                }
            }
            return result;
        }

        public void GetGeoPosition2DTimeseriesValueCollection( Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleGeoPosition2DTimeseriesValueDataReader = GetGeoPosition2DTimeseriesValueCollectionDataReader( );
                using ( simpleGeoPosition2DTimeseriesValueDataReader )
                {
                    simpleGeoPosition2DTimeseriesValueDataReader.WriteResultSetTo( destinationWriter );
                }
            }
        }

        public SimpleGeoPosition2DTimeseriesValueDataReader GetGeoPosition2DTimeseriesValueCollectionByTimeseriesDataReader( Guid timeseries )
        {
            const string sql = SimpleGeoPosition2DTimeseriesValueDataReader.BaseQuery + " WHERE " +
                    SimpleGeoPosition2DTimeseriesValueDataReader.ViewAliasName + ".[Timeseries] = @timeseries " +
                    " ORDER BY " + SimpleGeoPosition2DTimeseriesValueDataReader.ViewAliasName + ".[Timeseries]," +SimpleGeoPosition2DTimeseriesValueDataReader.ViewAliasName + ".[Timestamp]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var timeseriesParameter = sqlCommandParameters.AddReference( "@timeseries", timeseries );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleGeoPosition2DTimeseriesValueDataReader = new SimpleGeoPosition2DTimeseriesValueDataReader( _loggerFactory, sqlDataReader );
                return simpleGeoPosition2DTimeseriesValueDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<GeoPosition2DTimeseriesValueObject> GetGeoPosition2DTimeseriesValueCollectionByTimeseries( Guid timeseries )
        {
            throw new NotImplementedException( );
        }
        public SimpleGeoPosition2DTimeseriesValueDataReader GetGeoPosition2DTimeseriesValueByTimeseriesAndTimestampDataReader( Guid timeseries, DateTime timestamp )
        {
            const string sql = SimpleGeoPosition2DTimeseriesValueDataReader.BaseQuery + " WHERE " +
                    SimpleGeoPosition2DTimeseriesValueDataReader.ViewAliasName + ".[Timeseries] = @timeseries AND " +
                    SimpleGeoPosition2DTimeseriesValueDataReader.ViewAliasName + ".[Timestamp] = @timestamp " +
                    " ORDER BY " + SimpleGeoPosition2DTimeseriesValueDataReader.ViewAliasName + ".[Timeseries]," +SimpleGeoPosition2DTimeseriesValueDataReader.ViewAliasName + ".[Timestamp]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var timeseriesParameter = sqlCommandParameters.AddReference( "@timeseries", timeseries );
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@timestamp", timestamp );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleGeoPosition2DTimeseriesValueDataReader = new SimpleGeoPosition2DTimeseriesValueDataReader( _loggerFactory, sqlDataReader );
                return simpleGeoPosition2DTimeseriesValueDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public GeoPosition2DTimeseriesValueObject? GetGeoPosition2DTimeseriesValueByTimeseriesAndTimestamp( Guid timeseries, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public GeoPosition2DTimeseriesValueObject? GetGeoPosition2DTimeseriesValueByTimeseriesAtTimestamp( Guid timeseries, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<GeoPosition2DTimeseriesValueObject> GetGeoPosition2DTimeseriesValueByTimeseriesFromTimestamp( Guid timeseries, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<GeoPosition2DTimeseriesValueObject> GetGeoPosition2DTimeseriesValueByTimeseriesUntilTimestamp( Guid timeseries, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<GeoPosition2DTimeseriesValueObject> GetGeoPosition2DTimeseriesValueByTimeseriesOverTimestamp( Guid timeseries, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException( );
        }
        public SimpleGeoPosition2DTimeseriesValueDataReader GetGeoPosition2DTimeseriesValueCollectionByTimestampDataReader( DateTime timestamp )
        {
            const string sql = SimpleGeoPosition2DTimeseriesValueDataReader.BaseQuery + " WHERE " +
                    SimpleGeoPosition2DTimeseriesValueDataReader.ViewAliasName + ".[Timestamp] = @timestamp " +
                    " ORDER BY " + SimpleGeoPosition2DTimeseriesValueDataReader.ViewAliasName + ".[Timestamp]," +SimpleGeoPosition2DTimeseriesValueDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@timestamp", timestamp );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleGeoPosition2DTimeseriesValueDataReader = new SimpleGeoPosition2DTimeseriesValueDataReader( _loggerFactory, sqlDataReader );
                return simpleGeoPosition2DTimeseriesValueDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<GeoPosition2DTimeseriesValueObject> GetGeoPosition2DTimeseriesValueCollectionByTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<GeoPosition2DTimeseriesValueObject> GetGeoPosition2DTimeseriesValueCollectionAtTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<GeoPosition2DTimeseriesValueObject> GetGeoPosition2DTimeseriesValueCollectionFromTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<GeoPosition2DTimeseriesValueObject> GetGeoPosition2DTimeseriesValueCollectionUntilTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<GeoPosition2DTimeseriesValueObject> GetGeoPosition2DTimeseriesValueCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException( );
        }
        // ---------------------------------------------------------------------
        // GeoPosition3DTimeseriesValue queries
        // ---------------------------------------------------------------------
        public SimpleGeoPosition3DTimeseriesValueDataReader GetGeoPosition3DTimeseriesValueByIdDataReader( Guid id )
        {
            const string sql = SimpleGeoPosition3DTimeseriesValueDataReader.BaseQuery + "WHERE " + SimpleGeoPosition3DTimeseriesValueDataReader.ViewAliasName + ".[Id] = @id"; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                sqlCommandParameters.AddGuid( "@id", id );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleGeoPosition3DTimeseriesValueDataReader = new SimpleGeoPosition3DTimeseriesValueDataReader( _loggerFactory, sqlDataReader );
                return simpleGeoPosition3DTimeseriesValueDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public GeoPosition3DTimeseriesValueObject? GetGeoPosition3DTimeseriesValueById( Guid id )
        {
            var simpleGeoPosition3DTimeseriesValueDataReader = GetGeoPosition3DTimeseriesValueByIdDataReader( id );
            using ( simpleGeoPosition3DTimeseriesValueDataReader )
            {
                if ( simpleGeoPosition3DTimeseriesValueDataReader.Read( ) )
                {
                    var result = simpleGeoPosition3DTimeseriesValueDataReader.GetDataObject( );
                    return result;
                }
            }
            return null;
        }

        public void GetGeoPosition3DTimeseriesValueById( Guid id, Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleGeoPosition3DTimeseriesValueDataReader = GetGeoPosition3DTimeseriesValueByIdDataReader( id );
                using ( simpleGeoPosition3DTimeseriesValueDataReader )
                {
                    if ( simpleGeoPosition3DTimeseriesValueDataReader.Read( ) )
                    {
                        destinationWriter.Write( true );
                        simpleGeoPosition3DTimeseriesValueDataReader.WriteTo( destinationWriter );
                    }
                    else
                    {
                        destinationWriter.Write( false );
                    }
                }
            }
        }

        public SimpleGeoPosition3DTimeseriesValueDataReader GetGeoPosition3DTimeseriesValueCollectionDataReader( )
        {
            const string sql = SimpleGeoPosition3DTimeseriesValueDataReader.BaseQuery; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleGeoPosition3DTimeseriesValueDataReader = new SimpleGeoPosition3DTimeseriesValueDataReader( _loggerFactory, sqlDataReader );
                return simpleGeoPosition3DTimeseriesValueDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public IList<GeoPosition3DTimeseriesValueObject> GetGeoPosition3DTimeseriesValueCollection( )
        {
            var result = new List<GeoPosition3DTimeseriesValueObject>( );
            var simpleGeoPosition3DTimeseriesValueDataReader = GetGeoPosition3DTimeseriesValueCollectionDataReader( );
            using ( simpleGeoPosition3DTimeseriesValueDataReader )
            {
                while ( simpleGeoPosition3DTimeseriesValueDataReader.Read( ) )
                {
                    var data = simpleGeoPosition3DTimeseriesValueDataReader.GetDataObject( );
                    result.Add( data );
                }
            }
            return result;
        }

        public void GetGeoPosition3DTimeseriesValueCollection( Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleGeoPosition3DTimeseriesValueDataReader = GetGeoPosition3DTimeseriesValueCollectionDataReader( );
                using ( simpleGeoPosition3DTimeseriesValueDataReader )
                {
                    simpleGeoPosition3DTimeseriesValueDataReader.WriteResultSetTo( destinationWriter );
                }
            }
        }

        public SimpleGeoPosition3DTimeseriesValueDataReader GetGeoPosition3DTimeseriesValueCollectionByTimeseriesDataReader( Guid timeseries )
        {
            const string sql = SimpleGeoPosition3DTimeseriesValueDataReader.BaseQuery + " WHERE " +
                    SimpleGeoPosition3DTimeseriesValueDataReader.ViewAliasName + ".[Timeseries] = @timeseries " +
                    " ORDER BY " + SimpleGeoPosition3DTimeseriesValueDataReader.ViewAliasName + ".[Timeseries]," +SimpleGeoPosition3DTimeseriesValueDataReader.ViewAliasName + ".[Timestamp]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var timeseriesParameter = sqlCommandParameters.AddReference( "@timeseries", timeseries );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleGeoPosition3DTimeseriesValueDataReader = new SimpleGeoPosition3DTimeseriesValueDataReader( _loggerFactory, sqlDataReader );
                return simpleGeoPosition3DTimeseriesValueDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<GeoPosition3DTimeseriesValueObject> GetGeoPosition3DTimeseriesValueCollectionByTimeseries( Guid timeseries )
        {
            throw new NotImplementedException( );
        }
        public SimpleGeoPosition3DTimeseriesValueDataReader GetGeoPosition3DTimeseriesValueByTimeseriesAndTimestampDataReader( Guid timeseries, DateTime timestamp )
        {
            const string sql = SimpleGeoPosition3DTimeseriesValueDataReader.BaseQuery + " WHERE " +
                    SimpleGeoPosition3DTimeseriesValueDataReader.ViewAliasName + ".[Timeseries] = @timeseries AND " +
                    SimpleGeoPosition3DTimeseriesValueDataReader.ViewAliasName + ".[Timestamp] = @timestamp " +
                    " ORDER BY " + SimpleGeoPosition3DTimeseriesValueDataReader.ViewAliasName + ".[Timeseries]," +SimpleGeoPosition3DTimeseriesValueDataReader.ViewAliasName + ".[Timestamp]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var timeseriesParameter = sqlCommandParameters.AddReference( "@timeseries", timeseries );
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@timestamp", timestamp );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleGeoPosition3DTimeseriesValueDataReader = new SimpleGeoPosition3DTimeseriesValueDataReader( _loggerFactory, sqlDataReader );
                return simpleGeoPosition3DTimeseriesValueDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public GeoPosition3DTimeseriesValueObject? GetGeoPosition3DTimeseriesValueByTimeseriesAndTimestamp( Guid timeseries, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public GeoPosition3DTimeseriesValueObject? GetGeoPosition3DTimeseriesValueByTimeseriesAtTimestamp( Guid timeseries, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<GeoPosition3DTimeseriesValueObject> GetGeoPosition3DTimeseriesValueByTimeseriesFromTimestamp( Guid timeseries, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<GeoPosition3DTimeseriesValueObject> GetGeoPosition3DTimeseriesValueByTimeseriesUntilTimestamp( Guid timeseries, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<GeoPosition3DTimeseriesValueObject> GetGeoPosition3DTimeseriesValueByTimeseriesOverTimestamp( Guid timeseries, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException( );
        }
        public SimpleGeoPosition3DTimeseriesValueDataReader GetGeoPosition3DTimeseriesValueCollectionByTimestampDataReader( DateTime timestamp )
        {
            const string sql = SimpleGeoPosition3DTimeseriesValueDataReader.BaseQuery + " WHERE " +
                    SimpleGeoPosition3DTimeseriesValueDataReader.ViewAliasName + ".[Timestamp] = @timestamp " +
                    " ORDER BY " + SimpleGeoPosition3DTimeseriesValueDataReader.ViewAliasName + ".[Timestamp]," +SimpleGeoPosition3DTimeseriesValueDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@timestamp", timestamp );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleGeoPosition3DTimeseriesValueDataReader = new SimpleGeoPosition3DTimeseriesValueDataReader( _loggerFactory, sqlDataReader );
                return simpleGeoPosition3DTimeseriesValueDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<GeoPosition3DTimeseriesValueObject> GetGeoPosition3DTimeseriesValueCollectionByTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<GeoPosition3DTimeseriesValueObject> GetGeoPosition3DTimeseriesValueCollectionAtTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<GeoPosition3DTimeseriesValueObject> GetGeoPosition3DTimeseriesValueCollectionFromTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<GeoPosition3DTimeseriesValueObject> GetGeoPosition3DTimeseriesValueCollectionUntilTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<GeoPosition3DTimeseriesValueObject> GetGeoPosition3DTimeseriesValueCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException( );
        }
        // ---------------------------------------------------------------------
        // GNSSDeviceCommand queries
        // ---------------------------------------------------------------------
        public SimpleGNSSDeviceCommandDataReader GetGNSSDeviceCommandByIdDataReader( Guid id )
        {
            const string sql = SimpleGNSSDeviceCommandDataReader.BaseQuery + "WHERE " + SimpleGNSSDeviceCommandDataReader.ViewAliasName + ".[Id] = @id"; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                sqlCommandParameters.AddGuid( "@id", id );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleGNSSDeviceCommandDataReader = new SimpleGNSSDeviceCommandDataReader( _loggerFactory, sqlDataReader );
                return simpleGNSSDeviceCommandDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public GNSSDeviceCommandObject? GetGNSSDeviceCommandById( Guid id )
        {
            var simpleGNSSDeviceCommandDataReader = GetGNSSDeviceCommandByIdDataReader( id );
            using ( simpleGNSSDeviceCommandDataReader )
            {
                if ( simpleGNSSDeviceCommandDataReader.Read( ) )
                {
                    var result = simpleGNSSDeviceCommandDataReader.GetDataObject( );
                    return result;
                }
            }
            return null;
        }

        public void GetGNSSDeviceCommandById( Guid id, Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleGNSSDeviceCommandDataReader = GetGNSSDeviceCommandByIdDataReader( id );
                using ( simpleGNSSDeviceCommandDataReader )
                {
                    if ( simpleGNSSDeviceCommandDataReader.Read( ) )
                    {
                        destinationWriter.Write( true );
                        simpleGNSSDeviceCommandDataReader.WriteTo( destinationWriter );
                    }
                    else
                    {
                        destinationWriter.Write( false );
                    }
                }
            }
        }

        public SimpleGNSSDeviceCommandDataReader GetGNSSDeviceCommandCollectionDataReader( )
        {
            const string sql = SimpleGNSSDeviceCommandDataReader.BaseQuery; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleGNSSDeviceCommandDataReader = new SimpleGNSSDeviceCommandDataReader( _loggerFactory, sqlDataReader );
                return simpleGNSSDeviceCommandDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public IList<GNSSDeviceCommandObject> GetGNSSDeviceCommandCollection( )
        {
            var result = new List<GNSSDeviceCommandObject>( );
            var simpleGNSSDeviceCommandDataReader = GetGNSSDeviceCommandCollectionDataReader( );
            using ( simpleGNSSDeviceCommandDataReader )
            {
                while ( simpleGNSSDeviceCommandDataReader.Read( ) )
                {
                    var data = simpleGNSSDeviceCommandDataReader.GetDataObject( );
                    result.Add( data );
                }
            }
            return result;
        }

        public void GetGNSSDeviceCommandCollection( Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleGNSSDeviceCommandDataReader = GetGNSSDeviceCommandCollectionDataReader( );
                using ( simpleGNSSDeviceCommandDataReader )
                {
                    simpleGNSSDeviceCommandDataReader.WriteResultSetTo( destinationWriter );
                }
            }
        }

        public SimpleGNSSDeviceCommandDataReader GetGNSSDeviceCommandCollectionByGNSSDeviceDataReader( Guid gNSSDevice )
        {
            const string sql = SimpleGNSSDeviceCommandDataReader.BaseQuery + " WHERE " +
                    SimpleGNSSDeviceCommandDataReader.ViewAliasName + ".[GNSSDevice] = @gNSSDevice " +
                    " ORDER BY " + SimpleGNSSDeviceCommandDataReader.ViewAliasName + ".[GNSSDevice]," +SimpleGNSSDeviceCommandDataReader.ViewAliasName + ".[Timestamp]," +SimpleGNSSDeviceCommandDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var gNSSDeviceParameter = sqlCommandParameters.AddReference( "@gNSSDevice", gNSSDevice );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleGNSSDeviceCommandDataReader = new SimpleGNSSDeviceCommandDataReader( _loggerFactory, sqlDataReader );
                return simpleGNSSDeviceCommandDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<GNSSDeviceCommandObject> GetGNSSDeviceCommandCollectionByGNSSDevice( Guid gNSSDevice )
        {
            throw new NotImplementedException( );
        }
        public SimpleGNSSDeviceCommandDataReader GetGNSSDeviceCommandCollectionByGNSSDeviceAndTimestampDataReader( Guid gNSSDevice, DateTime timestamp )
        {
            const string sql = SimpleGNSSDeviceCommandDataReader.BaseQuery + " WHERE " +
                    SimpleGNSSDeviceCommandDataReader.ViewAliasName + ".[GNSSDevice] = @gNSSDevice AND " +
                    SimpleGNSSDeviceCommandDataReader.ViewAliasName + ".[Timestamp] = @timestamp " +
                    " ORDER BY " + SimpleGNSSDeviceCommandDataReader.ViewAliasName + ".[GNSSDevice]," +SimpleGNSSDeviceCommandDataReader.ViewAliasName + ".[Timestamp]," +SimpleGNSSDeviceCommandDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var gNSSDeviceParameter = sqlCommandParameters.AddReference( "@gNSSDevice", gNSSDevice );
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@timestamp", timestamp );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleGNSSDeviceCommandDataReader = new SimpleGNSSDeviceCommandDataReader( _loggerFactory, sqlDataReader );
                return simpleGNSSDeviceCommandDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<GNSSDeviceCommandObject> GetGNSSDeviceCommandCollectionByGNSSDeviceAndTimestamp( Guid gNSSDevice, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<GNSSDeviceCommandObject> GetGNSSDeviceCommandCollectionByGNSSDeviceAtTimestamp( Guid gNSSDevice, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<GNSSDeviceCommandObject> GetGNSSDeviceCommandCollectionByGNSSDeviceFromTimestamp( Guid gNSSDevice, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<GNSSDeviceCommandObject> GetGNSSDeviceCommandCollectionByGNSSDeviceUntilTimestamp( Guid gNSSDevice, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<GNSSDeviceCommandObject> GetGNSSDeviceCommandCollectionByGNSSDeviceOverTimestamp( Guid gNSSDevice, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException( );
        }
        public SimpleGNSSDeviceCommandDataReader GetGNSSDeviceCommandCollectionByTimestampDataReader( DateTime timestamp )
        {
            const string sql = SimpleGNSSDeviceCommandDataReader.BaseQuery + " WHERE " +
                    SimpleGNSSDeviceCommandDataReader.ViewAliasName + ".[Timestamp] = @timestamp " +
                    " ORDER BY " + SimpleGNSSDeviceCommandDataReader.ViewAliasName + ".[Timestamp]," +SimpleGNSSDeviceCommandDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@timestamp", timestamp );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleGNSSDeviceCommandDataReader = new SimpleGNSSDeviceCommandDataReader( _loggerFactory, sqlDataReader );
                return simpleGNSSDeviceCommandDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<GNSSDeviceCommandObject> GetGNSSDeviceCommandCollectionByTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<GNSSDeviceCommandObject> GetGNSSDeviceCommandCollectionAtTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<GNSSDeviceCommandObject> GetGNSSDeviceCommandCollectionFromTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<GNSSDeviceCommandObject> GetGNSSDeviceCommandCollectionUntilTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<GNSSDeviceCommandObject> GetGNSSDeviceCommandCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException( );
        }
        public SimpleGNSSDeviceCommandDataReader GetGNSSDeviceCommandCollectionByReplyDataReader( Guid reply )
        {
            const string sql = SimpleGNSSDeviceCommandDataReader.BaseQuery + " WHERE " +
                    SimpleGNSSDeviceCommandDataReader.ViewAliasName + ".[Reply] = @reply " +
                    " ORDER BY " + SimpleGNSSDeviceCommandDataReader.ViewAliasName + ".[Reply]," +SimpleGNSSDeviceCommandDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var replyParameter = sqlCommandParameters.AddReference( "@reply", reply );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleGNSSDeviceCommandDataReader = new SimpleGNSSDeviceCommandDataReader( _loggerFactory, sqlDataReader );
                return simpleGNSSDeviceCommandDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<GNSSDeviceCommandObject> GetGNSSDeviceCommandCollectionByReply( Guid reply )
        {
            throw new NotImplementedException( );
        }
        // ---------------------------------------------------------------------
        // GNSSDeviceCommandReply queries
        // ---------------------------------------------------------------------
        public SimpleGNSSDeviceCommandReplyDataReader GetGNSSDeviceCommandReplyByIdDataReader( Guid id )
        {
            const string sql = SimpleGNSSDeviceCommandReplyDataReader.BaseQuery + "WHERE " + SimpleGNSSDeviceCommandReplyDataReader.ViewAliasName + ".[Id] = @id"; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                sqlCommandParameters.AddGuid( "@id", id );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleGNSSDeviceCommandReplyDataReader = new SimpleGNSSDeviceCommandReplyDataReader( _loggerFactory, sqlDataReader );
                return simpleGNSSDeviceCommandReplyDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public GNSSDeviceCommandReplyObject? GetGNSSDeviceCommandReplyById( Guid id )
        {
            var simpleGNSSDeviceCommandReplyDataReader = GetGNSSDeviceCommandReplyByIdDataReader( id );
            using ( simpleGNSSDeviceCommandReplyDataReader )
            {
                if ( simpleGNSSDeviceCommandReplyDataReader.Read( ) )
                {
                    var result = simpleGNSSDeviceCommandReplyDataReader.GetDataObject( );
                    return result;
                }
            }
            return null;
        }

        public void GetGNSSDeviceCommandReplyById( Guid id, Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleGNSSDeviceCommandReplyDataReader = GetGNSSDeviceCommandReplyByIdDataReader( id );
                using ( simpleGNSSDeviceCommandReplyDataReader )
                {
                    if ( simpleGNSSDeviceCommandReplyDataReader.Read( ) )
                    {
                        destinationWriter.Write( true );
                        simpleGNSSDeviceCommandReplyDataReader.WriteTo( destinationWriter );
                    }
                    else
                    {
                        destinationWriter.Write( false );
                    }
                }
            }
        }

        public SimpleGNSSDeviceCommandReplyDataReader GetGNSSDeviceCommandReplyCollectionDataReader( )
        {
            const string sql = SimpleGNSSDeviceCommandReplyDataReader.BaseQuery; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleGNSSDeviceCommandReplyDataReader = new SimpleGNSSDeviceCommandReplyDataReader( _loggerFactory, sqlDataReader );
                return simpleGNSSDeviceCommandReplyDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public IList<GNSSDeviceCommandReplyObject> GetGNSSDeviceCommandReplyCollection( )
        {
            var result = new List<GNSSDeviceCommandReplyObject>( );
            var simpleGNSSDeviceCommandReplyDataReader = GetGNSSDeviceCommandReplyCollectionDataReader( );
            using ( simpleGNSSDeviceCommandReplyDataReader )
            {
                while ( simpleGNSSDeviceCommandReplyDataReader.Read( ) )
                {
                    var data = simpleGNSSDeviceCommandReplyDataReader.GetDataObject( );
                    result.Add( data );
                }
            }
            return result;
        }

        public void GetGNSSDeviceCommandReplyCollection( Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleGNSSDeviceCommandReplyDataReader = GetGNSSDeviceCommandReplyCollectionDataReader( );
                using ( simpleGNSSDeviceCommandReplyDataReader )
                {
                    simpleGNSSDeviceCommandReplyDataReader.WriteResultSetTo( destinationWriter );
                }
            }
        }

        public SimpleGNSSDeviceCommandReplyDataReader GetGNSSDeviceCommandReplyCollectionByGNSSDeviceDataReader( Guid gNSSDevice )
        {
            const string sql = SimpleGNSSDeviceCommandReplyDataReader.BaseQuery + " WHERE " +
                    SimpleGNSSDeviceCommandReplyDataReader.ViewAliasName + ".[GNSSDevice] = @gNSSDevice " +
                    " ORDER BY " + SimpleGNSSDeviceCommandReplyDataReader.ViewAliasName + ".[GNSSDevice]," +SimpleGNSSDeviceCommandReplyDataReader.ViewAliasName + ".[Timestamp]," +SimpleGNSSDeviceCommandReplyDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var gNSSDeviceParameter = sqlCommandParameters.AddReference( "@gNSSDevice", gNSSDevice );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleGNSSDeviceCommandReplyDataReader = new SimpleGNSSDeviceCommandReplyDataReader( _loggerFactory, sqlDataReader );
                return simpleGNSSDeviceCommandReplyDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<GNSSDeviceCommandReplyObject> GetGNSSDeviceCommandReplyCollectionByGNSSDevice( Guid gNSSDevice )
        {
            throw new NotImplementedException( );
        }
        public SimpleGNSSDeviceCommandReplyDataReader GetGNSSDeviceCommandReplyCollectionByGNSSDeviceAndTimestampDataReader( Guid gNSSDevice, DateTime timestamp )
        {
            const string sql = SimpleGNSSDeviceCommandReplyDataReader.BaseQuery + " WHERE " +
                    SimpleGNSSDeviceCommandReplyDataReader.ViewAliasName + ".[GNSSDevice] = @gNSSDevice AND " +
                    SimpleGNSSDeviceCommandReplyDataReader.ViewAliasName + ".[Timestamp] = @timestamp " +
                    " ORDER BY " + SimpleGNSSDeviceCommandReplyDataReader.ViewAliasName + ".[GNSSDevice]," +SimpleGNSSDeviceCommandReplyDataReader.ViewAliasName + ".[Timestamp]," +SimpleGNSSDeviceCommandReplyDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var gNSSDeviceParameter = sqlCommandParameters.AddReference( "@gNSSDevice", gNSSDevice );
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@timestamp", timestamp );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleGNSSDeviceCommandReplyDataReader = new SimpleGNSSDeviceCommandReplyDataReader( _loggerFactory, sqlDataReader );
                return simpleGNSSDeviceCommandReplyDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<GNSSDeviceCommandReplyObject> GetGNSSDeviceCommandReplyCollectionByGNSSDeviceAndTimestamp( Guid gNSSDevice, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<GNSSDeviceCommandReplyObject> GetGNSSDeviceCommandReplyCollectionByGNSSDeviceAtTimestamp( Guid gNSSDevice, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<GNSSDeviceCommandReplyObject> GetGNSSDeviceCommandReplyCollectionByGNSSDeviceFromTimestamp( Guid gNSSDevice, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<GNSSDeviceCommandReplyObject> GetGNSSDeviceCommandReplyCollectionByGNSSDeviceUntilTimestamp( Guid gNSSDevice, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<GNSSDeviceCommandReplyObject> GetGNSSDeviceCommandReplyCollectionByGNSSDeviceOverTimestamp( Guid gNSSDevice, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException( );
        }
        public SimpleGNSSDeviceCommandReplyDataReader GetGNSSDeviceCommandReplyCollectionByTimestampDataReader( DateTime timestamp )
        {
            const string sql = SimpleGNSSDeviceCommandReplyDataReader.BaseQuery + " WHERE " +
                    SimpleGNSSDeviceCommandReplyDataReader.ViewAliasName + ".[Timestamp] = @timestamp " +
                    " ORDER BY " + SimpleGNSSDeviceCommandReplyDataReader.ViewAliasName + ".[Timestamp]," +SimpleGNSSDeviceCommandReplyDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@timestamp", timestamp );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleGNSSDeviceCommandReplyDataReader = new SimpleGNSSDeviceCommandReplyDataReader( _loggerFactory, sqlDataReader );
                return simpleGNSSDeviceCommandReplyDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<GNSSDeviceCommandReplyObject> GetGNSSDeviceCommandReplyCollectionByTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<GNSSDeviceCommandReplyObject> GetGNSSDeviceCommandReplyCollectionAtTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<GNSSDeviceCommandReplyObject> GetGNSSDeviceCommandReplyCollectionFromTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<GNSSDeviceCommandReplyObject> GetGNSSDeviceCommandReplyCollectionUntilTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<GNSSDeviceCommandReplyObject> GetGNSSDeviceCommandReplyCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException( );
        }
        public SimpleGNSSDeviceCommandReplyDataReader GetGNSSDeviceCommandReplyByCommandDataReader( Guid command )
        {
            const string sql = SimpleGNSSDeviceCommandReplyDataReader.BaseQuery + " WHERE " +
                    SimpleGNSSDeviceCommandReplyDataReader.ViewAliasName + ".[Command] = @command " +
                    " ORDER BY " + SimpleGNSSDeviceCommandReplyDataReader.ViewAliasName + ".[Command]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var commandParameter = sqlCommandParameters.AddReference( "@command", command );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleGNSSDeviceCommandReplyDataReader = new SimpleGNSSDeviceCommandReplyDataReader( _loggerFactory, sqlDataReader );
                return simpleGNSSDeviceCommandReplyDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public GNSSDeviceCommandReplyObject? GetGNSSDeviceCommandReplyByCommand( Guid command )
        {
            throw new NotImplementedException( );
        }
        // ---------------------------------------------------------------------
        // GNSSDeviceConfiguration queries
        // ---------------------------------------------------------------------
        public SimpleGNSSDeviceConfigurationDataReader GetGNSSDeviceConfigurationByIdDataReader( Guid id )
        {
            const string sql = SimpleGNSSDeviceConfigurationDataReader.BaseQuery + "WHERE " + SimpleGNSSDeviceConfigurationDataReader.ViewAliasName + ".[Id] = @id"; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                sqlCommandParameters.AddGuid( "@id", id );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleGNSSDeviceConfigurationDataReader = new SimpleGNSSDeviceConfigurationDataReader( _loggerFactory, sqlDataReader );
                return simpleGNSSDeviceConfigurationDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public GNSSDeviceConfigurationObject? GetGNSSDeviceConfigurationById( Guid id )
        {
            var simpleGNSSDeviceConfigurationDataReader = GetGNSSDeviceConfigurationByIdDataReader( id );
            using ( simpleGNSSDeviceConfigurationDataReader )
            {
                if ( simpleGNSSDeviceConfigurationDataReader.Read( ) )
                {
                    var result = simpleGNSSDeviceConfigurationDataReader.GetDataObject( );
                    return result;
                }
            }
            return null;
        }

        public void GetGNSSDeviceConfigurationById( Guid id, Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleGNSSDeviceConfigurationDataReader = GetGNSSDeviceConfigurationByIdDataReader( id );
                using ( simpleGNSSDeviceConfigurationDataReader )
                {
                    if ( simpleGNSSDeviceConfigurationDataReader.Read( ) )
                    {
                        destinationWriter.Write( true );
                        simpleGNSSDeviceConfigurationDataReader.WriteTo( destinationWriter );
                    }
                    else
                    {
                        destinationWriter.Write( false );
                    }
                }
            }
        }

        public SimpleGNSSDeviceConfigurationDataReader GetGNSSDeviceConfigurationCollectionDataReader( )
        {
            const string sql = SimpleGNSSDeviceConfigurationDataReader.BaseQuery; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleGNSSDeviceConfigurationDataReader = new SimpleGNSSDeviceConfigurationDataReader( _loggerFactory, sqlDataReader );
                return simpleGNSSDeviceConfigurationDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public IList<GNSSDeviceConfigurationObject> GetGNSSDeviceConfigurationCollection( )
        {
            var result = new List<GNSSDeviceConfigurationObject>( );
            var simpleGNSSDeviceConfigurationDataReader = GetGNSSDeviceConfigurationCollectionDataReader( );
            using ( simpleGNSSDeviceConfigurationDataReader )
            {
                while ( simpleGNSSDeviceConfigurationDataReader.Read( ) )
                {
                    var data = simpleGNSSDeviceConfigurationDataReader.GetDataObject( );
                    result.Add( data );
                }
            }
            return result;
        }

        public void GetGNSSDeviceConfigurationCollection( Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleGNSSDeviceConfigurationDataReader = GetGNSSDeviceConfigurationCollectionDataReader( );
                using ( simpleGNSSDeviceConfigurationDataReader )
                {
                    simpleGNSSDeviceConfigurationDataReader.WriteResultSetTo( destinationWriter );
                }
            }
        }

        public SimpleGNSSDeviceConfigurationDataReader GetGNSSDeviceConfigurationCollectionByGNSSDeviceDataReader( Guid gNSSDevice )
        {
            const string sql = SimpleGNSSDeviceConfigurationDataReader.BaseQuery + " WHERE " +
                    SimpleGNSSDeviceConfigurationDataReader.ViewAliasName + ".[GNSSDevice] = @gNSSDevice " +
                    " ORDER BY " + SimpleGNSSDeviceConfigurationDataReader.ViewAliasName + ".[GNSSDevice]," +SimpleGNSSDeviceConfigurationDataReader.ViewAliasName + ".[Timestamp]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var gNSSDeviceParameter = sqlCommandParameters.AddReference( "@gNSSDevice", gNSSDevice );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleGNSSDeviceConfigurationDataReader = new SimpleGNSSDeviceConfigurationDataReader( _loggerFactory, sqlDataReader );
                return simpleGNSSDeviceConfigurationDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<GNSSDeviceConfigurationObject> GetGNSSDeviceConfigurationCollectionByGNSSDevice( Guid gNSSDevice )
        {
            throw new NotImplementedException( );
        }
        public SimpleGNSSDeviceConfigurationDataReader GetGNSSDeviceConfigurationByGNSSDeviceAndTimestampDataReader( Guid gNSSDevice, DateTime timestamp )
        {
            const string sql = SimpleGNSSDeviceConfigurationDataReader.BaseQuery + " WHERE " +
                    SimpleGNSSDeviceConfigurationDataReader.ViewAliasName + ".[GNSSDevice] = @gNSSDevice AND " +
                    SimpleGNSSDeviceConfigurationDataReader.ViewAliasName + ".[Timestamp] = @timestamp " +
                    " ORDER BY " + SimpleGNSSDeviceConfigurationDataReader.ViewAliasName + ".[GNSSDevice]," +SimpleGNSSDeviceConfigurationDataReader.ViewAliasName + ".[Timestamp]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var gNSSDeviceParameter = sqlCommandParameters.AddReference( "@gNSSDevice", gNSSDevice );
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@timestamp", timestamp );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleGNSSDeviceConfigurationDataReader = new SimpleGNSSDeviceConfigurationDataReader( _loggerFactory, sqlDataReader );
                return simpleGNSSDeviceConfigurationDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public GNSSDeviceConfigurationObject? GetGNSSDeviceConfigurationByGNSSDeviceAndTimestamp( Guid gNSSDevice, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public GNSSDeviceConfigurationObject? GetGNSSDeviceConfigurationByGNSSDeviceAtTimestamp( Guid gNSSDevice, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<GNSSDeviceConfigurationObject> GetGNSSDeviceConfigurationByGNSSDeviceFromTimestamp( Guid gNSSDevice, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<GNSSDeviceConfigurationObject> GetGNSSDeviceConfigurationByGNSSDeviceUntilTimestamp( Guid gNSSDevice, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<GNSSDeviceConfigurationObject> GetGNSSDeviceConfigurationByGNSSDeviceOverTimestamp( Guid gNSSDevice, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException( );
        }
        public SimpleGNSSDeviceConfigurationDataReader GetGNSSDeviceConfigurationCollectionByTimestampDataReader( DateTime timestamp )
        {
            const string sql = SimpleGNSSDeviceConfigurationDataReader.BaseQuery + " WHERE " +
                    SimpleGNSSDeviceConfigurationDataReader.ViewAliasName + ".[Timestamp] = @timestamp " +
                    " ORDER BY " + SimpleGNSSDeviceConfigurationDataReader.ViewAliasName + ".[Timestamp]," +SimpleGNSSDeviceConfigurationDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@timestamp", timestamp );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleGNSSDeviceConfigurationDataReader = new SimpleGNSSDeviceConfigurationDataReader( _loggerFactory, sqlDataReader );
                return simpleGNSSDeviceConfigurationDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<GNSSDeviceConfigurationObject> GetGNSSDeviceConfigurationCollectionByTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<GNSSDeviceConfigurationObject> GetGNSSDeviceConfigurationCollectionAtTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<GNSSDeviceConfigurationObject> GetGNSSDeviceConfigurationCollectionFromTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<GNSSDeviceConfigurationObject> GetGNSSDeviceConfigurationCollectionUntilTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<GNSSDeviceConfigurationObject> GetGNSSDeviceConfigurationCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException( );
        }
        // ---------------------------------------------------------------------
        // GuidTimeseriesValue queries
        // ---------------------------------------------------------------------
        public SimpleGuidTimeseriesValueDataReader GetGuidTimeseriesValueByIdDataReader( Guid id )
        {
            const string sql = SimpleGuidTimeseriesValueDataReader.BaseQuery + "WHERE " + SimpleGuidTimeseriesValueDataReader.ViewAliasName + ".[Id] = @id"; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                sqlCommandParameters.AddGuid( "@id", id );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleGuidTimeseriesValueDataReader = new SimpleGuidTimeseriesValueDataReader( _loggerFactory, sqlDataReader );
                return simpleGuidTimeseriesValueDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public GuidTimeseriesValueObject? GetGuidTimeseriesValueById( Guid id )
        {
            var simpleGuidTimeseriesValueDataReader = GetGuidTimeseriesValueByIdDataReader( id );
            using ( simpleGuidTimeseriesValueDataReader )
            {
                if ( simpleGuidTimeseriesValueDataReader.Read( ) )
                {
                    var result = simpleGuidTimeseriesValueDataReader.GetDataObject( );
                    return result;
                }
            }
            return null;
        }

        public void GetGuidTimeseriesValueById( Guid id, Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleGuidTimeseriesValueDataReader = GetGuidTimeseriesValueByIdDataReader( id );
                using ( simpleGuidTimeseriesValueDataReader )
                {
                    if ( simpleGuidTimeseriesValueDataReader.Read( ) )
                    {
                        destinationWriter.Write( true );
                        simpleGuidTimeseriesValueDataReader.WriteTo( destinationWriter );
                    }
                    else
                    {
                        destinationWriter.Write( false );
                    }
                }
            }
        }

        public SimpleGuidTimeseriesValueDataReader GetGuidTimeseriesValueCollectionDataReader( )
        {
            const string sql = SimpleGuidTimeseriesValueDataReader.BaseQuery; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleGuidTimeseriesValueDataReader = new SimpleGuidTimeseriesValueDataReader( _loggerFactory, sqlDataReader );
                return simpleGuidTimeseriesValueDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public IList<GuidTimeseriesValueObject> GetGuidTimeseriesValueCollection( )
        {
            var result = new List<GuidTimeseriesValueObject>( );
            var simpleGuidTimeseriesValueDataReader = GetGuidTimeseriesValueCollectionDataReader( );
            using ( simpleGuidTimeseriesValueDataReader )
            {
                while ( simpleGuidTimeseriesValueDataReader.Read( ) )
                {
                    var data = simpleGuidTimeseriesValueDataReader.GetDataObject( );
                    result.Add( data );
                }
            }
            return result;
        }

        public void GetGuidTimeseriesValueCollection( Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleGuidTimeseriesValueDataReader = GetGuidTimeseriesValueCollectionDataReader( );
                using ( simpleGuidTimeseriesValueDataReader )
                {
                    simpleGuidTimeseriesValueDataReader.WriteResultSetTo( destinationWriter );
                }
            }
        }

        public SimpleGuidTimeseriesValueDataReader GetGuidTimeseriesValueCollectionByTimeseriesDataReader( Guid timeseries )
        {
            const string sql = SimpleGuidTimeseriesValueDataReader.BaseQuery + " WHERE " +
                    SimpleGuidTimeseriesValueDataReader.ViewAliasName + ".[Timeseries] = @timeseries " +
                    " ORDER BY " + SimpleGuidTimeseriesValueDataReader.ViewAliasName + ".[Timeseries]," +SimpleGuidTimeseriesValueDataReader.ViewAliasName + ".[Timestamp]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var timeseriesParameter = sqlCommandParameters.AddReference( "@timeseries", timeseries );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleGuidTimeseriesValueDataReader = new SimpleGuidTimeseriesValueDataReader( _loggerFactory, sqlDataReader );
                return simpleGuidTimeseriesValueDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<GuidTimeseriesValueObject> GetGuidTimeseriesValueCollectionByTimeseries( Guid timeseries )
        {
            throw new NotImplementedException( );
        }
        public SimpleGuidTimeseriesValueDataReader GetGuidTimeseriesValueByTimeseriesAndTimestampDataReader( Guid timeseries, DateTime timestamp )
        {
            const string sql = SimpleGuidTimeseriesValueDataReader.BaseQuery + " WHERE " +
                    SimpleGuidTimeseriesValueDataReader.ViewAliasName + ".[Timeseries] = @timeseries AND " +
                    SimpleGuidTimeseriesValueDataReader.ViewAliasName + ".[Timestamp] = @timestamp " +
                    " ORDER BY " + SimpleGuidTimeseriesValueDataReader.ViewAliasName + ".[Timeseries]," +SimpleGuidTimeseriesValueDataReader.ViewAliasName + ".[Timestamp]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var timeseriesParameter = sqlCommandParameters.AddReference( "@timeseries", timeseries );
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@timestamp", timestamp );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleGuidTimeseriesValueDataReader = new SimpleGuidTimeseriesValueDataReader( _loggerFactory, sqlDataReader );
                return simpleGuidTimeseriesValueDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public GuidTimeseriesValueObject? GetGuidTimeseriesValueByTimeseriesAndTimestamp( Guid timeseries, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public GuidTimeseriesValueObject? GetGuidTimeseriesValueByTimeseriesAtTimestamp( Guid timeseries, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<GuidTimeseriesValueObject> GetGuidTimeseriesValueByTimeseriesFromTimestamp( Guid timeseries, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<GuidTimeseriesValueObject> GetGuidTimeseriesValueByTimeseriesUntilTimestamp( Guid timeseries, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<GuidTimeseriesValueObject> GetGuidTimeseriesValueByTimeseriesOverTimestamp( Guid timeseries, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException( );
        }
        public SimpleGuidTimeseriesValueDataReader GetGuidTimeseriesValueCollectionByTimestampDataReader( DateTime timestamp )
        {
            const string sql = SimpleGuidTimeseriesValueDataReader.BaseQuery + " WHERE " +
                    SimpleGuidTimeseriesValueDataReader.ViewAliasName + ".[Timestamp] = @timestamp " +
                    " ORDER BY " + SimpleGuidTimeseriesValueDataReader.ViewAliasName + ".[Timestamp]," +SimpleGuidTimeseriesValueDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@timestamp", timestamp );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleGuidTimeseriesValueDataReader = new SimpleGuidTimeseriesValueDataReader( _loggerFactory, sqlDataReader );
                return simpleGuidTimeseriesValueDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<GuidTimeseriesValueObject> GetGuidTimeseriesValueCollectionByTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<GuidTimeseriesValueObject> GetGuidTimeseriesValueCollectionAtTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<GuidTimeseriesValueObject> GetGuidTimeseriesValueCollectionFromTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<GuidTimeseriesValueObject> GetGuidTimeseriesValueCollectionUntilTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<GuidTimeseriesValueObject> GetGuidTimeseriesValueCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException( );
        }
        // ---------------------------------------------------------------------
        // GyroDeviceCommand queries
        // ---------------------------------------------------------------------
        public SimpleGyroDeviceCommandDataReader GetGyroDeviceCommandByIdDataReader( Guid id )
        {
            const string sql = SimpleGyroDeviceCommandDataReader.BaseQuery + "WHERE " + SimpleGyroDeviceCommandDataReader.ViewAliasName + ".[Id] = @id"; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                sqlCommandParameters.AddGuid( "@id", id );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleGyroDeviceCommandDataReader = new SimpleGyroDeviceCommandDataReader( _loggerFactory, sqlDataReader );
                return simpleGyroDeviceCommandDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public GyroDeviceCommandObject? GetGyroDeviceCommandById( Guid id )
        {
            var simpleGyroDeviceCommandDataReader = GetGyroDeviceCommandByIdDataReader( id );
            using ( simpleGyroDeviceCommandDataReader )
            {
                if ( simpleGyroDeviceCommandDataReader.Read( ) )
                {
                    var result = simpleGyroDeviceCommandDataReader.GetDataObject( );
                    return result;
                }
            }
            return null;
        }

        public void GetGyroDeviceCommandById( Guid id, Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleGyroDeviceCommandDataReader = GetGyroDeviceCommandByIdDataReader( id );
                using ( simpleGyroDeviceCommandDataReader )
                {
                    if ( simpleGyroDeviceCommandDataReader.Read( ) )
                    {
                        destinationWriter.Write( true );
                        simpleGyroDeviceCommandDataReader.WriteTo( destinationWriter );
                    }
                    else
                    {
                        destinationWriter.Write( false );
                    }
                }
            }
        }

        public SimpleGyroDeviceCommandDataReader GetGyroDeviceCommandCollectionDataReader( )
        {
            const string sql = SimpleGyroDeviceCommandDataReader.BaseQuery; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleGyroDeviceCommandDataReader = new SimpleGyroDeviceCommandDataReader( _loggerFactory, sqlDataReader );
                return simpleGyroDeviceCommandDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public IList<GyroDeviceCommandObject> GetGyroDeviceCommandCollection( )
        {
            var result = new List<GyroDeviceCommandObject>( );
            var simpleGyroDeviceCommandDataReader = GetGyroDeviceCommandCollectionDataReader( );
            using ( simpleGyroDeviceCommandDataReader )
            {
                while ( simpleGyroDeviceCommandDataReader.Read( ) )
                {
                    var data = simpleGyroDeviceCommandDataReader.GetDataObject( );
                    result.Add( data );
                }
            }
            return result;
        }

        public void GetGyroDeviceCommandCollection( Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleGyroDeviceCommandDataReader = GetGyroDeviceCommandCollectionDataReader( );
                using ( simpleGyroDeviceCommandDataReader )
                {
                    simpleGyroDeviceCommandDataReader.WriteResultSetTo( destinationWriter );
                }
            }
        }

        public SimpleGyroDeviceCommandDataReader GetGyroDeviceCommandCollectionByGyroDeviceDataReader( Guid gyroDevice )
        {
            const string sql = SimpleGyroDeviceCommandDataReader.BaseQuery + " WHERE " +
                    SimpleGyroDeviceCommandDataReader.ViewAliasName + ".[GyroDevice] = @gyroDevice " +
                    " ORDER BY " + SimpleGyroDeviceCommandDataReader.ViewAliasName + ".[GyroDevice]," +SimpleGyroDeviceCommandDataReader.ViewAliasName + ".[Timestamp]," +SimpleGyroDeviceCommandDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var gyroDeviceParameter = sqlCommandParameters.AddReference( "@gyroDevice", gyroDevice );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleGyroDeviceCommandDataReader = new SimpleGyroDeviceCommandDataReader( _loggerFactory, sqlDataReader );
                return simpleGyroDeviceCommandDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<GyroDeviceCommandObject> GetGyroDeviceCommandCollectionByGyroDevice( Guid gyroDevice )
        {
            throw new NotImplementedException( );
        }
        public SimpleGyroDeviceCommandDataReader GetGyroDeviceCommandCollectionByGyroDeviceAndTimestampDataReader( Guid gyroDevice, DateTime timestamp )
        {
            const string sql = SimpleGyroDeviceCommandDataReader.BaseQuery + " WHERE " +
                    SimpleGyroDeviceCommandDataReader.ViewAliasName + ".[GyroDevice] = @gyroDevice AND " +
                    SimpleGyroDeviceCommandDataReader.ViewAliasName + ".[Timestamp] = @timestamp " +
                    " ORDER BY " + SimpleGyroDeviceCommandDataReader.ViewAliasName + ".[GyroDevice]," +SimpleGyroDeviceCommandDataReader.ViewAliasName + ".[Timestamp]," +SimpleGyroDeviceCommandDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var gyroDeviceParameter = sqlCommandParameters.AddReference( "@gyroDevice", gyroDevice );
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@timestamp", timestamp );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleGyroDeviceCommandDataReader = new SimpleGyroDeviceCommandDataReader( _loggerFactory, sqlDataReader );
                return simpleGyroDeviceCommandDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<GyroDeviceCommandObject> GetGyroDeviceCommandCollectionByGyroDeviceAndTimestamp( Guid gyroDevice, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<GyroDeviceCommandObject> GetGyroDeviceCommandCollectionByGyroDeviceAtTimestamp( Guid gyroDevice, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<GyroDeviceCommandObject> GetGyroDeviceCommandCollectionByGyroDeviceFromTimestamp( Guid gyroDevice, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<GyroDeviceCommandObject> GetGyroDeviceCommandCollectionByGyroDeviceUntilTimestamp( Guid gyroDevice, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<GyroDeviceCommandObject> GetGyroDeviceCommandCollectionByGyroDeviceOverTimestamp( Guid gyroDevice, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException( );
        }
        public SimpleGyroDeviceCommandDataReader GetGyroDeviceCommandCollectionByTimestampDataReader( DateTime timestamp )
        {
            const string sql = SimpleGyroDeviceCommandDataReader.BaseQuery + " WHERE " +
                    SimpleGyroDeviceCommandDataReader.ViewAliasName + ".[Timestamp] = @timestamp " +
                    " ORDER BY " + SimpleGyroDeviceCommandDataReader.ViewAliasName + ".[Timestamp]," +SimpleGyroDeviceCommandDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@timestamp", timestamp );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleGyroDeviceCommandDataReader = new SimpleGyroDeviceCommandDataReader( _loggerFactory, sqlDataReader );
                return simpleGyroDeviceCommandDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<GyroDeviceCommandObject> GetGyroDeviceCommandCollectionByTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<GyroDeviceCommandObject> GetGyroDeviceCommandCollectionAtTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<GyroDeviceCommandObject> GetGyroDeviceCommandCollectionFromTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<GyroDeviceCommandObject> GetGyroDeviceCommandCollectionUntilTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<GyroDeviceCommandObject> GetGyroDeviceCommandCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException( );
        }
        public SimpleGyroDeviceCommandDataReader GetGyroDeviceCommandCollectionByReplyDataReader( Guid reply )
        {
            const string sql = SimpleGyroDeviceCommandDataReader.BaseQuery + " WHERE " +
                    SimpleGyroDeviceCommandDataReader.ViewAliasName + ".[Reply] = @reply " +
                    " ORDER BY " + SimpleGyroDeviceCommandDataReader.ViewAliasName + ".[Reply]," +SimpleGyroDeviceCommandDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var replyParameter = sqlCommandParameters.AddReference( "@reply", reply );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleGyroDeviceCommandDataReader = new SimpleGyroDeviceCommandDataReader( _loggerFactory, sqlDataReader );
                return simpleGyroDeviceCommandDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<GyroDeviceCommandObject> GetGyroDeviceCommandCollectionByReply( Guid reply )
        {
            throw new NotImplementedException( );
        }
        // ---------------------------------------------------------------------
        // GyroDeviceCommandReply queries
        // ---------------------------------------------------------------------
        public SimpleGyroDeviceCommandReplyDataReader GetGyroDeviceCommandReplyByIdDataReader( Guid id )
        {
            const string sql = SimpleGyroDeviceCommandReplyDataReader.BaseQuery + "WHERE " + SimpleGyroDeviceCommandReplyDataReader.ViewAliasName + ".[Id] = @id"; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                sqlCommandParameters.AddGuid( "@id", id );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleGyroDeviceCommandReplyDataReader = new SimpleGyroDeviceCommandReplyDataReader( _loggerFactory, sqlDataReader );
                return simpleGyroDeviceCommandReplyDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public GyroDeviceCommandReplyObject? GetGyroDeviceCommandReplyById( Guid id )
        {
            var simpleGyroDeviceCommandReplyDataReader = GetGyroDeviceCommandReplyByIdDataReader( id );
            using ( simpleGyroDeviceCommandReplyDataReader )
            {
                if ( simpleGyroDeviceCommandReplyDataReader.Read( ) )
                {
                    var result = simpleGyroDeviceCommandReplyDataReader.GetDataObject( );
                    return result;
                }
            }
            return null;
        }

        public void GetGyroDeviceCommandReplyById( Guid id, Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleGyroDeviceCommandReplyDataReader = GetGyroDeviceCommandReplyByIdDataReader( id );
                using ( simpleGyroDeviceCommandReplyDataReader )
                {
                    if ( simpleGyroDeviceCommandReplyDataReader.Read( ) )
                    {
                        destinationWriter.Write( true );
                        simpleGyroDeviceCommandReplyDataReader.WriteTo( destinationWriter );
                    }
                    else
                    {
                        destinationWriter.Write( false );
                    }
                }
            }
        }

        public SimpleGyroDeviceCommandReplyDataReader GetGyroDeviceCommandReplyCollectionDataReader( )
        {
            const string sql = SimpleGyroDeviceCommandReplyDataReader.BaseQuery; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleGyroDeviceCommandReplyDataReader = new SimpleGyroDeviceCommandReplyDataReader( _loggerFactory, sqlDataReader );
                return simpleGyroDeviceCommandReplyDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public IList<GyroDeviceCommandReplyObject> GetGyroDeviceCommandReplyCollection( )
        {
            var result = new List<GyroDeviceCommandReplyObject>( );
            var simpleGyroDeviceCommandReplyDataReader = GetGyroDeviceCommandReplyCollectionDataReader( );
            using ( simpleGyroDeviceCommandReplyDataReader )
            {
                while ( simpleGyroDeviceCommandReplyDataReader.Read( ) )
                {
                    var data = simpleGyroDeviceCommandReplyDataReader.GetDataObject( );
                    result.Add( data );
                }
            }
            return result;
        }

        public void GetGyroDeviceCommandReplyCollection( Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleGyroDeviceCommandReplyDataReader = GetGyroDeviceCommandReplyCollectionDataReader( );
                using ( simpleGyroDeviceCommandReplyDataReader )
                {
                    simpleGyroDeviceCommandReplyDataReader.WriteResultSetTo( destinationWriter );
                }
            }
        }

        public SimpleGyroDeviceCommandReplyDataReader GetGyroDeviceCommandReplyCollectionByGyroDeviceDataReader( Guid gyroDevice )
        {
            const string sql = SimpleGyroDeviceCommandReplyDataReader.BaseQuery + " WHERE " +
                    SimpleGyroDeviceCommandReplyDataReader.ViewAliasName + ".[GyroDevice] = @gyroDevice " +
                    " ORDER BY " + SimpleGyroDeviceCommandReplyDataReader.ViewAliasName + ".[GyroDevice]," +SimpleGyroDeviceCommandReplyDataReader.ViewAliasName + ".[Timestamp]," +SimpleGyroDeviceCommandReplyDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var gyroDeviceParameter = sqlCommandParameters.AddReference( "@gyroDevice", gyroDevice );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleGyroDeviceCommandReplyDataReader = new SimpleGyroDeviceCommandReplyDataReader( _loggerFactory, sqlDataReader );
                return simpleGyroDeviceCommandReplyDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<GyroDeviceCommandReplyObject> GetGyroDeviceCommandReplyCollectionByGyroDevice( Guid gyroDevice )
        {
            throw new NotImplementedException( );
        }
        public SimpleGyroDeviceCommandReplyDataReader GetGyroDeviceCommandReplyCollectionByGyroDeviceAndTimestampDataReader( Guid gyroDevice, DateTime timestamp )
        {
            const string sql = SimpleGyroDeviceCommandReplyDataReader.BaseQuery + " WHERE " +
                    SimpleGyroDeviceCommandReplyDataReader.ViewAliasName + ".[GyroDevice] = @gyroDevice AND " +
                    SimpleGyroDeviceCommandReplyDataReader.ViewAliasName + ".[Timestamp] = @timestamp " +
                    " ORDER BY " + SimpleGyroDeviceCommandReplyDataReader.ViewAliasName + ".[GyroDevice]," +SimpleGyroDeviceCommandReplyDataReader.ViewAliasName + ".[Timestamp]," +SimpleGyroDeviceCommandReplyDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var gyroDeviceParameter = sqlCommandParameters.AddReference( "@gyroDevice", gyroDevice );
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@timestamp", timestamp );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleGyroDeviceCommandReplyDataReader = new SimpleGyroDeviceCommandReplyDataReader( _loggerFactory, sqlDataReader );
                return simpleGyroDeviceCommandReplyDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<GyroDeviceCommandReplyObject> GetGyroDeviceCommandReplyCollectionByGyroDeviceAndTimestamp( Guid gyroDevice, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<GyroDeviceCommandReplyObject> GetGyroDeviceCommandReplyCollectionByGyroDeviceAtTimestamp( Guid gyroDevice, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<GyroDeviceCommandReplyObject> GetGyroDeviceCommandReplyCollectionByGyroDeviceFromTimestamp( Guid gyroDevice, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<GyroDeviceCommandReplyObject> GetGyroDeviceCommandReplyCollectionByGyroDeviceUntilTimestamp( Guid gyroDevice, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<GyroDeviceCommandReplyObject> GetGyroDeviceCommandReplyCollectionByGyroDeviceOverTimestamp( Guid gyroDevice, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException( );
        }
        public SimpleGyroDeviceCommandReplyDataReader GetGyroDeviceCommandReplyCollectionByTimestampDataReader( DateTime timestamp )
        {
            const string sql = SimpleGyroDeviceCommandReplyDataReader.BaseQuery + " WHERE " +
                    SimpleGyroDeviceCommandReplyDataReader.ViewAliasName + ".[Timestamp] = @timestamp " +
                    " ORDER BY " + SimpleGyroDeviceCommandReplyDataReader.ViewAliasName + ".[Timestamp]," +SimpleGyroDeviceCommandReplyDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@timestamp", timestamp );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleGyroDeviceCommandReplyDataReader = new SimpleGyroDeviceCommandReplyDataReader( _loggerFactory, sqlDataReader );
                return simpleGyroDeviceCommandReplyDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<GyroDeviceCommandReplyObject> GetGyroDeviceCommandReplyCollectionByTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<GyroDeviceCommandReplyObject> GetGyroDeviceCommandReplyCollectionAtTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<GyroDeviceCommandReplyObject> GetGyroDeviceCommandReplyCollectionFromTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<GyroDeviceCommandReplyObject> GetGyroDeviceCommandReplyCollectionUntilTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<GyroDeviceCommandReplyObject> GetGyroDeviceCommandReplyCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException( );
        }
        public SimpleGyroDeviceCommandReplyDataReader GetGyroDeviceCommandReplyByCommandDataReader( Guid command )
        {
            const string sql = SimpleGyroDeviceCommandReplyDataReader.BaseQuery + " WHERE " +
                    SimpleGyroDeviceCommandReplyDataReader.ViewAliasName + ".[Command] = @command " +
                    " ORDER BY " + SimpleGyroDeviceCommandReplyDataReader.ViewAliasName + ".[Command]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var commandParameter = sqlCommandParameters.AddReference( "@command", command );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleGyroDeviceCommandReplyDataReader = new SimpleGyroDeviceCommandReplyDataReader( _loggerFactory, sqlDataReader );
                return simpleGyroDeviceCommandReplyDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public GyroDeviceCommandReplyObject? GetGyroDeviceCommandReplyByCommand( Guid command )
        {
            throw new NotImplementedException( );
        }
        // ---------------------------------------------------------------------
        // GyroDeviceConfiguration queries
        // ---------------------------------------------------------------------
        public SimpleGyroDeviceConfigurationDataReader GetGyroDeviceConfigurationByIdDataReader( Guid id )
        {
            const string sql = SimpleGyroDeviceConfigurationDataReader.BaseQuery + "WHERE " + SimpleGyroDeviceConfigurationDataReader.ViewAliasName + ".[Id] = @id"; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                sqlCommandParameters.AddGuid( "@id", id );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleGyroDeviceConfigurationDataReader = new SimpleGyroDeviceConfigurationDataReader( _loggerFactory, sqlDataReader );
                return simpleGyroDeviceConfigurationDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public GyroDeviceConfigurationObject? GetGyroDeviceConfigurationById( Guid id )
        {
            var simpleGyroDeviceConfigurationDataReader = GetGyroDeviceConfigurationByIdDataReader( id );
            using ( simpleGyroDeviceConfigurationDataReader )
            {
                if ( simpleGyroDeviceConfigurationDataReader.Read( ) )
                {
                    var result = simpleGyroDeviceConfigurationDataReader.GetDataObject( );
                    return result;
                }
            }
            return null;
        }

        public void GetGyroDeviceConfigurationById( Guid id, Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleGyroDeviceConfigurationDataReader = GetGyroDeviceConfigurationByIdDataReader( id );
                using ( simpleGyroDeviceConfigurationDataReader )
                {
                    if ( simpleGyroDeviceConfigurationDataReader.Read( ) )
                    {
                        destinationWriter.Write( true );
                        simpleGyroDeviceConfigurationDataReader.WriteTo( destinationWriter );
                    }
                    else
                    {
                        destinationWriter.Write( false );
                    }
                }
            }
        }

        public SimpleGyroDeviceConfigurationDataReader GetGyroDeviceConfigurationCollectionDataReader( )
        {
            const string sql = SimpleGyroDeviceConfigurationDataReader.BaseQuery; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleGyroDeviceConfigurationDataReader = new SimpleGyroDeviceConfigurationDataReader( _loggerFactory, sqlDataReader );
                return simpleGyroDeviceConfigurationDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public IList<GyroDeviceConfigurationObject> GetGyroDeviceConfigurationCollection( )
        {
            var result = new List<GyroDeviceConfigurationObject>( );
            var simpleGyroDeviceConfigurationDataReader = GetGyroDeviceConfigurationCollectionDataReader( );
            using ( simpleGyroDeviceConfigurationDataReader )
            {
                while ( simpleGyroDeviceConfigurationDataReader.Read( ) )
                {
                    var data = simpleGyroDeviceConfigurationDataReader.GetDataObject( );
                    result.Add( data );
                }
            }
            return result;
        }

        public void GetGyroDeviceConfigurationCollection( Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleGyroDeviceConfigurationDataReader = GetGyroDeviceConfigurationCollectionDataReader( );
                using ( simpleGyroDeviceConfigurationDataReader )
                {
                    simpleGyroDeviceConfigurationDataReader.WriteResultSetTo( destinationWriter );
                }
            }
        }

        public SimpleGyroDeviceConfigurationDataReader GetGyroDeviceConfigurationCollectionByGyroDeviceDataReader( Guid gyroDevice )
        {
            const string sql = SimpleGyroDeviceConfigurationDataReader.BaseQuery + " WHERE " +
                    SimpleGyroDeviceConfigurationDataReader.ViewAliasName + ".[GyroDevice] = @gyroDevice " +
                    " ORDER BY " + SimpleGyroDeviceConfigurationDataReader.ViewAliasName + ".[GyroDevice]," +SimpleGyroDeviceConfigurationDataReader.ViewAliasName + ".[Timestamp]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var gyroDeviceParameter = sqlCommandParameters.AddReference( "@gyroDevice", gyroDevice );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleGyroDeviceConfigurationDataReader = new SimpleGyroDeviceConfigurationDataReader( _loggerFactory, sqlDataReader );
                return simpleGyroDeviceConfigurationDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<GyroDeviceConfigurationObject> GetGyroDeviceConfigurationCollectionByGyroDevice( Guid gyroDevice )
        {
            throw new NotImplementedException( );
        }
        public SimpleGyroDeviceConfigurationDataReader GetGyroDeviceConfigurationByGyroDeviceAndTimestampDataReader( Guid gyroDevice, DateTime timestamp )
        {
            const string sql = SimpleGyroDeviceConfigurationDataReader.BaseQuery + " WHERE " +
                    SimpleGyroDeviceConfigurationDataReader.ViewAliasName + ".[GyroDevice] = @gyroDevice AND " +
                    SimpleGyroDeviceConfigurationDataReader.ViewAliasName + ".[Timestamp] = @timestamp " +
                    " ORDER BY " + SimpleGyroDeviceConfigurationDataReader.ViewAliasName + ".[GyroDevice]," +SimpleGyroDeviceConfigurationDataReader.ViewAliasName + ".[Timestamp]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var gyroDeviceParameter = sqlCommandParameters.AddReference( "@gyroDevice", gyroDevice );
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@timestamp", timestamp );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleGyroDeviceConfigurationDataReader = new SimpleGyroDeviceConfigurationDataReader( _loggerFactory, sqlDataReader );
                return simpleGyroDeviceConfigurationDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public GyroDeviceConfigurationObject? GetGyroDeviceConfigurationByGyroDeviceAndTimestamp( Guid gyroDevice, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public GyroDeviceConfigurationObject? GetGyroDeviceConfigurationByGyroDeviceAtTimestamp( Guid gyroDevice, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<GyroDeviceConfigurationObject> GetGyroDeviceConfigurationByGyroDeviceFromTimestamp( Guid gyroDevice, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<GyroDeviceConfigurationObject> GetGyroDeviceConfigurationByGyroDeviceUntilTimestamp( Guid gyroDevice, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<GyroDeviceConfigurationObject> GetGyroDeviceConfigurationByGyroDeviceOverTimestamp( Guid gyroDevice, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException( );
        }
        public SimpleGyroDeviceConfigurationDataReader GetGyroDeviceConfigurationCollectionByTimestampDataReader( DateTime timestamp )
        {
            const string sql = SimpleGyroDeviceConfigurationDataReader.BaseQuery + " WHERE " +
                    SimpleGyroDeviceConfigurationDataReader.ViewAliasName + ".[Timestamp] = @timestamp " +
                    " ORDER BY " + SimpleGyroDeviceConfigurationDataReader.ViewAliasName + ".[Timestamp]," +SimpleGyroDeviceConfigurationDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@timestamp", timestamp );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleGyroDeviceConfigurationDataReader = new SimpleGyroDeviceConfigurationDataReader( _loggerFactory, sqlDataReader );
                return simpleGyroDeviceConfigurationDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<GyroDeviceConfigurationObject> GetGyroDeviceConfigurationCollectionByTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<GyroDeviceConfigurationObject> GetGyroDeviceConfigurationCollectionAtTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<GyroDeviceConfigurationObject> GetGyroDeviceConfigurationCollectionFromTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<GyroDeviceConfigurationObject> GetGyroDeviceConfigurationCollectionUntilTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<GyroDeviceConfigurationObject> GetGyroDeviceConfigurationCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException( );
        }
        // ---------------------------------------------------------------------
        // Identity queries
        // ---------------------------------------------------------------------
        public ComplexIdentityDataReader GetIdentityByIdDataReader( Guid id )
        {
            const string sql = ComplexIdentityDataReader.BaseQuery + "WHERE " + ComplexIdentityDataReader.ViewAliasName + ".[Id] = @id"; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                sqlCommandParameters.AddGuid( "@id", id );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var complexIdentityDataReader = new ComplexIdentityDataReader( _loggerFactory, sqlDataReader );
                return complexIdentityDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public IdentityObject? GetIdentityById( Guid id )
        {
            var complexIdentityDataReader = GetIdentityByIdDataReader( id );
            using ( complexIdentityDataReader )
            {
                if ( complexIdentityDataReader.Read( ) )
                {
                    var result = complexIdentityDataReader.GetDataObject( );
                    return result;
                }
            }
            return null;
        }

        public void GetIdentityById( Guid id, Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var complexIdentityDataReader = GetIdentityByIdDataReader( id );
                using ( complexIdentityDataReader )
                {
                    if ( complexIdentityDataReader.Read( ) )
                    {
                        destinationWriter.Write( true );
                        complexIdentityDataReader.WriteTo( destinationWriter );
                    }
                    else
                    {
                        destinationWriter.Write( false );
                    }
                }
            }
        }

        public ComplexIdentityDataReader GetIdentityCollectionDataReader( )
        {
            const string sql = ComplexIdentityDataReader.BaseQuery; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var complexIdentityDataReader = new ComplexIdentityDataReader( _loggerFactory, sqlDataReader );
                return complexIdentityDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public IList<IdentityObject> GetIdentityCollection( )
        {
            var result = new List<IdentityObject>( );
            var complexIdentityDataReader = GetIdentityCollectionDataReader( );
            using ( complexIdentityDataReader )
            {
                while ( complexIdentityDataReader.Read( ) )
                {
                    var data = complexIdentityDataReader.GetDataObject( );
                    result.Add( data );
                }
            }
            return result;
        }

        public void GetIdentityCollection( Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var complexIdentityDataReader = GetIdentityCollectionDataReader( );
                using ( complexIdentityDataReader )
                {
                    complexIdentityDataReader.WriteResultSetTo( destinationWriter );
                }
            }
        }

        // ---------------------------------------------------------------------
        // Callsign queries
        // ---------------------------------------------------------------------
        public SimpleCallsignDataReader GetCallsignByIdDataReader( Guid id )
        {
            const string sql = SimpleCallsignDataReader.BaseQuery + "WHERE " + SimpleCallsignDataReader.ViewAliasName + ".[Id] = @id"; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                sqlCommandParameters.AddGuid( "@id", id );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleCallsignDataReader = new SimpleCallsignDataReader( _loggerFactory, sqlDataReader );
                return simpleCallsignDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public CallsignObject? GetCallsignById( Guid id )
        {
            var simpleCallsignDataReader = GetCallsignByIdDataReader( id );
            using ( simpleCallsignDataReader )
            {
                if ( simpleCallsignDataReader.Read( ) )
                {
                    var result = simpleCallsignDataReader.GetDataObject( );
                    return result;
                }
            }
            return null;
        }

        public void GetCallsignById( Guid id, Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleCallsignDataReader = GetCallsignByIdDataReader( id );
                using ( simpleCallsignDataReader )
                {
                    if ( simpleCallsignDataReader.Read( ) )
                    {
                        destinationWriter.Write( true );
                        simpleCallsignDataReader.WriteTo( destinationWriter );
                    }
                    else
                    {
                        destinationWriter.Write( false );
                    }
                }
            }
        }

        public SimpleCallsignDataReader GetCallsignCollectionDataReader( )
        {
            const string sql = SimpleCallsignDataReader.BaseQuery; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleCallsignDataReader = new SimpleCallsignDataReader( _loggerFactory, sqlDataReader );
                return simpleCallsignDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public IList<CallsignObject> GetCallsignCollection( )
        {
            var result = new List<CallsignObject>( );
            var simpleCallsignDataReader = GetCallsignCollectionDataReader( );
            using ( simpleCallsignDataReader )
            {
                while ( simpleCallsignDataReader.Read( ) )
                {
                    var data = simpleCallsignDataReader.GetDataObject( );
                    result.Add( data );
                }
            }
            return result;
        }

        public void GetCallsignCollection( Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleCallsignDataReader = GetCallsignCollectionDataReader( );
                using ( simpleCallsignDataReader )
                {
                    simpleCallsignDataReader.WriteResultSetTo( destinationWriter );
                }
            }
        }

        public SimpleCallsignDataReader GetCallsignByIdentifierDataReader( string identifier )
        {
            const string sql = SimpleCallsignDataReader.BaseQuery + " WHERE " +
                    SimpleCallsignDataReader.ViewAliasName + ".[Identifier] = @identifier " +
                    " ORDER BY " + SimpleCallsignDataReader.ViewAliasName + ".[Identifier]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var identifierParameter = sqlCommandParameters.AddNVarChar( "@identifier", identifier, 127 );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleCallsignDataReader = new SimpleCallsignDataReader( _loggerFactory, sqlDataReader );
                return simpleCallsignDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public CallsignObject? GetCallsignByIdentifier( string identifier )
        {
            throw new NotImplementedException( );
        }
        // ---------------------------------------------------------------------
        // InternationalMaritimeOrganizationNumber queries
        // ---------------------------------------------------------------------
        public SimpleInternationalMaritimeOrganizationNumberDataReader GetInternationalMaritimeOrganizationNumberByIdDataReader( Guid id )
        {
            const string sql = SimpleInternationalMaritimeOrganizationNumberDataReader.BaseQuery + "WHERE " + SimpleInternationalMaritimeOrganizationNumberDataReader.ViewAliasName + ".[Id] = @id"; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                sqlCommandParameters.AddGuid( "@id", id );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleInternationalMaritimeOrganizationNumberDataReader = new SimpleInternationalMaritimeOrganizationNumberDataReader( _loggerFactory, sqlDataReader );
                return simpleInternationalMaritimeOrganizationNumberDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public InternationalMaritimeOrganizationNumberObject? GetInternationalMaritimeOrganizationNumberById( Guid id )
        {
            var simpleInternationalMaritimeOrganizationNumberDataReader = GetInternationalMaritimeOrganizationNumberByIdDataReader( id );
            using ( simpleInternationalMaritimeOrganizationNumberDataReader )
            {
                if ( simpleInternationalMaritimeOrganizationNumberDataReader.Read( ) )
                {
                    var result = simpleInternationalMaritimeOrganizationNumberDataReader.GetDataObject( );
                    return result;
                }
            }
            return null;
        }

        public void GetInternationalMaritimeOrganizationNumberById( Guid id, Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleInternationalMaritimeOrganizationNumberDataReader = GetInternationalMaritimeOrganizationNumberByIdDataReader( id );
                using ( simpleInternationalMaritimeOrganizationNumberDataReader )
                {
                    if ( simpleInternationalMaritimeOrganizationNumberDataReader.Read( ) )
                    {
                        destinationWriter.Write( true );
                        simpleInternationalMaritimeOrganizationNumberDataReader.WriteTo( destinationWriter );
                    }
                    else
                    {
                        destinationWriter.Write( false );
                    }
                }
            }
        }

        public SimpleInternationalMaritimeOrganizationNumberDataReader GetInternationalMaritimeOrganizationNumberCollectionDataReader( )
        {
            const string sql = SimpleInternationalMaritimeOrganizationNumberDataReader.BaseQuery; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleInternationalMaritimeOrganizationNumberDataReader = new SimpleInternationalMaritimeOrganizationNumberDataReader( _loggerFactory, sqlDataReader );
                return simpleInternationalMaritimeOrganizationNumberDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public IList<InternationalMaritimeOrganizationNumberObject> GetInternationalMaritimeOrganizationNumberCollection( )
        {
            var result = new List<InternationalMaritimeOrganizationNumberObject>( );
            var simpleInternationalMaritimeOrganizationNumberDataReader = GetInternationalMaritimeOrganizationNumberCollectionDataReader( );
            using ( simpleInternationalMaritimeOrganizationNumberDataReader )
            {
                while ( simpleInternationalMaritimeOrganizationNumberDataReader.Read( ) )
                {
                    var data = simpleInternationalMaritimeOrganizationNumberDataReader.GetDataObject( );
                    result.Add( data );
                }
            }
            return result;
        }

        public void GetInternationalMaritimeOrganizationNumberCollection( Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleInternationalMaritimeOrganizationNumberDataReader = GetInternationalMaritimeOrganizationNumberCollectionDataReader( );
                using ( simpleInternationalMaritimeOrganizationNumberDataReader )
                {
                    simpleInternationalMaritimeOrganizationNumberDataReader.WriteResultSetTo( destinationWriter );
                }
            }
        }

        public SimpleInternationalMaritimeOrganizationNumberDataReader GetInternationalMaritimeOrganizationNumberByIdentifierDataReader( long identifier )
        {
            const string sql = SimpleInternationalMaritimeOrganizationNumberDataReader.BaseQuery + " WHERE " +
                    SimpleInternationalMaritimeOrganizationNumberDataReader.ViewAliasName + ".[Identifier] = @identifier " +
                    " ORDER BY " + SimpleInternationalMaritimeOrganizationNumberDataReader.ViewAliasName + ".[Identifier]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var identifierParameter = sqlCommandParameters.AddInt64( "@identifier", identifier );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleInternationalMaritimeOrganizationNumberDataReader = new SimpleInternationalMaritimeOrganizationNumberDataReader( _loggerFactory, sqlDataReader );
                return simpleInternationalMaritimeOrganizationNumberDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public InternationalMaritimeOrganizationNumberObject? GetInternationalMaritimeOrganizationNumberByIdentifier( long identifier )
        {
            throw new NotImplementedException( );
        }
        public IList<InternationalMaritimeOrganizationNumberObject> GetInternationalMaritimeOrganizationNumberFromIdentifier( long identifier )
        {
            throw new NotImplementedException( );
        }
        public IList<InternationalMaritimeOrganizationNumberObject> GetInternationalMaritimeOrganizationNumberUntilIdentifier( long identifier )
        {
            throw new NotImplementedException( );
        }
        public IList<InternationalMaritimeOrganizationNumberObject> GetInternationalMaritimeOrganizationNumberOverIdentifier( long fromIdentifier, long untilIdentifier )
        {
            throw new NotImplementedException( );
        }
        // ---------------------------------------------------------------------
        // MaritimeMobileServiceIdentity queries
        // ---------------------------------------------------------------------
        public SimpleMaritimeMobileServiceIdentityDataReader GetMaritimeMobileServiceIdentityByIdDataReader( Guid id )
        {
            const string sql = SimpleMaritimeMobileServiceIdentityDataReader.BaseQuery + "WHERE " + SimpleMaritimeMobileServiceIdentityDataReader.ViewAliasName + ".[Id] = @id"; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                sqlCommandParameters.AddGuid( "@id", id );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleMaritimeMobileServiceIdentityDataReader = new SimpleMaritimeMobileServiceIdentityDataReader( _loggerFactory, sqlDataReader );
                return simpleMaritimeMobileServiceIdentityDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public MaritimeMobileServiceIdentityObject? GetMaritimeMobileServiceIdentityById( Guid id )
        {
            var simpleMaritimeMobileServiceIdentityDataReader = GetMaritimeMobileServiceIdentityByIdDataReader( id );
            using ( simpleMaritimeMobileServiceIdentityDataReader )
            {
                if ( simpleMaritimeMobileServiceIdentityDataReader.Read( ) )
                {
                    var result = simpleMaritimeMobileServiceIdentityDataReader.GetDataObject( );
                    return result;
                }
            }
            return null;
        }

        public void GetMaritimeMobileServiceIdentityById( Guid id, Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleMaritimeMobileServiceIdentityDataReader = GetMaritimeMobileServiceIdentityByIdDataReader( id );
                using ( simpleMaritimeMobileServiceIdentityDataReader )
                {
                    if ( simpleMaritimeMobileServiceIdentityDataReader.Read( ) )
                    {
                        destinationWriter.Write( true );
                        simpleMaritimeMobileServiceIdentityDataReader.WriteTo( destinationWriter );
                    }
                    else
                    {
                        destinationWriter.Write( false );
                    }
                }
            }
        }

        public SimpleMaritimeMobileServiceIdentityDataReader GetMaritimeMobileServiceIdentityCollectionDataReader( )
        {
            const string sql = SimpleMaritimeMobileServiceIdentityDataReader.BaseQuery; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleMaritimeMobileServiceIdentityDataReader = new SimpleMaritimeMobileServiceIdentityDataReader( _loggerFactory, sqlDataReader );
                return simpleMaritimeMobileServiceIdentityDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public IList<MaritimeMobileServiceIdentityObject> GetMaritimeMobileServiceIdentityCollection( )
        {
            var result = new List<MaritimeMobileServiceIdentityObject>( );
            var simpleMaritimeMobileServiceIdentityDataReader = GetMaritimeMobileServiceIdentityCollectionDataReader( );
            using ( simpleMaritimeMobileServiceIdentityDataReader )
            {
                while ( simpleMaritimeMobileServiceIdentityDataReader.Read( ) )
                {
                    var data = simpleMaritimeMobileServiceIdentityDataReader.GetDataObject( );
                    result.Add( data );
                }
            }
            return result;
        }

        public void GetMaritimeMobileServiceIdentityCollection( Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleMaritimeMobileServiceIdentityDataReader = GetMaritimeMobileServiceIdentityCollectionDataReader( );
                using ( simpleMaritimeMobileServiceIdentityDataReader )
                {
                    simpleMaritimeMobileServiceIdentityDataReader.WriteResultSetTo( destinationWriter );
                }
            }
        }

        public SimpleMaritimeMobileServiceIdentityDataReader GetMaritimeMobileServiceIdentityByIdentifierDataReader( long identifier )
        {
            const string sql = SimpleMaritimeMobileServiceIdentityDataReader.BaseQuery + " WHERE " +
                    SimpleMaritimeMobileServiceIdentityDataReader.ViewAliasName + ".[Identifier] = @identifier " +
                    " ORDER BY " + SimpleMaritimeMobileServiceIdentityDataReader.ViewAliasName + ".[Identifier]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var identifierParameter = sqlCommandParameters.AddInt64( "@identifier", identifier );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleMaritimeMobileServiceIdentityDataReader = new SimpleMaritimeMobileServiceIdentityDataReader( _loggerFactory, sqlDataReader );
                return simpleMaritimeMobileServiceIdentityDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public MaritimeMobileServiceIdentityObject? GetMaritimeMobileServiceIdentityByIdentifier( long identifier )
        {
            throw new NotImplementedException( );
        }
        public IList<MaritimeMobileServiceIdentityObject> GetMaritimeMobileServiceIdentityFromIdentifier( long identifier )
        {
            throw new NotImplementedException( );
        }
        public IList<MaritimeMobileServiceIdentityObject> GetMaritimeMobileServiceIdentityUntilIdentifier( long identifier )
        {
            throw new NotImplementedException( );
        }
        public IList<MaritimeMobileServiceIdentityObject> GetMaritimeMobileServiceIdentityOverIdentifier( long fromIdentifier, long untilIdentifier )
        {
            throw new NotImplementedException( );
        }
        // ---------------------------------------------------------------------
        // Name queries
        // ---------------------------------------------------------------------
        public SimpleNameDataReader GetNameByIdDataReader( Guid id )
        {
            const string sql = SimpleNameDataReader.BaseQuery + "WHERE " + SimpleNameDataReader.ViewAliasName + ".[Id] = @id"; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                sqlCommandParameters.AddGuid( "@id", id );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleNameDataReader = new SimpleNameDataReader( _loggerFactory, sqlDataReader );
                return simpleNameDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public NameObject? GetNameById( Guid id )
        {
            var simpleNameDataReader = GetNameByIdDataReader( id );
            using ( simpleNameDataReader )
            {
                if ( simpleNameDataReader.Read( ) )
                {
                    var result = simpleNameDataReader.GetDataObject( );
                    return result;
                }
            }
            return null;
        }

        public void GetNameById( Guid id, Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleNameDataReader = GetNameByIdDataReader( id );
                using ( simpleNameDataReader )
                {
                    if ( simpleNameDataReader.Read( ) )
                    {
                        destinationWriter.Write( true );
                        simpleNameDataReader.WriteTo( destinationWriter );
                    }
                    else
                    {
                        destinationWriter.Write( false );
                    }
                }
            }
        }

        public SimpleNameDataReader GetNameCollectionDataReader( )
        {
            const string sql = SimpleNameDataReader.BaseQuery; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleNameDataReader = new SimpleNameDataReader( _loggerFactory, sqlDataReader );
                return simpleNameDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public IList<NameObject> GetNameCollection( )
        {
            var result = new List<NameObject>( );
            var simpleNameDataReader = GetNameCollectionDataReader( );
            using ( simpleNameDataReader )
            {
                while ( simpleNameDataReader.Read( ) )
                {
                    var data = simpleNameDataReader.GetDataObject( );
                    result.Add( data );
                }
            }
            return result;
        }

        public void GetNameCollection( Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleNameDataReader = GetNameCollectionDataReader( );
                using ( simpleNameDataReader )
                {
                    simpleNameDataReader.WriteResultSetTo( destinationWriter );
                }
            }
        }

        public SimpleNameDataReader GetNameByTextDataReader( string text )
        {
            const string sql = SimpleNameDataReader.BaseQuery + " WHERE " +
                    SimpleNameDataReader.ViewAliasName + ".[Text] = @text " +
                    " ORDER BY " + SimpleNameDataReader.ViewAliasName + ".[Text]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var textParameter = sqlCommandParameters.AddNVarChar( "@text", text, 127 );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleNameDataReader = new SimpleNameDataReader( _loggerFactory, sqlDataReader );
                return simpleNameDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public NameObject? GetNameByText( string text )
        {
            throw new NotImplementedException( );
        }
        // ---------------------------------------------------------------------
        // Int16TimeseriesValue queries
        // ---------------------------------------------------------------------
        public SimpleInt16TimeseriesValueDataReader GetInt16TimeseriesValueByIdDataReader( Guid id )
        {
            const string sql = SimpleInt16TimeseriesValueDataReader.BaseQuery + "WHERE " + SimpleInt16TimeseriesValueDataReader.ViewAliasName + ".[Id] = @id"; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                sqlCommandParameters.AddGuid( "@id", id );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleInt16TimeseriesValueDataReader = new SimpleInt16TimeseriesValueDataReader( _loggerFactory, sqlDataReader );
                return simpleInt16TimeseriesValueDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public Int16TimeseriesValueObject? GetInt16TimeseriesValueById( Guid id )
        {
            var simpleInt16TimeseriesValueDataReader = GetInt16TimeseriesValueByIdDataReader( id );
            using ( simpleInt16TimeseriesValueDataReader )
            {
                if ( simpleInt16TimeseriesValueDataReader.Read( ) )
                {
                    var result = simpleInt16TimeseriesValueDataReader.GetDataObject( );
                    return result;
                }
            }
            return null;
        }

        public void GetInt16TimeseriesValueById( Guid id, Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleInt16TimeseriesValueDataReader = GetInt16TimeseriesValueByIdDataReader( id );
                using ( simpleInt16TimeseriesValueDataReader )
                {
                    if ( simpleInt16TimeseriesValueDataReader.Read( ) )
                    {
                        destinationWriter.Write( true );
                        simpleInt16TimeseriesValueDataReader.WriteTo( destinationWriter );
                    }
                    else
                    {
                        destinationWriter.Write( false );
                    }
                }
            }
        }

        public SimpleInt16TimeseriesValueDataReader GetInt16TimeseriesValueCollectionDataReader( )
        {
            const string sql = SimpleInt16TimeseriesValueDataReader.BaseQuery; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleInt16TimeseriesValueDataReader = new SimpleInt16TimeseriesValueDataReader( _loggerFactory, sqlDataReader );
                return simpleInt16TimeseriesValueDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public IList<Int16TimeseriesValueObject> GetInt16TimeseriesValueCollection( )
        {
            var result = new List<Int16TimeseriesValueObject>( );
            var simpleInt16TimeseriesValueDataReader = GetInt16TimeseriesValueCollectionDataReader( );
            using ( simpleInt16TimeseriesValueDataReader )
            {
                while ( simpleInt16TimeseriesValueDataReader.Read( ) )
                {
                    var data = simpleInt16TimeseriesValueDataReader.GetDataObject( );
                    result.Add( data );
                }
            }
            return result;
        }

        public void GetInt16TimeseriesValueCollection( Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleInt16TimeseriesValueDataReader = GetInt16TimeseriesValueCollectionDataReader( );
                using ( simpleInt16TimeseriesValueDataReader )
                {
                    simpleInt16TimeseriesValueDataReader.WriteResultSetTo( destinationWriter );
                }
            }
        }

        public SimpleInt16TimeseriesValueDataReader GetInt16TimeseriesValueCollectionByTimeseriesDataReader( Guid timeseries )
        {
            const string sql = SimpleInt16TimeseriesValueDataReader.BaseQuery + " WHERE " +
                    SimpleInt16TimeseriesValueDataReader.ViewAliasName + ".[Timeseries] = @timeseries " +
                    " ORDER BY " + SimpleInt16TimeseriesValueDataReader.ViewAliasName + ".[Timeseries]," +SimpleInt16TimeseriesValueDataReader.ViewAliasName + ".[Timestamp]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var timeseriesParameter = sqlCommandParameters.AddReference( "@timeseries", timeseries );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleInt16TimeseriesValueDataReader = new SimpleInt16TimeseriesValueDataReader( _loggerFactory, sqlDataReader );
                return simpleInt16TimeseriesValueDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<Int16TimeseriesValueObject> GetInt16TimeseriesValueCollectionByTimeseries( Guid timeseries )
        {
            throw new NotImplementedException( );
        }
        public SimpleInt16TimeseriesValueDataReader GetInt16TimeseriesValueByTimeseriesAndTimestampDataReader( Guid timeseries, DateTime timestamp )
        {
            const string sql = SimpleInt16TimeseriesValueDataReader.BaseQuery + " WHERE " +
                    SimpleInt16TimeseriesValueDataReader.ViewAliasName + ".[Timeseries] = @timeseries AND " +
                    SimpleInt16TimeseriesValueDataReader.ViewAliasName + ".[Timestamp] = @timestamp " +
                    " ORDER BY " + SimpleInt16TimeseriesValueDataReader.ViewAliasName + ".[Timeseries]," +SimpleInt16TimeseriesValueDataReader.ViewAliasName + ".[Timestamp]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var timeseriesParameter = sqlCommandParameters.AddReference( "@timeseries", timeseries );
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@timestamp", timestamp );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleInt16TimeseriesValueDataReader = new SimpleInt16TimeseriesValueDataReader( _loggerFactory, sqlDataReader );
                return simpleInt16TimeseriesValueDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public Int16TimeseriesValueObject? GetInt16TimeseriesValueByTimeseriesAndTimestamp( Guid timeseries, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public Int16TimeseriesValueObject? GetInt16TimeseriesValueByTimeseriesAtTimestamp( Guid timeseries, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<Int16TimeseriesValueObject> GetInt16TimeseriesValueByTimeseriesFromTimestamp( Guid timeseries, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<Int16TimeseriesValueObject> GetInt16TimeseriesValueByTimeseriesUntilTimestamp( Guid timeseries, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<Int16TimeseriesValueObject> GetInt16TimeseriesValueByTimeseriesOverTimestamp( Guid timeseries, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException( );
        }
        public SimpleInt16TimeseriesValueDataReader GetInt16TimeseriesValueCollectionByTimestampDataReader( DateTime timestamp )
        {
            const string sql = SimpleInt16TimeseriesValueDataReader.BaseQuery + " WHERE " +
                    SimpleInt16TimeseriesValueDataReader.ViewAliasName + ".[Timestamp] = @timestamp " +
                    " ORDER BY " + SimpleInt16TimeseriesValueDataReader.ViewAliasName + ".[Timestamp]," +SimpleInt16TimeseriesValueDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@timestamp", timestamp );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleInt16TimeseriesValueDataReader = new SimpleInt16TimeseriesValueDataReader( _loggerFactory, sqlDataReader );
                return simpleInt16TimeseriesValueDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<Int16TimeseriesValueObject> GetInt16TimeseriesValueCollectionByTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<Int16TimeseriesValueObject> GetInt16TimeseriesValueCollectionAtTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<Int16TimeseriesValueObject> GetInt16TimeseriesValueCollectionFromTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<Int16TimeseriesValueObject> GetInt16TimeseriesValueCollectionUntilTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<Int16TimeseriesValueObject> GetInt16TimeseriesValueCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException( );
        }
        // ---------------------------------------------------------------------
        // Int32TimeseriesValue queries
        // ---------------------------------------------------------------------
        public SimpleInt32TimeseriesValueDataReader GetInt32TimeseriesValueByIdDataReader( Guid id )
        {
            const string sql = SimpleInt32TimeseriesValueDataReader.BaseQuery + "WHERE " + SimpleInt32TimeseriesValueDataReader.ViewAliasName + ".[Id] = @id"; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                sqlCommandParameters.AddGuid( "@id", id );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleInt32TimeseriesValueDataReader = new SimpleInt32TimeseriesValueDataReader( _loggerFactory, sqlDataReader );
                return simpleInt32TimeseriesValueDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public Int32TimeseriesValueObject? GetInt32TimeseriesValueById( Guid id )
        {
            var simpleInt32TimeseriesValueDataReader = GetInt32TimeseriesValueByIdDataReader( id );
            using ( simpleInt32TimeseriesValueDataReader )
            {
                if ( simpleInt32TimeseriesValueDataReader.Read( ) )
                {
                    var result = simpleInt32TimeseriesValueDataReader.GetDataObject( );
                    return result;
                }
            }
            return null;
        }

        public void GetInt32TimeseriesValueById( Guid id, Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleInt32TimeseriesValueDataReader = GetInt32TimeseriesValueByIdDataReader( id );
                using ( simpleInt32TimeseriesValueDataReader )
                {
                    if ( simpleInt32TimeseriesValueDataReader.Read( ) )
                    {
                        destinationWriter.Write( true );
                        simpleInt32TimeseriesValueDataReader.WriteTo( destinationWriter );
                    }
                    else
                    {
                        destinationWriter.Write( false );
                    }
                }
            }
        }

        public SimpleInt32TimeseriesValueDataReader GetInt32TimeseriesValueCollectionDataReader( )
        {
            const string sql = SimpleInt32TimeseriesValueDataReader.BaseQuery; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleInt32TimeseriesValueDataReader = new SimpleInt32TimeseriesValueDataReader( _loggerFactory, sqlDataReader );
                return simpleInt32TimeseriesValueDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public IList<Int32TimeseriesValueObject> GetInt32TimeseriesValueCollection( )
        {
            var result = new List<Int32TimeseriesValueObject>( );
            var simpleInt32TimeseriesValueDataReader = GetInt32TimeseriesValueCollectionDataReader( );
            using ( simpleInt32TimeseriesValueDataReader )
            {
                while ( simpleInt32TimeseriesValueDataReader.Read( ) )
                {
                    var data = simpleInt32TimeseriesValueDataReader.GetDataObject( );
                    result.Add( data );
                }
            }
            return result;
        }

        public void GetInt32TimeseriesValueCollection( Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleInt32TimeseriesValueDataReader = GetInt32TimeseriesValueCollectionDataReader( );
                using ( simpleInt32TimeseriesValueDataReader )
                {
                    simpleInt32TimeseriesValueDataReader.WriteResultSetTo( destinationWriter );
                }
            }
        }

        public SimpleInt32TimeseriesValueDataReader GetInt32TimeseriesValueCollectionByTimeseriesDataReader( Guid timeseries )
        {
            const string sql = SimpleInt32TimeseriesValueDataReader.BaseQuery + " WHERE " +
                    SimpleInt32TimeseriesValueDataReader.ViewAliasName + ".[Timeseries] = @timeseries " +
                    " ORDER BY " + SimpleInt32TimeseriesValueDataReader.ViewAliasName + ".[Timeseries]," +SimpleInt32TimeseriesValueDataReader.ViewAliasName + ".[Timestamp]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var timeseriesParameter = sqlCommandParameters.AddReference( "@timeseries", timeseries );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleInt32TimeseriesValueDataReader = new SimpleInt32TimeseriesValueDataReader( _loggerFactory, sqlDataReader );
                return simpleInt32TimeseriesValueDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<Int32TimeseriesValueObject> GetInt32TimeseriesValueCollectionByTimeseries( Guid timeseries )
        {
            throw new NotImplementedException( );
        }
        public SimpleInt32TimeseriesValueDataReader GetInt32TimeseriesValueByTimeseriesAndTimestampDataReader( Guid timeseries, DateTime timestamp )
        {
            const string sql = SimpleInt32TimeseriesValueDataReader.BaseQuery + " WHERE " +
                    SimpleInt32TimeseriesValueDataReader.ViewAliasName + ".[Timeseries] = @timeseries AND " +
                    SimpleInt32TimeseriesValueDataReader.ViewAliasName + ".[Timestamp] = @timestamp " +
                    " ORDER BY " + SimpleInt32TimeseriesValueDataReader.ViewAliasName + ".[Timeseries]," +SimpleInt32TimeseriesValueDataReader.ViewAliasName + ".[Timestamp]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var timeseriesParameter = sqlCommandParameters.AddReference( "@timeseries", timeseries );
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@timestamp", timestamp );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleInt32TimeseriesValueDataReader = new SimpleInt32TimeseriesValueDataReader( _loggerFactory, sqlDataReader );
                return simpleInt32TimeseriesValueDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public Int32TimeseriesValueObject? GetInt32TimeseriesValueByTimeseriesAndTimestamp( Guid timeseries, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public Int32TimeseriesValueObject? GetInt32TimeseriesValueByTimeseriesAtTimestamp( Guid timeseries, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<Int32TimeseriesValueObject> GetInt32TimeseriesValueByTimeseriesFromTimestamp( Guid timeseries, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<Int32TimeseriesValueObject> GetInt32TimeseriesValueByTimeseriesUntilTimestamp( Guid timeseries, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<Int32TimeseriesValueObject> GetInt32TimeseriesValueByTimeseriesOverTimestamp( Guid timeseries, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException( );
        }
        public SimpleInt32TimeseriesValueDataReader GetInt32TimeseriesValueCollectionByTimestampDataReader( DateTime timestamp )
        {
            const string sql = SimpleInt32TimeseriesValueDataReader.BaseQuery + " WHERE " +
                    SimpleInt32TimeseriesValueDataReader.ViewAliasName + ".[Timestamp] = @timestamp " +
                    " ORDER BY " + SimpleInt32TimeseriesValueDataReader.ViewAliasName + ".[Timestamp]," +SimpleInt32TimeseriesValueDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@timestamp", timestamp );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleInt32TimeseriesValueDataReader = new SimpleInt32TimeseriesValueDataReader( _loggerFactory, sqlDataReader );
                return simpleInt32TimeseriesValueDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<Int32TimeseriesValueObject> GetInt32TimeseriesValueCollectionByTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<Int32TimeseriesValueObject> GetInt32TimeseriesValueCollectionAtTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<Int32TimeseriesValueObject> GetInt32TimeseriesValueCollectionFromTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<Int32TimeseriesValueObject> GetInt32TimeseriesValueCollectionUntilTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<Int32TimeseriesValueObject> GetInt32TimeseriesValueCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException( );
        }
        // ---------------------------------------------------------------------
        // Int64TimeseriesValue queries
        // ---------------------------------------------------------------------
        public SimpleInt64TimeseriesValueDataReader GetInt64TimeseriesValueByIdDataReader( Guid id )
        {
            const string sql = SimpleInt64TimeseriesValueDataReader.BaseQuery + "WHERE " + SimpleInt64TimeseriesValueDataReader.ViewAliasName + ".[Id] = @id"; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                sqlCommandParameters.AddGuid( "@id", id );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleInt64TimeseriesValueDataReader = new SimpleInt64TimeseriesValueDataReader( _loggerFactory, sqlDataReader );
                return simpleInt64TimeseriesValueDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public Int64TimeseriesValueObject? GetInt64TimeseriesValueById( Guid id )
        {
            var simpleInt64TimeseriesValueDataReader = GetInt64TimeseriesValueByIdDataReader( id );
            using ( simpleInt64TimeseriesValueDataReader )
            {
                if ( simpleInt64TimeseriesValueDataReader.Read( ) )
                {
                    var result = simpleInt64TimeseriesValueDataReader.GetDataObject( );
                    return result;
                }
            }
            return null;
        }

        public void GetInt64TimeseriesValueById( Guid id, Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleInt64TimeseriesValueDataReader = GetInt64TimeseriesValueByIdDataReader( id );
                using ( simpleInt64TimeseriesValueDataReader )
                {
                    if ( simpleInt64TimeseriesValueDataReader.Read( ) )
                    {
                        destinationWriter.Write( true );
                        simpleInt64TimeseriesValueDataReader.WriteTo( destinationWriter );
                    }
                    else
                    {
                        destinationWriter.Write( false );
                    }
                }
            }
        }

        public SimpleInt64TimeseriesValueDataReader GetInt64TimeseriesValueCollectionDataReader( )
        {
            const string sql = SimpleInt64TimeseriesValueDataReader.BaseQuery; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleInt64TimeseriesValueDataReader = new SimpleInt64TimeseriesValueDataReader( _loggerFactory, sqlDataReader );
                return simpleInt64TimeseriesValueDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public IList<Int64TimeseriesValueObject> GetInt64TimeseriesValueCollection( )
        {
            var result = new List<Int64TimeseriesValueObject>( );
            var simpleInt64TimeseriesValueDataReader = GetInt64TimeseriesValueCollectionDataReader( );
            using ( simpleInt64TimeseriesValueDataReader )
            {
                while ( simpleInt64TimeseriesValueDataReader.Read( ) )
                {
                    var data = simpleInt64TimeseriesValueDataReader.GetDataObject( );
                    result.Add( data );
                }
            }
            return result;
        }

        public void GetInt64TimeseriesValueCollection( Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleInt64TimeseriesValueDataReader = GetInt64TimeseriesValueCollectionDataReader( );
                using ( simpleInt64TimeseriesValueDataReader )
                {
                    simpleInt64TimeseriesValueDataReader.WriteResultSetTo( destinationWriter );
                }
            }
        }

        public SimpleInt64TimeseriesValueDataReader GetInt64TimeseriesValueCollectionByTimeseriesDataReader( Guid timeseries )
        {
            const string sql = SimpleInt64TimeseriesValueDataReader.BaseQuery + " WHERE " +
                    SimpleInt64TimeseriesValueDataReader.ViewAliasName + ".[Timeseries] = @timeseries " +
                    " ORDER BY " + SimpleInt64TimeseriesValueDataReader.ViewAliasName + ".[Timeseries]," +SimpleInt64TimeseriesValueDataReader.ViewAliasName + ".[Timestamp]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var timeseriesParameter = sqlCommandParameters.AddReference( "@timeseries", timeseries );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleInt64TimeseriesValueDataReader = new SimpleInt64TimeseriesValueDataReader( _loggerFactory, sqlDataReader );
                return simpleInt64TimeseriesValueDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<Int64TimeseriesValueObject> GetInt64TimeseriesValueCollectionByTimeseries( Guid timeseries )
        {
            throw new NotImplementedException( );
        }
        public SimpleInt64TimeseriesValueDataReader GetInt64TimeseriesValueByTimeseriesAndTimestampDataReader( Guid timeseries, DateTime timestamp )
        {
            const string sql = SimpleInt64TimeseriesValueDataReader.BaseQuery + " WHERE " +
                    SimpleInt64TimeseriesValueDataReader.ViewAliasName + ".[Timeseries] = @timeseries AND " +
                    SimpleInt64TimeseriesValueDataReader.ViewAliasName + ".[Timestamp] = @timestamp " +
                    " ORDER BY " + SimpleInt64TimeseriesValueDataReader.ViewAliasName + ".[Timeseries]," +SimpleInt64TimeseriesValueDataReader.ViewAliasName + ".[Timestamp]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var timeseriesParameter = sqlCommandParameters.AddReference( "@timeseries", timeseries );
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@timestamp", timestamp );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleInt64TimeseriesValueDataReader = new SimpleInt64TimeseriesValueDataReader( _loggerFactory, sqlDataReader );
                return simpleInt64TimeseriesValueDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public Int64TimeseriesValueObject? GetInt64TimeseriesValueByTimeseriesAndTimestamp( Guid timeseries, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public Int64TimeseriesValueObject? GetInt64TimeseriesValueByTimeseriesAtTimestamp( Guid timeseries, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<Int64TimeseriesValueObject> GetInt64TimeseriesValueByTimeseriesFromTimestamp( Guid timeseries, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<Int64TimeseriesValueObject> GetInt64TimeseriesValueByTimeseriesUntilTimestamp( Guid timeseries, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<Int64TimeseriesValueObject> GetInt64TimeseriesValueByTimeseriesOverTimestamp( Guid timeseries, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException( );
        }
        public SimpleInt64TimeseriesValueDataReader GetInt64TimeseriesValueCollectionByTimestampDataReader( DateTime timestamp )
        {
            const string sql = SimpleInt64TimeseriesValueDataReader.BaseQuery + " WHERE " +
                    SimpleInt64TimeseriesValueDataReader.ViewAliasName + ".[Timestamp] = @timestamp " +
                    " ORDER BY " + SimpleInt64TimeseriesValueDataReader.ViewAliasName + ".[Timestamp]," +SimpleInt64TimeseriesValueDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@timestamp", timestamp );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleInt64TimeseriesValueDataReader = new SimpleInt64TimeseriesValueDataReader( _loggerFactory, sqlDataReader );
                return simpleInt64TimeseriesValueDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<Int64TimeseriesValueObject> GetInt64TimeseriesValueCollectionByTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<Int64TimeseriesValueObject> GetInt64TimeseriesValueCollectionAtTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<Int64TimeseriesValueObject> GetInt64TimeseriesValueCollectionFromTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<Int64TimeseriesValueObject> GetInt64TimeseriesValueCollectionUntilTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<Int64TimeseriesValueObject> GetInt64TimeseriesValueCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException( );
        }
        // ---------------------------------------------------------------------
        // Item queries
        // ---------------------------------------------------------------------
        public ComplexItemDataReader GetItemByIdDataReader( Guid id )
        {
            const string sql = ComplexItemDataReader.BaseQuery + "WHERE " + ComplexItemDataReader.ViewAliasName + ".[Id] = @id"; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                sqlCommandParameters.AddGuid( "@id", id );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var complexItemDataReader = new ComplexItemDataReader( _loggerFactory, sqlDataReader );
                return complexItemDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public ItemObject? GetItemById( Guid id )
        {
            var complexItemDataReader = GetItemByIdDataReader( id );
            using ( complexItemDataReader )
            {
                if ( complexItemDataReader.Read( ) )
                {
                    var result = complexItemDataReader.GetDataObject( );
                    return result;
                }
            }
            return null;
        }

        public void GetItemById( Guid id, Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var complexItemDataReader = GetItemByIdDataReader( id );
                using ( complexItemDataReader )
                {
                    if ( complexItemDataReader.Read( ) )
                    {
                        destinationWriter.Write( true );
                        complexItemDataReader.WriteTo( destinationWriter );
                    }
                    else
                    {
                        destinationWriter.Write( false );
                    }
                }
            }
        }

        public ComplexItemDataReader GetItemCollectionDataReader( )
        {
            const string sql = ComplexItemDataReader.BaseQuery; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var complexItemDataReader = new ComplexItemDataReader( _loggerFactory, sqlDataReader );
                return complexItemDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public IList<ItemObject> GetItemCollection( )
        {
            var result = new List<ItemObject>( );
            var complexItemDataReader = GetItemCollectionDataReader( );
            using ( complexItemDataReader )
            {
                while ( complexItemDataReader.Read( ) )
                {
                    var data = complexItemDataReader.GetDataObject( );
                    result.Add( data );
                }
            }
            return result;
        }

        public void GetItemCollection( Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var complexItemDataReader = GetItemCollectionDataReader( );
                using ( complexItemDataReader )
                {
                    complexItemDataReader.WriteResultSetTo( destinationWriter );
                }
            }
        }

        // ---------------------------------------------------------------------
        // BaseStation queries
        // ---------------------------------------------------------------------
        public SimpleBaseStationDataReader GetBaseStationByIdDataReader( Guid id )
        {
            const string sql = SimpleBaseStationDataReader.BaseQuery + "WHERE " + SimpleBaseStationDataReader.ViewAliasName + ".[Id] = @id"; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                sqlCommandParameters.AddGuid( "@id", id );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleBaseStationDataReader = new SimpleBaseStationDataReader( _loggerFactory, sqlDataReader );
                return simpleBaseStationDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public BaseStationObject? GetBaseStationById( Guid id )
        {
            var simpleBaseStationDataReader = GetBaseStationByIdDataReader( id );
            using ( simpleBaseStationDataReader )
            {
                if ( simpleBaseStationDataReader.Read( ) )
                {
                    var result = simpleBaseStationDataReader.GetDataObject( );
                    return result;
                }
            }
            return null;
        }

        public void GetBaseStationById( Guid id, Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleBaseStationDataReader = GetBaseStationByIdDataReader( id );
                using ( simpleBaseStationDataReader )
                {
                    if ( simpleBaseStationDataReader.Read( ) )
                    {
                        destinationWriter.Write( true );
                        simpleBaseStationDataReader.WriteTo( destinationWriter );
                    }
                    else
                    {
                        destinationWriter.Write( false );
                    }
                }
            }
        }

        public SimpleBaseStationDataReader GetBaseStationCollectionDataReader( )
        {
            const string sql = SimpleBaseStationDataReader.BaseQuery; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleBaseStationDataReader = new SimpleBaseStationDataReader( _loggerFactory, sqlDataReader );
                return simpleBaseStationDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public IList<BaseStationObject> GetBaseStationCollection( )
        {
            var result = new List<BaseStationObject>( );
            var simpleBaseStationDataReader = GetBaseStationCollectionDataReader( );
            using ( simpleBaseStationDataReader )
            {
                while ( simpleBaseStationDataReader.Read( ) )
                {
                    var data = simpleBaseStationDataReader.GetDataObject( );
                    result.Add( data );
                }
            }
            return result;
        }

        public void GetBaseStationCollection( Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleBaseStationDataReader = GetBaseStationCollectionDataReader( );
                using ( simpleBaseStationDataReader )
                {
                    simpleBaseStationDataReader.WriteResultSetTo( destinationWriter );
                }
            }
        }

        public SimpleBaseStationDataReader GetBaseStationByNameDataReader( string name )
        {
            const string sql = SimpleBaseStationDataReader.BaseQuery + " WHERE " +
                    SimpleBaseStationDataReader.ViewAliasName + ".[Name] = @name " +
                    " ORDER BY " + SimpleBaseStationDataReader.ViewAliasName + ".[Name]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var nameParameter = sqlCommandParameters.AddNVarChar( "@name", name, 127 );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleBaseStationDataReader = new SimpleBaseStationDataReader( _loggerFactory, sqlDataReader );
                return simpleBaseStationDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public BaseStationObject? GetBaseStationByName( string name )
        {
            throw new NotImplementedException( );
        }
        public SimpleBaseStationDataReader GetBaseStationCollectionByTypeDataReader( Guid type )
        {
            const string sql = SimpleBaseStationDataReader.BaseQuery + " WHERE " +
                    SimpleBaseStationDataReader.ViewAliasName + ".[Type] = @type " +
                    " ORDER BY " + SimpleBaseStationDataReader.ViewAliasName + ".[Type]," +SimpleBaseStationDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var typeParameter = sqlCommandParameters.AddReference( "@type", type );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleBaseStationDataReader = new SimpleBaseStationDataReader( _loggerFactory, sqlDataReader );
                return simpleBaseStationDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<BaseStationObject> GetBaseStationCollectionByType( Guid type )
        {
            throw new NotImplementedException( );
        }
        // ---------------------------------------------------------------------
        // Device queries
        // ---------------------------------------------------------------------
        public ComplexDeviceDataReader GetDeviceByIdDataReader( Guid id )
        {
            const string sql = ComplexDeviceDataReader.BaseQuery + "WHERE " + ComplexDeviceDataReader.ViewAliasName + ".[Id] = @id"; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                sqlCommandParameters.AddGuid( "@id", id );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var complexDeviceDataReader = new ComplexDeviceDataReader( _loggerFactory, sqlDataReader );
                return complexDeviceDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public DeviceObject? GetDeviceById( Guid id )
        {
            var complexDeviceDataReader = GetDeviceByIdDataReader( id );
            using ( complexDeviceDataReader )
            {
                if ( complexDeviceDataReader.Read( ) )
                {
                    var result = complexDeviceDataReader.GetDataObject( );
                    return result;
                }
            }
            return null;
        }

        public void GetDeviceById( Guid id, Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var complexDeviceDataReader = GetDeviceByIdDataReader( id );
                using ( complexDeviceDataReader )
                {
                    if ( complexDeviceDataReader.Read( ) )
                    {
                        destinationWriter.Write( true );
                        complexDeviceDataReader.WriteTo( destinationWriter );
                    }
                    else
                    {
                        destinationWriter.Write( false );
                    }
                }
            }
        }

        public ComplexDeviceDataReader GetDeviceCollectionDataReader( )
        {
            const string sql = ComplexDeviceDataReader.BaseQuery; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var complexDeviceDataReader = new ComplexDeviceDataReader( _loggerFactory, sqlDataReader );
                return complexDeviceDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public IList<DeviceObject> GetDeviceCollection( )
        {
            var result = new List<DeviceObject>( );
            var complexDeviceDataReader = GetDeviceCollectionDataReader( );
            using ( complexDeviceDataReader )
            {
                while ( complexDeviceDataReader.Read( ) )
                {
                    var data = complexDeviceDataReader.GetDataObject( );
                    result.Add( data );
                }
            }
            return result;
        }

        public void GetDeviceCollection( Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var complexDeviceDataReader = GetDeviceCollectionDataReader( );
                using ( complexDeviceDataReader )
                {
                    complexDeviceDataReader.WriteResultSetTo( destinationWriter );
                }
            }
        }

        public ComplexDeviceDataReader GetDeviceCollectionByHostDataReader( Guid host )
        {
            const string sql = ComplexDeviceDataReader.BaseQuery + " WHERE " +
                    ComplexDeviceDataReader.ViewAliasName + ".[Host] = @host " +
                    " ORDER BY " + ComplexDeviceDataReader.ViewAliasName + ".[Host]," +ComplexDeviceDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var hostParameter = sqlCommandParameters.AddReference( "@host", host );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var complexDeviceDataReader = new ComplexDeviceDataReader( _loggerFactory, sqlDataReader );
                return complexDeviceDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<DeviceObject> GetDeviceCollectionByHost( Guid host )
        {
            throw new NotImplementedException( );
        }
        public ComplexDeviceDataReader GetDeviceByNameDataReader( string name )
        {
            const string sql = ComplexDeviceDataReader.BaseQuery + " WHERE " +
                    ComplexDeviceDataReader.ViewAliasName + ".[Name] = @name " +
                    " ORDER BY " + ComplexDeviceDataReader.ViewAliasName + ".[Name]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var nameParameter = sqlCommandParameters.AddNVarChar( "@name", name, 127 );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var complexDeviceDataReader = new ComplexDeviceDataReader( _loggerFactory, sqlDataReader );
                return complexDeviceDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public DeviceObject? GetDeviceByName( string name )
        {
            throw new NotImplementedException( );
        }
        // ---------------------------------------------------------------------
        // CameraDevice queries
        // ---------------------------------------------------------------------
        public SimpleCameraDeviceDataReader GetCameraDeviceByIdDataReader( Guid id )
        {
            const string sql = SimpleCameraDeviceDataReader.BaseQuery + "WHERE " + SimpleCameraDeviceDataReader.ViewAliasName + ".[Id] = @id"; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                sqlCommandParameters.AddGuid( "@id", id );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleCameraDeviceDataReader = new SimpleCameraDeviceDataReader( _loggerFactory, sqlDataReader );
                return simpleCameraDeviceDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public CameraDeviceObject? GetCameraDeviceById( Guid id )
        {
            var simpleCameraDeviceDataReader = GetCameraDeviceByIdDataReader( id );
            using ( simpleCameraDeviceDataReader )
            {
                if ( simpleCameraDeviceDataReader.Read( ) )
                {
                    var result = simpleCameraDeviceDataReader.GetDataObject( );
                    return result;
                }
            }
            return null;
        }

        public void GetCameraDeviceById( Guid id, Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleCameraDeviceDataReader = GetCameraDeviceByIdDataReader( id );
                using ( simpleCameraDeviceDataReader )
                {
                    if ( simpleCameraDeviceDataReader.Read( ) )
                    {
                        destinationWriter.Write( true );
                        simpleCameraDeviceDataReader.WriteTo( destinationWriter );
                    }
                    else
                    {
                        destinationWriter.Write( false );
                    }
                }
            }
        }

        public SimpleCameraDeviceDataReader GetCameraDeviceCollectionDataReader( )
        {
            const string sql = SimpleCameraDeviceDataReader.BaseQuery; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleCameraDeviceDataReader = new SimpleCameraDeviceDataReader( _loggerFactory, sqlDataReader );
                return simpleCameraDeviceDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public IList<CameraDeviceObject> GetCameraDeviceCollection( )
        {
            var result = new List<CameraDeviceObject>( );
            var simpleCameraDeviceDataReader = GetCameraDeviceCollectionDataReader( );
            using ( simpleCameraDeviceDataReader )
            {
                while ( simpleCameraDeviceDataReader.Read( ) )
                {
                    var data = simpleCameraDeviceDataReader.GetDataObject( );
                    result.Add( data );
                }
            }
            return result;
        }

        public void GetCameraDeviceCollection( Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleCameraDeviceDataReader = GetCameraDeviceCollectionDataReader( );
                using ( simpleCameraDeviceDataReader )
                {
                    simpleCameraDeviceDataReader.WriteResultSetTo( destinationWriter );
                }
            }
        }

        public SimpleCameraDeviceDataReader GetCameraDeviceCollectionByHostDataReader( Guid host )
        {
            const string sql = SimpleCameraDeviceDataReader.BaseQuery + " WHERE " +
                    SimpleCameraDeviceDataReader.ViewAliasName + ".[Host] = @host " +
                    " ORDER BY " + SimpleCameraDeviceDataReader.ViewAliasName + ".[Host]," +SimpleCameraDeviceDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var hostParameter = sqlCommandParameters.AddReference( "@host", host );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleCameraDeviceDataReader = new SimpleCameraDeviceDataReader( _loggerFactory, sqlDataReader );
                return simpleCameraDeviceDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<CameraDeviceObject> GetCameraDeviceCollectionByHost( Guid host )
        {
            throw new NotImplementedException( );
        }
        public SimpleCameraDeviceDataReader GetCameraDeviceByNameDataReader( string name )
        {
            const string sql = SimpleCameraDeviceDataReader.BaseQuery + " WHERE " +
                    SimpleCameraDeviceDataReader.ViewAliasName + ".[Name] = @name " +
                    " ORDER BY " + SimpleCameraDeviceDataReader.ViewAliasName + ".[Name]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var nameParameter = sqlCommandParameters.AddNVarChar( "@name", name, 127 );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleCameraDeviceDataReader = new SimpleCameraDeviceDataReader( _loggerFactory, sqlDataReader );
                return simpleCameraDeviceDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public CameraDeviceObject? GetCameraDeviceByName( string name )
        {
            throw new NotImplementedException( );
        }
        // ---------------------------------------------------------------------
        // GNSSDevice queries
        // ---------------------------------------------------------------------
        public SimpleGNSSDeviceDataReader GetGNSSDeviceByIdDataReader( Guid id )
        {
            const string sql = SimpleGNSSDeviceDataReader.BaseQuery + "WHERE " + SimpleGNSSDeviceDataReader.ViewAliasName + ".[Id] = @id"; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                sqlCommandParameters.AddGuid( "@id", id );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleGNSSDeviceDataReader = new SimpleGNSSDeviceDataReader( _loggerFactory, sqlDataReader );
                return simpleGNSSDeviceDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public GNSSDeviceObject? GetGNSSDeviceById( Guid id )
        {
            var simpleGNSSDeviceDataReader = GetGNSSDeviceByIdDataReader( id );
            using ( simpleGNSSDeviceDataReader )
            {
                if ( simpleGNSSDeviceDataReader.Read( ) )
                {
                    var result = simpleGNSSDeviceDataReader.GetDataObject( );
                    return result;
                }
            }
            return null;
        }

        public void GetGNSSDeviceById( Guid id, Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleGNSSDeviceDataReader = GetGNSSDeviceByIdDataReader( id );
                using ( simpleGNSSDeviceDataReader )
                {
                    if ( simpleGNSSDeviceDataReader.Read( ) )
                    {
                        destinationWriter.Write( true );
                        simpleGNSSDeviceDataReader.WriteTo( destinationWriter );
                    }
                    else
                    {
                        destinationWriter.Write( false );
                    }
                }
            }
        }

        public SimpleGNSSDeviceDataReader GetGNSSDeviceCollectionDataReader( )
        {
            const string sql = SimpleGNSSDeviceDataReader.BaseQuery; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleGNSSDeviceDataReader = new SimpleGNSSDeviceDataReader( _loggerFactory, sqlDataReader );
                return simpleGNSSDeviceDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public IList<GNSSDeviceObject> GetGNSSDeviceCollection( )
        {
            var result = new List<GNSSDeviceObject>( );
            var simpleGNSSDeviceDataReader = GetGNSSDeviceCollectionDataReader( );
            using ( simpleGNSSDeviceDataReader )
            {
                while ( simpleGNSSDeviceDataReader.Read( ) )
                {
                    var data = simpleGNSSDeviceDataReader.GetDataObject( );
                    result.Add( data );
                }
            }
            return result;
        }

        public void GetGNSSDeviceCollection( Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleGNSSDeviceDataReader = GetGNSSDeviceCollectionDataReader( );
                using ( simpleGNSSDeviceDataReader )
                {
                    simpleGNSSDeviceDataReader.WriteResultSetTo( destinationWriter );
                }
            }
        }

        public SimpleGNSSDeviceDataReader GetGNSSDeviceCollectionByHostDataReader( Guid host )
        {
            const string sql = SimpleGNSSDeviceDataReader.BaseQuery + " WHERE " +
                    SimpleGNSSDeviceDataReader.ViewAliasName + ".[Host] = @host " +
                    " ORDER BY " + SimpleGNSSDeviceDataReader.ViewAliasName + ".[Host]," +SimpleGNSSDeviceDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var hostParameter = sqlCommandParameters.AddReference( "@host", host );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleGNSSDeviceDataReader = new SimpleGNSSDeviceDataReader( _loggerFactory, sqlDataReader );
                return simpleGNSSDeviceDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<GNSSDeviceObject> GetGNSSDeviceCollectionByHost( Guid host )
        {
            throw new NotImplementedException( );
        }
        public SimpleGNSSDeviceDataReader GetGNSSDeviceByNameDataReader( string name )
        {
            const string sql = SimpleGNSSDeviceDataReader.BaseQuery + " WHERE " +
                    SimpleGNSSDeviceDataReader.ViewAliasName + ".[Name] = @name " +
                    " ORDER BY " + SimpleGNSSDeviceDataReader.ViewAliasName + ".[Name]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var nameParameter = sqlCommandParameters.AddNVarChar( "@name", name, 127 );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleGNSSDeviceDataReader = new SimpleGNSSDeviceDataReader( _loggerFactory, sqlDataReader );
                return simpleGNSSDeviceDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public GNSSDeviceObject? GetGNSSDeviceByName( string name )
        {
            throw new NotImplementedException( );
        }
        // ---------------------------------------------------------------------
        // GyroDevice queries
        // ---------------------------------------------------------------------
        public SimpleGyroDeviceDataReader GetGyroDeviceByIdDataReader( Guid id )
        {
            const string sql = SimpleGyroDeviceDataReader.BaseQuery + "WHERE " + SimpleGyroDeviceDataReader.ViewAliasName + ".[Id] = @id"; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                sqlCommandParameters.AddGuid( "@id", id );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleGyroDeviceDataReader = new SimpleGyroDeviceDataReader( _loggerFactory, sqlDataReader );
                return simpleGyroDeviceDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public GyroDeviceObject? GetGyroDeviceById( Guid id )
        {
            var simpleGyroDeviceDataReader = GetGyroDeviceByIdDataReader( id );
            using ( simpleGyroDeviceDataReader )
            {
                if ( simpleGyroDeviceDataReader.Read( ) )
                {
                    var result = simpleGyroDeviceDataReader.GetDataObject( );
                    return result;
                }
            }
            return null;
        }

        public void GetGyroDeviceById( Guid id, Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleGyroDeviceDataReader = GetGyroDeviceByIdDataReader( id );
                using ( simpleGyroDeviceDataReader )
                {
                    if ( simpleGyroDeviceDataReader.Read( ) )
                    {
                        destinationWriter.Write( true );
                        simpleGyroDeviceDataReader.WriteTo( destinationWriter );
                    }
                    else
                    {
                        destinationWriter.Write( false );
                    }
                }
            }
        }

        public SimpleGyroDeviceDataReader GetGyroDeviceCollectionDataReader( )
        {
            const string sql = SimpleGyroDeviceDataReader.BaseQuery; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleGyroDeviceDataReader = new SimpleGyroDeviceDataReader( _loggerFactory, sqlDataReader );
                return simpleGyroDeviceDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public IList<GyroDeviceObject> GetGyroDeviceCollection( )
        {
            var result = new List<GyroDeviceObject>( );
            var simpleGyroDeviceDataReader = GetGyroDeviceCollectionDataReader( );
            using ( simpleGyroDeviceDataReader )
            {
                while ( simpleGyroDeviceDataReader.Read( ) )
                {
                    var data = simpleGyroDeviceDataReader.GetDataObject( );
                    result.Add( data );
                }
            }
            return result;
        }

        public void GetGyroDeviceCollection( Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleGyroDeviceDataReader = GetGyroDeviceCollectionDataReader( );
                using ( simpleGyroDeviceDataReader )
                {
                    simpleGyroDeviceDataReader.WriteResultSetTo( destinationWriter );
                }
            }
        }

        public SimpleGyroDeviceDataReader GetGyroDeviceCollectionByHostDataReader( Guid host )
        {
            const string sql = SimpleGyroDeviceDataReader.BaseQuery + " WHERE " +
                    SimpleGyroDeviceDataReader.ViewAliasName + ".[Host] = @host " +
                    " ORDER BY " + SimpleGyroDeviceDataReader.ViewAliasName + ".[Host]," +SimpleGyroDeviceDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var hostParameter = sqlCommandParameters.AddReference( "@host", host );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleGyroDeviceDataReader = new SimpleGyroDeviceDataReader( _loggerFactory, sqlDataReader );
                return simpleGyroDeviceDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<GyroDeviceObject> GetGyroDeviceCollectionByHost( Guid host )
        {
            throw new NotImplementedException( );
        }
        public SimpleGyroDeviceDataReader GetGyroDeviceByNameDataReader( string name )
        {
            const string sql = SimpleGyroDeviceDataReader.BaseQuery + " WHERE " +
                    SimpleGyroDeviceDataReader.ViewAliasName + ".[Name] = @name " +
                    " ORDER BY " + SimpleGyroDeviceDataReader.ViewAliasName + ".[Name]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var nameParameter = sqlCommandParameters.AddNVarChar( "@name", name, 127 );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleGyroDeviceDataReader = new SimpleGyroDeviceDataReader( _loggerFactory, sqlDataReader );
                return simpleGyroDeviceDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public GyroDeviceObject? GetGyroDeviceByName( string name )
        {
            throw new NotImplementedException( );
        }
        public SimpleGyroDeviceDataReader GetGyroDeviceCollectionByGNSSDeviceDataReader( Guid gNSSDevice )
        {
            const string sql = SimpleGyroDeviceDataReader.BaseQuery + " WHERE " +
                    SimpleGyroDeviceDataReader.ViewAliasName + ".[GNSSDevice] = @gNSSDevice " +
                    " ORDER BY " + SimpleGyroDeviceDataReader.ViewAliasName + ".[GNSSDevice]," +SimpleGyroDeviceDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var gNSSDeviceParameter = sqlCommandParameters.AddReference( "@gNSSDevice", gNSSDevice );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleGyroDeviceDataReader = new SimpleGyroDeviceDataReader( _loggerFactory, sqlDataReader );
                return simpleGyroDeviceDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<GyroDeviceObject> GetGyroDeviceCollectionByGNSSDevice( Guid gNSSDevice )
        {
            throw new NotImplementedException( );
        }
        // ---------------------------------------------------------------------
        // LineInputDevice queries
        // ---------------------------------------------------------------------
        public SimpleLineInputDeviceDataReader GetLineInputDeviceByIdDataReader( Guid id )
        {
            const string sql = SimpleLineInputDeviceDataReader.BaseQuery + "WHERE " + SimpleLineInputDeviceDataReader.ViewAliasName + ".[Id] = @id"; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                sqlCommandParameters.AddGuid( "@id", id );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleLineInputDeviceDataReader = new SimpleLineInputDeviceDataReader( _loggerFactory, sqlDataReader );
                return simpleLineInputDeviceDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public LineInputDeviceObject? GetLineInputDeviceById( Guid id )
        {
            var simpleLineInputDeviceDataReader = GetLineInputDeviceByIdDataReader( id );
            using ( simpleLineInputDeviceDataReader )
            {
                if ( simpleLineInputDeviceDataReader.Read( ) )
                {
                    var result = simpleLineInputDeviceDataReader.GetDataObject( );
                    return result;
                }
            }
            return null;
        }

        public void GetLineInputDeviceById( Guid id, Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleLineInputDeviceDataReader = GetLineInputDeviceByIdDataReader( id );
                using ( simpleLineInputDeviceDataReader )
                {
                    if ( simpleLineInputDeviceDataReader.Read( ) )
                    {
                        destinationWriter.Write( true );
                        simpleLineInputDeviceDataReader.WriteTo( destinationWriter );
                    }
                    else
                    {
                        destinationWriter.Write( false );
                    }
                }
            }
        }

        public SimpleLineInputDeviceDataReader GetLineInputDeviceCollectionDataReader( )
        {
            const string sql = SimpleLineInputDeviceDataReader.BaseQuery; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleLineInputDeviceDataReader = new SimpleLineInputDeviceDataReader( _loggerFactory, sqlDataReader );
                return simpleLineInputDeviceDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public IList<LineInputDeviceObject> GetLineInputDeviceCollection( )
        {
            var result = new List<LineInputDeviceObject>( );
            var simpleLineInputDeviceDataReader = GetLineInputDeviceCollectionDataReader( );
            using ( simpleLineInputDeviceDataReader )
            {
                while ( simpleLineInputDeviceDataReader.Read( ) )
                {
                    var data = simpleLineInputDeviceDataReader.GetDataObject( );
                    result.Add( data );
                }
            }
            return result;
        }

        public void GetLineInputDeviceCollection( Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleLineInputDeviceDataReader = GetLineInputDeviceCollectionDataReader( );
                using ( simpleLineInputDeviceDataReader )
                {
                    simpleLineInputDeviceDataReader.WriteResultSetTo( destinationWriter );
                }
            }
        }

        public SimpleLineInputDeviceDataReader GetLineInputDeviceCollectionByHostDataReader( Guid host )
        {
            const string sql = SimpleLineInputDeviceDataReader.BaseQuery + " WHERE " +
                    SimpleLineInputDeviceDataReader.ViewAliasName + ".[Host] = @host " +
                    " ORDER BY " + SimpleLineInputDeviceDataReader.ViewAliasName + ".[Host]," +SimpleLineInputDeviceDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var hostParameter = sqlCommandParameters.AddReference( "@host", host );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleLineInputDeviceDataReader = new SimpleLineInputDeviceDataReader( _loggerFactory, sqlDataReader );
                return simpleLineInputDeviceDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<LineInputDeviceObject> GetLineInputDeviceCollectionByHost( Guid host )
        {
            throw new NotImplementedException( );
        }
        public SimpleLineInputDeviceDataReader GetLineInputDeviceByNameDataReader( string name )
        {
            const string sql = SimpleLineInputDeviceDataReader.BaseQuery + " WHERE " +
                    SimpleLineInputDeviceDataReader.ViewAliasName + ".[Name] = @name " +
                    " ORDER BY " + SimpleLineInputDeviceDataReader.ViewAliasName + ".[Name]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var nameParameter = sqlCommandParameters.AddNVarChar( "@name", name, 127 );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleLineInputDeviceDataReader = new SimpleLineInputDeviceDataReader( _loggerFactory, sqlDataReader );
                return simpleLineInputDeviceDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public LineInputDeviceObject? GetLineInputDeviceByName( string name )
        {
            throw new NotImplementedException( );
        }
        // ---------------------------------------------------------------------
        // OilSpillDetectorDevice queries
        // ---------------------------------------------------------------------
        public SimpleOilSpillDetectorDeviceDataReader GetOilSpillDetectorDeviceByIdDataReader( Guid id )
        {
            const string sql = SimpleOilSpillDetectorDeviceDataReader.BaseQuery + "WHERE " + SimpleOilSpillDetectorDeviceDataReader.ViewAliasName + ".[Id] = @id"; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                sqlCommandParameters.AddGuid( "@id", id );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleOilSpillDetectorDeviceDataReader = new SimpleOilSpillDetectorDeviceDataReader( _loggerFactory, sqlDataReader );
                return simpleOilSpillDetectorDeviceDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public OilSpillDetectorDeviceObject? GetOilSpillDetectorDeviceById( Guid id )
        {
            var simpleOilSpillDetectorDeviceDataReader = GetOilSpillDetectorDeviceByIdDataReader( id );
            using ( simpleOilSpillDetectorDeviceDataReader )
            {
                if ( simpleOilSpillDetectorDeviceDataReader.Read( ) )
                {
                    var result = simpleOilSpillDetectorDeviceDataReader.GetDataObject( );
                    return result;
                }
            }
            return null;
        }

        public void GetOilSpillDetectorDeviceById( Guid id, Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleOilSpillDetectorDeviceDataReader = GetOilSpillDetectorDeviceByIdDataReader( id );
                using ( simpleOilSpillDetectorDeviceDataReader )
                {
                    if ( simpleOilSpillDetectorDeviceDataReader.Read( ) )
                    {
                        destinationWriter.Write( true );
                        simpleOilSpillDetectorDeviceDataReader.WriteTo( destinationWriter );
                    }
                    else
                    {
                        destinationWriter.Write( false );
                    }
                }
            }
        }

        public SimpleOilSpillDetectorDeviceDataReader GetOilSpillDetectorDeviceCollectionDataReader( )
        {
            const string sql = SimpleOilSpillDetectorDeviceDataReader.BaseQuery; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleOilSpillDetectorDeviceDataReader = new SimpleOilSpillDetectorDeviceDataReader( _loggerFactory, sqlDataReader );
                return simpleOilSpillDetectorDeviceDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public IList<OilSpillDetectorDeviceObject> GetOilSpillDetectorDeviceCollection( )
        {
            var result = new List<OilSpillDetectorDeviceObject>( );
            var simpleOilSpillDetectorDeviceDataReader = GetOilSpillDetectorDeviceCollectionDataReader( );
            using ( simpleOilSpillDetectorDeviceDataReader )
            {
                while ( simpleOilSpillDetectorDeviceDataReader.Read( ) )
                {
                    var data = simpleOilSpillDetectorDeviceDataReader.GetDataObject( );
                    result.Add( data );
                }
            }
            return result;
        }

        public void GetOilSpillDetectorDeviceCollection( Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleOilSpillDetectorDeviceDataReader = GetOilSpillDetectorDeviceCollectionDataReader( );
                using ( simpleOilSpillDetectorDeviceDataReader )
                {
                    simpleOilSpillDetectorDeviceDataReader.WriteResultSetTo( destinationWriter );
                }
            }
        }

        public SimpleOilSpillDetectorDeviceDataReader GetOilSpillDetectorDeviceCollectionByHostDataReader( Guid host )
        {
            const string sql = SimpleOilSpillDetectorDeviceDataReader.BaseQuery + " WHERE " +
                    SimpleOilSpillDetectorDeviceDataReader.ViewAliasName + ".[Host] = @host " +
                    " ORDER BY " + SimpleOilSpillDetectorDeviceDataReader.ViewAliasName + ".[Host]," +SimpleOilSpillDetectorDeviceDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var hostParameter = sqlCommandParameters.AddReference( "@host", host );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleOilSpillDetectorDeviceDataReader = new SimpleOilSpillDetectorDeviceDataReader( _loggerFactory, sqlDataReader );
                return simpleOilSpillDetectorDeviceDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<OilSpillDetectorDeviceObject> GetOilSpillDetectorDeviceCollectionByHost( Guid host )
        {
            throw new NotImplementedException( );
        }
        public SimpleOilSpillDetectorDeviceDataReader GetOilSpillDetectorDeviceByNameDataReader( string name )
        {
            const string sql = SimpleOilSpillDetectorDeviceDataReader.BaseQuery + " WHERE " +
                    SimpleOilSpillDetectorDeviceDataReader.ViewAliasName + ".[Name] = @name " +
                    " ORDER BY " + SimpleOilSpillDetectorDeviceDataReader.ViewAliasName + ".[Name]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var nameParameter = sqlCommandParameters.AddNVarChar( "@name", name, 127 );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleOilSpillDetectorDeviceDataReader = new SimpleOilSpillDetectorDeviceDataReader( _loggerFactory, sqlDataReader );
                return simpleOilSpillDetectorDeviceDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public OilSpillDetectorDeviceObject? GetOilSpillDetectorDeviceByName( string name )
        {
            throw new NotImplementedException( );
        }
        // ---------------------------------------------------------------------
        // RadioDevice queries
        // ---------------------------------------------------------------------
        public SimpleRadioDeviceDataReader GetRadioDeviceByIdDataReader( Guid id )
        {
            const string sql = SimpleRadioDeviceDataReader.BaseQuery + "WHERE " + SimpleRadioDeviceDataReader.ViewAliasName + ".[Id] = @id"; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                sqlCommandParameters.AddGuid( "@id", id );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleRadioDeviceDataReader = new SimpleRadioDeviceDataReader( _loggerFactory, sqlDataReader );
                return simpleRadioDeviceDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public RadioDeviceObject? GetRadioDeviceById( Guid id )
        {
            var simpleRadioDeviceDataReader = GetRadioDeviceByIdDataReader( id );
            using ( simpleRadioDeviceDataReader )
            {
                if ( simpleRadioDeviceDataReader.Read( ) )
                {
                    var result = simpleRadioDeviceDataReader.GetDataObject( );
                    return result;
                }
            }
            return null;
        }

        public void GetRadioDeviceById( Guid id, Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleRadioDeviceDataReader = GetRadioDeviceByIdDataReader( id );
                using ( simpleRadioDeviceDataReader )
                {
                    if ( simpleRadioDeviceDataReader.Read( ) )
                    {
                        destinationWriter.Write( true );
                        simpleRadioDeviceDataReader.WriteTo( destinationWriter );
                    }
                    else
                    {
                        destinationWriter.Write( false );
                    }
                }
            }
        }

        public SimpleRadioDeviceDataReader GetRadioDeviceCollectionDataReader( )
        {
            const string sql = SimpleRadioDeviceDataReader.BaseQuery; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleRadioDeviceDataReader = new SimpleRadioDeviceDataReader( _loggerFactory, sqlDataReader );
                return simpleRadioDeviceDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public IList<RadioDeviceObject> GetRadioDeviceCollection( )
        {
            var result = new List<RadioDeviceObject>( );
            var simpleRadioDeviceDataReader = GetRadioDeviceCollectionDataReader( );
            using ( simpleRadioDeviceDataReader )
            {
                while ( simpleRadioDeviceDataReader.Read( ) )
                {
                    var data = simpleRadioDeviceDataReader.GetDataObject( );
                    result.Add( data );
                }
            }
            return result;
        }

        public void GetRadioDeviceCollection( Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleRadioDeviceDataReader = GetRadioDeviceCollectionDataReader( );
                using ( simpleRadioDeviceDataReader )
                {
                    simpleRadioDeviceDataReader.WriteResultSetTo( destinationWriter );
                }
            }
        }

        public SimpleRadioDeviceDataReader GetRadioDeviceCollectionByHostDataReader( Guid host )
        {
            const string sql = SimpleRadioDeviceDataReader.BaseQuery + " WHERE " +
                    SimpleRadioDeviceDataReader.ViewAliasName + ".[Host] = @host " +
                    " ORDER BY " + SimpleRadioDeviceDataReader.ViewAliasName + ".[Host]," +SimpleRadioDeviceDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var hostParameter = sqlCommandParameters.AddReference( "@host", host );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleRadioDeviceDataReader = new SimpleRadioDeviceDataReader( _loggerFactory, sqlDataReader );
                return simpleRadioDeviceDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<RadioDeviceObject> GetRadioDeviceCollectionByHost( Guid host )
        {
            throw new NotImplementedException( );
        }
        public SimpleRadioDeviceDataReader GetRadioDeviceByNameDataReader( string name )
        {
            const string sql = SimpleRadioDeviceDataReader.BaseQuery + " WHERE " +
                    SimpleRadioDeviceDataReader.ViewAliasName + ".[Name] = @name " +
                    " ORDER BY " + SimpleRadioDeviceDataReader.ViewAliasName + ".[Name]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var nameParameter = sqlCommandParameters.AddNVarChar( "@name", name, 127 );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleRadioDeviceDataReader = new SimpleRadioDeviceDataReader( _loggerFactory, sqlDataReader );
                return simpleRadioDeviceDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public RadioDeviceObject? GetRadioDeviceByName( string name )
        {
            throw new NotImplementedException( );
        }
        // ---------------------------------------------------------------------
        // RadomeDevice queries
        // ---------------------------------------------------------------------
        public SimpleRadomeDeviceDataReader GetRadomeDeviceByIdDataReader( Guid id )
        {
            const string sql = SimpleRadomeDeviceDataReader.BaseQuery + "WHERE " + SimpleRadomeDeviceDataReader.ViewAliasName + ".[Id] = @id"; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                sqlCommandParameters.AddGuid( "@id", id );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleRadomeDeviceDataReader = new SimpleRadomeDeviceDataReader( _loggerFactory, sqlDataReader );
                return simpleRadomeDeviceDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public RadomeDeviceObject? GetRadomeDeviceById( Guid id )
        {
            var simpleRadomeDeviceDataReader = GetRadomeDeviceByIdDataReader( id );
            using ( simpleRadomeDeviceDataReader )
            {
                if ( simpleRadomeDeviceDataReader.Read( ) )
                {
                    var result = simpleRadomeDeviceDataReader.GetDataObject( );
                    return result;
                }
            }
            return null;
        }

        public void GetRadomeDeviceById( Guid id, Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleRadomeDeviceDataReader = GetRadomeDeviceByIdDataReader( id );
                using ( simpleRadomeDeviceDataReader )
                {
                    if ( simpleRadomeDeviceDataReader.Read( ) )
                    {
                        destinationWriter.Write( true );
                        simpleRadomeDeviceDataReader.WriteTo( destinationWriter );
                    }
                    else
                    {
                        destinationWriter.Write( false );
                    }
                }
            }
        }

        public SimpleRadomeDeviceDataReader GetRadomeDeviceCollectionDataReader( )
        {
            const string sql = SimpleRadomeDeviceDataReader.BaseQuery; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleRadomeDeviceDataReader = new SimpleRadomeDeviceDataReader( _loggerFactory, sqlDataReader );
                return simpleRadomeDeviceDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public IList<RadomeDeviceObject> GetRadomeDeviceCollection( )
        {
            var result = new List<RadomeDeviceObject>( );
            var simpleRadomeDeviceDataReader = GetRadomeDeviceCollectionDataReader( );
            using ( simpleRadomeDeviceDataReader )
            {
                while ( simpleRadomeDeviceDataReader.Read( ) )
                {
                    var data = simpleRadomeDeviceDataReader.GetDataObject( );
                    result.Add( data );
                }
            }
            return result;
        }

        public void GetRadomeDeviceCollection( Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleRadomeDeviceDataReader = GetRadomeDeviceCollectionDataReader( );
                using ( simpleRadomeDeviceDataReader )
                {
                    simpleRadomeDeviceDataReader.WriteResultSetTo( destinationWriter );
                }
            }
        }

        public SimpleRadomeDeviceDataReader GetRadomeDeviceCollectionByHostDataReader( Guid host )
        {
            const string sql = SimpleRadomeDeviceDataReader.BaseQuery + " WHERE " +
                    SimpleRadomeDeviceDataReader.ViewAliasName + ".[Host] = @host " +
                    " ORDER BY " + SimpleRadomeDeviceDataReader.ViewAliasName + ".[Host]," +SimpleRadomeDeviceDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var hostParameter = sqlCommandParameters.AddReference( "@host", host );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleRadomeDeviceDataReader = new SimpleRadomeDeviceDataReader( _loggerFactory, sqlDataReader );
                return simpleRadomeDeviceDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<RadomeDeviceObject> GetRadomeDeviceCollectionByHost( Guid host )
        {
            throw new NotImplementedException( );
        }
        public SimpleRadomeDeviceDataReader GetRadomeDeviceByNameDataReader( string name )
        {
            const string sql = SimpleRadomeDeviceDataReader.BaseQuery + " WHERE " +
                    SimpleRadomeDeviceDataReader.ViewAliasName + ".[Name] = @name " +
                    " ORDER BY " + SimpleRadomeDeviceDataReader.ViewAliasName + ".[Name]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var nameParameter = sqlCommandParameters.AddNVarChar( "@name", name, 127 );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleRadomeDeviceDataReader = new SimpleRadomeDeviceDataReader( _loggerFactory, sqlDataReader );
                return simpleRadomeDeviceDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public RadomeDeviceObject? GetRadomeDeviceByName( string name )
        {
            throw new NotImplementedException( );
        }
        public SimpleRadomeDeviceDataReader GetRadomeDeviceCollectionByRadarDataReader( Guid? radar )
        {
            const string sql = SimpleRadomeDeviceDataReader.BaseQuery + " WHERE " +
                    SimpleRadomeDeviceDataReader.ViewAliasName + ".[Radar] = @radar " +
                    " ORDER BY " + SimpleRadomeDeviceDataReader.ViewAliasName + ".[Radar]," +SimpleRadomeDeviceDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var radarParameter = sqlCommandParameters.AddReference( "@radar", radar );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleRadomeDeviceDataReader = new SimpleRadomeDeviceDataReader( _loggerFactory, sqlDataReader );
                return simpleRadomeDeviceDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<RadomeDeviceObject> GetRadomeDeviceCollectionByRadar( Guid? radar )
        {
            throw new NotImplementedException( );
        }
        public IList<RadomeDeviceObject> GetRadomeDeviceCollectionByRadarIsNull(  )
        {
            throw new NotImplementedException( );
        }
        // ---------------------------------------------------------------------
        // TrackerDevice queries
        // ---------------------------------------------------------------------
        public ComplexTrackerDeviceDataReader GetTrackerDeviceByIdDataReader( Guid id )
        {
            const string sql = ComplexTrackerDeviceDataReader.BaseQuery + "WHERE " + ComplexTrackerDeviceDataReader.ViewAliasName + ".[Id] = @id"; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                sqlCommandParameters.AddGuid( "@id", id );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var complexTrackerDeviceDataReader = new ComplexTrackerDeviceDataReader( _loggerFactory, sqlDataReader );
                return complexTrackerDeviceDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public TrackerDeviceObject? GetTrackerDeviceById( Guid id )
        {
            var complexTrackerDeviceDataReader = GetTrackerDeviceByIdDataReader( id );
            using ( complexTrackerDeviceDataReader )
            {
                if ( complexTrackerDeviceDataReader.Read( ) )
                {
                    var result = complexTrackerDeviceDataReader.GetDataObject( );
                    return result;
                }
            }
            return null;
        }

        public void GetTrackerDeviceById( Guid id, Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var complexTrackerDeviceDataReader = GetTrackerDeviceByIdDataReader( id );
                using ( complexTrackerDeviceDataReader )
                {
                    if ( complexTrackerDeviceDataReader.Read( ) )
                    {
                        destinationWriter.Write( true );
                        complexTrackerDeviceDataReader.WriteTo( destinationWriter );
                    }
                    else
                    {
                        destinationWriter.Write( false );
                    }
                }
            }
        }

        public ComplexTrackerDeviceDataReader GetTrackerDeviceCollectionDataReader( )
        {
            const string sql = ComplexTrackerDeviceDataReader.BaseQuery; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var complexTrackerDeviceDataReader = new ComplexTrackerDeviceDataReader( _loggerFactory, sqlDataReader );
                return complexTrackerDeviceDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public IList<TrackerDeviceObject> GetTrackerDeviceCollection( )
        {
            var result = new List<TrackerDeviceObject>( );
            var complexTrackerDeviceDataReader = GetTrackerDeviceCollectionDataReader( );
            using ( complexTrackerDeviceDataReader )
            {
                while ( complexTrackerDeviceDataReader.Read( ) )
                {
                    var data = complexTrackerDeviceDataReader.GetDataObject( );
                    result.Add( data );
                }
            }
            return result;
        }

        public void GetTrackerDeviceCollection( Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var complexTrackerDeviceDataReader = GetTrackerDeviceCollectionDataReader( );
                using ( complexTrackerDeviceDataReader )
                {
                    complexTrackerDeviceDataReader.WriteResultSetTo( destinationWriter );
                }
            }
        }

        public ComplexTrackerDeviceDataReader GetTrackerDeviceCollectionByHostDataReader( Guid host )
        {
            const string sql = ComplexTrackerDeviceDataReader.BaseQuery + " WHERE " +
                    ComplexTrackerDeviceDataReader.ViewAliasName + ".[Host] = @host " +
                    " ORDER BY " + ComplexTrackerDeviceDataReader.ViewAliasName + ".[Host]," +ComplexTrackerDeviceDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var hostParameter = sqlCommandParameters.AddReference( "@host", host );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var complexTrackerDeviceDataReader = new ComplexTrackerDeviceDataReader( _loggerFactory, sqlDataReader );
                return complexTrackerDeviceDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<TrackerDeviceObject> GetTrackerDeviceCollectionByHost( Guid host )
        {
            throw new NotImplementedException( );
        }
        public ComplexTrackerDeviceDataReader GetTrackerDeviceByNameDataReader( string name )
        {
            const string sql = ComplexTrackerDeviceDataReader.BaseQuery + " WHERE " +
                    ComplexTrackerDeviceDataReader.ViewAliasName + ".[Name] = @name " +
                    " ORDER BY " + ComplexTrackerDeviceDataReader.ViewAliasName + ".[Name]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var nameParameter = sqlCommandParameters.AddNVarChar( "@name", name, 127 );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var complexTrackerDeviceDataReader = new ComplexTrackerDeviceDataReader( _loggerFactory, sqlDataReader );
                return complexTrackerDeviceDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public TrackerDeviceObject? GetTrackerDeviceByName( string name )
        {
            throw new NotImplementedException( );
        }
        // ---------------------------------------------------------------------
        // AisDevice queries
        // ---------------------------------------------------------------------
        public SimpleAisDeviceDataReader GetAisDeviceByIdDataReader( Guid id )
        {
            const string sql = SimpleAisDeviceDataReader.BaseQuery + "WHERE " + SimpleAisDeviceDataReader.ViewAliasName + ".[Id] = @id"; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                sqlCommandParameters.AddGuid( "@id", id );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleAisDeviceDataReader = new SimpleAisDeviceDataReader( _loggerFactory, sqlDataReader );
                return simpleAisDeviceDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public AisDeviceObject? GetAisDeviceById( Guid id )
        {
            var simpleAisDeviceDataReader = GetAisDeviceByIdDataReader( id );
            using ( simpleAisDeviceDataReader )
            {
                if ( simpleAisDeviceDataReader.Read( ) )
                {
                    var result = simpleAisDeviceDataReader.GetDataObject( );
                    return result;
                }
            }
            return null;
        }

        public void GetAisDeviceById( Guid id, Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleAisDeviceDataReader = GetAisDeviceByIdDataReader( id );
                using ( simpleAisDeviceDataReader )
                {
                    if ( simpleAisDeviceDataReader.Read( ) )
                    {
                        destinationWriter.Write( true );
                        simpleAisDeviceDataReader.WriteTo( destinationWriter );
                    }
                    else
                    {
                        destinationWriter.Write( false );
                    }
                }
            }
        }

        public SimpleAisDeviceDataReader GetAisDeviceCollectionDataReader( )
        {
            const string sql = SimpleAisDeviceDataReader.BaseQuery; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleAisDeviceDataReader = new SimpleAisDeviceDataReader( _loggerFactory, sqlDataReader );
                return simpleAisDeviceDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public IList<AisDeviceObject> GetAisDeviceCollection( )
        {
            var result = new List<AisDeviceObject>( );
            var simpleAisDeviceDataReader = GetAisDeviceCollectionDataReader( );
            using ( simpleAisDeviceDataReader )
            {
                while ( simpleAisDeviceDataReader.Read( ) )
                {
                    var data = simpleAisDeviceDataReader.GetDataObject( );
                    result.Add( data );
                }
            }
            return result;
        }

        public void GetAisDeviceCollection( Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleAisDeviceDataReader = GetAisDeviceCollectionDataReader( );
                using ( simpleAisDeviceDataReader )
                {
                    simpleAisDeviceDataReader.WriteResultSetTo( destinationWriter );
                }
            }
        }

        public SimpleAisDeviceDataReader GetAisDeviceCollectionByHostDataReader( Guid host )
        {
            const string sql = SimpleAisDeviceDataReader.BaseQuery + " WHERE " +
                    SimpleAisDeviceDataReader.ViewAliasName + ".[Host] = @host " +
                    " ORDER BY " + SimpleAisDeviceDataReader.ViewAliasName + ".[Host]," +SimpleAisDeviceDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var hostParameter = sqlCommandParameters.AddReference( "@host", host );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleAisDeviceDataReader = new SimpleAisDeviceDataReader( _loggerFactory, sqlDataReader );
                return simpleAisDeviceDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<AisDeviceObject> GetAisDeviceCollectionByHost( Guid host )
        {
            throw new NotImplementedException( );
        }
        public SimpleAisDeviceDataReader GetAisDeviceByNameDataReader( string name )
        {
            const string sql = SimpleAisDeviceDataReader.BaseQuery + " WHERE " +
                    SimpleAisDeviceDataReader.ViewAliasName + ".[Name] = @name " +
                    " ORDER BY " + SimpleAisDeviceDataReader.ViewAliasName + ".[Name]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var nameParameter = sqlCommandParameters.AddNVarChar( "@name", name, 127 );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleAisDeviceDataReader = new SimpleAisDeviceDataReader( _loggerFactory, sqlDataReader );
                return simpleAisDeviceDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public AisDeviceObject? GetAisDeviceByName( string name )
        {
            throw new NotImplementedException( );
        }
        // ---------------------------------------------------------------------
        // RadarDevice queries
        // ---------------------------------------------------------------------
        public SimpleRadarDeviceDataReader GetRadarDeviceByIdDataReader( Guid id )
        {
            const string sql = SimpleRadarDeviceDataReader.BaseQuery + "WHERE " + SimpleRadarDeviceDataReader.ViewAliasName + ".[Id] = @id"; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                sqlCommandParameters.AddGuid( "@id", id );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleRadarDeviceDataReader = new SimpleRadarDeviceDataReader( _loggerFactory, sqlDataReader );
                return simpleRadarDeviceDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public RadarDeviceObject? GetRadarDeviceById( Guid id )
        {
            var simpleRadarDeviceDataReader = GetRadarDeviceByIdDataReader( id );
            using ( simpleRadarDeviceDataReader )
            {
                if ( simpleRadarDeviceDataReader.Read( ) )
                {
                    var result = simpleRadarDeviceDataReader.GetDataObject( );
                    return result;
                }
            }
            return null;
        }

        public void GetRadarDeviceById( Guid id, Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleRadarDeviceDataReader = GetRadarDeviceByIdDataReader( id );
                using ( simpleRadarDeviceDataReader )
                {
                    if ( simpleRadarDeviceDataReader.Read( ) )
                    {
                        destinationWriter.Write( true );
                        simpleRadarDeviceDataReader.WriteTo( destinationWriter );
                    }
                    else
                    {
                        destinationWriter.Write( false );
                    }
                }
            }
        }

        public SimpleRadarDeviceDataReader GetRadarDeviceCollectionDataReader( )
        {
            const string sql = SimpleRadarDeviceDataReader.BaseQuery; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleRadarDeviceDataReader = new SimpleRadarDeviceDataReader( _loggerFactory, sqlDataReader );
                return simpleRadarDeviceDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public IList<RadarDeviceObject> GetRadarDeviceCollection( )
        {
            var result = new List<RadarDeviceObject>( );
            var simpleRadarDeviceDataReader = GetRadarDeviceCollectionDataReader( );
            using ( simpleRadarDeviceDataReader )
            {
                while ( simpleRadarDeviceDataReader.Read( ) )
                {
                    var data = simpleRadarDeviceDataReader.GetDataObject( );
                    result.Add( data );
                }
            }
            return result;
        }

        public void GetRadarDeviceCollection( Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleRadarDeviceDataReader = GetRadarDeviceCollectionDataReader( );
                using ( simpleRadarDeviceDataReader )
                {
                    simpleRadarDeviceDataReader.WriteResultSetTo( destinationWriter );
                }
            }
        }

        public SimpleRadarDeviceDataReader GetRadarDeviceCollectionByHostDataReader( Guid host )
        {
            const string sql = SimpleRadarDeviceDataReader.BaseQuery + " WHERE " +
                    SimpleRadarDeviceDataReader.ViewAliasName + ".[Host] = @host " +
                    " ORDER BY " + SimpleRadarDeviceDataReader.ViewAliasName + ".[Host]," +SimpleRadarDeviceDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var hostParameter = sqlCommandParameters.AddReference( "@host", host );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleRadarDeviceDataReader = new SimpleRadarDeviceDataReader( _loggerFactory, sqlDataReader );
                return simpleRadarDeviceDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<RadarDeviceObject> GetRadarDeviceCollectionByHost( Guid host )
        {
            throw new NotImplementedException( );
        }
        public SimpleRadarDeviceDataReader GetRadarDeviceByNameDataReader( string name )
        {
            const string sql = SimpleRadarDeviceDataReader.BaseQuery + " WHERE " +
                    SimpleRadarDeviceDataReader.ViewAliasName + ".[Name] = @name " +
                    " ORDER BY " + SimpleRadarDeviceDataReader.ViewAliasName + ".[Name]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var nameParameter = sqlCommandParameters.AddNVarChar( "@name", name, 127 );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleRadarDeviceDataReader = new SimpleRadarDeviceDataReader( _loggerFactory, sqlDataReader );
                return simpleRadarDeviceDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public RadarDeviceObject? GetRadarDeviceByName( string name )
        {
            throw new NotImplementedException( );
        }
        public SimpleRadarDeviceDataReader GetRadarDeviceCollectionByRadomeDataReader( Guid? radome )
        {
            const string sql = SimpleRadarDeviceDataReader.BaseQuery + " WHERE " +
                    SimpleRadarDeviceDataReader.ViewAliasName + ".[Radome] = @radome " +
                    " ORDER BY " + SimpleRadarDeviceDataReader.ViewAliasName + ".[Radome]," +SimpleRadarDeviceDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var radomeParameter = sqlCommandParameters.AddReference( "@radome", radome );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleRadarDeviceDataReader = new SimpleRadarDeviceDataReader( _loggerFactory, sqlDataReader );
                return simpleRadarDeviceDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<RadarDeviceObject> GetRadarDeviceCollectionByRadome( Guid? radome )
        {
            throw new NotImplementedException( );
        }
        public IList<RadarDeviceObject> GetRadarDeviceCollectionByRadomeIsNull(  )
        {
            throw new NotImplementedException( );
        }
        public SimpleRadarDeviceDataReader GetRadarDeviceCollectionByGNSSDeviceDataReader( Guid? gNSSDevice )
        {
            const string sql = SimpleRadarDeviceDataReader.BaseQuery + " WHERE " +
                    SimpleRadarDeviceDataReader.ViewAliasName + ".[GNSSDevice] = @gNSSDevice " +
                    " ORDER BY " + SimpleRadarDeviceDataReader.ViewAliasName + ".[GNSSDevice]," +SimpleRadarDeviceDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var gNSSDeviceParameter = sqlCommandParameters.AddReference( "@gNSSDevice", gNSSDevice );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleRadarDeviceDataReader = new SimpleRadarDeviceDataReader( _loggerFactory, sqlDataReader );
                return simpleRadarDeviceDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<RadarDeviceObject> GetRadarDeviceCollectionByGNSSDevice( Guid? gNSSDevice )
        {
            throw new NotImplementedException( );
        }
        public IList<RadarDeviceObject> GetRadarDeviceCollectionByGNSSDeviceIsNull(  )
        {
            throw new NotImplementedException( );
        }
        // ---------------------------------------------------------------------
        // WeatherStationDevice queries
        // ---------------------------------------------------------------------
        public SimpleWeatherStationDeviceDataReader GetWeatherStationDeviceByIdDataReader( Guid id )
        {
            const string sql = SimpleWeatherStationDeviceDataReader.BaseQuery + "WHERE " + SimpleWeatherStationDeviceDataReader.ViewAliasName + ".[Id] = @id"; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                sqlCommandParameters.AddGuid( "@id", id );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleWeatherStationDeviceDataReader = new SimpleWeatherStationDeviceDataReader( _loggerFactory, sqlDataReader );
                return simpleWeatherStationDeviceDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public WeatherStationDeviceObject? GetWeatherStationDeviceById( Guid id )
        {
            var simpleWeatherStationDeviceDataReader = GetWeatherStationDeviceByIdDataReader( id );
            using ( simpleWeatherStationDeviceDataReader )
            {
                if ( simpleWeatherStationDeviceDataReader.Read( ) )
                {
                    var result = simpleWeatherStationDeviceDataReader.GetDataObject( );
                    return result;
                }
            }
            return null;
        }

        public void GetWeatherStationDeviceById( Guid id, Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleWeatherStationDeviceDataReader = GetWeatherStationDeviceByIdDataReader( id );
                using ( simpleWeatherStationDeviceDataReader )
                {
                    if ( simpleWeatherStationDeviceDataReader.Read( ) )
                    {
                        destinationWriter.Write( true );
                        simpleWeatherStationDeviceDataReader.WriteTo( destinationWriter );
                    }
                    else
                    {
                        destinationWriter.Write( false );
                    }
                }
            }
        }

        public SimpleWeatherStationDeviceDataReader GetWeatherStationDeviceCollectionDataReader( )
        {
            const string sql = SimpleWeatherStationDeviceDataReader.BaseQuery; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleWeatherStationDeviceDataReader = new SimpleWeatherStationDeviceDataReader( _loggerFactory, sqlDataReader );
                return simpleWeatherStationDeviceDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public IList<WeatherStationDeviceObject> GetWeatherStationDeviceCollection( )
        {
            var result = new List<WeatherStationDeviceObject>( );
            var simpleWeatherStationDeviceDataReader = GetWeatherStationDeviceCollectionDataReader( );
            using ( simpleWeatherStationDeviceDataReader )
            {
                while ( simpleWeatherStationDeviceDataReader.Read( ) )
                {
                    var data = simpleWeatherStationDeviceDataReader.GetDataObject( );
                    result.Add( data );
                }
            }
            return result;
        }

        public void GetWeatherStationDeviceCollection( Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleWeatherStationDeviceDataReader = GetWeatherStationDeviceCollectionDataReader( );
                using ( simpleWeatherStationDeviceDataReader )
                {
                    simpleWeatherStationDeviceDataReader.WriteResultSetTo( destinationWriter );
                }
            }
        }

        public SimpleWeatherStationDeviceDataReader GetWeatherStationDeviceCollectionByHostDataReader( Guid host )
        {
            const string sql = SimpleWeatherStationDeviceDataReader.BaseQuery + " WHERE " +
                    SimpleWeatherStationDeviceDataReader.ViewAliasName + ".[Host] = @host " +
                    " ORDER BY " + SimpleWeatherStationDeviceDataReader.ViewAliasName + ".[Host]," +SimpleWeatherStationDeviceDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var hostParameter = sqlCommandParameters.AddReference( "@host", host );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleWeatherStationDeviceDataReader = new SimpleWeatherStationDeviceDataReader( _loggerFactory, sqlDataReader );
                return simpleWeatherStationDeviceDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<WeatherStationDeviceObject> GetWeatherStationDeviceCollectionByHost( Guid host )
        {
            throw new NotImplementedException( );
        }
        public SimpleWeatherStationDeviceDataReader GetWeatherStationDeviceByNameDataReader( string name )
        {
            const string sql = SimpleWeatherStationDeviceDataReader.BaseQuery + " WHERE " +
                    SimpleWeatherStationDeviceDataReader.ViewAliasName + ".[Name] = @name " +
                    " ORDER BY " + SimpleWeatherStationDeviceDataReader.ViewAliasName + ".[Name]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var nameParameter = sqlCommandParameters.AddNVarChar( "@name", name, 127 );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleWeatherStationDeviceDataReader = new SimpleWeatherStationDeviceDataReader( _loggerFactory, sqlDataReader );
                return simpleWeatherStationDeviceDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public WeatherStationDeviceObject? GetWeatherStationDeviceByName( string name )
        {
            throw new NotImplementedException( );
        }
        public SimpleWeatherStationDeviceDataReader GetWeatherStationDeviceCollectionByGyroDataReader( Guid gyro )
        {
            const string sql = SimpleWeatherStationDeviceDataReader.BaseQuery + " WHERE " +
                    SimpleWeatherStationDeviceDataReader.ViewAliasName + ".[Gyro] = @gyro " +
                    " ORDER BY " + SimpleWeatherStationDeviceDataReader.ViewAliasName + ".[Gyro]," +SimpleWeatherStationDeviceDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var gyroParameter = sqlCommandParameters.AddReference( "@gyro", gyro );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleWeatherStationDeviceDataReader = new SimpleWeatherStationDeviceDataReader( _loggerFactory, sqlDataReader );
                return simpleWeatherStationDeviceDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<WeatherStationDeviceObject> GetWeatherStationDeviceCollectionByGyro( Guid gyro )
        {
            throw new NotImplementedException( );
        }
        // ---------------------------------------------------------------------
        // Facility queries
        // ---------------------------------------------------------------------
        public SimpleFacilityDataReader GetFacilityByIdDataReader( Guid id )
        {
            const string sql = SimpleFacilityDataReader.BaseQuery + "WHERE " + SimpleFacilityDataReader.ViewAliasName + ".[Id] = @id"; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                sqlCommandParameters.AddGuid( "@id", id );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleFacilityDataReader = new SimpleFacilityDataReader( _loggerFactory, sqlDataReader );
                return simpleFacilityDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public FacilityObject? GetFacilityById( Guid id )
        {
            var simpleFacilityDataReader = GetFacilityByIdDataReader( id );
            using ( simpleFacilityDataReader )
            {
                if ( simpleFacilityDataReader.Read( ) )
                {
                    var result = simpleFacilityDataReader.GetDataObject( );
                    return result;
                }
            }
            return null;
        }

        public void GetFacilityById( Guid id, Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleFacilityDataReader = GetFacilityByIdDataReader( id );
                using ( simpleFacilityDataReader )
                {
                    if ( simpleFacilityDataReader.Read( ) )
                    {
                        destinationWriter.Write( true );
                        simpleFacilityDataReader.WriteTo( destinationWriter );
                    }
                    else
                    {
                        destinationWriter.Write( false );
                    }
                }
            }
        }

        public SimpleFacilityDataReader GetFacilityCollectionDataReader( )
        {
            const string sql = SimpleFacilityDataReader.BaseQuery; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleFacilityDataReader = new SimpleFacilityDataReader( _loggerFactory, sqlDataReader );
                return simpleFacilityDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public IList<FacilityObject> GetFacilityCollection( )
        {
            var result = new List<FacilityObject>( );
            var simpleFacilityDataReader = GetFacilityCollectionDataReader( );
            using ( simpleFacilityDataReader )
            {
                while ( simpleFacilityDataReader.Read( ) )
                {
                    var data = simpleFacilityDataReader.GetDataObject( );
                    result.Add( data );
                }
            }
            return result;
        }

        public void GetFacilityCollection( Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleFacilityDataReader = GetFacilityCollectionDataReader( );
                using ( simpleFacilityDataReader )
                {
                    simpleFacilityDataReader.WriteResultSetTo( destinationWriter );
                }
            }
        }

        public SimpleFacilityDataReader GetFacilityByNameDataReader( string name )
        {
            const string sql = SimpleFacilityDataReader.BaseQuery + " WHERE " +
                    SimpleFacilityDataReader.ViewAliasName + ".[Name] = @name " +
                    " ORDER BY " + SimpleFacilityDataReader.ViewAliasName + ".[Name]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var nameParameter = sqlCommandParameters.AddNVarChar( "@name", name, 127 );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleFacilityDataReader = new SimpleFacilityDataReader( _loggerFactory, sqlDataReader );
                return simpleFacilityDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public FacilityObject? GetFacilityByName( string name )
        {
            throw new NotImplementedException( );
        }
        public SimpleFacilityDataReader GetFacilityCollectionByTypeDataReader( Guid type )
        {
            const string sql = SimpleFacilityDataReader.BaseQuery + " WHERE " +
                    SimpleFacilityDataReader.ViewAliasName + ".[Type] = @type " +
                    " ORDER BY " + SimpleFacilityDataReader.ViewAliasName + ".[Type]," +SimpleFacilityDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var typeParameter = sqlCommandParameters.AddReference( "@type", type );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleFacilityDataReader = new SimpleFacilityDataReader( _loggerFactory, sqlDataReader );
                return simpleFacilityDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<FacilityObject> GetFacilityCollectionByType( Guid type )
        {
            throw new NotImplementedException( );
        }
        // ---------------------------------------------------------------------
        // TrackableItem queries
        // ---------------------------------------------------------------------
        public ComplexTrackableItemDataReader GetTrackableItemByIdDataReader( Guid id )
        {
            const string sql = ComplexTrackableItemDataReader.BaseQuery + "WHERE " + ComplexTrackableItemDataReader.ViewAliasName + ".[Id] = @id"; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                sqlCommandParameters.AddGuid( "@id", id );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var complexTrackableItemDataReader = new ComplexTrackableItemDataReader( _loggerFactory, sqlDataReader );
                return complexTrackableItemDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public TrackableItemObject? GetTrackableItemById( Guid id )
        {
            var complexTrackableItemDataReader = GetTrackableItemByIdDataReader( id );
            using ( complexTrackableItemDataReader )
            {
                if ( complexTrackableItemDataReader.Read( ) )
                {
                    var result = complexTrackableItemDataReader.GetDataObject( );
                    return result;
                }
            }
            return null;
        }

        public void GetTrackableItemById( Guid id, Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var complexTrackableItemDataReader = GetTrackableItemByIdDataReader( id );
                using ( complexTrackableItemDataReader )
                {
                    if ( complexTrackableItemDataReader.Read( ) )
                    {
                        destinationWriter.Write( true );
                        complexTrackableItemDataReader.WriteTo( destinationWriter );
                    }
                    else
                    {
                        destinationWriter.Write( false );
                    }
                }
            }
        }

        public ComplexTrackableItemDataReader GetTrackableItemCollectionDataReader( )
        {
            const string sql = ComplexTrackableItemDataReader.BaseQuery; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var complexTrackableItemDataReader = new ComplexTrackableItemDataReader( _loggerFactory, sqlDataReader );
                return complexTrackableItemDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public IList<TrackableItemObject> GetTrackableItemCollection( )
        {
            var result = new List<TrackableItemObject>( );
            var complexTrackableItemDataReader = GetTrackableItemCollectionDataReader( );
            using ( complexTrackableItemDataReader )
            {
                while ( complexTrackableItemDataReader.Read( ) )
                {
                    var data = complexTrackableItemDataReader.GetDataObject( );
                    result.Add( data );
                }
            }
            return result;
        }

        public void GetTrackableItemCollection( Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var complexTrackableItemDataReader = GetTrackableItemCollectionDataReader( );
                using ( complexTrackableItemDataReader )
                {
                    complexTrackableItemDataReader.WriteResultSetTo( destinationWriter );
                }
            }
        }

        // ---------------------------------------------------------------------
        // Aircraft queries
        // ---------------------------------------------------------------------
        public SimpleAircraftDataReader GetAircraftByIdDataReader( Guid id )
        {
            const string sql = SimpleAircraftDataReader.BaseQuery + "WHERE " + SimpleAircraftDataReader.ViewAliasName + ".[Id] = @id"; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                sqlCommandParameters.AddGuid( "@id", id );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleAircraftDataReader = new SimpleAircraftDataReader( _loggerFactory, sqlDataReader );
                return simpleAircraftDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public AircraftObject? GetAircraftById( Guid id )
        {
            var simpleAircraftDataReader = GetAircraftByIdDataReader( id );
            using ( simpleAircraftDataReader )
            {
                if ( simpleAircraftDataReader.Read( ) )
                {
                    var result = simpleAircraftDataReader.GetDataObject( );
                    return result;
                }
            }
            return null;
        }

        public void GetAircraftById( Guid id, Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleAircraftDataReader = GetAircraftByIdDataReader( id );
                using ( simpleAircraftDataReader )
                {
                    if ( simpleAircraftDataReader.Read( ) )
                    {
                        destinationWriter.Write( true );
                        simpleAircraftDataReader.WriteTo( destinationWriter );
                    }
                    else
                    {
                        destinationWriter.Write( false );
                    }
                }
            }
        }

        public SimpleAircraftDataReader GetAircraftCollectionDataReader( )
        {
            const string sql = SimpleAircraftDataReader.BaseQuery; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleAircraftDataReader = new SimpleAircraftDataReader( _loggerFactory, sqlDataReader );
                return simpleAircraftDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public IList<AircraftObject> GetAircraftCollection( )
        {
            var result = new List<AircraftObject>( );
            var simpleAircraftDataReader = GetAircraftCollectionDataReader( );
            using ( simpleAircraftDataReader )
            {
                while ( simpleAircraftDataReader.Read( ) )
                {
                    var data = simpleAircraftDataReader.GetDataObject( );
                    result.Add( data );
                }
            }
            return result;
        }

        public void GetAircraftCollection( Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleAircraftDataReader = GetAircraftCollectionDataReader( );
                using ( simpleAircraftDataReader )
                {
                    simpleAircraftDataReader.WriteResultSetTo( destinationWriter );
                }
            }
        }

        public SimpleAircraftDataReader GetAircraftCollectionByNameDataReader( string name )
        {
            const string sql = SimpleAircraftDataReader.BaseQuery + " WHERE " +
                    SimpleAircraftDataReader.ViewAliasName + ".[Name] = @name " +
                    " ORDER BY " + SimpleAircraftDataReader.ViewAliasName + ".[Name]," +SimpleAircraftDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var nameParameter = sqlCommandParameters.AddNVarChar( "@name", name, 127 );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleAircraftDataReader = new SimpleAircraftDataReader( _loggerFactory, sqlDataReader );
                return simpleAircraftDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<AircraftObject> GetAircraftCollectionByName( string name )
        {
            throw new NotImplementedException( );
        }
        public SimpleAircraftDataReader GetAircraftCollectionByTypeDataReader( Guid type )
        {
            const string sql = SimpleAircraftDataReader.BaseQuery + " WHERE " +
                    SimpleAircraftDataReader.ViewAliasName + ".[Type] = @type " +
                    " ORDER BY " + SimpleAircraftDataReader.ViewAliasName + ".[Type]," +SimpleAircraftDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var typeParameter = sqlCommandParameters.AddReference( "@type", type );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleAircraftDataReader = new SimpleAircraftDataReader( _loggerFactory, sqlDataReader );
                return simpleAircraftDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<AircraftObject> GetAircraftCollectionByType( Guid type )
        {
            throw new NotImplementedException( );
        }
        // ---------------------------------------------------------------------
        // AisAidToNavigation queries
        // ---------------------------------------------------------------------
        public SimpleAisAidToNavigationDataReader GetAisAidToNavigationByIdDataReader( Guid id )
        {
            const string sql = SimpleAisAidToNavigationDataReader.BaseQuery + "WHERE " + SimpleAisAidToNavigationDataReader.ViewAliasName + ".[Id] = @id"; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                sqlCommandParameters.AddGuid( "@id", id );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleAisAidToNavigationDataReader = new SimpleAisAidToNavigationDataReader( _loggerFactory, sqlDataReader );
                return simpleAisAidToNavigationDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public AisAidToNavigationObject? GetAisAidToNavigationById( Guid id )
        {
            var simpleAisAidToNavigationDataReader = GetAisAidToNavigationByIdDataReader( id );
            using ( simpleAisAidToNavigationDataReader )
            {
                if ( simpleAisAidToNavigationDataReader.Read( ) )
                {
                    var result = simpleAisAidToNavigationDataReader.GetDataObject( );
                    return result;
                }
            }
            return null;
        }

        public void GetAisAidToNavigationById( Guid id, Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleAisAidToNavigationDataReader = GetAisAidToNavigationByIdDataReader( id );
                using ( simpleAisAidToNavigationDataReader )
                {
                    if ( simpleAisAidToNavigationDataReader.Read( ) )
                    {
                        destinationWriter.Write( true );
                        simpleAisAidToNavigationDataReader.WriteTo( destinationWriter );
                    }
                    else
                    {
                        destinationWriter.Write( false );
                    }
                }
            }
        }

        public SimpleAisAidToNavigationDataReader GetAisAidToNavigationCollectionDataReader( )
        {
            const string sql = SimpleAisAidToNavigationDataReader.BaseQuery; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleAisAidToNavigationDataReader = new SimpleAisAidToNavigationDataReader( _loggerFactory, sqlDataReader );
                return simpleAisAidToNavigationDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public IList<AisAidToNavigationObject> GetAisAidToNavigationCollection( )
        {
            var result = new List<AisAidToNavigationObject>( );
            var simpleAisAidToNavigationDataReader = GetAisAidToNavigationCollectionDataReader( );
            using ( simpleAisAidToNavigationDataReader )
            {
                while ( simpleAisAidToNavigationDataReader.Read( ) )
                {
                    var data = simpleAisAidToNavigationDataReader.GetDataObject( );
                    result.Add( data );
                }
            }
            return result;
        }

        public void GetAisAidToNavigationCollection( Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleAisAidToNavigationDataReader = GetAisAidToNavigationCollectionDataReader( );
                using ( simpleAisAidToNavigationDataReader )
                {
                    simpleAisAidToNavigationDataReader.WriteResultSetTo( destinationWriter );
                }
            }
        }

        public SimpleAisAidToNavigationDataReader GetAisAidToNavigationByNameDataReader( string name )
        {
            const string sql = SimpleAisAidToNavigationDataReader.BaseQuery + " WHERE " +
                    SimpleAisAidToNavigationDataReader.ViewAliasName + ".[Name] = @name " +
                    " ORDER BY " + SimpleAisAidToNavigationDataReader.ViewAliasName + ".[Name]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var nameParameter = sqlCommandParameters.AddNVarChar( "@name", name, 127 );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleAisAidToNavigationDataReader = new SimpleAisAidToNavigationDataReader( _loggerFactory, sqlDataReader );
                return simpleAisAidToNavigationDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public AisAidToNavigationObject? GetAisAidToNavigationByName( string name )
        {
            throw new NotImplementedException( );
        }
        public SimpleAisAidToNavigationDataReader GetAisAidToNavigationCollectionByMMSIDataReader( Guid mMSI )
        {
            const string sql = SimpleAisAidToNavigationDataReader.BaseQuery + " WHERE " +
                    SimpleAisAidToNavigationDataReader.ViewAliasName + ".[MMSI] = @mMSI " +
                    " ORDER BY " + SimpleAisAidToNavigationDataReader.ViewAliasName + ".[MMSI]," +SimpleAisAidToNavigationDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var mMSIParameter = sqlCommandParameters.AddReference( "@mMSI", mMSI );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleAisAidToNavigationDataReader = new SimpleAisAidToNavigationDataReader( _loggerFactory, sqlDataReader );
                return simpleAisAidToNavigationDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<AisAidToNavigationObject> GetAisAidToNavigationCollectionByMMSI( Guid mMSI )
        {
            throw new NotImplementedException( );
        }
        // ---------------------------------------------------------------------
        // Vehicle queries
        // ---------------------------------------------------------------------
        public SimpleVehicleDataReader GetVehicleByIdDataReader( Guid id )
        {
            const string sql = SimpleVehicleDataReader.BaseQuery + "WHERE " + SimpleVehicleDataReader.ViewAliasName + ".[Id] = @id"; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                sqlCommandParameters.AddGuid( "@id", id );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleVehicleDataReader = new SimpleVehicleDataReader( _loggerFactory, sqlDataReader );
                return simpleVehicleDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public VehicleObject? GetVehicleById( Guid id )
        {
            var simpleVehicleDataReader = GetVehicleByIdDataReader( id );
            using ( simpleVehicleDataReader )
            {
                if ( simpleVehicleDataReader.Read( ) )
                {
                    var result = simpleVehicleDataReader.GetDataObject( );
                    return result;
                }
            }
            return null;
        }

        public void GetVehicleById( Guid id, Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleVehicleDataReader = GetVehicleByIdDataReader( id );
                using ( simpleVehicleDataReader )
                {
                    if ( simpleVehicleDataReader.Read( ) )
                    {
                        destinationWriter.Write( true );
                        simpleVehicleDataReader.WriteTo( destinationWriter );
                    }
                    else
                    {
                        destinationWriter.Write( false );
                    }
                }
            }
        }

        public SimpleVehicleDataReader GetVehicleCollectionDataReader( )
        {
            const string sql = SimpleVehicleDataReader.BaseQuery; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleVehicleDataReader = new SimpleVehicleDataReader( _loggerFactory, sqlDataReader );
                return simpleVehicleDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public IList<VehicleObject> GetVehicleCollection( )
        {
            var result = new List<VehicleObject>( );
            var simpleVehicleDataReader = GetVehicleCollectionDataReader( );
            using ( simpleVehicleDataReader )
            {
                while ( simpleVehicleDataReader.Read( ) )
                {
                    var data = simpleVehicleDataReader.GetDataObject( );
                    result.Add( data );
                }
            }
            return result;
        }

        public void GetVehicleCollection( Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleVehicleDataReader = GetVehicleCollectionDataReader( );
                using ( simpleVehicleDataReader )
                {
                    simpleVehicleDataReader.WriteResultSetTo( destinationWriter );
                }
            }
        }

        public SimpleVehicleDataReader GetVehicleByNameDataReader( string name )
        {
            const string sql = SimpleVehicleDataReader.BaseQuery + " WHERE " +
                    SimpleVehicleDataReader.ViewAliasName + ".[Name] = @name " +
                    " ORDER BY " + SimpleVehicleDataReader.ViewAliasName + ".[Name]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var nameParameter = sqlCommandParameters.AddNVarChar( "@name", name, 127 );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleVehicleDataReader = new SimpleVehicleDataReader( _loggerFactory, sqlDataReader );
                return simpleVehicleDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public VehicleObject? GetVehicleByName( string name )
        {
            throw new NotImplementedException( );
        }
        public SimpleVehicleDataReader GetVehicleCollectionByTypeDataReader( Guid type )
        {
            const string sql = SimpleVehicleDataReader.BaseQuery + " WHERE " +
                    SimpleVehicleDataReader.ViewAliasName + ".[Type] = @type " +
                    " ORDER BY " + SimpleVehicleDataReader.ViewAliasName + ".[Type]," +SimpleVehicleDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var typeParameter = sqlCommandParameters.AddReference( "@type", type );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleVehicleDataReader = new SimpleVehicleDataReader( _loggerFactory, sqlDataReader );
                return simpleVehicleDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<VehicleObject> GetVehicleCollectionByType( Guid type )
        {
            throw new NotImplementedException( );
        }
        // ---------------------------------------------------------------------
        // Vessel queries
        // ---------------------------------------------------------------------
        public SimpleVesselDataReader GetVesselByIdDataReader( Guid id )
        {
            const string sql = SimpleVesselDataReader.BaseQuery + "WHERE " + SimpleVesselDataReader.ViewAliasName + ".[Id] = @id"; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                sqlCommandParameters.AddGuid( "@id", id );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleVesselDataReader = new SimpleVesselDataReader( _loggerFactory, sqlDataReader );
                return simpleVesselDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public VesselObject? GetVesselById( Guid id )
        {
            var simpleVesselDataReader = GetVesselByIdDataReader( id );
            using ( simpleVesselDataReader )
            {
                if ( simpleVesselDataReader.Read( ) )
                {
                    var result = simpleVesselDataReader.GetDataObject( );
                    return result;
                }
            }
            return null;
        }

        public void GetVesselById( Guid id, Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleVesselDataReader = GetVesselByIdDataReader( id );
                using ( simpleVesselDataReader )
                {
                    if ( simpleVesselDataReader.Read( ) )
                    {
                        destinationWriter.Write( true );
                        simpleVesselDataReader.WriteTo( destinationWriter );
                    }
                    else
                    {
                        destinationWriter.Write( false );
                    }
                }
            }
        }

        public SimpleVesselDataReader GetVesselCollectionDataReader( )
        {
            const string sql = SimpleVesselDataReader.BaseQuery; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleVesselDataReader = new SimpleVesselDataReader( _loggerFactory, sqlDataReader );
                return simpleVesselDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public IList<VesselObject> GetVesselCollection( )
        {
            var result = new List<VesselObject>( );
            var simpleVesselDataReader = GetVesselCollectionDataReader( );
            using ( simpleVesselDataReader )
            {
                while ( simpleVesselDataReader.Read( ) )
                {
                    var data = simpleVesselDataReader.GetDataObject( );
                    result.Add( data );
                }
            }
            return result;
        }

        public void GetVesselCollection( Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleVesselDataReader = GetVesselCollectionDataReader( );
                using ( simpleVesselDataReader )
                {
                    simpleVesselDataReader.WriteResultSetTo( destinationWriter );
                }
            }
        }

        public SimpleVesselDataReader GetVesselCollectionByNameDataReader( string name )
        {
            const string sql = SimpleVesselDataReader.BaseQuery + " WHERE " +
                    SimpleVesselDataReader.ViewAliasName + ".[Name] = @name " +
                    " ORDER BY " + SimpleVesselDataReader.ViewAliasName + ".[Name]," +SimpleVesselDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var nameParameter = sqlCommandParameters.AddNVarChar( "@name", name, 127 );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleVesselDataReader = new SimpleVesselDataReader( _loggerFactory, sqlDataReader );
                return simpleVesselDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<VesselObject> GetVesselCollectionByName( string name )
        {
            throw new NotImplementedException( );
        }
        public SimpleVesselDataReader GetVesselCollectionByTypeDataReader( Guid type )
        {
            const string sql = SimpleVesselDataReader.BaseQuery + " WHERE " +
                    SimpleVesselDataReader.ViewAliasName + ".[Type] = @type " +
                    " ORDER BY " + SimpleVesselDataReader.ViewAliasName + ".[Type]," +SimpleVesselDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var typeParameter = sqlCommandParameters.AddReference( "@type", type );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleVesselDataReader = new SimpleVesselDataReader( _loggerFactory, sqlDataReader );
                return simpleVesselDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<VesselObject> GetVesselCollectionByType( Guid type )
        {
            throw new NotImplementedException( );
        }
        // ---------------------------------------------------------------------
        // ItemIdentityLink queries
        // ---------------------------------------------------------------------
        public SimpleItemIdentityLinkDataReader GetItemIdentityLinkByIdDataReader( Guid id )
        {
            const string sql = SimpleItemIdentityLinkDataReader.BaseQuery + "WHERE " + SimpleItemIdentityLinkDataReader.ViewAliasName + ".[Id] = @id"; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                sqlCommandParameters.AddGuid( "@id", id );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleItemIdentityLinkDataReader = new SimpleItemIdentityLinkDataReader( _loggerFactory, sqlDataReader );
                return simpleItemIdentityLinkDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public ItemIdentityLinkObject? GetItemIdentityLinkById( Guid id )
        {
            var simpleItemIdentityLinkDataReader = GetItemIdentityLinkByIdDataReader( id );
            using ( simpleItemIdentityLinkDataReader )
            {
                if ( simpleItemIdentityLinkDataReader.Read( ) )
                {
                    var result = simpleItemIdentityLinkDataReader.GetDataObject( );
                    return result;
                }
            }
            return null;
        }

        public void GetItemIdentityLinkById( Guid id, Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleItemIdentityLinkDataReader = GetItemIdentityLinkByIdDataReader( id );
                using ( simpleItemIdentityLinkDataReader )
                {
                    if ( simpleItemIdentityLinkDataReader.Read( ) )
                    {
                        destinationWriter.Write( true );
                        simpleItemIdentityLinkDataReader.WriteTo( destinationWriter );
                    }
                    else
                    {
                        destinationWriter.Write( false );
                    }
                }
            }
        }

        public SimpleItemIdentityLinkDataReader GetItemIdentityLinkCollectionDataReader( )
        {
            const string sql = SimpleItemIdentityLinkDataReader.BaseQuery; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleItemIdentityLinkDataReader = new SimpleItemIdentityLinkDataReader( _loggerFactory, sqlDataReader );
                return simpleItemIdentityLinkDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public IList<ItemIdentityLinkObject> GetItemIdentityLinkCollection( )
        {
            var result = new List<ItemIdentityLinkObject>( );
            var simpleItemIdentityLinkDataReader = GetItemIdentityLinkCollectionDataReader( );
            using ( simpleItemIdentityLinkDataReader )
            {
                while ( simpleItemIdentityLinkDataReader.Read( ) )
                {
                    var data = simpleItemIdentityLinkDataReader.GetDataObject( );
                    result.Add( data );
                }
            }
            return result;
        }

        public void GetItemIdentityLinkCollection( Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleItemIdentityLinkDataReader = GetItemIdentityLinkCollectionDataReader( );
                using ( simpleItemIdentityLinkDataReader )
                {
                    simpleItemIdentityLinkDataReader.WriteResultSetTo( destinationWriter );
                }
            }
        }

        public SimpleItemIdentityLinkDataReader GetItemIdentityLinkCollectionByItemDataReader( Guid item )
        {
            const string sql = SimpleItemIdentityLinkDataReader.BaseQuery + " WHERE " +
                    SimpleItemIdentityLinkDataReader.ViewAliasName + ".[Item] = @item " +
                    " ORDER BY " + SimpleItemIdentityLinkDataReader.ViewAliasName + ".[Item]," +SimpleItemIdentityLinkDataReader.ViewAliasName + ".[Start]," +SimpleItemIdentityLinkDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var itemParameter = sqlCommandParameters.AddReference( "@item", item );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleItemIdentityLinkDataReader = new SimpleItemIdentityLinkDataReader( _loggerFactory, sqlDataReader );
                return simpleItemIdentityLinkDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<ItemIdentityLinkObject> GetItemIdentityLinkCollectionByItem( Guid item )
        {
            throw new NotImplementedException( );
        }
        public SimpleItemIdentityLinkDataReader GetItemIdentityLinkCollectionByItemAndStartDataReader( Guid item, DateTime start )
        {
            const string sql = SimpleItemIdentityLinkDataReader.BaseQuery + " WHERE " +
                    SimpleItemIdentityLinkDataReader.ViewAliasName + ".[Item] = @item AND " +
                    SimpleItemIdentityLinkDataReader.ViewAliasName + ".[Start] = @start " +
                    " ORDER BY " + SimpleItemIdentityLinkDataReader.ViewAliasName + ".[Item]," +SimpleItemIdentityLinkDataReader.ViewAliasName + ".[Start]," +SimpleItemIdentityLinkDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var itemParameter = sqlCommandParameters.AddReference( "@item", item );
                var startParameter = sqlCommandParameters.AddDateTimeAsInt64( "@start", start );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleItemIdentityLinkDataReader = new SimpleItemIdentityLinkDataReader( _loggerFactory, sqlDataReader );
                return simpleItemIdentityLinkDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<ItemIdentityLinkObject> GetItemIdentityLinkCollectionByItemAndStart( Guid item, DateTime start )
        {
            throw new NotImplementedException( );
        }
        public IList<ItemIdentityLinkObject> GetItemIdentityLinkCollectionByItemAtStart( Guid item, DateTime start )
        {
            throw new NotImplementedException( );
        }
        public IList<ItemIdentityLinkObject> GetItemIdentityLinkCollectionByItemFromStart( Guid item, DateTime start )
        {
            throw new NotImplementedException( );
        }
        public IList<ItemIdentityLinkObject> GetItemIdentityLinkCollectionByItemUntilStart( Guid item, DateTime start )
        {
            throw new NotImplementedException( );
        }
        public IList<ItemIdentityLinkObject> GetItemIdentityLinkCollectionByItemOverStart( Guid item, DateTime fromStart, DateTime untilStart )
        {
            throw new NotImplementedException( );
        }
        public SimpleItemIdentityLinkDataReader GetItemIdentityLinkCollectionByItemAndEndDataReader( Guid item, DateTime? end )
        {
            const string sql = SimpleItemIdentityLinkDataReader.BaseQuery + " WHERE " +
                    SimpleItemIdentityLinkDataReader.ViewAliasName + ".[Item] = @item AND " +
                    SimpleItemIdentityLinkDataReader.ViewAliasName + ".[End] = @end " +
                    " ORDER BY " + SimpleItemIdentityLinkDataReader.ViewAliasName + ".[Item]," +SimpleItemIdentityLinkDataReader.ViewAliasName + ".[End]," +SimpleItemIdentityLinkDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var itemParameter = sqlCommandParameters.AddReference( "@item", item );
                var endParameter = sqlCommandParameters.AddDateTimeAsInt64( "@end", end );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleItemIdentityLinkDataReader = new SimpleItemIdentityLinkDataReader( _loggerFactory, sqlDataReader );
                return simpleItemIdentityLinkDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<ItemIdentityLinkObject> GetItemIdentityLinkCollectionByItemAndEnd( Guid item, DateTime? end )
        {
            throw new NotImplementedException( );
        }
        public IList<ItemIdentityLinkObject> GetItemIdentityLinkCollectionByItemAndEndIsNull( Guid item )
        {
            throw new NotImplementedException( );
        }
        public IList<ItemIdentityLinkObject> GetItemIdentityLinkCollectionByItemAtEnd( Guid item, DateTime? end )
        {
            throw new NotImplementedException( );
        }
        public IList<ItemIdentityLinkObject> GetItemIdentityLinkCollectionByItemFromEnd( Guid item, DateTime? end )
        {
            throw new NotImplementedException( );
        }
        public IList<ItemIdentityLinkObject> GetItemIdentityLinkCollectionByItemUntilEnd( Guid item, DateTime? end )
        {
            throw new NotImplementedException( );
        }
        public IList<ItemIdentityLinkObject> GetItemIdentityLinkCollectionByItemOverEnd( Guid item, DateTime fromEnd, DateTime untilEnd )
        {
            throw new NotImplementedException( );
        }
        public SimpleItemIdentityLinkDataReader GetItemIdentityLinkCollectionByIdentityDataReader( Guid identity )
        {
            const string sql = SimpleItemIdentityLinkDataReader.BaseQuery + " WHERE " +
                    SimpleItemIdentityLinkDataReader.ViewAliasName + ".[Identity] = @identity " +
                    " ORDER BY " + SimpleItemIdentityLinkDataReader.ViewAliasName + ".[Identity]," +SimpleItemIdentityLinkDataReader.ViewAliasName + ".[Start]," +SimpleItemIdentityLinkDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var identityParameter = sqlCommandParameters.AddReference( "@identity", identity );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleItemIdentityLinkDataReader = new SimpleItemIdentityLinkDataReader( _loggerFactory, sqlDataReader );
                return simpleItemIdentityLinkDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<ItemIdentityLinkObject> GetItemIdentityLinkCollectionByIdentity( Guid identity )
        {
            throw new NotImplementedException( );
        }
        public SimpleItemIdentityLinkDataReader GetItemIdentityLinkCollectionByIdentityAndStartDataReader( Guid identity, DateTime start )
        {
            const string sql = SimpleItemIdentityLinkDataReader.BaseQuery + " WHERE " +
                    SimpleItemIdentityLinkDataReader.ViewAliasName + ".[Identity] = @identity AND " +
                    SimpleItemIdentityLinkDataReader.ViewAliasName + ".[Start] = @start " +
                    " ORDER BY " + SimpleItemIdentityLinkDataReader.ViewAliasName + ".[Identity]," +SimpleItemIdentityLinkDataReader.ViewAliasName + ".[Start]," +SimpleItemIdentityLinkDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var identityParameter = sqlCommandParameters.AddReference( "@identity", identity );
                var startParameter = sqlCommandParameters.AddDateTimeAsInt64( "@start", start );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleItemIdentityLinkDataReader = new SimpleItemIdentityLinkDataReader( _loggerFactory, sqlDataReader );
                return simpleItemIdentityLinkDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<ItemIdentityLinkObject> GetItemIdentityLinkCollectionByIdentityAndStart( Guid identity, DateTime start )
        {
            throw new NotImplementedException( );
        }
        public IList<ItemIdentityLinkObject> GetItemIdentityLinkCollectionByIdentityAtStart( Guid identity, DateTime start )
        {
            throw new NotImplementedException( );
        }
        public IList<ItemIdentityLinkObject> GetItemIdentityLinkCollectionByIdentityFromStart( Guid identity, DateTime start )
        {
            throw new NotImplementedException( );
        }
        public IList<ItemIdentityLinkObject> GetItemIdentityLinkCollectionByIdentityUntilStart( Guid identity, DateTime start )
        {
            throw new NotImplementedException( );
        }
        public IList<ItemIdentityLinkObject> GetItemIdentityLinkCollectionByIdentityOverStart( Guid identity, DateTime fromStart, DateTime untilStart )
        {
            throw new NotImplementedException( );
        }
        public SimpleItemIdentityLinkDataReader GetItemIdentityLinkCollectionByIdentityAndEndDataReader( Guid identity, DateTime? end )
        {
            const string sql = SimpleItemIdentityLinkDataReader.BaseQuery + " WHERE " +
                    SimpleItemIdentityLinkDataReader.ViewAliasName + ".[Identity] = @identity AND " +
                    SimpleItemIdentityLinkDataReader.ViewAliasName + ".[End] = @end " +
                    " ORDER BY " + SimpleItemIdentityLinkDataReader.ViewAliasName + ".[Identity]," +SimpleItemIdentityLinkDataReader.ViewAliasName + ".[End]," +SimpleItemIdentityLinkDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var identityParameter = sqlCommandParameters.AddReference( "@identity", identity );
                var endParameter = sqlCommandParameters.AddDateTimeAsInt64( "@end", end );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleItemIdentityLinkDataReader = new SimpleItemIdentityLinkDataReader( _loggerFactory, sqlDataReader );
                return simpleItemIdentityLinkDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<ItemIdentityLinkObject> GetItemIdentityLinkCollectionByIdentityAndEnd( Guid identity, DateTime? end )
        {
            throw new NotImplementedException( );
        }
        public IList<ItemIdentityLinkObject> GetItemIdentityLinkCollectionByIdentityAndEndIsNull( Guid identity )
        {
            throw new NotImplementedException( );
        }
        public IList<ItemIdentityLinkObject> GetItemIdentityLinkCollectionByIdentityAtEnd( Guid identity, DateTime? end )
        {
            throw new NotImplementedException( );
        }
        public IList<ItemIdentityLinkObject> GetItemIdentityLinkCollectionByIdentityFromEnd( Guid identity, DateTime? end )
        {
            throw new NotImplementedException( );
        }
        public IList<ItemIdentityLinkObject> GetItemIdentityLinkCollectionByIdentityUntilEnd( Guid identity, DateTime? end )
        {
            throw new NotImplementedException( );
        }
        public IList<ItemIdentityLinkObject> GetItemIdentityLinkCollectionByIdentityOverEnd( Guid identity, DateTime fromEnd, DateTime untilEnd )
        {
            throw new NotImplementedException( );
        }
        public SimpleItemIdentityLinkDataReader GetItemIdentityLinkCollectionByStartDataReader( DateTime start )
        {
            const string sql = SimpleItemIdentityLinkDataReader.BaseQuery + " WHERE " +
                    SimpleItemIdentityLinkDataReader.ViewAliasName + ".[Start] = @start " +
                    " ORDER BY " + SimpleItemIdentityLinkDataReader.ViewAliasName + ".[Start]," +SimpleItemIdentityLinkDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var startParameter = sqlCommandParameters.AddDateTimeAsInt64( "@start", start );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleItemIdentityLinkDataReader = new SimpleItemIdentityLinkDataReader( _loggerFactory, sqlDataReader );
                return simpleItemIdentityLinkDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<ItemIdentityLinkObject> GetItemIdentityLinkCollectionByStart( DateTime start )
        {
            throw new NotImplementedException( );
        }
        public IList<ItemIdentityLinkObject> GetItemIdentityLinkCollectionAtStart( DateTime start )
        {
            throw new NotImplementedException( );
        }
        public IList<ItemIdentityLinkObject> GetItemIdentityLinkCollectionFromStart( DateTime start )
        {
            throw new NotImplementedException( );
        }
        public IList<ItemIdentityLinkObject> GetItemIdentityLinkCollectionUntilStart( DateTime start )
        {
            throw new NotImplementedException( );
        }
        public IList<ItemIdentityLinkObject> GetItemIdentityLinkCollectionOverStart( DateTime fromStart, DateTime untilStart )
        {
            throw new NotImplementedException( );
        }
        public SimpleItemIdentityLinkDataReader GetItemIdentityLinkCollectionByEndDataReader( DateTime? end )
        {
            const string sql = SimpleItemIdentityLinkDataReader.BaseQuery + " WHERE " +
                    SimpleItemIdentityLinkDataReader.ViewAliasName + ".[End] = @end " +
                    " ORDER BY " + SimpleItemIdentityLinkDataReader.ViewAliasName + ".[End]," +SimpleItemIdentityLinkDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var endParameter = sqlCommandParameters.AddDateTimeAsInt64( "@end", end );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleItemIdentityLinkDataReader = new SimpleItemIdentityLinkDataReader( _loggerFactory, sqlDataReader );
                return simpleItemIdentityLinkDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<ItemIdentityLinkObject> GetItemIdentityLinkCollectionByEnd( DateTime? end )
        {
            throw new NotImplementedException( );
        }
        public IList<ItemIdentityLinkObject> GetItemIdentityLinkCollectionByEndIsNull(  )
        {
            throw new NotImplementedException( );
        }
        public IList<ItemIdentityLinkObject> GetItemIdentityLinkCollectionAtEnd( DateTime? end )
        {
            throw new NotImplementedException( );
        }
        public IList<ItemIdentityLinkObject> GetItemIdentityLinkCollectionFromEnd( DateTime? end )
        {
            throw new NotImplementedException( );
        }
        public IList<ItemIdentityLinkObject> GetItemIdentityLinkCollectionUntilEnd( DateTime? end )
        {
            throw new NotImplementedException( );
        }
        public IList<ItemIdentityLinkObject> GetItemIdentityLinkCollectionOverEnd( DateTime fromEnd, DateTime untilEnd )
        {
            throw new NotImplementedException( );
        }
        // ---------------------------------------------------------------------
        // ItemParentChildLink queries
        // ---------------------------------------------------------------------
        public SimpleItemParentChildLinkDataReader GetItemParentChildLinkByIdDataReader( Guid id )
        {
            const string sql = SimpleItemParentChildLinkDataReader.BaseQuery + "WHERE " + SimpleItemParentChildLinkDataReader.ViewAliasName + ".[Id] = @id"; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                sqlCommandParameters.AddGuid( "@id", id );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleItemParentChildLinkDataReader = new SimpleItemParentChildLinkDataReader( _loggerFactory, sqlDataReader );
                return simpleItemParentChildLinkDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public ItemParentChildLinkObject? GetItemParentChildLinkById( Guid id )
        {
            var simpleItemParentChildLinkDataReader = GetItemParentChildLinkByIdDataReader( id );
            using ( simpleItemParentChildLinkDataReader )
            {
                if ( simpleItemParentChildLinkDataReader.Read( ) )
                {
                    var result = simpleItemParentChildLinkDataReader.GetDataObject( );
                    return result;
                }
            }
            return null;
        }

        public void GetItemParentChildLinkById( Guid id, Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleItemParentChildLinkDataReader = GetItemParentChildLinkByIdDataReader( id );
                using ( simpleItemParentChildLinkDataReader )
                {
                    if ( simpleItemParentChildLinkDataReader.Read( ) )
                    {
                        destinationWriter.Write( true );
                        simpleItemParentChildLinkDataReader.WriteTo( destinationWriter );
                    }
                    else
                    {
                        destinationWriter.Write( false );
                    }
                }
            }
        }

        public SimpleItemParentChildLinkDataReader GetItemParentChildLinkCollectionDataReader( )
        {
            const string sql = SimpleItemParentChildLinkDataReader.BaseQuery; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleItemParentChildLinkDataReader = new SimpleItemParentChildLinkDataReader( _loggerFactory, sqlDataReader );
                return simpleItemParentChildLinkDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public IList<ItemParentChildLinkObject> GetItemParentChildLinkCollection( )
        {
            var result = new List<ItemParentChildLinkObject>( );
            var simpleItemParentChildLinkDataReader = GetItemParentChildLinkCollectionDataReader( );
            using ( simpleItemParentChildLinkDataReader )
            {
                while ( simpleItemParentChildLinkDataReader.Read( ) )
                {
                    var data = simpleItemParentChildLinkDataReader.GetDataObject( );
                    result.Add( data );
                }
            }
            return result;
        }

        public void GetItemParentChildLinkCollection( Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleItemParentChildLinkDataReader = GetItemParentChildLinkCollectionDataReader( );
                using ( simpleItemParentChildLinkDataReader )
                {
                    simpleItemParentChildLinkDataReader.WriteResultSetTo( destinationWriter );
                }
            }
        }

        public SimpleItemParentChildLinkDataReader GetItemParentChildLinkCollectionByParentDataReader( Guid parent )
        {
            const string sql = SimpleItemParentChildLinkDataReader.BaseQuery + " WHERE " +
                    SimpleItemParentChildLinkDataReader.ViewAliasName + ".[Parent] = @parent " +
                    " ORDER BY " + SimpleItemParentChildLinkDataReader.ViewAliasName + ".[Parent]," +SimpleItemParentChildLinkDataReader.ViewAliasName + ".[Timestamp]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var parentParameter = sqlCommandParameters.AddReference( "@parent", parent );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleItemParentChildLinkDataReader = new SimpleItemParentChildLinkDataReader( _loggerFactory, sqlDataReader );
                return simpleItemParentChildLinkDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<ItemParentChildLinkObject> GetItemParentChildLinkCollectionByParent( Guid parent )
        {
            throw new NotImplementedException( );
        }
        public SimpleItemParentChildLinkDataReader GetItemParentChildLinkByParentAndTimestampDataReader( Guid parent, DateTime timestamp )
        {
            const string sql = SimpleItemParentChildLinkDataReader.BaseQuery + " WHERE " +
                    SimpleItemParentChildLinkDataReader.ViewAliasName + ".[Parent] = @parent AND " +
                    SimpleItemParentChildLinkDataReader.ViewAliasName + ".[Timestamp] = @timestamp " +
                    " ORDER BY " + SimpleItemParentChildLinkDataReader.ViewAliasName + ".[Parent]," +SimpleItemParentChildLinkDataReader.ViewAliasName + ".[Timestamp]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var parentParameter = sqlCommandParameters.AddReference( "@parent", parent );
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@timestamp", timestamp );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleItemParentChildLinkDataReader = new SimpleItemParentChildLinkDataReader( _loggerFactory, sqlDataReader );
                return simpleItemParentChildLinkDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public ItemParentChildLinkObject? GetItemParentChildLinkByParentAndTimestamp( Guid parent, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public ItemParentChildLinkObject? GetItemParentChildLinkByParentAtTimestamp( Guid parent, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<ItemParentChildLinkObject> GetItemParentChildLinkByParentFromTimestamp( Guid parent, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<ItemParentChildLinkObject> GetItemParentChildLinkByParentUntilTimestamp( Guid parent, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<ItemParentChildLinkObject> GetItemParentChildLinkByParentOverTimestamp( Guid parent, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException( );
        }
        public SimpleItemParentChildLinkDataReader GetItemParentChildLinkCollectionByChildDataReader( Guid child )
        {
            const string sql = SimpleItemParentChildLinkDataReader.BaseQuery + " WHERE " +
                    SimpleItemParentChildLinkDataReader.ViewAliasName + ".[Child] = @child " +
                    " ORDER BY " + SimpleItemParentChildLinkDataReader.ViewAliasName + ".[Child]," +SimpleItemParentChildLinkDataReader.ViewAliasName + ".[Timestamp]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var childParameter = sqlCommandParameters.AddReference( "@child", child );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleItemParentChildLinkDataReader = new SimpleItemParentChildLinkDataReader( _loggerFactory, sqlDataReader );
                return simpleItemParentChildLinkDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<ItemParentChildLinkObject> GetItemParentChildLinkCollectionByChild( Guid child )
        {
            throw new NotImplementedException( );
        }
        public SimpleItemParentChildLinkDataReader GetItemParentChildLinkByChildAndTimestampDataReader( Guid child, DateTime timestamp )
        {
            const string sql = SimpleItemParentChildLinkDataReader.BaseQuery + " WHERE " +
                    SimpleItemParentChildLinkDataReader.ViewAliasName + ".[Child] = @child AND " +
                    SimpleItemParentChildLinkDataReader.ViewAliasName + ".[Timestamp] = @timestamp " +
                    " ORDER BY " + SimpleItemParentChildLinkDataReader.ViewAliasName + ".[Child]," +SimpleItemParentChildLinkDataReader.ViewAliasName + ".[Timestamp]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var childParameter = sqlCommandParameters.AddReference( "@child", child );
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@timestamp", timestamp );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleItemParentChildLinkDataReader = new SimpleItemParentChildLinkDataReader( _loggerFactory, sqlDataReader );
                return simpleItemParentChildLinkDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public ItemParentChildLinkObject? GetItemParentChildLinkByChildAndTimestamp( Guid child, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public ItemParentChildLinkObject? GetItemParentChildLinkByChildAtTimestamp( Guid child, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<ItemParentChildLinkObject> GetItemParentChildLinkByChildFromTimestamp( Guid child, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<ItemParentChildLinkObject> GetItemParentChildLinkByChildUntilTimestamp( Guid child, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<ItemParentChildLinkObject> GetItemParentChildLinkByChildOverTimestamp( Guid child, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException( );
        }
        public SimpleItemParentChildLinkDataReader GetItemParentChildLinkCollectionByTimestampDataReader( DateTime timestamp )
        {
            const string sql = SimpleItemParentChildLinkDataReader.BaseQuery + " WHERE " +
                    SimpleItemParentChildLinkDataReader.ViewAliasName + ".[Timestamp] = @timestamp " +
                    " ORDER BY " + SimpleItemParentChildLinkDataReader.ViewAliasName + ".[Timestamp]," +SimpleItemParentChildLinkDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@timestamp", timestamp );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleItemParentChildLinkDataReader = new SimpleItemParentChildLinkDataReader( _loggerFactory, sqlDataReader );
                return simpleItemParentChildLinkDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<ItemParentChildLinkObject> GetItemParentChildLinkCollectionByTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<ItemParentChildLinkObject> GetItemParentChildLinkCollectionAtTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<ItemParentChildLinkObject> GetItemParentChildLinkCollectionFromTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<ItemParentChildLinkObject> GetItemParentChildLinkCollectionUntilTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<ItemParentChildLinkObject> GetItemParentChildLinkCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException( );
        }
        // ---------------------------------------------------------------------
        // LineInputDeviceCommand queries
        // ---------------------------------------------------------------------
        public SimpleLineInputDeviceCommandDataReader GetLineInputDeviceCommandByIdDataReader( Guid id )
        {
            const string sql = SimpleLineInputDeviceCommandDataReader.BaseQuery + "WHERE " + SimpleLineInputDeviceCommandDataReader.ViewAliasName + ".[Id] = @id"; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                sqlCommandParameters.AddGuid( "@id", id );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleLineInputDeviceCommandDataReader = new SimpleLineInputDeviceCommandDataReader( _loggerFactory, sqlDataReader );
                return simpleLineInputDeviceCommandDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public LineInputDeviceCommandObject? GetLineInputDeviceCommandById( Guid id )
        {
            var simpleLineInputDeviceCommandDataReader = GetLineInputDeviceCommandByIdDataReader( id );
            using ( simpleLineInputDeviceCommandDataReader )
            {
                if ( simpleLineInputDeviceCommandDataReader.Read( ) )
                {
                    var result = simpleLineInputDeviceCommandDataReader.GetDataObject( );
                    return result;
                }
            }
            return null;
        }

        public void GetLineInputDeviceCommandById( Guid id, Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleLineInputDeviceCommandDataReader = GetLineInputDeviceCommandByIdDataReader( id );
                using ( simpleLineInputDeviceCommandDataReader )
                {
                    if ( simpleLineInputDeviceCommandDataReader.Read( ) )
                    {
                        destinationWriter.Write( true );
                        simpleLineInputDeviceCommandDataReader.WriteTo( destinationWriter );
                    }
                    else
                    {
                        destinationWriter.Write( false );
                    }
                }
            }
        }

        public SimpleLineInputDeviceCommandDataReader GetLineInputDeviceCommandCollectionDataReader( )
        {
            const string sql = SimpleLineInputDeviceCommandDataReader.BaseQuery; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleLineInputDeviceCommandDataReader = new SimpleLineInputDeviceCommandDataReader( _loggerFactory, sqlDataReader );
                return simpleLineInputDeviceCommandDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public IList<LineInputDeviceCommandObject> GetLineInputDeviceCommandCollection( )
        {
            var result = new List<LineInputDeviceCommandObject>( );
            var simpleLineInputDeviceCommandDataReader = GetLineInputDeviceCommandCollectionDataReader( );
            using ( simpleLineInputDeviceCommandDataReader )
            {
                while ( simpleLineInputDeviceCommandDataReader.Read( ) )
                {
                    var data = simpleLineInputDeviceCommandDataReader.GetDataObject( );
                    result.Add( data );
                }
            }
            return result;
        }

        public void GetLineInputDeviceCommandCollection( Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleLineInputDeviceCommandDataReader = GetLineInputDeviceCommandCollectionDataReader( );
                using ( simpleLineInputDeviceCommandDataReader )
                {
                    simpleLineInputDeviceCommandDataReader.WriteResultSetTo( destinationWriter );
                }
            }
        }

        public SimpleLineInputDeviceCommandDataReader GetLineInputDeviceCommandCollectionByLineInputDeviceDataReader( Guid lineInputDevice )
        {
            const string sql = SimpleLineInputDeviceCommandDataReader.BaseQuery + " WHERE " +
                    SimpleLineInputDeviceCommandDataReader.ViewAliasName + ".[LineInputDevice] = @lineInputDevice " +
                    " ORDER BY " + SimpleLineInputDeviceCommandDataReader.ViewAliasName + ".[LineInputDevice]," +SimpleLineInputDeviceCommandDataReader.ViewAliasName + ".[Timestamp]," +SimpleLineInputDeviceCommandDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var lineInputDeviceParameter = sqlCommandParameters.AddReference( "@lineInputDevice", lineInputDevice );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleLineInputDeviceCommandDataReader = new SimpleLineInputDeviceCommandDataReader( _loggerFactory, sqlDataReader );
                return simpleLineInputDeviceCommandDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<LineInputDeviceCommandObject> GetLineInputDeviceCommandCollectionByLineInputDevice( Guid lineInputDevice )
        {
            throw new NotImplementedException( );
        }
        public SimpleLineInputDeviceCommandDataReader GetLineInputDeviceCommandCollectionByLineInputDeviceAndTimestampDataReader( Guid lineInputDevice, DateTime timestamp )
        {
            const string sql = SimpleLineInputDeviceCommandDataReader.BaseQuery + " WHERE " +
                    SimpleLineInputDeviceCommandDataReader.ViewAliasName + ".[LineInputDevice] = @lineInputDevice AND " +
                    SimpleLineInputDeviceCommandDataReader.ViewAliasName + ".[Timestamp] = @timestamp " +
                    " ORDER BY " + SimpleLineInputDeviceCommandDataReader.ViewAliasName + ".[LineInputDevice]," +SimpleLineInputDeviceCommandDataReader.ViewAliasName + ".[Timestamp]," +SimpleLineInputDeviceCommandDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var lineInputDeviceParameter = sqlCommandParameters.AddReference( "@lineInputDevice", lineInputDevice );
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@timestamp", timestamp );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleLineInputDeviceCommandDataReader = new SimpleLineInputDeviceCommandDataReader( _loggerFactory, sqlDataReader );
                return simpleLineInputDeviceCommandDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<LineInputDeviceCommandObject> GetLineInputDeviceCommandCollectionByLineInputDeviceAndTimestamp( Guid lineInputDevice, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<LineInputDeviceCommandObject> GetLineInputDeviceCommandCollectionByLineInputDeviceAtTimestamp( Guid lineInputDevice, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<LineInputDeviceCommandObject> GetLineInputDeviceCommandCollectionByLineInputDeviceFromTimestamp( Guid lineInputDevice, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<LineInputDeviceCommandObject> GetLineInputDeviceCommandCollectionByLineInputDeviceUntilTimestamp( Guid lineInputDevice, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<LineInputDeviceCommandObject> GetLineInputDeviceCommandCollectionByLineInputDeviceOverTimestamp( Guid lineInputDevice, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException( );
        }
        public SimpleLineInputDeviceCommandDataReader GetLineInputDeviceCommandCollectionByTimestampDataReader( DateTime timestamp )
        {
            const string sql = SimpleLineInputDeviceCommandDataReader.BaseQuery + " WHERE " +
                    SimpleLineInputDeviceCommandDataReader.ViewAliasName + ".[Timestamp] = @timestamp " +
                    " ORDER BY " + SimpleLineInputDeviceCommandDataReader.ViewAliasName + ".[Timestamp]," +SimpleLineInputDeviceCommandDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@timestamp", timestamp );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleLineInputDeviceCommandDataReader = new SimpleLineInputDeviceCommandDataReader( _loggerFactory, sqlDataReader );
                return simpleLineInputDeviceCommandDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<LineInputDeviceCommandObject> GetLineInputDeviceCommandCollectionByTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<LineInputDeviceCommandObject> GetLineInputDeviceCommandCollectionAtTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<LineInputDeviceCommandObject> GetLineInputDeviceCommandCollectionFromTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<LineInputDeviceCommandObject> GetLineInputDeviceCommandCollectionUntilTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<LineInputDeviceCommandObject> GetLineInputDeviceCommandCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException( );
        }
        public SimpleLineInputDeviceCommandDataReader GetLineInputDeviceCommandCollectionByReplyDataReader( Guid reply )
        {
            const string sql = SimpleLineInputDeviceCommandDataReader.BaseQuery + " WHERE " +
                    SimpleLineInputDeviceCommandDataReader.ViewAliasName + ".[Reply] = @reply " +
                    " ORDER BY " + SimpleLineInputDeviceCommandDataReader.ViewAliasName + ".[Reply]," +SimpleLineInputDeviceCommandDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var replyParameter = sqlCommandParameters.AddReference( "@reply", reply );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleLineInputDeviceCommandDataReader = new SimpleLineInputDeviceCommandDataReader( _loggerFactory, sqlDataReader );
                return simpleLineInputDeviceCommandDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<LineInputDeviceCommandObject> GetLineInputDeviceCommandCollectionByReply( Guid reply )
        {
            throw new NotImplementedException( );
        }
        // ---------------------------------------------------------------------
        // LineInputDeviceCommandReply queries
        // ---------------------------------------------------------------------
        public SimpleLineInputDeviceCommandReplyDataReader GetLineInputDeviceCommandReplyByIdDataReader( Guid id )
        {
            const string sql = SimpleLineInputDeviceCommandReplyDataReader.BaseQuery + "WHERE " + SimpleLineInputDeviceCommandReplyDataReader.ViewAliasName + ".[Id] = @id"; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                sqlCommandParameters.AddGuid( "@id", id );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleLineInputDeviceCommandReplyDataReader = new SimpleLineInputDeviceCommandReplyDataReader( _loggerFactory, sqlDataReader );
                return simpleLineInputDeviceCommandReplyDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public LineInputDeviceCommandReplyObject? GetLineInputDeviceCommandReplyById( Guid id )
        {
            var simpleLineInputDeviceCommandReplyDataReader = GetLineInputDeviceCommandReplyByIdDataReader( id );
            using ( simpleLineInputDeviceCommandReplyDataReader )
            {
                if ( simpleLineInputDeviceCommandReplyDataReader.Read( ) )
                {
                    var result = simpleLineInputDeviceCommandReplyDataReader.GetDataObject( );
                    return result;
                }
            }
            return null;
        }

        public void GetLineInputDeviceCommandReplyById( Guid id, Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleLineInputDeviceCommandReplyDataReader = GetLineInputDeviceCommandReplyByIdDataReader( id );
                using ( simpleLineInputDeviceCommandReplyDataReader )
                {
                    if ( simpleLineInputDeviceCommandReplyDataReader.Read( ) )
                    {
                        destinationWriter.Write( true );
                        simpleLineInputDeviceCommandReplyDataReader.WriteTo( destinationWriter );
                    }
                    else
                    {
                        destinationWriter.Write( false );
                    }
                }
            }
        }

        public SimpleLineInputDeviceCommandReplyDataReader GetLineInputDeviceCommandReplyCollectionDataReader( )
        {
            const string sql = SimpleLineInputDeviceCommandReplyDataReader.BaseQuery; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleLineInputDeviceCommandReplyDataReader = new SimpleLineInputDeviceCommandReplyDataReader( _loggerFactory, sqlDataReader );
                return simpleLineInputDeviceCommandReplyDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public IList<LineInputDeviceCommandReplyObject> GetLineInputDeviceCommandReplyCollection( )
        {
            var result = new List<LineInputDeviceCommandReplyObject>( );
            var simpleLineInputDeviceCommandReplyDataReader = GetLineInputDeviceCommandReplyCollectionDataReader( );
            using ( simpleLineInputDeviceCommandReplyDataReader )
            {
                while ( simpleLineInputDeviceCommandReplyDataReader.Read( ) )
                {
                    var data = simpleLineInputDeviceCommandReplyDataReader.GetDataObject( );
                    result.Add( data );
                }
            }
            return result;
        }

        public void GetLineInputDeviceCommandReplyCollection( Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleLineInputDeviceCommandReplyDataReader = GetLineInputDeviceCommandReplyCollectionDataReader( );
                using ( simpleLineInputDeviceCommandReplyDataReader )
                {
                    simpleLineInputDeviceCommandReplyDataReader.WriteResultSetTo( destinationWriter );
                }
            }
        }

        public SimpleLineInputDeviceCommandReplyDataReader GetLineInputDeviceCommandReplyCollectionByLineInputDeviceDataReader( Guid lineInputDevice )
        {
            const string sql = SimpleLineInputDeviceCommandReplyDataReader.BaseQuery + " WHERE " +
                    SimpleLineInputDeviceCommandReplyDataReader.ViewAliasName + ".[LineInputDevice] = @lineInputDevice " +
                    " ORDER BY " + SimpleLineInputDeviceCommandReplyDataReader.ViewAliasName + ".[LineInputDevice]," +SimpleLineInputDeviceCommandReplyDataReader.ViewAliasName + ".[Timestamp]," +SimpleLineInputDeviceCommandReplyDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var lineInputDeviceParameter = sqlCommandParameters.AddReference( "@lineInputDevice", lineInputDevice );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleLineInputDeviceCommandReplyDataReader = new SimpleLineInputDeviceCommandReplyDataReader( _loggerFactory, sqlDataReader );
                return simpleLineInputDeviceCommandReplyDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<LineInputDeviceCommandReplyObject> GetLineInputDeviceCommandReplyCollectionByLineInputDevice( Guid lineInputDevice )
        {
            throw new NotImplementedException( );
        }
        public SimpleLineInputDeviceCommandReplyDataReader GetLineInputDeviceCommandReplyCollectionByLineInputDeviceAndTimestampDataReader( Guid lineInputDevice, DateTime timestamp )
        {
            const string sql = SimpleLineInputDeviceCommandReplyDataReader.BaseQuery + " WHERE " +
                    SimpleLineInputDeviceCommandReplyDataReader.ViewAliasName + ".[LineInputDevice] = @lineInputDevice AND " +
                    SimpleLineInputDeviceCommandReplyDataReader.ViewAliasName + ".[Timestamp] = @timestamp " +
                    " ORDER BY " + SimpleLineInputDeviceCommandReplyDataReader.ViewAliasName + ".[LineInputDevice]," +SimpleLineInputDeviceCommandReplyDataReader.ViewAliasName + ".[Timestamp]," +SimpleLineInputDeviceCommandReplyDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var lineInputDeviceParameter = sqlCommandParameters.AddReference( "@lineInputDevice", lineInputDevice );
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@timestamp", timestamp );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleLineInputDeviceCommandReplyDataReader = new SimpleLineInputDeviceCommandReplyDataReader( _loggerFactory, sqlDataReader );
                return simpleLineInputDeviceCommandReplyDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<LineInputDeviceCommandReplyObject> GetLineInputDeviceCommandReplyCollectionByLineInputDeviceAndTimestamp( Guid lineInputDevice, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<LineInputDeviceCommandReplyObject> GetLineInputDeviceCommandReplyCollectionByLineInputDeviceAtTimestamp( Guid lineInputDevice, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<LineInputDeviceCommandReplyObject> GetLineInputDeviceCommandReplyCollectionByLineInputDeviceFromTimestamp( Guid lineInputDevice, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<LineInputDeviceCommandReplyObject> GetLineInputDeviceCommandReplyCollectionByLineInputDeviceUntilTimestamp( Guid lineInputDevice, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<LineInputDeviceCommandReplyObject> GetLineInputDeviceCommandReplyCollectionByLineInputDeviceOverTimestamp( Guid lineInputDevice, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException( );
        }
        public SimpleLineInputDeviceCommandReplyDataReader GetLineInputDeviceCommandReplyCollectionByTimestampDataReader( DateTime timestamp )
        {
            const string sql = SimpleLineInputDeviceCommandReplyDataReader.BaseQuery + " WHERE " +
                    SimpleLineInputDeviceCommandReplyDataReader.ViewAliasName + ".[Timestamp] = @timestamp " +
                    " ORDER BY " + SimpleLineInputDeviceCommandReplyDataReader.ViewAliasName + ".[Timestamp]," +SimpleLineInputDeviceCommandReplyDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@timestamp", timestamp );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleLineInputDeviceCommandReplyDataReader = new SimpleLineInputDeviceCommandReplyDataReader( _loggerFactory, sqlDataReader );
                return simpleLineInputDeviceCommandReplyDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<LineInputDeviceCommandReplyObject> GetLineInputDeviceCommandReplyCollectionByTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<LineInputDeviceCommandReplyObject> GetLineInputDeviceCommandReplyCollectionAtTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<LineInputDeviceCommandReplyObject> GetLineInputDeviceCommandReplyCollectionFromTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<LineInputDeviceCommandReplyObject> GetLineInputDeviceCommandReplyCollectionUntilTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<LineInputDeviceCommandReplyObject> GetLineInputDeviceCommandReplyCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException( );
        }
        public SimpleLineInputDeviceCommandReplyDataReader GetLineInputDeviceCommandReplyByCommandDataReader( Guid command )
        {
            const string sql = SimpleLineInputDeviceCommandReplyDataReader.BaseQuery + " WHERE " +
                    SimpleLineInputDeviceCommandReplyDataReader.ViewAliasName + ".[Command] = @command " +
                    " ORDER BY " + SimpleLineInputDeviceCommandReplyDataReader.ViewAliasName + ".[Command]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var commandParameter = sqlCommandParameters.AddReference( "@command", command );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleLineInputDeviceCommandReplyDataReader = new SimpleLineInputDeviceCommandReplyDataReader( _loggerFactory, sqlDataReader );
                return simpleLineInputDeviceCommandReplyDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public LineInputDeviceCommandReplyObject? GetLineInputDeviceCommandReplyByCommand( Guid command )
        {
            throw new NotImplementedException( );
        }
        // ---------------------------------------------------------------------
        // LineInputDeviceConfiguration queries
        // ---------------------------------------------------------------------
        public SimpleLineInputDeviceConfigurationDataReader GetLineInputDeviceConfigurationByIdDataReader( Guid id )
        {
            const string sql = SimpleLineInputDeviceConfigurationDataReader.BaseQuery + "WHERE " + SimpleLineInputDeviceConfigurationDataReader.ViewAliasName + ".[Id] = @id"; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                sqlCommandParameters.AddGuid( "@id", id );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleLineInputDeviceConfigurationDataReader = new SimpleLineInputDeviceConfigurationDataReader( _loggerFactory, sqlDataReader );
                return simpleLineInputDeviceConfigurationDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public LineInputDeviceConfigurationObject? GetLineInputDeviceConfigurationById( Guid id )
        {
            var simpleLineInputDeviceConfigurationDataReader = GetLineInputDeviceConfigurationByIdDataReader( id );
            using ( simpleLineInputDeviceConfigurationDataReader )
            {
                if ( simpleLineInputDeviceConfigurationDataReader.Read( ) )
                {
                    var result = simpleLineInputDeviceConfigurationDataReader.GetDataObject( );
                    return result;
                }
            }
            return null;
        }

        public void GetLineInputDeviceConfigurationById( Guid id, Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleLineInputDeviceConfigurationDataReader = GetLineInputDeviceConfigurationByIdDataReader( id );
                using ( simpleLineInputDeviceConfigurationDataReader )
                {
                    if ( simpleLineInputDeviceConfigurationDataReader.Read( ) )
                    {
                        destinationWriter.Write( true );
                        simpleLineInputDeviceConfigurationDataReader.WriteTo( destinationWriter );
                    }
                    else
                    {
                        destinationWriter.Write( false );
                    }
                }
            }
        }

        public SimpleLineInputDeviceConfigurationDataReader GetLineInputDeviceConfigurationCollectionDataReader( )
        {
            const string sql = SimpleLineInputDeviceConfigurationDataReader.BaseQuery; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleLineInputDeviceConfigurationDataReader = new SimpleLineInputDeviceConfigurationDataReader( _loggerFactory, sqlDataReader );
                return simpleLineInputDeviceConfigurationDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public IList<LineInputDeviceConfigurationObject> GetLineInputDeviceConfigurationCollection( )
        {
            var result = new List<LineInputDeviceConfigurationObject>( );
            var simpleLineInputDeviceConfigurationDataReader = GetLineInputDeviceConfigurationCollectionDataReader( );
            using ( simpleLineInputDeviceConfigurationDataReader )
            {
                while ( simpleLineInputDeviceConfigurationDataReader.Read( ) )
                {
                    var data = simpleLineInputDeviceConfigurationDataReader.GetDataObject( );
                    result.Add( data );
                }
            }
            return result;
        }

        public void GetLineInputDeviceConfigurationCollection( Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleLineInputDeviceConfigurationDataReader = GetLineInputDeviceConfigurationCollectionDataReader( );
                using ( simpleLineInputDeviceConfigurationDataReader )
                {
                    simpleLineInputDeviceConfigurationDataReader.WriteResultSetTo( destinationWriter );
                }
            }
        }

        public SimpleLineInputDeviceConfigurationDataReader GetLineInputDeviceConfigurationCollectionByLineInputDeviceDataReader( Guid lineInputDevice )
        {
            const string sql = SimpleLineInputDeviceConfigurationDataReader.BaseQuery + " WHERE " +
                    SimpleLineInputDeviceConfigurationDataReader.ViewAliasName + ".[LineInputDevice] = @lineInputDevice " +
                    " ORDER BY " + SimpleLineInputDeviceConfigurationDataReader.ViewAliasName + ".[LineInputDevice]," +SimpleLineInputDeviceConfigurationDataReader.ViewAliasName + ".[Timestamp]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var lineInputDeviceParameter = sqlCommandParameters.AddReference( "@lineInputDevice", lineInputDevice );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleLineInputDeviceConfigurationDataReader = new SimpleLineInputDeviceConfigurationDataReader( _loggerFactory, sqlDataReader );
                return simpleLineInputDeviceConfigurationDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<LineInputDeviceConfigurationObject> GetLineInputDeviceConfigurationCollectionByLineInputDevice( Guid lineInputDevice )
        {
            throw new NotImplementedException( );
        }
        public SimpleLineInputDeviceConfigurationDataReader GetLineInputDeviceConfigurationByLineInputDeviceAndTimestampDataReader( Guid lineInputDevice, DateTime timestamp )
        {
            const string sql = SimpleLineInputDeviceConfigurationDataReader.BaseQuery + " WHERE " +
                    SimpleLineInputDeviceConfigurationDataReader.ViewAliasName + ".[LineInputDevice] = @lineInputDevice AND " +
                    SimpleLineInputDeviceConfigurationDataReader.ViewAliasName + ".[Timestamp] = @timestamp " +
                    " ORDER BY " + SimpleLineInputDeviceConfigurationDataReader.ViewAliasName + ".[LineInputDevice]," +SimpleLineInputDeviceConfigurationDataReader.ViewAliasName + ".[Timestamp]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var lineInputDeviceParameter = sqlCommandParameters.AddReference( "@lineInputDevice", lineInputDevice );
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@timestamp", timestamp );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleLineInputDeviceConfigurationDataReader = new SimpleLineInputDeviceConfigurationDataReader( _loggerFactory, sqlDataReader );
                return simpleLineInputDeviceConfigurationDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public LineInputDeviceConfigurationObject? GetLineInputDeviceConfigurationByLineInputDeviceAndTimestamp( Guid lineInputDevice, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public LineInputDeviceConfigurationObject? GetLineInputDeviceConfigurationByLineInputDeviceAtTimestamp( Guid lineInputDevice, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<LineInputDeviceConfigurationObject> GetLineInputDeviceConfigurationByLineInputDeviceFromTimestamp( Guid lineInputDevice, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<LineInputDeviceConfigurationObject> GetLineInputDeviceConfigurationByLineInputDeviceUntilTimestamp( Guid lineInputDevice, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<LineInputDeviceConfigurationObject> GetLineInputDeviceConfigurationByLineInputDeviceOverTimestamp( Guid lineInputDevice, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException( );
        }
        public SimpleLineInputDeviceConfigurationDataReader GetLineInputDeviceConfigurationCollectionByTimestampDataReader( DateTime timestamp )
        {
            const string sql = SimpleLineInputDeviceConfigurationDataReader.BaseQuery + " WHERE " +
                    SimpleLineInputDeviceConfigurationDataReader.ViewAliasName + ".[Timestamp] = @timestamp " +
                    " ORDER BY " + SimpleLineInputDeviceConfigurationDataReader.ViewAliasName + ".[Timestamp]," +SimpleLineInputDeviceConfigurationDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@timestamp", timestamp );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleLineInputDeviceConfigurationDataReader = new SimpleLineInputDeviceConfigurationDataReader( _loggerFactory, sqlDataReader );
                return simpleLineInputDeviceConfigurationDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<LineInputDeviceConfigurationObject> GetLineInputDeviceConfigurationCollectionByTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<LineInputDeviceConfigurationObject> GetLineInputDeviceConfigurationCollectionAtTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<LineInputDeviceConfigurationObject> GetLineInputDeviceConfigurationCollectionFromTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<LineInputDeviceConfigurationObject> GetLineInputDeviceConfigurationCollectionUntilTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<LineInputDeviceConfigurationObject> GetLineInputDeviceConfigurationCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException( );
        }
        // ---------------------------------------------------------------------
        // LineInputMessageRouting queries
        // ---------------------------------------------------------------------
        public SimpleLineInputMessageRoutingDataReader GetLineInputMessageRoutingByIdDataReader( Guid id )
        {
            const string sql = SimpleLineInputMessageRoutingDataReader.BaseQuery + "WHERE " + SimpleLineInputMessageRoutingDataReader.ViewAliasName + ".[Id] = @id"; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                sqlCommandParameters.AddGuid( "@id", id );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleLineInputMessageRoutingDataReader = new SimpleLineInputMessageRoutingDataReader( _loggerFactory, sqlDataReader );
                return simpleLineInputMessageRoutingDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public LineInputMessageRoutingObject? GetLineInputMessageRoutingById( Guid id )
        {
            var simpleLineInputMessageRoutingDataReader = GetLineInputMessageRoutingByIdDataReader( id );
            using ( simpleLineInputMessageRoutingDataReader )
            {
                if ( simpleLineInputMessageRoutingDataReader.Read( ) )
                {
                    var result = simpleLineInputMessageRoutingDataReader.GetDataObject( );
                    return result;
                }
            }
            return null;
        }

        public void GetLineInputMessageRoutingById( Guid id, Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleLineInputMessageRoutingDataReader = GetLineInputMessageRoutingByIdDataReader( id );
                using ( simpleLineInputMessageRoutingDataReader )
                {
                    if ( simpleLineInputMessageRoutingDataReader.Read( ) )
                    {
                        destinationWriter.Write( true );
                        simpleLineInputMessageRoutingDataReader.WriteTo( destinationWriter );
                    }
                    else
                    {
                        destinationWriter.Write( false );
                    }
                }
            }
        }

        public SimpleLineInputMessageRoutingDataReader GetLineInputMessageRoutingCollectionDataReader( )
        {
            const string sql = SimpleLineInputMessageRoutingDataReader.BaseQuery; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleLineInputMessageRoutingDataReader = new SimpleLineInputMessageRoutingDataReader( _loggerFactory, sqlDataReader );
                return simpleLineInputMessageRoutingDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public IList<LineInputMessageRoutingObject> GetLineInputMessageRoutingCollection( )
        {
            var result = new List<LineInputMessageRoutingObject>( );
            var simpleLineInputMessageRoutingDataReader = GetLineInputMessageRoutingCollectionDataReader( );
            using ( simpleLineInputMessageRoutingDataReader )
            {
                while ( simpleLineInputMessageRoutingDataReader.Read( ) )
                {
                    var data = simpleLineInputMessageRoutingDataReader.GetDataObject( );
                    result.Add( data );
                }
            }
            return result;
        }

        public void GetLineInputMessageRoutingCollection( Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleLineInputMessageRoutingDataReader = GetLineInputMessageRoutingCollectionDataReader( );
                using ( simpleLineInputMessageRoutingDataReader )
                {
                    simpleLineInputMessageRoutingDataReader.WriteResultSetTo( destinationWriter );
                }
            }
        }

        public SimpleLineInputMessageRoutingDataReader GetLineInputMessageRoutingCollectionByLineInputDeviceDataReader( Guid lineInputDevice )
        {
            const string sql = SimpleLineInputMessageRoutingDataReader.BaseQuery + " WHERE " +
                    SimpleLineInputMessageRoutingDataReader.ViewAliasName + ".[LineInputDevice] = @lineInputDevice " +
                    " ORDER BY " + SimpleLineInputMessageRoutingDataReader.ViewAliasName + ".[LineInputDevice]," +SimpleLineInputMessageRoutingDataReader.ViewAliasName + ".[Type]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var lineInputDeviceParameter = sqlCommandParameters.AddReference( "@lineInputDevice", lineInputDevice );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleLineInputMessageRoutingDataReader = new SimpleLineInputMessageRoutingDataReader( _loggerFactory, sqlDataReader );
                return simpleLineInputMessageRoutingDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<LineInputMessageRoutingObject> GetLineInputMessageRoutingCollectionByLineInputDevice( Guid lineInputDevice )
        {
            throw new NotImplementedException( );
        }
        public SimpleLineInputMessageRoutingDataReader GetLineInputMessageRoutingByLineInputDeviceAndTypeDataReader( Guid lineInputDevice, string type )
        {
            const string sql = SimpleLineInputMessageRoutingDataReader.BaseQuery + " WHERE " +
                    SimpleLineInputMessageRoutingDataReader.ViewAliasName + ".[LineInputDevice] = @lineInputDevice AND " +
                    SimpleLineInputMessageRoutingDataReader.ViewAliasName + ".[Type] = @type " +
                    " ORDER BY " + SimpleLineInputMessageRoutingDataReader.ViewAliasName + ".[LineInputDevice]," +SimpleLineInputMessageRoutingDataReader.ViewAliasName + ".[Type]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var lineInputDeviceParameter = sqlCommandParameters.AddReference( "@lineInputDevice", lineInputDevice );
                var typeParameter = sqlCommandParameters.AddNVarChar( "@type", type, 127 );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleLineInputMessageRoutingDataReader = new SimpleLineInputMessageRoutingDataReader( _loggerFactory, sqlDataReader );
                return simpleLineInputMessageRoutingDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public LineInputMessageRoutingObject? GetLineInputMessageRoutingByLineInputDeviceAndType( Guid lineInputDevice, string type )
        {
            throw new NotImplementedException( );
        }
        // ---------------------------------------------------------------------
        // LineInputMessageRoutingDestination queries
        // ---------------------------------------------------------------------
        public SimpleLineInputMessageRoutingDestinationDataReader GetLineInputMessageRoutingDestinationByIdDataReader( Guid id )
        {
            const string sql = SimpleLineInputMessageRoutingDestinationDataReader.BaseQuery + "WHERE " + SimpleLineInputMessageRoutingDestinationDataReader.ViewAliasName + ".[Id] = @id"; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                sqlCommandParameters.AddGuid( "@id", id );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleLineInputMessageRoutingDestinationDataReader = new SimpleLineInputMessageRoutingDestinationDataReader( _loggerFactory, sqlDataReader );
                return simpleLineInputMessageRoutingDestinationDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public LineInputMessageRoutingDestinationObject? GetLineInputMessageRoutingDestinationById( Guid id )
        {
            var simpleLineInputMessageRoutingDestinationDataReader = GetLineInputMessageRoutingDestinationByIdDataReader( id );
            using ( simpleLineInputMessageRoutingDestinationDataReader )
            {
                if ( simpleLineInputMessageRoutingDestinationDataReader.Read( ) )
                {
                    var result = simpleLineInputMessageRoutingDestinationDataReader.GetDataObject( );
                    return result;
                }
            }
            return null;
        }

        public void GetLineInputMessageRoutingDestinationById( Guid id, Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleLineInputMessageRoutingDestinationDataReader = GetLineInputMessageRoutingDestinationByIdDataReader( id );
                using ( simpleLineInputMessageRoutingDestinationDataReader )
                {
                    if ( simpleLineInputMessageRoutingDestinationDataReader.Read( ) )
                    {
                        destinationWriter.Write( true );
                        simpleLineInputMessageRoutingDestinationDataReader.WriteTo( destinationWriter );
                    }
                    else
                    {
                        destinationWriter.Write( false );
                    }
                }
            }
        }

        public SimpleLineInputMessageRoutingDestinationDataReader GetLineInputMessageRoutingDestinationCollectionDataReader( )
        {
            const string sql = SimpleLineInputMessageRoutingDestinationDataReader.BaseQuery; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleLineInputMessageRoutingDestinationDataReader = new SimpleLineInputMessageRoutingDestinationDataReader( _loggerFactory, sqlDataReader );
                return simpleLineInputMessageRoutingDestinationDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public IList<LineInputMessageRoutingDestinationObject> GetLineInputMessageRoutingDestinationCollection( )
        {
            var result = new List<LineInputMessageRoutingDestinationObject>( );
            var simpleLineInputMessageRoutingDestinationDataReader = GetLineInputMessageRoutingDestinationCollectionDataReader( );
            using ( simpleLineInputMessageRoutingDestinationDataReader )
            {
                while ( simpleLineInputMessageRoutingDestinationDataReader.Read( ) )
                {
                    var data = simpleLineInputMessageRoutingDestinationDataReader.GetDataObject( );
                    result.Add( data );
                }
            }
            return result;
        }

        public void GetLineInputMessageRoutingDestinationCollection( Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleLineInputMessageRoutingDestinationDataReader = GetLineInputMessageRoutingDestinationCollectionDataReader( );
                using ( simpleLineInputMessageRoutingDestinationDataReader )
                {
                    simpleLineInputMessageRoutingDestinationDataReader.WriteResultSetTo( destinationWriter );
                }
            }
        }

        public SimpleLineInputMessageRoutingDestinationDataReader GetLineInputMessageRoutingDestinationCollectionByRoutingDataReader( Guid routing )
        {
            const string sql = SimpleLineInputMessageRoutingDestinationDataReader.BaseQuery + " WHERE " +
                    SimpleLineInputMessageRoutingDestinationDataReader.ViewAliasName + ".[Routing] = @routing " +
                    " ORDER BY " + SimpleLineInputMessageRoutingDestinationDataReader.ViewAliasName + ".[Routing]," +SimpleLineInputMessageRoutingDestinationDataReader.ViewAliasName + ".[Listener]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var routingParameter = sqlCommandParameters.AddReference( "@routing", routing );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleLineInputMessageRoutingDestinationDataReader = new SimpleLineInputMessageRoutingDestinationDataReader( _loggerFactory, sqlDataReader );
                return simpleLineInputMessageRoutingDestinationDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<LineInputMessageRoutingDestinationObject> GetLineInputMessageRoutingDestinationCollectionByRouting( Guid routing )
        {
            throw new NotImplementedException( );
        }
        public SimpleLineInputMessageRoutingDestinationDataReader GetLineInputMessageRoutingDestinationByRoutingAndListenerDataReader( Guid routing, Guid listener )
        {
            const string sql = SimpleLineInputMessageRoutingDestinationDataReader.BaseQuery + " WHERE " +
                    SimpleLineInputMessageRoutingDestinationDataReader.ViewAliasName + ".[Routing] = @routing AND " +
                    SimpleLineInputMessageRoutingDestinationDataReader.ViewAliasName + ".[Listener] = @listener " +
                    " ORDER BY " + SimpleLineInputMessageRoutingDestinationDataReader.ViewAliasName + ".[Routing]," +SimpleLineInputMessageRoutingDestinationDataReader.ViewAliasName + ".[Listener]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var routingParameter = sqlCommandParameters.AddReference( "@routing", routing );
                var listenerParameter = sqlCommandParameters.AddReference( "@listener", listener );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleLineInputMessageRoutingDestinationDataReader = new SimpleLineInputMessageRoutingDestinationDataReader( _loggerFactory, sqlDataReader );
                return simpleLineInputMessageRoutingDestinationDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public LineInputMessageRoutingDestinationObject? GetLineInputMessageRoutingDestinationByRoutingAndListener( Guid routing, Guid listener )
        {
            throw new NotImplementedException( );
        }
        public SimpleLineInputMessageRoutingDestinationDataReader GetLineInputMessageRoutingDestinationCollectionByListenerDataReader( Guid listener )
        {
            const string sql = SimpleLineInputMessageRoutingDestinationDataReader.BaseQuery + " WHERE " +
                    SimpleLineInputMessageRoutingDestinationDataReader.ViewAliasName + ".[Listener] = @listener " +
                    " ORDER BY " + SimpleLineInputMessageRoutingDestinationDataReader.ViewAliasName + ".[Listener]," +SimpleLineInputMessageRoutingDestinationDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var listenerParameter = sqlCommandParameters.AddReference( "@listener", listener );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleLineInputMessageRoutingDestinationDataReader = new SimpleLineInputMessageRoutingDestinationDataReader( _loggerFactory, sqlDataReader );
                return simpleLineInputMessageRoutingDestinationDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<LineInputMessageRoutingDestinationObject> GetLineInputMessageRoutingDestinationCollectionByListener( Guid listener )
        {
            throw new NotImplementedException( );
        }
        // ---------------------------------------------------------------------
        // LineInputWhiteListEntry queries
        // ---------------------------------------------------------------------
        public SimpleLineInputWhiteListEntryDataReader GetLineInputWhiteListEntryByIdDataReader( Guid id )
        {
            const string sql = SimpleLineInputWhiteListEntryDataReader.BaseQuery + "WHERE " + SimpleLineInputWhiteListEntryDataReader.ViewAliasName + ".[Id] = @id"; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                sqlCommandParameters.AddGuid( "@id", id );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleLineInputWhiteListEntryDataReader = new SimpleLineInputWhiteListEntryDataReader( _loggerFactory, sqlDataReader );
                return simpleLineInputWhiteListEntryDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public LineInputWhiteListEntryObject? GetLineInputWhiteListEntryById( Guid id )
        {
            var simpleLineInputWhiteListEntryDataReader = GetLineInputWhiteListEntryByIdDataReader( id );
            using ( simpleLineInputWhiteListEntryDataReader )
            {
                if ( simpleLineInputWhiteListEntryDataReader.Read( ) )
                {
                    var result = simpleLineInputWhiteListEntryDataReader.GetDataObject( );
                    return result;
                }
            }
            return null;
        }

        public void GetLineInputWhiteListEntryById( Guid id, Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleLineInputWhiteListEntryDataReader = GetLineInputWhiteListEntryByIdDataReader( id );
                using ( simpleLineInputWhiteListEntryDataReader )
                {
                    if ( simpleLineInputWhiteListEntryDataReader.Read( ) )
                    {
                        destinationWriter.Write( true );
                        simpleLineInputWhiteListEntryDataReader.WriteTo( destinationWriter );
                    }
                    else
                    {
                        destinationWriter.Write( false );
                    }
                }
            }
        }

        public SimpleLineInputWhiteListEntryDataReader GetLineInputWhiteListEntryCollectionDataReader( )
        {
            const string sql = SimpleLineInputWhiteListEntryDataReader.BaseQuery; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleLineInputWhiteListEntryDataReader = new SimpleLineInputWhiteListEntryDataReader( _loggerFactory, sqlDataReader );
                return simpleLineInputWhiteListEntryDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public IList<LineInputWhiteListEntryObject> GetLineInputWhiteListEntryCollection( )
        {
            var result = new List<LineInputWhiteListEntryObject>( );
            var simpleLineInputWhiteListEntryDataReader = GetLineInputWhiteListEntryCollectionDataReader( );
            using ( simpleLineInputWhiteListEntryDataReader )
            {
                while ( simpleLineInputWhiteListEntryDataReader.Read( ) )
                {
                    var data = simpleLineInputWhiteListEntryDataReader.GetDataObject( );
                    result.Add( data );
                }
            }
            return result;
        }

        public void GetLineInputWhiteListEntryCollection( Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleLineInputWhiteListEntryDataReader = GetLineInputWhiteListEntryCollectionDataReader( );
                using ( simpleLineInputWhiteListEntryDataReader )
                {
                    simpleLineInputWhiteListEntryDataReader.WriteResultSetTo( destinationWriter );
                }
            }
        }

        public SimpleLineInputWhiteListEntryDataReader GetLineInputWhiteListEntryCollectionByLineInputDeviceDataReader( Guid lineInputDevice )
        {
            const string sql = SimpleLineInputWhiteListEntryDataReader.BaseQuery + " WHERE " +
                    SimpleLineInputWhiteListEntryDataReader.ViewAliasName + ".[LineInputDevice] = @lineInputDevice " +
                    " ORDER BY " + SimpleLineInputWhiteListEntryDataReader.ViewAliasName + ".[LineInputDevice]," +SimpleLineInputWhiteListEntryDataReader.ViewAliasName + ".[HostName]," +SimpleLineInputWhiteListEntryDataReader.ViewAliasName + ".[Port]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var lineInputDeviceParameter = sqlCommandParameters.AddReference( "@lineInputDevice", lineInputDevice );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleLineInputWhiteListEntryDataReader = new SimpleLineInputWhiteListEntryDataReader( _loggerFactory, sqlDataReader );
                return simpleLineInputWhiteListEntryDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<LineInputWhiteListEntryObject> GetLineInputWhiteListEntryCollectionByLineInputDevice( Guid lineInputDevice )
        {
            throw new NotImplementedException( );
        }
        public SimpleLineInputWhiteListEntryDataReader GetLineInputWhiteListEntryCollectionByLineInputDeviceAndHostNameDataReader( Guid lineInputDevice, string hostName )
        {
            const string sql = SimpleLineInputWhiteListEntryDataReader.BaseQuery + " WHERE " +
                    SimpleLineInputWhiteListEntryDataReader.ViewAliasName + ".[LineInputDevice] = @lineInputDevice AND " +
                    SimpleLineInputWhiteListEntryDataReader.ViewAliasName + ".[HostName] = @hostName " +
                    " ORDER BY " + SimpleLineInputWhiteListEntryDataReader.ViewAliasName + ".[LineInputDevice]," +SimpleLineInputWhiteListEntryDataReader.ViewAliasName + ".[HostName]," +SimpleLineInputWhiteListEntryDataReader.ViewAliasName + ".[Port]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var lineInputDeviceParameter = sqlCommandParameters.AddReference( "@lineInputDevice", lineInputDevice );
                var hostNameParameter = sqlCommandParameters.AddNVarChar( "@hostName", hostName, 128 );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleLineInputWhiteListEntryDataReader = new SimpleLineInputWhiteListEntryDataReader( _loggerFactory, sqlDataReader );
                return simpleLineInputWhiteListEntryDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<LineInputWhiteListEntryObject> GetLineInputWhiteListEntryCollectionByLineInputDeviceAndHostName( Guid lineInputDevice, string hostName )
        {
            throw new NotImplementedException( );
        }
        public SimpleLineInputWhiteListEntryDataReader GetLineInputWhiteListEntryByLineInputDeviceHostNameAndPortDataReader( Guid lineInputDevice, string hostName, int port )
        {
            const string sql = SimpleLineInputWhiteListEntryDataReader.BaseQuery + " WHERE " +
                    SimpleLineInputWhiteListEntryDataReader.ViewAliasName + ".[LineInputDevice] = @lineInputDevice AND " +
                    SimpleLineInputWhiteListEntryDataReader.ViewAliasName + ".[HostName] = @hostName AND " +
                    SimpleLineInputWhiteListEntryDataReader.ViewAliasName + ".[Port] = @port " +
                    " ORDER BY " + SimpleLineInputWhiteListEntryDataReader.ViewAliasName + ".[LineInputDevice]," +SimpleLineInputWhiteListEntryDataReader.ViewAliasName + ".[HostName]," +SimpleLineInputWhiteListEntryDataReader.ViewAliasName + ".[Port]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var lineInputDeviceParameter = sqlCommandParameters.AddReference( "@lineInputDevice", lineInputDevice );
                var hostNameParameter = sqlCommandParameters.AddNVarChar( "@hostName", hostName, 128 );
                var portParameter = sqlCommandParameters.AddInt32( "@port", port );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleLineInputWhiteListEntryDataReader = new SimpleLineInputWhiteListEntryDataReader( _loggerFactory, sqlDataReader );
                return simpleLineInputWhiteListEntryDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public LineInputWhiteListEntryObject? GetLineInputWhiteListEntryByLineInputDeviceHostNameAndPort( Guid lineInputDevice, string hostName, int port )
        {
            throw new NotImplementedException( );
        }
        public IList<LineInputWhiteListEntryObject> GetLineInputWhiteListEntryByLineInputDeviceHostNameFromPort( Guid lineInputDevice, string hostName, int port )
        {
            throw new NotImplementedException( );
        }
        public IList<LineInputWhiteListEntryObject> GetLineInputWhiteListEntryByLineInputDeviceHostNameUntilPort( Guid lineInputDevice, string hostName, int port )
        {
            throw new NotImplementedException( );
        }
        public IList<LineInputWhiteListEntryObject> GetLineInputWhiteListEntryByLineInputDeviceHostNameOverPort( Guid lineInputDevice, string hostName, int fromPort, int untilPort )
        {
            throw new NotImplementedException( );
        }
        // ---------------------------------------------------------------------
        // LogApplication queries
        // ---------------------------------------------------------------------
        public SimpleLogApplicationDataReader GetLogApplicationByIdDataReader( Guid id )
        {
            const string sql = SimpleLogApplicationDataReader.BaseQuery + "WHERE " + SimpleLogApplicationDataReader.ViewAliasName + ".[Id] = @id"; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                sqlCommandParameters.AddGuid( "@id", id );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleLogApplicationDataReader = new SimpleLogApplicationDataReader( _loggerFactory, sqlDataReader );
                return simpleLogApplicationDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public LogApplicationObject? GetLogApplicationById( Guid id )
        {
            var simpleLogApplicationDataReader = GetLogApplicationByIdDataReader( id );
            using ( simpleLogApplicationDataReader )
            {
                if ( simpleLogApplicationDataReader.Read( ) )
                {
                    var result = simpleLogApplicationDataReader.GetDataObject( );
                    return result;
                }
            }
            return null;
        }

        public void GetLogApplicationById( Guid id, Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleLogApplicationDataReader = GetLogApplicationByIdDataReader( id );
                using ( simpleLogApplicationDataReader )
                {
                    if ( simpleLogApplicationDataReader.Read( ) )
                    {
                        destinationWriter.Write( true );
                        simpleLogApplicationDataReader.WriteTo( destinationWriter );
                    }
                    else
                    {
                        destinationWriter.Write( false );
                    }
                }
            }
        }

        public SimpleLogApplicationDataReader GetLogApplicationCollectionDataReader( )
        {
            const string sql = SimpleLogApplicationDataReader.BaseQuery; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleLogApplicationDataReader = new SimpleLogApplicationDataReader( _loggerFactory, sqlDataReader );
                return simpleLogApplicationDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public IList<LogApplicationObject> GetLogApplicationCollection( )
        {
            var result = new List<LogApplicationObject>( );
            var simpleLogApplicationDataReader = GetLogApplicationCollectionDataReader( );
            using ( simpleLogApplicationDataReader )
            {
                while ( simpleLogApplicationDataReader.Read( ) )
                {
                    var data = simpleLogApplicationDataReader.GetDataObject( );
                    result.Add( data );
                }
            }
            return result;
        }

        public void GetLogApplicationCollection( Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleLogApplicationDataReader = GetLogApplicationCollectionDataReader( );
                using ( simpleLogApplicationDataReader )
                {
                    simpleLogApplicationDataReader.WriteResultSetTo( destinationWriter );
                }
            }
        }

        public SimpleLogApplicationDataReader GetLogApplicationByNameDataReader( string name )
        {
            const string sql = SimpleLogApplicationDataReader.BaseQuery + " WHERE " +
                    SimpleLogApplicationDataReader.ViewAliasName + ".[Name] = @name " +
                    " ORDER BY " + SimpleLogApplicationDataReader.ViewAliasName + ".[Name]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var nameParameter = sqlCommandParameters.AddNVarChar( "@name", name, 127 );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleLogApplicationDataReader = new SimpleLogApplicationDataReader( _loggerFactory, sqlDataReader );
                return simpleLogApplicationDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public LogApplicationObject? GetLogApplicationByName( string name )
        {
            throw new NotImplementedException( );
        }
        // ---------------------------------------------------------------------
        // LogApplicationConfiguration queries
        // ---------------------------------------------------------------------
        public SimpleLogApplicationConfigurationDataReader GetLogApplicationConfigurationByIdDataReader( Guid id )
        {
            const string sql = SimpleLogApplicationConfigurationDataReader.BaseQuery + "WHERE " + SimpleLogApplicationConfigurationDataReader.ViewAliasName + ".[Id] = @id"; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                sqlCommandParameters.AddGuid( "@id", id );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleLogApplicationConfigurationDataReader = new SimpleLogApplicationConfigurationDataReader( _loggerFactory, sqlDataReader );
                return simpleLogApplicationConfigurationDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public LogApplicationConfigurationObject? GetLogApplicationConfigurationById( Guid id )
        {
            var simpleLogApplicationConfigurationDataReader = GetLogApplicationConfigurationByIdDataReader( id );
            using ( simpleLogApplicationConfigurationDataReader )
            {
                if ( simpleLogApplicationConfigurationDataReader.Read( ) )
                {
                    var result = simpleLogApplicationConfigurationDataReader.GetDataObject( );
                    return result;
                }
            }
            return null;
        }

        public void GetLogApplicationConfigurationById( Guid id, Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleLogApplicationConfigurationDataReader = GetLogApplicationConfigurationByIdDataReader( id );
                using ( simpleLogApplicationConfigurationDataReader )
                {
                    if ( simpleLogApplicationConfigurationDataReader.Read( ) )
                    {
                        destinationWriter.Write( true );
                        simpleLogApplicationConfigurationDataReader.WriteTo( destinationWriter );
                    }
                    else
                    {
                        destinationWriter.Write( false );
                    }
                }
            }
        }

        public SimpleLogApplicationConfigurationDataReader GetLogApplicationConfigurationCollectionDataReader( )
        {
            const string sql = SimpleLogApplicationConfigurationDataReader.BaseQuery; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleLogApplicationConfigurationDataReader = new SimpleLogApplicationConfigurationDataReader( _loggerFactory, sqlDataReader );
                return simpleLogApplicationConfigurationDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public IList<LogApplicationConfigurationObject> GetLogApplicationConfigurationCollection( )
        {
            var result = new List<LogApplicationConfigurationObject>( );
            var simpleLogApplicationConfigurationDataReader = GetLogApplicationConfigurationCollectionDataReader( );
            using ( simpleLogApplicationConfigurationDataReader )
            {
                while ( simpleLogApplicationConfigurationDataReader.Read( ) )
                {
                    var data = simpleLogApplicationConfigurationDataReader.GetDataObject( );
                    result.Add( data );
                }
            }
            return result;
        }

        public void GetLogApplicationConfigurationCollection( Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleLogApplicationConfigurationDataReader = GetLogApplicationConfigurationCollectionDataReader( );
                using ( simpleLogApplicationConfigurationDataReader )
                {
                    simpleLogApplicationConfigurationDataReader.WriteResultSetTo( destinationWriter );
                }
            }
        }

        public SimpleLogApplicationConfigurationDataReader GetLogApplicationConfigurationCollectionByApplicationDataReader( Guid application )
        {
            const string sql = SimpleLogApplicationConfigurationDataReader.BaseQuery + " WHERE " +
                    SimpleLogApplicationConfigurationDataReader.ViewAliasName + ".[Application] = @application " +
                    " ORDER BY " + SimpleLogApplicationConfigurationDataReader.ViewAliasName + ".[Application]," +SimpleLogApplicationConfigurationDataReader.ViewAliasName + ".[Timestamp]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var applicationParameter = sqlCommandParameters.AddReference( "@application", application );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleLogApplicationConfigurationDataReader = new SimpleLogApplicationConfigurationDataReader( _loggerFactory, sqlDataReader );
                return simpleLogApplicationConfigurationDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<LogApplicationConfigurationObject> GetLogApplicationConfigurationCollectionByApplication( Guid application )
        {
            throw new NotImplementedException( );
        }
        public SimpleLogApplicationConfigurationDataReader GetLogApplicationConfigurationByApplicationAndTimestampDataReader( Guid application, DateTime timestamp )
        {
            const string sql = SimpleLogApplicationConfigurationDataReader.BaseQuery + " WHERE " +
                    SimpleLogApplicationConfigurationDataReader.ViewAliasName + ".[Application] = @application AND " +
                    SimpleLogApplicationConfigurationDataReader.ViewAliasName + ".[Timestamp] = @timestamp " +
                    " ORDER BY " + SimpleLogApplicationConfigurationDataReader.ViewAliasName + ".[Application]," +SimpleLogApplicationConfigurationDataReader.ViewAliasName + ".[Timestamp]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var applicationParameter = sqlCommandParameters.AddReference( "@application", application );
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@timestamp", timestamp );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleLogApplicationConfigurationDataReader = new SimpleLogApplicationConfigurationDataReader( _loggerFactory, sqlDataReader );
                return simpleLogApplicationConfigurationDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public LogApplicationConfigurationObject? GetLogApplicationConfigurationByApplicationAndTimestamp( Guid application, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public LogApplicationConfigurationObject? GetLogApplicationConfigurationByApplicationAtTimestamp( Guid application, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<LogApplicationConfigurationObject> GetLogApplicationConfigurationByApplicationFromTimestamp( Guid application, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<LogApplicationConfigurationObject> GetLogApplicationConfigurationByApplicationUntilTimestamp( Guid application, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<LogApplicationConfigurationObject> GetLogApplicationConfigurationByApplicationOverTimestamp( Guid application, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException( );
        }
        public SimpleLogApplicationConfigurationDataReader GetLogApplicationConfigurationCollectionByTimestampDataReader( DateTime timestamp )
        {
            const string sql = SimpleLogApplicationConfigurationDataReader.BaseQuery + " WHERE " +
                    SimpleLogApplicationConfigurationDataReader.ViewAliasName + ".[Timestamp] = @timestamp " +
                    " ORDER BY " + SimpleLogApplicationConfigurationDataReader.ViewAliasName + ".[Timestamp]," +SimpleLogApplicationConfigurationDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@timestamp", timestamp );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleLogApplicationConfigurationDataReader = new SimpleLogApplicationConfigurationDataReader( _loggerFactory, sqlDataReader );
                return simpleLogApplicationConfigurationDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<LogApplicationConfigurationObject> GetLogApplicationConfigurationCollectionByTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<LogApplicationConfigurationObject> GetLogApplicationConfigurationCollectionAtTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<LogApplicationConfigurationObject> GetLogApplicationConfigurationCollectionFromTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<LogApplicationConfigurationObject> GetLogApplicationConfigurationCollectionUntilTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<LogApplicationConfigurationObject> GetLogApplicationConfigurationCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException( );
        }
        // ---------------------------------------------------------------------
        // LogHost queries
        // ---------------------------------------------------------------------
        public SimpleLogHostDataReader GetLogHostByIdDataReader( Guid id )
        {
            const string sql = SimpleLogHostDataReader.BaseQuery + "WHERE " + SimpleLogHostDataReader.ViewAliasName + ".[Id] = @id"; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                sqlCommandParameters.AddGuid( "@id", id );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleLogHostDataReader = new SimpleLogHostDataReader( _loggerFactory, sqlDataReader );
                return simpleLogHostDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public LogHostObject? GetLogHostById( Guid id )
        {
            var simpleLogHostDataReader = GetLogHostByIdDataReader( id );
            using ( simpleLogHostDataReader )
            {
                if ( simpleLogHostDataReader.Read( ) )
                {
                    var result = simpleLogHostDataReader.GetDataObject( );
                    return result;
                }
            }
            return null;
        }

        public void GetLogHostById( Guid id, Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleLogHostDataReader = GetLogHostByIdDataReader( id );
                using ( simpleLogHostDataReader )
                {
                    if ( simpleLogHostDataReader.Read( ) )
                    {
                        destinationWriter.Write( true );
                        simpleLogHostDataReader.WriteTo( destinationWriter );
                    }
                    else
                    {
                        destinationWriter.Write( false );
                    }
                }
            }
        }

        public SimpleLogHostDataReader GetLogHostCollectionDataReader( )
        {
            const string sql = SimpleLogHostDataReader.BaseQuery; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleLogHostDataReader = new SimpleLogHostDataReader( _loggerFactory, sqlDataReader );
                return simpleLogHostDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public IList<LogHostObject> GetLogHostCollection( )
        {
            var result = new List<LogHostObject>( );
            var simpleLogHostDataReader = GetLogHostCollectionDataReader( );
            using ( simpleLogHostDataReader )
            {
                while ( simpleLogHostDataReader.Read( ) )
                {
                    var data = simpleLogHostDataReader.GetDataObject( );
                    result.Add( data );
                }
            }
            return result;
        }

        public void GetLogHostCollection( Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleLogHostDataReader = GetLogHostCollectionDataReader( );
                using ( simpleLogHostDataReader )
                {
                    simpleLogHostDataReader.WriteResultSetTo( destinationWriter );
                }
            }
        }

        public SimpleLogHostDataReader GetLogHostByComputerNameDataReader( string computerName )
        {
            const string sql = SimpleLogHostDataReader.BaseQuery + " WHERE " +
                    SimpleLogHostDataReader.ViewAliasName + ".[ComputerName] = @computerName " +
                    " ORDER BY " + SimpleLogHostDataReader.ViewAliasName + ".[ComputerName]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var computerNameParameter = sqlCommandParameters.AddNVarChar( "@computerName", computerName, 127 );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleLogHostDataReader = new SimpleLogHostDataReader( _loggerFactory, sqlDataReader );
                return simpleLogHostDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public LogHostObject? GetLogHostByComputerName( string computerName )
        {
            throw new NotImplementedException( );
        }
        // ---------------------------------------------------------------------
        // LogHostConfiguration queries
        // ---------------------------------------------------------------------
        public SimpleLogHostConfigurationDataReader GetLogHostConfigurationByIdDataReader( Guid id )
        {
            const string sql = SimpleLogHostConfigurationDataReader.BaseQuery + "WHERE " + SimpleLogHostConfigurationDataReader.ViewAliasName + ".[Id] = @id"; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                sqlCommandParameters.AddGuid( "@id", id );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleLogHostConfigurationDataReader = new SimpleLogHostConfigurationDataReader( _loggerFactory, sqlDataReader );
                return simpleLogHostConfigurationDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public LogHostConfigurationObject? GetLogHostConfigurationById( Guid id )
        {
            var simpleLogHostConfigurationDataReader = GetLogHostConfigurationByIdDataReader( id );
            using ( simpleLogHostConfigurationDataReader )
            {
                if ( simpleLogHostConfigurationDataReader.Read( ) )
                {
                    var result = simpleLogHostConfigurationDataReader.GetDataObject( );
                    return result;
                }
            }
            return null;
        }

        public void GetLogHostConfigurationById( Guid id, Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleLogHostConfigurationDataReader = GetLogHostConfigurationByIdDataReader( id );
                using ( simpleLogHostConfigurationDataReader )
                {
                    if ( simpleLogHostConfigurationDataReader.Read( ) )
                    {
                        destinationWriter.Write( true );
                        simpleLogHostConfigurationDataReader.WriteTo( destinationWriter );
                    }
                    else
                    {
                        destinationWriter.Write( false );
                    }
                }
            }
        }

        public SimpleLogHostConfigurationDataReader GetLogHostConfigurationCollectionDataReader( )
        {
            const string sql = SimpleLogHostConfigurationDataReader.BaseQuery; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleLogHostConfigurationDataReader = new SimpleLogHostConfigurationDataReader( _loggerFactory, sqlDataReader );
                return simpleLogHostConfigurationDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public IList<LogHostConfigurationObject> GetLogHostConfigurationCollection( )
        {
            var result = new List<LogHostConfigurationObject>( );
            var simpleLogHostConfigurationDataReader = GetLogHostConfigurationCollectionDataReader( );
            using ( simpleLogHostConfigurationDataReader )
            {
                while ( simpleLogHostConfigurationDataReader.Read( ) )
                {
                    var data = simpleLogHostConfigurationDataReader.GetDataObject( );
                    result.Add( data );
                }
            }
            return result;
        }

        public void GetLogHostConfigurationCollection( Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleLogHostConfigurationDataReader = GetLogHostConfigurationCollectionDataReader( );
                using ( simpleLogHostConfigurationDataReader )
                {
                    simpleLogHostConfigurationDataReader.WriteResultSetTo( destinationWriter );
                }
            }
        }

        public SimpleLogHostConfigurationDataReader GetLogHostConfigurationCollectionByHostDataReader( Guid host )
        {
            const string sql = SimpleLogHostConfigurationDataReader.BaseQuery + " WHERE " +
                    SimpleLogHostConfigurationDataReader.ViewAliasName + ".[Host] = @host " +
                    " ORDER BY " + SimpleLogHostConfigurationDataReader.ViewAliasName + ".[Host]," +SimpleLogHostConfigurationDataReader.ViewAliasName + ".[Timestamp]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var hostParameter = sqlCommandParameters.AddReference( "@host", host );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleLogHostConfigurationDataReader = new SimpleLogHostConfigurationDataReader( _loggerFactory, sqlDataReader );
                return simpleLogHostConfigurationDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<LogHostConfigurationObject> GetLogHostConfigurationCollectionByHost( Guid host )
        {
            throw new NotImplementedException( );
        }
        public SimpleLogHostConfigurationDataReader GetLogHostConfigurationByHostAndTimestampDataReader( Guid host, DateTime timestamp )
        {
            const string sql = SimpleLogHostConfigurationDataReader.BaseQuery + " WHERE " +
                    SimpleLogHostConfigurationDataReader.ViewAliasName + ".[Host] = @host AND " +
                    SimpleLogHostConfigurationDataReader.ViewAliasName + ".[Timestamp] = @timestamp " +
                    " ORDER BY " + SimpleLogHostConfigurationDataReader.ViewAliasName + ".[Host]," +SimpleLogHostConfigurationDataReader.ViewAliasName + ".[Timestamp]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var hostParameter = sqlCommandParameters.AddReference( "@host", host );
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@timestamp", timestamp );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleLogHostConfigurationDataReader = new SimpleLogHostConfigurationDataReader( _loggerFactory, sqlDataReader );
                return simpleLogHostConfigurationDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public LogHostConfigurationObject? GetLogHostConfigurationByHostAndTimestamp( Guid host, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public LogHostConfigurationObject? GetLogHostConfigurationByHostAtTimestamp( Guid host, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<LogHostConfigurationObject> GetLogHostConfigurationByHostFromTimestamp( Guid host, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<LogHostConfigurationObject> GetLogHostConfigurationByHostUntilTimestamp( Guid host, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<LogHostConfigurationObject> GetLogHostConfigurationByHostOverTimestamp( Guid host, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException( );
        }
        public SimpleLogHostConfigurationDataReader GetLogHostConfigurationCollectionByTimestampDataReader( DateTime timestamp )
        {
            const string sql = SimpleLogHostConfigurationDataReader.BaseQuery + " WHERE " +
                    SimpleLogHostConfigurationDataReader.ViewAliasName + ".[Timestamp] = @timestamp " +
                    " ORDER BY " + SimpleLogHostConfigurationDataReader.ViewAliasName + ".[Timestamp]," +SimpleLogHostConfigurationDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@timestamp", timestamp );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleLogHostConfigurationDataReader = new SimpleLogHostConfigurationDataReader( _loggerFactory, sqlDataReader );
                return simpleLogHostConfigurationDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<LogHostConfigurationObject> GetLogHostConfigurationCollectionByTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<LogHostConfigurationObject> GetLogHostConfigurationCollectionAtTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<LogHostConfigurationObject> GetLogHostConfigurationCollectionFromTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<LogHostConfigurationObject> GetLogHostConfigurationCollectionUntilTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<LogHostConfigurationObject> GetLogHostConfigurationCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException( );
        }
        // ---------------------------------------------------------------------
        // LogLocation queries
        // ---------------------------------------------------------------------
        public SimpleLogLocationDataReader GetLogLocationByIdDataReader( Guid id )
        {
            const string sql = SimpleLogLocationDataReader.BaseQuery + "WHERE " + SimpleLogLocationDataReader.ViewAliasName + ".[Id] = @id"; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                sqlCommandParameters.AddGuid( "@id", id );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleLogLocationDataReader = new SimpleLogLocationDataReader( _loggerFactory, sqlDataReader );
                return simpleLogLocationDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public LogLocationObject? GetLogLocationById( Guid id )
        {
            var simpleLogLocationDataReader = GetLogLocationByIdDataReader( id );
            using ( simpleLogLocationDataReader )
            {
                if ( simpleLogLocationDataReader.Read( ) )
                {
                    var result = simpleLogLocationDataReader.GetDataObject( );
                    return result;
                }
            }
            return null;
        }

        public void GetLogLocationById( Guid id, Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleLogLocationDataReader = GetLogLocationByIdDataReader( id );
                using ( simpleLogLocationDataReader )
                {
                    if ( simpleLogLocationDataReader.Read( ) )
                    {
                        destinationWriter.Write( true );
                        simpleLogLocationDataReader.WriteTo( destinationWriter );
                    }
                    else
                    {
                        destinationWriter.Write( false );
                    }
                }
            }
        }

        public SimpleLogLocationDataReader GetLogLocationCollectionDataReader( )
        {
            const string sql = SimpleLogLocationDataReader.BaseQuery; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleLogLocationDataReader = new SimpleLogLocationDataReader( _loggerFactory, sqlDataReader );
                return simpleLogLocationDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public IList<LogLocationObject> GetLogLocationCollection( )
        {
            var result = new List<LogLocationObject>( );
            var simpleLogLocationDataReader = GetLogLocationCollectionDataReader( );
            using ( simpleLogLocationDataReader )
            {
                while ( simpleLogLocationDataReader.Read( ) )
                {
                    var data = simpleLogLocationDataReader.GetDataObject( );
                    result.Add( data );
                }
            }
            return result;
        }

        public void GetLogLocationCollection( Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleLogLocationDataReader = GetLogLocationCollectionDataReader( );
                using ( simpleLogLocationDataReader )
                {
                    simpleLogLocationDataReader.WriteResultSetTo( destinationWriter );
                }
            }
        }

        public SimpleLogLocationDataReader GetLogLocationCollectionByFileNameDataReader( string fileName )
        {
            const string sql = SimpleLogLocationDataReader.BaseQuery + " WHERE " +
                    SimpleLogLocationDataReader.ViewAliasName + ".[FileName] = @fileName " +
                    " ORDER BY " + SimpleLogLocationDataReader.ViewAliasName + ".[FileName]," +SimpleLogLocationDataReader.ViewAliasName + ".[LineNumber]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var fileNameParameter = sqlCommandParameters.AddNVarChar( "@fileName", fileName, 260 );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleLogLocationDataReader = new SimpleLogLocationDataReader( _loggerFactory, sqlDataReader );
                return simpleLogLocationDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<LogLocationObject> GetLogLocationCollectionByFileName( string fileName )
        {
            throw new NotImplementedException( );
        }
        public SimpleLogLocationDataReader GetLogLocationByFileNameAndLineNumberDataReader( string fileName, int lineNumber )
        {
            const string sql = SimpleLogLocationDataReader.BaseQuery + " WHERE " +
                    SimpleLogLocationDataReader.ViewAliasName + ".[FileName] = @fileName AND " +
                    SimpleLogLocationDataReader.ViewAliasName + ".[LineNumber] = @lineNumber " +
                    " ORDER BY " + SimpleLogLocationDataReader.ViewAliasName + ".[FileName]," +SimpleLogLocationDataReader.ViewAliasName + ".[LineNumber]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var fileNameParameter = sqlCommandParameters.AddNVarChar( "@fileName", fileName, 260 );
                var lineNumberParameter = sqlCommandParameters.AddInt32( "@lineNumber", lineNumber );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleLogLocationDataReader = new SimpleLogLocationDataReader( _loggerFactory, sqlDataReader );
                return simpleLogLocationDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public LogLocationObject? GetLogLocationByFileNameAndLineNumber( string fileName, int lineNumber )
        {
            throw new NotImplementedException( );
        }
        public IList<LogLocationObject> GetLogLocationByFileNameFromLineNumber( string fileName, int lineNumber )
        {
            throw new NotImplementedException( );
        }
        public IList<LogLocationObject> GetLogLocationByFileNameUntilLineNumber( string fileName, int lineNumber )
        {
            throw new NotImplementedException( );
        }
        public IList<LogLocationObject> GetLogLocationByFileNameOverLineNumber( string fileName, int fromLineNumber, int untilLineNumber )
        {
            throw new NotImplementedException( );
        }
        // ---------------------------------------------------------------------
        // LogProcess queries
        // ---------------------------------------------------------------------
        public SimpleLogProcessDataReader GetLogProcessByIdDataReader( Guid id )
        {
            const string sql = SimpleLogProcessDataReader.BaseQuery + "WHERE " + SimpleLogProcessDataReader.ViewAliasName + ".[Id] = @id"; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                sqlCommandParameters.AddGuid( "@id", id );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleLogProcessDataReader = new SimpleLogProcessDataReader( _loggerFactory, sqlDataReader );
                return simpleLogProcessDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public LogProcessObject? GetLogProcessById( Guid id )
        {
            var simpleLogProcessDataReader = GetLogProcessByIdDataReader( id );
            using ( simpleLogProcessDataReader )
            {
                if ( simpleLogProcessDataReader.Read( ) )
                {
                    var result = simpleLogProcessDataReader.GetDataObject( );
                    return result;
                }
            }
            return null;
        }

        public void GetLogProcessById( Guid id, Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleLogProcessDataReader = GetLogProcessByIdDataReader( id );
                using ( simpleLogProcessDataReader )
                {
                    if ( simpleLogProcessDataReader.Read( ) )
                    {
                        destinationWriter.Write( true );
                        simpleLogProcessDataReader.WriteTo( destinationWriter );
                    }
                    else
                    {
                        destinationWriter.Write( false );
                    }
                }
            }
        }

        public SimpleLogProcessDataReader GetLogProcessCollectionDataReader( )
        {
            const string sql = SimpleLogProcessDataReader.BaseQuery; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleLogProcessDataReader = new SimpleLogProcessDataReader( _loggerFactory, sqlDataReader );
                return simpleLogProcessDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public IList<LogProcessObject> GetLogProcessCollection( )
        {
            var result = new List<LogProcessObject>( );
            var simpleLogProcessDataReader = GetLogProcessCollectionDataReader( );
            using ( simpleLogProcessDataReader )
            {
                while ( simpleLogProcessDataReader.Read( ) )
                {
                    var data = simpleLogProcessDataReader.GetDataObject( );
                    result.Add( data );
                }
            }
            return result;
        }

        public void GetLogProcessCollection( Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleLogProcessDataReader = GetLogProcessCollectionDataReader( );
                using ( simpleLogProcessDataReader )
                {
                    simpleLogProcessDataReader.WriteResultSetTo( destinationWriter );
                }
            }
        }

        public SimpleLogProcessDataReader GetLogProcessCollectionByApplicationDataReader( Guid application )
        {
            const string sql = SimpleLogProcessDataReader.BaseQuery + " WHERE " +
                    SimpleLogProcessDataReader.ViewAliasName + ".[Application] = @application " +
                    " ORDER BY " + SimpleLogProcessDataReader.ViewAliasName + ".[Application]," +SimpleLogProcessDataReader.ViewAliasName + ".[Started]," +SimpleLogProcessDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var applicationParameter = sqlCommandParameters.AddReference( "@application", application );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleLogProcessDataReader = new SimpleLogProcessDataReader( _loggerFactory, sqlDataReader );
                return simpleLogProcessDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<LogProcessObject> GetLogProcessCollectionByApplication( Guid application )
        {
            throw new NotImplementedException( );
        }
        public SimpleLogProcessDataReader GetLogProcessCollectionByApplicationAndStartedDataReader( Guid application, DateTime started )
        {
            const string sql = SimpleLogProcessDataReader.BaseQuery + " WHERE " +
                    SimpleLogProcessDataReader.ViewAliasName + ".[Application] = @application AND " +
                    SimpleLogProcessDataReader.ViewAliasName + ".[Started] = @started " +
                    " ORDER BY " + SimpleLogProcessDataReader.ViewAliasName + ".[Application]," +SimpleLogProcessDataReader.ViewAliasName + ".[Started]," +SimpleLogProcessDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var applicationParameter = sqlCommandParameters.AddReference( "@application", application );
                var startedParameter = sqlCommandParameters.AddDateTimeAsInt64( "@started", started );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleLogProcessDataReader = new SimpleLogProcessDataReader( _loggerFactory, sqlDataReader );
                return simpleLogProcessDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<LogProcessObject> GetLogProcessCollectionByApplicationAndStarted( Guid application, DateTime started )
        {
            throw new NotImplementedException( );
        }
        public IList<LogProcessObject> GetLogProcessCollectionByApplicationAtStarted( Guid application, DateTime started )
        {
            throw new NotImplementedException( );
        }
        public IList<LogProcessObject> GetLogProcessCollectionByApplicationFromStarted( Guid application, DateTime started )
        {
            throw new NotImplementedException( );
        }
        public IList<LogProcessObject> GetLogProcessCollectionByApplicationUntilStarted( Guid application, DateTime started )
        {
            throw new NotImplementedException( );
        }
        public IList<LogProcessObject> GetLogProcessCollectionByApplicationOverStarted( Guid application, DateTime fromStarted, DateTime untilStarted )
        {
            throw new NotImplementedException( );
        }
        public SimpleLogProcessDataReader GetLogProcessCollectionByHostDataReader( Guid host )
        {
            const string sql = SimpleLogProcessDataReader.BaseQuery + " WHERE " +
                    SimpleLogProcessDataReader.ViewAliasName + ".[Host] = @host " +
                    " ORDER BY " + SimpleLogProcessDataReader.ViewAliasName + ".[Host]," +SimpleLogProcessDataReader.ViewAliasName + ".[Started]," +SimpleLogProcessDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var hostParameter = sqlCommandParameters.AddReference( "@host", host );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleLogProcessDataReader = new SimpleLogProcessDataReader( _loggerFactory, sqlDataReader );
                return simpleLogProcessDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<LogProcessObject> GetLogProcessCollectionByHost( Guid host )
        {
            throw new NotImplementedException( );
        }
        public SimpleLogProcessDataReader GetLogProcessCollectionByHostAndStartedDataReader( Guid host, DateTime started )
        {
            const string sql = SimpleLogProcessDataReader.BaseQuery + " WHERE " +
                    SimpleLogProcessDataReader.ViewAliasName + ".[Host] = @host AND " +
                    SimpleLogProcessDataReader.ViewAliasName + ".[Started] = @started " +
                    " ORDER BY " + SimpleLogProcessDataReader.ViewAliasName + ".[Host]," +SimpleLogProcessDataReader.ViewAliasName + ".[Started]," +SimpleLogProcessDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var hostParameter = sqlCommandParameters.AddReference( "@host", host );
                var startedParameter = sqlCommandParameters.AddDateTimeAsInt64( "@started", started );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleLogProcessDataReader = new SimpleLogProcessDataReader( _loggerFactory, sqlDataReader );
                return simpleLogProcessDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<LogProcessObject> GetLogProcessCollectionByHostAndStarted( Guid host, DateTime started )
        {
            throw new NotImplementedException( );
        }
        public IList<LogProcessObject> GetLogProcessCollectionByHostAtStarted( Guid host, DateTime started )
        {
            throw new NotImplementedException( );
        }
        public IList<LogProcessObject> GetLogProcessCollectionByHostFromStarted( Guid host, DateTime started )
        {
            throw new NotImplementedException( );
        }
        public IList<LogProcessObject> GetLogProcessCollectionByHostUntilStarted( Guid host, DateTime started )
        {
            throw new NotImplementedException( );
        }
        public IList<LogProcessObject> GetLogProcessCollectionByHostOverStarted( Guid host, DateTime fromStarted, DateTime untilStarted )
        {
            throw new NotImplementedException( );
        }
        public SimpleLogProcessDataReader GetLogProcessCollectionByStartedDataReader( DateTime started )
        {
            const string sql = SimpleLogProcessDataReader.BaseQuery + " WHERE " +
                    SimpleLogProcessDataReader.ViewAliasName + ".[Started] = @started " +
                    " ORDER BY " + SimpleLogProcessDataReader.ViewAliasName + ".[Started]," +SimpleLogProcessDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var startedParameter = sqlCommandParameters.AddDateTimeAsInt64( "@started", started );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleLogProcessDataReader = new SimpleLogProcessDataReader( _loggerFactory, sqlDataReader );
                return simpleLogProcessDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<LogProcessObject> GetLogProcessCollectionByStarted( DateTime started )
        {
            throw new NotImplementedException( );
        }
        public IList<LogProcessObject> GetLogProcessCollectionAtStarted( DateTime started )
        {
            throw new NotImplementedException( );
        }
        public IList<LogProcessObject> GetLogProcessCollectionFromStarted( DateTime started )
        {
            throw new NotImplementedException( );
        }
        public IList<LogProcessObject> GetLogProcessCollectionUntilStarted( DateTime started )
        {
            throw new NotImplementedException( );
        }
        public IList<LogProcessObject> GetLogProcessCollectionOverStarted( DateTime fromStarted, DateTime untilStarted )
        {
            throw new NotImplementedException( );
        }
        // ---------------------------------------------------------------------
        // LogRecord queries
        // ---------------------------------------------------------------------
        public SimpleLogRecordDataReader GetLogRecordByIdDataReader( Guid id )
        {
            const string sql = SimpleLogRecordDataReader.BaseQuery + "WHERE " + SimpleLogRecordDataReader.ViewAliasName + ".[Id] = @id"; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                sqlCommandParameters.AddGuid( "@id", id );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleLogRecordDataReader = new SimpleLogRecordDataReader( _loggerFactory, sqlDataReader );
                return simpleLogRecordDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public LogRecordObject? GetLogRecordById( Guid id )
        {
            var simpleLogRecordDataReader = GetLogRecordByIdDataReader( id );
            using ( simpleLogRecordDataReader )
            {
                if ( simpleLogRecordDataReader.Read( ) )
                {
                    var result = simpleLogRecordDataReader.GetDataObject( );
                    return result;
                }
            }
            return null;
        }

        public void GetLogRecordById( Guid id, Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleLogRecordDataReader = GetLogRecordByIdDataReader( id );
                using ( simpleLogRecordDataReader )
                {
                    if ( simpleLogRecordDataReader.Read( ) )
                    {
                        destinationWriter.Write( true );
                        simpleLogRecordDataReader.WriteTo( destinationWriter );
                    }
                    else
                    {
                        destinationWriter.Write( false );
                    }
                }
            }
        }

        public SimpleLogRecordDataReader GetLogRecordCollectionDataReader( )
        {
            const string sql = SimpleLogRecordDataReader.BaseQuery; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleLogRecordDataReader = new SimpleLogRecordDataReader( _loggerFactory, sqlDataReader );
                return simpleLogRecordDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public IList<LogRecordObject> GetLogRecordCollection( )
        {
            var result = new List<LogRecordObject>( );
            var simpleLogRecordDataReader = GetLogRecordCollectionDataReader( );
            using ( simpleLogRecordDataReader )
            {
                while ( simpleLogRecordDataReader.Read( ) )
                {
                    var data = simpleLogRecordDataReader.GetDataObject( );
                    result.Add( data );
                }
            }
            return result;
        }

        public void GetLogRecordCollection( Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleLogRecordDataReader = GetLogRecordCollectionDataReader( );
                using ( simpleLogRecordDataReader )
                {
                    simpleLogRecordDataReader.WriteResultSetTo( destinationWriter );
                }
            }
        }

        public SimpleLogRecordDataReader GetLogRecordCollectionByThreadDataReader( Guid thread )
        {
            const string sql = SimpleLogRecordDataReader.BaseQuery + " WHERE " +
                    SimpleLogRecordDataReader.ViewAliasName + ".[Thread] = @thread " +
                    " ORDER BY " + SimpleLogRecordDataReader.ViewAliasName + ".[Thread]," +SimpleLogRecordDataReader.ViewAliasName + ".[Timestamp]," +SimpleLogRecordDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var threadParameter = sqlCommandParameters.AddReference( "@thread", thread );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleLogRecordDataReader = new SimpleLogRecordDataReader( _loggerFactory, sqlDataReader );
                return simpleLogRecordDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<LogRecordObject> GetLogRecordCollectionByThread( Guid thread )
        {
            throw new NotImplementedException( );
        }
        public SimpleLogRecordDataReader GetLogRecordCollectionByThreadAndTimestampDataReader( Guid thread, DateTime timestamp )
        {
            const string sql = SimpleLogRecordDataReader.BaseQuery + " WHERE " +
                    SimpleLogRecordDataReader.ViewAliasName + ".[Thread] = @thread AND " +
                    SimpleLogRecordDataReader.ViewAliasName + ".[Timestamp] = @timestamp " +
                    " ORDER BY " + SimpleLogRecordDataReader.ViewAliasName + ".[Thread]," +SimpleLogRecordDataReader.ViewAliasName + ".[Timestamp]," +SimpleLogRecordDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var threadParameter = sqlCommandParameters.AddReference( "@thread", thread );
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@timestamp", timestamp );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleLogRecordDataReader = new SimpleLogRecordDataReader( _loggerFactory, sqlDataReader );
                return simpleLogRecordDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<LogRecordObject> GetLogRecordCollectionByThreadAndTimestamp( Guid thread, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<LogRecordObject> GetLogRecordCollectionByThreadAtTimestamp( Guid thread, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<LogRecordObject> GetLogRecordCollectionByThreadFromTimestamp( Guid thread, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<LogRecordObject> GetLogRecordCollectionByThreadUntilTimestamp( Guid thread, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<LogRecordObject> GetLogRecordCollectionByThreadOverTimestamp( Guid thread, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException( );
        }
        public SimpleLogRecordDataReader GetLogRecordCollectionByTimestampDataReader( DateTime timestamp )
        {
            const string sql = SimpleLogRecordDataReader.BaseQuery + " WHERE " +
                    SimpleLogRecordDataReader.ViewAliasName + ".[Timestamp] = @timestamp " +
                    " ORDER BY " + SimpleLogRecordDataReader.ViewAliasName + ".[Timestamp]," +SimpleLogRecordDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@timestamp", timestamp );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleLogRecordDataReader = new SimpleLogRecordDataReader( _loggerFactory, sqlDataReader );
                return simpleLogRecordDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<LogRecordObject> GetLogRecordCollectionByTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<LogRecordObject> GetLogRecordCollectionAtTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<LogRecordObject> GetLogRecordCollectionFromTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<LogRecordObject> GetLogRecordCollectionUntilTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<LogRecordObject> GetLogRecordCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException( );
        }
        public SimpleLogRecordDataReader GetLogRecordCollectionByLocationDataReader( Guid location )
        {
            const string sql = SimpleLogRecordDataReader.BaseQuery + " WHERE " +
                    SimpleLogRecordDataReader.ViewAliasName + ".[Location] = @location " +
                    " ORDER BY " + SimpleLogRecordDataReader.ViewAliasName + ".[Location]," +SimpleLogRecordDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var locationParameter = sqlCommandParameters.AddReference( "@location", location );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleLogRecordDataReader = new SimpleLogRecordDataReader( _loggerFactory, sqlDataReader );
                return simpleLogRecordDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<LogRecordObject> GetLogRecordCollectionByLocation( Guid location )
        {
            throw new NotImplementedException( );
        }
        // ---------------------------------------------------------------------
        // LogThread queries
        // ---------------------------------------------------------------------
        public SimpleLogThreadDataReader GetLogThreadByIdDataReader( Guid id )
        {
            const string sql = SimpleLogThreadDataReader.BaseQuery + "WHERE " + SimpleLogThreadDataReader.ViewAliasName + ".[Id] = @id"; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                sqlCommandParameters.AddGuid( "@id", id );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleLogThreadDataReader = new SimpleLogThreadDataReader( _loggerFactory, sqlDataReader );
                return simpleLogThreadDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public LogThreadObject? GetLogThreadById( Guid id )
        {
            var simpleLogThreadDataReader = GetLogThreadByIdDataReader( id );
            using ( simpleLogThreadDataReader )
            {
                if ( simpleLogThreadDataReader.Read( ) )
                {
                    var result = simpleLogThreadDataReader.GetDataObject( );
                    return result;
                }
            }
            return null;
        }

        public void GetLogThreadById( Guid id, Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleLogThreadDataReader = GetLogThreadByIdDataReader( id );
                using ( simpleLogThreadDataReader )
                {
                    if ( simpleLogThreadDataReader.Read( ) )
                    {
                        destinationWriter.Write( true );
                        simpleLogThreadDataReader.WriteTo( destinationWriter );
                    }
                    else
                    {
                        destinationWriter.Write( false );
                    }
                }
            }
        }

        public SimpleLogThreadDataReader GetLogThreadCollectionDataReader( )
        {
            const string sql = SimpleLogThreadDataReader.BaseQuery; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleLogThreadDataReader = new SimpleLogThreadDataReader( _loggerFactory, sqlDataReader );
                return simpleLogThreadDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public IList<LogThreadObject> GetLogThreadCollection( )
        {
            var result = new List<LogThreadObject>( );
            var simpleLogThreadDataReader = GetLogThreadCollectionDataReader( );
            using ( simpleLogThreadDataReader )
            {
                while ( simpleLogThreadDataReader.Read( ) )
                {
                    var data = simpleLogThreadDataReader.GetDataObject( );
                    result.Add( data );
                }
            }
            return result;
        }

        public void GetLogThreadCollection( Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleLogThreadDataReader = GetLogThreadCollectionDataReader( );
                using ( simpleLogThreadDataReader )
                {
                    simpleLogThreadDataReader.WriteResultSetTo( destinationWriter );
                }
            }
        }

        public SimpleLogThreadDataReader GetLogThreadCollectionByProcessDataReader( Guid process )
        {
            const string sql = SimpleLogThreadDataReader.BaseQuery + " WHERE " +
                    SimpleLogThreadDataReader.ViewAliasName + ".[Process] = @process " +
                    " ORDER BY " + SimpleLogThreadDataReader.ViewAliasName + ".[Process]," +SimpleLogThreadDataReader.ViewAliasName + ".[Started]," +SimpleLogThreadDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var processParameter = sqlCommandParameters.AddReference( "@process", process );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleLogThreadDataReader = new SimpleLogThreadDataReader( _loggerFactory, sqlDataReader );
                return simpleLogThreadDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<LogThreadObject> GetLogThreadCollectionByProcess( Guid process )
        {
            throw new NotImplementedException( );
        }
        public SimpleLogThreadDataReader GetLogThreadCollectionByProcessAndStartedDataReader( Guid process, DateTime started )
        {
            const string sql = SimpleLogThreadDataReader.BaseQuery + " WHERE " +
                    SimpleLogThreadDataReader.ViewAliasName + ".[Process] = @process AND " +
                    SimpleLogThreadDataReader.ViewAliasName + ".[Started] = @started " +
                    " ORDER BY " + SimpleLogThreadDataReader.ViewAliasName + ".[Process]," +SimpleLogThreadDataReader.ViewAliasName + ".[Started]," +SimpleLogThreadDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var processParameter = sqlCommandParameters.AddReference( "@process", process );
                var startedParameter = sqlCommandParameters.AddDateTimeAsInt64( "@started", started );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleLogThreadDataReader = new SimpleLogThreadDataReader( _loggerFactory, sqlDataReader );
                return simpleLogThreadDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<LogThreadObject> GetLogThreadCollectionByProcessAndStarted( Guid process, DateTime started )
        {
            throw new NotImplementedException( );
        }
        public IList<LogThreadObject> GetLogThreadCollectionByProcessAtStarted( Guid process, DateTime started )
        {
            throw new NotImplementedException( );
        }
        public IList<LogThreadObject> GetLogThreadCollectionByProcessFromStarted( Guid process, DateTime started )
        {
            throw new NotImplementedException( );
        }
        public IList<LogThreadObject> GetLogThreadCollectionByProcessUntilStarted( Guid process, DateTime started )
        {
            throw new NotImplementedException( );
        }
        public IList<LogThreadObject> GetLogThreadCollectionByProcessOverStarted( Guid process, DateTime fromStarted, DateTime untilStarted )
        {
            throw new NotImplementedException( );
        }
        public SimpleLogThreadDataReader GetLogThreadCollectionByStartedDataReader( DateTime started )
        {
            const string sql = SimpleLogThreadDataReader.BaseQuery + " WHERE " +
                    SimpleLogThreadDataReader.ViewAliasName + ".[Started] = @started " +
                    " ORDER BY " + SimpleLogThreadDataReader.ViewAliasName + ".[Started]," +SimpleLogThreadDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var startedParameter = sqlCommandParameters.AddDateTimeAsInt64( "@started", started );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleLogThreadDataReader = new SimpleLogThreadDataReader( _loggerFactory, sqlDataReader );
                return simpleLogThreadDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<LogThreadObject> GetLogThreadCollectionByStarted( DateTime started )
        {
            throw new NotImplementedException( );
        }
        public IList<LogThreadObject> GetLogThreadCollectionAtStarted( DateTime started )
        {
            throw new NotImplementedException( );
        }
        public IList<LogThreadObject> GetLogThreadCollectionFromStarted( DateTime started )
        {
            throw new NotImplementedException( );
        }
        public IList<LogThreadObject> GetLogThreadCollectionUntilStarted( DateTime started )
        {
            throw new NotImplementedException( );
        }
        public IList<LogThreadObject> GetLogThreadCollectionOverStarted( DateTime fromStarted, DateTime untilStarted )
        {
            throw new NotImplementedException( );
        }
        // ---------------------------------------------------------------------
        // LogTraceEntry queries
        // ---------------------------------------------------------------------
        public SimpleLogTraceEntryDataReader GetLogTraceEntryByIdDataReader( Guid id )
        {
            const string sql = SimpleLogTraceEntryDataReader.BaseQuery + "WHERE " + SimpleLogTraceEntryDataReader.ViewAliasName + ".[Id] = @id"; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                sqlCommandParameters.AddGuid( "@id", id );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleLogTraceEntryDataReader = new SimpleLogTraceEntryDataReader( _loggerFactory, sqlDataReader );
                return simpleLogTraceEntryDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public LogTraceEntryObject? GetLogTraceEntryById( Guid id )
        {
            var simpleLogTraceEntryDataReader = GetLogTraceEntryByIdDataReader( id );
            using ( simpleLogTraceEntryDataReader )
            {
                if ( simpleLogTraceEntryDataReader.Read( ) )
                {
                    var result = simpleLogTraceEntryDataReader.GetDataObject( );
                    return result;
                }
            }
            return null;
        }

        public void GetLogTraceEntryById( Guid id, Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleLogTraceEntryDataReader = GetLogTraceEntryByIdDataReader( id );
                using ( simpleLogTraceEntryDataReader )
                {
                    if ( simpleLogTraceEntryDataReader.Read( ) )
                    {
                        destinationWriter.Write( true );
                        simpleLogTraceEntryDataReader.WriteTo( destinationWriter );
                    }
                    else
                    {
                        destinationWriter.Write( false );
                    }
                }
            }
        }

        public SimpleLogTraceEntryDataReader GetLogTraceEntryCollectionDataReader( )
        {
            const string sql = SimpleLogTraceEntryDataReader.BaseQuery; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleLogTraceEntryDataReader = new SimpleLogTraceEntryDataReader( _loggerFactory, sqlDataReader );
                return simpleLogTraceEntryDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public IList<LogTraceEntryObject> GetLogTraceEntryCollection( )
        {
            var result = new List<LogTraceEntryObject>( );
            var simpleLogTraceEntryDataReader = GetLogTraceEntryCollectionDataReader( );
            using ( simpleLogTraceEntryDataReader )
            {
                while ( simpleLogTraceEntryDataReader.Read( ) )
                {
                    var data = simpleLogTraceEntryDataReader.GetDataObject( );
                    result.Add( data );
                }
            }
            return result;
        }

        public void GetLogTraceEntryCollection( Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleLogTraceEntryDataReader = GetLogTraceEntryCollectionDataReader( );
                using ( simpleLogTraceEntryDataReader )
                {
                    simpleLogTraceEntryDataReader.WriteResultSetTo( destinationWriter );
                }
            }
        }

        public SimpleLogTraceEntryDataReader GetLogTraceEntryCollectionByThreadDataReader( Guid thread )
        {
            const string sql = SimpleLogTraceEntryDataReader.BaseQuery + " WHERE " +
                    SimpleLogTraceEntryDataReader.ViewAliasName + ".[Thread] = @thread " +
                    " ORDER BY " + SimpleLogTraceEntryDataReader.ViewAliasName + ".[Thread]," +SimpleLogTraceEntryDataReader.ViewAliasName + ".[Entered]," +SimpleLogTraceEntryDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var threadParameter = sqlCommandParameters.AddReference( "@thread", thread );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleLogTraceEntryDataReader = new SimpleLogTraceEntryDataReader( _loggerFactory, sqlDataReader );
                return simpleLogTraceEntryDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<LogTraceEntryObject> GetLogTraceEntryCollectionByThread( Guid thread )
        {
            throw new NotImplementedException( );
        }
        public SimpleLogTraceEntryDataReader GetLogTraceEntryCollectionByThreadAndEnteredDataReader( Guid thread, DateTime entered )
        {
            const string sql = SimpleLogTraceEntryDataReader.BaseQuery + " WHERE " +
                    SimpleLogTraceEntryDataReader.ViewAliasName + ".[Thread] = @thread AND " +
                    SimpleLogTraceEntryDataReader.ViewAliasName + ".[Entered] = @entered " +
                    " ORDER BY " + SimpleLogTraceEntryDataReader.ViewAliasName + ".[Thread]," +SimpleLogTraceEntryDataReader.ViewAliasName + ".[Entered]," +SimpleLogTraceEntryDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var threadParameter = sqlCommandParameters.AddReference( "@thread", thread );
                var enteredParameter = sqlCommandParameters.AddDateTimeAsInt64( "@entered", entered );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleLogTraceEntryDataReader = new SimpleLogTraceEntryDataReader( _loggerFactory, sqlDataReader );
                return simpleLogTraceEntryDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<LogTraceEntryObject> GetLogTraceEntryCollectionByThreadAndEntered( Guid thread, DateTime entered )
        {
            throw new NotImplementedException( );
        }
        public IList<LogTraceEntryObject> GetLogTraceEntryCollectionByThreadAtEntered( Guid thread, DateTime entered )
        {
            throw new NotImplementedException( );
        }
        public IList<LogTraceEntryObject> GetLogTraceEntryCollectionByThreadFromEntered( Guid thread, DateTime entered )
        {
            throw new NotImplementedException( );
        }
        public IList<LogTraceEntryObject> GetLogTraceEntryCollectionByThreadUntilEntered( Guid thread, DateTime entered )
        {
            throw new NotImplementedException( );
        }
        public IList<LogTraceEntryObject> GetLogTraceEntryCollectionByThreadOverEntered( Guid thread, DateTime fromEntered, DateTime untilEntered )
        {
            throw new NotImplementedException( );
        }
        public SimpleLogTraceEntryDataReader GetLogTraceEntryCollectionByLocationDataReader( Guid location )
        {
            const string sql = SimpleLogTraceEntryDataReader.BaseQuery + " WHERE " +
                    SimpleLogTraceEntryDataReader.ViewAliasName + ".[Location] = @location " +
                    " ORDER BY " + SimpleLogTraceEntryDataReader.ViewAliasName + ".[Location]," +SimpleLogTraceEntryDataReader.ViewAliasName + ".[Entered]," +SimpleLogTraceEntryDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var locationParameter = sqlCommandParameters.AddReference( "@location", location );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleLogTraceEntryDataReader = new SimpleLogTraceEntryDataReader( _loggerFactory, sqlDataReader );
                return simpleLogTraceEntryDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<LogTraceEntryObject> GetLogTraceEntryCollectionByLocation( Guid location )
        {
            throw new NotImplementedException( );
        }
        public SimpleLogTraceEntryDataReader GetLogTraceEntryCollectionByLocationAndEnteredDataReader( Guid location, DateTime entered )
        {
            const string sql = SimpleLogTraceEntryDataReader.BaseQuery + " WHERE " +
                    SimpleLogTraceEntryDataReader.ViewAliasName + ".[Location] = @location AND " +
                    SimpleLogTraceEntryDataReader.ViewAliasName + ".[Entered] = @entered " +
                    " ORDER BY " + SimpleLogTraceEntryDataReader.ViewAliasName + ".[Location]," +SimpleLogTraceEntryDataReader.ViewAliasName + ".[Entered]," +SimpleLogTraceEntryDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var locationParameter = sqlCommandParameters.AddReference( "@location", location );
                var enteredParameter = sqlCommandParameters.AddDateTimeAsInt64( "@entered", entered );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleLogTraceEntryDataReader = new SimpleLogTraceEntryDataReader( _loggerFactory, sqlDataReader );
                return simpleLogTraceEntryDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<LogTraceEntryObject> GetLogTraceEntryCollectionByLocationAndEntered( Guid location, DateTime entered )
        {
            throw new NotImplementedException( );
        }
        public IList<LogTraceEntryObject> GetLogTraceEntryCollectionByLocationAtEntered( Guid location, DateTime entered )
        {
            throw new NotImplementedException( );
        }
        public IList<LogTraceEntryObject> GetLogTraceEntryCollectionByLocationFromEntered( Guid location, DateTime entered )
        {
            throw new NotImplementedException( );
        }
        public IList<LogTraceEntryObject> GetLogTraceEntryCollectionByLocationUntilEntered( Guid location, DateTime entered )
        {
            throw new NotImplementedException( );
        }
        public IList<LogTraceEntryObject> GetLogTraceEntryCollectionByLocationOverEntered( Guid location, DateTime fromEntered, DateTime untilEntered )
        {
            throw new NotImplementedException( );
        }
        public SimpleLogTraceEntryDataReader GetLogTraceEntryCollectionByEnteredDataReader( DateTime entered )
        {
            const string sql = SimpleLogTraceEntryDataReader.BaseQuery + " WHERE " +
                    SimpleLogTraceEntryDataReader.ViewAliasName + ".[Entered] = @entered " +
                    " ORDER BY " + SimpleLogTraceEntryDataReader.ViewAliasName + ".[Entered]," +SimpleLogTraceEntryDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var enteredParameter = sqlCommandParameters.AddDateTimeAsInt64( "@entered", entered );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleLogTraceEntryDataReader = new SimpleLogTraceEntryDataReader( _loggerFactory, sqlDataReader );
                return simpleLogTraceEntryDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<LogTraceEntryObject> GetLogTraceEntryCollectionByEntered( DateTime entered )
        {
            throw new NotImplementedException( );
        }
        public IList<LogTraceEntryObject> GetLogTraceEntryCollectionAtEntered( DateTime entered )
        {
            throw new NotImplementedException( );
        }
        public IList<LogTraceEntryObject> GetLogTraceEntryCollectionFromEntered( DateTime entered )
        {
            throw new NotImplementedException( );
        }
        public IList<LogTraceEntryObject> GetLogTraceEntryCollectionUntilEntered( DateTime entered )
        {
            throw new NotImplementedException( );
        }
        public IList<LogTraceEntryObject> GetLogTraceEntryCollectionOverEntered( DateTime fromEntered, DateTime untilEntered )
        {
            throw new NotImplementedException( );
        }
        // ---------------------------------------------------------------------
        // MapElement queries
        // ---------------------------------------------------------------------
        public SimpleMapElementDataReader GetMapElementByIdDataReader( Guid id )
        {
            const string sql = SimpleMapElementDataReader.BaseQuery + "WHERE " + SimpleMapElementDataReader.ViewAliasName + ".[Id] = @id"; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                sqlCommandParameters.AddGuid( "@id", id );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleMapElementDataReader = new SimpleMapElementDataReader( _loggerFactory, sqlDataReader );
                return simpleMapElementDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public MapElementObject? GetMapElementById( Guid id )
        {
            var simpleMapElementDataReader = GetMapElementByIdDataReader( id );
            using ( simpleMapElementDataReader )
            {
                if ( simpleMapElementDataReader.Read( ) )
                {
                    var result = simpleMapElementDataReader.GetDataObject( );
                    return result;
                }
            }
            return null;
        }

        public void GetMapElementById( Guid id, Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleMapElementDataReader = GetMapElementByIdDataReader( id );
                using ( simpleMapElementDataReader )
                {
                    if ( simpleMapElementDataReader.Read( ) )
                    {
                        destinationWriter.Write( true );
                        simpleMapElementDataReader.WriteTo( destinationWriter );
                    }
                    else
                    {
                        destinationWriter.Write( false );
                    }
                }
            }
        }

        public SimpleMapElementDataReader GetMapElementCollectionDataReader( )
        {
            const string sql = SimpleMapElementDataReader.BaseQuery; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleMapElementDataReader = new SimpleMapElementDataReader( _loggerFactory, sqlDataReader );
                return simpleMapElementDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public IList<MapElementObject> GetMapElementCollection( )
        {
            var result = new List<MapElementObject>( );
            var simpleMapElementDataReader = GetMapElementCollectionDataReader( );
            using ( simpleMapElementDataReader )
            {
                while ( simpleMapElementDataReader.Read( ) )
                {
                    var data = simpleMapElementDataReader.GetDataObject( );
                    result.Add( data );
                }
            }
            return result;
        }

        public void GetMapElementCollection( Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleMapElementDataReader = GetMapElementCollectionDataReader( );
                using ( simpleMapElementDataReader )
                {
                    simpleMapElementDataReader.WriteResultSetTo( destinationWriter );
                }
            }
        }

        public SimpleMapElementDataReader GetMapElementCollectionByItemDataReader( Guid item )
        {
            const string sql = SimpleMapElementDataReader.BaseQuery + " WHERE " +
                    SimpleMapElementDataReader.ViewAliasName + ".[Item] = @item " +
                    " ORDER BY " + SimpleMapElementDataReader.ViewAliasName + ".[Item]," +SimpleMapElementDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var itemParameter = sqlCommandParameters.AddReference( "@item", item );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleMapElementDataReader = new SimpleMapElementDataReader( _loggerFactory, sqlDataReader );
                return simpleMapElementDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<MapElementObject> GetMapElementCollectionByItem( Guid item )
        {
            throw new NotImplementedException( );
        }
        // ---------------------------------------------------------------------
        // MapInfo queries
        // ---------------------------------------------------------------------
        public SimpleMapInfoDataReader GetMapInfoByIdDataReader( Guid id )
        {
            const string sql = SimpleMapInfoDataReader.BaseQuery + "WHERE " + SimpleMapInfoDataReader.ViewAliasName + ".[Id] = @id"; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                sqlCommandParameters.AddGuid( "@id", id );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleMapInfoDataReader = new SimpleMapInfoDataReader( _loggerFactory, sqlDataReader );
                return simpleMapInfoDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public MapInfoObject? GetMapInfoById( Guid id )
        {
            var simpleMapInfoDataReader = GetMapInfoByIdDataReader( id );
            using ( simpleMapInfoDataReader )
            {
                if ( simpleMapInfoDataReader.Read( ) )
                {
                    var result = simpleMapInfoDataReader.GetDataObject( );
                    return result;
                }
            }
            return null;
        }

        public void GetMapInfoById( Guid id, Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleMapInfoDataReader = GetMapInfoByIdDataReader( id );
                using ( simpleMapInfoDataReader )
                {
                    if ( simpleMapInfoDataReader.Read( ) )
                    {
                        destinationWriter.Write( true );
                        simpleMapInfoDataReader.WriteTo( destinationWriter );
                    }
                    else
                    {
                        destinationWriter.Write( false );
                    }
                }
            }
        }

        public SimpleMapInfoDataReader GetMapInfoCollectionDataReader( )
        {
            const string sql = SimpleMapInfoDataReader.BaseQuery; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleMapInfoDataReader = new SimpleMapInfoDataReader( _loggerFactory, sqlDataReader );
                return simpleMapInfoDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public IList<MapInfoObject> GetMapInfoCollection( )
        {
            var result = new List<MapInfoObject>( );
            var simpleMapInfoDataReader = GetMapInfoCollectionDataReader( );
            using ( simpleMapInfoDataReader )
            {
                while ( simpleMapInfoDataReader.Read( ) )
                {
                    var data = simpleMapInfoDataReader.GetDataObject( );
                    result.Add( data );
                }
            }
            return result;
        }

        public void GetMapInfoCollection( Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleMapInfoDataReader = GetMapInfoCollectionDataReader( );
                using ( simpleMapInfoDataReader )
                {
                    simpleMapInfoDataReader.WriteResultSetTo( destinationWriter );
                }
            }
        }

        // ---------------------------------------------------------------------
        // MapServiceOptions queries
        // ---------------------------------------------------------------------
        public SimpleMapServiceOptionsDataReader GetMapServiceOptionsByIdDataReader( Guid id )
        {
            const string sql = SimpleMapServiceOptionsDataReader.BaseQuery + "WHERE " + SimpleMapServiceOptionsDataReader.ViewAliasName + ".[Id] = @id"; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                sqlCommandParameters.AddGuid( "@id", id );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleMapServiceOptionsDataReader = new SimpleMapServiceOptionsDataReader( _loggerFactory, sqlDataReader );
                return simpleMapServiceOptionsDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public MapServiceOptionsObject? GetMapServiceOptionsById( Guid id )
        {
            var simpleMapServiceOptionsDataReader = GetMapServiceOptionsByIdDataReader( id );
            using ( simpleMapServiceOptionsDataReader )
            {
                if ( simpleMapServiceOptionsDataReader.Read( ) )
                {
                    var result = simpleMapServiceOptionsDataReader.GetDataObject( );
                    return result;
                }
            }
            return null;
        }

        public void GetMapServiceOptionsById( Guid id, Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleMapServiceOptionsDataReader = GetMapServiceOptionsByIdDataReader( id );
                using ( simpleMapServiceOptionsDataReader )
                {
                    if ( simpleMapServiceOptionsDataReader.Read( ) )
                    {
                        destinationWriter.Write( true );
                        simpleMapServiceOptionsDataReader.WriteTo( destinationWriter );
                    }
                    else
                    {
                        destinationWriter.Write( false );
                    }
                }
            }
        }

        public SimpleMapServiceOptionsDataReader GetMapServiceOptionsCollectionDataReader( )
        {
            const string sql = SimpleMapServiceOptionsDataReader.BaseQuery; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleMapServiceOptionsDataReader = new SimpleMapServiceOptionsDataReader( _loggerFactory, sqlDataReader );
                return simpleMapServiceOptionsDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public IList<MapServiceOptionsObject> GetMapServiceOptionsCollection( )
        {
            var result = new List<MapServiceOptionsObject>( );
            var simpleMapServiceOptionsDataReader = GetMapServiceOptionsCollectionDataReader( );
            using ( simpleMapServiceOptionsDataReader )
            {
                while ( simpleMapServiceOptionsDataReader.Read( ) )
                {
                    var data = simpleMapServiceOptionsDataReader.GetDataObject( );
                    result.Add( data );
                }
            }
            return result;
        }

        public void GetMapServiceOptionsCollection( Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleMapServiceOptionsDataReader = GetMapServiceOptionsCollectionDataReader( );
                using ( simpleMapServiceOptionsDataReader )
                {
                    simpleMapServiceOptionsDataReader.WriteResultSetTo( destinationWriter );
                }
            }
        }

        public SimpleMapServiceOptionsDataReader GetMapServiceOptionsByTimestampDataReader( DateTime timestamp )
        {
            const string sql = SimpleMapServiceOptionsDataReader.BaseQuery + " WHERE " +
                    SimpleMapServiceOptionsDataReader.ViewAliasName + ".[Timestamp] = @timestamp " +
                    " ORDER BY " + SimpleMapServiceOptionsDataReader.ViewAliasName + ".[Timestamp]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@timestamp", timestamp );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleMapServiceOptionsDataReader = new SimpleMapServiceOptionsDataReader( _loggerFactory, sqlDataReader );
                return simpleMapServiceOptionsDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public MapServiceOptionsObject? GetMapServiceOptionsByTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public MapServiceOptionsObject? GetMapServiceOptionsAtTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<MapServiceOptionsObject> GetMapServiceOptionsFromTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<MapServiceOptionsObject> GetMapServiceOptionsUntilTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<MapServiceOptionsObject> GetMapServiceOptionsOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException( );
        }
        // ---------------------------------------------------------------------
        // MaritimeIdentificationDigits queries
        // ---------------------------------------------------------------------
        public SimpleMaritimeIdentificationDigitsDataReader GetMaritimeIdentificationDigitsByIdDataReader( Guid id )
        {
            const string sql = SimpleMaritimeIdentificationDigitsDataReader.BaseQuery + "WHERE " + SimpleMaritimeIdentificationDigitsDataReader.ViewAliasName + ".[Id] = @id"; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                sqlCommandParameters.AddGuid( "@id", id );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleMaritimeIdentificationDigitsDataReader = new SimpleMaritimeIdentificationDigitsDataReader( _loggerFactory, sqlDataReader );
                return simpleMaritimeIdentificationDigitsDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public MaritimeIdentificationDigitsObject? GetMaritimeIdentificationDigitsById( Guid id )
        {
            var simpleMaritimeIdentificationDigitsDataReader = GetMaritimeIdentificationDigitsByIdDataReader( id );
            using ( simpleMaritimeIdentificationDigitsDataReader )
            {
                if ( simpleMaritimeIdentificationDigitsDataReader.Read( ) )
                {
                    var result = simpleMaritimeIdentificationDigitsDataReader.GetDataObject( );
                    return result;
                }
            }
            return null;
        }

        public void GetMaritimeIdentificationDigitsById( Guid id, Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleMaritimeIdentificationDigitsDataReader = GetMaritimeIdentificationDigitsByIdDataReader( id );
                using ( simpleMaritimeIdentificationDigitsDataReader )
                {
                    if ( simpleMaritimeIdentificationDigitsDataReader.Read( ) )
                    {
                        destinationWriter.Write( true );
                        simpleMaritimeIdentificationDigitsDataReader.WriteTo( destinationWriter );
                    }
                    else
                    {
                        destinationWriter.Write( false );
                    }
                }
            }
        }

        public SimpleMaritimeIdentificationDigitsDataReader GetMaritimeIdentificationDigitsCollectionDataReader( )
        {
            const string sql = SimpleMaritimeIdentificationDigitsDataReader.BaseQuery; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleMaritimeIdentificationDigitsDataReader = new SimpleMaritimeIdentificationDigitsDataReader( _loggerFactory, sqlDataReader );
                return simpleMaritimeIdentificationDigitsDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public IList<MaritimeIdentificationDigitsObject> GetMaritimeIdentificationDigitsCollection( )
        {
            var result = new List<MaritimeIdentificationDigitsObject>( );
            var simpleMaritimeIdentificationDigitsDataReader = GetMaritimeIdentificationDigitsCollectionDataReader( );
            using ( simpleMaritimeIdentificationDigitsDataReader )
            {
                while ( simpleMaritimeIdentificationDigitsDataReader.Read( ) )
                {
                    var data = simpleMaritimeIdentificationDigitsDataReader.GetDataObject( );
                    result.Add( data );
                }
            }
            return result;
        }

        public void GetMaritimeIdentificationDigitsCollection( Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleMaritimeIdentificationDigitsDataReader = GetMaritimeIdentificationDigitsCollectionDataReader( );
                using ( simpleMaritimeIdentificationDigitsDataReader )
                {
                    simpleMaritimeIdentificationDigitsDataReader.WriteResultSetTo( destinationWriter );
                }
            }
        }

        public SimpleMaritimeIdentificationDigitsDataReader GetMaritimeIdentificationDigitsByCodeDataReader( int code )
        {
            const string sql = SimpleMaritimeIdentificationDigitsDataReader.BaseQuery + " WHERE " +
                    SimpleMaritimeIdentificationDigitsDataReader.ViewAliasName + ".[Code] = @code " +
                    " ORDER BY " + SimpleMaritimeIdentificationDigitsDataReader.ViewAliasName + ".[Code]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var codeParameter = sqlCommandParameters.AddInt32( "@code", code );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleMaritimeIdentificationDigitsDataReader = new SimpleMaritimeIdentificationDigitsDataReader( _loggerFactory, sqlDataReader );
                return simpleMaritimeIdentificationDigitsDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public MaritimeIdentificationDigitsObject? GetMaritimeIdentificationDigitsByCode( int code )
        {
            throw new NotImplementedException( );
        }
        public IList<MaritimeIdentificationDigitsObject> GetMaritimeIdentificationDigitsFromCode( int code )
        {
            throw new NotImplementedException( );
        }
        public IList<MaritimeIdentificationDigitsObject> GetMaritimeIdentificationDigitsUntilCode( int code )
        {
            throw new NotImplementedException( );
        }
        public IList<MaritimeIdentificationDigitsObject> GetMaritimeIdentificationDigitsOverCode( int fromCode, int untilCode )
        {
            throw new NotImplementedException( );
        }
        public SimpleMaritimeIdentificationDigitsDataReader GetMaritimeIdentificationDigitsCollectionByCountryDataReader( Guid country )
        {
            const string sql = SimpleMaritimeIdentificationDigitsDataReader.BaseQuery + " WHERE " +
                    SimpleMaritimeIdentificationDigitsDataReader.ViewAliasName + ".[Country] = @country " +
                    " ORDER BY " + SimpleMaritimeIdentificationDigitsDataReader.ViewAliasName + ".[Country]," +SimpleMaritimeIdentificationDigitsDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var countryParameter = sqlCommandParameters.AddReference( "@country", country );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleMaritimeIdentificationDigitsDataReader = new SimpleMaritimeIdentificationDigitsDataReader( _loggerFactory, sqlDataReader );
                return simpleMaritimeIdentificationDigitsDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<MaritimeIdentificationDigitsObject> GetMaritimeIdentificationDigitsCollectionByCountry( Guid country )
        {
            throw new NotImplementedException( );
        }
        // ---------------------------------------------------------------------
        // MediaProxySession queries
        // ---------------------------------------------------------------------
        public SimpleMediaProxySessionDataReader GetMediaProxySessionByIdDataReader( Guid id )
        {
            const string sql = SimpleMediaProxySessionDataReader.BaseQuery + "WHERE " + SimpleMediaProxySessionDataReader.ViewAliasName + ".[Id] = @id"; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                sqlCommandParameters.AddGuid( "@id", id );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleMediaProxySessionDataReader = new SimpleMediaProxySessionDataReader( _loggerFactory, sqlDataReader );
                return simpleMediaProxySessionDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public MediaProxySessionObject? GetMediaProxySessionById( Guid id )
        {
            var simpleMediaProxySessionDataReader = GetMediaProxySessionByIdDataReader( id );
            using ( simpleMediaProxySessionDataReader )
            {
                if ( simpleMediaProxySessionDataReader.Read( ) )
                {
                    var result = simpleMediaProxySessionDataReader.GetDataObject( );
                    return result;
                }
            }
            return null;
        }

        public void GetMediaProxySessionById( Guid id, Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleMediaProxySessionDataReader = GetMediaProxySessionByIdDataReader( id );
                using ( simpleMediaProxySessionDataReader )
                {
                    if ( simpleMediaProxySessionDataReader.Read( ) )
                    {
                        destinationWriter.Write( true );
                        simpleMediaProxySessionDataReader.WriteTo( destinationWriter );
                    }
                    else
                    {
                        destinationWriter.Write( false );
                    }
                }
            }
        }

        public SimpleMediaProxySessionDataReader GetMediaProxySessionCollectionDataReader( )
        {
            const string sql = SimpleMediaProxySessionDataReader.BaseQuery; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleMediaProxySessionDataReader = new SimpleMediaProxySessionDataReader( _loggerFactory, sqlDataReader );
                return simpleMediaProxySessionDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public IList<MediaProxySessionObject> GetMediaProxySessionCollection( )
        {
            var result = new List<MediaProxySessionObject>( );
            var simpleMediaProxySessionDataReader = GetMediaProxySessionCollectionDataReader( );
            using ( simpleMediaProxySessionDataReader )
            {
                while ( simpleMediaProxySessionDataReader.Read( ) )
                {
                    var data = simpleMediaProxySessionDataReader.GetDataObject( );
                    result.Add( data );
                }
            }
            return result;
        }

        public void GetMediaProxySessionCollection( Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleMediaProxySessionDataReader = GetMediaProxySessionCollectionDataReader( );
                using ( simpleMediaProxySessionDataReader )
                {
                    simpleMediaProxySessionDataReader.WriteResultSetTo( destinationWriter );
                }
            }
        }

        public SimpleMediaProxySessionDataReader GetMediaProxySessionCollectionByServiceDataReader( Guid service )
        {
            const string sql = SimpleMediaProxySessionDataReader.BaseQuery + " WHERE " +
                    SimpleMediaProxySessionDataReader.ViewAliasName + ".[Service] = @service " +
                    " ORDER BY " + SimpleMediaProxySessionDataReader.ViewAliasName + ".[Service]," +SimpleMediaProxySessionDataReader.ViewAliasName + ".[Name]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var serviceParameter = sqlCommandParameters.AddReference( "@service", service );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleMediaProxySessionDataReader = new SimpleMediaProxySessionDataReader( _loggerFactory, sqlDataReader );
                return simpleMediaProxySessionDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<MediaProxySessionObject> GetMediaProxySessionCollectionByService( Guid service )
        {
            throw new NotImplementedException( );
        }
        public SimpleMediaProxySessionDataReader GetMediaProxySessionByServiceAndNameDataReader( Guid service, string name )
        {
            const string sql = SimpleMediaProxySessionDataReader.BaseQuery + " WHERE " +
                    SimpleMediaProxySessionDataReader.ViewAliasName + ".[Service] = @service AND " +
                    SimpleMediaProxySessionDataReader.ViewAliasName + ".[Name] = @name " +
                    " ORDER BY " + SimpleMediaProxySessionDataReader.ViewAliasName + ".[Service]," +SimpleMediaProxySessionDataReader.ViewAliasName + ".[Name]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var serviceParameter = sqlCommandParameters.AddReference( "@service", service );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@name", name, 128 );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleMediaProxySessionDataReader = new SimpleMediaProxySessionDataReader( _loggerFactory, sqlDataReader );
                return simpleMediaProxySessionDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public MediaProxySessionObject? GetMediaProxySessionByServiceAndName( Guid service, string name )
        {
            throw new NotImplementedException( );
        }
        // ---------------------------------------------------------------------
        // MediaProxySessionFile queries
        // ---------------------------------------------------------------------
        public SimpleMediaProxySessionFileDataReader GetMediaProxySessionFileByIdDataReader( Guid id )
        {
            const string sql = SimpleMediaProxySessionFileDataReader.BaseQuery + "WHERE " + SimpleMediaProxySessionFileDataReader.ViewAliasName + ".[Id] = @id"; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                sqlCommandParameters.AddGuid( "@id", id );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleMediaProxySessionFileDataReader = new SimpleMediaProxySessionFileDataReader( _loggerFactory, sqlDataReader );
                return simpleMediaProxySessionFileDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public MediaProxySessionFileObject? GetMediaProxySessionFileById( Guid id )
        {
            var simpleMediaProxySessionFileDataReader = GetMediaProxySessionFileByIdDataReader( id );
            using ( simpleMediaProxySessionFileDataReader )
            {
                if ( simpleMediaProxySessionFileDataReader.Read( ) )
                {
                    var result = simpleMediaProxySessionFileDataReader.GetDataObject( );
                    return result;
                }
            }
            return null;
        }

        public void GetMediaProxySessionFileById( Guid id, Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleMediaProxySessionFileDataReader = GetMediaProxySessionFileByIdDataReader( id );
                using ( simpleMediaProxySessionFileDataReader )
                {
                    if ( simpleMediaProxySessionFileDataReader.Read( ) )
                    {
                        destinationWriter.Write( true );
                        simpleMediaProxySessionFileDataReader.WriteTo( destinationWriter );
                    }
                    else
                    {
                        destinationWriter.Write( false );
                    }
                }
            }
        }

        public SimpleMediaProxySessionFileDataReader GetMediaProxySessionFileCollectionDataReader( )
        {
            const string sql = SimpleMediaProxySessionFileDataReader.BaseQuery; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleMediaProxySessionFileDataReader = new SimpleMediaProxySessionFileDataReader( _loggerFactory, sqlDataReader );
                return simpleMediaProxySessionFileDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public IList<MediaProxySessionFileObject> GetMediaProxySessionFileCollection( )
        {
            var result = new List<MediaProxySessionFileObject>( );
            var simpleMediaProxySessionFileDataReader = GetMediaProxySessionFileCollectionDataReader( );
            using ( simpleMediaProxySessionFileDataReader )
            {
                while ( simpleMediaProxySessionFileDataReader.Read( ) )
                {
                    var data = simpleMediaProxySessionFileDataReader.GetDataObject( );
                    result.Add( data );
                }
            }
            return result;
        }

        public void GetMediaProxySessionFileCollection( Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleMediaProxySessionFileDataReader = GetMediaProxySessionFileCollectionDataReader( );
                using ( simpleMediaProxySessionFileDataReader )
                {
                    simpleMediaProxySessionFileDataReader.WriteResultSetTo( destinationWriter );
                }
            }
        }

        public SimpleMediaProxySessionFileDataReader GetMediaProxySessionFileCollectionByProxySessionDataReader( Guid proxySession )
        {
            const string sql = SimpleMediaProxySessionFileDataReader.BaseQuery + " WHERE " +
                    SimpleMediaProxySessionFileDataReader.ViewAliasName + ".[ProxySession] = @proxySession " +
                    " ORDER BY " + SimpleMediaProxySessionFileDataReader.ViewAliasName + ".[ProxySession]," +SimpleMediaProxySessionFileDataReader.ViewAliasName + ".[Timestamp]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var proxySessionParameter = sqlCommandParameters.AddReference( "@proxySession", proxySession );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleMediaProxySessionFileDataReader = new SimpleMediaProxySessionFileDataReader( _loggerFactory, sqlDataReader );
                return simpleMediaProxySessionFileDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<MediaProxySessionFileObject> GetMediaProxySessionFileCollectionByProxySession( Guid proxySession )
        {
            throw new NotImplementedException( );
        }
        public SimpleMediaProxySessionFileDataReader GetMediaProxySessionFileByProxySessionAndTimestampDataReader( Guid proxySession, DateTime timestamp )
        {
            const string sql = SimpleMediaProxySessionFileDataReader.BaseQuery + " WHERE " +
                    SimpleMediaProxySessionFileDataReader.ViewAliasName + ".[ProxySession] = @proxySession AND " +
                    SimpleMediaProxySessionFileDataReader.ViewAliasName + ".[Timestamp] = @timestamp " +
                    " ORDER BY " + SimpleMediaProxySessionFileDataReader.ViewAliasName + ".[ProxySession]," +SimpleMediaProxySessionFileDataReader.ViewAliasName + ".[Timestamp]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var proxySessionParameter = sqlCommandParameters.AddReference( "@proxySession", proxySession );
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@timestamp", timestamp );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleMediaProxySessionFileDataReader = new SimpleMediaProxySessionFileDataReader( _loggerFactory, sqlDataReader );
                return simpleMediaProxySessionFileDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public MediaProxySessionFileObject? GetMediaProxySessionFileByProxySessionAndTimestamp( Guid proxySession, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public MediaProxySessionFileObject? GetMediaProxySessionFileByProxySessionAtTimestamp( Guid proxySession, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<MediaProxySessionFileObject> GetMediaProxySessionFileByProxySessionFromTimestamp( Guid proxySession, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<MediaProxySessionFileObject> GetMediaProxySessionFileByProxySessionUntilTimestamp( Guid proxySession, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<MediaProxySessionFileObject> GetMediaProxySessionFileByProxySessionOverTimestamp( Guid proxySession, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException( );
        }
        // ---------------------------------------------------------------------
        // MediaProxySessionOptions queries
        // ---------------------------------------------------------------------
        public SimpleMediaProxySessionOptionsDataReader GetMediaProxySessionOptionsByIdDataReader( Guid id )
        {
            const string sql = SimpleMediaProxySessionOptionsDataReader.BaseQuery + "WHERE " + SimpleMediaProxySessionOptionsDataReader.ViewAliasName + ".[Id] = @id"; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                sqlCommandParameters.AddGuid( "@id", id );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleMediaProxySessionOptionsDataReader = new SimpleMediaProxySessionOptionsDataReader( _loggerFactory, sqlDataReader );
                return simpleMediaProxySessionOptionsDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public MediaProxySessionOptionsObject? GetMediaProxySessionOptionsById( Guid id )
        {
            var simpleMediaProxySessionOptionsDataReader = GetMediaProxySessionOptionsByIdDataReader( id );
            using ( simpleMediaProxySessionOptionsDataReader )
            {
                if ( simpleMediaProxySessionOptionsDataReader.Read( ) )
                {
                    var result = simpleMediaProxySessionOptionsDataReader.GetDataObject( );
                    return result;
                }
            }
            return null;
        }

        public void GetMediaProxySessionOptionsById( Guid id, Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleMediaProxySessionOptionsDataReader = GetMediaProxySessionOptionsByIdDataReader( id );
                using ( simpleMediaProxySessionOptionsDataReader )
                {
                    if ( simpleMediaProxySessionOptionsDataReader.Read( ) )
                    {
                        destinationWriter.Write( true );
                        simpleMediaProxySessionOptionsDataReader.WriteTo( destinationWriter );
                    }
                    else
                    {
                        destinationWriter.Write( false );
                    }
                }
            }
        }

        public SimpleMediaProxySessionOptionsDataReader GetMediaProxySessionOptionsCollectionDataReader( )
        {
            const string sql = SimpleMediaProxySessionOptionsDataReader.BaseQuery; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleMediaProxySessionOptionsDataReader = new SimpleMediaProxySessionOptionsDataReader( _loggerFactory, sqlDataReader );
                return simpleMediaProxySessionOptionsDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public IList<MediaProxySessionOptionsObject> GetMediaProxySessionOptionsCollection( )
        {
            var result = new List<MediaProxySessionOptionsObject>( );
            var simpleMediaProxySessionOptionsDataReader = GetMediaProxySessionOptionsCollectionDataReader( );
            using ( simpleMediaProxySessionOptionsDataReader )
            {
                while ( simpleMediaProxySessionOptionsDataReader.Read( ) )
                {
                    var data = simpleMediaProxySessionOptionsDataReader.GetDataObject( );
                    result.Add( data );
                }
            }
            return result;
        }

        public void GetMediaProxySessionOptionsCollection( Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleMediaProxySessionOptionsDataReader = GetMediaProxySessionOptionsCollectionDataReader( );
                using ( simpleMediaProxySessionOptionsDataReader )
                {
                    simpleMediaProxySessionOptionsDataReader.WriteResultSetTo( destinationWriter );
                }
            }
        }

        public SimpleMediaProxySessionOptionsDataReader GetMediaProxySessionOptionsCollectionByProxySessionDataReader( Guid proxySession )
        {
            const string sql = SimpleMediaProxySessionOptionsDataReader.BaseQuery + " WHERE " +
                    SimpleMediaProxySessionOptionsDataReader.ViewAliasName + ".[ProxySession] = @proxySession " +
                    " ORDER BY " + SimpleMediaProxySessionOptionsDataReader.ViewAliasName + ".[ProxySession]," +SimpleMediaProxySessionOptionsDataReader.ViewAliasName + ".[Timestamp]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var proxySessionParameter = sqlCommandParameters.AddReference( "@proxySession", proxySession );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleMediaProxySessionOptionsDataReader = new SimpleMediaProxySessionOptionsDataReader( _loggerFactory, sqlDataReader );
                return simpleMediaProxySessionOptionsDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<MediaProxySessionOptionsObject> GetMediaProxySessionOptionsCollectionByProxySession( Guid proxySession )
        {
            throw new NotImplementedException( );
        }
        public SimpleMediaProxySessionOptionsDataReader GetMediaProxySessionOptionsByProxySessionAndTimestampDataReader( Guid proxySession, DateTime timestamp )
        {
            const string sql = SimpleMediaProxySessionOptionsDataReader.BaseQuery + " WHERE " +
                    SimpleMediaProxySessionOptionsDataReader.ViewAliasName + ".[ProxySession] = @proxySession AND " +
                    SimpleMediaProxySessionOptionsDataReader.ViewAliasName + ".[Timestamp] = @timestamp " +
                    " ORDER BY " + SimpleMediaProxySessionOptionsDataReader.ViewAliasName + ".[ProxySession]," +SimpleMediaProxySessionOptionsDataReader.ViewAliasName + ".[Timestamp]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var proxySessionParameter = sqlCommandParameters.AddReference( "@proxySession", proxySession );
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@timestamp", timestamp );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleMediaProxySessionOptionsDataReader = new SimpleMediaProxySessionOptionsDataReader( _loggerFactory, sqlDataReader );
                return simpleMediaProxySessionOptionsDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public MediaProxySessionOptionsObject? GetMediaProxySessionOptionsByProxySessionAndTimestamp( Guid proxySession, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public MediaProxySessionOptionsObject? GetMediaProxySessionOptionsByProxySessionAtTimestamp( Guid proxySession, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<MediaProxySessionOptionsObject> GetMediaProxySessionOptionsByProxySessionFromTimestamp( Guid proxySession, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<MediaProxySessionOptionsObject> GetMediaProxySessionOptionsByProxySessionUntilTimestamp( Guid proxySession, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<MediaProxySessionOptionsObject> GetMediaProxySessionOptionsByProxySessionOverTimestamp( Guid proxySession, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException( );
        }
        // ---------------------------------------------------------------------
        // MediaService queries
        // ---------------------------------------------------------------------
        public SimpleMediaServiceDataReader GetMediaServiceByIdDataReader( Guid id )
        {
            const string sql = SimpleMediaServiceDataReader.BaseQuery + "WHERE " + SimpleMediaServiceDataReader.ViewAliasName + ".[Id] = @id"; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                sqlCommandParameters.AddGuid( "@id", id );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleMediaServiceDataReader = new SimpleMediaServiceDataReader( _loggerFactory, sqlDataReader );
                return simpleMediaServiceDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public MediaServiceObject? GetMediaServiceById( Guid id )
        {
            var simpleMediaServiceDataReader = GetMediaServiceByIdDataReader( id );
            using ( simpleMediaServiceDataReader )
            {
                if ( simpleMediaServiceDataReader.Read( ) )
                {
                    var result = simpleMediaServiceDataReader.GetDataObject( );
                    return result;
                }
            }
            return null;
        }

        public void GetMediaServiceById( Guid id, Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleMediaServiceDataReader = GetMediaServiceByIdDataReader( id );
                using ( simpleMediaServiceDataReader )
                {
                    if ( simpleMediaServiceDataReader.Read( ) )
                    {
                        destinationWriter.Write( true );
                        simpleMediaServiceDataReader.WriteTo( destinationWriter );
                    }
                    else
                    {
                        destinationWriter.Write( false );
                    }
                }
            }
        }

        public SimpleMediaServiceDataReader GetMediaServiceCollectionDataReader( )
        {
            const string sql = SimpleMediaServiceDataReader.BaseQuery; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleMediaServiceDataReader = new SimpleMediaServiceDataReader( _loggerFactory, sqlDataReader );
                return simpleMediaServiceDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public IList<MediaServiceObject> GetMediaServiceCollection( )
        {
            var result = new List<MediaServiceObject>( );
            var simpleMediaServiceDataReader = GetMediaServiceCollectionDataReader( );
            using ( simpleMediaServiceDataReader )
            {
                while ( simpleMediaServiceDataReader.Read( ) )
                {
                    var data = simpleMediaServiceDataReader.GetDataObject( );
                    result.Add( data );
                }
            }
            return result;
        }

        public void GetMediaServiceCollection( Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleMediaServiceDataReader = GetMediaServiceCollectionDataReader( );
                using ( simpleMediaServiceDataReader )
                {
                    simpleMediaServiceDataReader.WriteResultSetTo( destinationWriter );
                }
            }
        }

        // ---------------------------------------------------------------------
        // MediaServiceOptions queries
        // ---------------------------------------------------------------------
        public SimpleMediaServiceOptionsDataReader GetMediaServiceOptionsByIdDataReader( Guid id )
        {
            const string sql = SimpleMediaServiceOptionsDataReader.BaseQuery + "WHERE " + SimpleMediaServiceOptionsDataReader.ViewAliasName + ".[Id] = @id"; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                sqlCommandParameters.AddGuid( "@id", id );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleMediaServiceOptionsDataReader = new SimpleMediaServiceOptionsDataReader( _loggerFactory, sqlDataReader );
                return simpleMediaServiceOptionsDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public MediaServiceOptionsObject? GetMediaServiceOptionsById( Guid id )
        {
            var simpleMediaServiceOptionsDataReader = GetMediaServiceOptionsByIdDataReader( id );
            using ( simpleMediaServiceOptionsDataReader )
            {
                if ( simpleMediaServiceOptionsDataReader.Read( ) )
                {
                    var result = simpleMediaServiceOptionsDataReader.GetDataObject( );
                    return result;
                }
            }
            return null;
        }

        public void GetMediaServiceOptionsById( Guid id, Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleMediaServiceOptionsDataReader = GetMediaServiceOptionsByIdDataReader( id );
                using ( simpleMediaServiceOptionsDataReader )
                {
                    if ( simpleMediaServiceOptionsDataReader.Read( ) )
                    {
                        destinationWriter.Write( true );
                        simpleMediaServiceOptionsDataReader.WriteTo( destinationWriter );
                    }
                    else
                    {
                        destinationWriter.Write( false );
                    }
                }
            }
        }

        public SimpleMediaServiceOptionsDataReader GetMediaServiceOptionsCollectionDataReader( )
        {
            const string sql = SimpleMediaServiceOptionsDataReader.BaseQuery; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleMediaServiceOptionsDataReader = new SimpleMediaServiceOptionsDataReader( _loggerFactory, sqlDataReader );
                return simpleMediaServiceOptionsDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public IList<MediaServiceOptionsObject> GetMediaServiceOptionsCollection( )
        {
            var result = new List<MediaServiceOptionsObject>( );
            var simpleMediaServiceOptionsDataReader = GetMediaServiceOptionsCollectionDataReader( );
            using ( simpleMediaServiceOptionsDataReader )
            {
                while ( simpleMediaServiceOptionsDataReader.Read( ) )
                {
                    var data = simpleMediaServiceOptionsDataReader.GetDataObject( );
                    result.Add( data );
                }
            }
            return result;
        }

        public void GetMediaServiceOptionsCollection( Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleMediaServiceOptionsDataReader = GetMediaServiceOptionsCollectionDataReader( );
                using ( simpleMediaServiceOptionsDataReader )
                {
                    simpleMediaServiceOptionsDataReader.WriteResultSetTo( destinationWriter );
                }
            }
        }

        public SimpleMediaServiceOptionsDataReader GetMediaServiceOptionsCollectionByMediaServiceDataReader( Guid mediaService )
        {
            const string sql = SimpleMediaServiceOptionsDataReader.BaseQuery + " WHERE " +
                    SimpleMediaServiceOptionsDataReader.ViewAliasName + ".[MediaService] = @mediaService " +
                    " ORDER BY " + SimpleMediaServiceOptionsDataReader.ViewAliasName + ".[MediaService]," +SimpleMediaServiceOptionsDataReader.ViewAliasName + ".[Timestamp]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var mediaServiceParameter = sqlCommandParameters.AddReference( "@mediaService", mediaService );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleMediaServiceOptionsDataReader = new SimpleMediaServiceOptionsDataReader( _loggerFactory, sqlDataReader );
                return simpleMediaServiceOptionsDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<MediaServiceOptionsObject> GetMediaServiceOptionsCollectionByMediaService( Guid mediaService )
        {
            throw new NotImplementedException( );
        }
        public SimpleMediaServiceOptionsDataReader GetMediaServiceOptionsByMediaServiceAndTimestampDataReader( Guid mediaService, DateTime timestamp )
        {
            const string sql = SimpleMediaServiceOptionsDataReader.BaseQuery + " WHERE " +
                    SimpleMediaServiceOptionsDataReader.ViewAliasName + ".[MediaService] = @mediaService AND " +
                    SimpleMediaServiceOptionsDataReader.ViewAliasName + ".[Timestamp] = @timestamp " +
                    " ORDER BY " + SimpleMediaServiceOptionsDataReader.ViewAliasName + ".[MediaService]," +SimpleMediaServiceOptionsDataReader.ViewAliasName + ".[Timestamp]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var mediaServiceParameter = sqlCommandParameters.AddReference( "@mediaService", mediaService );
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@timestamp", timestamp );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleMediaServiceOptionsDataReader = new SimpleMediaServiceOptionsDataReader( _loggerFactory, sqlDataReader );
                return simpleMediaServiceOptionsDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public MediaServiceOptionsObject? GetMediaServiceOptionsByMediaServiceAndTimestamp( Guid mediaService, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public MediaServiceOptionsObject? GetMediaServiceOptionsByMediaServiceAtTimestamp( Guid mediaService, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<MediaServiceOptionsObject> GetMediaServiceOptionsByMediaServiceFromTimestamp( Guid mediaService, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<MediaServiceOptionsObject> GetMediaServiceOptionsByMediaServiceUntilTimestamp( Guid mediaService, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<MediaServiceOptionsObject> GetMediaServiceOptionsByMediaServiceOverTimestamp( Guid mediaService, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException( );
        }
        // ---------------------------------------------------------------------
        // NamespaceElement queries
        // ---------------------------------------------------------------------
        public ComplexNamespaceElementDataReader GetNamespaceElementByIdDataReader( Guid id )
        {
            const string sql = ComplexNamespaceElementDataReader.BaseQuery + "WHERE " + ComplexNamespaceElementDataReader.ViewAliasName + ".[Id] = @id"; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                sqlCommandParameters.AddGuid( "@id", id );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var complexNamespaceElementDataReader = new ComplexNamespaceElementDataReader( _loggerFactory, sqlDataReader );
                return complexNamespaceElementDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public NamespaceElementObject? GetNamespaceElementById( Guid id )
        {
            var complexNamespaceElementDataReader = GetNamespaceElementByIdDataReader( id );
            using ( complexNamespaceElementDataReader )
            {
                if ( complexNamespaceElementDataReader.Read( ) )
                {
                    var result = complexNamespaceElementDataReader.GetDataObject( );
                    return result;
                }
            }
            return null;
        }

        public void GetNamespaceElementById( Guid id, Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var complexNamespaceElementDataReader = GetNamespaceElementByIdDataReader( id );
                using ( complexNamespaceElementDataReader )
                {
                    if ( complexNamespaceElementDataReader.Read( ) )
                    {
                        destinationWriter.Write( true );
                        complexNamespaceElementDataReader.WriteTo( destinationWriter );
                    }
                    else
                    {
                        destinationWriter.Write( false );
                    }
                }
            }
        }

        public ComplexNamespaceElementDataReader GetNamespaceElementCollectionDataReader( )
        {
            const string sql = ComplexNamespaceElementDataReader.BaseQuery; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var complexNamespaceElementDataReader = new ComplexNamespaceElementDataReader( _loggerFactory, sqlDataReader );
                return complexNamespaceElementDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public IList<NamespaceElementObject> GetNamespaceElementCollection( )
        {
            var result = new List<NamespaceElementObject>( );
            var complexNamespaceElementDataReader = GetNamespaceElementCollectionDataReader( );
            using ( complexNamespaceElementDataReader )
            {
                while ( complexNamespaceElementDataReader.Read( ) )
                {
                    var data = complexNamespaceElementDataReader.GetDataObject( );
                    result.Add( data );
                }
            }
            return result;
        }

        public void GetNamespaceElementCollection( Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var complexNamespaceElementDataReader = GetNamespaceElementCollectionDataReader( );
                using ( complexNamespaceElementDataReader )
                {
                    complexNamespaceElementDataReader.WriteResultSetTo( destinationWriter );
                }
            }
        }

        public ComplexNamespaceElementDataReader GetNamespaceElementCollectionByNamespaceDataReader( Guid namespace__ )
        {
            const string sql = ComplexNamespaceElementDataReader.BaseQuery + " WHERE " +
                    ComplexNamespaceElementDataReader.ViewAliasName + ".[Namespace] = @namespace__ " +
                    " ORDER BY " + ComplexNamespaceElementDataReader.ViewAliasName + ".[Namespace]," +ComplexNamespaceElementDataReader.ViewAliasName + ".[Name]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var namespace__Parameter = sqlCommandParameters.AddReference( "@namespace", namespace__ );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var complexNamespaceElementDataReader = new ComplexNamespaceElementDataReader( _loggerFactory, sqlDataReader );
                return complexNamespaceElementDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<NamespaceElementObject> GetNamespaceElementCollectionByNamespace( Guid namespace__ )
        {
            throw new NotImplementedException( );
        }
        public ComplexNamespaceElementDataReader GetNamespaceElementByNamespaceAndNameDataReader( Guid namespace__, string name )
        {
            const string sql = ComplexNamespaceElementDataReader.BaseQuery + " WHERE " +
                    ComplexNamespaceElementDataReader.ViewAliasName + ".[Namespace] = @namespace__ AND " +
                    ComplexNamespaceElementDataReader.ViewAliasName + ".[Name] = @name " +
                    " ORDER BY " + ComplexNamespaceElementDataReader.ViewAliasName + ".[Namespace]," +ComplexNamespaceElementDataReader.ViewAliasName + ".[Name]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var namespace__Parameter = sqlCommandParameters.AddReference( "@namespace", namespace__ );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@name", name, 127 );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var complexNamespaceElementDataReader = new ComplexNamespaceElementDataReader( _loggerFactory, sqlDataReader );
                return complexNamespaceElementDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public NamespaceElementObject? GetNamespaceElementByNamespaceAndName( Guid namespace__, string name )
        {
            throw new NotImplementedException( );
        }
        // ---------------------------------------------------------------------
        // ElementType queries
        // ---------------------------------------------------------------------
        public SimpleElementTypeDataReader GetElementTypeByIdDataReader( Guid id )
        {
            const string sql = SimpleElementTypeDataReader.BaseQuery + "WHERE " + SimpleElementTypeDataReader.ViewAliasName + ".[Id] = @id"; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                sqlCommandParameters.AddGuid( "@id", id );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleElementTypeDataReader = new SimpleElementTypeDataReader( _loggerFactory, sqlDataReader );
                return simpleElementTypeDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public ElementTypeObject? GetElementTypeById( Guid id )
        {
            var simpleElementTypeDataReader = GetElementTypeByIdDataReader( id );
            using ( simpleElementTypeDataReader )
            {
                if ( simpleElementTypeDataReader.Read( ) )
                {
                    var result = simpleElementTypeDataReader.GetDataObject( );
                    return result;
                }
            }
            return null;
        }

        public void GetElementTypeById( Guid id, Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleElementTypeDataReader = GetElementTypeByIdDataReader( id );
                using ( simpleElementTypeDataReader )
                {
                    if ( simpleElementTypeDataReader.Read( ) )
                    {
                        destinationWriter.Write( true );
                        simpleElementTypeDataReader.WriteTo( destinationWriter );
                    }
                    else
                    {
                        destinationWriter.Write( false );
                    }
                }
            }
        }

        public SimpleElementTypeDataReader GetElementTypeCollectionDataReader( )
        {
            const string sql = SimpleElementTypeDataReader.BaseQuery; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleElementTypeDataReader = new SimpleElementTypeDataReader( _loggerFactory, sqlDataReader );
                return simpleElementTypeDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public IList<ElementTypeObject> GetElementTypeCollection( )
        {
            var result = new List<ElementTypeObject>( );
            var simpleElementTypeDataReader = GetElementTypeCollectionDataReader( );
            using ( simpleElementTypeDataReader )
            {
                while ( simpleElementTypeDataReader.Read( ) )
                {
                    var data = simpleElementTypeDataReader.GetDataObject( );
                    result.Add( data );
                }
            }
            return result;
        }

        public void GetElementTypeCollection( Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleElementTypeDataReader = GetElementTypeCollectionDataReader( );
                using ( simpleElementTypeDataReader )
                {
                    simpleElementTypeDataReader.WriteResultSetTo( destinationWriter );
                }
            }
        }

        public SimpleElementTypeDataReader GetElementTypeCollectionByNamespaceDataReader( Guid namespace__ )
        {
            const string sql = SimpleElementTypeDataReader.BaseQuery + " WHERE " +
                    SimpleElementTypeDataReader.ViewAliasName + ".[Namespace] = @namespace__ " +
                    " ORDER BY " + SimpleElementTypeDataReader.ViewAliasName + ".[Namespace]," +SimpleElementTypeDataReader.ViewAliasName + ".[Name]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var namespace__Parameter = sqlCommandParameters.AddReference( "@namespace", namespace__ );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleElementTypeDataReader = new SimpleElementTypeDataReader( _loggerFactory, sqlDataReader );
                return simpleElementTypeDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<ElementTypeObject> GetElementTypeCollectionByNamespace( Guid namespace__ )
        {
            throw new NotImplementedException( );
        }
        public SimpleElementTypeDataReader GetElementTypeByNamespaceAndNameDataReader( Guid namespace__, string name )
        {
            const string sql = SimpleElementTypeDataReader.BaseQuery + " WHERE " +
                    SimpleElementTypeDataReader.ViewAliasName + ".[Namespace] = @namespace__ AND " +
                    SimpleElementTypeDataReader.ViewAliasName + ".[Name] = @name " +
                    " ORDER BY " + SimpleElementTypeDataReader.ViewAliasName + ".[Namespace]," +SimpleElementTypeDataReader.ViewAliasName + ".[Name]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var namespace__Parameter = sqlCommandParameters.AddReference( "@namespace", namespace__ );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@name", name, 127 );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleElementTypeDataReader = new SimpleElementTypeDataReader( _loggerFactory, sqlDataReader );
                return simpleElementTypeDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public ElementTypeObject? GetElementTypeByNamespaceAndName( Guid namespace__, string name )
        {
            throw new NotImplementedException( );
        }
        // ---------------------------------------------------------------------
        // Namespace queries
        // ---------------------------------------------------------------------
        public SimpleNamespaceDataReader GetNamespaceByIdDataReader( Guid id )
        {
            const string sql = SimpleNamespaceDataReader.BaseQuery + "WHERE " + SimpleNamespaceDataReader.ViewAliasName + ".[Id] = @id"; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                sqlCommandParameters.AddGuid( "@id", id );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleNamespaceDataReader = new SimpleNamespaceDataReader( _loggerFactory, sqlDataReader );
                return simpleNamespaceDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public NamespaceObject? GetNamespaceById( Guid id )
        {
            var simpleNamespaceDataReader = GetNamespaceByIdDataReader( id );
            using ( simpleNamespaceDataReader )
            {
                if ( simpleNamespaceDataReader.Read( ) )
                {
                    var result = simpleNamespaceDataReader.GetDataObject( );
                    return result;
                }
            }
            return null;
        }

        public void GetNamespaceById( Guid id, Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleNamespaceDataReader = GetNamespaceByIdDataReader( id );
                using ( simpleNamespaceDataReader )
                {
                    if ( simpleNamespaceDataReader.Read( ) )
                    {
                        destinationWriter.Write( true );
                        simpleNamespaceDataReader.WriteTo( destinationWriter );
                    }
                    else
                    {
                        destinationWriter.Write( false );
                    }
                }
            }
        }

        public SimpleNamespaceDataReader GetNamespaceCollectionDataReader( )
        {
            const string sql = SimpleNamespaceDataReader.BaseQuery; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleNamespaceDataReader = new SimpleNamespaceDataReader( _loggerFactory, sqlDataReader );
                return simpleNamespaceDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public IList<NamespaceObject> GetNamespaceCollection( )
        {
            var result = new List<NamespaceObject>( );
            var simpleNamespaceDataReader = GetNamespaceCollectionDataReader( );
            using ( simpleNamespaceDataReader )
            {
                while ( simpleNamespaceDataReader.Read( ) )
                {
                    var data = simpleNamespaceDataReader.GetDataObject( );
                    result.Add( data );
                }
            }
            return result;
        }

        public void GetNamespaceCollection( Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleNamespaceDataReader = GetNamespaceCollectionDataReader( );
                using ( simpleNamespaceDataReader )
                {
                    simpleNamespaceDataReader.WriteResultSetTo( destinationWriter );
                }
            }
        }

        public SimpleNamespaceDataReader GetNamespaceCollectionByNamespaceDataReader( Guid namespace__ )
        {
            const string sql = SimpleNamespaceDataReader.BaseQuery + " WHERE " +
                    SimpleNamespaceDataReader.ViewAliasName + ".[Namespace] = @namespace__ " +
                    " ORDER BY " + SimpleNamespaceDataReader.ViewAliasName + ".[Namespace]," +SimpleNamespaceDataReader.ViewAliasName + ".[Name]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var namespace__Parameter = sqlCommandParameters.AddReference( "@namespace", namespace__ );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleNamespaceDataReader = new SimpleNamespaceDataReader( _loggerFactory, sqlDataReader );
                return simpleNamespaceDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<NamespaceObject> GetNamespaceCollectionByNamespace( Guid namespace__ )
        {
            throw new NotImplementedException( );
        }
        public SimpleNamespaceDataReader GetNamespaceByNamespaceAndNameDataReader( Guid namespace__, string name )
        {
            const string sql = SimpleNamespaceDataReader.BaseQuery + " WHERE " +
                    SimpleNamespaceDataReader.ViewAliasName + ".[Namespace] = @namespace__ AND " +
                    SimpleNamespaceDataReader.ViewAliasName + ".[Name] = @name " +
                    " ORDER BY " + SimpleNamespaceDataReader.ViewAliasName + ".[Namespace]," +SimpleNamespaceDataReader.ViewAliasName + ".[Name]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var namespace__Parameter = sqlCommandParameters.AddReference( "@namespace", namespace__ );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@name", name, 127 );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleNamespaceDataReader = new SimpleNamespaceDataReader( _loggerFactory, sqlDataReader );
                return simpleNamespaceDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public NamespaceObject? GetNamespaceByNamespaceAndName( Guid namespace__, string name )
        {
            throw new NotImplementedException( );
        }
        // ---------------------------------------------------------------------
        // OilSpill queries
        // ---------------------------------------------------------------------
        public SimpleOilSpillDataReader GetOilSpillByIdDataReader( Guid id )
        {
            const string sql = SimpleOilSpillDataReader.BaseQuery + "WHERE " + SimpleOilSpillDataReader.ViewAliasName + ".[Id] = @id"; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                sqlCommandParameters.AddGuid( "@id", id );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleOilSpillDataReader = new SimpleOilSpillDataReader( _loggerFactory, sqlDataReader );
                return simpleOilSpillDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public OilSpillObject? GetOilSpillById( Guid id )
        {
            var simpleOilSpillDataReader = GetOilSpillByIdDataReader( id );
            using ( simpleOilSpillDataReader )
            {
                if ( simpleOilSpillDataReader.Read( ) )
                {
                    var result = simpleOilSpillDataReader.GetDataObject( );
                    return result;
                }
            }
            return null;
        }

        public void GetOilSpillById( Guid id, Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleOilSpillDataReader = GetOilSpillByIdDataReader( id );
                using ( simpleOilSpillDataReader )
                {
                    if ( simpleOilSpillDataReader.Read( ) )
                    {
                        destinationWriter.Write( true );
                        simpleOilSpillDataReader.WriteTo( destinationWriter );
                    }
                    else
                    {
                        destinationWriter.Write( false );
                    }
                }
            }
        }

        public SimpleOilSpillDataReader GetOilSpillCollectionDataReader( )
        {
            const string sql = SimpleOilSpillDataReader.BaseQuery; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleOilSpillDataReader = new SimpleOilSpillDataReader( _loggerFactory, sqlDataReader );
                return simpleOilSpillDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public IList<OilSpillObject> GetOilSpillCollection( )
        {
            var result = new List<OilSpillObject>( );
            var simpleOilSpillDataReader = GetOilSpillCollectionDataReader( );
            using ( simpleOilSpillDataReader )
            {
                while ( simpleOilSpillDataReader.Read( ) )
                {
                    var data = simpleOilSpillDataReader.GetDataObject( );
                    result.Add( data );
                }
            }
            return result;
        }

        public void GetOilSpillCollection( Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleOilSpillDataReader = GetOilSpillCollectionDataReader( );
                using ( simpleOilSpillDataReader )
                {
                    simpleOilSpillDataReader.WriteResultSetTo( destinationWriter );
                }
            }
        }

        public SimpleOilSpillDataReader GetOilSpillCollectionByOilSpillDetectorDataReader( Guid oilSpillDetector )
        {
            const string sql = SimpleOilSpillDataReader.BaseQuery + " WHERE " +
                    SimpleOilSpillDataReader.ViewAliasName + ".[OilSpillDetector] = @oilSpillDetector " +
                    " ORDER BY " + SimpleOilSpillDataReader.ViewAliasName + ".[OilSpillDetector]," +SimpleOilSpillDataReader.ViewAliasName + ".[Timestamp]," +SimpleOilSpillDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var oilSpillDetectorParameter = sqlCommandParameters.AddReference( "@oilSpillDetector", oilSpillDetector );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleOilSpillDataReader = new SimpleOilSpillDataReader( _loggerFactory, sqlDataReader );
                return simpleOilSpillDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<OilSpillObject> GetOilSpillCollectionByOilSpillDetector( Guid oilSpillDetector )
        {
            throw new NotImplementedException( );
        }
        public SimpleOilSpillDataReader GetOilSpillCollectionByOilSpillDetectorAndTimestampDataReader( Guid oilSpillDetector, DateTime timestamp )
        {
            const string sql = SimpleOilSpillDataReader.BaseQuery + " WHERE " +
                    SimpleOilSpillDataReader.ViewAliasName + ".[OilSpillDetector] = @oilSpillDetector AND " +
                    SimpleOilSpillDataReader.ViewAliasName + ".[Timestamp] = @timestamp " +
                    " ORDER BY " + SimpleOilSpillDataReader.ViewAliasName + ".[OilSpillDetector]," +SimpleOilSpillDataReader.ViewAliasName + ".[Timestamp]," +SimpleOilSpillDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var oilSpillDetectorParameter = sqlCommandParameters.AddReference( "@oilSpillDetector", oilSpillDetector );
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@timestamp", timestamp );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleOilSpillDataReader = new SimpleOilSpillDataReader( _loggerFactory, sqlDataReader );
                return simpleOilSpillDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<OilSpillObject> GetOilSpillCollectionByOilSpillDetectorAndTimestamp( Guid oilSpillDetector, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<OilSpillObject> GetOilSpillCollectionByOilSpillDetectorAtTimestamp( Guid oilSpillDetector, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<OilSpillObject> GetOilSpillCollectionByOilSpillDetectorFromTimestamp( Guid oilSpillDetector, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<OilSpillObject> GetOilSpillCollectionByOilSpillDetectorUntilTimestamp( Guid oilSpillDetector, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<OilSpillObject> GetOilSpillCollectionByOilSpillDetectorOverTimestamp( Guid oilSpillDetector, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException( );
        }
        public SimpleOilSpillDataReader GetOilSpillCollectionByTimestampDataReader( DateTime timestamp )
        {
            const string sql = SimpleOilSpillDataReader.BaseQuery + " WHERE " +
                    SimpleOilSpillDataReader.ViewAliasName + ".[Timestamp] = @timestamp " +
                    " ORDER BY " + SimpleOilSpillDataReader.ViewAliasName + ".[Timestamp]," +SimpleOilSpillDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@timestamp", timestamp );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleOilSpillDataReader = new SimpleOilSpillDataReader( _loggerFactory, sqlDataReader );
                return simpleOilSpillDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<OilSpillObject> GetOilSpillCollectionByTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<OilSpillObject> GetOilSpillCollectionAtTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<OilSpillObject> GetOilSpillCollectionFromTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<OilSpillObject> GetOilSpillCollectionUntilTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<OilSpillObject> GetOilSpillCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException( );
        }
        // ---------------------------------------------------------------------
        // OilSpillDetectorCommand queries
        // ---------------------------------------------------------------------
        public SimpleOilSpillDetectorCommandDataReader GetOilSpillDetectorCommandByIdDataReader( Guid id )
        {
            const string sql = SimpleOilSpillDetectorCommandDataReader.BaseQuery + "WHERE " + SimpleOilSpillDetectorCommandDataReader.ViewAliasName + ".[Id] = @id"; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                sqlCommandParameters.AddGuid( "@id", id );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleOilSpillDetectorCommandDataReader = new SimpleOilSpillDetectorCommandDataReader( _loggerFactory, sqlDataReader );
                return simpleOilSpillDetectorCommandDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public OilSpillDetectorCommandObject? GetOilSpillDetectorCommandById( Guid id )
        {
            var simpleOilSpillDetectorCommandDataReader = GetOilSpillDetectorCommandByIdDataReader( id );
            using ( simpleOilSpillDetectorCommandDataReader )
            {
                if ( simpleOilSpillDetectorCommandDataReader.Read( ) )
                {
                    var result = simpleOilSpillDetectorCommandDataReader.GetDataObject( );
                    return result;
                }
            }
            return null;
        }

        public void GetOilSpillDetectorCommandById( Guid id, Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleOilSpillDetectorCommandDataReader = GetOilSpillDetectorCommandByIdDataReader( id );
                using ( simpleOilSpillDetectorCommandDataReader )
                {
                    if ( simpleOilSpillDetectorCommandDataReader.Read( ) )
                    {
                        destinationWriter.Write( true );
                        simpleOilSpillDetectorCommandDataReader.WriteTo( destinationWriter );
                    }
                    else
                    {
                        destinationWriter.Write( false );
                    }
                }
            }
        }

        public SimpleOilSpillDetectorCommandDataReader GetOilSpillDetectorCommandCollectionDataReader( )
        {
            const string sql = SimpleOilSpillDetectorCommandDataReader.BaseQuery; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleOilSpillDetectorCommandDataReader = new SimpleOilSpillDetectorCommandDataReader( _loggerFactory, sqlDataReader );
                return simpleOilSpillDetectorCommandDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public IList<OilSpillDetectorCommandObject> GetOilSpillDetectorCommandCollection( )
        {
            var result = new List<OilSpillDetectorCommandObject>( );
            var simpleOilSpillDetectorCommandDataReader = GetOilSpillDetectorCommandCollectionDataReader( );
            using ( simpleOilSpillDetectorCommandDataReader )
            {
                while ( simpleOilSpillDetectorCommandDataReader.Read( ) )
                {
                    var data = simpleOilSpillDetectorCommandDataReader.GetDataObject( );
                    result.Add( data );
                }
            }
            return result;
        }

        public void GetOilSpillDetectorCommandCollection( Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleOilSpillDetectorCommandDataReader = GetOilSpillDetectorCommandCollectionDataReader( );
                using ( simpleOilSpillDetectorCommandDataReader )
                {
                    simpleOilSpillDetectorCommandDataReader.WriteResultSetTo( destinationWriter );
                }
            }
        }

        public SimpleOilSpillDetectorCommandDataReader GetOilSpillDetectorCommandCollectionByOilSpillDetectorDataReader( Guid oilSpillDetector )
        {
            const string sql = SimpleOilSpillDetectorCommandDataReader.BaseQuery + " WHERE " +
                    SimpleOilSpillDetectorCommandDataReader.ViewAliasName + ".[OilSpillDetector] = @oilSpillDetector " +
                    " ORDER BY " + SimpleOilSpillDetectorCommandDataReader.ViewAliasName + ".[OilSpillDetector]," +SimpleOilSpillDetectorCommandDataReader.ViewAliasName + ".[Timestamp]," +SimpleOilSpillDetectorCommandDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var oilSpillDetectorParameter = sqlCommandParameters.AddReference( "@oilSpillDetector", oilSpillDetector );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleOilSpillDetectorCommandDataReader = new SimpleOilSpillDetectorCommandDataReader( _loggerFactory, sqlDataReader );
                return simpleOilSpillDetectorCommandDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<OilSpillDetectorCommandObject> GetOilSpillDetectorCommandCollectionByOilSpillDetector( Guid oilSpillDetector )
        {
            throw new NotImplementedException( );
        }
        public SimpleOilSpillDetectorCommandDataReader GetOilSpillDetectorCommandCollectionByOilSpillDetectorAndTimestampDataReader( Guid oilSpillDetector, DateTime timestamp )
        {
            const string sql = SimpleOilSpillDetectorCommandDataReader.BaseQuery + " WHERE " +
                    SimpleOilSpillDetectorCommandDataReader.ViewAliasName + ".[OilSpillDetector] = @oilSpillDetector AND " +
                    SimpleOilSpillDetectorCommandDataReader.ViewAliasName + ".[Timestamp] = @timestamp " +
                    " ORDER BY " + SimpleOilSpillDetectorCommandDataReader.ViewAliasName + ".[OilSpillDetector]," +SimpleOilSpillDetectorCommandDataReader.ViewAliasName + ".[Timestamp]," +SimpleOilSpillDetectorCommandDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var oilSpillDetectorParameter = sqlCommandParameters.AddReference( "@oilSpillDetector", oilSpillDetector );
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@timestamp", timestamp );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleOilSpillDetectorCommandDataReader = new SimpleOilSpillDetectorCommandDataReader( _loggerFactory, sqlDataReader );
                return simpleOilSpillDetectorCommandDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<OilSpillDetectorCommandObject> GetOilSpillDetectorCommandCollectionByOilSpillDetectorAndTimestamp( Guid oilSpillDetector, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<OilSpillDetectorCommandObject> GetOilSpillDetectorCommandCollectionByOilSpillDetectorAtTimestamp( Guid oilSpillDetector, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<OilSpillDetectorCommandObject> GetOilSpillDetectorCommandCollectionByOilSpillDetectorFromTimestamp( Guid oilSpillDetector, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<OilSpillDetectorCommandObject> GetOilSpillDetectorCommandCollectionByOilSpillDetectorUntilTimestamp( Guid oilSpillDetector, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<OilSpillDetectorCommandObject> GetOilSpillDetectorCommandCollectionByOilSpillDetectorOverTimestamp( Guid oilSpillDetector, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException( );
        }
        public SimpleOilSpillDetectorCommandDataReader GetOilSpillDetectorCommandCollectionByTimestampDataReader( DateTime timestamp )
        {
            const string sql = SimpleOilSpillDetectorCommandDataReader.BaseQuery + " WHERE " +
                    SimpleOilSpillDetectorCommandDataReader.ViewAliasName + ".[Timestamp] = @timestamp " +
                    " ORDER BY " + SimpleOilSpillDetectorCommandDataReader.ViewAliasName + ".[Timestamp]," +SimpleOilSpillDetectorCommandDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@timestamp", timestamp );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleOilSpillDetectorCommandDataReader = new SimpleOilSpillDetectorCommandDataReader( _loggerFactory, sqlDataReader );
                return simpleOilSpillDetectorCommandDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<OilSpillDetectorCommandObject> GetOilSpillDetectorCommandCollectionByTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<OilSpillDetectorCommandObject> GetOilSpillDetectorCommandCollectionAtTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<OilSpillDetectorCommandObject> GetOilSpillDetectorCommandCollectionFromTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<OilSpillDetectorCommandObject> GetOilSpillDetectorCommandCollectionUntilTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<OilSpillDetectorCommandObject> GetOilSpillDetectorCommandCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException( );
        }
        public SimpleOilSpillDetectorCommandDataReader GetOilSpillDetectorCommandCollectionByReplyDataReader( Guid reply )
        {
            const string sql = SimpleOilSpillDetectorCommandDataReader.BaseQuery + " WHERE " +
                    SimpleOilSpillDetectorCommandDataReader.ViewAliasName + ".[Reply] = @reply " +
                    " ORDER BY " + SimpleOilSpillDetectorCommandDataReader.ViewAliasName + ".[Reply]," +SimpleOilSpillDetectorCommandDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var replyParameter = sqlCommandParameters.AddReference( "@reply", reply );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleOilSpillDetectorCommandDataReader = new SimpleOilSpillDetectorCommandDataReader( _loggerFactory, sqlDataReader );
                return simpleOilSpillDetectorCommandDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<OilSpillDetectorCommandObject> GetOilSpillDetectorCommandCollectionByReply( Guid reply )
        {
            throw new NotImplementedException( );
        }
        // ---------------------------------------------------------------------
        // OilSpillDetectorCommandReply queries
        // ---------------------------------------------------------------------
        public SimpleOilSpillDetectorCommandReplyDataReader GetOilSpillDetectorCommandReplyByIdDataReader( Guid id )
        {
            const string sql = SimpleOilSpillDetectorCommandReplyDataReader.BaseQuery + "WHERE " + SimpleOilSpillDetectorCommandReplyDataReader.ViewAliasName + ".[Id] = @id"; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                sqlCommandParameters.AddGuid( "@id", id );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleOilSpillDetectorCommandReplyDataReader = new SimpleOilSpillDetectorCommandReplyDataReader( _loggerFactory, sqlDataReader );
                return simpleOilSpillDetectorCommandReplyDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public OilSpillDetectorCommandReplyObject? GetOilSpillDetectorCommandReplyById( Guid id )
        {
            var simpleOilSpillDetectorCommandReplyDataReader = GetOilSpillDetectorCommandReplyByIdDataReader( id );
            using ( simpleOilSpillDetectorCommandReplyDataReader )
            {
                if ( simpleOilSpillDetectorCommandReplyDataReader.Read( ) )
                {
                    var result = simpleOilSpillDetectorCommandReplyDataReader.GetDataObject( );
                    return result;
                }
            }
            return null;
        }

        public void GetOilSpillDetectorCommandReplyById( Guid id, Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleOilSpillDetectorCommandReplyDataReader = GetOilSpillDetectorCommandReplyByIdDataReader( id );
                using ( simpleOilSpillDetectorCommandReplyDataReader )
                {
                    if ( simpleOilSpillDetectorCommandReplyDataReader.Read( ) )
                    {
                        destinationWriter.Write( true );
                        simpleOilSpillDetectorCommandReplyDataReader.WriteTo( destinationWriter );
                    }
                    else
                    {
                        destinationWriter.Write( false );
                    }
                }
            }
        }

        public SimpleOilSpillDetectorCommandReplyDataReader GetOilSpillDetectorCommandReplyCollectionDataReader( )
        {
            const string sql = SimpleOilSpillDetectorCommandReplyDataReader.BaseQuery; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleOilSpillDetectorCommandReplyDataReader = new SimpleOilSpillDetectorCommandReplyDataReader( _loggerFactory, sqlDataReader );
                return simpleOilSpillDetectorCommandReplyDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public IList<OilSpillDetectorCommandReplyObject> GetOilSpillDetectorCommandReplyCollection( )
        {
            var result = new List<OilSpillDetectorCommandReplyObject>( );
            var simpleOilSpillDetectorCommandReplyDataReader = GetOilSpillDetectorCommandReplyCollectionDataReader( );
            using ( simpleOilSpillDetectorCommandReplyDataReader )
            {
                while ( simpleOilSpillDetectorCommandReplyDataReader.Read( ) )
                {
                    var data = simpleOilSpillDetectorCommandReplyDataReader.GetDataObject( );
                    result.Add( data );
                }
            }
            return result;
        }

        public void GetOilSpillDetectorCommandReplyCollection( Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleOilSpillDetectorCommandReplyDataReader = GetOilSpillDetectorCommandReplyCollectionDataReader( );
                using ( simpleOilSpillDetectorCommandReplyDataReader )
                {
                    simpleOilSpillDetectorCommandReplyDataReader.WriteResultSetTo( destinationWriter );
                }
            }
        }

        public SimpleOilSpillDetectorCommandReplyDataReader GetOilSpillDetectorCommandReplyCollectionByOilSpillDetectorDataReader( Guid oilSpillDetector )
        {
            const string sql = SimpleOilSpillDetectorCommandReplyDataReader.BaseQuery + " WHERE " +
                    SimpleOilSpillDetectorCommandReplyDataReader.ViewAliasName + ".[OilSpillDetector] = @oilSpillDetector " +
                    " ORDER BY " + SimpleOilSpillDetectorCommandReplyDataReader.ViewAliasName + ".[OilSpillDetector]," +SimpleOilSpillDetectorCommandReplyDataReader.ViewAliasName + ".[Timestamp]," +SimpleOilSpillDetectorCommandReplyDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var oilSpillDetectorParameter = sqlCommandParameters.AddReference( "@oilSpillDetector", oilSpillDetector );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleOilSpillDetectorCommandReplyDataReader = new SimpleOilSpillDetectorCommandReplyDataReader( _loggerFactory, sqlDataReader );
                return simpleOilSpillDetectorCommandReplyDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<OilSpillDetectorCommandReplyObject> GetOilSpillDetectorCommandReplyCollectionByOilSpillDetector( Guid oilSpillDetector )
        {
            throw new NotImplementedException( );
        }
        public SimpleOilSpillDetectorCommandReplyDataReader GetOilSpillDetectorCommandReplyCollectionByOilSpillDetectorAndTimestampDataReader( Guid oilSpillDetector, DateTime timestamp )
        {
            const string sql = SimpleOilSpillDetectorCommandReplyDataReader.BaseQuery + " WHERE " +
                    SimpleOilSpillDetectorCommandReplyDataReader.ViewAliasName + ".[OilSpillDetector] = @oilSpillDetector AND " +
                    SimpleOilSpillDetectorCommandReplyDataReader.ViewAliasName + ".[Timestamp] = @timestamp " +
                    " ORDER BY " + SimpleOilSpillDetectorCommandReplyDataReader.ViewAliasName + ".[OilSpillDetector]," +SimpleOilSpillDetectorCommandReplyDataReader.ViewAliasName + ".[Timestamp]," +SimpleOilSpillDetectorCommandReplyDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var oilSpillDetectorParameter = sqlCommandParameters.AddReference( "@oilSpillDetector", oilSpillDetector );
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@timestamp", timestamp );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleOilSpillDetectorCommandReplyDataReader = new SimpleOilSpillDetectorCommandReplyDataReader( _loggerFactory, sqlDataReader );
                return simpleOilSpillDetectorCommandReplyDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<OilSpillDetectorCommandReplyObject> GetOilSpillDetectorCommandReplyCollectionByOilSpillDetectorAndTimestamp( Guid oilSpillDetector, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<OilSpillDetectorCommandReplyObject> GetOilSpillDetectorCommandReplyCollectionByOilSpillDetectorAtTimestamp( Guid oilSpillDetector, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<OilSpillDetectorCommandReplyObject> GetOilSpillDetectorCommandReplyCollectionByOilSpillDetectorFromTimestamp( Guid oilSpillDetector, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<OilSpillDetectorCommandReplyObject> GetOilSpillDetectorCommandReplyCollectionByOilSpillDetectorUntilTimestamp( Guid oilSpillDetector, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<OilSpillDetectorCommandReplyObject> GetOilSpillDetectorCommandReplyCollectionByOilSpillDetectorOverTimestamp( Guid oilSpillDetector, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException( );
        }
        public SimpleOilSpillDetectorCommandReplyDataReader GetOilSpillDetectorCommandReplyCollectionByTimestampDataReader( DateTime timestamp )
        {
            const string sql = SimpleOilSpillDetectorCommandReplyDataReader.BaseQuery + " WHERE " +
                    SimpleOilSpillDetectorCommandReplyDataReader.ViewAliasName + ".[Timestamp] = @timestamp " +
                    " ORDER BY " + SimpleOilSpillDetectorCommandReplyDataReader.ViewAliasName + ".[Timestamp]," +SimpleOilSpillDetectorCommandReplyDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@timestamp", timestamp );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleOilSpillDetectorCommandReplyDataReader = new SimpleOilSpillDetectorCommandReplyDataReader( _loggerFactory, sqlDataReader );
                return simpleOilSpillDetectorCommandReplyDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<OilSpillDetectorCommandReplyObject> GetOilSpillDetectorCommandReplyCollectionByTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<OilSpillDetectorCommandReplyObject> GetOilSpillDetectorCommandReplyCollectionAtTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<OilSpillDetectorCommandReplyObject> GetOilSpillDetectorCommandReplyCollectionFromTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<OilSpillDetectorCommandReplyObject> GetOilSpillDetectorCommandReplyCollectionUntilTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<OilSpillDetectorCommandReplyObject> GetOilSpillDetectorCommandReplyCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException( );
        }
        public SimpleOilSpillDetectorCommandReplyDataReader GetOilSpillDetectorCommandReplyByCommandDataReader( Guid command )
        {
            const string sql = SimpleOilSpillDetectorCommandReplyDataReader.BaseQuery + " WHERE " +
                    SimpleOilSpillDetectorCommandReplyDataReader.ViewAliasName + ".[Command] = @command " +
                    " ORDER BY " + SimpleOilSpillDetectorCommandReplyDataReader.ViewAliasName + ".[Command]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var commandParameter = sqlCommandParameters.AddReference( "@command", command );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleOilSpillDetectorCommandReplyDataReader = new SimpleOilSpillDetectorCommandReplyDataReader( _loggerFactory, sqlDataReader );
                return simpleOilSpillDetectorCommandReplyDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public OilSpillDetectorCommandReplyObject? GetOilSpillDetectorCommandReplyByCommand( Guid command )
        {
            throw new NotImplementedException( );
        }
        // ---------------------------------------------------------------------
        // OilSpillDetectorConfiguration queries
        // ---------------------------------------------------------------------
        public SimpleOilSpillDetectorConfigurationDataReader GetOilSpillDetectorConfigurationByIdDataReader( Guid id )
        {
            const string sql = SimpleOilSpillDetectorConfigurationDataReader.BaseQuery + "WHERE " + SimpleOilSpillDetectorConfigurationDataReader.ViewAliasName + ".[Id] = @id"; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                sqlCommandParameters.AddGuid( "@id", id );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleOilSpillDetectorConfigurationDataReader = new SimpleOilSpillDetectorConfigurationDataReader( _loggerFactory, sqlDataReader );
                return simpleOilSpillDetectorConfigurationDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public OilSpillDetectorConfigurationObject? GetOilSpillDetectorConfigurationById( Guid id )
        {
            var simpleOilSpillDetectorConfigurationDataReader = GetOilSpillDetectorConfigurationByIdDataReader( id );
            using ( simpleOilSpillDetectorConfigurationDataReader )
            {
                if ( simpleOilSpillDetectorConfigurationDataReader.Read( ) )
                {
                    var result = simpleOilSpillDetectorConfigurationDataReader.GetDataObject( );
                    return result;
                }
            }
            return null;
        }

        public void GetOilSpillDetectorConfigurationById( Guid id, Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleOilSpillDetectorConfigurationDataReader = GetOilSpillDetectorConfigurationByIdDataReader( id );
                using ( simpleOilSpillDetectorConfigurationDataReader )
                {
                    if ( simpleOilSpillDetectorConfigurationDataReader.Read( ) )
                    {
                        destinationWriter.Write( true );
                        simpleOilSpillDetectorConfigurationDataReader.WriteTo( destinationWriter );
                    }
                    else
                    {
                        destinationWriter.Write( false );
                    }
                }
            }
        }

        public SimpleOilSpillDetectorConfigurationDataReader GetOilSpillDetectorConfigurationCollectionDataReader( )
        {
            const string sql = SimpleOilSpillDetectorConfigurationDataReader.BaseQuery; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleOilSpillDetectorConfigurationDataReader = new SimpleOilSpillDetectorConfigurationDataReader( _loggerFactory, sqlDataReader );
                return simpleOilSpillDetectorConfigurationDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public IList<OilSpillDetectorConfigurationObject> GetOilSpillDetectorConfigurationCollection( )
        {
            var result = new List<OilSpillDetectorConfigurationObject>( );
            var simpleOilSpillDetectorConfigurationDataReader = GetOilSpillDetectorConfigurationCollectionDataReader( );
            using ( simpleOilSpillDetectorConfigurationDataReader )
            {
                while ( simpleOilSpillDetectorConfigurationDataReader.Read( ) )
                {
                    var data = simpleOilSpillDetectorConfigurationDataReader.GetDataObject( );
                    result.Add( data );
                }
            }
            return result;
        }

        public void GetOilSpillDetectorConfigurationCollection( Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleOilSpillDetectorConfigurationDataReader = GetOilSpillDetectorConfigurationCollectionDataReader( );
                using ( simpleOilSpillDetectorConfigurationDataReader )
                {
                    simpleOilSpillDetectorConfigurationDataReader.WriteResultSetTo( destinationWriter );
                }
            }
        }

        public SimpleOilSpillDetectorConfigurationDataReader GetOilSpillDetectorConfigurationCollectionByOilSpillDetectorDataReader( Guid oilSpillDetector )
        {
            const string sql = SimpleOilSpillDetectorConfigurationDataReader.BaseQuery + " WHERE " +
                    SimpleOilSpillDetectorConfigurationDataReader.ViewAliasName + ".[OilSpillDetector] = @oilSpillDetector " +
                    " ORDER BY " + SimpleOilSpillDetectorConfigurationDataReader.ViewAliasName + ".[OilSpillDetector]," +SimpleOilSpillDetectorConfigurationDataReader.ViewAliasName + ".[Timestamp]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var oilSpillDetectorParameter = sqlCommandParameters.AddReference( "@oilSpillDetector", oilSpillDetector );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleOilSpillDetectorConfigurationDataReader = new SimpleOilSpillDetectorConfigurationDataReader( _loggerFactory, sqlDataReader );
                return simpleOilSpillDetectorConfigurationDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<OilSpillDetectorConfigurationObject> GetOilSpillDetectorConfigurationCollectionByOilSpillDetector( Guid oilSpillDetector )
        {
            throw new NotImplementedException( );
        }
        public SimpleOilSpillDetectorConfigurationDataReader GetOilSpillDetectorConfigurationByOilSpillDetectorAndTimestampDataReader( Guid oilSpillDetector, DateTime timestamp )
        {
            const string sql = SimpleOilSpillDetectorConfigurationDataReader.BaseQuery + " WHERE " +
                    SimpleOilSpillDetectorConfigurationDataReader.ViewAliasName + ".[OilSpillDetector] = @oilSpillDetector AND " +
                    SimpleOilSpillDetectorConfigurationDataReader.ViewAliasName + ".[Timestamp] = @timestamp " +
                    " ORDER BY " + SimpleOilSpillDetectorConfigurationDataReader.ViewAliasName + ".[OilSpillDetector]," +SimpleOilSpillDetectorConfigurationDataReader.ViewAliasName + ".[Timestamp]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var oilSpillDetectorParameter = sqlCommandParameters.AddReference( "@oilSpillDetector", oilSpillDetector );
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@timestamp", timestamp );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleOilSpillDetectorConfigurationDataReader = new SimpleOilSpillDetectorConfigurationDataReader( _loggerFactory, sqlDataReader );
                return simpleOilSpillDetectorConfigurationDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public OilSpillDetectorConfigurationObject? GetOilSpillDetectorConfigurationByOilSpillDetectorAndTimestamp( Guid oilSpillDetector, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public OilSpillDetectorConfigurationObject? GetOilSpillDetectorConfigurationByOilSpillDetectorAtTimestamp( Guid oilSpillDetector, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<OilSpillDetectorConfigurationObject> GetOilSpillDetectorConfigurationByOilSpillDetectorFromTimestamp( Guid oilSpillDetector, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<OilSpillDetectorConfigurationObject> GetOilSpillDetectorConfigurationByOilSpillDetectorUntilTimestamp( Guid oilSpillDetector, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<OilSpillDetectorConfigurationObject> GetOilSpillDetectorConfigurationByOilSpillDetectorOverTimestamp( Guid oilSpillDetector, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException( );
        }
        public SimpleOilSpillDetectorConfigurationDataReader GetOilSpillDetectorConfigurationCollectionByTimestampDataReader( DateTime timestamp )
        {
            const string sql = SimpleOilSpillDetectorConfigurationDataReader.BaseQuery + " WHERE " +
                    SimpleOilSpillDetectorConfigurationDataReader.ViewAliasName + ".[Timestamp] = @timestamp " +
                    " ORDER BY " + SimpleOilSpillDetectorConfigurationDataReader.ViewAliasName + ".[Timestamp]," +SimpleOilSpillDetectorConfigurationDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@timestamp", timestamp );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleOilSpillDetectorConfigurationDataReader = new SimpleOilSpillDetectorConfigurationDataReader( _loggerFactory, sqlDataReader );
                return simpleOilSpillDetectorConfigurationDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<OilSpillDetectorConfigurationObject> GetOilSpillDetectorConfigurationCollectionByTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<OilSpillDetectorConfigurationObject> GetOilSpillDetectorConfigurationCollectionAtTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<OilSpillDetectorConfigurationObject> GetOilSpillDetectorConfigurationCollectionFromTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<OilSpillDetectorConfigurationObject> GetOilSpillDetectorConfigurationCollectionUntilTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<OilSpillDetectorConfigurationObject> GetOilSpillDetectorConfigurationCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException( );
        }
        public SimpleOilSpillDetectorConfigurationDataReader GetOilSpillDetectorConfigurationCollectionByTargetMMSIDataReader( Guid targetMMSI )
        {
            const string sql = SimpleOilSpillDetectorConfigurationDataReader.BaseQuery + " WHERE " +
                    SimpleOilSpillDetectorConfigurationDataReader.ViewAliasName + ".[TargetMMSI] = @targetMMSI " +
                    " ORDER BY " + SimpleOilSpillDetectorConfigurationDataReader.ViewAliasName + ".[TargetMMSI]," +SimpleOilSpillDetectorConfigurationDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var targetMMSIParameter = sqlCommandParameters.AddReference( "@targetMMSI", targetMMSI );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleOilSpillDetectorConfigurationDataReader = new SimpleOilSpillDetectorConfigurationDataReader( _loggerFactory, sqlDataReader );
                return simpleOilSpillDetectorConfigurationDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<OilSpillDetectorConfigurationObject> GetOilSpillDetectorConfigurationCollectionByTargetMMSI( Guid targetMMSI )
        {
            throw new NotImplementedException( );
        }
        // ---------------------------------------------------------------------
        // Position2DTimeseriesValue queries
        // ---------------------------------------------------------------------
        public SimplePosition2DTimeseriesValueDataReader GetPosition2DTimeseriesValueByIdDataReader( Guid id )
        {
            const string sql = SimplePosition2DTimeseriesValueDataReader.BaseQuery + "WHERE " + SimplePosition2DTimeseriesValueDataReader.ViewAliasName + ".[Id] = @id"; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                sqlCommandParameters.AddGuid( "@id", id );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simplePosition2DTimeseriesValueDataReader = new SimplePosition2DTimeseriesValueDataReader( _loggerFactory, sqlDataReader );
                return simplePosition2DTimeseriesValueDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public Position2DTimeseriesValueObject? GetPosition2DTimeseriesValueById( Guid id )
        {
            var simplePosition2DTimeseriesValueDataReader = GetPosition2DTimeseriesValueByIdDataReader( id );
            using ( simplePosition2DTimeseriesValueDataReader )
            {
                if ( simplePosition2DTimeseriesValueDataReader.Read( ) )
                {
                    var result = simplePosition2DTimeseriesValueDataReader.GetDataObject( );
                    return result;
                }
            }
            return null;
        }

        public void GetPosition2DTimeseriesValueById( Guid id, Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simplePosition2DTimeseriesValueDataReader = GetPosition2DTimeseriesValueByIdDataReader( id );
                using ( simplePosition2DTimeseriesValueDataReader )
                {
                    if ( simplePosition2DTimeseriesValueDataReader.Read( ) )
                    {
                        destinationWriter.Write( true );
                        simplePosition2DTimeseriesValueDataReader.WriteTo( destinationWriter );
                    }
                    else
                    {
                        destinationWriter.Write( false );
                    }
                }
            }
        }

        public SimplePosition2DTimeseriesValueDataReader GetPosition2DTimeseriesValueCollectionDataReader( )
        {
            const string sql = SimplePosition2DTimeseriesValueDataReader.BaseQuery; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simplePosition2DTimeseriesValueDataReader = new SimplePosition2DTimeseriesValueDataReader( _loggerFactory, sqlDataReader );
                return simplePosition2DTimeseriesValueDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public IList<Position2DTimeseriesValueObject> GetPosition2DTimeseriesValueCollection( )
        {
            var result = new List<Position2DTimeseriesValueObject>( );
            var simplePosition2DTimeseriesValueDataReader = GetPosition2DTimeseriesValueCollectionDataReader( );
            using ( simplePosition2DTimeseriesValueDataReader )
            {
                while ( simplePosition2DTimeseriesValueDataReader.Read( ) )
                {
                    var data = simplePosition2DTimeseriesValueDataReader.GetDataObject( );
                    result.Add( data );
                }
            }
            return result;
        }

        public void GetPosition2DTimeseriesValueCollection( Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simplePosition2DTimeseriesValueDataReader = GetPosition2DTimeseriesValueCollectionDataReader( );
                using ( simplePosition2DTimeseriesValueDataReader )
                {
                    simplePosition2DTimeseriesValueDataReader.WriteResultSetTo( destinationWriter );
                }
            }
        }

        public SimplePosition2DTimeseriesValueDataReader GetPosition2DTimeseriesValueCollectionByTimeseriesDataReader( Guid timeseries )
        {
            const string sql = SimplePosition2DTimeseriesValueDataReader.BaseQuery + " WHERE " +
                    SimplePosition2DTimeseriesValueDataReader.ViewAliasName + ".[Timeseries] = @timeseries " +
                    " ORDER BY " + SimplePosition2DTimeseriesValueDataReader.ViewAliasName + ".[Timeseries]," +SimplePosition2DTimeseriesValueDataReader.ViewAliasName + ".[Timestamp]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var timeseriesParameter = sqlCommandParameters.AddReference( "@timeseries", timeseries );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simplePosition2DTimeseriesValueDataReader = new SimplePosition2DTimeseriesValueDataReader( _loggerFactory, sqlDataReader );
                return simplePosition2DTimeseriesValueDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<Position2DTimeseriesValueObject> GetPosition2DTimeseriesValueCollectionByTimeseries( Guid timeseries )
        {
            throw new NotImplementedException( );
        }
        public SimplePosition2DTimeseriesValueDataReader GetPosition2DTimeseriesValueByTimeseriesAndTimestampDataReader( Guid timeseries, DateTime timestamp )
        {
            const string sql = SimplePosition2DTimeseriesValueDataReader.BaseQuery + " WHERE " +
                    SimplePosition2DTimeseriesValueDataReader.ViewAliasName + ".[Timeseries] = @timeseries AND " +
                    SimplePosition2DTimeseriesValueDataReader.ViewAliasName + ".[Timestamp] = @timestamp " +
                    " ORDER BY " + SimplePosition2DTimeseriesValueDataReader.ViewAliasName + ".[Timeseries]," +SimplePosition2DTimeseriesValueDataReader.ViewAliasName + ".[Timestamp]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var timeseriesParameter = sqlCommandParameters.AddReference( "@timeseries", timeseries );
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@timestamp", timestamp );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simplePosition2DTimeseriesValueDataReader = new SimplePosition2DTimeseriesValueDataReader( _loggerFactory, sqlDataReader );
                return simplePosition2DTimeseriesValueDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public Position2DTimeseriesValueObject? GetPosition2DTimeseriesValueByTimeseriesAndTimestamp( Guid timeseries, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public Position2DTimeseriesValueObject? GetPosition2DTimeseriesValueByTimeseriesAtTimestamp( Guid timeseries, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<Position2DTimeseriesValueObject> GetPosition2DTimeseriesValueByTimeseriesFromTimestamp( Guid timeseries, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<Position2DTimeseriesValueObject> GetPosition2DTimeseriesValueByTimeseriesUntilTimestamp( Guid timeseries, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<Position2DTimeseriesValueObject> GetPosition2DTimeseriesValueByTimeseriesOverTimestamp( Guid timeseries, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException( );
        }
        public SimplePosition2DTimeseriesValueDataReader GetPosition2DTimeseriesValueCollectionByTimestampDataReader( DateTime timestamp )
        {
            const string sql = SimplePosition2DTimeseriesValueDataReader.BaseQuery + " WHERE " +
                    SimplePosition2DTimeseriesValueDataReader.ViewAliasName + ".[Timestamp] = @timestamp " +
                    " ORDER BY " + SimplePosition2DTimeseriesValueDataReader.ViewAliasName + ".[Timestamp]," +SimplePosition2DTimeseriesValueDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@timestamp", timestamp );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simplePosition2DTimeseriesValueDataReader = new SimplePosition2DTimeseriesValueDataReader( _loggerFactory, sqlDataReader );
                return simplePosition2DTimeseriesValueDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<Position2DTimeseriesValueObject> GetPosition2DTimeseriesValueCollectionByTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<Position2DTimeseriesValueObject> GetPosition2DTimeseriesValueCollectionAtTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<Position2DTimeseriesValueObject> GetPosition2DTimeseriesValueCollectionFromTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<Position2DTimeseriesValueObject> GetPosition2DTimeseriesValueCollectionUntilTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<Position2DTimeseriesValueObject> GetPosition2DTimeseriesValueCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException( );
        }
        // ---------------------------------------------------------------------
        // Position3DTimeseriesValue queries
        // ---------------------------------------------------------------------
        public SimplePosition3DTimeseriesValueDataReader GetPosition3DTimeseriesValueByIdDataReader( Guid id )
        {
            const string sql = SimplePosition3DTimeseriesValueDataReader.BaseQuery + "WHERE " + SimplePosition3DTimeseriesValueDataReader.ViewAliasName + ".[Id] = @id"; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                sqlCommandParameters.AddGuid( "@id", id );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simplePosition3DTimeseriesValueDataReader = new SimplePosition3DTimeseriesValueDataReader( _loggerFactory, sqlDataReader );
                return simplePosition3DTimeseriesValueDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public Position3DTimeseriesValueObject? GetPosition3DTimeseriesValueById( Guid id )
        {
            var simplePosition3DTimeseriesValueDataReader = GetPosition3DTimeseriesValueByIdDataReader( id );
            using ( simplePosition3DTimeseriesValueDataReader )
            {
                if ( simplePosition3DTimeseriesValueDataReader.Read( ) )
                {
                    var result = simplePosition3DTimeseriesValueDataReader.GetDataObject( );
                    return result;
                }
            }
            return null;
        }

        public void GetPosition3DTimeseriesValueById( Guid id, Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simplePosition3DTimeseriesValueDataReader = GetPosition3DTimeseriesValueByIdDataReader( id );
                using ( simplePosition3DTimeseriesValueDataReader )
                {
                    if ( simplePosition3DTimeseriesValueDataReader.Read( ) )
                    {
                        destinationWriter.Write( true );
                        simplePosition3DTimeseriesValueDataReader.WriteTo( destinationWriter );
                    }
                    else
                    {
                        destinationWriter.Write( false );
                    }
                }
            }
        }

        public SimplePosition3DTimeseriesValueDataReader GetPosition3DTimeseriesValueCollectionDataReader( )
        {
            const string sql = SimplePosition3DTimeseriesValueDataReader.BaseQuery; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simplePosition3DTimeseriesValueDataReader = new SimplePosition3DTimeseriesValueDataReader( _loggerFactory, sqlDataReader );
                return simplePosition3DTimeseriesValueDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public IList<Position3DTimeseriesValueObject> GetPosition3DTimeseriesValueCollection( )
        {
            var result = new List<Position3DTimeseriesValueObject>( );
            var simplePosition3DTimeseriesValueDataReader = GetPosition3DTimeseriesValueCollectionDataReader( );
            using ( simplePosition3DTimeseriesValueDataReader )
            {
                while ( simplePosition3DTimeseriesValueDataReader.Read( ) )
                {
                    var data = simplePosition3DTimeseriesValueDataReader.GetDataObject( );
                    result.Add( data );
                }
            }
            return result;
        }

        public void GetPosition3DTimeseriesValueCollection( Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simplePosition3DTimeseriesValueDataReader = GetPosition3DTimeseriesValueCollectionDataReader( );
                using ( simplePosition3DTimeseriesValueDataReader )
                {
                    simplePosition3DTimeseriesValueDataReader.WriteResultSetTo( destinationWriter );
                }
            }
        }

        public SimplePosition3DTimeseriesValueDataReader GetPosition3DTimeseriesValueCollectionByTimeseriesDataReader( Guid timeseries )
        {
            const string sql = SimplePosition3DTimeseriesValueDataReader.BaseQuery + " WHERE " +
                    SimplePosition3DTimeseriesValueDataReader.ViewAliasName + ".[Timeseries] = @timeseries " +
                    " ORDER BY " + SimplePosition3DTimeseriesValueDataReader.ViewAliasName + ".[Timeseries]," +SimplePosition3DTimeseriesValueDataReader.ViewAliasName + ".[Timestamp]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var timeseriesParameter = sqlCommandParameters.AddReference( "@timeseries", timeseries );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simplePosition3DTimeseriesValueDataReader = new SimplePosition3DTimeseriesValueDataReader( _loggerFactory, sqlDataReader );
                return simplePosition3DTimeseriesValueDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<Position3DTimeseriesValueObject> GetPosition3DTimeseriesValueCollectionByTimeseries( Guid timeseries )
        {
            throw new NotImplementedException( );
        }
        public SimplePosition3DTimeseriesValueDataReader GetPosition3DTimeseriesValueByTimeseriesAndTimestampDataReader( Guid timeseries, DateTime timestamp )
        {
            const string sql = SimplePosition3DTimeseriesValueDataReader.BaseQuery + " WHERE " +
                    SimplePosition3DTimeseriesValueDataReader.ViewAliasName + ".[Timeseries] = @timeseries AND " +
                    SimplePosition3DTimeseriesValueDataReader.ViewAliasName + ".[Timestamp] = @timestamp " +
                    " ORDER BY " + SimplePosition3DTimeseriesValueDataReader.ViewAliasName + ".[Timeseries]," +SimplePosition3DTimeseriesValueDataReader.ViewAliasName + ".[Timestamp]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var timeseriesParameter = sqlCommandParameters.AddReference( "@timeseries", timeseries );
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@timestamp", timestamp );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simplePosition3DTimeseriesValueDataReader = new SimplePosition3DTimeseriesValueDataReader( _loggerFactory, sqlDataReader );
                return simplePosition3DTimeseriesValueDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public Position3DTimeseriesValueObject? GetPosition3DTimeseriesValueByTimeseriesAndTimestamp( Guid timeseries, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public Position3DTimeseriesValueObject? GetPosition3DTimeseriesValueByTimeseriesAtTimestamp( Guid timeseries, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<Position3DTimeseriesValueObject> GetPosition3DTimeseriesValueByTimeseriesFromTimestamp( Guid timeseries, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<Position3DTimeseriesValueObject> GetPosition3DTimeseriesValueByTimeseriesUntilTimestamp( Guid timeseries, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<Position3DTimeseriesValueObject> GetPosition3DTimeseriesValueByTimeseriesOverTimestamp( Guid timeseries, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException( );
        }
        public SimplePosition3DTimeseriesValueDataReader GetPosition3DTimeseriesValueCollectionByTimestampDataReader( DateTime timestamp )
        {
            const string sql = SimplePosition3DTimeseriesValueDataReader.BaseQuery + " WHERE " +
                    SimplePosition3DTimeseriesValueDataReader.ViewAliasName + ".[Timestamp] = @timestamp " +
                    " ORDER BY " + SimplePosition3DTimeseriesValueDataReader.ViewAliasName + ".[Timestamp]," +SimplePosition3DTimeseriesValueDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@timestamp", timestamp );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simplePosition3DTimeseriesValueDataReader = new SimplePosition3DTimeseriesValueDataReader( _loggerFactory, sqlDataReader );
                return simplePosition3DTimeseriesValueDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<Position3DTimeseriesValueObject> GetPosition3DTimeseriesValueCollectionByTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<Position3DTimeseriesValueObject> GetPosition3DTimeseriesValueCollectionAtTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<Position3DTimeseriesValueObject> GetPosition3DTimeseriesValueCollectionFromTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<Position3DTimeseriesValueObject> GetPosition3DTimeseriesValueCollectionUntilTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<Position3DTimeseriesValueObject> GetPosition3DTimeseriesValueCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException( );
        }
        // ---------------------------------------------------------------------
        // ProcessTrackValueResult queries
        // ---------------------------------------------------------------------
        public SimpleProcessTrackValueResultDataReader GetProcessTrackValueResultByIdDataReader( Guid id )
        {
            const string sql = SimpleProcessTrackValueResultDataReader.BaseQuery + "WHERE " + SimpleProcessTrackValueResultDataReader.ViewAliasName + ".[Id] = @id"; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                sqlCommandParameters.AddGuid( "@id", id );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleProcessTrackValueResultDataReader = new SimpleProcessTrackValueResultDataReader( _loggerFactory, sqlDataReader );
                return simpleProcessTrackValueResultDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public ProcessTrackValueResultObject? GetProcessTrackValueResultById( Guid id )
        {
            var simpleProcessTrackValueResultDataReader = GetProcessTrackValueResultByIdDataReader( id );
            using ( simpleProcessTrackValueResultDataReader )
            {
                if ( simpleProcessTrackValueResultDataReader.Read( ) )
                {
                    var result = simpleProcessTrackValueResultDataReader.GetDataObject( );
                    return result;
                }
            }
            return null;
        }

        public void GetProcessTrackValueResultById( Guid id, Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleProcessTrackValueResultDataReader = GetProcessTrackValueResultByIdDataReader( id );
                using ( simpleProcessTrackValueResultDataReader )
                {
                    if ( simpleProcessTrackValueResultDataReader.Read( ) )
                    {
                        destinationWriter.Write( true );
                        simpleProcessTrackValueResultDataReader.WriteTo( destinationWriter );
                    }
                    else
                    {
                        destinationWriter.Write( false );
                    }
                }
            }
        }

        public SimpleProcessTrackValueResultDataReader GetProcessTrackValueResultCollectionDataReader( )
        {
            const string sql = SimpleProcessTrackValueResultDataReader.BaseQuery; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleProcessTrackValueResultDataReader = new SimpleProcessTrackValueResultDataReader( _loggerFactory, sqlDataReader );
                return simpleProcessTrackValueResultDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public IList<ProcessTrackValueResultObject> GetProcessTrackValueResultCollection( )
        {
            var result = new List<ProcessTrackValueResultObject>( );
            var simpleProcessTrackValueResultDataReader = GetProcessTrackValueResultCollectionDataReader( );
            using ( simpleProcessTrackValueResultDataReader )
            {
                while ( simpleProcessTrackValueResultDataReader.Read( ) )
                {
                    var data = simpleProcessTrackValueResultDataReader.GetDataObject( );
                    result.Add( data );
                }
            }
            return result;
        }

        public void GetProcessTrackValueResultCollection( Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleProcessTrackValueResultDataReader = GetProcessTrackValueResultCollectionDataReader( );
                using ( simpleProcessTrackValueResultDataReader )
                {
                    simpleProcessTrackValueResultDataReader.WriteResultSetTo( destinationWriter );
                }
            }
        }

        // ---------------------------------------------------------------------
        // Property queries
        // ---------------------------------------------------------------------
        public ComplexPropertyDataReader GetPropertyByIdDataReader( Guid id )
        {
            const string sql = ComplexPropertyDataReader.BaseQuery + "WHERE " + ComplexPropertyDataReader.ViewAliasName + ".[Id] = @id"; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                sqlCommandParameters.AddGuid( "@id", id );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var complexPropertyDataReader = new ComplexPropertyDataReader( _loggerFactory, sqlDataReader );
                return complexPropertyDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public PropertyObject? GetPropertyById( Guid id )
        {
            var complexPropertyDataReader = GetPropertyByIdDataReader( id );
            using ( complexPropertyDataReader )
            {
                if ( complexPropertyDataReader.Read( ) )
                {
                    var result = complexPropertyDataReader.GetDataObject( );
                    return result;
                }
            }
            return null;
        }

        public void GetPropertyById( Guid id, Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var complexPropertyDataReader = GetPropertyByIdDataReader( id );
                using ( complexPropertyDataReader )
                {
                    if ( complexPropertyDataReader.Read( ) )
                    {
                        destinationWriter.Write( true );
                        complexPropertyDataReader.WriteTo( destinationWriter );
                    }
                    else
                    {
                        destinationWriter.Write( false );
                    }
                }
            }
        }

        public ComplexPropertyDataReader GetPropertyCollectionDataReader( )
        {
            const string sql = ComplexPropertyDataReader.BaseQuery; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var complexPropertyDataReader = new ComplexPropertyDataReader( _loggerFactory, sqlDataReader );
                return complexPropertyDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public IList<PropertyObject> GetPropertyCollection( )
        {
            var result = new List<PropertyObject>( );
            var complexPropertyDataReader = GetPropertyCollectionDataReader( );
            using ( complexPropertyDataReader )
            {
                while ( complexPropertyDataReader.Read( ) )
                {
                    var data = complexPropertyDataReader.GetDataObject( );
                    result.Add( data );
                }
            }
            return result;
        }

        public void GetPropertyCollection( Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var complexPropertyDataReader = GetPropertyCollectionDataReader( );
                using ( complexPropertyDataReader )
                {
                    complexPropertyDataReader.WriteResultSetTo( destinationWriter );
                }
            }
        }

        public ComplexPropertyDataReader GetPropertyCollectionByElementDataReader( Guid element )
        {
            const string sql = ComplexPropertyDataReader.BaseQuery + " WHERE " +
                    ComplexPropertyDataReader.ViewAliasName + ".[Element] = @element " +
                    " ORDER BY " + ComplexPropertyDataReader.ViewAliasName + ".[Element]," +ComplexPropertyDataReader.ViewAliasName + ".[Definition]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var elementParameter = sqlCommandParameters.AddReference( "@element", element );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var complexPropertyDataReader = new ComplexPropertyDataReader( _loggerFactory, sqlDataReader );
                return complexPropertyDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<PropertyObject> GetPropertyCollectionByElement( Guid element )
        {
            throw new NotImplementedException( );
        }
        public ComplexPropertyDataReader GetPropertyByElementAndDefinitionDataReader( Guid element, Guid definition )
        {
            const string sql = ComplexPropertyDataReader.BaseQuery + " WHERE " +
                    ComplexPropertyDataReader.ViewAliasName + ".[Element] = @element AND " +
                    ComplexPropertyDataReader.ViewAliasName + ".[Definition] = @definition " +
                    " ORDER BY " + ComplexPropertyDataReader.ViewAliasName + ".[Element]," +ComplexPropertyDataReader.ViewAliasName + ".[Definition]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var elementParameter = sqlCommandParameters.AddReference( "@element", element );
                var definitionParameter = sqlCommandParameters.AddReference( "@definition", definition );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var complexPropertyDataReader = new ComplexPropertyDataReader( _loggerFactory, sqlDataReader );
                return complexPropertyDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public PropertyObject? GetPropertyByElementAndDefinition( Guid element, Guid definition )
        {
            throw new NotImplementedException( );
        }
        public ComplexPropertyDataReader GetPropertyCollectionByDefinitionDataReader( Guid definition )
        {
            const string sql = ComplexPropertyDataReader.BaseQuery + " WHERE " +
                    ComplexPropertyDataReader.ViewAliasName + ".[Definition] = @definition " +
                    " ORDER BY " + ComplexPropertyDataReader.ViewAliasName + ".[Definition]," +ComplexPropertyDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var definitionParameter = sqlCommandParameters.AddReference( "@definition", definition );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var complexPropertyDataReader = new ComplexPropertyDataReader( _loggerFactory, sqlDataReader );
                return complexPropertyDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<PropertyObject> GetPropertyCollectionByDefinition( Guid definition )
        {
            throw new NotImplementedException( );
        }
        // ---------------------------------------------------------------------
        // BinaryProperty queries
        // ---------------------------------------------------------------------
        public SimpleBinaryPropertyDataReader GetBinaryPropertyByIdDataReader( Guid id )
        {
            const string sql = SimpleBinaryPropertyDataReader.BaseQuery + "WHERE " + SimpleBinaryPropertyDataReader.ViewAliasName + ".[Id] = @id"; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                sqlCommandParameters.AddGuid( "@id", id );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleBinaryPropertyDataReader = new SimpleBinaryPropertyDataReader( _loggerFactory, sqlDataReader );
                return simpleBinaryPropertyDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public BinaryPropertyObject? GetBinaryPropertyById( Guid id )
        {
            var simpleBinaryPropertyDataReader = GetBinaryPropertyByIdDataReader( id );
            using ( simpleBinaryPropertyDataReader )
            {
                if ( simpleBinaryPropertyDataReader.Read( ) )
                {
                    var result = simpleBinaryPropertyDataReader.GetDataObject( );
                    return result;
                }
            }
            return null;
        }

        public void GetBinaryPropertyById( Guid id, Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleBinaryPropertyDataReader = GetBinaryPropertyByIdDataReader( id );
                using ( simpleBinaryPropertyDataReader )
                {
                    if ( simpleBinaryPropertyDataReader.Read( ) )
                    {
                        destinationWriter.Write( true );
                        simpleBinaryPropertyDataReader.WriteTo( destinationWriter );
                    }
                    else
                    {
                        destinationWriter.Write( false );
                    }
                }
            }
        }

        public SimpleBinaryPropertyDataReader GetBinaryPropertyCollectionDataReader( )
        {
            const string sql = SimpleBinaryPropertyDataReader.BaseQuery; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleBinaryPropertyDataReader = new SimpleBinaryPropertyDataReader( _loggerFactory, sqlDataReader );
                return simpleBinaryPropertyDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public IList<BinaryPropertyObject> GetBinaryPropertyCollection( )
        {
            var result = new List<BinaryPropertyObject>( );
            var simpleBinaryPropertyDataReader = GetBinaryPropertyCollectionDataReader( );
            using ( simpleBinaryPropertyDataReader )
            {
                while ( simpleBinaryPropertyDataReader.Read( ) )
                {
                    var data = simpleBinaryPropertyDataReader.GetDataObject( );
                    result.Add( data );
                }
            }
            return result;
        }

        public void GetBinaryPropertyCollection( Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleBinaryPropertyDataReader = GetBinaryPropertyCollectionDataReader( );
                using ( simpleBinaryPropertyDataReader )
                {
                    simpleBinaryPropertyDataReader.WriteResultSetTo( destinationWriter );
                }
            }
        }

        public SimpleBinaryPropertyDataReader GetBinaryPropertyCollectionByElementDataReader( Guid element )
        {
            const string sql = SimpleBinaryPropertyDataReader.BaseQuery + " WHERE " +
                    SimpleBinaryPropertyDataReader.ViewAliasName + ".[Element] = @element " +
                    " ORDER BY " + SimpleBinaryPropertyDataReader.ViewAliasName + ".[Element]," +SimpleBinaryPropertyDataReader.ViewAliasName + ".[Definition]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var elementParameter = sqlCommandParameters.AddReference( "@element", element );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleBinaryPropertyDataReader = new SimpleBinaryPropertyDataReader( _loggerFactory, sqlDataReader );
                return simpleBinaryPropertyDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<BinaryPropertyObject> GetBinaryPropertyCollectionByElement( Guid element )
        {
            throw new NotImplementedException( );
        }
        public SimpleBinaryPropertyDataReader GetBinaryPropertyByElementAndDefinitionDataReader( Guid element, Guid definition )
        {
            const string sql = SimpleBinaryPropertyDataReader.BaseQuery + " WHERE " +
                    SimpleBinaryPropertyDataReader.ViewAliasName + ".[Element] = @element AND " +
                    SimpleBinaryPropertyDataReader.ViewAliasName + ".[Definition] = @definition " +
                    " ORDER BY " + SimpleBinaryPropertyDataReader.ViewAliasName + ".[Element]," +SimpleBinaryPropertyDataReader.ViewAliasName + ".[Definition]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var elementParameter = sqlCommandParameters.AddReference( "@element", element );
                var definitionParameter = sqlCommandParameters.AddReference( "@definition", definition );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleBinaryPropertyDataReader = new SimpleBinaryPropertyDataReader( _loggerFactory, sqlDataReader );
                return simpleBinaryPropertyDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public BinaryPropertyObject? GetBinaryPropertyByElementAndDefinition( Guid element, Guid definition )
        {
            throw new NotImplementedException( );
        }
        public SimpleBinaryPropertyDataReader GetBinaryPropertyCollectionByDefinitionDataReader( Guid definition )
        {
            const string sql = SimpleBinaryPropertyDataReader.BaseQuery + " WHERE " +
                    SimpleBinaryPropertyDataReader.ViewAliasName + ".[Definition] = @definition " +
                    " ORDER BY " + SimpleBinaryPropertyDataReader.ViewAliasName + ".[Definition]," +SimpleBinaryPropertyDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var definitionParameter = sqlCommandParameters.AddReference( "@definition", definition );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleBinaryPropertyDataReader = new SimpleBinaryPropertyDataReader( _loggerFactory, sqlDataReader );
                return simpleBinaryPropertyDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<BinaryPropertyObject> GetBinaryPropertyCollectionByDefinition( Guid definition )
        {
            throw new NotImplementedException( );
        }
        // ---------------------------------------------------------------------
        // BooleanProperty queries
        // ---------------------------------------------------------------------
        public SimpleBooleanPropertyDataReader GetBooleanPropertyByIdDataReader( Guid id )
        {
            const string sql = SimpleBooleanPropertyDataReader.BaseQuery + "WHERE " + SimpleBooleanPropertyDataReader.ViewAliasName + ".[Id] = @id"; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                sqlCommandParameters.AddGuid( "@id", id );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleBooleanPropertyDataReader = new SimpleBooleanPropertyDataReader( _loggerFactory, sqlDataReader );
                return simpleBooleanPropertyDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public BooleanPropertyObject? GetBooleanPropertyById( Guid id )
        {
            var simpleBooleanPropertyDataReader = GetBooleanPropertyByIdDataReader( id );
            using ( simpleBooleanPropertyDataReader )
            {
                if ( simpleBooleanPropertyDataReader.Read( ) )
                {
                    var result = simpleBooleanPropertyDataReader.GetDataObject( );
                    return result;
                }
            }
            return null;
        }

        public void GetBooleanPropertyById( Guid id, Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleBooleanPropertyDataReader = GetBooleanPropertyByIdDataReader( id );
                using ( simpleBooleanPropertyDataReader )
                {
                    if ( simpleBooleanPropertyDataReader.Read( ) )
                    {
                        destinationWriter.Write( true );
                        simpleBooleanPropertyDataReader.WriteTo( destinationWriter );
                    }
                    else
                    {
                        destinationWriter.Write( false );
                    }
                }
            }
        }

        public SimpleBooleanPropertyDataReader GetBooleanPropertyCollectionDataReader( )
        {
            const string sql = SimpleBooleanPropertyDataReader.BaseQuery; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleBooleanPropertyDataReader = new SimpleBooleanPropertyDataReader( _loggerFactory, sqlDataReader );
                return simpleBooleanPropertyDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public IList<BooleanPropertyObject> GetBooleanPropertyCollection( )
        {
            var result = new List<BooleanPropertyObject>( );
            var simpleBooleanPropertyDataReader = GetBooleanPropertyCollectionDataReader( );
            using ( simpleBooleanPropertyDataReader )
            {
                while ( simpleBooleanPropertyDataReader.Read( ) )
                {
                    var data = simpleBooleanPropertyDataReader.GetDataObject( );
                    result.Add( data );
                }
            }
            return result;
        }

        public void GetBooleanPropertyCollection( Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleBooleanPropertyDataReader = GetBooleanPropertyCollectionDataReader( );
                using ( simpleBooleanPropertyDataReader )
                {
                    simpleBooleanPropertyDataReader.WriteResultSetTo( destinationWriter );
                }
            }
        }

        public SimpleBooleanPropertyDataReader GetBooleanPropertyCollectionByElementDataReader( Guid element )
        {
            const string sql = SimpleBooleanPropertyDataReader.BaseQuery + " WHERE " +
                    SimpleBooleanPropertyDataReader.ViewAliasName + ".[Element] = @element " +
                    " ORDER BY " + SimpleBooleanPropertyDataReader.ViewAliasName + ".[Element]," +SimpleBooleanPropertyDataReader.ViewAliasName + ".[Definition]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var elementParameter = sqlCommandParameters.AddReference( "@element", element );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleBooleanPropertyDataReader = new SimpleBooleanPropertyDataReader( _loggerFactory, sqlDataReader );
                return simpleBooleanPropertyDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<BooleanPropertyObject> GetBooleanPropertyCollectionByElement( Guid element )
        {
            throw new NotImplementedException( );
        }
        public SimpleBooleanPropertyDataReader GetBooleanPropertyByElementAndDefinitionDataReader( Guid element, Guid definition )
        {
            const string sql = SimpleBooleanPropertyDataReader.BaseQuery + " WHERE " +
                    SimpleBooleanPropertyDataReader.ViewAliasName + ".[Element] = @element AND " +
                    SimpleBooleanPropertyDataReader.ViewAliasName + ".[Definition] = @definition " +
                    " ORDER BY " + SimpleBooleanPropertyDataReader.ViewAliasName + ".[Element]," +SimpleBooleanPropertyDataReader.ViewAliasName + ".[Definition]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var elementParameter = sqlCommandParameters.AddReference( "@element", element );
                var definitionParameter = sqlCommandParameters.AddReference( "@definition", definition );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleBooleanPropertyDataReader = new SimpleBooleanPropertyDataReader( _loggerFactory, sqlDataReader );
                return simpleBooleanPropertyDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public BooleanPropertyObject? GetBooleanPropertyByElementAndDefinition( Guid element, Guid definition )
        {
            throw new NotImplementedException( );
        }
        public SimpleBooleanPropertyDataReader GetBooleanPropertyCollectionByDefinitionDataReader( Guid definition )
        {
            const string sql = SimpleBooleanPropertyDataReader.BaseQuery + " WHERE " +
                    SimpleBooleanPropertyDataReader.ViewAliasName + ".[Definition] = @definition " +
                    " ORDER BY " + SimpleBooleanPropertyDataReader.ViewAliasName + ".[Definition]," +SimpleBooleanPropertyDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var definitionParameter = sqlCommandParameters.AddReference( "@definition", definition );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleBooleanPropertyDataReader = new SimpleBooleanPropertyDataReader( _loggerFactory, sqlDataReader );
                return simpleBooleanPropertyDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<BooleanPropertyObject> GetBooleanPropertyCollectionByDefinition( Guid definition )
        {
            throw new NotImplementedException( );
        }
        // ---------------------------------------------------------------------
        // ByteProperty queries
        // ---------------------------------------------------------------------
        public SimpleBytePropertyDataReader GetBytePropertyByIdDataReader( Guid id )
        {
            const string sql = SimpleBytePropertyDataReader.BaseQuery + "WHERE " + SimpleBytePropertyDataReader.ViewAliasName + ".[Id] = @id"; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                sqlCommandParameters.AddGuid( "@id", id );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleBytePropertyDataReader = new SimpleBytePropertyDataReader( _loggerFactory, sqlDataReader );
                return simpleBytePropertyDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public BytePropertyObject? GetBytePropertyById( Guid id )
        {
            var simpleBytePropertyDataReader = GetBytePropertyByIdDataReader( id );
            using ( simpleBytePropertyDataReader )
            {
                if ( simpleBytePropertyDataReader.Read( ) )
                {
                    var result = simpleBytePropertyDataReader.GetDataObject( );
                    return result;
                }
            }
            return null;
        }

        public void GetBytePropertyById( Guid id, Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleBytePropertyDataReader = GetBytePropertyByIdDataReader( id );
                using ( simpleBytePropertyDataReader )
                {
                    if ( simpleBytePropertyDataReader.Read( ) )
                    {
                        destinationWriter.Write( true );
                        simpleBytePropertyDataReader.WriteTo( destinationWriter );
                    }
                    else
                    {
                        destinationWriter.Write( false );
                    }
                }
            }
        }

        public SimpleBytePropertyDataReader GetBytePropertyCollectionDataReader( )
        {
            const string sql = SimpleBytePropertyDataReader.BaseQuery; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleBytePropertyDataReader = new SimpleBytePropertyDataReader( _loggerFactory, sqlDataReader );
                return simpleBytePropertyDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public IList<BytePropertyObject> GetBytePropertyCollection( )
        {
            var result = new List<BytePropertyObject>( );
            var simpleBytePropertyDataReader = GetBytePropertyCollectionDataReader( );
            using ( simpleBytePropertyDataReader )
            {
                while ( simpleBytePropertyDataReader.Read( ) )
                {
                    var data = simpleBytePropertyDataReader.GetDataObject( );
                    result.Add( data );
                }
            }
            return result;
        }

        public void GetBytePropertyCollection( Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleBytePropertyDataReader = GetBytePropertyCollectionDataReader( );
                using ( simpleBytePropertyDataReader )
                {
                    simpleBytePropertyDataReader.WriteResultSetTo( destinationWriter );
                }
            }
        }

        public SimpleBytePropertyDataReader GetBytePropertyCollectionByElementDataReader( Guid element )
        {
            const string sql = SimpleBytePropertyDataReader.BaseQuery + " WHERE " +
                    SimpleBytePropertyDataReader.ViewAliasName + ".[Element] = @element " +
                    " ORDER BY " + SimpleBytePropertyDataReader.ViewAliasName + ".[Element]," +SimpleBytePropertyDataReader.ViewAliasName + ".[Definition]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var elementParameter = sqlCommandParameters.AddReference( "@element", element );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleBytePropertyDataReader = new SimpleBytePropertyDataReader( _loggerFactory, sqlDataReader );
                return simpleBytePropertyDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<BytePropertyObject> GetBytePropertyCollectionByElement( Guid element )
        {
            throw new NotImplementedException( );
        }
        public SimpleBytePropertyDataReader GetBytePropertyByElementAndDefinitionDataReader( Guid element, Guid definition )
        {
            const string sql = SimpleBytePropertyDataReader.BaseQuery + " WHERE " +
                    SimpleBytePropertyDataReader.ViewAliasName + ".[Element] = @element AND " +
                    SimpleBytePropertyDataReader.ViewAliasName + ".[Definition] = @definition " +
                    " ORDER BY " + SimpleBytePropertyDataReader.ViewAliasName + ".[Element]," +SimpleBytePropertyDataReader.ViewAliasName + ".[Definition]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var elementParameter = sqlCommandParameters.AddReference( "@element", element );
                var definitionParameter = sqlCommandParameters.AddReference( "@definition", definition );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleBytePropertyDataReader = new SimpleBytePropertyDataReader( _loggerFactory, sqlDataReader );
                return simpleBytePropertyDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public BytePropertyObject? GetBytePropertyByElementAndDefinition( Guid element, Guid definition )
        {
            throw new NotImplementedException( );
        }
        public SimpleBytePropertyDataReader GetBytePropertyCollectionByDefinitionDataReader( Guid definition )
        {
            const string sql = SimpleBytePropertyDataReader.BaseQuery + " WHERE " +
                    SimpleBytePropertyDataReader.ViewAliasName + ".[Definition] = @definition " +
                    " ORDER BY " + SimpleBytePropertyDataReader.ViewAliasName + ".[Definition]," +SimpleBytePropertyDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var definitionParameter = sqlCommandParameters.AddReference( "@definition", definition );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleBytePropertyDataReader = new SimpleBytePropertyDataReader( _loggerFactory, sqlDataReader );
                return simpleBytePropertyDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<BytePropertyObject> GetBytePropertyCollectionByDefinition( Guid definition )
        {
            throw new NotImplementedException( );
        }
        // ---------------------------------------------------------------------
        // DateTimeProperty queries
        // ---------------------------------------------------------------------
        public SimpleDateTimePropertyDataReader GetDateTimePropertyByIdDataReader( Guid id )
        {
            const string sql = SimpleDateTimePropertyDataReader.BaseQuery + "WHERE " + SimpleDateTimePropertyDataReader.ViewAliasName + ".[Id] = @id"; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                sqlCommandParameters.AddGuid( "@id", id );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleDateTimePropertyDataReader = new SimpleDateTimePropertyDataReader( _loggerFactory, sqlDataReader );
                return simpleDateTimePropertyDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public DateTimePropertyObject? GetDateTimePropertyById( Guid id )
        {
            var simpleDateTimePropertyDataReader = GetDateTimePropertyByIdDataReader( id );
            using ( simpleDateTimePropertyDataReader )
            {
                if ( simpleDateTimePropertyDataReader.Read( ) )
                {
                    var result = simpleDateTimePropertyDataReader.GetDataObject( );
                    return result;
                }
            }
            return null;
        }

        public void GetDateTimePropertyById( Guid id, Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleDateTimePropertyDataReader = GetDateTimePropertyByIdDataReader( id );
                using ( simpleDateTimePropertyDataReader )
                {
                    if ( simpleDateTimePropertyDataReader.Read( ) )
                    {
                        destinationWriter.Write( true );
                        simpleDateTimePropertyDataReader.WriteTo( destinationWriter );
                    }
                    else
                    {
                        destinationWriter.Write( false );
                    }
                }
            }
        }

        public SimpleDateTimePropertyDataReader GetDateTimePropertyCollectionDataReader( )
        {
            const string sql = SimpleDateTimePropertyDataReader.BaseQuery; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleDateTimePropertyDataReader = new SimpleDateTimePropertyDataReader( _loggerFactory, sqlDataReader );
                return simpleDateTimePropertyDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public IList<DateTimePropertyObject> GetDateTimePropertyCollection( )
        {
            var result = new List<DateTimePropertyObject>( );
            var simpleDateTimePropertyDataReader = GetDateTimePropertyCollectionDataReader( );
            using ( simpleDateTimePropertyDataReader )
            {
                while ( simpleDateTimePropertyDataReader.Read( ) )
                {
                    var data = simpleDateTimePropertyDataReader.GetDataObject( );
                    result.Add( data );
                }
            }
            return result;
        }

        public void GetDateTimePropertyCollection( Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleDateTimePropertyDataReader = GetDateTimePropertyCollectionDataReader( );
                using ( simpleDateTimePropertyDataReader )
                {
                    simpleDateTimePropertyDataReader.WriteResultSetTo( destinationWriter );
                }
            }
        }

        public SimpleDateTimePropertyDataReader GetDateTimePropertyCollectionByElementDataReader( Guid element )
        {
            const string sql = SimpleDateTimePropertyDataReader.BaseQuery + " WHERE " +
                    SimpleDateTimePropertyDataReader.ViewAliasName + ".[Element] = @element " +
                    " ORDER BY " + SimpleDateTimePropertyDataReader.ViewAliasName + ".[Element]," +SimpleDateTimePropertyDataReader.ViewAliasName + ".[Definition]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var elementParameter = sqlCommandParameters.AddReference( "@element", element );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleDateTimePropertyDataReader = new SimpleDateTimePropertyDataReader( _loggerFactory, sqlDataReader );
                return simpleDateTimePropertyDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<DateTimePropertyObject> GetDateTimePropertyCollectionByElement( Guid element )
        {
            throw new NotImplementedException( );
        }
        public SimpleDateTimePropertyDataReader GetDateTimePropertyByElementAndDefinitionDataReader( Guid element, Guid definition )
        {
            const string sql = SimpleDateTimePropertyDataReader.BaseQuery + " WHERE " +
                    SimpleDateTimePropertyDataReader.ViewAliasName + ".[Element] = @element AND " +
                    SimpleDateTimePropertyDataReader.ViewAliasName + ".[Definition] = @definition " +
                    " ORDER BY " + SimpleDateTimePropertyDataReader.ViewAliasName + ".[Element]," +SimpleDateTimePropertyDataReader.ViewAliasName + ".[Definition]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var elementParameter = sqlCommandParameters.AddReference( "@element", element );
                var definitionParameter = sqlCommandParameters.AddReference( "@definition", definition );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleDateTimePropertyDataReader = new SimpleDateTimePropertyDataReader( _loggerFactory, sqlDataReader );
                return simpleDateTimePropertyDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public DateTimePropertyObject? GetDateTimePropertyByElementAndDefinition( Guid element, Guid definition )
        {
            throw new NotImplementedException( );
        }
        public SimpleDateTimePropertyDataReader GetDateTimePropertyCollectionByDefinitionDataReader( Guid definition )
        {
            const string sql = SimpleDateTimePropertyDataReader.BaseQuery + " WHERE " +
                    SimpleDateTimePropertyDataReader.ViewAliasName + ".[Definition] = @definition " +
                    " ORDER BY " + SimpleDateTimePropertyDataReader.ViewAliasName + ".[Definition]," +SimpleDateTimePropertyDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var definitionParameter = sqlCommandParameters.AddReference( "@definition", definition );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleDateTimePropertyDataReader = new SimpleDateTimePropertyDataReader( _loggerFactory, sqlDataReader );
                return simpleDateTimePropertyDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<DateTimePropertyObject> GetDateTimePropertyCollectionByDefinition( Guid definition )
        {
            throw new NotImplementedException( );
        }
        // ---------------------------------------------------------------------
        // DoubleProperty queries
        // ---------------------------------------------------------------------
        public SimpleDoublePropertyDataReader GetDoublePropertyByIdDataReader( Guid id )
        {
            const string sql = SimpleDoublePropertyDataReader.BaseQuery + "WHERE " + SimpleDoublePropertyDataReader.ViewAliasName + ".[Id] = @id"; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                sqlCommandParameters.AddGuid( "@id", id );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleDoublePropertyDataReader = new SimpleDoublePropertyDataReader( _loggerFactory, sqlDataReader );
                return simpleDoublePropertyDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public DoublePropertyObject? GetDoublePropertyById( Guid id )
        {
            var simpleDoublePropertyDataReader = GetDoublePropertyByIdDataReader( id );
            using ( simpleDoublePropertyDataReader )
            {
                if ( simpleDoublePropertyDataReader.Read( ) )
                {
                    var result = simpleDoublePropertyDataReader.GetDataObject( );
                    return result;
                }
            }
            return null;
        }

        public void GetDoublePropertyById( Guid id, Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleDoublePropertyDataReader = GetDoublePropertyByIdDataReader( id );
                using ( simpleDoublePropertyDataReader )
                {
                    if ( simpleDoublePropertyDataReader.Read( ) )
                    {
                        destinationWriter.Write( true );
                        simpleDoublePropertyDataReader.WriteTo( destinationWriter );
                    }
                    else
                    {
                        destinationWriter.Write( false );
                    }
                }
            }
        }

        public SimpleDoublePropertyDataReader GetDoublePropertyCollectionDataReader( )
        {
            const string sql = SimpleDoublePropertyDataReader.BaseQuery; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleDoublePropertyDataReader = new SimpleDoublePropertyDataReader( _loggerFactory, sqlDataReader );
                return simpleDoublePropertyDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public IList<DoublePropertyObject> GetDoublePropertyCollection( )
        {
            var result = new List<DoublePropertyObject>( );
            var simpleDoublePropertyDataReader = GetDoublePropertyCollectionDataReader( );
            using ( simpleDoublePropertyDataReader )
            {
                while ( simpleDoublePropertyDataReader.Read( ) )
                {
                    var data = simpleDoublePropertyDataReader.GetDataObject( );
                    result.Add( data );
                }
            }
            return result;
        }

        public void GetDoublePropertyCollection( Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleDoublePropertyDataReader = GetDoublePropertyCollectionDataReader( );
                using ( simpleDoublePropertyDataReader )
                {
                    simpleDoublePropertyDataReader.WriteResultSetTo( destinationWriter );
                }
            }
        }

        public SimpleDoublePropertyDataReader GetDoublePropertyCollectionByElementDataReader( Guid element )
        {
            const string sql = SimpleDoublePropertyDataReader.BaseQuery + " WHERE " +
                    SimpleDoublePropertyDataReader.ViewAliasName + ".[Element] = @element " +
                    " ORDER BY " + SimpleDoublePropertyDataReader.ViewAliasName + ".[Element]," +SimpleDoublePropertyDataReader.ViewAliasName + ".[Definition]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var elementParameter = sqlCommandParameters.AddReference( "@element", element );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleDoublePropertyDataReader = new SimpleDoublePropertyDataReader( _loggerFactory, sqlDataReader );
                return simpleDoublePropertyDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<DoublePropertyObject> GetDoublePropertyCollectionByElement( Guid element )
        {
            throw new NotImplementedException( );
        }
        public SimpleDoublePropertyDataReader GetDoublePropertyByElementAndDefinitionDataReader( Guid element, Guid definition )
        {
            const string sql = SimpleDoublePropertyDataReader.BaseQuery + " WHERE " +
                    SimpleDoublePropertyDataReader.ViewAliasName + ".[Element] = @element AND " +
                    SimpleDoublePropertyDataReader.ViewAliasName + ".[Definition] = @definition " +
                    " ORDER BY " + SimpleDoublePropertyDataReader.ViewAliasName + ".[Element]," +SimpleDoublePropertyDataReader.ViewAliasName + ".[Definition]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var elementParameter = sqlCommandParameters.AddReference( "@element", element );
                var definitionParameter = sqlCommandParameters.AddReference( "@definition", definition );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleDoublePropertyDataReader = new SimpleDoublePropertyDataReader( _loggerFactory, sqlDataReader );
                return simpleDoublePropertyDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public DoublePropertyObject? GetDoublePropertyByElementAndDefinition( Guid element, Guid definition )
        {
            throw new NotImplementedException( );
        }
        public SimpleDoublePropertyDataReader GetDoublePropertyCollectionByDefinitionDataReader( Guid definition )
        {
            const string sql = SimpleDoublePropertyDataReader.BaseQuery + " WHERE " +
                    SimpleDoublePropertyDataReader.ViewAliasName + ".[Definition] = @definition " +
                    " ORDER BY " + SimpleDoublePropertyDataReader.ViewAliasName + ".[Definition]," +SimpleDoublePropertyDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var definitionParameter = sqlCommandParameters.AddReference( "@definition", definition );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleDoublePropertyDataReader = new SimpleDoublePropertyDataReader( _loggerFactory, sqlDataReader );
                return simpleDoublePropertyDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<DoublePropertyObject> GetDoublePropertyCollectionByDefinition( Guid definition )
        {
            throw new NotImplementedException( );
        }
        // ---------------------------------------------------------------------
        // GuidProperty queries
        // ---------------------------------------------------------------------
        public SimpleGuidPropertyDataReader GetGuidPropertyByIdDataReader( Guid id )
        {
            const string sql = SimpleGuidPropertyDataReader.BaseQuery + "WHERE " + SimpleGuidPropertyDataReader.ViewAliasName + ".[Id] = @id"; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                sqlCommandParameters.AddGuid( "@id", id );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleGuidPropertyDataReader = new SimpleGuidPropertyDataReader( _loggerFactory, sqlDataReader );
                return simpleGuidPropertyDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public GuidPropertyObject? GetGuidPropertyById( Guid id )
        {
            var simpleGuidPropertyDataReader = GetGuidPropertyByIdDataReader( id );
            using ( simpleGuidPropertyDataReader )
            {
                if ( simpleGuidPropertyDataReader.Read( ) )
                {
                    var result = simpleGuidPropertyDataReader.GetDataObject( );
                    return result;
                }
            }
            return null;
        }

        public void GetGuidPropertyById( Guid id, Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleGuidPropertyDataReader = GetGuidPropertyByIdDataReader( id );
                using ( simpleGuidPropertyDataReader )
                {
                    if ( simpleGuidPropertyDataReader.Read( ) )
                    {
                        destinationWriter.Write( true );
                        simpleGuidPropertyDataReader.WriteTo( destinationWriter );
                    }
                    else
                    {
                        destinationWriter.Write( false );
                    }
                }
            }
        }

        public SimpleGuidPropertyDataReader GetGuidPropertyCollectionDataReader( )
        {
            const string sql = SimpleGuidPropertyDataReader.BaseQuery; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleGuidPropertyDataReader = new SimpleGuidPropertyDataReader( _loggerFactory, sqlDataReader );
                return simpleGuidPropertyDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public IList<GuidPropertyObject> GetGuidPropertyCollection( )
        {
            var result = new List<GuidPropertyObject>( );
            var simpleGuidPropertyDataReader = GetGuidPropertyCollectionDataReader( );
            using ( simpleGuidPropertyDataReader )
            {
                while ( simpleGuidPropertyDataReader.Read( ) )
                {
                    var data = simpleGuidPropertyDataReader.GetDataObject( );
                    result.Add( data );
                }
            }
            return result;
        }

        public void GetGuidPropertyCollection( Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleGuidPropertyDataReader = GetGuidPropertyCollectionDataReader( );
                using ( simpleGuidPropertyDataReader )
                {
                    simpleGuidPropertyDataReader.WriteResultSetTo( destinationWriter );
                }
            }
        }

        public SimpleGuidPropertyDataReader GetGuidPropertyCollectionByElementDataReader( Guid element )
        {
            const string sql = SimpleGuidPropertyDataReader.BaseQuery + " WHERE " +
                    SimpleGuidPropertyDataReader.ViewAliasName + ".[Element] = @element " +
                    " ORDER BY " + SimpleGuidPropertyDataReader.ViewAliasName + ".[Element]," +SimpleGuidPropertyDataReader.ViewAliasName + ".[Definition]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var elementParameter = sqlCommandParameters.AddReference( "@element", element );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleGuidPropertyDataReader = new SimpleGuidPropertyDataReader( _loggerFactory, sqlDataReader );
                return simpleGuidPropertyDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<GuidPropertyObject> GetGuidPropertyCollectionByElement( Guid element )
        {
            throw new NotImplementedException( );
        }
        public SimpleGuidPropertyDataReader GetGuidPropertyByElementAndDefinitionDataReader( Guid element, Guid definition )
        {
            const string sql = SimpleGuidPropertyDataReader.BaseQuery + " WHERE " +
                    SimpleGuidPropertyDataReader.ViewAliasName + ".[Element] = @element AND " +
                    SimpleGuidPropertyDataReader.ViewAliasName + ".[Definition] = @definition " +
                    " ORDER BY " + SimpleGuidPropertyDataReader.ViewAliasName + ".[Element]," +SimpleGuidPropertyDataReader.ViewAliasName + ".[Definition]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var elementParameter = sqlCommandParameters.AddReference( "@element", element );
                var definitionParameter = sqlCommandParameters.AddReference( "@definition", definition );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleGuidPropertyDataReader = new SimpleGuidPropertyDataReader( _loggerFactory, sqlDataReader );
                return simpleGuidPropertyDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public GuidPropertyObject? GetGuidPropertyByElementAndDefinition( Guid element, Guid definition )
        {
            throw new NotImplementedException( );
        }
        public SimpleGuidPropertyDataReader GetGuidPropertyCollectionByDefinitionDataReader( Guid definition )
        {
            const string sql = SimpleGuidPropertyDataReader.BaseQuery + " WHERE " +
                    SimpleGuidPropertyDataReader.ViewAliasName + ".[Definition] = @definition " +
                    " ORDER BY " + SimpleGuidPropertyDataReader.ViewAliasName + ".[Definition]," +SimpleGuidPropertyDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var definitionParameter = sqlCommandParameters.AddReference( "@definition", definition );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleGuidPropertyDataReader = new SimpleGuidPropertyDataReader( _loggerFactory, sqlDataReader );
                return simpleGuidPropertyDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<GuidPropertyObject> GetGuidPropertyCollectionByDefinition( Guid definition )
        {
            throw new NotImplementedException( );
        }
        // ---------------------------------------------------------------------
        // Int16Property queries
        // ---------------------------------------------------------------------
        public SimpleInt16PropertyDataReader GetInt16PropertyByIdDataReader( Guid id )
        {
            const string sql = SimpleInt16PropertyDataReader.BaseQuery + "WHERE " + SimpleInt16PropertyDataReader.ViewAliasName + ".[Id] = @id"; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                sqlCommandParameters.AddGuid( "@id", id );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleInt16PropertyDataReader = new SimpleInt16PropertyDataReader( _loggerFactory, sqlDataReader );
                return simpleInt16PropertyDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public Int16PropertyObject? GetInt16PropertyById( Guid id )
        {
            var simpleInt16PropertyDataReader = GetInt16PropertyByIdDataReader( id );
            using ( simpleInt16PropertyDataReader )
            {
                if ( simpleInt16PropertyDataReader.Read( ) )
                {
                    var result = simpleInt16PropertyDataReader.GetDataObject( );
                    return result;
                }
            }
            return null;
        }

        public void GetInt16PropertyById( Guid id, Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleInt16PropertyDataReader = GetInt16PropertyByIdDataReader( id );
                using ( simpleInt16PropertyDataReader )
                {
                    if ( simpleInt16PropertyDataReader.Read( ) )
                    {
                        destinationWriter.Write( true );
                        simpleInt16PropertyDataReader.WriteTo( destinationWriter );
                    }
                    else
                    {
                        destinationWriter.Write( false );
                    }
                }
            }
        }

        public SimpleInt16PropertyDataReader GetInt16PropertyCollectionDataReader( )
        {
            const string sql = SimpleInt16PropertyDataReader.BaseQuery; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleInt16PropertyDataReader = new SimpleInt16PropertyDataReader( _loggerFactory, sqlDataReader );
                return simpleInt16PropertyDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public IList<Int16PropertyObject> GetInt16PropertyCollection( )
        {
            var result = new List<Int16PropertyObject>( );
            var simpleInt16PropertyDataReader = GetInt16PropertyCollectionDataReader( );
            using ( simpleInt16PropertyDataReader )
            {
                while ( simpleInt16PropertyDataReader.Read( ) )
                {
                    var data = simpleInt16PropertyDataReader.GetDataObject( );
                    result.Add( data );
                }
            }
            return result;
        }

        public void GetInt16PropertyCollection( Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleInt16PropertyDataReader = GetInt16PropertyCollectionDataReader( );
                using ( simpleInt16PropertyDataReader )
                {
                    simpleInt16PropertyDataReader.WriteResultSetTo( destinationWriter );
                }
            }
        }

        public SimpleInt16PropertyDataReader GetInt16PropertyCollectionByElementDataReader( Guid element )
        {
            const string sql = SimpleInt16PropertyDataReader.BaseQuery + " WHERE " +
                    SimpleInt16PropertyDataReader.ViewAliasName + ".[Element] = @element " +
                    " ORDER BY " + SimpleInt16PropertyDataReader.ViewAliasName + ".[Element]," +SimpleInt16PropertyDataReader.ViewAliasName + ".[Definition]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var elementParameter = sqlCommandParameters.AddReference( "@element", element );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleInt16PropertyDataReader = new SimpleInt16PropertyDataReader( _loggerFactory, sqlDataReader );
                return simpleInt16PropertyDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<Int16PropertyObject> GetInt16PropertyCollectionByElement( Guid element )
        {
            throw new NotImplementedException( );
        }
        public SimpleInt16PropertyDataReader GetInt16PropertyByElementAndDefinitionDataReader( Guid element, Guid definition )
        {
            const string sql = SimpleInt16PropertyDataReader.BaseQuery + " WHERE " +
                    SimpleInt16PropertyDataReader.ViewAliasName + ".[Element] = @element AND " +
                    SimpleInt16PropertyDataReader.ViewAliasName + ".[Definition] = @definition " +
                    " ORDER BY " + SimpleInt16PropertyDataReader.ViewAliasName + ".[Element]," +SimpleInt16PropertyDataReader.ViewAliasName + ".[Definition]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var elementParameter = sqlCommandParameters.AddReference( "@element", element );
                var definitionParameter = sqlCommandParameters.AddReference( "@definition", definition );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleInt16PropertyDataReader = new SimpleInt16PropertyDataReader( _loggerFactory, sqlDataReader );
                return simpleInt16PropertyDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public Int16PropertyObject? GetInt16PropertyByElementAndDefinition( Guid element, Guid definition )
        {
            throw new NotImplementedException( );
        }
        public SimpleInt16PropertyDataReader GetInt16PropertyCollectionByDefinitionDataReader( Guid definition )
        {
            const string sql = SimpleInt16PropertyDataReader.BaseQuery + " WHERE " +
                    SimpleInt16PropertyDataReader.ViewAliasName + ".[Definition] = @definition " +
                    " ORDER BY " + SimpleInt16PropertyDataReader.ViewAliasName + ".[Definition]," +SimpleInt16PropertyDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var definitionParameter = sqlCommandParameters.AddReference( "@definition", definition );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleInt16PropertyDataReader = new SimpleInt16PropertyDataReader( _loggerFactory, sqlDataReader );
                return simpleInt16PropertyDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<Int16PropertyObject> GetInt16PropertyCollectionByDefinition( Guid definition )
        {
            throw new NotImplementedException( );
        }
        // ---------------------------------------------------------------------
        // Int32Property queries
        // ---------------------------------------------------------------------
        public SimpleInt32PropertyDataReader GetInt32PropertyByIdDataReader( Guid id )
        {
            const string sql = SimpleInt32PropertyDataReader.BaseQuery + "WHERE " + SimpleInt32PropertyDataReader.ViewAliasName + ".[Id] = @id"; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                sqlCommandParameters.AddGuid( "@id", id );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleInt32PropertyDataReader = new SimpleInt32PropertyDataReader( _loggerFactory, sqlDataReader );
                return simpleInt32PropertyDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public Int32PropertyObject? GetInt32PropertyById( Guid id )
        {
            var simpleInt32PropertyDataReader = GetInt32PropertyByIdDataReader( id );
            using ( simpleInt32PropertyDataReader )
            {
                if ( simpleInt32PropertyDataReader.Read( ) )
                {
                    var result = simpleInt32PropertyDataReader.GetDataObject( );
                    return result;
                }
            }
            return null;
        }

        public void GetInt32PropertyById( Guid id, Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleInt32PropertyDataReader = GetInt32PropertyByIdDataReader( id );
                using ( simpleInt32PropertyDataReader )
                {
                    if ( simpleInt32PropertyDataReader.Read( ) )
                    {
                        destinationWriter.Write( true );
                        simpleInt32PropertyDataReader.WriteTo( destinationWriter );
                    }
                    else
                    {
                        destinationWriter.Write( false );
                    }
                }
            }
        }

        public SimpleInt32PropertyDataReader GetInt32PropertyCollectionDataReader( )
        {
            const string sql = SimpleInt32PropertyDataReader.BaseQuery; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleInt32PropertyDataReader = new SimpleInt32PropertyDataReader( _loggerFactory, sqlDataReader );
                return simpleInt32PropertyDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public IList<Int32PropertyObject> GetInt32PropertyCollection( )
        {
            var result = new List<Int32PropertyObject>( );
            var simpleInt32PropertyDataReader = GetInt32PropertyCollectionDataReader( );
            using ( simpleInt32PropertyDataReader )
            {
                while ( simpleInt32PropertyDataReader.Read( ) )
                {
                    var data = simpleInt32PropertyDataReader.GetDataObject( );
                    result.Add( data );
                }
            }
            return result;
        }

        public void GetInt32PropertyCollection( Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleInt32PropertyDataReader = GetInt32PropertyCollectionDataReader( );
                using ( simpleInt32PropertyDataReader )
                {
                    simpleInt32PropertyDataReader.WriteResultSetTo( destinationWriter );
                }
            }
        }

        public SimpleInt32PropertyDataReader GetInt32PropertyCollectionByElementDataReader( Guid element )
        {
            const string sql = SimpleInt32PropertyDataReader.BaseQuery + " WHERE " +
                    SimpleInt32PropertyDataReader.ViewAliasName + ".[Element] = @element " +
                    " ORDER BY " + SimpleInt32PropertyDataReader.ViewAliasName + ".[Element]," +SimpleInt32PropertyDataReader.ViewAliasName + ".[Definition]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var elementParameter = sqlCommandParameters.AddReference( "@element", element );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleInt32PropertyDataReader = new SimpleInt32PropertyDataReader( _loggerFactory, sqlDataReader );
                return simpleInt32PropertyDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<Int32PropertyObject> GetInt32PropertyCollectionByElement( Guid element )
        {
            throw new NotImplementedException( );
        }
        public SimpleInt32PropertyDataReader GetInt32PropertyByElementAndDefinitionDataReader( Guid element, Guid definition )
        {
            const string sql = SimpleInt32PropertyDataReader.BaseQuery + " WHERE " +
                    SimpleInt32PropertyDataReader.ViewAliasName + ".[Element] = @element AND " +
                    SimpleInt32PropertyDataReader.ViewAliasName + ".[Definition] = @definition " +
                    " ORDER BY " + SimpleInt32PropertyDataReader.ViewAliasName + ".[Element]," +SimpleInt32PropertyDataReader.ViewAliasName + ".[Definition]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var elementParameter = sqlCommandParameters.AddReference( "@element", element );
                var definitionParameter = sqlCommandParameters.AddReference( "@definition", definition );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleInt32PropertyDataReader = new SimpleInt32PropertyDataReader( _loggerFactory, sqlDataReader );
                return simpleInt32PropertyDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public Int32PropertyObject? GetInt32PropertyByElementAndDefinition( Guid element, Guid definition )
        {
            throw new NotImplementedException( );
        }
        public SimpleInt32PropertyDataReader GetInt32PropertyCollectionByDefinitionDataReader( Guid definition )
        {
            const string sql = SimpleInt32PropertyDataReader.BaseQuery + " WHERE " +
                    SimpleInt32PropertyDataReader.ViewAliasName + ".[Definition] = @definition " +
                    " ORDER BY " + SimpleInt32PropertyDataReader.ViewAliasName + ".[Definition]," +SimpleInt32PropertyDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var definitionParameter = sqlCommandParameters.AddReference( "@definition", definition );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleInt32PropertyDataReader = new SimpleInt32PropertyDataReader( _loggerFactory, sqlDataReader );
                return simpleInt32PropertyDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<Int32PropertyObject> GetInt32PropertyCollectionByDefinition( Guid definition )
        {
            throw new NotImplementedException( );
        }
        // ---------------------------------------------------------------------
        // Int64Property queries
        // ---------------------------------------------------------------------
        public SimpleInt64PropertyDataReader GetInt64PropertyByIdDataReader( Guid id )
        {
            const string sql = SimpleInt64PropertyDataReader.BaseQuery + "WHERE " + SimpleInt64PropertyDataReader.ViewAliasName + ".[Id] = @id"; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                sqlCommandParameters.AddGuid( "@id", id );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleInt64PropertyDataReader = new SimpleInt64PropertyDataReader( _loggerFactory, sqlDataReader );
                return simpleInt64PropertyDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public Int64PropertyObject? GetInt64PropertyById( Guid id )
        {
            var simpleInt64PropertyDataReader = GetInt64PropertyByIdDataReader( id );
            using ( simpleInt64PropertyDataReader )
            {
                if ( simpleInt64PropertyDataReader.Read( ) )
                {
                    var result = simpleInt64PropertyDataReader.GetDataObject( );
                    return result;
                }
            }
            return null;
        }

        public void GetInt64PropertyById( Guid id, Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleInt64PropertyDataReader = GetInt64PropertyByIdDataReader( id );
                using ( simpleInt64PropertyDataReader )
                {
                    if ( simpleInt64PropertyDataReader.Read( ) )
                    {
                        destinationWriter.Write( true );
                        simpleInt64PropertyDataReader.WriteTo( destinationWriter );
                    }
                    else
                    {
                        destinationWriter.Write( false );
                    }
                }
            }
        }

        public SimpleInt64PropertyDataReader GetInt64PropertyCollectionDataReader( )
        {
            const string sql = SimpleInt64PropertyDataReader.BaseQuery; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleInt64PropertyDataReader = new SimpleInt64PropertyDataReader( _loggerFactory, sqlDataReader );
                return simpleInt64PropertyDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public IList<Int64PropertyObject> GetInt64PropertyCollection( )
        {
            var result = new List<Int64PropertyObject>( );
            var simpleInt64PropertyDataReader = GetInt64PropertyCollectionDataReader( );
            using ( simpleInt64PropertyDataReader )
            {
                while ( simpleInt64PropertyDataReader.Read( ) )
                {
                    var data = simpleInt64PropertyDataReader.GetDataObject( );
                    result.Add( data );
                }
            }
            return result;
        }

        public void GetInt64PropertyCollection( Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleInt64PropertyDataReader = GetInt64PropertyCollectionDataReader( );
                using ( simpleInt64PropertyDataReader )
                {
                    simpleInt64PropertyDataReader.WriteResultSetTo( destinationWriter );
                }
            }
        }

        public SimpleInt64PropertyDataReader GetInt64PropertyCollectionByElementDataReader( Guid element )
        {
            const string sql = SimpleInt64PropertyDataReader.BaseQuery + " WHERE " +
                    SimpleInt64PropertyDataReader.ViewAliasName + ".[Element] = @element " +
                    " ORDER BY " + SimpleInt64PropertyDataReader.ViewAliasName + ".[Element]," +SimpleInt64PropertyDataReader.ViewAliasName + ".[Definition]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var elementParameter = sqlCommandParameters.AddReference( "@element", element );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleInt64PropertyDataReader = new SimpleInt64PropertyDataReader( _loggerFactory, sqlDataReader );
                return simpleInt64PropertyDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<Int64PropertyObject> GetInt64PropertyCollectionByElement( Guid element )
        {
            throw new NotImplementedException( );
        }
        public SimpleInt64PropertyDataReader GetInt64PropertyByElementAndDefinitionDataReader( Guid element, Guid definition )
        {
            const string sql = SimpleInt64PropertyDataReader.BaseQuery + " WHERE " +
                    SimpleInt64PropertyDataReader.ViewAliasName + ".[Element] = @element AND " +
                    SimpleInt64PropertyDataReader.ViewAliasName + ".[Definition] = @definition " +
                    " ORDER BY " + SimpleInt64PropertyDataReader.ViewAliasName + ".[Element]," +SimpleInt64PropertyDataReader.ViewAliasName + ".[Definition]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var elementParameter = sqlCommandParameters.AddReference( "@element", element );
                var definitionParameter = sqlCommandParameters.AddReference( "@definition", definition );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleInt64PropertyDataReader = new SimpleInt64PropertyDataReader( _loggerFactory, sqlDataReader );
                return simpleInt64PropertyDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public Int64PropertyObject? GetInt64PropertyByElementAndDefinition( Guid element, Guid definition )
        {
            throw new NotImplementedException( );
        }
        public SimpleInt64PropertyDataReader GetInt64PropertyCollectionByDefinitionDataReader( Guid definition )
        {
            const string sql = SimpleInt64PropertyDataReader.BaseQuery + " WHERE " +
                    SimpleInt64PropertyDataReader.ViewAliasName + ".[Definition] = @definition " +
                    " ORDER BY " + SimpleInt64PropertyDataReader.ViewAliasName + ".[Definition]," +SimpleInt64PropertyDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var definitionParameter = sqlCommandParameters.AddReference( "@definition", definition );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleInt64PropertyDataReader = new SimpleInt64PropertyDataReader( _loggerFactory, sqlDataReader );
                return simpleInt64PropertyDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<Int64PropertyObject> GetInt64PropertyCollectionByDefinition( Guid definition )
        {
            throw new NotImplementedException( );
        }
        // ---------------------------------------------------------------------
        // ReferenceProperty queries
        // ---------------------------------------------------------------------
        public SimpleReferencePropertyDataReader GetReferencePropertyByIdDataReader( Guid id )
        {
            const string sql = SimpleReferencePropertyDataReader.BaseQuery + "WHERE " + SimpleReferencePropertyDataReader.ViewAliasName + ".[Id] = @id"; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                sqlCommandParameters.AddGuid( "@id", id );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleReferencePropertyDataReader = new SimpleReferencePropertyDataReader( _loggerFactory, sqlDataReader );
                return simpleReferencePropertyDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public ReferencePropertyObject? GetReferencePropertyById( Guid id )
        {
            var simpleReferencePropertyDataReader = GetReferencePropertyByIdDataReader( id );
            using ( simpleReferencePropertyDataReader )
            {
                if ( simpleReferencePropertyDataReader.Read( ) )
                {
                    var result = simpleReferencePropertyDataReader.GetDataObject( );
                    return result;
                }
            }
            return null;
        }

        public void GetReferencePropertyById( Guid id, Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleReferencePropertyDataReader = GetReferencePropertyByIdDataReader( id );
                using ( simpleReferencePropertyDataReader )
                {
                    if ( simpleReferencePropertyDataReader.Read( ) )
                    {
                        destinationWriter.Write( true );
                        simpleReferencePropertyDataReader.WriteTo( destinationWriter );
                    }
                    else
                    {
                        destinationWriter.Write( false );
                    }
                }
            }
        }

        public SimpleReferencePropertyDataReader GetReferencePropertyCollectionDataReader( )
        {
            const string sql = SimpleReferencePropertyDataReader.BaseQuery; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleReferencePropertyDataReader = new SimpleReferencePropertyDataReader( _loggerFactory, sqlDataReader );
                return simpleReferencePropertyDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public IList<ReferencePropertyObject> GetReferencePropertyCollection( )
        {
            var result = new List<ReferencePropertyObject>( );
            var simpleReferencePropertyDataReader = GetReferencePropertyCollectionDataReader( );
            using ( simpleReferencePropertyDataReader )
            {
                while ( simpleReferencePropertyDataReader.Read( ) )
                {
                    var data = simpleReferencePropertyDataReader.GetDataObject( );
                    result.Add( data );
                }
            }
            return result;
        }

        public void GetReferencePropertyCollection( Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleReferencePropertyDataReader = GetReferencePropertyCollectionDataReader( );
                using ( simpleReferencePropertyDataReader )
                {
                    simpleReferencePropertyDataReader.WriteResultSetTo( destinationWriter );
                }
            }
        }

        public SimpleReferencePropertyDataReader GetReferencePropertyCollectionByElementDataReader( Guid element )
        {
            const string sql = SimpleReferencePropertyDataReader.BaseQuery + " WHERE " +
                    SimpleReferencePropertyDataReader.ViewAliasName + ".[Element] = @element " +
                    " ORDER BY " + SimpleReferencePropertyDataReader.ViewAliasName + ".[Element]," +SimpleReferencePropertyDataReader.ViewAliasName + ".[Definition]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var elementParameter = sqlCommandParameters.AddReference( "@element", element );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleReferencePropertyDataReader = new SimpleReferencePropertyDataReader( _loggerFactory, sqlDataReader );
                return simpleReferencePropertyDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<ReferencePropertyObject> GetReferencePropertyCollectionByElement( Guid element )
        {
            throw new NotImplementedException( );
        }
        public SimpleReferencePropertyDataReader GetReferencePropertyByElementAndDefinitionDataReader( Guid element, Guid definition )
        {
            const string sql = SimpleReferencePropertyDataReader.BaseQuery + " WHERE " +
                    SimpleReferencePropertyDataReader.ViewAliasName + ".[Element] = @element AND " +
                    SimpleReferencePropertyDataReader.ViewAliasName + ".[Definition] = @definition " +
                    " ORDER BY " + SimpleReferencePropertyDataReader.ViewAliasName + ".[Element]," +SimpleReferencePropertyDataReader.ViewAliasName + ".[Definition]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var elementParameter = sqlCommandParameters.AddReference( "@element", element );
                var definitionParameter = sqlCommandParameters.AddReference( "@definition", definition );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleReferencePropertyDataReader = new SimpleReferencePropertyDataReader( _loggerFactory, sqlDataReader );
                return simpleReferencePropertyDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public ReferencePropertyObject? GetReferencePropertyByElementAndDefinition( Guid element, Guid definition )
        {
            throw new NotImplementedException( );
        }
        public SimpleReferencePropertyDataReader GetReferencePropertyCollectionByDefinitionDataReader( Guid definition )
        {
            const string sql = SimpleReferencePropertyDataReader.BaseQuery + " WHERE " +
                    SimpleReferencePropertyDataReader.ViewAliasName + ".[Definition] = @definition " +
                    " ORDER BY " + SimpleReferencePropertyDataReader.ViewAliasName + ".[Definition]," +SimpleReferencePropertyDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var definitionParameter = sqlCommandParameters.AddReference( "@definition", definition );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleReferencePropertyDataReader = new SimpleReferencePropertyDataReader( _loggerFactory, sqlDataReader );
                return simpleReferencePropertyDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<ReferencePropertyObject> GetReferencePropertyCollectionByDefinition( Guid definition )
        {
            throw new NotImplementedException( );
        }
        public SimpleReferencePropertyDataReader GetReferencePropertyCollectionByValueDataReader( Guid value__ )
        {
            const string sql = SimpleReferencePropertyDataReader.BaseQuery + " WHERE " +
                    SimpleReferencePropertyDataReader.ViewAliasName + ".[Value] = @value__ " +
                    " ORDER BY " + SimpleReferencePropertyDataReader.ViewAliasName + ".[Value]," +SimpleReferencePropertyDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var value__Parameter = sqlCommandParameters.AddReference( "@value", value__ );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleReferencePropertyDataReader = new SimpleReferencePropertyDataReader( _loggerFactory, sqlDataReader );
                return simpleReferencePropertyDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<ReferencePropertyObject> GetReferencePropertyCollectionByValue( Guid value__ )
        {
            throw new NotImplementedException( );
        }
        // ---------------------------------------------------------------------
        // SByteProperty queries
        // ---------------------------------------------------------------------
        public SimpleSBytePropertyDataReader GetSBytePropertyByIdDataReader( Guid id )
        {
            const string sql = SimpleSBytePropertyDataReader.BaseQuery + "WHERE " + SimpleSBytePropertyDataReader.ViewAliasName + ".[Id] = @id"; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                sqlCommandParameters.AddGuid( "@id", id );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleSBytePropertyDataReader = new SimpleSBytePropertyDataReader( _loggerFactory, sqlDataReader );
                return simpleSBytePropertyDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public SBytePropertyObject? GetSBytePropertyById( Guid id )
        {
            var simpleSBytePropertyDataReader = GetSBytePropertyByIdDataReader( id );
            using ( simpleSBytePropertyDataReader )
            {
                if ( simpleSBytePropertyDataReader.Read( ) )
                {
                    var result = simpleSBytePropertyDataReader.GetDataObject( );
                    return result;
                }
            }
            return null;
        }

        public void GetSBytePropertyById( Guid id, Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleSBytePropertyDataReader = GetSBytePropertyByIdDataReader( id );
                using ( simpleSBytePropertyDataReader )
                {
                    if ( simpleSBytePropertyDataReader.Read( ) )
                    {
                        destinationWriter.Write( true );
                        simpleSBytePropertyDataReader.WriteTo( destinationWriter );
                    }
                    else
                    {
                        destinationWriter.Write( false );
                    }
                }
            }
        }

        public SimpleSBytePropertyDataReader GetSBytePropertyCollectionDataReader( )
        {
            const string sql = SimpleSBytePropertyDataReader.BaseQuery; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleSBytePropertyDataReader = new SimpleSBytePropertyDataReader( _loggerFactory, sqlDataReader );
                return simpleSBytePropertyDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public IList<SBytePropertyObject> GetSBytePropertyCollection( )
        {
            var result = new List<SBytePropertyObject>( );
            var simpleSBytePropertyDataReader = GetSBytePropertyCollectionDataReader( );
            using ( simpleSBytePropertyDataReader )
            {
                while ( simpleSBytePropertyDataReader.Read( ) )
                {
                    var data = simpleSBytePropertyDataReader.GetDataObject( );
                    result.Add( data );
                }
            }
            return result;
        }

        public void GetSBytePropertyCollection( Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleSBytePropertyDataReader = GetSBytePropertyCollectionDataReader( );
                using ( simpleSBytePropertyDataReader )
                {
                    simpleSBytePropertyDataReader.WriteResultSetTo( destinationWriter );
                }
            }
        }

        public SimpleSBytePropertyDataReader GetSBytePropertyCollectionByElementDataReader( Guid element )
        {
            const string sql = SimpleSBytePropertyDataReader.BaseQuery + " WHERE " +
                    SimpleSBytePropertyDataReader.ViewAliasName + ".[Element] = @element " +
                    " ORDER BY " + SimpleSBytePropertyDataReader.ViewAliasName + ".[Element]," +SimpleSBytePropertyDataReader.ViewAliasName + ".[Definition]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var elementParameter = sqlCommandParameters.AddReference( "@element", element );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleSBytePropertyDataReader = new SimpleSBytePropertyDataReader( _loggerFactory, sqlDataReader );
                return simpleSBytePropertyDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<SBytePropertyObject> GetSBytePropertyCollectionByElement( Guid element )
        {
            throw new NotImplementedException( );
        }
        public SimpleSBytePropertyDataReader GetSBytePropertyByElementAndDefinitionDataReader( Guid element, Guid definition )
        {
            const string sql = SimpleSBytePropertyDataReader.BaseQuery + " WHERE " +
                    SimpleSBytePropertyDataReader.ViewAliasName + ".[Element] = @element AND " +
                    SimpleSBytePropertyDataReader.ViewAliasName + ".[Definition] = @definition " +
                    " ORDER BY " + SimpleSBytePropertyDataReader.ViewAliasName + ".[Element]," +SimpleSBytePropertyDataReader.ViewAliasName + ".[Definition]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var elementParameter = sqlCommandParameters.AddReference( "@element", element );
                var definitionParameter = sqlCommandParameters.AddReference( "@definition", definition );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleSBytePropertyDataReader = new SimpleSBytePropertyDataReader( _loggerFactory, sqlDataReader );
                return simpleSBytePropertyDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public SBytePropertyObject? GetSBytePropertyByElementAndDefinition( Guid element, Guid definition )
        {
            throw new NotImplementedException( );
        }
        public SimpleSBytePropertyDataReader GetSBytePropertyCollectionByDefinitionDataReader( Guid definition )
        {
            const string sql = SimpleSBytePropertyDataReader.BaseQuery + " WHERE " +
                    SimpleSBytePropertyDataReader.ViewAliasName + ".[Definition] = @definition " +
                    " ORDER BY " + SimpleSBytePropertyDataReader.ViewAliasName + ".[Definition]," +SimpleSBytePropertyDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var definitionParameter = sqlCommandParameters.AddReference( "@definition", definition );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleSBytePropertyDataReader = new SimpleSBytePropertyDataReader( _loggerFactory, sqlDataReader );
                return simpleSBytePropertyDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<SBytePropertyObject> GetSBytePropertyCollectionByDefinition( Guid definition )
        {
            throw new NotImplementedException( );
        }
        // ---------------------------------------------------------------------
        // SingleProperty queries
        // ---------------------------------------------------------------------
        public SimpleSinglePropertyDataReader GetSinglePropertyByIdDataReader( Guid id )
        {
            const string sql = SimpleSinglePropertyDataReader.BaseQuery + "WHERE " + SimpleSinglePropertyDataReader.ViewAliasName + ".[Id] = @id"; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                sqlCommandParameters.AddGuid( "@id", id );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleSinglePropertyDataReader = new SimpleSinglePropertyDataReader( _loggerFactory, sqlDataReader );
                return simpleSinglePropertyDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public SinglePropertyObject? GetSinglePropertyById( Guid id )
        {
            var simpleSinglePropertyDataReader = GetSinglePropertyByIdDataReader( id );
            using ( simpleSinglePropertyDataReader )
            {
                if ( simpleSinglePropertyDataReader.Read( ) )
                {
                    var result = simpleSinglePropertyDataReader.GetDataObject( );
                    return result;
                }
            }
            return null;
        }

        public void GetSinglePropertyById( Guid id, Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleSinglePropertyDataReader = GetSinglePropertyByIdDataReader( id );
                using ( simpleSinglePropertyDataReader )
                {
                    if ( simpleSinglePropertyDataReader.Read( ) )
                    {
                        destinationWriter.Write( true );
                        simpleSinglePropertyDataReader.WriteTo( destinationWriter );
                    }
                    else
                    {
                        destinationWriter.Write( false );
                    }
                }
            }
        }

        public SimpleSinglePropertyDataReader GetSinglePropertyCollectionDataReader( )
        {
            const string sql = SimpleSinglePropertyDataReader.BaseQuery; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleSinglePropertyDataReader = new SimpleSinglePropertyDataReader( _loggerFactory, sqlDataReader );
                return simpleSinglePropertyDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public IList<SinglePropertyObject> GetSinglePropertyCollection( )
        {
            var result = new List<SinglePropertyObject>( );
            var simpleSinglePropertyDataReader = GetSinglePropertyCollectionDataReader( );
            using ( simpleSinglePropertyDataReader )
            {
                while ( simpleSinglePropertyDataReader.Read( ) )
                {
                    var data = simpleSinglePropertyDataReader.GetDataObject( );
                    result.Add( data );
                }
            }
            return result;
        }

        public void GetSinglePropertyCollection( Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleSinglePropertyDataReader = GetSinglePropertyCollectionDataReader( );
                using ( simpleSinglePropertyDataReader )
                {
                    simpleSinglePropertyDataReader.WriteResultSetTo( destinationWriter );
                }
            }
        }

        public SimpleSinglePropertyDataReader GetSinglePropertyCollectionByElementDataReader( Guid element )
        {
            const string sql = SimpleSinglePropertyDataReader.BaseQuery + " WHERE " +
                    SimpleSinglePropertyDataReader.ViewAliasName + ".[Element] = @element " +
                    " ORDER BY " + SimpleSinglePropertyDataReader.ViewAliasName + ".[Element]," +SimpleSinglePropertyDataReader.ViewAliasName + ".[Definition]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var elementParameter = sqlCommandParameters.AddReference( "@element", element );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleSinglePropertyDataReader = new SimpleSinglePropertyDataReader( _loggerFactory, sqlDataReader );
                return simpleSinglePropertyDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<SinglePropertyObject> GetSinglePropertyCollectionByElement( Guid element )
        {
            throw new NotImplementedException( );
        }
        public SimpleSinglePropertyDataReader GetSinglePropertyByElementAndDefinitionDataReader( Guid element, Guid definition )
        {
            const string sql = SimpleSinglePropertyDataReader.BaseQuery + " WHERE " +
                    SimpleSinglePropertyDataReader.ViewAliasName + ".[Element] = @element AND " +
                    SimpleSinglePropertyDataReader.ViewAliasName + ".[Definition] = @definition " +
                    " ORDER BY " + SimpleSinglePropertyDataReader.ViewAliasName + ".[Element]," +SimpleSinglePropertyDataReader.ViewAliasName + ".[Definition]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var elementParameter = sqlCommandParameters.AddReference( "@element", element );
                var definitionParameter = sqlCommandParameters.AddReference( "@definition", definition );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleSinglePropertyDataReader = new SimpleSinglePropertyDataReader( _loggerFactory, sqlDataReader );
                return simpleSinglePropertyDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public SinglePropertyObject? GetSinglePropertyByElementAndDefinition( Guid element, Guid definition )
        {
            throw new NotImplementedException( );
        }
        public SimpleSinglePropertyDataReader GetSinglePropertyCollectionByDefinitionDataReader( Guid definition )
        {
            const string sql = SimpleSinglePropertyDataReader.BaseQuery + " WHERE " +
                    SimpleSinglePropertyDataReader.ViewAliasName + ".[Definition] = @definition " +
                    " ORDER BY " + SimpleSinglePropertyDataReader.ViewAliasName + ".[Definition]," +SimpleSinglePropertyDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var definitionParameter = sqlCommandParameters.AddReference( "@definition", definition );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleSinglePropertyDataReader = new SimpleSinglePropertyDataReader( _loggerFactory, sqlDataReader );
                return simpleSinglePropertyDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<SinglePropertyObject> GetSinglePropertyCollectionByDefinition( Guid definition )
        {
            throw new NotImplementedException( );
        }
        // ---------------------------------------------------------------------
        // StringProperty queries
        // ---------------------------------------------------------------------
        public SimpleStringPropertyDataReader GetStringPropertyByIdDataReader( Guid id )
        {
            const string sql = SimpleStringPropertyDataReader.BaseQuery + "WHERE " + SimpleStringPropertyDataReader.ViewAliasName + ".[Id] = @id"; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                sqlCommandParameters.AddGuid( "@id", id );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleStringPropertyDataReader = new SimpleStringPropertyDataReader( _loggerFactory, sqlDataReader );
                return simpleStringPropertyDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public StringPropertyObject? GetStringPropertyById( Guid id )
        {
            var simpleStringPropertyDataReader = GetStringPropertyByIdDataReader( id );
            using ( simpleStringPropertyDataReader )
            {
                if ( simpleStringPropertyDataReader.Read( ) )
                {
                    var result = simpleStringPropertyDataReader.GetDataObject( );
                    return result;
                }
            }
            return null;
        }

        public void GetStringPropertyById( Guid id, Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleStringPropertyDataReader = GetStringPropertyByIdDataReader( id );
                using ( simpleStringPropertyDataReader )
                {
                    if ( simpleStringPropertyDataReader.Read( ) )
                    {
                        destinationWriter.Write( true );
                        simpleStringPropertyDataReader.WriteTo( destinationWriter );
                    }
                    else
                    {
                        destinationWriter.Write( false );
                    }
                }
            }
        }

        public SimpleStringPropertyDataReader GetStringPropertyCollectionDataReader( )
        {
            const string sql = SimpleStringPropertyDataReader.BaseQuery; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleStringPropertyDataReader = new SimpleStringPropertyDataReader( _loggerFactory, sqlDataReader );
                return simpleStringPropertyDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public IList<StringPropertyObject> GetStringPropertyCollection( )
        {
            var result = new List<StringPropertyObject>( );
            var simpleStringPropertyDataReader = GetStringPropertyCollectionDataReader( );
            using ( simpleStringPropertyDataReader )
            {
                while ( simpleStringPropertyDataReader.Read( ) )
                {
                    var data = simpleStringPropertyDataReader.GetDataObject( );
                    result.Add( data );
                }
            }
            return result;
        }

        public void GetStringPropertyCollection( Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleStringPropertyDataReader = GetStringPropertyCollectionDataReader( );
                using ( simpleStringPropertyDataReader )
                {
                    simpleStringPropertyDataReader.WriteResultSetTo( destinationWriter );
                }
            }
        }

        public SimpleStringPropertyDataReader GetStringPropertyCollectionByElementDataReader( Guid element )
        {
            const string sql = SimpleStringPropertyDataReader.BaseQuery + " WHERE " +
                    SimpleStringPropertyDataReader.ViewAliasName + ".[Element] = @element " +
                    " ORDER BY " + SimpleStringPropertyDataReader.ViewAliasName + ".[Element]," +SimpleStringPropertyDataReader.ViewAliasName + ".[Definition]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var elementParameter = sqlCommandParameters.AddReference( "@element", element );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleStringPropertyDataReader = new SimpleStringPropertyDataReader( _loggerFactory, sqlDataReader );
                return simpleStringPropertyDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<StringPropertyObject> GetStringPropertyCollectionByElement( Guid element )
        {
            throw new NotImplementedException( );
        }
        public SimpleStringPropertyDataReader GetStringPropertyByElementAndDefinitionDataReader( Guid element, Guid definition )
        {
            const string sql = SimpleStringPropertyDataReader.BaseQuery + " WHERE " +
                    SimpleStringPropertyDataReader.ViewAliasName + ".[Element] = @element AND " +
                    SimpleStringPropertyDataReader.ViewAliasName + ".[Definition] = @definition " +
                    " ORDER BY " + SimpleStringPropertyDataReader.ViewAliasName + ".[Element]," +SimpleStringPropertyDataReader.ViewAliasName + ".[Definition]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var elementParameter = sqlCommandParameters.AddReference( "@element", element );
                var definitionParameter = sqlCommandParameters.AddReference( "@definition", definition );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleStringPropertyDataReader = new SimpleStringPropertyDataReader( _loggerFactory, sqlDataReader );
                return simpleStringPropertyDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public StringPropertyObject? GetStringPropertyByElementAndDefinition( Guid element, Guid definition )
        {
            throw new NotImplementedException( );
        }
        public SimpleStringPropertyDataReader GetStringPropertyCollectionByDefinitionDataReader( Guid definition )
        {
            const string sql = SimpleStringPropertyDataReader.BaseQuery + " WHERE " +
                    SimpleStringPropertyDataReader.ViewAliasName + ".[Definition] = @definition " +
                    " ORDER BY " + SimpleStringPropertyDataReader.ViewAliasName + ".[Definition]," +SimpleStringPropertyDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var definitionParameter = sqlCommandParameters.AddReference( "@definition", definition );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleStringPropertyDataReader = new SimpleStringPropertyDataReader( _loggerFactory, sqlDataReader );
                return simpleStringPropertyDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<StringPropertyObject> GetStringPropertyCollectionByDefinition( Guid definition )
        {
            throw new NotImplementedException( );
        }
        // ---------------------------------------------------------------------
        // TimeseriesProperty queries
        // ---------------------------------------------------------------------
        public ComplexTimeseriesPropertyDataReader GetTimeseriesPropertyByIdDataReader( Guid id )
        {
            const string sql = ComplexTimeseriesPropertyDataReader.BaseQuery + "WHERE " + ComplexTimeseriesPropertyDataReader.ViewAliasName + ".[Id] = @id"; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                sqlCommandParameters.AddGuid( "@id", id );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var complexTimeseriesPropertyDataReader = new ComplexTimeseriesPropertyDataReader( _loggerFactory, sqlDataReader );
                return complexTimeseriesPropertyDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public TimeseriesPropertyObject? GetTimeseriesPropertyById( Guid id )
        {
            var complexTimeseriesPropertyDataReader = GetTimeseriesPropertyByIdDataReader( id );
            using ( complexTimeseriesPropertyDataReader )
            {
                if ( complexTimeseriesPropertyDataReader.Read( ) )
                {
                    var result = complexTimeseriesPropertyDataReader.GetDataObject( );
                    return result;
                }
            }
            return null;
        }

        public void GetTimeseriesPropertyById( Guid id, Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var complexTimeseriesPropertyDataReader = GetTimeseriesPropertyByIdDataReader( id );
                using ( complexTimeseriesPropertyDataReader )
                {
                    if ( complexTimeseriesPropertyDataReader.Read( ) )
                    {
                        destinationWriter.Write( true );
                        complexTimeseriesPropertyDataReader.WriteTo( destinationWriter );
                    }
                    else
                    {
                        destinationWriter.Write( false );
                    }
                }
            }
        }

        public ComplexTimeseriesPropertyDataReader GetTimeseriesPropertyCollectionDataReader( )
        {
            const string sql = ComplexTimeseriesPropertyDataReader.BaseQuery; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var complexTimeseriesPropertyDataReader = new ComplexTimeseriesPropertyDataReader( _loggerFactory, sqlDataReader );
                return complexTimeseriesPropertyDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public IList<TimeseriesPropertyObject> GetTimeseriesPropertyCollection( )
        {
            var result = new List<TimeseriesPropertyObject>( );
            var complexTimeseriesPropertyDataReader = GetTimeseriesPropertyCollectionDataReader( );
            using ( complexTimeseriesPropertyDataReader )
            {
                while ( complexTimeseriesPropertyDataReader.Read( ) )
                {
                    var data = complexTimeseriesPropertyDataReader.GetDataObject( );
                    result.Add( data );
                }
            }
            return result;
        }

        public void GetTimeseriesPropertyCollection( Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var complexTimeseriesPropertyDataReader = GetTimeseriesPropertyCollectionDataReader( );
                using ( complexTimeseriesPropertyDataReader )
                {
                    complexTimeseriesPropertyDataReader.WriteResultSetTo( destinationWriter );
                }
            }
        }

        public ComplexTimeseriesPropertyDataReader GetTimeseriesPropertyCollectionByElementDataReader( Guid element )
        {
            const string sql = ComplexTimeseriesPropertyDataReader.BaseQuery + " WHERE " +
                    ComplexTimeseriesPropertyDataReader.ViewAliasName + ".[Element] = @element " +
                    " ORDER BY " + ComplexTimeseriesPropertyDataReader.ViewAliasName + ".[Element]," +ComplexTimeseriesPropertyDataReader.ViewAliasName + ".[Definition]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var elementParameter = sqlCommandParameters.AddReference( "@element", element );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var complexTimeseriesPropertyDataReader = new ComplexTimeseriesPropertyDataReader( _loggerFactory, sqlDataReader );
                return complexTimeseriesPropertyDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<TimeseriesPropertyObject> GetTimeseriesPropertyCollectionByElement( Guid element )
        {
            throw new NotImplementedException( );
        }
        public ComplexTimeseriesPropertyDataReader GetTimeseriesPropertyByElementAndDefinitionDataReader( Guid element, Guid definition )
        {
            const string sql = ComplexTimeseriesPropertyDataReader.BaseQuery + " WHERE " +
                    ComplexTimeseriesPropertyDataReader.ViewAliasName + ".[Element] = @element AND " +
                    ComplexTimeseriesPropertyDataReader.ViewAliasName + ".[Definition] = @definition " +
                    " ORDER BY " + ComplexTimeseriesPropertyDataReader.ViewAliasName + ".[Element]," +ComplexTimeseriesPropertyDataReader.ViewAliasName + ".[Definition]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var elementParameter = sqlCommandParameters.AddReference( "@element", element );
                var definitionParameter = sqlCommandParameters.AddReference( "@definition", definition );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var complexTimeseriesPropertyDataReader = new ComplexTimeseriesPropertyDataReader( _loggerFactory, sqlDataReader );
                return complexTimeseriesPropertyDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public TimeseriesPropertyObject? GetTimeseriesPropertyByElementAndDefinition( Guid element, Guid definition )
        {
            throw new NotImplementedException( );
        }
        public ComplexTimeseriesPropertyDataReader GetTimeseriesPropertyCollectionByDefinitionDataReader( Guid definition )
        {
            const string sql = ComplexTimeseriesPropertyDataReader.BaseQuery + " WHERE " +
                    ComplexTimeseriesPropertyDataReader.ViewAliasName + ".[Definition] = @definition " +
                    " ORDER BY " + ComplexTimeseriesPropertyDataReader.ViewAliasName + ".[Definition]," +ComplexTimeseriesPropertyDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var definitionParameter = sqlCommandParameters.AddReference( "@definition", definition );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var complexTimeseriesPropertyDataReader = new ComplexTimeseriesPropertyDataReader( _loggerFactory, sqlDataReader );
                return complexTimeseriesPropertyDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<TimeseriesPropertyObject> GetTimeseriesPropertyCollectionByDefinition( Guid definition )
        {
            throw new NotImplementedException( );
        }
        // ---------------------------------------------------------------------
        // BinaryTimeseriesProperty queries
        // ---------------------------------------------------------------------
        public SimpleBinaryTimeseriesPropertyDataReader GetBinaryTimeseriesPropertyByIdDataReader( Guid id )
        {
            const string sql = SimpleBinaryTimeseriesPropertyDataReader.BaseQuery + "WHERE " + SimpleBinaryTimeseriesPropertyDataReader.ViewAliasName + ".[Id] = @id"; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                sqlCommandParameters.AddGuid( "@id", id );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleBinaryTimeseriesPropertyDataReader = new SimpleBinaryTimeseriesPropertyDataReader( _loggerFactory, sqlDataReader );
                return simpleBinaryTimeseriesPropertyDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public BinaryTimeseriesPropertyObject? GetBinaryTimeseriesPropertyById( Guid id )
        {
            var simpleBinaryTimeseriesPropertyDataReader = GetBinaryTimeseriesPropertyByIdDataReader( id );
            using ( simpleBinaryTimeseriesPropertyDataReader )
            {
                if ( simpleBinaryTimeseriesPropertyDataReader.Read( ) )
                {
                    var result = simpleBinaryTimeseriesPropertyDataReader.GetDataObject( );
                    return result;
                }
            }
            return null;
        }

        public void GetBinaryTimeseriesPropertyById( Guid id, Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleBinaryTimeseriesPropertyDataReader = GetBinaryTimeseriesPropertyByIdDataReader( id );
                using ( simpleBinaryTimeseriesPropertyDataReader )
                {
                    if ( simpleBinaryTimeseriesPropertyDataReader.Read( ) )
                    {
                        destinationWriter.Write( true );
                        simpleBinaryTimeseriesPropertyDataReader.WriteTo( destinationWriter );
                    }
                    else
                    {
                        destinationWriter.Write( false );
                    }
                }
            }
        }

        public SimpleBinaryTimeseriesPropertyDataReader GetBinaryTimeseriesPropertyCollectionDataReader( )
        {
            const string sql = SimpleBinaryTimeseriesPropertyDataReader.BaseQuery; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleBinaryTimeseriesPropertyDataReader = new SimpleBinaryTimeseriesPropertyDataReader( _loggerFactory, sqlDataReader );
                return simpleBinaryTimeseriesPropertyDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public IList<BinaryTimeseriesPropertyObject> GetBinaryTimeseriesPropertyCollection( )
        {
            var result = new List<BinaryTimeseriesPropertyObject>( );
            var simpleBinaryTimeseriesPropertyDataReader = GetBinaryTimeseriesPropertyCollectionDataReader( );
            using ( simpleBinaryTimeseriesPropertyDataReader )
            {
                while ( simpleBinaryTimeseriesPropertyDataReader.Read( ) )
                {
                    var data = simpleBinaryTimeseriesPropertyDataReader.GetDataObject( );
                    result.Add( data );
                }
            }
            return result;
        }

        public void GetBinaryTimeseriesPropertyCollection( Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleBinaryTimeseriesPropertyDataReader = GetBinaryTimeseriesPropertyCollectionDataReader( );
                using ( simpleBinaryTimeseriesPropertyDataReader )
                {
                    simpleBinaryTimeseriesPropertyDataReader.WriteResultSetTo( destinationWriter );
                }
            }
        }

        public SimpleBinaryTimeseriesPropertyDataReader GetBinaryTimeseriesPropertyCollectionByElementDataReader( Guid element )
        {
            const string sql = SimpleBinaryTimeseriesPropertyDataReader.BaseQuery + " WHERE " +
                    SimpleBinaryTimeseriesPropertyDataReader.ViewAliasName + ".[Element] = @element " +
                    " ORDER BY " + SimpleBinaryTimeseriesPropertyDataReader.ViewAliasName + ".[Element]," +SimpleBinaryTimeseriesPropertyDataReader.ViewAliasName + ".[Definition]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var elementParameter = sqlCommandParameters.AddReference( "@element", element );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleBinaryTimeseriesPropertyDataReader = new SimpleBinaryTimeseriesPropertyDataReader( _loggerFactory, sqlDataReader );
                return simpleBinaryTimeseriesPropertyDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<BinaryTimeseriesPropertyObject> GetBinaryTimeseriesPropertyCollectionByElement( Guid element )
        {
            throw new NotImplementedException( );
        }
        public SimpleBinaryTimeseriesPropertyDataReader GetBinaryTimeseriesPropertyByElementAndDefinitionDataReader( Guid element, Guid definition )
        {
            const string sql = SimpleBinaryTimeseriesPropertyDataReader.BaseQuery + " WHERE " +
                    SimpleBinaryTimeseriesPropertyDataReader.ViewAliasName + ".[Element] = @element AND " +
                    SimpleBinaryTimeseriesPropertyDataReader.ViewAliasName + ".[Definition] = @definition " +
                    " ORDER BY " + SimpleBinaryTimeseriesPropertyDataReader.ViewAliasName + ".[Element]," +SimpleBinaryTimeseriesPropertyDataReader.ViewAliasName + ".[Definition]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var elementParameter = sqlCommandParameters.AddReference( "@element", element );
                var definitionParameter = sqlCommandParameters.AddReference( "@definition", definition );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleBinaryTimeseriesPropertyDataReader = new SimpleBinaryTimeseriesPropertyDataReader( _loggerFactory, sqlDataReader );
                return simpleBinaryTimeseriesPropertyDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public BinaryTimeseriesPropertyObject? GetBinaryTimeseriesPropertyByElementAndDefinition( Guid element, Guid definition )
        {
            throw new NotImplementedException( );
        }
        public SimpleBinaryTimeseriesPropertyDataReader GetBinaryTimeseriesPropertyCollectionByDefinitionDataReader( Guid definition )
        {
            const string sql = SimpleBinaryTimeseriesPropertyDataReader.BaseQuery + " WHERE " +
                    SimpleBinaryTimeseriesPropertyDataReader.ViewAliasName + ".[Definition] = @definition " +
                    " ORDER BY " + SimpleBinaryTimeseriesPropertyDataReader.ViewAliasName + ".[Definition]," +SimpleBinaryTimeseriesPropertyDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var definitionParameter = sqlCommandParameters.AddReference( "@definition", definition );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleBinaryTimeseriesPropertyDataReader = new SimpleBinaryTimeseriesPropertyDataReader( _loggerFactory, sqlDataReader );
                return simpleBinaryTimeseriesPropertyDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<BinaryTimeseriesPropertyObject> GetBinaryTimeseriesPropertyCollectionByDefinition( Guid definition )
        {
            throw new NotImplementedException( );
        }
        public SimpleBinaryTimeseriesPropertyDataReader GetBinaryTimeseriesPropertyCollectionByTimeseriesDataReader( Guid timeseries )
        {
            const string sql = SimpleBinaryTimeseriesPropertyDataReader.BaseQuery + " WHERE " +
                    SimpleBinaryTimeseriesPropertyDataReader.ViewAliasName + ".[Timeseries] = @timeseries " +
                    " ORDER BY " + SimpleBinaryTimeseriesPropertyDataReader.ViewAliasName + ".[Timeseries]," +SimpleBinaryTimeseriesPropertyDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var timeseriesParameter = sqlCommandParameters.AddReference( "@timeseries", timeseries );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleBinaryTimeseriesPropertyDataReader = new SimpleBinaryTimeseriesPropertyDataReader( _loggerFactory, sqlDataReader );
                return simpleBinaryTimeseriesPropertyDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<BinaryTimeseriesPropertyObject> GetBinaryTimeseriesPropertyCollectionByTimeseries( Guid timeseries )
        {
            throw new NotImplementedException( );
        }
        // ---------------------------------------------------------------------
        // BooleanTimeseriesProperty queries
        // ---------------------------------------------------------------------
        public SimpleBooleanTimeseriesPropertyDataReader GetBooleanTimeseriesPropertyByIdDataReader( Guid id )
        {
            const string sql = SimpleBooleanTimeseriesPropertyDataReader.BaseQuery + "WHERE " + SimpleBooleanTimeseriesPropertyDataReader.ViewAliasName + ".[Id] = @id"; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                sqlCommandParameters.AddGuid( "@id", id );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleBooleanTimeseriesPropertyDataReader = new SimpleBooleanTimeseriesPropertyDataReader( _loggerFactory, sqlDataReader );
                return simpleBooleanTimeseriesPropertyDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public BooleanTimeseriesPropertyObject? GetBooleanTimeseriesPropertyById( Guid id )
        {
            var simpleBooleanTimeseriesPropertyDataReader = GetBooleanTimeseriesPropertyByIdDataReader( id );
            using ( simpleBooleanTimeseriesPropertyDataReader )
            {
                if ( simpleBooleanTimeseriesPropertyDataReader.Read( ) )
                {
                    var result = simpleBooleanTimeseriesPropertyDataReader.GetDataObject( );
                    return result;
                }
            }
            return null;
        }

        public void GetBooleanTimeseriesPropertyById( Guid id, Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleBooleanTimeseriesPropertyDataReader = GetBooleanTimeseriesPropertyByIdDataReader( id );
                using ( simpleBooleanTimeseriesPropertyDataReader )
                {
                    if ( simpleBooleanTimeseriesPropertyDataReader.Read( ) )
                    {
                        destinationWriter.Write( true );
                        simpleBooleanTimeseriesPropertyDataReader.WriteTo( destinationWriter );
                    }
                    else
                    {
                        destinationWriter.Write( false );
                    }
                }
            }
        }

        public SimpleBooleanTimeseriesPropertyDataReader GetBooleanTimeseriesPropertyCollectionDataReader( )
        {
            const string sql = SimpleBooleanTimeseriesPropertyDataReader.BaseQuery; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleBooleanTimeseriesPropertyDataReader = new SimpleBooleanTimeseriesPropertyDataReader( _loggerFactory, sqlDataReader );
                return simpleBooleanTimeseriesPropertyDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public IList<BooleanTimeseriesPropertyObject> GetBooleanTimeseriesPropertyCollection( )
        {
            var result = new List<BooleanTimeseriesPropertyObject>( );
            var simpleBooleanTimeseriesPropertyDataReader = GetBooleanTimeseriesPropertyCollectionDataReader( );
            using ( simpleBooleanTimeseriesPropertyDataReader )
            {
                while ( simpleBooleanTimeseriesPropertyDataReader.Read( ) )
                {
                    var data = simpleBooleanTimeseriesPropertyDataReader.GetDataObject( );
                    result.Add( data );
                }
            }
            return result;
        }

        public void GetBooleanTimeseriesPropertyCollection( Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleBooleanTimeseriesPropertyDataReader = GetBooleanTimeseriesPropertyCollectionDataReader( );
                using ( simpleBooleanTimeseriesPropertyDataReader )
                {
                    simpleBooleanTimeseriesPropertyDataReader.WriteResultSetTo( destinationWriter );
                }
            }
        }

        public SimpleBooleanTimeseriesPropertyDataReader GetBooleanTimeseriesPropertyCollectionByElementDataReader( Guid element )
        {
            const string sql = SimpleBooleanTimeseriesPropertyDataReader.BaseQuery + " WHERE " +
                    SimpleBooleanTimeseriesPropertyDataReader.ViewAliasName + ".[Element] = @element " +
                    " ORDER BY " + SimpleBooleanTimeseriesPropertyDataReader.ViewAliasName + ".[Element]," +SimpleBooleanTimeseriesPropertyDataReader.ViewAliasName + ".[Definition]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var elementParameter = sqlCommandParameters.AddReference( "@element", element );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleBooleanTimeseriesPropertyDataReader = new SimpleBooleanTimeseriesPropertyDataReader( _loggerFactory, sqlDataReader );
                return simpleBooleanTimeseriesPropertyDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<BooleanTimeseriesPropertyObject> GetBooleanTimeseriesPropertyCollectionByElement( Guid element )
        {
            throw new NotImplementedException( );
        }
        public SimpleBooleanTimeseriesPropertyDataReader GetBooleanTimeseriesPropertyByElementAndDefinitionDataReader( Guid element, Guid definition )
        {
            const string sql = SimpleBooleanTimeseriesPropertyDataReader.BaseQuery + " WHERE " +
                    SimpleBooleanTimeseriesPropertyDataReader.ViewAliasName + ".[Element] = @element AND " +
                    SimpleBooleanTimeseriesPropertyDataReader.ViewAliasName + ".[Definition] = @definition " +
                    " ORDER BY " + SimpleBooleanTimeseriesPropertyDataReader.ViewAliasName + ".[Element]," +SimpleBooleanTimeseriesPropertyDataReader.ViewAliasName + ".[Definition]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var elementParameter = sqlCommandParameters.AddReference( "@element", element );
                var definitionParameter = sqlCommandParameters.AddReference( "@definition", definition );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleBooleanTimeseriesPropertyDataReader = new SimpleBooleanTimeseriesPropertyDataReader( _loggerFactory, sqlDataReader );
                return simpleBooleanTimeseriesPropertyDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public BooleanTimeseriesPropertyObject? GetBooleanTimeseriesPropertyByElementAndDefinition( Guid element, Guid definition )
        {
            throw new NotImplementedException( );
        }
        public SimpleBooleanTimeseriesPropertyDataReader GetBooleanTimeseriesPropertyCollectionByDefinitionDataReader( Guid definition )
        {
            const string sql = SimpleBooleanTimeseriesPropertyDataReader.BaseQuery + " WHERE " +
                    SimpleBooleanTimeseriesPropertyDataReader.ViewAliasName + ".[Definition] = @definition " +
                    " ORDER BY " + SimpleBooleanTimeseriesPropertyDataReader.ViewAliasName + ".[Definition]," +SimpleBooleanTimeseriesPropertyDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var definitionParameter = sqlCommandParameters.AddReference( "@definition", definition );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleBooleanTimeseriesPropertyDataReader = new SimpleBooleanTimeseriesPropertyDataReader( _loggerFactory, sqlDataReader );
                return simpleBooleanTimeseriesPropertyDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<BooleanTimeseriesPropertyObject> GetBooleanTimeseriesPropertyCollectionByDefinition( Guid definition )
        {
            throw new NotImplementedException( );
        }
        public SimpleBooleanTimeseriesPropertyDataReader GetBooleanTimeseriesPropertyCollectionByTimeseriesDataReader( Guid timeseries )
        {
            const string sql = SimpleBooleanTimeseriesPropertyDataReader.BaseQuery + " WHERE " +
                    SimpleBooleanTimeseriesPropertyDataReader.ViewAliasName + ".[Timeseries] = @timeseries " +
                    " ORDER BY " + SimpleBooleanTimeseriesPropertyDataReader.ViewAliasName + ".[Timeseries]," +SimpleBooleanTimeseriesPropertyDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var timeseriesParameter = sqlCommandParameters.AddReference( "@timeseries", timeseries );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleBooleanTimeseriesPropertyDataReader = new SimpleBooleanTimeseriesPropertyDataReader( _loggerFactory, sqlDataReader );
                return simpleBooleanTimeseriesPropertyDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<BooleanTimeseriesPropertyObject> GetBooleanTimeseriesPropertyCollectionByTimeseries( Guid timeseries )
        {
            throw new NotImplementedException( );
        }
        // ---------------------------------------------------------------------
        // ByteTimeseriesProperty queries
        // ---------------------------------------------------------------------
        public SimpleByteTimeseriesPropertyDataReader GetByteTimeseriesPropertyByIdDataReader( Guid id )
        {
            const string sql = SimpleByteTimeseriesPropertyDataReader.BaseQuery + "WHERE " + SimpleByteTimeseriesPropertyDataReader.ViewAliasName + ".[Id] = @id"; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                sqlCommandParameters.AddGuid( "@id", id );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleByteTimeseriesPropertyDataReader = new SimpleByteTimeseriesPropertyDataReader( _loggerFactory, sqlDataReader );
                return simpleByteTimeseriesPropertyDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public ByteTimeseriesPropertyObject? GetByteTimeseriesPropertyById( Guid id )
        {
            var simpleByteTimeseriesPropertyDataReader = GetByteTimeseriesPropertyByIdDataReader( id );
            using ( simpleByteTimeseriesPropertyDataReader )
            {
                if ( simpleByteTimeseriesPropertyDataReader.Read( ) )
                {
                    var result = simpleByteTimeseriesPropertyDataReader.GetDataObject( );
                    return result;
                }
            }
            return null;
        }

        public void GetByteTimeseriesPropertyById( Guid id, Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleByteTimeseriesPropertyDataReader = GetByteTimeseriesPropertyByIdDataReader( id );
                using ( simpleByteTimeseriesPropertyDataReader )
                {
                    if ( simpleByteTimeseriesPropertyDataReader.Read( ) )
                    {
                        destinationWriter.Write( true );
                        simpleByteTimeseriesPropertyDataReader.WriteTo( destinationWriter );
                    }
                    else
                    {
                        destinationWriter.Write( false );
                    }
                }
            }
        }

        public SimpleByteTimeseriesPropertyDataReader GetByteTimeseriesPropertyCollectionDataReader( )
        {
            const string sql = SimpleByteTimeseriesPropertyDataReader.BaseQuery; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleByteTimeseriesPropertyDataReader = new SimpleByteTimeseriesPropertyDataReader( _loggerFactory, sqlDataReader );
                return simpleByteTimeseriesPropertyDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public IList<ByteTimeseriesPropertyObject> GetByteTimeseriesPropertyCollection( )
        {
            var result = new List<ByteTimeseriesPropertyObject>( );
            var simpleByteTimeseriesPropertyDataReader = GetByteTimeseriesPropertyCollectionDataReader( );
            using ( simpleByteTimeseriesPropertyDataReader )
            {
                while ( simpleByteTimeseriesPropertyDataReader.Read( ) )
                {
                    var data = simpleByteTimeseriesPropertyDataReader.GetDataObject( );
                    result.Add( data );
                }
            }
            return result;
        }

        public void GetByteTimeseriesPropertyCollection( Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleByteTimeseriesPropertyDataReader = GetByteTimeseriesPropertyCollectionDataReader( );
                using ( simpleByteTimeseriesPropertyDataReader )
                {
                    simpleByteTimeseriesPropertyDataReader.WriteResultSetTo( destinationWriter );
                }
            }
        }

        public SimpleByteTimeseriesPropertyDataReader GetByteTimeseriesPropertyCollectionByElementDataReader( Guid element )
        {
            const string sql = SimpleByteTimeseriesPropertyDataReader.BaseQuery + " WHERE " +
                    SimpleByteTimeseriesPropertyDataReader.ViewAliasName + ".[Element] = @element " +
                    " ORDER BY " + SimpleByteTimeseriesPropertyDataReader.ViewAliasName + ".[Element]," +SimpleByteTimeseriesPropertyDataReader.ViewAliasName + ".[Definition]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var elementParameter = sqlCommandParameters.AddReference( "@element", element );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleByteTimeseriesPropertyDataReader = new SimpleByteTimeseriesPropertyDataReader( _loggerFactory, sqlDataReader );
                return simpleByteTimeseriesPropertyDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<ByteTimeseriesPropertyObject> GetByteTimeseriesPropertyCollectionByElement( Guid element )
        {
            throw new NotImplementedException( );
        }
        public SimpleByteTimeseriesPropertyDataReader GetByteTimeseriesPropertyByElementAndDefinitionDataReader( Guid element, Guid definition )
        {
            const string sql = SimpleByteTimeseriesPropertyDataReader.BaseQuery + " WHERE " +
                    SimpleByteTimeseriesPropertyDataReader.ViewAliasName + ".[Element] = @element AND " +
                    SimpleByteTimeseriesPropertyDataReader.ViewAliasName + ".[Definition] = @definition " +
                    " ORDER BY " + SimpleByteTimeseriesPropertyDataReader.ViewAliasName + ".[Element]," +SimpleByteTimeseriesPropertyDataReader.ViewAliasName + ".[Definition]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var elementParameter = sqlCommandParameters.AddReference( "@element", element );
                var definitionParameter = sqlCommandParameters.AddReference( "@definition", definition );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleByteTimeseriesPropertyDataReader = new SimpleByteTimeseriesPropertyDataReader( _loggerFactory, sqlDataReader );
                return simpleByteTimeseriesPropertyDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public ByteTimeseriesPropertyObject? GetByteTimeseriesPropertyByElementAndDefinition( Guid element, Guid definition )
        {
            throw new NotImplementedException( );
        }
        public SimpleByteTimeseriesPropertyDataReader GetByteTimeseriesPropertyCollectionByDefinitionDataReader( Guid definition )
        {
            const string sql = SimpleByteTimeseriesPropertyDataReader.BaseQuery + " WHERE " +
                    SimpleByteTimeseriesPropertyDataReader.ViewAliasName + ".[Definition] = @definition " +
                    " ORDER BY " + SimpleByteTimeseriesPropertyDataReader.ViewAliasName + ".[Definition]," +SimpleByteTimeseriesPropertyDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var definitionParameter = sqlCommandParameters.AddReference( "@definition", definition );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleByteTimeseriesPropertyDataReader = new SimpleByteTimeseriesPropertyDataReader( _loggerFactory, sqlDataReader );
                return simpleByteTimeseriesPropertyDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<ByteTimeseriesPropertyObject> GetByteTimeseriesPropertyCollectionByDefinition( Guid definition )
        {
            throw new NotImplementedException( );
        }
        public SimpleByteTimeseriesPropertyDataReader GetByteTimeseriesPropertyCollectionByTimeseriesDataReader( Guid timeseries )
        {
            const string sql = SimpleByteTimeseriesPropertyDataReader.BaseQuery + " WHERE " +
                    SimpleByteTimeseriesPropertyDataReader.ViewAliasName + ".[Timeseries] = @timeseries " +
                    " ORDER BY " + SimpleByteTimeseriesPropertyDataReader.ViewAliasName + ".[Timeseries]," +SimpleByteTimeseriesPropertyDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var timeseriesParameter = sqlCommandParameters.AddReference( "@timeseries", timeseries );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleByteTimeseriesPropertyDataReader = new SimpleByteTimeseriesPropertyDataReader( _loggerFactory, sqlDataReader );
                return simpleByteTimeseriesPropertyDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<ByteTimeseriesPropertyObject> GetByteTimeseriesPropertyCollectionByTimeseries( Guid timeseries )
        {
            throw new NotImplementedException( );
        }
        // ---------------------------------------------------------------------
        // DateTimeTimeseriesProperty queries
        // ---------------------------------------------------------------------
        public SimpleDateTimeTimeseriesPropertyDataReader GetDateTimeTimeseriesPropertyByIdDataReader( Guid id )
        {
            const string sql = SimpleDateTimeTimeseriesPropertyDataReader.BaseQuery + "WHERE " + SimpleDateTimeTimeseriesPropertyDataReader.ViewAliasName + ".[Id] = @id"; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                sqlCommandParameters.AddGuid( "@id", id );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleDateTimeTimeseriesPropertyDataReader = new SimpleDateTimeTimeseriesPropertyDataReader( _loggerFactory, sqlDataReader );
                return simpleDateTimeTimeseriesPropertyDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public DateTimeTimeseriesPropertyObject? GetDateTimeTimeseriesPropertyById( Guid id )
        {
            var simpleDateTimeTimeseriesPropertyDataReader = GetDateTimeTimeseriesPropertyByIdDataReader( id );
            using ( simpleDateTimeTimeseriesPropertyDataReader )
            {
                if ( simpleDateTimeTimeseriesPropertyDataReader.Read( ) )
                {
                    var result = simpleDateTimeTimeseriesPropertyDataReader.GetDataObject( );
                    return result;
                }
            }
            return null;
        }

        public void GetDateTimeTimeseriesPropertyById( Guid id, Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleDateTimeTimeseriesPropertyDataReader = GetDateTimeTimeseriesPropertyByIdDataReader( id );
                using ( simpleDateTimeTimeseriesPropertyDataReader )
                {
                    if ( simpleDateTimeTimeseriesPropertyDataReader.Read( ) )
                    {
                        destinationWriter.Write( true );
                        simpleDateTimeTimeseriesPropertyDataReader.WriteTo( destinationWriter );
                    }
                    else
                    {
                        destinationWriter.Write( false );
                    }
                }
            }
        }

        public SimpleDateTimeTimeseriesPropertyDataReader GetDateTimeTimeseriesPropertyCollectionDataReader( )
        {
            const string sql = SimpleDateTimeTimeseriesPropertyDataReader.BaseQuery; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleDateTimeTimeseriesPropertyDataReader = new SimpleDateTimeTimeseriesPropertyDataReader( _loggerFactory, sqlDataReader );
                return simpleDateTimeTimeseriesPropertyDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public IList<DateTimeTimeseriesPropertyObject> GetDateTimeTimeseriesPropertyCollection( )
        {
            var result = new List<DateTimeTimeseriesPropertyObject>( );
            var simpleDateTimeTimeseriesPropertyDataReader = GetDateTimeTimeseriesPropertyCollectionDataReader( );
            using ( simpleDateTimeTimeseriesPropertyDataReader )
            {
                while ( simpleDateTimeTimeseriesPropertyDataReader.Read( ) )
                {
                    var data = simpleDateTimeTimeseriesPropertyDataReader.GetDataObject( );
                    result.Add( data );
                }
            }
            return result;
        }

        public void GetDateTimeTimeseriesPropertyCollection( Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleDateTimeTimeseriesPropertyDataReader = GetDateTimeTimeseriesPropertyCollectionDataReader( );
                using ( simpleDateTimeTimeseriesPropertyDataReader )
                {
                    simpleDateTimeTimeseriesPropertyDataReader.WriteResultSetTo( destinationWriter );
                }
            }
        }

        public SimpleDateTimeTimeseriesPropertyDataReader GetDateTimeTimeseriesPropertyCollectionByElementDataReader( Guid element )
        {
            const string sql = SimpleDateTimeTimeseriesPropertyDataReader.BaseQuery + " WHERE " +
                    SimpleDateTimeTimeseriesPropertyDataReader.ViewAliasName + ".[Element] = @element " +
                    " ORDER BY " + SimpleDateTimeTimeseriesPropertyDataReader.ViewAliasName + ".[Element]," +SimpleDateTimeTimeseriesPropertyDataReader.ViewAliasName + ".[Definition]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var elementParameter = sqlCommandParameters.AddReference( "@element", element );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleDateTimeTimeseriesPropertyDataReader = new SimpleDateTimeTimeseriesPropertyDataReader( _loggerFactory, sqlDataReader );
                return simpleDateTimeTimeseriesPropertyDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<DateTimeTimeseriesPropertyObject> GetDateTimeTimeseriesPropertyCollectionByElement( Guid element )
        {
            throw new NotImplementedException( );
        }
        public SimpleDateTimeTimeseriesPropertyDataReader GetDateTimeTimeseriesPropertyByElementAndDefinitionDataReader( Guid element, Guid definition )
        {
            const string sql = SimpleDateTimeTimeseriesPropertyDataReader.BaseQuery + " WHERE " +
                    SimpleDateTimeTimeseriesPropertyDataReader.ViewAliasName + ".[Element] = @element AND " +
                    SimpleDateTimeTimeseriesPropertyDataReader.ViewAliasName + ".[Definition] = @definition " +
                    " ORDER BY " + SimpleDateTimeTimeseriesPropertyDataReader.ViewAliasName + ".[Element]," +SimpleDateTimeTimeseriesPropertyDataReader.ViewAliasName + ".[Definition]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var elementParameter = sqlCommandParameters.AddReference( "@element", element );
                var definitionParameter = sqlCommandParameters.AddReference( "@definition", definition );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleDateTimeTimeseriesPropertyDataReader = new SimpleDateTimeTimeseriesPropertyDataReader( _loggerFactory, sqlDataReader );
                return simpleDateTimeTimeseriesPropertyDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public DateTimeTimeseriesPropertyObject? GetDateTimeTimeseriesPropertyByElementAndDefinition( Guid element, Guid definition )
        {
            throw new NotImplementedException( );
        }
        public SimpleDateTimeTimeseriesPropertyDataReader GetDateTimeTimeseriesPropertyCollectionByDefinitionDataReader( Guid definition )
        {
            const string sql = SimpleDateTimeTimeseriesPropertyDataReader.BaseQuery + " WHERE " +
                    SimpleDateTimeTimeseriesPropertyDataReader.ViewAliasName + ".[Definition] = @definition " +
                    " ORDER BY " + SimpleDateTimeTimeseriesPropertyDataReader.ViewAliasName + ".[Definition]," +SimpleDateTimeTimeseriesPropertyDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var definitionParameter = sqlCommandParameters.AddReference( "@definition", definition );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleDateTimeTimeseriesPropertyDataReader = new SimpleDateTimeTimeseriesPropertyDataReader( _loggerFactory, sqlDataReader );
                return simpleDateTimeTimeseriesPropertyDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<DateTimeTimeseriesPropertyObject> GetDateTimeTimeseriesPropertyCollectionByDefinition( Guid definition )
        {
            throw new NotImplementedException( );
        }
        public SimpleDateTimeTimeseriesPropertyDataReader GetDateTimeTimeseriesPropertyCollectionByTimeseriesDataReader( Guid timeseries )
        {
            const string sql = SimpleDateTimeTimeseriesPropertyDataReader.BaseQuery + " WHERE " +
                    SimpleDateTimeTimeseriesPropertyDataReader.ViewAliasName + ".[Timeseries] = @timeseries " +
                    " ORDER BY " + SimpleDateTimeTimeseriesPropertyDataReader.ViewAliasName + ".[Timeseries]," +SimpleDateTimeTimeseriesPropertyDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var timeseriesParameter = sqlCommandParameters.AddReference( "@timeseries", timeseries );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleDateTimeTimeseriesPropertyDataReader = new SimpleDateTimeTimeseriesPropertyDataReader( _loggerFactory, sqlDataReader );
                return simpleDateTimeTimeseriesPropertyDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<DateTimeTimeseriesPropertyObject> GetDateTimeTimeseriesPropertyCollectionByTimeseries( Guid timeseries )
        {
            throw new NotImplementedException( );
        }
        // ---------------------------------------------------------------------
        // DoubleTimeseriesProperty queries
        // ---------------------------------------------------------------------
        public SimpleDoubleTimeseriesPropertyDataReader GetDoubleTimeseriesPropertyByIdDataReader( Guid id )
        {
            const string sql = SimpleDoubleTimeseriesPropertyDataReader.BaseQuery + "WHERE " + SimpleDoubleTimeseriesPropertyDataReader.ViewAliasName + ".[Id] = @id"; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                sqlCommandParameters.AddGuid( "@id", id );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleDoubleTimeseriesPropertyDataReader = new SimpleDoubleTimeseriesPropertyDataReader( _loggerFactory, sqlDataReader );
                return simpleDoubleTimeseriesPropertyDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public DoubleTimeseriesPropertyObject? GetDoubleTimeseriesPropertyById( Guid id )
        {
            var simpleDoubleTimeseriesPropertyDataReader = GetDoubleTimeseriesPropertyByIdDataReader( id );
            using ( simpleDoubleTimeseriesPropertyDataReader )
            {
                if ( simpleDoubleTimeseriesPropertyDataReader.Read( ) )
                {
                    var result = simpleDoubleTimeseriesPropertyDataReader.GetDataObject( );
                    return result;
                }
            }
            return null;
        }

        public void GetDoubleTimeseriesPropertyById( Guid id, Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleDoubleTimeseriesPropertyDataReader = GetDoubleTimeseriesPropertyByIdDataReader( id );
                using ( simpleDoubleTimeseriesPropertyDataReader )
                {
                    if ( simpleDoubleTimeseriesPropertyDataReader.Read( ) )
                    {
                        destinationWriter.Write( true );
                        simpleDoubleTimeseriesPropertyDataReader.WriteTo( destinationWriter );
                    }
                    else
                    {
                        destinationWriter.Write( false );
                    }
                }
            }
        }

        public SimpleDoubleTimeseriesPropertyDataReader GetDoubleTimeseriesPropertyCollectionDataReader( )
        {
            const string sql = SimpleDoubleTimeseriesPropertyDataReader.BaseQuery; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleDoubleTimeseriesPropertyDataReader = new SimpleDoubleTimeseriesPropertyDataReader( _loggerFactory, sqlDataReader );
                return simpleDoubleTimeseriesPropertyDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public IList<DoubleTimeseriesPropertyObject> GetDoubleTimeseriesPropertyCollection( )
        {
            var result = new List<DoubleTimeseriesPropertyObject>( );
            var simpleDoubleTimeseriesPropertyDataReader = GetDoubleTimeseriesPropertyCollectionDataReader( );
            using ( simpleDoubleTimeseriesPropertyDataReader )
            {
                while ( simpleDoubleTimeseriesPropertyDataReader.Read( ) )
                {
                    var data = simpleDoubleTimeseriesPropertyDataReader.GetDataObject( );
                    result.Add( data );
                }
            }
            return result;
        }

        public void GetDoubleTimeseriesPropertyCollection( Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleDoubleTimeseriesPropertyDataReader = GetDoubleTimeseriesPropertyCollectionDataReader( );
                using ( simpleDoubleTimeseriesPropertyDataReader )
                {
                    simpleDoubleTimeseriesPropertyDataReader.WriteResultSetTo( destinationWriter );
                }
            }
        }

        public SimpleDoubleTimeseriesPropertyDataReader GetDoubleTimeseriesPropertyCollectionByElementDataReader( Guid element )
        {
            const string sql = SimpleDoubleTimeseriesPropertyDataReader.BaseQuery + " WHERE " +
                    SimpleDoubleTimeseriesPropertyDataReader.ViewAliasName + ".[Element] = @element " +
                    " ORDER BY " + SimpleDoubleTimeseriesPropertyDataReader.ViewAliasName + ".[Element]," +SimpleDoubleTimeseriesPropertyDataReader.ViewAliasName + ".[Definition]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var elementParameter = sqlCommandParameters.AddReference( "@element", element );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleDoubleTimeseriesPropertyDataReader = new SimpleDoubleTimeseriesPropertyDataReader( _loggerFactory, sqlDataReader );
                return simpleDoubleTimeseriesPropertyDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<DoubleTimeseriesPropertyObject> GetDoubleTimeseriesPropertyCollectionByElement( Guid element )
        {
            throw new NotImplementedException( );
        }
        public SimpleDoubleTimeseriesPropertyDataReader GetDoubleTimeseriesPropertyByElementAndDefinitionDataReader( Guid element, Guid definition )
        {
            const string sql = SimpleDoubleTimeseriesPropertyDataReader.BaseQuery + " WHERE " +
                    SimpleDoubleTimeseriesPropertyDataReader.ViewAliasName + ".[Element] = @element AND " +
                    SimpleDoubleTimeseriesPropertyDataReader.ViewAliasName + ".[Definition] = @definition " +
                    " ORDER BY " + SimpleDoubleTimeseriesPropertyDataReader.ViewAliasName + ".[Element]," +SimpleDoubleTimeseriesPropertyDataReader.ViewAliasName + ".[Definition]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var elementParameter = sqlCommandParameters.AddReference( "@element", element );
                var definitionParameter = sqlCommandParameters.AddReference( "@definition", definition );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleDoubleTimeseriesPropertyDataReader = new SimpleDoubleTimeseriesPropertyDataReader( _loggerFactory, sqlDataReader );
                return simpleDoubleTimeseriesPropertyDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public DoubleTimeseriesPropertyObject? GetDoubleTimeseriesPropertyByElementAndDefinition( Guid element, Guid definition )
        {
            throw new NotImplementedException( );
        }
        public SimpleDoubleTimeseriesPropertyDataReader GetDoubleTimeseriesPropertyCollectionByDefinitionDataReader( Guid definition )
        {
            const string sql = SimpleDoubleTimeseriesPropertyDataReader.BaseQuery + " WHERE " +
                    SimpleDoubleTimeseriesPropertyDataReader.ViewAliasName + ".[Definition] = @definition " +
                    " ORDER BY " + SimpleDoubleTimeseriesPropertyDataReader.ViewAliasName + ".[Definition]," +SimpleDoubleTimeseriesPropertyDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var definitionParameter = sqlCommandParameters.AddReference( "@definition", definition );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleDoubleTimeseriesPropertyDataReader = new SimpleDoubleTimeseriesPropertyDataReader( _loggerFactory, sqlDataReader );
                return simpleDoubleTimeseriesPropertyDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<DoubleTimeseriesPropertyObject> GetDoubleTimeseriesPropertyCollectionByDefinition( Guid definition )
        {
            throw new NotImplementedException( );
        }
        public SimpleDoubleTimeseriesPropertyDataReader GetDoubleTimeseriesPropertyCollectionByTimeseriesDataReader( Guid timeseries )
        {
            const string sql = SimpleDoubleTimeseriesPropertyDataReader.BaseQuery + " WHERE " +
                    SimpleDoubleTimeseriesPropertyDataReader.ViewAliasName + ".[Timeseries] = @timeseries " +
                    " ORDER BY " + SimpleDoubleTimeseriesPropertyDataReader.ViewAliasName + ".[Timeseries]," +SimpleDoubleTimeseriesPropertyDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var timeseriesParameter = sqlCommandParameters.AddReference( "@timeseries", timeseries );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleDoubleTimeseriesPropertyDataReader = new SimpleDoubleTimeseriesPropertyDataReader( _loggerFactory, sqlDataReader );
                return simpleDoubleTimeseriesPropertyDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<DoubleTimeseriesPropertyObject> GetDoubleTimeseriesPropertyCollectionByTimeseries( Guid timeseries )
        {
            throw new NotImplementedException( );
        }
        // ---------------------------------------------------------------------
        // GuidTimeseriesProperty queries
        // ---------------------------------------------------------------------
        public SimpleGuidTimeseriesPropertyDataReader GetGuidTimeseriesPropertyByIdDataReader( Guid id )
        {
            const string sql = SimpleGuidTimeseriesPropertyDataReader.BaseQuery + "WHERE " + SimpleGuidTimeseriesPropertyDataReader.ViewAliasName + ".[Id] = @id"; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                sqlCommandParameters.AddGuid( "@id", id );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleGuidTimeseriesPropertyDataReader = new SimpleGuidTimeseriesPropertyDataReader( _loggerFactory, sqlDataReader );
                return simpleGuidTimeseriesPropertyDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public GuidTimeseriesPropertyObject? GetGuidTimeseriesPropertyById( Guid id )
        {
            var simpleGuidTimeseriesPropertyDataReader = GetGuidTimeseriesPropertyByIdDataReader( id );
            using ( simpleGuidTimeseriesPropertyDataReader )
            {
                if ( simpleGuidTimeseriesPropertyDataReader.Read( ) )
                {
                    var result = simpleGuidTimeseriesPropertyDataReader.GetDataObject( );
                    return result;
                }
            }
            return null;
        }

        public void GetGuidTimeseriesPropertyById( Guid id, Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleGuidTimeseriesPropertyDataReader = GetGuidTimeseriesPropertyByIdDataReader( id );
                using ( simpleGuidTimeseriesPropertyDataReader )
                {
                    if ( simpleGuidTimeseriesPropertyDataReader.Read( ) )
                    {
                        destinationWriter.Write( true );
                        simpleGuidTimeseriesPropertyDataReader.WriteTo( destinationWriter );
                    }
                    else
                    {
                        destinationWriter.Write( false );
                    }
                }
            }
        }

        public SimpleGuidTimeseriesPropertyDataReader GetGuidTimeseriesPropertyCollectionDataReader( )
        {
            const string sql = SimpleGuidTimeseriesPropertyDataReader.BaseQuery; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleGuidTimeseriesPropertyDataReader = new SimpleGuidTimeseriesPropertyDataReader( _loggerFactory, sqlDataReader );
                return simpleGuidTimeseriesPropertyDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public IList<GuidTimeseriesPropertyObject> GetGuidTimeseriesPropertyCollection( )
        {
            var result = new List<GuidTimeseriesPropertyObject>( );
            var simpleGuidTimeseriesPropertyDataReader = GetGuidTimeseriesPropertyCollectionDataReader( );
            using ( simpleGuidTimeseriesPropertyDataReader )
            {
                while ( simpleGuidTimeseriesPropertyDataReader.Read( ) )
                {
                    var data = simpleGuidTimeseriesPropertyDataReader.GetDataObject( );
                    result.Add( data );
                }
            }
            return result;
        }

        public void GetGuidTimeseriesPropertyCollection( Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleGuidTimeseriesPropertyDataReader = GetGuidTimeseriesPropertyCollectionDataReader( );
                using ( simpleGuidTimeseriesPropertyDataReader )
                {
                    simpleGuidTimeseriesPropertyDataReader.WriteResultSetTo( destinationWriter );
                }
            }
        }

        public SimpleGuidTimeseriesPropertyDataReader GetGuidTimeseriesPropertyCollectionByElementDataReader( Guid element )
        {
            const string sql = SimpleGuidTimeseriesPropertyDataReader.BaseQuery + " WHERE " +
                    SimpleGuidTimeseriesPropertyDataReader.ViewAliasName + ".[Element] = @element " +
                    " ORDER BY " + SimpleGuidTimeseriesPropertyDataReader.ViewAliasName + ".[Element]," +SimpleGuidTimeseriesPropertyDataReader.ViewAliasName + ".[Definition]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var elementParameter = sqlCommandParameters.AddReference( "@element", element );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleGuidTimeseriesPropertyDataReader = new SimpleGuidTimeseriesPropertyDataReader( _loggerFactory, sqlDataReader );
                return simpleGuidTimeseriesPropertyDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<GuidTimeseriesPropertyObject> GetGuidTimeseriesPropertyCollectionByElement( Guid element )
        {
            throw new NotImplementedException( );
        }
        public SimpleGuidTimeseriesPropertyDataReader GetGuidTimeseriesPropertyByElementAndDefinitionDataReader( Guid element, Guid definition )
        {
            const string sql = SimpleGuidTimeseriesPropertyDataReader.BaseQuery + " WHERE " +
                    SimpleGuidTimeseriesPropertyDataReader.ViewAliasName + ".[Element] = @element AND " +
                    SimpleGuidTimeseriesPropertyDataReader.ViewAliasName + ".[Definition] = @definition " +
                    " ORDER BY " + SimpleGuidTimeseriesPropertyDataReader.ViewAliasName + ".[Element]," +SimpleGuidTimeseriesPropertyDataReader.ViewAliasName + ".[Definition]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var elementParameter = sqlCommandParameters.AddReference( "@element", element );
                var definitionParameter = sqlCommandParameters.AddReference( "@definition", definition );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleGuidTimeseriesPropertyDataReader = new SimpleGuidTimeseriesPropertyDataReader( _loggerFactory, sqlDataReader );
                return simpleGuidTimeseriesPropertyDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public GuidTimeseriesPropertyObject? GetGuidTimeseriesPropertyByElementAndDefinition( Guid element, Guid definition )
        {
            throw new NotImplementedException( );
        }
        public SimpleGuidTimeseriesPropertyDataReader GetGuidTimeseriesPropertyCollectionByDefinitionDataReader( Guid definition )
        {
            const string sql = SimpleGuidTimeseriesPropertyDataReader.BaseQuery + " WHERE " +
                    SimpleGuidTimeseriesPropertyDataReader.ViewAliasName + ".[Definition] = @definition " +
                    " ORDER BY " + SimpleGuidTimeseriesPropertyDataReader.ViewAliasName + ".[Definition]," +SimpleGuidTimeseriesPropertyDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var definitionParameter = sqlCommandParameters.AddReference( "@definition", definition );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleGuidTimeseriesPropertyDataReader = new SimpleGuidTimeseriesPropertyDataReader( _loggerFactory, sqlDataReader );
                return simpleGuidTimeseriesPropertyDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<GuidTimeseriesPropertyObject> GetGuidTimeseriesPropertyCollectionByDefinition( Guid definition )
        {
            throw new NotImplementedException( );
        }
        public SimpleGuidTimeseriesPropertyDataReader GetGuidTimeseriesPropertyCollectionByTimeseriesDataReader( Guid timeseries )
        {
            const string sql = SimpleGuidTimeseriesPropertyDataReader.BaseQuery + " WHERE " +
                    SimpleGuidTimeseriesPropertyDataReader.ViewAliasName + ".[Timeseries] = @timeseries " +
                    " ORDER BY " + SimpleGuidTimeseriesPropertyDataReader.ViewAliasName + ".[Timeseries]," +SimpleGuidTimeseriesPropertyDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var timeseriesParameter = sqlCommandParameters.AddReference( "@timeseries", timeseries );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleGuidTimeseriesPropertyDataReader = new SimpleGuidTimeseriesPropertyDataReader( _loggerFactory, sqlDataReader );
                return simpleGuidTimeseriesPropertyDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<GuidTimeseriesPropertyObject> GetGuidTimeseriesPropertyCollectionByTimeseries( Guid timeseries )
        {
            throw new NotImplementedException( );
        }
        // ---------------------------------------------------------------------
        // Int16TimeseriesProperty queries
        // ---------------------------------------------------------------------
        public SimpleInt16TimeseriesPropertyDataReader GetInt16TimeseriesPropertyByIdDataReader( Guid id )
        {
            const string sql = SimpleInt16TimeseriesPropertyDataReader.BaseQuery + "WHERE " + SimpleInt16TimeseriesPropertyDataReader.ViewAliasName + ".[Id] = @id"; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                sqlCommandParameters.AddGuid( "@id", id );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleInt16TimeseriesPropertyDataReader = new SimpleInt16TimeseriesPropertyDataReader( _loggerFactory, sqlDataReader );
                return simpleInt16TimeseriesPropertyDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public Int16TimeseriesPropertyObject? GetInt16TimeseriesPropertyById( Guid id )
        {
            var simpleInt16TimeseriesPropertyDataReader = GetInt16TimeseriesPropertyByIdDataReader( id );
            using ( simpleInt16TimeseriesPropertyDataReader )
            {
                if ( simpleInt16TimeseriesPropertyDataReader.Read( ) )
                {
                    var result = simpleInt16TimeseriesPropertyDataReader.GetDataObject( );
                    return result;
                }
            }
            return null;
        }

        public void GetInt16TimeseriesPropertyById( Guid id, Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleInt16TimeseriesPropertyDataReader = GetInt16TimeseriesPropertyByIdDataReader( id );
                using ( simpleInt16TimeseriesPropertyDataReader )
                {
                    if ( simpleInt16TimeseriesPropertyDataReader.Read( ) )
                    {
                        destinationWriter.Write( true );
                        simpleInt16TimeseriesPropertyDataReader.WriteTo( destinationWriter );
                    }
                    else
                    {
                        destinationWriter.Write( false );
                    }
                }
            }
        }

        public SimpleInt16TimeseriesPropertyDataReader GetInt16TimeseriesPropertyCollectionDataReader( )
        {
            const string sql = SimpleInt16TimeseriesPropertyDataReader.BaseQuery; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleInt16TimeseriesPropertyDataReader = new SimpleInt16TimeseriesPropertyDataReader( _loggerFactory, sqlDataReader );
                return simpleInt16TimeseriesPropertyDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public IList<Int16TimeseriesPropertyObject> GetInt16TimeseriesPropertyCollection( )
        {
            var result = new List<Int16TimeseriesPropertyObject>( );
            var simpleInt16TimeseriesPropertyDataReader = GetInt16TimeseriesPropertyCollectionDataReader( );
            using ( simpleInt16TimeseriesPropertyDataReader )
            {
                while ( simpleInt16TimeseriesPropertyDataReader.Read( ) )
                {
                    var data = simpleInt16TimeseriesPropertyDataReader.GetDataObject( );
                    result.Add( data );
                }
            }
            return result;
        }

        public void GetInt16TimeseriesPropertyCollection( Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleInt16TimeseriesPropertyDataReader = GetInt16TimeseriesPropertyCollectionDataReader( );
                using ( simpleInt16TimeseriesPropertyDataReader )
                {
                    simpleInt16TimeseriesPropertyDataReader.WriteResultSetTo( destinationWriter );
                }
            }
        }

        public SimpleInt16TimeseriesPropertyDataReader GetInt16TimeseriesPropertyCollectionByElementDataReader( Guid element )
        {
            const string sql = SimpleInt16TimeseriesPropertyDataReader.BaseQuery + " WHERE " +
                    SimpleInt16TimeseriesPropertyDataReader.ViewAliasName + ".[Element] = @element " +
                    " ORDER BY " + SimpleInt16TimeseriesPropertyDataReader.ViewAliasName + ".[Element]," +SimpleInt16TimeseriesPropertyDataReader.ViewAliasName + ".[Definition]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var elementParameter = sqlCommandParameters.AddReference( "@element", element );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleInt16TimeseriesPropertyDataReader = new SimpleInt16TimeseriesPropertyDataReader( _loggerFactory, sqlDataReader );
                return simpleInt16TimeseriesPropertyDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<Int16TimeseriesPropertyObject> GetInt16TimeseriesPropertyCollectionByElement( Guid element )
        {
            throw new NotImplementedException( );
        }
        public SimpleInt16TimeseriesPropertyDataReader GetInt16TimeseriesPropertyByElementAndDefinitionDataReader( Guid element, Guid definition )
        {
            const string sql = SimpleInt16TimeseriesPropertyDataReader.BaseQuery + " WHERE " +
                    SimpleInt16TimeseriesPropertyDataReader.ViewAliasName + ".[Element] = @element AND " +
                    SimpleInt16TimeseriesPropertyDataReader.ViewAliasName + ".[Definition] = @definition " +
                    " ORDER BY " + SimpleInt16TimeseriesPropertyDataReader.ViewAliasName + ".[Element]," +SimpleInt16TimeseriesPropertyDataReader.ViewAliasName + ".[Definition]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var elementParameter = sqlCommandParameters.AddReference( "@element", element );
                var definitionParameter = sqlCommandParameters.AddReference( "@definition", definition );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleInt16TimeseriesPropertyDataReader = new SimpleInt16TimeseriesPropertyDataReader( _loggerFactory, sqlDataReader );
                return simpleInt16TimeseriesPropertyDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public Int16TimeseriesPropertyObject? GetInt16TimeseriesPropertyByElementAndDefinition( Guid element, Guid definition )
        {
            throw new NotImplementedException( );
        }
        public SimpleInt16TimeseriesPropertyDataReader GetInt16TimeseriesPropertyCollectionByDefinitionDataReader( Guid definition )
        {
            const string sql = SimpleInt16TimeseriesPropertyDataReader.BaseQuery + " WHERE " +
                    SimpleInt16TimeseriesPropertyDataReader.ViewAliasName + ".[Definition] = @definition " +
                    " ORDER BY " + SimpleInt16TimeseriesPropertyDataReader.ViewAliasName + ".[Definition]," +SimpleInt16TimeseriesPropertyDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var definitionParameter = sqlCommandParameters.AddReference( "@definition", definition );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleInt16TimeseriesPropertyDataReader = new SimpleInt16TimeseriesPropertyDataReader( _loggerFactory, sqlDataReader );
                return simpleInt16TimeseriesPropertyDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<Int16TimeseriesPropertyObject> GetInt16TimeseriesPropertyCollectionByDefinition( Guid definition )
        {
            throw new NotImplementedException( );
        }
        public SimpleInt16TimeseriesPropertyDataReader GetInt16TimeseriesPropertyCollectionByTimeseriesDataReader( Guid timeseries )
        {
            const string sql = SimpleInt16TimeseriesPropertyDataReader.BaseQuery + " WHERE " +
                    SimpleInt16TimeseriesPropertyDataReader.ViewAliasName + ".[Timeseries] = @timeseries " +
                    " ORDER BY " + SimpleInt16TimeseriesPropertyDataReader.ViewAliasName + ".[Timeseries]," +SimpleInt16TimeseriesPropertyDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var timeseriesParameter = sqlCommandParameters.AddReference( "@timeseries", timeseries );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleInt16TimeseriesPropertyDataReader = new SimpleInt16TimeseriesPropertyDataReader( _loggerFactory, sqlDataReader );
                return simpleInt16TimeseriesPropertyDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<Int16TimeseriesPropertyObject> GetInt16TimeseriesPropertyCollectionByTimeseries( Guid timeseries )
        {
            throw new NotImplementedException( );
        }
        // ---------------------------------------------------------------------
        // Int32TimeseriesProperty queries
        // ---------------------------------------------------------------------
        public SimpleInt32TimeseriesPropertyDataReader GetInt32TimeseriesPropertyByIdDataReader( Guid id )
        {
            const string sql = SimpleInt32TimeseriesPropertyDataReader.BaseQuery + "WHERE " + SimpleInt32TimeseriesPropertyDataReader.ViewAliasName + ".[Id] = @id"; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                sqlCommandParameters.AddGuid( "@id", id );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleInt32TimeseriesPropertyDataReader = new SimpleInt32TimeseriesPropertyDataReader( _loggerFactory, sqlDataReader );
                return simpleInt32TimeseriesPropertyDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public Int32TimeseriesPropertyObject? GetInt32TimeseriesPropertyById( Guid id )
        {
            var simpleInt32TimeseriesPropertyDataReader = GetInt32TimeseriesPropertyByIdDataReader( id );
            using ( simpleInt32TimeseriesPropertyDataReader )
            {
                if ( simpleInt32TimeseriesPropertyDataReader.Read( ) )
                {
                    var result = simpleInt32TimeseriesPropertyDataReader.GetDataObject( );
                    return result;
                }
            }
            return null;
        }

        public void GetInt32TimeseriesPropertyById( Guid id, Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleInt32TimeseriesPropertyDataReader = GetInt32TimeseriesPropertyByIdDataReader( id );
                using ( simpleInt32TimeseriesPropertyDataReader )
                {
                    if ( simpleInt32TimeseriesPropertyDataReader.Read( ) )
                    {
                        destinationWriter.Write( true );
                        simpleInt32TimeseriesPropertyDataReader.WriteTo( destinationWriter );
                    }
                    else
                    {
                        destinationWriter.Write( false );
                    }
                }
            }
        }

        public SimpleInt32TimeseriesPropertyDataReader GetInt32TimeseriesPropertyCollectionDataReader( )
        {
            const string sql = SimpleInt32TimeseriesPropertyDataReader.BaseQuery; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleInt32TimeseriesPropertyDataReader = new SimpleInt32TimeseriesPropertyDataReader( _loggerFactory, sqlDataReader );
                return simpleInt32TimeseriesPropertyDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public IList<Int32TimeseriesPropertyObject> GetInt32TimeseriesPropertyCollection( )
        {
            var result = new List<Int32TimeseriesPropertyObject>( );
            var simpleInt32TimeseriesPropertyDataReader = GetInt32TimeseriesPropertyCollectionDataReader( );
            using ( simpleInt32TimeseriesPropertyDataReader )
            {
                while ( simpleInt32TimeseriesPropertyDataReader.Read( ) )
                {
                    var data = simpleInt32TimeseriesPropertyDataReader.GetDataObject( );
                    result.Add( data );
                }
            }
            return result;
        }

        public void GetInt32TimeseriesPropertyCollection( Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleInt32TimeseriesPropertyDataReader = GetInt32TimeseriesPropertyCollectionDataReader( );
                using ( simpleInt32TimeseriesPropertyDataReader )
                {
                    simpleInt32TimeseriesPropertyDataReader.WriteResultSetTo( destinationWriter );
                }
            }
        }

        public SimpleInt32TimeseriesPropertyDataReader GetInt32TimeseriesPropertyCollectionByElementDataReader( Guid element )
        {
            const string sql = SimpleInt32TimeseriesPropertyDataReader.BaseQuery + " WHERE " +
                    SimpleInt32TimeseriesPropertyDataReader.ViewAliasName + ".[Element] = @element " +
                    " ORDER BY " + SimpleInt32TimeseriesPropertyDataReader.ViewAliasName + ".[Element]," +SimpleInt32TimeseriesPropertyDataReader.ViewAliasName + ".[Definition]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var elementParameter = sqlCommandParameters.AddReference( "@element", element );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleInt32TimeseriesPropertyDataReader = new SimpleInt32TimeseriesPropertyDataReader( _loggerFactory, sqlDataReader );
                return simpleInt32TimeseriesPropertyDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<Int32TimeseriesPropertyObject> GetInt32TimeseriesPropertyCollectionByElement( Guid element )
        {
            throw new NotImplementedException( );
        }
        public SimpleInt32TimeseriesPropertyDataReader GetInt32TimeseriesPropertyByElementAndDefinitionDataReader( Guid element, Guid definition )
        {
            const string sql = SimpleInt32TimeseriesPropertyDataReader.BaseQuery + " WHERE " +
                    SimpleInt32TimeseriesPropertyDataReader.ViewAliasName + ".[Element] = @element AND " +
                    SimpleInt32TimeseriesPropertyDataReader.ViewAliasName + ".[Definition] = @definition " +
                    " ORDER BY " + SimpleInt32TimeseriesPropertyDataReader.ViewAliasName + ".[Element]," +SimpleInt32TimeseriesPropertyDataReader.ViewAliasName + ".[Definition]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var elementParameter = sqlCommandParameters.AddReference( "@element", element );
                var definitionParameter = sqlCommandParameters.AddReference( "@definition", definition );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleInt32TimeseriesPropertyDataReader = new SimpleInt32TimeseriesPropertyDataReader( _loggerFactory, sqlDataReader );
                return simpleInt32TimeseriesPropertyDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public Int32TimeseriesPropertyObject? GetInt32TimeseriesPropertyByElementAndDefinition( Guid element, Guid definition )
        {
            throw new NotImplementedException( );
        }
        public SimpleInt32TimeseriesPropertyDataReader GetInt32TimeseriesPropertyCollectionByDefinitionDataReader( Guid definition )
        {
            const string sql = SimpleInt32TimeseriesPropertyDataReader.BaseQuery + " WHERE " +
                    SimpleInt32TimeseriesPropertyDataReader.ViewAliasName + ".[Definition] = @definition " +
                    " ORDER BY " + SimpleInt32TimeseriesPropertyDataReader.ViewAliasName + ".[Definition]," +SimpleInt32TimeseriesPropertyDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var definitionParameter = sqlCommandParameters.AddReference( "@definition", definition );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleInt32TimeseriesPropertyDataReader = new SimpleInt32TimeseriesPropertyDataReader( _loggerFactory, sqlDataReader );
                return simpleInt32TimeseriesPropertyDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<Int32TimeseriesPropertyObject> GetInt32TimeseriesPropertyCollectionByDefinition( Guid definition )
        {
            throw new NotImplementedException( );
        }
        public SimpleInt32TimeseriesPropertyDataReader GetInt32TimeseriesPropertyCollectionByTimeseriesDataReader( Guid timeseries )
        {
            const string sql = SimpleInt32TimeseriesPropertyDataReader.BaseQuery + " WHERE " +
                    SimpleInt32TimeseriesPropertyDataReader.ViewAliasName + ".[Timeseries] = @timeseries " +
                    " ORDER BY " + SimpleInt32TimeseriesPropertyDataReader.ViewAliasName + ".[Timeseries]," +SimpleInt32TimeseriesPropertyDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var timeseriesParameter = sqlCommandParameters.AddReference( "@timeseries", timeseries );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleInt32TimeseriesPropertyDataReader = new SimpleInt32TimeseriesPropertyDataReader( _loggerFactory, sqlDataReader );
                return simpleInt32TimeseriesPropertyDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<Int32TimeseriesPropertyObject> GetInt32TimeseriesPropertyCollectionByTimeseries( Guid timeseries )
        {
            throw new NotImplementedException( );
        }
        // ---------------------------------------------------------------------
        // Int64TimeseriesProperty queries
        // ---------------------------------------------------------------------
        public SimpleInt64TimeseriesPropertyDataReader GetInt64TimeseriesPropertyByIdDataReader( Guid id )
        {
            const string sql = SimpleInt64TimeseriesPropertyDataReader.BaseQuery + "WHERE " + SimpleInt64TimeseriesPropertyDataReader.ViewAliasName + ".[Id] = @id"; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                sqlCommandParameters.AddGuid( "@id", id );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleInt64TimeseriesPropertyDataReader = new SimpleInt64TimeseriesPropertyDataReader( _loggerFactory, sqlDataReader );
                return simpleInt64TimeseriesPropertyDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public Int64TimeseriesPropertyObject? GetInt64TimeseriesPropertyById( Guid id )
        {
            var simpleInt64TimeseriesPropertyDataReader = GetInt64TimeseriesPropertyByIdDataReader( id );
            using ( simpleInt64TimeseriesPropertyDataReader )
            {
                if ( simpleInt64TimeseriesPropertyDataReader.Read( ) )
                {
                    var result = simpleInt64TimeseriesPropertyDataReader.GetDataObject( );
                    return result;
                }
            }
            return null;
        }

        public void GetInt64TimeseriesPropertyById( Guid id, Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleInt64TimeseriesPropertyDataReader = GetInt64TimeseriesPropertyByIdDataReader( id );
                using ( simpleInt64TimeseriesPropertyDataReader )
                {
                    if ( simpleInt64TimeseriesPropertyDataReader.Read( ) )
                    {
                        destinationWriter.Write( true );
                        simpleInt64TimeseriesPropertyDataReader.WriteTo( destinationWriter );
                    }
                    else
                    {
                        destinationWriter.Write( false );
                    }
                }
            }
        }

        public SimpleInt64TimeseriesPropertyDataReader GetInt64TimeseriesPropertyCollectionDataReader( )
        {
            const string sql = SimpleInt64TimeseriesPropertyDataReader.BaseQuery; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleInt64TimeseriesPropertyDataReader = new SimpleInt64TimeseriesPropertyDataReader( _loggerFactory, sqlDataReader );
                return simpleInt64TimeseriesPropertyDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public IList<Int64TimeseriesPropertyObject> GetInt64TimeseriesPropertyCollection( )
        {
            var result = new List<Int64TimeseriesPropertyObject>( );
            var simpleInt64TimeseriesPropertyDataReader = GetInt64TimeseriesPropertyCollectionDataReader( );
            using ( simpleInt64TimeseriesPropertyDataReader )
            {
                while ( simpleInt64TimeseriesPropertyDataReader.Read( ) )
                {
                    var data = simpleInt64TimeseriesPropertyDataReader.GetDataObject( );
                    result.Add( data );
                }
            }
            return result;
        }

        public void GetInt64TimeseriesPropertyCollection( Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleInt64TimeseriesPropertyDataReader = GetInt64TimeseriesPropertyCollectionDataReader( );
                using ( simpleInt64TimeseriesPropertyDataReader )
                {
                    simpleInt64TimeseriesPropertyDataReader.WriteResultSetTo( destinationWriter );
                }
            }
        }

        public SimpleInt64TimeseriesPropertyDataReader GetInt64TimeseriesPropertyCollectionByElementDataReader( Guid element )
        {
            const string sql = SimpleInt64TimeseriesPropertyDataReader.BaseQuery + " WHERE " +
                    SimpleInt64TimeseriesPropertyDataReader.ViewAliasName + ".[Element] = @element " +
                    " ORDER BY " + SimpleInt64TimeseriesPropertyDataReader.ViewAliasName + ".[Element]," +SimpleInt64TimeseriesPropertyDataReader.ViewAliasName + ".[Definition]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var elementParameter = sqlCommandParameters.AddReference( "@element", element );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleInt64TimeseriesPropertyDataReader = new SimpleInt64TimeseriesPropertyDataReader( _loggerFactory, sqlDataReader );
                return simpleInt64TimeseriesPropertyDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<Int64TimeseriesPropertyObject> GetInt64TimeseriesPropertyCollectionByElement( Guid element )
        {
            throw new NotImplementedException( );
        }
        public SimpleInt64TimeseriesPropertyDataReader GetInt64TimeseriesPropertyByElementAndDefinitionDataReader( Guid element, Guid definition )
        {
            const string sql = SimpleInt64TimeseriesPropertyDataReader.BaseQuery + " WHERE " +
                    SimpleInt64TimeseriesPropertyDataReader.ViewAliasName + ".[Element] = @element AND " +
                    SimpleInt64TimeseriesPropertyDataReader.ViewAliasName + ".[Definition] = @definition " +
                    " ORDER BY " + SimpleInt64TimeseriesPropertyDataReader.ViewAliasName + ".[Element]," +SimpleInt64TimeseriesPropertyDataReader.ViewAliasName + ".[Definition]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var elementParameter = sqlCommandParameters.AddReference( "@element", element );
                var definitionParameter = sqlCommandParameters.AddReference( "@definition", definition );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleInt64TimeseriesPropertyDataReader = new SimpleInt64TimeseriesPropertyDataReader( _loggerFactory, sqlDataReader );
                return simpleInt64TimeseriesPropertyDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public Int64TimeseriesPropertyObject? GetInt64TimeseriesPropertyByElementAndDefinition( Guid element, Guid definition )
        {
            throw new NotImplementedException( );
        }
        public SimpleInt64TimeseriesPropertyDataReader GetInt64TimeseriesPropertyCollectionByDefinitionDataReader( Guid definition )
        {
            const string sql = SimpleInt64TimeseriesPropertyDataReader.BaseQuery + " WHERE " +
                    SimpleInt64TimeseriesPropertyDataReader.ViewAliasName + ".[Definition] = @definition " +
                    " ORDER BY " + SimpleInt64TimeseriesPropertyDataReader.ViewAliasName + ".[Definition]," +SimpleInt64TimeseriesPropertyDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var definitionParameter = sqlCommandParameters.AddReference( "@definition", definition );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleInt64TimeseriesPropertyDataReader = new SimpleInt64TimeseriesPropertyDataReader( _loggerFactory, sqlDataReader );
                return simpleInt64TimeseriesPropertyDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<Int64TimeseriesPropertyObject> GetInt64TimeseriesPropertyCollectionByDefinition( Guid definition )
        {
            throw new NotImplementedException( );
        }
        public SimpleInt64TimeseriesPropertyDataReader GetInt64TimeseriesPropertyCollectionByTimeseriesDataReader( Guid timeseries )
        {
            const string sql = SimpleInt64TimeseriesPropertyDataReader.BaseQuery + " WHERE " +
                    SimpleInt64TimeseriesPropertyDataReader.ViewAliasName + ".[Timeseries] = @timeseries " +
                    " ORDER BY " + SimpleInt64TimeseriesPropertyDataReader.ViewAliasName + ".[Timeseries]," +SimpleInt64TimeseriesPropertyDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var timeseriesParameter = sqlCommandParameters.AddReference( "@timeseries", timeseries );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleInt64TimeseriesPropertyDataReader = new SimpleInt64TimeseriesPropertyDataReader( _loggerFactory, sqlDataReader );
                return simpleInt64TimeseriesPropertyDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<Int64TimeseriesPropertyObject> GetInt64TimeseriesPropertyCollectionByTimeseries( Guid timeseries )
        {
            throw new NotImplementedException( );
        }
        // ---------------------------------------------------------------------
        // ReferenceTimeseriesProperty queries
        // ---------------------------------------------------------------------
        public SimpleReferenceTimeseriesPropertyDataReader GetReferenceTimeseriesPropertyByIdDataReader( Guid id )
        {
            const string sql = SimpleReferenceTimeseriesPropertyDataReader.BaseQuery + "WHERE " + SimpleReferenceTimeseriesPropertyDataReader.ViewAliasName + ".[Id] = @id"; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                sqlCommandParameters.AddGuid( "@id", id );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleReferenceTimeseriesPropertyDataReader = new SimpleReferenceTimeseriesPropertyDataReader( _loggerFactory, sqlDataReader );
                return simpleReferenceTimeseriesPropertyDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public ReferenceTimeseriesPropertyObject? GetReferenceTimeseriesPropertyById( Guid id )
        {
            var simpleReferenceTimeseriesPropertyDataReader = GetReferenceTimeseriesPropertyByIdDataReader( id );
            using ( simpleReferenceTimeseriesPropertyDataReader )
            {
                if ( simpleReferenceTimeseriesPropertyDataReader.Read( ) )
                {
                    var result = simpleReferenceTimeseriesPropertyDataReader.GetDataObject( );
                    return result;
                }
            }
            return null;
        }

        public void GetReferenceTimeseriesPropertyById( Guid id, Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleReferenceTimeseriesPropertyDataReader = GetReferenceTimeseriesPropertyByIdDataReader( id );
                using ( simpleReferenceTimeseriesPropertyDataReader )
                {
                    if ( simpleReferenceTimeseriesPropertyDataReader.Read( ) )
                    {
                        destinationWriter.Write( true );
                        simpleReferenceTimeseriesPropertyDataReader.WriteTo( destinationWriter );
                    }
                    else
                    {
                        destinationWriter.Write( false );
                    }
                }
            }
        }

        public SimpleReferenceTimeseriesPropertyDataReader GetReferenceTimeseriesPropertyCollectionDataReader( )
        {
            const string sql = SimpleReferenceTimeseriesPropertyDataReader.BaseQuery; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleReferenceTimeseriesPropertyDataReader = new SimpleReferenceTimeseriesPropertyDataReader( _loggerFactory, sqlDataReader );
                return simpleReferenceTimeseriesPropertyDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public IList<ReferenceTimeseriesPropertyObject> GetReferenceTimeseriesPropertyCollection( )
        {
            var result = new List<ReferenceTimeseriesPropertyObject>( );
            var simpleReferenceTimeseriesPropertyDataReader = GetReferenceTimeseriesPropertyCollectionDataReader( );
            using ( simpleReferenceTimeseriesPropertyDataReader )
            {
                while ( simpleReferenceTimeseriesPropertyDataReader.Read( ) )
                {
                    var data = simpleReferenceTimeseriesPropertyDataReader.GetDataObject( );
                    result.Add( data );
                }
            }
            return result;
        }

        public void GetReferenceTimeseriesPropertyCollection( Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleReferenceTimeseriesPropertyDataReader = GetReferenceTimeseriesPropertyCollectionDataReader( );
                using ( simpleReferenceTimeseriesPropertyDataReader )
                {
                    simpleReferenceTimeseriesPropertyDataReader.WriteResultSetTo( destinationWriter );
                }
            }
        }

        public SimpleReferenceTimeseriesPropertyDataReader GetReferenceTimeseriesPropertyCollectionByElementDataReader( Guid element )
        {
            const string sql = SimpleReferenceTimeseriesPropertyDataReader.BaseQuery + " WHERE " +
                    SimpleReferenceTimeseriesPropertyDataReader.ViewAliasName + ".[Element] = @element " +
                    " ORDER BY " + SimpleReferenceTimeseriesPropertyDataReader.ViewAliasName + ".[Element]," +SimpleReferenceTimeseriesPropertyDataReader.ViewAliasName + ".[Definition]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var elementParameter = sqlCommandParameters.AddReference( "@element", element );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleReferenceTimeseriesPropertyDataReader = new SimpleReferenceTimeseriesPropertyDataReader( _loggerFactory, sqlDataReader );
                return simpleReferenceTimeseriesPropertyDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<ReferenceTimeseriesPropertyObject> GetReferenceTimeseriesPropertyCollectionByElement( Guid element )
        {
            throw new NotImplementedException( );
        }
        public SimpleReferenceTimeseriesPropertyDataReader GetReferenceTimeseriesPropertyByElementAndDefinitionDataReader( Guid element, Guid definition )
        {
            const string sql = SimpleReferenceTimeseriesPropertyDataReader.BaseQuery + " WHERE " +
                    SimpleReferenceTimeseriesPropertyDataReader.ViewAliasName + ".[Element] = @element AND " +
                    SimpleReferenceTimeseriesPropertyDataReader.ViewAliasName + ".[Definition] = @definition " +
                    " ORDER BY " + SimpleReferenceTimeseriesPropertyDataReader.ViewAliasName + ".[Element]," +SimpleReferenceTimeseriesPropertyDataReader.ViewAliasName + ".[Definition]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var elementParameter = sqlCommandParameters.AddReference( "@element", element );
                var definitionParameter = sqlCommandParameters.AddReference( "@definition", definition );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleReferenceTimeseriesPropertyDataReader = new SimpleReferenceTimeseriesPropertyDataReader( _loggerFactory, sqlDataReader );
                return simpleReferenceTimeseriesPropertyDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public ReferenceTimeseriesPropertyObject? GetReferenceTimeseriesPropertyByElementAndDefinition( Guid element, Guid definition )
        {
            throw new NotImplementedException( );
        }
        public SimpleReferenceTimeseriesPropertyDataReader GetReferenceTimeseriesPropertyCollectionByDefinitionDataReader( Guid definition )
        {
            const string sql = SimpleReferenceTimeseriesPropertyDataReader.BaseQuery + " WHERE " +
                    SimpleReferenceTimeseriesPropertyDataReader.ViewAliasName + ".[Definition] = @definition " +
                    " ORDER BY " + SimpleReferenceTimeseriesPropertyDataReader.ViewAliasName + ".[Definition]," +SimpleReferenceTimeseriesPropertyDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var definitionParameter = sqlCommandParameters.AddReference( "@definition", definition );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleReferenceTimeseriesPropertyDataReader = new SimpleReferenceTimeseriesPropertyDataReader( _loggerFactory, sqlDataReader );
                return simpleReferenceTimeseriesPropertyDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<ReferenceTimeseriesPropertyObject> GetReferenceTimeseriesPropertyCollectionByDefinition( Guid definition )
        {
            throw new NotImplementedException( );
        }
        public SimpleReferenceTimeseriesPropertyDataReader GetReferenceTimeseriesPropertyCollectionByTimeseriesDataReader( Guid timeseries )
        {
            const string sql = SimpleReferenceTimeseriesPropertyDataReader.BaseQuery + " WHERE " +
                    SimpleReferenceTimeseriesPropertyDataReader.ViewAliasName + ".[Timeseries] = @timeseries " +
                    " ORDER BY " + SimpleReferenceTimeseriesPropertyDataReader.ViewAliasName + ".[Timeseries]," +SimpleReferenceTimeseriesPropertyDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var timeseriesParameter = sqlCommandParameters.AddReference( "@timeseries", timeseries );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleReferenceTimeseriesPropertyDataReader = new SimpleReferenceTimeseriesPropertyDataReader( _loggerFactory, sqlDataReader );
                return simpleReferenceTimeseriesPropertyDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<ReferenceTimeseriesPropertyObject> GetReferenceTimeseriesPropertyCollectionByTimeseries( Guid timeseries )
        {
            throw new NotImplementedException( );
        }
        // ---------------------------------------------------------------------
        // SByteTimeseriesProperty queries
        // ---------------------------------------------------------------------
        public SimpleSByteTimeseriesPropertyDataReader GetSByteTimeseriesPropertyByIdDataReader( Guid id )
        {
            const string sql = SimpleSByteTimeseriesPropertyDataReader.BaseQuery + "WHERE " + SimpleSByteTimeseriesPropertyDataReader.ViewAliasName + ".[Id] = @id"; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                sqlCommandParameters.AddGuid( "@id", id );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleSByteTimeseriesPropertyDataReader = new SimpleSByteTimeseriesPropertyDataReader( _loggerFactory, sqlDataReader );
                return simpleSByteTimeseriesPropertyDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public SByteTimeseriesPropertyObject? GetSByteTimeseriesPropertyById( Guid id )
        {
            var simpleSByteTimeseriesPropertyDataReader = GetSByteTimeseriesPropertyByIdDataReader( id );
            using ( simpleSByteTimeseriesPropertyDataReader )
            {
                if ( simpleSByteTimeseriesPropertyDataReader.Read( ) )
                {
                    var result = simpleSByteTimeseriesPropertyDataReader.GetDataObject( );
                    return result;
                }
            }
            return null;
        }

        public void GetSByteTimeseriesPropertyById( Guid id, Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleSByteTimeseriesPropertyDataReader = GetSByteTimeseriesPropertyByIdDataReader( id );
                using ( simpleSByteTimeseriesPropertyDataReader )
                {
                    if ( simpleSByteTimeseriesPropertyDataReader.Read( ) )
                    {
                        destinationWriter.Write( true );
                        simpleSByteTimeseriesPropertyDataReader.WriteTo( destinationWriter );
                    }
                    else
                    {
                        destinationWriter.Write( false );
                    }
                }
            }
        }

        public SimpleSByteTimeseriesPropertyDataReader GetSByteTimeseriesPropertyCollectionDataReader( )
        {
            const string sql = SimpleSByteTimeseriesPropertyDataReader.BaseQuery; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleSByteTimeseriesPropertyDataReader = new SimpleSByteTimeseriesPropertyDataReader( _loggerFactory, sqlDataReader );
                return simpleSByteTimeseriesPropertyDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public IList<SByteTimeseriesPropertyObject> GetSByteTimeseriesPropertyCollection( )
        {
            var result = new List<SByteTimeseriesPropertyObject>( );
            var simpleSByteTimeseriesPropertyDataReader = GetSByteTimeseriesPropertyCollectionDataReader( );
            using ( simpleSByteTimeseriesPropertyDataReader )
            {
                while ( simpleSByteTimeseriesPropertyDataReader.Read( ) )
                {
                    var data = simpleSByteTimeseriesPropertyDataReader.GetDataObject( );
                    result.Add( data );
                }
            }
            return result;
        }

        public void GetSByteTimeseriesPropertyCollection( Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleSByteTimeseriesPropertyDataReader = GetSByteTimeseriesPropertyCollectionDataReader( );
                using ( simpleSByteTimeseriesPropertyDataReader )
                {
                    simpleSByteTimeseriesPropertyDataReader.WriteResultSetTo( destinationWriter );
                }
            }
        }

        public SimpleSByteTimeseriesPropertyDataReader GetSByteTimeseriesPropertyCollectionByElementDataReader( Guid element )
        {
            const string sql = SimpleSByteTimeseriesPropertyDataReader.BaseQuery + " WHERE " +
                    SimpleSByteTimeseriesPropertyDataReader.ViewAliasName + ".[Element] = @element " +
                    " ORDER BY " + SimpleSByteTimeseriesPropertyDataReader.ViewAliasName + ".[Element]," +SimpleSByteTimeseriesPropertyDataReader.ViewAliasName + ".[Definition]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var elementParameter = sqlCommandParameters.AddReference( "@element", element );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleSByteTimeseriesPropertyDataReader = new SimpleSByteTimeseriesPropertyDataReader( _loggerFactory, sqlDataReader );
                return simpleSByteTimeseriesPropertyDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<SByteTimeseriesPropertyObject> GetSByteTimeseriesPropertyCollectionByElement( Guid element )
        {
            throw new NotImplementedException( );
        }
        public SimpleSByteTimeseriesPropertyDataReader GetSByteTimeseriesPropertyByElementAndDefinitionDataReader( Guid element, Guid definition )
        {
            const string sql = SimpleSByteTimeseriesPropertyDataReader.BaseQuery + " WHERE " +
                    SimpleSByteTimeseriesPropertyDataReader.ViewAliasName + ".[Element] = @element AND " +
                    SimpleSByteTimeseriesPropertyDataReader.ViewAliasName + ".[Definition] = @definition " +
                    " ORDER BY " + SimpleSByteTimeseriesPropertyDataReader.ViewAliasName + ".[Element]," +SimpleSByteTimeseriesPropertyDataReader.ViewAliasName + ".[Definition]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var elementParameter = sqlCommandParameters.AddReference( "@element", element );
                var definitionParameter = sqlCommandParameters.AddReference( "@definition", definition );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleSByteTimeseriesPropertyDataReader = new SimpleSByteTimeseriesPropertyDataReader( _loggerFactory, sqlDataReader );
                return simpleSByteTimeseriesPropertyDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public SByteTimeseriesPropertyObject? GetSByteTimeseriesPropertyByElementAndDefinition( Guid element, Guid definition )
        {
            throw new NotImplementedException( );
        }
        public SimpleSByteTimeseriesPropertyDataReader GetSByteTimeseriesPropertyCollectionByDefinitionDataReader( Guid definition )
        {
            const string sql = SimpleSByteTimeseriesPropertyDataReader.BaseQuery + " WHERE " +
                    SimpleSByteTimeseriesPropertyDataReader.ViewAliasName + ".[Definition] = @definition " +
                    " ORDER BY " + SimpleSByteTimeseriesPropertyDataReader.ViewAliasName + ".[Definition]," +SimpleSByteTimeseriesPropertyDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var definitionParameter = sqlCommandParameters.AddReference( "@definition", definition );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleSByteTimeseriesPropertyDataReader = new SimpleSByteTimeseriesPropertyDataReader( _loggerFactory, sqlDataReader );
                return simpleSByteTimeseriesPropertyDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<SByteTimeseriesPropertyObject> GetSByteTimeseriesPropertyCollectionByDefinition( Guid definition )
        {
            throw new NotImplementedException( );
        }
        public SimpleSByteTimeseriesPropertyDataReader GetSByteTimeseriesPropertyCollectionByTimeseriesDataReader( Guid timeseries )
        {
            const string sql = SimpleSByteTimeseriesPropertyDataReader.BaseQuery + " WHERE " +
                    SimpleSByteTimeseriesPropertyDataReader.ViewAliasName + ".[Timeseries] = @timeseries " +
                    " ORDER BY " + SimpleSByteTimeseriesPropertyDataReader.ViewAliasName + ".[Timeseries]," +SimpleSByteTimeseriesPropertyDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var timeseriesParameter = sqlCommandParameters.AddReference( "@timeseries", timeseries );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleSByteTimeseriesPropertyDataReader = new SimpleSByteTimeseriesPropertyDataReader( _loggerFactory, sqlDataReader );
                return simpleSByteTimeseriesPropertyDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<SByteTimeseriesPropertyObject> GetSByteTimeseriesPropertyCollectionByTimeseries( Guid timeseries )
        {
            throw new NotImplementedException( );
        }
        // ---------------------------------------------------------------------
        // SingleTimeseriesProperty queries
        // ---------------------------------------------------------------------
        public SimpleSingleTimeseriesPropertyDataReader GetSingleTimeseriesPropertyByIdDataReader( Guid id )
        {
            const string sql = SimpleSingleTimeseriesPropertyDataReader.BaseQuery + "WHERE " + SimpleSingleTimeseriesPropertyDataReader.ViewAliasName + ".[Id] = @id"; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                sqlCommandParameters.AddGuid( "@id", id );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleSingleTimeseriesPropertyDataReader = new SimpleSingleTimeseriesPropertyDataReader( _loggerFactory, sqlDataReader );
                return simpleSingleTimeseriesPropertyDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public SingleTimeseriesPropertyObject? GetSingleTimeseriesPropertyById( Guid id )
        {
            var simpleSingleTimeseriesPropertyDataReader = GetSingleTimeseriesPropertyByIdDataReader( id );
            using ( simpleSingleTimeseriesPropertyDataReader )
            {
                if ( simpleSingleTimeseriesPropertyDataReader.Read( ) )
                {
                    var result = simpleSingleTimeseriesPropertyDataReader.GetDataObject( );
                    return result;
                }
            }
            return null;
        }

        public void GetSingleTimeseriesPropertyById( Guid id, Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleSingleTimeseriesPropertyDataReader = GetSingleTimeseriesPropertyByIdDataReader( id );
                using ( simpleSingleTimeseriesPropertyDataReader )
                {
                    if ( simpleSingleTimeseriesPropertyDataReader.Read( ) )
                    {
                        destinationWriter.Write( true );
                        simpleSingleTimeseriesPropertyDataReader.WriteTo( destinationWriter );
                    }
                    else
                    {
                        destinationWriter.Write( false );
                    }
                }
            }
        }

        public SimpleSingleTimeseriesPropertyDataReader GetSingleTimeseriesPropertyCollectionDataReader( )
        {
            const string sql = SimpleSingleTimeseriesPropertyDataReader.BaseQuery; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleSingleTimeseriesPropertyDataReader = new SimpleSingleTimeseriesPropertyDataReader( _loggerFactory, sqlDataReader );
                return simpleSingleTimeseriesPropertyDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public IList<SingleTimeseriesPropertyObject> GetSingleTimeseriesPropertyCollection( )
        {
            var result = new List<SingleTimeseriesPropertyObject>( );
            var simpleSingleTimeseriesPropertyDataReader = GetSingleTimeseriesPropertyCollectionDataReader( );
            using ( simpleSingleTimeseriesPropertyDataReader )
            {
                while ( simpleSingleTimeseriesPropertyDataReader.Read( ) )
                {
                    var data = simpleSingleTimeseriesPropertyDataReader.GetDataObject( );
                    result.Add( data );
                }
            }
            return result;
        }

        public void GetSingleTimeseriesPropertyCollection( Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleSingleTimeseriesPropertyDataReader = GetSingleTimeseriesPropertyCollectionDataReader( );
                using ( simpleSingleTimeseriesPropertyDataReader )
                {
                    simpleSingleTimeseriesPropertyDataReader.WriteResultSetTo( destinationWriter );
                }
            }
        }

        public SimpleSingleTimeseriesPropertyDataReader GetSingleTimeseriesPropertyCollectionByElementDataReader( Guid element )
        {
            const string sql = SimpleSingleTimeseriesPropertyDataReader.BaseQuery + " WHERE " +
                    SimpleSingleTimeseriesPropertyDataReader.ViewAliasName + ".[Element] = @element " +
                    " ORDER BY " + SimpleSingleTimeseriesPropertyDataReader.ViewAliasName + ".[Element]," +SimpleSingleTimeseriesPropertyDataReader.ViewAliasName + ".[Definition]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var elementParameter = sqlCommandParameters.AddReference( "@element", element );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleSingleTimeseriesPropertyDataReader = new SimpleSingleTimeseriesPropertyDataReader( _loggerFactory, sqlDataReader );
                return simpleSingleTimeseriesPropertyDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<SingleTimeseriesPropertyObject> GetSingleTimeseriesPropertyCollectionByElement( Guid element )
        {
            throw new NotImplementedException( );
        }
        public SimpleSingleTimeseriesPropertyDataReader GetSingleTimeseriesPropertyByElementAndDefinitionDataReader( Guid element, Guid definition )
        {
            const string sql = SimpleSingleTimeseriesPropertyDataReader.BaseQuery + " WHERE " +
                    SimpleSingleTimeseriesPropertyDataReader.ViewAliasName + ".[Element] = @element AND " +
                    SimpleSingleTimeseriesPropertyDataReader.ViewAliasName + ".[Definition] = @definition " +
                    " ORDER BY " + SimpleSingleTimeseriesPropertyDataReader.ViewAliasName + ".[Element]," +SimpleSingleTimeseriesPropertyDataReader.ViewAliasName + ".[Definition]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var elementParameter = sqlCommandParameters.AddReference( "@element", element );
                var definitionParameter = sqlCommandParameters.AddReference( "@definition", definition );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleSingleTimeseriesPropertyDataReader = new SimpleSingleTimeseriesPropertyDataReader( _loggerFactory, sqlDataReader );
                return simpleSingleTimeseriesPropertyDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public SingleTimeseriesPropertyObject? GetSingleTimeseriesPropertyByElementAndDefinition( Guid element, Guid definition )
        {
            throw new NotImplementedException( );
        }
        public SimpleSingleTimeseriesPropertyDataReader GetSingleTimeseriesPropertyCollectionByDefinitionDataReader( Guid definition )
        {
            const string sql = SimpleSingleTimeseriesPropertyDataReader.BaseQuery + " WHERE " +
                    SimpleSingleTimeseriesPropertyDataReader.ViewAliasName + ".[Definition] = @definition " +
                    " ORDER BY " + SimpleSingleTimeseriesPropertyDataReader.ViewAliasName + ".[Definition]," +SimpleSingleTimeseriesPropertyDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var definitionParameter = sqlCommandParameters.AddReference( "@definition", definition );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleSingleTimeseriesPropertyDataReader = new SimpleSingleTimeseriesPropertyDataReader( _loggerFactory, sqlDataReader );
                return simpleSingleTimeseriesPropertyDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<SingleTimeseriesPropertyObject> GetSingleTimeseriesPropertyCollectionByDefinition( Guid definition )
        {
            throw new NotImplementedException( );
        }
        public SimpleSingleTimeseriesPropertyDataReader GetSingleTimeseriesPropertyCollectionByTimeseriesDataReader( Guid timeseries )
        {
            const string sql = SimpleSingleTimeseriesPropertyDataReader.BaseQuery + " WHERE " +
                    SimpleSingleTimeseriesPropertyDataReader.ViewAliasName + ".[Timeseries] = @timeseries " +
                    " ORDER BY " + SimpleSingleTimeseriesPropertyDataReader.ViewAliasName + ".[Timeseries]," +SimpleSingleTimeseriesPropertyDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var timeseriesParameter = sqlCommandParameters.AddReference( "@timeseries", timeseries );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleSingleTimeseriesPropertyDataReader = new SimpleSingleTimeseriesPropertyDataReader( _loggerFactory, sqlDataReader );
                return simpleSingleTimeseriesPropertyDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<SingleTimeseriesPropertyObject> GetSingleTimeseriesPropertyCollectionByTimeseries( Guid timeseries )
        {
            throw new NotImplementedException( );
        }
        // ---------------------------------------------------------------------
        // StringTimeseriesProperty queries
        // ---------------------------------------------------------------------
        public SimpleStringTimeseriesPropertyDataReader GetStringTimeseriesPropertyByIdDataReader( Guid id )
        {
            const string sql = SimpleStringTimeseriesPropertyDataReader.BaseQuery + "WHERE " + SimpleStringTimeseriesPropertyDataReader.ViewAliasName + ".[Id] = @id"; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                sqlCommandParameters.AddGuid( "@id", id );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleStringTimeseriesPropertyDataReader = new SimpleStringTimeseriesPropertyDataReader( _loggerFactory, sqlDataReader );
                return simpleStringTimeseriesPropertyDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public StringTimeseriesPropertyObject? GetStringTimeseriesPropertyById( Guid id )
        {
            var simpleStringTimeseriesPropertyDataReader = GetStringTimeseriesPropertyByIdDataReader( id );
            using ( simpleStringTimeseriesPropertyDataReader )
            {
                if ( simpleStringTimeseriesPropertyDataReader.Read( ) )
                {
                    var result = simpleStringTimeseriesPropertyDataReader.GetDataObject( );
                    return result;
                }
            }
            return null;
        }

        public void GetStringTimeseriesPropertyById( Guid id, Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleStringTimeseriesPropertyDataReader = GetStringTimeseriesPropertyByIdDataReader( id );
                using ( simpleStringTimeseriesPropertyDataReader )
                {
                    if ( simpleStringTimeseriesPropertyDataReader.Read( ) )
                    {
                        destinationWriter.Write( true );
                        simpleStringTimeseriesPropertyDataReader.WriteTo( destinationWriter );
                    }
                    else
                    {
                        destinationWriter.Write( false );
                    }
                }
            }
        }

        public SimpleStringTimeseriesPropertyDataReader GetStringTimeseriesPropertyCollectionDataReader( )
        {
            const string sql = SimpleStringTimeseriesPropertyDataReader.BaseQuery; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleStringTimeseriesPropertyDataReader = new SimpleStringTimeseriesPropertyDataReader( _loggerFactory, sqlDataReader );
                return simpleStringTimeseriesPropertyDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public IList<StringTimeseriesPropertyObject> GetStringTimeseriesPropertyCollection( )
        {
            var result = new List<StringTimeseriesPropertyObject>( );
            var simpleStringTimeseriesPropertyDataReader = GetStringTimeseriesPropertyCollectionDataReader( );
            using ( simpleStringTimeseriesPropertyDataReader )
            {
                while ( simpleStringTimeseriesPropertyDataReader.Read( ) )
                {
                    var data = simpleStringTimeseriesPropertyDataReader.GetDataObject( );
                    result.Add( data );
                }
            }
            return result;
        }

        public void GetStringTimeseriesPropertyCollection( Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleStringTimeseriesPropertyDataReader = GetStringTimeseriesPropertyCollectionDataReader( );
                using ( simpleStringTimeseriesPropertyDataReader )
                {
                    simpleStringTimeseriesPropertyDataReader.WriteResultSetTo( destinationWriter );
                }
            }
        }

        public SimpleStringTimeseriesPropertyDataReader GetStringTimeseriesPropertyCollectionByElementDataReader( Guid element )
        {
            const string sql = SimpleStringTimeseriesPropertyDataReader.BaseQuery + " WHERE " +
                    SimpleStringTimeseriesPropertyDataReader.ViewAliasName + ".[Element] = @element " +
                    " ORDER BY " + SimpleStringTimeseriesPropertyDataReader.ViewAliasName + ".[Element]," +SimpleStringTimeseriesPropertyDataReader.ViewAliasName + ".[Definition]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var elementParameter = sqlCommandParameters.AddReference( "@element", element );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleStringTimeseriesPropertyDataReader = new SimpleStringTimeseriesPropertyDataReader( _loggerFactory, sqlDataReader );
                return simpleStringTimeseriesPropertyDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<StringTimeseriesPropertyObject> GetStringTimeseriesPropertyCollectionByElement( Guid element )
        {
            throw new NotImplementedException( );
        }
        public SimpleStringTimeseriesPropertyDataReader GetStringTimeseriesPropertyByElementAndDefinitionDataReader( Guid element, Guid definition )
        {
            const string sql = SimpleStringTimeseriesPropertyDataReader.BaseQuery + " WHERE " +
                    SimpleStringTimeseriesPropertyDataReader.ViewAliasName + ".[Element] = @element AND " +
                    SimpleStringTimeseriesPropertyDataReader.ViewAliasName + ".[Definition] = @definition " +
                    " ORDER BY " + SimpleStringTimeseriesPropertyDataReader.ViewAliasName + ".[Element]," +SimpleStringTimeseriesPropertyDataReader.ViewAliasName + ".[Definition]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var elementParameter = sqlCommandParameters.AddReference( "@element", element );
                var definitionParameter = sqlCommandParameters.AddReference( "@definition", definition );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleStringTimeseriesPropertyDataReader = new SimpleStringTimeseriesPropertyDataReader( _loggerFactory, sqlDataReader );
                return simpleStringTimeseriesPropertyDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public StringTimeseriesPropertyObject? GetStringTimeseriesPropertyByElementAndDefinition( Guid element, Guid definition )
        {
            throw new NotImplementedException( );
        }
        public SimpleStringTimeseriesPropertyDataReader GetStringTimeseriesPropertyCollectionByDefinitionDataReader( Guid definition )
        {
            const string sql = SimpleStringTimeseriesPropertyDataReader.BaseQuery + " WHERE " +
                    SimpleStringTimeseriesPropertyDataReader.ViewAliasName + ".[Definition] = @definition " +
                    " ORDER BY " + SimpleStringTimeseriesPropertyDataReader.ViewAliasName + ".[Definition]," +SimpleStringTimeseriesPropertyDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var definitionParameter = sqlCommandParameters.AddReference( "@definition", definition );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleStringTimeseriesPropertyDataReader = new SimpleStringTimeseriesPropertyDataReader( _loggerFactory, sqlDataReader );
                return simpleStringTimeseriesPropertyDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<StringTimeseriesPropertyObject> GetStringTimeseriesPropertyCollectionByDefinition( Guid definition )
        {
            throw new NotImplementedException( );
        }
        public SimpleStringTimeseriesPropertyDataReader GetStringTimeseriesPropertyCollectionByTimeseriesDataReader( Guid timeseries )
        {
            const string sql = SimpleStringTimeseriesPropertyDataReader.BaseQuery + " WHERE " +
                    SimpleStringTimeseriesPropertyDataReader.ViewAliasName + ".[Timeseries] = @timeseries " +
                    " ORDER BY " + SimpleStringTimeseriesPropertyDataReader.ViewAliasName + ".[Timeseries]," +SimpleStringTimeseriesPropertyDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var timeseriesParameter = sqlCommandParameters.AddReference( "@timeseries", timeseries );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleStringTimeseriesPropertyDataReader = new SimpleStringTimeseriesPropertyDataReader( _loggerFactory, sqlDataReader );
                return simpleStringTimeseriesPropertyDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<StringTimeseriesPropertyObject> GetStringTimeseriesPropertyCollectionByTimeseries( Guid timeseries )
        {
            throw new NotImplementedException( );
        }
        // ---------------------------------------------------------------------
        // TimeSpanTimeseriesProperty queries
        // ---------------------------------------------------------------------
        public SimpleTimeSpanTimeseriesPropertyDataReader GetTimeSpanTimeseriesPropertyByIdDataReader( Guid id )
        {
            const string sql = SimpleTimeSpanTimeseriesPropertyDataReader.BaseQuery + "WHERE " + SimpleTimeSpanTimeseriesPropertyDataReader.ViewAliasName + ".[Id] = @id"; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                sqlCommandParameters.AddGuid( "@id", id );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleTimeSpanTimeseriesPropertyDataReader = new SimpleTimeSpanTimeseriesPropertyDataReader( _loggerFactory, sqlDataReader );
                return simpleTimeSpanTimeseriesPropertyDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public TimeSpanTimeseriesPropertyObject? GetTimeSpanTimeseriesPropertyById( Guid id )
        {
            var simpleTimeSpanTimeseriesPropertyDataReader = GetTimeSpanTimeseriesPropertyByIdDataReader( id );
            using ( simpleTimeSpanTimeseriesPropertyDataReader )
            {
                if ( simpleTimeSpanTimeseriesPropertyDataReader.Read( ) )
                {
                    var result = simpleTimeSpanTimeseriesPropertyDataReader.GetDataObject( );
                    return result;
                }
            }
            return null;
        }

        public void GetTimeSpanTimeseriesPropertyById( Guid id, Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleTimeSpanTimeseriesPropertyDataReader = GetTimeSpanTimeseriesPropertyByIdDataReader( id );
                using ( simpleTimeSpanTimeseriesPropertyDataReader )
                {
                    if ( simpleTimeSpanTimeseriesPropertyDataReader.Read( ) )
                    {
                        destinationWriter.Write( true );
                        simpleTimeSpanTimeseriesPropertyDataReader.WriteTo( destinationWriter );
                    }
                    else
                    {
                        destinationWriter.Write( false );
                    }
                }
            }
        }

        public SimpleTimeSpanTimeseriesPropertyDataReader GetTimeSpanTimeseriesPropertyCollectionDataReader( )
        {
            const string sql = SimpleTimeSpanTimeseriesPropertyDataReader.BaseQuery; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleTimeSpanTimeseriesPropertyDataReader = new SimpleTimeSpanTimeseriesPropertyDataReader( _loggerFactory, sqlDataReader );
                return simpleTimeSpanTimeseriesPropertyDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public IList<TimeSpanTimeseriesPropertyObject> GetTimeSpanTimeseriesPropertyCollection( )
        {
            var result = new List<TimeSpanTimeseriesPropertyObject>( );
            var simpleTimeSpanTimeseriesPropertyDataReader = GetTimeSpanTimeseriesPropertyCollectionDataReader( );
            using ( simpleTimeSpanTimeseriesPropertyDataReader )
            {
                while ( simpleTimeSpanTimeseriesPropertyDataReader.Read( ) )
                {
                    var data = simpleTimeSpanTimeseriesPropertyDataReader.GetDataObject( );
                    result.Add( data );
                }
            }
            return result;
        }

        public void GetTimeSpanTimeseriesPropertyCollection( Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleTimeSpanTimeseriesPropertyDataReader = GetTimeSpanTimeseriesPropertyCollectionDataReader( );
                using ( simpleTimeSpanTimeseriesPropertyDataReader )
                {
                    simpleTimeSpanTimeseriesPropertyDataReader.WriteResultSetTo( destinationWriter );
                }
            }
        }

        public SimpleTimeSpanTimeseriesPropertyDataReader GetTimeSpanTimeseriesPropertyCollectionByElementDataReader( Guid element )
        {
            const string sql = SimpleTimeSpanTimeseriesPropertyDataReader.BaseQuery + " WHERE " +
                    SimpleTimeSpanTimeseriesPropertyDataReader.ViewAliasName + ".[Element] = @element " +
                    " ORDER BY " + SimpleTimeSpanTimeseriesPropertyDataReader.ViewAliasName + ".[Element]," +SimpleTimeSpanTimeseriesPropertyDataReader.ViewAliasName + ".[Definition]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var elementParameter = sqlCommandParameters.AddReference( "@element", element );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleTimeSpanTimeseriesPropertyDataReader = new SimpleTimeSpanTimeseriesPropertyDataReader( _loggerFactory, sqlDataReader );
                return simpleTimeSpanTimeseriesPropertyDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<TimeSpanTimeseriesPropertyObject> GetTimeSpanTimeseriesPropertyCollectionByElement( Guid element )
        {
            throw new NotImplementedException( );
        }
        public SimpleTimeSpanTimeseriesPropertyDataReader GetTimeSpanTimeseriesPropertyByElementAndDefinitionDataReader( Guid element, Guid definition )
        {
            const string sql = SimpleTimeSpanTimeseriesPropertyDataReader.BaseQuery + " WHERE " +
                    SimpleTimeSpanTimeseriesPropertyDataReader.ViewAliasName + ".[Element] = @element AND " +
                    SimpleTimeSpanTimeseriesPropertyDataReader.ViewAliasName + ".[Definition] = @definition " +
                    " ORDER BY " + SimpleTimeSpanTimeseriesPropertyDataReader.ViewAliasName + ".[Element]," +SimpleTimeSpanTimeseriesPropertyDataReader.ViewAliasName + ".[Definition]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var elementParameter = sqlCommandParameters.AddReference( "@element", element );
                var definitionParameter = sqlCommandParameters.AddReference( "@definition", definition );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleTimeSpanTimeseriesPropertyDataReader = new SimpleTimeSpanTimeseriesPropertyDataReader( _loggerFactory, sqlDataReader );
                return simpleTimeSpanTimeseriesPropertyDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public TimeSpanTimeseriesPropertyObject? GetTimeSpanTimeseriesPropertyByElementAndDefinition( Guid element, Guid definition )
        {
            throw new NotImplementedException( );
        }
        public SimpleTimeSpanTimeseriesPropertyDataReader GetTimeSpanTimeseriesPropertyCollectionByDefinitionDataReader( Guid definition )
        {
            const string sql = SimpleTimeSpanTimeseriesPropertyDataReader.BaseQuery + " WHERE " +
                    SimpleTimeSpanTimeseriesPropertyDataReader.ViewAliasName + ".[Definition] = @definition " +
                    " ORDER BY " + SimpleTimeSpanTimeseriesPropertyDataReader.ViewAliasName + ".[Definition]," +SimpleTimeSpanTimeseriesPropertyDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var definitionParameter = sqlCommandParameters.AddReference( "@definition", definition );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleTimeSpanTimeseriesPropertyDataReader = new SimpleTimeSpanTimeseriesPropertyDataReader( _loggerFactory, sqlDataReader );
                return simpleTimeSpanTimeseriesPropertyDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<TimeSpanTimeseriesPropertyObject> GetTimeSpanTimeseriesPropertyCollectionByDefinition( Guid definition )
        {
            throw new NotImplementedException( );
        }
        public SimpleTimeSpanTimeseriesPropertyDataReader GetTimeSpanTimeseriesPropertyCollectionByTimeseriesDataReader( Guid timeseries )
        {
            const string sql = SimpleTimeSpanTimeseriesPropertyDataReader.BaseQuery + " WHERE " +
                    SimpleTimeSpanTimeseriesPropertyDataReader.ViewAliasName + ".[Timeseries] = @timeseries " +
                    " ORDER BY " + SimpleTimeSpanTimeseriesPropertyDataReader.ViewAliasName + ".[Timeseries]," +SimpleTimeSpanTimeseriesPropertyDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var timeseriesParameter = sqlCommandParameters.AddReference( "@timeseries", timeseries );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleTimeSpanTimeseriesPropertyDataReader = new SimpleTimeSpanTimeseriesPropertyDataReader( _loggerFactory, sqlDataReader );
                return simpleTimeSpanTimeseriesPropertyDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<TimeSpanTimeseriesPropertyObject> GetTimeSpanTimeseriesPropertyCollectionByTimeseries( Guid timeseries )
        {
            throw new NotImplementedException( );
        }
        // ---------------------------------------------------------------------
        // UInt16TimeseriesProperty queries
        // ---------------------------------------------------------------------
        public SimpleUInt16TimeseriesPropertyDataReader GetUInt16TimeseriesPropertyByIdDataReader( Guid id )
        {
            const string sql = SimpleUInt16TimeseriesPropertyDataReader.BaseQuery + "WHERE " + SimpleUInt16TimeseriesPropertyDataReader.ViewAliasName + ".[Id] = @id"; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                sqlCommandParameters.AddGuid( "@id", id );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleUInt16TimeseriesPropertyDataReader = new SimpleUInt16TimeseriesPropertyDataReader( _loggerFactory, sqlDataReader );
                return simpleUInt16TimeseriesPropertyDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public UInt16TimeseriesPropertyObject? GetUInt16TimeseriesPropertyById( Guid id )
        {
            var simpleUInt16TimeseriesPropertyDataReader = GetUInt16TimeseriesPropertyByIdDataReader( id );
            using ( simpleUInt16TimeseriesPropertyDataReader )
            {
                if ( simpleUInt16TimeseriesPropertyDataReader.Read( ) )
                {
                    var result = simpleUInt16TimeseriesPropertyDataReader.GetDataObject( );
                    return result;
                }
            }
            return null;
        }

        public void GetUInt16TimeseriesPropertyById( Guid id, Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleUInt16TimeseriesPropertyDataReader = GetUInt16TimeseriesPropertyByIdDataReader( id );
                using ( simpleUInt16TimeseriesPropertyDataReader )
                {
                    if ( simpleUInt16TimeseriesPropertyDataReader.Read( ) )
                    {
                        destinationWriter.Write( true );
                        simpleUInt16TimeseriesPropertyDataReader.WriteTo( destinationWriter );
                    }
                    else
                    {
                        destinationWriter.Write( false );
                    }
                }
            }
        }

        public SimpleUInt16TimeseriesPropertyDataReader GetUInt16TimeseriesPropertyCollectionDataReader( )
        {
            const string sql = SimpleUInt16TimeseriesPropertyDataReader.BaseQuery; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleUInt16TimeseriesPropertyDataReader = new SimpleUInt16TimeseriesPropertyDataReader( _loggerFactory, sqlDataReader );
                return simpleUInt16TimeseriesPropertyDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public IList<UInt16TimeseriesPropertyObject> GetUInt16TimeseriesPropertyCollection( )
        {
            var result = new List<UInt16TimeseriesPropertyObject>( );
            var simpleUInt16TimeseriesPropertyDataReader = GetUInt16TimeseriesPropertyCollectionDataReader( );
            using ( simpleUInt16TimeseriesPropertyDataReader )
            {
                while ( simpleUInt16TimeseriesPropertyDataReader.Read( ) )
                {
                    var data = simpleUInt16TimeseriesPropertyDataReader.GetDataObject( );
                    result.Add( data );
                }
            }
            return result;
        }

        public void GetUInt16TimeseriesPropertyCollection( Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleUInt16TimeseriesPropertyDataReader = GetUInt16TimeseriesPropertyCollectionDataReader( );
                using ( simpleUInt16TimeseriesPropertyDataReader )
                {
                    simpleUInt16TimeseriesPropertyDataReader.WriteResultSetTo( destinationWriter );
                }
            }
        }

        public SimpleUInt16TimeseriesPropertyDataReader GetUInt16TimeseriesPropertyCollectionByElementDataReader( Guid element )
        {
            const string sql = SimpleUInt16TimeseriesPropertyDataReader.BaseQuery + " WHERE " +
                    SimpleUInt16TimeseriesPropertyDataReader.ViewAliasName + ".[Element] = @element " +
                    " ORDER BY " + SimpleUInt16TimeseriesPropertyDataReader.ViewAliasName + ".[Element]," +SimpleUInt16TimeseriesPropertyDataReader.ViewAliasName + ".[Definition]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var elementParameter = sqlCommandParameters.AddReference( "@element", element );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleUInt16TimeseriesPropertyDataReader = new SimpleUInt16TimeseriesPropertyDataReader( _loggerFactory, sqlDataReader );
                return simpleUInt16TimeseriesPropertyDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<UInt16TimeseriesPropertyObject> GetUInt16TimeseriesPropertyCollectionByElement( Guid element )
        {
            throw new NotImplementedException( );
        }
        public SimpleUInt16TimeseriesPropertyDataReader GetUInt16TimeseriesPropertyByElementAndDefinitionDataReader( Guid element, Guid definition )
        {
            const string sql = SimpleUInt16TimeseriesPropertyDataReader.BaseQuery + " WHERE " +
                    SimpleUInt16TimeseriesPropertyDataReader.ViewAliasName + ".[Element] = @element AND " +
                    SimpleUInt16TimeseriesPropertyDataReader.ViewAliasName + ".[Definition] = @definition " +
                    " ORDER BY " + SimpleUInt16TimeseriesPropertyDataReader.ViewAliasName + ".[Element]," +SimpleUInt16TimeseriesPropertyDataReader.ViewAliasName + ".[Definition]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var elementParameter = sqlCommandParameters.AddReference( "@element", element );
                var definitionParameter = sqlCommandParameters.AddReference( "@definition", definition );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleUInt16TimeseriesPropertyDataReader = new SimpleUInt16TimeseriesPropertyDataReader( _loggerFactory, sqlDataReader );
                return simpleUInt16TimeseriesPropertyDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public UInt16TimeseriesPropertyObject? GetUInt16TimeseriesPropertyByElementAndDefinition( Guid element, Guid definition )
        {
            throw new NotImplementedException( );
        }
        public SimpleUInt16TimeseriesPropertyDataReader GetUInt16TimeseriesPropertyCollectionByDefinitionDataReader( Guid definition )
        {
            const string sql = SimpleUInt16TimeseriesPropertyDataReader.BaseQuery + " WHERE " +
                    SimpleUInt16TimeseriesPropertyDataReader.ViewAliasName + ".[Definition] = @definition " +
                    " ORDER BY " + SimpleUInt16TimeseriesPropertyDataReader.ViewAliasName + ".[Definition]," +SimpleUInt16TimeseriesPropertyDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var definitionParameter = sqlCommandParameters.AddReference( "@definition", definition );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleUInt16TimeseriesPropertyDataReader = new SimpleUInt16TimeseriesPropertyDataReader( _loggerFactory, sqlDataReader );
                return simpleUInt16TimeseriesPropertyDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<UInt16TimeseriesPropertyObject> GetUInt16TimeseriesPropertyCollectionByDefinition( Guid definition )
        {
            throw new NotImplementedException( );
        }
        public SimpleUInt16TimeseriesPropertyDataReader GetUInt16TimeseriesPropertyCollectionByTimeseriesDataReader( Guid timeseries )
        {
            const string sql = SimpleUInt16TimeseriesPropertyDataReader.BaseQuery + " WHERE " +
                    SimpleUInt16TimeseriesPropertyDataReader.ViewAliasName + ".[Timeseries] = @timeseries " +
                    " ORDER BY " + SimpleUInt16TimeseriesPropertyDataReader.ViewAliasName + ".[Timeseries]," +SimpleUInt16TimeseriesPropertyDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var timeseriesParameter = sqlCommandParameters.AddReference( "@timeseries", timeseries );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleUInt16TimeseriesPropertyDataReader = new SimpleUInt16TimeseriesPropertyDataReader( _loggerFactory, sqlDataReader );
                return simpleUInt16TimeseriesPropertyDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<UInt16TimeseriesPropertyObject> GetUInt16TimeseriesPropertyCollectionByTimeseries( Guid timeseries )
        {
            throw new NotImplementedException( );
        }
        // ---------------------------------------------------------------------
        // UInt32TimeseriesProperty queries
        // ---------------------------------------------------------------------
        public SimpleUInt32TimeseriesPropertyDataReader GetUInt32TimeseriesPropertyByIdDataReader( Guid id )
        {
            const string sql = SimpleUInt32TimeseriesPropertyDataReader.BaseQuery + "WHERE " + SimpleUInt32TimeseriesPropertyDataReader.ViewAliasName + ".[Id] = @id"; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                sqlCommandParameters.AddGuid( "@id", id );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleUInt32TimeseriesPropertyDataReader = new SimpleUInt32TimeseriesPropertyDataReader( _loggerFactory, sqlDataReader );
                return simpleUInt32TimeseriesPropertyDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public UInt32TimeseriesPropertyObject? GetUInt32TimeseriesPropertyById( Guid id )
        {
            var simpleUInt32TimeseriesPropertyDataReader = GetUInt32TimeseriesPropertyByIdDataReader( id );
            using ( simpleUInt32TimeseriesPropertyDataReader )
            {
                if ( simpleUInt32TimeseriesPropertyDataReader.Read( ) )
                {
                    var result = simpleUInt32TimeseriesPropertyDataReader.GetDataObject( );
                    return result;
                }
            }
            return null;
        }

        public void GetUInt32TimeseriesPropertyById( Guid id, Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleUInt32TimeseriesPropertyDataReader = GetUInt32TimeseriesPropertyByIdDataReader( id );
                using ( simpleUInt32TimeseriesPropertyDataReader )
                {
                    if ( simpleUInt32TimeseriesPropertyDataReader.Read( ) )
                    {
                        destinationWriter.Write( true );
                        simpleUInt32TimeseriesPropertyDataReader.WriteTo( destinationWriter );
                    }
                    else
                    {
                        destinationWriter.Write( false );
                    }
                }
            }
        }

        public SimpleUInt32TimeseriesPropertyDataReader GetUInt32TimeseriesPropertyCollectionDataReader( )
        {
            const string sql = SimpleUInt32TimeseriesPropertyDataReader.BaseQuery; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleUInt32TimeseriesPropertyDataReader = new SimpleUInt32TimeseriesPropertyDataReader( _loggerFactory, sqlDataReader );
                return simpleUInt32TimeseriesPropertyDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public IList<UInt32TimeseriesPropertyObject> GetUInt32TimeseriesPropertyCollection( )
        {
            var result = new List<UInt32TimeseriesPropertyObject>( );
            var simpleUInt32TimeseriesPropertyDataReader = GetUInt32TimeseriesPropertyCollectionDataReader( );
            using ( simpleUInt32TimeseriesPropertyDataReader )
            {
                while ( simpleUInt32TimeseriesPropertyDataReader.Read( ) )
                {
                    var data = simpleUInt32TimeseriesPropertyDataReader.GetDataObject( );
                    result.Add( data );
                }
            }
            return result;
        }

        public void GetUInt32TimeseriesPropertyCollection( Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleUInt32TimeseriesPropertyDataReader = GetUInt32TimeseriesPropertyCollectionDataReader( );
                using ( simpleUInt32TimeseriesPropertyDataReader )
                {
                    simpleUInt32TimeseriesPropertyDataReader.WriteResultSetTo( destinationWriter );
                }
            }
        }

        public SimpleUInt32TimeseriesPropertyDataReader GetUInt32TimeseriesPropertyCollectionByElementDataReader( Guid element )
        {
            const string sql = SimpleUInt32TimeseriesPropertyDataReader.BaseQuery + " WHERE " +
                    SimpleUInt32TimeseriesPropertyDataReader.ViewAliasName + ".[Element] = @element " +
                    " ORDER BY " + SimpleUInt32TimeseriesPropertyDataReader.ViewAliasName + ".[Element]," +SimpleUInt32TimeseriesPropertyDataReader.ViewAliasName + ".[Definition]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var elementParameter = sqlCommandParameters.AddReference( "@element", element );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleUInt32TimeseriesPropertyDataReader = new SimpleUInt32TimeseriesPropertyDataReader( _loggerFactory, sqlDataReader );
                return simpleUInt32TimeseriesPropertyDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<UInt32TimeseriesPropertyObject> GetUInt32TimeseriesPropertyCollectionByElement( Guid element )
        {
            throw new NotImplementedException( );
        }
        public SimpleUInt32TimeseriesPropertyDataReader GetUInt32TimeseriesPropertyByElementAndDefinitionDataReader( Guid element, Guid definition )
        {
            const string sql = SimpleUInt32TimeseriesPropertyDataReader.BaseQuery + " WHERE " +
                    SimpleUInt32TimeseriesPropertyDataReader.ViewAliasName + ".[Element] = @element AND " +
                    SimpleUInt32TimeseriesPropertyDataReader.ViewAliasName + ".[Definition] = @definition " +
                    " ORDER BY " + SimpleUInt32TimeseriesPropertyDataReader.ViewAliasName + ".[Element]," +SimpleUInt32TimeseriesPropertyDataReader.ViewAliasName + ".[Definition]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var elementParameter = sqlCommandParameters.AddReference( "@element", element );
                var definitionParameter = sqlCommandParameters.AddReference( "@definition", definition );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleUInt32TimeseriesPropertyDataReader = new SimpleUInt32TimeseriesPropertyDataReader( _loggerFactory, sqlDataReader );
                return simpleUInt32TimeseriesPropertyDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public UInt32TimeseriesPropertyObject? GetUInt32TimeseriesPropertyByElementAndDefinition( Guid element, Guid definition )
        {
            throw new NotImplementedException( );
        }
        public SimpleUInt32TimeseriesPropertyDataReader GetUInt32TimeseriesPropertyCollectionByDefinitionDataReader( Guid definition )
        {
            const string sql = SimpleUInt32TimeseriesPropertyDataReader.BaseQuery + " WHERE " +
                    SimpleUInt32TimeseriesPropertyDataReader.ViewAliasName + ".[Definition] = @definition " +
                    " ORDER BY " + SimpleUInt32TimeseriesPropertyDataReader.ViewAliasName + ".[Definition]," +SimpleUInt32TimeseriesPropertyDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var definitionParameter = sqlCommandParameters.AddReference( "@definition", definition );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleUInt32TimeseriesPropertyDataReader = new SimpleUInt32TimeseriesPropertyDataReader( _loggerFactory, sqlDataReader );
                return simpleUInt32TimeseriesPropertyDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<UInt32TimeseriesPropertyObject> GetUInt32TimeseriesPropertyCollectionByDefinition( Guid definition )
        {
            throw new NotImplementedException( );
        }
        public SimpleUInt32TimeseriesPropertyDataReader GetUInt32TimeseriesPropertyCollectionByTimeseriesDataReader( Guid timeseries )
        {
            const string sql = SimpleUInt32TimeseriesPropertyDataReader.BaseQuery + " WHERE " +
                    SimpleUInt32TimeseriesPropertyDataReader.ViewAliasName + ".[Timeseries] = @timeseries " +
                    " ORDER BY " + SimpleUInt32TimeseriesPropertyDataReader.ViewAliasName + ".[Timeseries]," +SimpleUInt32TimeseriesPropertyDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var timeseriesParameter = sqlCommandParameters.AddReference( "@timeseries", timeseries );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleUInt32TimeseriesPropertyDataReader = new SimpleUInt32TimeseriesPropertyDataReader( _loggerFactory, sqlDataReader );
                return simpleUInt32TimeseriesPropertyDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<UInt32TimeseriesPropertyObject> GetUInt32TimeseriesPropertyCollectionByTimeseries( Guid timeseries )
        {
            throw new NotImplementedException( );
        }
        // ---------------------------------------------------------------------
        // UInt64TimeseriesProperty queries
        // ---------------------------------------------------------------------
        public SimpleUInt64TimeseriesPropertyDataReader GetUInt64TimeseriesPropertyByIdDataReader( Guid id )
        {
            const string sql = SimpleUInt64TimeseriesPropertyDataReader.BaseQuery + "WHERE " + SimpleUInt64TimeseriesPropertyDataReader.ViewAliasName + ".[Id] = @id"; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                sqlCommandParameters.AddGuid( "@id", id );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleUInt64TimeseriesPropertyDataReader = new SimpleUInt64TimeseriesPropertyDataReader( _loggerFactory, sqlDataReader );
                return simpleUInt64TimeseriesPropertyDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public UInt64TimeseriesPropertyObject? GetUInt64TimeseriesPropertyById( Guid id )
        {
            var simpleUInt64TimeseriesPropertyDataReader = GetUInt64TimeseriesPropertyByIdDataReader( id );
            using ( simpleUInt64TimeseriesPropertyDataReader )
            {
                if ( simpleUInt64TimeseriesPropertyDataReader.Read( ) )
                {
                    var result = simpleUInt64TimeseriesPropertyDataReader.GetDataObject( );
                    return result;
                }
            }
            return null;
        }

        public void GetUInt64TimeseriesPropertyById( Guid id, Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleUInt64TimeseriesPropertyDataReader = GetUInt64TimeseriesPropertyByIdDataReader( id );
                using ( simpleUInt64TimeseriesPropertyDataReader )
                {
                    if ( simpleUInt64TimeseriesPropertyDataReader.Read( ) )
                    {
                        destinationWriter.Write( true );
                        simpleUInt64TimeseriesPropertyDataReader.WriteTo( destinationWriter );
                    }
                    else
                    {
                        destinationWriter.Write( false );
                    }
                }
            }
        }

        public SimpleUInt64TimeseriesPropertyDataReader GetUInt64TimeseriesPropertyCollectionDataReader( )
        {
            const string sql = SimpleUInt64TimeseriesPropertyDataReader.BaseQuery; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleUInt64TimeseriesPropertyDataReader = new SimpleUInt64TimeseriesPropertyDataReader( _loggerFactory, sqlDataReader );
                return simpleUInt64TimeseriesPropertyDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public IList<UInt64TimeseriesPropertyObject> GetUInt64TimeseriesPropertyCollection( )
        {
            var result = new List<UInt64TimeseriesPropertyObject>( );
            var simpleUInt64TimeseriesPropertyDataReader = GetUInt64TimeseriesPropertyCollectionDataReader( );
            using ( simpleUInt64TimeseriesPropertyDataReader )
            {
                while ( simpleUInt64TimeseriesPropertyDataReader.Read( ) )
                {
                    var data = simpleUInt64TimeseriesPropertyDataReader.GetDataObject( );
                    result.Add( data );
                }
            }
            return result;
        }

        public void GetUInt64TimeseriesPropertyCollection( Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleUInt64TimeseriesPropertyDataReader = GetUInt64TimeseriesPropertyCollectionDataReader( );
                using ( simpleUInt64TimeseriesPropertyDataReader )
                {
                    simpleUInt64TimeseriesPropertyDataReader.WriteResultSetTo( destinationWriter );
                }
            }
        }

        public SimpleUInt64TimeseriesPropertyDataReader GetUInt64TimeseriesPropertyCollectionByElementDataReader( Guid element )
        {
            const string sql = SimpleUInt64TimeseriesPropertyDataReader.BaseQuery + " WHERE " +
                    SimpleUInt64TimeseriesPropertyDataReader.ViewAliasName + ".[Element] = @element " +
                    " ORDER BY " + SimpleUInt64TimeseriesPropertyDataReader.ViewAliasName + ".[Element]," +SimpleUInt64TimeseriesPropertyDataReader.ViewAliasName + ".[Definition]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var elementParameter = sqlCommandParameters.AddReference( "@element", element );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleUInt64TimeseriesPropertyDataReader = new SimpleUInt64TimeseriesPropertyDataReader( _loggerFactory, sqlDataReader );
                return simpleUInt64TimeseriesPropertyDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<UInt64TimeseriesPropertyObject> GetUInt64TimeseriesPropertyCollectionByElement( Guid element )
        {
            throw new NotImplementedException( );
        }
        public SimpleUInt64TimeseriesPropertyDataReader GetUInt64TimeseriesPropertyByElementAndDefinitionDataReader( Guid element, Guid definition )
        {
            const string sql = SimpleUInt64TimeseriesPropertyDataReader.BaseQuery + " WHERE " +
                    SimpleUInt64TimeseriesPropertyDataReader.ViewAliasName + ".[Element] = @element AND " +
                    SimpleUInt64TimeseriesPropertyDataReader.ViewAliasName + ".[Definition] = @definition " +
                    " ORDER BY " + SimpleUInt64TimeseriesPropertyDataReader.ViewAliasName + ".[Element]," +SimpleUInt64TimeseriesPropertyDataReader.ViewAliasName + ".[Definition]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var elementParameter = sqlCommandParameters.AddReference( "@element", element );
                var definitionParameter = sqlCommandParameters.AddReference( "@definition", definition );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleUInt64TimeseriesPropertyDataReader = new SimpleUInt64TimeseriesPropertyDataReader( _loggerFactory, sqlDataReader );
                return simpleUInt64TimeseriesPropertyDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public UInt64TimeseriesPropertyObject? GetUInt64TimeseriesPropertyByElementAndDefinition( Guid element, Guid definition )
        {
            throw new NotImplementedException( );
        }
        public SimpleUInt64TimeseriesPropertyDataReader GetUInt64TimeseriesPropertyCollectionByDefinitionDataReader( Guid definition )
        {
            const string sql = SimpleUInt64TimeseriesPropertyDataReader.BaseQuery + " WHERE " +
                    SimpleUInt64TimeseriesPropertyDataReader.ViewAliasName + ".[Definition] = @definition " +
                    " ORDER BY " + SimpleUInt64TimeseriesPropertyDataReader.ViewAliasName + ".[Definition]," +SimpleUInt64TimeseriesPropertyDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var definitionParameter = sqlCommandParameters.AddReference( "@definition", definition );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleUInt64TimeseriesPropertyDataReader = new SimpleUInt64TimeseriesPropertyDataReader( _loggerFactory, sqlDataReader );
                return simpleUInt64TimeseriesPropertyDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<UInt64TimeseriesPropertyObject> GetUInt64TimeseriesPropertyCollectionByDefinition( Guid definition )
        {
            throw new NotImplementedException( );
        }
        public SimpleUInt64TimeseriesPropertyDataReader GetUInt64TimeseriesPropertyCollectionByTimeseriesDataReader( Guid timeseries )
        {
            const string sql = SimpleUInt64TimeseriesPropertyDataReader.BaseQuery + " WHERE " +
                    SimpleUInt64TimeseriesPropertyDataReader.ViewAliasName + ".[Timeseries] = @timeseries " +
                    " ORDER BY " + SimpleUInt64TimeseriesPropertyDataReader.ViewAliasName + ".[Timeseries]," +SimpleUInt64TimeseriesPropertyDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var timeseriesParameter = sqlCommandParameters.AddReference( "@timeseries", timeseries );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleUInt64TimeseriesPropertyDataReader = new SimpleUInt64TimeseriesPropertyDataReader( _loggerFactory, sqlDataReader );
                return simpleUInt64TimeseriesPropertyDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<UInt64TimeseriesPropertyObject> GetUInt64TimeseriesPropertyCollectionByTimeseries( Guid timeseries )
        {
            throw new NotImplementedException( );
        }
        // ---------------------------------------------------------------------
        // TimeSpanProperty queries
        // ---------------------------------------------------------------------
        public SimpleTimeSpanPropertyDataReader GetTimeSpanPropertyByIdDataReader( Guid id )
        {
            const string sql = SimpleTimeSpanPropertyDataReader.BaseQuery + "WHERE " + SimpleTimeSpanPropertyDataReader.ViewAliasName + ".[Id] = @id"; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                sqlCommandParameters.AddGuid( "@id", id );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleTimeSpanPropertyDataReader = new SimpleTimeSpanPropertyDataReader( _loggerFactory, sqlDataReader );
                return simpleTimeSpanPropertyDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public TimeSpanPropertyObject? GetTimeSpanPropertyById( Guid id )
        {
            var simpleTimeSpanPropertyDataReader = GetTimeSpanPropertyByIdDataReader( id );
            using ( simpleTimeSpanPropertyDataReader )
            {
                if ( simpleTimeSpanPropertyDataReader.Read( ) )
                {
                    var result = simpleTimeSpanPropertyDataReader.GetDataObject( );
                    return result;
                }
            }
            return null;
        }

        public void GetTimeSpanPropertyById( Guid id, Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleTimeSpanPropertyDataReader = GetTimeSpanPropertyByIdDataReader( id );
                using ( simpleTimeSpanPropertyDataReader )
                {
                    if ( simpleTimeSpanPropertyDataReader.Read( ) )
                    {
                        destinationWriter.Write( true );
                        simpleTimeSpanPropertyDataReader.WriteTo( destinationWriter );
                    }
                    else
                    {
                        destinationWriter.Write( false );
                    }
                }
            }
        }

        public SimpleTimeSpanPropertyDataReader GetTimeSpanPropertyCollectionDataReader( )
        {
            const string sql = SimpleTimeSpanPropertyDataReader.BaseQuery; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleTimeSpanPropertyDataReader = new SimpleTimeSpanPropertyDataReader( _loggerFactory, sqlDataReader );
                return simpleTimeSpanPropertyDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public IList<TimeSpanPropertyObject> GetTimeSpanPropertyCollection( )
        {
            var result = new List<TimeSpanPropertyObject>( );
            var simpleTimeSpanPropertyDataReader = GetTimeSpanPropertyCollectionDataReader( );
            using ( simpleTimeSpanPropertyDataReader )
            {
                while ( simpleTimeSpanPropertyDataReader.Read( ) )
                {
                    var data = simpleTimeSpanPropertyDataReader.GetDataObject( );
                    result.Add( data );
                }
            }
            return result;
        }

        public void GetTimeSpanPropertyCollection( Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleTimeSpanPropertyDataReader = GetTimeSpanPropertyCollectionDataReader( );
                using ( simpleTimeSpanPropertyDataReader )
                {
                    simpleTimeSpanPropertyDataReader.WriteResultSetTo( destinationWriter );
                }
            }
        }

        public SimpleTimeSpanPropertyDataReader GetTimeSpanPropertyCollectionByElementDataReader( Guid element )
        {
            const string sql = SimpleTimeSpanPropertyDataReader.BaseQuery + " WHERE " +
                    SimpleTimeSpanPropertyDataReader.ViewAliasName + ".[Element] = @element " +
                    " ORDER BY " + SimpleTimeSpanPropertyDataReader.ViewAliasName + ".[Element]," +SimpleTimeSpanPropertyDataReader.ViewAliasName + ".[Definition]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var elementParameter = sqlCommandParameters.AddReference( "@element", element );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleTimeSpanPropertyDataReader = new SimpleTimeSpanPropertyDataReader( _loggerFactory, sqlDataReader );
                return simpleTimeSpanPropertyDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<TimeSpanPropertyObject> GetTimeSpanPropertyCollectionByElement( Guid element )
        {
            throw new NotImplementedException( );
        }
        public SimpleTimeSpanPropertyDataReader GetTimeSpanPropertyByElementAndDefinitionDataReader( Guid element, Guid definition )
        {
            const string sql = SimpleTimeSpanPropertyDataReader.BaseQuery + " WHERE " +
                    SimpleTimeSpanPropertyDataReader.ViewAliasName + ".[Element] = @element AND " +
                    SimpleTimeSpanPropertyDataReader.ViewAliasName + ".[Definition] = @definition " +
                    " ORDER BY " + SimpleTimeSpanPropertyDataReader.ViewAliasName + ".[Element]," +SimpleTimeSpanPropertyDataReader.ViewAliasName + ".[Definition]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var elementParameter = sqlCommandParameters.AddReference( "@element", element );
                var definitionParameter = sqlCommandParameters.AddReference( "@definition", definition );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleTimeSpanPropertyDataReader = new SimpleTimeSpanPropertyDataReader( _loggerFactory, sqlDataReader );
                return simpleTimeSpanPropertyDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public TimeSpanPropertyObject? GetTimeSpanPropertyByElementAndDefinition( Guid element, Guid definition )
        {
            throw new NotImplementedException( );
        }
        public SimpleTimeSpanPropertyDataReader GetTimeSpanPropertyCollectionByDefinitionDataReader( Guid definition )
        {
            const string sql = SimpleTimeSpanPropertyDataReader.BaseQuery + " WHERE " +
                    SimpleTimeSpanPropertyDataReader.ViewAliasName + ".[Definition] = @definition " +
                    " ORDER BY " + SimpleTimeSpanPropertyDataReader.ViewAliasName + ".[Definition]," +SimpleTimeSpanPropertyDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var definitionParameter = sqlCommandParameters.AddReference( "@definition", definition );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleTimeSpanPropertyDataReader = new SimpleTimeSpanPropertyDataReader( _loggerFactory, sqlDataReader );
                return simpleTimeSpanPropertyDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<TimeSpanPropertyObject> GetTimeSpanPropertyCollectionByDefinition( Guid definition )
        {
            throw new NotImplementedException( );
        }
        // ---------------------------------------------------------------------
        // UInt16Property queries
        // ---------------------------------------------------------------------
        public SimpleUInt16PropertyDataReader GetUInt16PropertyByIdDataReader( Guid id )
        {
            const string sql = SimpleUInt16PropertyDataReader.BaseQuery + "WHERE " + SimpleUInt16PropertyDataReader.ViewAliasName + ".[Id] = @id"; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                sqlCommandParameters.AddGuid( "@id", id );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleUInt16PropertyDataReader = new SimpleUInt16PropertyDataReader( _loggerFactory, sqlDataReader );
                return simpleUInt16PropertyDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public UInt16PropertyObject? GetUInt16PropertyById( Guid id )
        {
            var simpleUInt16PropertyDataReader = GetUInt16PropertyByIdDataReader( id );
            using ( simpleUInt16PropertyDataReader )
            {
                if ( simpleUInt16PropertyDataReader.Read( ) )
                {
                    var result = simpleUInt16PropertyDataReader.GetDataObject( );
                    return result;
                }
            }
            return null;
        }

        public void GetUInt16PropertyById( Guid id, Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleUInt16PropertyDataReader = GetUInt16PropertyByIdDataReader( id );
                using ( simpleUInt16PropertyDataReader )
                {
                    if ( simpleUInt16PropertyDataReader.Read( ) )
                    {
                        destinationWriter.Write( true );
                        simpleUInt16PropertyDataReader.WriteTo( destinationWriter );
                    }
                    else
                    {
                        destinationWriter.Write( false );
                    }
                }
            }
        }

        public SimpleUInt16PropertyDataReader GetUInt16PropertyCollectionDataReader( )
        {
            const string sql = SimpleUInt16PropertyDataReader.BaseQuery; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleUInt16PropertyDataReader = new SimpleUInt16PropertyDataReader( _loggerFactory, sqlDataReader );
                return simpleUInt16PropertyDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public IList<UInt16PropertyObject> GetUInt16PropertyCollection( )
        {
            var result = new List<UInt16PropertyObject>( );
            var simpleUInt16PropertyDataReader = GetUInt16PropertyCollectionDataReader( );
            using ( simpleUInt16PropertyDataReader )
            {
                while ( simpleUInt16PropertyDataReader.Read( ) )
                {
                    var data = simpleUInt16PropertyDataReader.GetDataObject( );
                    result.Add( data );
                }
            }
            return result;
        }

        public void GetUInt16PropertyCollection( Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleUInt16PropertyDataReader = GetUInt16PropertyCollectionDataReader( );
                using ( simpleUInt16PropertyDataReader )
                {
                    simpleUInt16PropertyDataReader.WriteResultSetTo( destinationWriter );
                }
            }
        }

        public SimpleUInt16PropertyDataReader GetUInt16PropertyCollectionByElementDataReader( Guid element )
        {
            const string sql = SimpleUInt16PropertyDataReader.BaseQuery + " WHERE " +
                    SimpleUInt16PropertyDataReader.ViewAliasName + ".[Element] = @element " +
                    " ORDER BY " + SimpleUInt16PropertyDataReader.ViewAliasName + ".[Element]," +SimpleUInt16PropertyDataReader.ViewAliasName + ".[Definition]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var elementParameter = sqlCommandParameters.AddReference( "@element", element );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleUInt16PropertyDataReader = new SimpleUInt16PropertyDataReader( _loggerFactory, sqlDataReader );
                return simpleUInt16PropertyDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<UInt16PropertyObject> GetUInt16PropertyCollectionByElement( Guid element )
        {
            throw new NotImplementedException( );
        }
        public SimpleUInt16PropertyDataReader GetUInt16PropertyByElementAndDefinitionDataReader( Guid element, Guid definition )
        {
            const string sql = SimpleUInt16PropertyDataReader.BaseQuery + " WHERE " +
                    SimpleUInt16PropertyDataReader.ViewAliasName + ".[Element] = @element AND " +
                    SimpleUInt16PropertyDataReader.ViewAliasName + ".[Definition] = @definition " +
                    " ORDER BY " + SimpleUInt16PropertyDataReader.ViewAliasName + ".[Element]," +SimpleUInt16PropertyDataReader.ViewAliasName + ".[Definition]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var elementParameter = sqlCommandParameters.AddReference( "@element", element );
                var definitionParameter = sqlCommandParameters.AddReference( "@definition", definition );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleUInt16PropertyDataReader = new SimpleUInt16PropertyDataReader( _loggerFactory, sqlDataReader );
                return simpleUInt16PropertyDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public UInt16PropertyObject? GetUInt16PropertyByElementAndDefinition( Guid element, Guid definition )
        {
            throw new NotImplementedException( );
        }
        public SimpleUInt16PropertyDataReader GetUInt16PropertyCollectionByDefinitionDataReader( Guid definition )
        {
            const string sql = SimpleUInt16PropertyDataReader.BaseQuery + " WHERE " +
                    SimpleUInt16PropertyDataReader.ViewAliasName + ".[Definition] = @definition " +
                    " ORDER BY " + SimpleUInt16PropertyDataReader.ViewAliasName + ".[Definition]," +SimpleUInt16PropertyDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var definitionParameter = sqlCommandParameters.AddReference( "@definition", definition );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleUInt16PropertyDataReader = new SimpleUInt16PropertyDataReader( _loggerFactory, sqlDataReader );
                return simpleUInt16PropertyDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<UInt16PropertyObject> GetUInt16PropertyCollectionByDefinition( Guid definition )
        {
            throw new NotImplementedException( );
        }
        // ---------------------------------------------------------------------
        // UInt32Property queries
        // ---------------------------------------------------------------------
        public SimpleUInt32PropertyDataReader GetUInt32PropertyByIdDataReader( Guid id )
        {
            const string sql = SimpleUInt32PropertyDataReader.BaseQuery + "WHERE " + SimpleUInt32PropertyDataReader.ViewAliasName + ".[Id] = @id"; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                sqlCommandParameters.AddGuid( "@id", id );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleUInt32PropertyDataReader = new SimpleUInt32PropertyDataReader( _loggerFactory, sqlDataReader );
                return simpleUInt32PropertyDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public UInt32PropertyObject? GetUInt32PropertyById( Guid id )
        {
            var simpleUInt32PropertyDataReader = GetUInt32PropertyByIdDataReader( id );
            using ( simpleUInt32PropertyDataReader )
            {
                if ( simpleUInt32PropertyDataReader.Read( ) )
                {
                    var result = simpleUInt32PropertyDataReader.GetDataObject( );
                    return result;
                }
            }
            return null;
        }

        public void GetUInt32PropertyById( Guid id, Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleUInt32PropertyDataReader = GetUInt32PropertyByIdDataReader( id );
                using ( simpleUInt32PropertyDataReader )
                {
                    if ( simpleUInt32PropertyDataReader.Read( ) )
                    {
                        destinationWriter.Write( true );
                        simpleUInt32PropertyDataReader.WriteTo( destinationWriter );
                    }
                    else
                    {
                        destinationWriter.Write( false );
                    }
                }
            }
        }

        public SimpleUInt32PropertyDataReader GetUInt32PropertyCollectionDataReader( )
        {
            const string sql = SimpleUInt32PropertyDataReader.BaseQuery; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleUInt32PropertyDataReader = new SimpleUInt32PropertyDataReader( _loggerFactory, sqlDataReader );
                return simpleUInt32PropertyDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public IList<UInt32PropertyObject> GetUInt32PropertyCollection( )
        {
            var result = new List<UInt32PropertyObject>( );
            var simpleUInt32PropertyDataReader = GetUInt32PropertyCollectionDataReader( );
            using ( simpleUInt32PropertyDataReader )
            {
                while ( simpleUInt32PropertyDataReader.Read( ) )
                {
                    var data = simpleUInt32PropertyDataReader.GetDataObject( );
                    result.Add( data );
                }
            }
            return result;
        }

        public void GetUInt32PropertyCollection( Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleUInt32PropertyDataReader = GetUInt32PropertyCollectionDataReader( );
                using ( simpleUInt32PropertyDataReader )
                {
                    simpleUInt32PropertyDataReader.WriteResultSetTo( destinationWriter );
                }
            }
        }

        public SimpleUInt32PropertyDataReader GetUInt32PropertyCollectionByElementDataReader( Guid element )
        {
            const string sql = SimpleUInt32PropertyDataReader.BaseQuery + " WHERE " +
                    SimpleUInt32PropertyDataReader.ViewAliasName + ".[Element] = @element " +
                    " ORDER BY " + SimpleUInt32PropertyDataReader.ViewAliasName + ".[Element]," +SimpleUInt32PropertyDataReader.ViewAliasName + ".[Definition]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var elementParameter = sqlCommandParameters.AddReference( "@element", element );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleUInt32PropertyDataReader = new SimpleUInt32PropertyDataReader( _loggerFactory, sqlDataReader );
                return simpleUInt32PropertyDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<UInt32PropertyObject> GetUInt32PropertyCollectionByElement( Guid element )
        {
            throw new NotImplementedException( );
        }
        public SimpleUInt32PropertyDataReader GetUInt32PropertyByElementAndDefinitionDataReader( Guid element, Guid definition )
        {
            const string sql = SimpleUInt32PropertyDataReader.BaseQuery + " WHERE " +
                    SimpleUInt32PropertyDataReader.ViewAliasName + ".[Element] = @element AND " +
                    SimpleUInt32PropertyDataReader.ViewAliasName + ".[Definition] = @definition " +
                    " ORDER BY " + SimpleUInt32PropertyDataReader.ViewAliasName + ".[Element]," +SimpleUInt32PropertyDataReader.ViewAliasName + ".[Definition]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var elementParameter = sqlCommandParameters.AddReference( "@element", element );
                var definitionParameter = sqlCommandParameters.AddReference( "@definition", definition );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleUInt32PropertyDataReader = new SimpleUInt32PropertyDataReader( _loggerFactory, sqlDataReader );
                return simpleUInt32PropertyDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public UInt32PropertyObject? GetUInt32PropertyByElementAndDefinition( Guid element, Guid definition )
        {
            throw new NotImplementedException( );
        }
        public SimpleUInt32PropertyDataReader GetUInt32PropertyCollectionByDefinitionDataReader( Guid definition )
        {
            const string sql = SimpleUInt32PropertyDataReader.BaseQuery + " WHERE " +
                    SimpleUInt32PropertyDataReader.ViewAliasName + ".[Definition] = @definition " +
                    " ORDER BY " + SimpleUInt32PropertyDataReader.ViewAliasName + ".[Definition]," +SimpleUInt32PropertyDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var definitionParameter = sqlCommandParameters.AddReference( "@definition", definition );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleUInt32PropertyDataReader = new SimpleUInt32PropertyDataReader( _loggerFactory, sqlDataReader );
                return simpleUInt32PropertyDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<UInt32PropertyObject> GetUInt32PropertyCollectionByDefinition( Guid definition )
        {
            throw new NotImplementedException( );
        }
        // ---------------------------------------------------------------------
        // UInt64Property queries
        // ---------------------------------------------------------------------
        public SimpleUInt64PropertyDataReader GetUInt64PropertyByIdDataReader( Guid id )
        {
            const string sql = SimpleUInt64PropertyDataReader.BaseQuery + "WHERE " + SimpleUInt64PropertyDataReader.ViewAliasName + ".[Id] = @id"; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                sqlCommandParameters.AddGuid( "@id", id );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleUInt64PropertyDataReader = new SimpleUInt64PropertyDataReader( _loggerFactory, sqlDataReader );
                return simpleUInt64PropertyDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public UInt64PropertyObject? GetUInt64PropertyById( Guid id )
        {
            var simpleUInt64PropertyDataReader = GetUInt64PropertyByIdDataReader( id );
            using ( simpleUInt64PropertyDataReader )
            {
                if ( simpleUInt64PropertyDataReader.Read( ) )
                {
                    var result = simpleUInt64PropertyDataReader.GetDataObject( );
                    return result;
                }
            }
            return null;
        }

        public void GetUInt64PropertyById( Guid id, Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleUInt64PropertyDataReader = GetUInt64PropertyByIdDataReader( id );
                using ( simpleUInt64PropertyDataReader )
                {
                    if ( simpleUInt64PropertyDataReader.Read( ) )
                    {
                        destinationWriter.Write( true );
                        simpleUInt64PropertyDataReader.WriteTo( destinationWriter );
                    }
                    else
                    {
                        destinationWriter.Write( false );
                    }
                }
            }
        }

        public SimpleUInt64PropertyDataReader GetUInt64PropertyCollectionDataReader( )
        {
            const string sql = SimpleUInt64PropertyDataReader.BaseQuery; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleUInt64PropertyDataReader = new SimpleUInt64PropertyDataReader( _loggerFactory, sqlDataReader );
                return simpleUInt64PropertyDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public IList<UInt64PropertyObject> GetUInt64PropertyCollection( )
        {
            var result = new List<UInt64PropertyObject>( );
            var simpleUInt64PropertyDataReader = GetUInt64PropertyCollectionDataReader( );
            using ( simpleUInt64PropertyDataReader )
            {
                while ( simpleUInt64PropertyDataReader.Read( ) )
                {
                    var data = simpleUInt64PropertyDataReader.GetDataObject( );
                    result.Add( data );
                }
            }
            return result;
        }

        public void GetUInt64PropertyCollection( Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleUInt64PropertyDataReader = GetUInt64PropertyCollectionDataReader( );
                using ( simpleUInt64PropertyDataReader )
                {
                    simpleUInt64PropertyDataReader.WriteResultSetTo( destinationWriter );
                }
            }
        }

        public SimpleUInt64PropertyDataReader GetUInt64PropertyCollectionByElementDataReader( Guid element )
        {
            const string sql = SimpleUInt64PropertyDataReader.BaseQuery + " WHERE " +
                    SimpleUInt64PropertyDataReader.ViewAliasName + ".[Element] = @element " +
                    " ORDER BY " + SimpleUInt64PropertyDataReader.ViewAliasName + ".[Element]," +SimpleUInt64PropertyDataReader.ViewAliasName + ".[Definition]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var elementParameter = sqlCommandParameters.AddReference( "@element", element );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleUInt64PropertyDataReader = new SimpleUInt64PropertyDataReader( _loggerFactory, sqlDataReader );
                return simpleUInt64PropertyDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<UInt64PropertyObject> GetUInt64PropertyCollectionByElement( Guid element )
        {
            throw new NotImplementedException( );
        }
        public SimpleUInt64PropertyDataReader GetUInt64PropertyByElementAndDefinitionDataReader( Guid element, Guid definition )
        {
            const string sql = SimpleUInt64PropertyDataReader.BaseQuery + " WHERE " +
                    SimpleUInt64PropertyDataReader.ViewAliasName + ".[Element] = @element AND " +
                    SimpleUInt64PropertyDataReader.ViewAliasName + ".[Definition] = @definition " +
                    " ORDER BY " + SimpleUInt64PropertyDataReader.ViewAliasName + ".[Element]," +SimpleUInt64PropertyDataReader.ViewAliasName + ".[Definition]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var elementParameter = sqlCommandParameters.AddReference( "@element", element );
                var definitionParameter = sqlCommandParameters.AddReference( "@definition", definition );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleUInt64PropertyDataReader = new SimpleUInt64PropertyDataReader( _loggerFactory, sqlDataReader );
                return simpleUInt64PropertyDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public UInt64PropertyObject? GetUInt64PropertyByElementAndDefinition( Guid element, Guid definition )
        {
            throw new NotImplementedException( );
        }
        public SimpleUInt64PropertyDataReader GetUInt64PropertyCollectionByDefinitionDataReader( Guid definition )
        {
            const string sql = SimpleUInt64PropertyDataReader.BaseQuery + " WHERE " +
                    SimpleUInt64PropertyDataReader.ViewAliasName + ".[Definition] = @definition " +
                    " ORDER BY " + SimpleUInt64PropertyDataReader.ViewAliasName + ".[Definition]," +SimpleUInt64PropertyDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var definitionParameter = sqlCommandParameters.AddReference( "@definition", definition );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleUInt64PropertyDataReader = new SimpleUInt64PropertyDataReader( _loggerFactory, sqlDataReader );
                return simpleUInt64PropertyDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<UInt64PropertyObject> GetUInt64PropertyCollectionByDefinition( Guid definition )
        {
            throw new NotImplementedException( );
        }
        // ---------------------------------------------------------------------
        // PropertyDefinition queries
        // ---------------------------------------------------------------------
        public ComplexPropertyDefinitionDataReader GetPropertyDefinitionByIdDataReader( Guid id )
        {
            const string sql = ComplexPropertyDefinitionDataReader.BaseQuery + "WHERE " + ComplexPropertyDefinitionDataReader.ViewAliasName + ".[Id] = @id"; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                sqlCommandParameters.AddGuid( "@id", id );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var complexPropertyDefinitionDataReader = new ComplexPropertyDefinitionDataReader( _loggerFactory, sqlDataReader );
                return complexPropertyDefinitionDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public PropertyDefinitionObject? GetPropertyDefinitionById( Guid id )
        {
            var complexPropertyDefinitionDataReader = GetPropertyDefinitionByIdDataReader( id );
            using ( complexPropertyDefinitionDataReader )
            {
                if ( complexPropertyDefinitionDataReader.Read( ) )
                {
                    var result = complexPropertyDefinitionDataReader.GetDataObject( );
                    return result;
                }
            }
            return null;
        }

        public void GetPropertyDefinitionById( Guid id, Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var complexPropertyDefinitionDataReader = GetPropertyDefinitionByIdDataReader( id );
                using ( complexPropertyDefinitionDataReader )
                {
                    if ( complexPropertyDefinitionDataReader.Read( ) )
                    {
                        destinationWriter.Write( true );
                        complexPropertyDefinitionDataReader.WriteTo( destinationWriter );
                    }
                    else
                    {
                        destinationWriter.Write( false );
                    }
                }
            }
        }

        public ComplexPropertyDefinitionDataReader GetPropertyDefinitionCollectionDataReader( )
        {
            const string sql = ComplexPropertyDefinitionDataReader.BaseQuery; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var complexPropertyDefinitionDataReader = new ComplexPropertyDefinitionDataReader( _loggerFactory, sqlDataReader );
                return complexPropertyDefinitionDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public IList<PropertyDefinitionObject> GetPropertyDefinitionCollection( )
        {
            var result = new List<PropertyDefinitionObject>( );
            var complexPropertyDefinitionDataReader = GetPropertyDefinitionCollectionDataReader( );
            using ( complexPropertyDefinitionDataReader )
            {
                while ( complexPropertyDefinitionDataReader.Read( ) )
                {
                    var data = complexPropertyDefinitionDataReader.GetDataObject( );
                    result.Add( data );
                }
            }
            return result;
        }

        public void GetPropertyDefinitionCollection( Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var complexPropertyDefinitionDataReader = GetPropertyDefinitionCollectionDataReader( );
                using ( complexPropertyDefinitionDataReader )
                {
                    complexPropertyDefinitionDataReader.WriteResultSetTo( destinationWriter );
                }
            }
        }

        public ComplexPropertyDefinitionDataReader GetPropertyDefinitionCollectionByElementTypeDataReader( Guid elementType )
        {
            const string sql = ComplexPropertyDefinitionDataReader.BaseQuery + " WHERE " +
                    ComplexPropertyDefinitionDataReader.ViewAliasName + ".[ElementType] = @elementType " +
                    " ORDER BY " + ComplexPropertyDefinitionDataReader.ViewAliasName + ".[ElementType]," +ComplexPropertyDefinitionDataReader.ViewAliasName + ".[Name]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var elementTypeParameter = sqlCommandParameters.AddReference( "@elementType", elementType );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var complexPropertyDefinitionDataReader = new ComplexPropertyDefinitionDataReader( _loggerFactory, sqlDataReader );
                return complexPropertyDefinitionDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<PropertyDefinitionObject> GetPropertyDefinitionCollectionByElementType( Guid elementType )
        {
            throw new NotImplementedException( );
        }
        public ComplexPropertyDefinitionDataReader GetPropertyDefinitionByElementTypeAndNameDataReader( Guid elementType, string name )
        {
            const string sql = ComplexPropertyDefinitionDataReader.BaseQuery + " WHERE " +
                    ComplexPropertyDefinitionDataReader.ViewAliasName + ".[ElementType] = @elementType AND " +
                    ComplexPropertyDefinitionDataReader.ViewAliasName + ".[Name] = @name " +
                    " ORDER BY " + ComplexPropertyDefinitionDataReader.ViewAliasName + ".[ElementType]," +ComplexPropertyDefinitionDataReader.ViewAliasName + ".[Name]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var elementTypeParameter = sqlCommandParameters.AddReference( "@elementType", elementType );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@name", name, 127 );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var complexPropertyDefinitionDataReader = new ComplexPropertyDefinitionDataReader( _loggerFactory, sqlDataReader );
                return complexPropertyDefinitionDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public PropertyDefinitionObject? GetPropertyDefinitionByElementTypeAndName( Guid elementType, string name )
        {
            throw new NotImplementedException( );
        }
        // ---------------------------------------------------------------------
        // BinaryPropertyDefinition queries
        // ---------------------------------------------------------------------
        public SimpleBinaryPropertyDefinitionDataReader GetBinaryPropertyDefinitionByIdDataReader( Guid id )
        {
            const string sql = SimpleBinaryPropertyDefinitionDataReader.BaseQuery + "WHERE " + SimpleBinaryPropertyDefinitionDataReader.ViewAliasName + ".[Id] = @id"; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                sqlCommandParameters.AddGuid( "@id", id );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleBinaryPropertyDefinitionDataReader = new SimpleBinaryPropertyDefinitionDataReader( _loggerFactory, sqlDataReader );
                return simpleBinaryPropertyDefinitionDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public BinaryPropertyDefinitionObject? GetBinaryPropertyDefinitionById( Guid id )
        {
            var simpleBinaryPropertyDefinitionDataReader = GetBinaryPropertyDefinitionByIdDataReader( id );
            using ( simpleBinaryPropertyDefinitionDataReader )
            {
                if ( simpleBinaryPropertyDefinitionDataReader.Read( ) )
                {
                    var result = simpleBinaryPropertyDefinitionDataReader.GetDataObject( );
                    return result;
                }
            }
            return null;
        }

        public void GetBinaryPropertyDefinitionById( Guid id, Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleBinaryPropertyDefinitionDataReader = GetBinaryPropertyDefinitionByIdDataReader( id );
                using ( simpleBinaryPropertyDefinitionDataReader )
                {
                    if ( simpleBinaryPropertyDefinitionDataReader.Read( ) )
                    {
                        destinationWriter.Write( true );
                        simpleBinaryPropertyDefinitionDataReader.WriteTo( destinationWriter );
                    }
                    else
                    {
                        destinationWriter.Write( false );
                    }
                }
            }
        }

        public SimpleBinaryPropertyDefinitionDataReader GetBinaryPropertyDefinitionCollectionDataReader( )
        {
            const string sql = SimpleBinaryPropertyDefinitionDataReader.BaseQuery; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleBinaryPropertyDefinitionDataReader = new SimpleBinaryPropertyDefinitionDataReader( _loggerFactory, sqlDataReader );
                return simpleBinaryPropertyDefinitionDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public IList<BinaryPropertyDefinitionObject> GetBinaryPropertyDefinitionCollection( )
        {
            var result = new List<BinaryPropertyDefinitionObject>( );
            var simpleBinaryPropertyDefinitionDataReader = GetBinaryPropertyDefinitionCollectionDataReader( );
            using ( simpleBinaryPropertyDefinitionDataReader )
            {
                while ( simpleBinaryPropertyDefinitionDataReader.Read( ) )
                {
                    var data = simpleBinaryPropertyDefinitionDataReader.GetDataObject( );
                    result.Add( data );
                }
            }
            return result;
        }

        public void GetBinaryPropertyDefinitionCollection( Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleBinaryPropertyDefinitionDataReader = GetBinaryPropertyDefinitionCollectionDataReader( );
                using ( simpleBinaryPropertyDefinitionDataReader )
                {
                    simpleBinaryPropertyDefinitionDataReader.WriteResultSetTo( destinationWriter );
                }
            }
        }

        public SimpleBinaryPropertyDefinitionDataReader GetBinaryPropertyDefinitionCollectionByElementTypeDataReader( Guid elementType )
        {
            const string sql = SimpleBinaryPropertyDefinitionDataReader.BaseQuery + " WHERE " +
                    SimpleBinaryPropertyDefinitionDataReader.ViewAliasName + ".[ElementType] = @elementType " +
                    " ORDER BY " + SimpleBinaryPropertyDefinitionDataReader.ViewAliasName + ".[ElementType]," +SimpleBinaryPropertyDefinitionDataReader.ViewAliasName + ".[Name]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var elementTypeParameter = sqlCommandParameters.AddReference( "@elementType", elementType );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleBinaryPropertyDefinitionDataReader = new SimpleBinaryPropertyDefinitionDataReader( _loggerFactory, sqlDataReader );
                return simpleBinaryPropertyDefinitionDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<BinaryPropertyDefinitionObject> GetBinaryPropertyDefinitionCollectionByElementType( Guid elementType )
        {
            throw new NotImplementedException( );
        }
        public SimpleBinaryPropertyDefinitionDataReader GetBinaryPropertyDefinitionByElementTypeAndNameDataReader( Guid elementType, string name )
        {
            const string sql = SimpleBinaryPropertyDefinitionDataReader.BaseQuery + " WHERE " +
                    SimpleBinaryPropertyDefinitionDataReader.ViewAliasName + ".[ElementType] = @elementType AND " +
                    SimpleBinaryPropertyDefinitionDataReader.ViewAliasName + ".[Name] = @name " +
                    " ORDER BY " + SimpleBinaryPropertyDefinitionDataReader.ViewAliasName + ".[ElementType]," +SimpleBinaryPropertyDefinitionDataReader.ViewAliasName + ".[Name]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var elementTypeParameter = sqlCommandParameters.AddReference( "@elementType", elementType );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@name", name, 127 );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleBinaryPropertyDefinitionDataReader = new SimpleBinaryPropertyDefinitionDataReader( _loggerFactory, sqlDataReader );
                return simpleBinaryPropertyDefinitionDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public BinaryPropertyDefinitionObject? GetBinaryPropertyDefinitionByElementTypeAndName( Guid elementType, string name )
        {
            throw new NotImplementedException( );
        }
        // ---------------------------------------------------------------------
        // BooleanPropertyDefinition queries
        // ---------------------------------------------------------------------
        public SimpleBooleanPropertyDefinitionDataReader GetBooleanPropertyDefinitionByIdDataReader( Guid id )
        {
            const string sql = SimpleBooleanPropertyDefinitionDataReader.BaseQuery + "WHERE " + SimpleBooleanPropertyDefinitionDataReader.ViewAliasName + ".[Id] = @id"; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                sqlCommandParameters.AddGuid( "@id", id );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleBooleanPropertyDefinitionDataReader = new SimpleBooleanPropertyDefinitionDataReader( _loggerFactory, sqlDataReader );
                return simpleBooleanPropertyDefinitionDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public BooleanPropertyDefinitionObject? GetBooleanPropertyDefinitionById( Guid id )
        {
            var simpleBooleanPropertyDefinitionDataReader = GetBooleanPropertyDefinitionByIdDataReader( id );
            using ( simpleBooleanPropertyDefinitionDataReader )
            {
                if ( simpleBooleanPropertyDefinitionDataReader.Read( ) )
                {
                    var result = simpleBooleanPropertyDefinitionDataReader.GetDataObject( );
                    return result;
                }
            }
            return null;
        }

        public void GetBooleanPropertyDefinitionById( Guid id, Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleBooleanPropertyDefinitionDataReader = GetBooleanPropertyDefinitionByIdDataReader( id );
                using ( simpleBooleanPropertyDefinitionDataReader )
                {
                    if ( simpleBooleanPropertyDefinitionDataReader.Read( ) )
                    {
                        destinationWriter.Write( true );
                        simpleBooleanPropertyDefinitionDataReader.WriteTo( destinationWriter );
                    }
                    else
                    {
                        destinationWriter.Write( false );
                    }
                }
            }
        }

        public SimpleBooleanPropertyDefinitionDataReader GetBooleanPropertyDefinitionCollectionDataReader( )
        {
            const string sql = SimpleBooleanPropertyDefinitionDataReader.BaseQuery; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleBooleanPropertyDefinitionDataReader = new SimpleBooleanPropertyDefinitionDataReader( _loggerFactory, sqlDataReader );
                return simpleBooleanPropertyDefinitionDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public IList<BooleanPropertyDefinitionObject> GetBooleanPropertyDefinitionCollection( )
        {
            var result = new List<BooleanPropertyDefinitionObject>( );
            var simpleBooleanPropertyDefinitionDataReader = GetBooleanPropertyDefinitionCollectionDataReader( );
            using ( simpleBooleanPropertyDefinitionDataReader )
            {
                while ( simpleBooleanPropertyDefinitionDataReader.Read( ) )
                {
                    var data = simpleBooleanPropertyDefinitionDataReader.GetDataObject( );
                    result.Add( data );
                }
            }
            return result;
        }

        public void GetBooleanPropertyDefinitionCollection( Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleBooleanPropertyDefinitionDataReader = GetBooleanPropertyDefinitionCollectionDataReader( );
                using ( simpleBooleanPropertyDefinitionDataReader )
                {
                    simpleBooleanPropertyDefinitionDataReader.WriteResultSetTo( destinationWriter );
                }
            }
        }

        public SimpleBooleanPropertyDefinitionDataReader GetBooleanPropertyDefinitionCollectionByElementTypeDataReader( Guid elementType )
        {
            const string sql = SimpleBooleanPropertyDefinitionDataReader.BaseQuery + " WHERE " +
                    SimpleBooleanPropertyDefinitionDataReader.ViewAliasName + ".[ElementType] = @elementType " +
                    " ORDER BY " + SimpleBooleanPropertyDefinitionDataReader.ViewAliasName + ".[ElementType]," +SimpleBooleanPropertyDefinitionDataReader.ViewAliasName + ".[Name]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var elementTypeParameter = sqlCommandParameters.AddReference( "@elementType", elementType );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleBooleanPropertyDefinitionDataReader = new SimpleBooleanPropertyDefinitionDataReader( _loggerFactory, sqlDataReader );
                return simpleBooleanPropertyDefinitionDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<BooleanPropertyDefinitionObject> GetBooleanPropertyDefinitionCollectionByElementType( Guid elementType )
        {
            throw new NotImplementedException( );
        }
        public SimpleBooleanPropertyDefinitionDataReader GetBooleanPropertyDefinitionByElementTypeAndNameDataReader( Guid elementType, string name )
        {
            const string sql = SimpleBooleanPropertyDefinitionDataReader.BaseQuery + " WHERE " +
                    SimpleBooleanPropertyDefinitionDataReader.ViewAliasName + ".[ElementType] = @elementType AND " +
                    SimpleBooleanPropertyDefinitionDataReader.ViewAliasName + ".[Name] = @name " +
                    " ORDER BY " + SimpleBooleanPropertyDefinitionDataReader.ViewAliasName + ".[ElementType]," +SimpleBooleanPropertyDefinitionDataReader.ViewAliasName + ".[Name]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var elementTypeParameter = sqlCommandParameters.AddReference( "@elementType", elementType );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@name", name, 127 );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleBooleanPropertyDefinitionDataReader = new SimpleBooleanPropertyDefinitionDataReader( _loggerFactory, sqlDataReader );
                return simpleBooleanPropertyDefinitionDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public BooleanPropertyDefinitionObject? GetBooleanPropertyDefinitionByElementTypeAndName( Guid elementType, string name )
        {
            throw new NotImplementedException( );
        }
        // ---------------------------------------------------------------------
        // BytePropertyDefinition queries
        // ---------------------------------------------------------------------
        public SimpleBytePropertyDefinitionDataReader GetBytePropertyDefinitionByIdDataReader( Guid id )
        {
            const string sql = SimpleBytePropertyDefinitionDataReader.BaseQuery + "WHERE " + SimpleBytePropertyDefinitionDataReader.ViewAliasName + ".[Id] = @id"; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                sqlCommandParameters.AddGuid( "@id", id );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleBytePropertyDefinitionDataReader = new SimpleBytePropertyDefinitionDataReader( _loggerFactory, sqlDataReader );
                return simpleBytePropertyDefinitionDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public BytePropertyDefinitionObject? GetBytePropertyDefinitionById( Guid id )
        {
            var simpleBytePropertyDefinitionDataReader = GetBytePropertyDefinitionByIdDataReader( id );
            using ( simpleBytePropertyDefinitionDataReader )
            {
                if ( simpleBytePropertyDefinitionDataReader.Read( ) )
                {
                    var result = simpleBytePropertyDefinitionDataReader.GetDataObject( );
                    return result;
                }
            }
            return null;
        }

        public void GetBytePropertyDefinitionById( Guid id, Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleBytePropertyDefinitionDataReader = GetBytePropertyDefinitionByIdDataReader( id );
                using ( simpleBytePropertyDefinitionDataReader )
                {
                    if ( simpleBytePropertyDefinitionDataReader.Read( ) )
                    {
                        destinationWriter.Write( true );
                        simpleBytePropertyDefinitionDataReader.WriteTo( destinationWriter );
                    }
                    else
                    {
                        destinationWriter.Write( false );
                    }
                }
            }
        }

        public SimpleBytePropertyDefinitionDataReader GetBytePropertyDefinitionCollectionDataReader( )
        {
            const string sql = SimpleBytePropertyDefinitionDataReader.BaseQuery; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleBytePropertyDefinitionDataReader = new SimpleBytePropertyDefinitionDataReader( _loggerFactory, sqlDataReader );
                return simpleBytePropertyDefinitionDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public IList<BytePropertyDefinitionObject> GetBytePropertyDefinitionCollection( )
        {
            var result = new List<BytePropertyDefinitionObject>( );
            var simpleBytePropertyDefinitionDataReader = GetBytePropertyDefinitionCollectionDataReader( );
            using ( simpleBytePropertyDefinitionDataReader )
            {
                while ( simpleBytePropertyDefinitionDataReader.Read( ) )
                {
                    var data = simpleBytePropertyDefinitionDataReader.GetDataObject( );
                    result.Add( data );
                }
            }
            return result;
        }

        public void GetBytePropertyDefinitionCollection( Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleBytePropertyDefinitionDataReader = GetBytePropertyDefinitionCollectionDataReader( );
                using ( simpleBytePropertyDefinitionDataReader )
                {
                    simpleBytePropertyDefinitionDataReader.WriteResultSetTo( destinationWriter );
                }
            }
        }

        public SimpleBytePropertyDefinitionDataReader GetBytePropertyDefinitionCollectionByElementTypeDataReader( Guid elementType )
        {
            const string sql = SimpleBytePropertyDefinitionDataReader.BaseQuery + " WHERE " +
                    SimpleBytePropertyDefinitionDataReader.ViewAliasName + ".[ElementType] = @elementType " +
                    " ORDER BY " + SimpleBytePropertyDefinitionDataReader.ViewAliasName + ".[ElementType]," +SimpleBytePropertyDefinitionDataReader.ViewAliasName + ".[Name]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var elementTypeParameter = sqlCommandParameters.AddReference( "@elementType", elementType );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleBytePropertyDefinitionDataReader = new SimpleBytePropertyDefinitionDataReader( _loggerFactory, sqlDataReader );
                return simpleBytePropertyDefinitionDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<BytePropertyDefinitionObject> GetBytePropertyDefinitionCollectionByElementType( Guid elementType )
        {
            throw new NotImplementedException( );
        }
        public SimpleBytePropertyDefinitionDataReader GetBytePropertyDefinitionByElementTypeAndNameDataReader( Guid elementType, string name )
        {
            const string sql = SimpleBytePropertyDefinitionDataReader.BaseQuery + " WHERE " +
                    SimpleBytePropertyDefinitionDataReader.ViewAliasName + ".[ElementType] = @elementType AND " +
                    SimpleBytePropertyDefinitionDataReader.ViewAliasName + ".[Name] = @name " +
                    " ORDER BY " + SimpleBytePropertyDefinitionDataReader.ViewAliasName + ".[ElementType]," +SimpleBytePropertyDefinitionDataReader.ViewAliasName + ".[Name]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var elementTypeParameter = sqlCommandParameters.AddReference( "@elementType", elementType );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@name", name, 127 );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleBytePropertyDefinitionDataReader = new SimpleBytePropertyDefinitionDataReader( _loggerFactory, sqlDataReader );
                return simpleBytePropertyDefinitionDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public BytePropertyDefinitionObject? GetBytePropertyDefinitionByElementTypeAndName( Guid elementType, string name )
        {
            throw new NotImplementedException( );
        }
        // ---------------------------------------------------------------------
        // DateTimePropertyDefinition queries
        // ---------------------------------------------------------------------
        public SimpleDateTimePropertyDefinitionDataReader GetDateTimePropertyDefinitionByIdDataReader( Guid id )
        {
            const string sql = SimpleDateTimePropertyDefinitionDataReader.BaseQuery + "WHERE " + SimpleDateTimePropertyDefinitionDataReader.ViewAliasName + ".[Id] = @id"; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                sqlCommandParameters.AddGuid( "@id", id );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleDateTimePropertyDefinitionDataReader = new SimpleDateTimePropertyDefinitionDataReader( _loggerFactory, sqlDataReader );
                return simpleDateTimePropertyDefinitionDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public DateTimePropertyDefinitionObject? GetDateTimePropertyDefinitionById( Guid id )
        {
            var simpleDateTimePropertyDefinitionDataReader = GetDateTimePropertyDefinitionByIdDataReader( id );
            using ( simpleDateTimePropertyDefinitionDataReader )
            {
                if ( simpleDateTimePropertyDefinitionDataReader.Read( ) )
                {
                    var result = simpleDateTimePropertyDefinitionDataReader.GetDataObject( );
                    return result;
                }
            }
            return null;
        }

        public void GetDateTimePropertyDefinitionById( Guid id, Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleDateTimePropertyDefinitionDataReader = GetDateTimePropertyDefinitionByIdDataReader( id );
                using ( simpleDateTimePropertyDefinitionDataReader )
                {
                    if ( simpleDateTimePropertyDefinitionDataReader.Read( ) )
                    {
                        destinationWriter.Write( true );
                        simpleDateTimePropertyDefinitionDataReader.WriteTo( destinationWriter );
                    }
                    else
                    {
                        destinationWriter.Write( false );
                    }
                }
            }
        }

        public SimpleDateTimePropertyDefinitionDataReader GetDateTimePropertyDefinitionCollectionDataReader( )
        {
            const string sql = SimpleDateTimePropertyDefinitionDataReader.BaseQuery; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleDateTimePropertyDefinitionDataReader = new SimpleDateTimePropertyDefinitionDataReader( _loggerFactory, sqlDataReader );
                return simpleDateTimePropertyDefinitionDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public IList<DateTimePropertyDefinitionObject> GetDateTimePropertyDefinitionCollection( )
        {
            var result = new List<DateTimePropertyDefinitionObject>( );
            var simpleDateTimePropertyDefinitionDataReader = GetDateTimePropertyDefinitionCollectionDataReader( );
            using ( simpleDateTimePropertyDefinitionDataReader )
            {
                while ( simpleDateTimePropertyDefinitionDataReader.Read( ) )
                {
                    var data = simpleDateTimePropertyDefinitionDataReader.GetDataObject( );
                    result.Add( data );
                }
            }
            return result;
        }

        public void GetDateTimePropertyDefinitionCollection( Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleDateTimePropertyDefinitionDataReader = GetDateTimePropertyDefinitionCollectionDataReader( );
                using ( simpleDateTimePropertyDefinitionDataReader )
                {
                    simpleDateTimePropertyDefinitionDataReader.WriteResultSetTo( destinationWriter );
                }
            }
        }

        public SimpleDateTimePropertyDefinitionDataReader GetDateTimePropertyDefinitionCollectionByElementTypeDataReader( Guid elementType )
        {
            const string sql = SimpleDateTimePropertyDefinitionDataReader.BaseQuery + " WHERE " +
                    SimpleDateTimePropertyDefinitionDataReader.ViewAliasName + ".[ElementType] = @elementType " +
                    " ORDER BY " + SimpleDateTimePropertyDefinitionDataReader.ViewAliasName + ".[ElementType]," +SimpleDateTimePropertyDefinitionDataReader.ViewAliasName + ".[Name]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var elementTypeParameter = sqlCommandParameters.AddReference( "@elementType", elementType );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleDateTimePropertyDefinitionDataReader = new SimpleDateTimePropertyDefinitionDataReader( _loggerFactory, sqlDataReader );
                return simpleDateTimePropertyDefinitionDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<DateTimePropertyDefinitionObject> GetDateTimePropertyDefinitionCollectionByElementType( Guid elementType )
        {
            throw new NotImplementedException( );
        }
        public SimpleDateTimePropertyDefinitionDataReader GetDateTimePropertyDefinitionByElementTypeAndNameDataReader( Guid elementType, string name )
        {
            const string sql = SimpleDateTimePropertyDefinitionDataReader.BaseQuery + " WHERE " +
                    SimpleDateTimePropertyDefinitionDataReader.ViewAliasName + ".[ElementType] = @elementType AND " +
                    SimpleDateTimePropertyDefinitionDataReader.ViewAliasName + ".[Name] = @name " +
                    " ORDER BY " + SimpleDateTimePropertyDefinitionDataReader.ViewAliasName + ".[ElementType]," +SimpleDateTimePropertyDefinitionDataReader.ViewAliasName + ".[Name]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var elementTypeParameter = sqlCommandParameters.AddReference( "@elementType", elementType );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@name", name, 127 );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleDateTimePropertyDefinitionDataReader = new SimpleDateTimePropertyDefinitionDataReader( _loggerFactory, sqlDataReader );
                return simpleDateTimePropertyDefinitionDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public DateTimePropertyDefinitionObject? GetDateTimePropertyDefinitionByElementTypeAndName( Guid elementType, string name )
        {
            throw new NotImplementedException( );
        }
        // ---------------------------------------------------------------------
        // DoublePropertyDefinition queries
        // ---------------------------------------------------------------------
        public SimpleDoublePropertyDefinitionDataReader GetDoublePropertyDefinitionByIdDataReader( Guid id )
        {
            const string sql = SimpleDoublePropertyDefinitionDataReader.BaseQuery + "WHERE " + SimpleDoublePropertyDefinitionDataReader.ViewAliasName + ".[Id] = @id"; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                sqlCommandParameters.AddGuid( "@id", id );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleDoublePropertyDefinitionDataReader = new SimpleDoublePropertyDefinitionDataReader( _loggerFactory, sqlDataReader );
                return simpleDoublePropertyDefinitionDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public DoublePropertyDefinitionObject? GetDoublePropertyDefinitionById( Guid id )
        {
            var simpleDoublePropertyDefinitionDataReader = GetDoublePropertyDefinitionByIdDataReader( id );
            using ( simpleDoublePropertyDefinitionDataReader )
            {
                if ( simpleDoublePropertyDefinitionDataReader.Read( ) )
                {
                    var result = simpleDoublePropertyDefinitionDataReader.GetDataObject( );
                    return result;
                }
            }
            return null;
        }

        public void GetDoublePropertyDefinitionById( Guid id, Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleDoublePropertyDefinitionDataReader = GetDoublePropertyDefinitionByIdDataReader( id );
                using ( simpleDoublePropertyDefinitionDataReader )
                {
                    if ( simpleDoublePropertyDefinitionDataReader.Read( ) )
                    {
                        destinationWriter.Write( true );
                        simpleDoublePropertyDefinitionDataReader.WriteTo( destinationWriter );
                    }
                    else
                    {
                        destinationWriter.Write( false );
                    }
                }
            }
        }

        public SimpleDoublePropertyDefinitionDataReader GetDoublePropertyDefinitionCollectionDataReader( )
        {
            const string sql = SimpleDoublePropertyDefinitionDataReader.BaseQuery; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleDoublePropertyDefinitionDataReader = new SimpleDoublePropertyDefinitionDataReader( _loggerFactory, sqlDataReader );
                return simpleDoublePropertyDefinitionDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public IList<DoublePropertyDefinitionObject> GetDoublePropertyDefinitionCollection( )
        {
            var result = new List<DoublePropertyDefinitionObject>( );
            var simpleDoublePropertyDefinitionDataReader = GetDoublePropertyDefinitionCollectionDataReader( );
            using ( simpleDoublePropertyDefinitionDataReader )
            {
                while ( simpleDoublePropertyDefinitionDataReader.Read( ) )
                {
                    var data = simpleDoublePropertyDefinitionDataReader.GetDataObject( );
                    result.Add( data );
                }
            }
            return result;
        }

        public void GetDoublePropertyDefinitionCollection( Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleDoublePropertyDefinitionDataReader = GetDoublePropertyDefinitionCollectionDataReader( );
                using ( simpleDoublePropertyDefinitionDataReader )
                {
                    simpleDoublePropertyDefinitionDataReader.WriteResultSetTo( destinationWriter );
                }
            }
        }

        public SimpleDoublePropertyDefinitionDataReader GetDoublePropertyDefinitionCollectionByElementTypeDataReader( Guid elementType )
        {
            const string sql = SimpleDoublePropertyDefinitionDataReader.BaseQuery + " WHERE " +
                    SimpleDoublePropertyDefinitionDataReader.ViewAliasName + ".[ElementType] = @elementType " +
                    " ORDER BY " + SimpleDoublePropertyDefinitionDataReader.ViewAliasName + ".[ElementType]," +SimpleDoublePropertyDefinitionDataReader.ViewAliasName + ".[Name]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var elementTypeParameter = sqlCommandParameters.AddReference( "@elementType", elementType );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleDoublePropertyDefinitionDataReader = new SimpleDoublePropertyDefinitionDataReader( _loggerFactory, sqlDataReader );
                return simpleDoublePropertyDefinitionDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<DoublePropertyDefinitionObject> GetDoublePropertyDefinitionCollectionByElementType( Guid elementType )
        {
            throw new NotImplementedException( );
        }
        public SimpleDoublePropertyDefinitionDataReader GetDoublePropertyDefinitionByElementTypeAndNameDataReader( Guid elementType, string name )
        {
            const string sql = SimpleDoublePropertyDefinitionDataReader.BaseQuery + " WHERE " +
                    SimpleDoublePropertyDefinitionDataReader.ViewAliasName + ".[ElementType] = @elementType AND " +
                    SimpleDoublePropertyDefinitionDataReader.ViewAliasName + ".[Name] = @name " +
                    " ORDER BY " + SimpleDoublePropertyDefinitionDataReader.ViewAliasName + ".[ElementType]," +SimpleDoublePropertyDefinitionDataReader.ViewAliasName + ".[Name]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var elementTypeParameter = sqlCommandParameters.AddReference( "@elementType", elementType );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@name", name, 127 );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleDoublePropertyDefinitionDataReader = new SimpleDoublePropertyDefinitionDataReader( _loggerFactory, sqlDataReader );
                return simpleDoublePropertyDefinitionDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public DoublePropertyDefinitionObject? GetDoublePropertyDefinitionByElementTypeAndName( Guid elementType, string name )
        {
            throw new NotImplementedException( );
        }
        // ---------------------------------------------------------------------
        // GuidPropertyDefinition queries
        // ---------------------------------------------------------------------
        public SimpleGuidPropertyDefinitionDataReader GetGuidPropertyDefinitionByIdDataReader( Guid id )
        {
            const string sql = SimpleGuidPropertyDefinitionDataReader.BaseQuery + "WHERE " + SimpleGuidPropertyDefinitionDataReader.ViewAliasName + ".[Id] = @id"; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                sqlCommandParameters.AddGuid( "@id", id );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleGuidPropertyDefinitionDataReader = new SimpleGuidPropertyDefinitionDataReader( _loggerFactory, sqlDataReader );
                return simpleGuidPropertyDefinitionDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public GuidPropertyDefinitionObject? GetGuidPropertyDefinitionById( Guid id )
        {
            var simpleGuidPropertyDefinitionDataReader = GetGuidPropertyDefinitionByIdDataReader( id );
            using ( simpleGuidPropertyDefinitionDataReader )
            {
                if ( simpleGuidPropertyDefinitionDataReader.Read( ) )
                {
                    var result = simpleGuidPropertyDefinitionDataReader.GetDataObject( );
                    return result;
                }
            }
            return null;
        }

        public void GetGuidPropertyDefinitionById( Guid id, Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleGuidPropertyDefinitionDataReader = GetGuidPropertyDefinitionByIdDataReader( id );
                using ( simpleGuidPropertyDefinitionDataReader )
                {
                    if ( simpleGuidPropertyDefinitionDataReader.Read( ) )
                    {
                        destinationWriter.Write( true );
                        simpleGuidPropertyDefinitionDataReader.WriteTo( destinationWriter );
                    }
                    else
                    {
                        destinationWriter.Write( false );
                    }
                }
            }
        }

        public SimpleGuidPropertyDefinitionDataReader GetGuidPropertyDefinitionCollectionDataReader( )
        {
            const string sql = SimpleGuidPropertyDefinitionDataReader.BaseQuery; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleGuidPropertyDefinitionDataReader = new SimpleGuidPropertyDefinitionDataReader( _loggerFactory, sqlDataReader );
                return simpleGuidPropertyDefinitionDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public IList<GuidPropertyDefinitionObject> GetGuidPropertyDefinitionCollection( )
        {
            var result = new List<GuidPropertyDefinitionObject>( );
            var simpleGuidPropertyDefinitionDataReader = GetGuidPropertyDefinitionCollectionDataReader( );
            using ( simpleGuidPropertyDefinitionDataReader )
            {
                while ( simpleGuidPropertyDefinitionDataReader.Read( ) )
                {
                    var data = simpleGuidPropertyDefinitionDataReader.GetDataObject( );
                    result.Add( data );
                }
            }
            return result;
        }

        public void GetGuidPropertyDefinitionCollection( Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleGuidPropertyDefinitionDataReader = GetGuidPropertyDefinitionCollectionDataReader( );
                using ( simpleGuidPropertyDefinitionDataReader )
                {
                    simpleGuidPropertyDefinitionDataReader.WriteResultSetTo( destinationWriter );
                }
            }
        }

        public SimpleGuidPropertyDefinitionDataReader GetGuidPropertyDefinitionCollectionByElementTypeDataReader( Guid elementType )
        {
            const string sql = SimpleGuidPropertyDefinitionDataReader.BaseQuery + " WHERE " +
                    SimpleGuidPropertyDefinitionDataReader.ViewAliasName + ".[ElementType] = @elementType " +
                    " ORDER BY " + SimpleGuidPropertyDefinitionDataReader.ViewAliasName + ".[ElementType]," +SimpleGuidPropertyDefinitionDataReader.ViewAliasName + ".[Name]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var elementTypeParameter = sqlCommandParameters.AddReference( "@elementType", elementType );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleGuidPropertyDefinitionDataReader = new SimpleGuidPropertyDefinitionDataReader( _loggerFactory, sqlDataReader );
                return simpleGuidPropertyDefinitionDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<GuidPropertyDefinitionObject> GetGuidPropertyDefinitionCollectionByElementType( Guid elementType )
        {
            throw new NotImplementedException( );
        }
        public SimpleGuidPropertyDefinitionDataReader GetGuidPropertyDefinitionByElementTypeAndNameDataReader( Guid elementType, string name )
        {
            const string sql = SimpleGuidPropertyDefinitionDataReader.BaseQuery + " WHERE " +
                    SimpleGuidPropertyDefinitionDataReader.ViewAliasName + ".[ElementType] = @elementType AND " +
                    SimpleGuidPropertyDefinitionDataReader.ViewAliasName + ".[Name] = @name " +
                    " ORDER BY " + SimpleGuidPropertyDefinitionDataReader.ViewAliasName + ".[ElementType]," +SimpleGuidPropertyDefinitionDataReader.ViewAliasName + ".[Name]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var elementTypeParameter = sqlCommandParameters.AddReference( "@elementType", elementType );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@name", name, 127 );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleGuidPropertyDefinitionDataReader = new SimpleGuidPropertyDefinitionDataReader( _loggerFactory, sqlDataReader );
                return simpleGuidPropertyDefinitionDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public GuidPropertyDefinitionObject? GetGuidPropertyDefinitionByElementTypeAndName( Guid elementType, string name )
        {
            throw new NotImplementedException( );
        }
        // ---------------------------------------------------------------------
        // Int16PropertyDefinition queries
        // ---------------------------------------------------------------------
        public SimpleInt16PropertyDefinitionDataReader GetInt16PropertyDefinitionByIdDataReader( Guid id )
        {
            const string sql = SimpleInt16PropertyDefinitionDataReader.BaseQuery + "WHERE " + SimpleInt16PropertyDefinitionDataReader.ViewAliasName + ".[Id] = @id"; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                sqlCommandParameters.AddGuid( "@id", id );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleInt16PropertyDefinitionDataReader = new SimpleInt16PropertyDefinitionDataReader( _loggerFactory, sqlDataReader );
                return simpleInt16PropertyDefinitionDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public Int16PropertyDefinitionObject? GetInt16PropertyDefinitionById( Guid id )
        {
            var simpleInt16PropertyDefinitionDataReader = GetInt16PropertyDefinitionByIdDataReader( id );
            using ( simpleInt16PropertyDefinitionDataReader )
            {
                if ( simpleInt16PropertyDefinitionDataReader.Read( ) )
                {
                    var result = simpleInt16PropertyDefinitionDataReader.GetDataObject( );
                    return result;
                }
            }
            return null;
        }

        public void GetInt16PropertyDefinitionById( Guid id, Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleInt16PropertyDefinitionDataReader = GetInt16PropertyDefinitionByIdDataReader( id );
                using ( simpleInt16PropertyDefinitionDataReader )
                {
                    if ( simpleInt16PropertyDefinitionDataReader.Read( ) )
                    {
                        destinationWriter.Write( true );
                        simpleInt16PropertyDefinitionDataReader.WriteTo( destinationWriter );
                    }
                    else
                    {
                        destinationWriter.Write( false );
                    }
                }
            }
        }

        public SimpleInt16PropertyDefinitionDataReader GetInt16PropertyDefinitionCollectionDataReader( )
        {
            const string sql = SimpleInt16PropertyDefinitionDataReader.BaseQuery; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleInt16PropertyDefinitionDataReader = new SimpleInt16PropertyDefinitionDataReader( _loggerFactory, sqlDataReader );
                return simpleInt16PropertyDefinitionDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public IList<Int16PropertyDefinitionObject> GetInt16PropertyDefinitionCollection( )
        {
            var result = new List<Int16PropertyDefinitionObject>( );
            var simpleInt16PropertyDefinitionDataReader = GetInt16PropertyDefinitionCollectionDataReader( );
            using ( simpleInt16PropertyDefinitionDataReader )
            {
                while ( simpleInt16PropertyDefinitionDataReader.Read( ) )
                {
                    var data = simpleInt16PropertyDefinitionDataReader.GetDataObject( );
                    result.Add( data );
                }
            }
            return result;
        }

        public void GetInt16PropertyDefinitionCollection( Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleInt16PropertyDefinitionDataReader = GetInt16PropertyDefinitionCollectionDataReader( );
                using ( simpleInt16PropertyDefinitionDataReader )
                {
                    simpleInt16PropertyDefinitionDataReader.WriteResultSetTo( destinationWriter );
                }
            }
        }

        public SimpleInt16PropertyDefinitionDataReader GetInt16PropertyDefinitionCollectionByElementTypeDataReader( Guid elementType )
        {
            const string sql = SimpleInt16PropertyDefinitionDataReader.BaseQuery + " WHERE " +
                    SimpleInt16PropertyDefinitionDataReader.ViewAliasName + ".[ElementType] = @elementType " +
                    " ORDER BY " + SimpleInt16PropertyDefinitionDataReader.ViewAliasName + ".[ElementType]," +SimpleInt16PropertyDefinitionDataReader.ViewAliasName + ".[Name]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var elementTypeParameter = sqlCommandParameters.AddReference( "@elementType", elementType );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleInt16PropertyDefinitionDataReader = new SimpleInt16PropertyDefinitionDataReader( _loggerFactory, sqlDataReader );
                return simpleInt16PropertyDefinitionDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<Int16PropertyDefinitionObject> GetInt16PropertyDefinitionCollectionByElementType( Guid elementType )
        {
            throw new NotImplementedException( );
        }
        public SimpleInt16PropertyDefinitionDataReader GetInt16PropertyDefinitionByElementTypeAndNameDataReader( Guid elementType, string name )
        {
            const string sql = SimpleInt16PropertyDefinitionDataReader.BaseQuery + " WHERE " +
                    SimpleInt16PropertyDefinitionDataReader.ViewAliasName + ".[ElementType] = @elementType AND " +
                    SimpleInt16PropertyDefinitionDataReader.ViewAliasName + ".[Name] = @name " +
                    " ORDER BY " + SimpleInt16PropertyDefinitionDataReader.ViewAliasName + ".[ElementType]," +SimpleInt16PropertyDefinitionDataReader.ViewAliasName + ".[Name]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var elementTypeParameter = sqlCommandParameters.AddReference( "@elementType", elementType );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@name", name, 127 );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleInt16PropertyDefinitionDataReader = new SimpleInt16PropertyDefinitionDataReader( _loggerFactory, sqlDataReader );
                return simpleInt16PropertyDefinitionDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public Int16PropertyDefinitionObject? GetInt16PropertyDefinitionByElementTypeAndName( Guid elementType, string name )
        {
            throw new NotImplementedException( );
        }
        // ---------------------------------------------------------------------
        // Int32PropertyDefinition queries
        // ---------------------------------------------------------------------
        public SimpleInt32PropertyDefinitionDataReader GetInt32PropertyDefinitionByIdDataReader( Guid id )
        {
            const string sql = SimpleInt32PropertyDefinitionDataReader.BaseQuery + "WHERE " + SimpleInt32PropertyDefinitionDataReader.ViewAliasName + ".[Id] = @id"; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                sqlCommandParameters.AddGuid( "@id", id );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleInt32PropertyDefinitionDataReader = new SimpleInt32PropertyDefinitionDataReader( _loggerFactory, sqlDataReader );
                return simpleInt32PropertyDefinitionDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public Int32PropertyDefinitionObject? GetInt32PropertyDefinitionById( Guid id )
        {
            var simpleInt32PropertyDefinitionDataReader = GetInt32PropertyDefinitionByIdDataReader( id );
            using ( simpleInt32PropertyDefinitionDataReader )
            {
                if ( simpleInt32PropertyDefinitionDataReader.Read( ) )
                {
                    var result = simpleInt32PropertyDefinitionDataReader.GetDataObject( );
                    return result;
                }
            }
            return null;
        }

        public void GetInt32PropertyDefinitionById( Guid id, Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleInt32PropertyDefinitionDataReader = GetInt32PropertyDefinitionByIdDataReader( id );
                using ( simpleInt32PropertyDefinitionDataReader )
                {
                    if ( simpleInt32PropertyDefinitionDataReader.Read( ) )
                    {
                        destinationWriter.Write( true );
                        simpleInt32PropertyDefinitionDataReader.WriteTo( destinationWriter );
                    }
                    else
                    {
                        destinationWriter.Write( false );
                    }
                }
            }
        }

        public SimpleInt32PropertyDefinitionDataReader GetInt32PropertyDefinitionCollectionDataReader( )
        {
            const string sql = SimpleInt32PropertyDefinitionDataReader.BaseQuery; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleInt32PropertyDefinitionDataReader = new SimpleInt32PropertyDefinitionDataReader( _loggerFactory, sqlDataReader );
                return simpleInt32PropertyDefinitionDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public IList<Int32PropertyDefinitionObject> GetInt32PropertyDefinitionCollection( )
        {
            var result = new List<Int32PropertyDefinitionObject>( );
            var simpleInt32PropertyDefinitionDataReader = GetInt32PropertyDefinitionCollectionDataReader( );
            using ( simpleInt32PropertyDefinitionDataReader )
            {
                while ( simpleInt32PropertyDefinitionDataReader.Read( ) )
                {
                    var data = simpleInt32PropertyDefinitionDataReader.GetDataObject( );
                    result.Add( data );
                }
            }
            return result;
        }

        public void GetInt32PropertyDefinitionCollection( Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleInt32PropertyDefinitionDataReader = GetInt32PropertyDefinitionCollectionDataReader( );
                using ( simpleInt32PropertyDefinitionDataReader )
                {
                    simpleInt32PropertyDefinitionDataReader.WriteResultSetTo( destinationWriter );
                }
            }
        }

        public SimpleInt32PropertyDefinitionDataReader GetInt32PropertyDefinitionCollectionByElementTypeDataReader( Guid elementType )
        {
            const string sql = SimpleInt32PropertyDefinitionDataReader.BaseQuery + " WHERE " +
                    SimpleInt32PropertyDefinitionDataReader.ViewAliasName + ".[ElementType] = @elementType " +
                    " ORDER BY " + SimpleInt32PropertyDefinitionDataReader.ViewAliasName + ".[ElementType]," +SimpleInt32PropertyDefinitionDataReader.ViewAliasName + ".[Name]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var elementTypeParameter = sqlCommandParameters.AddReference( "@elementType", elementType );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleInt32PropertyDefinitionDataReader = new SimpleInt32PropertyDefinitionDataReader( _loggerFactory, sqlDataReader );
                return simpleInt32PropertyDefinitionDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<Int32PropertyDefinitionObject> GetInt32PropertyDefinitionCollectionByElementType( Guid elementType )
        {
            throw new NotImplementedException( );
        }
        public SimpleInt32PropertyDefinitionDataReader GetInt32PropertyDefinitionByElementTypeAndNameDataReader( Guid elementType, string name )
        {
            const string sql = SimpleInt32PropertyDefinitionDataReader.BaseQuery + " WHERE " +
                    SimpleInt32PropertyDefinitionDataReader.ViewAliasName + ".[ElementType] = @elementType AND " +
                    SimpleInt32PropertyDefinitionDataReader.ViewAliasName + ".[Name] = @name " +
                    " ORDER BY " + SimpleInt32PropertyDefinitionDataReader.ViewAliasName + ".[ElementType]," +SimpleInt32PropertyDefinitionDataReader.ViewAliasName + ".[Name]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var elementTypeParameter = sqlCommandParameters.AddReference( "@elementType", elementType );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@name", name, 127 );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleInt32PropertyDefinitionDataReader = new SimpleInt32PropertyDefinitionDataReader( _loggerFactory, sqlDataReader );
                return simpleInt32PropertyDefinitionDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public Int32PropertyDefinitionObject? GetInt32PropertyDefinitionByElementTypeAndName( Guid elementType, string name )
        {
            throw new NotImplementedException( );
        }
        // ---------------------------------------------------------------------
        // Int64PropertyDefinition queries
        // ---------------------------------------------------------------------
        public SimpleInt64PropertyDefinitionDataReader GetInt64PropertyDefinitionByIdDataReader( Guid id )
        {
            const string sql = SimpleInt64PropertyDefinitionDataReader.BaseQuery + "WHERE " + SimpleInt64PropertyDefinitionDataReader.ViewAliasName + ".[Id] = @id"; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                sqlCommandParameters.AddGuid( "@id", id );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleInt64PropertyDefinitionDataReader = new SimpleInt64PropertyDefinitionDataReader( _loggerFactory, sqlDataReader );
                return simpleInt64PropertyDefinitionDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public Int64PropertyDefinitionObject? GetInt64PropertyDefinitionById( Guid id )
        {
            var simpleInt64PropertyDefinitionDataReader = GetInt64PropertyDefinitionByIdDataReader( id );
            using ( simpleInt64PropertyDefinitionDataReader )
            {
                if ( simpleInt64PropertyDefinitionDataReader.Read( ) )
                {
                    var result = simpleInt64PropertyDefinitionDataReader.GetDataObject( );
                    return result;
                }
            }
            return null;
        }

        public void GetInt64PropertyDefinitionById( Guid id, Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleInt64PropertyDefinitionDataReader = GetInt64PropertyDefinitionByIdDataReader( id );
                using ( simpleInt64PropertyDefinitionDataReader )
                {
                    if ( simpleInt64PropertyDefinitionDataReader.Read( ) )
                    {
                        destinationWriter.Write( true );
                        simpleInt64PropertyDefinitionDataReader.WriteTo( destinationWriter );
                    }
                    else
                    {
                        destinationWriter.Write( false );
                    }
                }
            }
        }

        public SimpleInt64PropertyDefinitionDataReader GetInt64PropertyDefinitionCollectionDataReader( )
        {
            const string sql = SimpleInt64PropertyDefinitionDataReader.BaseQuery; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleInt64PropertyDefinitionDataReader = new SimpleInt64PropertyDefinitionDataReader( _loggerFactory, sqlDataReader );
                return simpleInt64PropertyDefinitionDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public IList<Int64PropertyDefinitionObject> GetInt64PropertyDefinitionCollection( )
        {
            var result = new List<Int64PropertyDefinitionObject>( );
            var simpleInt64PropertyDefinitionDataReader = GetInt64PropertyDefinitionCollectionDataReader( );
            using ( simpleInt64PropertyDefinitionDataReader )
            {
                while ( simpleInt64PropertyDefinitionDataReader.Read( ) )
                {
                    var data = simpleInt64PropertyDefinitionDataReader.GetDataObject( );
                    result.Add( data );
                }
            }
            return result;
        }

        public void GetInt64PropertyDefinitionCollection( Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleInt64PropertyDefinitionDataReader = GetInt64PropertyDefinitionCollectionDataReader( );
                using ( simpleInt64PropertyDefinitionDataReader )
                {
                    simpleInt64PropertyDefinitionDataReader.WriteResultSetTo( destinationWriter );
                }
            }
        }

        public SimpleInt64PropertyDefinitionDataReader GetInt64PropertyDefinitionCollectionByElementTypeDataReader( Guid elementType )
        {
            const string sql = SimpleInt64PropertyDefinitionDataReader.BaseQuery + " WHERE " +
                    SimpleInt64PropertyDefinitionDataReader.ViewAliasName + ".[ElementType] = @elementType " +
                    " ORDER BY " + SimpleInt64PropertyDefinitionDataReader.ViewAliasName + ".[ElementType]," +SimpleInt64PropertyDefinitionDataReader.ViewAliasName + ".[Name]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var elementTypeParameter = sqlCommandParameters.AddReference( "@elementType", elementType );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleInt64PropertyDefinitionDataReader = new SimpleInt64PropertyDefinitionDataReader( _loggerFactory, sqlDataReader );
                return simpleInt64PropertyDefinitionDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<Int64PropertyDefinitionObject> GetInt64PropertyDefinitionCollectionByElementType( Guid elementType )
        {
            throw new NotImplementedException( );
        }
        public SimpleInt64PropertyDefinitionDataReader GetInt64PropertyDefinitionByElementTypeAndNameDataReader( Guid elementType, string name )
        {
            const string sql = SimpleInt64PropertyDefinitionDataReader.BaseQuery + " WHERE " +
                    SimpleInt64PropertyDefinitionDataReader.ViewAliasName + ".[ElementType] = @elementType AND " +
                    SimpleInt64PropertyDefinitionDataReader.ViewAliasName + ".[Name] = @name " +
                    " ORDER BY " + SimpleInt64PropertyDefinitionDataReader.ViewAliasName + ".[ElementType]," +SimpleInt64PropertyDefinitionDataReader.ViewAliasName + ".[Name]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var elementTypeParameter = sqlCommandParameters.AddReference( "@elementType", elementType );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@name", name, 127 );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleInt64PropertyDefinitionDataReader = new SimpleInt64PropertyDefinitionDataReader( _loggerFactory, sqlDataReader );
                return simpleInt64PropertyDefinitionDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public Int64PropertyDefinitionObject? GetInt64PropertyDefinitionByElementTypeAndName( Guid elementType, string name )
        {
            throw new NotImplementedException( );
        }
        // ---------------------------------------------------------------------
        // ReferencePropertyDefinition queries
        // ---------------------------------------------------------------------
        public SimpleReferencePropertyDefinitionDataReader GetReferencePropertyDefinitionByIdDataReader( Guid id )
        {
            const string sql = SimpleReferencePropertyDefinitionDataReader.BaseQuery + "WHERE " + SimpleReferencePropertyDefinitionDataReader.ViewAliasName + ".[Id] = @id"; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                sqlCommandParameters.AddGuid( "@id", id );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleReferencePropertyDefinitionDataReader = new SimpleReferencePropertyDefinitionDataReader( _loggerFactory, sqlDataReader );
                return simpleReferencePropertyDefinitionDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public ReferencePropertyDefinitionObject? GetReferencePropertyDefinitionById( Guid id )
        {
            var simpleReferencePropertyDefinitionDataReader = GetReferencePropertyDefinitionByIdDataReader( id );
            using ( simpleReferencePropertyDefinitionDataReader )
            {
                if ( simpleReferencePropertyDefinitionDataReader.Read( ) )
                {
                    var result = simpleReferencePropertyDefinitionDataReader.GetDataObject( );
                    return result;
                }
            }
            return null;
        }

        public void GetReferencePropertyDefinitionById( Guid id, Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleReferencePropertyDefinitionDataReader = GetReferencePropertyDefinitionByIdDataReader( id );
                using ( simpleReferencePropertyDefinitionDataReader )
                {
                    if ( simpleReferencePropertyDefinitionDataReader.Read( ) )
                    {
                        destinationWriter.Write( true );
                        simpleReferencePropertyDefinitionDataReader.WriteTo( destinationWriter );
                    }
                    else
                    {
                        destinationWriter.Write( false );
                    }
                }
            }
        }

        public SimpleReferencePropertyDefinitionDataReader GetReferencePropertyDefinitionCollectionDataReader( )
        {
            const string sql = SimpleReferencePropertyDefinitionDataReader.BaseQuery; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleReferencePropertyDefinitionDataReader = new SimpleReferencePropertyDefinitionDataReader( _loggerFactory, sqlDataReader );
                return simpleReferencePropertyDefinitionDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public IList<ReferencePropertyDefinitionObject> GetReferencePropertyDefinitionCollection( )
        {
            var result = new List<ReferencePropertyDefinitionObject>( );
            var simpleReferencePropertyDefinitionDataReader = GetReferencePropertyDefinitionCollectionDataReader( );
            using ( simpleReferencePropertyDefinitionDataReader )
            {
                while ( simpleReferencePropertyDefinitionDataReader.Read( ) )
                {
                    var data = simpleReferencePropertyDefinitionDataReader.GetDataObject( );
                    result.Add( data );
                }
            }
            return result;
        }

        public void GetReferencePropertyDefinitionCollection( Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleReferencePropertyDefinitionDataReader = GetReferencePropertyDefinitionCollectionDataReader( );
                using ( simpleReferencePropertyDefinitionDataReader )
                {
                    simpleReferencePropertyDefinitionDataReader.WriteResultSetTo( destinationWriter );
                }
            }
        }

        public SimpleReferencePropertyDefinitionDataReader GetReferencePropertyDefinitionCollectionByElementTypeDataReader( Guid elementType )
        {
            const string sql = SimpleReferencePropertyDefinitionDataReader.BaseQuery + " WHERE " +
                    SimpleReferencePropertyDefinitionDataReader.ViewAliasName + ".[ElementType] = @elementType " +
                    " ORDER BY " + SimpleReferencePropertyDefinitionDataReader.ViewAliasName + ".[ElementType]," +SimpleReferencePropertyDefinitionDataReader.ViewAliasName + ".[Name]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var elementTypeParameter = sqlCommandParameters.AddReference( "@elementType", elementType );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleReferencePropertyDefinitionDataReader = new SimpleReferencePropertyDefinitionDataReader( _loggerFactory, sqlDataReader );
                return simpleReferencePropertyDefinitionDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<ReferencePropertyDefinitionObject> GetReferencePropertyDefinitionCollectionByElementType( Guid elementType )
        {
            throw new NotImplementedException( );
        }
        public SimpleReferencePropertyDefinitionDataReader GetReferencePropertyDefinitionByElementTypeAndNameDataReader( Guid elementType, string name )
        {
            const string sql = SimpleReferencePropertyDefinitionDataReader.BaseQuery + " WHERE " +
                    SimpleReferencePropertyDefinitionDataReader.ViewAliasName + ".[ElementType] = @elementType AND " +
                    SimpleReferencePropertyDefinitionDataReader.ViewAliasName + ".[Name] = @name " +
                    " ORDER BY " + SimpleReferencePropertyDefinitionDataReader.ViewAliasName + ".[ElementType]," +SimpleReferencePropertyDefinitionDataReader.ViewAliasName + ".[Name]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var elementTypeParameter = sqlCommandParameters.AddReference( "@elementType", elementType );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@name", name, 127 );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleReferencePropertyDefinitionDataReader = new SimpleReferencePropertyDefinitionDataReader( _loggerFactory, sqlDataReader );
                return simpleReferencePropertyDefinitionDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public ReferencePropertyDefinitionObject? GetReferencePropertyDefinitionByElementTypeAndName( Guid elementType, string name )
        {
            throw new NotImplementedException( );
        }
        public SimpleReferencePropertyDefinitionDataReader GetReferencePropertyDefinitionCollectionByDefaultValueDataReader( Guid defaultValue )
        {
            const string sql = SimpleReferencePropertyDefinitionDataReader.BaseQuery + " WHERE " +
                    SimpleReferencePropertyDefinitionDataReader.ViewAliasName + ".[DefaultValue] = @defaultValue " +
                    " ORDER BY " + SimpleReferencePropertyDefinitionDataReader.ViewAliasName + ".[DefaultValue]," +SimpleReferencePropertyDefinitionDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var defaultValueParameter = sqlCommandParameters.AddReference( "@defaultValue", defaultValue );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleReferencePropertyDefinitionDataReader = new SimpleReferencePropertyDefinitionDataReader( _loggerFactory, sqlDataReader );
                return simpleReferencePropertyDefinitionDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<ReferencePropertyDefinitionObject> GetReferencePropertyDefinitionCollectionByDefaultValue( Guid defaultValue )
        {
            throw new NotImplementedException( );
        }
        public SimpleReferencePropertyDefinitionDataReader GetReferencePropertyDefinitionCollectionByReferencedElementTypeDataReader( Guid referencedElementType )
        {
            const string sql = SimpleReferencePropertyDefinitionDataReader.BaseQuery + " WHERE " +
                    SimpleReferencePropertyDefinitionDataReader.ViewAliasName + ".[ReferencedElementType] = @referencedElementType " +
                    " ORDER BY " + SimpleReferencePropertyDefinitionDataReader.ViewAliasName + ".[ReferencedElementType]," +SimpleReferencePropertyDefinitionDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var referencedElementTypeParameter = sqlCommandParameters.AddReference( "@referencedElementType", referencedElementType );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleReferencePropertyDefinitionDataReader = new SimpleReferencePropertyDefinitionDataReader( _loggerFactory, sqlDataReader );
                return simpleReferencePropertyDefinitionDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<ReferencePropertyDefinitionObject> GetReferencePropertyDefinitionCollectionByReferencedElementType( Guid referencedElementType )
        {
            throw new NotImplementedException( );
        }
        // ---------------------------------------------------------------------
        // SBytePropertyDefinition queries
        // ---------------------------------------------------------------------
        public SimpleSBytePropertyDefinitionDataReader GetSBytePropertyDefinitionByIdDataReader( Guid id )
        {
            const string sql = SimpleSBytePropertyDefinitionDataReader.BaseQuery + "WHERE " + SimpleSBytePropertyDefinitionDataReader.ViewAliasName + ".[Id] = @id"; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                sqlCommandParameters.AddGuid( "@id", id );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleSBytePropertyDefinitionDataReader = new SimpleSBytePropertyDefinitionDataReader( _loggerFactory, sqlDataReader );
                return simpleSBytePropertyDefinitionDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public SBytePropertyDefinitionObject? GetSBytePropertyDefinitionById( Guid id )
        {
            var simpleSBytePropertyDefinitionDataReader = GetSBytePropertyDefinitionByIdDataReader( id );
            using ( simpleSBytePropertyDefinitionDataReader )
            {
                if ( simpleSBytePropertyDefinitionDataReader.Read( ) )
                {
                    var result = simpleSBytePropertyDefinitionDataReader.GetDataObject( );
                    return result;
                }
            }
            return null;
        }

        public void GetSBytePropertyDefinitionById( Guid id, Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleSBytePropertyDefinitionDataReader = GetSBytePropertyDefinitionByIdDataReader( id );
                using ( simpleSBytePropertyDefinitionDataReader )
                {
                    if ( simpleSBytePropertyDefinitionDataReader.Read( ) )
                    {
                        destinationWriter.Write( true );
                        simpleSBytePropertyDefinitionDataReader.WriteTo( destinationWriter );
                    }
                    else
                    {
                        destinationWriter.Write( false );
                    }
                }
            }
        }

        public SimpleSBytePropertyDefinitionDataReader GetSBytePropertyDefinitionCollectionDataReader( )
        {
            const string sql = SimpleSBytePropertyDefinitionDataReader.BaseQuery; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleSBytePropertyDefinitionDataReader = new SimpleSBytePropertyDefinitionDataReader( _loggerFactory, sqlDataReader );
                return simpleSBytePropertyDefinitionDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public IList<SBytePropertyDefinitionObject> GetSBytePropertyDefinitionCollection( )
        {
            var result = new List<SBytePropertyDefinitionObject>( );
            var simpleSBytePropertyDefinitionDataReader = GetSBytePropertyDefinitionCollectionDataReader( );
            using ( simpleSBytePropertyDefinitionDataReader )
            {
                while ( simpleSBytePropertyDefinitionDataReader.Read( ) )
                {
                    var data = simpleSBytePropertyDefinitionDataReader.GetDataObject( );
                    result.Add( data );
                }
            }
            return result;
        }

        public void GetSBytePropertyDefinitionCollection( Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleSBytePropertyDefinitionDataReader = GetSBytePropertyDefinitionCollectionDataReader( );
                using ( simpleSBytePropertyDefinitionDataReader )
                {
                    simpleSBytePropertyDefinitionDataReader.WriteResultSetTo( destinationWriter );
                }
            }
        }

        public SimpleSBytePropertyDefinitionDataReader GetSBytePropertyDefinitionCollectionByElementTypeDataReader( Guid elementType )
        {
            const string sql = SimpleSBytePropertyDefinitionDataReader.BaseQuery + " WHERE " +
                    SimpleSBytePropertyDefinitionDataReader.ViewAliasName + ".[ElementType] = @elementType " +
                    " ORDER BY " + SimpleSBytePropertyDefinitionDataReader.ViewAliasName + ".[ElementType]," +SimpleSBytePropertyDefinitionDataReader.ViewAliasName + ".[Name]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var elementTypeParameter = sqlCommandParameters.AddReference( "@elementType", elementType );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleSBytePropertyDefinitionDataReader = new SimpleSBytePropertyDefinitionDataReader( _loggerFactory, sqlDataReader );
                return simpleSBytePropertyDefinitionDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<SBytePropertyDefinitionObject> GetSBytePropertyDefinitionCollectionByElementType( Guid elementType )
        {
            throw new NotImplementedException( );
        }
        public SimpleSBytePropertyDefinitionDataReader GetSBytePropertyDefinitionByElementTypeAndNameDataReader( Guid elementType, string name )
        {
            const string sql = SimpleSBytePropertyDefinitionDataReader.BaseQuery + " WHERE " +
                    SimpleSBytePropertyDefinitionDataReader.ViewAliasName + ".[ElementType] = @elementType AND " +
                    SimpleSBytePropertyDefinitionDataReader.ViewAliasName + ".[Name] = @name " +
                    " ORDER BY " + SimpleSBytePropertyDefinitionDataReader.ViewAliasName + ".[ElementType]," +SimpleSBytePropertyDefinitionDataReader.ViewAliasName + ".[Name]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var elementTypeParameter = sqlCommandParameters.AddReference( "@elementType", elementType );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@name", name, 127 );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleSBytePropertyDefinitionDataReader = new SimpleSBytePropertyDefinitionDataReader( _loggerFactory, sqlDataReader );
                return simpleSBytePropertyDefinitionDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public SBytePropertyDefinitionObject? GetSBytePropertyDefinitionByElementTypeAndName( Guid elementType, string name )
        {
            throw new NotImplementedException( );
        }
        // ---------------------------------------------------------------------
        // SinglePropertyDefinition queries
        // ---------------------------------------------------------------------
        public SimpleSinglePropertyDefinitionDataReader GetSinglePropertyDefinitionByIdDataReader( Guid id )
        {
            const string sql = SimpleSinglePropertyDefinitionDataReader.BaseQuery + "WHERE " + SimpleSinglePropertyDefinitionDataReader.ViewAliasName + ".[Id] = @id"; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                sqlCommandParameters.AddGuid( "@id", id );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleSinglePropertyDefinitionDataReader = new SimpleSinglePropertyDefinitionDataReader( _loggerFactory, sqlDataReader );
                return simpleSinglePropertyDefinitionDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public SinglePropertyDefinitionObject? GetSinglePropertyDefinitionById( Guid id )
        {
            var simpleSinglePropertyDefinitionDataReader = GetSinglePropertyDefinitionByIdDataReader( id );
            using ( simpleSinglePropertyDefinitionDataReader )
            {
                if ( simpleSinglePropertyDefinitionDataReader.Read( ) )
                {
                    var result = simpleSinglePropertyDefinitionDataReader.GetDataObject( );
                    return result;
                }
            }
            return null;
        }

        public void GetSinglePropertyDefinitionById( Guid id, Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleSinglePropertyDefinitionDataReader = GetSinglePropertyDefinitionByIdDataReader( id );
                using ( simpleSinglePropertyDefinitionDataReader )
                {
                    if ( simpleSinglePropertyDefinitionDataReader.Read( ) )
                    {
                        destinationWriter.Write( true );
                        simpleSinglePropertyDefinitionDataReader.WriteTo( destinationWriter );
                    }
                    else
                    {
                        destinationWriter.Write( false );
                    }
                }
            }
        }

        public SimpleSinglePropertyDefinitionDataReader GetSinglePropertyDefinitionCollectionDataReader( )
        {
            const string sql = SimpleSinglePropertyDefinitionDataReader.BaseQuery; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleSinglePropertyDefinitionDataReader = new SimpleSinglePropertyDefinitionDataReader( _loggerFactory, sqlDataReader );
                return simpleSinglePropertyDefinitionDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public IList<SinglePropertyDefinitionObject> GetSinglePropertyDefinitionCollection( )
        {
            var result = new List<SinglePropertyDefinitionObject>( );
            var simpleSinglePropertyDefinitionDataReader = GetSinglePropertyDefinitionCollectionDataReader( );
            using ( simpleSinglePropertyDefinitionDataReader )
            {
                while ( simpleSinglePropertyDefinitionDataReader.Read( ) )
                {
                    var data = simpleSinglePropertyDefinitionDataReader.GetDataObject( );
                    result.Add( data );
                }
            }
            return result;
        }

        public void GetSinglePropertyDefinitionCollection( Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleSinglePropertyDefinitionDataReader = GetSinglePropertyDefinitionCollectionDataReader( );
                using ( simpleSinglePropertyDefinitionDataReader )
                {
                    simpleSinglePropertyDefinitionDataReader.WriteResultSetTo( destinationWriter );
                }
            }
        }

        public SimpleSinglePropertyDefinitionDataReader GetSinglePropertyDefinitionCollectionByElementTypeDataReader( Guid elementType )
        {
            const string sql = SimpleSinglePropertyDefinitionDataReader.BaseQuery + " WHERE " +
                    SimpleSinglePropertyDefinitionDataReader.ViewAliasName + ".[ElementType] = @elementType " +
                    " ORDER BY " + SimpleSinglePropertyDefinitionDataReader.ViewAliasName + ".[ElementType]," +SimpleSinglePropertyDefinitionDataReader.ViewAliasName + ".[Name]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var elementTypeParameter = sqlCommandParameters.AddReference( "@elementType", elementType );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleSinglePropertyDefinitionDataReader = new SimpleSinglePropertyDefinitionDataReader( _loggerFactory, sqlDataReader );
                return simpleSinglePropertyDefinitionDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<SinglePropertyDefinitionObject> GetSinglePropertyDefinitionCollectionByElementType( Guid elementType )
        {
            throw new NotImplementedException( );
        }
        public SimpleSinglePropertyDefinitionDataReader GetSinglePropertyDefinitionByElementTypeAndNameDataReader( Guid elementType, string name )
        {
            const string sql = SimpleSinglePropertyDefinitionDataReader.BaseQuery + " WHERE " +
                    SimpleSinglePropertyDefinitionDataReader.ViewAliasName + ".[ElementType] = @elementType AND " +
                    SimpleSinglePropertyDefinitionDataReader.ViewAliasName + ".[Name] = @name " +
                    " ORDER BY " + SimpleSinglePropertyDefinitionDataReader.ViewAliasName + ".[ElementType]," +SimpleSinglePropertyDefinitionDataReader.ViewAliasName + ".[Name]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var elementTypeParameter = sqlCommandParameters.AddReference( "@elementType", elementType );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@name", name, 127 );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleSinglePropertyDefinitionDataReader = new SimpleSinglePropertyDefinitionDataReader( _loggerFactory, sqlDataReader );
                return simpleSinglePropertyDefinitionDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public SinglePropertyDefinitionObject? GetSinglePropertyDefinitionByElementTypeAndName( Guid elementType, string name )
        {
            throw new NotImplementedException( );
        }
        // ---------------------------------------------------------------------
        // StringPropertyDefinition queries
        // ---------------------------------------------------------------------
        public SimpleStringPropertyDefinitionDataReader GetStringPropertyDefinitionByIdDataReader( Guid id )
        {
            const string sql = SimpleStringPropertyDefinitionDataReader.BaseQuery + "WHERE " + SimpleStringPropertyDefinitionDataReader.ViewAliasName + ".[Id] = @id"; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                sqlCommandParameters.AddGuid( "@id", id );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleStringPropertyDefinitionDataReader = new SimpleStringPropertyDefinitionDataReader( _loggerFactory, sqlDataReader );
                return simpleStringPropertyDefinitionDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public StringPropertyDefinitionObject? GetStringPropertyDefinitionById( Guid id )
        {
            var simpleStringPropertyDefinitionDataReader = GetStringPropertyDefinitionByIdDataReader( id );
            using ( simpleStringPropertyDefinitionDataReader )
            {
                if ( simpleStringPropertyDefinitionDataReader.Read( ) )
                {
                    var result = simpleStringPropertyDefinitionDataReader.GetDataObject( );
                    return result;
                }
            }
            return null;
        }

        public void GetStringPropertyDefinitionById( Guid id, Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleStringPropertyDefinitionDataReader = GetStringPropertyDefinitionByIdDataReader( id );
                using ( simpleStringPropertyDefinitionDataReader )
                {
                    if ( simpleStringPropertyDefinitionDataReader.Read( ) )
                    {
                        destinationWriter.Write( true );
                        simpleStringPropertyDefinitionDataReader.WriteTo( destinationWriter );
                    }
                    else
                    {
                        destinationWriter.Write( false );
                    }
                }
            }
        }

        public SimpleStringPropertyDefinitionDataReader GetStringPropertyDefinitionCollectionDataReader( )
        {
            const string sql = SimpleStringPropertyDefinitionDataReader.BaseQuery; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleStringPropertyDefinitionDataReader = new SimpleStringPropertyDefinitionDataReader( _loggerFactory, sqlDataReader );
                return simpleStringPropertyDefinitionDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public IList<StringPropertyDefinitionObject> GetStringPropertyDefinitionCollection( )
        {
            var result = new List<StringPropertyDefinitionObject>( );
            var simpleStringPropertyDefinitionDataReader = GetStringPropertyDefinitionCollectionDataReader( );
            using ( simpleStringPropertyDefinitionDataReader )
            {
                while ( simpleStringPropertyDefinitionDataReader.Read( ) )
                {
                    var data = simpleStringPropertyDefinitionDataReader.GetDataObject( );
                    result.Add( data );
                }
            }
            return result;
        }

        public void GetStringPropertyDefinitionCollection( Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleStringPropertyDefinitionDataReader = GetStringPropertyDefinitionCollectionDataReader( );
                using ( simpleStringPropertyDefinitionDataReader )
                {
                    simpleStringPropertyDefinitionDataReader.WriteResultSetTo( destinationWriter );
                }
            }
        }

        public SimpleStringPropertyDefinitionDataReader GetStringPropertyDefinitionCollectionByElementTypeDataReader( Guid elementType )
        {
            const string sql = SimpleStringPropertyDefinitionDataReader.BaseQuery + " WHERE " +
                    SimpleStringPropertyDefinitionDataReader.ViewAliasName + ".[ElementType] = @elementType " +
                    " ORDER BY " + SimpleStringPropertyDefinitionDataReader.ViewAliasName + ".[ElementType]," +SimpleStringPropertyDefinitionDataReader.ViewAliasName + ".[Name]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var elementTypeParameter = sqlCommandParameters.AddReference( "@elementType", elementType );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleStringPropertyDefinitionDataReader = new SimpleStringPropertyDefinitionDataReader( _loggerFactory, sqlDataReader );
                return simpleStringPropertyDefinitionDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<StringPropertyDefinitionObject> GetStringPropertyDefinitionCollectionByElementType( Guid elementType )
        {
            throw new NotImplementedException( );
        }
        public SimpleStringPropertyDefinitionDataReader GetStringPropertyDefinitionByElementTypeAndNameDataReader( Guid elementType, string name )
        {
            const string sql = SimpleStringPropertyDefinitionDataReader.BaseQuery + " WHERE " +
                    SimpleStringPropertyDefinitionDataReader.ViewAliasName + ".[ElementType] = @elementType AND " +
                    SimpleStringPropertyDefinitionDataReader.ViewAliasName + ".[Name] = @name " +
                    " ORDER BY " + SimpleStringPropertyDefinitionDataReader.ViewAliasName + ".[ElementType]," +SimpleStringPropertyDefinitionDataReader.ViewAliasName + ".[Name]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var elementTypeParameter = sqlCommandParameters.AddReference( "@elementType", elementType );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@name", name, 127 );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleStringPropertyDefinitionDataReader = new SimpleStringPropertyDefinitionDataReader( _loggerFactory, sqlDataReader );
                return simpleStringPropertyDefinitionDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public StringPropertyDefinitionObject? GetStringPropertyDefinitionByElementTypeAndName( Guid elementType, string name )
        {
            throw new NotImplementedException( );
        }
        // ---------------------------------------------------------------------
        // TimeseriesPropertyDefinition queries
        // ---------------------------------------------------------------------
        public ComplexTimeseriesPropertyDefinitionDataReader GetTimeseriesPropertyDefinitionByIdDataReader( Guid id )
        {
            const string sql = ComplexTimeseriesPropertyDefinitionDataReader.BaseQuery + "WHERE " + ComplexTimeseriesPropertyDefinitionDataReader.ViewAliasName + ".[Id] = @id"; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                sqlCommandParameters.AddGuid( "@id", id );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var complexTimeseriesPropertyDefinitionDataReader = new ComplexTimeseriesPropertyDefinitionDataReader( _loggerFactory, sqlDataReader );
                return complexTimeseriesPropertyDefinitionDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public TimeseriesPropertyDefinitionObject? GetTimeseriesPropertyDefinitionById( Guid id )
        {
            var complexTimeseriesPropertyDefinitionDataReader = GetTimeseriesPropertyDefinitionByIdDataReader( id );
            using ( complexTimeseriesPropertyDefinitionDataReader )
            {
                if ( complexTimeseriesPropertyDefinitionDataReader.Read( ) )
                {
                    var result = complexTimeseriesPropertyDefinitionDataReader.GetDataObject( );
                    return result;
                }
            }
            return null;
        }

        public void GetTimeseriesPropertyDefinitionById( Guid id, Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var complexTimeseriesPropertyDefinitionDataReader = GetTimeseriesPropertyDefinitionByIdDataReader( id );
                using ( complexTimeseriesPropertyDefinitionDataReader )
                {
                    if ( complexTimeseriesPropertyDefinitionDataReader.Read( ) )
                    {
                        destinationWriter.Write( true );
                        complexTimeseriesPropertyDefinitionDataReader.WriteTo( destinationWriter );
                    }
                    else
                    {
                        destinationWriter.Write( false );
                    }
                }
            }
        }

        public ComplexTimeseriesPropertyDefinitionDataReader GetTimeseriesPropertyDefinitionCollectionDataReader( )
        {
            const string sql = ComplexTimeseriesPropertyDefinitionDataReader.BaseQuery; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var complexTimeseriesPropertyDefinitionDataReader = new ComplexTimeseriesPropertyDefinitionDataReader( _loggerFactory, sqlDataReader );
                return complexTimeseriesPropertyDefinitionDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public IList<TimeseriesPropertyDefinitionObject> GetTimeseriesPropertyDefinitionCollection( )
        {
            var result = new List<TimeseriesPropertyDefinitionObject>( );
            var complexTimeseriesPropertyDefinitionDataReader = GetTimeseriesPropertyDefinitionCollectionDataReader( );
            using ( complexTimeseriesPropertyDefinitionDataReader )
            {
                while ( complexTimeseriesPropertyDefinitionDataReader.Read( ) )
                {
                    var data = complexTimeseriesPropertyDefinitionDataReader.GetDataObject( );
                    result.Add( data );
                }
            }
            return result;
        }

        public void GetTimeseriesPropertyDefinitionCollection( Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var complexTimeseriesPropertyDefinitionDataReader = GetTimeseriesPropertyDefinitionCollectionDataReader( );
                using ( complexTimeseriesPropertyDefinitionDataReader )
                {
                    complexTimeseriesPropertyDefinitionDataReader.WriteResultSetTo( destinationWriter );
                }
            }
        }

        public ComplexTimeseriesPropertyDefinitionDataReader GetTimeseriesPropertyDefinitionCollectionByElementTypeDataReader( Guid elementType )
        {
            const string sql = ComplexTimeseriesPropertyDefinitionDataReader.BaseQuery + " WHERE " +
                    ComplexTimeseriesPropertyDefinitionDataReader.ViewAliasName + ".[ElementType] = @elementType " +
                    " ORDER BY " + ComplexTimeseriesPropertyDefinitionDataReader.ViewAliasName + ".[ElementType]," +ComplexTimeseriesPropertyDefinitionDataReader.ViewAliasName + ".[Name]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var elementTypeParameter = sqlCommandParameters.AddReference( "@elementType", elementType );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var complexTimeseriesPropertyDefinitionDataReader = new ComplexTimeseriesPropertyDefinitionDataReader( _loggerFactory, sqlDataReader );
                return complexTimeseriesPropertyDefinitionDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<TimeseriesPropertyDefinitionObject> GetTimeseriesPropertyDefinitionCollectionByElementType( Guid elementType )
        {
            throw new NotImplementedException( );
        }
        public ComplexTimeseriesPropertyDefinitionDataReader GetTimeseriesPropertyDefinitionByElementTypeAndNameDataReader( Guid elementType, string name )
        {
            const string sql = ComplexTimeseriesPropertyDefinitionDataReader.BaseQuery + " WHERE " +
                    ComplexTimeseriesPropertyDefinitionDataReader.ViewAliasName + ".[ElementType] = @elementType AND " +
                    ComplexTimeseriesPropertyDefinitionDataReader.ViewAliasName + ".[Name] = @name " +
                    " ORDER BY " + ComplexTimeseriesPropertyDefinitionDataReader.ViewAliasName + ".[ElementType]," +ComplexTimeseriesPropertyDefinitionDataReader.ViewAliasName + ".[Name]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var elementTypeParameter = sqlCommandParameters.AddReference( "@elementType", elementType );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@name", name, 127 );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var complexTimeseriesPropertyDefinitionDataReader = new ComplexTimeseriesPropertyDefinitionDataReader( _loggerFactory, sqlDataReader );
                return complexTimeseriesPropertyDefinitionDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public TimeseriesPropertyDefinitionObject? GetTimeseriesPropertyDefinitionByElementTypeAndName( Guid elementType, string name )
        {
            throw new NotImplementedException( );
        }
        // ---------------------------------------------------------------------
        // BinaryTimeseriesPropertyDefinition queries
        // ---------------------------------------------------------------------
        public SimpleBinaryTimeseriesPropertyDefinitionDataReader GetBinaryTimeseriesPropertyDefinitionByIdDataReader( Guid id )
        {
            const string sql = SimpleBinaryTimeseriesPropertyDefinitionDataReader.BaseQuery + "WHERE " + SimpleBinaryTimeseriesPropertyDefinitionDataReader.ViewAliasName + ".[Id] = @id"; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                sqlCommandParameters.AddGuid( "@id", id );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleBinaryTimeseriesPropertyDefinitionDataReader = new SimpleBinaryTimeseriesPropertyDefinitionDataReader( _loggerFactory, sqlDataReader );
                return simpleBinaryTimeseriesPropertyDefinitionDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public BinaryTimeseriesPropertyDefinitionObject? GetBinaryTimeseriesPropertyDefinitionById( Guid id )
        {
            var simpleBinaryTimeseriesPropertyDefinitionDataReader = GetBinaryTimeseriesPropertyDefinitionByIdDataReader( id );
            using ( simpleBinaryTimeseriesPropertyDefinitionDataReader )
            {
                if ( simpleBinaryTimeseriesPropertyDefinitionDataReader.Read( ) )
                {
                    var result = simpleBinaryTimeseriesPropertyDefinitionDataReader.GetDataObject( );
                    return result;
                }
            }
            return null;
        }

        public void GetBinaryTimeseriesPropertyDefinitionById( Guid id, Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleBinaryTimeseriesPropertyDefinitionDataReader = GetBinaryTimeseriesPropertyDefinitionByIdDataReader( id );
                using ( simpleBinaryTimeseriesPropertyDefinitionDataReader )
                {
                    if ( simpleBinaryTimeseriesPropertyDefinitionDataReader.Read( ) )
                    {
                        destinationWriter.Write( true );
                        simpleBinaryTimeseriesPropertyDefinitionDataReader.WriteTo( destinationWriter );
                    }
                    else
                    {
                        destinationWriter.Write( false );
                    }
                }
            }
        }

        public SimpleBinaryTimeseriesPropertyDefinitionDataReader GetBinaryTimeseriesPropertyDefinitionCollectionDataReader( )
        {
            const string sql = SimpleBinaryTimeseriesPropertyDefinitionDataReader.BaseQuery; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleBinaryTimeseriesPropertyDefinitionDataReader = new SimpleBinaryTimeseriesPropertyDefinitionDataReader( _loggerFactory, sqlDataReader );
                return simpleBinaryTimeseriesPropertyDefinitionDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public IList<BinaryTimeseriesPropertyDefinitionObject> GetBinaryTimeseriesPropertyDefinitionCollection( )
        {
            var result = new List<BinaryTimeseriesPropertyDefinitionObject>( );
            var simpleBinaryTimeseriesPropertyDefinitionDataReader = GetBinaryTimeseriesPropertyDefinitionCollectionDataReader( );
            using ( simpleBinaryTimeseriesPropertyDefinitionDataReader )
            {
                while ( simpleBinaryTimeseriesPropertyDefinitionDataReader.Read( ) )
                {
                    var data = simpleBinaryTimeseriesPropertyDefinitionDataReader.GetDataObject( );
                    result.Add( data );
                }
            }
            return result;
        }

        public void GetBinaryTimeseriesPropertyDefinitionCollection( Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleBinaryTimeseriesPropertyDefinitionDataReader = GetBinaryTimeseriesPropertyDefinitionCollectionDataReader( );
                using ( simpleBinaryTimeseriesPropertyDefinitionDataReader )
                {
                    simpleBinaryTimeseriesPropertyDefinitionDataReader.WriteResultSetTo( destinationWriter );
                }
            }
        }

        public SimpleBinaryTimeseriesPropertyDefinitionDataReader GetBinaryTimeseriesPropertyDefinitionCollectionByElementTypeDataReader( Guid elementType )
        {
            const string sql = SimpleBinaryTimeseriesPropertyDefinitionDataReader.BaseQuery + " WHERE " +
                    SimpleBinaryTimeseriesPropertyDefinitionDataReader.ViewAliasName + ".[ElementType] = @elementType " +
                    " ORDER BY " + SimpleBinaryTimeseriesPropertyDefinitionDataReader.ViewAliasName + ".[ElementType]," +SimpleBinaryTimeseriesPropertyDefinitionDataReader.ViewAliasName + ".[Name]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var elementTypeParameter = sqlCommandParameters.AddReference( "@elementType", elementType );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleBinaryTimeseriesPropertyDefinitionDataReader = new SimpleBinaryTimeseriesPropertyDefinitionDataReader( _loggerFactory, sqlDataReader );
                return simpleBinaryTimeseriesPropertyDefinitionDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<BinaryTimeseriesPropertyDefinitionObject> GetBinaryTimeseriesPropertyDefinitionCollectionByElementType( Guid elementType )
        {
            throw new NotImplementedException( );
        }
        public SimpleBinaryTimeseriesPropertyDefinitionDataReader GetBinaryTimeseriesPropertyDefinitionByElementTypeAndNameDataReader( Guid elementType, string name )
        {
            const string sql = SimpleBinaryTimeseriesPropertyDefinitionDataReader.BaseQuery + " WHERE " +
                    SimpleBinaryTimeseriesPropertyDefinitionDataReader.ViewAliasName + ".[ElementType] = @elementType AND " +
                    SimpleBinaryTimeseriesPropertyDefinitionDataReader.ViewAliasName + ".[Name] = @name " +
                    " ORDER BY " + SimpleBinaryTimeseriesPropertyDefinitionDataReader.ViewAliasName + ".[ElementType]," +SimpleBinaryTimeseriesPropertyDefinitionDataReader.ViewAliasName + ".[Name]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var elementTypeParameter = sqlCommandParameters.AddReference( "@elementType", elementType );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@name", name, 127 );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleBinaryTimeseriesPropertyDefinitionDataReader = new SimpleBinaryTimeseriesPropertyDefinitionDataReader( _loggerFactory, sqlDataReader );
                return simpleBinaryTimeseriesPropertyDefinitionDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public BinaryTimeseriesPropertyDefinitionObject? GetBinaryTimeseriesPropertyDefinitionByElementTypeAndName( Guid elementType, string name )
        {
            throw new NotImplementedException( );
        }
        // ---------------------------------------------------------------------
        // BooleanTimeseriesPropertyDefinition queries
        // ---------------------------------------------------------------------
        public SimpleBooleanTimeseriesPropertyDefinitionDataReader GetBooleanTimeseriesPropertyDefinitionByIdDataReader( Guid id )
        {
            const string sql = SimpleBooleanTimeseriesPropertyDefinitionDataReader.BaseQuery + "WHERE " + SimpleBooleanTimeseriesPropertyDefinitionDataReader.ViewAliasName + ".[Id] = @id"; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                sqlCommandParameters.AddGuid( "@id", id );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleBooleanTimeseriesPropertyDefinitionDataReader = new SimpleBooleanTimeseriesPropertyDefinitionDataReader( _loggerFactory, sqlDataReader );
                return simpleBooleanTimeseriesPropertyDefinitionDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public BooleanTimeseriesPropertyDefinitionObject? GetBooleanTimeseriesPropertyDefinitionById( Guid id )
        {
            var simpleBooleanTimeseriesPropertyDefinitionDataReader = GetBooleanTimeseriesPropertyDefinitionByIdDataReader( id );
            using ( simpleBooleanTimeseriesPropertyDefinitionDataReader )
            {
                if ( simpleBooleanTimeseriesPropertyDefinitionDataReader.Read( ) )
                {
                    var result = simpleBooleanTimeseriesPropertyDefinitionDataReader.GetDataObject( );
                    return result;
                }
            }
            return null;
        }

        public void GetBooleanTimeseriesPropertyDefinitionById( Guid id, Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleBooleanTimeseriesPropertyDefinitionDataReader = GetBooleanTimeseriesPropertyDefinitionByIdDataReader( id );
                using ( simpleBooleanTimeseriesPropertyDefinitionDataReader )
                {
                    if ( simpleBooleanTimeseriesPropertyDefinitionDataReader.Read( ) )
                    {
                        destinationWriter.Write( true );
                        simpleBooleanTimeseriesPropertyDefinitionDataReader.WriteTo( destinationWriter );
                    }
                    else
                    {
                        destinationWriter.Write( false );
                    }
                }
            }
        }

        public SimpleBooleanTimeseriesPropertyDefinitionDataReader GetBooleanTimeseriesPropertyDefinitionCollectionDataReader( )
        {
            const string sql = SimpleBooleanTimeseriesPropertyDefinitionDataReader.BaseQuery; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleBooleanTimeseriesPropertyDefinitionDataReader = new SimpleBooleanTimeseriesPropertyDefinitionDataReader( _loggerFactory, sqlDataReader );
                return simpleBooleanTimeseriesPropertyDefinitionDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public IList<BooleanTimeseriesPropertyDefinitionObject> GetBooleanTimeseriesPropertyDefinitionCollection( )
        {
            var result = new List<BooleanTimeseriesPropertyDefinitionObject>( );
            var simpleBooleanTimeseriesPropertyDefinitionDataReader = GetBooleanTimeseriesPropertyDefinitionCollectionDataReader( );
            using ( simpleBooleanTimeseriesPropertyDefinitionDataReader )
            {
                while ( simpleBooleanTimeseriesPropertyDefinitionDataReader.Read( ) )
                {
                    var data = simpleBooleanTimeseriesPropertyDefinitionDataReader.GetDataObject( );
                    result.Add( data );
                }
            }
            return result;
        }

        public void GetBooleanTimeseriesPropertyDefinitionCollection( Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleBooleanTimeseriesPropertyDefinitionDataReader = GetBooleanTimeseriesPropertyDefinitionCollectionDataReader( );
                using ( simpleBooleanTimeseriesPropertyDefinitionDataReader )
                {
                    simpleBooleanTimeseriesPropertyDefinitionDataReader.WriteResultSetTo( destinationWriter );
                }
            }
        }

        public SimpleBooleanTimeseriesPropertyDefinitionDataReader GetBooleanTimeseriesPropertyDefinitionCollectionByElementTypeDataReader( Guid elementType )
        {
            const string sql = SimpleBooleanTimeseriesPropertyDefinitionDataReader.BaseQuery + " WHERE " +
                    SimpleBooleanTimeseriesPropertyDefinitionDataReader.ViewAliasName + ".[ElementType] = @elementType " +
                    " ORDER BY " + SimpleBooleanTimeseriesPropertyDefinitionDataReader.ViewAliasName + ".[ElementType]," +SimpleBooleanTimeseriesPropertyDefinitionDataReader.ViewAliasName + ".[Name]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var elementTypeParameter = sqlCommandParameters.AddReference( "@elementType", elementType );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleBooleanTimeseriesPropertyDefinitionDataReader = new SimpleBooleanTimeseriesPropertyDefinitionDataReader( _loggerFactory, sqlDataReader );
                return simpleBooleanTimeseriesPropertyDefinitionDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<BooleanTimeseriesPropertyDefinitionObject> GetBooleanTimeseriesPropertyDefinitionCollectionByElementType( Guid elementType )
        {
            throw new NotImplementedException( );
        }
        public SimpleBooleanTimeseriesPropertyDefinitionDataReader GetBooleanTimeseriesPropertyDefinitionByElementTypeAndNameDataReader( Guid elementType, string name )
        {
            const string sql = SimpleBooleanTimeseriesPropertyDefinitionDataReader.BaseQuery + " WHERE " +
                    SimpleBooleanTimeseriesPropertyDefinitionDataReader.ViewAliasName + ".[ElementType] = @elementType AND " +
                    SimpleBooleanTimeseriesPropertyDefinitionDataReader.ViewAliasName + ".[Name] = @name " +
                    " ORDER BY " + SimpleBooleanTimeseriesPropertyDefinitionDataReader.ViewAliasName + ".[ElementType]," +SimpleBooleanTimeseriesPropertyDefinitionDataReader.ViewAliasName + ".[Name]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var elementTypeParameter = sqlCommandParameters.AddReference( "@elementType", elementType );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@name", name, 127 );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleBooleanTimeseriesPropertyDefinitionDataReader = new SimpleBooleanTimeseriesPropertyDefinitionDataReader( _loggerFactory, sqlDataReader );
                return simpleBooleanTimeseriesPropertyDefinitionDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public BooleanTimeseriesPropertyDefinitionObject? GetBooleanTimeseriesPropertyDefinitionByElementTypeAndName( Guid elementType, string name )
        {
            throw new NotImplementedException( );
        }
        // ---------------------------------------------------------------------
        // ByteTimeseriesPropertyDefinition queries
        // ---------------------------------------------------------------------
        public SimpleByteTimeseriesPropertyDefinitionDataReader GetByteTimeseriesPropertyDefinitionByIdDataReader( Guid id )
        {
            const string sql = SimpleByteTimeseriesPropertyDefinitionDataReader.BaseQuery + "WHERE " + SimpleByteTimeseriesPropertyDefinitionDataReader.ViewAliasName + ".[Id] = @id"; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                sqlCommandParameters.AddGuid( "@id", id );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleByteTimeseriesPropertyDefinitionDataReader = new SimpleByteTimeseriesPropertyDefinitionDataReader( _loggerFactory, sqlDataReader );
                return simpleByteTimeseriesPropertyDefinitionDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public ByteTimeseriesPropertyDefinitionObject? GetByteTimeseriesPropertyDefinitionById( Guid id )
        {
            var simpleByteTimeseriesPropertyDefinitionDataReader = GetByteTimeseriesPropertyDefinitionByIdDataReader( id );
            using ( simpleByteTimeseriesPropertyDefinitionDataReader )
            {
                if ( simpleByteTimeseriesPropertyDefinitionDataReader.Read( ) )
                {
                    var result = simpleByteTimeseriesPropertyDefinitionDataReader.GetDataObject( );
                    return result;
                }
            }
            return null;
        }

        public void GetByteTimeseriesPropertyDefinitionById( Guid id, Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleByteTimeseriesPropertyDefinitionDataReader = GetByteTimeseriesPropertyDefinitionByIdDataReader( id );
                using ( simpleByteTimeseriesPropertyDefinitionDataReader )
                {
                    if ( simpleByteTimeseriesPropertyDefinitionDataReader.Read( ) )
                    {
                        destinationWriter.Write( true );
                        simpleByteTimeseriesPropertyDefinitionDataReader.WriteTo( destinationWriter );
                    }
                    else
                    {
                        destinationWriter.Write( false );
                    }
                }
            }
        }

        public SimpleByteTimeseriesPropertyDefinitionDataReader GetByteTimeseriesPropertyDefinitionCollectionDataReader( )
        {
            const string sql = SimpleByteTimeseriesPropertyDefinitionDataReader.BaseQuery; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleByteTimeseriesPropertyDefinitionDataReader = new SimpleByteTimeseriesPropertyDefinitionDataReader( _loggerFactory, sqlDataReader );
                return simpleByteTimeseriesPropertyDefinitionDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public IList<ByteTimeseriesPropertyDefinitionObject> GetByteTimeseriesPropertyDefinitionCollection( )
        {
            var result = new List<ByteTimeseriesPropertyDefinitionObject>( );
            var simpleByteTimeseriesPropertyDefinitionDataReader = GetByteTimeseriesPropertyDefinitionCollectionDataReader( );
            using ( simpleByteTimeseriesPropertyDefinitionDataReader )
            {
                while ( simpleByteTimeseriesPropertyDefinitionDataReader.Read( ) )
                {
                    var data = simpleByteTimeseriesPropertyDefinitionDataReader.GetDataObject( );
                    result.Add( data );
                }
            }
            return result;
        }

        public void GetByteTimeseriesPropertyDefinitionCollection( Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleByteTimeseriesPropertyDefinitionDataReader = GetByteTimeseriesPropertyDefinitionCollectionDataReader( );
                using ( simpleByteTimeseriesPropertyDefinitionDataReader )
                {
                    simpleByteTimeseriesPropertyDefinitionDataReader.WriteResultSetTo( destinationWriter );
                }
            }
        }

        public SimpleByteTimeseriesPropertyDefinitionDataReader GetByteTimeseriesPropertyDefinitionCollectionByElementTypeDataReader( Guid elementType )
        {
            const string sql = SimpleByteTimeseriesPropertyDefinitionDataReader.BaseQuery + " WHERE " +
                    SimpleByteTimeseriesPropertyDefinitionDataReader.ViewAliasName + ".[ElementType] = @elementType " +
                    " ORDER BY " + SimpleByteTimeseriesPropertyDefinitionDataReader.ViewAliasName + ".[ElementType]," +SimpleByteTimeseriesPropertyDefinitionDataReader.ViewAliasName + ".[Name]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var elementTypeParameter = sqlCommandParameters.AddReference( "@elementType", elementType );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleByteTimeseriesPropertyDefinitionDataReader = new SimpleByteTimeseriesPropertyDefinitionDataReader( _loggerFactory, sqlDataReader );
                return simpleByteTimeseriesPropertyDefinitionDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<ByteTimeseriesPropertyDefinitionObject> GetByteTimeseriesPropertyDefinitionCollectionByElementType( Guid elementType )
        {
            throw new NotImplementedException( );
        }
        public SimpleByteTimeseriesPropertyDefinitionDataReader GetByteTimeseriesPropertyDefinitionByElementTypeAndNameDataReader( Guid elementType, string name )
        {
            const string sql = SimpleByteTimeseriesPropertyDefinitionDataReader.BaseQuery + " WHERE " +
                    SimpleByteTimeseriesPropertyDefinitionDataReader.ViewAliasName + ".[ElementType] = @elementType AND " +
                    SimpleByteTimeseriesPropertyDefinitionDataReader.ViewAliasName + ".[Name] = @name " +
                    " ORDER BY " + SimpleByteTimeseriesPropertyDefinitionDataReader.ViewAliasName + ".[ElementType]," +SimpleByteTimeseriesPropertyDefinitionDataReader.ViewAliasName + ".[Name]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var elementTypeParameter = sqlCommandParameters.AddReference( "@elementType", elementType );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@name", name, 127 );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleByteTimeseriesPropertyDefinitionDataReader = new SimpleByteTimeseriesPropertyDefinitionDataReader( _loggerFactory, sqlDataReader );
                return simpleByteTimeseriesPropertyDefinitionDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public ByteTimeseriesPropertyDefinitionObject? GetByteTimeseriesPropertyDefinitionByElementTypeAndName( Guid elementType, string name )
        {
            throw new NotImplementedException( );
        }
        // ---------------------------------------------------------------------
        // DateTimeTimeseriesPropertyDefinition queries
        // ---------------------------------------------------------------------
        public SimpleDateTimeTimeseriesPropertyDefinitionDataReader GetDateTimeTimeseriesPropertyDefinitionByIdDataReader( Guid id )
        {
            const string sql = SimpleDateTimeTimeseriesPropertyDefinitionDataReader.BaseQuery + "WHERE " + SimpleDateTimeTimeseriesPropertyDefinitionDataReader.ViewAliasName + ".[Id] = @id"; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                sqlCommandParameters.AddGuid( "@id", id );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleDateTimeTimeseriesPropertyDefinitionDataReader = new SimpleDateTimeTimeseriesPropertyDefinitionDataReader( _loggerFactory, sqlDataReader );
                return simpleDateTimeTimeseriesPropertyDefinitionDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public DateTimeTimeseriesPropertyDefinitionObject? GetDateTimeTimeseriesPropertyDefinitionById( Guid id )
        {
            var simpleDateTimeTimeseriesPropertyDefinitionDataReader = GetDateTimeTimeseriesPropertyDefinitionByIdDataReader( id );
            using ( simpleDateTimeTimeseriesPropertyDefinitionDataReader )
            {
                if ( simpleDateTimeTimeseriesPropertyDefinitionDataReader.Read( ) )
                {
                    var result = simpleDateTimeTimeseriesPropertyDefinitionDataReader.GetDataObject( );
                    return result;
                }
            }
            return null;
        }

        public void GetDateTimeTimeseriesPropertyDefinitionById( Guid id, Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleDateTimeTimeseriesPropertyDefinitionDataReader = GetDateTimeTimeseriesPropertyDefinitionByIdDataReader( id );
                using ( simpleDateTimeTimeseriesPropertyDefinitionDataReader )
                {
                    if ( simpleDateTimeTimeseriesPropertyDefinitionDataReader.Read( ) )
                    {
                        destinationWriter.Write( true );
                        simpleDateTimeTimeseriesPropertyDefinitionDataReader.WriteTo( destinationWriter );
                    }
                    else
                    {
                        destinationWriter.Write( false );
                    }
                }
            }
        }

        public SimpleDateTimeTimeseriesPropertyDefinitionDataReader GetDateTimeTimeseriesPropertyDefinitionCollectionDataReader( )
        {
            const string sql = SimpleDateTimeTimeseriesPropertyDefinitionDataReader.BaseQuery; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleDateTimeTimeseriesPropertyDefinitionDataReader = new SimpleDateTimeTimeseriesPropertyDefinitionDataReader( _loggerFactory, sqlDataReader );
                return simpleDateTimeTimeseriesPropertyDefinitionDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public IList<DateTimeTimeseriesPropertyDefinitionObject> GetDateTimeTimeseriesPropertyDefinitionCollection( )
        {
            var result = new List<DateTimeTimeseriesPropertyDefinitionObject>( );
            var simpleDateTimeTimeseriesPropertyDefinitionDataReader = GetDateTimeTimeseriesPropertyDefinitionCollectionDataReader( );
            using ( simpleDateTimeTimeseriesPropertyDefinitionDataReader )
            {
                while ( simpleDateTimeTimeseriesPropertyDefinitionDataReader.Read( ) )
                {
                    var data = simpleDateTimeTimeseriesPropertyDefinitionDataReader.GetDataObject( );
                    result.Add( data );
                }
            }
            return result;
        }

        public void GetDateTimeTimeseriesPropertyDefinitionCollection( Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleDateTimeTimeseriesPropertyDefinitionDataReader = GetDateTimeTimeseriesPropertyDefinitionCollectionDataReader( );
                using ( simpleDateTimeTimeseriesPropertyDefinitionDataReader )
                {
                    simpleDateTimeTimeseriesPropertyDefinitionDataReader.WriteResultSetTo( destinationWriter );
                }
            }
        }

        public SimpleDateTimeTimeseriesPropertyDefinitionDataReader GetDateTimeTimeseriesPropertyDefinitionCollectionByElementTypeDataReader( Guid elementType )
        {
            const string sql = SimpleDateTimeTimeseriesPropertyDefinitionDataReader.BaseQuery + " WHERE " +
                    SimpleDateTimeTimeseriesPropertyDefinitionDataReader.ViewAliasName + ".[ElementType] = @elementType " +
                    " ORDER BY " + SimpleDateTimeTimeseriesPropertyDefinitionDataReader.ViewAliasName + ".[ElementType]," +SimpleDateTimeTimeseriesPropertyDefinitionDataReader.ViewAliasName + ".[Name]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var elementTypeParameter = sqlCommandParameters.AddReference( "@elementType", elementType );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleDateTimeTimeseriesPropertyDefinitionDataReader = new SimpleDateTimeTimeseriesPropertyDefinitionDataReader( _loggerFactory, sqlDataReader );
                return simpleDateTimeTimeseriesPropertyDefinitionDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<DateTimeTimeseriesPropertyDefinitionObject> GetDateTimeTimeseriesPropertyDefinitionCollectionByElementType( Guid elementType )
        {
            throw new NotImplementedException( );
        }
        public SimpleDateTimeTimeseriesPropertyDefinitionDataReader GetDateTimeTimeseriesPropertyDefinitionByElementTypeAndNameDataReader( Guid elementType, string name )
        {
            const string sql = SimpleDateTimeTimeseriesPropertyDefinitionDataReader.BaseQuery + " WHERE " +
                    SimpleDateTimeTimeseriesPropertyDefinitionDataReader.ViewAliasName + ".[ElementType] = @elementType AND " +
                    SimpleDateTimeTimeseriesPropertyDefinitionDataReader.ViewAliasName + ".[Name] = @name " +
                    " ORDER BY " + SimpleDateTimeTimeseriesPropertyDefinitionDataReader.ViewAliasName + ".[ElementType]," +SimpleDateTimeTimeseriesPropertyDefinitionDataReader.ViewAliasName + ".[Name]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var elementTypeParameter = sqlCommandParameters.AddReference( "@elementType", elementType );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@name", name, 127 );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleDateTimeTimeseriesPropertyDefinitionDataReader = new SimpleDateTimeTimeseriesPropertyDefinitionDataReader( _loggerFactory, sqlDataReader );
                return simpleDateTimeTimeseriesPropertyDefinitionDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public DateTimeTimeseriesPropertyDefinitionObject? GetDateTimeTimeseriesPropertyDefinitionByElementTypeAndName( Guid elementType, string name )
        {
            throw new NotImplementedException( );
        }
        // ---------------------------------------------------------------------
        // DoubleTimeseriesPropertyDefinition queries
        // ---------------------------------------------------------------------
        public SimpleDoubleTimeseriesPropertyDefinitionDataReader GetDoubleTimeseriesPropertyDefinitionByIdDataReader( Guid id )
        {
            const string sql = SimpleDoubleTimeseriesPropertyDefinitionDataReader.BaseQuery + "WHERE " + SimpleDoubleTimeseriesPropertyDefinitionDataReader.ViewAliasName + ".[Id] = @id"; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                sqlCommandParameters.AddGuid( "@id", id );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleDoubleTimeseriesPropertyDefinitionDataReader = new SimpleDoubleTimeseriesPropertyDefinitionDataReader( _loggerFactory, sqlDataReader );
                return simpleDoubleTimeseriesPropertyDefinitionDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public DoubleTimeseriesPropertyDefinitionObject? GetDoubleTimeseriesPropertyDefinitionById( Guid id )
        {
            var simpleDoubleTimeseriesPropertyDefinitionDataReader = GetDoubleTimeseriesPropertyDefinitionByIdDataReader( id );
            using ( simpleDoubleTimeseriesPropertyDefinitionDataReader )
            {
                if ( simpleDoubleTimeseriesPropertyDefinitionDataReader.Read( ) )
                {
                    var result = simpleDoubleTimeseriesPropertyDefinitionDataReader.GetDataObject( );
                    return result;
                }
            }
            return null;
        }

        public void GetDoubleTimeseriesPropertyDefinitionById( Guid id, Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleDoubleTimeseriesPropertyDefinitionDataReader = GetDoubleTimeseriesPropertyDefinitionByIdDataReader( id );
                using ( simpleDoubleTimeseriesPropertyDefinitionDataReader )
                {
                    if ( simpleDoubleTimeseriesPropertyDefinitionDataReader.Read( ) )
                    {
                        destinationWriter.Write( true );
                        simpleDoubleTimeseriesPropertyDefinitionDataReader.WriteTo( destinationWriter );
                    }
                    else
                    {
                        destinationWriter.Write( false );
                    }
                }
            }
        }

        public SimpleDoubleTimeseriesPropertyDefinitionDataReader GetDoubleTimeseriesPropertyDefinitionCollectionDataReader( )
        {
            const string sql = SimpleDoubleTimeseriesPropertyDefinitionDataReader.BaseQuery; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleDoubleTimeseriesPropertyDefinitionDataReader = new SimpleDoubleTimeseriesPropertyDefinitionDataReader( _loggerFactory, sqlDataReader );
                return simpleDoubleTimeseriesPropertyDefinitionDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public IList<DoubleTimeseriesPropertyDefinitionObject> GetDoubleTimeseriesPropertyDefinitionCollection( )
        {
            var result = new List<DoubleTimeseriesPropertyDefinitionObject>( );
            var simpleDoubleTimeseriesPropertyDefinitionDataReader = GetDoubleTimeseriesPropertyDefinitionCollectionDataReader( );
            using ( simpleDoubleTimeseriesPropertyDefinitionDataReader )
            {
                while ( simpleDoubleTimeseriesPropertyDefinitionDataReader.Read( ) )
                {
                    var data = simpleDoubleTimeseriesPropertyDefinitionDataReader.GetDataObject( );
                    result.Add( data );
                }
            }
            return result;
        }

        public void GetDoubleTimeseriesPropertyDefinitionCollection( Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleDoubleTimeseriesPropertyDefinitionDataReader = GetDoubleTimeseriesPropertyDefinitionCollectionDataReader( );
                using ( simpleDoubleTimeseriesPropertyDefinitionDataReader )
                {
                    simpleDoubleTimeseriesPropertyDefinitionDataReader.WriteResultSetTo( destinationWriter );
                }
            }
        }

        public SimpleDoubleTimeseriesPropertyDefinitionDataReader GetDoubleTimeseriesPropertyDefinitionCollectionByElementTypeDataReader( Guid elementType )
        {
            const string sql = SimpleDoubleTimeseriesPropertyDefinitionDataReader.BaseQuery + " WHERE " +
                    SimpleDoubleTimeseriesPropertyDefinitionDataReader.ViewAliasName + ".[ElementType] = @elementType " +
                    " ORDER BY " + SimpleDoubleTimeseriesPropertyDefinitionDataReader.ViewAliasName + ".[ElementType]," +SimpleDoubleTimeseriesPropertyDefinitionDataReader.ViewAliasName + ".[Name]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var elementTypeParameter = sqlCommandParameters.AddReference( "@elementType", elementType );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleDoubleTimeseriesPropertyDefinitionDataReader = new SimpleDoubleTimeseriesPropertyDefinitionDataReader( _loggerFactory, sqlDataReader );
                return simpleDoubleTimeseriesPropertyDefinitionDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<DoubleTimeseriesPropertyDefinitionObject> GetDoubleTimeseriesPropertyDefinitionCollectionByElementType( Guid elementType )
        {
            throw new NotImplementedException( );
        }
        public SimpleDoubleTimeseriesPropertyDefinitionDataReader GetDoubleTimeseriesPropertyDefinitionByElementTypeAndNameDataReader( Guid elementType, string name )
        {
            const string sql = SimpleDoubleTimeseriesPropertyDefinitionDataReader.BaseQuery + " WHERE " +
                    SimpleDoubleTimeseriesPropertyDefinitionDataReader.ViewAliasName + ".[ElementType] = @elementType AND " +
                    SimpleDoubleTimeseriesPropertyDefinitionDataReader.ViewAliasName + ".[Name] = @name " +
                    " ORDER BY " + SimpleDoubleTimeseriesPropertyDefinitionDataReader.ViewAliasName + ".[ElementType]," +SimpleDoubleTimeseriesPropertyDefinitionDataReader.ViewAliasName + ".[Name]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var elementTypeParameter = sqlCommandParameters.AddReference( "@elementType", elementType );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@name", name, 127 );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleDoubleTimeseriesPropertyDefinitionDataReader = new SimpleDoubleTimeseriesPropertyDefinitionDataReader( _loggerFactory, sqlDataReader );
                return simpleDoubleTimeseriesPropertyDefinitionDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public DoubleTimeseriesPropertyDefinitionObject? GetDoubleTimeseriesPropertyDefinitionByElementTypeAndName( Guid elementType, string name )
        {
            throw new NotImplementedException( );
        }
        // ---------------------------------------------------------------------
        // GuidTimeseriesPropertyDefinition queries
        // ---------------------------------------------------------------------
        public SimpleGuidTimeseriesPropertyDefinitionDataReader GetGuidTimeseriesPropertyDefinitionByIdDataReader( Guid id )
        {
            const string sql = SimpleGuidTimeseriesPropertyDefinitionDataReader.BaseQuery + "WHERE " + SimpleGuidTimeseriesPropertyDefinitionDataReader.ViewAliasName + ".[Id] = @id"; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                sqlCommandParameters.AddGuid( "@id", id );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleGuidTimeseriesPropertyDefinitionDataReader = new SimpleGuidTimeseriesPropertyDefinitionDataReader( _loggerFactory, sqlDataReader );
                return simpleGuidTimeseriesPropertyDefinitionDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public GuidTimeseriesPropertyDefinitionObject? GetGuidTimeseriesPropertyDefinitionById( Guid id )
        {
            var simpleGuidTimeseriesPropertyDefinitionDataReader = GetGuidTimeseriesPropertyDefinitionByIdDataReader( id );
            using ( simpleGuidTimeseriesPropertyDefinitionDataReader )
            {
                if ( simpleGuidTimeseriesPropertyDefinitionDataReader.Read( ) )
                {
                    var result = simpleGuidTimeseriesPropertyDefinitionDataReader.GetDataObject( );
                    return result;
                }
            }
            return null;
        }

        public void GetGuidTimeseriesPropertyDefinitionById( Guid id, Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleGuidTimeseriesPropertyDefinitionDataReader = GetGuidTimeseriesPropertyDefinitionByIdDataReader( id );
                using ( simpleGuidTimeseriesPropertyDefinitionDataReader )
                {
                    if ( simpleGuidTimeseriesPropertyDefinitionDataReader.Read( ) )
                    {
                        destinationWriter.Write( true );
                        simpleGuidTimeseriesPropertyDefinitionDataReader.WriteTo( destinationWriter );
                    }
                    else
                    {
                        destinationWriter.Write( false );
                    }
                }
            }
        }

        public SimpleGuidTimeseriesPropertyDefinitionDataReader GetGuidTimeseriesPropertyDefinitionCollectionDataReader( )
        {
            const string sql = SimpleGuidTimeseriesPropertyDefinitionDataReader.BaseQuery; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleGuidTimeseriesPropertyDefinitionDataReader = new SimpleGuidTimeseriesPropertyDefinitionDataReader( _loggerFactory, sqlDataReader );
                return simpleGuidTimeseriesPropertyDefinitionDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public IList<GuidTimeseriesPropertyDefinitionObject> GetGuidTimeseriesPropertyDefinitionCollection( )
        {
            var result = new List<GuidTimeseriesPropertyDefinitionObject>( );
            var simpleGuidTimeseriesPropertyDefinitionDataReader = GetGuidTimeseriesPropertyDefinitionCollectionDataReader( );
            using ( simpleGuidTimeseriesPropertyDefinitionDataReader )
            {
                while ( simpleGuidTimeseriesPropertyDefinitionDataReader.Read( ) )
                {
                    var data = simpleGuidTimeseriesPropertyDefinitionDataReader.GetDataObject( );
                    result.Add( data );
                }
            }
            return result;
        }

        public void GetGuidTimeseriesPropertyDefinitionCollection( Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleGuidTimeseriesPropertyDefinitionDataReader = GetGuidTimeseriesPropertyDefinitionCollectionDataReader( );
                using ( simpleGuidTimeseriesPropertyDefinitionDataReader )
                {
                    simpleGuidTimeseriesPropertyDefinitionDataReader.WriteResultSetTo( destinationWriter );
                }
            }
        }

        public SimpleGuidTimeseriesPropertyDefinitionDataReader GetGuidTimeseriesPropertyDefinitionCollectionByElementTypeDataReader( Guid elementType )
        {
            const string sql = SimpleGuidTimeseriesPropertyDefinitionDataReader.BaseQuery + " WHERE " +
                    SimpleGuidTimeseriesPropertyDefinitionDataReader.ViewAliasName + ".[ElementType] = @elementType " +
                    " ORDER BY " + SimpleGuidTimeseriesPropertyDefinitionDataReader.ViewAliasName + ".[ElementType]," +SimpleGuidTimeseriesPropertyDefinitionDataReader.ViewAliasName + ".[Name]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var elementTypeParameter = sqlCommandParameters.AddReference( "@elementType", elementType );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleGuidTimeseriesPropertyDefinitionDataReader = new SimpleGuidTimeseriesPropertyDefinitionDataReader( _loggerFactory, sqlDataReader );
                return simpleGuidTimeseriesPropertyDefinitionDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<GuidTimeseriesPropertyDefinitionObject> GetGuidTimeseriesPropertyDefinitionCollectionByElementType( Guid elementType )
        {
            throw new NotImplementedException( );
        }
        public SimpleGuidTimeseriesPropertyDefinitionDataReader GetGuidTimeseriesPropertyDefinitionByElementTypeAndNameDataReader( Guid elementType, string name )
        {
            const string sql = SimpleGuidTimeseriesPropertyDefinitionDataReader.BaseQuery + " WHERE " +
                    SimpleGuidTimeseriesPropertyDefinitionDataReader.ViewAliasName + ".[ElementType] = @elementType AND " +
                    SimpleGuidTimeseriesPropertyDefinitionDataReader.ViewAliasName + ".[Name] = @name " +
                    " ORDER BY " + SimpleGuidTimeseriesPropertyDefinitionDataReader.ViewAliasName + ".[ElementType]," +SimpleGuidTimeseriesPropertyDefinitionDataReader.ViewAliasName + ".[Name]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var elementTypeParameter = sqlCommandParameters.AddReference( "@elementType", elementType );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@name", name, 127 );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleGuidTimeseriesPropertyDefinitionDataReader = new SimpleGuidTimeseriesPropertyDefinitionDataReader( _loggerFactory, sqlDataReader );
                return simpleGuidTimeseriesPropertyDefinitionDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public GuidTimeseriesPropertyDefinitionObject? GetGuidTimeseriesPropertyDefinitionByElementTypeAndName( Guid elementType, string name )
        {
            throw new NotImplementedException( );
        }
        // ---------------------------------------------------------------------
        // Int16TimeseriesPropertyDefinition queries
        // ---------------------------------------------------------------------
        public SimpleInt16TimeseriesPropertyDefinitionDataReader GetInt16TimeseriesPropertyDefinitionByIdDataReader( Guid id )
        {
            const string sql = SimpleInt16TimeseriesPropertyDefinitionDataReader.BaseQuery + "WHERE " + SimpleInt16TimeseriesPropertyDefinitionDataReader.ViewAliasName + ".[Id] = @id"; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                sqlCommandParameters.AddGuid( "@id", id );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleInt16TimeseriesPropertyDefinitionDataReader = new SimpleInt16TimeseriesPropertyDefinitionDataReader( _loggerFactory, sqlDataReader );
                return simpleInt16TimeseriesPropertyDefinitionDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public Int16TimeseriesPropertyDefinitionObject? GetInt16TimeseriesPropertyDefinitionById( Guid id )
        {
            var simpleInt16TimeseriesPropertyDefinitionDataReader = GetInt16TimeseriesPropertyDefinitionByIdDataReader( id );
            using ( simpleInt16TimeseriesPropertyDefinitionDataReader )
            {
                if ( simpleInt16TimeseriesPropertyDefinitionDataReader.Read( ) )
                {
                    var result = simpleInt16TimeseriesPropertyDefinitionDataReader.GetDataObject( );
                    return result;
                }
            }
            return null;
        }

        public void GetInt16TimeseriesPropertyDefinitionById( Guid id, Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleInt16TimeseriesPropertyDefinitionDataReader = GetInt16TimeseriesPropertyDefinitionByIdDataReader( id );
                using ( simpleInt16TimeseriesPropertyDefinitionDataReader )
                {
                    if ( simpleInt16TimeseriesPropertyDefinitionDataReader.Read( ) )
                    {
                        destinationWriter.Write( true );
                        simpleInt16TimeseriesPropertyDefinitionDataReader.WriteTo( destinationWriter );
                    }
                    else
                    {
                        destinationWriter.Write( false );
                    }
                }
            }
        }

        public SimpleInt16TimeseriesPropertyDefinitionDataReader GetInt16TimeseriesPropertyDefinitionCollectionDataReader( )
        {
            const string sql = SimpleInt16TimeseriesPropertyDefinitionDataReader.BaseQuery; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleInt16TimeseriesPropertyDefinitionDataReader = new SimpleInt16TimeseriesPropertyDefinitionDataReader( _loggerFactory, sqlDataReader );
                return simpleInt16TimeseriesPropertyDefinitionDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public IList<Int16TimeseriesPropertyDefinitionObject> GetInt16TimeseriesPropertyDefinitionCollection( )
        {
            var result = new List<Int16TimeseriesPropertyDefinitionObject>( );
            var simpleInt16TimeseriesPropertyDefinitionDataReader = GetInt16TimeseriesPropertyDefinitionCollectionDataReader( );
            using ( simpleInt16TimeseriesPropertyDefinitionDataReader )
            {
                while ( simpleInt16TimeseriesPropertyDefinitionDataReader.Read( ) )
                {
                    var data = simpleInt16TimeseriesPropertyDefinitionDataReader.GetDataObject( );
                    result.Add( data );
                }
            }
            return result;
        }

        public void GetInt16TimeseriesPropertyDefinitionCollection( Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleInt16TimeseriesPropertyDefinitionDataReader = GetInt16TimeseriesPropertyDefinitionCollectionDataReader( );
                using ( simpleInt16TimeseriesPropertyDefinitionDataReader )
                {
                    simpleInt16TimeseriesPropertyDefinitionDataReader.WriteResultSetTo( destinationWriter );
                }
            }
        }

        public SimpleInt16TimeseriesPropertyDefinitionDataReader GetInt16TimeseriesPropertyDefinitionCollectionByElementTypeDataReader( Guid elementType )
        {
            const string sql = SimpleInt16TimeseriesPropertyDefinitionDataReader.BaseQuery + " WHERE " +
                    SimpleInt16TimeseriesPropertyDefinitionDataReader.ViewAliasName + ".[ElementType] = @elementType " +
                    " ORDER BY " + SimpleInt16TimeseriesPropertyDefinitionDataReader.ViewAliasName + ".[ElementType]," +SimpleInt16TimeseriesPropertyDefinitionDataReader.ViewAliasName + ".[Name]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var elementTypeParameter = sqlCommandParameters.AddReference( "@elementType", elementType );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleInt16TimeseriesPropertyDefinitionDataReader = new SimpleInt16TimeseriesPropertyDefinitionDataReader( _loggerFactory, sqlDataReader );
                return simpleInt16TimeseriesPropertyDefinitionDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<Int16TimeseriesPropertyDefinitionObject> GetInt16TimeseriesPropertyDefinitionCollectionByElementType( Guid elementType )
        {
            throw new NotImplementedException( );
        }
        public SimpleInt16TimeseriesPropertyDefinitionDataReader GetInt16TimeseriesPropertyDefinitionByElementTypeAndNameDataReader( Guid elementType, string name )
        {
            const string sql = SimpleInt16TimeseriesPropertyDefinitionDataReader.BaseQuery + " WHERE " +
                    SimpleInt16TimeseriesPropertyDefinitionDataReader.ViewAliasName + ".[ElementType] = @elementType AND " +
                    SimpleInt16TimeseriesPropertyDefinitionDataReader.ViewAliasName + ".[Name] = @name " +
                    " ORDER BY " + SimpleInt16TimeseriesPropertyDefinitionDataReader.ViewAliasName + ".[ElementType]," +SimpleInt16TimeseriesPropertyDefinitionDataReader.ViewAliasName + ".[Name]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var elementTypeParameter = sqlCommandParameters.AddReference( "@elementType", elementType );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@name", name, 127 );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleInt16TimeseriesPropertyDefinitionDataReader = new SimpleInt16TimeseriesPropertyDefinitionDataReader( _loggerFactory, sqlDataReader );
                return simpleInt16TimeseriesPropertyDefinitionDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public Int16TimeseriesPropertyDefinitionObject? GetInt16TimeseriesPropertyDefinitionByElementTypeAndName( Guid elementType, string name )
        {
            throw new NotImplementedException( );
        }
        // ---------------------------------------------------------------------
        // Int32TimeseriesPropertyDefinition queries
        // ---------------------------------------------------------------------
        public SimpleInt32TimeseriesPropertyDefinitionDataReader GetInt32TimeseriesPropertyDefinitionByIdDataReader( Guid id )
        {
            const string sql = SimpleInt32TimeseriesPropertyDefinitionDataReader.BaseQuery + "WHERE " + SimpleInt32TimeseriesPropertyDefinitionDataReader.ViewAliasName + ".[Id] = @id"; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                sqlCommandParameters.AddGuid( "@id", id );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleInt32TimeseriesPropertyDefinitionDataReader = new SimpleInt32TimeseriesPropertyDefinitionDataReader( _loggerFactory, sqlDataReader );
                return simpleInt32TimeseriesPropertyDefinitionDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public Int32TimeseriesPropertyDefinitionObject? GetInt32TimeseriesPropertyDefinitionById( Guid id )
        {
            var simpleInt32TimeseriesPropertyDefinitionDataReader = GetInt32TimeseriesPropertyDefinitionByIdDataReader( id );
            using ( simpleInt32TimeseriesPropertyDefinitionDataReader )
            {
                if ( simpleInt32TimeseriesPropertyDefinitionDataReader.Read( ) )
                {
                    var result = simpleInt32TimeseriesPropertyDefinitionDataReader.GetDataObject( );
                    return result;
                }
            }
            return null;
        }

        public void GetInt32TimeseriesPropertyDefinitionById( Guid id, Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleInt32TimeseriesPropertyDefinitionDataReader = GetInt32TimeseriesPropertyDefinitionByIdDataReader( id );
                using ( simpleInt32TimeseriesPropertyDefinitionDataReader )
                {
                    if ( simpleInt32TimeseriesPropertyDefinitionDataReader.Read( ) )
                    {
                        destinationWriter.Write( true );
                        simpleInt32TimeseriesPropertyDefinitionDataReader.WriteTo( destinationWriter );
                    }
                    else
                    {
                        destinationWriter.Write( false );
                    }
                }
            }
        }

        public SimpleInt32TimeseriesPropertyDefinitionDataReader GetInt32TimeseriesPropertyDefinitionCollectionDataReader( )
        {
            const string sql = SimpleInt32TimeseriesPropertyDefinitionDataReader.BaseQuery; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleInt32TimeseriesPropertyDefinitionDataReader = new SimpleInt32TimeseriesPropertyDefinitionDataReader( _loggerFactory, sqlDataReader );
                return simpleInt32TimeseriesPropertyDefinitionDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public IList<Int32TimeseriesPropertyDefinitionObject> GetInt32TimeseriesPropertyDefinitionCollection( )
        {
            var result = new List<Int32TimeseriesPropertyDefinitionObject>( );
            var simpleInt32TimeseriesPropertyDefinitionDataReader = GetInt32TimeseriesPropertyDefinitionCollectionDataReader( );
            using ( simpleInt32TimeseriesPropertyDefinitionDataReader )
            {
                while ( simpleInt32TimeseriesPropertyDefinitionDataReader.Read( ) )
                {
                    var data = simpleInt32TimeseriesPropertyDefinitionDataReader.GetDataObject( );
                    result.Add( data );
                }
            }
            return result;
        }

        public void GetInt32TimeseriesPropertyDefinitionCollection( Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleInt32TimeseriesPropertyDefinitionDataReader = GetInt32TimeseriesPropertyDefinitionCollectionDataReader( );
                using ( simpleInt32TimeseriesPropertyDefinitionDataReader )
                {
                    simpleInt32TimeseriesPropertyDefinitionDataReader.WriteResultSetTo( destinationWriter );
                }
            }
        }

        public SimpleInt32TimeseriesPropertyDefinitionDataReader GetInt32TimeseriesPropertyDefinitionCollectionByElementTypeDataReader( Guid elementType )
        {
            const string sql = SimpleInt32TimeseriesPropertyDefinitionDataReader.BaseQuery + " WHERE " +
                    SimpleInt32TimeseriesPropertyDefinitionDataReader.ViewAliasName + ".[ElementType] = @elementType " +
                    " ORDER BY " + SimpleInt32TimeseriesPropertyDefinitionDataReader.ViewAliasName + ".[ElementType]," +SimpleInt32TimeseriesPropertyDefinitionDataReader.ViewAliasName + ".[Name]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var elementTypeParameter = sqlCommandParameters.AddReference( "@elementType", elementType );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleInt32TimeseriesPropertyDefinitionDataReader = new SimpleInt32TimeseriesPropertyDefinitionDataReader( _loggerFactory, sqlDataReader );
                return simpleInt32TimeseriesPropertyDefinitionDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<Int32TimeseriesPropertyDefinitionObject> GetInt32TimeseriesPropertyDefinitionCollectionByElementType( Guid elementType )
        {
            throw new NotImplementedException( );
        }
        public SimpleInt32TimeseriesPropertyDefinitionDataReader GetInt32TimeseriesPropertyDefinitionByElementTypeAndNameDataReader( Guid elementType, string name )
        {
            const string sql = SimpleInt32TimeseriesPropertyDefinitionDataReader.BaseQuery + " WHERE " +
                    SimpleInt32TimeseriesPropertyDefinitionDataReader.ViewAliasName + ".[ElementType] = @elementType AND " +
                    SimpleInt32TimeseriesPropertyDefinitionDataReader.ViewAliasName + ".[Name] = @name " +
                    " ORDER BY " + SimpleInt32TimeseriesPropertyDefinitionDataReader.ViewAliasName + ".[ElementType]," +SimpleInt32TimeseriesPropertyDefinitionDataReader.ViewAliasName + ".[Name]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var elementTypeParameter = sqlCommandParameters.AddReference( "@elementType", elementType );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@name", name, 127 );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleInt32TimeseriesPropertyDefinitionDataReader = new SimpleInt32TimeseriesPropertyDefinitionDataReader( _loggerFactory, sqlDataReader );
                return simpleInt32TimeseriesPropertyDefinitionDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public Int32TimeseriesPropertyDefinitionObject? GetInt32TimeseriesPropertyDefinitionByElementTypeAndName( Guid elementType, string name )
        {
            throw new NotImplementedException( );
        }
        // ---------------------------------------------------------------------
        // Int64TimeseriesPropertyDefinition queries
        // ---------------------------------------------------------------------
        public SimpleInt64TimeseriesPropertyDefinitionDataReader GetInt64TimeseriesPropertyDefinitionByIdDataReader( Guid id )
        {
            const string sql = SimpleInt64TimeseriesPropertyDefinitionDataReader.BaseQuery + "WHERE " + SimpleInt64TimeseriesPropertyDefinitionDataReader.ViewAliasName + ".[Id] = @id"; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                sqlCommandParameters.AddGuid( "@id", id );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleInt64TimeseriesPropertyDefinitionDataReader = new SimpleInt64TimeseriesPropertyDefinitionDataReader( _loggerFactory, sqlDataReader );
                return simpleInt64TimeseriesPropertyDefinitionDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public Int64TimeseriesPropertyDefinitionObject? GetInt64TimeseriesPropertyDefinitionById( Guid id )
        {
            var simpleInt64TimeseriesPropertyDefinitionDataReader = GetInt64TimeseriesPropertyDefinitionByIdDataReader( id );
            using ( simpleInt64TimeseriesPropertyDefinitionDataReader )
            {
                if ( simpleInt64TimeseriesPropertyDefinitionDataReader.Read( ) )
                {
                    var result = simpleInt64TimeseriesPropertyDefinitionDataReader.GetDataObject( );
                    return result;
                }
            }
            return null;
        }

        public void GetInt64TimeseriesPropertyDefinitionById( Guid id, Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleInt64TimeseriesPropertyDefinitionDataReader = GetInt64TimeseriesPropertyDefinitionByIdDataReader( id );
                using ( simpleInt64TimeseriesPropertyDefinitionDataReader )
                {
                    if ( simpleInt64TimeseriesPropertyDefinitionDataReader.Read( ) )
                    {
                        destinationWriter.Write( true );
                        simpleInt64TimeseriesPropertyDefinitionDataReader.WriteTo( destinationWriter );
                    }
                    else
                    {
                        destinationWriter.Write( false );
                    }
                }
            }
        }

        public SimpleInt64TimeseriesPropertyDefinitionDataReader GetInt64TimeseriesPropertyDefinitionCollectionDataReader( )
        {
            const string sql = SimpleInt64TimeseriesPropertyDefinitionDataReader.BaseQuery; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleInt64TimeseriesPropertyDefinitionDataReader = new SimpleInt64TimeseriesPropertyDefinitionDataReader( _loggerFactory, sqlDataReader );
                return simpleInt64TimeseriesPropertyDefinitionDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public IList<Int64TimeseriesPropertyDefinitionObject> GetInt64TimeseriesPropertyDefinitionCollection( )
        {
            var result = new List<Int64TimeseriesPropertyDefinitionObject>( );
            var simpleInt64TimeseriesPropertyDefinitionDataReader = GetInt64TimeseriesPropertyDefinitionCollectionDataReader( );
            using ( simpleInt64TimeseriesPropertyDefinitionDataReader )
            {
                while ( simpleInt64TimeseriesPropertyDefinitionDataReader.Read( ) )
                {
                    var data = simpleInt64TimeseriesPropertyDefinitionDataReader.GetDataObject( );
                    result.Add( data );
                }
            }
            return result;
        }

        public void GetInt64TimeseriesPropertyDefinitionCollection( Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleInt64TimeseriesPropertyDefinitionDataReader = GetInt64TimeseriesPropertyDefinitionCollectionDataReader( );
                using ( simpleInt64TimeseriesPropertyDefinitionDataReader )
                {
                    simpleInt64TimeseriesPropertyDefinitionDataReader.WriteResultSetTo( destinationWriter );
                }
            }
        }

        public SimpleInt64TimeseriesPropertyDefinitionDataReader GetInt64TimeseriesPropertyDefinitionCollectionByElementTypeDataReader( Guid elementType )
        {
            const string sql = SimpleInt64TimeseriesPropertyDefinitionDataReader.BaseQuery + " WHERE " +
                    SimpleInt64TimeseriesPropertyDefinitionDataReader.ViewAliasName + ".[ElementType] = @elementType " +
                    " ORDER BY " + SimpleInt64TimeseriesPropertyDefinitionDataReader.ViewAliasName + ".[ElementType]," +SimpleInt64TimeseriesPropertyDefinitionDataReader.ViewAliasName + ".[Name]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var elementTypeParameter = sqlCommandParameters.AddReference( "@elementType", elementType );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleInt64TimeseriesPropertyDefinitionDataReader = new SimpleInt64TimeseriesPropertyDefinitionDataReader( _loggerFactory, sqlDataReader );
                return simpleInt64TimeseriesPropertyDefinitionDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<Int64TimeseriesPropertyDefinitionObject> GetInt64TimeseriesPropertyDefinitionCollectionByElementType( Guid elementType )
        {
            throw new NotImplementedException( );
        }
        public SimpleInt64TimeseriesPropertyDefinitionDataReader GetInt64TimeseriesPropertyDefinitionByElementTypeAndNameDataReader( Guid elementType, string name )
        {
            const string sql = SimpleInt64TimeseriesPropertyDefinitionDataReader.BaseQuery + " WHERE " +
                    SimpleInt64TimeseriesPropertyDefinitionDataReader.ViewAliasName + ".[ElementType] = @elementType AND " +
                    SimpleInt64TimeseriesPropertyDefinitionDataReader.ViewAliasName + ".[Name] = @name " +
                    " ORDER BY " + SimpleInt64TimeseriesPropertyDefinitionDataReader.ViewAliasName + ".[ElementType]," +SimpleInt64TimeseriesPropertyDefinitionDataReader.ViewAliasName + ".[Name]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var elementTypeParameter = sqlCommandParameters.AddReference( "@elementType", elementType );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@name", name, 127 );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleInt64TimeseriesPropertyDefinitionDataReader = new SimpleInt64TimeseriesPropertyDefinitionDataReader( _loggerFactory, sqlDataReader );
                return simpleInt64TimeseriesPropertyDefinitionDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public Int64TimeseriesPropertyDefinitionObject? GetInt64TimeseriesPropertyDefinitionByElementTypeAndName( Guid elementType, string name )
        {
            throw new NotImplementedException( );
        }
        // ---------------------------------------------------------------------
        // ReferenceTimeseriesPropertyDefinition queries
        // ---------------------------------------------------------------------
        public SimpleReferenceTimeseriesPropertyDefinitionDataReader GetReferenceTimeseriesPropertyDefinitionByIdDataReader( Guid id )
        {
            const string sql = SimpleReferenceTimeseriesPropertyDefinitionDataReader.BaseQuery + "WHERE " + SimpleReferenceTimeseriesPropertyDefinitionDataReader.ViewAliasName + ".[Id] = @id"; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                sqlCommandParameters.AddGuid( "@id", id );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleReferenceTimeseriesPropertyDefinitionDataReader = new SimpleReferenceTimeseriesPropertyDefinitionDataReader( _loggerFactory, sqlDataReader );
                return simpleReferenceTimeseriesPropertyDefinitionDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public ReferenceTimeseriesPropertyDefinitionObject? GetReferenceTimeseriesPropertyDefinitionById( Guid id )
        {
            var simpleReferenceTimeseriesPropertyDefinitionDataReader = GetReferenceTimeseriesPropertyDefinitionByIdDataReader( id );
            using ( simpleReferenceTimeseriesPropertyDefinitionDataReader )
            {
                if ( simpleReferenceTimeseriesPropertyDefinitionDataReader.Read( ) )
                {
                    var result = simpleReferenceTimeseriesPropertyDefinitionDataReader.GetDataObject( );
                    return result;
                }
            }
            return null;
        }

        public void GetReferenceTimeseriesPropertyDefinitionById( Guid id, Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleReferenceTimeseriesPropertyDefinitionDataReader = GetReferenceTimeseriesPropertyDefinitionByIdDataReader( id );
                using ( simpleReferenceTimeseriesPropertyDefinitionDataReader )
                {
                    if ( simpleReferenceTimeseriesPropertyDefinitionDataReader.Read( ) )
                    {
                        destinationWriter.Write( true );
                        simpleReferenceTimeseriesPropertyDefinitionDataReader.WriteTo( destinationWriter );
                    }
                    else
                    {
                        destinationWriter.Write( false );
                    }
                }
            }
        }

        public SimpleReferenceTimeseriesPropertyDefinitionDataReader GetReferenceTimeseriesPropertyDefinitionCollectionDataReader( )
        {
            const string sql = SimpleReferenceTimeseriesPropertyDefinitionDataReader.BaseQuery; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleReferenceTimeseriesPropertyDefinitionDataReader = new SimpleReferenceTimeseriesPropertyDefinitionDataReader( _loggerFactory, sqlDataReader );
                return simpleReferenceTimeseriesPropertyDefinitionDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public IList<ReferenceTimeseriesPropertyDefinitionObject> GetReferenceTimeseriesPropertyDefinitionCollection( )
        {
            var result = new List<ReferenceTimeseriesPropertyDefinitionObject>( );
            var simpleReferenceTimeseriesPropertyDefinitionDataReader = GetReferenceTimeseriesPropertyDefinitionCollectionDataReader( );
            using ( simpleReferenceTimeseriesPropertyDefinitionDataReader )
            {
                while ( simpleReferenceTimeseriesPropertyDefinitionDataReader.Read( ) )
                {
                    var data = simpleReferenceTimeseriesPropertyDefinitionDataReader.GetDataObject( );
                    result.Add( data );
                }
            }
            return result;
        }

        public void GetReferenceTimeseriesPropertyDefinitionCollection( Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleReferenceTimeseriesPropertyDefinitionDataReader = GetReferenceTimeseriesPropertyDefinitionCollectionDataReader( );
                using ( simpleReferenceTimeseriesPropertyDefinitionDataReader )
                {
                    simpleReferenceTimeseriesPropertyDefinitionDataReader.WriteResultSetTo( destinationWriter );
                }
            }
        }

        public SimpleReferenceTimeseriesPropertyDefinitionDataReader GetReferenceTimeseriesPropertyDefinitionCollectionByElementTypeDataReader( Guid elementType )
        {
            const string sql = SimpleReferenceTimeseriesPropertyDefinitionDataReader.BaseQuery + " WHERE " +
                    SimpleReferenceTimeseriesPropertyDefinitionDataReader.ViewAliasName + ".[ElementType] = @elementType " +
                    " ORDER BY " + SimpleReferenceTimeseriesPropertyDefinitionDataReader.ViewAliasName + ".[ElementType]," +SimpleReferenceTimeseriesPropertyDefinitionDataReader.ViewAliasName + ".[Name]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var elementTypeParameter = sqlCommandParameters.AddReference( "@elementType", elementType );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleReferenceTimeseriesPropertyDefinitionDataReader = new SimpleReferenceTimeseriesPropertyDefinitionDataReader( _loggerFactory, sqlDataReader );
                return simpleReferenceTimeseriesPropertyDefinitionDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<ReferenceTimeseriesPropertyDefinitionObject> GetReferenceTimeseriesPropertyDefinitionCollectionByElementType( Guid elementType )
        {
            throw new NotImplementedException( );
        }
        public SimpleReferenceTimeseriesPropertyDefinitionDataReader GetReferenceTimeseriesPropertyDefinitionByElementTypeAndNameDataReader( Guid elementType, string name )
        {
            const string sql = SimpleReferenceTimeseriesPropertyDefinitionDataReader.BaseQuery + " WHERE " +
                    SimpleReferenceTimeseriesPropertyDefinitionDataReader.ViewAliasName + ".[ElementType] = @elementType AND " +
                    SimpleReferenceTimeseriesPropertyDefinitionDataReader.ViewAliasName + ".[Name] = @name " +
                    " ORDER BY " + SimpleReferenceTimeseriesPropertyDefinitionDataReader.ViewAliasName + ".[ElementType]," +SimpleReferenceTimeseriesPropertyDefinitionDataReader.ViewAliasName + ".[Name]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var elementTypeParameter = sqlCommandParameters.AddReference( "@elementType", elementType );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@name", name, 127 );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleReferenceTimeseriesPropertyDefinitionDataReader = new SimpleReferenceTimeseriesPropertyDefinitionDataReader( _loggerFactory, sqlDataReader );
                return simpleReferenceTimeseriesPropertyDefinitionDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public ReferenceTimeseriesPropertyDefinitionObject? GetReferenceTimeseriesPropertyDefinitionByElementTypeAndName( Guid elementType, string name )
        {
            throw new NotImplementedException( );
        }
        public SimpleReferenceTimeseriesPropertyDefinitionDataReader GetReferenceTimeseriesPropertyDefinitionCollectionByReferencedElementTypeDataReader( Guid referencedElementType )
        {
            const string sql = SimpleReferenceTimeseriesPropertyDefinitionDataReader.BaseQuery + " WHERE " +
                    SimpleReferenceTimeseriesPropertyDefinitionDataReader.ViewAliasName + ".[ReferencedElementType] = @referencedElementType " +
                    " ORDER BY " + SimpleReferenceTimeseriesPropertyDefinitionDataReader.ViewAliasName + ".[ReferencedElementType]," +SimpleReferenceTimeseriesPropertyDefinitionDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var referencedElementTypeParameter = sqlCommandParameters.AddReference( "@referencedElementType", referencedElementType );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleReferenceTimeseriesPropertyDefinitionDataReader = new SimpleReferenceTimeseriesPropertyDefinitionDataReader( _loggerFactory, sqlDataReader );
                return simpleReferenceTimeseriesPropertyDefinitionDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<ReferenceTimeseriesPropertyDefinitionObject> GetReferenceTimeseriesPropertyDefinitionCollectionByReferencedElementType( Guid referencedElementType )
        {
            throw new NotImplementedException( );
        }
        // ---------------------------------------------------------------------
        // SByteTimeseriesPropertyDefinition queries
        // ---------------------------------------------------------------------
        public SimpleSByteTimeseriesPropertyDefinitionDataReader GetSByteTimeseriesPropertyDefinitionByIdDataReader( Guid id )
        {
            const string sql = SimpleSByteTimeseriesPropertyDefinitionDataReader.BaseQuery + "WHERE " + SimpleSByteTimeseriesPropertyDefinitionDataReader.ViewAliasName + ".[Id] = @id"; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                sqlCommandParameters.AddGuid( "@id", id );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleSByteTimeseriesPropertyDefinitionDataReader = new SimpleSByteTimeseriesPropertyDefinitionDataReader( _loggerFactory, sqlDataReader );
                return simpleSByteTimeseriesPropertyDefinitionDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public SByteTimeseriesPropertyDefinitionObject? GetSByteTimeseriesPropertyDefinitionById( Guid id )
        {
            var simpleSByteTimeseriesPropertyDefinitionDataReader = GetSByteTimeseriesPropertyDefinitionByIdDataReader( id );
            using ( simpleSByteTimeseriesPropertyDefinitionDataReader )
            {
                if ( simpleSByteTimeseriesPropertyDefinitionDataReader.Read( ) )
                {
                    var result = simpleSByteTimeseriesPropertyDefinitionDataReader.GetDataObject( );
                    return result;
                }
            }
            return null;
        }

        public void GetSByteTimeseriesPropertyDefinitionById( Guid id, Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleSByteTimeseriesPropertyDefinitionDataReader = GetSByteTimeseriesPropertyDefinitionByIdDataReader( id );
                using ( simpleSByteTimeseriesPropertyDefinitionDataReader )
                {
                    if ( simpleSByteTimeseriesPropertyDefinitionDataReader.Read( ) )
                    {
                        destinationWriter.Write( true );
                        simpleSByteTimeseriesPropertyDefinitionDataReader.WriteTo( destinationWriter );
                    }
                    else
                    {
                        destinationWriter.Write( false );
                    }
                }
            }
        }

        public SimpleSByteTimeseriesPropertyDefinitionDataReader GetSByteTimeseriesPropertyDefinitionCollectionDataReader( )
        {
            const string sql = SimpleSByteTimeseriesPropertyDefinitionDataReader.BaseQuery; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleSByteTimeseriesPropertyDefinitionDataReader = new SimpleSByteTimeseriesPropertyDefinitionDataReader( _loggerFactory, sqlDataReader );
                return simpleSByteTimeseriesPropertyDefinitionDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public IList<SByteTimeseriesPropertyDefinitionObject> GetSByteTimeseriesPropertyDefinitionCollection( )
        {
            var result = new List<SByteTimeseriesPropertyDefinitionObject>( );
            var simpleSByteTimeseriesPropertyDefinitionDataReader = GetSByteTimeseriesPropertyDefinitionCollectionDataReader( );
            using ( simpleSByteTimeseriesPropertyDefinitionDataReader )
            {
                while ( simpleSByteTimeseriesPropertyDefinitionDataReader.Read( ) )
                {
                    var data = simpleSByteTimeseriesPropertyDefinitionDataReader.GetDataObject( );
                    result.Add( data );
                }
            }
            return result;
        }

        public void GetSByteTimeseriesPropertyDefinitionCollection( Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleSByteTimeseriesPropertyDefinitionDataReader = GetSByteTimeseriesPropertyDefinitionCollectionDataReader( );
                using ( simpleSByteTimeseriesPropertyDefinitionDataReader )
                {
                    simpleSByteTimeseriesPropertyDefinitionDataReader.WriteResultSetTo( destinationWriter );
                }
            }
        }

        public SimpleSByteTimeseriesPropertyDefinitionDataReader GetSByteTimeseriesPropertyDefinitionCollectionByElementTypeDataReader( Guid elementType )
        {
            const string sql = SimpleSByteTimeseriesPropertyDefinitionDataReader.BaseQuery + " WHERE " +
                    SimpleSByteTimeseriesPropertyDefinitionDataReader.ViewAliasName + ".[ElementType] = @elementType " +
                    " ORDER BY " + SimpleSByteTimeseriesPropertyDefinitionDataReader.ViewAliasName + ".[ElementType]," +SimpleSByteTimeseriesPropertyDefinitionDataReader.ViewAliasName + ".[Name]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var elementTypeParameter = sqlCommandParameters.AddReference( "@elementType", elementType );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleSByteTimeseriesPropertyDefinitionDataReader = new SimpleSByteTimeseriesPropertyDefinitionDataReader( _loggerFactory, sqlDataReader );
                return simpleSByteTimeseriesPropertyDefinitionDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<SByteTimeseriesPropertyDefinitionObject> GetSByteTimeseriesPropertyDefinitionCollectionByElementType( Guid elementType )
        {
            throw new NotImplementedException( );
        }
        public SimpleSByteTimeseriesPropertyDefinitionDataReader GetSByteTimeseriesPropertyDefinitionByElementTypeAndNameDataReader( Guid elementType, string name )
        {
            const string sql = SimpleSByteTimeseriesPropertyDefinitionDataReader.BaseQuery + " WHERE " +
                    SimpleSByteTimeseriesPropertyDefinitionDataReader.ViewAliasName + ".[ElementType] = @elementType AND " +
                    SimpleSByteTimeseriesPropertyDefinitionDataReader.ViewAliasName + ".[Name] = @name " +
                    " ORDER BY " + SimpleSByteTimeseriesPropertyDefinitionDataReader.ViewAliasName + ".[ElementType]," +SimpleSByteTimeseriesPropertyDefinitionDataReader.ViewAliasName + ".[Name]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var elementTypeParameter = sqlCommandParameters.AddReference( "@elementType", elementType );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@name", name, 127 );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleSByteTimeseriesPropertyDefinitionDataReader = new SimpleSByteTimeseriesPropertyDefinitionDataReader( _loggerFactory, sqlDataReader );
                return simpleSByteTimeseriesPropertyDefinitionDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public SByteTimeseriesPropertyDefinitionObject? GetSByteTimeseriesPropertyDefinitionByElementTypeAndName( Guid elementType, string name )
        {
            throw new NotImplementedException( );
        }
        // ---------------------------------------------------------------------
        // SingleTimeseriesPropertyDefinition queries
        // ---------------------------------------------------------------------
        public SimpleSingleTimeseriesPropertyDefinitionDataReader GetSingleTimeseriesPropertyDefinitionByIdDataReader( Guid id )
        {
            const string sql = SimpleSingleTimeseriesPropertyDefinitionDataReader.BaseQuery + "WHERE " + SimpleSingleTimeseriesPropertyDefinitionDataReader.ViewAliasName + ".[Id] = @id"; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                sqlCommandParameters.AddGuid( "@id", id );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleSingleTimeseriesPropertyDefinitionDataReader = new SimpleSingleTimeseriesPropertyDefinitionDataReader( _loggerFactory, sqlDataReader );
                return simpleSingleTimeseriesPropertyDefinitionDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public SingleTimeseriesPropertyDefinitionObject? GetSingleTimeseriesPropertyDefinitionById( Guid id )
        {
            var simpleSingleTimeseriesPropertyDefinitionDataReader = GetSingleTimeseriesPropertyDefinitionByIdDataReader( id );
            using ( simpleSingleTimeseriesPropertyDefinitionDataReader )
            {
                if ( simpleSingleTimeseriesPropertyDefinitionDataReader.Read( ) )
                {
                    var result = simpleSingleTimeseriesPropertyDefinitionDataReader.GetDataObject( );
                    return result;
                }
            }
            return null;
        }

        public void GetSingleTimeseriesPropertyDefinitionById( Guid id, Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleSingleTimeseriesPropertyDefinitionDataReader = GetSingleTimeseriesPropertyDefinitionByIdDataReader( id );
                using ( simpleSingleTimeseriesPropertyDefinitionDataReader )
                {
                    if ( simpleSingleTimeseriesPropertyDefinitionDataReader.Read( ) )
                    {
                        destinationWriter.Write( true );
                        simpleSingleTimeseriesPropertyDefinitionDataReader.WriteTo( destinationWriter );
                    }
                    else
                    {
                        destinationWriter.Write( false );
                    }
                }
            }
        }

        public SimpleSingleTimeseriesPropertyDefinitionDataReader GetSingleTimeseriesPropertyDefinitionCollectionDataReader( )
        {
            const string sql = SimpleSingleTimeseriesPropertyDefinitionDataReader.BaseQuery; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleSingleTimeseriesPropertyDefinitionDataReader = new SimpleSingleTimeseriesPropertyDefinitionDataReader( _loggerFactory, sqlDataReader );
                return simpleSingleTimeseriesPropertyDefinitionDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public IList<SingleTimeseriesPropertyDefinitionObject> GetSingleTimeseriesPropertyDefinitionCollection( )
        {
            var result = new List<SingleTimeseriesPropertyDefinitionObject>( );
            var simpleSingleTimeseriesPropertyDefinitionDataReader = GetSingleTimeseriesPropertyDefinitionCollectionDataReader( );
            using ( simpleSingleTimeseriesPropertyDefinitionDataReader )
            {
                while ( simpleSingleTimeseriesPropertyDefinitionDataReader.Read( ) )
                {
                    var data = simpleSingleTimeseriesPropertyDefinitionDataReader.GetDataObject( );
                    result.Add( data );
                }
            }
            return result;
        }

        public void GetSingleTimeseriesPropertyDefinitionCollection( Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleSingleTimeseriesPropertyDefinitionDataReader = GetSingleTimeseriesPropertyDefinitionCollectionDataReader( );
                using ( simpleSingleTimeseriesPropertyDefinitionDataReader )
                {
                    simpleSingleTimeseriesPropertyDefinitionDataReader.WriteResultSetTo( destinationWriter );
                }
            }
        }

        public SimpleSingleTimeseriesPropertyDefinitionDataReader GetSingleTimeseriesPropertyDefinitionCollectionByElementTypeDataReader( Guid elementType )
        {
            const string sql = SimpleSingleTimeseriesPropertyDefinitionDataReader.BaseQuery + " WHERE " +
                    SimpleSingleTimeseriesPropertyDefinitionDataReader.ViewAliasName + ".[ElementType] = @elementType " +
                    " ORDER BY " + SimpleSingleTimeseriesPropertyDefinitionDataReader.ViewAliasName + ".[ElementType]," +SimpleSingleTimeseriesPropertyDefinitionDataReader.ViewAliasName + ".[Name]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var elementTypeParameter = sqlCommandParameters.AddReference( "@elementType", elementType );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleSingleTimeseriesPropertyDefinitionDataReader = new SimpleSingleTimeseriesPropertyDefinitionDataReader( _loggerFactory, sqlDataReader );
                return simpleSingleTimeseriesPropertyDefinitionDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<SingleTimeseriesPropertyDefinitionObject> GetSingleTimeseriesPropertyDefinitionCollectionByElementType( Guid elementType )
        {
            throw new NotImplementedException( );
        }
        public SimpleSingleTimeseriesPropertyDefinitionDataReader GetSingleTimeseriesPropertyDefinitionByElementTypeAndNameDataReader( Guid elementType, string name )
        {
            const string sql = SimpleSingleTimeseriesPropertyDefinitionDataReader.BaseQuery + " WHERE " +
                    SimpleSingleTimeseriesPropertyDefinitionDataReader.ViewAliasName + ".[ElementType] = @elementType AND " +
                    SimpleSingleTimeseriesPropertyDefinitionDataReader.ViewAliasName + ".[Name] = @name " +
                    " ORDER BY " + SimpleSingleTimeseriesPropertyDefinitionDataReader.ViewAliasName + ".[ElementType]," +SimpleSingleTimeseriesPropertyDefinitionDataReader.ViewAliasName + ".[Name]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var elementTypeParameter = sqlCommandParameters.AddReference( "@elementType", elementType );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@name", name, 127 );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleSingleTimeseriesPropertyDefinitionDataReader = new SimpleSingleTimeseriesPropertyDefinitionDataReader( _loggerFactory, sqlDataReader );
                return simpleSingleTimeseriesPropertyDefinitionDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public SingleTimeseriesPropertyDefinitionObject? GetSingleTimeseriesPropertyDefinitionByElementTypeAndName( Guid elementType, string name )
        {
            throw new NotImplementedException( );
        }
        // ---------------------------------------------------------------------
        // StringTimeseriesPropertyDefinition queries
        // ---------------------------------------------------------------------
        public SimpleStringTimeseriesPropertyDefinitionDataReader GetStringTimeseriesPropertyDefinitionByIdDataReader( Guid id )
        {
            const string sql = SimpleStringTimeseriesPropertyDefinitionDataReader.BaseQuery + "WHERE " + SimpleStringTimeseriesPropertyDefinitionDataReader.ViewAliasName + ".[Id] = @id"; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                sqlCommandParameters.AddGuid( "@id", id );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleStringTimeseriesPropertyDefinitionDataReader = new SimpleStringTimeseriesPropertyDefinitionDataReader( _loggerFactory, sqlDataReader );
                return simpleStringTimeseriesPropertyDefinitionDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public StringTimeseriesPropertyDefinitionObject? GetStringTimeseriesPropertyDefinitionById( Guid id )
        {
            var simpleStringTimeseriesPropertyDefinitionDataReader = GetStringTimeseriesPropertyDefinitionByIdDataReader( id );
            using ( simpleStringTimeseriesPropertyDefinitionDataReader )
            {
                if ( simpleStringTimeseriesPropertyDefinitionDataReader.Read( ) )
                {
                    var result = simpleStringTimeseriesPropertyDefinitionDataReader.GetDataObject( );
                    return result;
                }
            }
            return null;
        }

        public void GetStringTimeseriesPropertyDefinitionById( Guid id, Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleStringTimeseriesPropertyDefinitionDataReader = GetStringTimeseriesPropertyDefinitionByIdDataReader( id );
                using ( simpleStringTimeseriesPropertyDefinitionDataReader )
                {
                    if ( simpleStringTimeseriesPropertyDefinitionDataReader.Read( ) )
                    {
                        destinationWriter.Write( true );
                        simpleStringTimeseriesPropertyDefinitionDataReader.WriteTo( destinationWriter );
                    }
                    else
                    {
                        destinationWriter.Write( false );
                    }
                }
            }
        }

        public SimpleStringTimeseriesPropertyDefinitionDataReader GetStringTimeseriesPropertyDefinitionCollectionDataReader( )
        {
            const string sql = SimpleStringTimeseriesPropertyDefinitionDataReader.BaseQuery; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleStringTimeseriesPropertyDefinitionDataReader = new SimpleStringTimeseriesPropertyDefinitionDataReader( _loggerFactory, sqlDataReader );
                return simpleStringTimeseriesPropertyDefinitionDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public IList<StringTimeseriesPropertyDefinitionObject> GetStringTimeseriesPropertyDefinitionCollection( )
        {
            var result = new List<StringTimeseriesPropertyDefinitionObject>( );
            var simpleStringTimeseriesPropertyDefinitionDataReader = GetStringTimeseriesPropertyDefinitionCollectionDataReader( );
            using ( simpleStringTimeseriesPropertyDefinitionDataReader )
            {
                while ( simpleStringTimeseriesPropertyDefinitionDataReader.Read( ) )
                {
                    var data = simpleStringTimeseriesPropertyDefinitionDataReader.GetDataObject( );
                    result.Add( data );
                }
            }
            return result;
        }

        public void GetStringTimeseriesPropertyDefinitionCollection( Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleStringTimeseriesPropertyDefinitionDataReader = GetStringTimeseriesPropertyDefinitionCollectionDataReader( );
                using ( simpleStringTimeseriesPropertyDefinitionDataReader )
                {
                    simpleStringTimeseriesPropertyDefinitionDataReader.WriteResultSetTo( destinationWriter );
                }
            }
        }

        public SimpleStringTimeseriesPropertyDefinitionDataReader GetStringTimeseriesPropertyDefinitionCollectionByElementTypeDataReader( Guid elementType )
        {
            const string sql = SimpleStringTimeseriesPropertyDefinitionDataReader.BaseQuery + " WHERE " +
                    SimpleStringTimeseriesPropertyDefinitionDataReader.ViewAliasName + ".[ElementType] = @elementType " +
                    " ORDER BY " + SimpleStringTimeseriesPropertyDefinitionDataReader.ViewAliasName + ".[ElementType]," +SimpleStringTimeseriesPropertyDefinitionDataReader.ViewAliasName + ".[Name]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var elementTypeParameter = sqlCommandParameters.AddReference( "@elementType", elementType );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleStringTimeseriesPropertyDefinitionDataReader = new SimpleStringTimeseriesPropertyDefinitionDataReader( _loggerFactory, sqlDataReader );
                return simpleStringTimeseriesPropertyDefinitionDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<StringTimeseriesPropertyDefinitionObject> GetStringTimeseriesPropertyDefinitionCollectionByElementType( Guid elementType )
        {
            throw new NotImplementedException( );
        }
        public SimpleStringTimeseriesPropertyDefinitionDataReader GetStringTimeseriesPropertyDefinitionByElementTypeAndNameDataReader( Guid elementType, string name )
        {
            const string sql = SimpleStringTimeseriesPropertyDefinitionDataReader.BaseQuery + " WHERE " +
                    SimpleStringTimeseriesPropertyDefinitionDataReader.ViewAliasName + ".[ElementType] = @elementType AND " +
                    SimpleStringTimeseriesPropertyDefinitionDataReader.ViewAliasName + ".[Name] = @name " +
                    " ORDER BY " + SimpleStringTimeseriesPropertyDefinitionDataReader.ViewAliasName + ".[ElementType]," +SimpleStringTimeseriesPropertyDefinitionDataReader.ViewAliasName + ".[Name]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var elementTypeParameter = sqlCommandParameters.AddReference( "@elementType", elementType );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@name", name, 127 );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleStringTimeseriesPropertyDefinitionDataReader = new SimpleStringTimeseriesPropertyDefinitionDataReader( _loggerFactory, sqlDataReader );
                return simpleStringTimeseriesPropertyDefinitionDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public StringTimeseriesPropertyDefinitionObject? GetStringTimeseriesPropertyDefinitionByElementTypeAndName( Guid elementType, string name )
        {
            throw new NotImplementedException( );
        }
        // ---------------------------------------------------------------------
        // TimeSpanTimeseriesPropertyDefinition queries
        // ---------------------------------------------------------------------
        public SimpleTimeSpanTimeseriesPropertyDefinitionDataReader GetTimeSpanTimeseriesPropertyDefinitionByIdDataReader( Guid id )
        {
            const string sql = SimpleTimeSpanTimeseriesPropertyDefinitionDataReader.BaseQuery + "WHERE " + SimpleTimeSpanTimeseriesPropertyDefinitionDataReader.ViewAliasName + ".[Id] = @id"; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                sqlCommandParameters.AddGuid( "@id", id );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleTimeSpanTimeseriesPropertyDefinitionDataReader = new SimpleTimeSpanTimeseriesPropertyDefinitionDataReader( _loggerFactory, sqlDataReader );
                return simpleTimeSpanTimeseriesPropertyDefinitionDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public TimeSpanTimeseriesPropertyDefinitionObject? GetTimeSpanTimeseriesPropertyDefinitionById( Guid id )
        {
            var simpleTimeSpanTimeseriesPropertyDefinitionDataReader = GetTimeSpanTimeseriesPropertyDefinitionByIdDataReader( id );
            using ( simpleTimeSpanTimeseriesPropertyDefinitionDataReader )
            {
                if ( simpleTimeSpanTimeseriesPropertyDefinitionDataReader.Read( ) )
                {
                    var result = simpleTimeSpanTimeseriesPropertyDefinitionDataReader.GetDataObject( );
                    return result;
                }
            }
            return null;
        }

        public void GetTimeSpanTimeseriesPropertyDefinitionById( Guid id, Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleTimeSpanTimeseriesPropertyDefinitionDataReader = GetTimeSpanTimeseriesPropertyDefinitionByIdDataReader( id );
                using ( simpleTimeSpanTimeseriesPropertyDefinitionDataReader )
                {
                    if ( simpleTimeSpanTimeseriesPropertyDefinitionDataReader.Read( ) )
                    {
                        destinationWriter.Write( true );
                        simpleTimeSpanTimeseriesPropertyDefinitionDataReader.WriteTo( destinationWriter );
                    }
                    else
                    {
                        destinationWriter.Write( false );
                    }
                }
            }
        }

        public SimpleTimeSpanTimeseriesPropertyDefinitionDataReader GetTimeSpanTimeseriesPropertyDefinitionCollectionDataReader( )
        {
            const string sql = SimpleTimeSpanTimeseriesPropertyDefinitionDataReader.BaseQuery; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleTimeSpanTimeseriesPropertyDefinitionDataReader = new SimpleTimeSpanTimeseriesPropertyDefinitionDataReader( _loggerFactory, sqlDataReader );
                return simpleTimeSpanTimeseriesPropertyDefinitionDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public IList<TimeSpanTimeseriesPropertyDefinitionObject> GetTimeSpanTimeseriesPropertyDefinitionCollection( )
        {
            var result = new List<TimeSpanTimeseriesPropertyDefinitionObject>( );
            var simpleTimeSpanTimeseriesPropertyDefinitionDataReader = GetTimeSpanTimeseriesPropertyDefinitionCollectionDataReader( );
            using ( simpleTimeSpanTimeseriesPropertyDefinitionDataReader )
            {
                while ( simpleTimeSpanTimeseriesPropertyDefinitionDataReader.Read( ) )
                {
                    var data = simpleTimeSpanTimeseriesPropertyDefinitionDataReader.GetDataObject( );
                    result.Add( data );
                }
            }
            return result;
        }

        public void GetTimeSpanTimeseriesPropertyDefinitionCollection( Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleTimeSpanTimeseriesPropertyDefinitionDataReader = GetTimeSpanTimeseriesPropertyDefinitionCollectionDataReader( );
                using ( simpleTimeSpanTimeseriesPropertyDefinitionDataReader )
                {
                    simpleTimeSpanTimeseriesPropertyDefinitionDataReader.WriteResultSetTo( destinationWriter );
                }
            }
        }

        public SimpleTimeSpanTimeseriesPropertyDefinitionDataReader GetTimeSpanTimeseriesPropertyDefinitionCollectionByElementTypeDataReader( Guid elementType )
        {
            const string sql = SimpleTimeSpanTimeseriesPropertyDefinitionDataReader.BaseQuery + " WHERE " +
                    SimpleTimeSpanTimeseriesPropertyDefinitionDataReader.ViewAliasName + ".[ElementType] = @elementType " +
                    " ORDER BY " + SimpleTimeSpanTimeseriesPropertyDefinitionDataReader.ViewAliasName + ".[ElementType]," +SimpleTimeSpanTimeseriesPropertyDefinitionDataReader.ViewAliasName + ".[Name]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var elementTypeParameter = sqlCommandParameters.AddReference( "@elementType", elementType );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleTimeSpanTimeseriesPropertyDefinitionDataReader = new SimpleTimeSpanTimeseriesPropertyDefinitionDataReader( _loggerFactory, sqlDataReader );
                return simpleTimeSpanTimeseriesPropertyDefinitionDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<TimeSpanTimeseriesPropertyDefinitionObject> GetTimeSpanTimeseriesPropertyDefinitionCollectionByElementType( Guid elementType )
        {
            throw new NotImplementedException( );
        }
        public SimpleTimeSpanTimeseriesPropertyDefinitionDataReader GetTimeSpanTimeseriesPropertyDefinitionByElementTypeAndNameDataReader( Guid elementType, string name )
        {
            const string sql = SimpleTimeSpanTimeseriesPropertyDefinitionDataReader.BaseQuery + " WHERE " +
                    SimpleTimeSpanTimeseriesPropertyDefinitionDataReader.ViewAliasName + ".[ElementType] = @elementType AND " +
                    SimpleTimeSpanTimeseriesPropertyDefinitionDataReader.ViewAliasName + ".[Name] = @name " +
                    " ORDER BY " + SimpleTimeSpanTimeseriesPropertyDefinitionDataReader.ViewAliasName + ".[ElementType]," +SimpleTimeSpanTimeseriesPropertyDefinitionDataReader.ViewAliasName + ".[Name]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var elementTypeParameter = sqlCommandParameters.AddReference( "@elementType", elementType );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@name", name, 127 );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleTimeSpanTimeseriesPropertyDefinitionDataReader = new SimpleTimeSpanTimeseriesPropertyDefinitionDataReader( _loggerFactory, sqlDataReader );
                return simpleTimeSpanTimeseriesPropertyDefinitionDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public TimeSpanTimeseriesPropertyDefinitionObject? GetTimeSpanTimeseriesPropertyDefinitionByElementTypeAndName( Guid elementType, string name )
        {
            throw new NotImplementedException( );
        }
        // ---------------------------------------------------------------------
        // UInt16TimeseriesPropertyDefinition queries
        // ---------------------------------------------------------------------
        public SimpleUInt16TimeseriesPropertyDefinitionDataReader GetUInt16TimeseriesPropertyDefinitionByIdDataReader( Guid id )
        {
            const string sql = SimpleUInt16TimeseriesPropertyDefinitionDataReader.BaseQuery + "WHERE " + SimpleUInt16TimeseriesPropertyDefinitionDataReader.ViewAliasName + ".[Id] = @id"; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                sqlCommandParameters.AddGuid( "@id", id );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleUInt16TimeseriesPropertyDefinitionDataReader = new SimpleUInt16TimeseriesPropertyDefinitionDataReader( _loggerFactory, sqlDataReader );
                return simpleUInt16TimeseriesPropertyDefinitionDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public UInt16TimeseriesPropertyDefinitionObject? GetUInt16TimeseriesPropertyDefinitionById( Guid id )
        {
            var simpleUInt16TimeseriesPropertyDefinitionDataReader = GetUInt16TimeseriesPropertyDefinitionByIdDataReader( id );
            using ( simpleUInt16TimeseriesPropertyDefinitionDataReader )
            {
                if ( simpleUInt16TimeseriesPropertyDefinitionDataReader.Read( ) )
                {
                    var result = simpleUInt16TimeseriesPropertyDefinitionDataReader.GetDataObject( );
                    return result;
                }
            }
            return null;
        }

        public void GetUInt16TimeseriesPropertyDefinitionById( Guid id, Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleUInt16TimeseriesPropertyDefinitionDataReader = GetUInt16TimeseriesPropertyDefinitionByIdDataReader( id );
                using ( simpleUInt16TimeseriesPropertyDefinitionDataReader )
                {
                    if ( simpleUInt16TimeseriesPropertyDefinitionDataReader.Read( ) )
                    {
                        destinationWriter.Write( true );
                        simpleUInt16TimeseriesPropertyDefinitionDataReader.WriteTo( destinationWriter );
                    }
                    else
                    {
                        destinationWriter.Write( false );
                    }
                }
            }
        }

        public SimpleUInt16TimeseriesPropertyDefinitionDataReader GetUInt16TimeseriesPropertyDefinitionCollectionDataReader( )
        {
            const string sql = SimpleUInt16TimeseriesPropertyDefinitionDataReader.BaseQuery; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleUInt16TimeseriesPropertyDefinitionDataReader = new SimpleUInt16TimeseriesPropertyDefinitionDataReader( _loggerFactory, sqlDataReader );
                return simpleUInt16TimeseriesPropertyDefinitionDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public IList<UInt16TimeseriesPropertyDefinitionObject> GetUInt16TimeseriesPropertyDefinitionCollection( )
        {
            var result = new List<UInt16TimeseriesPropertyDefinitionObject>( );
            var simpleUInt16TimeseriesPropertyDefinitionDataReader = GetUInt16TimeseriesPropertyDefinitionCollectionDataReader( );
            using ( simpleUInt16TimeseriesPropertyDefinitionDataReader )
            {
                while ( simpleUInt16TimeseriesPropertyDefinitionDataReader.Read( ) )
                {
                    var data = simpleUInt16TimeseriesPropertyDefinitionDataReader.GetDataObject( );
                    result.Add( data );
                }
            }
            return result;
        }

        public void GetUInt16TimeseriesPropertyDefinitionCollection( Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleUInt16TimeseriesPropertyDefinitionDataReader = GetUInt16TimeseriesPropertyDefinitionCollectionDataReader( );
                using ( simpleUInt16TimeseriesPropertyDefinitionDataReader )
                {
                    simpleUInt16TimeseriesPropertyDefinitionDataReader.WriteResultSetTo( destinationWriter );
                }
            }
        }

        public SimpleUInt16TimeseriesPropertyDefinitionDataReader GetUInt16TimeseriesPropertyDefinitionCollectionByElementTypeDataReader( Guid elementType )
        {
            const string sql = SimpleUInt16TimeseriesPropertyDefinitionDataReader.BaseQuery + " WHERE " +
                    SimpleUInt16TimeseriesPropertyDefinitionDataReader.ViewAliasName + ".[ElementType] = @elementType " +
                    " ORDER BY " + SimpleUInt16TimeseriesPropertyDefinitionDataReader.ViewAliasName + ".[ElementType]," +SimpleUInt16TimeseriesPropertyDefinitionDataReader.ViewAliasName + ".[Name]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var elementTypeParameter = sqlCommandParameters.AddReference( "@elementType", elementType );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleUInt16TimeseriesPropertyDefinitionDataReader = new SimpleUInt16TimeseriesPropertyDefinitionDataReader( _loggerFactory, sqlDataReader );
                return simpleUInt16TimeseriesPropertyDefinitionDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<UInt16TimeseriesPropertyDefinitionObject> GetUInt16TimeseriesPropertyDefinitionCollectionByElementType( Guid elementType )
        {
            throw new NotImplementedException( );
        }
        public SimpleUInt16TimeseriesPropertyDefinitionDataReader GetUInt16TimeseriesPropertyDefinitionByElementTypeAndNameDataReader( Guid elementType, string name )
        {
            const string sql = SimpleUInt16TimeseriesPropertyDefinitionDataReader.BaseQuery + " WHERE " +
                    SimpleUInt16TimeseriesPropertyDefinitionDataReader.ViewAliasName + ".[ElementType] = @elementType AND " +
                    SimpleUInt16TimeseriesPropertyDefinitionDataReader.ViewAliasName + ".[Name] = @name " +
                    " ORDER BY " + SimpleUInt16TimeseriesPropertyDefinitionDataReader.ViewAliasName + ".[ElementType]," +SimpleUInt16TimeseriesPropertyDefinitionDataReader.ViewAliasName + ".[Name]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var elementTypeParameter = sqlCommandParameters.AddReference( "@elementType", elementType );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@name", name, 127 );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleUInt16TimeseriesPropertyDefinitionDataReader = new SimpleUInt16TimeseriesPropertyDefinitionDataReader( _loggerFactory, sqlDataReader );
                return simpleUInt16TimeseriesPropertyDefinitionDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public UInt16TimeseriesPropertyDefinitionObject? GetUInt16TimeseriesPropertyDefinitionByElementTypeAndName( Guid elementType, string name )
        {
            throw new NotImplementedException( );
        }
        // ---------------------------------------------------------------------
        // UInt32TimeseriesPropertyDefinition queries
        // ---------------------------------------------------------------------
        public SimpleUInt32TimeseriesPropertyDefinitionDataReader GetUInt32TimeseriesPropertyDefinitionByIdDataReader( Guid id )
        {
            const string sql = SimpleUInt32TimeseriesPropertyDefinitionDataReader.BaseQuery + "WHERE " + SimpleUInt32TimeseriesPropertyDefinitionDataReader.ViewAliasName + ".[Id] = @id"; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                sqlCommandParameters.AddGuid( "@id", id );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleUInt32TimeseriesPropertyDefinitionDataReader = new SimpleUInt32TimeseriesPropertyDefinitionDataReader( _loggerFactory, sqlDataReader );
                return simpleUInt32TimeseriesPropertyDefinitionDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public UInt32TimeseriesPropertyDefinitionObject? GetUInt32TimeseriesPropertyDefinitionById( Guid id )
        {
            var simpleUInt32TimeseriesPropertyDefinitionDataReader = GetUInt32TimeseriesPropertyDefinitionByIdDataReader( id );
            using ( simpleUInt32TimeseriesPropertyDefinitionDataReader )
            {
                if ( simpleUInt32TimeseriesPropertyDefinitionDataReader.Read( ) )
                {
                    var result = simpleUInt32TimeseriesPropertyDefinitionDataReader.GetDataObject( );
                    return result;
                }
            }
            return null;
        }

        public void GetUInt32TimeseriesPropertyDefinitionById( Guid id, Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleUInt32TimeseriesPropertyDefinitionDataReader = GetUInt32TimeseriesPropertyDefinitionByIdDataReader( id );
                using ( simpleUInt32TimeseriesPropertyDefinitionDataReader )
                {
                    if ( simpleUInt32TimeseriesPropertyDefinitionDataReader.Read( ) )
                    {
                        destinationWriter.Write( true );
                        simpleUInt32TimeseriesPropertyDefinitionDataReader.WriteTo( destinationWriter );
                    }
                    else
                    {
                        destinationWriter.Write( false );
                    }
                }
            }
        }

        public SimpleUInt32TimeseriesPropertyDefinitionDataReader GetUInt32TimeseriesPropertyDefinitionCollectionDataReader( )
        {
            const string sql = SimpleUInt32TimeseriesPropertyDefinitionDataReader.BaseQuery; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleUInt32TimeseriesPropertyDefinitionDataReader = new SimpleUInt32TimeseriesPropertyDefinitionDataReader( _loggerFactory, sqlDataReader );
                return simpleUInt32TimeseriesPropertyDefinitionDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public IList<UInt32TimeseriesPropertyDefinitionObject> GetUInt32TimeseriesPropertyDefinitionCollection( )
        {
            var result = new List<UInt32TimeseriesPropertyDefinitionObject>( );
            var simpleUInt32TimeseriesPropertyDefinitionDataReader = GetUInt32TimeseriesPropertyDefinitionCollectionDataReader( );
            using ( simpleUInt32TimeseriesPropertyDefinitionDataReader )
            {
                while ( simpleUInt32TimeseriesPropertyDefinitionDataReader.Read( ) )
                {
                    var data = simpleUInt32TimeseriesPropertyDefinitionDataReader.GetDataObject( );
                    result.Add( data );
                }
            }
            return result;
        }

        public void GetUInt32TimeseriesPropertyDefinitionCollection( Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleUInt32TimeseriesPropertyDefinitionDataReader = GetUInt32TimeseriesPropertyDefinitionCollectionDataReader( );
                using ( simpleUInt32TimeseriesPropertyDefinitionDataReader )
                {
                    simpleUInt32TimeseriesPropertyDefinitionDataReader.WriteResultSetTo( destinationWriter );
                }
            }
        }

        public SimpleUInt32TimeseriesPropertyDefinitionDataReader GetUInt32TimeseriesPropertyDefinitionCollectionByElementTypeDataReader( Guid elementType )
        {
            const string sql = SimpleUInt32TimeseriesPropertyDefinitionDataReader.BaseQuery + " WHERE " +
                    SimpleUInt32TimeseriesPropertyDefinitionDataReader.ViewAliasName + ".[ElementType] = @elementType " +
                    " ORDER BY " + SimpleUInt32TimeseriesPropertyDefinitionDataReader.ViewAliasName + ".[ElementType]," +SimpleUInt32TimeseriesPropertyDefinitionDataReader.ViewAliasName + ".[Name]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var elementTypeParameter = sqlCommandParameters.AddReference( "@elementType", elementType );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleUInt32TimeseriesPropertyDefinitionDataReader = new SimpleUInt32TimeseriesPropertyDefinitionDataReader( _loggerFactory, sqlDataReader );
                return simpleUInt32TimeseriesPropertyDefinitionDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<UInt32TimeseriesPropertyDefinitionObject> GetUInt32TimeseriesPropertyDefinitionCollectionByElementType( Guid elementType )
        {
            throw new NotImplementedException( );
        }
        public SimpleUInt32TimeseriesPropertyDefinitionDataReader GetUInt32TimeseriesPropertyDefinitionByElementTypeAndNameDataReader( Guid elementType, string name )
        {
            const string sql = SimpleUInt32TimeseriesPropertyDefinitionDataReader.BaseQuery + " WHERE " +
                    SimpleUInt32TimeseriesPropertyDefinitionDataReader.ViewAliasName + ".[ElementType] = @elementType AND " +
                    SimpleUInt32TimeseriesPropertyDefinitionDataReader.ViewAliasName + ".[Name] = @name " +
                    " ORDER BY " + SimpleUInt32TimeseriesPropertyDefinitionDataReader.ViewAliasName + ".[ElementType]," +SimpleUInt32TimeseriesPropertyDefinitionDataReader.ViewAliasName + ".[Name]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var elementTypeParameter = sqlCommandParameters.AddReference( "@elementType", elementType );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@name", name, 127 );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleUInt32TimeseriesPropertyDefinitionDataReader = new SimpleUInt32TimeseriesPropertyDefinitionDataReader( _loggerFactory, sqlDataReader );
                return simpleUInt32TimeseriesPropertyDefinitionDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public UInt32TimeseriesPropertyDefinitionObject? GetUInt32TimeseriesPropertyDefinitionByElementTypeAndName( Guid elementType, string name )
        {
            throw new NotImplementedException( );
        }
        // ---------------------------------------------------------------------
        // UInt64TimeseriesPropertyDefinition queries
        // ---------------------------------------------------------------------
        public SimpleUInt64TimeseriesPropertyDefinitionDataReader GetUInt64TimeseriesPropertyDefinitionByIdDataReader( Guid id )
        {
            const string sql = SimpleUInt64TimeseriesPropertyDefinitionDataReader.BaseQuery + "WHERE " + SimpleUInt64TimeseriesPropertyDefinitionDataReader.ViewAliasName + ".[Id] = @id"; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                sqlCommandParameters.AddGuid( "@id", id );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleUInt64TimeseriesPropertyDefinitionDataReader = new SimpleUInt64TimeseriesPropertyDefinitionDataReader( _loggerFactory, sqlDataReader );
                return simpleUInt64TimeseriesPropertyDefinitionDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public UInt64TimeseriesPropertyDefinitionObject? GetUInt64TimeseriesPropertyDefinitionById( Guid id )
        {
            var simpleUInt64TimeseriesPropertyDefinitionDataReader = GetUInt64TimeseriesPropertyDefinitionByIdDataReader( id );
            using ( simpleUInt64TimeseriesPropertyDefinitionDataReader )
            {
                if ( simpleUInt64TimeseriesPropertyDefinitionDataReader.Read( ) )
                {
                    var result = simpleUInt64TimeseriesPropertyDefinitionDataReader.GetDataObject( );
                    return result;
                }
            }
            return null;
        }

        public void GetUInt64TimeseriesPropertyDefinitionById( Guid id, Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleUInt64TimeseriesPropertyDefinitionDataReader = GetUInt64TimeseriesPropertyDefinitionByIdDataReader( id );
                using ( simpleUInt64TimeseriesPropertyDefinitionDataReader )
                {
                    if ( simpleUInt64TimeseriesPropertyDefinitionDataReader.Read( ) )
                    {
                        destinationWriter.Write( true );
                        simpleUInt64TimeseriesPropertyDefinitionDataReader.WriteTo( destinationWriter );
                    }
                    else
                    {
                        destinationWriter.Write( false );
                    }
                }
            }
        }

        public SimpleUInt64TimeseriesPropertyDefinitionDataReader GetUInt64TimeseriesPropertyDefinitionCollectionDataReader( )
        {
            const string sql = SimpleUInt64TimeseriesPropertyDefinitionDataReader.BaseQuery; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleUInt64TimeseriesPropertyDefinitionDataReader = new SimpleUInt64TimeseriesPropertyDefinitionDataReader( _loggerFactory, sqlDataReader );
                return simpleUInt64TimeseriesPropertyDefinitionDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public IList<UInt64TimeseriesPropertyDefinitionObject> GetUInt64TimeseriesPropertyDefinitionCollection( )
        {
            var result = new List<UInt64TimeseriesPropertyDefinitionObject>( );
            var simpleUInt64TimeseriesPropertyDefinitionDataReader = GetUInt64TimeseriesPropertyDefinitionCollectionDataReader( );
            using ( simpleUInt64TimeseriesPropertyDefinitionDataReader )
            {
                while ( simpleUInt64TimeseriesPropertyDefinitionDataReader.Read( ) )
                {
                    var data = simpleUInt64TimeseriesPropertyDefinitionDataReader.GetDataObject( );
                    result.Add( data );
                }
            }
            return result;
        }

        public void GetUInt64TimeseriesPropertyDefinitionCollection( Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleUInt64TimeseriesPropertyDefinitionDataReader = GetUInt64TimeseriesPropertyDefinitionCollectionDataReader( );
                using ( simpleUInt64TimeseriesPropertyDefinitionDataReader )
                {
                    simpleUInt64TimeseriesPropertyDefinitionDataReader.WriteResultSetTo( destinationWriter );
                }
            }
        }

        public SimpleUInt64TimeseriesPropertyDefinitionDataReader GetUInt64TimeseriesPropertyDefinitionCollectionByElementTypeDataReader( Guid elementType )
        {
            const string sql = SimpleUInt64TimeseriesPropertyDefinitionDataReader.BaseQuery + " WHERE " +
                    SimpleUInt64TimeseriesPropertyDefinitionDataReader.ViewAliasName + ".[ElementType] = @elementType " +
                    " ORDER BY " + SimpleUInt64TimeseriesPropertyDefinitionDataReader.ViewAliasName + ".[ElementType]," +SimpleUInt64TimeseriesPropertyDefinitionDataReader.ViewAliasName + ".[Name]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var elementTypeParameter = sqlCommandParameters.AddReference( "@elementType", elementType );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleUInt64TimeseriesPropertyDefinitionDataReader = new SimpleUInt64TimeseriesPropertyDefinitionDataReader( _loggerFactory, sqlDataReader );
                return simpleUInt64TimeseriesPropertyDefinitionDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<UInt64TimeseriesPropertyDefinitionObject> GetUInt64TimeseriesPropertyDefinitionCollectionByElementType( Guid elementType )
        {
            throw new NotImplementedException( );
        }
        public SimpleUInt64TimeseriesPropertyDefinitionDataReader GetUInt64TimeseriesPropertyDefinitionByElementTypeAndNameDataReader( Guid elementType, string name )
        {
            const string sql = SimpleUInt64TimeseriesPropertyDefinitionDataReader.BaseQuery + " WHERE " +
                    SimpleUInt64TimeseriesPropertyDefinitionDataReader.ViewAliasName + ".[ElementType] = @elementType AND " +
                    SimpleUInt64TimeseriesPropertyDefinitionDataReader.ViewAliasName + ".[Name] = @name " +
                    " ORDER BY " + SimpleUInt64TimeseriesPropertyDefinitionDataReader.ViewAliasName + ".[ElementType]," +SimpleUInt64TimeseriesPropertyDefinitionDataReader.ViewAliasName + ".[Name]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var elementTypeParameter = sqlCommandParameters.AddReference( "@elementType", elementType );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@name", name, 127 );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleUInt64TimeseriesPropertyDefinitionDataReader = new SimpleUInt64TimeseriesPropertyDefinitionDataReader( _loggerFactory, sqlDataReader );
                return simpleUInt64TimeseriesPropertyDefinitionDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public UInt64TimeseriesPropertyDefinitionObject? GetUInt64TimeseriesPropertyDefinitionByElementTypeAndName( Guid elementType, string name )
        {
            throw new NotImplementedException( );
        }
        // ---------------------------------------------------------------------
        // TimeSpanPropertyDefinition queries
        // ---------------------------------------------------------------------
        public SimpleTimeSpanPropertyDefinitionDataReader GetTimeSpanPropertyDefinitionByIdDataReader( Guid id )
        {
            const string sql = SimpleTimeSpanPropertyDefinitionDataReader.BaseQuery + "WHERE " + SimpleTimeSpanPropertyDefinitionDataReader.ViewAliasName + ".[Id] = @id"; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                sqlCommandParameters.AddGuid( "@id", id );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleTimeSpanPropertyDefinitionDataReader = new SimpleTimeSpanPropertyDefinitionDataReader( _loggerFactory, sqlDataReader );
                return simpleTimeSpanPropertyDefinitionDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public TimeSpanPropertyDefinitionObject? GetTimeSpanPropertyDefinitionById( Guid id )
        {
            var simpleTimeSpanPropertyDefinitionDataReader = GetTimeSpanPropertyDefinitionByIdDataReader( id );
            using ( simpleTimeSpanPropertyDefinitionDataReader )
            {
                if ( simpleTimeSpanPropertyDefinitionDataReader.Read( ) )
                {
                    var result = simpleTimeSpanPropertyDefinitionDataReader.GetDataObject( );
                    return result;
                }
            }
            return null;
        }

        public void GetTimeSpanPropertyDefinitionById( Guid id, Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleTimeSpanPropertyDefinitionDataReader = GetTimeSpanPropertyDefinitionByIdDataReader( id );
                using ( simpleTimeSpanPropertyDefinitionDataReader )
                {
                    if ( simpleTimeSpanPropertyDefinitionDataReader.Read( ) )
                    {
                        destinationWriter.Write( true );
                        simpleTimeSpanPropertyDefinitionDataReader.WriteTo( destinationWriter );
                    }
                    else
                    {
                        destinationWriter.Write( false );
                    }
                }
            }
        }

        public SimpleTimeSpanPropertyDefinitionDataReader GetTimeSpanPropertyDefinitionCollectionDataReader( )
        {
            const string sql = SimpleTimeSpanPropertyDefinitionDataReader.BaseQuery; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleTimeSpanPropertyDefinitionDataReader = new SimpleTimeSpanPropertyDefinitionDataReader( _loggerFactory, sqlDataReader );
                return simpleTimeSpanPropertyDefinitionDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public IList<TimeSpanPropertyDefinitionObject> GetTimeSpanPropertyDefinitionCollection( )
        {
            var result = new List<TimeSpanPropertyDefinitionObject>( );
            var simpleTimeSpanPropertyDefinitionDataReader = GetTimeSpanPropertyDefinitionCollectionDataReader( );
            using ( simpleTimeSpanPropertyDefinitionDataReader )
            {
                while ( simpleTimeSpanPropertyDefinitionDataReader.Read( ) )
                {
                    var data = simpleTimeSpanPropertyDefinitionDataReader.GetDataObject( );
                    result.Add( data );
                }
            }
            return result;
        }

        public void GetTimeSpanPropertyDefinitionCollection( Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleTimeSpanPropertyDefinitionDataReader = GetTimeSpanPropertyDefinitionCollectionDataReader( );
                using ( simpleTimeSpanPropertyDefinitionDataReader )
                {
                    simpleTimeSpanPropertyDefinitionDataReader.WriteResultSetTo( destinationWriter );
                }
            }
        }

        public SimpleTimeSpanPropertyDefinitionDataReader GetTimeSpanPropertyDefinitionCollectionByElementTypeDataReader( Guid elementType )
        {
            const string sql = SimpleTimeSpanPropertyDefinitionDataReader.BaseQuery + " WHERE " +
                    SimpleTimeSpanPropertyDefinitionDataReader.ViewAliasName + ".[ElementType] = @elementType " +
                    " ORDER BY " + SimpleTimeSpanPropertyDefinitionDataReader.ViewAliasName + ".[ElementType]," +SimpleTimeSpanPropertyDefinitionDataReader.ViewAliasName + ".[Name]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var elementTypeParameter = sqlCommandParameters.AddReference( "@elementType", elementType );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleTimeSpanPropertyDefinitionDataReader = new SimpleTimeSpanPropertyDefinitionDataReader( _loggerFactory, sqlDataReader );
                return simpleTimeSpanPropertyDefinitionDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<TimeSpanPropertyDefinitionObject> GetTimeSpanPropertyDefinitionCollectionByElementType( Guid elementType )
        {
            throw new NotImplementedException( );
        }
        public SimpleTimeSpanPropertyDefinitionDataReader GetTimeSpanPropertyDefinitionByElementTypeAndNameDataReader( Guid elementType, string name )
        {
            const string sql = SimpleTimeSpanPropertyDefinitionDataReader.BaseQuery + " WHERE " +
                    SimpleTimeSpanPropertyDefinitionDataReader.ViewAliasName + ".[ElementType] = @elementType AND " +
                    SimpleTimeSpanPropertyDefinitionDataReader.ViewAliasName + ".[Name] = @name " +
                    " ORDER BY " + SimpleTimeSpanPropertyDefinitionDataReader.ViewAliasName + ".[ElementType]," +SimpleTimeSpanPropertyDefinitionDataReader.ViewAliasName + ".[Name]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var elementTypeParameter = sqlCommandParameters.AddReference( "@elementType", elementType );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@name", name, 127 );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleTimeSpanPropertyDefinitionDataReader = new SimpleTimeSpanPropertyDefinitionDataReader( _loggerFactory, sqlDataReader );
                return simpleTimeSpanPropertyDefinitionDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public TimeSpanPropertyDefinitionObject? GetTimeSpanPropertyDefinitionByElementTypeAndName( Guid elementType, string name )
        {
            throw new NotImplementedException( );
        }
        // ---------------------------------------------------------------------
        // UInt16PropertyDefinition queries
        // ---------------------------------------------------------------------
        public SimpleUInt16PropertyDefinitionDataReader GetUInt16PropertyDefinitionByIdDataReader( Guid id )
        {
            const string sql = SimpleUInt16PropertyDefinitionDataReader.BaseQuery + "WHERE " + SimpleUInt16PropertyDefinitionDataReader.ViewAliasName + ".[Id] = @id"; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                sqlCommandParameters.AddGuid( "@id", id );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleUInt16PropertyDefinitionDataReader = new SimpleUInt16PropertyDefinitionDataReader( _loggerFactory, sqlDataReader );
                return simpleUInt16PropertyDefinitionDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public UInt16PropertyDefinitionObject? GetUInt16PropertyDefinitionById( Guid id )
        {
            var simpleUInt16PropertyDefinitionDataReader = GetUInt16PropertyDefinitionByIdDataReader( id );
            using ( simpleUInt16PropertyDefinitionDataReader )
            {
                if ( simpleUInt16PropertyDefinitionDataReader.Read( ) )
                {
                    var result = simpleUInt16PropertyDefinitionDataReader.GetDataObject( );
                    return result;
                }
            }
            return null;
        }

        public void GetUInt16PropertyDefinitionById( Guid id, Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleUInt16PropertyDefinitionDataReader = GetUInt16PropertyDefinitionByIdDataReader( id );
                using ( simpleUInt16PropertyDefinitionDataReader )
                {
                    if ( simpleUInt16PropertyDefinitionDataReader.Read( ) )
                    {
                        destinationWriter.Write( true );
                        simpleUInt16PropertyDefinitionDataReader.WriteTo( destinationWriter );
                    }
                    else
                    {
                        destinationWriter.Write( false );
                    }
                }
            }
        }

        public SimpleUInt16PropertyDefinitionDataReader GetUInt16PropertyDefinitionCollectionDataReader( )
        {
            const string sql = SimpleUInt16PropertyDefinitionDataReader.BaseQuery; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleUInt16PropertyDefinitionDataReader = new SimpleUInt16PropertyDefinitionDataReader( _loggerFactory, sqlDataReader );
                return simpleUInt16PropertyDefinitionDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public IList<UInt16PropertyDefinitionObject> GetUInt16PropertyDefinitionCollection( )
        {
            var result = new List<UInt16PropertyDefinitionObject>( );
            var simpleUInt16PropertyDefinitionDataReader = GetUInt16PropertyDefinitionCollectionDataReader( );
            using ( simpleUInt16PropertyDefinitionDataReader )
            {
                while ( simpleUInt16PropertyDefinitionDataReader.Read( ) )
                {
                    var data = simpleUInt16PropertyDefinitionDataReader.GetDataObject( );
                    result.Add( data );
                }
            }
            return result;
        }

        public void GetUInt16PropertyDefinitionCollection( Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleUInt16PropertyDefinitionDataReader = GetUInt16PropertyDefinitionCollectionDataReader( );
                using ( simpleUInt16PropertyDefinitionDataReader )
                {
                    simpleUInt16PropertyDefinitionDataReader.WriteResultSetTo( destinationWriter );
                }
            }
        }

        public SimpleUInt16PropertyDefinitionDataReader GetUInt16PropertyDefinitionCollectionByElementTypeDataReader( Guid elementType )
        {
            const string sql = SimpleUInt16PropertyDefinitionDataReader.BaseQuery + " WHERE " +
                    SimpleUInt16PropertyDefinitionDataReader.ViewAliasName + ".[ElementType] = @elementType " +
                    " ORDER BY " + SimpleUInt16PropertyDefinitionDataReader.ViewAliasName + ".[ElementType]," +SimpleUInt16PropertyDefinitionDataReader.ViewAliasName + ".[Name]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var elementTypeParameter = sqlCommandParameters.AddReference( "@elementType", elementType );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleUInt16PropertyDefinitionDataReader = new SimpleUInt16PropertyDefinitionDataReader( _loggerFactory, sqlDataReader );
                return simpleUInt16PropertyDefinitionDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<UInt16PropertyDefinitionObject> GetUInt16PropertyDefinitionCollectionByElementType( Guid elementType )
        {
            throw new NotImplementedException( );
        }
        public SimpleUInt16PropertyDefinitionDataReader GetUInt16PropertyDefinitionByElementTypeAndNameDataReader( Guid elementType, string name )
        {
            const string sql = SimpleUInt16PropertyDefinitionDataReader.BaseQuery + " WHERE " +
                    SimpleUInt16PropertyDefinitionDataReader.ViewAliasName + ".[ElementType] = @elementType AND " +
                    SimpleUInt16PropertyDefinitionDataReader.ViewAliasName + ".[Name] = @name " +
                    " ORDER BY " + SimpleUInt16PropertyDefinitionDataReader.ViewAliasName + ".[ElementType]," +SimpleUInt16PropertyDefinitionDataReader.ViewAliasName + ".[Name]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var elementTypeParameter = sqlCommandParameters.AddReference( "@elementType", elementType );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@name", name, 127 );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleUInt16PropertyDefinitionDataReader = new SimpleUInt16PropertyDefinitionDataReader( _loggerFactory, sqlDataReader );
                return simpleUInt16PropertyDefinitionDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public UInt16PropertyDefinitionObject? GetUInt16PropertyDefinitionByElementTypeAndName( Guid elementType, string name )
        {
            throw new NotImplementedException( );
        }
        // ---------------------------------------------------------------------
        // UInt32PropertyDefinition queries
        // ---------------------------------------------------------------------
        public SimpleUInt32PropertyDefinitionDataReader GetUInt32PropertyDefinitionByIdDataReader( Guid id )
        {
            const string sql = SimpleUInt32PropertyDefinitionDataReader.BaseQuery + "WHERE " + SimpleUInt32PropertyDefinitionDataReader.ViewAliasName + ".[Id] = @id"; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                sqlCommandParameters.AddGuid( "@id", id );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleUInt32PropertyDefinitionDataReader = new SimpleUInt32PropertyDefinitionDataReader( _loggerFactory, sqlDataReader );
                return simpleUInt32PropertyDefinitionDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public UInt32PropertyDefinitionObject? GetUInt32PropertyDefinitionById( Guid id )
        {
            var simpleUInt32PropertyDefinitionDataReader = GetUInt32PropertyDefinitionByIdDataReader( id );
            using ( simpleUInt32PropertyDefinitionDataReader )
            {
                if ( simpleUInt32PropertyDefinitionDataReader.Read( ) )
                {
                    var result = simpleUInt32PropertyDefinitionDataReader.GetDataObject( );
                    return result;
                }
            }
            return null;
        }

        public void GetUInt32PropertyDefinitionById( Guid id, Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleUInt32PropertyDefinitionDataReader = GetUInt32PropertyDefinitionByIdDataReader( id );
                using ( simpleUInt32PropertyDefinitionDataReader )
                {
                    if ( simpleUInt32PropertyDefinitionDataReader.Read( ) )
                    {
                        destinationWriter.Write( true );
                        simpleUInt32PropertyDefinitionDataReader.WriteTo( destinationWriter );
                    }
                    else
                    {
                        destinationWriter.Write( false );
                    }
                }
            }
        }

        public SimpleUInt32PropertyDefinitionDataReader GetUInt32PropertyDefinitionCollectionDataReader( )
        {
            const string sql = SimpleUInt32PropertyDefinitionDataReader.BaseQuery; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleUInt32PropertyDefinitionDataReader = new SimpleUInt32PropertyDefinitionDataReader( _loggerFactory, sqlDataReader );
                return simpleUInt32PropertyDefinitionDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public IList<UInt32PropertyDefinitionObject> GetUInt32PropertyDefinitionCollection( )
        {
            var result = new List<UInt32PropertyDefinitionObject>( );
            var simpleUInt32PropertyDefinitionDataReader = GetUInt32PropertyDefinitionCollectionDataReader( );
            using ( simpleUInt32PropertyDefinitionDataReader )
            {
                while ( simpleUInt32PropertyDefinitionDataReader.Read( ) )
                {
                    var data = simpleUInt32PropertyDefinitionDataReader.GetDataObject( );
                    result.Add( data );
                }
            }
            return result;
        }

        public void GetUInt32PropertyDefinitionCollection( Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleUInt32PropertyDefinitionDataReader = GetUInt32PropertyDefinitionCollectionDataReader( );
                using ( simpleUInt32PropertyDefinitionDataReader )
                {
                    simpleUInt32PropertyDefinitionDataReader.WriteResultSetTo( destinationWriter );
                }
            }
        }

        public SimpleUInt32PropertyDefinitionDataReader GetUInt32PropertyDefinitionCollectionByElementTypeDataReader( Guid elementType )
        {
            const string sql = SimpleUInt32PropertyDefinitionDataReader.BaseQuery + " WHERE " +
                    SimpleUInt32PropertyDefinitionDataReader.ViewAliasName + ".[ElementType] = @elementType " +
                    " ORDER BY " + SimpleUInt32PropertyDefinitionDataReader.ViewAliasName + ".[ElementType]," +SimpleUInt32PropertyDefinitionDataReader.ViewAliasName + ".[Name]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var elementTypeParameter = sqlCommandParameters.AddReference( "@elementType", elementType );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleUInt32PropertyDefinitionDataReader = new SimpleUInt32PropertyDefinitionDataReader( _loggerFactory, sqlDataReader );
                return simpleUInt32PropertyDefinitionDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<UInt32PropertyDefinitionObject> GetUInt32PropertyDefinitionCollectionByElementType( Guid elementType )
        {
            throw new NotImplementedException( );
        }
        public SimpleUInt32PropertyDefinitionDataReader GetUInt32PropertyDefinitionByElementTypeAndNameDataReader( Guid elementType, string name )
        {
            const string sql = SimpleUInt32PropertyDefinitionDataReader.BaseQuery + " WHERE " +
                    SimpleUInt32PropertyDefinitionDataReader.ViewAliasName + ".[ElementType] = @elementType AND " +
                    SimpleUInt32PropertyDefinitionDataReader.ViewAliasName + ".[Name] = @name " +
                    " ORDER BY " + SimpleUInt32PropertyDefinitionDataReader.ViewAliasName + ".[ElementType]," +SimpleUInt32PropertyDefinitionDataReader.ViewAliasName + ".[Name]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var elementTypeParameter = sqlCommandParameters.AddReference( "@elementType", elementType );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@name", name, 127 );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleUInt32PropertyDefinitionDataReader = new SimpleUInt32PropertyDefinitionDataReader( _loggerFactory, sqlDataReader );
                return simpleUInt32PropertyDefinitionDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public UInt32PropertyDefinitionObject? GetUInt32PropertyDefinitionByElementTypeAndName( Guid elementType, string name )
        {
            throw new NotImplementedException( );
        }
        // ---------------------------------------------------------------------
        // UInt64PropertyDefinition queries
        // ---------------------------------------------------------------------
        public SimpleUInt64PropertyDefinitionDataReader GetUInt64PropertyDefinitionByIdDataReader( Guid id )
        {
            const string sql = SimpleUInt64PropertyDefinitionDataReader.BaseQuery + "WHERE " + SimpleUInt64PropertyDefinitionDataReader.ViewAliasName + ".[Id] = @id"; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                sqlCommandParameters.AddGuid( "@id", id );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleUInt64PropertyDefinitionDataReader = new SimpleUInt64PropertyDefinitionDataReader( _loggerFactory, sqlDataReader );
                return simpleUInt64PropertyDefinitionDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public UInt64PropertyDefinitionObject? GetUInt64PropertyDefinitionById( Guid id )
        {
            var simpleUInt64PropertyDefinitionDataReader = GetUInt64PropertyDefinitionByIdDataReader( id );
            using ( simpleUInt64PropertyDefinitionDataReader )
            {
                if ( simpleUInt64PropertyDefinitionDataReader.Read( ) )
                {
                    var result = simpleUInt64PropertyDefinitionDataReader.GetDataObject( );
                    return result;
                }
            }
            return null;
        }

        public void GetUInt64PropertyDefinitionById( Guid id, Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleUInt64PropertyDefinitionDataReader = GetUInt64PropertyDefinitionByIdDataReader( id );
                using ( simpleUInt64PropertyDefinitionDataReader )
                {
                    if ( simpleUInt64PropertyDefinitionDataReader.Read( ) )
                    {
                        destinationWriter.Write( true );
                        simpleUInt64PropertyDefinitionDataReader.WriteTo( destinationWriter );
                    }
                    else
                    {
                        destinationWriter.Write( false );
                    }
                }
            }
        }

        public SimpleUInt64PropertyDefinitionDataReader GetUInt64PropertyDefinitionCollectionDataReader( )
        {
            const string sql = SimpleUInt64PropertyDefinitionDataReader.BaseQuery; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleUInt64PropertyDefinitionDataReader = new SimpleUInt64PropertyDefinitionDataReader( _loggerFactory, sqlDataReader );
                return simpleUInt64PropertyDefinitionDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public IList<UInt64PropertyDefinitionObject> GetUInt64PropertyDefinitionCollection( )
        {
            var result = new List<UInt64PropertyDefinitionObject>( );
            var simpleUInt64PropertyDefinitionDataReader = GetUInt64PropertyDefinitionCollectionDataReader( );
            using ( simpleUInt64PropertyDefinitionDataReader )
            {
                while ( simpleUInt64PropertyDefinitionDataReader.Read( ) )
                {
                    var data = simpleUInt64PropertyDefinitionDataReader.GetDataObject( );
                    result.Add( data );
                }
            }
            return result;
        }

        public void GetUInt64PropertyDefinitionCollection( Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleUInt64PropertyDefinitionDataReader = GetUInt64PropertyDefinitionCollectionDataReader( );
                using ( simpleUInt64PropertyDefinitionDataReader )
                {
                    simpleUInt64PropertyDefinitionDataReader.WriteResultSetTo( destinationWriter );
                }
            }
        }

        public SimpleUInt64PropertyDefinitionDataReader GetUInt64PropertyDefinitionCollectionByElementTypeDataReader( Guid elementType )
        {
            const string sql = SimpleUInt64PropertyDefinitionDataReader.BaseQuery + " WHERE " +
                    SimpleUInt64PropertyDefinitionDataReader.ViewAliasName + ".[ElementType] = @elementType " +
                    " ORDER BY " + SimpleUInt64PropertyDefinitionDataReader.ViewAliasName + ".[ElementType]," +SimpleUInt64PropertyDefinitionDataReader.ViewAliasName + ".[Name]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var elementTypeParameter = sqlCommandParameters.AddReference( "@elementType", elementType );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleUInt64PropertyDefinitionDataReader = new SimpleUInt64PropertyDefinitionDataReader( _loggerFactory, sqlDataReader );
                return simpleUInt64PropertyDefinitionDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<UInt64PropertyDefinitionObject> GetUInt64PropertyDefinitionCollectionByElementType( Guid elementType )
        {
            throw new NotImplementedException( );
        }
        public SimpleUInt64PropertyDefinitionDataReader GetUInt64PropertyDefinitionByElementTypeAndNameDataReader( Guid elementType, string name )
        {
            const string sql = SimpleUInt64PropertyDefinitionDataReader.BaseQuery + " WHERE " +
                    SimpleUInt64PropertyDefinitionDataReader.ViewAliasName + ".[ElementType] = @elementType AND " +
                    SimpleUInt64PropertyDefinitionDataReader.ViewAliasName + ".[Name] = @name " +
                    " ORDER BY " + SimpleUInt64PropertyDefinitionDataReader.ViewAliasName + ".[ElementType]," +SimpleUInt64PropertyDefinitionDataReader.ViewAliasName + ".[Name]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var elementTypeParameter = sqlCommandParameters.AddReference( "@elementType", elementType );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@name", name, 127 );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleUInt64PropertyDefinitionDataReader = new SimpleUInt64PropertyDefinitionDataReader( _loggerFactory, sqlDataReader );
                return simpleUInt64PropertyDefinitionDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public UInt64PropertyDefinitionObject? GetUInt64PropertyDefinitionByElementTypeAndName( Guid elementType, string name )
        {
            throw new NotImplementedException( );
        }
        // ---------------------------------------------------------------------
        // RadarAlarmStatus queries
        // ---------------------------------------------------------------------
        public SimpleRadarAlarmStatusDataReader GetRadarAlarmStatusByIdDataReader( Guid id )
        {
            const string sql = SimpleRadarAlarmStatusDataReader.BaseQuery + "WHERE " + SimpleRadarAlarmStatusDataReader.ViewAliasName + ".[Id] = @id"; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                sqlCommandParameters.AddGuid( "@id", id );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleRadarAlarmStatusDataReader = new SimpleRadarAlarmStatusDataReader( _loggerFactory, sqlDataReader );
                return simpleRadarAlarmStatusDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public RadarAlarmStatusObject? GetRadarAlarmStatusById( Guid id )
        {
            var simpleRadarAlarmStatusDataReader = GetRadarAlarmStatusByIdDataReader( id );
            using ( simpleRadarAlarmStatusDataReader )
            {
                if ( simpleRadarAlarmStatusDataReader.Read( ) )
                {
                    var result = simpleRadarAlarmStatusDataReader.GetDataObject( );
                    return result;
                }
            }
            return null;
        }

        public void GetRadarAlarmStatusById( Guid id, Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleRadarAlarmStatusDataReader = GetRadarAlarmStatusByIdDataReader( id );
                using ( simpleRadarAlarmStatusDataReader )
                {
                    if ( simpleRadarAlarmStatusDataReader.Read( ) )
                    {
                        destinationWriter.Write( true );
                        simpleRadarAlarmStatusDataReader.WriteTo( destinationWriter );
                    }
                    else
                    {
                        destinationWriter.Write( false );
                    }
                }
            }
        }

        public SimpleRadarAlarmStatusDataReader GetRadarAlarmStatusCollectionDataReader( )
        {
            const string sql = SimpleRadarAlarmStatusDataReader.BaseQuery; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleRadarAlarmStatusDataReader = new SimpleRadarAlarmStatusDataReader( _loggerFactory, sqlDataReader );
                return simpleRadarAlarmStatusDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public IList<RadarAlarmStatusObject> GetRadarAlarmStatusCollection( )
        {
            var result = new List<RadarAlarmStatusObject>( );
            var simpleRadarAlarmStatusDataReader = GetRadarAlarmStatusCollectionDataReader( );
            using ( simpleRadarAlarmStatusDataReader )
            {
                while ( simpleRadarAlarmStatusDataReader.Read( ) )
                {
                    var data = simpleRadarAlarmStatusDataReader.GetDataObject( );
                    result.Add( data );
                }
            }
            return result;
        }

        public void GetRadarAlarmStatusCollection( Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleRadarAlarmStatusDataReader = GetRadarAlarmStatusCollectionDataReader( );
                using ( simpleRadarAlarmStatusDataReader )
                {
                    simpleRadarAlarmStatusDataReader.WriteResultSetTo( destinationWriter );
                }
            }
        }

        public SimpleRadarAlarmStatusDataReader GetRadarAlarmStatusCollectionByRadarDataReader( Guid radar )
        {
            const string sql = SimpleRadarAlarmStatusDataReader.BaseQuery + " WHERE " +
                    SimpleRadarAlarmStatusDataReader.ViewAliasName + ".[Radar] = @radar " +
                    " ORDER BY " + SimpleRadarAlarmStatusDataReader.ViewAliasName + ".[Radar]," +SimpleRadarAlarmStatusDataReader.ViewAliasName + ".[Timestamp]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var radarParameter = sqlCommandParameters.AddReference( "@radar", radar );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleRadarAlarmStatusDataReader = new SimpleRadarAlarmStatusDataReader( _loggerFactory, sqlDataReader );
                return simpleRadarAlarmStatusDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<RadarAlarmStatusObject> GetRadarAlarmStatusCollectionByRadar( Guid radar )
        {
            throw new NotImplementedException( );
        }
        public SimpleRadarAlarmStatusDataReader GetRadarAlarmStatusByRadarAndTimestampDataReader( Guid radar, DateTime timestamp )
        {
            const string sql = SimpleRadarAlarmStatusDataReader.BaseQuery + " WHERE " +
                    SimpleRadarAlarmStatusDataReader.ViewAliasName + ".[Radar] = @radar AND " +
                    SimpleRadarAlarmStatusDataReader.ViewAliasName + ".[Timestamp] = @timestamp " +
                    " ORDER BY " + SimpleRadarAlarmStatusDataReader.ViewAliasName + ".[Radar]," +SimpleRadarAlarmStatusDataReader.ViewAliasName + ".[Timestamp]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var radarParameter = sqlCommandParameters.AddReference( "@radar", radar );
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@timestamp", timestamp );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleRadarAlarmStatusDataReader = new SimpleRadarAlarmStatusDataReader( _loggerFactory, sqlDataReader );
                return simpleRadarAlarmStatusDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public RadarAlarmStatusObject? GetRadarAlarmStatusByRadarAndTimestamp( Guid radar, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public RadarAlarmStatusObject? GetRadarAlarmStatusByRadarAtTimestamp( Guid radar, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<RadarAlarmStatusObject> GetRadarAlarmStatusByRadarFromTimestamp( Guid radar, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<RadarAlarmStatusObject> GetRadarAlarmStatusByRadarUntilTimestamp( Guid radar, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<RadarAlarmStatusObject> GetRadarAlarmStatusByRadarOverTimestamp( Guid radar, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException( );
        }
        public SimpleRadarAlarmStatusDataReader GetRadarAlarmStatusCollectionByTimestampDataReader( DateTime timestamp )
        {
            const string sql = SimpleRadarAlarmStatusDataReader.BaseQuery + " WHERE " +
                    SimpleRadarAlarmStatusDataReader.ViewAliasName + ".[Timestamp] = @timestamp " +
                    " ORDER BY " + SimpleRadarAlarmStatusDataReader.ViewAliasName + ".[Timestamp]," +SimpleRadarAlarmStatusDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@timestamp", timestamp );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleRadarAlarmStatusDataReader = new SimpleRadarAlarmStatusDataReader( _loggerFactory, sqlDataReader );
                return simpleRadarAlarmStatusDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<RadarAlarmStatusObject> GetRadarAlarmStatusCollectionByTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<RadarAlarmStatusObject> GetRadarAlarmStatusCollectionAtTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<RadarAlarmStatusObject> GetRadarAlarmStatusCollectionFromTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<RadarAlarmStatusObject> GetRadarAlarmStatusCollectionUntilTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<RadarAlarmStatusObject> GetRadarAlarmStatusCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException( );
        }
        // ---------------------------------------------------------------------
        // RadarCommand queries
        // ---------------------------------------------------------------------
        public ComplexRadarCommandDataReader GetRadarCommandByIdDataReader( Guid id )
        {
            const string sql = ComplexRadarCommandDataReader.BaseQuery + "WHERE " + ComplexRadarCommandDataReader.ViewAliasName + ".[Id] = @id"; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                sqlCommandParameters.AddGuid( "@id", id );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var complexRadarCommandDataReader = new ComplexRadarCommandDataReader( _loggerFactory, sqlDataReader );
                return complexRadarCommandDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public RadarCommandObject? GetRadarCommandById( Guid id )
        {
            var complexRadarCommandDataReader = GetRadarCommandByIdDataReader( id );
            using ( complexRadarCommandDataReader )
            {
                if ( complexRadarCommandDataReader.Read( ) )
                {
                    var result = complexRadarCommandDataReader.GetDataObject( );
                    return result;
                }
            }
            return null;
        }

        public void GetRadarCommandById( Guid id, Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var complexRadarCommandDataReader = GetRadarCommandByIdDataReader( id );
                using ( complexRadarCommandDataReader )
                {
                    if ( complexRadarCommandDataReader.Read( ) )
                    {
                        destinationWriter.Write( true );
                        complexRadarCommandDataReader.WriteTo( destinationWriter );
                    }
                    else
                    {
                        destinationWriter.Write( false );
                    }
                }
            }
        }

        public ComplexRadarCommandDataReader GetRadarCommandCollectionDataReader( )
        {
            const string sql = ComplexRadarCommandDataReader.BaseQuery; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var complexRadarCommandDataReader = new ComplexRadarCommandDataReader( _loggerFactory, sqlDataReader );
                return complexRadarCommandDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public IList<RadarCommandObject> GetRadarCommandCollection( )
        {
            var result = new List<RadarCommandObject>( );
            var complexRadarCommandDataReader = GetRadarCommandCollectionDataReader( );
            using ( complexRadarCommandDataReader )
            {
                while ( complexRadarCommandDataReader.Read( ) )
                {
                    var data = complexRadarCommandDataReader.GetDataObject( );
                    result.Add( data );
                }
            }
            return result;
        }

        public void GetRadarCommandCollection( Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var complexRadarCommandDataReader = GetRadarCommandCollectionDataReader( );
                using ( complexRadarCommandDataReader )
                {
                    complexRadarCommandDataReader.WriteResultSetTo( destinationWriter );
                }
            }
        }

        public ComplexRadarCommandDataReader GetRadarCommandCollectionByRadarDataReader( Guid radar )
        {
            const string sql = ComplexRadarCommandDataReader.BaseQuery + " WHERE " +
                    ComplexRadarCommandDataReader.ViewAliasName + ".[Radar] = @radar " +
                    " ORDER BY " + ComplexRadarCommandDataReader.ViewAliasName + ".[Radar]," +ComplexRadarCommandDataReader.ViewAliasName + ".[Timestamp]," +ComplexRadarCommandDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var radarParameter = sqlCommandParameters.AddReference( "@radar", radar );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var complexRadarCommandDataReader = new ComplexRadarCommandDataReader( _loggerFactory, sqlDataReader );
                return complexRadarCommandDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<RadarCommandObject> GetRadarCommandCollectionByRadar( Guid radar )
        {
            throw new NotImplementedException( );
        }
        public ComplexRadarCommandDataReader GetRadarCommandCollectionByRadarAndTimestampDataReader( Guid radar, DateTime timestamp )
        {
            const string sql = ComplexRadarCommandDataReader.BaseQuery + " WHERE " +
                    ComplexRadarCommandDataReader.ViewAliasName + ".[Radar] = @radar AND " +
                    ComplexRadarCommandDataReader.ViewAliasName + ".[Timestamp] = @timestamp " +
                    " ORDER BY " + ComplexRadarCommandDataReader.ViewAliasName + ".[Radar]," +ComplexRadarCommandDataReader.ViewAliasName + ".[Timestamp]," +ComplexRadarCommandDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var radarParameter = sqlCommandParameters.AddReference( "@radar", radar );
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@timestamp", timestamp );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var complexRadarCommandDataReader = new ComplexRadarCommandDataReader( _loggerFactory, sqlDataReader );
                return complexRadarCommandDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<RadarCommandObject> GetRadarCommandCollectionByRadarAndTimestamp( Guid radar, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<RadarCommandObject> GetRadarCommandCollectionByRadarAtTimestamp( Guid radar, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<RadarCommandObject> GetRadarCommandCollectionByRadarFromTimestamp( Guid radar, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<RadarCommandObject> GetRadarCommandCollectionByRadarUntilTimestamp( Guid radar, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<RadarCommandObject> GetRadarCommandCollectionByRadarOverTimestamp( Guid radar, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException( );
        }
        public ComplexRadarCommandDataReader GetRadarCommandCollectionByTimestampDataReader( DateTime timestamp )
        {
            const string sql = ComplexRadarCommandDataReader.BaseQuery + " WHERE " +
                    ComplexRadarCommandDataReader.ViewAliasName + ".[Timestamp] = @timestamp " +
                    " ORDER BY " + ComplexRadarCommandDataReader.ViewAliasName + ".[Timestamp]," +ComplexRadarCommandDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@timestamp", timestamp );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var complexRadarCommandDataReader = new ComplexRadarCommandDataReader( _loggerFactory, sqlDataReader );
                return complexRadarCommandDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<RadarCommandObject> GetRadarCommandCollectionByTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<RadarCommandObject> GetRadarCommandCollectionAtTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<RadarCommandObject> GetRadarCommandCollectionFromTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<RadarCommandObject> GetRadarCommandCollectionUntilTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<RadarCommandObject> GetRadarCommandCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException( );
        }
        public ComplexRadarCommandDataReader GetRadarCommandCollectionByReplyDataReader( Guid reply )
        {
            const string sql = ComplexRadarCommandDataReader.BaseQuery + " WHERE " +
                    ComplexRadarCommandDataReader.ViewAliasName + ".[Reply] = @reply " +
                    " ORDER BY " + ComplexRadarCommandDataReader.ViewAliasName + ".[Reply]," +ComplexRadarCommandDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var replyParameter = sqlCommandParameters.AddReference( "@reply", reply );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var complexRadarCommandDataReader = new ComplexRadarCommandDataReader( _loggerFactory, sqlDataReader );
                return complexRadarCommandDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<RadarCommandObject> GetRadarCommandCollectionByReply( Guid reply )
        {
            throw new NotImplementedException( );
        }
        // ---------------------------------------------------------------------
        // RadarCommandGetStatus queries
        // ---------------------------------------------------------------------
        public SimpleRadarCommandGetStatusDataReader GetRadarCommandGetStatusByIdDataReader( Guid id )
        {
            const string sql = SimpleRadarCommandGetStatusDataReader.BaseQuery + "WHERE " + SimpleRadarCommandGetStatusDataReader.ViewAliasName + ".[Id] = @id"; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                sqlCommandParameters.AddGuid( "@id", id );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleRadarCommandGetStatusDataReader = new SimpleRadarCommandGetStatusDataReader( _loggerFactory, sqlDataReader );
                return simpleRadarCommandGetStatusDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public RadarCommandGetStatusObject? GetRadarCommandGetStatusById( Guid id )
        {
            var simpleRadarCommandGetStatusDataReader = GetRadarCommandGetStatusByIdDataReader( id );
            using ( simpleRadarCommandGetStatusDataReader )
            {
                if ( simpleRadarCommandGetStatusDataReader.Read( ) )
                {
                    var result = simpleRadarCommandGetStatusDataReader.GetDataObject( );
                    return result;
                }
            }
            return null;
        }

        public void GetRadarCommandGetStatusById( Guid id, Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleRadarCommandGetStatusDataReader = GetRadarCommandGetStatusByIdDataReader( id );
                using ( simpleRadarCommandGetStatusDataReader )
                {
                    if ( simpleRadarCommandGetStatusDataReader.Read( ) )
                    {
                        destinationWriter.Write( true );
                        simpleRadarCommandGetStatusDataReader.WriteTo( destinationWriter );
                    }
                    else
                    {
                        destinationWriter.Write( false );
                    }
                }
            }
        }

        public SimpleRadarCommandGetStatusDataReader GetRadarCommandGetStatusCollectionDataReader( )
        {
            const string sql = SimpleRadarCommandGetStatusDataReader.BaseQuery; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleRadarCommandGetStatusDataReader = new SimpleRadarCommandGetStatusDataReader( _loggerFactory, sqlDataReader );
                return simpleRadarCommandGetStatusDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public IList<RadarCommandGetStatusObject> GetRadarCommandGetStatusCollection( )
        {
            var result = new List<RadarCommandGetStatusObject>( );
            var simpleRadarCommandGetStatusDataReader = GetRadarCommandGetStatusCollectionDataReader( );
            using ( simpleRadarCommandGetStatusDataReader )
            {
                while ( simpleRadarCommandGetStatusDataReader.Read( ) )
                {
                    var data = simpleRadarCommandGetStatusDataReader.GetDataObject( );
                    result.Add( data );
                }
            }
            return result;
        }

        public void GetRadarCommandGetStatusCollection( Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleRadarCommandGetStatusDataReader = GetRadarCommandGetStatusCollectionDataReader( );
                using ( simpleRadarCommandGetStatusDataReader )
                {
                    simpleRadarCommandGetStatusDataReader.WriteResultSetTo( destinationWriter );
                }
            }
        }

        public SimpleRadarCommandGetStatusDataReader GetRadarCommandGetStatusCollectionByRadarDataReader( Guid radar )
        {
            const string sql = SimpleRadarCommandGetStatusDataReader.BaseQuery + " WHERE " +
                    SimpleRadarCommandGetStatusDataReader.ViewAliasName + ".[Radar] = @radar " +
                    " ORDER BY " + SimpleRadarCommandGetStatusDataReader.ViewAliasName + ".[Radar]," +SimpleRadarCommandGetStatusDataReader.ViewAliasName + ".[Timestamp]," +SimpleRadarCommandGetStatusDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var radarParameter = sqlCommandParameters.AddReference( "@radar", radar );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleRadarCommandGetStatusDataReader = new SimpleRadarCommandGetStatusDataReader( _loggerFactory, sqlDataReader );
                return simpleRadarCommandGetStatusDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<RadarCommandGetStatusObject> GetRadarCommandGetStatusCollectionByRadar( Guid radar )
        {
            throw new NotImplementedException( );
        }
        public SimpleRadarCommandGetStatusDataReader GetRadarCommandGetStatusCollectionByRadarAndTimestampDataReader( Guid radar, DateTime timestamp )
        {
            const string sql = SimpleRadarCommandGetStatusDataReader.BaseQuery + " WHERE " +
                    SimpleRadarCommandGetStatusDataReader.ViewAliasName + ".[Radar] = @radar AND " +
                    SimpleRadarCommandGetStatusDataReader.ViewAliasName + ".[Timestamp] = @timestamp " +
                    " ORDER BY " + SimpleRadarCommandGetStatusDataReader.ViewAliasName + ".[Radar]," +SimpleRadarCommandGetStatusDataReader.ViewAliasName + ".[Timestamp]," +SimpleRadarCommandGetStatusDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var radarParameter = sqlCommandParameters.AddReference( "@radar", radar );
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@timestamp", timestamp );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleRadarCommandGetStatusDataReader = new SimpleRadarCommandGetStatusDataReader( _loggerFactory, sqlDataReader );
                return simpleRadarCommandGetStatusDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<RadarCommandGetStatusObject> GetRadarCommandGetStatusCollectionByRadarAndTimestamp( Guid radar, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<RadarCommandGetStatusObject> GetRadarCommandGetStatusCollectionByRadarAtTimestamp( Guid radar, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<RadarCommandGetStatusObject> GetRadarCommandGetStatusCollectionByRadarFromTimestamp( Guid radar, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<RadarCommandGetStatusObject> GetRadarCommandGetStatusCollectionByRadarUntilTimestamp( Guid radar, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<RadarCommandGetStatusObject> GetRadarCommandGetStatusCollectionByRadarOverTimestamp( Guid radar, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException( );
        }
        public SimpleRadarCommandGetStatusDataReader GetRadarCommandGetStatusCollectionByTimestampDataReader( DateTime timestamp )
        {
            const string sql = SimpleRadarCommandGetStatusDataReader.BaseQuery + " WHERE " +
                    SimpleRadarCommandGetStatusDataReader.ViewAliasName + ".[Timestamp] = @timestamp " +
                    " ORDER BY " + SimpleRadarCommandGetStatusDataReader.ViewAliasName + ".[Timestamp]," +SimpleRadarCommandGetStatusDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@timestamp", timestamp );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleRadarCommandGetStatusDataReader = new SimpleRadarCommandGetStatusDataReader( _loggerFactory, sqlDataReader );
                return simpleRadarCommandGetStatusDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<RadarCommandGetStatusObject> GetRadarCommandGetStatusCollectionByTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<RadarCommandGetStatusObject> GetRadarCommandGetStatusCollectionAtTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<RadarCommandGetStatusObject> GetRadarCommandGetStatusCollectionFromTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<RadarCommandGetStatusObject> GetRadarCommandGetStatusCollectionUntilTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<RadarCommandGetStatusObject> GetRadarCommandGetStatusCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException( );
        }
        public SimpleRadarCommandGetStatusDataReader GetRadarCommandGetStatusCollectionByReplyDataReader( Guid reply )
        {
            const string sql = SimpleRadarCommandGetStatusDataReader.BaseQuery + " WHERE " +
                    SimpleRadarCommandGetStatusDataReader.ViewAliasName + ".[Reply] = @reply " +
                    " ORDER BY " + SimpleRadarCommandGetStatusDataReader.ViewAliasName + ".[Reply]," +SimpleRadarCommandGetStatusDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var replyParameter = sqlCommandParameters.AddReference( "@reply", reply );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleRadarCommandGetStatusDataReader = new SimpleRadarCommandGetStatusDataReader( _loggerFactory, sqlDataReader );
                return simpleRadarCommandGetStatusDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<RadarCommandGetStatusObject> GetRadarCommandGetStatusCollectionByReply( Guid reply )
        {
            throw new NotImplementedException( );
        }
        // ---------------------------------------------------------------------
        // RadarCommandReply queries
        // ---------------------------------------------------------------------
        public ComplexRadarCommandReplyDataReader GetRadarCommandReplyByIdDataReader( Guid id )
        {
            const string sql = ComplexRadarCommandReplyDataReader.BaseQuery + "WHERE " + ComplexRadarCommandReplyDataReader.ViewAliasName + ".[Id] = @id"; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                sqlCommandParameters.AddGuid( "@id", id );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var complexRadarCommandReplyDataReader = new ComplexRadarCommandReplyDataReader( _loggerFactory, sqlDataReader );
                return complexRadarCommandReplyDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public RadarCommandReplyObject? GetRadarCommandReplyById( Guid id )
        {
            var complexRadarCommandReplyDataReader = GetRadarCommandReplyByIdDataReader( id );
            using ( complexRadarCommandReplyDataReader )
            {
                if ( complexRadarCommandReplyDataReader.Read( ) )
                {
                    var result = complexRadarCommandReplyDataReader.GetDataObject( );
                    return result;
                }
            }
            return null;
        }

        public void GetRadarCommandReplyById( Guid id, Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var complexRadarCommandReplyDataReader = GetRadarCommandReplyByIdDataReader( id );
                using ( complexRadarCommandReplyDataReader )
                {
                    if ( complexRadarCommandReplyDataReader.Read( ) )
                    {
                        destinationWriter.Write( true );
                        complexRadarCommandReplyDataReader.WriteTo( destinationWriter );
                    }
                    else
                    {
                        destinationWriter.Write( false );
                    }
                }
            }
        }

        public ComplexRadarCommandReplyDataReader GetRadarCommandReplyCollectionDataReader( )
        {
            const string sql = ComplexRadarCommandReplyDataReader.BaseQuery; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var complexRadarCommandReplyDataReader = new ComplexRadarCommandReplyDataReader( _loggerFactory, sqlDataReader );
                return complexRadarCommandReplyDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public IList<RadarCommandReplyObject> GetRadarCommandReplyCollection( )
        {
            var result = new List<RadarCommandReplyObject>( );
            var complexRadarCommandReplyDataReader = GetRadarCommandReplyCollectionDataReader( );
            using ( complexRadarCommandReplyDataReader )
            {
                while ( complexRadarCommandReplyDataReader.Read( ) )
                {
                    var data = complexRadarCommandReplyDataReader.GetDataObject( );
                    result.Add( data );
                }
            }
            return result;
        }

        public void GetRadarCommandReplyCollection( Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var complexRadarCommandReplyDataReader = GetRadarCommandReplyCollectionDataReader( );
                using ( complexRadarCommandReplyDataReader )
                {
                    complexRadarCommandReplyDataReader.WriteResultSetTo( destinationWriter );
                }
            }
        }

        public ComplexRadarCommandReplyDataReader GetRadarCommandReplyCollectionByRadarDataReader( Guid radar )
        {
            const string sql = ComplexRadarCommandReplyDataReader.BaseQuery + " WHERE " +
                    ComplexRadarCommandReplyDataReader.ViewAliasName + ".[Radar] = @radar " +
                    " ORDER BY " + ComplexRadarCommandReplyDataReader.ViewAliasName + ".[Radar]," +ComplexRadarCommandReplyDataReader.ViewAliasName + ".[Timestamp]," +ComplexRadarCommandReplyDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var radarParameter = sqlCommandParameters.AddReference( "@radar", radar );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var complexRadarCommandReplyDataReader = new ComplexRadarCommandReplyDataReader( _loggerFactory, sqlDataReader );
                return complexRadarCommandReplyDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<RadarCommandReplyObject> GetRadarCommandReplyCollectionByRadar( Guid radar )
        {
            throw new NotImplementedException( );
        }
        public ComplexRadarCommandReplyDataReader GetRadarCommandReplyCollectionByRadarAndTimestampDataReader( Guid radar, DateTime timestamp )
        {
            const string sql = ComplexRadarCommandReplyDataReader.BaseQuery + " WHERE " +
                    ComplexRadarCommandReplyDataReader.ViewAliasName + ".[Radar] = @radar AND " +
                    ComplexRadarCommandReplyDataReader.ViewAliasName + ".[Timestamp] = @timestamp " +
                    " ORDER BY " + ComplexRadarCommandReplyDataReader.ViewAliasName + ".[Radar]," +ComplexRadarCommandReplyDataReader.ViewAliasName + ".[Timestamp]," +ComplexRadarCommandReplyDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var radarParameter = sqlCommandParameters.AddReference( "@radar", radar );
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@timestamp", timestamp );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var complexRadarCommandReplyDataReader = new ComplexRadarCommandReplyDataReader( _loggerFactory, sqlDataReader );
                return complexRadarCommandReplyDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<RadarCommandReplyObject> GetRadarCommandReplyCollectionByRadarAndTimestamp( Guid radar, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<RadarCommandReplyObject> GetRadarCommandReplyCollectionByRadarAtTimestamp( Guid radar, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<RadarCommandReplyObject> GetRadarCommandReplyCollectionByRadarFromTimestamp( Guid radar, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<RadarCommandReplyObject> GetRadarCommandReplyCollectionByRadarUntilTimestamp( Guid radar, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<RadarCommandReplyObject> GetRadarCommandReplyCollectionByRadarOverTimestamp( Guid radar, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException( );
        }
        public ComplexRadarCommandReplyDataReader GetRadarCommandReplyCollectionByTimestampDataReader( DateTime timestamp )
        {
            const string sql = ComplexRadarCommandReplyDataReader.BaseQuery + " WHERE " +
                    ComplexRadarCommandReplyDataReader.ViewAliasName + ".[Timestamp] = @timestamp " +
                    " ORDER BY " + ComplexRadarCommandReplyDataReader.ViewAliasName + ".[Timestamp]," +ComplexRadarCommandReplyDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@timestamp", timestamp );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var complexRadarCommandReplyDataReader = new ComplexRadarCommandReplyDataReader( _loggerFactory, sqlDataReader );
                return complexRadarCommandReplyDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<RadarCommandReplyObject> GetRadarCommandReplyCollectionByTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<RadarCommandReplyObject> GetRadarCommandReplyCollectionAtTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<RadarCommandReplyObject> GetRadarCommandReplyCollectionFromTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<RadarCommandReplyObject> GetRadarCommandReplyCollectionUntilTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<RadarCommandReplyObject> GetRadarCommandReplyCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException( );
        }
        public ComplexRadarCommandReplyDataReader GetRadarCommandReplyByCommandDataReader( Guid command )
        {
            const string sql = ComplexRadarCommandReplyDataReader.BaseQuery + " WHERE " +
                    ComplexRadarCommandReplyDataReader.ViewAliasName + ".[Command] = @command " +
                    " ORDER BY " + ComplexRadarCommandReplyDataReader.ViewAliasName + ".[Command]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var commandParameter = sqlCommandParameters.AddReference( "@command", command );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var complexRadarCommandReplyDataReader = new ComplexRadarCommandReplyDataReader( _loggerFactory, sqlDataReader );
                return complexRadarCommandReplyDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public RadarCommandReplyObject? GetRadarCommandReplyByCommand( Guid command )
        {
            throw new NotImplementedException( );
        }
        // ---------------------------------------------------------------------
        // RadarCommandReplyGetStatus queries
        // ---------------------------------------------------------------------
        public SimpleRadarCommandReplyGetStatusDataReader GetRadarCommandReplyGetStatusByIdDataReader( Guid id )
        {
            const string sql = SimpleRadarCommandReplyGetStatusDataReader.BaseQuery + "WHERE " + SimpleRadarCommandReplyGetStatusDataReader.ViewAliasName + ".[Id] = @id"; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                sqlCommandParameters.AddGuid( "@id", id );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleRadarCommandReplyGetStatusDataReader = new SimpleRadarCommandReplyGetStatusDataReader( _loggerFactory, sqlDataReader );
                return simpleRadarCommandReplyGetStatusDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public RadarCommandReplyGetStatusObject? GetRadarCommandReplyGetStatusById( Guid id )
        {
            var simpleRadarCommandReplyGetStatusDataReader = GetRadarCommandReplyGetStatusByIdDataReader( id );
            using ( simpleRadarCommandReplyGetStatusDataReader )
            {
                if ( simpleRadarCommandReplyGetStatusDataReader.Read( ) )
                {
                    var result = simpleRadarCommandReplyGetStatusDataReader.GetDataObject( );
                    return result;
                }
            }
            return null;
        }

        public void GetRadarCommandReplyGetStatusById( Guid id, Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleRadarCommandReplyGetStatusDataReader = GetRadarCommandReplyGetStatusByIdDataReader( id );
                using ( simpleRadarCommandReplyGetStatusDataReader )
                {
                    if ( simpleRadarCommandReplyGetStatusDataReader.Read( ) )
                    {
                        destinationWriter.Write( true );
                        simpleRadarCommandReplyGetStatusDataReader.WriteTo( destinationWriter );
                    }
                    else
                    {
                        destinationWriter.Write( false );
                    }
                }
            }
        }

        public SimpleRadarCommandReplyGetStatusDataReader GetRadarCommandReplyGetStatusCollectionDataReader( )
        {
            const string sql = SimpleRadarCommandReplyGetStatusDataReader.BaseQuery; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleRadarCommandReplyGetStatusDataReader = new SimpleRadarCommandReplyGetStatusDataReader( _loggerFactory, sqlDataReader );
                return simpleRadarCommandReplyGetStatusDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public IList<RadarCommandReplyGetStatusObject> GetRadarCommandReplyGetStatusCollection( )
        {
            var result = new List<RadarCommandReplyGetStatusObject>( );
            var simpleRadarCommandReplyGetStatusDataReader = GetRadarCommandReplyGetStatusCollectionDataReader( );
            using ( simpleRadarCommandReplyGetStatusDataReader )
            {
                while ( simpleRadarCommandReplyGetStatusDataReader.Read( ) )
                {
                    var data = simpleRadarCommandReplyGetStatusDataReader.GetDataObject( );
                    result.Add( data );
                }
            }
            return result;
        }

        public void GetRadarCommandReplyGetStatusCollection( Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleRadarCommandReplyGetStatusDataReader = GetRadarCommandReplyGetStatusCollectionDataReader( );
                using ( simpleRadarCommandReplyGetStatusDataReader )
                {
                    simpleRadarCommandReplyGetStatusDataReader.WriteResultSetTo( destinationWriter );
                }
            }
        }

        public SimpleRadarCommandReplyGetStatusDataReader GetRadarCommandReplyGetStatusCollectionByRadarDataReader( Guid radar )
        {
            const string sql = SimpleRadarCommandReplyGetStatusDataReader.BaseQuery + " WHERE " +
                    SimpleRadarCommandReplyGetStatusDataReader.ViewAliasName + ".[Radar] = @radar " +
                    " ORDER BY " + SimpleRadarCommandReplyGetStatusDataReader.ViewAliasName + ".[Radar]," +SimpleRadarCommandReplyGetStatusDataReader.ViewAliasName + ".[Timestamp]," +SimpleRadarCommandReplyGetStatusDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var radarParameter = sqlCommandParameters.AddReference( "@radar", radar );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleRadarCommandReplyGetStatusDataReader = new SimpleRadarCommandReplyGetStatusDataReader( _loggerFactory, sqlDataReader );
                return simpleRadarCommandReplyGetStatusDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<RadarCommandReplyGetStatusObject> GetRadarCommandReplyGetStatusCollectionByRadar( Guid radar )
        {
            throw new NotImplementedException( );
        }
        public SimpleRadarCommandReplyGetStatusDataReader GetRadarCommandReplyGetStatusCollectionByRadarAndTimestampDataReader( Guid radar, DateTime timestamp )
        {
            const string sql = SimpleRadarCommandReplyGetStatusDataReader.BaseQuery + " WHERE " +
                    SimpleRadarCommandReplyGetStatusDataReader.ViewAliasName + ".[Radar] = @radar AND " +
                    SimpleRadarCommandReplyGetStatusDataReader.ViewAliasName + ".[Timestamp] = @timestamp " +
                    " ORDER BY " + SimpleRadarCommandReplyGetStatusDataReader.ViewAliasName + ".[Radar]," +SimpleRadarCommandReplyGetStatusDataReader.ViewAliasName + ".[Timestamp]," +SimpleRadarCommandReplyGetStatusDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var radarParameter = sqlCommandParameters.AddReference( "@radar", radar );
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@timestamp", timestamp );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleRadarCommandReplyGetStatusDataReader = new SimpleRadarCommandReplyGetStatusDataReader( _loggerFactory, sqlDataReader );
                return simpleRadarCommandReplyGetStatusDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<RadarCommandReplyGetStatusObject> GetRadarCommandReplyGetStatusCollectionByRadarAndTimestamp( Guid radar, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<RadarCommandReplyGetStatusObject> GetRadarCommandReplyGetStatusCollectionByRadarAtTimestamp( Guid radar, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<RadarCommandReplyGetStatusObject> GetRadarCommandReplyGetStatusCollectionByRadarFromTimestamp( Guid radar, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<RadarCommandReplyGetStatusObject> GetRadarCommandReplyGetStatusCollectionByRadarUntilTimestamp( Guid radar, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<RadarCommandReplyGetStatusObject> GetRadarCommandReplyGetStatusCollectionByRadarOverTimestamp( Guid radar, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException( );
        }
        public SimpleRadarCommandReplyGetStatusDataReader GetRadarCommandReplyGetStatusCollectionByTimestampDataReader( DateTime timestamp )
        {
            const string sql = SimpleRadarCommandReplyGetStatusDataReader.BaseQuery + " WHERE " +
                    SimpleRadarCommandReplyGetStatusDataReader.ViewAliasName + ".[Timestamp] = @timestamp " +
                    " ORDER BY " + SimpleRadarCommandReplyGetStatusDataReader.ViewAliasName + ".[Timestamp]," +SimpleRadarCommandReplyGetStatusDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@timestamp", timestamp );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleRadarCommandReplyGetStatusDataReader = new SimpleRadarCommandReplyGetStatusDataReader( _loggerFactory, sqlDataReader );
                return simpleRadarCommandReplyGetStatusDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<RadarCommandReplyGetStatusObject> GetRadarCommandReplyGetStatusCollectionByTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<RadarCommandReplyGetStatusObject> GetRadarCommandReplyGetStatusCollectionAtTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<RadarCommandReplyGetStatusObject> GetRadarCommandReplyGetStatusCollectionFromTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<RadarCommandReplyGetStatusObject> GetRadarCommandReplyGetStatusCollectionUntilTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<RadarCommandReplyGetStatusObject> GetRadarCommandReplyGetStatusCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException( );
        }
        public SimpleRadarCommandReplyGetStatusDataReader GetRadarCommandReplyGetStatusByCommandDataReader( Guid command )
        {
            const string sql = SimpleRadarCommandReplyGetStatusDataReader.BaseQuery + " WHERE " +
                    SimpleRadarCommandReplyGetStatusDataReader.ViewAliasName + ".[Command] = @command " +
                    " ORDER BY " + SimpleRadarCommandReplyGetStatusDataReader.ViewAliasName + ".[Command]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var commandParameter = sqlCommandParameters.AddReference( "@command", command );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleRadarCommandReplyGetStatusDataReader = new SimpleRadarCommandReplyGetStatusDataReader( _loggerFactory, sqlDataReader );
                return simpleRadarCommandReplyGetStatusDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public RadarCommandReplyGetStatusObject? GetRadarCommandReplyGetStatusByCommand( Guid command )
        {
            throw new NotImplementedException( );
        }
        // ---------------------------------------------------------------------
        // RadarConfiguration queries
        // ---------------------------------------------------------------------
        public SimpleRadarConfigurationDataReader GetRadarConfigurationByIdDataReader( Guid id )
        {
            const string sql = SimpleRadarConfigurationDataReader.BaseQuery + "WHERE " + SimpleRadarConfigurationDataReader.ViewAliasName + ".[Id] = @id"; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                sqlCommandParameters.AddGuid( "@id", id );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleRadarConfigurationDataReader = new SimpleRadarConfigurationDataReader( _loggerFactory, sqlDataReader );
                return simpleRadarConfigurationDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public RadarConfigurationObject? GetRadarConfigurationById( Guid id )
        {
            var simpleRadarConfigurationDataReader = GetRadarConfigurationByIdDataReader( id );
            using ( simpleRadarConfigurationDataReader )
            {
                if ( simpleRadarConfigurationDataReader.Read( ) )
                {
                    var result = simpleRadarConfigurationDataReader.GetDataObject( );
                    return result;
                }
            }
            return null;
        }

        public void GetRadarConfigurationById( Guid id, Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleRadarConfigurationDataReader = GetRadarConfigurationByIdDataReader( id );
                using ( simpleRadarConfigurationDataReader )
                {
                    if ( simpleRadarConfigurationDataReader.Read( ) )
                    {
                        destinationWriter.Write( true );
                        simpleRadarConfigurationDataReader.WriteTo( destinationWriter );
                    }
                    else
                    {
                        destinationWriter.Write( false );
                    }
                }
            }
        }

        public SimpleRadarConfigurationDataReader GetRadarConfigurationCollectionDataReader( )
        {
            const string sql = SimpleRadarConfigurationDataReader.BaseQuery; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleRadarConfigurationDataReader = new SimpleRadarConfigurationDataReader( _loggerFactory, sqlDataReader );
                return simpleRadarConfigurationDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public IList<RadarConfigurationObject> GetRadarConfigurationCollection( )
        {
            var result = new List<RadarConfigurationObject>( );
            var simpleRadarConfigurationDataReader = GetRadarConfigurationCollectionDataReader( );
            using ( simpleRadarConfigurationDataReader )
            {
                while ( simpleRadarConfigurationDataReader.Read( ) )
                {
                    var data = simpleRadarConfigurationDataReader.GetDataObject( );
                    result.Add( data );
                }
            }
            return result;
        }

        public void GetRadarConfigurationCollection( Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleRadarConfigurationDataReader = GetRadarConfigurationCollectionDataReader( );
                using ( simpleRadarConfigurationDataReader )
                {
                    simpleRadarConfigurationDataReader.WriteResultSetTo( destinationWriter );
                }
            }
        }

        public SimpleRadarConfigurationDataReader GetRadarConfigurationCollectionByRadarDataReader( Guid radar )
        {
            const string sql = SimpleRadarConfigurationDataReader.BaseQuery + " WHERE " +
                    SimpleRadarConfigurationDataReader.ViewAliasName + ".[Radar] = @radar " +
                    " ORDER BY " + SimpleRadarConfigurationDataReader.ViewAliasName + ".[Radar]," +SimpleRadarConfigurationDataReader.ViewAliasName + ".[Timestamp]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var radarParameter = sqlCommandParameters.AddReference( "@radar", radar );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleRadarConfigurationDataReader = new SimpleRadarConfigurationDataReader( _loggerFactory, sqlDataReader );
                return simpleRadarConfigurationDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<RadarConfigurationObject> GetRadarConfigurationCollectionByRadar( Guid radar )
        {
            throw new NotImplementedException( );
        }
        public SimpleRadarConfigurationDataReader GetRadarConfigurationByRadarAndTimestampDataReader( Guid radar, DateTime timestamp )
        {
            const string sql = SimpleRadarConfigurationDataReader.BaseQuery + " WHERE " +
                    SimpleRadarConfigurationDataReader.ViewAliasName + ".[Radar] = @radar AND " +
                    SimpleRadarConfigurationDataReader.ViewAliasName + ".[Timestamp] = @timestamp " +
                    " ORDER BY " + SimpleRadarConfigurationDataReader.ViewAliasName + ".[Radar]," +SimpleRadarConfigurationDataReader.ViewAliasName + ".[Timestamp]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var radarParameter = sqlCommandParameters.AddReference( "@radar", radar );
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@timestamp", timestamp );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleRadarConfigurationDataReader = new SimpleRadarConfigurationDataReader( _loggerFactory, sqlDataReader );
                return simpleRadarConfigurationDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public RadarConfigurationObject? GetRadarConfigurationByRadarAndTimestamp( Guid radar, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public RadarConfigurationObject? GetRadarConfigurationByRadarAtTimestamp( Guid radar, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<RadarConfigurationObject> GetRadarConfigurationByRadarFromTimestamp( Guid radar, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<RadarConfigurationObject> GetRadarConfigurationByRadarUntilTimestamp( Guid radar, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<RadarConfigurationObject> GetRadarConfigurationByRadarOverTimestamp( Guid radar, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException( );
        }
        public SimpleRadarConfigurationDataReader GetRadarConfigurationCollectionByTimestampDataReader( DateTime timestamp )
        {
            const string sql = SimpleRadarConfigurationDataReader.BaseQuery + " WHERE " +
                    SimpleRadarConfigurationDataReader.ViewAliasName + ".[Timestamp] = @timestamp " +
                    " ORDER BY " + SimpleRadarConfigurationDataReader.ViewAliasName + ".[Timestamp]," +SimpleRadarConfigurationDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@timestamp", timestamp );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleRadarConfigurationDataReader = new SimpleRadarConfigurationDataReader( _loggerFactory, sqlDataReader );
                return simpleRadarConfigurationDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<RadarConfigurationObject> GetRadarConfigurationCollectionByTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<RadarConfigurationObject> GetRadarConfigurationCollectionAtTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<RadarConfigurationObject> GetRadarConfigurationCollectionFromTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<RadarConfigurationObject> GetRadarConfigurationCollectionUntilTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<RadarConfigurationObject> GetRadarConfigurationCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException( );
        }
        // ---------------------------------------------------------------------
        // RadarImage queries
        // ---------------------------------------------------------------------
        public SimpleRadarImageDataReader GetRadarImageByIdDataReader( Guid id )
        {
            const string sql = SimpleRadarImageDataReader.BaseQuery + "WHERE " + SimpleRadarImageDataReader.ViewAliasName + ".[Id] = @id"; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                sqlCommandParameters.AddGuid( "@id", id );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleRadarImageDataReader = new SimpleRadarImageDataReader( _loggerFactory, sqlDataReader );
                return simpleRadarImageDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public RadarImageObject? GetRadarImageById( Guid id )
        {
            var simpleRadarImageDataReader = GetRadarImageByIdDataReader( id );
            using ( simpleRadarImageDataReader )
            {
                if ( simpleRadarImageDataReader.Read( ) )
                {
                    var result = simpleRadarImageDataReader.GetDataObject( );
                    return result;
                }
            }
            return null;
        }

        public void GetRadarImageById( Guid id, Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleRadarImageDataReader = GetRadarImageByIdDataReader( id );
                using ( simpleRadarImageDataReader )
                {
                    if ( simpleRadarImageDataReader.Read( ) )
                    {
                        destinationWriter.Write( true );
                        simpleRadarImageDataReader.WriteTo( destinationWriter );
                    }
                    else
                    {
                        destinationWriter.Write( false );
                    }
                }
            }
        }

        public SimpleRadarImageDataReader GetRadarImageCollectionDataReader( )
        {
            const string sql = SimpleRadarImageDataReader.BaseQuery; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleRadarImageDataReader = new SimpleRadarImageDataReader( _loggerFactory, sqlDataReader );
                return simpleRadarImageDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public IList<RadarImageObject> GetRadarImageCollection( )
        {
            var result = new List<RadarImageObject>( );
            var simpleRadarImageDataReader = GetRadarImageCollectionDataReader( );
            using ( simpleRadarImageDataReader )
            {
                while ( simpleRadarImageDataReader.Read( ) )
                {
                    var data = simpleRadarImageDataReader.GetDataObject( );
                    result.Add( data );
                }
            }
            return result;
        }

        public void GetRadarImageCollection( Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleRadarImageDataReader = GetRadarImageCollectionDataReader( );
                using ( simpleRadarImageDataReader )
                {
                    simpleRadarImageDataReader.WriteResultSetTo( destinationWriter );
                }
            }
        }

        public SimpleRadarImageDataReader GetRadarImageCollectionByRadarDataReader( Guid radar )
        {
            const string sql = SimpleRadarImageDataReader.BaseQuery + " WHERE " +
                    SimpleRadarImageDataReader.ViewAliasName + ".[Radar] = @radar " +
                    " ORDER BY " + SimpleRadarImageDataReader.ViewAliasName + ".[Radar]," +SimpleRadarImageDataReader.ViewAliasName + ".[Timestamp]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var radarParameter = sqlCommandParameters.AddReference( "@radar", radar );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleRadarImageDataReader = new SimpleRadarImageDataReader( _loggerFactory, sqlDataReader );
                return simpleRadarImageDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<RadarImageObject> GetRadarImageCollectionByRadar( Guid radar )
        {
            throw new NotImplementedException( );
        }
        public SimpleRadarImageDataReader GetRadarImageByRadarAndTimestampDataReader( Guid radar, DateTime timestamp )
        {
            const string sql = SimpleRadarImageDataReader.BaseQuery + " WHERE " +
                    SimpleRadarImageDataReader.ViewAliasName + ".[Radar] = @radar AND " +
                    SimpleRadarImageDataReader.ViewAliasName + ".[Timestamp] = @timestamp " +
                    " ORDER BY " + SimpleRadarImageDataReader.ViewAliasName + ".[Radar]," +SimpleRadarImageDataReader.ViewAliasName + ".[Timestamp]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var radarParameter = sqlCommandParameters.AddReference( "@radar", radar );
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@timestamp", timestamp );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleRadarImageDataReader = new SimpleRadarImageDataReader( _loggerFactory, sqlDataReader );
                return simpleRadarImageDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public RadarImageObject? GetRadarImageByRadarAndTimestamp( Guid radar, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public RadarImageObject? GetRadarImageByRadarAtTimestamp( Guid radar, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<RadarImageObject> GetRadarImageByRadarFromTimestamp( Guid radar, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<RadarImageObject> GetRadarImageByRadarUntilTimestamp( Guid radar, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<RadarImageObject> GetRadarImageByRadarOverTimestamp( Guid radar, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException( );
        }
        public SimpleRadarImageDataReader GetRadarImageCollectionByTimestampDataReader( DateTime timestamp )
        {
            const string sql = SimpleRadarImageDataReader.BaseQuery + " WHERE " +
                    SimpleRadarImageDataReader.ViewAliasName + ".[Timestamp] = @timestamp " +
                    " ORDER BY " + SimpleRadarImageDataReader.ViewAliasName + ".[Timestamp]," +SimpleRadarImageDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@timestamp", timestamp );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleRadarImageDataReader = new SimpleRadarImageDataReader( _loggerFactory, sqlDataReader );
                return simpleRadarImageDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<RadarImageObject> GetRadarImageCollectionByTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<RadarImageObject> GetRadarImageCollectionAtTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<RadarImageObject> GetRadarImageCollectionFromTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<RadarImageObject> GetRadarImageCollectionUntilTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<RadarImageObject> GetRadarImageCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException( );
        }
        // ---------------------------------------------------------------------
        // RadarRawTrackTable queries
        // ---------------------------------------------------------------------
        public SimpleRadarRawTrackTableDataReader GetRadarRawTrackTableByIdDataReader( Guid id )
        {
            const string sql = SimpleRadarRawTrackTableDataReader.BaseQuery + "WHERE " + SimpleRadarRawTrackTableDataReader.ViewAliasName + ".[Id] = @id"; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                sqlCommandParameters.AddGuid( "@id", id );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleRadarRawTrackTableDataReader = new SimpleRadarRawTrackTableDataReader( _loggerFactory, sqlDataReader );
                return simpleRadarRawTrackTableDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public RadarRawTrackTableObject? GetRadarRawTrackTableById( Guid id )
        {
            var simpleRadarRawTrackTableDataReader = GetRadarRawTrackTableByIdDataReader( id );
            using ( simpleRadarRawTrackTableDataReader )
            {
                if ( simpleRadarRawTrackTableDataReader.Read( ) )
                {
                    var result = simpleRadarRawTrackTableDataReader.GetDataObject( );
                    return result;
                }
            }
            return null;
        }

        public void GetRadarRawTrackTableById( Guid id, Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleRadarRawTrackTableDataReader = GetRadarRawTrackTableByIdDataReader( id );
                using ( simpleRadarRawTrackTableDataReader )
                {
                    if ( simpleRadarRawTrackTableDataReader.Read( ) )
                    {
                        destinationWriter.Write( true );
                        simpleRadarRawTrackTableDataReader.WriteTo( destinationWriter );
                    }
                    else
                    {
                        destinationWriter.Write( false );
                    }
                }
            }
        }

        public SimpleRadarRawTrackTableDataReader GetRadarRawTrackTableCollectionDataReader( )
        {
            const string sql = SimpleRadarRawTrackTableDataReader.BaseQuery; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleRadarRawTrackTableDataReader = new SimpleRadarRawTrackTableDataReader( _loggerFactory, sqlDataReader );
                return simpleRadarRawTrackTableDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public IList<RadarRawTrackTableObject> GetRadarRawTrackTableCollection( )
        {
            var result = new List<RadarRawTrackTableObject>( );
            var simpleRadarRawTrackTableDataReader = GetRadarRawTrackTableCollectionDataReader( );
            using ( simpleRadarRawTrackTableDataReader )
            {
                while ( simpleRadarRawTrackTableDataReader.Read( ) )
                {
                    var data = simpleRadarRawTrackTableDataReader.GetDataObject( );
                    result.Add( data );
                }
            }
            return result;
        }

        public void GetRadarRawTrackTableCollection( Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleRadarRawTrackTableDataReader = GetRadarRawTrackTableCollectionDataReader( );
                using ( simpleRadarRawTrackTableDataReader )
                {
                    simpleRadarRawTrackTableDataReader.WriteResultSetTo( destinationWriter );
                }
            }
        }

        public SimpleRadarRawTrackTableDataReader GetRadarRawTrackTableCollectionByRadarDataReader( Guid radar )
        {
            const string sql = SimpleRadarRawTrackTableDataReader.BaseQuery + " WHERE " +
                    SimpleRadarRawTrackTableDataReader.ViewAliasName + ".[Radar] = @radar " +
                    " ORDER BY " + SimpleRadarRawTrackTableDataReader.ViewAliasName + ".[Radar]," +SimpleRadarRawTrackTableDataReader.ViewAliasName + ".[Timestamp]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var radarParameter = sqlCommandParameters.AddReference( "@radar", radar );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleRadarRawTrackTableDataReader = new SimpleRadarRawTrackTableDataReader( _loggerFactory, sqlDataReader );
                return simpleRadarRawTrackTableDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<RadarRawTrackTableObject> GetRadarRawTrackTableCollectionByRadar( Guid radar )
        {
            throw new NotImplementedException( );
        }
        public SimpleRadarRawTrackTableDataReader GetRadarRawTrackTableByRadarAndTimestampDataReader( Guid radar, DateTime timestamp )
        {
            const string sql = SimpleRadarRawTrackTableDataReader.BaseQuery + " WHERE " +
                    SimpleRadarRawTrackTableDataReader.ViewAliasName + ".[Radar] = @radar AND " +
                    SimpleRadarRawTrackTableDataReader.ViewAliasName + ".[Timestamp] = @timestamp " +
                    " ORDER BY " + SimpleRadarRawTrackTableDataReader.ViewAliasName + ".[Radar]," +SimpleRadarRawTrackTableDataReader.ViewAliasName + ".[Timestamp]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var radarParameter = sqlCommandParameters.AddReference( "@radar", radar );
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@timestamp", timestamp );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleRadarRawTrackTableDataReader = new SimpleRadarRawTrackTableDataReader( _loggerFactory, sqlDataReader );
                return simpleRadarRawTrackTableDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public RadarRawTrackTableObject? GetRadarRawTrackTableByRadarAndTimestamp( Guid radar, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public RadarRawTrackTableObject? GetRadarRawTrackTableByRadarAtTimestamp( Guid radar, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<RadarRawTrackTableObject> GetRadarRawTrackTableByRadarFromTimestamp( Guid radar, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<RadarRawTrackTableObject> GetRadarRawTrackTableByRadarUntilTimestamp( Guid radar, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<RadarRawTrackTableObject> GetRadarRawTrackTableByRadarOverTimestamp( Guid radar, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException( );
        }
        public SimpleRadarRawTrackTableDataReader GetRadarRawTrackTableCollectionByTimestampDataReader( DateTime timestamp )
        {
            const string sql = SimpleRadarRawTrackTableDataReader.BaseQuery + " WHERE " +
                    SimpleRadarRawTrackTableDataReader.ViewAliasName + ".[Timestamp] = @timestamp " +
                    " ORDER BY " + SimpleRadarRawTrackTableDataReader.ViewAliasName + ".[Timestamp]," +SimpleRadarRawTrackTableDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@timestamp", timestamp );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleRadarRawTrackTableDataReader = new SimpleRadarRawTrackTableDataReader( _loggerFactory, sqlDataReader );
                return simpleRadarRawTrackTableDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<RadarRawTrackTableObject> GetRadarRawTrackTableCollectionByTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<RadarRawTrackTableObject> GetRadarRawTrackTableCollectionAtTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<RadarRawTrackTableObject> GetRadarRawTrackTableCollectionFromTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<RadarRawTrackTableObject> GetRadarRawTrackTableCollectionUntilTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<RadarRawTrackTableObject> GetRadarRawTrackTableCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException( );
        }
        // ---------------------------------------------------------------------
        // RadarStatus queries
        // ---------------------------------------------------------------------
        public SimpleRadarStatusDataReader GetRadarStatusByIdDataReader( Guid id )
        {
            const string sql = SimpleRadarStatusDataReader.BaseQuery + "WHERE " + SimpleRadarStatusDataReader.ViewAliasName + ".[Id] = @id"; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                sqlCommandParameters.AddGuid( "@id", id );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleRadarStatusDataReader = new SimpleRadarStatusDataReader( _loggerFactory, sqlDataReader );
                return simpleRadarStatusDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public RadarStatusObject? GetRadarStatusById( Guid id )
        {
            var simpleRadarStatusDataReader = GetRadarStatusByIdDataReader( id );
            using ( simpleRadarStatusDataReader )
            {
                if ( simpleRadarStatusDataReader.Read( ) )
                {
                    var result = simpleRadarStatusDataReader.GetDataObject( );
                    return result;
                }
            }
            return null;
        }

        public void GetRadarStatusById( Guid id, Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleRadarStatusDataReader = GetRadarStatusByIdDataReader( id );
                using ( simpleRadarStatusDataReader )
                {
                    if ( simpleRadarStatusDataReader.Read( ) )
                    {
                        destinationWriter.Write( true );
                        simpleRadarStatusDataReader.WriteTo( destinationWriter );
                    }
                    else
                    {
                        destinationWriter.Write( false );
                    }
                }
            }
        }

        public SimpleRadarStatusDataReader GetRadarStatusCollectionDataReader( )
        {
            const string sql = SimpleRadarStatusDataReader.BaseQuery; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleRadarStatusDataReader = new SimpleRadarStatusDataReader( _loggerFactory, sqlDataReader );
                return simpleRadarStatusDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public IList<RadarStatusObject> GetRadarStatusCollection( )
        {
            var result = new List<RadarStatusObject>( );
            var simpleRadarStatusDataReader = GetRadarStatusCollectionDataReader( );
            using ( simpleRadarStatusDataReader )
            {
                while ( simpleRadarStatusDataReader.Read( ) )
                {
                    var data = simpleRadarStatusDataReader.GetDataObject( );
                    result.Add( data );
                }
            }
            return result;
        }

        public void GetRadarStatusCollection( Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleRadarStatusDataReader = GetRadarStatusCollectionDataReader( );
                using ( simpleRadarStatusDataReader )
                {
                    simpleRadarStatusDataReader.WriteResultSetTo( destinationWriter );
                }
            }
        }

        public SimpleRadarStatusDataReader GetRadarStatusCollectionByRadarDataReader( Guid radar )
        {
            const string sql = SimpleRadarStatusDataReader.BaseQuery + " WHERE " +
                    SimpleRadarStatusDataReader.ViewAliasName + ".[Radar] = @radar " +
                    " ORDER BY " + SimpleRadarStatusDataReader.ViewAliasName + ".[Radar]," +SimpleRadarStatusDataReader.ViewAliasName + ".[Timestamp]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var radarParameter = sqlCommandParameters.AddReference( "@radar", radar );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleRadarStatusDataReader = new SimpleRadarStatusDataReader( _loggerFactory, sqlDataReader );
                return simpleRadarStatusDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<RadarStatusObject> GetRadarStatusCollectionByRadar( Guid radar )
        {
            throw new NotImplementedException( );
        }
        public SimpleRadarStatusDataReader GetRadarStatusByRadarAndTimestampDataReader( Guid radar, DateTime timestamp )
        {
            const string sql = SimpleRadarStatusDataReader.BaseQuery + " WHERE " +
                    SimpleRadarStatusDataReader.ViewAliasName + ".[Radar] = @radar AND " +
                    SimpleRadarStatusDataReader.ViewAliasName + ".[Timestamp] = @timestamp " +
                    " ORDER BY " + SimpleRadarStatusDataReader.ViewAliasName + ".[Radar]," +SimpleRadarStatusDataReader.ViewAliasName + ".[Timestamp]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var radarParameter = sqlCommandParameters.AddReference( "@radar", radar );
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@timestamp", timestamp );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleRadarStatusDataReader = new SimpleRadarStatusDataReader( _loggerFactory, sqlDataReader );
                return simpleRadarStatusDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public RadarStatusObject? GetRadarStatusByRadarAndTimestamp( Guid radar, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public RadarStatusObject? GetRadarStatusByRadarAtTimestamp( Guid radar, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<RadarStatusObject> GetRadarStatusByRadarFromTimestamp( Guid radar, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<RadarStatusObject> GetRadarStatusByRadarUntilTimestamp( Guid radar, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<RadarStatusObject> GetRadarStatusByRadarOverTimestamp( Guid radar, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException( );
        }
        public SimpleRadarStatusDataReader GetRadarStatusCollectionByTimestampDataReader( DateTime timestamp )
        {
            const string sql = SimpleRadarStatusDataReader.BaseQuery + " WHERE " +
                    SimpleRadarStatusDataReader.ViewAliasName + ".[Timestamp] = @timestamp " +
                    " ORDER BY " + SimpleRadarStatusDataReader.ViewAliasName + ".[Timestamp]," +SimpleRadarStatusDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@timestamp", timestamp );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleRadarStatusDataReader = new SimpleRadarStatusDataReader( _loggerFactory, sqlDataReader );
                return simpleRadarStatusDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<RadarStatusObject> GetRadarStatusCollectionByTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<RadarStatusObject> GetRadarStatusCollectionAtTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<RadarStatusObject> GetRadarStatusCollectionFromTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<RadarStatusObject> GetRadarStatusCollectionUntilTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<RadarStatusObject> GetRadarStatusCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException( );
        }
        // ---------------------------------------------------------------------
        // RadioCommand queries
        // ---------------------------------------------------------------------
        public SimpleRadioCommandDataReader GetRadioCommandByIdDataReader( Guid id )
        {
            const string sql = SimpleRadioCommandDataReader.BaseQuery + "WHERE " + SimpleRadioCommandDataReader.ViewAliasName + ".[Id] = @id"; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                sqlCommandParameters.AddGuid( "@id", id );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleRadioCommandDataReader = new SimpleRadioCommandDataReader( _loggerFactory, sqlDataReader );
                return simpleRadioCommandDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public RadioCommandObject? GetRadioCommandById( Guid id )
        {
            var simpleRadioCommandDataReader = GetRadioCommandByIdDataReader( id );
            using ( simpleRadioCommandDataReader )
            {
                if ( simpleRadioCommandDataReader.Read( ) )
                {
                    var result = simpleRadioCommandDataReader.GetDataObject( );
                    return result;
                }
            }
            return null;
        }

        public void GetRadioCommandById( Guid id, Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleRadioCommandDataReader = GetRadioCommandByIdDataReader( id );
                using ( simpleRadioCommandDataReader )
                {
                    if ( simpleRadioCommandDataReader.Read( ) )
                    {
                        destinationWriter.Write( true );
                        simpleRadioCommandDataReader.WriteTo( destinationWriter );
                    }
                    else
                    {
                        destinationWriter.Write( false );
                    }
                }
            }
        }

        public SimpleRadioCommandDataReader GetRadioCommandCollectionDataReader( )
        {
            const string sql = SimpleRadioCommandDataReader.BaseQuery; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleRadioCommandDataReader = new SimpleRadioCommandDataReader( _loggerFactory, sqlDataReader );
                return simpleRadioCommandDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public IList<RadioCommandObject> GetRadioCommandCollection( )
        {
            var result = new List<RadioCommandObject>( );
            var simpleRadioCommandDataReader = GetRadioCommandCollectionDataReader( );
            using ( simpleRadioCommandDataReader )
            {
                while ( simpleRadioCommandDataReader.Read( ) )
                {
                    var data = simpleRadioCommandDataReader.GetDataObject( );
                    result.Add( data );
                }
            }
            return result;
        }

        public void GetRadioCommandCollection( Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleRadioCommandDataReader = GetRadioCommandCollectionDataReader( );
                using ( simpleRadioCommandDataReader )
                {
                    simpleRadioCommandDataReader.WriteResultSetTo( destinationWriter );
                }
            }
        }

        public SimpleRadioCommandDataReader GetRadioCommandCollectionByRadioDataReader( Guid radio )
        {
            const string sql = SimpleRadioCommandDataReader.BaseQuery + " WHERE " +
                    SimpleRadioCommandDataReader.ViewAliasName + ".[Radio] = @radio " +
                    " ORDER BY " + SimpleRadioCommandDataReader.ViewAliasName + ".[Radio]," +SimpleRadioCommandDataReader.ViewAliasName + ".[Timestamp]," +SimpleRadioCommandDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var radioParameter = sqlCommandParameters.AddReference( "@radio", radio );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleRadioCommandDataReader = new SimpleRadioCommandDataReader( _loggerFactory, sqlDataReader );
                return simpleRadioCommandDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<RadioCommandObject> GetRadioCommandCollectionByRadio( Guid radio )
        {
            throw new NotImplementedException( );
        }
        public SimpleRadioCommandDataReader GetRadioCommandCollectionByRadioAndTimestampDataReader( Guid radio, DateTime timestamp )
        {
            const string sql = SimpleRadioCommandDataReader.BaseQuery + " WHERE " +
                    SimpleRadioCommandDataReader.ViewAliasName + ".[Radio] = @radio AND " +
                    SimpleRadioCommandDataReader.ViewAliasName + ".[Timestamp] = @timestamp " +
                    " ORDER BY " + SimpleRadioCommandDataReader.ViewAliasName + ".[Radio]," +SimpleRadioCommandDataReader.ViewAliasName + ".[Timestamp]," +SimpleRadioCommandDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var radioParameter = sqlCommandParameters.AddReference( "@radio", radio );
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@timestamp", timestamp );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleRadioCommandDataReader = new SimpleRadioCommandDataReader( _loggerFactory, sqlDataReader );
                return simpleRadioCommandDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<RadioCommandObject> GetRadioCommandCollectionByRadioAndTimestamp( Guid radio, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<RadioCommandObject> GetRadioCommandCollectionByRadioAtTimestamp( Guid radio, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<RadioCommandObject> GetRadioCommandCollectionByRadioFromTimestamp( Guid radio, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<RadioCommandObject> GetRadioCommandCollectionByRadioUntilTimestamp( Guid radio, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<RadioCommandObject> GetRadioCommandCollectionByRadioOverTimestamp( Guid radio, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException( );
        }
        public SimpleRadioCommandDataReader GetRadioCommandCollectionByTimestampDataReader( DateTime timestamp )
        {
            const string sql = SimpleRadioCommandDataReader.BaseQuery + " WHERE " +
                    SimpleRadioCommandDataReader.ViewAliasName + ".[Timestamp] = @timestamp " +
                    " ORDER BY " + SimpleRadioCommandDataReader.ViewAliasName + ".[Timestamp]," +SimpleRadioCommandDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@timestamp", timestamp );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleRadioCommandDataReader = new SimpleRadioCommandDataReader( _loggerFactory, sqlDataReader );
                return simpleRadioCommandDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<RadioCommandObject> GetRadioCommandCollectionByTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<RadioCommandObject> GetRadioCommandCollectionAtTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<RadioCommandObject> GetRadioCommandCollectionFromTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<RadioCommandObject> GetRadioCommandCollectionUntilTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<RadioCommandObject> GetRadioCommandCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException( );
        }
        public SimpleRadioCommandDataReader GetRadioCommandCollectionByReplyDataReader( Guid reply )
        {
            const string sql = SimpleRadioCommandDataReader.BaseQuery + " WHERE " +
                    SimpleRadioCommandDataReader.ViewAliasName + ".[Reply] = @reply " +
                    " ORDER BY " + SimpleRadioCommandDataReader.ViewAliasName + ".[Reply]," +SimpleRadioCommandDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var replyParameter = sqlCommandParameters.AddReference( "@reply", reply );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleRadioCommandDataReader = new SimpleRadioCommandDataReader( _loggerFactory, sqlDataReader );
                return simpleRadioCommandDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<RadioCommandObject> GetRadioCommandCollectionByReply( Guid reply )
        {
            throw new NotImplementedException( );
        }
        // ---------------------------------------------------------------------
        // RadioCommandReply queries
        // ---------------------------------------------------------------------
        public SimpleRadioCommandReplyDataReader GetRadioCommandReplyByIdDataReader( Guid id )
        {
            const string sql = SimpleRadioCommandReplyDataReader.BaseQuery + "WHERE " + SimpleRadioCommandReplyDataReader.ViewAliasName + ".[Id] = @id"; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                sqlCommandParameters.AddGuid( "@id", id );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleRadioCommandReplyDataReader = new SimpleRadioCommandReplyDataReader( _loggerFactory, sqlDataReader );
                return simpleRadioCommandReplyDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public RadioCommandReplyObject? GetRadioCommandReplyById( Guid id )
        {
            var simpleRadioCommandReplyDataReader = GetRadioCommandReplyByIdDataReader( id );
            using ( simpleRadioCommandReplyDataReader )
            {
                if ( simpleRadioCommandReplyDataReader.Read( ) )
                {
                    var result = simpleRadioCommandReplyDataReader.GetDataObject( );
                    return result;
                }
            }
            return null;
        }

        public void GetRadioCommandReplyById( Guid id, Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleRadioCommandReplyDataReader = GetRadioCommandReplyByIdDataReader( id );
                using ( simpleRadioCommandReplyDataReader )
                {
                    if ( simpleRadioCommandReplyDataReader.Read( ) )
                    {
                        destinationWriter.Write( true );
                        simpleRadioCommandReplyDataReader.WriteTo( destinationWriter );
                    }
                    else
                    {
                        destinationWriter.Write( false );
                    }
                }
            }
        }

        public SimpleRadioCommandReplyDataReader GetRadioCommandReplyCollectionDataReader( )
        {
            const string sql = SimpleRadioCommandReplyDataReader.BaseQuery; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleRadioCommandReplyDataReader = new SimpleRadioCommandReplyDataReader( _loggerFactory, sqlDataReader );
                return simpleRadioCommandReplyDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public IList<RadioCommandReplyObject> GetRadioCommandReplyCollection( )
        {
            var result = new List<RadioCommandReplyObject>( );
            var simpleRadioCommandReplyDataReader = GetRadioCommandReplyCollectionDataReader( );
            using ( simpleRadioCommandReplyDataReader )
            {
                while ( simpleRadioCommandReplyDataReader.Read( ) )
                {
                    var data = simpleRadioCommandReplyDataReader.GetDataObject( );
                    result.Add( data );
                }
            }
            return result;
        }

        public void GetRadioCommandReplyCollection( Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleRadioCommandReplyDataReader = GetRadioCommandReplyCollectionDataReader( );
                using ( simpleRadioCommandReplyDataReader )
                {
                    simpleRadioCommandReplyDataReader.WriteResultSetTo( destinationWriter );
                }
            }
        }

        public SimpleRadioCommandReplyDataReader GetRadioCommandReplyCollectionByRadioDataReader( Guid radio )
        {
            const string sql = SimpleRadioCommandReplyDataReader.BaseQuery + " WHERE " +
                    SimpleRadioCommandReplyDataReader.ViewAliasName + ".[Radio] = @radio " +
                    " ORDER BY " + SimpleRadioCommandReplyDataReader.ViewAliasName + ".[Radio]," +SimpleRadioCommandReplyDataReader.ViewAliasName + ".[Timestamp]," +SimpleRadioCommandReplyDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var radioParameter = sqlCommandParameters.AddReference( "@radio", radio );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleRadioCommandReplyDataReader = new SimpleRadioCommandReplyDataReader( _loggerFactory, sqlDataReader );
                return simpleRadioCommandReplyDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<RadioCommandReplyObject> GetRadioCommandReplyCollectionByRadio( Guid radio )
        {
            throw new NotImplementedException( );
        }
        public SimpleRadioCommandReplyDataReader GetRadioCommandReplyCollectionByRadioAndTimestampDataReader( Guid radio, DateTime timestamp )
        {
            const string sql = SimpleRadioCommandReplyDataReader.BaseQuery + " WHERE " +
                    SimpleRadioCommandReplyDataReader.ViewAliasName + ".[Radio] = @radio AND " +
                    SimpleRadioCommandReplyDataReader.ViewAliasName + ".[Timestamp] = @timestamp " +
                    " ORDER BY " + SimpleRadioCommandReplyDataReader.ViewAliasName + ".[Radio]," +SimpleRadioCommandReplyDataReader.ViewAliasName + ".[Timestamp]," +SimpleRadioCommandReplyDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var radioParameter = sqlCommandParameters.AddReference( "@radio", radio );
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@timestamp", timestamp );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleRadioCommandReplyDataReader = new SimpleRadioCommandReplyDataReader( _loggerFactory, sqlDataReader );
                return simpleRadioCommandReplyDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<RadioCommandReplyObject> GetRadioCommandReplyCollectionByRadioAndTimestamp( Guid radio, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<RadioCommandReplyObject> GetRadioCommandReplyCollectionByRadioAtTimestamp( Guid radio, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<RadioCommandReplyObject> GetRadioCommandReplyCollectionByRadioFromTimestamp( Guid radio, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<RadioCommandReplyObject> GetRadioCommandReplyCollectionByRadioUntilTimestamp( Guid radio, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<RadioCommandReplyObject> GetRadioCommandReplyCollectionByRadioOverTimestamp( Guid radio, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException( );
        }
        public SimpleRadioCommandReplyDataReader GetRadioCommandReplyCollectionByTimestampDataReader( DateTime timestamp )
        {
            const string sql = SimpleRadioCommandReplyDataReader.BaseQuery + " WHERE " +
                    SimpleRadioCommandReplyDataReader.ViewAliasName + ".[Timestamp] = @timestamp " +
                    " ORDER BY " + SimpleRadioCommandReplyDataReader.ViewAliasName + ".[Timestamp]," +SimpleRadioCommandReplyDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@timestamp", timestamp );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleRadioCommandReplyDataReader = new SimpleRadioCommandReplyDataReader( _loggerFactory, sqlDataReader );
                return simpleRadioCommandReplyDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<RadioCommandReplyObject> GetRadioCommandReplyCollectionByTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<RadioCommandReplyObject> GetRadioCommandReplyCollectionAtTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<RadioCommandReplyObject> GetRadioCommandReplyCollectionFromTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<RadioCommandReplyObject> GetRadioCommandReplyCollectionUntilTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<RadioCommandReplyObject> GetRadioCommandReplyCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException( );
        }
        public SimpleRadioCommandReplyDataReader GetRadioCommandReplyByCommandDataReader( Guid command )
        {
            const string sql = SimpleRadioCommandReplyDataReader.BaseQuery + " WHERE " +
                    SimpleRadioCommandReplyDataReader.ViewAliasName + ".[Command] = @command " +
                    " ORDER BY " + SimpleRadioCommandReplyDataReader.ViewAliasName + ".[Command]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var commandParameter = sqlCommandParameters.AddReference( "@command", command );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleRadioCommandReplyDataReader = new SimpleRadioCommandReplyDataReader( _loggerFactory, sqlDataReader );
                return simpleRadioCommandReplyDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public RadioCommandReplyObject? GetRadioCommandReplyByCommand( Guid command )
        {
            throw new NotImplementedException( );
        }
        // ---------------------------------------------------------------------
        // RadioConfiguration queries
        // ---------------------------------------------------------------------
        public SimpleRadioConfigurationDataReader GetRadioConfigurationByIdDataReader( Guid id )
        {
            const string sql = SimpleRadioConfigurationDataReader.BaseQuery + "WHERE " + SimpleRadioConfigurationDataReader.ViewAliasName + ".[Id] = @id"; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                sqlCommandParameters.AddGuid( "@id", id );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleRadioConfigurationDataReader = new SimpleRadioConfigurationDataReader( _loggerFactory, sqlDataReader );
                return simpleRadioConfigurationDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public RadioConfigurationObject? GetRadioConfigurationById( Guid id )
        {
            var simpleRadioConfigurationDataReader = GetRadioConfigurationByIdDataReader( id );
            using ( simpleRadioConfigurationDataReader )
            {
                if ( simpleRadioConfigurationDataReader.Read( ) )
                {
                    var result = simpleRadioConfigurationDataReader.GetDataObject( );
                    return result;
                }
            }
            return null;
        }

        public void GetRadioConfigurationById( Guid id, Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleRadioConfigurationDataReader = GetRadioConfigurationByIdDataReader( id );
                using ( simpleRadioConfigurationDataReader )
                {
                    if ( simpleRadioConfigurationDataReader.Read( ) )
                    {
                        destinationWriter.Write( true );
                        simpleRadioConfigurationDataReader.WriteTo( destinationWriter );
                    }
                    else
                    {
                        destinationWriter.Write( false );
                    }
                }
            }
        }

        public SimpleRadioConfigurationDataReader GetRadioConfigurationCollectionDataReader( )
        {
            const string sql = SimpleRadioConfigurationDataReader.BaseQuery; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleRadioConfigurationDataReader = new SimpleRadioConfigurationDataReader( _loggerFactory, sqlDataReader );
                return simpleRadioConfigurationDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public IList<RadioConfigurationObject> GetRadioConfigurationCollection( )
        {
            var result = new List<RadioConfigurationObject>( );
            var simpleRadioConfigurationDataReader = GetRadioConfigurationCollectionDataReader( );
            using ( simpleRadioConfigurationDataReader )
            {
                while ( simpleRadioConfigurationDataReader.Read( ) )
                {
                    var data = simpleRadioConfigurationDataReader.GetDataObject( );
                    result.Add( data );
                }
            }
            return result;
        }

        public void GetRadioConfigurationCollection( Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleRadioConfigurationDataReader = GetRadioConfigurationCollectionDataReader( );
                using ( simpleRadioConfigurationDataReader )
                {
                    simpleRadioConfigurationDataReader.WriteResultSetTo( destinationWriter );
                }
            }
        }

        public SimpleRadioConfigurationDataReader GetRadioConfigurationCollectionByRadioDataReader( Guid radio )
        {
            const string sql = SimpleRadioConfigurationDataReader.BaseQuery + " WHERE " +
                    SimpleRadioConfigurationDataReader.ViewAliasName + ".[Radio] = @radio " +
                    " ORDER BY " + SimpleRadioConfigurationDataReader.ViewAliasName + ".[Radio]," +SimpleRadioConfigurationDataReader.ViewAliasName + ".[Timestamp]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var radioParameter = sqlCommandParameters.AddReference( "@radio", radio );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleRadioConfigurationDataReader = new SimpleRadioConfigurationDataReader( _loggerFactory, sqlDataReader );
                return simpleRadioConfigurationDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<RadioConfigurationObject> GetRadioConfigurationCollectionByRadio( Guid radio )
        {
            throw new NotImplementedException( );
        }
        public SimpleRadioConfigurationDataReader GetRadioConfigurationByRadioAndTimestampDataReader( Guid radio, DateTime timestamp )
        {
            const string sql = SimpleRadioConfigurationDataReader.BaseQuery + " WHERE " +
                    SimpleRadioConfigurationDataReader.ViewAliasName + ".[Radio] = @radio AND " +
                    SimpleRadioConfigurationDataReader.ViewAliasName + ".[Timestamp] = @timestamp " +
                    " ORDER BY " + SimpleRadioConfigurationDataReader.ViewAliasName + ".[Radio]," +SimpleRadioConfigurationDataReader.ViewAliasName + ".[Timestamp]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var radioParameter = sqlCommandParameters.AddReference( "@radio", radio );
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@timestamp", timestamp );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleRadioConfigurationDataReader = new SimpleRadioConfigurationDataReader( _loggerFactory, sqlDataReader );
                return simpleRadioConfigurationDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public RadioConfigurationObject? GetRadioConfigurationByRadioAndTimestamp( Guid radio, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public RadioConfigurationObject? GetRadioConfigurationByRadioAtTimestamp( Guid radio, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<RadioConfigurationObject> GetRadioConfigurationByRadioFromTimestamp( Guid radio, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<RadioConfigurationObject> GetRadioConfigurationByRadioUntilTimestamp( Guid radio, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<RadioConfigurationObject> GetRadioConfigurationByRadioOverTimestamp( Guid radio, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException( );
        }
        public SimpleRadioConfigurationDataReader GetRadioConfigurationCollectionByTimestampDataReader( DateTime timestamp )
        {
            const string sql = SimpleRadioConfigurationDataReader.BaseQuery + " WHERE " +
                    SimpleRadioConfigurationDataReader.ViewAliasName + ".[Timestamp] = @timestamp " +
                    " ORDER BY " + SimpleRadioConfigurationDataReader.ViewAliasName + ".[Timestamp]," +SimpleRadioConfigurationDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@timestamp", timestamp );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleRadioConfigurationDataReader = new SimpleRadioConfigurationDataReader( _loggerFactory, sqlDataReader );
                return simpleRadioConfigurationDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<RadioConfigurationObject> GetRadioConfigurationCollectionByTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<RadioConfigurationObject> GetRadioConfigurationCollectionAtTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<RadioConfigurationObject> GetRadioConfigurationCollectionFromTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<RadioConfigurationObject> GetRadioConfigurationCollectionUntilTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<RadioConfigurationObject> GetRadioConfigurationCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException( );
        }
        // ---------------------------------------------------------------------
        // RadomeCommand queries
        // ---------------------------------------------------------------------
        public SimpleRadomeCommandDataReader GetRadomeCommandByIdDataReader( Guid id )
        {
            const string sql = SimpleRadomeCommandDataReader.BaseQuery + "WHERE " + SimpleRadomeCommandDataReader.ViewAliasName + ".[Id] = @id"; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                sqlCommandParameters.AddGuid( "@id", id );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleRadomeCommandDataReader = new SimpleRadomeCommandDataReader( _loggerFactory, sqlDataReader );
                return simpleRadomeCommandDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public RadomeCommandObject? GetRadomeCommandById( Guid id )
        {
            var simpleRadomeCommandDataReader = GetRadomeCommandByIdDataReader( id );
            using ( simpleRadomeCommandDataReader )
            {
                if ( simpleRadomeCommandDataReader.Read( ) )
                {
                    var result = simpleRadomeCommandDataReader.GetDataObject( );
                    return result;
                }
            }
            return null;
        }

        public void GetRadomeCommandById( Guid id, Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleRadomeCommandDataReader = GetRadomeCommandByIdDataReader( id );
                using ( simpleRadomeCommandDataReader )
                {
                    if ( simpleRadomeCommandDataReader.Read( ) )
                    {
                        destinationWriter.Write( true );
                        simpleRadomeCommandDataReader.WriteTo( destinationWriter );
                    }
                    else
                    {
                        destinationWriter.Write( false );
                    }
                }
            }
        }

        public SimpleRadomeCommandDataReader GetRadomeCommandCollectionDataReader( )
        {
            const string sql = SimpleRadomeCommandDataReader.BaseQuery; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleRadomeCommandDataReader = new SimpleRadomeCommandDataReader( _loggerFactory, sqlDataReader );
                return simpleRadomeCommandDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public IList<RadomeCommandObject> GetRadomeCommandCollection( )
        {
            var result = new List<RadomeCommandObject>( );
            var simpleRadomeCommandDataReader = GetRadomeCommandCollectionDataReader( );
            using ( simpleRadomeCommandDataReader )
            {
                while ( simpleRadomeCommandDataReader.Read( ) )
                {
                    var data = simpleRadomeCommandDataReader.GetDataObject( );
                    result.Add( data );
                }
            }
            return result;
        }

        public void GetRadomeCommandCollection( Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleRadomeCommandDataReader = GetRadomeCommandCollectionDataReader( );
                using ( simpleRadomeCommandDataReader )
                {
                    simpleRadomeCommandDataReader.WriteResultSetTo( destinationWriter );
                }
            }
        }

        public SimpleRadomeCommandDataReader GetRadomeCommandCollectionByRadomeDataReader( Guid radome )
        {
            const string sql = SimpleRadomeCommandDataReader.BaseQuery + " WHERE " +
                    SimpleRadomeCommandDataReader.ViewAliasName + ".[Radome] = @radome " +
                    " ORDER BY " + SimpleRadomeCommandDataReader.ViewAliasName + ".[Radome]," +SimpleRadomeCommandDataReader.ViewAliasName + ".[Timestamp]," +SimpleRadomeCommandDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var radomeParameter = sqlCommandParameters.AddReference( "@radome", radome );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleRadomeCommandDataReader = new SimpleRadomeCommandDataReader( _loggerFactory, sqlDataReader );
                return simpleRadomeCommandDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<RadomeCommandObject> GetRadomeCommandCollectionByRadome( Guid radome )
        {
            throw new NotImplementedException( );
        }
        public SimpleRadomeCommandDataReader GetRadomeCommandCollectionByRadomeAndTimestampDataReader( Guid radome, DateTime timestamp )
        {
            const string sql = SimpleRadomeCommandDataReader.BaseQuery + " WHERE " +
                    SimpleRadomeCommandDataReader.ViewAliasName + ".[Radome] = @radome AND " +
                    SimpleRadomeCommandDataReader.ViewAliasName + ".[Timestamp] = @timestamp " +
                    " ORDER BY " + SimpleRadomeCommandDataReader.ViewAliasName + ".[Radome]," +SimpleRadomeCommandDataReader.ViewAliasName + ".[Timestamp]," +SimpleRadomeCommandDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var radomeParameter = sqlCommandParameters.AddReference( "@radome", radome );
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@timestamp", timestamp );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleRadomeCommandDataReader = new SimpleRadomeCommandDataReader( _loggerFactory, sqlDataReader );
                return simpleRadomeCommandDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<RadomeCommandObject> GetRadomeCommandCollectionByRadomeAndTimestamp( Guid radome, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<RadomeCommandObject> GetRadomeCommandCollectionByRadomeAtTimestamp( Guid radome, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<RadomeCommandObject> GetRadomeCommandCollectionByRadomeFromTimestamp( Guid radome, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<RadomeCommandObject> GetRadomeCommandCollectionByRadomeUntilTimestamp( Guid radome, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<RadomeCommandObject> GetRadomeCommandCollectionByRadomeOverTimestamp( Guid radome, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException( );
        }
        public SimpleRadomeCommandDataReader GetRadomeCommandCollectionByTimestampDataReader( DateTime timestamp )
        {
            const string sql = SimpleRadomeCommandDataReader.BaseQuery + " WHERE " +
                    SimpleRadomeCommandDataReader.ViewAliasName + ".[Timestamp] = @timestamp " +
                    " ORDER BY " + SimpleRadomeCommandDataReader.ViewAliasName + ".[Timestamp]," +SimpleRadomeCommandDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@timestamp", timestamp );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleRadomeCommandDataReader = new SimpleRadomeCommandDataReader( _loggerFactory, sqlDataReader );
                return simpleRadomeCommandDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<RadomeCommandObject> GetRadomeCommandCollectionByTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<RadomeCommandObject> GetRadomeCommandCollectionAtTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<RadomeCommandObject> GetRadomeCommandCollectionFromTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<RadomeCommandObject> GetRadomeCommandCollectionUntilTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<RadomeCommandObject> GetRadomeCommandCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException( );
        }
        public SimpleRadomeCommandDataReader GetRadomeCommandCollectionByReplyDataReader( Guid reply )
        {
            const string sql = SimpleRadomeCommandDataReader.BaseQuery + " WHERE " +
                    SimpleRadomeCommandDataReader.ViewAliasName + ".[Reply] = @reply " +
                    " ORDER BY " + SimpleRadomeCommandDataReader.ViewAliasName + ".[Reply]," +SimpleRadomeCommandDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var replyParameter = sqlCommandParameters.AddReference( "@reply", reply );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleRadomeCommandDataReader = new SimpleRadomeCommandDataReader( _loggerFactory, sqlDataReader );
                return simpleRadomeCommandDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<RadomeCommandObject> GetRadomeCommandCollectionByReply( Guid reply )
        {
            throw new NotImplementedException( );
        }
        // ---------------------------------------------------------------------
        // RadomeCommandReply queries
        // ---------------------------------------------------------------------
        public SimpleRadomeCommandReplyDataReader GetRadomeCommandReplyByIdDataReader( Guid id )
        {
            const string sql = SimpleRadomeCommandReplyDataReader.BaseQuery + "WHERE " + SimpleRadomeCommandReplyDataReader.ViewAliasName + ".[Id] = @id"; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                sqlCommandParameters.AddGuid( "@id", id );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleRadomeCommandReplyDataReader = new SimpleRadomeCommandReplyDataReader( _loggerFactory, sqlDataReader );
                return simpleRadomeCommandReplyDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public RadomeCommandReplyObject? GetRadomeCommandReplyById( Guid id )
        {
            var simpleRadomeCommandReplyDataReader = GetRadomeCommandReplyByIdDataReader( id );
            using ( simpleRadomeCommandReplyDataReader )
            {
                if ( simpleRadomeCommandReplyDataReader.Read( ) )
                {
                    var result = simpleRadomeCommandReplyDataReader.GetDataObject( );
                    return result;
                }
            }
            return null;
        }

        public void GetRadomeCommandReplyById( Guid id, Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleRadomeCommandReplyDataReader = GetRadomeCommandReplyByIdDataReader( id );
                using ( simpleRadomeCommandReplyDataReader )
                {
                    if ( simpleRadomeCommandReplyDataReader.Read( ) )
                    {
                        destinationWriter.Write( true );
                        simpleRadomeCommandReplyDataReader.WriteTo( destinationWriter );
                    }
                    else
                    {
                        destinationWriter.Write( false );
                    }
                }
            }
        }

        public SimpleRadomeCommandReplyDataReader GetRadomeCommandReplyCollectionDataReader( )
        {
            const string sql = SimpleRadomeCommandReplyDataReader.BaseQuery; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleRadomeCommandReplyDataReader = new SimpleRadomeCommandReplyDataReader( _loggerFactory, sqlDataReader );
                return simpleRadomeCommandReplyDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public IList<RadomeCommandReplyObject> GetRadomeCommandReplyCollection( )
        {
            var result = new List<RadomeCommandReplyObject>( );
            var simpleRadomeCommandReplyDataReader = GetRadomeCommandReplyCollectionDataReader( );
            using ( simpleRadomeCommandReplyDataReader )
            {
                while ( simpleRadomeCommandReplyDataReader.Read( ) )
                {
                    var data = simpleRadomeCommandReplyDataReader.GetDataObject( );
                    result.Add( data );
                }
            }
            return result;
        }

        public void GetRadomeCommandReplyCollection( Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleRadomeCommandReplyDataReader = GetRadomeCommandReplyCollectionDataReader( );
                using ( simpleRadomeCommandReplyDataReader )
                {
                    simpleRadomeCommandReplyDataReader.WriteResultSetTo( destinationWriter );
                }
            }
        }

        public SimpleRadomeCommandReplyDataReader GetRadomeCommandReplyCollectionByRadomeDataReader( Guid radome )
        {
            const string sql = SimpleRadomeCommandReplyDataReader.BaseQuery + " WHERE " +
                    SimpleRadomeCommandReplyDataReader.ViewAliasName + ".[Radome] = @radome " +
                    " ORDER BY " + SimpleRadomeCommandReplyDataReader.ViewAliasName + ".[Radome]," +SimpleRadomeCommandReplyDataReader.ViewAliasName + ".[Timestamp]," +SimpleRadomeCommandReplyDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var radomeParameter = sqlCommandParameters.AddReference( "@radome", radome );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleRadomeCommandReplyDataReader = new SimpleRadomeCommandReplyDataReader( _loggerFactory, sqlDataReader );
                return simpleRadomeCommandReplyDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<RadomeCommandReplyObject> GetRadomeCommandReplyCollectionByRadome( Guid radome )
        {
            throw new NotImplementedException( );
        }
        public SimpleRadomeCommandReplyDataReader GetRadomeCommandReplyCollectionByRadomeAndTimestampDataReader( Guid radome, DateTime timestamp )
        {
            const string sql = SimpleRadomeCommandReplyDataReader.BaseQuery + " WHERE " +
                    SimpleRadomeCommandReplyDataReader.ViewAliasName + ".[Radome] = @radome AND " +
                    SimpleRadomeCommandReplyDataReader.ViewAliasName + ".[Timestamp] = @timestamp " +
                    " ORDER BY " + SimpleRadomeCommandReplyDataReader.ViewAliasName + ".[Radome]," +SimpleRadomeCommandReplyDataReader.ViewAliasName + ".[Timestamp]," +SimpleRadomeCommandReplyDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var radomeParameter = sqlCommandParameters.AddReference( "@radome", radome );
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@timestamp", timestamp );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleRadomeCommandReplyDataReader = new SimpleRadomeCommandReplyDataReader( _loggerFactory, sqlDataReader );
                return simpleRadomeCommandReplyDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<RadomeCommandReplyObject> GetRadomeCommandReplyCollectionByRadomeAndTimestamp( Guid radome, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<RadomeCommandReplyObject> GetRadomeCommandReplyCollectionByRadomeAtTimestamp( Guid radome, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<RadomeCommandReplyObject> GetRadomeCommandReplyCollectionByRadomeFromTimestamp( Guid radome, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<RadomeCommandReplyObject> GetRadomeCommandReplyCollectionByRadomeUntilTimestamp( Guid radome, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<RadomeCommandReplyObject> GetRadomeCommandReplyCollectionByRadomeOverTimestamp( Guid radome, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException( );
        }
        public SimpleRadomeCommandReplyDataReader GetRadomeCommandReplyCollectionByTimestampDataReader( DateTime timestamp )
        {
            const string sql = SimpleRadomeCommandReplyDataReader.BaseQuery + " WHERE " +
                    SimpleRadomeCommandReplyDataReader.ViewAliasName + ".[Timestamp] = @timestamp " +
                    " ORDER BY " + SimpleRadomeCommandReplyDataReader.ViewAliasName + ".[Timestamp]," +SimpleRadomeCommandReplyDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@timestamp", timestamp );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleRadomeCommandReplyDataReader = new SimpleRadomeCommandReplyDataReader( _loggerFactory, sqlDataReader );
                return simpleRadomeCommandReplyDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<RadomeCommandReplyObject> GetRadomeCommandReplyCollectionByTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<RadomeCommandReplyObject> GetRadomeCommandReplyCollectionAtTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<RadomeCommandReplyObject> GetRadomeCommandReplyCollectionFromTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<RadomeCommandReplyObject> GetRadomeCommandReplyCollectionUntilTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<RadomeCommandReplyObject> GetRadomeCommandReplyCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException( );
        }
        public SimpleRadomeCommandReplyDataReader GetRadomeCommandReplyByCommandDataReader( Guid command )
        {
            const string sql = SimpleRadomeCommandReplyDataReader.BaseQuery + " WHERE " +
                    SimpleRadomeCommandReplyDataReader.ViewAliasName + ".[Command] = @command " +
                    " ORDER BY " + SimpleRadomeCommandReplyDataReader.ViewAliasName + ".[Command]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var commandParameter = sqlCommandParameters.AddReference( "@command", command );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleRadomeCommandReplyDataReader = new SimpleRadomeCommandReplyDataReader( _loggerFactory, sqlDataReader );
                return simpleRadomeCommandReplyDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public RadomeCommandReplyObject? GetRadomeCommandReplyByCommand( Guid command )
        {
            throw new NotImplementedException( );
        }
        // ---------------------------------------------------------------------
        // RadomeConfiguration queries
        // ---------------------------------------------------------------------
        public SimpleRadomeConfigurationDataReader GetRadomeConfigurationByIdDataReader( Guid id )
        {
            const string sql = SimpleRadomeConfigurationDataReader.BaseQuery + "WHERE " + SimpleRadomeConfigurationDataReader.ViewAliasName + ".[Id] = @id"; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                sqlCommandParameters.AddGuid( "@id", id );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleRadomeConfigurationDataReader = new SimpleRadomeConfigurationDataReader( _loggerFactory, sqlDataReader );
                return simpleRadomeConfigurationDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public RadomeConfigurationObject? GetRadomeConfigurationById( Guid id )
        {
            var simpleRadomeConfigurationDataReader = GetRadomeConfigurationByIdDataReader( id );
            using ( simpleRadomeConfigurationDataReader )
            {
                if ( simpleRadomeConfigurationDataReader.Read( ) )
                {
                    var result = simpleRadomeConfigurationDataReader.GetDataObject( );
                    return result;
                }
            }
            return null;
        }

        public void GetRadomeConfigurationById( Guid id, Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleRadomeConfigurationDataReader = GetRadomeConfigurationByIdDataReader( id );
                using ( simpleRadomeConfigurationDataReader )
                {
                    if ( simpleRadomeConfigurationDataReader.Read( ) )
                    {
                        destinationWriter.Write( true );
                        simpleRadomeConfigurationDataReader.WriteTo( destinationWriter );
                    }
                    else
                    {
                        destinationWriter.Write( false );
                    }
                }
            }
        }

        public SimpleRadomeConfigurationDataReader GetRadomeConfigurationCollectionDataReader( )
        {
            const string sql = SimpleRadomeConfigurationDataReader.BaseQuery; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleRadomeConfigurationDataReader = new SimpleRadomeConfigurationDataReader( _loggerFactory, sqlDataReader );
                return simpleRadomeConfigurationDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public IList<RadomeConfigurationObject> GetRadomeConfigurationCollection( )
        {
            var result = new List<RadomeConfigurationObject>( );
            var simpleRadomeConfigurationDataReader = GetRadomeConfigurationCollectionDataReader( );
            using ( simpleRadomeConfigurationDataReader )
            {
                while ( simpleRadomeConfigurationDataReader.Read( ) )
                {
                    var data = simpleRadomeConfigurationDataReader.GetDataObject( );
                    result.Add( data );
                }
            }
            return result;
        }

        public void GetRadomeConfigurationCollection( Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleRadomeConfigurationDataReader = GetRadomeConfigurationCollectionDataReader( );
                using ( simpleRadomeConfigurationDataReader )
                {
                    simpleRadomeConfigurationDataReader.WriteResultSetTo( destinationWriter );
                }
            }
        }

        public SimpleRadomeConfigurationDataReader GetRadomeConfigurationCollectionByRadomeDataReader( Guid radome )
        {
            const string sql = SimpleRadomeConfigurationDataReader.BaseQuery + " WHERE " +
                    SimpleRadomeConfigurationDataReader.ViewAliasName + ".[Radome] = @radome " +
                    " ORDER BY " + SimpleRadomeConfigurationDataReader.ViewAliasName + ".[Radome]," +SimpleRadomeConfigurationDataReader.ViewAliasName + ".[Timestamp]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var radomeParameter = sqlCommandParameters.AddReference( "@radome", radome );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleRadomeConfigurationDataReader = new SimpleRadomeConfigurationDataReader( _loggerFactory, sqlDataReader );
                return simpleRadomeConfigurationDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<RadomeConfigurationObject> GetRadomeConfigurationCollectionByRadome( Guid radome )
        {
            throw new NotImplementedException( );
        }
        public SimpleRadomeConfigurationDataReader GetRadomeConfigurationByRadomeAndTimestampDataReader( Guid radome, DateTime timestamp )
        {
            const string sql = SimpleRadomeConfigurationDataReader.BaseQuery + " WHERE " +
                    SimpleRadomeConfigurationDataReader.ViewAliasName + ".[Radome] = @radome AND " +
                    SimpleRadomeConfigurationDataReader.ViewAliasName + ".[Timestamp] = @timestamp " +
                    " ORDER BY " + SimpleRadomeConfigurationDataReader.ViewAliasName + ".[Radome]," +SimpleRadomeConfigurationDataReader.ViewAliasName + ".[Timestamp]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var radomeParameter = sqlCommandParameters.AddReference( "@radome", radome );
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@timestamp", timestamp );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleRadomeConfigurationDataReader = new SimpleRadomeConfigurationDataReader( _loggerFactory, sqlDataReader );
                return simpleRadomeConfigurationDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public RadomeConfigurationObject? GetRadomeConfigurationByRadomeAndTimestamp( Guid radome, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public RadomeConfigurationObject? GetRadomeConfigurationByRadomeAtTimestamp( Guid radome, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<RadomeConfigurationObject> GetRadomeConfigurationByRadomeFromTimestamp( Guid radome, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<RadomeConfigurationObject> GetRadomeConfigurationByRadomeUntilTimestamp( Guid radome, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<RadomeConfigurationObject> GetRadomeConfigurationByRadomeOverTimestamp( Guid radome, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException( );
        }
        public SimpleRadomeConfigurationDataReader GetRadomeConfigurationCollectionByTimestampDataReader( DateTime timestamp )
        {
            const string sql = SimpleRadomeConfigurationDataReader.BaseQuery + " WHERE " +
                    SimpleRadomeConfigurationDataReader.ViewAliasName + ".[Timestamp] = @timestamp " +
                    " ORDER BY " + SimpleRadomeConfigurationDataReader.ViewAliasName + ".[Timestamp]," +SimpleRadomeConfigurationDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@timestamp", timestamp );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleRadomeConfigurationDataReader = new SimpleRadomeConfigurationDataReader( _loggerFactory, sqlDataReader );
                return simpleRadomeConfigurationDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<RadomeConfigurationObject> GetRadomeConfigurationCollectionByTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<RadomeConfigurationObject> GetRadomeConfigurationCollectionAtTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<RadomeConfigurationObject> GetRadomeConfigurationCollectionFromTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<RadomeConfigurationObject> GetRadomeConfigurationCollectionUntilTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<RadomeConfigurationObject> GetRadomeConfigurationCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException( );
        }
        // ---------------------------------------------------------------------
        // ReferenceTimeseriesValue queries
        // ---------------------------------------------------------------------
        public SimpleReferenceTimeseriesValueDataReader GetReferenceTimeseriesValueByIdDataReader( Guid id )
        {
            const string sql = SimpleReferenceTimeseriesValueDataReader.BaseQuery + "WHERE " + SimpleReferenceTimeseriesValueDataReader.ViewAliasName + ".[Id] = @id"; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                sqlCommandParameters.AddGuid( "@id", id );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleReferenceTimeseriesValueDataReader = new SimpleReferenceTimeseriesValueDataReader( _loggerFactory, sqlDataReader );
                return simpleReferenceTimeseriesValueDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public ReferenceTimeseriesValueObject? GetReferenceTimeseriesValueById( Guid id )
        {
            var simpleReferenceTimeseriesValueDataReader = GetReferenceTimeseriesValueByIdDataReader( id );
            using ( simpleReferenceTimeseriesValueDataReader )
            {
                if ( simpleReferenceTimeseriesValueDataReader.Read( ) )
                {
                    var result = simpleReferenceTimeseriesValueDataReader.GetDataObject( );
                    return result;
                }
            }
            return null;
        }

        public void GetReferenceTimeseriesValueById( Guid id, Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleReferenceTimeseriesValueDataReader = GetReferenceTimeseriesValueByIdDataReader( id );
                using ( simpleReferenceTimeseriesValueDataReader )
                {
                    if ( simpleReferenceTimeseriesValueDataReader.Read( ) )
                    {
                        destinationWriter.Write( true );
                        simpleReferenceTimeseriesValueDataReader.WriteTo( destinationWriter );
                    }
                    else
                    {
                        destinationWriter.Write( false );
                    }
                }
            }
        }

        public SimpleReferenceTimeseriesValueDataReader GetReferenceTimeseriesValueCollectionDataReader( )
        {
            const string sql = SimpleReferenceTimeseriesValueDataReader.BaseQuery; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleReferenceTimeseriesValueDataReader = new SimpleReferenceTimeseriesValueDataReader( _loggerFactory, sqlDataReader );
                return simpleReferenceTimeseriesValueDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public IList<ReferenceTimeseriesValueObject> GetReferenceTimeseriesValueCollection( )
        {
            var result = new List<ReferenceTimeseriesValueObject>( );
            var simpleReferenceTimeseriesValueDataReader = GetReferenceTimeseriesValueCollectionDataReader( );
            using ( simpleReferenceTimeseriesValueDataReader )
            {
                while ( simpleReferenceTimeseriesValueDataReader.Read( ) )
                {
                    var data = simpleReferenceTimeseriesValueDataReader.GetDataObject( );
                    result.Add( data );
                }
            }
            return result;
        }

        public void GetReferenceTimeseriesValueCollection( Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleReferenceTimeseriesValueDataReader = GetReferenceTimeseriesValueCollectionDataReader( );
                using ( simpleReferenceTimeseriesValueDataReader )
                {
                    simpleReferenceTimeseriesValueDataReader.WriteResultSetTo( destinationWriter );
                }
            }
        }

        public SimpleReferenceTimeseriesValueDataReader GetReferenceTimeseriesValueCollectionByTimeseriesDataReader( Guid timeseries )
        {
            const string sql = SimpleReferenceTimeseriesValueDataReader.BaseQuery + " WHERE " +
                    SimpleReferenceTimeseriesValueDataReader.ViewAliasName + ".[Timeseries] = @timeseries " +
                    " ORDER BY " + SimpleReferenceTimeseriesValueDataReader.ViewAliasName + ".[Timeseries]," +SimpleReferenceTimeseriesValueDataReader.ViewAliasName + ".[Timestamp]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var timeseriesParameter = sqlCommandParameters.AddReference( "@timeseries", timeseries );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleReferenceTimeseriesValueDataReader = new SimpleReferenceTimeseriesValueDataReader( _loggerFactory, sqlDataReader );
                return simpleReferenceTimeseriesValueDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<ReferenceTimeseriesValueObject> GetReferenceTimeseriesValueCollectionByTimeseries( Guid timeseries )
        {
            throw new NotImplementedException( );
        }
        public SimpleReferenceTimeseriesValueDataReader GetReferenceTimeseriesValueByTimeseriesAndTimestampDataReader( Guid timeseries, DateTime timestamp )
        {
            const string sql = SimpleReferenceTimeseriesValueDataReader.BaseQuery + " WHERE " +
                    SimpleReferenceTimeseriesValueDataReader.ViewAliasName + ".[Timeseries] = @timeseries AND " +
                    SimpleReferenceTimeseriesValueDataReader.ViewAliasName + ".[Timestamp] = @timestamp " +
                    " ORDER BY " + SimpleReferenceTimeseriesValueDataReader.ViewAliasName + ".[Timeseries]," +SimpleReferenceTimeseriesValueDataReader.ViewAliasName + ".[Timestamp]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var timeseriesParameter = sqlCommandParameters.AddReference( "@timeseries", timeseries );
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@timestamp", timestamp );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleReferenceTimeseriesValueDataReader = new SimpleReferenceTimeseriesValueDataReader( _loggerFactory, sqlDataReader );
                return simpleReferenceTimeseriesValueDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public ReferenceTimeseriesValueObject? GetReferenceTimeseriesValueByTimeseriesAndTimestamp( Guid timeseries, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public ReferenceTimeseriesValueObject? GetReferenceTimeseriesValueByTimeseriesAtTimestamp( Guid timeseries, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<ReferenceTimeseriesValueObject> GetReferenceTimeseriesValueByTimeseriesFromTimestamp( Guid timeseries, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<ReferenceTimeseriesValueObject> GetReferenceTimeseriesValueByTimeseriesUntilTimestamp( Guid timeseries, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<ReferenceTimeseriesValueObject> GetReferenceTimeseriesValueByTimeseriesOverTimestamp( Guid timeseries, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException( );
        }
        public SimpleReferenceTimeseriesValueDataReader GetReferenceTimeseriesValueCollectionByTimestampDataReader( DateTime timestamp )
        {
            const string sql = SimpleReferenceTimeseriesValueDataReader.BaseQuery + " WHERE " +
                    SimpleReferenceTimeseriesValueDataReader.ViewAliasName + ".[Timestamp] = @timestamp " +
                    " ORDER BY " + SimpleReferenceTimeseriesValueDataReader.ViewAliasName + ".[Timestamp]," +SimpleReferenceTimeseriesValueDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@timestamp", timestamp );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleReferenceTimeseriesValueDataReader = new SimpleReferenceTimeseriesValueDataReader( _loggerFactory, sqlDataReader );
                return simpleReferenceTimeseriesValueDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<ReferenceTimeseriesValueObject> GetReferenceTimeseriesValueCollectionByTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<ReferenceTimeseriesValueObject> GetReferenceTimeseriesValueCollectionAtTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<ReferenceTimeseriesValueObject> GetReferenceTimeseriesValueCollectionFromTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<ReferenceTimeseriesValueObject> GetReferenceTimeseriesValueCollectionUntilTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<ReferenceTimeseriesValueObject> GetReferenceTimeseriesValueCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException( );
        }
        public SimpleReferenceTimeseriesValueDataReader GetReferenceTimeseriesValueCollectionByValueDataReader( Guid value__ )
        {
            const string sql = SimpleReferenceTimeseriesValueDataReader.BaseQuery + " WHERE " +
                    SimpleReferenceTimeseriesValueDataReader.ViewAliasName + ".[Value] = @value__ " +
                    " ORDER BY " + SimpleReferenceTimeseriesValueDataReader.ViewAliasName + ".[Value]," +SimpleReferenceTimeseriesValueDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var value__Parameter = sqlCommandParameters.AddReference( "@value", value__ );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleReferenceTimeseriesValueDataReader = new SimpleReferenceTimeseriesValueDataReader( _loggerFactory, sqlDataReader );
                return simpleReferenceTimeseriesValueDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<ReferenceTimeseriesValueObject> GetReferenceTimeseriesValueCollectionByValue( Guid value__ )
        {
            throw new NotImplementedException( );
        }
        // ---------------------------------------------------------------------
        // SByteTimeseriesValue queries
        // ---------------------------------------------------------------------
        public SimpleSByteTimeseriesValueDataReader GetSByteTimeseriesValueByIdDataReader( Guid id )
        {
            const string sql = SimpleSByteTimeseriesValueDataReader.BaseQuery + "WHERE " + SimpleSByteTimeseriesValueDataReader.ViewAliasName + ".[Id] = @id"; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                sqlCommandParameters.AddGuid( "@id", id );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleSByteTimeseriesValueDataReader = new SimpleSByteTimeseriesValueDataReader( _loggerFactory, sqlDataReader );
                return simpleSByteTimeseriesValueDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public SByteTimeseriesValueObject? GetSByteTimeseriesValueById( Guid id )
        {
            var simpleSByteTimeseriesValueDataReader = GetSByteTimeseriesValueByIdDataReader( id );
            using ( simpleSByteTimeseriesValueDataReader )
            {
                if ( simpleSByteTimeseriesValueDataReader.Read( ) )
                {
                    var result = simpleSByteTimeseriesValueDataReader.GetDataObject( );
                    return result;
                }
            }
            return null;
        }

        public void GetSByteTimeseriesValueById( Guid id, Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleSByteTimeseriesValueDataReader = GetSByteTimeseriesValueByIdDataReader( id );
                using ( simpleSByteTimeseriesValueDataReader )
                {
                    if ( simpleSByteTimeseriesValueDataReader.Read( ) )
                    {
                        destinationWriter.Write( true );
                        simpleSByteTimeseriesValueDataReader.WriteTo( destinationWriter );
                    }
                    else
                    {
                        destinationWriter.Write( false );
                    }
                }
            }
        }

        public SimpleSByteTimeseriesValueDataReader GetSByteTimeseriesValueCollectionDataReader( )
        {
            const string sql = SimpleSByteTimeseriesValueDataReader.BaseQuery; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleSByteTimeseriesValueDataReader = new SimpleSByteTimeseriesValueDataReader( _loggerFactory, sqlDataReader );
                return simpleSByteTimeseriesValueDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public IList<SByteTimeseriesValueObject> GetSByteTimeseriesValueCollection( )
        {
            var result = new List<SByteTimeseriesValueObject>( );
            var simpleSByteTimeseriesValueDataReader = GetSByteTimeseriesValueCollectionDataReader( );
            using ( simpleSByteTimeseriesValueDataReader )
            {
                while ( simpleSByteTimeseriesValueDataReader.Read( ) )
                {
                    var data = simpleSByteTimeseriesValueDataReader.GetDataObject( );
                    result.Add( data );
                }
            }
            return result;
        }

        public void GetSByteTimeseriesValueCollection( Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleSByteTimeseriesValueDataReader = GetSByteTimeseriesValueCollectionDataReader( );
                using ( simpleSByteTimeseriesValueDataReader )
                {
                    simpleSByteTimeseriesValueDataReader.WriteResultSetTo( destinationWriter );
                }
            }
        }

        public SimpleSByteTimeseriesValueDataReader GetSByteTimeseriesValueCollectionByTimeseriesDataReader( Guid timeseries )
        {
            const string sql = SimpleSByteTimeseriesValueDataReader.BaseQuery + " WHERE " +
                    SimpleSByteTimeseriesValueDataReader.ViewAliasName + ".[Timeseries] = @timeseries " +
                    " ORDER BY " + SimpleSByteTimeseriesValueDataReader.ViewAliasName + ".[Timeseries]," +SimpleSByteTimeseriesValueDataReader.ViewAliasName + ".[Timestamp]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var timeseriesParameter = sqlCommandParameters.AddReference( "@timeseries", timeseries );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleSByteTimeseriesValueDataReader = new SimpleSByteTimeseriesValueDataReader( _loggerFactory, sqlDataReader );
                return simpleSByteTimeseriesValueDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<SByteTimeseriesValueObject> GetSByteTimeseriesValueCollectionByTimeseries( Guid timeseries )
        {
            throw new NotImplementedException( );
        }
        public SimpleSByteTimeseriesValueDataReader GetSByteTimeseriesValueByTimeseriesAndTimestampDataReader( Guid timeseries, DateTime timestamp )
        {
            const string sql = SimpleSByteTimeseriesValueDataReader.BaseQuery + " WHERE " +
                    SimpleSByteTimeseriesValueDataReader.ViewAliasName + ".[Timeseries] = @timeseries AND " +
                    SimpleSByteTimeseriesValueDataReader.ViewAliasName + ".[Timestamp] = @timestamp " +
                    " ORDER BY " + SimpleSByteTimeseriesValueDataReader.ViewAliasName + ".[Timeseries]," +SimpleSByteTimeseriesValueDataReader.ViewAliasName + ".[Timestamp]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var timeseriesParameter = sqlCommandParameters.AddReference( "@timeseries", timeseries );
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@timestamp", timestamp );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleSByteTimeseriesValueDataReader = new SimpleSByteTimeseriesValueDataReader( _loggerFactory, sqlDataReader );
                return simpleSByteTimeseriesValueDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public SByteTimeseriesValueObject? GetSByteTimeseriesValueByTimeseriesAndTimestamp( Guid timeseries, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public SByteTimeseriesValueObject? GetSByteTimeseriesValueByTimeseriesAtTimestamp( Guid timeseries, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<SByteTimeseriesValueObject> GetSByteTimeseriesValueByTimeseriesFromTimestamp( Guid timeseries, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<SByteTimeseriesValueObject> GetSByteTimeseriesValueByTimeseriesUntilTimestamp( Guid timeseries, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<SByteTimeseriesValueObject> GetSByteTimeseriesValueByTimeseriesOverTimestamp( Guid timeseries, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException( );
        }
        public SimpleSByteTimeseriesValueDataReader GetSByteTimeseriesValueCollectionByTimestampDataReader( DateTime timestamp )
        {
            const string sql = SimpleSByteTimeseriesValueDataReader.BaseQuery + " WHERE " +
                    SimpleSByteTimeseriesValueDataReader.ViewAliasName + ".[Timestamp] = @timestamp " +
                    " ORDER BY " + SimpleSByteTimeseriesValueDataReader.ViewAliasName + ".[Timestamp]," +SimpleSByteTimeseriesValueDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@timestamp", timestamp );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleSByteTimeseriesValueDataReader = new SimpleSByteTimeseriesValueDataReader( _loggerFactory, sqlDataReader );
                return simpleSByteTimeseriesValueDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<SByteTimeseriesValueObject> GetSByteTimeseriesValueCollectionByTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<SByteTimeseriesValueObject> GetSByteTimeseriesValueCollectionAtTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<SByteTimeseriesValueObject> GetSByteTimeseriesValueCollectionFromTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<SByteTimeseriesValueObject> GetSByteTimeseriesValueCollectionUntilTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<SByteTimeseriesValueObject> GetSByteTimeseriesValueCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException( );
        }
        // ---------------------------------------------------------------------
        // SecurityDomain queries
        // ---------------------------------------------------------------------
        public SimpleSecurityDomainDataReader GetSecurityDomainByIdDataReader( Guid id )
        {
            const string sql = SimpleSecurityDomainDataReader.BaseQuery + "WHERE " + SimpleSecurityDomainDataReader.ViewAliasName + ".[Id] = @id"; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                sqlCommandParameters.AddGuid( "@id", id );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleSecurityDomainDataReader = new SimpleSecurityDomainDataReader( _loggerFactory, sqlDataReader );
                return simpleSecurityDomainDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public SecurityDomainObject? GetSecurityDomainById( Guid id )
        {
            var simpleSecurityDomainDataReader = GetSecurityDomainByIdDataReader( id );
            using ( simpleSecurityDomainDataReader )
            {
                if ( simpleSecurityDomainDataReader.Read( ) )
                {
                    var result = simpleSecurityDomainDataReader.GetDataObject( );
                    return result;
                }
            }
            return null;
        }

        public void GetSecurityDomainById( Guid id, Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleSecurityDomainDataReader = GetSecurityDomainByIdDataReader( id );
                using ( simpleSecurityDomainDataReader )
                {
                    if ( simpleSecurityDomainDataReader.Read( ) )
                    {
                        destinationWriter.Write( true );
                        simpleSecurityDomainDataReader.WriteTo( destinationWriter );
                    }
                    else
                    {
                        destinationWriter.Write( false );
                    }
                }
            }
        }

        public SimpleSecurityDomainDataReader GetSecurityDomainCollectionDataReader( )
        {
            const string sql = SimpleSecurityDomainDataReader.BaseQuery; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleSecurityDomainDataReader = new SimpleSecurityDomainDataReader( _loggerFactory, sqlDataReader );
                return simpleSecurityDomainDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public IList<SecurityDomainObject> GetSecurityDomainCollection( )
        {
            var result = new List<SecurityDomainObject>( );
            var simpleSecurityDomainDataReader = GetSecurityDomainCollectionDataReader( );
            using ( simpleSecurityDomainDataReader )
            {
                while ( simpleSecurityDomainDataReader.Read( ) )
                {
                    var data = simpleSecurityDomainDataReader.GetDataObject( );
                    result.Add( data );
                }
            }
            return result;
        }

        public void GetSecurityDomainCollection( Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleSecurityDomainDataReader = GetSecurityDomainCollectionDataReader( );
                using ( simpleSecurityDomainDataReader )
                {
                    simpleSecurityDomainDataReader.WriteResultSetTo( destinationWriter );
                }
            }
        }

        public SimpleSecurityDomainDataReader GetSecurityDomainByNameDataReader( string name )
        {
            const string sql = SimpleSecurityDomainDataReader.BaseQuery + " WHERE " +
                    SimpleSecurityDomainDataReader.ViewAliasName + ".[Name] = @name " +
                    " ORDER BY " + SimpleSecurityDomainDataReader.ViewAliasName + ".[Name]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var nameParameter = sqlCommandParameters.AddNVarChar( "@name", name, 127 );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleSecurityDomainDataReader = new SimpleSecurityDomainDataReader( _loggerFactory, sqlDataReader );
                return simpleSecurityDomainDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public SecurityDomainObject? GetSecurityDomainByName( string name )
        {
            throw new NotImplementedException( );
        }
        // ---------------------------------------------------------------------
        // SecurityIdentifier queries
        // ---------------------------------------------------------------------
        public ComplexSecurityIdentifierDataReader GetSecurityIdentifierByIdDataReader( Guid id )
        {
            const string sql = ComplexSecurityIdentifierDataReader.BaseQuery + "WHERE " + ComplexSecurityIdentifierDataReader.ViewAliasName + ".[Id] = @id"; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                sqlCommandParameters.AddGuid( "@id", id );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var complexSecurityIdentifierDataReader = new ComplexSecurityIdentifierDataReader( _loggerFactory, sqlDataReader );
                return complexSecurityIdentifierDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public SecurityIdentifierObject? GetSecurityIdentifierById( Guid id )
        {
            var complexSecurityIdentifierDataReader = GetSecurityIdentifierByIdDataReader( id );
            using ( complexSecurityIdentifierDataReader )
            {
                if ( complexSecurityIdentifierDataReader.Read( ) )
                {
                    var result = complexSecurityIdentifierDataReader.GetDataObject( );
                    return result;
                }
            }
            return null;
        }

        public void GetSecurityIdentifierById( Guid id, Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var complexSecurityIdentifierDataReader = GetSecurityIdentifierByIdDataReader( id );
                using ( complexSecurityIdentifierDataReader )
                {
                    if ( complexSecurityIdentifierDataReader.Read( ) )
                    {
                        destinationWriter.Write( true );
                        complexSecurityIdentifierDataReader.WriteTo( destinationWriter );
                    }
                    else
                    {
                        destinationWriter.Write( false );
                    }
                }
            }
        }

        public ComplexSecurityIdentifierDataReader GetSecurityIdentifierCollectionDataReader( )
        {
            const string sql = ComplexSecurityIdentifierDataReader.BaseQuery; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var complexSecurityIdentifierDataReader = new ComplexSecurityIdentifierDataReader( _loggerFactory, sqlDataReader );
                return complexSecurityIdentifierDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public IList<SecurityIdentifierObject> GetSecurityIdentifierCollection( )
        {
            var result = new List<SecurityIdentifierObject>( );
            var complexSecurityIdentifierDataReader = GetSecurityIdentifierCollectionDataReader( );
            using ( complexSecurityIdentifierDataReader )
            {
                while ( complexSecurityIdentifierDataReader.Read( ) )
                {
                    var data = complexSecurityIdentifierDataReader.GetDataObject( );
                    result.Add( data );
                }
            }
            return result;
        }

        public void GetSecurityIdentifierCollection( Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var complexSecurityIdentifierDataReader = GetSecurityIdentifierCollectionDataReader( );
                using ( complexSecurityIdentifierDataReader )
                {
                    complexSecurityIdentifierDataReader.WriteResultSetTo( destinationWriter );
                }
            }
        }

        public ComplexSecurityIdentifierDataReader GetSecurityIdentifierCollectionByDomainDataReader( Guid domain )
        {
            const string sql = ComplexSecurityIdentifierDataReader.BaseQuery + " WHERE " +
                    ComplexSecurityIdentifierDataReader.ViewAliasName + ".[Domain] = @domain " +
                    " ORDER BY " + ComplexSecurityIdentifierDataReader.ViewAliasName + ".[Domain]," +ComplexSecurityIdentifierDataReader.ViewAliasName + ".[Identity]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var domainParameter = sqlCommandParameters.AddReference( "@domain", domain );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var complexSecurityIdentifierDataReader = new ComplexSecurityIdentifierDataReader( _loggerFactory, sqlDataReader );
                return complexSecurityIdentifierDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<SecurityIdentifierObject> GetSecurityIdentifierCollectionByDomain( Guid domain )
        {
            throw new NotImplementedException( );
        }
        public ComplexSecurityIdentifierDataReader GetSecurityIdentifierByDomainAndIdentityDataReader( Guid domain, string identity )
        {
            const string sql = ComplexSecurityIdentifierDataReader.BaseQuery + " WHERE " +
                    ComplexSecurityIdentifierDataReader.ViewAliasName + ".[Domain] = @domain AND " +
                    ComplexSecurityIdentifierDataReader.ViewAliasName + ".[Identity] = @identity " +
                    " ORDER BY " + ComplexSecurityIdentifierDataReader.ViewAliasName + ".[Domain]," +ComplexSecurityIdentifierDataReader.ViewAliasName + ".[Identity]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var domainParameter = sqlCommandParameters.AddReference( "@domain", domain );
                var identityParameter = sqlCommandParameters.AddNVarChar( "@identity", identity, 255 );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var complexSecurityIdentifierDataReader = new ComplexSecurityIdentifierDataReader( _loggerFactory, sqlDataReader );
                return complexSecurityIdentifierDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public SecurityIdentifierObject? GetSecurityIdentifierByDomainAndIdentity( Guid domain, string identity )
        {
            throw new NotImplementedException( );
        }
        // ---------------------------------------------------------------------
        // SecurityLogin queries
        // ---------------------------------------------------------------------
        public SimpleSecurityLoginDataReader GetSecurityLoginByIdDataReader( Guid id )
        {
            const string sql = SimpleSecurityLoginDataReader.BaseQuery + "WHERE " + SimpleSecurityLoginDataReader.ViewAliasName + ".[Id] = @id"; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                sqlCommandParameters.AddGuid( "@id", id );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleSecurityLoginDataReader = new SimpleSecurityLoginDataReader( _loggerFactory, sqlDataReader );
                return simpleSecurityLoginDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public SecurityLoginObject? GetSecurityLoginById( Guid id )
        {
            var simpleSecurityLoginDataReader = GetSecurityLoginByIdDataReader( id );
            using ( simpleSecurityLoginDataReader )
            {
                if ( simpleSecurityLoginDataReader.Read( ) )
                {
                    var result = simpleSecurityLoginDataReader.GetDataObject( );
                    return result;
                }
            }
            return null;
        }

        public void GetSecurityLoginById( Guid id, Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleSecurityLoginDataReader = GetSecurityLoginByIdDataReader( id );
                using ( simpleSecurityLoginDataReader )
                {
                    if ( simpleSecurityLoginDataReader.Read( ) )
                    {
                        destinationWriter.Write( true );
                        simpleSecurityLoginDataReader.WriteTo( destinationWriter );
                    }
                    else
                    {
                        destinationWriter.Write( false );
                    }
                }
            }
        }

        public SimpleSecurityLoginDataReader GetSecurityLoginCollectionDataReader( )
        {
            const string sql = SimpleSecurityLoginDataReader.BaseQuery; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleSecurityLoginDataReader = new SimpleSecurityLoginDataReader( _loggerFactory, sqlDataReader );
                return simpleSecurityLoginDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public IList<SecurityLoginObject> GetSecurityLoginCollection( )
        {
            var result = new List<SecurityLoginObject>( );
            var simpleSecurityLoginDataReader = GetSecurityLoginCollectionDataReader( );
            using ( simpleSecurityLoginDataReader )
            {
                while ( simpleSecurityLoginDataReader.Read( ) )
                {
                    var data = simpleSecurityLoginDataReader.GetDataObject( );
                    result.Add( data );
                }
            }
            return result;
        }

        public void GetSecurityLoginCollection( Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleSecurityLoginDataReader = GetSecurityLoginCollectionDataReader( );
                using ( simpleSecurityLoginDataReader )
                {
                    simpleSecurityLoginDataReader.WriteResultSetTo( destinationWriter );
                }
            }
        }

        public SimpleSecurityLoginDataReader GetSecurityLoginCollectionByDomainDataReader( Guid domain )
        {
            const string sql = SimpleSecurityLoginDataReader.BaseQuery + " WHERE " +
                    SimpleSecurityLoginDataReader.ViewAliasName + ".[Domain] = @domain " +
                    " ORDER BY " + SimpleSecurityLoginDataReader.ViewAliasName + ".[Domain]," +SimpleSecurityLoginDataReader.ViewAliasName + ".[Identity]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var domainParameter = sqlCommandParameters.AddReference( "@domain", domain );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleSecurityLoginDataReader = new SimpleSecurityLoginDataReader( _loggerFactory, sqlDataReader );
                return simpleSecurityLoginDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<SecurityLoginObject> GetSecurityLoginCollectionByDomain( Guid domain )
        {
            throw new NotImplementedException( );
        }
        public SimpleSecurityLoginDataReader GetSecurityLoginByDomainAndIdentityDataReader( Guid domain, string identity )
        {
            const string sql = SimpleSecurityLoginDataReader.BaseQuery + " WHERE " +
                    SimpleSecurityLoginDataReader.ViewAliasName + ".[Domain] = @domain AND " +
                    SimpleSecurityLoginDataReader.ViewAliasName + ".[Identity] = @identity " +
                    " ORDER BY " + SimpleSecurityLoginDataReader.ViewAliasName + ".[Domain]," +SimpleSecurityLoginDataReader.ViewAliasName + ".[Identity]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var domainParameter = sqlCommandParameters.AddReference( "@domain", domain );
                var identityParameter = sqlCommandParameters.AddNVarChar( "@identity", identity, 255 );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleSecurityLoginDataReader = new SimpleSecurityLoginDataReader( _loggerFactory, sqlDataReader );
                return simpleSecurityLoginDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public SecurityLoginObject? GetSecurityLoginByDomainAndIdentity( Guid domain, string identity )
        {
            throw new NotImplementedException( );
        }
        // ---------------------------------------------------------------------
        // SecurityRole queries
        // ---------------------------------------------------------------------
        public SimpleSecurityRoleDataReader GetSecurityRoleByIdDataReader( Guid id )
        {
            const string sql = SimpleSecurityRoleDataReader.BaseQuery + "WHERE " + SimpleSecurityRoleDataReader.ViewAliasName + ".[Id] = @id"; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                sqlCommandParameters.AddGuid( "@id", id );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleSecurityRoleDataReader = new SimpleSecurityRoleDataReader( _loggerFactory, sqlDataReader );
                return simpleSecurityRoleDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public SecurityRoleObject? GetSecurityRoleById( Guid id )
        {
            var simpleSecurityRoleDataReader = GetSecurityRoleByIdDataReader( id );
            using ( simpleSecurityRoleDataReader )
            {
                if ( simpleSecurityRoleDataReader.Read( ) )
                {
                    var result = simpleSecurityRoleDataReader.GetDataObject( );
                    return result;
                }
            }
            return null;
        }

        public void GetSecurityRoleById( Guid id, Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleSecurityRoleDataReader = GetSecurityRoleByIdDataReader( id );
                using ( simpleSecurityRoleDataReader )
                {
                    if ( simpleSecurityRoleDataReader.Read( ) )
                    {
                        destinationWriter.Write( true );
                        simpleSecurityRoleDataReader.WriteTo( destinationWriter );
                    }
                    else
                    {
                        destinationWriter.Write( false );
                    }
                }
            }
        }

        public SimpleSecurityRoleDataReader GetSecurityRoleCollectionDataReader( )
        {
            const string sql = SimpleSecurityRoleDataReader.BaseQuery; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleSecurityRoleDataReader = new SimpleSecurityRoleDataReader( _loggerFactory, sqlDataReader );
                return simpleSecurityRoleDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public IList<SecurityRoleObject> GetSecurityRoleCollection( )
        {
            var result = new List<SecurityRoleObject>( );
            var simpleSecurityRoleDataReader = GetSecurityRoleCollectionDataReader( );
            using ( simpleSecurityRoleDataReader )
            {
                while ( simpleSecurityRoleDataReader.Read( ) )
                {
                    var data = simpleSecurityRoleDataReader.GetDataObject( );
                    result.Add( data );
                }
            }
            return result;
        }

        public void GetSecurityRoleCollection( Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleSecurityRoleDataReader = GetSecurityRoleCollectionDataReader( );
                using ( simpleSecurityRoleDataReader )
                {
                    simpleSecurityRoleDataReader.WriteResultSetTo( destinationWriter );
                }
            }
        }

        public SimpleSecurityRoleDataReader GetSecurityRoleCollectionByDomainDataReader( Guid domain )
        {
            const string sql = SimpleSecurityRoleDataReader.BaseQuery + " WHERE " +
                    SimpleSecurityRoleDataReader.ViewAliasName + ".[Domain] = @domain " +
                    " ORDER BY " + SimpleSecurityRoleDataReader.ViewAliasName + ".[Domain]," +SimpleSecurityRoleDataReader.ViewAliasName + ".[Identity]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var domainParameter = sqlCommandParameters.AddReference( "@domain", domain );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleSecurityRoleDataReader = new SimpleSecurityRoleDataReader( _loggerFactory, sqlDataReader );
                return simpleSecurityRoleDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<SecurityRoleObject> GetSecurityRoleCollectionByDomain( Guid domain )
        {
            throw new NotImplementedException( );
        }
        public SimpleSecurityRoleDataReader GetSecurityRoleByDomainAndIdentityDataReader( Guid domain, string identity )
        {
            const string sql = SimpleSecurityRoleDataReader.BaseQuery + " WHERE " +
                    SimpleSecurityRoleDataReader.ViewAliasName + ".[Domain] = @domain AND " +
                    SimpleSecurityRoleDataReader.ViewAliasName + ".[Identity] = @identity " +
                    " ORDER BY " + SimpleSecurityRoleDataReader.ViewAliasName + ".[Domain]," +SimpleSecurityRoleDataReader.ViewAliasName + ".[Identity]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var domainParameter = sqlCommandParameters.AddReference( "@domain", domain );
                var identityParameter = sqlCommandParameters.AddNVarChar( "@identity", identity, 255 );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleSecurityRoleDataReader = new SimpleSecurityRoleDataReader( _loggerFactory, sqlDataReader );
                return simpleSecurityRoleDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public SecurityRoleObject? GetSecurityRoleByDomainAndIdentity( Guid domain, string identity )
        {
            throw new NotImplementedException( );
        }
        public SimpleSecurityRoleDataReader GetSecurityRoleByNameDataReader( string name )
        {
            const string sql = SimpleSecurityRoleDataReader.BaseQuery + " WHERE " +
                    SimpleSecurityRoleDataReader.ViewAliasName + ".[Name] = @name " +
                    " ORDER BY " + SimpleSecurityRoleDataReader.ViewAliasName + ".[Name]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var nameParameter = sqlCommandParameters.AddNVarChar( "@name", name, 127 );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleSecurityRoleDataReader = new SimpleSecurityRoleDataReader( _loggerFactory, sqlDataReader );
                return simpleSecurityRoleDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public SecurityRoleObject? GetSecurityRoleByName( string name )
        {
            throw new NotImplementedException( );
        }
        // ---------------------------------------------------------------------
        // SecurityIdentifierRoleLink queries
        // ---------------------------------------------------------------------
        public SimpleSecurityIdentifierRoleLinkDataReader GetSecurityIdentifierRoleLinkByIdDataReader( Guid id )
        {
            const string sql = SimpleSecurityIdentifierRoleLinkDataReader.BaseQuery + "WHERE " + SimpleSecurityIdentifierRoleLinkDataReader.ViewAliasName + ".[Id] = @id"; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                sqlCommandParameters.AddGuid( "@id", id );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleSecurityIdentifierRoleLinkDataReader = new SimpleSecurityIdentifierRoleLinkDataReader( _loggerFactory, sqlDataReader );
                return simpleSecurityIdentifierRoleLinkDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public SecurityIdentifierRoleLinkObject? GetSecurityIdentifierRoleLinkById( Guid id )
        {
            var simpleSecurityIdentifierRoleLinkDataReader = GetSecurityIdentifierRoleLinkByIdDataReader( id );
            using ( simpleSecurityIdentifierRoleLinkDataReader )
            {
                if ( simpleSecurityIdentifierRoleLinkDataReader.Read( ) )
                {
                    var result = simpleSecurityIdentifierRoleLinkDataReader.GetDataObject( );
                    return result;
                }
            }
            return null;
        }

        public void GetSecurityIdentifierRoleLinkById( Guid id, Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleSecurityIdentifierRoleLinkDataReader = GetSecurityIdentifierRoleLinkByIdDataReader( id );
                using ( simpleSecurityIdentifierRoleLinkDataReader )
                {
                    if ( simpleSecurityIdentifierRoleLinkDataReader.Read( ) )
                    {
                        destinationWriter.Write( true );
                        simpleSecurityIdentifierRoleLinkDataReader.WriteTo( destinationWriter );
                    }
                    else
                    {
                        destinationWriter.Write( false );
                    }
                }
            }
        }

        public SimpleSecurityIdentifierRoleLinkDataReader GetSecurityIdentifierRoleLinkCollectionDataReader( )
        {
            const string sql = SimpleSecurityIdentifierRoleLinkDataReader.BaseQuery; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleSecurityIdentifierRoleLinkDataReader = new SimpleSecurityIdentifierRoleLinkDataReader( _loggerFactory, sqlDataReader );
                return simpleSecurityIdentifierRoleLinkDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public IList<SecurityIdentifierRoleLinkObject> GetSecurityIdentifierRoleLinkCollection( )
        {
            var result = new List<SecurityIdentifierRoleLinkObject>( );
            var simpleSecurityIdentifierRoleLinkDataReader = GetSecurityIdentifierRoleLinkCollectionDataReader( );
            using ( simpleSecurityIdentifierRoleLinkDataReader )
            {
                while ( simpleSecurityIdentifierRoleLinkDataReader.Read( ) )
                {
                    var data = simpleSecurityIdentifierRoleLinkDataReader.GetDataObject( );
                    result.Add( data );
                }
            }
            return result;
        }

        public void GetSecurityIdentifierRoleLinkCollection( Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleSecurityIdentifierRoleLinkDataReader = GetSecurityIdentifierRoleLinkCollectionDataReader( );
                using ( simpleSecurityIdentifierRoleLinkDataReader )
                {
                    simpleSecurityIdentifierRoleLinkDataReader.WriteResultSetTo( destinationWriter );
                }
            }
        }

        public SimpleSecurityIdentifierRoleLinkDataReader GetSecurityIdentifierRoleLinkCollectionByMemberDataReader( Guid member )
        {
            const string sql = SimpleSecurityIdentifierRoleLinkDataReader.BaseQuery + " WHERE " +
                    SimpleSecurityIdentifierRoleLinkDataReader.ViewAliasName + ".[Member] = @member " +
                    " ORDER BY " + SimpleSecurityIdentifierRoleLinkDataReader.ViewAliasName + ".[Member]," +SimpleSecurityIdentifierRoleLinkDataReader.ViewAliasName + ".[Start]," +SimpleSecurityIdentifierRoleLinkDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var memberParameter = sqlCommandParameters.AddReference( "@member", member );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleSecurityIdentifierRoleLinkDataReader = new SimpleSecurityIdentifierRoleLinkDataReader( _loggerFactory, sqlDataReader );
                return simpleSecurityIdentifierRoleLinkDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<SecurityIdentifierRoleLinkObject> GetSecurityIdentifierRoleLinkCollectionByMember( Guid member )
        {
            throw new NotImplementedException( );
        }
        public SimpleSecurityIdentifierRoleLinkDataReader GetSecurityIdentifierRoleLinkCollectionByMemberAndStartDataReader( Guid member, DateTime start )
        {
            const string sql = SimpleSecurityIdentifierRoleLinkDataReader.BaseQuery + " WHERE " +
                    SimpleSecurityIdentifierRoleLinkDataReader.ViewAliasName + ".[Member] = @member AND " +
                    SimpleSecurityIdentifierRoleLinkDataReader.ViewAliasName + ".[Start] = @start " +
                    " ORDER BY " + SimpleSecurityIdentifierRoleLinkDataReader.ViewAliasName + ".[Member]," +SimpleSecurityIdentifierRoleLinkDataReader.ViewAliasName + ".[Start]," +SimpleSecurityIdentifierRoleLinkDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var memberParameter = sqlCommandParameters.AddReference( "@member", member );
                var startParameter = sqlCommandParameters.AddDateTimeAsInt64( "@start", start );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleSecurityIdentifierRoleLinkDataReader = new SimpleSecurityIdentifierRoleLinkDataReader( _loggerFactory, sqlDataReader );
                return simpleSecurityIdentifierRoleLinkDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<SecurityIdentifierRoleLinkObject> GetSecurityIdentifierRoleLinkCollectionByMemberAndStart( Guid member, DateTime start )
        {
            throw new NotImplementedException( );
        }
        public IList<SecurityIdentifierRoleLinkObject> GetSecurityIdentifierRoleLinkCollectionByMemberAtStart( Guid member, DateTime start )
        {
            throw new NotImplementedException( );
        }
        public IList<SecurityIdentifierRoleLinkObject> GetSecurityIdentifierRoleLinkCollectionByMemberFromStart( Guid member, DateTime start )
        {
            throw new NotImplementedException( );
        }
        public IList<SecurityIdentifierRoleLinkObject> GetSecurityIdentifierRoleLinkCollectionByMemberUntilStart( Guid member, DateTime start )
        {
            throw new NotImplementedException( );
        }
        public IList<SecurityIdentifierRoleLinkObject> GetSecurityIdentifierRoleLinkCollectionByMemberOverStart( Guid member, DateTime fromStart, DateTime untilStart )
        {
            throw new NotImplementedException( );
        }
        public SimpleSecurityIdentifierRoleLinkDataReader GetSecurityIdentifierRoleLinkCollectionByRoleDataReader( Guid role )
        {
            const string sql = SimpleSecurityIdentifierRoleLinkDataReader.BaseQuery + " WHERE " +
                    SimpleSecurityIdentifierRoleLinkDataReader.ViewAliasName + ".[Role] = @role " +
                    " ORDER BY " + SimpleSecurityIdentifierRoleLinkDataReader.ViewAliasName + ".[Role]," +SimpleSecurityIdentifierRoleLinkDataReader.ViewAliasName + ".[Start]," +SimpleSecurityIdentifierRoleLinkDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var roleParameter = sqlCommandParameters.AddReference( "@role", role );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleSecurityIdentifierRoleLinkDataReader = new SimpleSecurityIdentifierRoleLinkDataReader( _loggerFactory, sqlDataReader );
                return simpleSecurityIdentifierRoleLinkDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<SecurityIdentifierRoleLinkObject> GetSecurityIdentifierRoleLinkCollectionByRole( Guid role )
        {
            throw new NotImplementedException( );
        }
        public SimpleSecurityIdentifierRoleLinkDataReader GetSecurityIdentifierRoleLinkCollectionByRoleAndStartDataReader( Guid role, DateTime start )
        {
            const string sql = SimpleSecurityIdentifierRoleLinkDataReader.BaseQuery + " WHERE " +
                    SimpleSecurityIdentifierRoleLinkDataReader.ViewAliasName + ".[Role] = @role AND " +
                    SimpleSecurityIdentifierRoleLinkDataReader.ViewAliasName + ".[Start] = @start " +
                    " ORDER BY " + SimpleSecurityIdentifierRoleLinkDataReader.ViewAliasName + ".[Role]," +SimpleSecurityIdentifierRoleLinkDataReader.ViewAliasName + ".[Start]," +SimpleSecurityIdentifierRoleLinkDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var roleParameter = sqlCommandParameters.AddReference( "@role", role );
                var startParameter = sqlCommandParameters.AddDateTimeAsInt64( "@start", start );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleSecurityIdentifierRoleLinkDataReader = new SimpleSecurityIdentifierRoleLinkDataReader( _loggerFactory, sqlDataReader );
                return simpleSecurityIdentifierRoleLinkDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<SecurityIdentifierRoleLinkObject> GetSecurityIdentifierRoleLinkCollectionByRoleAndStart( Guid role, DateTime start )
        {
            throw new NotImplementedException( );
        }
        public IList<SecurityIdentifierRoleLinkObject> GetSecurityIdentifierRoleLinkCollectionByRoleAtStart( Guid role, DateTime start )
        {
            throw new NotImplementedException( );
        }
        public IList<SecurityIdentifierRoleLinkObject> GetSecurityIdentifierRoleLinkCollectionByRoleFromStart( Guid role, DateTime start )
        {
            throw new NotImplementedException( );
        }
        public IList<SecurityIdentifierRoleLinkObject> GetSecurityIdentifierRoleLinkCollectionByRoleUntilStart( Guid role, DateTime start )
        {
            throw new NotImplementedException( );
        }
        public IList<SecurityIdentifierRoleLinkObject> GetSecurityIdentifierRoleLinkCollectionByRoleOverStart( Guid role, DateTime fromStart, DateTime untilStart )
        {
            throw new NotImplementedException( );
        }
        public SimpleSecurityIdentifierRoleLinkDataReader GetSecurityIdentifierRoleLinkCollectionByStartDataReader( DateTime start )
        {
            const string sql = SimpleSecurityIdentifierRoleLinkDataReader.BaseQuery + " WHERE " +
                    SimpleSecurityIdentifierRoleLinkDataReader.ViewAliasName + ".[Start] = @start " +
                    " ORDER BY " + SimpleSecurityIdentifierRoleLinkDataReader.ViewAliasName + ".[Start]," +SimpleSecurityIdentifierRoleLinkDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var startParameter = sqlCommandParameters.AddDateTimeAsInt64( "@start", start );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleSecurityIdentifierRoleLinkDataReader = new SimpleSecurityIdentifierRoleLinkDataReader( _loggerFactory, sqlDataReader );
                return simpleSecurityIdentifierRoleLinkDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<SecurityIdentifierRoleLinkObject> GetSecurityIdentifierRoleLinkCollectionByStart( DateTime start )
        {
            throw new NotImplementedException( );
        }
        public IList<SecurityIdentifierRoleLinkObject> GetSecurityIdentifierRoleLinkCollectionAtStart( DateTime start )
        {
            throw new NotImplementedException( );
        }
        public IList<SecurityIdentifierRoleLinkObject> GetSecurityIdentifierRoleLinkCollectionFromStart( DateTime start )
        {
            throw new NotImplementedException( );
        }
        public IList<SecurityIdentifierRoleLinkObject> GetSecurityIdentifierRoleLinkCollectionUntilStart( DateTime start )
        {
            throw new NotImplementedException( );
        }
        public IList<SecurityIdentifierRoleLinkObject> GetSecurityIdentifierRoleLinkCollectionOverStart( DateTime fromStart, DateTime untilStart )
        {
            throw new NotImplementedException( );
        }
        // ---------------------------------------------------------------------
        // SecurityLoginSession queries
        // ---------------------------------------------------------------------
        public SimpleSecurityLoginSessionDataReader GetSecurityLoginSessionByIdDataReader( Guid id )
        {
            const string sql = SimpleSecurityLoginSessionDataReader.BaseQuery + "WHERE " + SimpleSecurityLoginSessionDataReader.ViewAliasName + ".[Id] = @id"; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                sqlCommandParameters.AddGuid( "@id", id );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleSecurityLoginSessionDataReader = new SimpleSecurityLoginSessionDataReader( _loggerFactory, sqlDataReader );
                return simpleSecurityLoginSessionDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public SecurityLoginSessionObject? GetSecurityLoginSessionById( Guid id )
        {
            var simpleSecurityLoginSessionDataReader = GetSecurityLoginSessionByIdDataReader( id );
            using ( simpleSecurityLoginSessionDataReader )
            {
                if ( simpleSecurityLoginSessionDataReader.Read( ) )
                {
                    var result = simpleSecurityLoginSessionDataReader.GetDataObject( );
                    return result;
                }
            }
            return null;
        }

        public void GetSecurityLoginSessionById( Guid id, Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleSecurityLoginSessionDataReader = GetSecurityLoginSessionByIdDataReader( id );
                using ( simpleSecurityLoginSessionDataReader )
                {
                    if ( simpleSecurityLoginSessionDataReader.Read( ) )
                    {
                        destinationWriter.Write( true );
                        simpleSecurityLoginSessionDataReader.WriteTo( destinationWriter );
                    }
                    else
                    {
                        destinationWriter.Write( false );
                    }
                }
            }
        }

        public SimpleSecurityLoginSessionDataReader GetSecurityLoginSessionCollectionDataReader( )
        {
            const string sql = SimpleSecurityLoginSessionDataReader.BaseQuery; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleSecurityLoginSessionDataReader = new SimpleSecurityLoginSessionDataReader( _loggerFactory, sqlDataReader );
                return simpleSecurityLoginSessionDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public IList<SecurityLoginSessionObject> GetSecurityLoginSessionCollection( )
        {
            var result = new List<SecurityLoginSessionObject>( );
            var simpleSecurityLoginSessionDataReader = GetSecurityLoginSessionCollectionDataReader( );
            using ( simpleSecurityLoginSessionDataReader )
            {
                while ( simpleSecurityLoginSessionDataReader.Read( ) )
                {
                    var data = simpleSecurityLoginSessionDataReader.GetDataObject( );
                    result.Add( data );
                }
            }
            return result;
        }

        public void GetSecurityLoginSessionCollection( Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleSecurityLoginSessionDataReader = GetSecurityLoginSessionCollectionDataReader( );
                using ( simpleSecurityLoginSessionDataReader )
                {
                    simpleSecurityLoginSessionDataReader.WriteResultSetTo( destinationWriter );
                }
            }
        }

        public SimpleSecurityLoginSessionDataReader GetSecurityLoginSessionCollectionByLoginDataReader( Guid login )
        {
            const string sql = SimpleSecurityLoginSessionDataReader.BaseQuery + " WHERE " +
                    SimpleSecurityLoginSessionDataReader.ViewAliasName + ".[Login] = @login " +
                    " ORDER BY " + SimpleSecurityLoginSessionDataReader.ViewAliasName + ".[Login]," +SimpleSecurityLoginSessionDataReader.ViewAliasName + ".[FromTime]," +SimpleSecurityLoginSessionDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var loginParameter = sqlCommandParameters.AddReference( "@login", login );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleSecurityLoginSessionDataReader = new SimpleSecurityLoginSessionDataReader( _loggerFactory, sqlDataReader );
                return simpleSecurityLoginSessionDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<SecurityLoginSessionObject> GetSecurityLoginSessionCollectionByLogin( Guid login )
        {
            throw new NotImplementedException( );
        }
        public SimpleSecurityLoginSessionDataReader GetSecurityLoginSessionCollectionByLoginAndFromTimeDataReader( Guid login, DateTime fromTime )
        {
            const string sql = SimpleSecurityLoginSessionDataReader.BaseQuery + " WHERE " +
                    SimpleSecurityLoginSessionDataReader.ViewAliasName + ".[Login] = @login AND " +
                    SimpleSecurityLoginSessionDataReader.ViewAliasName + ".[FromTime] = @fromTime " +
                    " ORDER BY " + SimpleSecurityLoginSessionDataReader.ViewAliasName + ".[Login]," +SimpleSecurityLoginSessionDataReader.ViewAliasName + ".[FromTime]," +SimpleSecurityLoginSessionDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var loginParameter = sqlCommandParameters.AddReference( "@login", login );
                var fromTimeParameter = sqlCommandParameters.AddDateTimeAsInt64( "@fromTime", fromTime );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleSecurityLoginSessionDataReader = new SimpleSecurityLoginSessionDataReader( _loggerFactory, sqlDataReader );
                return simpleSecurityLoginSessionDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<SecurityLoginSessionObject> GetSecurityLoginSessionCollectionByLoginAndFromTime( Guid login, DateTime fromTime )
        {
            throw new NotImplementedException( );
        }
        public IList<SecurityLoginSessionObject> GetSecurityLoginSessionCollectionByLoginAtFromTime( Guid login, DateTime fromTime )
        {
            throw new NotImplementedException( );
        }
        public IList<SecurityLoginSessionObject> GetSecurityLoginSessionCollectionByLoginFromFromTime( Guid login, DateTime fromTime )
        {
            throw new NotImplementedException( );
        }
        public IList<SecurityLoginSessionObject> GetSecurityLoginSessionCollectionByLoginUntilFromTime( Guid login, DateTime fromTime )
        {
            throw new NotImplementedException( );
        }
        public IList<SecurityLoginSessionObject> GetSecurityLoginSessionCollectionByLoginOverFromTime( Guid login, DateTime fromFromTime, DateTime untilFromTime )
        {
            throw new NotImplementedException( );
        }
        public SimpleSecurityLoginSessionDataReader GetSecurityLoginSessionCollectionByFromTimeDataReader( DateTime fromTime )
        {
            const string sql = SimpleSecurityLoginSessionDataReader.BaseQuery + " WHERE " +
                    SimpleSecurityLoginSessionDataReader.ViewAliasName + ".[FromTime] = @fromTime " +
                    " ORDER BY " + SimpleSecurityLoginSessionDataReader.ViewAliasName + ".[FromTime]," +SimpleSecurityLoginSessionDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var fromTimeParameter = sqlCommandParameters.AddDateTimeAsInt64( "@fromTime", fromTime );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleSecurityLoginSessionDataReader = new SimpleSecurityLoginSessionDataReader( _loggerFactory, sqlDataReader );
                return simpleSecurityLoginSessionDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<SecurityLoginSessionObject> GetSecurityLoginSessionCollectionByFromTime( DateTime fromTime )
        {
            throw new NotImplementedException( );
        }
        public IList<SecurityLoginSessionObject> GetSecurityLoginSessionCollectionAtFromTime( DateTime fromTime )
        {
            throw new NotImplementedException( );
        }
        public IList<SecurityLoginSessionObject> GetSecurityLoginSessionCollectionFromFromTime( DateTime fromTime )
        {
            throw new NotImplementedException( );
        }
        public IList<SecurityLoginSessionObject> GetSecurityLoginSessionCollectionUntilFromTime( DateTime fromTime )
        {
            throw new NotImplementedException( );
        }
        public IList<SecurityLoginSessionObject> GetSecurityLoginSessionCollectionOverFromTime( DateTime fromFromTime, DateTime untilFromTime )
        {
            throw new NotImplementedException( );
        }
        // ---------------------------------------------------------------------
        // SecurityPermission queries
        // ---------------------------------------------------------------------
        public SimpleSecurityPermissionDataReader GetSecurityPermissionByIdDataReader( Guid id )
        {
            const string sql = SimpleSecurityPermissionDataReader.BaseQuery + "WHERE " + SimpleSecurityPermissionDataReader.ViewAliasName + ".[Id] = @id"; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                sqlCommandParameters.AddGuid( "@id", id );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleSecurityPermissionDataReader = new SimpleSecurityPermissionDataReader( _loggerFactory, sqlDataReader );
                return simpleSecurityPermissionDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public SecurityPermissionObject? GetSecurityPermissionById( Guid id )
        {
            var simpleSecurityPermissionDataReader = GetSecurityPermissionByIdDataReader( id );
            using ( simpleSecurityPermissionDataReader )
            {
                if ( simpleSecurityPermissionDataReader.Read( ) )
                {
                    var result = simpleSecurityPermissionDataReader.GetDataObject( );
                    return result;
                }
            }
            return null;
        }

        public void GetSecurityPermissionById( Guid id, Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleSecurityPermissionDataReader = GetSecurityPermissionByIdDataReader( id );
                using ( simpleSecurityPermissionDataReader )
                {
                    if ( simpleSecurityPermissionDataReader.Read( ) )
                    {
                        destinationWriter.Write( true );
                        simpleSecurityPermissionDataReader.WriteTo( destinationWriter );
                    }
                    else
                    {
                        destinationWriter.Write( false );
                    }
                }
            }
        }

        public SimpleSecurityPermissionDataReader GetSecurityPermissionCollectionDataReader( )
        {
            const string sql = SimpleSecurityPermissionDataReader.BaseQuery; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleSecurityPermissionDataReader = new SimpleSecurityPermissionDataReader( _loggerFactory, sqlDataReader );
                return simpleSecurityPermissionDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public IList<SecurityPermissionObject> GetSecurityPermissionCollection( )
        {
            var result = new List<SecurityPermissionObject>( );
            var simpleSecurityPermissionDataReader = GetSecurityPermissionCollectionDataReader( );
            using ( simpleSecurityPermissionDataReader )
            {
                while ( simpleSecurityPermissionDataReader.Read( ) )
                {
                    var data = simpleSecurityPermissionDataReader.GetDataObject( );
                    result.Add( data );
                }
            }
            return result;
        }

        public void GetSecurityPermissionCollection( Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleSecurityPermissionDataReader = GetSecurityPermissionCollectionDataReader( );
                using ( simpleSecurityPermissionDataReader )
                {
                    simpleSecurityPermissionDataReader.WriteResultSetTo( destinationWriter );
                }
            }
        }

        public SimpleSecurityPermissionDataReader GetSecurityPermissionCollectionByIdentifierDataReader( Guid identifier )
        {
            const string sql = SimpleSecurityPermissionDataReader.BaseQuery + " WHERE " +
                    SimpleSecurityPermissionDataReader.ViewAliasName + ".[Identifier] = @identifier " +
                    " ORDER BY " + SimpleSecurityPermissionDataReader.ViewAliasName + ".[Identifier]," +SimpleSecurityPermissionDataReader.ViewAliasName + ".[TypeCode]," +SimpleSecurityPermissionDataReader.ViewAliasName + ".[Timestamp]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var identifierParameter = sqlCommandParameters.AddReference( "@identifier", identifier );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleSecurityPermissionDataReader = new SimpleSecurityPermissionDataReader( _loggerFactory, sqlDataReader );
                return simpleSecurityPermissionDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<SecurityPermissionObject> GetSecurityPermissionCollectionByIdentifier( Guid identifier )
        {
            throw new NotImplementedException( );
        }
        public SimpleSecurityPermissionDataReader GetSecurityPermissionCollectionByIdentifierAndTypeCodeDataReader( Guid identifier, int typeCode )
        {
            const string sql = SimpleSecurityPermissionDataReader.BaseQuery + " WHERE " +
                    SimpleSecurityPermissionDataReader.ViewAliasName + ".[Identifier] = @identifier AND " +
                    SimpleSecurityPermissionDataReader.ViewAliasName + ".[TypeCode] = @typeCode " +
                    " ORDER BY " + SimpleSecurityPermissionDataReader.ViewAliasName + ".[Identifier]," +SimpleSecurityPermissionDataReader.ViewAliasName + ".[TypeCode]," +SimpleSecurityPermissionDataReader.ViewAliasName + ".[Timestamp]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var identifierParameter = sqlCommandParameters.AddReference( "@identifier", identifier );
                var typeCodeParameter = sqlCommandParameters.AddInt32( "@typeCode", typeCode );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleSecurityPermissionDataReader = new SimpleSecurityPermissionDataReader( _loggerFactory, sqlDataReader );
                return simpleSecurityPermissionDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<SecurityPermissionObject> GetSecurityPermissionCollectionByIdentifierAndTypeCode( Guid identifier, int typeCode )
        {
            throw new NotImplementedException( );
        }
        public IList<SecurityPermissionObject> GetSecurityPermissionCollectionByIdentifierFromTypeCode( Guid identifier, int typeCode )
        {
            throw new NotImplementedException( );
        }
        public IList<SecurityPermissionObject> GetSecurityPermissionCollectionByIdentifierUntilTypeCode( Guid identifier, int typeCode )
        {
            throw new NotImplementedException( );
        }
        public IList<SecurityPermissionObject> GetSecurityPermissionCollectionByIdentifierOverTypeCode( Guid identifier, int fromTypeCode, int untilTypeCode )
        {
            throw new NotImplementedException( );
        }
        public SimpleSecurityPermissionDataReader GetSecurityPermissionByIdentifierTypeCodeAndTimestampDataReader( Guid identifier, int typeCode, DateTime timestamp )
        {
            const string sql = SimpleSecurityPermissionDataReader.BaseQuery + " WHERE " +
                    SimpleSecurityPermissionDataReader.ViewAliasName + ".[Identifier] = @identifier AND " +
                    SimpleSecurityPermissionDataReader.ViewAliasName + ".[TypeCode] = @typeCode AND " +
                    SimpleSecurityPermissionDataReader.ViewAliasName + ".[Timestamp] = @timestamp " +
                    " ORDER BY " + SimpleSecurityPermissionDataReader.ViewAliasName + ".[Identifier]," +SimpleSecurityPermissionDataReader.ViewAliasName + ".[TypeCode]," +SimpleSecurityPermissionDataReader.ViewAliasName + ".[Timestamp]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var identifierParameter = sqlCommandParameters.AddReference( "@identifier", identifier );
                var typeCodeParameter = sqlCommandParameters.AddInt32( "@typeCode", typeCode );
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@timestamp", timestamp );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleSecurityPermissionDataReader = new SimpleSecurityPermissionDataReader( _loggerFactory, sqlDataReader );
                return simpleSecurityPermissionDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public SecurityPermissionObject? GetSecurityPermissionByIdentifierTypeCodeAndTimestamp( Guid identifier, int typeCode, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public SecurityPermissionObject? GetSecurityPermissionByIdentifierTypeCodeAtTimestamp( Guid identifier, int typeCode, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<SecurityPermissionObject> GetSecurityPermissionByIdentifierTypeCodeFromTimestamp( Guid identifier, int typeCode, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<SecurityPermissionObject> GetSecurityPermissionByIdentifierTypeCodeUntilTimestamp( Guid identifier, int typeCode, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<SecurityPermissionObject> GetSecurityPermissionByIdentifierTypeCodeOverTimestamp( Guid identifier, int typeCode, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException( );
        }
        public SimpleSecurityPermissionDataReader GetSecurityPermissionCollectionByTimestampDataReader( DateTime timestamp )
        {
            const string sql = SimpleSecurityPermissionDataReader.BaseQuery + " WHERE " +
                    SimpleSecurityPermissionDataReader.ViewAliasName + ".[Timestamp] = @timestamp " +
                    " ORDER BY " + SimpleSecurityPermissionDataReader.ViewAliasName + ".[Timestamp]," +SimpleSecurityPermissionDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@timestamp", timestamp );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleSecurityPermissionDataReader = new SimpleSecurityPermissionDataReader( _loggerFactory, sqlDataReader );
                return simpleSecurityPermissionDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<SecurityPermissionObject> GetSecurityPermissionCollectionByTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<SecurityPermissionObject> GetSecurityPermissionCollectionAtTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<SecurityPermissionObject> GetSecurityPermissionCollectionFromTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<SecurityPermissionObject> GetSecurityPermissionCollectionUntilTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<SecurityPermissionObject> GetSecurityPermissionCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException( );
        }
        // ---------------------------------------------------------------------
        // SingleTimeseriesValue queries
        // ---------------------------------------------------------------------
        public SimpleSingleTimeseriesValueDataReader GetSingleTimeseriesValueByIdDataReader( Guid id )
        {
            const string sql = SimpleSingleTimeseriesValueDataReader.BaseQuery + "WHERE " + SimpleSingleTimeseriesValueDataReader.ViewAliasName + ".[Id] = @id"; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                sqlCommandParameters.AddGuid( "@id", id );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleSingleTimeseriesValueDataReader = new SimpleSingleTimeseriesValueDataReader( _loggerFactory, sqlDataReader );
                return simpleSingleTimeseriesValueDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public SingleTimeseriesValueObject? GetSingleTimeseriesValueById( Guid id )
        {
            var simpleSingleTimeseriesValueDataReader = GetSingleTimeseriesValueByIdDataReader( id );
            using ( simpleSingleTimeseriesValueDataReader )
            {
                if ( simpleSingleTimeseriesValueDataReader.Read( ) )
                {
                    var result = simpleSingleTimeseriesValueDataReader.GetDataObject( );
                    return result;
                }
            }
            return null;
        }

        public void GetSingleTimeseriesValueById( Guid id, Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleSingleTimeseriesValueDataReader = GetSingleTimeseriesValueByIdDataReader( id );
                using ( simpleSingleTimeseriesValueDataReader )
                {
                    if ( simpleSingleTimeseriesValueDataReader.Read( ) )
                    {
                        destinationWriter.Write( true );
                        simpleSingleTimeseriesValueDataReader.WriteTo( destinationWriter );
                    }
                    else
                    {
                        destinationWriter.Write( false );
                    }
                }
            }
        }

        public SimpleSingleTimeseriesValueDataReader GetSingleTimeseriesValueCollectionDataReader( )
        {
            const string sql = SimpleSingleTimeseriesValueDataReader.BaseQuery; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleSingleTimeseriesValueDataReader = new SimpleSingleTimeseriesValueDataReader( _loggerFactory, sqlDataReader );
                return simpleSingleTimeseriesValueDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public IList<SingleTimeseriesValueObject> GetSingleTimeseriesValueCollection( )
        {
            var result = new List<SingleTimeseriesValueObject>( );
            var simpleSingleTimeseriesValueDataReader = GetSingleTimeseriesValueCollectionDataReader( );
            using ( simpleSingleTimeseriesValueDataReader )
            {
                while ( simpleSingleTimeseriesValueDataReader.Read( ) )
                {
                    var data = simpleSingleTimeseriesValueDataReader.GetDataObject( );
                    result.Add( data );
                }
            }
            return result;
        }

        public void GetSingleTimeseriesValueCollection( Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleSingleTimeseriesValueDataReader = GetSingleTimeseriesValueCollectionDataReader( );
                using ( simpleSingleTimeseriesValueDataReader )
                {
                    simpleSingleTimeseriesValueDataReader.WriteResultSetTo( destinationWriter );
                }
            }
        }

        public SimpleSingleTimeseriesValueDataReader GetSingleTimeseriesValueCollectionByTimeseriesDataReader( Guid timeseries )
        {
            const string sql = SimpleSingleTimeseriesValueDataReader.BaseQuery + " WHERE " +
                    SimpleSingleTimeseriesValueDataReader.ViewAliasName + ".[Timeseries] = @timeseries " +
                    " ORDER BY " + SimpleSingleTimeseriesValueDataReader.ViewAliasName + ".[Timeseries]," +SimpleSingleTimeseriesValueDataReader.ViewAliasName + ".[Timestamp]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var timeseriesParameter = sqlCommandParameters.AddReference( "@timeseries", timeseries );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleSingleTimeseriesValueDataReader = new SimpleSingleTimeseriesValueDataReader( _loggerFactory, sqlDataReader );
                return simpleSingleTimeseriesValueDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<SingleTimeseriesValueObject> GetSingleTimeseriesValueCollectionByTimeseries( Guid timeseries )
        {
            throw new NotImplementedException( );
        }
        public SimpleSingleTimeseriesValueDataReader GetSingleTimeseriesValueByTimeseriesAndTimestampDataReader( Guid timeseries, DateTime timestamp )
        {
            const string sql = SimpleSingleTimeseriesValueDataReader.BaseQuery + " WHERE " +
                    SimpleSingleTimeseriesValueDataReader.ViewAliasName + ".[Timeseries] = @timeseries AND " +
                    SimpleSingleTimeseriesValueDataReader.ViewAliasName + ".[Timestamp] = @timestamp " +
                    " ORDER BY " + SimpleSingleTimeseriesValueDataReader.ViewAliasName + ".[Timeseries]," +SimpleSingleTimeseriesValueDataReader.ViewAliasName + ".[Timestamp]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var timeseriesParameter = sqlCommandParameters.AddReference( "@timeseries", timeseries );
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@timestamp", timestamp );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleSingleTimeseriesValueDataReader = new SimpleSingleTimeseriesValueDataReader( _loggerFactory, sqlDataReader );
                return simpleSingleTimeseriesValueDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public SingleTimeseriesValueObject? GetSingleTimeseriesValueByTimeseriesAndTimestamp( Guid timeseries, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public SingleTimeseriesValueObject? GetSingleTimeseriesValueByTimeseriesAtTimestamp( Guid timeseries, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<SingleTimeseriesValueObject> GetSingleTimeseriesValueByTimeseriesFromTimestamp( Guid timeseries, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<SingleTimeseriesValueObject> GetSingleTimeseriesValueByTimeseriesUntilTimestamp( Guid timeseries, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<SingleTimeseriesValueObject> GetSingleTimeseriesValueByTimeseriesOverTimestamp( Guid timeseries, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException( );
        }
        public SimpleSingleTimeseriesValueDataReader GetSingleTimeseriesValueCollectionByTimestampDataReader( DateTime timestamp )
        {
            const string sql = SimpleSingleTimeseriesValueDataReader.BaseQuery + " WHERE " +
                    SimpleSingleTimeseriesValueDataReader.ViewAliasName + ".[Timestamp] = @timestamp " +
                    " ORDER BY " + SimpleSingleTimeseriesValueDataReader.ViewAliasName + ".[Timestamp]," +SimpleSingleTimeseriesValueDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@timestamp", timestamp );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleSingleTimeseriesValueDataReader = new SimpleSingleTimeseriesValueDataReader( _loggerFactory, sqlDataReader );
                return simpleSingleTimeseriesValueDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<SingleTimeseriesValueObject> GetSingleTimeseriesValueCollectionByTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<SingleTimeseriesValueObject> GetSingleTimeseriesValueCollectionAtTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<SingleTimeseriesValueObject> GetSingleTimeseriesValueCollectionFromTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<SingleTimeseriesValueObject> GetSingleTimeseriesValueCollectionUntilTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<SingleTimeseriesValueObject> GetSingleTimeseriesValueCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException( );
        }
        // ---------------------------------------------------------------------
        // StringTimeseriesValue queries
        // ---------------------------------------------------------------------
        public SimpleStringTimeseriesValueDataReader GetStringTimeseriesValueByIdDataReader( Guid id )
        {
            const string sql = SimpleStringTimeseriesValueDataReader.BaseQuery + "WHERE " + SimpleStringTimeseriesValueDataReader.ViewAliasName + ".[Id] = @id"; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                sqlCommandParameters.AddGuid( "@id", id );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleStringTimeseriesValueDataReader = new SimpleStringTimeseriesValueDataReader( _loggerFactory, sqlDataReader );
                return simpleStringTimeseriesValueDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public StringTimeseriesValueObject? GetStringTimeseriesValueById( Guid id )
        {
            var simpleStringTimeseriesValueDataReader = GetStringTimeseriesValueByIdDataReader( id );
            using ( simpleStringTimeseriesValueDataReader )
            {
                if ( simpleStringTimeseriesValueDataReader.Read( ) )
                {
                    var result = simpleStringTimeseriesValueDataReader.GetDataObject( );
                    return result;
                }
            }
            return null;
        }

        public void GetStringTimeseriesValueById( Guid id, Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleStringTimeseriesValueDataReader = GetStringTimeseriesValueByIdDataReader( id );
                using ( simpleStringTimeseriesValueDataReader )
                {
                    if ( simpleStringTimeseriesValueDataReader.Read( ) )
                    {
                        destinationWriter.Write( true );
                        simpleStringTimeseriesValueDataReader.WriteTo( destinationWriter );
                    }
                    else
                    {
                        destinationWriter.Write( false );
                    }
                }
            }
        }

        public SimpleStringTimeseriesValueDataReader GetStringTimeseriesValueCollectionDataReader( )
        {
            const string sql = SimpleStringTimeseriesValueDataReader.BaseQuery; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleStringTimeseriesValueDataReader = new SimpleStringTimeseriesValueDataReader( _loggerFactory, sqlDataReader );
                return simpleStringTimeseriesValueDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public IList<StringTimeseriesValueObject> GetStringTimeseriesValueCollection( )
        {
            var result = new List<StringTimeseriesValueObject>( );
            var simpleStringTimeseriesValueDataReader = GetStringTimeseriesValueCollectionDataReader( );
            using ( simpleStringTimeseriesValueDataReader )
            {
                while ( simpleStringTimeseriesValueDataReader.Read( ) )
                {
                    var data = simpleStringTimeseriesValueDataReader.GetDataObject( );
                    result.Add( data );
                }
            }
            return result;
        }

        public void GetStringTimeseriesValueCollection( Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleStringTimeseriesValueDataReader = GetStringTimeseriesValueCollectionDataReader( );
                using ( simpleStringTimeseriesValueDataReader )
                {
                    simpleStringTimeseriesValueDataReader.WriteResultSetTo( destinationWriter );
                }
            }
        }

        public SimpleStringTimeseriesValueDataReader GetStringTimeseriesValueCollectionByTimeseriesDataReader( Guid timeseries )
        {
            const string sql = SimpleStringTimeseriesValueDataReader.BaseQuery + " WHERE " +
                    SimpleStringTimeseriesValueDataReader.ViewAliasName + ".[Timeseries] = @timeseries " +
                    " ORDER BY " + SimpleStringTimeseriesValueDataReader.ViewAliasName + ".[Timeseries]," +SimpleStringTimeseriesValueDataReader.ViewAliasName + ".[Timestamp]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var timeseriesParameter = sqlCommandParameters.AddReference( "@timeseries", timeseries );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleStringTimeseriesValueDataReader = new SimpleStringTimeseriesValueDataReader( _loggerFactory, sqlDataReader );
                return simpleStringTimeseriesValueDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<StringTimeseriesValueObject> GetStringTimeseriesValueCollectionByTimeseries( Guid timeseries )
        {
            throw new NotImplementedException( );
        }
        public SimpleStringTimeseriesValueDataReader GetStringTimeseriesValueByTimeseriesAndTimestampDataReader( Guid timeseries, DateTime timestamp )
        {
            const string sql = SimpleStringTimeseriesValueDataReader.BaseQuery + " WHERE " +
                    SimpleStringTimeseriesValueDataReader.ViewAliasName + ".[Timeseries] = @timeseries AND " +
                    SimpleStringTimeseriesValueDataReader.ViewAliasName + ".[Timestamp] = @timestamp " +
                    " ORDER BY " + SimpleStringTimeseriesValueDataReader.ViewAliasName + ".[Timeseries]," +SimpleStringTimeseriesValueDataReader.ViewAliasName + ".[Timestamp]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var timeseriesParameter = sqlCommandParameters.AddReference( "@timeseries", timeseries );
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@timestamp", timestamp );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleStringTimeseriesValueDataReader = new SimpleStringTimeseriesValueDataReader( _loggerFactory, sqlDataReader );
                return simpleStringTimeseriesValueDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public StringTimeseriesValueObject? GetStringTimeseriesValueByTimeseriesAndTimestamp( Guid timeseries, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public StringTimeseriesValueObject? GetStringTimeseriesValueByTimeseriesAtTimestamp( Guid timeseries, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<StringTimeseriesValueObject> GetStringTimeseriesValueByTimeseriesFromTimestamp( Guid timeseries, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<StringTimeseriesValueObject> GetStringTimeseriesValueByTimeseriesUntilTimestamp( Guid timeseries, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<StringTimeseriesValueObject> GetStringTimeseriesValueByTimeseriesOverTimestamp( Guid timeseries, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException( );
        }
        public SimpleStringTimeseriesValueDataReader GetStringTimeseriesValueCollectionByTimestampDataReader( DateTime timestamp )
        {
            const string sql = SimpleStringTimeseriesValueDataReader.BaseQuery + " WHERE " +
                    SimpleStringTimeseriesValueDataReader.ViewAliasName + ".[Timestamp] = @timestamp " +
                    " ORDER BY " + SimpleStringTimeseriesValueDataReader.ViewAliasName + ".[Timestamp]," +SimpleStringTimeseriesValueDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@timestamp", timestamp );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleStringTimeseriesValueDataReader = new SimpleStringTimeseriesValueDataReader( _loggerFactory, sqlDataReader );
                return simpleStringTimeseriesValueDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<StringTimeseriesValueObject> GetStringTimeseriesValueCollectionByTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<StringTimeseriesValueObject> GetStringTimeseriesValueCollectionAtTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<StringTimeseriesValueObject> GetStringTimeseriesValueCollectionFromTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<StringTimeseriesValueObject> GetStringTimeseriesValueCollectionUntilTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<StringTimeseriesValueObject> GetStringTimeseriesValueCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException( );
        }
        // ---------------------------------------------------------------------
        // TimeseriesCatalogElement queries
        // ---------------------------------------------------------------------
        public ComplexTimeseriesCatalogElementDataReader GetTimeseriesCatalogElementByIdDataReader( Guid id )
        {
            const string sql = ComplexTimeseriesCatalogElementDataReader.BaseQuery + "WHERE " + ComplexTimeseriesCatalogElementDataReader.ViewAliasName + ".[Id] = @id"; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                sqlCommandParameters.AddGuid( "@id", id );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var complexTimeseriesCatalogElementDataReader = new ComplexTimeseriesCatalogElementDataReader( _loggerFactory, sqlDataReader );
                return complexTimeseriesCatalogElementDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public TimeseriesCatalogElementObject? GetTimeseriesCatalogElementById( Guid id )
        {
            var complexTimeseriesCatalogElementDataReader = GetTimeseriesCatalogElementByIdDataReader( id );
            using ( complexTimeseriesCatalogElementDataReader )
            {
                if ( complexTimeseriesCatalogElementDataReader.Read( ) )
                {
                    var result = complexTimeseriesCatalogElementDataReader.GetDataObject( );
                    return result;
                }
            }
            return null;
        }

        public void GetTimeseriesCatalogElementById( Guid id, Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var complexTimeseriesCatalogElementDataReader = GetTimeseriesCatalogElementByIdDataReader( id );
                using ( complexTimeseriesCatalogElementDataReader )
                {
                    if ( complexTimeseriesCatalogElementDataReader.Read( ) )
                    {
                        destinationWriter.Write( true );
                        complexTimeseriesCatalogElementDataReader.WriteTo( destinationWriter );
                    }
                    else
                    {
                        destinationWriter.Write( false );
                    }
                }
            }
        }

        public ComplexTimeseriesCatalogElementDataReader GetTimeseriesCatalogElementCollectionDataReader( )
        {
            const string sql = ComplexTimeseriesCatalogElementDataReader.BaseQuery; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var complexTimeseriesCatalogElementDataReader = new ComplexTimeseriesCatalogElementDataReader( _loggerFactory, sqlDataReader );
                return complexTimeseriesCatalogElementDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public IList<TimeseriesCatalogElementObject> GetTimeseriesCatalogElementCollection( )
        {
            var result = new List<TimeseriesCatalogElementObject>( );
            var complexTimeseriesCatalogElementDataReader = GetTimeseriesCatalogElementCollectionDataReader( );
            using ( complexTimeseriesCatalogElementDataReader )
            {
                while ( complexTimeseriesCatalogElementDataReader.Read( ) )
                {
                    var data = complexTimeseriesCatalogElementDataReader.GetDataObject( );
                    result.Add( data );
                }
            }
            return result;
        }

        public void GetTimeseriesCatalogElementCollection( Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var complexTimeseriesCatalogElementDataReader = GetTimeseriesCatalogElementCollectionDataReader( );
                using ( complexTimeseriesCatalogElementDataReader )
                {
                    complexTimeseriesCatalogElementDataReader.WriteResultSetTo( destinationWriter );
                }
            }
        }

        public ComplexTimeseriesCatalogElementDataReader GetTimeseriesCatalogElementCollectionByCatalogDataReader( Guid? catalog )
        {
            const string sql = ComplexTimeseriesCatalogElementDataReader.BaseQuery + " WHERE " +
                    ComplexTimeseriesCatalogElementDataReader.ViewAliasName + ".[Catalog] = @catalog " +
                    " ORDER BY " + ComplexTimeseriesCatalogElementDataReader.ViewAliasName + ".[Catalog]," +ComplexTimeseriesCatalogElementDataReader.ViewAliasName + ".[Name]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var catalogParameter = sqlCommandParameters.AddReference( "@catalog", catalog );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var complexTimeseriesCatalogElementDataReader = new ComplexTimeseriesCatalogElementDataReader( _loggerFactory, sqlDataReader );
                return complexTimeseriesCatalogElementDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<TimeseriesCatalogElementObject> GetTimeseriesCatalogElementCollectionByCatalog( Guid? catalog )
        {
            throw new NotImplementedException( );
        }
        public IList<TimeseriesCatalogElementObject> GetTimeseriesCatalogElementCollectionByCatalogIsNull(  )
        {
            throw new NotImplementedException( );
        }
        public ComplexTimeseriesCatalogElementDataReader GetTimeseriesCatalogElementByCatalogAndNameDataReader( Guid? catalog, string name )
        {
            const string sql = ComplexTimeseriesCatalogElementDataReader.BaseQuery + " WHERE " +
                    ComplexTimeseriesCatalogElementDataReader.ViewAliasName + ".[Catalog] = @catalog AND " +
                    ComplexTimeseriesCatalogElementDataReader.ViewAliasName + ".[Name] = @name " +
                    " ORDER BY " + ComplexTimeseriesCatalogElementDataReader.ViewAliasName + ".[Catalog]," +ComplexTimeseriesCatalogElementDataReader.ViewAliasName + ".[Name]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var catalogParameter = sqlCommandParameters.AddReference( "@catalog", catalog );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@name", name, 127 );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var complexTimeseriesCatalogElementDataReader = new ComplexTimeseriesCatalogElementDataReader( _loggerFactory, sqlDataReader );
                return complexTimeseriesCatalogElementDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public TimeseriesCatalogElementObject? GetTimeseriesCatalogElementByCatalogAndName( Guid? catalog, string name )
        {
            throw new NotImplementedException( );
        }
        public IList<TimeseriesCatalogElementObject> GetTimeseriesCatalogElementCollectionByCatalogIsNullAndName( string name )
        {
            throw new NotImplementedException( );
        }
        // ---------------------------------------------------------------------
        // Timeseries queries
        // ---------------------------------------------------------------------
        public ComplexTimeseriesDataReader GetTimeseriesByIdDataReader( Guid id )
        {
            const string sql = ComplexTimeseriesDataReader.BaseQuery + "WHERE " + ComplexTimeseriesDataReader.ViewAliasName + ".[Id] = @id"; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                sqlCommandParameters.AddGuid( "@id", id );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var complexTimeseriesDataReader = new ComplexTimeseriesDataReader( _loggerFactory, sqlDataReader );
                return complexTimeseriesDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public TimeseriesObject? GetTimeseriesById( Guid id )
        {
            var complexTimeseriesDataReader = GetTimeseriesByIdDataReader( id );
            using ( complexTimeseriesDataReader )
            {
                if ( complexTimeseriesDataReader.Read( ) )
                {
                    var result = complexTimeseriesDataReader.GetDataObject( );
                    return result;
                }
            }
            return null;
        }

        public void GetTimeseriesById( Guid id, Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var complexTimeseriesDataReader = GetTimeseriesByIdDataReader( id );
                using ( complexTimeseriesDataReader )
                {
                    if ( complexTimeseriesDataReader.Read( ) )
                    {
                        destinationWriter.Write( true );
                        complexTimeseriesDataReader.WriteTo( destinationWriter );
                    }
                    else
                    {
                        destinationWriter.Write( false );
                    }
                }
            }
        }

        public ComplexTimeseriesDataReader GetTimeseriesCollectionDataReader( )
        {
            const string sql = ComplexTimeseriesDataReader.BaseQuery; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var complexTimeseriesDataReader = new ComplexTimeseriesDataReader( _loggerFactory, sqlDataReader );
                return complexTimeseriesDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public IList<TimeseriesObject> GetTimeseriesCollection( )
        {
            var result = new List<TimeseriesObject>( );
            var complexTimeseriesDataReader = GetTimeseriesCollectionDataReader( );
            using ( complexTimeseriesDataReader )
            {
                while ( complexTimeseriesDataReader.Read( ) )
                {
                    var data = complexTimeseriesDataReader.GetDataObject( );
                    result.Add( data );
                }
            }
            return result;
        }

        public void GetTimeseriesCollection( Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var complexTimeseriesDataReader = GetTimeseriesCollectionDataReader( );
                using ( complexTimeseriesDataReader )
                {
                    complexTimeseriesDataReader.WriteResultSetTo( destinationWriter );
                }
            }
        }

        public ComplexTimeseriesDataReader GetTimeseriesCollectionByCatalogDataReader( Guid? catalog )
        {
            const string sql = ComplexTimeseriesDataReader.BaseQuery + " WHERE " +
                    ComplexTimeseriesDataReader.ViewAliasName + ".[Catalog] = @catalog " +
                    " ORDER BY " + ComplexTimeseriesDataReader.ViewAliasName + ".[Catalog]," +ComplexTimeseriesDataReader.ViewAliasName + ".[Name]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var catalogParameter = sqlCommandParameters.AddReference( "@catalog", catalog );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var complexTimeseriesDataReader = new ComplexTimeseriesDataReader( _loggerFactory, sqlDataReader );
                return complexTimeseriesDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<TimeseriesObject> GetTimeseriesCollectionByCatalog( Guid? catalog )
        {
            throw new NotImplementedException( );
        }
        public IList<TimeseriesObject> GetTimeseriesCollectionByCatalogIsNull(  )
        {
            throw new NotImplementedException( );
        }
        public ComplexTimeseriesDataReader GetTimeseriesByCatalogAndNameDataReader( Guid? catalog, string name )
        {
            const string sql = ComplexTimeseriesDataReader.BaseQuery + " WHERE " +
                    ComplexTimeseriesDataReader.ViewAliasName + ".[Catalog] = @catalog AND " +
                    ComplexTimeseriesDataReader.ViewAliasName + ".[Name] = @name " +
                    " ORDER BY " + ComplexTimeseriesDataReader.ViewAliasName + ".[Catalog]," +ComplexTimeseriesDataReader.ViewAliasName + ".[Name]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var catalogParameter = sqlCommandParameters.AddReference( "@catalog", catalog );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@name", name, 127 );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var complexTimeseriesDataReader = new ComplexTimeseriesDataReader( _loggerFactory, sqlDataReader );
                return complexTimeseriesDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public TimeseriesObject? GetTimeseriesByCatalogAndName( Guid? catalog, string name )
        {
            throw new NotImplementedException( );
        }
        public IList<TimeseriesObject> GetTimeseriesCollectionByCatalogIsNullAndName( string name )
        {
            throw new NotImplementedException( );
        }
        // ---------------------------------------------------------------------
        // BinaryTimeseries queries
        // ---------------------------------------------------------------------
        public SimpleBinaryTimeseriesDataReader GetBinaryTimeseriesByIdDataReader( Guid id )
        {
            const string sql = SimpleBinaryTimeseriesDataReader.BaseQuery + "WHERE " + SimpleBinaryTimeseriesDataReader.ViewAliasName + ".[Id] = @id"; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                sqlCommandParameters.AddGuid( "@id", id );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleBinaryTimeseriesDataReader = new SimpleBinaryTimeseriesDataReader( _loggerFactory, sqlDataReader );
                return simpleBinaryTimeseriesDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public BinaryTimeseriesObject? GetBinaryTimeseriesById( Guid id )
        {
            var simpleBinaryTimeseriesDataReader = GetBinaryTimeseriesByIdDataReader( id );
            using ( simpleBinaryTimeseriesDataReader )
            {
                if ( simpleBinaryTimeseriesDataReader.Read( ) )
                {
                    var result = simpleBinaryTimeseriesDataReader.GetDataObject( );
                    return result;
                }
            }
            return null;
        }

        public void GetBinaryTimeseriesById( Guid id, Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleBinaryTimeseriesDataReader = GetBinaryTimeseriesByIdDataReader( id );
                using ( simpleBinaryTimeseriesDataReader )
                {
                    if ( simpleBinaryTimeseriesDataReader.Read( ) )
                    {
                        destinationWriter.Write( true );
                        simpleBinaryTimeseriesDataReader.WriteTo( destinationWriter );
                    }
                    else
                    {
                        destinationWriter.Write( false );
                    }
                }
            }
        }

        public SimpleBinaryTimeseriesDataReader GetBinaryTimeseriesCollectionDataReader( )
        {
            const string sql = SimpleBinaryTimeseriesDataReader.BaseQuery; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleBinaryTimeseriesDataReader = new SimpleBinaryTimeseriesDataReader( _loggerFactory, sqlDataReader );
                return simpleBinaryTimeseriesDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public IList<BinaryTimeseriesObject> GetBinaryTimeseriesCollection( )
        {
            var result = new List<BinaryTimeseriesObject>( );
            var simpleBinaryTimeseriesDataReader = GetBinaryTimeseriesCollectionDataReader( );
            using ( simpleBinaryTimeseriesDataReader )
            {
                while ( simpleBinaryTimeseriesDataReader.Read( ) )
                {
                    var data = simpleBinaryTimeseriesDataReader.GetDataObject( );
                    result.Add( data );
                }
            }
            return result;
        }

        public void GetBinaryTimeseriesCollection( Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleBinaryTimeseriesDataReader = GetBinaryTimeseriesCollectionDataReader( );
                using ( simpleBinaryTimeseriesDataReader )
                {
                    simpleBinaryTimeseriesDataReader.WriteResultSetTo( destinationWriter );
                }
            }
        }

        public SimpleBinaryTimeseriesDataReader GetBinaryTimeseriesCollectionByCatalogDataReader( Guid? catalog )
        {
            const string sql = SimpleBinaryTimeseriesDataReader.BaseQuery + " WHERE " +
                    SimpleBinaryTimeseriesDataReader.ViewAliasName + ".[Catalog] = @catalog " +
                    " ORDER BY " + SimpleBinaryTimeseriesDataReader.ViewAliasName + ".[Catalog]," +SimpleBinaryTimeseriesDataReader.ViewAliasName + ".[Name]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var catalogParameter = sqlCommandParameters.AddReference( "@catalog", catalog );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleBinaryTimeseriesDataReader = new SimpleBinaryTimeseriesDataReader( _loggerFactory, sqlDataReader );
                return simpleBinaryTimeseriesDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<BinaryTimeseriesObject> GetBinaryTimeseriesCollectionByCatalog( Guid? catalog )
        {
            throw new NotImplementedException( );
        }
        public IList<BinaryTimeseriesObject> GetBinaryTimeseriesCollectionByCatalogIsNull(  )
        {
            throw new NotImplementedException( );
        }
        public SimpleBinaryTimeseriesDataReader GetBinaryTimeseriesByCatalogAndNameDataReader( Guid? catalog, string name )
        {
            const string sql = SimpleBinaryTimeseriesDataReader.BaseQuery + " WHERE " +
                    SimpleBinaryTimeseriesDataReader.ViewAliasName + ".[Catalog] = @catalog AND " +
                    SimpleBinaryTimeseriesDataReader.ViewAliasName + ".[Name] = @name " +
                    " ORDER BY " + SimpleBinaryTimeseriesDataReader.ViewAliasName + ".[Catalog]," +SimpleBinaryTimeseriesDataReader.ViewAliasName + ".[Name]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var catalogParameter = sqlCommandParameters.AddReference( "@catalog", catalog );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@name", name, 127 );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleBinaryTimeseriesDataReader = new SimpleBinaryTimeseriesDataReader( _loggerFactory, sqlDataReader );
                return simpleBinaryTimeseriesDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public BinaryTimeseriesObject? GetBinaryTimeseriesByCatalogAndName( Guid? catalog, string name )
        {
            throw new NotImplementedException( );
        }
        public IList<BinaryTimeseriesObject> GetBinaryTimeseriesCollectionByCatalogIsNullAndName( string name )
        {
            throw new NotImplementedException( );
        }
        // ---------------------------------------------------------------------
        // BooleanTimeseries queries
        // ---------------------------------------------------------------------
        public ComplexBooleanTimeseriesDataReader GetBooleanTimeseriesByIdDataReader( Guid id )
        {
            const string sql = ComplexBooleanTimeseriesDataReader.BaseQuery + "WHERE " + ComplexBooleanTimeseriesDataReader.ViewAliasName + ".[Id] = @id"; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                sqlCommandParameters.AddGuid( "@id", id );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var complexBooleanTimeseriesDataReader = new ComplexBooleanTimeseriesDataReader( _loggerFactory, sqlDataReader );
                return complexBooleanTimeseriesDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public BooleanTimeseriesObject? GetBooleanTimeseriesById( Guid id )
        {
            var complexBooleanTimeseriesDataReader = GetBooleanTimeseriesByIdDataReader( id );
            using ( complexBooleanTimeseriesDataReader )
            {
                if ( complexBooleanTimeseriesDataReader.Read( ) )
                {
                    var result = complexBooleanTimeseriesDataReader.GetDataObject( );
                    return result;
                }
            }
            return null;
        }

        public void GetBooleanTimeseriesById( Guid id, Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var complexBooleanTimeseriesDataReader = GetBooleanTimeseriesByIdDataReader( id );
                using ( complexBooleanTimeseriesDataReader )
                {
                    if ( complexBooleanTimeseriesDataReader.Read( ) )
                    {
                        destinationWriter.Write( true );
                        complexBooleanTimeseriesDataReader.WriteTo( destinationWriter );
                    }
                    else
                    {
                        destinationWriter.Write( false );
                    }
                }
            }
        }

        public ComplexBooleanTimeseriesDataReader GetBooleanTimeseriesCollectionDataReader( )
        {
            const string sql = ComplexBooleanTimeseriesDataReader.BaseQuery; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var complexBooleanTimeseriesDataReader = new ComplexBooleanTimeseriesDataReader( _loggerFactory, sqlDataReader );
                return complexBooleanTimeseriesDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public IList<BooleanTimeseriesObject> GetBooleanTimeseriesCollection( )
        {
            var result = new List<BooleanTimeseriesObject>( );
            var complexBooleanTimeseriesDataReader = GetBooleanTimeseriesCollectionDataReader( );
            using ( complexBooleanTimeseriesDataReader )
            {
                while ( complexBooleanTimeseriesDataReader.Read( ) )
                {
                    var data = complexBooleanTimeseriesDataReader.GetDataObject( );
                    result.Add( data );
                }
            }
            return result;
        }

        public void GetBooleanTimeseriesCollection( Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var complexBooleanTimeseriesDataReader = GetBooleanTimeseriesCollectionDataReader( );
                using ( complexBooleanTimeseriesDataReader )
                {
                    complexBooleanTimeseriesDataReader.WriteResultSetTo( destinationWriter );
                }
            }
        }

        public ComplexBooleanTimeseriesDataReader GetBooleanTimeseriesCollectionByCatalogDataReader( Guid? catalog )
        {
            const string sql = ComplexBooleanTimeseriesDataReader.BaseQuery + " WHERE " +
                    ComplexBooleanTimeseriesDataReader.ViewAliasName + ".[Catalog] = @catalog " +
                    " ORDER BY " + ComplexBooleanTimeseriesDataReader.ViewAliasName + ".[Catalog]," +ComplexBooleanTimeseriesDataReader.ViewAliasName + ".[Name]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var catalogParameter = sqlCommandParameters.AddReference( "@catalog", catalog );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var complexBooleanTimeseriesDataReader = new ComplexBooleanTimeseriesDataReader( _loggerFactory, sqlDataReader );
                return complexBooleanTimeseriesDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<BooleanTimeseriesObject> GetBooleanTimeseriesCollectionByCatalog( Guid? catalog )
        {
            throw new NotImplementedException( );
        }
        public IList<BooleanTimeseriesObject> GetBooleanTimeseriesCollectionByCatalogIsNull(  )
        {
            throw new NotImplementedException( );
        }
        public ComplexBooleanTimeseriesDataReader GetBooleanTimeseriesByCatalogAndNameDataReader( Guid? catalog, string name )
        {
            const string sql = ComplexBooleanTimeseriesDataReader.BaseQuery + " WHERE " +
                    ComplexBooleanTimeseriesDataReader.ViewAliasName + ".[Catalog] = @catalog AND " +
                    ComplexBooleanTimeseriesDataReader.ViewAliasName + ".[Name] = @name " +
                    " ORDER BY " + ComplexBooleanTimeseriesDataReader.ViewAliasName + ".[Catalog]," +ComplexBooleanTimeseriesDataReader.ViewAliasName + ".[Name]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var catalogParameter = sqlCommandParameters.AddReference( "@catalog", catalog );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@name", name, 127 );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var complexBooleanTimeseriesDataReader = new ComplexBooleanTimeseriesDataReader( _loggerFactory, sqlDataReader );
                return complexBooleanTimeseriesDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public BooleanTimeseriesObject? GetBooleanTimeseriesByCatalogAndName( Guid? catalog, string name )
        {
            throw new NotImplementedException( );
        }
        public IList<BooleanTimeseriesObject> GetBooleanTimeseriesCollectionByCatalogIsNullAndName( string name )
        {
            throw new NotImplementedException( );
        }
        // ---------------------------------------------------------------------
        // AisAidToNavigationOffPositionTimeseries queries
        // ---------------------------------------------------------------------
        public SimpleAisAidToNavigationOffPositionTimeseriesDataReader GetAisAidToNavigationOffPositionTimeseriesByIdDataReader( Guid id )
        {
            const string sql = SimpleAisAidToNavigationOffPositionTimeseriesDataReader.BaseQuery + "WHERE " + SimpleAisAidToNavigationOffPositionTimeseriesDataReader.ViewAliasName + ".[Id] = @id"; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                sqlCommandParameters.AddGuid( "@id", id );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleAisAidToNavigationOffPositionTimeseriesDataReader = new SimpleAisAidToNavigationOffPositionTimeseriesDataReader( _loggerFactory, sqlDataReader );
                return simpleAisAidToNavigationOffPositionTimeseriesDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public AisAidToNavigationOffPositionTimeseriesObject? GetAisAidToNavigationOffPositionTimeseriesById( Guid id )
        {
            var simpleAisAidToNavigationOffPositionTimeseriesDataReader = GetAisAidToNavigationOffPositionTimeseriesByIdDataReader( id );
            using ( simpleAisAidToNavigationOffPositionTimeseriesDataReader )
            {
                if ( simpleAisAidToNavigationOffPositionTimeseriesDataReader.Read( ) )
                {
                    var result = simpleAisAidToNavigationOffPositionTimeseriesDataReader.GetDataObject( );
                    return result;
                }
            }
            return null;
        }

        public void GetAisAidToNavigationOffPositionTimeseriesById( Guid id, Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleAisAidToNavigationOffPositionTimeseriesDataReader = GetAisAidToNavigationOffPositionTimeseriesByIdDataReader( id );
                using ( simpleAisAidToNavigationOffPositionTimeseriesDataReader )
                {
                    if ( simpleAisAidToNavigationOffPositionTimeseriesDataReader.Read( ) )
                    {
                        destinationWriter.Write( true );
                        simpleAisAidToNavigationOffPositionTimeseriesDataReader.WriteTo( destinationWriter );
                    }
                    else
                    {
                        destinationWriter.Write( false );
                    }
                }
            }
        }

        public SimpleAisAidToNavigationOffPositionTimeseriesDataReader GetAisAidToNavigationOffPositionTimeseriesCollectionDataReader( )
        {
            const string sql = SimpleAisAidToNavigationOffPositionTimeseriesDataReader.BaseQuery; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleAisAidToNavigationOffPositionTimeseriesDataReader = new SimpleAisAidToNavigationOffPositionTimeseriesDataReader( _loggerFactory, sqlDataReader );
                return simpleAisAidToNavigationOffPositionTimeseriesDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public IList<AisAidToNavigationOffPositionTimeseriesObject> GetAisAidToNavigationOffPositionTimeseriesCollection( )
        {
            var result = new List<AisAidToNavigationOffPositionTimeseriesObject>( );
            var simpleAisAidToNavigationOffPositionTimeseriesDataReader = GetAisAidToNavigationOffPositionTimeseriesCollectionDataReader( );
            using ( simpleAisAidToNavigationOffPositionTimeseriesDataReader )
            {
                while ( simpleAisAidToNavigationOffPositionTimeseriesDataReader.Read( ) )
                {
                    var data = simpleAisAidToNavigationOffPositionTimeseriesDataReader.GetDataObject( );
                    result.Add( data );
                }
            }
            return result;
        }

        public void GetAisAidToNavigationOffPositionTimeseriesCollection( Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleAisAidToNavigationOffPositionTimeseriesDataReader = GetAisAidToNavigationOffPositionTimeseriesCollectionDataReader( );
                using ( simpleAisAidToNavigationOffPositionTimeseriesDataReader )
                {
                    simpleAisAidToNavigationOffPositionTimeseriesDataReader.WriteResultSetTo( destinationWriter );
                }
            }
        }

        public SimpleAisAidToNavigationOffPositionTimeseriesDataReader GetAisAidToNavigationOffPositionTimeseriesCollectionByCatalogDataReader( Guid? catalog )
        {
            const string sql = SimpleAisAidToNavigationOffPositionTimeseriesDataReader.BaseQuery + " WHERE " +
                    SimpleAisAidToNavigationOffPositionTimeseriesDataReader.ViewAliasName + ".[Catalog] = @catalog " +
                    " ORDER BY " + SimpleAisAidToNavigationOffPositionTimeseriesDataReader.ViewAliasName + ".[Catalog]," +SimpleAisAidToNavigationOffPositionTimeseriesDataReader.ViewAliasName + ".[Name]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var catalogParameter = sqlCommandParameters.AddReference( "@catalog", catalog );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleAisAidToNavigationOffPositionTimeseriesDataReader = new SimpleAisAidToNavigationOffPositionTimeseriesDataReader( _loggerFactory, sqlDataReader );
                return simpleAisAidToNavigationOffPositionTimeseriesDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<AisAidToNavigationOffPositionTimeseriesObject> GetAisAidToNavigationOffPositionTimeseriesCollectionByCatalog( Guid? catalog )
        {
            throw new NotImplementedException( );
        }
        public IList<AisAidToNavigationOffPositionTimeseriesObject> GetAisAidToNavigationOffPositionTimeseriesCollectionByCatalogIsNull(  )
        {
            throw new NotImplementedException( );
        }
        public SimpleAisAidToNavigationOffPositionTimeseriesDataReader GetAisAidToNavigationOffPositionTimeseriesByCatalogAndNameDataReader( Guid? catalog, string name )
        {
            const string sql = SimpleAisAidToNavigationOffPositionTimeseriesDataReader.BaseQuery + " WHERE " +
                    SimpleAisAidToNavigationOffPositionTimeseriesDataReader.ViewAliasName + ".[Catalog] = @catalog AND " +
                    SimpleAisAidToNavigationOffPositionTimeseriesDataReader.ViewAliasName + ".[Name] = @name " +
                    " ORDER BY " + SimpleAisAidToNavigationOffPositionTimeseriesDataReader.ViewAliasName + ".[Catalog]," +SimpleAisAidToNavigationOffPositionTimeseriesDataReader.ViewAliasName + ".[Name]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var catalogParameter = sqlCommandParameters.AddReference( "@catalog", catalog );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@name", name, 127 );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleAisAidToNavigationOffPositionTimeseriesDataReader = new SimpleAisAidToNavigationOffPositionTimeseriesDataReader( _loggerFactory, sqlDataReader );
                return simpleAisAidToNavigationOffPositionTimeseriesDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public AisAidToNavigationOffPositionTimeseriesObject? GetAisAidToNavigationOffPositionTimeseriesByCatalogAndName( Guid? catalog, string name )
        {
            throw new NotImplementedException( );
        }
        public IList<AisAidToNavigationOffPositionTimeseriesObject> GetAisAidToNavigationOffPositionTimeseriesCollectionByCatalogIsNullAndName( string name )
        {
            throw new NotImplementedException( );
        }
        public SimpleAisAidToNavigationOffPositionTimeseriesDataReader GetAisAidToNavigationOffPositionTimeseriesCollectionByAidToNavigationDataReader( Guid aidToNavigation )
        {
            const string sql = SimpleAisAidToNavigationOffPositionTimeseriesDataReader.BaseQuery + " WHERE " +
                    SimpleAisAidToNavigationOffPositionTimeseriesDataReader.ViewAliasName + ".[AidToNavigation] = @aidToNavigation " +
                    " ORDER BY " + SimpleAisAidToNavigationOffPositionTimeseriesDataReader.ViewAliasName + ".[AidToNavigation]," +SimpleAisAidToNavigationOffPositionTimeseriesDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var aidToNavigationParameter = sqlCommandParameters.AddReference( "@aidToNavigation", aidToNavigation );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleAisAidToNavigationOffPositionTimeseriesDataReader = new SimpleAisAidToNavigationOffPositionTimeseriesDataReader( _loggerFactory, sqlDataReader );
                return simpleAisAidToNavigationOffPositionTimeseriesDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<AisAidToNavigationOffPositionTimeseriesObject> GetAisAidToNavigationOffPositionTimeseriesCollectionByAidToNavigation( Guid aidToNavigation )
        {
            throw new NotImplementedException( );
        }
        // ---------------------------------------------------------------------
        // DeviceEnabledTimeseries queries
        // ---------------------------------------------------------------------
        public SimpleDeviceEnabledTimeseriesDataReader GetDeviceEnabledTimeseriesByIdDataReader( Guid id )
        {
            const string sql = SimpleDeviceEnabledTimeseriesDataReader.BaseQuery + "WHERE " + SimpleDeviceEnabledTimeseriesDataReader.ViewAliasName + ".[Id] = @id"; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                sqlCommandParameters.AddGuid( "@id", id );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleDeviceEnabledTimeseriesDataReader = new SimpleDeviceEnabledTimeseriesDataReader( _loggerFactory, sqlDataReader );
                return simpleDeviceEnabledTimeseriesDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public DeviceEnabledTimeseriesObject? GetDeviceEnabledTimeseriesById( Guid id )
        {
            var simpleDeviceEnabledTimeseriesDataReader = GetDeviceEnabledTimeseriesByIdDataReader( id );
            using ( simpleDeviceEnabledTimeseriesDataReader )
            {
                if ( simpleDeviceEnabledTimeseriesDataReader.Read( ) )
                {
                    var result = simpleDeviceEnabledTimeseriesDataReader.GetDataObject( );
                    return result;
                }
            }
            return null;
        }

        public void GetDeviceEnabledTimeseriesById( Guid id, Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleDeviceEnabledTimeseriesDataReader = GetDeviceEnabledTimeseriesByIdDataReader( id );
                using ( simpleDeviceEnabledTimeseriesDataReader )
                {
                    if ( simpleDeviceEnabledTimeseriesDataReader.Read( ) )
                    {
                        destinationWriter.Write( true );
                        simpleDeviceEnabledTimeseriesDataReader.WriteTo( destinationWriter );
                    }
                    else
                    {
                        destinationWriter.Write( false );
                    }
                }
            }
        }

        public SimpleDeviceEnabledTimeseriesDataReader GetDeviceEnabledTimeseriesCollectionDataReader( )
        {
            const string sql = SimpleDeviceEnabledTimeseriesDataReader.BaseQuery; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleDeviceEnabledTimeseriesDataReader = new SimpleDeviceEnabledTimeseriesDataReader( _loggerFactory, sqlDataReader );
                return simpleDeviceEnabledTimeseriesDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public IList<DeviceEnabledTimeseriesObject> GetDeviceEnabledTimeseriesCollection( )
        {
            var result = new List<DeviceEnabledTimeseriesObject>( );
            var simpleDeviceEnabledTimeseriesDataReader = GetDeviceEnabledTimeseriesCollectionDataReader( );
            using ( simpleDeviceEnabledTimeseriesDataReader )
            {
                while ( simpleDeviceEnabledTimeseriesDataReader.Read( ) )
                {
                    var data = simpleDeviceEnabledTimeseriesDataReader.GetDataObject( );
                    result.Add( data );
                }
            }
            return result;
        }

        public void GetDeviceEnabledTimeseriesCollection( Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleDeviceEnabledTimeseriesDataReader = GetDeviceEnabledTimeseriesCollectionDataReader( );
                using ( simpleDeviceEnabledTimeseriesDataReader )
                {
                    simpleDeviceEnabledTimeseriesDataReader.WriteResultSetTo( destinationWriter );
                }
            }
        }

        public SimpleDeviceEnabledTimeseriesDataReader GetDeviceEnabledTimeseriesCollectionByCatalogDataReader( Guid? catalog )
        {
            const string sql = SimpleDeviceEnabledTimeseriesDataReader.BaseQuery + " WHERE " +
                    SimpleDeviceEnabledTimeseriesDataReader.ViewAliasName + ".[Catalog] = @catalog " +
                    " ORDER BY " + SimpleDeviceEnabledTimeseriesDataReader.ViewAliasName + ".[Catalog]," +SimpleDeviceEnabledTimeseriesDataReader.ViewAliasName + ".[Name]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var catalogParameter = sqlCommandParameters.AddReference( "@catalog", catalog );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleDeviceEnabledTimeseriesDataReader = new SimpleDeviceEnabledTimeseriesDataReader( _loggerFactory, sqlDataReader );
                return simpleDeviceEnabledTimeseriesDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<DeviceEnabledTimeseriesObject> GetDeviceEnabledTimeseriesCollectionByCatalog( Guid? catalog )
        {
            throw new NotImplementedException( );
        }
        public IList<DeviceEnabledTimeseriesObject> GetDeviceEnabledTimeseriesCollectionByCatalogIsNull(  )
        {
            throw new NotImplementedException( );
        }
        public SimpleDeviceEnabledTimeseriesDataReader GetDeviceEnabledTimeseriesByCatalogAndNameDataReader( Guid? catalog, string name )
        {
            const string sql = SimpleDeviceEnabledTimeseriesDataReader.BaseQuery + " WHERE " +
                    SimpleDeviceEnabledTimeseriesDataReader.ViewAliasName + ".[Catalog] = @catalog AND " +
                    SimpleDeviceEnabledTimeseriesDataReader.ViewAliasName + ".[Name] = @name " +
                    " ORDER BY " + SimpleDeviceEnabledTimeseriesDataReader.ViewAliasName + ".[Catalog]," +SimpleDeviceEnabledTimeseriesDataReader.ViewAliasName + ".[Name]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var catalogParameter = sqlCommandParameters.AddReference( "@catalog", catalog );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@name", name, 127 );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleDeviceEnabledTimeseriesDataReader = new SimpleDeviceEnabledTimeseriesDataReader( _loggerFactory, sqlDataReader );
                return simpleDeviceEnabledTimeseriesDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public DeviceEnabledTimeseriesObject? GetDeviceEnabledTimeseriesByCatalogAndName( Guid? catalog, string name )
        {
            throw new NotImplementedException( );
        }
        public IList<DeviceEnabledTimeseriesObject> GetDeviceEnabledTimeseriesCollectionByCatalogIsNullAndName( string name )
        {
            throw new NotImplementedException( );
        }
        // ---------------------------------------------------------------------
        // RadarAutomaticSensitivityTimeControlTimeseries queries
        // ---------------------------------------------------------------------
        public SimpleRadarAutomaticSensitivityTimeControlTimeseriesDataReader GetRadarAutomaticSensitivityTimeControlTimeseriesByIdDataReader( Guid id )
        {
            const string sql = SimpleRadarAutomaticSensitivityTimeControlTimeseriesDataReader.BaseQuery + "WHERE " + SimpleRadarAutomaticSensitivityTimeControlTimeseriesDataReader.ViewAliasName + ".[Id] = @id"; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                sqlCommandParameters.AddGuid( "@id", id );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleRadarAutomaticSensitivityTimeControlTimeseriesDataReader = new SimpleRadarAutomaticSensitivityTimeControlTimeseriesDataReader( _loggerFactory, sqlDataReader );
                return simpleRadarAutomaticSensitivityTimeControlTimeseriesDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public RadarAutomaticSensitivityTimeControlTimeseriesObject? GetRadarAutomaticSensitivityTimeControlTimeseriesById( Guid id )
        {
            var simpleRadarAutomaticSensitivityTimeControlTimeseriesDataReader = GetRadarAutomaticSensitivityTimeControlTimeseriesByIdDataReader( id );
            using ( simpleRadarAutomaticSensitivityTimeControlTimeseriesDataReader )
            {
                if ( simpleRadarAutomaticSensitivityTimeControlTimeseriesDataReader.Read( ) )
                {
                    var result = simpleRadarAutomaticSensitivityTimeControlTimeseriesDataReader.GetDataObject( );
                    return result;
                }
            }
            return null;
        }

        public void GetRadarAutomaticSensitivityTimeControlTimeseriesById( Guid id, Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleRadarAutomaticSensitivityTimeControlTimeseriesDataReader = GetRadarAutomaticSensitivityTimeControlTimeseriesByIdDataReader( id );
                using ( simpleRadarAutomaticSensitivityTimeControlTimeseriesDataReader )
                {
                    if ( simpleRadarAutomaticSensitivityTimeControlTimeseriesDataReader.Read( ) )
                    {
                        destinationWriter.Write( true );
                        simpleRadarAutomaticSensitivityTimeControlTimeseriesDataReader.WriteTo( destinationWriter );
                    }
                    else
                    {
                        destinationWriter.Write( false );
                    }
                }
            }
        }

        public SimpleRadarAutomaticSensitivityTimeControlTimeseriesDataReader GetRadarAutomaticSensitivityTimeControlTimeseriesCollectionDataReader( )
        {
            const string sql = SimpleRadarAutomaticSensitivityTimeControlTimeseriesDataReader.BaseQuery; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleRadarAutomaticSensitivityTimeControlTimeseriesDataReader = new SimpleRadarAutomaticSensitivityTimeControlTimeseriesDataReader( _loggerFactory, sqlDataReader );
                return simpleRadarAutomaticSensitivityTimeControlTimeseriesDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public IList<RadarAutomaticSensitivityTimeControlTimeseriesObject> GetRadarAutomaticSensitivityTimeControlTimeseriesCollection( )
        {
            var result = new List<RadarAutomaticSensitivityTimeControlTimeseriesObject>( );
            var simpleRadarAutomaticSensitivityTimeControlTimeseriesDataReader = GetRadarAutomaticSensitivityTimeControlTimeseriesCollectionDataReader( );
            using ( simpleRadarAutomaticSensitivityTimeControlTimeseriesDataReader )
            {
                while ( simpleRadarAutomaticSensitivityTimeControlTimeseriesDataReader.Read( ) )
                {
                    var data = simpleRadarAutomaticSensitivityTimeControlTimeseriesDataReader.GetDataObject( );
                    result.Add( data );
                }
            }
            return result;
        }

        public void GetRadarAutomaticSensitivityTimeControlTimeseriesCollection( Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleRadarAutomaticSensitivityTimeControlTimeseriesDataReader = GetRadarAutomaticSensitivityTimeControlTimeseriesCollectionDataReader( );
                using ( simpleRadarAutomaticSensitivityTimeControlTimeseriesDataReader )
                {
                    simpleRadarAutomaticSensitivityTimeControlTimeseriesDataReader.WriteResultSetTo( destinationWriter );
                }
            }
        }

        public SimpleRadarAutomaticSensitivityTimeControlTimeseriesDataReader GetRadarAutomaticSensitivityTimeControlTimeseriesCollectionByCatalogDataReader( Guid? catalog )
        {
            const string sql = SimpleRadarAutomaticSensitivityTimeControlTimeseriesDataReader.BaseQuery + " WHERE " +
                    SimpleRadarAutomaticSensitivityTimeControlTimeseriesDataReader.ViewAliasName + ".[Catalog] = @catalog " +
                    " ORDER BY " + SimpleRadarAutomaticSensitivityTimeControlTimeseriesDataReader.ViewAliasName + ".[Catalog]," +SimpleRadarAutomaticSensitivityTimeControlTimeseriesDataReader.ViewAliasName + ".[Name]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var catalogParameter = sqlCommandParameters.AddReference( "@catalog", catalog );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleRadarAutomaticSensitivityTimeControlTimeseriesDataReader = new SimpleRadarAutomaticSensitivityTimeControlTimeseriesDataReader( _loggerFactory, sqlDataReader );
                return simpleRadarAutomaticSensitivityTimeControlTimeseriesDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<RadarAutomaticSensitivityTimeControlTimeseriesObject> GetRadarAutomaticSensitivityTimeControlTimeseriesCollectionByCatalog( Guid? catalog )
        {
            throw new NotImplementedException( );
        }
        public IList<RadarAutomaticSensitivityTimeControlTimeseriesObject> GetRadarAutomaticSensitivityTimeControlTimeseriesCollectionByCatalogIsNull(  )
        {
            throw new NotImplementedException( );
        }
        public SimpleRadarAutomaticSensitivityTimeControlTimeseriesDataReader GetRadarAutomaticSensitivityTimeControlTimeseriesByCatalogAndNameDataReader( Guid? catalog, string name )
        {
            const string sql = SimpleRadarAutomaticSensitivityTimeControlTimeseriesDataReader.BaseQuery + " WHERE " +
                    SimpleRadarAutomaticSensitivityTimeControlTimeseriesDataReader.ViewAliasName + ".[Catalog] = @catalog AND " +
                    SimpleRadarAutomaticSensitivityTimeControlTimeseriesDataReader.ViewAliasName + ".[Name] = @name " +
                    " ORDER BY " + SimpleRadarAutomaticSensitivityTimeControlTimeseriesDataReader.ViewAliasName + ".[Catalog]," +SimpleRadarAutomaticSensitivityTimeControlTimeseriesDataReader.ViewAliasName + ".[Name]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var catalogParameter = sqlCommandParameters.AddReference( "@catalog", catalog );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@name", name, 127 );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleRadarAutomaticSensitivityTimeControlTimeseriesDataReader = new SimpleRadarAutomaticSensitivityTimeControlTimeseriesDataReader( _loggerFactory, sqlDataReader );
                return simpleRadarAutomaticSensitivityTimeControlTimeseriesDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public RadarAutomaticSensitivityTimeControlTimeseriesObject? GetRadarAutomaticSensitivityTimeControlTimeseriesByCatalogAndName( Guid? catalog, string name )
        {
            throw new NotImplementedException( );
        }
        public IList<RadarAutomaticSensitivityTimeControlTimeseriesObject> GetRadarAutomaticSensitivityTimeControlTimeseriesCollectionByCatalogIsNullAndName( string name )
        {
            throw new NotImplementedException( );
        }
        // ---------------------------------------------------------------------
        // RadarBlankSector1Timeseries queries
        // ---------------------------------------------------------------------
        public SimpleRadarBlankSector1TimeseriesDataReader GetRadarBlankSector1TimeseriesByIdDataReader( Guid id )
        {
            const string sql = SimpleRadarBlankSector1TimeseriesDataReader.BaseQuery + "WHERE " + SimpleRadarBlankSector1TimeseriesDataReader.ViewAliasName + ".[Id] = @id"; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                sqlCommandParameters.AddGuid( "@id", id );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleRadarBlankSector1TimeseriesDataReader = new SimpleRadarBlankSector1TimeseriesDataReader( _loggerFactory, sqlDataReader );
                return simpleRadarBlankSector1TimeseriesDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public RadarBlankSector1TimeseriesObject? GetRadarBlankSector1TimeseriesById( Guid id )
        {
            var simpleRadarBlankSector1TimeseriesDataReader = GetRadarBlankSector1TimeseriesByIdDataReader( id );
            using ( simpleRadarBlankSector1TimeseriesDataReader )
            {
                if ( simpleRadarBlankSector1TimeseriesDataReader.Read( ) )
                {
                    var result = simpleRadarBlankSector1TimeseriesDataReader.GetDataObject( );
                    return result;
                }
            }
            return null;
        }

        public void GetRadarBlankSector1TimeseriesById( Guid id, Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleRadarBlankSector1TimeseriesDataReader = GetRadarBlankSector1TimeseriesByIdDataReader( id );
                using ( simpleRadarBlankSector1TimeseriesDataReader )
                {
                    if ( simpleRadarBlankSector1TimeseriesDataReader.Read( ) )
                    {
                        destinationWriter.Write( true );
                        simpleRadarBlankSector1TimeseriesDataReader.WriteTo( destinationWriter );
                    }
                    else
                    {
                        destinationWriter.Write( false );
                    }
                }
            }
        }

        public SimpleRadarBlankSector1TimeseriesDataReader GetRadarBlankSector1TimeseriesCollectionDataReader( )
        {
            const string sql = SimpleRadarBlankSector1TimeseriesDataReader.BaseQuery; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleRadarBlankSector1TimeseriesDataReader = new SimpleRadarBlankSector1TimeseriesDataReader( _loggerFactory, sqlDataReader );
                return simpleRadarBlankSector1TimeseriesDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public IList<RadarBlankSector1TimeseriesObject> GetRadarBlankSector1TimeseriesCollection( )
        {
            var result = new List<RadarBlankSector1TimeseriesObject>( );
            var simpleRadarBlankSector1TimeseriesDataReader = GetRadarBlankSector1TimeseriesCollectionDataReader( );
            using ( simpleRadarBlankSector1TimeseriesDataReader )
            {
                while ( simpleRadarBlankSector1TimeseriesDataReader.Read( ) )
                {
                    var data = simpleRadarBlankSector1TimeseriesDataReader.GetDataObject( );
                    result.Add( data );
                }
            }
            return result;
        }

        public void GetRadarBlankSector1TimeseriesCollection( Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleRadarBlankSector1TimeseriesDataReader = GetRadarBlankSector1TimeseriesCollectionDataReader( );
                using ( simpleRadarBlankSector1TimeseriesDataReader )
                {
                    simpleRadarBlankSector1TimeseriesDataReader.WriteResultSetTo( destinationWriter );
                }
            }
        }

        public SimpleRadarBlankSector1TimeseriesDataReader GetRadarBlankSector1TimeseriesCollectionByCatalogDataReader( Guid? catalog )
        {
            const string sql = SimpleRadarBlankSector1TimeseriesDataReader.BaseQuery + " WHERE " +
                    SimpleRadarBlankSector1TimeseriesDataReader.ViewAliasName + ".[Catalog] = @catalog " +
                    " ORDER BY " + SimpleRadarBlankSector1TimeseriesDataReader.ViewAliasName + ".[Catalog]," +SimpleRadarBlankSector1TimeseriesDataReader.ViewAliasName + ".[Name]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var catalogParameter = sqlCommandParameters.AddReference( "@catalog", catalog );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleRadarBlankSector1TimeseriesDataReader = new SimpleRadarBlankSector1TimeseriesDataReader( _loggerFactory, sqlDataReader );
                return simpleRadarBlankSector1TimeseriesDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<RadarBlankSector1TimeseriesObject> GetRadarBlankSector1TimeseriesCollectionByCatalog( Guid? catalog )
        {
            throw new NotImplementedException( );
        }
        public IList<RadarBlankSector1TimeseriesObject> GetRadarBlankSector1TimeseriesCollectionByCatalogIsNull(  )
        {
            throw new NotImplementedException( );
        }
        public SimpleRadarBlankSector1TimeseriesDataReader GetRadarBlankSector1TimeseriesByCatalogAndNameDataReader( Guid? catalog, string name )
        {
            const string sql = SimpleRadarBlankSector1TimeseriesDataReader.BaseQuery + " WHERE " +
                    SimpleRadarBlankSector1TimeseriesDataReader.ViewAliasName + ".[Catalog] = @catalog AND " +
                    SimpleRadarBlankSector1TimeseriesDataReader.ViewAliasName + ".[Name] = @name " +
                    " ORDER BY " + SimpleRadarBlankSector1TimeseriesDataReader.ViewAliasName + ".[Catalog]," +SimpleRadarBlankSector1TimeseriesDataReader.ViewAliasName + ".[Name]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var catalogParameter = sqlCommandParameters.AddReference( "@catalog", catalog );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@name", name, 127 );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleRadarBlankSector1TimeseriesDataReader = new SimpleRadarBlankSector1TimeseriesDataReader( _loggerFactory, sqlDataReader );
                return simpleRadarBlankSector1TimeseriesDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public RadarBlankSector1TimeseriesObject? GetRadarBlankSector1TimeseriesByCatalogAndName( Guid? catalog, string name )
        {
            throw new NotImplementedException( );
        }
        public IList<RadarBlankSector1TimeseriesObject> GetRadarBlankSector1TimeseriesCollectionByCatalogIsNullAndName( string name )
        {
            throw new NotImplementedException( );
        }
        // ---------------------------------------------------------------------
        // RadarBlankSector2Timeseries queries
        // ---------------------------------------------------------------------
        public SimpleRadarBlankSector2TimeseriesDataReader GetRadarBlankSector2TimeseriesByIdDataReader( Guid id )
        {
            const string sql = SimpleRadarBlankSector2TimeseriesDataReader.BaseQuery + "WHERE " + SimpleRadarBlankSector2TimeseriesDataReader.ViewAliasName + ".[Id] = @id"; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                sqlCommandParameters.AddGuid( "@id", id );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleRadarBlankSector2TimeseriesDataReader = new SimpleRadarBlankSector2TimeseriesDataReader( _loggerFactory, sqlDataReader );
                return simpleRadarBlankSector2TimeseriesDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public RadarBlankSector2TimeseriesObject? GetRadarBlankSector2TimeseriesById( Guid id )
        {
            var simpleRadarBlankSector2TimeseriesDataReader = GetRadarBlankSector2TimeseriesByIdDataReader( id );
            using ( simpleRadarBlankSector2TimeseriesDataReader )
            {
                if ( simpleRadarBlankSector2TimeseriesDataReader.Read( ) )
                {
                    var result = simpleRadarBlankSector2TimeseriesDataReader.GetDataObject( );
                    return result;
                }
            }
            return null;
        }

        public void GetRadarBlankSector2TimeseriesById( Guid id, Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleRadarBlankSector2TimeseriesDataReader = GetRadarBlankSector2TimeseriesByIdDataReader( id );
                using ( simpleRadarBlankSector2TimeseriesDataReader )
                {
                    if ( simpleRadarBlankSector2TimeseriesDataReader.Read( ) )
                    {
                        destinationWriter.Write( true );
                        simpleRadarBlankSector2TimeseriesDataReader.WriteTo( destinationWriter );
                    }
                    else
                    {
                        destinationWriter.Write( false );
                    }
                }
            }
        }

        public SimpleRadarBlankSector2TimeseriesDataReader GetRadarBlankSector2TimeseriesCollectionDataReader( )
        {
            const string sql = SimpleRadarBlankSector2TimeseriesDataReader.BaseQuery; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleRadarBlankSector2TimeseriesDataReader = new SimpleRadarBlankSector2TimeseriesDataReader( _loggerFactory, sqlDataReader );
                return simpleRadarBlankSector2TimeseriesDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public IList<RadarBlankSector2TimeseriesObject> GetRadarBlankSector2TimeseriesCollection( )
        {
            var result = new List<RadarBlankSector2TimeseriesObject>( );
            var simpleRadarBlankSector2TimeseriesDataReader = GetRadarBlankSector2TimeseriesCollectionDataReader( );
            using ( simpleRadarBlankSector2TimeseriesDataReader )
            {
                while ( simpleRadarBlankSector2TimeseriesDataReader.Read( ) )
                {
                    var data = simpleRadarBlankSector2TimeseriesDataReader.GetDataObject( );
                    result.Add( data );
                }
            }
            return result;
        }

        public void GetRadarBlankSector2TimeseriesCollection( Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleRadarBlankSector2TimeseriesDataReader = GetRadarBlankSector2TimeseriesCollectionDataReader( );
                using ( simpleRadarBlankSector2TimeseriesDataReader )
                {
                    simpleRadarBlankSector2TimeseriesDataReader.WriteResultSetTo( destinationWriter );
                }
            }
        }

        public SimpleRadarBlankSector2TimeseriesDataReader GetRadarBlankSector2TimeseriesCollectionByCatalogDataReader( Guid? catalog )
        {
            const string sql = SimpleRadarBlankSector2TimeseriesDataReader.BaseQuery + " WHERE " +
                    SimpleRadarBlankSector2TimeseriesDataReader.ViewAliasName + ".[Catalog] = @catalog " +
                    " ORDER BY " + SimpleRadarBlankSector2TimeseriesDataReader.ViewAliasName + ".[Catalog]," +SimpleRadarBlankSector2TimeseriesDataReader.ViewAliasName + ".[Name]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var catalogParameter = sqlCommandParameters.AddReference( "@catalog", catalog );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleRadarBlankSector2TimeseriesDataReader = new SimpleRadarBlankSector2TimeseriesDataReader( _loggerFactory, sqlDataReader );
                return simpleRadarBlankSector2TimeseriesDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<RadarBlankSector2TimeseriesObject> GetRadarBlankSector2TimeseriesCollectionByCatalog( Guid? catalog )
        {
            throw new NotImplementedException( );
        }
        public IList<RadarBlankSector2TimeseriesObject> GetRadarBlankSector2TimeseriesCollectionByCatalogIsNull(  )
        {
            throw new NotImplementedException( );
        }
        public SimpleRadarBlankSector2TimeseriesDataReader GetRadarBlankSector2TimeseriesByCatalogAndNameDataReader( Guid? catalog, string name )
        {
            const string sql = SimpleRadarBlankSector2TimeseriesDataReader.BaseQuery + " WHERE " +
                    SimpleRadarBlankSector2TimeseriesDataReader.ViewAliasName + ".[Catalog] = @catalog AND " +
                    SimpleRadarBlankSector2TimeseriesDataReader.ViewAliasName + ".[Name] = @name " +
                    " ORDER BY " + SimpleRadarBlankSector2TimeseriesDataReader.ViewAliasName + ".[Catalog]," +SimpleRadarBlankSector2TimeseriesDataReader.ViewAliasName + ".[Name]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var catalogParameter = sqlCommandParameters.AddReference( "@catalog", catalog );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@name", name, 127 );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleRadarBlankSector2TimeseriesDataReader = new SimpleRadarBlankSector2TimeseriesDataReader( _loggerFactory, sqlDataReader );
                return simpleRadarBlankSector2TimeseriesDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public RadarBlankSector2TimeseriesObject? GetRadarBlankSector2TimeseriesByCatalogAndName( Guid? catalog, string name )
        {
            throw new NotImplementedException( );
        }
        public IList<RadarBlankSector2TimeseriesObject> GetRadarBlankSector2TimeseriesCollectionByCatalogIsNullAndName( string name )
        {
            throw new NotImplementedException( );
        }
        // ---------------------------------------------------------------------
        // RadarEnableAutomaticFrequencyControlTimeseries queries
        // ---------------------------------------------------------------------
        public SimpleRadarEnableAutomaticFrequencyControlTimeseriesDataReader GetRadarEnableAutomaticFrequencyControlTimeseriesByIdDataReader( Guid id )
        {
            const string sql = SimpleRadarEnableAutomaticFrequencyControlTimeseriesDataReader.BaseQuery + "WHERE " + SimpleRadarEnableAutomaticFrequencyControlTimeseriesDataReader.ViewAliasName + ".[Id] = @id"; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                sqlCommandParameters.AddGuid( "@id", id );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleRadarEnableAutomaticFrequencyControlTimeseriesDataReader = new SimpleRadarEnableAutomaticFrequencyControlTimeseriesDataReader( _loggerFactory, sqlDataReader );
                return simpleRadarEnableAutomaticFrequencyControlTimeseriesDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public RadarEnableAutomaticFrequencyControlTimeseriesObject? GetRadarEnableAutomaticFrequencyControlTimeseriesById( Guid id )
        {
            var simpleRadarEnableAutomaticFrequencyControlTimeseriesDataReader = GetRadarEnableAutomaticFrequencyControlTimeseriesByIdDataReader( id );
            using ( simpleRadarEnableAutomaticFrequencyControlTimeseriesDataReader )
            {
                if ( simpleRadarEnableAutomaticFrequencyControlTimeseriesDataReader.Read( ) )
                {
                    var result = simpleRadarEnableAutomaticFrequencyControlTimeseriesDataReader.GetDataObject( );
                    return result;
                }
            }
            return null;
        }

        public void GetRadarEnableAutomaticFrequencyControlTimeseriesById( Guid id, Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleRadarEnableAutomaticFrequencyControlTimeseriesDataReader = GetRadarEnableAutomaticFrequencyControlTimeseriesByIdDataReader( id );
                using ( simpleRadarEnableAutomaticFrequencyControlTimeseriesDataReader )
                {
                    if ( simpleRadarEnableAutomaticFrequencyControlTimeseriesDataReader.Read( ) )
                    {
                        destinationWriter.Write( true );
                        simpleRadarEnableAutomaticFrequencyControlTimeseriesDataReader.WriteTo( destinationWriter );
                    }
                    else
                    {
                        destinationWriter.Write( false );
                    }
                }
            }
        }

        public SimpleRadarEnableAutomaticFrequencyControlTimeseriesDataReader GetRadarEnableAutomaticFrequencyControlTimeseriesCollectionDataReader( )
        {
            const string sql = SimpleRadarEnableAutomaticFrequencyControlTimeseriesDataReader.BaseQuery; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleRadarEnableAutomaticFrequencyControlTimeseriesDataReader = new SimpleRadarEnableAutomaticFrequencyControlTimeseriesDataReader( _loggerFactory, sqlDataReader );
                return simpleRadarEnableAutomaticFrequencyControlTimeseriesDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public IList<RadarEnableAutomaticFrequencyControlTimeseriesObject> GetRadarEnableAutomaticFrequencyControlTimeseriesCollection( )
        {
            var result = new List<RadarEnableAutomaticFrequencyControlTimeseriesObject>( );
            var simpleRadarEnableAutomaticFrequencyControlTimeseriesDataReader = GetRadarEnableAutomaticFrequencyControlTimeseriesCollectionDataReader( );
            using ( simpleRadarEnableAutomaticFrequencyControlTimeseriesDataReader )
            {
                while ( simpleRadarEnableAutomaticFrequencyControlTimeseriesDataReader.Read( ) )
                {
                    var data = simpleRadarEnableAutomaticFrequencyControlTimeseriesDataReader.GetDataObject( );
                    result.Add( data );
                }
            }
            return result;
        }

        public void GetRadarEnableAutomaticFrequencyControlTimeseriesCollection( Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleRadarEnableAutomaticFrequencyControlTimeseriesDataReader = GetRadarEnableAutomaticFrequencyControlTimeseriesCollectionDataReader( );
                using ( simpleRadarEnableAutomaticFrequencyControlTimeseriesDataReader )
                {
                    simpleRadarEnableAutomaticFrequencyControlTimeseriesDataReader.WriteResultSetTo( destinationWriter );
                }
            }
        }

        public SimpleRadarEnableAutomaticFrequencyControlTimeseriesDataReader GetRadarEnableAutomaticFrequencyControlTimeseriesCollectionByCatalogDataReader( Guid? catalog )
        {
            const string sql = SimpleRadarEnableAutomaticFrequencyControlTimeseriesDataReader.BaseQuery + " WHERE " +
                    SimpleRadarEnableAutomaticFrequencyControlTimeseriesDataReader.ViewAliasName + ".[Catalog] = @catalog " +
                    " ORDER BY " + SimpleRadarEnableAutomaticFrequencyControlTimeseriesDataReader.ViewAliasName + ".[Catalog]," +SimpleRadarEnableAutomaticFrequencyControlTimeseriesDataReader.ViewAliasName + ".[Name]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var catalogParameter = sqlCommandParameters.AddReference( "@catalog", catalog );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleRadarEnableAutomaticFrequencyControlTimeseriesDataReader = new SimpleRadarEnableAutomaticFrequencyControlTimeseriesDataReader( _loggerFactory, sqlDataReader );
                return simpleRadarEnableAutomaticFrequencyControlTimeseriesDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<RadarEnableAutomaticFrequencyControlTimeseriesObject> GetRadarEnableAutomaticFrequencyControlTimeseriesCollectionByCatalog( Guid? catalog )
        {
            throw new NotImplementedException( );
        }
        public IList<RadarEnableAutomaticFrequencyControlTimeseriesObject> GetRadarEnableAutomaticFrequencyControlTimeseriesCollectionByCatalogIsNull(  )
        {
            throw new NotImplementedException( );
        }
        public SimpleRadarEnableAutomaticFrequencyControlTimeseriesDataReader GetRadarEnableAutomaticFrequencyControlTimeseriesByCatalogAndNameDataReader( Guid? catalog, string name )
        {
            const string sql = SimpleRadarEnableAutomaticFrequencyControlTimeseriesDataReader.BaseQuery + " WHERE " +
                    SimpleRadarEnableAutomaticFrequencyControlTimeseriesDataReader.ViewAliasName + ".[Catalog] = @catalog AND " +
                    SimpleRadarEnableAutomaticFrequencyControlTimeseriesDataReader.ViewAliasName + ".[Name] = @name " +
                    " ORDER BY " + SimpleRadarEnableAutomaticFrequencyControlTimeseriesDataReader.ViewAliasName + ".[Catalog]," +SimpleRadarEnableAutomaticFrequencyControlTimeseriesDataReader.ViewAliasName + ".[Name]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var catalogParameter = sqlCommandParameters.AddReference( "@catalog", catalog );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@name", name, 127 );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleRadarEnableAutomaticFrequencyControlTimeseriesDataReader = new SimpleRadarEnableAutomaticFrequencyControlTimeseriesDataReader( _loggerFactory, sqlDataReader );
                return simpleRadarEnableAutomaticFrequencyControlTimeseriesDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public RadarEnableAutomaticFrequencyControlTimeseriesObject? GetRadarEnableAutomaticFrequencyControlTimeseriesByCatalogAndName( Guid? catalog, string name )
        {
            throw new NotImplementedException( );
        }
        public IList<RadarEnableAutomaticFrequencyControlTimeseriesObject> GetRadarEnableAutomaticFrequencyControlTimeseriesCollectionByCatalogIsNullAndName( string name )
        {
            throw new NotImplementedException( );
        }
        // ---------------------------------------------------------------------
        // RadarEnableFastTimeConstantTimeseries queries
        // ---------------------------------------------------------------------
        public SimpleRadarEnableFastTimeConstantTimeseriesDataReader GetRadarEnableFastTimeConstantTimeseriesByIdDataReader( Guid id )
        {
            const string sql = SimpleRadarEnableFastTimeConstantTimeseriesDataReader.BaseQuery + "WHERE " + SimpleRadarEnableFastTimeConstantTimeseriesDataReader.ViewAliasName + ".[Id] = @id"; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                sqlCommandParameters.AddGuid( "@id", id );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleRadarEnableFastTimeConstantTimeseriesDataReader = new SimpleRadarEnableFastTimeConstantTimeseriesDataReader( _loggerFactory, sqlDataReader );
                return simpleRadarEnableFastTimeConstantTimeseriesDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public RadarEnableFastTimeConstantTimeseriesObject? GetRadarEnableFastTimeConstantTimeseriesById( Guid id )
        {
            var simpleRadarEnableFastTimeConstantTimeseriesDataReader = GetRadarEnableFastTimeConstantTimeseriesByIdDataReader( id );
            using ( simpleRadarEnableFastTimeConstantTimeseriesDataReader )
            {
                if ( simpleRadarEnableFastTimeConstantTimeseriesDataReader.Read( ) )
                {
                    var result = simpleRadarEnableFastTimeConstantTimeseriesDataReader.GetDataObject( );
                    return result;
                }
            }
            return null;
        }

        public void GetRadarEnableFastTimeConstantTimeseriesById( Guid id, Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleRadarEnableFastTimeConstantTimeseriesDataReader = GetRadarEnableFastTimeConstantTimeseriesByIdDataReader( id );
                using ( simpleRadarEnableFastTimeConstantTimeseriesDataReader )
                {
                    if ( simpleRadarEnableFastTimeConstantTimeseriesDataReader.Read( ) )
                    {
                        destinationWriter.Write( true );
                        simpleRadarEnableFastTimeConstantTimeseriesDataReader.WriteTo( destinationWriter );
                    }
                    else
                    {
                        destinationWriter.Write( false );
                    }
                }
            }
        }

        public SimpleRadarEnableFastTimeConstantTimeseriesDataReader GetRadarEnableFastTimeConstantTimeseriesCollectionDataReader( )
        {
            const string sql = SimpleRadarEnableFastTimeConstantTimeseriesDataReader.BaseQuery; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleRadarEnableFastTimeConstantTimeseriesDataReader = new SimpleRadarEnableFastTimeConstantTimeseriesDataReader( _loggerFactory, sqlDataReader );
                return simpleRadarEnableFastTimeConstantTimeseriesDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public IList<RadarEnableFastTimeConstantTimeseriesObject> GetRadarEnableFastTimeConstantTimeseriesCollection( )
        {
            var result = new List<RadarEnableFastTimeConstantTimeseriesObject>( );
            var simpleRadarEnableFastTimeConstantTimeseriesDataReader = GetRadarEnableFastTimeConstantTimeseriesCollectionDataReader( );
            using ( simpleRadarEnableFastTimeConstantTimeseriesDataReader )
            {
                while ( simpleRadarEnableFastTimeConstantTimeseriesDataReader.Read( ) )
                {
                    var data = simpleRadarEnableFastTimeConstantTimeseriesDataReader.GetDataObject( );
                    result.Add( data );
                }
            }
            return result;
        }

        public void GetRadarEnableFastTimeConstantTimeseriesCollection( Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleRadarEnableFastTimeConstantTimeseriesDataReader = GetRadarEnableFastTimeConstantTimeseriesCollectionDataReader( );
                using ( simpleRadarEnableFastTimeConstantTimeseriesDataReader )
                {
                    simpleRadarEnableFastTimeConstantTimeseriesDataReader.WriteResultSetTo( destinationWriter );
                }
            }
        }

        public SimpleRadarEnableFastTimeConstantTimeseriesDataReader GetRadarEnableFastTimeConstantTimeseriesCollectionByCatalogDataReader( Guid? catalog )
        {
            const string sql = SimpleRadarEnableFastTimeConstantTimeseriesDataReader.BaseQuery + " WHERE " +
                    SimpleRadarEnableFastTimeConstantTimeseriesDataReader.ViewAliasName + ".[Catalog] = @catalog " +
                    " ORDER BY " + SimpleRadarEnableFastTimeConstantTimeseriesDataReader.ViewAliasName + ".[Catalog]," +SimpleRadarEnableFastTimeConstantTimeseriesDataReader.ViewAliasName + ".[Name]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var catalogParameter = sqlCommandParameters.AddReference( "@catalog", catalog );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleRadarEnableFastTimeConstantTimeseriesDataReader = new SimpleRadarEnableFastTimeConstantTimeseriesDataReader( _loggerFactory, sqlDataReader );
                return simpleRadarEnableFastTimeConstantTimeseriesDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<RadarEnableFastTimeConstantTimeseriesObject> GetRadarEnableFastTimeConstantTimeseriesCollectionByCatalog( Guid? catalog )
        {
            throw new NotImplementedException( );
        }
        public IList<RadarEnableFastTimeConstantTimeseriesObject> GetRadarEnableFastTimeConstantTimeseriesCollectionByCatalogIsNull(  )
        {
            throw new NotImplementedException( );
        }
        public SimpleRadarEnableFastTimeConstantTimeseriesDataReader GetRadarEnableFastTimeConstantTimeseriesByCatalogAndNameDataReader( Guid? catalog, string name )
        {
            const string sql = SimpleRadarEnableFastTimeConstantTimeseriesDataReader.BaseQuery + " WHERE " +
                    SimpleRadarEnableFastTimeConstantTimeseriesDataReader.ViewAliasName + ".[Catalog] = @catalog AND " +
                    SimpleRadarEnableFastTimeConstantTimeseriesDataReader.ViewAliasName + ".[Name] = @name " +
                    " ORDER BY " + SimpleRadarEnableFastTimeConstantTimeseriesDataReader.ViewAliasName + ".[Catalog]," +SimpleRadarEnableFastTimeConstantTimeseriesDataReader.ViewAliasName + ".[Name]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var catalogParameter = sqlCommandParameters.AddReference( "@catalog", catalog );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@name", name, 127 );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleRadarEnableFastTimeConstantTimeseriesDataReader = new SimpleRadarEnableFastTimeConstantTimeseriesDataReader( _loggerFactory, sqlDataReader );
                return simpleRadarEnableFastTimeConstantTimeseriesDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public RadarEnableFastTimeConstantTimeseriesObject? GetRadarEnableFastTimeConstantTimeseriesByCatalogAndName( Guid? catalog, string name )
        {
            throw new NotImplementedException( );
        }
        public IList<RadarEnableFastTimeConstantTimeseriesObject> GetRadarEnableFastTimeConstantTimeseriesCollectionByCatalogIsNullAndName( string name )
        {
            throw new NotImplementedException( );
        }
        // ---------------------------------------------------------------------
        // RadarEnableSensitivityTimeControlTimeseries queries
        // ---------------------------------------------------------------------
        public SimpleRadarEnableSensitivityTimeControlTimeseriesDataReader GetRadarEnableSensitivityTimeControlTimeseriesByIdDataReader( Guid id )
        {
            const string sql = SimpleRadarEnableSensitivityTimeControlTimeseriesDataReader.BaseQuery + "WHERE " + SimpleRadarEnableSensitivityTimeControlTimeseriesDataReader.ViewAliasName + ".[Id] = @id"; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                sqlCommandParameters.AddGuid( "@id", id );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleRadarEnableSensitivityTimeControlTimeseriesDataReader = new SimpleRadarEnableSensitivityTimeControlTimeseriesDataReader( _loggerFactory, sqlDataReader );
                return simpleRadarEnableSensitivityTimeControlTimeseriesDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public RadarEnableSensitivityTimeControlTimeseriesObject? GetRadarEnableSensitivityTimeControlTimeseriesById( Guid id )
        {
            var simpleRadarEnableSensitivityTimeControlTimeseriesDataReader = GetRadarEnableSensitivityTimeControlTimeseriesByIdDataReader( id );
            using ( simpleRadarEnableSensitivityTimeControlTimeseriesDataReader )
            {
                if ( simpleRadarEnableSensitivityTimeControlTimeseriesDataReader.Read( ) )
                {
                    var result = simpleRadarEnableSensitivityTimeControlTimeseriesDataReader.GetDataObject( );
                    return result;
                }
            }
            return null;
        }

        public void GetRadarEnableSensitivityTimeControlTimeseriesById( Guid id, Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleRadarEnableSensitivityTimeControlTimeseriesDataReader = GetRadarEnableSensitivityTimeControlTimeseriesByIdDataReader( id );
                using ( simpleRadarEnableSensitivityTimeControlTimeseriesDataReader )
                {
                    if ( simpleRadarEnableSensitivityTimeControlTimeseriesDataReader.Read( ) )
                    {
                        destinationWriter.Write( true );
                        simpleRadarEnableSensitivityTimeControlTimeseriesDataReader.WriteTo( destinationWriter );
                    }
                    else
                    {
                        destinationWriter.Write( false );
                    }
                }
            }
        }

        public SimpleRadarEnableSensitivityTimeControlTimeseriesDataReader GetRadarEnableSensitivityTimeControlTimeseriesCollectionDataReader( )
        {
            const string sql = SimpleRadarEnableSensitivityTimeControlTimeseriesDataReader.BaseQuery; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleRadarEnableSensitivityTimeControlTimeseriesDataReader = new SimpleRadarEnableSensitivityTimeControlTimeseriesDataReader( _loggerFactory, sqlDataReader );
                return simpleRadarEnableSensitivityTimeControlTimeseriesDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public IList<RadarEnableSensitivityTimeControlTimeseriesObject> GetRadarEnableSensitivityTimeControlTimeseriesCollection( )
        {
            var result = new List<RadarEnableSensitivityTimeControlTimeseriesObject>( );
            var simpleRadarEnableSensitivityTimeControlTimeseriesDataReader = GetRadarEnableSensitivityTimeControlTimeseriesCollectionDataReader( );
            using ( simpleRadarEnableSensitivityTimeControlTimeseriesDataReader )
            {
                while ( simpleRadarEnableSensitivityTimeControlTimeseriesDataReader.Read( ) )
                {
                    var data = simpleRadarEnableSensitivityTimeControlTimeseriesDataReader.GetDataObject( );
                    result.Add( data );
                }
            }
            return result;
        }

        public void GetRadarEnableSensitivityTimeControlTimeseriesCollection( Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleRadarEnableSensitivityTimeControlTimeseriesDataReader = GetRadarEnableSensitivityTimeControlTimeseriesCollectionDataReader( );
                using ( simpleRadarEnableSensitivityTimeControlTimeseriesDataReader )
                {
                    simpleRadarEnableSensitivityTimeControlTimeseriesDataReader.WriteResultSetTo( destinationWriter );
                }
            }
        }

        public SimpleRadarEnableSensitivityTimeControlTimeseriesDataReader GetRadarEnableSensitivityTimeControlTimeseriesCollectionByCatalogDataReader( Guid? catalog )
        {
            const string sql = SimpleRadarEnableSensitivityTimeControlTimeseriesDataReader.BaseQuery + " WHERE " +
                    SimpleRadarEnableSensitivityTimeControlTimeseriesDataReader.ViewAliasName + ".[Catalog] = @catalog " +
                    " ORDER BY " + SimpleRadarEnableSensitivityTimeControlTimeseriesDataReader.ViewAliasName + ".[Catalog]," +SimpleRadarEnableSensitivityTimeControlTimeseriesDataReader.ViewAliasName + ".[Name]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var catalogParameter = sqlCommandParameters.AddReference( "@catalog", catalog );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleRadarEnableSensitivityTimeControlTimeseriesDataReader = new SimpleRadarEnableSensitivityTimeControlTimeseriesDataReader( _loggerFactory, sqlDataReader );
                return simpleRadarEnableSensitivityTimeControlTimeseriesDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<RadarEnableSensitivityTimeControlTimeseriesObject> GetRadarEnableSensitivityTimeControlTimeseriesCollectionByCatalog( Guid? catalog )
        {
            throw new NotImplementedException( );
        }
        public IList<RadarEnableSensitivityTimeControlTimeseriesObject> GetRadarEnableSensitivityTimeControlTimeseriesCollectionByCatalogIsNull(  )
        {
            throw new NotImplementedException( );
        }
        public SimpleRadarEnableSensitivityTimeControlTimeseriesDataReader GetRadarEnableSensitivityTimeControlTimeseriesByCatalogAndNameDataReader( Guid? catalog, string name )
        {
            const string sql = SimpleRadarEnableSensitivityTimeControlTimeseriesDataReader.BaseQuery + " WHERE " +
                    SimpleRadarEnableSensitivityTimeControlTimeseriesDataReader.ViewAliasName + ".[Catalog] = @catalog AND " +
                    SimpleRadarEnableSensitivityTimeControlTimeseriesDataReader.ViewAliasName + ".[Name] = @name " +
                    " ORDER BY " + SimpleRadarEnableSensitivityTimeControlTimeseriesDataReader.ViewAliasName + ".[Catalog]," +SimpleRadarEnableSensitivityTimeControlTimeseriesDataReader.ViewAliasName + ".[Name]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var catalogParameter = sqlCommandParameters.AddReference( "@catalog", catalog );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@name", name, 127 );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleRadarEnableSensitivityTimeControlTimeseriesDataReader = new SimpleRadarEnableSensitivityTimeControlTimeseriesDataReader( _loggerFactory, sqlDataReader );
                return simpleRadarEnableSensitivityTimeControlTimeseriesDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public RadarEnableSensitivityTimeControlTimeseriesObject? GetRadarEnableSensitivityTimeControlTimeseriesByCatalogAndName( Guid? catalog, string name )
        {
            throw new NotImplementedException( );
        }
        public IList<RadarEnableSensitivityTimeControlTimeseriesObject> GetRadarEnableSensitivityTimeControlTimeseriesCollectionByCatalogIsNullAndName( string name )
        {
            throw new NotImplementedException( );
        }
        // ---------------------------------------------------------------------
        // RadarPowerOnTimeseries queries
        // ---------------------------------------------------------------------
        public SimpleRadarPowerOnTimeseriesDataReader GetRadarPowerOnTimeseriesByIdDataReader( Guid id )
        {
            const string sql = SimpleRadarPowerOnTimeseriesDataReader.BaseQuery + "WHERE " + SimpleRadarPowerOnTimeseriesDataReader.ViewAliasName + ".[Id] = @id"; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                sqlCommandParameters.AddGuid( "@id", id );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleRadarPowerOnTimeseriesDataReader = new SimpleRadarPowerOnTimeseriesDataReader( _loggerFactory, sqlDataReader );
                return simpleRadarPowerOnTimeseriesDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public RadarPowerOnTimeseriesObject? GetRadarPowerOnTimeseriesById( Guid id )
        {
            var simpleRadarPowerOnTimeseriesDataReader = GetRadarPowerOnTimeseriesByIdDataReader( id );
            using ( simpleRadarPowerOnTimeseriesDataReader )
            {
                if ( simpleRadarPowerOnTimeseriesDataReader.Read( ) )
                {
                    var result = simpleRadarPowerOnTimeseriesDataReader.GetDataObject( );
                    return result;
                }
            }
            return null;
        }

        public void GetRadarPowerOnTimeseriesById( Guid id, Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleRadarPowerOnTimeseriesDataReader = GetRadarPowerOnTimeseriesByIdDataReader( id );
                using ( simpleRadarPowerOnTimeseriesDataReader )
                {
                    if ( simpleRadarPowerOnTimeseriesDataReader.Read( ) )
                    {
                        destinationWriter.Write( true );
                        simpleRadarPowerOnTimeseriesDataReader.WriteTo( destinationWriter );
                    }
                    else
                    {
                        destinationWriter.Write( false );
                    }
                }
            }
        }

        public SimpleRadarPowerOnTimeseriesDataReader GetRadarPowerOnTimeseriesCollectionDataReader( )
        {
            const string sql = SimpleRadarPowerOnTimeseriesDataReader.BaseQuery; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleRadarPowerOnTimeseriesDataReader = new SimpleRadarPowerOnTimeseriesDataReader( _loggerFactory, sqlDataReader );
                return simpleRadarPowerOnTimeseriesDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public IList<RadarPowerOnTimeseriesObject> GetRadarPowerOnTimeseriesCollection( )
        {
            var result = new List<RadarPowerOnTimeseriesObject>( );
            var simpleRadarPowerOnTimeseriesDataReader = GetRadarPowerOnTimeseriesCollectionDataReader( );
            using ( simpleRadarPowerOnTimeseriesDataReader )
            {
                while ( simpleRadarPowerOnTimeseriesDataReader.Read( ) )
                {
                    var data = simpleRadarPowerOnTimeseriesDataReader.GetDataObject( );
                    result.Add( data );
                }
            }
            return result;
        }

        public void GetRadarPowerOnTimeseriesCollection( Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleRadarPowerOnTimeseriesDataReader = GetRadarPowerOnTimeseriesCollectionDataReader( );
                using ( simpleRadarPowerOnTimeseriesDataReader )
                {
                    simpleRadarPowerOnTimeseriesDataReader.WriteResultSetTo( destinationWriter );
                }
            }
        }

        public SimpleRadarPowerOnTimeseriesDataReader GetRadarPowerOnTimeseriesCollectionByCatalogDataReader( Guid? catalog )
        {
            const string sql = SimpleRadarPowerOnTimeseriesDataReader.BaseQuery + " WHERE " +
                    SimpleRadarPowerOnTimeseriesDataReader.ViewAliasName + ".[Catalog] = @catalog " +
                    " ORDER BY " + SimpleRadarPowerOnTimeseriesDataReader.ViewAliasName + ".[Catalog]," +SimpleRadarPowerOnTimeseriesDataReader.ViewAliasName + ".[Name]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var catalogParameter = sqlCommandParameters.AddReference( "@catalog", catalog );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleRadarPowerOnTimeseriesDataReader = new SimpleRadarPowerOnTimeseriesDataReader( _loggerFactory, sqlDataReader );
                return simpleRadarPowerOnTimeseriesDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<RadarPowerOnTimeseriesObject> GetRadarPowerOnTimeseriesCollectionByCatalog( Guid? catalog )
        {
            throw new NotImplementedException( );
        }
        public IList<RadarPowerOnTimeseriesObject> GetRadarPowerOnTimeseriesCollectionByCatalogIsNull(  )
        {
            throw new NotImplementedException( );
        }
        public SimpleRadarPowerOnTimeseriesDataReader GetRadarPowerOnTimeseriesByCatalogAndNameDataReader( Guid? catalog, string name )
        {
            const string sql = SimpleRadarPowerOnTimeseriesDataReader.BaseQuery + " WHERE " +
                    SimpleRadarPowerOnTimeseriesDataReader.ViewAliasName + ".[Catalog] = @catalog AND " +
                    SimpleRadarPowerOnTimeseriesDataReader.ViewAliasName + ".[Name] = @name " +
                    " ORDER BY " + SimpleRadarPowerOnTimeseriesDataReader.ViewAliasName + ".[Catalog]," +SimpleRadarPowerOnTimeseriesDataReader.ViewAliasName + ".[Name]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var catalogParameter = sqlCommandParameters.AddReference( "@catalog", catalog );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@name", name, 127 );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleRadarPowerOnTimeseriesDataReader = new SimpleRadarPowerOnTimeseriesDataReader( _loggerFactory, sqlDataReader );
                return simpleRadarPowerOnTimeseriesDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public RadarPowerOnTimeseriesObject? GetRadarPowerOnTimeseriesByCatalogAndName( Guid? catalog, string name )
        {
            throw new NotImplementedException( );
        }
        public IList<RadarPowerOnTimeseriesObject> GetRadarPowerOnTimeseriesCollectionByCatalogIsNullAndName( string name )
        {
            throw new NotImplementedException( );
        }
        // ---------------------------------------------------------------------
        // RadarSaveSettingsTimeseries queries
        // ---------------------------------------------------------------------
        public SimpleRadarSaveSettingsTimeseriesDataReader GetRadarSaveSettingsTimeseriesByIdDataReader( Guid id )
        {
            const string sql = SimpleRadarSaveSettingsTimeseriesDataReader.BaseQuery + "WHERE " + SimpleRadarSaveSettingsTimeseriesDataReader.ViewAliasName + ".[Id] = @id"; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                sqlCommandParameters.AddGuid( "@id", id );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleRadarSaveSettingsTimeseriesDataReader = new SimpleRadarSaveSettingsTimeseriesDataReader( _loggerFactory, sqlDataReader );
                return simpleRadarSaveSettingsTimeseriesDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public RadarSaveSettingsTimeseriesObject? GetRadarSaveSettingsTimeseriesById( Guid id )
        {
            var simpleRadarSaveSettingsTimeseriesDataReader = GetRadarSaveSettingsTimeseriesByIdDataReader( id );
            using ( simpleRadarSaveSettingsTimeseriesDataReader )
            {
                if ( simpleRadarSaveSettingsTimeseriesDataReader.Read( ) )
                {
                    var result = simpleRadarSaveSettingsTimeseriesDataReader.GetDataObject( );
                    return result;
                }
            }
            return null;
        }

        public void GetRadarSaveSettingsTimeseriesById( Guid id, Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleRadarSaveSettingsTimeseriesDataReader = GetRadarSaveSettingsTimeseriesByIdDataReader( id );
                using ( simpleRadarSaveSettingsTimeseriesDataReader )
                {
                    if ( simpleRadarSaveSettingsTimeseriesDataReader.Read( ) )
                    {
                        destinationWriter.Write( true );
                        simpleRadarSaveSettingsTimeseriesDataReader.WriteTo( destinationWriter );
                    }
                    else
                    {
                        destinationWriter.Write( false );
                    }
                }
            }
        }

        public SimpleRadarSaveSettingsTimeseriesDataReader GetRadarSaveSettingsTimeseriesCollectionDataReader( )
        {
            const string sql = SimpleRadarSaveSettingsTimeseriesDataReader.BaseQuery; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleRadarSaveSettingsTimeseriesDataReader = new SimpleRadarSaveSettingsTimeseriesDataReader( _loggerFactory, sqlDataReader );
                return simpleRadarSaveSettingsTimeseriesDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public IList<RadarSaveSettingsTimeseriesObject> GetRadarSaveSettingsTimeseriesCollection( )
        {
            var result = new List<RadarSaveSettingsTimeseriesObject>( );
            var simpleRadarSaveSettingsTimeseriesDataReader = GetRadarSaveSettingsTimeseriesCollectionDataReader( );
            using ( simpleRadarSaveSettingsTimeseriesDataReader )
            {
                while ( simpleRadarSaveSettingsTimeseriesDataReader.Read( ) )
                {
                    var data = simpleRadarSaveSettingsTimeseriesDataReader.GetDataObject( );
                    result.Add( data );
                }
            }
            return result;
        }

        public void GetRadarSaveSettingsTimeseriesCollection( Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleRadarSaveSettingsTimeseriesDataReader = GetRadarSaveSettingsTimeseriesCollectionDataReader( );
                using ( simpleRadarSaveSettingsTimeseriesDataReader )
                {
                    simpleRadarSaveSettingsTimeseriesDataReader.WriteResultSetTo( destinationWriter );
                }
            }
        }

        public SimpleRadarSaveSettingsTimeseriesDataReader GetRadarSaveSettingsTimeseriesCollectionByCatalogDataReader( Guid? catalog )
        {
            const string sql = SimpleRadarSaveSettingsTimeseriesDataReader.BaseQuery + " WHERE " +
                    SimpleRadarSaveSettingsTimeseriesDataReader.ViewAliasName + ".[Catalog] = @catalog " +
                    " ORDER BY " + SimpleRadarSaveSettingsTimeseriesDataReader.ViewAliasName + ".[Catalog]," +SimpleRadarSaveSettingsTimeseriesDataReader.ViewAliasName + ".[Name]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var catalogParameter = sqlCommandParameters.AddReference( "@catalog", catalog );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleRadarSaveSettingsTimeseriesDataReader = new SimpleRadarSaveSettingsTimeseriesDataReader( _loggerFactory, sqlDataReader );
                return simpleRadarSaveSettingsTimeseriesDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<RadarSaveSettingsTimeseriesObject> GetRadarSaveSettingsTimeseriesCollectionByCatalog( Guid? catalog )
        {
            throw new NotImplementedException( );
        }
        public IList<RadarSaveSettingsTimeseriesObject> GetRadarSaveSettingsTimeseriesCollectionByCatalogIsNull(  )
        {
            throw new NotImplementedException( );
        }
        public SimpleRadarSaveSettingsTimeseriesDataReader GetRadarSaveSettingsTimeseriesByCatalogAndNameDataReader( Guid? catalog, string name )
        {
            const string sql = SimpleRadarSaveSettingsTimeseriesDataReader.BaseQuery + " WHERE " +
                    SimpleRadarSaveSettingsTimeseriesDataReader.ViewAliasName + ".[Catalog] = @catalog AND " +
                    SimpleRadarSaveSettingsTimeseriesDataReader.ViewAliasName + ".[Name] = @name " +
                    " ORDER BY " + SimpleRadarSaveSettingsTimeseriesDataReader.ViewAliasName + ".[Catalog]," +SimpleRadarSaveSettingsTimeseriesDataReader.ViewAliasName + ".[Name]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var catalogParameter = sqlCommandParameters.AddReference( "@catalog", catalog );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@name", name, 127 );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleRadarSaveSettingsTimeseriesDataReader = new SimpleRadarSaveSettingsTimeseriesDataReader( _loggerFactory, sqlDataReader );
                return simpleRadarSaveSettingsTimeseriesDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public RadarSaveSettingsTimeseriesObject? GetRadarSaveSettingsTimeseriesByCatalogAndName( Guid? catalog, string name )
        {
            throw new NotImplementedException( );
        }
        public IList<RadarSaveSettingsTimeseriesObject> GetRadarSaveSettingsTimeseriesCollectionByCatalogIsNullAndName( string name )
        {
            throw new NotImplementedException( );
        }
        // ---------------------------------------------------------------------
        // RadarTrackingTimeseries queries
        // ---------------------------------------------------------------------
        public SimpleRadarTrackingTimeseriesDataReader GetRadarTrackingTimeseriesByIdDataReader( Guid id )
        {
            const string sql = SimpleRadarTrackingTimeseriesDataReader.BaseQuery + "WHERE " + SimpleRadarTrackingTimeseriesDataReader.ViewAliasName + ".[Id] = @id"; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                sqlCommandParameters.AddGuid( "@id", id );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleRadarTrackingTimeseriesDataReader = new SimpleRadarTrackingTimeseriesDataReader( _loggerFactory, sqlDataReader );
                return simpleRadarTrackingTimeseriesDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public RadarTrackingTimeseriesObject? GetRadarTrackingTimeseriesById( Guid id )
        {
            var simpleRadarTrackingTimeseriesDataReader = GetRadarTrackingTimeseriesByIdDataReader( id );
            using ( simpleRadarTrackingTimeseriesDataReader )
            {
                if ( simpleRadarTrackingTimeseriesDataReader.Read( ) )
                {
                    var result = simpleRadarTrackingTimeseriesDataReader.GetDataObject( );
                    return result;
                }
            }
            return null;
        }

        public void GetRadarTrackingTimeseriesById( Guid id, Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleRadarTrackingTimeseriesDataReader = GetRadarTrackingTimeseriesByIdDataReader( id );
                using ( simpleRadarTrackingTimeseriesDataReader )
                {
                    if ( simpleRadarTrackingTimeseriesDataReader.Read( ) )
                    {
                        destinationWriter.Write( true );
                        simpleRadarTrackingTimeseriesDataReader.WriteTo( destinationWriter );
                    }
                    else
                    {
                        destinationWriter.Write( false );
                    }
                }
            }
        }

        public SimpleRadarTrackingTimeseriesDataReader GetRadarTrackingTimeseriesCollectionDataReader( )
        {
            const string sql = SimpleRadarTrackingTimeseriesDataReader.BaseQuery; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleRadarTrackingTimeseriesDataReader = new SimpleRadarTrackingTimeseriesDataReader( _loggerFactory, sqlDataReader );
                return simpleRadarTrackingTimeseriesDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public IList<RadarTrackingTimeseriesObject> GetRadarTrackingTimeseriesCollection( )
        {
            var result = new List<RadarTrackingTimeseriesObject>( );
            var simpleRadarTrackingTimeseriesDataReader = GetRadarTrackingTimeseriesCollectionDataReader( );
            using ( simpleRadarTrackingTimeseriesDataReader )
            {
                while ( simpleRadarTrackingTimeseriesDataReader.Read( ) )
                {
                    var data = simpleRadarTrackingTimeseriesDataReader.GetDataObject( );
                    result.Add( data );
                }
            }
            return result;
        }

        public void GetRadarTrackingTimeseriesCollection( Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleRadarTrackingTimeseriesDataReader = GetRadarTrackingTimeseriesCollectionDataReader( );
                using ( simpleRadarTrackingTimeseriesDataReader )
                {
                    simpleRadarTrackingTimeseriesDataReader.WriteResultSetTo( destinationWriter );
                }
            }
        }

        public SimpleRadarTrackingTimeseriesDataReader GetRadarTrackingTimeseriesCollectionByCatalogDataReader( Guid? catalog )
        {
            const string sql = SimpleRadarTrackingTimeseriesDataReader.BaseQuery + " WHERE " +
                    SimpleRadarTrackingTimeseriesDataReader.ViewAliasName + ".[Catalog] = @catalog " +
                    " ORDER BY " + SimpleRadarTrackingTimeseriesDataReader.ViewAliasName + ".[Catalog]," +SimpleRadarTrackingTimeseriesDataReader.ViewAliasName + ".[Name]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var catalogParameter = sqlCommandParameters.AddReference( "@catalog", catalog );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleRadarTrackingTimeseriesDataReader = new SimpleRadarTrackingTimeseriesDataReader( _loggerFactory, sqlDataReader );
                return simpleRadarTrackingTimeseriesDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<RadarTrackingTimeseriesObject> GetRadarTrackingTimeseriesCollectionByCatalog( Guid? catalog )
        {
            throw new NotImplementedException( );
        }
        public IList<RadarTrackingTimeseriesObject> GetRadarTrackingTimeseriesCollectionByCatalogIsNull(  )
        {
            throw new NotImplementedException( );
        }
        public SimpleRadarTrackingTimeseriesDataReader GetRadarTrackingTimeseriesByCatalogAndNameDataReader( Guid? catalog, string name )
        {
            const string sql = SimpleRadarTrackingTimeseriesDataReader.BaseQuery + " WHERE " +
                    SimpleRadarTrackingTimeseriesDataReader.ViewAliasName + ".[Catalog] = @catalog AND " +
                    SimpleRadarTrackingTimeseriesDataReader.ViewAliasName + ".[Name] = @name " +
                    " ORDER BY " + SimpleRadarTrackingTimeseriesDataReader.ViewAliasName + ".[Catalog]," +SimpleRadarTrackingTimeseriesDataReader.ViewAliasName + ".[Name]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var catalogParameter = sqlCommandParameters.AddReference( "@catalog", catalog );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@name", name, 127 );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleRadarTrackingTimeseriesDataReader = new SimpleRadarTrackingTimeseriesDataReader( _loggerFactory, sqlDataReader );
                return simpleRadarTrackingTimeseriesDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public RadarTrackingTimeseriesObject? GetRadarTrackingTimeseriesByCatalogAndName( Guid? catalog, string name )
        {
            throw new NotImplementedException( );
        }
        public IList<RadarTrackingTimeseriesObject> GetRadarTrackingTimeseriesCollectionByCatalogIsNullAndName( string name )
        {
            throw new NotImplementedException( );
        }
        // ---------------------------------------------------------------------
        // MediaProxySessionEnabledTimeseries queries
        // ---------------------------------------------------------------------
        public SimpleMediaProxySessionEnabledTimeseriesDataReader GetMediaProxySessionEnabledTimeseriesByIdDataReader( Guid id )
        {
            const string sql = SimpleMediaProxySessionEnabledTimeseriesDataReader.BaseQuery + "WHERE " + SimpleMediaProxySessionEnabledTimeseriesDataReader.ViewAliasName + ".[Id] = @id"; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                sqlCommandParameters.AddGuid( "@id", id );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleMediaProxySessionEnabledTimeseriesDataReader = new SimpleMediaProxySessionEnabledTimeseriesDataReader( _loggerFactory, sqlDataReader );
                return simpleMediaProxySessionEnabledTimeseriesDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public MediaProxySessionEnabledTimeseriesObject? GetMediaProxySessionEnabledTimeseriesById( Guid id )
        {
            var simpleMediaProxySessionEnabledTimeseriesDataReader = GetMediaProxySessionEnabledTimeseriesByIdDataReader( id );
            using ( simpleMediaProxySessionEnabledTimeseriesDataReader )
            {
                if ( simpleMediaProxySessionEnabledTimeseriesDataReader.Read( ) )
                {
                    var result = simpleMediaProxySessionEnabledTimeseriesDataReader.GetDataObject( );
                    return result;
                }
            }
            return null;
        }

        public void GetMediaProxySessionEnabledTimeseriesById( Guid id, Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleMediaProxySessionEnabledTimeseriesDataReader = GetMediaProxySessionEnabledTimeseriesByIdDataReader( id );
                using ( simpleMediaProxySessionEnabledTimeseriesDataReader )
                {
                    if ( simpleMediaProxySessionEnabledTimeseriesDataReader.Read( ) )
                    {
                        destinationWriter.Write( true );
                        simpleMediaProxySessionEnabledTimeseriesDataReader.WriteTo( destinationWriter );
                    }
                    else
                    {
                        destinationWriter.Write( false );
                    }
                }
            }
        }

        public SimpleMediaProxySessionEnabledTimeseriesDataReader GetMediaProxySessionEnabledTimeseriesCollectionDataReader( )
        {
            const string sql = SimpleMediaProxySessionEnabledTimeseriesDataReader.BaseQuery; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleMediaProxySessionEnabledTimeseriesDataReader = new SimpleMediaProxySessionEnabledTimeseriesDataReader( _loggerFactory, sqlDataReader );
                return simpleMediaProxySessionEnabledTimeseriesDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public IList<MediaProxySessionEnabledTimeseriesObject> GetMediaProxySessionEnabledTimeseriesCollection( )
        {
            var result = new List<MediaProxySessionEnabledTimeseriesObject>( );
            var simpleMediaProxySessionEnabledTimeseriesDataReader = GetMediaProxySessionEnabledTimeseriesCollectionDataReader( );
            using ( simpleMediaProxySessionEnabledTimeseriesDataReader )
            {
                while ( simpleMediaProxySessionEnabledTimeseriesDataReader.Read( ) )
                {
                    var data = simpleMediaProxySessionEnabledTimeseriesDataReader.GetDataObject( );
                    result.Add( data );
                }
            }
            return result;
        }

        public void GetMediaProxySessionEnabledTimeseriesCollection( Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleMediaProxySessionEnabledTimeseriesDataReader = GetMediaProxySessionEnabledTimeseriesCollectionDataReader( );
                using ( simpleMediaProxySessionEnabledTimeseriesDataReader )
                {
                    simpleMediaProxySessionEnabledTimeseriesDataReader.WriteResultSetTo( destinationWriter );
                }
            }
        }

        public SimpleMediaProxySessionEnabledTimeseriesDataReader GetMediaProxySessionEnabledTimeseriesCollectionByCatalogDataReader( Guid? catalog )
        {
            const string sql = SimpleMediaProxySessionEnabledTimeseriesDataReader.BaseQuery + " WHERE " +
                    SimpleMediaProxySessionEnabledTimeseriesDataReader.ViewAliasName + ".[Catalog] = @catalog " +
                    " ORDER BY " + SimpleMediaProxySessionEnabledTimeseriesDataReader.ViewAliasName + ".[Catalog]," +SimpleMediaProxySessionEnabledTimeseriesDataReader.ViewAliasName + ".[Name]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var catalogParameter = sqlCommandParameters.AddReference( "@catalog", catalog );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleMediaProxySessionEnabledTimeseriesDataReader = new SimpleMediaProxySessionEnabledTimeseriesDataReader( _loggerFactory, sqlDataReader );
                return simpleMediaProxySessionEnabledTimeseriesDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<MediaProxySessionEnabledTimeseriesObject> GetMediaProxySessionEnabledTimeseriesCollectionByCatalog( Guid? catalog )
        {
            throw new NotImplementedException( );
        }
        public IList<MediaProxySessionEnabledTimeseriesObject> GetMediaProxySessionEnabledTimeseriesCollectionByCatalogIsNull(  )
        {
            throw new NotImplementedException( );
        }
        public SimpleMediaProxySessionEnabledTimeseriesDataReader GetMediaProxySessionEnabledTimeseriesByCatalogAndNameDataReader( Guid? catalog, string name )
        {
            const string sql = SimpleMediaProxySessionEnabledTimeseriesDataReader.BaseQuery + " WHERE " +
                    SimpleMediaProxySessionEnabledTimeseriesDataReader.ViewAliasName + ".[Catalog] = @catalog AND " +
                    SimpleMediaProxySessionEnabledTimeseriesDataReader.ViewAliasName + ".[Name] = @name " +
                    " ORDER BY " + SimpleMediaProxySessionEnabledTimeseriesDataReader.ViewAliasName + ".[Catalog]," +SimpleMediaProxySessionEnabledTimeseriesDataReader.ViewAliasName + ".[Name]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var catalogParameter = sqlCommandParameters.AddReference( "@catalog", catalog );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@name", name, 127 );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleMediaProxySessionEnabledTimeseriesDataReader = new SimpleMediaProxySessionEnabledTimeseriesDataReader( _loggerFactory, sqlDataReader );
                return simpleMediaProxySessionEnabledTimeseriesDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public MediaProxySessionEnabledTimeseriesObject? GetMediaProxySessionEnabledTimeseriesByCatalogAndName( Guid? catalog, string name )
        {
            throw new NotImplementedException( );
        }
        public IList<MediaProxySessionEnabledTimeseriesObject> GetMediaProxySessionEnabledTimeseriesCollectionByCatalogIsNullAndName( string name )
        {
            throw new NotImplementedException( );
        }
        // ---------------------------------------------------------------------
        // MediaServiceEnabledTimeseries queries
        // ---------------------------------------------------------------------
        public SimpleMediaServiceEnabledTimeseriesDataReader GetMediaServiceEnabledTimeseriesByIdDataReader( Guid id )
        {
            const string sql = SimpleMediaServiceEnabledTimeseriesDataReader.BaseQuery + "WHERE " + SimpleMediaServiceEnabledTimeseriesDataReader.ViewAliasName + ".[Id] = @id"; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                sqlCommandParameters.AddGuid( "@id", id );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleMediaServiceEnabledTimeseriesDataReader = new SimpleMediaServiceEnabledTimeseriesDataReader( _loggerFactory, sqlDataReader );
                return simpleMediaServiceEnabledTimeseriesDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public MediaServiceEnabledTimeseriesObject? GetMediaServiceEnabledTimeseriesById( Guid id )
        {
            var simpleMediaServiceEnabledTimeseriesDataReader = GetMediaServiceEnabledTimeseriesByIdDataReader( id );
            using ( simpleMediaServiceEnabledTimeseriesDataReader )
            {
                if ( simpleMediaServiceEnabledTimeseriesDataReader.Read( ) )
                {
                    var result = simpleMediaServiceEnabledTimeseriesDataReader.GetDataObject( );
                    return result;
                }
            }
            return null;
        }

        public void GetMediaServiceEnabledTimeseriesById( Guid id, Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleMediaServiceEnabledTimeseriesDataReader = GetMediaServiceEnabledTimeseriesByIdDataReader( id );
                using ( simpleMediaServiceEnabledTimeseriesDataReader )
                {
                    if ( simpleMediaServiceEnabledTimeseriesDataReader.Read( ) )
                    {
                        destinationWriter.Write( true );
                        simpleMediaServiceEnabledTimeseriesDataReader.WriteTo( destinationWriter );
                    }
                    else
                    {
                        destinationWriter.Write( false );
                    }
                }
            }
        }

        public SimpleMediaServiceEnabledTimeseriesDataReader GetMediaServiceEnabledTimeseriesCollectionDataReader( )
        {
            const string sql = SimpleMediaServiceEnabledTimeseriesDataReader.BaseQuery; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleMediaServiceEnabledTimeseriesDataReader = new SimpleMediaServiceEnabledTimeseriesDataReader( _loggerFactory, sqlDataReader );
                return simpleMediaServiceEnabledTimeseriesDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public IList<MediaServiceEnabledTimeseriesObject> GetMediaServiceEnabledTimeseriesCollection( )
        {
            var result = new List<MediaServiceEnabledTimeseriesObject>( );
            var simpleMediaServiceEnabledTimeseriesDataReader = GetMediaServiceEnabledTimeseriesCollectionDataReader( );
            using ( simpleMediaServiceEnabledTimeseriesDataReader )
            {
                while ( simpleMediaServiceEnabledTimeseriesDataReader.Read( ) )
                {
                    var data = simpleMediaServiceEnabledTimeseriesDataReader.GetDataObject( );
                    result.Add( data );
                }
            }
            return result;
        }

        public void GetMediaServiceEnabledTimeseriesCollection( Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleMediaServiceEnabledTimeseriesDataReader = GetMediaServiceEnabledTimeseriesCollectionDataReader( );
                using ( simpleMediaServiceEnabledTimeseriesDataReader )
                {
                    simpleMediaServiceEnabledTimeseriesDataReader.WriteResultSetTo( destinationWriter );
                }
            }
        }

        public SimpleMediaServiceEnabledTimeseriesDataReader GetMediaServiceEnabledTimeseriesCollectionByCatalogDataReader( Guid? catalog )
        {
            const string sql = SimpleMediaServiceEnabledTimeseriesDataReader.BaseQuery + " WHERE " +
                    SimpleMediaServiceEnabledTimeseriesDataReader.ViewAliasName + ".[Catalog] = @catalog " +
                    " ORDER BY " + SimpleMediaServiceEnabledTimeseriesDataReader.ViewAliasName + ".[Catalog]," +SimpleMediaServiceEnabledTimeseriesDataReader.ViewAliasName + ".[Name]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var catalogParameter = sqlCommandParameters.AddReference( "@catalog", catalog );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleMediaServiceEnabledTimeseriesDataReader = new SimpleMediaServiceEnabledTimeseriesDataReader( _loggerFactory, sqlDataReader );
                return simpleMediaServiceEnabledTimeseriesDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<MediaServiceEnabledTimeseriesObject> GetMediaServiceEnabledTimeseriesCollectionByCatalog( Guid? catalog )
        {
            throw new NotImplementedException( );
        }
        public IList<MediaServiceEnabledTimeseriesObject> GetMediaServiceEnabledTimeseriesCollectionByCatalogIsNull(  )
        {
            throw new NotImplementedException( );
        }
        public SimpleMediaServiceEnabledTimeseriesDataReader GetMediaServiceEnabledTimeseriesByCatalogAndNameDataReader( Guid? catalog, string name )
        {
            const string sql = SimpleMediaServiceEnabledTimeseriesDataReader.BaseQuery + " WHERE " +
                    SimpleMediaServiceEnabledTimeseriesDataReader.ViewAliasName + ".[Catalog] = @catalog AND " +
                    SimpleMediaServiceEnabledTimeseriesDataReader.ViewAliasName + ".[Name] = @name " +
                    " ORDER BY " + SimpleMediaServiceEnabledTimeseriesDataReader.ViewAliasName + ".[Catalog]," +SimpleMediaServiceEnabledTimeseriesDataReader.ViewAliasName + ".[Name]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var catalogParameter = sqlCommandParameters.AddReference( "@catalog", catalog );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@name", name, 127 );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleMediaServiceEnabledTimeseriesDataReader = new SimpleMediaServiceEnabledTimeseriesDataReader( _loggerFactory, sqlDataReader );
                return simpleMediaServiceEnabledTimeseriesDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public MediaServiceEnabledTimeseriesObject? GetMediaServiceEnabledTimeseriesByCatalogAndName( Guid? catalog, string name )
        {
            throw new NotImplementedException( );
        }
        public IList<MediaServiceEnabledTimeseriesObject> GetMediaServiceEnabledTimeseriesCollectionByCatalogIsNullAndName( string name )
        {
            throw new NotImplementedException( );
        }
        // ---------------------------------------------------------------------
        // ByteTimeseries queries
        // ---------------------------------------------------------------------
        public SimpleByteTimeseriesDataReader GetByteTimeseriesByIdDataReader( Guid id )
        {
            const string sql = SimpleByteTimeseriesDataReader.BaseQuery + "WHERE " + SimpleByteTimeseriesDataReader.ViewAliasName + ".[Id] = @id"; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                sqlCommandParameters.AddGuid( "@id", id );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleByteTimeseriesDataReader = new SimpleByteTimeseriesDataReader( _loggerFactory, sqlDataReader );
                return simpleByteTimeseriesDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public ByteTimeseriesObject? GetByteTimeseriesById( Guid id )
        {
            var simpleByteTimeseriesDataReader = GetByteTimeseriesByIdDataReader( id );
            using ( simpleByteTimeseriesDataReader )
            {
                if ( simpleByteTimeseriesDataReader.Read( ) )
                {
                    var result = simpleByteTimeseriesDataReader.GetDataObject( );
                    return result;
                }
            }
            return null;
        }

        public void GetByteTimeseriesById( Guid id, Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleByteTimeseriesDataReader = GetByteTimeseriesByIdDataReader( id );
                using ( simpleByteTimeseriesDataReader )
                {
                    if ( simpleByteTimeseriesDataReader.Read( ) )
                    {
                        destinationWriter.Write( true );
                        simpleByteTimeseriesDataReader.WriteTo( destinationWriter );
                    }
                    else
                    {
                        destinationWriter.Write( false );
                    }
                }
            }
        }

        public SimpleByteTimeseriesDataReader GetByteTimeseriesCollectionDataReader( )
        {
            const string sql = SimpleByteTimeseriesDataReader.BaseQuery; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleByteTimeseriesDataReader = new SimpleByteTimeseriesDataReader( _loggerFactory, sqlDataReader );
                return simpleByteTimeseriesDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public IList<ByteTimeseriesObject> GetByteTimeseriesCollection( )
        {
            var result = new List<ByteTimeseriesObject>( );
            var simpleByteTimeseriesDataReader = GetByteTimeseriesCollectionDataReader( );
            using ( simpleByteTimeseriesDataReader )
            {
                while ( simpleByteTimeseriesDataReader.Read( ) )
                {
                    var data = simpleByteTimeseriesDataReader.GetDataObject( );
                    result.Add( data );
                }
            }
            return result;
        }

        public void GetByteTimeseriesCollection( Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleByteTimeseriesDataReader = GetByteTimeseriesCollectionDataReader( );
                using ( simpleByteTimeseriesDataReader )
                {
                    simpleByteTimeseriesDataReader.WriteResultSetTo( destinationWriter );
                }
            }
        }

        public SimpleByteTimeseriesDataReader GetByteTimeseriesCollectionByCatalogDataReader( Guid? catalog )
        {
            const string sql = SimpleByteTimeseriesDataReader.BaseQuery + " WHERE " +
                    SimpleByteTimeseriesDataReader.ViewAliasName + ".[Catalog] = @catalog " +
                    " ORDER BY " + SimpleByteTimeseriesDataReader.ViewAliasName + ".[Catalog]," +SimpleByteTimeseriesDataReader.ViewAliasName + ".[Name]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var catalogParameter = sqlCommandParameters.AddReference( "@catalog", catalog );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleByteTimeseriesDataReader = new SimpleByteTimeseriesDataReader( _loggerFactory, sqlDataReader );
                return simpleByteTimeseriesDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<ByteTimeseriesObject> GetByteTimeseriesCollectionByCatalog( Guid? catalog )
        {
            throw new NotImplementedException( );
        }
        public IList<ByteTimeseriesObject> GetByteTimeseriesCollectionByCatalogIsNull(  )
        {
            throw new NotImplementedException( );
        }
        public SimpleByteTimeseriesDataReader GetByteTimeseriesByCatalogAndNameDataReader( Guid? catalog, string name )
        {
            const string sql = SimpleByteTimeseriesDataReader.BaseQuery + " WHERE " +
                    SimpleByteTimeseriesDataReader.ViewAliasName + ".[Catalog] = @catalog AND " +
                    SimpleByteTimeseriesDataReader.ViewAliasName + ".[Name] = @name " +
                    " ORDER BY " + SimpleByteTimeseriesDataReader.ViewAliasName + ".[Catalog]," +SimpleByteTimeseriesDataReader.ViewAliasName + ".[Name]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var catalogParameter = sqlCommandParameters.AddReference( "@catalog", catalog );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@name", name, 127 );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleByteTimeseriesDataReader = new SimpleByteTimeseriesDataReader( _loggerFactory, sqlDataReader );
                return simpleByteTimeseriesDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public ByteTimeseriesObject? GetByteTimeseriesByCatalogAndName( Guid? catalog, string name )
        {
            throw new NotImplementedException( );
        }
        public IList<ByteTimeseriesObject> GetByteTimeseriesCollectionByCatalogIsNullAndName( string name )
        {
            throw new NotImplementedException( );
        }
        // ---------------------------------------------------------------------
        // DateTimeTimeseries queries
        // ---------------------------------------------------------------------
        public SimpleDateTimeTimeseriesDataReader GetDateTimeTimeseriesByIdDataReader( Guid id )
        {
            const string sql = SimpleDateTimeTimeseriesDataReader.BaseQuery + "WHERE " + SimpleDateTimeTimeseriesDataReader.ViewAliasName + ".[Id] = @id"; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                sqlCommandParameters.AddGuid( "@id", id );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleDateTimeTimeseriesDataReader = new SimpleDateTimeTimeseriesDataReader( _loggerFactory, sqlDataReader );
                return simpleDateTimeTimeseriesDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public DateTimeTimeseriesObject? GetDateTimeTimeseriesById( Guid id )
        {
            var simpleDateTimeTimeseriesDataReader = GetDateTimeTimeseriesByIdDataReader( id );
            using ( simpleDateTimeTimeseriesDataReader )
            {
                if ( simpleDateTimeTimeseriesDataReader.Read( ) )
                {
                    var result = simpleDateTimeTimeseriesDataReader.GetDataObject( );
                    return result;
                }
            }
            return null;
        }

        public void GetDateTimeTimeseriesById( Guid id, Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleDateTimeTimeseriesDataReader = GetDateTimeTimeseriesByIdDataReader( id );
                using ( simpleDateTimeTimeseriesDataReader )
                {
                    if ( simpleDateTimeTimeseriesDataReader.Read( ) )
                    {
                        destinationWriter.Write( true );
                        simpleDateTimeTimeseriesDataReader.WriteTo( destinationWriter );
                    }
                    else
                    {
                        destinationWriter.Write( false );
                    }
                }
            }
        }

        public SimpleDateTimeTimeseriesDataReader GetDateTimeTimeseriesCollectionDataReader( )
        {
            const string sql = SimpleDateTimeTimeseriesDataReader.BaseQuery; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleDateTimeTimeseriesDataReader = new SimpleDateTimeTimeseriesDataReader( _loggerFactory, sqlDataReader );
                return simpleDateTimeTimeseriesDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public IList<DateTimeTimeseriesObject> GetDateTimeTimeseriesCollection( )
        {
            var result = new List<DateTimeTimeseriesObject>( );
            var simpleDateTimeTimeseriesDataReader = GetDateTimeTimeseriesCollectionDataReader( );
            using ( simpleDateTimeTimeseriesDataReader )
            {
                while ( simpleDateTimeTimeseriesDataReader.Read( ) )
                {
                    var data = simpleDateTimeTimeseriesDataReader.GetDataObject( );
                    result.Add( data );
                }
            }
            return result;
        }

        public void GetDateTimeTimeseriesCollection( Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleDateTimeTimeseriesDataReader = GetDateTimeTimeseriesCollectionDataReader( );
                using ( simpleDateTimeTimeseriesDataReader )
                {
                    simpleDateTimeTimeseriesDataReader.WriteResultSetTo( destinationWriter );
                }
            }
        }

        public SimpleDateTimeTimeseriesDataReader GetDateTimeTimeseriesCollectionByCatalogDataReader( Guid? catalog )
        {
            const string sql = SimpleDateTimeTimeseriesDataReader.BaseQuery + " WHERE " +
                    SimpleDateTimeTimeseriesDataReader.ViewAliasName + ".[Catalog] = @catalog " +
                    " ORDER BY " + SimpleDateTimeTimeseriesDataReader.ViewAliasName + ".[Catalog]," +SimpleDateTimeTimeseriesDataReader.ViewAliasName + ".[Name]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var catalogParameter = sqlCommandParameters.AddReference( "@catalog", catalog );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleDateTimeTimeseriesDataReader = new SimpleDateTimeTimeseriesDataReader( _loggerFactory, sqlDataReader );
                return simpleDateTimeTimeseriesDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<DateTimeTimeseriesObject> GetDateTimeTimeseriesCollectionByCatalog( Guid? catalog )
        {
            throw new NotImplementedException( );
        }
        public IList<DateTimeTimeseriesObject> GetDateTimeTimeseriesCollectionByCatalogIsNull(  )
        {
            throw new NotImplementedException( );
        }
        public SimpleDateTimeTimeseriesDataReader GetDateTimeTimeseriesByCatalogAndNameDataReader( Guid? catalog, string name )
        {
            const string sql = SimpleDateTimeTimeseriesDataReader.BaseQuery + " WHERE " +
                    SimpleDateTimeTimeseriesDataReader.ViewAliasName + ".[Catalog] = @catalog AND " +
                    SimpleDateTimeTimeseriesDataReader.ViewAliasName + ".[Name] = @name " +
                    " ORDER BY " + SimpleDateTimeTimeseriesDataReader.ViewAliasName + ".[Catalog]," +SimpleDateTimeTimeseriesDataReader.ViewAliasName + ".[Name]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var catalogParameter = sqlCommandParameters.AddReference( "@catalog", catalog );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@name", name, 127 );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleDateTimeTimeseriesDataReader = new SimpleDateTimeTimeseriesDataReader( _loggerFactory, sqlDataReader );
                return simpleDateTimeTimeseriesDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public DateTimeTimeseriesObject? GetDateTimeTimeseriesByCatalogAndName( Guid? catalog, string name )
        {
            throw new NotImplementedException( );
        }
        public IList<DateTimeTimeseriesObject> GetDateTimeTimeseriesCollectionByCatalogIsNullAndName( string name )
        {
            throw new NotImplementedException( );
        }
        // ---------------------------------------------------------------------
        // DoubleTimeseries queries
        // ---------------------------------------------------------------------
        public ComplexDoubleTimeseriesDataReader GetDoubleTimeseriesByIdDataReader( Guid id )
        {
            const string sql = ComplexDoubleTimeseriesDataReader.BaseQuery + "WHERE " + ComplexDoubleTimeseriesDataReader.ViewAliasName + ".[Id] = @id"; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                sqlCommandParameters.AddGuid( "@id", id );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var complexDoubleTimeseriesDataReader = new ComplexDoubleTimeseriesDataReader( _loggerFactory, sqlDataReader );
                return complexDoubleTimeseriesDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public DoubleTimeseriesObject? GetDoubleTimeseriesById( Guid id )
        {
            var complexDoubleTimeseriesDataReader = GetDoubleTimeseriesByIdDataReader( id );
            using ( complexDoubleTimeseriesDataReader )
            {
                if ( complexDoubleTimeseriesDataReader.Read( ) )
                {
                    var result = complexDoubleTimeseriesDataReader.GetDataObject( );
                    return result;
                }
            }
            return null;
        }

        public void GetDoubleTimeseriesById( Guid id, Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var complexDoubleTimeseriesDataReader = GetDoubleTimeseriesByIdDataReader( id );
                using ( complexDoubleTimeseriesDataReader )
                {
                    if ( complexDoubleTimeseriesDataReader.Read( ) )
                    {
                        destinationWriter.Write( true );
                        complexDoubleTimeseriesDataReader.WriteTo( destinationWriter );
                    }
                    else
                    {
                        destinationWriter.Write( false );
                    }
                }
            }
        }

        public ComplexDoubleTimeseriesDataReader GetDoubleTimeseriesCollectionDataReader( )
        {
            const string sql = ComplexDoubleTimeseriesDataReader.BaseQuery; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var complexDoubleTimeseriesDataReader = new ComplexDoubleTimeseriesDataReader( _loggerFactory, sqlDataReader );
                return complexDoubleTimeseriesDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public IList<DoubleTimeseriesObject> GetDoubleTimeseriesCollection( )
        {
            var result = new List<DoubleTimeseriesObject>( );
            var complexDoubleTimeseriesDataReader = GetDoubleTimeseriesCollectionDataReader( );
            using ( complexDoubleTimeseriesDataReader )
            {
                while ( complexDoubleTimeseriesDataReader.Read( ) )
                {
                    var data = complexDoubleTimeseriesDataReader.GetDataObject( );
                    result.Add( data );
                }
            }
            return result;
        }

        public void GetDoubleTimeseriesCollection( Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var complexDoubleTimeseriesDataReader = GetDoubleTimeseriesCollectionDataReader( );
                using ( complexDoubleTimeseriesDataReader )
                {
                    complexDoubleTimeseriesDataReader.WriteResultSetTo( destinationWriter );
                }
            }
        }

        public ComplexDoubleTimeseriesDataReader GetDoubleTimeseriesCollectionByCatalogDataReader( Guid? catalog )
        {
            const string sql = ComplexDoubleTimeseriesDataReader.BaseQuery + " WHERE " +
                    ComplexDoubleTimeseriesDataReader.ViewAliasName + ".[Catalog] = @catalog " +
                    " ORDER BY " + ComplexDoubleTimeseriesDataReader.ViewAliasName + ".[Catalog]," +ComplexDoubleTimeseriesDataReader.ViewAliasName + ".[Name]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var catalogParameter = sqlCommandParameters.AddReference( "@catalog", catalog );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var complexDoubleTimeseriesDataReader = new ComplexDoubleTimeseriesDataReader( _loggerFactory, sqlDataReader );
                return complexDoubleTimeseriesDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<DoubleTimeseriesObject> GetDoubleTimeseriesCollectionByCatalog( Guid? catalog )
        {
            throw new NotImplementedException( );
        }
        public IList<DoubleTimeseriesObject> GetDoubleTimeseriesCollectionByCatalogIsNull(  )
        {
            throw new NotImplementedException( );
        }
        public ComplexDoubleTimeseriesDataReader GetDoubleTimeseriesByCatalogAndNameDataReader( Guid? catalog, string name )
        {
            const string sql = ComplexDoubleTimeseriesDataReader.BaseQuery + " WHERE " +
                    ComplexDoubleTimeseriesDataReader.ViewAliasName + ".[Catalog] = @catalog AND " +
                    ComplexDoubleTimeseriesDataReader.ViewAliasName + ".[Name] = @name " +
                    " ORDER BY " + ComplexDoubleTimeseriesDataReader.ViewAliasName + ".[Catalog]," +ComplexDoubleTimeseriesDataReader.ViewAliasName + ".[Name]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var catalogParameter = sqlCommandParameters.AddReference( "@catalog", catalog );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@name", name, 127 );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var complexDoubleTimeseriesDataReader = new ComplexDoubleTimeseriesDataReader( _loggerFactory, sqlDataReader );
                return complexDoubleTimeseriesDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public DoubleTimeseriesObject? GetDoubleTimeseriesByCatalogAndName( Guid? catalog, string name )
        {
            throw new NotImplementedException( );
        }
        public IList<DoubleTimeseriesObject> GetDoubleTimeseriesCollectionByCatalogIsNullAndName( string name )
        {
            throw new NotImplementedException( );
        }
        // ---------------------------------------------------------------------
        // GNSSAltitudeTimeseries queries
        // ---------------------------------------------------------------------
        public SimpleGNSSAltitudeTimeseriesDataReader GetGNSSAltitudeTimeseriesByIdDataReader( Guid id )
        {
            const string sql = SimpleGNSSAltitudeTimeseriesDataReader.BaseQuery + "WHERE " + SimpleGNSSAltitudeTimeseriesDataReader.ViewAliasName + ".[Id] = @id"; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                sqlCommandParameters.AddGuid( "@id", id );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleGNSSAltitudeTimeseriesDataReader = new SimpleGNSSAltitudeTimeseriesDataReader( _loggerFactory, sqlDataReader );
                return simpleGNSSAltitudeTimeseriesDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public GNSSAltitudeTimeseriesObject? GetGNSSAltitudeTimeseriesById( Guid id )
        {
            var simpleGNSSAltitudeTimeseriesDataReader = GetGNSSAltitudeTimeseriesByIdDataReader( id );
            using ( simpleGNSSAltitudeTimeseriesDataReader )
            {
                if ( simpleGNSSAltitudeTimeseriesDataReader.Read( ) )
                {
                    var result = simpleGNSSAltitudeTimeseriesDataReader.GetDataObject( );
                    return result;
                }
            }
            return null;
        }

        public void GetGNSSAltitudeTimeseriesById( Guid id, Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleGNSSAltitudeTimeseriesDataReader = GetGNSSAltitudeTimeseriesByIdDataReader( id );
                using ( simpleGNSSAltitudeTimeseriesDataReader )
                {
                    if ( simpleGNSSAltitudeTimeseriesDataReader.Read( ) )
                    {
                        destinationWriter.Write( true );
                        simpleGNSSAltitudeTimeseriesDataReader.WriteTo( destinationWriter );
                    }
                    else
                    {
                        destinationWriter.Write( false );
                    }
                }
            }
        }

        public SimpleGNSSAltitudeTimeseriesDataReader GetGNSSAltitudeTimeseriesCollectionDataReader( )
        {
            const string sql = SimpleGNSSAltitudeTimeseriesDataReader.BaseQuery; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleGNSSAltitudeTimeseriesDataReader = new SimpleGNSSAltitudeTimeseriesDataReader( _loggerFactory, sqlDataReader );
                return simpleGNSSAltitudeTimeseriesDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public IList<GNSSAltitudeTimeseriesObject> GetGNSSAltitudeTimeseriesCollection( )
        {
            var result = new List<GNSSAltitudeTimeseriesObject>( );
            var simpleGNSSAltitudeTimeseriesDataReader = GetGNSSAltitudeTimeseriesCollectionDataReader( );
            using ( simpleGNSSAltitudeTimeseriesDataReader )
            {
                while ( simpleGNSSAltitudeTimeseriesDataReader.Read( ) )
                {
                    var data = simpleGNSSAltitudeTimeseriesDataReader.GetDataObject( );
                    result.Add( data );
                }
            }
            return result;
        }

        public void GetGNSSAltitudeTimeseriesCollection( Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleGNSSAltitudeTimeseriesDataReader = GetGNSSAltitudeTimeseriesCollectionDataReader( );
                using ( simpleGNSSAltitudeTimeseriesDataReader )
                {
                    simpleGNSSAltitudeTimeseriesDataReader.WriteResultSetTo( destinationWriter );
                }
            }
        }

        public SimpleGNSSAltitudeTimeseriesDataReader GetGNSSAltitudeTimeseriesCollectionByCatalogDataReader( Guid? catalog )
        {
            const string sql = SimpleGNSSAltitudeTimeseriesDataReader.BaseQuery + " WHERE " +
                    SimpleGNSSAltitudeTimeseriesDataReader.ViewAliasName + ".[Catalog] = @catalog " +
                    " ORDER BY " + SimpleGNSSAltitudeTimeseriesDataReader.ViewAliasName + ".[Catalog]," +SimpleGNSSAltitudeTimeseriesDataReader.ViewAliasName + ".[Name]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var catalogParameter = sqlCommandParameters.AddReference( "@catalog", catalog );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleGNSSAltitudeTimeseriesDataReader = new SimpleGNSSAltitudeTimeseriesDataReader( _loggerFactory, sqlDataReader );
                return simpleGNSSAltitudeTimeseriesDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<GNSSAltitudeTimeseriesObject> GetGNSSAltitudeTimeseriesCollectionByCatalog( Guid? catalog )
        {
            throw new NotImplementedException( );
        }
        public IList<GNSSAltitudeTimeseriesObject> GetGNSSAltitudeTimeseriesCollectionByCatalogIsNull(  )
        {
            throw new NotImplementedException( );
        }
        public SimpleGNSSAltitudeTimeseriesDataReader GetGNSSAltitudeTimeseriesByCatalogAndNameDataReader( Guid? catalog, string name )
        {
            const string sql = SimpleGNSSAltitudeTimeseriesDataReader.BaseQuery + " WHERE " +
                    SimpleGNSSAltitudeTimeseriesDataReader.ViewAliasName + ".[Catalog] = @catalog AND " +
                    SimpleGNSSAltitudeTimeseriesDataReader.ViewAliasName + ".[Name] = @name " +
                    " ORDER BY " + SimpleGNSSAltitudeTimeseriesDataReader.ViewAliasName + ".[Catalog]," +SimpleGNSSAltitudeTimeseriesDataReader.ViewAliasName + ".[Name]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var catalogParameter = sqlCommandParameters.AddReference( "@catalog", catalog );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@name", name, 127 );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleGNSSAltitudeTimeseriesDataReader = new SimpleGNSSAltitudeTimeseriesDataReader( _loggerFactory, sqlDataReader );
                return simpleGNSSAltitudeTimeseriesDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public GNSSAltitudeTimeseriesObject? GetGNSSAltitudeTimeseriesByCatalogAndName( Guid? catalog, string name )
        {
            throw new NotImplementedException( );
        }
        public IList<GNSSAltitudeTimeseriesObject> GetGNSSAltitudeTimeseriesCollectionByCatalogIsNullAndName( string name )
        {
            throw new NotImplementedException( );
        }
        // ---------------------------------------------------------------------
        // GNSSLatitudeTimeseries queries
        // ---------------------------------------------------------------------
        public SimpleGNSSLatitudeTimeseriesDataReader GetGNSSLatitudeTimeseriesByIdDataReader( Guid id )
        {
            const string sql = SimpleGNSSLatitudeTimeseriesDataReader.BaseQuery + "WHERE " + SimpleGNSSLatitudeTimeseriesDataReader.ViewAliasName + ".[Id] = @id"; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                sqlCommandParameters.AddGuid( "@id", id );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleGNSSLatitudeTimeseriesDataReader = new SimpleGNSSLatitudeTimeseriesDataReader( _loggerFactory, sqlDataReader );
                return simpleGNSSLatitudeTimeseriesDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public GNSSLatitudeTimeseriesObject? GetGNSSLatitudeTimeseriesById( Guid id )
        {
            var simpleGNSSLatitudeTimeseriesDataReader = GetGNSSLatitudeTimeseriesByIdDataReader( id );
            using ( simpleGNSSLatitudeTimeseriesDataReader )
            {
                if ( simpleGNSSLatitudeTimeseriesDataReader.Read( ) )
                {
                    var result = simpleGNSSLatitudeTimeseriesDataReader.GetDataObject( );
                    return result;
                }
            }
            return null;
        }

        public void GetGNSSLatitudeTimeseriesById( Guid id, Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleGNSSLatitudeTimeseriesDataReader = GetGNSSLatitudeTimeseriesByIdDataReader( id );
                using ( simpleGNSSLatitudeTimeseriesDataReader )
                {
                    if ( simpleGNSSLatitudeTimeseriesDataReader.Read( ) )
                    {
                        destinationWriter.Write( true );
                        simpleGNSSLatitudeTimeseriesDataReader.WriteTo( destinationWriter );
                    }
                    else
                    {
                        destinationWriter.Write( false );
                    }
                }
            }
        }

        public SimpleGNSSLatitudeTimeseriesDataReader GetGNSSLatitudeTimeseriesCollectionDataReader( )
        {
            const string sql = SimpleGNSSLatitudeTimeseriesDataReader.BaseQuery; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleGNSSLatitudeTimeseriesDataReader = new SimpleGNSSLatitudeTimeseriesDataReader( _loggerFactory, sqlDataReader );
                return simpleGNSSLatitudeTimeseriesDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public IList<GNSSLatitudeTimeseriesObject> GetGNSSLatitudeTimeseriesCollection( )
        {
            var result = new List<GNSSLatitudeTimeseriesObject>( );
            var simpleGNSSLatitudeTimeseriesDataReader = GetGNSSLatitudeTimeseriesCollectionDataReader( );
            using ( simpleGNSSLatitudeTimeseriesDataReader )
            {
                while ( simpleGNSSLatitudeTimeseriesDataReader.Read( ) )
                {
                    var data = simpleGNSSLatitudeTimeseriesDataReader.GetDataObject( );
                    result.Add( data );
                }
            }
            return result;
        }

        public void GetGNSSLatitudeTimeseriesCollection( Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleGNSSLatitudeTimeseriesDataReader = GetGNSSLatitudeTimeseriesCollectionDataReader( );
                using ( simpleGNSSLatitudeTimeseriesDataReader )
                {
                    simpleGNSSLatitudeTimeseriesDataReader.WriteResultSetTo( destinationWriter );
                }
            }
        }

        public SimpleGNSSLatitudeTimeseriesDataReader GetGNSSLatitudeTimeseriesCollectionByCatalogDataReader( Guid? catalog )
        {
            const string sql = SimpleGNSSLatitudeTimeseriesDataReader.BaseQuery + " WHERE " +
                    SimpleGNSSLatitudeTimeseriesDataReader.ViewAliasName + ".[Catalog] = @catalog " +
                    " ORDER BY " + SimpleGNSSLatitudeTimeseriesDataReader.ViewAliasName + ".[Catalog]," +SimpleGNSSLatitudeTimeseriesDataReader.ViewAliasName + ".[Name]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var catalogParameter = sqlCommandParameters.AddReference( "@catalog", catalog );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleGNSSLatitudeTimeseriesDataReader = new SimpleGNSSLatitudeTimeseriesDataReader( _loggerFactory, sqlDataReader );
                return simpleGNSSLatitudeTimeseriesDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<GNSSLatitudeTimeseriesObject> GetGNSSLatitudeTimeseriesCollectionByCatalog( Guid? catalog )
        {
            throw new NotImplementedException( );
        }
        public IList<GNSSLatitudeTimeseriesObject> GetGNSSLatitudeTimeseriesCollectionByCatalogIsNull(  )
        {
            throw new NotImplementedException( );
        }
        public SimpleGNSSLatitudeTimeseriesDataReader GetGNSSLatitudeTimeseriesByCatalogAndNameDataReader( Guid? catalog, string name )
        {
            const string sql = SimpleGNSSLatitudeTimeseriesDataReader.BaseQuery + " WHERE " +
                    SimpleGNSSLatitudeTimeseriesDataReader.ViewAliasName + ".[Catalog] = @catalog AND " +
                    SimpleGNSSLatitudeTimeseriesDataReader.ViewAliasName + ".[Name] = @name " +
                    " ORDER BY " + SimpleGNSSLatitudeTimeseriesDataReader.ViewAliasName + ".[Catalog]," +SimpleGNSSLatitudeTimeseriesDataReader.ViewAliasName + ".[Name]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var catalogParameter = sqlCommandParameters.AddReference( "@catalog", catalog );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@name", name, 127 );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleGNSSLatitudeTimeseriesDataReader = new SimpleGNSSLatitudeTimeseriesDataReader( _loggerFactory, sqlDataReader );
                return simpleGNSSLatitudeTimeseriesDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public GNSSLatitudeTimeseriesObject? GetGNSSLatitudeTimeseriesByCatalogAndName( Guid? catalog, string name )
        {
            throw new NotImplementedException( );
        }
        public IList<GNSSLatitudeTimeseriesObject> GetGNSSLatitudeTimeseriesCollectionByCatalogIsNullAndName( string name )
        {
            throw new NotImplementedException( );
        }
        // ---------------------------------------------------------------------
        // GNSSLongitudeTimeseries queries
        // ---------------------------------------------------------------------
        public SimpleGNSSLongitudeTimeseriesDataReader GetGNSSLongitudeTimeseriesByIdDataReader( Guid id )
        {
            const string sql = SimpleGNSSLongitudeTimeseriesDataReader.BaseQuery + "WHERE " + SimpleGNSSLongitudeTimeseriesDataReader.ViewAliasName + ".[Id] = @id"; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                sqlCommandParameters.AddGuid( "@id", id );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleGNSSLongitudeTimeseriesDataReader = new SimpleGNSSLongitudeTimeseriesDataReader( _loggerFactory, sqlDataReader );
                return simpleGNSSLongitudeTimeseriesDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public GNSSLongitudeTimeseriesObject? GetGNSSLongitudeTimeseriesById( Guid id )
        {
            var simpleGNSSLongitudeTimeseriesDataReader = GetGNSSLongitudeTimeseriesByIdDataReader( id );
            using ( simpleGNSSLongitudeTimeseriesDataReader )
            {
                if ( simpleGNSSLongitudeTimeseriesDataReader.Read( ) )
                {
                    var result = simpleGNSSLongitudeTimeseriesDataReader.GetDataObject( );
                    return result;
                }
            }
            return null;
        }

        public void GetGNSSLongitudeTimeseriesById( Guid id, Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleGNSSLongitudeTimeseriesDataReader = GetGNSSLongitudeTimeseriesByIdDataReader( id );
                using ( simpleGNSSLongitudeTimeseriesDataReader )
                {
                    if ( simpleGNSSLongitudeTimeseriesDataReader.Read( ) )
                    {
                        destinationWriter.Write( true );
                        simpleGNSSLongitudeTimeseriesDataReader.WriteTo( destinationWriter );
                    }
                    else
                    {
                        destinationWriter.Write( false );
                    }
                }
            }
        }

        public SimpleGNSSLongitudeTimeseriesDataReader GetGNSSLongitudeTimeseriesCollectionDataReader( )
        {
            const string sql = SimpleGNSSLongitudeTimeseriesDataReader.BaseQuery; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleGNSSLongitudeTimeseriesDataReader = new SimpleGNSSLongitudeTimeseriesDataReader( _loggerFactory, sqlDataReader );
                return simpleGNSSLongitudeTimeseriesDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public IList<GNSSLongitudeTimeseriesObject> GetGNSSLongitudeTimeseriesCollection( )
        {
            var result = new List<GNSSLongitudeTimeseriesObject>( );
            var simpleGNSSLongitudeTimeseriesDataReader = GetGNSSLongitudeTimeseriesCollectionDataReader( );
            using ( simpleGNSSLongitudeTimeseriesDataReader )
            {
                while ( simpleGNSSLongitudeTimeseriesDataReader.Read( ) )
                {
                    var data = simpleGNSSLongitudeTimeseriesDataReader.GetDataObject( );
                    result.Add( data );
                }
            }
            return result;
        }

        public void GetGNSSLongitudeTimeseriesCollection( Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleGNSSLongitudeTimeseriesDataReader = GetGNSSLongitudeTimeseriesCollectionDataReader( );
                using ( simpleGNSSLongitudeTimeseriesDataReader )
                {
                    simpleGNSSLongitudeTimeseriesDataReader.WriteResultSetTo( destinationWriter );
                }
            }
        }

        public SimpleGNSSLongitudeTimeseriesDataReader GetGNSSLongitudeTimeseriesCollectionByCatalogDataReader( Guid? catalog )
        {
            const string sql = SimpleGNSSLongitudeTimeseriesDataReader.BaseQuery + " WHERE " +
                    SimpleGNSSLongitudeTimeseriesDataReader.ViewAliasName + ".[Catalog] = @catalog " +
                    " ORDER BY " + SimpleGNSSLongitudeTimeseriesDataReader.ViewAliasName + ".[Catalog]," +SimpleGNSSLongitudeTimeseriesDataReader.ViewAliasName + ".[Name]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var catalogParameter = sqlCommandParameters.AddReference( "@catalog", catalog );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleGNSSLongitudeTimeseriesDataReader = new SimpleGNSSLongitudeTimeseriesDataReader( _loggerFactory, sqlDataReader );
                return simpleGNSSLongitudeTimeseriesDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<GNSSLongitudeTimeseriesObject> GetGNSSLongitudeTimeseriesCollectionByCatalog( Guid? catalog )
        {
            throw new NotImplementedException( );
        }
        public IList<GNSSLongitudeTimeseriesObject> GetGNSSLongitudeTimeseriesCollectionByCatalogIsNull(  )
        {
            throw new NotImplementedException( );
        }
        public SimpleGNSSLongitudeTimeseriesDataReader GetGNSSLongitudeTimeseriesByCatalogAndNameDataReader( Guid? catalog, string name )
        {
            const string sql = SimpleGNSSLongitudeTimeseriesDataReader.BaseQuery + " WHERE " +
                    SimpleGNSSLongitudeTimeseriesDataReader.ViewAliasName + ".[Catalog] = @catalog AND " +
                    SimpleGNSSLongitudeTimeseriesDataReader.ViewAliasName + ".[Name] = @name " +
                    " ORDER BY " + SimpleGNSSLongitudeTimeseriesDataReader.ViewAliasName + ".[Catalog]," +SimpleGNSSLongitudeTimeseriesDataReader.ViewAliasName + ".[Name]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var catalogParameter = sqlCommandParameters.AddReference( "@catalog", catalog );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@name", name, 127 );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleGNSSLongitudeTimeseriesDataReader = new SimpleGNSSLongitudeTimeseriesDataReader( _loggerFactory, sqlDataReader );
                return simpleGNSSLongitudeTimeseriesDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public GNSSLongitudeTimeseriesObject? GetGNSSLongitudeTimeseriesByCatalogAndName( Guid? catalog, string name )
        {
            throw new NotImplementedException( );
        }
        public IList<GNSSLongitudeTimeseriesObject> GetGNSSLongitudeTimeseriesCollectionByCatalogIsNullAndName( string name )
        {
            throw new NotImplementedException( );
        }
        // ---------------------------------------------------------------------
        // GyroCourseTimeseries queries
        // ---------------------------------------------------------------------
        public SimpleGyroCourseTimeseriesDataReader GetGyroCourseTimeseriesByIdDataReader( Guid id )
        {
            const string sql = SimpleGyroCourseTimeseriesDataReader.BaseQuery + "WHERE " + SimpleGyroCourseTimeseriesDataReader.ViewAliasName + ".[Id] = @id"; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                sqlCommandParameters.AddGuid( "@id", id );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleGyroCourseTimeseriesDataReader = new SimpleGyroCourseTimeseriesDataReader( _loggerFactory, sqlDataReader );
                return simpleGyroCourseTimeseriesDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public GyroCourseTimeseriesObject? GetGyroCourseTimeseriesById( Guid id )
        {
            var simpleGyroCourseTimeseriesDataReader = GetGyroCourseTimeseriesByIdDataReader( id );
            using ( simpleGyroCourseTimeseriesDataReader )
            {
                if ( simpleGyroCourseTimeseriesDataReader.Read( ) )
                {
                    var result = simpleGyroCourseTimeseriesDataReader.GetDataObject( );
                    return result;
                }
            }
            return null;
        }

        public void GetGyroCourseTimeseriesById( Guid id, Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleGyroCourseTimeseriesDataReader = GetGyroCourseTimeseriesByIdDataReader( id );
                using ( simpleGyroCourseTimeseriesDataReader )
                {
                    if ( simpleGyroCourseTimeseriesDataReader.Read( ) )
                    {
                        destinationWriter.Write( true );
                        simpleGyroCourseTimeseriesDataReader.WriteTo( destinationWriter );
                    }
                    else
                    {
                        destinationWriter.Write( false );
                    }
                }
            }
        }

        public SimpleGyroCourseTimeseriesDataReader GetGyroCourseTimeseriesCollectionDataReader( )
        {
            const string sql = SimpleGyroCourseTimeseriesDataReader.BaseQuery; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleGyroCourseTimeseriesDataReader = new SimpleGyroCourseTimeseriesDataReader( _loggerFactory, sqlDataReader );
                return simpleGyroCourseTimeseriesDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public IList<GyroCourseTimeseriesObject> GetGyroCourseTimeseriesCollection( )
        {
            var result = new List<GyroCourseTimeseriesObject>( );
            var simpleGyroCourseTimeseriesDataReader = GetGyroCourseTimeseriesCollectionDataReader( );
            using ( simpleGyroCourseTimeseriesDataReader )
            {
                while ( simpleGyroCourseTimeseriesDataReader.Read( ) )
                {
                    var data = simpleGyroCourseTimeseriesDataReader.GetDataObject( );
                    result.Add( data );
                }
            }
            return result;
        }

        public void GetGyroCourseTimeseriesCollection( Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleGyroCourseTimeseriesDataReader = GetGyroCourseTimeseriesCollectionDataReader( );
                using ( simpleGyroCourseTimeseriesDataReader )
                {
                    simpleGyroCourseTimeseriesDataReader.WriteResultSetTo( destinationWriter );
                }
            }
        }

        public SimpleGyroCourseTimeseriesDataReader GetGyroCourseTimeseriesCollectionByCatalogDataReader( Guid? catalog )
        {
            const string sql = SimpleGyroCourseTimeseriesDataReader.BaseQuery + " WHERE " +
                    SimpleGyroCourseTimeseriesDataReader.ViewAliasName + ".[Catalog] = @catalog " +
                    " ORDER BY " + SimpleGyroCourseTimeseriesDataReader.ViewAliasName + ".[Catalog]," +SimpleGyroCourseTimeseriesDataReader.ViewAliasName + ".[Name]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var catalogParameter = sqlCommandParameters.AddReference( "@catalog", catalog );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleGyroCourseTimeseriesDataReader = new SimpleGyroCourseTimeseriesDataReader( _loggerFactory, sqlDataReader );
                return simpleGyroCourseTimeseriesDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<GyroCourseTimeseriesObject> GetGyroCourseTimeseriesCollectionByCatalog( Guid? catalog )
        {
            throw new NotImplementedException( );
        }
        public IList<GyroCourseTimeseriesObject> GetGyroCourseTimeseriesCollectionByCatalogIsNull(  )
        {
            throw new NotImplementedException( );
        }
        public SimpleGyroCourseTimeseriesDataReader GetGyroCourseTimeseriesByCatalogAndNameDataReader( Guid? catalog, string name )
        {
            const string sql = SimpleGyroCourseTimeseriesDataReader.BaseQuery + " WHERE " +
                    SimpleGyroCourseTimeseriesDataReader.ViewAliasName + ".[Catalog] = @catalog AND " +
                    SimpleGyroCourseTimeseriesDataReader.ViewAliasName + ".[Name] = @name " +
                    " ORDER BY " + SimpleGyroCourseTimeseriesDataReader.ViewAliasName + ".[Catalog]," +SimpleGyroCourseTimeseriesDataReader.ViewAliasName + ".[Name]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var catalogParameter = sqlCommandParameters.AddReference( "@catalog", catalog );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@name", name, 127 );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleGyroCourseTimeseriesDataReader = new SimpleGyroCourseTimeseriesDataReader( _loggerFactory, sqlDataReader );
                return simpleGyroCourseTimeseriesDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public GyroCourseTimeseriesObject? GetGyroCourseTimeseriesByCatalogAndName( Guid? catalog, string name )
        {
            throw new NotImplementedException( );
        }
        public IList<GyroCourseTimeseriesObject> GetGyroCourseTimeseriesCollectionByCatalogIsNullAndName( string name )
        {
            throw new NotImplementedException( );
        }
        public SimpleGyroCourseTimeseriesDataReader GetGyroCourseTimeseriesByGyroDeviceDataReader( Guid gyroDevice )
        {
            const string sql = SimpleGyroCourseTimeseriesDataReader.BaseQuery + " WHERE " +
                    SimpleGyroCourseTimeseriesDataReader.ViewAliasName + ".[GyroDevice] = @gyroDevice " +
                    " ORDER BY " + SimpleGyroCourseTimeseriesDataReader.ViewAliasName + ".[GyroDevice]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var gyroDeviceParameter = sqlCommandParameters.AddReference( "@gyroDevice", gyroDevice );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleGyroCourseTimeseriesDataReader = new SimpleGyroCourseTimeseriesDataReader( _loggerFactory, sqlDataReader );
                return simpleGyroCourseTimeseriesDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public GyroCourseTimeseriesObject? GetGyroCourseTimeseriesByGyroDevice( Guid gyroDevice )
        {
            throw new NotImplementedException( );
        }
        // ---------------------------------------------------------------------
        // GyroHeadingMagneticNorthTimeseries queries
        // ---------------------------------------------------------------------
        public SimpleGyroHeadingMagneticNorthTimeseriesDataReader GetGyroHeadingMagneticNorthTimeseriesByIdDataReader( Guid id )
        {
            const string sql = SimpleGyroHeadingMagneticNorthTimeseriesDataReader.BaseQuery + "WHERE " + SimpleGyroHeadingMagneticNorthTimeseriesDataReader.ViewAliasName + ".[Id] = @id"; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                sqlCommandParameters.AddGuid( "@id", id );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleGyroHeadingMagneticNorthTimeseriesDataReader = new SimpleGyroHeadingMagneticNorthTimeseriesDataReader( _loggerFactory, sqlDataReader );
                return simpleGyroHeadingMagneticNorthTimeseriesDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public GyroHeadingMagneticNorthTimeseriesObject? GetGyroHeadingMagneticNorthTimeseriesById( Guid id )
        {
            var simpleGyroHeadingMagneticNorthTimeseriesDataReader = GetGyroHeadingMagneticNorthTimeseriesByIdDataReader( id );
            using ( simpleGyroHeadingMagneticNorthTimeseriesDataReader )
            {
                if ( simpleGyroHeadingMagneticNorthTimeseriesDataReader.Read( ) )
                {
                    var result = simpleGyroHeadingMagneticNorthTimeseriesDataReader.GetDataObject( );
                    return result;
                }
            }
            return null;
        }

        public void GetGyroHeadingMagneticNorthTimeseriesById( Guid id, Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleGyroHeadingMagneticNorthTimeseriesDataReader = GetGyroHeadingMagneticNorthTimeseriesByIdDataReader( id );
                using ( simpleGyroHeadingMagneticNorthTimeseriesDataReader )
                {
                    if ( simpleGyroHeadingMagneticNorthTimeseriesDataReader.Read( ) )
                    {
                        destinationWriter.Write( true );
                        simpleGyroHeadingMagneticNorthTimeseriesDataReader.WriteTo( destinationWriter );
                    }
                    else
                    {
                        destinationWriter.Write( false );
                    }
                }
            }
        }

        public SimpleGyroHeadingMagneticNorthTimeseriesDataReader GetGyroHeadingMagneticNorthTimeseriesCollectionDataReader( )
        {
            const string sql = SimpleGyroHeadingMagneticNorthTimeseriesDataReader.BaseQuery; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleGyroHeadingMagneticNorthTimeseriesDataReader = new SimpleGyroHeadingMagneticNorthTimeseriesDataReader( _loggerFactory, sqlDataReader );
                return simpleGyroHeadingMagneticNorthTimeseriesDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public IList<GyroHeadingMagneticNorthTimeseriesObject> GetGyroHeadingMagneticNorthTimeseriesCollection( )
        {
            var result = new List<GyroHeadingMagneticNorthTimeseriesObject>( );
            var simpleGyroHeadingMagneticNorthTimeseriesDataReader = GetGyroHeadingMagneticNorthTimeseriesCollectionDataReader( );
            using ( simpleGyroHeadingMagneticNorthTimeseriesDataReader )
            {
                while ( simpleGyroHeadingMagneticNorthTimeseriesDataReader.Read( ) )
                {
                    var data = simpleGyroHeadingMagneticNorthTimeseriesDataReader.GetDataObject( );
                    result.Add( data );
                }
            }
            return result;
        }

        public void GetGyroHeadingMagneticNorthTimeseriesCollection( Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleGyroHeadingMagneticNorthTimeseriesDataReader = GetGyroHeadingMagneticNorthTimeseriesCollectionDataReader( );
                using ( simpleGyroHeadingMagneticNorthTimeseriesDataReader )
                {
                    simpleGyroHeadingMagneticNorthTimeseriesDataReader.WriteResultSetTo( destinationWriter );
                }
            }
        }

        public SimpleGyroHeadingMagneticNorthTimeseriesDataReader GetGyroHeadingMagneticNorthTimeseriesCollectionByCatalogDataReader( Guid? catalog )
        {
            const string sql = SimpleGyroHeadingMagneticNorthTimeseriesDataReader.BaseQuery + " WHERE " +
                    SimpleGyroHeadingMagneticNorthTimeseriesDataReader.ViewAliasName + ".[Catalog] = @catalog " +
                    " ORDER BY " + SimpleGyroHeadingMagneticNorthTimeseriesDataReader.ViewAliasName + ".[Catalog]," +SimpleGyroHeadingMagneticNorthTimeseriesDataReader.ViewAliasName + ".[Name]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var catalogParameter = sqlCommandParameters.AddReference( "@catalog", catalog );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleGyroHeadingMagneticNorthTimeseriesDataReader = new SimpleGyroHeadingMagneticNorthTimeseriesDataReader( _loggerFactory, sqlDataReader );
                return simpleGyroHeadingMagneticNorthTimeseriesDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<GyroHeadingMagneticNorthTimeseriesObject> GetGyroHeadingMagneticNorthTimeseriesCollectionByCatalog( Guid? catalog )
        {
            throw new NotImplementedException( );
        }
        public IList<GyroHeadingMagneticNorthTimeseriesObject> GetGyroHeadingMagneticNorthTimeseriesCollectionByCatalogIsNull(  )
        {
            throw new NotImplementedException( );
        }
        public SimpleGyroHeadingMagneticNorthTimeseriesDataReader GetGyroHeadingMagneticNorthTimeseriesByCatalogAndNameDataReader( Guid? catalog, string name )
        {
            const string sql = SimpleGyroHeadingMagneticNorthTimeseriesDataReader.BaseQuery + " WHERE " +
                    SimpleGyroHeadingMagneticNorthTimeseriesDataReader.ViewAliasName + ".[Catalog] = @catalog AND " +
                    SimpleGyroHeadingMagneticNorthTimeseriesDataReader.ViewAliasName + ".[Name] = @name " +
                    " ORDER BY " + SimpleGyroHeadingMagneticNorthTimeseriesDataReader.ViewAliasName + ".[Catalog]," +SimpleGyroHeadingMagneticNorthTimeseriesDataReader.ViewAliasName + ".[Name]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var catalogParameter = sqlCommandParameters.AddReference( "@catalog", catalog );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@name", name, 127 );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleGyroHeadingMagneticNorthTimeseriesDataReader = new SimpleGyroHeadingMagneticNorthTimeseriesDataReader( _loggerFactory, sqlDataReader );
                return simpleGyroHeadingMagneticNorthTimeseriesDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public GyroHeadingMagneticNorthTimeseriesObject? GetGyroHeadingMagneticNorthTimeseriesByCatalogAndName( Guid? catalog, string name )
        {
            throw new NotImplementedException( );
        }
        public IList<GyroHeadingMagneticNorthTimeseriesObject> GetGyroHeadingMagneticNorthTimeseriesCollectionByCatalogIsNullAndName( string name )
        {
            throw new NotImplementedException( );
        }
        public SimpleGyroHeadingMagneticNorthTimeseriesDataReader GetGyroHeadingMagneticNorthTimeseriesByGyroDeviceDataReader( Guid gyroDevice )
        {
            const string sql = SimpleGyroHeadingMagneticNorthTimeseriesDataReader.BaseQuery + " WHERE " +
                    SimpleGyroHeadingMagneticNorthTimeseriesDataReader.ViewAliasName + ".[GyroDevice] = @gyroDevice " +
                    " ORDER BY " + SimpleGyroHeadingMagneticNorthTimeseriesDataReader.ViewAliasName + ".[GyroDevice]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var gyroDeviceParameter = sqlCommandParameters.AddReference( "@gyroDevice", gyroDevice );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleGyroHeadingMagneticNorthTimeseriesDataReader = new SimpleGyroHeadingMagneticNorthTimeseriesDataReader( _loggerFactory, sqlDataReader );
                return simpleGyroHeadingMagneticNorthTimeseriesDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public GyroHeadingMagneticNorthTimeseriesObject? GetGyroHeadingMagneticNorthTimeseriesByGyroDevice( Guid gyroDevice )
        {
            throw new NotImplementedException( );
        }
        // ---------------------------------------------------------------------
        // GyroHeadingTrueNorthTimeseries queries
        // ---------------------------------------------------------------------
        public SimpleGyroHeadingTrueNorthTimeseriesDataReader GetGyroHeadingTrueNorthTimeseriesByIdDataReader( Guid id )
        {
            const string sql = SimpleGyroHeadingTrueNorthTimeseriesDataReader.BaseQuery + "WHERE " + SimpleGyroHeadingTrueNorthTimeseriesDataReader.ViewAliasName + ".[Id] = @id"; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                sqlCommandParameters.AddGuid( "@id", id );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleGyroHeadingTrueNorthTimeseriesDataReader = new SimpleGyroHeadingTrueNorthTimeseriesDataReader( _loggerFactory, sqlDataReader );
                return simpleGyroHeadingTrueNorthTimeseriesDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public GyroHeadingTrueNorthTimeseriesObject? GetGyroHeadingTrueNorthTimeseriesById( Guid id )
        {
            var simpleGyroHeadingTrueNorthTimeseriesDataReader = GetGyroHeadingTrueNorthTimeseriesByIdDataReader( id );
            using ( simpleGyroHeadingTrueNorthTimeseriesDataReader )
            {
                if ( simpleGyroHeadingTrueNorthTimeseriesDataReader.Read( ) )
                {
                    var result = simpleGyroHeadingTrueNorthTimeseriesDataReader.GetDataObject( );
                    return result;
                }
            }
            return null;
        }

        public void GetGyroHeadingTrueNorthTimeseriesById( Guid id, Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleGyroHeadingTrueNorthTimeseriesDataReader = GetGyroHeadingTrueNorthTimeseriesByIdDataReader( id );
                using ( simpleGyroHeadingTrueNorthTimeseriesDataReader )
                {
                    if ( simpleGyroHeadingTrueNorthTimeseriesDataReader.Read( ) )
                    {
                        destinationWriter.Write( true );
                        simpleGyroHeadingTrueNorthTimeseriesDataReader.WriteTo( destinationWriter );
                    }
                    else
                    {
                        destinationWriter.Write( false );
                    }
                }
            }
        }

        public SimpleGyroHeadingTrueNorthTimeseriesDataReader GetGyroHeadingTrueNorthTimeseriesCollectionDataReader( )
        {
            const string sql = SimpleGyroHeadingTrueNorthTimeseriesDataReader.BaseQuery; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleGyroHeadingTrueNorthTimeseriesDataReader = new SimpleGyroHeadingTrueNorthTimeseriesDataReader( _loggerFactory, sqlDataReader );
                return simpleGyroHeadingTrueNorthTimeseriesDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public IList<GyroHeadingTrueNorthTimeseriesObject> GetGyroHeadingTrueNorthTimeseriesCollection( )
        {
            var result = new List<GyroHeadingTrueNorthTimeseriesObject>( );
            var simpleGyroHeadingTrueNorthTimeseriesDataReader = GetGyroHeadingTrueNorthTimeseriesCollectionDataReader( );
            using ( simpleGyroHeadingTrueNorthTimeseriesDataReader )
            {
                while ( simpleGyroHeadingTrueNorthTimeseriesDataReader.Read( ) )
                {
                    var data = simpleGyroHeadingTrueNorthTimeseriesDataReader.GetDataObject( );
                    result.Add( data );
                }
            }
            return result;
        }

        public void GetGyroHeadingTrueNorthTimeseriesCollection( Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleGyroHeadingTrueNorthTimeseriesDataReader = GetGyroHeadingTrueNorthTimeseriesCollectionDataReader( );
                using ( simpleGyroHeadingTrueNorthTimeseriesDataReader )
                {
                    simpleGyroHeadingTrueNorthTimeseriesDataReader.WriteResultSetTo( destinationWriter );
                }
            }
        }

        public SimpleGyroHeadingTrueNorthTimeseriesDataReader GetGyroHeadingTrueNorthTimeseriesCollectionByCatalogDataReader( Guid? catalog )
        {
            const string sql = SimpleGyroHeadingTrueNorthTimeseriesDataReader.BaseQuery + " WHERE " +
                    SimpleGyroHeadingTrueNorthTimeseriesDataReader.ViewAliasName + ".[Catalog] = @catalog " +
                    " ORDER BY " + SimpleGyroHeadingTrueNorthTimeseriesDataReader.ViewAliasName + ".[Catalog]," +SimpleGyroHeadingTrueNorthTimeseriesDataReader.ViewAliasName + ".[Name]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var catalogParameter = sqlCommandParameters.AddReference( "@catalog", catalog );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleGyroHeadingTrueNorthTimeseriesDataReader = new SimpleGyroHeadingTrueNorthTimeseriesDataReader( _loggerFactory, sqlDataReader );
                return simpleGyroHeadingTrueNorthTimeseriesDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<GyroHeadingTrueNorthTimeseriesObject> GetGyroHeadingTrueNorthTimeseriesCollectionByCatalog( Guid? catalog )
        {
            throw new NotImplementedException( );
        }
        public IList<GyroHeadingTrueNorthTimeseriesObject> GetGyroHeadingTrueNorthTimeseriesCollectionByCatalogIsNull(  )
        {
            throw new NotImplementedException( );
        }
        public SimpleGyroHeadingTrueNorthTimeseriesDataReader GetGyroHeadingTrueNorthTimeseriesByCatalogAndNameDataReader( Guid? catalog, string name )
        {
            const string sql = SimpleGyroHeadingTrueNorthTimeseriesDataReader.BaseQuery + " WHERE " +
                    SimpleGyroHeadingTrueNorthTimeseriesDataReader.ViewAliasName + ".[Catalog] = @catalog AND " +
                    SimpleGyroHeadingTrueNorthTimeseriesDataReader.ViewAliasName + ".[Name] = @name " +
                    " ORDER BY " + SimpleGyroHeadingTrueNorthTimeseriesDataReader.ViewAliasName + ".[Catalog]," +SimpleGyroHeadingTrueNorthTimeseriesDataReader.ViewAliasName + ".[Name]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var catalogParameter = sqlCommandParameters.AddReference( "@catalog", catalog );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@name", name, 127 );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleGyroHeadingTrueNorthTimeseriesDataReader = new SimpleGyroHeadingTrueNorthTimeseriesDataReader( _loggerFactory, sqlDataReader );
                return simpleGyroHeadingTrueNorthTimeseriesDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public GyroHeadingTrueNorthTimeseriesObject? GetGyroHeadingTrueNorthTimeseriesByCatalogAndName( Guid? catalog, string name )
        {
            throw new NotImplementedException( );
        }
        public IList<GyroHeadingTrueNorthTimeseriesObject> GetGyroHeadingTrueNorthTimeseriesCollectionByCatalogIsNullAndName( string name )
        {
            throw new NotImplementedException( );
        }
        public SimpleGyroHeadingTrueNorthTimeseriesDataReader GetGyroHeadingTrueNorthTimeseriesByGyroDeviceDataReader( Guid gyroDevice )
        {
            const string sql = SimpleGyroHeadingTrueNorthTimeseriesDataReader.BaseQuery + " WHERE " +
                    SimpleGyroHeadingTrueNorthTimeseriesDataReader.ViewAliasName + ".[GyroDevice] = @gyroDevice " +
                    " ORDER BY " + SimpleGyroHeadingTrueNorthTimeseriesDataReader.ViewAliasName + ".[GyroDevice]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var gyroDeviceParameter = sqlCommandParameters.AddReference( "@gyroDevice", gyroDevice );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleGyroHeadingTrueNorthTimeseriesDataReader = new SimpleGyroHeadingTrueNorthTimeseriesDataReader( _loggerFactory, sqlDataReader );
                return simpleGyroHeadingTrueNorthTimeseriesDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public GyroHeadingTrueNorthTimeseriesObject? GetGyroHeadingTrueNorthTimeseriesByGyroDevice( Guid gyroDevice )
        {
            throw new NotImplementedException( );
        }
        // ---------------------------------------------------------------------
        // GyroPitchTimeseries queries
        // ---------------------------------------------------------------------
        public SimpleGyroPitchTimeseriesDataReader GetGyroPitchTimeseriesByIdDataReader( Guid id )
        {
            const string sql = SimpleGyroPitchTimeseriesDataReader.BaseQuery + "WHERE " + SimpleGyroPitchTimeseriesDataReader.ViewAliasName + ".[Id] = @id"; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                sqlCommandParameters.AddGuid( "@id", id );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleGyroPitchTimeseriesDataReader = new SimpleGyroPitchTimeseriesDataReader( _loggerFactory, sqlDataReader );
                return simpleGyroPitchTimeseriesDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public GyroPitchTimeseriesObject? GetGyroPitchTimeseriesById( Guid id )
        {
            var simpleGyroPitchTimeseriesDataReader = GetGyroPitchTimeseriesByIdDataReader( id );
            using ( simpleGyroPitchTimeseriesDataReader )
            {
                if ( simpleGyroPitchTimeseriesDataReader.Read( ) )
                {
                    var result = simpleGyroPitchTimeseriesDataReader.GetDataObject( );
                    return result;
                }
            }
            return null;
        }

        public void GetGyroPitchTimeseriesById( Guid id, Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleGyroPitchTimeseriesDataReader = GetGyroPitchTimeseriesByIdDataReader( id );
                using ( simpleGyroPitchTimeseriesDataReader )
                {
                    if ( simpleGyroPitchTimeseriesDataReader.Read( ) )
                    {
                        destinationWriter.Write( true );
                        simpleGyroPitchTimeseriesDataReader.WriteTo( destinationWriter );
                    }
                    else
                    {
                        destinationWriter.Write( false );
                    }
                }
            }
        }

        public SimpleGyroPitchTimeseriesDataReader GetGyroPitchTimeseriesCollectionDataReader( )
        {
            const string sql = SimpleGyroPitchTimeseriesDataReader.BaseQuery; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleGyroPitchTimeseriesDataReader = new SimpleGyroPitchTimeseriesDataReader( _loggerFactory, sqlDataReader );
                return simpleGyroPitchTimeseriesDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public IList<GyroPitchTimeseriesObject> GetGyroPitchTimeseriesCollection( )
        {
            var result = new List<GyroPitchTimeseriesObject>( );
            var simpleGyroPitchTimeseriesDataReader = GetGyroPitchTimeseriesCollectionDataReader( );
            using ( simpleGyroPitchTimeseriesDataReader )
            {
                while ( simpleGyroPitchTimeseriesDataReader.Read( ) )
                {
                    var data = simpleGyroPitchTimeseriesDataReader.GetDataObject( );
                    result.Add( data );
                }
            }
            return result;
        }

        public void GetGyroPitchTimeseriesCollection( Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleGyroPitchTimeseriesDataReader = GetGyroPitchTimeseriesCollectionDataReader( );
                using ( simpleGyroPitchTimeseriesDataReader )
                {
                    simpleGyroPitchTimeseriesDataReader.WriteResultSetTo( destinationWriter );
                }
            }
        }

        public SimpleGyroPitchTimeseriesDataReader GetGyroPitchTimeseriesCollectionByCatalogDataReader( Guid? catalog )
        {
            const string sql = SimpleGyroPitchTimeseriesDataReader.BaseQuery + " WHERE " +
                    SimpleGyroPitchTimeseriesDataReader.ViewAliasName + ".[Catalog] = @catalog " +
                    " ORDER BY " + SimpleGyroPitchTimeseriesDataReader.ViewAliasName + ".[Catalog]," +SimpleGyroPitchTimeseriesDataReader.ViewAliasName + ".[Name]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var catalogParameter = sqlCommandParameters.AddReference( "@catalog", catalog );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleGyroPitchTimeseriesDataReader = new SimpleGyroPitchTimeseriesDataReader( _loggerFactory, sqlDataReader );
                return simpleGyroPitchTimeseriesDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<GyroPitchTimeseriesObject> GetGyroPitchTimeseriesCollectionByCatalog( Guid? catalog )
        {
            throw new NotImplementedException( );
        }
        public IList<GyroPitchTimeseriesObject> GetGyroPitchTimeseriesCollectionByCatalogIsNull(  )
        {
            throw new NotImplementedException( );
        }
        public SimpleGyroPitchTimeseriesDataReader GetGyroPitchTimeseriesByCatalogAndNameDataReader( Guid? catalog, string name )
        {
            const string sql = SimpleGyroPitchTimeseriesDataReader.BaseQuery + " WHERE " +
                    SimpleGyroPitchTimeseriesDataReader.ViewAliasName + ".[Catalog] = @catalog AND " +
                    SimpleGyroPitchTimeseriesDataReader.ViewAliasName + ".[Name] = @name " +
                    " ORDER BY " + SimpleGyroPitchTimeseriesDataReader.ViewAliasName + ".[Catalog]," +SimpleGyroPitchTimeseriesDataReader.ViewAliasName + ".[Name]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var catalogParameter = sqlCommandParameters.AddReference( "@catalog", catalog );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@name", name, 127 );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleGyroPitchTimeseriesDataReader = new SimpleGyroPitchTimeseriesDataReader( _loggerFactory, sqlDataReader );
                return simpleGyroPitchTimeseriesDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public GyroPitchTimeseriesObject? GetGyroPitchTimeseriesByCatalogAndName( Guid? catalog, string name )
        {
            throw new NotImplementedException( );
        }
        public IList<GyroPitchTimeseriesObject> GetGyroPitchTimeseriesCollectionByCatalogIsNullAndName( string name )
        {
            throw new NotImplementedException( );
        }
        public SimpleGyroPitchTimeseriesDataReader GetGyroPitchTimeseriesByGyroDeviceDataReader( Guid gyroDevice )
        {
            const string sql = SimpleGyroPitchTimeseriesDataReader.BaseQuery + " WHERE " +
                    SimpleGyroPitchTimeseriesDataReader.ViewAliasName + ".[GyroDevice] = @gyroDevice " +
                    " ORDER BY " + SimpleGyroPitchTimeseriesDataReader.ViewAliasName + ".[GyroDevice]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var gyroDeviceParameter = sqlCommandParameters.AddReference( "@gyroDevice", gyroDevice );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleGyroPitchTimeseriesDataReader = new SimpleGyroPitchTimeseriesDataReader( _loggerFactory, sqlDataReader );
                return simpleGyroPitchTimeseriesDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public GyroPitchTimeseriesObject? GetGyroPitchTimeseriesByGyroDevice( Guid gyroDevice )
        {
            throw new NotImplementedException( );
        }
        // ---------------------------------------------------------------------
        // GyroRateOfTurnTimeseries queries
        // ---------------------------------------------------------------------
        public SimpleGyroRateOfTurnTimeseriesDataReader GetGyroRateOfTurnTimeseriesByIdDataReader( Guid id )
        {
            const string sql = SimpleGyroRateOfTurnTimeseriesDataReader.BaseQuery + "WHERE " + SimpleGyroRateOfTurnTimeseriesDataReader.ViewAliasName + ".[Id] = @id"; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                sqlCommandParameters.AddGuid( "@id", id );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleGyroRateOfTurnTimeseriesDataReader = new SimpleGyroRateOfTurnTimeseriesDataReader( _loggerFactory, sqlDataReader );
                return simpleGyroRateOfTurnTimeseriesDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public GyroRateOfTurnTimeseriesObject? GetGyroRateOfTurnTimeseriesById( Guid id )
        {
            var simpleGyroRateOfTurnTimeseriesDataReader = GetGyroRateOfTurnTimeseriesByIdDataReader( id );
            using ( simpleGyroRateOfTurnTimeseriesDataReader )
            {
                if ( simpleGyroRateOfTurnTimeseriesDataReader.Read( ) )
                {
                    var result = simpleGyroRateOfTurnTimeseriesDataReader.GetDataObject( );
                    return result;
                }
            }
            return null;
        }

        public void GetGyroRateOfTurnTimeseriesById( Guid id, Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleGyroRateOfTurnTimeseriesDataReader = GetGyroRateOfTurnTimeseriesByIdDataReader( id );
                using ( simpleGyroRateOfTurnTimeseriesDataReader )
                {
                    if ( simpleGyroRateOfTurnTimeseriesDataReader.Read( ) )
                    {
                        destinationWriter.Write( true );
                        simpleGyroRateOfTurnTimeseriesDataReader.WriteTo( destinationWriter );
                    }
                    else
                    {
                        destinationWriter.Write( false );
                    }
                }
            }
        }

        public SimpleGyroRateOfTurnTimeseriesDataReader GetGyroRateOfTurnTimeseriesCollectionDataReader( )
        {
            const string sql = SimpleGyroRateOfTurnTimeseriesDataReader.BaseQuery; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleGyroRateOfTurnTimeseriesDataReader = new SimpleGyroRateOfTurnTimeseriesDataReader( _loggerFactory, sqlDataReader );
                return simpleGyroRateOfTurnTimeseriesDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public IList<GyroRateOfTurnTimeseriesObject> GetGyroRateOfTurnTimeseriesCollection( )
        {
            var result = new List<GyroRateOfTurnTimeseriesObject>( );
            var simpleGyroRateOfTurnTimeseriesDataReader = GetGyroRateOfTurnTimeseriesCollectionDataReader( );
            using ( simpleGyroRateOfTurnTimeseriesDataReader )
            {
                while ( simpleGyroRateOfTurnTimeseriesDataReader.Read( ) )
                {
                    var data = simpleGyroRateOfTurnTimeseriesDataReader.GetDataObject( );
                    result.Add( data );
                }
            }
            return result;
        }

        public void GetGyroRateOfTurnTimeseriesCollection( Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleGyroRateOfTurnTimeseriesDataReader = GetGyroRateOfTurnTimeseriesCollectionDataReader( );
                using ( simpleGyroRateOfTurnTimeseriesDataReader )
                {
                    simpleGyroRateOfTurnTimeseriesDataReader.WriteResultSetTo( destinationWriter );
                }
            }
        }

        public SimpleGyroRateOfTurnTimeseriesDataReader GetGyroRateOfTurnTimeseriesCollectionByCatalogDataReader( Guid? catalog )
        {
            const string sql = SimpleGyroRateOfTurnTimeseriesDataReader.BaseQuery + " WHERE " +
                    SimpleGyroRateOfTurnTimeseriesDataReader.ViewAliasName + ".[Catalog] = @catalog " +
                    " ORDER BY " + SimpleGyroRateOfTurnTimeseriesDataReader.ViewAliasName + ".[Catalog]," +SimpleGyroRateOfTurnTimeseriesDataReader.ViewAliasName + ".[Name]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var catalogParameter = sqlCommandParameters.AddReference( "@catalog", catalog );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleGyroRateOfTurnTimeseriesDataReader = new SimpleGyroRateOfTurnTimeseriesDataReader( _loggerFactory, sqlDataReader );
                return simpleGyroRateOfTurnTimeseriesDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<GyroRateOfTurnTimeseriesObject> GetGyroRateOfTurnTimeseriesCollectionByCatalog( Guid? catalog )
        {
            throw new NotImplementedException( );
        }
        public IList<GyroRateOfTurnTimeseriesObject> GetGyroRateOfTurnTimeseriesCollectionByCatalogIsNull(  )
        {
            throw new NotImplementedException( );
        }
        public SimpleGyroRateOfTurnTimeseriesDataReader GetGyroRateOfTurnTimeseriesByCatalogAndNameDataReader( Guid? catalog, string name )
        {
            const string sql = SimpleGyroRateOfTurnTimeseriesDataReader.BaseQuery + " WHERE " +
                    SimpleGyroRateOfTurnTimeseriesDataReader.ViewAliasName + ".[Catalog] = @catalog AND " +
                    SimpleGyroRateOfTurnTimeseriesDataReader.ViewAliasName + ".[Name] = @name " +
                    " ORDER BY " + SimpleGyroRateOfTurnTimeseriesDataReader.ViewAliasName + ".[Catalog]," +SimpleGyroRateOfTurnTimeseriesDataReader.ViewAliasName + ".[Name]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var catalogParameter = sqlCommandParameters.AddReference( "@catalog", catalog );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@name", name, 127 );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleGyroRateOfTurnTimeseriesDataReader = new SimpleGyroRateOfTurnTimeseriesDataReader( _loggerFactory, sqlDataReader );
                return simpleGyroRateOfTurnTimeseriesDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public GyroRateOfTurnTimeseriesObject? GetGyroRateOfTurnTimeseriesByCatalogAndName( Guid? catalog, string name )
        {
            throw new NotImplementedException( );
        }
        public IList<GyroRateOfTurnTimeseriesObject> GetGyroRateOfTurnTimeseriesCollectionByCatalogIsNullAndName( string name )
        {
            throw new NotImplementedException( );
        }
        public SimpleGyroRateOfTurnTimeseriesDataReader GetGyroRateOfTurnTimeseriesByGyroDeviceDataReader( Guid gyroDevice )
        {
            const string sql = SimpleGyroRateOfTurnTimeseriesDataReader.BaseQuery + " WHERE " +
                    SimpleGyroRateOfTurnTimeseriesDataReader.ViewAliasName + ".[GyroDevice] = @gyroDevice " +
                    " ORDER BY " + SimpleGyroRateOfTurnTimeseriesDataReader.ViewAliasName + ".[GyroDevice]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var gyroDeviceParameter = sqlCommandParameters.AddReference( "@gyroDevice", gyroDevice );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleGyroRateOfTurnTimeseriesDataReader = new SimpleGyroRateOfTurnTimeseriesDataReader( _loggerFactory, sqlDataReader );
                return simpleGyroRateOfTurnTimeseriesDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public GyroRateOfTurnTimeseriesObject? GetGyroRateOfTurnTimeseriesByGyroDevice( Guid gyroDevice )
        {
            throw new NotImplementedException( );
        }
        // ---------------------------------------------------------------------
        // GyroRollTimeseries queries
        // ---------------------------------------------------------------------
        public SimpleGyroRollTimeseriesDataReader GetGyroRollTimeseriesByIdDataReader( Guid id )
        {
            const string sql = SimpleGyroRollTimeseriesDataReader.BaseQuery + "WHERE " + SimpleGyroRollTimeseriesDataReader.ViewAliasName + ".[Id] = @id"; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                sqlCommandParameters.AddGuid( "@id", id );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleGyroRollTimeseriesDataReader = new SimpleGyroRollTimeseriesDataReader( _loggerFactory, sqlDataReader );
                return simpleGyroRollTimeseriesDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public GyroRollTimeseriesObject? GetGyroRollTimeseriesById( Guid id )
        {
            var simpleGyroRollTimeseriesDataReader = GetGyroRollTimeseriesByIdDataReader( id );
            using ( simpleGyroRollTimeseriesDataReader )
            {
                if ( simpleGyroRollTimeseriesDataReader.Read( ) )
                {
                    var result = simpleGyroRollTimeseriesDataReader.GetDataObject( );
                    return result;
                }
            }
            return null;
        }

        public void GetGyroRollTimeseriesById( Guid id, Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleGyroRollTimeseriesDataReader = GetGyroRollTimeseriesByIdDataReader( id );
                using ( simpleGyroRollTimeseriesDataReader )
                {
                    if ( simpleGyroRollTimeseriesDataReader.Read( ) )
                    {
                        destinationWriter.Write( true );
                        simpleGyroRollTimeseriesDataReader.WriteTo( destinationWriter );
                    }
                    else
                    {
                        destinationWriter.Write( false );
                    }
                }
            }
        }

        public SimpleGyroRollTimeseriesDataReader GetGyroRollTimeseriesCollectionDataReader( )
        {
            const string sql = SimpleGyroRollTimeseriesDataReader.BaseQuery; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleGyroRollTimeseriesDataReader = new SimpleGyroRollTimeseriesDataReader( _loggerFactory, sqlDataReader );
                return simpleGyroRollTimeseriesDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public IList<GyroRollTimeseriesObject> GetGyroRollTimeseriesCollection( )
        {
            var result = new List<GyroRollTimeseriesObject>( );
            var simpleGyroRollTimeseriesDataReader = GetGyroRollTimeseriesCollectionDataReader( );
            using ( simpleGyroRollTimeseriesDataReader )
            {
                while ( simpleGyroRollTimeseriesDataReader.Read( ) )
                {
                    var data = simpleGyroRollTimeseriesDataReader.GetDataObject( );
                    result.Add( data );
                }
            }
            return result;
        }

        public void GetGyroRollTimeseriesCollection( Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleGyroRollTimeseriesDataReader = GetGyroRollTimeseriesCollectionDataReader( );
                using ( simpleGyroRollTimeseriesDataReader )
                {
                    simpleGyroRollTimeseriesDataReader.WriteResultSetTo( destinationWriter );
                }
            }
        }

        public SimpleGyroRollTimeseriesDataReader GetGyroRollTimeseriesCollectionByCatalogDataReader( Guid? catalog )
        {
            const string sql = SimpleGyroRollTimeseriesDataReader.BaseQuery + " WHERE " +
                    SimpleGyroRollTimeseriesDataReader.ViewAliasName + ".[Catalog] = @catalog " +
                    " ORDER BY " + SimpleGyroRollTimeseriesDataReader.ViewAliasName + ".[Catalog]," +SimpleGyroRollTimeseriesDataReader.ViewAliasName + ".[Name]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var catalogParameter = sqlCommandParameters.AddReference( "@catalog", catalog );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleGyroRollTimeseriesDataReader = new SimpleGyroRollTimeseriesDataReader( _loggerFactory, sqlDataReader );
                return simpleGyroRollTimeseriesDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<GyroRollTimeseriesObject> GetGyroRollTimeseriesCollectionByCatalog( Guid? catalog )
        {
            throw new NotImplementedException( );
        }
        public IList<GyroRollTimeseriesObject> GetGyroRollTimeseriesCollectionByCatalogIsNull(  )
        {
            throw new NotImplementedException( );
        }
        public SimpleGyroRollTimeseriesDataReader GetGyroRollTimeseriesByCatalogAndNameDataReader( Guid? catalog, string name )
        {
            const string sql = SimpleGyroRollTimeseriesDataReader.BaseQuery + " WHERE " +
                    SimpleGyroRollTimeseriesDataReader.ViewAliasName + ".[Catalog] = @catalog AND " +
                    SimpleGyroRollTimeseriesDataReader.ViewAliasName + ".[Name] = @name " +
                    " ORDER BY " + SimpleGyroRollTimeseriesDataReader.ViewAliasName + ".[Catalog]," +SimpleGyroRollTimeseriesDataReader.ViewAliasName + ".[Name]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var catalogParameter = sqlCommandParameters.AddReference( "@catalog", catalog );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@name", name, 127 );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleGyroRollTimeseriesDataReader = new SimpleGyroRollTimeseriesDataReader( _loggerFactory, sqlDataReader );
                return simpleGyroRollTimeseriesDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public GyroRollTimeseriesObject? GetGyroRollTimeseriesByCatalogAndName( Guid? catalog, string name )
        {
            throw new NotImplementedException( );
        }
        public IList<GyroRollTimeseriesObject> GetGyroRollTimeseriesCollectionByCatalogIsNullAndName( string name )
        {
            throw new NotImplementedException( );
        }
        public SimpleGyroRollTimeseriesDataReader GetGyroRollTimeseriesByGyroDeviceDataReader( Guid gyroDevice )
        {
            const string sql = SimpleGyroRollTimeseriesDataReader.BaseQuery + " WHERE " +
                    SimpleGyroRollTimeseriesDataReader.ViewAliasName + ".[GyroDevice] = @gyroDevice " +
                    " ORDER BY " + SimpleGyroRollTimeseriesDataReader.ViewAliasName + ".[GyroDevice]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var gyroDeviceParameter = sqlCommandParameters.AddReference( "@gyroDevice", gyroDevice );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleGyroRollTimeseriesDataReader = new SimpleGyroRollTimeseriesDataReader( _loggerFactory, sqlDataReader );
                return simpleGyroRollTimeseriesDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public GyroRollTimeseriesObject? GetGyroRollTimeseriesByGyroDevice( Guid gyroDevice )
        {
            throw new NotImplementedException( );
        }
        // ---------------------------------------------------------------------
        // GyroSpeedTimeseries queries
        // ---------------------------------------------------------------------
        public SimpleGyroSpeedTimeseriesDataReader GetGyroSpeedTimeseriesByIdDataReader( Guid id )
        {
            const string sql = SimpleGyroSpeedTimeseriesDataReader.BaseQuery + "WHERE " + SimpleGyroSpeedTimeseriesDataReader.ViewAliasName + ".[Id] = @id"; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                sqlCommandParameters.AddGuid( "@id", id );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleGyroSpeedTimeseriesDataReader = new SimpleGyroSpeedTimeseriesDataReader( _loggerFactory, sqlDataReader );
                return simpleGyroSpeedTimeseriesDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public GyroSpeedTimeseriesObject? GetGyroSpeedTimeseriesById( Guid id )
        {
            var simpleGyroSpeedTimeseriesDataReader = GetGyroSpeedTimeseriesByIdDataReader( id );
            using ( simpleGyroSpeedTimeseriesDataReader )
            {
                if ( simpleGyroSpeedTimeseriesDataReader.Read( ) )
                {
                    var result = simpleGyroSpeedTimeseriesDataReader.GetDataObject( );
                    return result;
                }
            }
            return null;
        }

        public void GetGyroSpeedTimeseriesById( Guid id, Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleGyroSpeedTimeseriesDataReader = GetGyroSpeedTimeseriesByIdDataReader( id );
                using ( simpleGyroSpeedTimeseriesDataReader )
                {
                    if ( simpleGyroSpeedTimeseriesDataReader.Read( ) )
                    {
                        destinationWriter.Write( true );
                        simpleGyroSpeedTimeseriesDataReader.WriteTo( destinationWriter );
                    }
                    else
                    {
                        destinationWriter.Write( false );
                    }
                }
            }
        }

        public SimpleGyroSpeedTimeseriesDataReader GetGyroSpeedTimeseriesCollectionDataReader( )
        {
            const string sql = SimpleGyroSpeedTimeseriesDataReader.BaseQuery; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleGyroSpeedTimeseriesDataReader = new SimpleGyroSpeedTimeseriesDataReader( _loggerFactory, sqlDataReader );
                return simpleGyroSpeedTimeseriesDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public IList<GyroSpeedTimeseriesObject> GetGyroSpeedTimeseriesCollection( )
        {
            var result = new List<GyroSpeedTimeseriesObject>( );
            var simpleGyroSpeedTimeseriesDataReader = GetGyroSpeedTimeseriesCollectionDataReader( );
            using ( simpleGyroSpeedTimeseriesDataReader )
            {
                while ( simpleGyroSpeedTimeseriesDataReader.Read( ) )
                {
                    var data = simpleGyroSpeedTimeseriesDataReader.GetDataObject( );
                    result.Add( data );
                }
            }
            return result;
        }

        public void GetGyroSpeedTimeseriesCollection( Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleGyroSpeedTimeseriesDataReader = GetGyroSpeedTimeseriesCollectionDataReader( );
                using ( simpleGyroSpeedTimeseriesDataReader )
                {
                    simpleGyroSpeedTimeseriesDataReader.WriteResultSetTo( destinationWriter );
                }
            }
        }

        public SimpleGyroSpeedTimeseriesDataReader GetGyroSpeedTimeseriesCollectionByCatalogDataReader( Guid? catalog )
        {
            const string sql = SimpleGyroSpeedTimeseriesDataReader.BaseQuery + " WHERE " +
                    SimpleGyroSpeedTimeseriesDataReader.ViewAliasName + ".[Catalog] = @catalog " +
                    " ORDER BY " + SimpleGyroSpeedTimeseriesDataReader.ViewAliasName + ".[Catalog]," +SimpleGyroSpeedTimeseriesDataReader.ViewAliasName + ".[Name]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var catalogParameter = sqlCommandParameters.AddReference( "@catalog", catalog );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleGyroSpeedTimeseriesDataReader = new SimpleGyroSpeedTimeseriesDataReader( _loggerFactory, sqlDataReader );
                return simpleGyroSpeedTimeseriesDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<GyroSpeedTimeseriesObject> GetGyroSpeedTimeseriesCollectionByCatalog( Guid? catalog )
        {
            throw new NotImplementedException( );
        }
        public IList<GyroSpeedTimeseriesObject> GetGyroSpeedTimeseriesCollectionByCatalogIsNull(  )
        {
            throw new NotImplementedException( );
        }
        public SimpleGyroSpeedTimeseriesDataReader GetGyroSpeedTimeseriesByCatalogAndNameDataReader( Guid? catalog, string name )
        {
            const string sql = SimpleGyroSpeedTimeseriesDataReader.BaseQuery + " WHERE " +
                    SimpleGyroSpeedTimeseriesDataReader.ViewAliasName + ".[Catalog] = @catalog AND " +
                    SimpleGyroSpeedTimeseriesDataReader.ViewAliasName + ".[Name] = @name " +
                    " ORDER BY " + SimpleGyroSpeedTimeseriesDataReader.ViewAliasName + ".[Catalog]," +SimpleGyroSpeedTimeseriesDataReader.ViewAliasName + ".[Name]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var catalogParameter = sqlCommandParameters.AddReference( "@catalog", catalog );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@name", name, 127 );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleGyroSpeedTimeseriesDataReader = new SimpleGyroSpeedTimeseriesDataReader( _loggerFactory, sqlDataReader );
                return simpleGyroSpeedTimeseriesDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public GyroSpeedTimeseriesObject? GetGyroSpeedTimeseriesByCatalogAndName( Guid? catalog, string name )
        {
            throw new NotImplementedException( );
        }
        public IList<GyroSpeedTimeseriesObject> GetGyroSpeedTimeseriesCollectionByCatalogIsNullAndName( string name )
        {
            throw new NotImplementedException( );
        }
        public SimpleGyroSpeedTimeseriesDataReader GetGyroSpeedTimeseriesByGyroDeviceDataReader( Guid gyroDevice )
        {
            const string sql = SimpleGyroSpeedTimeseriesDataReader.BaseQuery + " WHERE " +
                    SimpleGyroSpeedTimeseriesDataReader.ViewAliasName + ".[GyroDevice] = @gyroDevice " +
                    " ORDER BY " + SimpleGyroSpeedTimeseriesDataReader.ViewAliasName + ".[GyroDevice]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var gyroDeviceParameter = sqlCommandParameters.AddReference( "@gyroDevice", gyroDevice );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleGyroSpeedTimeseriesDataReader = new SimpleGyroSpeedTimeseriesDataReader( _loggerFactory, sqlDataReader );
                return simpleGyroSpeedTimeseriesDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public GyroSpeedTimeseriesObject? GetGyroSpeedTimeseriesByGyroDevice( Guid gyroDevice )
        {
            throw new NotImplementedException( );
        }
        // ---------------------------------------------------------------------
        // RadarLatitudeTimeseries queries
        // ---------------------------------------------------------------------
        public SimpleRadarLatitudeTimeseriesDataReader GetRadarLatitudeTimeseriesByIdDataReader( Guid id )
        {
            const string sql = SimpleRadarLatitudeTimeseriesDataReader.BaseQuery + "WHERE " + SimpleRadarLatitudeTimeseriesDataReader.ViewAliasName + ".[Id] = @id"; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                sqlCommandParameters.AddGuid( "@id", id );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleRadarLatitudeTimeseriesDataReader = new SimpleRadarLatitudeTimeseriesDataReader( _loggerFactory, sqlDataReader );
                return simpleRadarLatitudeTimeseriesDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public RadarLatitudeTimeseriesObject? GetRadarLatitudeTimeseriesById( Guid id )
        {
            var simpleRadarLatitudeTimeseriesDataReader = GetRadarLatitudeTimeseriesByIdDataReader( id );
            using ( simpleRadarLatitudeTimeseriesDataReader )
            {
                if ( simpleRadarLatitudeTimeseriesDataReader.Read( ) )
                {
                    var result = simpleRadarLatitudeTimeseriesDataReader.GetDataObject( );
                    return result;
                }
            }
            return null;
        }

        public void GetRadarLatitudeTimeseriesById( Guid id, Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleRadarLatitudeTimeseriesDataReader = GetRadarLatitudeTimeseriesByIdDataReader( id );
                using ( simpleRadarLatitudeTimeseriesDataReader )
                {
                    if ( simpleRadarLatitudeTimeseriesDataReader.Read( ) )
                    {
                        destinationWriter.Write( true );
                        simpleRadarLatitudeTimeseriesDataReader.WriteTo( destinationWriter );
                    }
                    else
                    {
                        destinationWriter.Write( false );
                    }
                }
            }
        }

        public SimpleRadarLatitudeTimeseriesDataReader GetRadarLatitudeTimeseriesCollectionDataReader( )
        {
            const string sql = SimpleRadarLatitudeTimeseriesDataReader.BaseQuery; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleRadarLatitudeTimeseriesDataReader = new SimpleRadarLatitudeTimeseriesDataReader( _loggerFactory, sqlDataReader );
                return simpleRadarLatitudeTimeseriesDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public IList<RadarLatitudeTimeseriesObject> GetRadarLatitudeTimeseriesCollection( )
        {
            var result = new List<RadarLatitudeTimeseriesObject>( );
            var simpleRadarLatitudeTimeseriesDataReader = GetRadarLatitudeTimeseriesCollectionDataReader( );
            using ( simpleRadarLatitudeTimeseriesDataReader )
            {
                while ( simpleRadarLatitudeTimeseriesDataReader.Read( ) )
                {
                    var data = simpleRadarLatitudeTimeseriesDataReader.GetDataObject( );
                    result.Add( data );
                }
            }
            return result;
        }

        public void GetRadarLatitudeTimeseriesCollection( Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleRadarLatitudeTimeseriesDataReader = GetRadarLatitudeTimeseriesCollectionDataReader( );
                using ( simpleRadarLatitudeTimeseriesDataReader )
                {
                    simpleRadarLatitudeTimeseriesDataReader.WriteResultSetTo( destinationWriter );
                }
            }
        }

        public SimpleRadarLatitudeTimeseriesDataReader GetRadarLatitudeTimeseriesCollectionByCatalogDataReader( Guid? catalog )
        {
            const string sql = SimpleRadarLatitudeTimeseriesDataReader.BaseQuery + " WHERE " +
                    SimpleRadarLatitudeTimeseriesDataReader.ViewAliasName + ".[Catalog] = @catalog " +
                    " ORDER BY " + SimpleRadarLatitudeTimeseriesDataReader.ViewAliasName + ".[Catalog]," +SimpleRadarLatitudeTimeseriesDataReader.ViewAliasName + ".[Name]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var catalogParameter = sqlCommandParameters.AddReference( "@catalog", catalog );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleRadarLatitudeTimeseriesDataReader = new SimpleRadarLatitudeTimeseriesDataReader( _loggerFactory, sqlDataReader );
                return simpleRadarLatitudeTimeseriesDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<RadarLatitudeTimeseriesObject> GetRadarLatitudeTimeseriesCollectionByCatalog( Guid? catalog )
        {
            throw new NotImplementedException( );
        }
        public IList<RadarLatitudeTimeseriesObject> GetRadarLatitudeTimeseriesCollectionByCatalogIsNull(  )
        {
            throw new NotImplementedException( );
        }
        public SimpleRadarLatitudeTimeseriesDataReader GetRadarLatitudeTimeseriesByCatalogAndNameDataReader( Guid? catalog, string name )
        {
            const string sql = SimpleRadarLatitudeTimeseriesDataReader.BaseQuery + " WHERE " +
                    SimpleRadarLatitudeTimeseriesDataReader.ViewAliasName + ".[Catalog] = @catalog AND " +
                    SimpleRadarLatitudeTimeseriesDataReader.ViewAliasName + ".[Name] = @name " +
                    " ORDER BY " + SimpleRadarLatitudeTimeseriesDataReader.ViewAliasName + ".[Catalog]," +SimpleRadarLatitudeTimeseriesDataReader.ViewAliasName + ".[Name]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var catalogParameter = sqlCommandParameters.AddReference( "@catalog", catalog );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@name", name, 127 );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleRadarLatitudeTimeseriesDataReader = new SimpleRadarLatitudeTimeseriesDataReader( _loggerFactory, sqlDataReader );
                return simpleRadarLatitudeTimeseriesDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public RadarLatitudeTimeseriesObject? GetRadarLatitudeTimeseriesByCatalogAndName( Guid? catalog, string name )
        {
            throw new NotImplementedException( );
        }
        public IList<RadarLatitudeTimeseriesObject> GetRadarLatitudeTimeseriesCollectionByCatalogIsNullAndName( string name )
        {
            throw new NotImplementedException( );
        }
        // ---------------------------------------------------------------------
        // RadarLongitudeTimeseries queries
        // ---------------------------------------------------------------------
        public SimpleRadarLongitudeTimeseriesDataReader GetRadarLongitudeTimeseriesByIdDataReader( Guid id )
        {
            const string sql = SimpleRadarLongitudeTimeseriesDataReader.BaseQuery + "WHERE " + SimpleRadarLongitudeTimeseriesDataReader.ViewAliasName + ".[Id] = @id"; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                sqlCommandParameters.AddGuid( "@id", id );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleRadarLongitudeTimeseriesDataReader = new SimpleRadarLongitudeTimeseriesDataReader( _loggerFactory, sqlDataReader );
                return simpleRadarLongitudeTimeseriesDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public RadarLongitudeTimeseriesObject? GetRadarLongitudeTimeseriesById( Guid id )
        {
            var simpleRadarLongitudeTimeseriesDataReader = GetRadarLongitudeTimeseriesByIdDataReader( id );
            using ( simpleRadarLongitudeTimeseriesDataReader )
            {
                if ( simpleRadarLongitudeTimeseriesDataReader.Read( ) )
                {
                    var result = simpleRadarLongitudeTimeseriesDataReader.GetDataObject( );
                    return result;
                }
            }
            return null;
        }

        public void GetRadarLongitudeTimeseriesById( Guid id, Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleRadarLongitudeTimeseriesDataReader = GetRadarLongitudeTimeseriesByIdDataReader( id );
                using ( simpleRadarLongitudeTimeseriesDataReader )
                {
                    if ( simpleRadarLongitudeTimeseriesDataReader.Read( ) )
                    {
                        destinationWriter.Write( true );
                        simpleRadarLongitudeTimeseriesDataReader.WriteTo( destinationWriter );
                    }
                    else
                    {
                        destinationWriter.Write( false );
                    }
                }
            }
        }

        public SimpleRadarLongitudeTimeseriesDataReader GetRadarLongitudeTimeseriesCollectionDataReader( )
        {
            const string sql = SimpleRadarLongitudeTimeseriesDataReader.BaseQuery; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleRadarLongitudeTimeseriesDataReader = new SimpleRadarLongitudeTimeseriesDataReader( _loggerFactory, sqlDataReader );
                return simpleRadarLongitudeTimeseriesDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public IList<RadarLongitudeTimeseriesObject> GetRadarLongitudeTimeseriesCollection( )
        {
            var result = new List<RadarLongitudeTimeseriesObject>( );
            var simpleRadarLongitudeTimeseriesDataReader = GetRadarLongitudeTimeseriesCollectionDataReader( );
            using ( simpleRadarLongitudeTimeseriesDataReader )
            {
                while ( simpleRadarLongitudeTimeseriesDataReader.Read( ) )
                {
                    var data = simpleRadarLongitudeTimeseriesDataReader.GetDataObject( );
                    result.Add( data );
                }
            }
            return result;
        }

        public void GetRadarLongitudeTimeseriesCollection( Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleRadarLongitudeTimeseriesDataReader = GetRadarLongitudeTimeseriesCollectionDataReader( );
                using ( simpleRadarLongitudeTimeseriesDataReader )
                {
                    simpleRadarLongitudeTimeseriesDataReader.WriteResultSetTo( destinationWriter );
                }
            }
        }

        public SimpleRadarLongitudeTimeseriesDataReader GetRadarLongitudeTimeseriesCollectionByCatalogDataReader( Guid? catalog )
        {
            const string sql = SimpleRadarLongitudeTimeseriesDataReader.BaseQuery + " WHERE " +
                    SimpleRadarLongitudeTimeseriesDataReader.ViewAliasName + ".[Catalog] = @catalog " +
                    " ORDER BY " + SimpleRadarLongitudeTimeseriesDataReader.ViewAliasName + ".[Catalog]," +SimpleRadarLongitudeTimeseriesDataReader.ViewAliasName + ".[Name]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var catalogParameter = sqlCommandParameters.AddReference( "@catalog", catalog );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleRadarLongitudeTimeseriesDataReader = new SimpleRadarLongitudeTimeseriesDataReader( _loggerFactory, sqlDataReader );
                return simpleRadarLongitudeTimeseriesDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<RadarLongitudeTimeseriesObject> GetRadarLongitudeTimeseriesCollectionByCatalog( Guid? catalog )
        {
            throw new NotImplementedException( );
        }
        public IList<RadarLongitudeTimeseriesObject> GetRadarLongitudeTimeseriesCollectionByCatalogIsNull(  )
        {
            throw new NotImplementedException( );
        }
        public SimpleRadarLongitudeTimeseriesDataReader GetRadarLongitudeTimeseriesByCatalogAndNameDataReader( Guid? catalog, string name )
        {
            const string sql = SimpleRadarLongitudeTimeseriesDataReader.BaseQuery + " WHERE " +
                    SimpleRadarLongitudeTimeseriesDataReader.ViewAliasName + ".[Catalog] = @catalog AND " +
                    SimpleRadarLongitudeTimeseriesDataReader.ViewAliasName + ".[Name] = @name " +
                    " ORDER BY " + SimpleRadarLongitudeTimeseriesDataReader.ViewAliasName + ".[Catalog]," +SimpleRadarLongitudeTimeseriesDataReader.ViewAliasName + ".[Name]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var catalogParameter = sqlCommandParameters.AddReference( "@catalog", catalog );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@name", name, 127 );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleRadarLongitudeTimeseriesDataReader = new SimpleRadarLongitudeTimeseriesDataReader( _loggerFactory, sqlDataReader );
                return simpleRadarLongitudeTimeseriesDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public RadarLongitudeTimeseriesObject? GetRadarLongitudeTimeseriesByCatalogAndName( Guid? catalog, string name )
        {
            throw new NotImplementedException( );
        }
        public IList<RadarLongitudeTimeseriesObject> GetRadarLongitudeTimeseriesCollectionByCatalogIsNullAndName( string name )
        {
            throw new NotImplementedException( );
        }
        // ---------------------------------------------------------------------
        // RadomeDewPointTimeseries queries
        // ---------------------------------------------------------------------
        public SimpleRadomeDewPointTimeseriesDataReader GetRadomeDewPointTimeseriesByIdDataReader( Guid id )
        {
            const string sql = SimpleRadomeDewPointTimeseriesDataReader.BaseQuery + "WHERE " + SimpleRadomeDewPointTimeseriesDataReader.ViewAliasName + ".[Id] = @id"; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                sqlCommandParameters.AddGuid( "@id", id );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleRadomeDewPointTimeseriesDataReader = new SimpleRadomeDewPointTimeseriesDataReader( _loggerFactory, sqlDataReader );
                return simpleRadomeDewPointTimeseriesDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public RadomeDewPointTimeseriesObject? GetRadomeDewPointTimeseriesById( Guid id )
        {
            var simpleRadomeDewPointTimeseriesDataReader = GetRadomeDewPointTimeseriesByIdDataReader( id );
            using ( simpleRadomeDewPointTimeseriesDataReader )
            {
                if ( simpleRadomeDewPointTimeseriesDataReader.Read( ) )
                {
                    var result = simpleRadomeDewPointTimeseriesDataReader.GetDataObject( );
                    return result;
                }
            }
            return null;
        }

        public void GetRadomeDewPointTimeseriesById( Guid id, Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleRadomeDewPointTimeseriesDataReader = GetRadomeDewPointTimeseriesByIdDataReader( id );
                using ( simpleRadomeDewPointTimeseriesDataReader )
                {
                    if ( simpleRadomeDewPointTimeseriesDataReader.Read( ) )
                    {
                        destinationWriter.Write( true );
                        simpleRadomeDewPointTimeseriesDataReader.WriteTo( destinationWriter );
                    }
                    else
                    {
                        destinationWriter.Write( false );
                    }
                }
            }
        }

        public SimpleRadomeDewPointTimeseriesDataReader GetRadomeDewPointTimeseriesCollectionDataReader( )
        {
            const string sql = SimpleRadomeDewPointTimeseriesDataReader.BaseQuery; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleRadomeDewPointTimeseriesDataReader = new SimpleRadomeDewPointTimeseriesDataReader( _loggerFactory, sqlDataReader );
                return simpleRadomeDewPointTimeseriesDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public IList<RadomeDewPointTimeseriesObject> GetRadomeDewPointTimeseriesCollection( )
        {
            var result = new List<RadomeDewPointTimeseriesObject>( );
            var simpleRadomeDewPointTimeseriesDataReader = GetRadomeDewPointTimeseriesCollectionDataReader( );
            using ( simpleRadomeDewPointTimeseriesDataReader )
            {
                while ( simpleRadomeDewPointTimeseriesDataReader.Read( ) )
                {
                    var data = simpleRadomeDewPointTimeseriesDataReader.GetDataObject( );
                    result.Add( data );
                }
            }
            return result;
        }

        public void GetRadomeDewPointTimeseriesCollection( Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleRadomeDewPointTimeseriesDataReader = GetRadomeDewPointTimeseriesCollectionDataReader( );
                using ( simpleRadomeDewPointTimeseriesDataReader )
                {
                    simpleRadomeDewPointTimeseriesDataReader.WriteResultSetTo( destinationWriter );
                }
            }
        }

        public SimpleRadomeDewPointTimeseriesDataReader GetRadomeDewPointTimeseriesCollectionByCatalogDataReader( Guid? catalog )
        {
            const string sql = SimpleRadomeDewPointTimeseriesDataReader.BaseQuery + " WHERE " +
                    SimpleRadomeDewPointTimeseriesDataReader.ViewAliasName + ".[Catalog] = @catalog " +
                    " ORDER BY " + SimpleRadomeDewPointTimeseriesDataReader.ViewAliasName + ".[Catalog]," +SimpleRadomeDewPointTimeseriesDataReader.ViewAliasName + ".[Name]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var catalogParameter = sqlCommandParameters.AddReference( "@catalog", catalog );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleRadomeDewPointTimeseriesDataReader = new SimpleRadomeDewPointTimeseriesDataReader( _loggerFactory, sqlDataReader );
                return simpleRadomeDewPointTimeseriesDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<RadomeDewPointTimeseriesObject> GetRadomeDewPointTimeseriesCollectionByCatalog( Guid? catalog )
        {
            throw new NotImplementedException( );
        }
        public IList<RadomeDewPointTimeseriesObject> GetRadomeDewPointTimeseriesCollectionByCatalogIsNull(  )
        {
            throw new NotImplementedException( );
        }
        public SimpleRadomeDewPointTimeseriesDataReader GetRadomeDewPointTimeseriesByCatalogAndNameDataReader( Guid? catalog, string name )
        {
            const string sql = SimpleRadomeDewPointTimeseriesDataReader.BaseQuery + " WHERE " +
                    SimpleRadomeDewPointTimeseriesDataReader.ViewAliasName + ".[Catalog] = @catalog AND " +
                    SimpleRadomeDewPointTimeseriesDataReader.ViewAliasName + ".[Name] = @name " +
                    " ORDER BY " + SimpleRadomeDewPointTimeseriesDataReader.ViewAliasName + ".[Catalog]," +SimpleRadomeDewPointTimeseriesDataReader.ViewAliasName + ".[Name]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var catalogParameter = sqlCommandParameters.AddReference( "@catalog", catalog );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@name", name, 127 );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleRadomeDewPointTimeseriesDataReader = new SimpleRadomeDewPointTimeseriesDataReader( _loggerFactory, sqlDataReader );
                return simpleRadomeDewPointTimeseriesDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public RadomeDewPointTimeseriesObject? GetRadomeDewPointTimeseriesByCatalogAndName( Guid? catalog, string name )
        {
            throw new NotImplementedException( );
        }
        public IList<RadomeDewPointTimeseriesObject> GetRadomeDewPointTimeseriesCollectionByCatalogIsNullAndName( string name )
        {
            throw new NotImplementedException( );
        }
        // ---------------------------------------------------------------------
        // RadomePressureTimeseries queries
        // ---------------------------------------------------------------------
        public SimpleRadomePressureTimeseriesDataReader GetRadomePressureTimeseriesByIdDataReader( Guid id )
        {
            const string sql = SimpleRadomePressureTimeseriesDataReader.BaseQuery + "WHERE " + SimpleRadomePressureTimeseriesDataReader.ViewAliasName + ".[Id] = @id"; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                sqlCommandParameters.AddGuid( "@id", id );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleRadomePressureTimeseriesDataReader = new SimpleRadomePressureTimeseriesDataReader( _loggerFactory, sqlDataReader );
                return simpleRadomePressureTimeseriesDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public RadomePressureTimeseriesObject? GetRadomePressureTimeseriesById( Guid id )
        {
            var simpleRadomePressureTimeseriesDataReader = GetRadomePressureTimeseriesByIdDataReader( id );
            using ( simpleRadomePressureTimeseriesDataReader )
            {
                if ( simpleRadomePressureTimeseriesDataReader.Read( ) )
                {
                    var result = simpleRadomePressureTimeseriesDataReader.GetDataObject( );
                    return result;
                }
            }
            return null;
        }

        public void GetRadomePressureTimeseriesById( Guid id, Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleRadomePressureTimeseriesDataReader = GetRadomePressureTimeseriesByIdDataReader( id );
                using ( simpleRadomePressureTimeseriesDataReader )
                {
                    if ( simpleRadomePressureTimeseriesDataReader.Read( ) )
                    {
                        destinationWriter.Write( true );
                        simpleRadomePressureTimeseriesDataReader.WriteTo( destinationWriter );
                    }
                    else
                    {
                        destinationWriter.Write( false );
                    }
                }
            }
        }

        public SimpleRadomePressureTimeseriesDataReader GetRadomePressureTimeseriesCollectionDataReader( )
        {
            const string sql = SimpleRadomePressureTimeseriesDataReader.BaseQuery; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleRadomePressureTimeseriesDataReader = new SimpleRadomePressureTimeseriesDataReader( _loggerFactory, sqlDataReader );
                return simpleRadomePressureTimeseriesDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public IList<RadomePressureTimeseriesObject> GetRadomePressureTimeseriesCollection( )
        {
            var result = new List<RadomePressureTimeseriesObject>( );
            var simpleRadomePressureTimeseriesDataReader = GetRadomePressureTimeseriesCollectionDataReader( );
            using ( simpleRadomePressureTimeseriesDataReader )
            {
                while ( simpleRadomePressureTimeseriesDataReader.Read( ) )
                {
                    var data = simpleRadomePressureTimeseriesDataReader.GetDataObject( );
                    result.Add( data );
                }
            }
            return result;
        }

        public void GetRadomePressureTimeseriesCollection( Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleRadomePressureTimeseriesDataReader = GetRadomePressureTimeseriesCollectionDataReader( );
                using ( simpleRadomePressureTimeseriesDataReader )
                {
                    simpleRadomePressureTimeseriesDataReader.WriteResultSetTo( destinationWriter );
                }
            }
        }

        public SimpleRadomePressureTimeseriesDataReader GetRadomePressureTimeseriesCollectionByCatalogDataReader( Guid? catalog )
        {
            const string sql = SimpleRadomePressureTimeseriesDataReader.BaseQuery + " WHERE " +
                    SimpleRadomePressureTimeseriesDataReader.ViewAliasName + ".[Catalog] = @catalog " +
                    " ORDER BY " + SimpleRadomePressureTimeseriesDataReader.ViewAliasName + ".[Catalog]," +SimpleRadomePressureTimeseriesDataReader.ViewAliasName + ".[Name]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var catalogParameter = sqlCommandParameters.AddReference( "@catalog", catalog );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleRadomePressureTimeseriesDataReader = new SimpleRadomePressureTimeseriesDataReader( _loggerFactory, sqlDataReader );
                return simpleRadomePressureTimeseriesDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<RadomePressureTimeseriesObject> GetRadomePressureTimeseriesCollectionByCatalog( Guid? catalog )
        {
            throw new NotImplementedException( );
        }
        public IList<RadomePressureTimeseriesObject> GetRadomePressureTimeseriesCollectionByCatalogIsNull(  )
        {
            throw new NotImplementedException( );
        }
        public SimpleRadomePressureTimeseriesDataReader GetRadomePressureTimeseriesByCatalogAndNameDataReader( Guid? catalog, string name )
        {
            const string sql = SimpleRadomePressureTimeseriesDataReader.BaseQuery + " WHERE " +
                    SimpleRadomePressureTimeseriesDataReader.ViewAliasName + ".[Catalog] = @catalog AND " +
                    SimpleRadomePressureTimeseriesDataReader.ViewAliasName + ".[Name] = @name " +
                    " ORDER BY " + SimpleRadomePressureTimeseriesDataReader.ViewAliasName + ".[Catalog]," +SimpleRadomePressureTimeseriesDataReader.ViewAliasName + ".[Name]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var catalogParameter = sqlCommandParameters.AddReference( "@catalog", catalog );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@name", name, 127 );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleRadomePressureTimeseriesDataReader = new SimpleRadomePressureTimeseriesDataReader( _loggerFactory, sqlDataReader );
                return simpleRadomePressureTimeseriesDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public RadomePressureTimeseriesObject? GetRadomePressureTimeseriesByCatalogAndName( Guid? catalog, string name )
        {
            throw new NotImplementedException( );
        }
        public IList<RadomePressureTimeseriesObject> GetRadomePressureTimeseriesCollectionByCatalogIsNullAndName( string name )
        {
            throw new NotImplementedException( );
        }
        // ---------------------------------------------------------------------
        // RadomeTemperatureTimeseries queries
        // ---------------------------------------------------------------------
        public SimpleRadomeTemperatureTimeseriesDataReader GetRadomeTemperatureTimeseriesByIdDataReader( Guid id )
        {
            const string sql = SimpleRadomeTemperatureTimeseriesDataReader.BaseQuery + "WHERE " + SimpleRadomeTemperatureTimeseriesDataReader.ViewAliasName + ".[Id] = @id"; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                sqlCommandParameters.AddGuid( "@id", id );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleRadomeTemperatureTimeseriesDataReader = new SimpleRadomeTemperatureTimeseriesDataReader( _loggerFactory, sqlDataReader );
                return simpleRadomeTemperatureTimeseriesDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public RadomeTemperatureTimeseriesObject? GetRadomeTemperatureTimeseriesById( Guid id )
        {
            var simpleRadomeTemperatureTimeseriesDataReader = GetRadomeTemperatureTimeseriesByIdDataReader( id );
            using ( simpleRadomeTemperatureTimeseriesDataReader )
            {
                if ( simpleRadomeTemperatureTimeseriesDataReader.Read( ) )
                {
                    var result = simpleRadomeTemperatureTimeseriesDataReader.GetDataObject( );
                    return result;
                }
            }
            return null;
        }

        public void GetRadomeTemperatureTimeseriesById( Guid id, Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleRadomeTemperatureTimeseriesDataReader = GetRadomeTemperatureTimeseriesByIdDataReader( id );
                using ( simpleRadomeTemperatureTimeseriesDataReader )
                {
                    if ( simpleRadomeTemperatureTimeseriesDataReader.Read( ) )
                    {
                        destinationWriter.Write( true );
                        simpleRadomeTemperatureTimeseriesDataReader.WriteTo( destinationWriter );
                    }
                    else
                    {
                        destinationWriter.Write( false );
                    }
                }
            }
        }

        public SimpleRadomeTemperatureTimeseriesDataReader GetRadomeTemperatureTimeseriesCollectionDataReader( )
        {
            const string sql = SimpleRadomeTemperatureTimeseriesDataReader.BaseQuery; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleRadomeTemperatureTimeseriesDataReader = new SimpleRadomeTemperatureTimeseriesDataReader( _loggerFactory, sqlDataReader );
                return simpleRadomeTemperatureTimeseriesDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public IList<RadomeTemperatureTimeseriesObject> GetRadomeTemperatureTimeseriesCollection( )
        {
            var result = new List<RadomeTemperatureTimeseriesObject>( );
            var simpleRadomeTemperatureTimeseriesDataReader = GetRadomeTemperatureTimeseriesCollectionDataReader( );
            using ( simpleRadomeTemperatureTimeseriesDataReader )
            {
                while ( simpleRadomeTemperatureTimeseriesDataReader.Read( ) )
                {
                    var data = simpleRadomeTemperatureTimeseriesDataReader.GetDataObject( );
                    result.Add( data );
                }
            }
            return result;
        }

        public void GetRadomeTemperatureTimeseriesCollection( Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleRadomeTemperatureTimeseriesDataReader = GetRadomeTemperatureTimeseriesCollectionDataReader( );
                using ( simpleRadomeTemperatureTimeseriesDataReader )
                {
                    simpleRadomeTemperatureTimeseriesDataReader.WriteResultSetTo( destinationWriter );
                }
            }
        }

        public SimpleRadomeTemperatureTimeseriesDataReader GetRadomeTemperatureTimeseriesCollectionByCatalogDataReader( Guid? catalog )
        {
            const string sql = SimpleRadomeTemperatureTimeseriesDataReader.BaseQuery + " WHERE " +
                    SimpleRadomeTemperatureTimeseriesDataReader.ViewAliasName + ".[Catalog] = @catalog " +
                    " ORDER BY " + SimpleRadomeTemperatureTimeseriesDataReader.ViewAliasName + ".[Catalog]," +SimpleRadomeTemperatureTimeseriesDataReader.ViewAliasName + ".[Name]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var catalogParameter = sqlCommandParameters.AddReference( "@catalog", catalog );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleRadomeTemperatureTimeseriesDataReader = new SimpleRadomeTemperatureTimeseriesDataReader( _loggerFactory, sqlDataReader );
                return simpleRadomeTemperatureTimeseriesDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<RadomeTemperatureTimeseriesObject> GetRadomeTemperatureTimeseriesCollectionByCatalog( Guid? catalog )
        {
            throw new NotImplementedException( );
        }
        public IList<RadomeTemperatureTimeseriesObject> GetRadomeTemperatureTimeseriesCollectionByCatalogIsNull(  )
        {
            throw new NotImplementedException( );
        }
        public SimpleRadomeTemperatureTimeseriesDataReader GetRadomeTemperatureTimeseriesByCatalogAndNameDataReader( Guid? catalog, string name )
        {
            const string sql = SimpleRadomeTemperatureTimeseriesDataReader.BaseQuery + " WHERE " +
                    SimpleRadomeTemperatureTimeseriesDataReader.ViewAliasName + ".[Catalog] = @catalog AND " +
                    SimpleRadomeTemperatureTimeseriesDataReader.ViewAliasName + ".[Name] = @name " +
                    " ORDER BY " + SimpleRadomeTemperatureTimeseriesDataReader.ViewAliasName + ".[Catalog]," +SimpleRadomeTemperatureTimeseriesDataReader.ViewAliasName + ".[Name]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var catalogParameter = sqlCommandParameters.AddReference( "@catalog", catalog );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@name", name, 127 );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleRadomeTemperatureTimeseriesDataReader = new SimpleRadomeTemperatureTimeseriesDataReader( _loggerFactory, sqlDataReader );
                return simpleRadomeTemperatureTimeseriesDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public RadomeTemperatureTimeseriesObject? GetRadomeTemperatureTimeseriesByCatalogAndName( Guid? catalog, string name )
        {
            throw new NotImplementedException( );
        }
        public IList<RadomeTemperatureTimeseriesObject> GetRadomeTemperatureTimeseriesCollectionByCatalogIsNullAndName( string name )
        {
            throw new NotImplementedException( );
        }
        // ---------------------------------------------------------------------
        // VesselDraughtTimeseries queries
        // ---------------------------------------------------------------------
        public SimpleVesselDraughtTimeseriesDataReader GetVesselDraughtTimeseriesByIdDataReader( Guid id )
        {
            const string sql = SimpleVesselDraughtTimeseriesDataReader.BaseQuery + "WHERE " + SimpleVesselDraughtTimeseriesDataReader.ViewAliasName + ".[Id] = @id"; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                sqlCommandParameters.AddGuid( "@id", id );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleVesselDraughtTimeseriesDataReader = new SimpleVesselDraughtTimeseriesDataReader( _loggerFactory, sqlDataReader );
                return simpleVesselDraughtTimeseriesDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public VesselDraughtTimeseriesObject? GetVesselDraughtTimeseriesById( Guid id )
        {
            var simpleVesselDraughtTimeseriesDataReader = GetVesselDraughtTimeseriesByIdDataReader( id );
            using ( simpleVesselDraughtTimeseriesDataReader )
            {
                if ( simpleVesselDraughtTimeseriesDataReader.Read( ) )
                {
                    var result = simpleVesselDraughtTimeseriesDataReader.GetDataObject( );
                    return result;
                }
            }
            return null;
        }

        public void GetVesselDraughtTimeseriesById( Guid id, Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleVesselDraughtTimeseriesDataReader = GetVesselDraughtTimeseriesByIdDataReader( id );
                using ( simpleVesselDraughtTimeseriesDataReader )
                {
                    if ( simpleVesselDraughtTimeseriesDataReader.Read( ) )
                    {
                        destinationWriter.Write( true );
                        simpleVesselDraughtTimeseriesDataReader.WriteTo( destinationWriter );
                    }
                    else
                    {
                        destinationWriter.Write( false );
                    }
                }
            }
        }

        public SimpleVesselDraughtTimeseriesDataReader GetVesselDraughtTimeseriesCollectionDataReader( )
        {
            const string sql = SimpleVesselDraughtTimeseriesDataReader.BaseQuery; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleVesselDraughtTimeseriesDataReader = new SimpleVesselDraughtTimeseriesDataReader( _loggerFactory, sqlDataReader );
                return simpleVesselDraughtTimeseriesDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public IList<VesselDraughtTimeseriesObject> GetVesselDraughtTimeseriesCollection( )
        {
            var result = new List<VesselDraughtTimeseriesObject>( );
            var simpleVesselDraughtTimeseriesDataReader = GetVesselDraughtTimeseriesCollectionDataReader( );
            using ( simpleVesselDraughtTimeseriesDataReader )
            {
                while ( simpleVesselDraughtTimeseriesDataReader.Read( ) )
                {
                    var data = simpleVesselDraughtTimeseriesDataReader.GetDataObject( );
                    result.Add( data );
                }
            }
            return result;
        }

        public void GetVesselDraughtTimeseriesCollection( Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleVesselDraughtTimeseriesDataReader = GetVesselDraughtTimeseriesCollectionDataReader( );
                using ( simpleVesselDraughtTimeseriesDataReader )
                {
                    simpleVesselDraughtTimeseriesDataReader.WriteResultSetTo( destinationWriter );
                }
            }
        }

        public SimpleVesselDraughtTimeseriesDataReader GetVesselDraughtTimeseriesCollectionByCatalogDataReader( Guid? catalog )
        {
            const string sql = SimpleVesselDraughtTimeseriesDataReader.BaseQuery + " WHERE " +
                    SimpleVesselDraughtTimeseriesDataReader.ViewAliasName + ".[Catalog] = @catalog " +
                    " ORDER BY " + SimpleVesselDraughtTimeseriesDataReader.ViewAliasName + ".[Catalog]," +SimpleVesselDraughtTimeseriesDataReader.ViewAliasName + ".[Name]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var catalogParameter = sqlCommandParameters.AddReference( "@catalog", catalog );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleVesselDraughtTimeseriesDataReader = new SimpleVesselDraughtTimeseriesDataReader( _loggerFactory, sqlDataReader );
                return simpleVesselDraughtTimeseriesDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<VesselDraughtTimeseriesObject> GetVesselDraughtTimeseriesCollectionByCatalog( Guid? catalog )
        {
            throw new NotImplementedException( );
        }
        public IList<VesselDraughtTimeseriesObject> GetVesselDraughtTimeseriesCollectionByCatalogIsNull(  )
        {
            throw new NotImplementedException( );
        }
        public SimpleVesselDraughtTimeseriesDataReader GetVesselDraughtTimeseriesByCatalogAndNameDataReader( Guid? catalog, string name )
        {
            const string sql = SimpleVesselDraughtTimeseriesDataReader.BaseQuery + " WHERE " +
                    SimpleVesselDraughtTimeseriesDataReader.ViewAliasName + ".[Catalog] = @catalog AND " +
                    SimpleVesselDraughtTimeseriesDataReader.ViewAliasName + ".[Name] = @name " +
                    " ORDER BY " + SimpleVesselDraughtTimeseriesDataReader.ViewAliasName + ".[Catalog]," +SimpleVesselDraughtTimeseriesDataReader.ViewAliasName + ".[Name]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var catalogParameter = sqlCommandParameters.AddReference( "@catalog", catalog );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@name", name, 127 );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleVesselDraughtTimeseriesDataReader = new SimpleVesselDraughtTimeseriesDataReader( _loggerFactory, sqlDataReader );
                return simpleVesselDraughtTimeseriesDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public VesselDraughtTimeseriesObject? GetVesselDraughtTimeseriesByCatalogAndName( Guid? catalog, string name )
        {
            throw new NotImplementedException( );
        }
        public IList<VesselDraughtTimeseriesObject> GetVesselDraughtTimeseriesCollectionByCatalogIsNullAndName( string name )
        {
            throw new NotImplementedException( );
        }
        // ---------------------------------------------------------------------
        // ViewLatitudeTimeseries queries
        // ---------------------------------------------------------------------
        public SimpleViewLatitudeTimeseriesDataReader GetViewLatitudeTimeseriesByIdDataReader( Guid id )
        {
            const string sql = SimpleViewLatitudeTimeseriesDataReader.BaseQuery + "WHERE " + SimpleViewLatitudeTimeseriesDataReader.ViewAliasName + ".[Id] = @id"; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                sqlCommandParameters.AddGuid( "@id", id );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleViewLatitudeTimeseriesDataReader = new SimpleViewLatitudeTimeseriesDataReader( _loggerFactory, sqlDataReader );
                return simpleViewLatitudeTimeseriesDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public ViewLatitudeTimeseriesObject? GetViewLatitudeTimeseriesById( Guid id )
        {
            var simpleViewLatitudeTimeseriesDataReader = GetViewLatitudeTimeseriesByIdDataReader( id );
            using ( simpleViewLatitudeTimeseriesDataReader )
            {
                if ( simpleViewLatitudeTimeseriesDataReader.Read( ) )
                {
                    var result = simpleViewLatitudeTimeseriesDataReader.GetDataObject( );
                    return result;
                }
            }
            return null;
        }

        public void GetViewLatitudeTimeseriesById( Guid id, Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleViewLatitudeTimeseriesDataReader = GetViewLatitudeTimeseriesByIdDataReader( id );
                using ( simpleViewLatitudeTimeseriesDataReader )
                {
                    if ( simpleViewLatitudeTimeseriesDataReader.Read( ) )
                    {
                        destinationWriter.Write( true );
                        simpleViewLatitudeTimeseriesDataReader.WriteTo( destinationWriter );
                    }
                    else
                    {
                        destinationWriter.Write( false );
                    }
                }
            }
        }

        public SimpleViewLatitudeTimeseriesDataReader GetViewLatitudeTimeseriesCollectionDataReader( )
        {
            const string sql = SimpleViewLatitudeTimeseriesDataReader.BaseQuery; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleViewLatitudeTimeseriesDataReader = new SimpleViewLatitudeTimeseriesDataReader( _loggerFactory, sqlDataReader );
                return simpleViewLatitudeTimeseriesDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public IList<ViewLatitudeTimeseriesObject> GetViewLatitudeTimeseriesCollection( )
        {
            var result = new List<ViewLatitudeTimeseriesObject>( );
            var simpleViewLatitudeTimeseriesDataReader = GetViewLatitudeTimeseriesCollectionDataReader( );
            using ( simpleViewLatitudeTimeseriesDataReader )
            {
                while ( simpleViewLatitudeTimeseriesDataReader.Read( ) )
                {
                    var data = simpleViewLatitudeTimeseriesDataReader.GetDataObject( );
                    result.Add( data );
                }
            }
            return result;
        }

        public void GetViewLatitudeTimeseriesCollection( Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleViewLatitudeTimeseriesDataReader = GetViewLatitudeTimeseriesCollectionDataReader( );
                using ( simpleViewLatitudeTimeseriesDataReader )
                {
                    simpleViewLatitudeTimeseriesDataReader.WriteResultSetTo( destinationWriter );
                }
            }
        }

        public SimpleViewLatitudeTimeseriesDataReader GetViewLatitudeTimeseriesCollectionByCatalogDataReader( Guid? catalog )
        {
            const string sql = SimpleViewLatitudeTimeseriesDataReader.BaseQuery + " WHERE " +
                    SimpleViewLatitudeTimeseriesDataReader.ViewAliasName + ".[Catalog] = @catalog " +
                    " ORDER BY " + SimpleViewLatitudeTimeseriesDataReader.ViewAliasName + ".[Catalog]," +SimpleViewLatitudeTimeseriesDataReader.ViewAliasName + ".[Name]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var catalogParameter = sqlCommandParameters.AddReference( "@catalog", catalog );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleViewLatitudeTimeseriesDataReader = new SimpleViewLatitudeTimeseriesDataReader( _loggerFactory, sqlDataReader );
                return simpleViewLatitudeTimeseriesDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<ViewLatitudeTimeseriesObject> GetViewLatitudeTimeseriesCollectionByCatalog( Guid? catalog )
        {
            throw new NotImplementedException( );
        }
        public IList<ViewLatitudeTimeseriesObject> GetViewLatitudeTimeseriesCollectionByCatalogIsNull(  )
        {
            throw new NotImplementedException( );
        }
        public SimpleViewLatitudeTimeseriesDataReader GetViewLatitudeTimeseriesByCatalogAndNameDataReader( Guid? catalog, string name )
        {
            const string sql = SimpleViewLatitudeTimeseriesDataReader.BaseQuery + " WHERE " +
                    SimpleViewLatitudeTimeseriesDataReader.ViewAliasName + ".[Catalog] = @catalog AND " +
                    SimpleViewLatitudeTimeseriesDataReader.ViewAliasName + ".[Name] = @name " +
                    " ORDER BY " + SimpleViewLatitudeTimeseriesDataReader.ViewAliasName + ".[Catalog]," +SimpleViewLatitudeTimeseriesDataReader.ViewAliasName + ".[Name]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var catalogParameter = sqlCommandParameters.AddReference( "@catalog", catalog );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@name", name, 127 );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleViewLatitudeTimeseriesDataReader = new SimpleViewLatitudeTimeseriesDataReader( _loggerFactory, sqlDataReader );
                return simpleViewLatitudeTimeseriesDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public ViewLatitudeTimeseriesObject? GetViewLatitudeTimeseriesByCatalogAndName( Guid? catalog, string name )
        {
            throw new NotImplementedException( );
        }
        public IList<ViewLatitudeTimeseriesObject> GetViewLatitudeTimeseriesCollectionByCatalogIsNullAndName( string name )
        {
            throw new NotImplementedException( );
        }
        // ---------------------------------------------------------------------
        // ViewLongitudeTimeseries queries
        // ---------------------------------------------------------------------
        public SimpleViewLongitudeTimeseriesDataReader GetViewLongitudeTimeseriesByIdDataReader( Guid id )
        {
            const string sql = SimpleViewLongitudeTimeseriesDataReader.BaseQuery + "WHERE " + SimpleViewLongitudeTimeseriesDataReader.ViewAliasName + ".[Id] = @id"; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                sqlCommandParameters.AddGuid( "@id", id );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleViewLongitudeTimeseriesDataReader = new SimpleViewLongitudeTimeseriesDataReader( _loggerFactory, sqlDataReader );
                return simpleViewLongitudeTimeseriesDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public ViewLongitudeTimeseriesObject? GetViewLongitudeTimeseriesById( Guid id )
        {
            var simpleViewLongitudeTimeseriesDataReader = GetViewLongitudeTimeseriesByIdDataReader( id );
            using ( simpleViewLongitudeTimeseriesDataReader )
            {
                if ( simpleViewLongitudeTimeseriesDataReader.Read( ) )
                {
                    var result = simpleViewLongitudeTimeseriesDataReader.GetDataObject( );
                    return result;
                }
            }
            return null;
        }

        public void GetViewLongitudeTimeseriesById( Guid id, Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleViewLongitudeTimeseriesDataReader = GetViewLongitudeTimeseriesByIdDataReader( id );
                using ( simpleViewLongitudeTimeseriesDataReader )
                {
                    if ( simpleViewLongitudeTimeseriesDataReader.Read( ) )
                    {
                        destinationWriter.Write( true );
                        simpleViewLongitudeTimeseriesDataReader.WriteTo( destinationWriter );
                    }
                    else
                    {
                        destinationWriter.Write( false );
                    }
                }
            }
        }

        public SimpleViewLongitudeTimeseriesDataReader GetViewLongitudeTimeseriesCollectionDataReader( )
        {
            const string sql = SimpleViewLongitudeTimeseriesDataReader.BaseQuery; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleViewLongitudeTimeseriesDataReader = new SimpleViewLongitudeTimeseriesDataReader( _loggerFactory, sqlDataReader );
                return simpleViewLongitudeTimeseriesDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public IList<ViewLongitudeTimeseriesObject> GetViewLongitudeTimeseriesCollection( )
        {
            var result = new List<ViewLongitudeTimeseriesObject>( );
            var simpleViewLongitudeTimeseriesDataReader = GetViewLongitudeTimeseriesCollectionDataReader( );
            using ( simpleViewLongitudeTimeseriesDataReader )
            {
                while ( simpleViewLongitudeTimeseriesDataReader.Read( ) )
                {
                    var data = simpleViewLongitudeTimeseriesDataReader.GetDataObject( );
                    result.Add( data );
                }
            }
            return result;
        }

        public void GetViewLongitudeTimeseriesCollection( Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleViewLongitudeTimeseriesDataReader = GetViewLongitudeTimeseriesCollectionDataReader( );
                using ( simpleViewLongitudeTimeseriesDataReader )
                {
                    simpleViewLongitudeTimeseriesDataReader.WriteResultSetTo( destinationWriter );
                }
            }
        }

        public SimpleViewLongitudeTimeseriesDataReader GetViewLongitudeTimeseriesCollectionByCatalogDataReader( Guid? catalog )
        {
            const string sql = SimpleViewLongitudeTimeseriesDataReader.BaseQuery + " WHERE " +
                    SimpleViewLongitudeTimeseriesDataReader.ViewAliasName + ".[Catalog] = @catalog " +
                    " ORDER BY " + SimpleViewLongitudeTimeseriesDataReader.ViewAliasName + ".[Catalog]," +SimpleViewLongitudeTimeseriesDataReader.ViewAliasName + ".[Name]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var catalogParameter = sqlCommandParameters.AddReference( "@catalog", catalog );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleViewLongitudeTimeseriesDataReader = new SimpleViewLongitudeTimeseriesDataReader( _loggerFactory, sqlDataReader );
                return simpleViewLongitudeTimeseriesDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<ViewLongitudeTimeseriesObject> GetViewLongitudeTimeseriesCollectionByCatalog( Guid? catalog )
        {
            throw new NotImplementedException( );
        }
        public IList<ViewLongitudeTimeseriesObject> GetViewLongitudeTimeseriesCollectionByCatalogIsNull(  )
        {
            throw new NotImplementedException( );
        }
        public SimpleViewLongitudeTimeseriesDataReader GetViewLongitudeTimeseriesByCatalogAndNameDataReader( Guid? catalog, string name )
        {
            const string sql = SimpleViewLongitudeTimeseriesDataReader.BaseQuery + " WHERE " +
                    SimpleViewLongitudeTimeseriesDataReader.ViewAliasName + ".[Catalog] = @catalog AND " +
                    SimpleViewLongitudeTimeseriesDataReader.ViewAliasName + ".[Name] = @name " +
                    " ORDER BY " + SimpleViewLongitudeTimeseriesDataReader.ViewAliasName + ".[Catalog]," +SimpleViewLongitudeTimeseriesDataReader.ViewAliasName + ".[Name]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var catalogParameter = sqlCommandParameters.AddReference( "@catalog", catalog );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@name", name, 127 );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleViewLongitudeTimeseriesDataReader = new SimpleViewLongitudeTimeseriesDataReader( _loggerFactory, sqlDataReader );
                return simpleViewLongitudeTimeseriesDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public ViewLongitudeTimeseriesObject? GetViewLongitudeTimeseriesByCatalogAndName( Guid? catalog, string name )
        {
            throw new NotImplementedException( );
        }
        public IList<ViewLongitudeTimeseriesObject> GetViewLongitudeTimeseriesCollectionByCatalogIsNullAndName( string name )
        {
            throw new NotImplementedException( );
        }
        // ---------------------------------------------------------------------
        // ViewZoomLevelTimeseries queries
        // ---------------------------------------------------------------------
        public SimpleViewZoomLevelTimeseriesDataReader GetViewZoomLevelTimeseriesByIdDataReader( Guid id )
        {
            const string sql = SimpleViewZoomLevelTimeseriesDataReader.BaseQuery + "WHERE " + SimpleViewZoomLevelTimeseriesDataReader.ViewAliasName + ".[Id] = @id"; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                sqlCommandParameters.AddGuid( "@id", id );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleViewZoomLevelTimeseriesDataReader = new SimpleViewZoomLevelTimeseriesDataReader( _loggerFactory, sqlDataReader );
                return simpleViewZoomLevelTimeseriesDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public ViewZoomLevelTimeseriesObject? GetViewZoomLevelTimeseriesById( Guid id )
        {
            var simpleViewZoomLevelTimeseriesDataReader = GetViewZoomLevelTimeseriesByIdDataReader( id );
            using ( simpleViewZoomLevelTimeseriesDataReader )
            {
                if ( simpleViewZoomLevelTimeseriesDataReader.Read( ) )
                {
                    var result = simpleViewZoomLevelTimeseriesDataReader.GetDataObject( );
                    return result;
                }
            }
            return null;
        }

        public void GetViewZoomLevelTimeseriesById( Guid id, Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleViewZoomLevelTimeseriesDataReader = GetViewZoomLevelTimeseriesByIdDataReader( id );
                using ( simpleViewZoomLevelTimeseriesDataReader )
                {
                    if ( simpleViewZoomLevelTimeseriesDataReader.Read( ) )
                    {
                        destinationWriter.Write( true );
                        simpleViewZoomLevelTimeseriesDataReader.WriteTo( destinationWriter );
                    }
                    else
                    {
                        destinationWriter.Write( false );
                    }
                }
            }
        }

        public SimpleViewZoomLevelTimeseriesDataReader GetViewZoomLevelTimeseriesCollectionDataReader( )
        {
            const string sql = SimpleViewZoomLevelTimeseriesDataReader.BaseQuery; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleViewZoomLevelTimeseriesDataReader = new SimpleViewZoomLevelTimeseriesDataReader( _loggerFactory, sqlDataReader );
                return simpleViewZoomLevelTimeseriesDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public IList<ViewZoomLevelTimeseriesObject> GetViewZoomLevelTimeseriesCollection( )
        {
            var result = new List<ViewZoomLevelTimeseriesObject>( );
            var simpleViewZoomLevelTimeseriesDataReader = GetViewZoomLevelTimeseriesCollectionDataReader( );
            using ( simpleViewZoomLevelTimeseriesDataReader )
            {
                while ( simpleViewZoomLevelTimeseriesDataReader.Read( ) )
                {
                    var data = simpleViewZoomLevelTimeseriesDataReader.GetDataObject( );
                    result.Add( data );
                }
            }
            return result;
        }

        public void GetViewZoomLevelTimeseriesCollection( Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleViewZoomLevelTimeseriesDataReader = GetViewZoomLevelTimeseriesCollectionDataReader( );
                using ( simpleViewZoomLevelTimeseriesDataReader )
                {
                    simpleViewZoomLevelTimeseriesDataReader.WriteResultSetTo( destinationWriter );
                }
            }
        }

        public SimpleViewZoomLevelTimeseriesDataReader GetViewZoomLevelTimeseriesCollectionByCatalogDataReader( Guid? catalog )
        {
            const string sql = SimpleViewZoomLevelTimeseriesDataReader.BaseQuery + " WHERE " +
                    SimpleViewZoomLevelTimeseriesDataReader.ViewAliasName + ".[Catalog] = @catalog " +
                    " ORDER BY " + SimpleViewZoomLevelTimeseriesDataReader.ViewAliasName + ".[Catalog]," +SimpleViewZoomLevelTimeseriesDataReader.ViewAliasName + ".[Name]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var catalogParameter = sqlCommandParameters.AddReference( "@catalog", catalog );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleViewZoomLevelTimeseriesDataReader = new SimpleViewZoomLevelTimeseriesDataReader( _loggerFactory, sqlDataReader );
                return simpleViewZoomLevelTimeseriesDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<ViewZoomLevelTimeseriesObject> GetViewZoomLevelTimeseriesCollectionByCatalog( Guid? catalog )
        {
            throw new NotImplementedException( );
        }
        public IList<ViewZoomLevelTimeseriesObject> GetViewZoomLevelTimeseriesCollectionByCatalogIsNull(  )
        {
            throw new NotImplementedException( );
        }
        public SimpleViewZoomLevelTimeseriesDataReader GetViewZoomLevelTimeseriesByCatalogAndNameDataReader( Guid? catalog, string name )
        {
            const string sql = SimpleViewZoomLevelTimeseriesDataReader.BaseQuery + " WHERE " +
                    SimpleViewZoomLevelTimeseriesDataReader.ViewAliasName + ".[Catalog] = @catalog AND " +
                    SimpleViewZoomLevelTimeseriesDataReader.ViewAliasName + ".[Name] = @name " +
                    " ORDER BY " + SimpleViewZoomLevelTimeseriesDataReader.ViewAliasName + ".[Catalog]," +SimpleViewZoomLevelTimeseriesDataReader.ViewAliasName + ".[Name]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var catalogParameter = sqlCommandParameters.AddReference( "@catalog", catalog );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@name", name, 127 );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleViewZoomLevelTimeseriesDataReader = new SimpleViewZoomLevelTimeseriesDataReader( _loggerFactory, sqlDataReader );
                return simpleViewZoomLevelTimeseriesDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public ViewZoomLevelTimeseriesObject? GetViewZoomLevelTimeseriesByCatalogAndName( Guid? catalog, string name )
        {
            throw new NotImplementedException( );
        }
        public IList<ViewZoomLevelTimeseriesObject> GetViewZoomLevelTimeseriesCollectionByCatalogIsNullAndName( string name )
        {
            throw new NotImplementedException( );
        }
        // ---------------------------------------------------------------------
        // WeatherStationAbsoluteHumidityTimeseries queries
        // ---------------------------------------------------------------------
        public SimpleWeatherStationAbsoluteHumidityTimeseriesDataReader GetWeatherStationAbsoluteHumidityTimeseriesByIdDataReader( Guid id )
        {
            const string sql = SimpleWeatherStationAbsoluteHumidityTimeseriesDataReader.BaseQuery + "WHERE " + SimpleWeatherStationAbsoluteHumidityTimeseriesDataReader.ViewAliasName + ".[Id] = @id"; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                sqlCommandParameters.AddGuid( "@id", id );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleWeatherStationAbsoluteHumidityTimeseriesDataReader = new SimpleWeatherStationAbsoluteHumidityTimeseriesDataReader( _loggerFactory, sqlDataReader );
                return simpleWeatherStationAbsoluteHumidityTimeseriesDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public WeatherStationAbsoluteHumidityTimeseriesObject? GetWeatherStationAbsoluteHumidityTimeseriesById( Guid id )
        {
            var simpleWeatherStationAbsoluteHumidityTimeseriesDataReader = GetWeatherStationAbsoluteHumidityTimeseriesByIdDataReader( id );
            using ( simpleWeatherStationAbsoluteHumidityTimeseriesDataReader )
            {
                if ( simpleWeatherStationAbsoluteHumidityTimeseriesDataReader.Read( ) )
                {
                    var result = simpleWeatherStationAbsoluteHumidityTimeseriesDataReader.GetDataObject( );
                    return result;
                }
            }
            return null;
        }

        public void GetWeatherStationAbsoluteHumidityTimeseriesById( Guid id, Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleWeatherStationAbsoluteHumidityTimeseriesDataReader = GetWeatherStationAbsoluteHumidityTimeseriesByIdDataReader( id );
                using ( simpleWeatherStationAbsoluteHumidityTimeseriesDataReader )
                {
                    if ( simpleWeatherStationAbsoluteHumidityTimeseriesDataReader.Read( ) )
                    {
                        destinationWriter.Write( true );
                        simpleWeatherStationAbsoluteHumidityTimeseriesDataReader.WriteTo( destinationWriter );
                    }
                    else
                    {
                        destinationWriter.Write( false );
                    }
                }
            }
        }

        public SimpleWeatherStationAbsoluteHumidityTimeseriesDataReader GetWeatherStationAbsoluteHumidityTimeseriesCollectionDataReader( )
        {
            const string sql = SimpleWeatherStationAbsoluteHumidityTimeseriesDataReader.BaseQuery; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleWeatherStationAbsoluteHumidityTimeseriesDataReader = new SimpleWeatherStationAbsoluteHumidityTimeseriesDataReader( _loggerFactory, sqlDataReader );
                return simpleWeatherStationAbsoluteHumidityTimeseriesDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public IList<WeatherStationAbsoluteHumidityTimeseriesObject> GetWeatherStationAbsoluteHumidityTimeseriesCollection( )
        {
            var result = new List<WeatherStationAbsoluteHumidityTimeseriesObject>( );
            var simpleWeatherStationAbsoluteHumidityTimeseriesDataReader = GetWeatherStationAbsoluteHumidityTimeseriesCollectionDataReader( );
            using ( simpleWeatherStationAbsoluteHumidityTimeseriesDataReader )
            {
                while ( simpleWeatherStationAbsoluteHumidityTimeseriesDataReader.Read( ) )
                {
                    var data = simpleWeatherStationAbsoluteHumidityTimeseriesDataReader.GetDataObject( );
                    result.Add( data );
                }
            }
            return result;
        }

        public void GetWeatherStationAbsoluteHumidityTimeseriesCollection( Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleWeatherStationAbsoluteHumidityTimeseriesDataReader = GetWeatherStationAbsoluteHumidityTimeseriesCollectionDataReader( );
                using ( simpleWeatherStationAbsoluteHumidityTimeseriesDataReader )
                {
                    simpleWeatherStationAbsoluteHumidityTimeseriesDataReader.WriteResultSetTo( destinationWriter );
                }
            }
        }

        public SimpleWeatherStationAbsoluteHumidityTimeseriesDataReader GetWeatherStationAbsoluteHumidityTimeseriesCollectionByCatalogDataReader( Guid? catalog )
        {
            const string sql = SimpleWeatherStationAbsoluteHumidityTimeseriesDataReader.BaseQuery + " WHERE " +
                    SimpleWeatherStationAbsoluteHumidityTimeseriesDataReader.ViewAliasName + ".[Catalog] = @catalog " +
                    " ORDER BY " + SimpleWeatherStationAbsoluteHumidityTimeseriesDataReader.ViewAliasName + ".[Catalog]," +SimpleWeatherStationAbsoluteHumidityTimeseriesDataReader.ViewAliasName + ".[Name]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var catalogParameter = sqlCommandParameters.AddReference( "@catalog", catalog );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleWeatherStationAbsoluteHumidityTimeseriesDataReader = new SimpleWeatherStationAbsoluteHumidityTimeseriesDataReader( _loggerFactory, sqlDataReader );
                return simpleWeatherStationAbsoluteHumidityTimeseriesDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<WeatherStationAbsoluteHumidityTimeseriesObject> GetWeatherStationAbsoluteHumidityTimeseriesCollectionByCatalog( Guid? catalog )
        {
            throw new NotImplementedException( );
        }
        public IList<WeatherStationAbsoluteHumidityTimeseriesObject> GetWeatherStationAbsoluteHumidityTimeseriesCollectionByCatalogIsNull(  )
        {
            throw new NotImplementedException( );
        }
        public SimpleWeatherStationAbsoluteHumidityTimeseriesDataReader GetWeatherStationAbsoluteHumidityTimeseriesByCatalogAndNameDataReader( Guid? catalog, string name )
        {
            const string sql = SimpleWeatherStationAbsoluteHumidityTimeseriesDataReader.BaseQuery + " WHERE " +
                    SimpleWeatherStationAbsoluteHumidityTimeseriesDataReader.ViewAliasName + ".[Catalog] = @catalog AND " +
                    SimpleWeatherStationAbsoluteHumidityTimeseriesDataReader.ViewAliasName + ".[Name] = @name " +
                    " ORDER BY " + SimpleWeatherStationAbsoluteHumidityTimeseriesDataReader.ViewAliasName + ".[Catalog]," +SimpleWeatherStationAbsoluteHumidityTimeseriesDataReader.ViewAliasName + ".[Name]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var catalogParameter = sqlCommandParameters.AddReference( "@catalog", catalog );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@name", name, 127 );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleWeatherStationAbsoluteHumidityTimeseriesDataReader = new SimpleWeatherStationAbsoluteHumidityTimeseriesDataReader( _loggerFactory, sqlDataReader );
                return simpleWeatherStationAbsoluteHumidityTimeseriesDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public WeatherStationAbsoluteHumidityTimeseriesObject? GetWeatherStationAbsoluteHumidityTimeseriesByCatalogAndName( Guid? catalog, string name )
        {
            throw new NotImplementedException( );
        }
        public IList<WeatherStationAbsoluteHumidityTimeseriesObject> GetWeatherStationAbsoluteHumidityTimeseriesCollectionByCatalogIsNullAndName( string name )
        {
            throw new NotImplementedException( );
        }
        public SimpleWeatherStationAbsoluteHumidityTimeseriesDataReader GetWeatherStationAbsoluteHumidityTimeseriesByWeatherStationDataReader( Guid weatherStation )
        {
            const string sql = SimpleWeatherStationAbsoluteHumidityTimeseriesDataReader.BaseQuery + " WHERE " +
                    SimpleWeatherStationAbsoluteHumidityTimeseriesDataReader.ViewAliasName + ".[WeatherStation] = @weatherStation " +
                    " ORDER BY " + SimpleWeatherStationAbsoluteHumidityTimeseriesDataReader.ViewAliasName + ".[WeatherStation]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var weatherStationParameter = sqlCommandParameters.AddReference( "@weatherStation", weatherStation );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleWeatherStationAbsoluteHumidityTimeseriesDataReader = new SimpleWeatherStationAbsoluteHumidityTimeseriesDataReader( _loggerFactory, sqlDataReader );
                return simpleWeatherStationAbsoluteHumidityTimeseriesDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public WeatherStationAbsoluteHumidityTimeseriesObject? GetWeatherStationAbsoluteHumidityTimeseriesByWeatherStation( Guid weatherStation )
        {
            throw new NotImplementedException( );
        }
        // ---------------------------------------------------------------------
        // WeatherStationAirTemperatureTimeseries queries
        // ---------------------------------------------------------------------
        public SimpleWeatherStationAirTemperatureTimeseriesDataReader GetWeatherStationAirTemperatureTimeseriesByIdDataReader( Guid id )
        {
            const string sql = SimpleWeatherStationAirTemperatureTimeseriesDataReader.BaseQuery + "WHERE " + SimpleWeatherStationAirTemperatureTimeseriesDataReader.ViewAliasName + ".[Id] = @id"; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                sqlCommandParameters.AddGuid( "@id", id );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleWeatherStationAirTemperatureTimeseriesDataReader = new SimpleWeatherStationAirTemperatureTimeseriesDataReader( _loggerFactory, sqlDataReader );
                return simpleWeatherStationAirTemperatureTimeseriesDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public WeatherStationAirTemperatureTimeseriesObject? GetWeatherStationAirTemperatureTimeseriesById( Guid id )
        {
            var simpleWeatherStationAirTemperatureTimeseriesDataReader = GetWeatherStationAirTemperatureTimeseriesByIdDataReader( id );
            using ( simpleWeatherStationAirTemperatureTimeseriesDataReader )
            {
                if ( simpleWeatherStationAirTemperatureTimeseriesDataReader.Read( ) )
                {
                    var result = simpleWeatherStationAirTemperatureTimeseriesDataReader.GetDataObject( );
                    return result;
                }
            }
            return null;
        }

        public void GetWeatherStationAirTemperatureTimeseriesById( Guid id, Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleWeatherStationAirTemperatureTimeseriesDataReader = GetWeatherStationAirTemperatureTimeseriesByIdDataReader( id );
                using ( simpleWeatherStationAirTemperatureTimeseriesDataReader )
                {
                    if ( simpleWeatherStationAirTemperatureTimeseriesDataReader.Read( ) )
                    {
                        destinationWriter.Write( true );
                        simpleWeatherStationAirTemperatureTimeseriesDataReader.WriteTo( destinationWriter );
                    }
                    else
                    {
                        destinationWriter.Write( false );
                    }
                }
            }
        }

        public SimpleWeatherStationAirTemperatureTimeseriesDataReader GetWeatherStationAirTemperatureTimeseriesCollectionDataReader( )
        {
            const string sql = SimpleWeatherStationAirTemperatureTimeseriesDataReader.BaseQuery; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleWeatherStationAirTemperatureTimeseriesDataReader = new SimpleWeatherStationAirTemperatureTimeseriesDataReader( _loggerFactory, sqlDataReader );
                return simpleWeatherStationAirTemperatureTimeseriesDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public IList<WeatherStationAirTemperatureTimeseriesObject> GetWeatherStationAirTemperatureTimeseriesCollection( )
        {
            var result = new List<WeatherStationAirTemperatureTimeseriesObject>( );
            var simpleWeatherStationAirTemperatureTimeseriesDataReader = GetWeatherStationAirTemperatureTimeseriesCollectionDataReader( );
            using ( simpleWeatherStationAirTemperatureTimeseriesDataReader )
            {
                while ( simpleWeatherStationAirTemperatureTimeseriesDataReader.Read( ) )
                {
                    var data = simpleWeatherStationAirTemperatureTimeseriesDataReader.GetDataObject( );
                    result.Add( data );
                }
            }
            return result;
        }

        public void GetWeatherStationAirTemperatureTimeseriesCollection( Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleWeatherStationAirTemperatureTimeseriesDataReader = GetWeatherStationAirTemperatureTimeseriesCollectionDataReader( );
                using ( simpleWeatherStationAirTemperatureTimeseriesDataReader )
                {
                    simpleWeatherStationAirTemperatureTimeseriesDataReader.WriteResultSetTo( destinationWriter );
                }
            }
        }

        public SimpleWeatherStationAirTemperatureTimeseriesDataReader GetWeatherStationAirTemperatureTimeseriesCollectionByCatalogDataReader( Guid? catalog )
        {
            const string sql = SimpleWeatherStationAirTemperatureTimeseriesDataReader.BaseQuery + " WHERE " +
                    SimpleWeatherStationAirTemperatureTimeseriesDataReader.ViewAliasName + ".[Catalog] = @catalog " +
                    " ORDER BY " + SimpleWeatherStationAirTemperatureTimeseriesDataReader.ViewAliasName + ".[Catalog]," +SimpleWeatherStationAirTemperatureTimeseriesDataReader.ViewAliasName + ".[Name]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var catalogParameter = sqlCommandParameters.AddReference( "@catalog", catalog );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleWeatherStationAirTemperatureTimeseriesDataReader = new SimpleWeatherStationAirTemperatureTimeseriesDataReader( _loggerFactory, sqlDataReader );
                return simpleWeatherStationAirTemperatureTimeseriesDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<WeatherStationAirTemperatureTimeseriesObject> GetWeatherStationAirTemperatureTimeseriesCollectionByCatalog( Guid? catalog )
        {
            throw new NotImplementedException( );
        }
        public IList<WeatherStationAirTemperatureTimeseriesObject> GetWeatherStationAirTemperatureTimeseriesCollectionByCatalogIsNull(  )
        {
            throw new NotImplementedException( );
        }
        public SimpleWeatherStationAirTemperatureTimeseriesDataReader GetWeatherStationAirTemperatureTimeseriesByCatalogAndNameDataReader( Guid? catalog, string name )
        {
            const string sql = SimpleWeatherStationAirTemperatureTimeseriesDataReader.BaseQuery + " WHERE " +
                    SimpleWeatherStationAirTemperatureTimeseriesDataReader.ViewAliasName + ".[Catalog] = @catalog AND " +
                    SimpleWeatherStationAirTemperatureTimeseriesDataReader.ViewAliasName + ".[Name] = @name " +
                    " ORDER BY " + SimpleWeatherStationAirTemperatureTimeseriesDataReader.ViewAliasName + ".[Catalog]," +SimpleWeatherStationAirTemperatureTimeseriesDataReader.ViewAliasName + ".[Name]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var catalogParameter = sqlCommandParameters.AddReference( "@catalog", catalog );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@name", name, 127 );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleWeatherStationAirTemperatureTimeseriesDataReader = new SimpleWeatherStationAirTemperatureTimeseriesDataReader( _loggerFactory, sqlDataReader );
                return simpleWeatherStationAirTemperatureTimeseriesDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public WeatherStationAirTemperatureTimeseriesObject? GetWeatherStationAirTemperatureTimeseriesByCatalogAndName( Guid? catalog, string name )
        {
            throw new NotImplementedException( );
        }
        public IList<WeatherStationAirTemperatureTimeseriesObject> GetWeatherStationAirTemperatureTimeseriesCollectionByCatalogIsNullAndName( string name )
        {
            throw new NotImplementedException( );
        }
        public SimpleWeatherStationAirTemperatureTimeseriesDataReader GetWeatherStationAirTemperatureTimeseriesByWeatherStationDataReader( Guid weatherStation )
        {
            const string sql = SimpleWeatherStationAirTemperatureTimeseriesDataReader.BaseQuery + " WHERE " +
                    SimpleWeatherStationAirTemperatureTimeseriesDataReader.ViewAliasName + ".[WeatherStation] = @weatherStation " +
                    " ORDER BY " + SimpleWeatherStationAirTemperatureTimeseriesDataReader.ViewAliasName + ".[WeatherStation]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var weatherStationParameter = sqlCommandParameters.AddReference( "@weatherStation", weatherStation );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleWeatherStationAirTemperatureTimeseriesDataReader = new SimpleWeatherStationAirTemperatureTimeseriesDataReader( _loggerFactory, sqlDataReader );
                return simpleWeatherStationAirTemperatureTimeseriesDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public WeatherStationAirTemperatureTimeseriesObject? GetWeatherStationAirTemperatureTimeseriesByWeatherStation( Guid weatherStation )
        {
            throw new NotImplementedException( );
        }
        // ---------------------------------------------------------------------
        // WeatherStationBarometricPressureTimeseries queries
        // ---------------------------------------------------------------------
        public SimpleWeatherStationBarometricPressureTimeseriesDataReader GetWeatherStationBarometricPressureTimeseriesByIdDataReader( Guid id )
        {
            const string sql = SimpleWeatherStationBarometricPressureTimeseriesDataReader.BaseQuery + "WHERE " + SimpleWeatherStationBarometricPressureTimeseriesDataReader.ViewAliasName + ".[Id] = @id"; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                sqlCommandParameters.AddGuid( "@id", id );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleWeatherStationBarometricPressureTimeseriesDataReader = new SimpleWeatherStationBarometricPressureTimeseriesDataReader( _loggerFactory, sqlDataReader );
                return simpleWeatherStationBarometricPressureTimeseriesDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public WeatherStationBarometricPressureTimeseriesObject? GetWeatherStationBarometricPressureTimeseriesById( Guid id )
        {
            var simpleWeatherStationBarometricPressureTimeseriesDataReader = GetWeatherStationBarometricPressureTimeseriesByIdDataReader( id );
            using ( simpleWeatherStationBarometricPressureTimeseriesDataReader )
            {
                if ( simpleWeatherStationBarometricPressureTimeseriesDataReader.Read( ) )
                {
                    var result = simpleWeatherStationBarometricPressureTimeseriesDataReader.GetDataObject( );
                    return result;
                }
            }
            return null;
        }

        public void GetWeatherStationBarometricPressureTimeseriesById( Guid id, Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleWeatherStationBarometricPressureTimeseriesDataReader = GetWeatherStationBarometricPressureTimeseriesByIdDataReader( id );
                using ( simpleWeatherStationBarometricPressureTimeseriesDataReader )
                {
                    if ( simpleWeatherStationBarometricPressureTimeseriesDataReader.Read( ) )
                    {
                        destinationWriter.Write( true );
                        simpleWeatherStationBarometricPressureTimeseriesDataReader.WriteTo( destinationWriter );
                    }
                    else
                    {
                        destinationWriter.Write( false );
                    }
                }
            }
        }

        public SimpleWeatherStationBarometricPressureTimeseriesDataReader GetWeatherStationBarometricPressureTimeseriesCollectionDataReader( )
        {
            const string sql = SimpleWeatherStationBarometricPressureTimeseriesDataReader.BaseQuery; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleWeatherStationBarometricPressureTimeseriesDataReader = new SimpleWeatherStationBarometricPressureTimeseriesDataReader( _loggerFactory, sqlDataReader );
                return simpleWeatherStationBarometricPressureTimeseriesDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public IList<WeatherStationBarometricPressureTimeseriesObject> GetWeatherStationBarometricPressureTimeseriesCollection( )
        {
            var result = new List<WeatherStationBarometricPressureTimeseriesObject>( );
            var simpleWeatherStationBarometricPressureTimeseriesDataReader = GetWeatherStationBarometricPressureTimeseriesCollectionDataReader( );
            using ( simpleWeatherStationBarometricPressureTimeseriesDataReader )
            {
                while ( simpleWeatherStationBarometricPressureTimeseriesDataReader.Read( ) )
                {
                    var data = simpleWeatherStationBarometricPressureTimeseriesDataReader.GetDataObject( );
                    result.Add( data );
                }
            }
            return result;
        }

        public void GetWeatherStationBarometricPressureTimeseriesCollection( Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleWeatherStationBarometricPressureTimeseriesDataReader = GetWeatherStationBarometricPressureTimeseriesCollectionDataReader( );
                using ( simpleWeatherStationBarometricPressureTimeseriesDataReader )
                {
                    simpleWeatherStationBarometricPressureTimeseriesDataReader.WriteResultSetTo( destinationWriter );
                }
            }
        }

        public SimpleWeatherStationBarometricPressureTimeseriesDataReader GetWeatherStationBarometricPressureTimeseriesCollectionByCatalogDataReader( Guid? catalog )
        {
            const string sql = SimpleWeatherStationBarometricPressureTimeseriesDataReader.BaseQuery + " WHERE " +
                    SimpleWeatherStationBarometricPressureTimeseriesDataReader.ViewAliasName + ".[Catalog] = @catalog " +
                    " ORDER BY " + SimpleWeatherStationBarometricPressureTimeseriesDataReader.ViewAliasName + ".[Catalog]," +SimpleWeatherStationBarometricPressureTimeseriesDataReader.ViewAliasName + ".[Name]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var catalogParameter = sqlCommandParameters.AddReference( "@catalog", catalog );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleWeatherStationBarometricPressureTimeseriesDataReader = new SimpleWeatherStationBarometricPressureTimeseriesDataReader( _loggerFactory, sqlDataReader );
                return simpleWeatherStationBarometricPressureTimeseriesDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<WeatherStationBarometricPressureTimeseriesObject> GetWeatherStationBarometricPressureTimeseriesCollectionByCatalog( Guid? catalog )
        {
            throw new NotImplementedException( );
        }
        public IList<WeatherStationBarometricPressureTimeseriesObject> GetWeatherStationBarometricPressureTimeseriesCollectionByCatalogIsNull(  )
        {
            throw new NotImplementedException( );
        }
        public SimpleWeatherStationBarometricPressureTimeseriesDataReader GetWeatherStationBarometricPressureTimeseriesByCatalogAndNameDataReader( Guid? catalog, string name )
        {
            const string sql = SimpleWeatherStationBarometricPressureTimeseriesDataReader.BaseQuery + " WHERE " +
                    SimpleWeatherStationBarometricPressureTimeseriesDataReader.ViewAliasName + ".[Catalog] = @catalog AND " +
                    SimpleWeatherStationBarometricPressureTimeseriesDataReader.ViewAliasName + ".[Name] = @name " +
                    " ORDER BY " + SimpleWeatherStationBarometricPressureTimeseriesDataReader.ViewAliasName + ".[Catalog]," +SimpleWeatherStationBarometricPressureTimeseriesDataReader.ViewAliasName + ".[Name]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var catalogParameter = sqlCommandParameters.AddReference( "@catalog", catalog );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@name", name, 127 );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleWeatherStationBarometricPressureTimeseriesDataReader = new SimpleWeatherStationBarometricPressureTimeseriesDataReader( _loggerFactory, sqlDataReader );
                return simpleWeatherStationBarometricPressureTimeseriesDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public WeatherStationBarometricPressureTimeseriesObject? GetWeatherStationBarometricPressureTimeseriesByCatalogAndName( Guid? catalog, string name )
        {
            throw new NotImplementedException( );
        }
        public IList<WeatherStationBarometricPressureTimeseriesObject> GetWeatherStationBarometricPressureTimeseriesCollectionByCatalogIsNullAndName( string name )
        {
            throw new NotImplementedException( );
        }
        public SimpleWeatherStationBarometricPressureTimeseriesDataReader GetWeatherStationBarometricPressureTimeseriesByWeatherStationDataReader( Guid weatherStation )
        {
            const string sql = SimpleWeatherStationBarometricPressureTimeseriesDataReader.BaseQuery + " WHERE " +
                    SimpleWeatherStationBarometricPressureTimeseriesDataReader.ViewAliasName + ".[WeatherStation] = @weatherStation " +
                    " ORDER BY " + SimpleWeatherStationBarometricPressureTimeseriesDataReader.ViewAliasName + ".[WeatherStation]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var weatherStationParameter = sqlCommandParameters.AddReference( "@weatherStation", weatherStation );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleWeatherStationBarometricPressureTimeseriesDataReader = new SimpleWeatherStationBarometricPressureTimeseriesDataReader( _loggerFactory, sqlDataReader );
                return simpleWeatherStationBarometricPressureTimeseriesDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public WeatherStationBarometricPressureTimeseriesObject? GetWeatherStationBarometricPressureTimeseriesByWeatherStation( Guid weatherStation )
        {
            throw new NotImplementedException( );
        }
        // ---------------------------------------------------------------------
        // WeatherStationDewPointTimeseries queries
        // ---------------------------------------------------------------------
        public SimpleWeatherStationDewPointTimeseriesDataReader GetWeatherStationDewPointTimeseriesByIdDataReader( Guid id )
        {
            const string sql = SimpleWeatherStationDewPointTimeseriesDataReader.BaseQuery + "WHERE " + SimpleWeatherStationDewPointTimeseriesDataReader.ViewAliasName + ".[Id] = @id"; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                sqlCommandParameters.AddGuid( "@id", id );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleWeatherStationDewPointTimeseriesDataReader = new SimpleWeatherStationDewPointTimeseriesDataReader( _loggerFactory, sqlDataReader );
                return simpleWeatherStationDewPointTimeseriesDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public WeatherStationDewPointTimeseriesObject? GetWeatherStationDewPointTimeseriesById( Guid id )
        {
            var simpleWeatherStationDewPointTimeseriesDataReader = GetWeatherStationDewPointTimeseriesByIdDataReader( id );
            using ( simpleWeatherStationDewPointTimeseriesDataReader )
            {
                if ( simpleWeatherStationDewPointTimeseriesDataReader.Read( ) )
                {
                    var result = simpleWeatherStationDewPointTimeseriesDataReader.GetDataObject( );
                    return result;
                }
            }
            return null;
        }

        public void GetWeatherStationDewPointTimeseriesById( Guid id, Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleWeatherStationDewPointTimeseriesDataReader = GetWeatherStationDewPointTimeseriesByIdDataReader( id );
                using ( simpleWeatherStationDewPointTimeseriesDataReader )
                {
                    if ( simpleWeatherStationDewPointTimeseriesDataReader.Read( ) )
                    {
                        destinationWriter.Write( true );
                        simpleWeatherStationDewPointTimeseriesDataReader.WriteTo( destinationWriter );
                    }
                    else
                    {
                        destinationWriter.Write( false );
                    }
                }
            }
        }

        public SimpleWeatherStationDewPointTimeseriesDataReader GetWeatherStationDewPointTimeseriesCollectionDataReader( )
        {
            const string sql = SimpleWeatherStationDewPointTimeseriesDataReader.BaseQuery; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleWeatherStationDewPointTimeseriesDataReader = new SimpleWeatherStationDewPointTimeseriesDataReader( _loggerFactory, sqlDataReader );
                return simpleWeatherStationDewPointTimeseriesDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public IList<WeatherStationDewPointTimeseriesObject> GetWeatherStationDewPointTimeseriesCollection( )
        {
            var result = new List<WeatherStationDewPointTimeseriesObject>( );
            var simpleWeatherStationDewPointTimeseriesDataReader = GetWeatherStationDewPointTimeseriesCollectionDataReader( );
            using ( simpleWeatherStationDewPointTimeseriesDataReader )
            {
                while ( simpleWeatherStationDewPointTimeseriesDataReader.Read( ) )
                {
                    var data = simpleWeatherStationDewPointTimeseriesDataReader.GetDataObject( );
                    result.Add( data );
                }
            }
            return result;
        }

        public void GetWeatherStationDewPointTimeseriesCollection( Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleWeatherStationDewPointTimeseriesDataReader = GetWeatherStationDewPointTimeseriesCollectionDataReader( );
                using ( simpleWeatherStationDewPointTimeseriesDataReader )
                {
                    simpleWeatherStationDewPointTimeseriesDataReader.WriteResultSetTo( destinationWriter );
                }
            }
        }

        public SimpleWeatherStationDewPointTimeseriesDataReader GetWeatherStationDewPointTimeseriesCollectionByCatalogDataReader( Guid? catalog )
        {
            const string sql = SimpleWeatherStationDewPointTimeseriesDataReader.BaseQuery + " WHERE " +
                    SimpleWeatherStationDewPointTimeseriesDataReader.ViewAliasName + ".[Catalog] = @catalog " +
                    " ORDER BY " + SimpleWeatherStationDewPointTimeseriesDataReader.ViewAliasName + ".[Catalog]," +SimpleWeatherStationDewPointTimeseriesDataReader.ViewAliasName + ".[Name]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var catalogParameter = sqlCommandParameters.AddReference( "@catalog", catalog );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleWeatherStationDewPointTimeseriesDataReader = new SimpleWeatherStationDewPointTimeseriesDataReader( _loggerFactory, sqlDataReader );
                return simpleWeatherStationDewPointTimeseriesDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<WeatherStationDewPointTimeseriesObject> GetWeatherStationDewPointTimeseriesCollectionByCatalog( Guid? catalog )
        {
            throw new NotImplementedException( );
        }
        public IList<WeatherStationDewPointTimeseriesObject> GetWeatherStationDewPointTimeseriesCollectionByCatalogIsNull(  )
        {
            throw new NotImplementedException( );
        }
        public SimpleWeatherStationDewPointTimeseriesDataReader GetWeatherStationDewPointTimeseriesByCatalogAndNameDataReader( Guid? catalog, string name )
        {
            const string sql = SimpleWeatherStationDewPointTimeseriesDataReader.BaseQuery + " WHERE " +
                    SimpleWeatherStationDewPointTimeseriesDataReader.ViewAliasName + ".[Catalog] = @catalog AND " +
                    SimpleWeatherStationDewPointTimeseriesDataReader.ViewAliasName + ".[Name] = @name " +
                    " ORDER BY " + SimpleWeatherStationDewPointTimeseriesDataReader.ViewAliasName + ".[Catalog]," +SimpleWeatherStationDewPointTimeseriesDataReader.ViewAliasName + ".[Name]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var catalogParameter = sqlCommandParameters.AddReference( "@catalog", catalog );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@name", name, 127 );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleWeatherStationDewPointTimeseriesDataReader = new SimpleWeatherStationDewPointTimeseriesDataReader( _loggerFactory, sqlDataReader );
                return simpleWeatherStationDewPointTimeseriesDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public WeatherStationDewPointTimeseriesObject? GetWeatherStationDewPointTimeseriesByCatalogAndName( Guid? catalog, string name )
        {
            throw new NotImplementedException( );
        }
        public IList<WeatherStationDewPointTimeseriesObject> GetWeatherStationDewPointTimeseriesCollectionByCatalogIsNullAndName( string name )
        {
            throw new NotImplementedException( );
        }
        public SimpleWeatherStationDewPointTimeseriesDataReader GetWeatherStationDewPointTimeseriesByWeatherStationDataReader( Guid weatherStation )
        {
            const string sql = SimpleWeatherStationDewPointTimeseriesDataReader.BaseQuery + " WHERE " +
                    SimpleWeatherStationDewPointTimeseriesDataReader.ViewAliasName + ".[WeatherStation] = @weatherStation " +
                    " ORDER BY " + SimpleWeatherStationDewPointTimeseriesDataReader.ViewAliasName + ".[WeatherStation]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var weatherStationParameter = sqlCommandParameters.AddReference( "@weatherStation", weatherStation );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleWeatherStationDewPointTimeseriesDataReader = new SimpleWeatherStationDewPointTimeseriesDataReader( _loggerFactory, sqlDataReader );
                return simpleWeatherStationDewPointTimeseriesDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public WeatherStationDewPointTimeseriesObject? GetWeatherStationDewPointTimeseriesByWeatherStation( Guid weatherStation )
        {
            throw new NotImplementedException( );
        }
        // ---------------------------------------------------------------------
        // WeatherStationRelativeHumidityTimeseries queries
        // ---------------------------------------------------------------------
        public SimpleWeatherStationRelativeHumidityTimeseriesDataReader GetWeatherStationRelativeHumidityTimeseriesByIdDataReader( Guid id )
        {
            const string sql = SimpleWeatherStationRelativeHumidityTimeseriesDataReader.BaseQuery + "WHERE " + SimpleWeatherStationRelativeHumidityTimeseriesDataReader.ViewAliasName + ".[Id] = @id"; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                sqlCommandParameters.AddGuid( "@id", id );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleWeatherStationRelativeHumidityTimeseriesDataReader = new SimpleWeatherStationRelativeHumidityTimeseriesDataReader( _loggerFactory, sqlDataReader );
                return simpleWeatherStationRelativeHumidityTimeseriesDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public WeatherStationRelativeHumidityTimeseriesObject? GetWeatherStationRelativeHumidityTimeseriesById( Guid id )
        {
            var simpleWeatherStationRelativeHumidityTimeseriesDataReader = GetWeatherStationRelativeHumidityTimeseriesByIdDataReader( id );
            using ( simpleWeatherStationRelativeHumidityTimeseriesDataReader )
            {
                if ( simpleWeatherStationRelativeHumidityTimeseriesDataReader.Read( ) )
                {
                    var result = simpleWeatherStationRelativeHumidityTimeseriesDataReader.GetDataObject( );
                    return result;
                }
            }
            return null;
        }

        public void GetWeatherStationRelativeHumidityTimeseriesById( Guid id, Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleWeatherStationRelativeHumidityTimeseriesDataReader = GetWeatherStationRelativeHumidityTimeseriesByIdDataReader( id );
                using ( simpleWeatherStationRelativeHumidityTimeseriesDataReader )
                {
                    if ( simpleWeatherStationRelativeHumidityTimeseriesDataReader.Read( ) )
                    {
                        destinationWriter.Write( true );
                        simpleWeatherStationRelativeHumidityTimeseriesDataReader.WriteTo( destinationWriter );
                    }
                    else
                    {
                        destinationWriter.Write( false );
                    }
                }
            }
        }

        public SimpleWeatherStationRelativeHumidityTimeseriesDataReader GetWeatherStationRelativeHumidityTimeseriesCollectionDataReader( )
        {
            const string sql = SimpleWeatherStationRelativeHumidityTimeseriesDataReader.BaseQuery; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleWeatherStationRelativeHumidityTimeseriesDataReader = new SimpleWeatherStationRelativeHumidityTimeseriesDataReader( _loggerFactory, sqlDataReader );
                return simpleWeatherStationRelativeHumidityTimeseriesDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public IList<WeatherStationRelativeHumidityTimeseriesObject> GetWeatherStationRelativeHumidityTimeseriesCollection( )
        {
            var result = new List<WeatherStationRelativeHumidityTimeseriesObject>( );
            var simpleWeatherStationRelativeHumidityTimeseriesDataReader = GetWeatherStationRelativeHumidityTimeseriesCollectionDataReader( );
            using ( simpleWeatherStationRelativeHumidityTimeseriesDataReader )
            {
                while ( simpleWeatherStationRelativeHumidityTimeseriesDataReader.Read( ) )
                {
                    var data = simpleWeatherStationRelativeHumidityTimeseriesDataReader.GetDataObject( );
                    result.Add( data );
                }
            }
            return result;
        }

        public void GetWeatherStationRelativeHumidityTimeseriesCollection( Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleWeatherStationRelativeHumidityTimeseriesDataReader = GetWeatherStationRelativeHumidityTimeseriesCollectionDataReader( );
                using ( simpleWeatherStationRelativeHumidityTimeseriesDataReader )
                {
                    simpleWeatherStationRelativeHumidityTimeseriesDataReader.WriteResultSetTo( destinationWriter );
                }
            }
        }

        public SimpleWeatherStationRelativeHumidityTimeseriesDataReader GetWeatherStationRelativeHumidityTimeseriesCollectionByCatalogDataReader( Guid? catalog )
        {
            const string sql = SimpleWeatherStationRelativeHumidityTimeseriesDataReader.BaseQuery + " WHERE " +
                    SimpleWeatherStationRelativeHumidityTimeseriesDataReader.ViewAliasName + ".[Catalog] = @catalog " +
                    " ORDER BY " + SimpleWeatherStationRelativeHumidityTimeseriesDataReader.ViewAliasName + ".[Catalog]," +SimpleWeatherStationRelativeHumidityTimeseriesDataReader.ViewAliasName + ".[Name]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var catalogParameter = sqlCommandParameters.AddReference( "@catalog", catalog );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleWeatherStationRelativeHumidityTimeseriesDataReader = new SimpleWeatherStationRelativeHumidityTimeseriesDataReader( _loggerFactory, sqlDataReader );
                return simpleWeatherStationRelativeHumidityTimeseriesDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<WeatherStationRelativeHumidityTimeseriesObject> GetWeatherStationRelativeHumidityTimeseriesCollectionByCatalog( Guid? catalog )
        {
            throw new NotImplementedException( );
        }
        public IList<WeatherStationRelativeHumidityTimeseriesObject> GetWeatherStationRelativeHumidityTimeseriesCollectionByCatalogIsNull(  )
        {
            throw new NotImplementedException( );
        }
        public SimpleWeatherStationRelativeHumidityTimeseriesDataReader GetWeatherStationRelativeHumidityTimeseriesByCatalogAndNameDataReader( Guid? catalog, string name )
        {
            const string sql = SimpleWeatherStationRelativeHumidityTimeseriesDataReader.BaseQuery + " WHERE " +
                    SimpleWeatherStationRelativeHumidityTimeseriesDataReader.ViewAliasName + ".[Catalog] = @catalog AND " +
                    SimpleWeatherStationRelativeHumidityTimeseriesDataReader.ViewAliasName + ".[Name] = @name " +
                    " ORDER BY " + SimpleWeatherStationRelativeHumidityTimeseriesDataReader.ViewAliasName + ".[Catalog]," +SimpleWeatherStationRelativeHumidityTimeseriesDataReader.ViewAliasName + ".[Name]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var catalogParameter = sqlCommandParameters.AddReference( "@catalog", catalog );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@name", name, 127 );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleWeatherStationRelativeHumidityTimeseriesDataReader = new SimpleWeatherStationRelativeHumidityTimeseriesDataReader( _loggerFactory, sqlDataReader );
                return simpleWeatherStationRelativeHumidityTimeseriesDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public WeatherStationRelativeHumidityTimeseriesObject? GetWeatherStationRelativeHumidityTimeseriesByCatalogAndName( Guid? catalog, string name )
        {
            throw new NotImplementedException( );
        }
        public IList<WeatherStationRelativeHumidityTimeseriesObject> GetWeatherStationRelativeHumidityTimeseriesCollectionByCatalogIsNullAndName( string name )
        {
            throw new NotImplementedException( );
        }
        public SimpleWeatherStationRelativeHumidityTimeseriesDataReader GetWeatherStationRelativeHumidityTimeseriesByWeatherStationDataReader( Guid weatherStation )
        {
            const string sql = SimpleWeatherStationRelativeHumidityTimeseriesDataReader.BaseQuery + " WHERE " +
                    SimpleWeatherStationRelativeHumidityTimeseriesDataReader.ViewAliasName + ".[WeatherStation] = @weatherStation " +
                    " ORDER BY " + SimpleWeatherStationRelativeHumidityTimeseriesDataReader.ViewAliasName + ".[WeatherStation]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var weatherStationParameter = sqlCommandParameters.AddReference( "@weatherStation", weatherStation );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleWeatherStationRelativeHumidityTimeseriesDataReader = new SimpleWeatherStationRelativeHumidityTimeseriesDataReader( _loggerFactory, sqlDataReader );
                return simpleWeatherStationRelativeHumidityTimeseriesDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public WeatherStationRelativeHumidityTimeseriesObject? GetWeatherStationRelativeHumidityTimeseriesByWeatherStation( Guid weatherStation )
        {
            throw new NotImplementedException( );
        }
        // ---------------------------------------------------------------------
        // WeatherStationWaterTemperatureTimeseries queries
        // ---------------------------------------------------------------------
        public SimpleWeatherStationWaterTemperatureTimeseriesDataReader GetWeatherStationWaterTemperatureTimeseriesByIdDataReader( Guid id )
        {
            const string sql = SimpleWeatherStationWaterTemperatureTimeseriesDataReader.BaseQuery + "WHERE " + SimpleWeatherStationWaterTemperatureTimeseriesDataReader.ViewAliasName + ".[Id] = @id"; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                sqlCommandParameters.AddGuid( "@id", id );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleWeatherStationWaterTemperatureTimeseriesDataReader = new SimpleWeatherStationWaterTemperatureTimeseriesDataReader( _loggerFactory, sqlDataReader );
                return simpleWeatherStationWaterTemperatureTimeseriesDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public WeatherStationWaterTemperatureTimeseriesObject? GetWeatherStationWaterTemperatureTimeseriesById( Guid id )
        {
            var simpleWeatherStationWaterTemperatureTimeseriesDataReader = GetWeatherStationWaterTemperatureTimeseriesByIdDataReader( id );
            using ( simpleWeatherStationWaterTemperatureTimeseriesDataReader )
            {
                if ( simpleWeatherStationWaterTemperatureTimeseriesDataReader.Read( ) )
                {
                    var result = simpleWeatherStationWaterTemperatureTimeseriesDataReader.GetDataObject( );
                    return result;
                }
            }
            return null;
        }

        public void GetWeatherStationWaterTemperatureTimeseriesById( Guid id, Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleWeatherStationWaterTemperatureTimeseriesDataReader = GetWeatherStationWaterTemperatureTimeseriesByIdDataReader( id );
                using ( simpleWeatherStationWaterTemperatureTimeseriesDataReader )
                {
                    if ( simpleWeatherStationWaterTemperatureTimeseriesDataReader.Read( ) )
                    {
                        destinationWriter.Write( true );
                        simpleWeatherStationWaterTemperatureTimeseriesDataReader.WriteTo( destinationWriter );
                    }
                    else
                    {
                        destinationWriter.Write( false );
                    }
                }
            }
        }

        public SimpleWeatherStationWaterTemperatureTimeseriesDataReader GetWeatherStationWaterTemperatureTimeseriesCollectionDataReader( )
        {
            const string sql = SimpleWeatherStationWaterTemperatureTimeseriesDataReader.BaseQuery; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleWeatherStationWaterTemperatureTimeseriesDataReader = new SimpleWeatherStationWaterTemperatureTimeseriesDataReader( _loggerFactory, sqlDataReader );
                return simpleWeatherStationWaterTemperatureTimeseriesDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public IList<WeatherStationWaterTemperatureTimeseriesObject> GetWeatherStationWaterTemperatureTimeseriesCollection( )
        {
            var result = new List<WeatherStationWaterTemperatureTimeseriesObject>( );
            var simpleWeatherStationWaterTemperatureTimeseriesDataReader = GetWeatherStationWaterTemperatureTimeseriesCollectionDataReader( );
            using ( simpleWeatherStationWaterTemperatureTimeseriesDataReader )
            {
                while ( simpleWeatherStationWaterTemperatureTimeseriesDataReader.Read( ) )
                {
                    var data = simpleWeatherStationWaterTemperatureTimeseriesDataReader.GetDataObject( );
                    result.Add( data );
                }
            }
            return result;
        }

        public void GetWeatherStationWaterTemperatureTimeseriesCollection( Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleWeatherStationWaterTemperatureTimeseriesDataReader = GetWeatherStationWaterTemperatureTimeseriesCollectionDataReader( );
                using ( simpleWeatherStationWaterTemperatureTimeseriesDataReader )
                {
                    simpleWeatherStationWaterTemperatureTimeseriesDataReader.WriteResultSetTo( destinationWriter );
                }
            }
        }

        public SimpleWeatherStationWaterTemperatureTimeseriesDataReader GetWeatherStationWaterTemperatureTimeseriesCollectionByCatalogDataReader( Guid? catalog )
        {
            const string sql = SimpleWeatherStationWaterTemperatureTimeseriesDataReader.BaseQuery + " WHERE " +
                    SimpleWeatherStationWaterTemperatureTimeseriesDataReader.ViewAliasName + ".[Catalog] = @catalog " +
                    " ORDER BY " + SimpleWeatherStationWaterTemperatureTimeseriesDataReader.ViewAliasName + ".[Catalog]," +SimpleWeatherStationWaterTemperatureTimeseriesDataReader.ViewAliasName + ".[Name]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var catalogParameter = sqlCommandParameters.AddReference( "@catalog", catalog );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleWeatherStationWaterTemperatureTimeseriesDataReader = new SimpleWeatherStationWaterTemperatureTimeseriesDataReader( _loggerFactory, sqlDataReader );
                return simpleWeatherStationWaterTemperatureTimeseriesDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<WeatherStationWaterTemperatureTimeseriesObject> GetWeatherStationWaterTemperatureTimeseriesCollectionByCatalog( Guid? catalog )
        {
            throw new NotImplementedException( );
        }
        public IList<WeatherStationWaterTemperatureTimeseriesObject> GetWeatherStationWaterTemperatureTimeseriesCollectionByCatalogIsNull(  )
        {
            throw new NotImplementedException( );
        }
        public SimpleWeatherStationWaterTemperatureTimeseriesDataReader GetWeatherStationWaterTemperatureTimeseriesByCatalogAndNameDataReader( Guid? catalog, string name )
        {
            const string sql = SimpleWeatherStationWaterTemperatureTimeseriesDataReader.BaseQuery + " WHERE " +
                    SimpleWeatherStationWaterTemperatureTimeseriesDataReader.ViewAliasName + ".[Catalog] = @catalog AND " +
                    SimpleWeatherStationWaterTemperatureTimeseriesDataReader.ViewAliasName + ".[Name] = @name " +
                    " ORDER BY " + SimpleWeatherStationWaterTemperatureTimeseriesDataReader.ViewAliasName + ".[Catalog]," +SimpleWeatherStationWaterTemperatureTimeseriesDataReader.ViewAliasName + ".[Name]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var catalogParameter = sqlCommandParameters.AddReference( "@catalog", catalog );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@name", name, 127 );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleWeatherStationWaterTemperatureTimeseriesDataReader = new SimpleWeatherStationWaterTemperatureTimeseriesDataReader( _loggerFactory, sqlDataReader );
                return simpleWeatherStationWaterTemperatureTimeseriesDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public WeatherStationWaterTemperatureTimeseriesObject? GetWeatherStationWaterTemperatureTimeseriesByCatalogAndName( Guid? catalog, string name )
        {
            throw new NotImplementedException( );
        }
        public IList<WeatherStationWaterTemperatureTimeseriesObject> GetWeatherStationWaterTemperatureTimeseriesCollectionByCatalogIsNullAndName( string name )
        {
            throw new NotImplementedException( );
        }
        public SimpleWeatherStationWaterTemperatureTimeseriesDataReader GetWeatherStationWaterTemperatureTimeseriesByWeatherStationDataReader( Guid weatherStation )
        {
            const string sql = SimpleWeatherStationWaterTemperatureTimeseriesDataReader.BaseQuery + " WHERE " +
                    SimpleWeatherStationWaterTemperatureTimeseriesDataReader.ViewAliasName + ".[WeatherStation] = @weatherStation " +
                    " ORDER BY " + SimpleWeatherStationWaterTemperatureTimeseriesDataReader.ViewAliasName + ".[WeatherStation]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var weatherStationParameter = sqlCommandParameters.AddReference( "@weatherStation", weatherStation );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleWeatherStationWaterTemperatureTimeseriesDataReader = new SimpleWeatherStationWaterTemperatureTimeseriesDataReader( _loggerFactory, sqlDataReader );
                return simpleWeatherStationWaterTemperatureTimeseriesDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public WeatherStationWaterTemperatureTimeseriesObject? GetWeatherStationWaterTemperatureTimeseriesByWeatherStation( Guid weatherStation )
        {
            throw new NotImplementedException( );
        }
        // ---------------------------------------------------------------------
        // WeatherStationWindDirectionTimeseries queries
        // ---------------------------------------------------------------------
        public SimpleWeatherStationWindDirectionTimeseriesDataReader GetWeatherStationWindDirectionTimeseriesByIdDataReader( Guid id )
        {
            const string sql = SimpleWeatherStationWindDirectionTimeseriesDataReader.BaseQuery + "WHERE " + SimpleWeatherStationWindDirectionTimeseriesDataReader.ViewAliasName + ".[Id] = @id"; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                sqlCommandParameters.AddGuid( "@id", id );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleWeatherStationWindDirectionTimeseriesDataReader = new SimpleWeatherStationWindDirectionTimeseriesDataReader( _loggerFactory, sqlDataReader );
                return simpleWeatherStationWindDirectionTimeseriesDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public WeatherStationWindDirectionTimeseriesObject? GetWeatherStationWindDirectionTimeseriesById( Guid id )
        {
            var simpleWeatherStationWindDirectionTimeseriesDataReader = GetWeatherStationWindDirectionTimeseriesByIdDataReader( id );
            using ( simpleWeatherStationWindDirectionTimeseriesDataReader )
            {
                if ( simpleWeatherStationWindDirectionTimeseriesDataReader.Read( ) )
                {
                    var result = simpleWeatherStationWindDirectionTimeseriesDataReader.GetDataObject( );
                    return result;
                }
            }
            return null;
        }

        public void GetWeatherStationWindDirectionTimeseriesById( Guid id, Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleWeatherStationWindDirectionTimeseriesDataReader = GetWeatherStationWindDirectionTimeseriesByIdDataReader( id );
                using ( simpleWeatherStationWindDirectionTimeseriesDataReader )
                {
                    if ( simpleWeatherStationWindDirectionTimeseriesDataReader.Read( ) )
                    {
                        destinationWriter.Write( true );
                        simpleWeatherStationWindDirectionTimeseriesDataReader.WriteTo( destinationWriter );
                    }
                    else
                    {
                        destinationWriter.Write( false );
                    }
                }
            }
        }

        public SimpleWeatherStationWindDirectionTimeseriesDataReader GetWeatherStationWindDirectionTimeseriesCollectionDataReader( )
        {
            const string sql = SimpleWeatherStationWindDirectionTimeseriesDataReader.BaseQuery; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleWeatherStationWindDirectionTimeseriesDataReader = new SimpleWeatherStationWindDirectionTimeseriesDataReader( _loggerFactory, sqlDataReader );
                return simpleWeatherStationWindDirectionTimeseriesDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public IList<WeatherStationWindDirectionTimeseriesObject> GetWeatherStationWindDirectionTimeseriesCollection( )
        {
            var result = new List<WeatherStationWindDirectionTimeseriesObject>( );
            var simpleWeatherStationWindDirectionTimeseriesDataReader = GetWeatherStationWindDirectionTimeseriesCollectionDataReader( );
            using ( simpleWeatherStationWindDirectionTimeseriesDataReader )
            {
                while ( simpleWeatherStationWindDirectionTimeseriesDataReader.Read( ) )
                {
                    var data = simpleWeatherStationWindDirectionTimeseriesDataReader.GetDataObject( );
                    result.Add( data );
                }
            }
            return result;
        }

        public void GetWeatherStationWindDirectionTimeseriesCollection( Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleWeatherStationWindDirectionTimeseriesDataReader = GetWeatherStationWindDirectionTimeseriesCollectionDataReader( );
                using ( simpleWeatherStationWindDirectionTimeseriesDataReader )
                {
                    simpleWeatherStationWindDirectionTimeseriesDataReader.WriteResultSetTo( destinationWriter );
                }
            }
        }

        public SimpleWeatherStationWindDirectionTimeseriesDataReader GetWeatherStationWindDirectionTimeseriesCollectionByCatalogDataReader( Guid? catalog )
        {
            const string sql = SimpleWeatherStationWindDirectionTimeseriesDataReader.BaseQuery + " WHERE " +
                    SimpleWeatherStationWindDirectionTimeseriesDataReader.ViewAliasName + ".[Catalog] = @catalog " +
                    " ORDER BY " + SimpleWeatherStationWindDirectionTimeseriesDataReader.ViewAliasName + ".[Catalog]," +SimpleWeatherStationWindDirectionTimeseriesDataReader.ViewAliasName + ".[Name]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var catalogParameter = sqlCommandParameters.AddReference( "@catalog", catalog );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleWeatherStationWindDirectionTimeseriesDataReader = new SimpleWeatherStationWindDirectionTimeseriesDataReader( _loggerFactory, sqlDataReader );
                return simpleWeatherStationWindDirectionTimeseriesDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<WeatherStationWindDirectionTimeseriesObject> GetWeatherStationWindDirectionTimeseriesCollectionByCatalog( Guid? catalog )
        {
            throw new NotImplementedException( );
        }
        public IList<WeatherStationWindDirectionTimeseriesObject> GetWeatherStationWindDirectionTimeseriesCollectionByCatalogIsNull(  )
        {
            throw new NotImplementedException( );
        }
        public SimpleWeatherStationWindDirectionTimeseriesDataReader GetWeatherStationWindDirectionTimeseriesByCatalogAndNameDataReader( Guid? catalog, string name )
        {
            const string sql = SimpleWeatherStationWindDirectionTimeseriesDataReader.BaseQuery + " WHERE " +
                    SimpleWeatherStationWindDirectionTimeseriesDataReader.ViewAliasName + ".[Catalog] = @catalog AND " +
                    SimpleWeatherStationWindDirectionTimeseriesDataReader.ViewAliasName + ".[Name] = @name " +
                    " ORDER BY " + SimpleWeatherStationWindDirectionTimeseriesDataReader.ViewAliasName + ".[Catalog]," +SimpleWeatherStationWindDirectionTimeseriesDataReader.ViewAliasName + ".[Name]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var catalogParameter = sqlCommandParameters.AddReference( "@catalog", catalog );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@name", name, 127 );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleWeatherStationWindDirectionTimeseriesDataReader = new SimpleWeatherStationWindDirectionTimeseriesDataReader( _loggerFactory, sqlDataReader );
                return simpleWeatherStationWindDirectionTimeseriesDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public WeatherStationWindDirectionTimeseriesObject? GetWeatherStationWindDirectionTimeseriesByCatalogAndName( Guid? catalog, string name )
        {
            throw new NotImplementedException( );
        }
        public IList<WeatherStationWindDirectionTimeseriesObject> GetWeatherStationWindDirectionTimeseriesCollectionByCatalogIsNullAndName( string name )
        {
            throw new NotImplementedException( );
        }
        public SimpleWeatherStationWindDirectionTimeseriesDataReader GetWeatherStationWindDirectionTimeseriesByWeatherStationDataReader( Guid weatherStation )
        {
            const string sql = SimpleWeatherStationWindDirectionTimeseriesDataReader.BaseQuery + " WHERE " +
                    SimpleWeatherStationWindDirectionTimeseriesDataReader.ViewAliasName + ".[WeatherStation] = @weatherStation " +
                    " ORDER BY " + SimpleWeatherStationWindDirectionTimeseriesDataReader.ViewAliasName + ".[WeatherStation]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var weatherStationParameter = sqlCommandParameters.AddReference( "@weatherStation", weatherStation );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleWeatherStationWindDirectionTimeseriesDataReader = new SimpleWeatherStationWindDirectionTimeseriesDataReader( _loggerFactory, sqlDataReader );
                return simpleWeatherStationWindDirectionTimeseriesDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public WeatherStationWindDirectionTimeseriesObject? GetWeatherStationWindDirectionTimeseriesByWeatherStation( Guid weatherStation )
        {
            throw new NotImplementedException( );
        }
        // ---------------------------------------------------------------------
        // WeatherStationWindSpeedTimeseries queries
        // ---------------------------------------------------------------------
        public SimpleWeatherStationWindSpeedTimeseriesDataReader GetWeatherStationWindSpeedTimeseriesByIdDataReader( Guid id )
        {
            const string sql = SimpleWeatherStationWindSpeedTimeseriesDataReader.BaseQuery + "WHERE " + SimpleWeatherStationWindSpeedTimeseriesDataReader.ViewAliasName + ".[Id] = @id"; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                sqlCommandParameters.AddGuid( "@id", id );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleWeatherStationWindSpeedTimeseriesDataReader = new SimpleWeatherStationWindSpeedTimeseriesDataReader( _loggerFactory, sqlDataReader );
                return simpleWeatherStationWindSpeedTimeseriesDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public WeatherStationWindSpeedTimeseriesObject? GetWeatherStationWindSpeedTimeseriesById( Guid id )
        {
            var simpleWeatherStationWindSpeedTimeseriesDataReader = GetWeatherStationWindSpeedTimeseriesByIdDataReader( id );
            using ( simpleWeatherStationWindSpeedTimeseriesDataReader )
            {
                if ( simpleWeatherStationWindSpeedTimeseriesDataReader.Read( ) )
                {
                    var result = simpleWeatherStationWindSpeedTimeseriesDataReader.GetDataObject( );
                    return result;
                }
            }
            return null;
        }

        public void GetWeatherStationWindSpeedTimeseriesById( Guid id, Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleWeatherStationWindSpeedTimeseriesDataReader = GetWeatherStationWindSpeedTimeseriesByIdDataReader( id );
                using ( simpleWeatherStationWindSpeedTimeseriesDataReader )
                {
                    if ( simpleWeatherStationWindSpeedTimeseriesDataReader.Read( ) )
                    {
                        destinationWriter.Write( true );
                        simpleWeatherStationWindSpeedTimeseriesDataReader.WriteTo( destinationWriter );
                    }
                    else
                    {
                        destinationWriter.Write( false );
                    }
                }
            }
        }

        public SimpleWeatherStationWindSpeedTimeseriesDataReader GetWeatherStationWindSpeedTimeseriesCollectionDataReader( )
        {
            const string sql = SimpleWeatherStationWindSpeedTimeseriesDataReader.BaseQuery; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleWeatherStationWindSpeedTimeseriesDataReader = new SimpleWeatherStationWindSpeedTimeseriesDataReader( _loggerFactory, sqlDataReader );
                return simpleWeatherStationWindSpeedTimeseriesDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public IList<WeatherStationWindSpeedTimeseriesObject> GetWeatherStationWindSpeedTimeseriesCollection( )
        {
            var result = new List<WeatherStationWindSpeedTimeseriesObject>( );
            var simpleWeatherStationWindSpeedTimeseriesDataReader = GetWeatherStationWindSpeedTimeseriesCollectionDataReader( );
            using ( simpleWeatherStationWindSpeedTimeseriesDataReader )
            {
                while ( simpleWeatherStationWindSpeedTimeseriesDataReader.Read( ) )
                {
                    var data = simpleWeatherStationWindSpeedTimeseriesDataReader.GetDataObject( );
                    result.Add( data );
                }
            }
            return result;
        }

        public void GetWeatherStationWindSpeedTimeseriesCollection( Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleWeatherStationWindSpeedTimeseriesDataReader = GetWeatherStationWindSpeedTimeseriesCollectionDataReader( );
                using ( simpleWeatherStationWindSpeedTimeseriesDataReader )
                {
                    simpleWeatherStationWindSpeedTimeseriesDataReader.WriteResultSetTo( destinationWriter );
                }
            }
        }

        public SimpleWeatherStationWindSpeedTimeseriesDataReader GetWeatherStationWindSpeedTimeseriesCollectionByCatalogDataReader( Guid? catalog )
        {
            const string sql = SimpleWeatherStationWindSpeedTimeseriesDataReader.BaseQuery + " WHERE " +
                    SimpleWeatherStationWindSpeedTimeseriesDataReader.ViewAliasName + ".[Catalog] = @catalog " +
                    " ORDER BY " + SimpleWeatherStationWindSpeedTimeseriesDataReader.ViewAliasName + ".[Catalog]," +SimpleWeatherStationWindSpeedTimeseriesDataReader.ViewAliasName + ".[Name]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var catalogParameter = sqlCommandParameters.AddReference( "@catalog", catalog );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleWeatherStationWindSpeedTimeseriesDataReader = new SimpleWeatherStationWindSpeedTimeseriesDataReader( _loggerFactory, sqlDataReader );
                return simpleWeatherStationWindSpeedTimeseriesDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<WeatherStationWindSpeedTimeseriesObject> GetWeatherStationWindSpeedTimeseriesCollectionByCatalog( Guid? catalog )
        {
            throw new NotImplementedException( );
        }
        public IList<WeatherStationWindSpeedTimeseriesObject> GetWeatherStationWindSpeedTimeseriesCollectionByCatalogIsNull(  )
        {
            throw new NotImplementedException( );
        }
        public SimpleWeatherStationWindSpeedTimeseriesDataReader GetWeatherStationWindSpeedTimeseriesByCatalogAndNameDataReader( Guid? catalog, string name )
        {
            const string sql = SimpleWeatherStationWindSpeedTimeseriesDataReader.BaseQuery + " WHERE " +
                    SimpleWeatherStationWindSpeedTimeseriesDataReader.ViewAliasName + ".[Catalog] = @catalog AND " +
                    SimpleWeatherStationWindSpeedTimeseriesDataReader.ViewAliasName + ".[Name] = @name " +
                    " ORDER BY " + SimpleWeatherStationWindSpeedTimeseriesDataReader.ViewAliasName + ".[Catalog]," +SimpleWeatherStationWindSpeedTimeseriesDataReader.ViewAliasName + ".[Name]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var catalogParameter = sqlCommandParameters.AddReference( "@catalog", catalog );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@name", name, 127 );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleWeatherStationWindSpeedTimeseriesDataReader = new SimpleWeatherStationWindSpeedTimeseriesDataReader( _loggerFactory, sqlDataReader );
                return simpleWeatherStationWindSpeedTimeseriesDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public WeatherStationWindSpeedTimeseriesObject? GetWeatherStationWindSpeedTimeseriesByCatalogAndName( Guid? catalog, string name )
        {
            throw new NotImplementedException( );
        }
        public IList<WeatherStationWindSpeedTimeseriesObject> GetWeatherStationWindSpeedTimeseriesCollectionByCatalogIsNullAndName( string name )
        {
            throw new NotImplementedException( );
        }
        public SimpleWeatherStationWindSpeedTimeseriesDataReader GetWeatherStationWindSpeedTimeseriesByWeatherStationDataReader( Guid weatherStation )
        {
            const string sql = SimpleWeatherStationWindSpeedTimeseriesDataReader.BaseQuery + " WHERE " +
                    SimpleWeatherStationWindSpeedTimeseriesDataReader.ViewAliasName + ".[WeatherStation] = @weatherStation " +
                    " ORDER BY " + SimpleWeatherStationWindSpeedTimeseriesDataReader.ViewAliasName + ".[WeatherStation]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var weatherStationParameter = sqlCommandParameters.AddReference( "@weatherStation", weatherStation );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleWeatherStationWindSpeedTimeseriesDataReader = new SimpleWeatherStationWindSpeedTimeseriesDataReader( _loggerFactory, sqlDataReader );
                return simpleWeatherStationWindSpeedTimeseriesDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public WeatherStationWindSpeedTimeseriesObject? GetWeatherStationWindSpeedTimeseriesByWeatherStation( Guid weatherStation )
        {
            throw new NotImplementedException( );
        }
        // ---------------------------------------------------------------------
        // GeoPosition2DTimeseries queries
        // ---------------------------------------------------------------------
        public ComplexGeoPosition2DTimeseriesDataReader GetGeoPosition2DTimeseriesByIdDataReader( Guid id )
        {
            const string sql = ComplexGeoPosition2DTimeseriesDataReader.BaseQuery + "WHERE " + ComplexGeoPosition2DTimeseriesDataReader.ViewAliasName + ".[Id] = @id"; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                sqlCommandParameters.AddGuid( "@id", id );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var complexGeoPosition2DTimeseriesDataReader = new ComplexGeoPosition2DTimeseriesDataReader( _loggerFactory, sqlDataReader );
                return complexGeoPosition2DTimeseriesDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public GeoPosition2DTimeseriesObject? GetGeoPosition2DTimeseriesById( Guid id )
        {
            var complexGeoPosition2DTimeseriesDataReader = GetGeoPosition2DTimeseriesByIdDataReader( id );
            using ( complexGeoPosition2DTimeseriesDataReader )
            {
                if ( complexGeoPosition2DTimeseriesDataReader.Read( ) )
                {
                    var result = complexGeoPosition2DTimeseriesDataReader.GetDataObject( );
                    return result;
                }
            }
            return null;
        }

        public void GetGeoPosition2DTimeseriesById( Guid id, Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var complexGeoPosition2DTimeseriesDataReader = GetGeoPosition2DTimeseriesByIdDataReader( id );
                using ( complexGeoPosition2DTimeseriesDataReader )
                {
                    if ( complexGeoPosition2DTimeseriesDataReader.Read( ) )
                    {
                        destinationWriter.Write( true );
                        complexGeoPosition2DTimeseriesDataReader.WriteTo( destinationWriter );
                    }
                    else
                    {
                        destinationWriter.Write( false );
                    }
                }
            }
        }

        public ComplexGeoPosition2DTimeseriesDataReader GetGeoPosition2DTimeseriesCollectionDataReader( )
        {
            const string sql = ComplexGeoPosition2DTimeseriesDataReader.BaseQuery; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var complexGeoPosition2DTimeseriesDataReader = new ComplexGeoPosition2DTimeseriesDataReader( _loggerFactory, sqlDataReader );
                return complexGeoPosition2DTimeseriesDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public IList<GeoPosition2DTimeseriesObject> GetGeoPosition2DTimeseriesCollection( )
        {
            var result = new List<GeoPosition2DTimeseriesObject>( );
            var complexGeoPosition2DTimeseriesDataReader = GetGeoPosition2DTimeseriesCollectionDataReader( );
            using ( complexGeoPosition2DTimeseriesDataReader )
            {
                while ( complexGeoPosition2DTimeseriesDataReader.Read( ) )
                {
                    var data = complexGeoPosition2DTimeseriesDataReader.GetDataObject( );
                    result.Add( data );
                }
            }
            return result;
        }

        public void GetGeoPosition2DTimeseriesCollection( Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var complexGeoPosition2DTimeseriesDataReader = GetGeoPosition2DTimeseriesCollectionDataReader( );
                using ( complexGeoPosition2DTimeseriesDataReader )
                {
                    complexGeoPosition2DTimeseriesDataReader.WriteResultSetTo( destinationWriter );
                }
            }
        }

        public ComplexGeoPosition2DTimeseriesDataReader GetGeoPosition2DTimeseriesCollectionByCatalogDataReader( Guid? catalog )
        {
            const string sql = ComplexGeoPosition2DTimeseriesDataReader.BaseQuery + " WHERE " +
                    ComplexGeoPosition2DTimeseriesDataReader.ViewAliasName + ".[Catalog] = @catalog " +
                    " ORDER BY " + ComplexGeoPosition2DTimeseriesDataReader.ViewAliasName + ".[Catalog]," +ComplexGeoPosition2DTimeseriesDataReader.ViewAliasName + ".[Name]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var catalogParameter = sqlCommandParameters.AddReference( "@catalog", catalog );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var complexGeoPosition2DTimeseriesDataReader = new ComplexGeoPosition2DTimeseriesDataReader( _loggerFactory, sqlDataReader );
                return complexGeoPosition2DTimeseriesDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<GeoPosition2DTimeseriesObject> GetGeoPosition2DTimeseriesCollectionByCatalog( Guid? catalog )
        {
            throw new NotImplementedException( );
        }
        public IList<GeoPosition2DTimeseriesObject> GetGeoPosition2DTimeseriesCollectionByCatalogIsNull(  )
        {
            throw new NotImplementedException( );
        }
        public ComplexGeoPosition2DTimeseriesDataReader GetGeoPosition2DTimeseriesByCatalogAndNameDataReader( Guid? catalog, string name )
        {
            const string sql = ComplexGeoPosition2DTimeseriesDataReader.BaseQuery + " WHERE " +
                    ComplexGeoPosition2DTimeseriesDataReader.ViewAliasName + ".[Catalog] = @catalog AND " +
                    ComplexGeoPosition2DTimeseriesDataReader.ViewAliasName + ".[Name] = @name " +
                    " ORDER BY " + ComplexGeoPosition2DTimeseriesDataReader.ViewAliasName + ".[Catalog]," +ComplexGeoPosition2DTimeseriesDataReader.ViewAliasName + ".[Name]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var catalogParameter = sqlCommandParameters.AddReference( "@catalog", catalog );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@name", name, 127 );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var complexGeoPosition2DTimeseriesDataReader = new ComplexGeoPosition2DTimeseriesDataReader( _loggerFactory, sqlDataReader );
                return complexGeoPosition2DTimeseriesDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public GeoPosition2DTimeseriesObject? GetGeoPosition2DTimeseriesByCatalogAndName( Guid? catalog, string name )
        {
            throw new NotImplementedException( );
        }
        public IList<GeoPosition2DTimeseriesObject> GetGeoPosition2DTimeseriesCollectionByCatalogIsNullAndName( string name )
        {
            throw new NotImplementedException( );
        }
        // ---------------------------------------------------------------------
        // AisAidToNavigationPositionTimeseries queries
        // ---------------------------------------------------------------------
        public SimpleAisAidToNavigationPositionTimeseriesDataReader GetAisAidToNavigationPositionTimeseriesByIdDataReader( Guid id )
        {
            const string sql = SimpleAisAidToNavigationPositionTimeseriesDataReader.BaseQuery + "WHERE " + SimpleAisAidToNavigationPositionTimeseriesDataReader.ViewAliasName + ".[Id] = @id"; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                sqlCommandParameters.AddGuid( "@id", id );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleAisAidToNavigationPositionTimeseriesDataReader = new SimpleAisAidToNavigationPositionTimeseriesDataReader( _loggerFactory, sqlDataReader );
                return simpleAisAidToNavigationPositionTimeseriesDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public AisAidToNavigationPositionTimeseriesObject? GetAisAidToNavigationPositionTimeseriesById( Guid id )
        {
            var simpleAisAidToNavigationPositionTimeseriesDataReader = GetAisAidToNavigationPositionTimeseriesByIdDataReader( id );
            using ( simpleAisAidToNavigationPositionTimeseriesDataReader )
            {
                if ( simpleAisAidToNavigationPositionTimeseriesDataReader.Read( ) )
                {
                    var result = simpleAisAidToNavigationPositionTimeseriesDataReader.GetDataObject( );
                    return result;
                }
            }
            return null;
        }

        public void GetAisAidToNavigationPositionTimeseriesById( Guid id, Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleAisAidToNavigationPositionTimeseriesDataReader = GetAisAidToNavigationPositionTimeseriesByIdDataReader( id );
                using ( simpleAisAidToNavigationPositionTimeseriesDataReader )
                {
                    if ( simpleAisAidToNavigationPositionTimeseriesDataReader.Read( ) )
                    {
                        destinationWriter.Write( true );
                        simpleAisAidToNavigationPositionTimeseriesDataReader.WriteTo( destinationWriter );
                    }
                    else
                    {
                        destinationWriter.Write( false );
                    }
                }
            }
        }

        public SimpleAisAidToNavigationPositionTimeseriesDataReader GetAisAidToNavigationPositionTimeseriesCollectionDataReader( )
        {
            const string sql = SimpleAisAidToNavigationPositionTimeseriesDataReader.BaseQuery; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleAisAidToNavigationPositionTimeseriesDataReader = new SimpleAisAidToNavigationPositionTimeseriesDataReader( _loggerFactory, sqlDataReader );
                return simpleAisAidToNavigationPositionTimeseriesDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public IList<AisAidToNavigationPositionTimeseriesObject> GetAisAidToNavigationPositionTimeseriesCollection( )
        {
            var result = new List<AisAidToNavigationPositionTimeseriesObject>( );
            var simpleAisAidToNavigationPositionTimeseriesDataReader = GetAisAidToNavigationPositionTimeseriesCollectionDataReader( );
            using ( simpleAisAidToNavigationPositionTimeseriesDataReader )
            {
                while ( simpleAisAidToNavigationPositionTimeseriesDataReader.Read( ) )
                {
                    var data = simpleAisAidToNavigationPositionTimeseriesDataReader.GetDataObject( );
                    result.Add( data );
                }
            }
            return result;
        }

        public void GetAisAidToNavigationPositionTimeseriesCollection( Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleAisAidToNavigationPositionTimeseriesDataReader = GetAisAidToNavigationPositionTimeseriesCollectionDataReader( );
                using ( simpleAisAidToNavigationPositionTimeseriesDataReader )
                {
                    simpleAisAidToNavigationPositionTimeseriesDataReader.WriteResultSetTo( destinationWriter );
                }
            }
        }

        public SimpleAisAidToNavigationPositionTimeseriesDataReader GetAisAidToNavigationPositionTimeseriesCollectionByCatalogDataReader( Guid? catalog )
        {
            const string sql = SimpleAisAidToNavigationPositionTimeseriesDataReader.BaseQuery + " WHERE " +
                    SimpleAisAidToNavigationPositionTimeseriesDataReader.ViewAliasName + ".[Catalog] = @catalog " +
                    " ORDER BY " + SimpleAisAidToNavigationPositionTimeseriesDataReader.ViewAliasName + ".[Catalog]," +SimpleAisAidToNavigationPositionTimeseriesDataReader.ViewAliasName + ".[Name]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var catalogParameter = sqlCommandParameters.AddReference( "@catalog", catalog );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleAisAidToNavigationPositionTimeseriesDataReader = new SimpleAisAidToNavigationPositionTimeseriesDataReader( _loggerFactory, sqlDataReader );
                return simpleAisAidToNavigationPositionTimeseriesDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<AisAidToNavigationPositionTimeseriesObject> GetAisAidToNavigationPositionTimeseriesCollectionByCatalog( Guid? catalog )
        {
            throw new NotImplementedException( );
        }
        public IList<AisAidToNavigationPositionTimeseriesObject> GetAisAidToNavigationPositionTimeseriesCollectionByCatalogIsNull(  )
        {
            throw new NotImplementedException( );
        }
        public SimpleAisAidToNavigationPositionTimeseriesDataReader GetAisAidToNavigationPositionTimeseriesByCatalogAndNameDataReader( Guid? catalog, string name )
        {
            const string sql = SimpleAisAidToNavigationPositionTimeseriesDataReader.BaseQuery + " WHERE " +
                    SimpleAisAidToNavigationPositionTimeseriesDataReader.ViewAliasName + ".[Catalog] = @catalog AND " +
                    SimpleAisAidToNavigationPositionTimeseriesDataReader.ViewAliasName + ".[Name] = @name " +
                    " ORDER BY " + SimpleAisAidToNavigationPositionTimeseriesDataReader.ViewAliasName + ".[Catalog]," +SimpleAisAidToNavigationPositionTimeseriesDataReader.ViewAliasName + ".[Name]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var catalogParameter = sqlCommandParameters.AddReference( "@catalog", catalog );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@name", name, 127 );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleAisAidToNavigationPositionTimeseriesDataReader = new SimpleAisAidToNavigationPositionTimeseriesDataReader( _loggerFactory, sqlDataReader );
                return simpleAisAidToNavigationPositionTimeseriesDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public AisAidToNavigationPositionTimeseriesObject? GetAisAidToNavigationPositionTimeseriesByCatalogAndName( Guid? catalog, string name )
        {
            throw new NotImplementedException( );
        }
        public IList<AisAidToNavigationPositionTimeseriesObject> GetAisAidToNavigationPositionTimeseriesCollectionByCatalogIsNullAndName( string name )
        {
            throw new NotImplementedException( );
        }
        // ---------------------------------------------------------------------
        // GeoPosition3DTimeseries queries
        // ---------------------------------------------------------------------
        public SimpleGeoPosition3DTimeseriesDataReader GetGeoPosition3DTimeseriesByIdDataReader( Guid id )
        {
            const string sql = SimpleGeoPosition3DTimeseriesDataReader.BaseQuery + "WHERE " + SimpleGeoPosition3DTimeseriesDataReader.ViewAliasName + ".[Id] = @id"; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                sqlCommandParameters.AddGuid( "@id", id );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleGeoPosition3DTimeseriesDataReader = new SimpleGeoPosition3DTimeseriesDataReader( _loggerFactory, sqlDataReader );
                return simpleGeoPosition3DTimeseriesDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public GeoPosition3DTimeseriesObject? GetGeoPosition3DTimeseriesById( Guid id )
        {
            var simpleGeoPosition3DTimeseriesDataReader = GetGeoPosition3DTimeseriesByIdDataReader( id );
            using ( simpleGeoPosition3DTimeseriesDataReader )
            {
                if ( simpleGeoPosition3DTimeseriesDataReader.Read( ) )
                {
                    var result = simpleGeoPosition3DTimeseriesDataReader.GetDataObject( );
                    return result;
                }
            }
            return null;
        }

        public void GetGeoPosition3DTimeseriesById( Guid id, Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleGeoPosition3DTimeseriesDataReader = GetGeoPosition3DTimeseriesByIdDataReader( id );
                using ( simpleGeoPosition3DTimeseriesDataReader )
                {
                    if ( simpleGeoPosition3DTimeseriesDataReader.Read( ) )
                    {
                        destinationWriter.Write( true );
                        simpleGeoPosition3DTimeseriesDataReader.WriteTo( destinationWriter );
                    }
                    else
                    {
                        destinationWriter.Write( false );
                    }
                }
            }
        }

        public SimpleGeoPosition3DTimeseriesDataReader GetGeoPosition3DTimeseriesCollectionDataReader( )
        {
            const string sql = SimpleGeoPosition3DTimeseriesDataReader.BaseQuery; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleGeoPosition3DTimeseriesDataReader = new SimpleGeoPosition3DTimeseriesDataReader( _loggerFactory, sqlDataReader );
                return simpleGeoPosition3DTimeseriesDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public IList<GeoPosition3DTimeseriesObject> GetGeoPosition3DTimeseriesCollection( )
        {
            var result = new List<GeoPosition3DTimeseriesObject>( );
            var simpleGeoPosition3DTimeseriesDataReader = GetGeoPosition3DTimeseriesCollectionDataReader( );
            using ( simpleGeoPosition3DTimeseriesDataReader )
            {
                while ( simpleGeoPosition3DTimeseriesDataReader.Read( ) )
                {
                    var data = simpleGeoPosition3DTimeseriesDataReader.GetDataObject( );
                    result.Add( data );
                }
            }
            return result;
        }

        public void GetGeoPosition3DTimeseriesCollection( Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleGeoPosition3DTimeseriesDataReader = GetGeoPosition3DTimeseriesCollectionDataReader( );
                using ( simpleGeoPosition3DTimeseriesDataReader )
                {
                    simpleGeoPosition3DTimeseriesDataReader.WriteResultSetTo( destinationWriter );
                }
            }
        }

        public SimpleGeoPosition3DTimeseriesDataReader GetGeoPosition3DTimeseriesCollectionByCatalogDataReader( Guid? catalog )
        {
            const string sql = SimpleGeoPosition3DTimeseriesDataReader.BaseQuery + " WHERE " +
                    SimpleGeoPosition3DTimeseriesDataReader.ViewAliasName + ".[Catalog] = @catalog " +
                    " ORDER BY " + SimpleGeoPosition3DTimeseriesDataReader.ViewAliasName + ".[Catalog]," +SimpleGeoPosition3DTimeseriesDataReader.ViewAliasName + ".[Name]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var catalogParameter = sqlCommandParameters.AddReference( "@catalog", catalog );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleGeoPosition3DTimeseriesDataReader = new SimpleGeoPosition3DTimeseriesDataReader( _loggerFactory, sqlDataReader );
                return simpleGeoPosition3DTimeseriesDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<GeoPosition3DTimeseriesObject> GetGeoPosition3DTimeseriesCollectionByCatalog( Guid? catalog )
        {
            throw new NotImplementedException( );
        }
        public IList<GeoPosition3DTimeseriesObject> GetGeoPosition3DTimeseriesCollectionByCatalogIsNull(  )
        {
            throw new NotImplementedException( );
        }
        public SimpleGeoPosition3DTimeseriesDataReader GetGeoPosition3DTimeseriesByCatalogAndNameDataReader( Guid? catalog, string name )
        {
            const string sql = SimpleGeoPosition3DTimeseriesDataReader.BaseQuery + " WHERE " +
                    SimpleGeoPosition3DTimeseriesDataReader.ViewAliasName + ".[Catalog] = @catalog AND " +
                    SimpleGeoPosition3DTimeseriesDataReader.ViewAliasName + ".[Name] = @name " +
                    " ORDER BY " + SimpleGeoPosition3DTimeseriesDataReader.ViewAliasName + ".[Catalog]," +SimpleGeoPosition3DTimeseriesDataReader.ViewAliasName + ".[Name]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var catalogParameter = sqlCommandParameters.AddReference( "@catalog", catalog );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@name", name, 127 );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleGeoPosition3DTimeseriesDataReader = new SimpleGeoPosition3DTimeseriesDataReader( _loggerFactory, sqlDataReader );
                return simpleGeoPosition3DTimeseriesDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public GeoPosition3DTimeseriesObject? GetGeoPosition3DTimeseriesByCatalogAndName( Guid? catalog, string name )
        {
            throw new NotImplementedException( );
        }
        public IList<GeoPosition3DTimeseriesObject> GetGeoPosition3DTimeseriesCollectionByCatalogIsNullAndName( string name )
        {
            throw new NotImplementedException( );
        }
        // ---------------------------------------------------------------------
        // GuidTimeseries queries
        // ---------------------------------------------------------------------
        public SimpleGuidTimeseriesDataReader GetGuidTimeseriesByIdDataReader( Guid id )
        {
            const string sql = SimpleGuidTimeseriesDataReader.BaseQuery + "WHERE " + SimpleGuidTimeseriesDataReader.ViewAliasName + ".[Id] = @id"; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                sqlCommandParameters.AddGuid( "@id", id );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleGuidTimeseriesDataReader = new SimpleGuidTimeseriesDataReader( _loggerFactory, sqlDataReader );
                return simpleGuidTimeseriesDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public GuidTimeseriesObject? GetGuidTimeseriesById( Guid id )
        {
            var simpleGuidTimeseriesDataReader = GetGuidTimeseriesByIdDataReader( id );
            using ( simpleGuidTimeseriesDataReader )
            {
                if ( simpleGuidTimeseriesDataReader.Read( ) )
                {
                    var result = simpleGuidTimeseriesDataReader.GetDataObject( );
                    return result;
                }
            }
            return null;
        }

        public void GetGuidTimeseriesById( Guid id, Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleGuidTimeseriesDataReader = GetGuidTimeseriesByIdDataReader( id );
                using ( simpleGuidTimeseriesDataReader )
                {
                    if ( simpleGuidTimeseriesDataReader.Read( ) )
                    {
                        destinationWriter.Write( true );
                        simpleGuidTimeseriesDataReader.WriteTo( destinationWriter );
                    }
                    else
                    {
                        destinationWriter.Write( false );
                    }
                }
            }
        }

        public SimpleGuidTimeseriesDataReader GetGuidTimeseriesCollectionDataReader( )
        {
            const string sql = SimpleGuidTimeseriesDataReader.BaseQuery; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleGuidTimeseriesDataReader = new SimpleGuidTimeseriesDataReader( _loggerFactory, sqlDataReader );
                return simpleGuidTimeseriesDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public IList<GuidTimeseriesObject> GetGuidTimeseriesCollection( )
        {
            var result = new List<GuidTimeseriesObject>( );
            var simpleGuidTimeseriesDataReader = GetGuidTimeseriesCollectionDataReader( );
            using ( simpleGuidTimeseriesDataReader )
            {
                while ( simpleGuidTimeseriesDataReader.Read( ) )
                {
                    var data = simpleGuidTimeseriesDataReader.GetDataObject( );
                    result.Add( data );
                }
            }
            return result;
        }

        public void GetGuidTimeseriesCollection( Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleGuidTimeseriesDataReader = GetGuidTimeseriesCollectionDataReader( );
                using ( simpleGuidTimeseriesDataReader )
                {
                    simpleGuidTimeseriesDataReader.WriteResultSetTo( destinationWriter );
                }
            }
        }

        public SimpleGuidTimeseriesDataReader GetGuidTimeseriesCollectionByCatalogDataReader( Guid? catalog )
        {
            const string sql = SimpleGuidTimeseriesDataReader.BaseQuery + " WHERE " +
                    SimpleGuidTimeseriesDataReader.ViewAliasName + ".[Catalog] = @catalog " +
                    " ORDER BY " + SimpleGuidTimeseriesDataReader.ViewAliasName + ".[Catalog]," +SimpleGuidTimeseriesDataReader.ViewAliasName + ".[Name]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var catalogParameter = sqlCommandParameters.AddReference( "@catalog", catalog );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleGuidTimeseriesDataReader = new SimpleGuidTimeseriesDataReader( _loggerFactory, sqlDataReader );
                return simpleGuidTimeseriesDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<GuidTimeseriesObject> GetGuidTimeseriesCollectionByCatalog( Guid? catalog )
        {
            throw new NotImplementedException( );
        }
        public IList<GuidTimeseriesObject> GetGuidTimeseriesCollectionByCatalogIsNull(  )
        {
            throw new NotImplementedException( );
        }
        public SimpleGuidTimeseriesDataReader GetGuidTimeseriesByCatalogAndNameDataReader( Guid? catalog, string name )
        {
            const string sql = SimpleGuidTimeseriesDataReader.BaseQuery + " WHERE " +
                    SimpleGuidTimeseriesDataReader.ViewAliasName + ".[Catalog] = @catalog AND " +
                    SimpleGuidTimeseriesDataReader.ViewAliasName + ".[Name] = @name " +
                    " ORDER BY " + SimpleGuidTimeseriesDataReader.ViewAliasName + ".[Catalog]," +SimpleGuidTimeseriesDataReader.ViewAliasName + ".[Name]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var catalogParameter = sqlCommandParameters.AddReference( "@catalog", catalog );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@name", name, 127 );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleGuidTimeseriesDataReader = new SimpleGuidTimeseriesDataReader( _loggerFactory, sqlDataReader );
                return simpleGuidTimeseriesDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public GuidTimeseriesObject? GetGuidTimeseriesByCatalogAndName( Guid? catalog, string name )
        {
            throw new NotImplementedException( );
        }
        public IList<GuidTimeseriesObject> GetGuidTimeseriesCollectionByCatalogIsNullAndName( string name )
        {
            throw new NotImplementedException( );
        }
        // ---------------------------------------------------------------------
        // Int16Timeseries queries
        // ---------------------------------------------------------------------
        public SimpleInt16TimeseriesDataReader GetInt16TimeseriesByIdDataReader( Guid id )
        {
            const string sql = SimpleInt16TimeseriesDataReader.BaseQuery + "WHERE " + SimpleInt16TimeseriesDataReader.ViewAliasName + ".[Id] = @id"; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                sqlCommandParameters.AddGuid( "@id", id );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleInt16TimeseriesDataReader = new SimpleInt16TimeseriesDataReader( _loggerFactory, sqlDataReader );
                return simpleInt16TimeseriesDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public Int16TimeseriesObject? GetInt16TimeseriesById( Guid id )
        {
            var simpleInt16TimeseriesDataReader = GetInt16TimeseriesByIdDataReader( id );
            using ( simpleInt16TimeseriesDataReader )
            {
                if ( simpleInt16TimeseriesDataReader.Read( ) )
                {
                    var result = simpleInt16TimeseriesDataReader.GetDataObject( );
                    return result;
                }
            }
            return null;
        }

        public void GetInt16TimeseriesById( Guid id, Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleInt16TimeseriesDataReader = GetInt16TimeseriesByIdDataReader( id );
                using ( simpleInt16TimeseriesDataReader )
                {
                    if ( simpleInt16TimeseriesDataReader.Read( ) )
                    {
                        destinationWriter.Write( true );
                        simpleInt16TimeseriesDataReader.WriteTo( destinationWriter );
                    }
                    else
                    {
                        destinationWriter.Write( false );
                    }
                }
            }
        }

        public SimpleInt16TimeseriesDataReader GetInt16TimeseriesCollectionDataReader( )
        {
            const string sql = SimpleInt16TimeseriesDataReader.BaseQuery; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleInt16TimeseriesDataReader = new SimpleInt16TimeseriesDataReader( _loggerFactory, sqlDataReader );
                return simpleInt16TimeseriesDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public IList<Int16TimeseriesObject> GetInt16TimeseriesCollection( )
        {
            var result = new List<Int16TimeseriesObject>( );
            var simpleInt16TimeseriesDataReader = GetInt16TimeseriesCollectionDataReader( );
            using ( simpleInt16TimeseriesDataReader )
            {
                while ( simpleInt16TimeseriesDataReader.Read( ) )
                {
                    var data = simpleInt16TimeseriesDataReader.GetDataObject( );
                    result.Add( data );
                }
            }
            return result;
        }

        public void GetInt16TimeseriesCollection( Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleInt16TimeseriesDataReader = GetInt16TimeseriesCollectionDataReader( );
                using ( simpleInt16TimeseriesDataReader )
                {
                    simpleInt16TimeseriesDataReader.WriteResultSetTo( destinationWriter );
                }
            }
        }

        public SimpleInt16TimeseriesDataReader GetInt16TimeseriesCollectionByCatalogDataReader( Guid? catalog )
        {
            const string sql = SimpleInt16TimeseriesDataReader.BaseQuery + " WHERE " +
                    SimpleInt16TimeseriesDataReader.ViewAliasName + ".[Catalog] = @catalog " +
                    " ORDER BY " + SimpleInt16TimeseriesDataReader.ViewAliasName + ".[Catalog]," +SimpleInt16TimeseriesDataReader.ViewAliasName + ".[Name]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var catalogParameter = sqlCommandParameters.AddReference( "@catalog", catalog );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleInt16TimeseriesDataReader = new SimpleInt16TimeseriesDataReader( _loggerFactory, sqlDataReader );
                return simpleInt16TimeseriesDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<Int16TimeseriesObject> GetInt16TimeseriesCollectionByCatalog( Guid? catalog )
        {
            throw new NotImplementedException( );
        }
        public IList<Int16TimeseriesObject> GetInt16TimeseriesCollectionByCatalogIsNull(  )
        {
            throw new NotImplementedException( );
        }
        public SimpleInt16TimeseriesDataReader GetInt16TimeseriesByCatalogAndNameDataReader( Guid? catalog, string name )
        {
            const string sql = SimpleInt16TimeseriesDataReader.BaseQuery + " WHERE " +
                    SimpleInt16TimeseriesDataReader.ViewAliasName + ".[Catalog] = @catalog AND " +
                    SimpleInt16TimeseriesDataReader.ViewAliasName + ".[Name] = @name " +
                    " ORDER BY " + SimpleInt16TimeseriesDataReader.ViewAliasName + ".[Catalog]," +SimpleInt16TimeseriesDataReader.ViewAliasName + ".[Name]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var catalogParameter = sqlCommandParameters.AddReference( "@catalog", catalog );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@name", name, 127 );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleInt16TimeseriesDataReader = new SimpleInt16TimeseriesDataReader( _loggerFactory, sqlDataReader );
                return simpleInt16TimeseriesDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public Int16TimeseriesObject? GetInt16TimeseriesByCatalogAndName( Guid? catalog, string name )
        {
            throw new NotImplementedException( );
        }
        public IList<Int16TimeseriesObject> GetInt16TimeseriesCollectionByCatalogIsNullAndName( string name )
        {
            throw new NotImplementedException( );
        }
        // ---------------------------------------------------------------------
        // Int32Timeseries queries
        // ---------------------------------------------------------------------
        public ComplexInt32TimeseriesDataReader GetInt32TimeseriesByIdDataReader( Guid id )
        {
            const string sql = ComplexInt32TimeseriesDataReader.BaseQuery + "WHERE " + ComplexInt32TimeseriesDataReader.ViewAliasName + ".[Id] = @id"; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                sqlCommandParameters.AddGuid( "@id", id );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var complexInt32TimeseriesDataReader = new ComplexInt32TimeseriesDataReader( _loggerFactory, sqlDataReader );
                return complexInt32TimeseriesDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public Int32TimeseriesObject? GetInt32TimeseriesById( Guid id )
        {
            var complexInt32TimeseriesDataReader = GetInt32TimeseriesByIdDataReader( id );
            using ( complexInt32TimeseriesDataReader )
            {
                if ( complexInt32TimeseriesDataReader.Read( ) )
                {
                    var result = complexInt32TimeseriesDataReader.GetDataObject( );
                    return result;
                }
            }
            return null;
        }

        public void GetInt32TimeseriesById( Guid id, Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var complexInt32TimeseriesDataReader = GetInt32TimeseriesByIdDataReader( id );
                using ( complexInt32TimeseriesDataReader )
                {
                    if ( complexInt32TimeseriesDataReader.Read( ) )
                    {
                        destinationWriter.Write( true );
                        complexInt32TimeseriesDataReader.WriteTo( destinationWriter );
                    }
                    else
                    {
                        destinationWriter.Write( false );
                    }
                }
            }
        }

        public ComplexInt32TimeseriesDataReader GetInt32TimeseriesCollectionDataReader( )
        {
            const string sql = ComplexInt32TimeseriesDataReader.BaseQuery; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var complexInt32TimeseriesDataReader = new ComplexInt32TimeseriesDataReader( _loggerFactory, sqlDataReader );
                return complexInt32TimeseriesDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public IList<Int32TimeseriesObject> GetInt32TimeseriesCollection( )
        {
            var result = new List<Int32TimeseriesObject>( );
            var complexInt32TimeseriesDataReader = GetInt32TimeseriesCollectionDataReader( );
            using ( complexInt32TimeseriesDataReader )
            {
                while ( complexInt32TimeseriesDataReader.Read( ) )
                {
                    var data = complexInt32TimeseriesDataReader.GetDataObject( );
                    result.Add( data );
                }
            }
            return result;
        }

        public void GetInt32TimeseriesCollection( Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var complexInt32TimeseriesDataReader = GetInt32TimeseriesCollectionDataReader( );
                using ( complexInt32TimeseriesDataReader )
                {
                    complexInt32TimeseriesDataReader.WriteResultSetTo( destinationWriter );
                }
            }
        }

        public ComplexInt32TimeseriesDataReader GetInt32TimeseriesCollectionByCatalogDataReader( Guid? catalog )
        {
            const string sql = ComplexInt32TimeseriesDataReader.BaseQuery + " WHERE " +
                    ComplexInt32TimeseriesDataReader.ViewAliasName + ".[Catalog] = @catalog " +
                    " ORDER BY " + ComplexInt32TimeseriesDataReader.ViewAliasName + ".[Catalog]," +ComplexInt32TimeseriesDataReader.ViewAliasName + ".[Name]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var catalogParameter = sqlCommandParameters.AddReference( "@catalog", catalog );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var complexInt32TimeseriesDataReader = new ComplexInt32TimeseriesDataReader( _loggerFactory, sqlDataReader );
                return complexInt32TimeseriesDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<Int32TimeseriesObject> GetInt32TimeseriesCollectionByCatalog( Guid? catalog )
        {
            throw new NotImplementedException( );
        }
        public IList<Int32TimeseriesObject> GetInt32TimeseriesCollectionByCatalogIsNull(  )
        {
            throw new NotImplementedException( );
        }
        public ComplexInt32TimeseriesDataReader GetInt32TimeseriesByCatalogAndNameDataReader( Guid? catalog, string name )
        {
            const string sql = ComplexInt32TimeseriesDataReader.BaseQuery + " WHERE " +
                    ComplexInt32TimeseriesDataReader.ViewAliasName + ".[Catalog] = @catalog AND " +
                    ComplexInt32TimeseriesDataReader.ViewAliasName + ".[Name] = @name " +
                    " ORDER BY " + ComplexInt32TimeseriesDataReader.ViewAliasName + ".[Catalog]," +ComplexInt32TimeseriesDataReader.ViewAliasName + ".[Name]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var catalogParameter = sqlCommandParameters.AddReference( "@catalog", catalog );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@name", name, 127 );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var complexInt32TimeseriesDataReader = new ComplexInt32TimeseriesDataReader( _loggerFactory, sqlDataReader );
                return complexInt32TimeseriesDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public Int32TimeseriesObject? GetInt32TimeseriesByCatalogAndName( Guid? catalog, string name )
        {
            throw new NotImplementedException( );
        }
        public IList<Int32TimeseriesObject> GetInt32TimeseriesCollectionByCatalogIsNullAndName( string name )
        {
            throw new NotImplementedException( );
        }
        // ---------------------------------------------------------------------
        // RadarAzimuthOffsetTimeseries queries
        // ---------------------------------------------------------------------
        public SimpleRadarAzimuthOffsetTimeseriesDataReader GetRadarAzimuthOffsetTimeseriesByIdDataReader( Guid id )
        {
            const string sql = SimpleRadarAzimuthOffsetTimeseriesDataReader.BaseQuery + "WHERE " + SimpleRadarAzimuthOffsetTimeseriesDataReader.ViewAliasName + ".[Id] = @id"; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                sqlCommandParameters.AddGuid( "@id", id );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleRadarAzimuthOffsetTimeseriesDataReader = new SimpleRadarAzimuthOffsetTimeseriesDataReader( _loggerFactory, sqlDataReader );
                return simpleRadarAzimuthOffsetTimeseriesDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public RadarAzimuthOffsetTimeseriesObject? GetRadarAzimuthOffsetTimeseriesById( Guid id )
        {
            var simpleRadarAzimuthOffsetTimeseriesDataReader = GetRadarAzimuthOffsetTimeseriesByIdDataReader( id );
            using ( simpleRadarAzimuthOffsetTimeseriesDataReader )
            {
                if ( simpleRadarAzimuthOffsetTimeseriesDataReader.Read( ) )
                {
                    var result = simpleRadarAzimuthOffsetTimeseriesDataReader.GetDataObject( );
                    return result;
                }
            }
            return null;
        }

        public void GetRadarAzimuthOffsetTimeseriesById( Guid id, Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleRadarAzimuthOffsetTimeseriesDataReader = GetRadarAzimuthOffsetTimeseriesByIdDataReader( id );
                using ( simpleRadarAzimuthOffsetTimeseriesDataReader )
                {
                    if ( simpleRadarAzimuthOffsetTimeseriesDataReader.Read( ) )
                    {
                        destinationWriter.Write( true );
                        simpleRadarAzimuthOffsetTimeseriesDataReader.WriteTo( destinationWriter );
                    }
                    else
                    {
                        destinationWriter.Write( false );
                    }
                }
            }
        }

        public SimpleRadarAzimuthOffsetTimeseriesDataReader GetRadarAzimuthOffsetTimeseriesCollectionDataReader( )
        {
            const string sql = SimpleRadarAzimuthOffsetTimeseriesDataReader.BaseQuery; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleRadarAzimuthOffsetTimeseriesDataReader = new SimpleRadarAzimuthOffsetTimeseriesDataReader( _loggerFactory, sqlDataReader );
                return simpleRadarAzimuthOffsetTimeseriesDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public IList<RadarAzimuthOffsetTimeseriesObject> GetRadarAzimuthOffsetTimeseriesCollection( )
        {
            var result = new List<RadarAzimuthOffsetTimeseriesObject>( );
            var simpleRadarAzimuthOffsetTimeseriesDataReader = GetRadarAzimuthOffsetTimeseriesCollectionDataReader( );
            using ( simpleRadarAzimuthOffsetTimeseriesDataReader )
            {
                while ( simpleRadarAzimuthOffsetTimeseriesDataReader.Read( ) )
                {
                    var data = simpleRadarAzimuthOffsetTimeseriesDataReader.GetDataObject( );
                    result.Add( data );
                }
            }
            return result;
        }

        public void GetRadarAzimuthOffsetTimeseriesCollection( Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleRadarAzimuthOffsetTimeseriesDataReader = GetRadarAzimuthOffsetTimeseriesCollectionDataReader( );
                using ( simpleRadarAzimuthOffsetTimeseriesDataReader )
                {
                    simpleRadarAzimuthOffsetTimeseriesDataReader.WriteResultSetTo( destinationWriter );
                }
            }
        }

        public SimpleRadarAzimuthOffsetTimeseriesDataReader GetRadarAzimuthOffsetTimeseriesCollectionByCatalogDataReader( Guid? catalog )
        {
            const string sql = SimpleRadarAzimuthOffsetTimeseriesDataReader.BaseQuery + " WHERE " +
                    SimpleRadarAzimuthOffsetTimeseriesDataReader.ViewAliasName + ".[Catalog] = @catalog " +
                    " ORDER BY " + SimpleRadarAzimuthOffsetTimeseriesDataReader.ViewAliasName + ".[Catalog]," +SimpleRadarAzimuthOffsetTimeseriesDataReader.ViewAliasName + ".[Name]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var catalogParameter = sqlCommandParameters.AddReference( "@catalog", catalog );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleRadarAzimuthOffsetTimeseriesDataReader = new SimpleRadarAzimuthOffsetTimeseriesDataReader( _loggerFactory, sqlDataReader );
                return simpleRadarAzimuthOffsetTimeseriesDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<RadarAzimuthOffsetTimeseriesObject> GetRadarAzimuthOffsetTimeseriesCollectionByCatalog( Guid? catalog )
        {
            throw new NotImplementedException( );
        }
        public IList<RadarAzimuthOffsetTimeseriesObject> GetRadarAzimuthOffsetTimeseriesCollectionByCatalogIsNull(  )
        {
            throw new NotImplementedException( );
        }
        public SimpleRadarAzimuthOffsetTimeseriesDataReader GetRadarAzimuthOffsetTimeseriesByCatalogAndNameDataReader( Guid? catalog, string name )
        {
            const string sql = SimpleRadarAzimuthOffsetTimeseriesDataReader.BaseQuery + " WHERE " +
                    SimpleRadarAzimuthOffsetTimeseriesDataReader.ViewAliasName + ".[Catalog] = @catalog AND " +
                    SimpleRadarAzimuthOffsetTimeseriesDataReader.ViewAliasName + ".[Name] = @name " +
                    " ORDER BY " + SimpleRadarAzimuthOffsetTimeseriesDataReader.ViewAliasName + ".[Catalog]," +SimpleRadarAzimuthOffsetTimeseriesDataReader.ViewAliasName + ".[Name]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var catalogParameter = sqlCommandParameters.AddReference( "@catalog", catalog );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@name", name, 127 );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleRadarAzimuthOffsetTimeseriesDataReader = new SimpleRadarAzimuthOffsetTimeseriesDataReader( _loggerFactory, sqlDataReader );
                return simpleRadarAzimuthOffsetTimeseriesDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public RadarAzimuthOffsetTimeseriesObject? GetRadarAzimuthOffsetTimeseriesByCatalogAndName( Guid? catalog, string name )
        {
            throw new NotImplementedException( );
        }
        public IList<RadarAzimuthOffsetTimeseriesObject> GetRadarAzimuthOffsetTimeseriesCollectionByCatalogIsNullAndName( string name )
        {
            throw new NotImplementedException( );
        }
        // ---------------------------------------------------------------------
        // RadarFastTimeConstantLevelTimeseries queries
        // ---------------------------------------------------------------------
        public SimpleRadarFastTimeConstantLevelTimeseriesDataReader GetRadarFastTimeConstantLevelTimeseriesByIdDataReader( Guid id )
        {
            const string sql = SimpleRadarFastTimeConstantLevelTimeseriesDataReader.BaseQuery + "WHERE " + SimpleRadarFastTimeConstantLevelTimeseriesDataReader.ViewAliasName + ".[Id] = @id"; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                sqlCommandParameters.AddGuid( "@id", id );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleRadarFastTimeConstantLevelTimeseriesDataReader = new SimpleRadarFastTimeConstantLevelTimeseriesDataReader( _loggerFactory, sqlDataReader );
                return simpleRadarFastTimeConstantLevelTimeseriesDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public RadarFastTimeConstantLevelTimeseriesObject? GetRadarFastTimeConstantLevelTimeseriesById( Guid id )
        {
            var simpleRadarFastTimeConstantLevelTimeseriesDataReader = GetRadarFastTimeConstantLevelTimeseriesByIdDataReader( id );
            using ( simpleRadarFastTimeConstantLevelTimeseriesDataReader )
            {
                if ( simpleRadarFastTimeConstantLevelTimeseriesDataReader.Read( ) )
                {
                    var result = simpleRadarFastTimeConstantLevelTimeseriesDataReader.GetDataObject( );
                    return result;
                }
            }
            return null;
        }

        public void GetRadarFastTimeConstantLevelTimeseriesById( Guid id, Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleRadarFastTimeConstantLevelTimeseriesDataReader = GetRadarFastTimeConstantLevelTimeseriesByIdDataReader( id );
                using ( simpleRadarFastTimeConstantLevelTimeseriesDataReader )
                {
                    if ( simpleRadarFastTimeConstantLevelTimeseriesDataReader.Read( ) )
                    {
                        destinationWriter.Write( true );
                        simpleRadarFastTimeConstantLevelTimeseriesDataReader.WriteTo( destinationWriter );
                    }
                    else
                    {
                        destinationWriter.Write( false );
                    }
                }
            }
        }

        public SimpleRadarFastTimeConstantLevelTimeseriesDataReader GetRadarFastTimeConstantLevelTimeseriesCollectionDataReader( )
        {
            const string sql = SimpleRadarFastTimeConstantLevelTimeseriesDataReader.BaseQuery; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleRadarFastTimeConstantLevelTimeseriesDataReader = new SimpleRadarFastTimeConstantLevelTimeseriesDataReader( _loggerFactory, sqlDataReader );
                return simpleRadarFastTimeConstantLevelTimeseriesDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public IList<RadarFastTimeConstantLevelTimeseriesObject> GetRadarFastTimeConstantLevelTimeseriesCollection( )
        {
            var result = new List<RadarFastTimeConstantLevelTimeseriesObject>( );
            var simpleRadarFastTimeConstantLevelTimeseriesDataReader = GetRadarFastTimeConstantLevelTimeseriesCollectionDataReader( );
            using ( simpleRadarFastTimeConstantLevelTimeseriesDataReader )
            {
                while ( simpleRadarFastTimeConstantLevelTimeseriesDataReader.Read( ) )
                {
                    var data = simpleRadarFastTimeConstantLevelTimeseriesDataReader.GetDataObject( );
                    result.Add( data );
                }
            }
            return result;
        }

        public void GetRadarFastTimeConstantLevelTimeseriesCollection( Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleRadarFastTimeConstantLevelTimeseriesDataReader = GetRadarFastTimeConstantLevelTimeseriesCollectionDataReader( );
                using ( simpleRadarFastTimeConstantLevelTimeseriesDataReader )
                {
                    simpleRadarFastTimeConstantLevelTimeseriesDataReader.WriteResultSetTo( destinationWriter );
                }
            }
        }

        public SimpleRadarFastTimeConstantLevelTimeseriesDataReader GetRadarFastTimeConstantLevelTimeseriesCollectionByCatalogDataReader( Guid? catalog )
        {
            const string sql = SimpleRadarFastTimeConstantLevelTimeseriesDataReader.BaseQuery + " WHERE " +
                    SimpleRadarFastTimeConstantLevelTimeseriesDataReader.ViewAliasName + ".[Catalog] = @catalog " +
                    " ORDER BY " + SimpleRadarFastTimeConstantLevelTimeseriesDataReader.ViewAliasName + ".[Catalog]," +SimpleRadarFastTimeConstantLevelTimeseriesDataReader.ViewAliasName + ".[Name]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var catalogParameter = sqlCommandParameters.AddReference( "@catalog", catalog );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleRadarFastTimeConstantLevelTimeseriesDataReader = new SimpleRadarFastTimeConstantLevelTimeseriesDataReader( _loggerFactory, sqlDataReader );
                return simpleRadarFastTimeConstantLevelTimeseriesDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<RadarFastTimeConstantLevelTimeseriesObject> GetRadarFastTimeConstantLevelTimeseriesCollectionByCatalog( Guid? catalog )
        {
            throw new NotImplementedException( );
        }
        public IList<RadarFastTimeConstantLevelTimeseriesObject> GetRadarFastTimeConstantLevelTimeseriesCollectionByCatalogIsNull(  )
        {
            throw new NotImplementedException( );
        }
        public SimpleRadarFastTimeConstantLevelTimeseriesDataReader GetRadarFastTimeConstantLevelTimeseriesByCatalogAndNameDataReader( Guid? catalog, string name )
        {
            const string sql = SimpleRadarFastTimeConstantLevelTimeseriesDataReader.BaseQuery + " WHERE " +
                    SimpleRadarFastTimeConstantLevelTimeseriesDataReader.ViewAliasName + ".[Catalog] = @catalog AND " +
                    SimpleRadarFastTimeConstantLevelTimeseriesDataReader.ViewAliasName + ".[Name] = @name " +
                    " ORDER BY " + SimpleRadarFastTimeConstantLevelTimeseriesDataReader.ViewAliasName + ".[Catalog]," +SimpleRadarFastTimeConstantLevelTimeseriesDataReader.ViewAliasName + ".[Name]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var catalogParameter = sqlCommandParameters.AddReference( "@catalog", catalog );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@name", name, 127 );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleRadarFastTimeConstantLevelTimeseriesDataReader = new SimpleRadarFastTimeConstantLevelTimeseriesDataReader( _loggerFactory, sqlDataReader );
                return simpleRadarFastTimeConstantLevelTimeseriesDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public RadarFastTimeConstantLevelTimeseriesObject? GetRadarFastTimeConstantLevelTimeseriesByCatalogAndName( Guid? catalog, string name )
        {
            throw new NotImplementedException( );
        }
        public IList<RadarFastTimeConstantLevelTimeseriesObject> GetRadarFastTimeConstantLevelTimeseriesCollectionByCatalogIsNullAndName( string name )
        {
            throw new NotImplementedException( );
        }
        // ---------------------------------------------------------------------
        // RadarFastTimeConstantModeTimeseries queries
        // ---------------------------------------------------------------------
        public SimpleRadarFastTimeConstantModeTimeseriesDataReader GetRadarFastTimeConstantModeTimeseriesByIdDataReader( Guid id )
        {
            const string sql = SimpleRadarFastTimeConstantModeTimeseriesDataReader.BaseQuery + "WHERE " + SimpleRadarFastTimeConstantModeTimeseriesDataReader.ViewAliasName + ".[Id] = @id"; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                sqlCommandParameters.AddGuid( "@id", id );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleRadarFastTimeConstantModeTimeseriesDataReader = new SimpleRadarFastTimeConstantModeTimeseriesDataReader( _loggerFactory, sqlDataReader );
                return simpleRadarFastTimeConstantModeTimeseriesDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public RadarFastTimeConstantModeTimeseriesObject? GetRadarFastTimeConstantModeTimeseriesById( Guid id )
        {
            var simpleRadarFastTimeConstantModeTimeseriesDataReader = GetRadarFastTimeConstantModeTimeseriesByIdDataReader( id );
            using ( simpleRadarFastTimeConstantModeTimeseriesDataReader )
            {
                if ( simpleRadarFastTimeConstantModeTimeseriesDataReader.Read( ) )
                {
                    var result = simpleRadarFastTimeConstantModeTimeseriesDataReader.GetDataObject( );
                    return result;
                }
            }
            return null;
        }

        public void GetRadarFastTimeConstantModeTimeseriesById( Guid id, Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleRadarFastTimeConstantModeTimeseriesDataReader = GetRadarFastTimeConstantModeTimeseriesByIdDataReader( id );
                using ( simpleRadarFastTimeConstantModeTimeseriesDataReader )
                {
                    if ( simpleRadarFastTimeConstantModeTimeseriesDataReader.Read( ) )
                    {
                        destinationWriter.Write( true );
                        simpleRadarFastTimeConstantModeTimeseriesDataReader.WriteTo( destinationWriter );
                    }
                    else
                    {
                        destinationWriter.Write( false );
                    }
                }
            }
        }

        public SimpleRadarFastTimeConstantModeTimeseriesDataReader GetRadarFastTimeConstantModeTimeseriesCollectionDataReader( )
        {
            const string sql = SimpleRadarFastTimeConstantModeTimeseriesDataReader.BaseQuery; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleRadarFastTimeConstantModeTimeseriesDataReader = new SimpleRadarFastTimeConstantModeTimeseriesDataReader( _loggerFactory, sqlDataReader );
                return simpleRadarFastTimeConstantModeTimeseriesDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public IList<RadarFastTimeConstantModeTimeseriesObject> GetRadarFastTimeConstantModeTimeseriesCollection( )
        {
            var result = new List<RadarFastTimeConstantModeTimeseriesObject>( );
            var simpleRadarFastTimeConstantModeTimeseriesDataReader = GetRadarFastTimeConstantModeTimeseriesCollectionDataReader( );
            using ( simpleRadarFastTimeConstantModeTimeseriesDataReader )
            {
                while ( simpleRadarFastTimeConstantModeTimeseriesDataReader.Read( ) )
                {
                    var data = simpleRadarFastTimeConstantModeTimeseriesDataReader.GetDataObject( );
                    result.Add( data );
                }
            }
            return result;
        }

        public void GetRadarFastTimeConstantModeTimeseriesCollection( Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleRadarFastTimeConstantModeTimeseriesDataReader = GetRadarFastTimeConstantModeTimeseriesCollectionDataReader( );
                using ( simpleRadarFastTimeConstantModeTimeseriesDataReader )
                {
                    simpleRadarFastTimeConstantModeTimeseriesDataReader.WriteResultSetTo( destinationWriter );
                }
            }
        }

        public SimpleRadarFastTimeConstantModeTimeseriesDataReader GetRadarFastTimeConstantModeTimeseriesCollectionByCatalogDataReader( Guid? catalog )
        {
            const string sql = SimpleRadarFastTimeConstantModeTimeseriesDataReader.BaseQuery + " WHERE " +
                    SimpleRadarFastTimeConstantModeTimeseriesDataReader.ViewAliasName + ".[Catalog] = @catalog " +
                    " ORDER BY " + SimpleRadarFastTimeConstantModeTimeseriesDataReader.ViewAliasName + ".[Catalog]," +SimpleRadarFastTimeConstantModeTimeseriesDataReader.ViewAliasName + ".[Name]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var catalogParameter = sqlCommandParameters.AddReference( "@catalog", catalog );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleRadarFastTimeConstantModeTimeseriesDataReader = new SimpleRadarFastTimeConstantModeTimeseriesDataReader( _loggerFactory, sqlDataReader );
                return simpleRadarFastTimeConstantModeTimeseriesDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<RadarFastTimeConstantModeTimeseriesObject> GetRadarFastTimeConstantModeTimeseriesCollectionByCatalog( Guid? catalog )
        {
            throw new NotImplementedException( );
        }
        public IList<RadarFastTimeConstantModeTimeseriesObject> GetRadarFastTimeConstantModeTimeseriesCollectionByCatalogIsNull(  )
        {
            throw new NotImplementedException( );
        }
        public SimpleRadarFastTimeConstantModeTimeseriesDataReader GetRadarFastTimeConstantModeTimeseriesByCatalogAndNameDataReader( Guid? catalog, string name )
        {
            const string sql = SimpleRadarFastTimeConstantModeTimeseriesDataReader.BaseQuery + " WHERE " +
                    SimpleRadarFastTimeConstantModeTimeseriesDataReader.ViewAliasName + ".[Catalog] = @catalog AND " +
                    SimpleRadarFastTimeConstantModeTimeseriesDataReader.ViewAliasName + ".[Name] = @name " +
                    " ORDER BY " + SimpleRadarFastTimeConstantModeTimeseriesDataReader.ViewAliasName + ".[Catalog]," +SimpleRadarFastTimeConstantModeTimeseriesDataReader.ViewAliasName + ".[Name]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var catalogParameter = sqlCommandParameters.AddReference( "@catalog", catalog );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@name", name, 127 );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleRadarFastTimeConstantModeTimeseriesDataReader = new SimpleRadarFastTimeConstantModeTimeseriesDataReader( _loggerFactory, sqlDataReader );
                return simpleRadarFastTimeConstantModeTimeseriesDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public RadarFastTimeConstantModeTimeseriesObject? GetRadarFastTimeConstantModeTimeseriesByCatalogAndName( Guid? catalog, string name )
        {
            throw new NotImplementedException( );
        }
        public IList<RadarFastTimeConstantModeTimeseriesObject> GetRadarFastTimeConstantModeTimeseriesCollectionByCatalogIsNullAndName( string name )
        {
            throw new NotImplementedException( );
        }
        // ---------------------------------------------------------------------
        // RadarPulseTimeseries queries
        // ---------------------------------------------------------------------
        public SimpleRadarPulseTimeseriesDataReader GetRadarPulseTimeseriesByIdDataReader( Guid id )
        {
            const string sql = SimpleRadarPulseTimeseriesDataReader.BaseQuery + "WHERE " + SimpleRadarPulseTimeseriesDataReader.ViewAliasName + ".[Id] = @id"; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                sqlCommandParameters.AddGuid( "@id", id );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleRadarPulseTimeseriesDataReader = new SimpleRadarPulseTimeseriesDataReader( _loggerFactory, sqlDataReader );
                return simpleRadarPulseTimeseriesDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public RadarPulseTimeseriesObject? GetRadarPulseTimeseriesById( Guid id )
        {
            var simpleRadarPulseTimeseriesDataReader = GetRadarPulseTimeseriesByIdDataReader( id );
            using ( simpleRadarPulseTimeseriesDataReader )
            {
                if ( simpleRadarPulseTimeseriesDataReader.Read( ) )
                {
                    var result = simpleRadarPulseTimeseriesDataReader.GetDataObject( );
                    return result;
                }
            }
            return null;
        }

        public void GetRadarPulseTimeseriesById( Guid id, Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleRadarPulseTimeseriesDataReader = GetRadarPulseTimeseriesByIdDataReader( id );
                using ( simpleRadarPulseTimeseriesDataReader )
                {
                    if ( simpleRadarPulseTimeseriesDataReader.Read( ) )
                    {
                        destinationWriter.Write( true );
                        simpleRadarPulseTimeseriesDataReader.WriteTo( destinationWriter );
                    }
                    else
                    {
                        destinationWriter.Write( false );
                    }
                }
            }
        }

        public SimpleRadarPulseTimeseriesDataReader GetRadarPulseTimeseriesCollectionDataReader( )
        {
            const string sql = SimpleRadarPulseTimeseriesDataReader.BaseQuery; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleRadarPulseTimeseriesDataReader = new SimpleRadarPulseTimeseriesDataReader( _loggerFactory, sqlDataReader );
                return simpleRadarPulseTimeseriesDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public IList<RadarPulseTimeseriesObject> GetRadarPulseTimeseriesCollection( )
        {
            var result = new List<RadarPulseTimeseriesObject>( );
            var simpleRadarPulseTimeseriesDataReader = GetRadarPulseTimeseriesCollectionDataReader( );
            using ( simpleRadarPulseTimeseriesDataReader )
            {
                while ( simpleRadarPulseTimeseriesDataReader.Read( ) )
                {
                    var data = simpleRadarPulseTimeseriesDataReader.GetDataObject( );
                    result.Add( data );
                }
            }
            return result;
        }

        public void GetRadarPulseTimeseriesCollection( Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleRadarPulseTimeseriesDataReader = GetRadarPulseTimeseriesCollectionDataReader( );
                using ( simpleRadarPulseTimeseriesDataReader )
                {
                    simpleRadarPulseTimeseriesDataReader.WriteResultSetTo( destinationWriter );
                }
            }
        }

        public SimpleRadarPulseTimeseriesDataReader GetRadarPulseTimeseriesCollectionByCatalogDataReader( Guid? catalog )
        {
            const string sql = SimpleRadarPulseTimeseriesDataReader.BaseQuery + " WHERE " +
                    SimpleRadarPulseTimeseriesDataReader.ViewAliasName + ".[Catalog] = @catalog " +
                    " ORDER BY " + SimpleRadarPulseTimeseriesDataReader.ViewAliasName + ".[Catalog]," +SimpleRadarPulseTimeseriesDataReader.ViewAliasName + ".[Name]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var catalogParameter = sqlCommandParameters.AddReference( "@catalog", catalog );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleRadarPulseTimeseriesDataReader = new SimpleRadarPulseTimeseriesDataReader( _loggerFactory, sqlDataReader );
                return simpleRadarPulseTimeseriesDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<RadarPulseTimeseriesObject> GetRadarPulseTimeseriesCollectionByCatalog( Guid? catalog )
        {
            throw new NotImplementedException( );
        }
        public IList<RadarPulseTimeseriesObject> GetRadarPulseTimeseriesCollectionByCatalogIsNull(  )
        {
            throw new NotImplementedException( );
        }
        public SimpleRadarPulseTimeseriesDataReader GetRadarPulseTimeseriesByCatalogAndNameDataReader( Guid? catalog, string name )
        {
            const string sql = SimpleRadarPulseTimeseriesDataReader.BaseQuery + " WHERE " +
                    SimpleRadarPulseTimeseriesDataReader.ViewAliasName + ".[Catalog] = @catalog AND " +
                    SimpleRadarPulseTimeseriesDataReader.ViewAliasName + ".[Name] = @name " +
                    " ORDER BY " + SimpleRadarPulseTimeseriesDataReader.ViewAliasName + ".[Catalog]," +SimpleRadarPulseTimeseriesDataReader.ViewAliasName + ".[Name]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var catalogParameter = sqlCommandParameters.AddReference( "@catalog", catalog );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@name", name, 127 );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleRadarPulseTimeseriesDataReader = new SimpleRadarPulseTimeseriesDataReader( _loggerFactory, sqlDataReader );
                return simpleRadarPulseTimeseriesDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public RadarPulseTimeseriesObject? GetRadarPulseTimeseriesByCatalogAndName( Guid? catalog, string name )
        {
            throw new NotImplementedException( );
        }
        public IList<RadarPulseTimeseriesObject> GetRadarPulseTimeseriesCollectionByCatalogIsNullAndName( string name )
        {
            throw new NotImplementedException( );
        }
        // ---------------------------------------------------------------------
        // RadarSector1EndTimeseries queries
        // ---------------------------------------------------------------------
        public SimpleRadarSector1EndTimeseriesDataReader GetRadarSector1EndTimeseriesByIdDataReader( Guid id )
        {
            const string sql = SimpleRadarSector1EndTimeseriesDataReader.BaseQuery + "WHERE " + SimpleRadarSector1EndTimeseriesDataReader.ViewAliasName + ".[Id] = @id"; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                sqlCommandParameters.AddGuid( "@id", id );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleRadarSector1EndTimeseriesDataReader = new SimpleRadarSector1EndTimeseriesDataReader( _loggerFactory, sqlDataReader );
                return simpleRadarSector1EndTimeseriesDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public RadarSector1EndTimeseriesObject? GetRadarSector1EndTimeseriesById( Guid id )
        {
            var simpleRadarSector1EndTimeseriesDataReader = GetRadarSector1EndTimeseriesByIdDataReader( id );
            using ( simpleRadarSector1EndTimeseriesDataReader )
            {
                if ( simpleRadarSector1EndTimeseriesDataReader.Read( ) )
                {
                    var result = simpleRadarSector1EndTimeseriesDataReader.GetDataObject( );
                    return result;
                }
            }
            return null;
        }

        public void GetRadarSector1EndTimeseriesById( Guid id, Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleRadarSector1EndTimeseriesDataReader = GetRadarSector1EndTimeseriesByIdDataReader( id );
                using ( simpleRadarSector1EndTimeseriesDataReader )
                {
                    if ( simpleRadarSector1EndTimeseriesDataReader.Read( ) )
                    {
                        destinationWriter.Write( true );
                        simpleRadarSector1EndTimeseriesDataReader.WriteTo( destinationWriter );
                    }
                    else
                    {
                        destinationWriter.Write( false );
                    }
                }
            }
        }

        public SimpleRadarSector1EndTimeseriesDataReader GetRadarSector1EndTimeseriesCollectionDataReader( )
        {
            const string sql = SimpleRadarSector1EndTimeseriesDataReader.BaseQuery; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleRadarSector1EndTimeseriesDataReader = new SimpleRadarSector1EndTimeseriesDataReader( _loggerFactory, sqlDataReader );
                return simpleRadarSector1EndTimeseriesDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public IList<RadarSector1EndTimeseriesObject> GetRadarSector1EndTimeseriesCollection( )
        {
            var result = new List<RadarSector1EndTimeseriesObject>( );
            var simpleRadarSector1EndTimeseriesDataReader = GetRadarSector1EndTimeseriesCollectionDataReader( );
            using ( simpleRadarSector1EndTimeseriesDataReader )
            {
                while ( simpleRadarSector1EndTimeseriesDataReader.Read( ) )
                {
                    var data = simpleRadarSector1EndTimeseriesDataReader.GetDataObject( );
                    result.Add( data );
                }
            }
            return result;
        }

        public void GetRadarSector1EndTimeseriesCollection( Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleRadarSector1EndTimeseriesDataReader = GetRadarSector1EndTimeseriesCollectionDataReader( );
                using ( simpleRadarSector1EndTimeseriesDataReader )
                {
                    simpleRadarSector1EndTimeseriesDataReader.WriteResultSetTo( destinationWriter );
                }
            }
        }

        public SimpleRadarSector1EndTimeseriesDataReader GetRadarSector1EndTimeseriesCollectionByCatalogDataReader( Guid? catalog )
        {
            const string sql = SimpleRadarSector1EndTimeseriesDataReader.BaseQuery + " WHERE " +
                    SimpleRadarSector1EndTimeseriesDataReader.ViewAliasName + ".[Catalog] = @catalog " +
                    " ORDER BY " + SimpleRadarSector1EndTimeseriesDataReader.ViewAliasName + ".[Catalog]," +SimpleRadarSector1EndTimeseriesDataReader.ViewAliasName + ".[Name]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var catalogParameter = sqlCommandParameters.AddReference( "@catalog", catalog );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleRadarSector1EndTimeseriesDataReader = new SimpleRadarSector1EndTimeseriesDataReader( _loggerFactory, sqlDataReader );
                return simpleRadarSector1EndTimeseriesDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<RadarSector1EndTimeseriesObject> GetRadarSector1EndTimeseriesCollectionByCatalog( Guid? catalog )
        {
            throw new NotImplementedException( );
        }
        public IList<RadarSector1EndTimeseriesObject> GetRadarSector1EndTimeseriesCollectionByCatalogIsNull(  )
        {
            throw new NotImplementedException( );
        }
        public SimpleRadarSector1EndTimeseriesDataReader GetRadarSector1EndTimeseriesByCatalogAndNameDataReader( Guid? catalog, string name )
        {
            const string sql = SimpleRadarSector1EndTimeseriesDataReader.BaseQuery + " WHERE " +
                    SimpleRadarSector1EndTimeseriesDataReader.ViewAliasName + ".[Catalog] = @catalog AND " +
                    SimpleRadarSector1EndTimeseriesDataReader.ViewAliasName + ".[Name] = @name " +
                    " ORDER BY " + SimpleRadarSector1EndTimeseriesDataReader.ViewAliasName + ".[Catalog]," +SimpleRadarSector1EndTimeseriesDataReader.ViewAliasName + ".[Name]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var catalogParameter = sqlCommandParameters.AddReference( "@catalog", catalog );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@name", name, 127 );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleRadarSector1EndTimeseriesDataReader = new SimpleRadarSector1EndTimeseriesDataReader( _loggerFactory, sqlDataReader );
                return simpleRadarSector1EndTimeseriesDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public RadarSector1EndTimeseriesObject? GetRadarSector1EndTimeseriesByCatalogAndName( Guid? catalog, string name )
        {
            throw new NotImplementedException( );
        }
        public IList<RadarSector1EndTimeseriesObject> GetRadarSector1EndTimeseriesCollectionByCatalogIsNullAndName( string name )
        {
            throw new NotImplementedException( );
        }
        // ---------------------------------------------------------------------
        // RadarSector1StartTimeseries queries
        // ---------------------------------------------------------------------
        public SimpleRadarSector1StartTimeseriesDataReader GetRadarSector1StartTimeseriesByIdDataReader( Guid id )
        {
            const string sql = SimpleRadarSector1StartTimeseriesDataReader.BaseQuery + "WHERE " + SimpleRadarSector1StartTimeseriesDataReader.ViewAliasName + ".[Id] = @id"; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                sqlCommandParameters.AddGuid( "@id", id );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleRadarSector1StartTimeseriesDataReader = new SimpleRadarSector1StartTimeseriesDataReader( _loggerFactory, sqlDataReader );
                return simpleRadarSector1StartTimeseriesDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public RadarSector1StartTimeseriesObject? GetRadarSector1StartTimeseriesById( Guid id )
        {
            var simpleRadarSector1StartTimeseriesDataReader = GetRadarSector1StartTimeseriesByIdDataReader( id );
            using ( simpleRadarSector1StartTimeseriesDataReader )
            {
                if ( simpleRadarSector1StartTimeseriesDataReader.Read( ) )
                {
                    var result = simpleRadarSector1StartTimeseriesDataReader.GetDataObject( );
                    return result;
                }
            }
            return null;
        }

        public void GetRadarSector1StartTimeseriesById( Guid id, Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleRadarSector1StartTimeseriesDataReader = GetRadarSector1StartTimeseriesByIdDataReader( id );
                using ( simpleRadarSector1StartTimeseriesDataReader )
                {
                    if ( simpleRadarSector1StartTimeseriesDataReader.Read( ) )
                    {
                        destinationWriter.Write( true );
                        simpleRadarSector1StartTimeseriesDataReader.WriteTo( destinationWriter );
                    }
                    else
                    {
                        destinationWriter.Write( false );
                    }
                }
            }
        }

        public SimpleRadarSector1StartTimeseriesDataReader GetRadarSector1StartTimeseriesCollectionDataReader( )
        {
            const string sql = SimpleRadarSector1StartTimeseriesDataReader.BaseQuery; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleRadarSector1StartTimeseriesDataReader = new SimpleRadarSector1StartTimeseriesDataReader( _loggerFactory, sqlDataReader );
                return simpleRadarSector1StartTimeseriesDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public IList<RadarSector1StartTimeseriesObject> GetRadarSector1StartTimeseriesCollection( )
        {
            var result = new List<RadarSector1StartTimeseriesObject>( );
            var simpleRadarSector1StartTimeseriesDataReader = GetRadarSector1StartTimeseriesCollectionDataReader( );
            using ( simpleRadarSector1StartTimeseriesDataReader )
            {
                while ( simpleRadarSector1StartTimeseriesDataReader.Read( ) )
                {
                    var data = simpleRadarSector1StartTimeseriesDataReader.GetDataObject( );
                    result.Add( data );
                }
            }
            return result;
        }

        public void GetRadarSector1StartTimeseriesCollection( Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleRadarSector1StartTimeseriesDataReader = GetRadarSector1StartTimeseriesCollectionDataReader( );
                using ( simpleRadarSector1StartTimeseriesDataReader )
                {
                    simpleRadarSector1StartTimeseriesDataReader.WriteResultSetTo( destinationWriter );
                }
            }
        }

        public SimpleRadarSector1StartTimeseriesDataReader GetRadarSector1StartTimeseriesCollectionByCatalogDataReader( Guid? catalog )
        {
            const string sql = SimpleRadarSector1StartTimeseriesDataReader.BaseQuery + " WHERE " +
                    SimpleRadarSector1StartTimeseriesDataReader.ViewAliasName + ".[Catalog] = @catalog " +
                    " ORDER BY " + SimpleRadarSector1StartTimeseriesDataReader.ViewAliasName + ".[Catalog]," +SimpleRadarSector1StartTimeseriesDataReader.ViewAliasName + ".[Name]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var catalogParameter = sqlCommandParameters.AddReference( "@catalog", catalog );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleRadarSector1StartTimeseriesDataReader = new SimpleRadarSector1StartTimeseriesDataReader( _loggerFactory, sqlDataReader );
                return simpleRadarSector1StartTimeseriesDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<RadarSector1StartTimeseriesObject> GetRadarSector1StartTimeseriesCollectionByCatalog( Guid? catalog )
        {
            throw new NotImplementedException( );
        }
        public IList<RadarSector1StartTimeseriesObject> GetRadarSector1StartTimeseriesCollectionByCatalogIsNull(  )
        {
            throw new NotImplementedException( );
        }
        public SimpleRadarSector1StartTimeseriesDataReader GetRadarSector1StartTimeseriesByCatalogAndNameDataReader( Guid? catalog, string name )
        {
            const string sql = SimpleRadarSector1StartTimeseriesDataReader.BaseQuery + " WHERE " +
                    SimpleRadarSector1StartTimeseriesDataReader.ViewAliasName + ".[Catalog] = @catalog AND " +
                    SimpleRadarSector1StartTimeseriesDataReader.ViewAliasName + ".[Name] = @name " +
                    " ORDER BY " + SimpleRadarSector1StartTimeseriesDataReader.ViewAliasName + ".[Catalog]," +SimpleRadarSector1StartTimeseriesDataReader.ViewAliasName + ".[Name]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var catalogParameter = sqlCommandParameters.AddReference( "@catalog", catalog );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@name", name, 127 );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleRadarSector1StartTimeseriesDataReader = new SimpleRadarSector1StartTimeseriesDataReader( _loggerFactory, sqlDataReader );
                return simpleRadarSector1StartTimeseriesDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public RadarSector1StartTimeseriesObject? GetRadarSector1StartTimeseriesByCatalogAndName( Guid? catalog, string name )
        {
            throw new NotImplementedException( );
        }
        public IList<RadarSector1StartTimeseriesObject> GetRadarSector1StartTimeseriesCollectionByCatalogIsNullAndName( string name )
        {
            throw new NotImplementedException( );
        }
        // ---------------------------------------------------------------------
        // RadarSector2EndTimeseries queries
        // ---------------------------------------------------------------------
        public SimpleRadarSector2EndTimeseriesDataReader GetRadarSector2EndTimeseriesByIdDataReader( Guid id )
        {
            const string sql = SimpleRadarSector2EndTimeseriesDataReader.BaseQuery + "WHERE " + SimpleRadarSector2EndTimeseriesDataReader.ViewAliasName + ".[Id] = @id"; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                sqlCommandParameters.AddGuid( "@id", id );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleRadarSector2EndTimeseriesDataReader = new SimpleRadarSector2EndTimeseriesDataReader( _loggerFactory, sqlDataReader );
                return simpleRadarSector2EndTimeseriesDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public RadarSector2EndTimeseriesObject? GetRadarSector2EndTimeseriesById( Guid id )
        {
            var simpleRadarSector2EndTimeseriesDataReader = GetRadarSector2EndTimeseriesByIdDataReader( id );
            using ( simpleRadarSector2EndTimeseriesDataReader )
            {
                if ( simpleRadarSector2EndTimeseriesDataReader.Read( ) )
                {
                    var result = simpleRadarSector2EndTimeseriesDataReader.GetDataObject( );
                    return result;
                }
            }
            return null;
        }

        public void GetRadarSector2EndTimeseriesById( Guid id, Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleRadarSector2EndTimeseriesDataReader = GetRadarSector2EndTimeseriesByIdDataReader( id );
                using ( simpleRadarSector2EndTimeseriesDataReader )
                {
                    if ( simpleRadarSector2EndTimeseriesDataReader.Read( ) )
                    {
                        destinationWriter.Write( true );
                        simpleRadarSector2EndTimeseriesDataReader.WriteTo( destinationWriter );
                    }
                    else
                    {
                        destinationWriter.Write( false );
                    }
                }
            }
        }

        public SimpleRadarSector2EndTimeseriesDataReader GetRadarSector2EndTimeseriesCollectionDataReader( )
        {
            const string sql = SimpleRadarSector2EndTimeseriesDataReader.BaseQuery; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleRadarSector2EndTimeseriesDataReader = new SimpleRadarSector2EndTimeseriesDataReader( _loggerFactory, sqlDataReader );
                return simpleRadarSector2EndTimeseriesDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public IList<RadarSector2EndTimeseriesObject> GetRadarSector2EndTimeseriesCollection( )
        {
            var result = new List<RadarSector2EndTimeseriesObject>( );
            var simpleRadarSector2EndTimeseriesDataReader = GetRadarSector2EndTimeseriesCollectionDataReader( );
            using ( simpleRadarSector2EndTimeseriesDataReader )
            {
                while ( simpleRadarSector2EndTimeseriesDataReader.Read( ) )
                {
                    var data = simpleRadarSector2EndTimeseriesDataReader.GetDataObject( );
                    result.Add( data );
                }
            }
            return result;
        }

        public void GetRadarSector2EndTimeseriesCollection( Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleRadarSector2EndTimeseriesDataReader = GetRadarSector2EndTimeseriesCollectionDataReader( );
                using ( simpleRadarSector2EndTimeseriesDataReader )
                {
                    simpleRadarSector2EndTimeseriesDataReader.WriteResultSetTo( destinationWriter );
                }
            }
        }

        public SimpleRadarSector2EndTimeseriesDataReader GetRadarSector2EndTimeseriesCollectionByCatalogDataReader( Guid? catalog )
        {
            const string sql = SimpleRadarSector2EndTimeseriesDataReader.BaseQuery + " WHERE " +
                    SimpleRadarSector2EndTimeseriesDataReader.ViewAliasName + ".[Catalog] = @catalog " +
                    " ORDER BY " + SimpleRadarSector2EndTimeseriesDataReader.ViewAliasName + ".[Catalog]," +SimpleRadarSector2EndTimeseriesDataReader.ViewAliasName + ".[Name]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var catalogParameter = sqlCommandParameters.AddReference( "@catalog", catalog );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleRadarSector2EndTimeseriesDataReader = new SimpleRadarSector2EndTimeseriesDataReader( _loggerFactory, sqlDataReader );
                return simpleRadarSector2EndTimeseriesDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<RadarSector2EndTimeseriesObject> GetRadarSector2EndTimeseriesCollectionByCatalog( Guid? catalog )
        {
            throw new NotImplementedException( );
        }
        public IList<RadarSector2EndTimeseriesObject> GetRadarSector2EndTimeseriesCollectionByCatalogIsNull(  )
        {
            throw new NotImplementedException( );
        }
        public SimpleRadarSector2EndTimeseriesDataReader GetRadarSector2EndTimeseriesByCatalogAndNameDataReader( Guid? catalog, string name )
        {
            const string sql = SimpleRadarSector2EndTimeseriesDataReader.BaseQuery + " WHERE " +
                    SimpleRadarSector2EndTimeseriesDataReader.ViewAliasName + ".[Catalog] = @catalog AND " +
                    SimpleRadarSector2EndTimeseriesDataReader.ViewAliasName + ".[Name] = @name " +
                    " ORDER BY " + SimpleRadarSector2EndTimeseriesDataReader.ViewAliasName + ".[Catalog]," +SimpleRadarSector2EndTimeseriesDataReader.ViewAliasName + ".[Name]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var catalogParameter = sqlCommandParameters.AddReference( "@catalog", catalog );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@name", name, 127 );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleRadarSector2EndTimeseriesDataReader = new SimpleRadarSector2EndTimeseriesDataReader( _loggerFactory, sqlDataReader );
                return simpleRadarSector2EndTimeseriesDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public RadarSector2EndTimeseriesObject? GetRadarSector2EndTimeseriesByCatalogAndName( Guid? catalog, string name )
        {
            throw new NotImplementedException( );
        }
        public IList<RadarSector2EndTimeseriesObject> GetRadarSector2EndTimeseriesCollectionByCatalogIsNullAndName( string name )
        {
            throw new NotImplementedException( );
        }
        // ---------------------------------------------------------------------
        // RadarSector2StartTimeseries queries
        // ---------------------------------------------------------------------
        public SimpleRadarSector2StartTimeseriesDataReader GetRadarSector2StartTimeseriesByIdDataReader( Guid id )
        {
            const string sql = SimpleRadarSector2StartTimeseriesDataReader.BaseQuery + "WHERE " + SimpleRadarSector2StartTimeseriesDataReader.ViewAliasName + ".[Id] = @id"; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                sqlCommandParameters.AddGuid( "@id", id );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleRadarSector2StartTimeseriesDataReader = new SimpleRadarSector2StartTimeseriesDataReader( _loggerFactory, sqlDataReader );
                return simpleRadarSector2StartTimeseriesDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public RadarSector2StartTimeseriesObject? GetRadarSector2StartTimeseriesById( Guid id )
        {
            var simpleRadarSector2StartTimeseriesDataReader = GetRadarSector2StartTimeseriesByIdDataReader( id );
            using ( simpleRadarSector2StartTimeseriesDataReader )
            {
                if ( simpleRadarSector2StartTimeseriesDataReader.Read( ) )
                {
                    var result = simpleRadarSector2StartTimeseriesDataReader.GetDataObject( );
                    return result;
                }
            }
            return null;
        }

        public void GetRadarSector2StartTimeseriesById( Guid id, Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleRadarSector2StartTimeseriesDataReader = GetRadarSector2StartTimeseriesByIdDataReader( id );
                using ( simpleRadarSector2StartTimeseriesDataReader )
                {
                    if ( simpleRadarSector2StartTimeseriesDataReader.Read( ) )
                    {
                        destinationWriter.Write( true );
                        simpleRadarSector2StartTimeseriesDataReader.WriteTo( destinationWriter );
                    }
                    else
                    {
                        destinationWriter.Write( false );
                    }
                }
            }
        }

        public SimpleRadarSector2StartTimeseriesDataReader GetRadarSector2StartTimeseriesCollectionDataReader( )
        {
            const string sql = SimpleRadarSector2StartTimeseriesDataReader.BaseQuery; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleRadarSector2StartTimeseriesDataReader = new SimpleRadarSector2StartTimeseriesDataReader( _loggerFactory, sqlDataReader );
                return simpleRadarSector2StartTimeseriesDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public IList<RadarSector2StartTimeseriesObject> GetRadarSector2StartTimeseriesCollection( )
        {
            var result = new List<RadarSector2StartTimeseriesObject>( );
            var simpleRadarSector2StartTimeseriesDataReader = GetRadarSector2StartTimeseriesCollectionDataReader( );
            using ( simpleRadarSector2StartTimeseriesDataReader )
            {
                while ( simpleRadarSector2StartTimeseriesDataReader.Read( ) )
                {
                    var data = simpleRadarSector2StartTimeseriesDataReader.GetDataObject( );
                    result.Add( data );
                }
            }
            return result;
        }

        public void GetRadarSector2StartTimeseriesCollection( Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleRadarSector2StartTimeseriesDataReader = GetRadarSector2StartTimeseriesCollectionDataReader( );
                using ( simpleRadarSector2StartTimeseriesDataReader )
                {
                    simpleRadarSector2StartTimeseriesDataReader.WriteResultSetTo( destinationWriter );
                }
            }
        }

        public SimpleRadarSector2StartTimeseriesDataReader GetRadarSector2StartTimeseriesCollectionByCatalogDataReader( Guid? catalog )
        {
            const string sql = SimpleRadarSector2StartTimeseriesDataReader.BaseQuery + " WHERE " +
                    SimpleRadarSector2StartTimeseriesDataReader.ViewAliasName + ".[Catalog] = @catalog " +
                    " ORDER BY " + SimpleRadarSector2StartTimeseriesDataReader.ViewAliasName + ".[Catalog]," +SimpleRadarSector2StartTimeseriesDataReader.ViewAliasName + ".[Name]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var catalogParameter = sqlCommandParameters.AddReference( "@catalog", catalog );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleRadarSector2StartTimeseriesDataReader = new SimpleRadarSector2StartTimeseriesDataReader( _loggerFactory, sqlDataReader );
                return simpleRadarSector2StartTimeseriesDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<RadarSector2StartTimeseriesObject> GetRadarSector2StartTimeseriesCollectionByCatalog( Guid? catalog )
        {
            throw new NotImplementedException( );
        }
        public IList<RadarSector2StartTimeseriesObject> GetRadarSector2StartTimeseriesCollectionByCatalogIsNull(  )
        {
            throw new NotImplementedException( );
        }
        public SimpleRadarSector2StartTimeseriesDataReader GetRadarSector2StartTimeseriesByCatalogAndNameDataReader( Guid? catalog, string name )
        {
            const string sql = SimpleRadarSector2StartTimeseriesDataReader.BaseQuery + " WHERE " +
                    SimpleRadarSector2StartTimeseriesDataReader.ViewAliasName + ".[Catalog] = @catalog AND " +
                    SimpleRadarSector2StartTimeseriesDataReader.ViewAliasName + ".[Name] = @name " +
                    " ORDER BY " + SimpleRadarSector2StartTimeseriesDataReader.ViewAliasName + ".[Catalog]," +SimpleRadarSector2StartTimeseriesDataReader.ViewAliasName + ".[Name]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var catalogParameter = sqlCommandParameters.AddReference( "@catalog", catalog );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@name", name, 127 );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleRadarSector2StartTimeseriesDataReader = new SimpleRadarSector2StartTimeseriesDataReader( _loggerFactory, sqlDataReader );
                return simpleRadarSector2StartTimeseriesDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public RadarSector2StartTimeseriesObject? GetRadarSector2StartTimeseriesByCatalogAndName( Guid? catalog, string name )
        {
            throw new NotImplementedException( );
        }
        public IList<RadarSector2StartTimeseriesObject> GetRadarSector2StartTimeseriesCollectionByCatalogIsNullAndName( string name )
        {
            throw new NotImplementedException( );
        }
        // ---------------------------------------------------------------------
        // RadarSensitivityTimeControlLevelTimeseries queries
        // ---------------------------------------------------------------------
        public SimpleRadarSensitivityTimeControlLevelTimeseriesDataReader GetRadarSensitivityTimeControlLevelTimeseriesByIdDataReader( Guid id )
        {
            const string sql = SimpleRadarSensitivityTimeControlLevelTimeseriesDataReader.BaseQuery + "WHERE " + SimpleRadarSensitivityTimeControlLevelTimeseriesDataReader.ViewAliasName + ".[Id] = @id"; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                sqlCommandParameters.AddGuid( "@id", id );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleRadarSensitivityTimeControlLevelTimeseriesDataReader = new SimpleRadarSensitivityTimeControlLevelTimeseriesDataReader( _loggerFactory, sqlDataReader );
                return simpleRadarSensitivityTimeControlLevelTimeseriesDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public RadarSensitivityTimeControlLevelTimeseriesObject? GetRadarSensitivityTimeControlLevelTimeseriesById( Guid id )
        {
            var simpleRadarSensitivityTimeControlLevelTimeseriesDataReader = GetRadarSensitivityTimeControlLevelTimeseriesByIdDataReader( id );
            using ( simpleRadarSensitivityTimeControlLevelTimeseriesDataReader )
            {
                if ( simpleRadarSensitivityTimeControlLevelTimeseriesDataReader.Read( ) )
                {
                    var result = simpleRadarSensitivityTimeControlLevelTimeseriesDataReader.GetDataObject( );
                    return result;
                }
            }
            return null;
        }

        public void GetRadarSensitivityTimeControlLevelTimeseriesById( Guid id, Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleRadarSensitivityTimeControlLevelTimeseriesDataReader = GetRadarSensitivityTimeControlLevelTimeseriesByIdDataReader( id );
                using ( simpleRadarSensitivityTimeControlLevelTimeseriesDataReader )
                {
                    if ( simpleRadarSensitivityTimeControlLevelTimeseriesDataReader.Read( ) )
                    {
                        destinationWriter.Write( true );
                        simpleRadarSensitivityTimeControlLevelTimeseriesDataReader.WriteTo( destinationWriter );
                    }
                    else
                    {
                        destinationWriter.Write( false );
                    }
                }
            }
        }

        public SimpleRadarSensitivityTimeControlLevelTimeseriesDataReader GetRadarSensitivityTimeControlLevelTimeseriesCollectionDataReader( )
        {
            const string sql = SimpleRadarSensitivityTimeControlLevelTimeseriesDataReader.BaseQuery; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleRadarSensitivityTimeControlLevelTimeseriesDataReader = new SimpleRadarSensitivityTimeControlLevelTimeseriesDataReader( _loggerFactory, sqlDataReader );
                return simpleRadarSensitivityTimeControlLevelTimeseriesDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public IList<RadarSensitivityTimeControlLevelTimeseriesObject> GetRadarSensitivityTimeControlLevelTimeseriesCollection( )
        {
            var result = new List<RadarSensitivityTimeControlLevelTimeseriesObject>( );
            var simpleRadarSensitivityTimeControlLevelTimeseriesDataReader = GetRadarSensitivityTimeControlLevelTimeseriesCollectionDataReader( );
            using ( simpleRadarSensitivityTimeControlLevelTimeseriesDataReader )
            {
                while ( simpleRadarSensitivityTimeControlLevelTimeseriesDataReader.Read( ) )
                {
                    var data = simpleRadarSensitivityTimeControlLevelTimeseriesDataReader.GetDataObject( );
                    result.Add( data );
                }
            }
            return result;
        }

        public void GetRadarSensitivityTimeControlLevelTimeseriesCollection( Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleRadarSensitivityTimeControlLevelTimeseriesDataReader = GetRadarSensitivityTimeControlLevelTimeseriesCollectionDataReader( );
                using ( simpleRadarSensitivityTimeControlLevelTimeseriesDataReader )
                {
                    simpleRadarSensitivityTimeControlLevelTimeseriesDataReader.WriteResultSetTo( destinationWriter );
                }
            }
        }

        public SimpleRadarSensitivityTimeControlLevelTimeseriesDataReader GetRadarSensitivityTimeControlLevelTimeseriesCollectionByCatalogDataReader( Guid? catalog )
        {
            const string sql = SimpleRadarSensitivityTimeControlLevelTimeseriesDataReader.BaseQuery + " WHERE " +
                    SimpleRadarSensitivityTimeControlLevelTimeseriesDataReader.ViewAliasName + ".[Catalog] = @catalog " +
                    " ORDER BY " + SimpleRadarSensitivityTimeControlLevelTimeseriesDataReader.ViewAliasName + ".[Catalog]," +SimpleRadarSensitivityTimeControlLevelTimeseriesDataReader.ViewAliasName + ".[Name]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var catalogParameter = sqlCommandParameters.AddReference( "@catalog", catalog );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleRadarSensitivityTimeControlLevelTimeseriesDataReader = new SimpleRadarSensitivityTimeControlLevelTimeseriesDataReader( _loggerFactory, sqlDataReader );
                return simpleRadarSensitivityTimeControlLevelTimeseriesDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<RadarSensitivityTimeControlLevelTimeseriesObject> GetRadarSensitivityTimeControlLevelTimeseriesCollectionByCatalog( Guid? catalog )
        {
            throw new NotImplementedException( );
        }
        public IList<RadarSensitivityTimeControlLevelTimeseriesObject> GetRadarSensitivityTimeControlLevelTimeseriesCollectionByCatalogIsNull(  )
        {
            throw new NotImplementedException( );
        }
        public SimpleRadarSensitivityTimeControlLevelTimeseriesDataReader GetRadarSensitivityTimeControlLevelTimeseriesByCatalogAndNameDataReader( Guid? catalog, string name )
        {
            const string sql = SimpleRadarSensitivityTimeControlLevelTimeseriesDataReader.BaseQuery + " WHERE " +
                    SimpleRadarSensitivityTimeControlLevelTimeseriesDataReader.ViewAliasName + ".[Catalog] = @catalog AND " +
                    SimpleRadarSensitivityTimeControlLevelTimeseriesDataReader.ViewAliasName + ".[Name] = @name " +
                    " ORDER BY " + SimpleRadarSensitivityTimeControlLevelTimeseriesDataReader.ViewAliasName + ".[Catalog]," +SimpleRadarSensitivityTimeControlLevelTimeseriesDataReader.ViewAliasName + ".[Name]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var catalogParameter = sqlCommandParameters.AddReference( "@catalog", catalog );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@name", name, 127 );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleRadarSensitivityTimeControlLevelTimeseriesDataReader = new SimpleRadarSensitivityTimeControlLevelTimeseriesDataReader( _loggerFactory, sqlDataReader );
                return simpleRadarSensitivityTimeControlLevelTimeseriesDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public RadarSensitivityTimeControlLevelTimeseriesObject? GetRadarSensitivityTimeControlLevelTimeseriesByCatalogAndName( Guid? catalog, string name )
        {
            throw new NotImplementedException( );
        }
        public IList<RadarSensitivityTimeControlLevelTimeseriesObject> GetRadarSensitivityTimeControlLevelTimeseriesCollectionByCatalogIsNullAndName( string name )
        {
            throw new NotImplementedException( );
        }
        // ---------------------------------------------------------------------
        // RadarTuningTimeseries queries
        // ---------------------------------------------------------------------
        public SimpleRadarTuningTimeseriesDataReader GetRadarTuningTimeseriesByIdDataReader( Guid id )
        {
            const string sql = SimpleRadarTuningTimeseriesDataReader.BaseQuery + "WHERE " + SimpleRadarTuningTimeseriesDataReader.ViewAliasName + ".[Id] = @id"; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                sqlCommandParameters.AddGuid( "@id", id );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleRadarTuningTimeseriesDataReader = new SimpleRadarTuningTimeseriesDataReader( _loggerFactory, sqlDataReader );
                return simpleRadarTuningTimeseriesDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public RadarTuningTimeseriesObject? GetRadarTuningTimeseriesById( Guid id )
        {
            var simpleRadarTuningTimeseriesDataReader = GetRadarTuningTimeseriesByIdDataReader( id );
            using ( simpleRadarTuningTimeseriesDataReader )
            {
                if ( simpleRadarTuningTimeseriesDataReader.Read( ) )
                {
                    var result = simpleRadarTuningTimeseriesDataReader.GetDataObject( );
                    return result;
                }
            }
            return null;
        }

        public void GetRadarTuningTimeseriesById( Guid id, Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleRadarTuningTimeseriesDataReader = GetRadarTuningTimeseriesByIdDataReader( id );
                using ( simpleRadarTuningTimeseriesDataReader )
                {
                    if ( simpleRadarTuningTimeseriesDataReader.Read( ) )
                    {
                        destinationWriter.Write( true );
                        simpleRadarTuningTimeseriesDataReader.WriteTo( destinationWriter );
                    }
                    else
                    {
                        destinationWriter.Write( false );
                    }
                }
            }
        }

        public SimpleRadarTuningTimeseriesDataReader GetRadarTuningTimeseriesCollectionDataReader( )
        {
            const string sql = SimpleRadarTuningTimeseriesDataReader.BaseQuery; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleRadarTuningTimeseriesDataReader = new SimpleRadarTuningTimeseriesDataReader( _loggerFactory, sqlDataReader );
                return simpleRadarTuningTimeseriesDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public IList<RadarTuningTimeseriesObject> GetRadarTuningTimeseriesCollection( )
        {
            var result = new List<RadarTuningTimeseriesObject>( );
            var simpleRadarTuningTimeseriesDataReader = GetRadarTuningTimeseriesCollectionDataReader( );
            using ( simpleRadarTuningTimeseriesDataReader )
            {
                while ( simpleRadarTuningTimeseriesDataReader.Read( ) )
                {
                    var data = simpleRadarTuningTimeseriesDataReader.GetDataObject( );
                    result.Add( data );
                }
            }
            return result;
        }

        public void GetRadarTuningTimeseriesCollection( Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleRadarTuningTimeseriesDataReader = GetRadarTuningTimeseriesCollectionDataReader( );
                using ( simpleRadarTuningTimeseriesDataReader )
                {
                    simpleRadarTuningTimeseriesDataReader.WriteResultSetTo( destinationWriter );
                }
            }
        }

        public SimpleRadarTuningTimeseriesDataReader GetRadarTuningTimeseriesCollectionByCatalogDataReader( Guid? catalog )
        {
            const string sql = SimpleRadarTuningTimeseriesDataReader.BaseQuery + " WHERE " +
                    SimpleRadarTuningTimeseriesDataReader.ViewAliasName + ".[Catalog] = @catalog " +
                    " ORDER BY " + SimpleRadarTuningTimeseriesDataReader.ViewAliasName + ".[Catalog]," +SimpleRadarTuningTimeseriesDataReader.ViewAliasName + ".[Name]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var catalogParameter = sqlCommandParameters.AddReference( "@catalog", catalog );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleRadarTuningTimeseriesDataReader = new SimpleRadarTuningTimeseriesDataReader( _loggerFactory, sqlDataReader );
                return simpleRadarTuningTimeseriesDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<RadarTuningTimeseriesObject> GetRadarTuningTimeseriesCollectionByCatalog( Guid? catalog )
        {
            throw new NotImplementedException( );
        }
        public IList<RadarTuningTimeseriesObject> GetRadarTuningTimeseriesCollectionByCatalogIsNull(  )
        {
            throw new NotImplementedException( );
        }
        public SimpleRadarTuningTimeseriesDataReader GetRadarTuningTimeseriesByCatalogAndNameDataReader( Guid? catalog, string name )
        {
            const string sql = SimpleRadarTuningTimeseriesDataReader.BaseQuery + " WHERE " +
                    SimpleRadarTuningTimeseriesDataReader.ViewAliasName + ".[Catalog] = @catalog AND " +
                    SimpleRadarTuningTimeseriesDataReader.ViewAliasName + ".[Name] = @name " +
                    " ORDER BY " + SimpleRadarTuningTimeseriesDataReader.ViewAliasName + ".[Catalog]," +SimpleRadarTuningTimeseriesDataReader.ViewAliasName + ".[Name]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var catalogParameter = sqlCommandParameters.AddReference( "@catalog", catalog );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@name", name, 127 );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleRadarTuningTimeseriesDataReader = new SimpleRadarTuningTimeseriesDataReader( _loggerFactory, sqlDataReader );
                return simpleRadarTuningTimeseriesDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public RadarTuningTimeseriesObject? GetRadarTuningTimeseriesByCatalogAndName( Guid? catalog, string name )
        {
            throw new NotImplementedException( );
        }
        public IList<RadarTuningTimeseriesObject> GetRadarTuningTimeseriesCollectionByCatalogIsNullAndName( string name )
        {
            throw new NotImplementedException( );
        }
        // ---------------------------------------------------------------------
        // VesselPersonsOnBoardTimeseries queries
        // ---------------------------------------------------------------------
        public SimpleVesselPersonsOnBoardTimeseriesDataReader GetVesselPersonsOnBoardTimeseriesByIdDataReader( Guid id )
        {
            const string sql = SimpleVesselPersonsOnBoardTimeseriesDataReader.BaseQuery + "WHERE " + SimpleVesselPersonsOnBoardTimeseriesDataReader.ViewAliasName + ".[Id] = @id"; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                sqlCommandParameters.AddGuid( "@id", id );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleVesselPersonsOnBoardTimeseriesDataReader = new SimpleVesselPersonsOnBoardTimeseriesDataReader( _loggerFactory, sqlDataReader );
                return simpleVesselPersonsOnBoardTimeseriesDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public VesselPersonsOnBoardTimeseriesObject? GetVesselPersonsOnBoardTimeseriesById( Guid id )
        {
            var simpleVesselPersonsOnBoardTimeseriesDataReader = GetVesselPersonsOnBoardTimeseriesByIdDataReader( id );
            using ( simpleVesselPersonsOnBoardTimeseriesDataReader )
            {
                if ( simpleVesselPersonsOnBoardTimeseriesDataReader.Read( ) )
                {
                    var result = simpleVesselPersonsOnBoardTimeseriesDataReader.GetDataObject( );
                    return result;
                }
            }
            return null;
        }

        public void GetVesselPersonsOnBoardTimeseriesById( Guid id, Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleVesselPersonsOnBoardTimeseriesDataReader = GetVesselPersonsOnBoardTimeseriesByIdDataReader( id );
                using ( simpleVesselPersonsOnBoardTimeseriesDataReader )
                {
                    if ( simpleVesselPersonsOnBoardTimeseriesDataReader.Read( ) )
                    {
                        destinationWriter.Write( true );
                        simpleVesselPersonsOnBoardTimeseriesDataReader.WriteTo( destinationWriter );
                    }
                    else
                    {
                        destinationWriter.Write( false );
                    }
                }
            }
        }

        public SimpleVesselPersonsOnBoardTimeseriesDataReader GetVesselPersonsOnBoardTimeseriesCollectionDataReader( )
        {
            const string sql = SimpleVesselPersonsOnBoardTimeseriesDataReader.BaseQuery; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleVesselPersonsOnBoardTimeseriesDataReader = new SimpleVesselPersonsOnBoardTimeseriesDataReader( _loggerFactory, sqlDataReader );
                return simpleVesselPersonsOnBoardTimeseriesDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public IList<VesselPersonsOnBoardTimeseriesObject> GetVesselPersonsOnBoardTimeseriesCollection( )
        {
            var result = new List<VesselPersonsOnBoardTimeseriesObject>( );
            var simpleVesselPersonsOnBoardTimeseriesDataReader = GetVesselPersonsOnBoardTimeseriesCollectionDataReader( );
            using ( simpleVesselPersonsOnBoardTimeseriesDataReader )
            {
                while ( simpleVesselPersonsOnBoardTimeseriesDataReader.Read( ) )
                {
                    var data = simpleVesselPersonsOnBoardTimeseriesDataReader.GetDataObject( );
                    result.Add( data );
                }
            }
            return result;
        }

        public void GetVesselPersonsOnBoardTimeseriesCollection( Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleVesselPersonsOnBoardTimeseriesDataReader = GetVesselPersonsOnBoardTimeseriesCollectionDataReader( );
                using ( simpleVesselPersonsOnBoardTimeseriesDataReader )
                {
                    simpleVesselPersonsOnBoardTimeseriesDataReader.WriteResultSetTo( destinationWriter );
                }
            }
        }

        public SimpleVesselPersonsOnBoardTimeseriesDataReader GetVesselPersonsOnBoardTimeseriesCollectionByCatalogDataReader( Guid? catalog )
        {
            const string sql = SimpleVesselPersonsOnBoardTimeseriesDataReader.BaseQuery + " WHERE " +
                    SimpleVesselPersonsOnBoardTimeseriesDataReader.ViewAliasName + ".[Catalog] = @catalog " +
                    " ORDER BY " + SimpleVesselPersonsOnBoardTimeseriesDataReader.ViewAliasName + ".[Catalog]," +SimpleVesselPersonsOnBoardTimeseriesDataReader.ViewAliasName + ".[Name]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var catalogParameter = sqlCommandParameters.AddReference( "@catalog", catalog );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleVesselPersonsOnBoardTimeseriesDataReader = new SimpleVesselPersonsOnBoardTimeseriesDataReader( _loggerFactory, sqlDataReader );
                return simpleVesselPersonsOnBoardTimeseriesDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<VesselPersonsOnBoardTimeseriesObject> GetVesselPersonsOnBoardTimeseriesCollectionByCatalog( Guid? catalog )
        {
            throw new NotImplementedException( );
        }
        public IList<VesselPersonsOnBoardTimeseriesObject> GetVesselPersonsOnBoardTimeseriesCollectionByCatalogIsNull(  )
        {
            throw new NotImplementedException( );
        }
        public SimpleVesselPersonsOnBoardTimeseriesDataReader GetVesselPersonsOnBoardTimeseriesByCatalogAndNameDataReader( Guid? catalog, string name )
        {
            const string sql = SimpleVesselPersonsOnBoardTimeseriesDataReader.BaseQuery + " WHERE " +
                    SimpleVesselPersonsOnBoardTimeseriesDataReader.ViewAliasName + ".[Catalog] = @catalog AND " +
                    SimpleVesselPersonsOnBoardTimeseriesDataReader.ViewAliasName + ".[Name] = @name " +
                    " ORDER BY " + SimpleVesselPersonsOnBoardTimeseriesDataReader.ViewAliasName + ".[Catalog]," +SimpleVesselPersonsOnBoardTimeseriesDataReader.ViewAliasName + ".[Name]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var catalogParameter = sqlCommandParameters.AddReference( "@catalog", catalog );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@name", name, 127 );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleVesselPersonsOnBoardTimeseriesDataReader = new SimpleVesselPersonsOnBoardTimeseriesDataReader( _loggerFactory, sqlDataReader );
                return simpleVesselPersonsOnBoardTimeseriesDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public VesselPersonsOnBoardTimeseriesObject? GetVesselPersonsOnBoardTimeseriesByCatalogAndName( Guid? catalog, string name )
        {
            throw new NotImplementedException( );
        }
        public IList<VesselPersonsOnBoardTimeseriesObject> GetVesselPersonsOnBoardTimeseriesCollectionByCatalogIsNullAndName( string name )
        {
            throw new NotImplementedException( );
        }
        // ---------------------------------------------------------------------
        // Int64Timeseries queries
        // ---------------------------------------------------------------------
        public SimpleInt64TimeseriesDataReader GetInt64TimeseriesByIdDataReader( Guid id )
        {
            const string sql = SimpleInt64TimeseriesDataReader.BaseQuery + "WHERE " + SimpleInt64TimeseriesDataReader.ViewAliasName + ".[Id] = @id"; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                sqlCommandParameters.AddGuid( "@id", id );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleInt64TimeseriesDataReader = new SimpleInt64TimeseriesDataReader( _loggerFactory, sqlDataReader );
                return simpleInt64TimeseriesDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public Int64TimeseriesObject? GetInt64TimeseriesById( Guid id )
        {
            var simpleInt64TimeseriesDataReader = GetInt64TimeseriesByIdDataReader( id );
            using ( simpleInt64TimeseriesDataReader )
            {
                if ( simpleInt64TimeseriesDataReader.Read( ) )
                {
                    var result = simpleInt64TimeseriesDataReader.GetDataObject( );
                    return result;
                }
            }
            return null;
        }

        public void GetInt64TimeseriesById( Guid id, Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleInt64TimeseriesDataReader = GetInt64TimeseriesByIdDataReader( id );
                using ( simpleInt64TimeseriesDataReader )
                {
                    if ( simpleInt64TimeseriesDataReader.Read( ) )
                    {
                        destinationWriter.Write( true );
                        simpleInt64TimeseriesDataReader.WriteTo( destinationWriter );
                    }
                    else
                    {
                        destinationWriter.Write( false );
                    }
                }
            }
        }

        public SimpleInt64TimeseriesDataReader GetInt64TimeseriesCollectionDataReader( )
        {
            const string sql = SimpleInt64TimeseriesDataReader.BaseQuery; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleInt64TimeseriesDataReader = new SimpleInt64TimeseriesDataReader( _loggerFactory, sqlDataReader );
                return simpleInt64TimeseriesDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public IList<Int64TimeseriesObject> GetInt64TimeseriesCollection( )
        {
            var result = new List<Int64TimeseriesObject>( );
            var simpleInt64TimeseriesDataReader = GetInt64TimeseriesCollectionDataReader( );
            using ( simpleInt64TimeseriesDataReader )
            {
                while ( simpleInt64TimeseriesDataReader.Read( ) )
                {
                    var data = simpleInt64TimeseriesDataReader.GetDataObject( );
                    result.Add( data );
                }
            }
            return result;
        }

        public void GetInt64TimeseriesCollection( Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleInt64TimeseriesDataReader = GetInt64TimeseriesCollectionDataReader( );
                using ( simpleInt64TimeseriesDataReader )
                {
                    simpleInt64TimeseriesDataReader.WriteResultSetTo( destinationWriter );
                }
            }
        }

        public SimpleInt64TimeseriesDataReader GetInt64TimeseriesCollectionByCatalogDataReader( Guid? catalog )
        {
            const string sql = SimpleInt64TimeseriesDataReader.BaseQuery + " WHERE " +
                    SimpleInt64TimeseriesDataReader.ViewAliasName + ".[Catalog] = @catalog " +
                    " ORDER BY " + SimpleInt64TimeseriesDataReader.ViewAliasName + ".[Catalog]," +SimpleInt64TimeseriesDataReader.ViewAliasName + ".[Name]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var catalogParameter = sqlCommandParameters.AddReference( "@catalog", catalog );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleInt64TimeseriesDataReader = new SimpleInt64TimeseriesDataReader( _loggerFactory, sqlDataReader );
                return simpleInt64TimeseriesDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<Int64TimeseriesObject> GetInt64TimeseriesCollectionByCatalog( Guid? catalog )
        {
            throw new NotImplementedException( );
        }
        public IList<Int64TimeseriesObject> GetInt64TimeseriesCollectionByCatalogIsNull(  )
        {
            throw new NotImplementedException( );
        }
        public SimpleInt64TimeseriesDataReader GetInt64TimeseriesByCatalogAndNameDataReader( Guid? catalog, string name )
        {
            const string sql = SimpleInt64TimeseriesDataReader.BaseQuery + " WHERE " +
                    SimpleInt64TimeseriesDataReader.ViewAliasName + ".[Catalog] = @catalog AND " +
                    SimpleInt64TimeseriesDataReader.ViewAliasName + ".[Name] = @name " +
                    " ORDER BY " + SimpleInt64TimeseriesDataReader.ViewAliasName + ".[Catalog]," +SimpleInt64TimeseriesDataReader.ViewAliasName + ".[Name]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var catalogParameter = sqlCommandParameters.AddReference( "@catalog", catalog );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@name", name, 127 );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleInt64TimeseriesDataReader = new SimpleInt64TimeseriesDataReader( _loggerFactory, sqlDataReader );
                return simpleInt64TimeseriesDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public Int64TimeseriesObject? GetInt64TimeseriesByCatalogAndName( Guid? catalog, string name )
        {
            throw new NotImplementedException( );
        }
        public IList<Int64TimeseriesObject> GetInt64TimeseriesCollectionByCatalogIsNullAndName( string name )
        {
            throw new NotImplementedException( );
        }
        // ---------------------------------------------------------------------
        // Position2DTimeseries queries
        // ---------------------------------------------------------------------
        public SimplePosition2DTimeseriesDataReader GetPosition2DTimeseriesByIdDataReader( Guid id )
        {
            const string sql = SimplePosition2DTimeseriesDataReader.BaseQuery + "WHERE " + SimplePosition2DTimeseriesDataReader.ViewAliasName + ".[Id] = @id"; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                sqlCommandParameters.AddGuid( "@id", id );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simplePosition2DTimeseriesDataReader = new SimplePosition2DTimeseriesDataReader( _loggerFactory, sqlDataReader );
                return simplePosition2DTimeseriesDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public Position2DTimeseriesObject? GetPosition2DTimeseriesById( Guid id )
        {
            var simplePosition2DTimeseriesDataReader = GetPosition2DTimeseriesByIdDataReader( id );
            using ( simplePosition2DTimeseriesDataReader )
            {
                if ( simplePosition2DTimeseriesDataReader.Read( ) )
                {
                    var result = simplePosition2DTimeseriesDataReader.GetDataObject( );
                    return result;
                }
            }
            return null;
        }

        public void GetPosition2DTimeseriesById( Guid id, Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simplePosition2DTimeseriesDataReader = GetPosition2DTimeseriesByIdDataReader( id );
                using ( simplePosition2DTimeseriesDataReader )
                {
                    if ( simplePosition2DTimeseriesDataReader.Read( ) )
                    {
                        destinationWriter.Write( true );
                        simplePosition2DTimeseriesDataReader.WriteTo( destinationWriter );
                    }
                    else
                    {
                        destinationWriter.Write( false );
                    }
                }
            }
        }

        public SimplePosition2DTimeseriesDataReader GetPosition2DTimeseriesCollectionDataReader( )
        {
            const string sql = SimplePosition2DTimeseriesDataReader.BaseQuery; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simplePosition2DTimeseriesDataReader = new SimplePosition2DTimeseriesDataReader( _loggerFactory, sqlDataReader );
                return simplePosition2DTimeseriesDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public IList<Position2DTimeseriesObject> GetPosition2DTimeseriesCollection( )
        {
            var result = new List<Position2DTimeseriesObject>( );
            var simplePosition2DTimeseriesDataReader = GetPosition2DTimeseriesCollectionDataReader( );
            using ( simplePosition2DTimeseriesDataReader )
            {
                while ( simplePosition2DTimeseriesDataReader.Read( ) )
                {
                    var data = simplePosition2DTimeseriesDataReader.GetDataObject( );
                    result.Add( data );
                }
            }
            return result;
        }

        public void GetPosition2DTimeseriesCollection( Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simplePosition2DTimeseriesDataReader = GetPosition2DTimeseriesCollectionDataReader( );
                using ( simplePosition2DTimeseriesDataReader )
                {
                    simplePosition2DTimeseriesDataReader.WriteResultSetTo( destinationWriter );
                }
            }
        }

        public SimplePosition2DTimeseriesDataReader GetPosition2DTimeseriesCollectionByCatalogDataReader( Guid? catalog )
        {
            const string sql = SimplePosition2DTimeseriesDataReader.BaseQuery + " WHERE " +
                    SimplePosition2DTimeseriesDataReader.ViewAliasName + ".[Catalog] = @catalog " +
                    " ORDER BY " + SimplePosition2DTimeseriesDataReader.ViewAliasName + ".[Catalog]," +SimplePosition2DTimeseriesDataReader.ViewAliasName + ".[Name]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var catalogParameter = sqlCommandParameters.AddReference( "@catalog", catalog );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simplePosition2DTimeseriesDataReader = new SimplePosition2DTimeseriesDataReader( _loggerFactory, sqlDataReader );
                return simplePosition2DTimeseriesDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<Position2DTimeseriesObject> GetPosition2DTimeseriesCollectionByCatalog( Guid? catalog )
        {
            throw new NotImplementedException( );
        }
        public IList<Position2DTimeseriesObject> GetPosition2DTimeseriesCollectionByCatalogIsNull(  )
        {
            throw new NotImplementedException( );
        }
        public SimplePosition2DTimeseriesDataReader GetPosition2DTimeseriesByCatalogAndNameDataReader( Guid? catalog, string name )
        {
            const string sql = SimplePosition2DTimeseriesDataReader.BaseQuery + " WHERE " +
                    SimplePosition2DTimeseriesDataReader.ViewAliasName + ".[Catalog] = @catalog AND " +
                    SimplePosition2DTimeseriesDataReader.ViewAliasName + ".[Name] = @name " +
                    " ORDER BY " + SimplePosition2DTimeseriesDataReader.ViewAliasName + ".[Catalog]," +SimplePosition2DTimeseriesDataReader.ViewAliasName + ".[Name]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var catalogParameter = sqlCommandParameters.AddReference( "@catalog", catalog );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@name", name, 127 );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simplePosition2DTimeseriesDataReader = new SimplePosition2DTimeseriesDataReader( _loggerFactory, sqlDataReader );
                return simplePosition2DTimeseriesDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public Position2DTimeseriesObject? GetPosition2DTimeseriesByCatalogAndName( Guid? catalog, string name )
        {
            throw new NotImplementedException( );
        }
        public IList<Position2DTimeseriesObject> GetPosition2DTimeseriesCollectionByCatalogIsNullAndName( string name )
        {
            throw new NotImplementedException( );
        }
        // ---------------------------------------------------------------------
        // Position3DTimeseries queries
        // ---------------------------------------------------------------------
        public SimplePosition3DTimeseriesDataReader GetPosition3DTimeseriesByIdDataReader( Guid id )
        {
            const string sql = SimplePosition3DTimeseriesDataReader.BaseQuery + "WHERE " + SimplePosition3DTimeseriesDataReader.ViewAliasName + ".[Id] = @id"; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                sqlCommandParameters.AddGuid( "@id", id );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simplePosition3DTimeseriesDataReader = new SimplePosition3DTimeseriesDataReader( _loggerFactory, sqlDataReader );
                return simplePosition3DTimeseriesDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public Position3DTimeseriesObject? GetPosition3DTimeseriesById( Guid id )
        {
            var simplePosition3DTimeseriesDataReader = GetPosition3DTimeseriesByIdDataReader( id );
            using ( simplePosition3DTimeseriesDataReader )
            {
                if ( simplePosition3DTimeseriesDataReader.Read( ) )
                {
                    var result = simplePosition3DTimeseriesDataReader.GetDataObject( );
                    return result;
                }
            }
            return null;
        }

        public void GetPosition3DTimeseriesById( Guid id, Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simplePosition3DTimeseriesDataReader = GetPosition3DTimeseriesByIdDataReader( id );
                using ( simplePosition3DTimeseriesDataReader )
                {
                    if ( simplePosition3DTimeseriesDataReader.Read( ) )
                    {
                        destinationWriter.Write( true );
                        simplePosition3DTimeseriesDataReader.WriteTo( destinationWriter );
                    }
                    else
                    {
                        destinationWriter.Write( false );
                    }
                }
            }
        }

        public SimplePosition3DTimeseriesDataReader GetPosition3DTimeseriesCollectionDataReader( )
        {
            const string sql = SimplePosition3DTimeseriesDataReader.BaseQuery; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simplePosition3DTimeseriesDataReader = new SimplePosition3DTimeseriesDataReader( _loggerFactory, sqlDataReader );
                return simplePosition3DTimeseriesDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public IList<Position3DTimeseriesObject> GetPosition3DTimeseriesCollection( )
        {
            var result = new List<Position3DTimeseriesObject>( );
            var simplePosition3DTimeseriesDataReader = GetPosition3DTimeseriesCollectionDataReader( );
            using ( simplePosition3DTimeseriesDataReader )
            {
                while ( simplePosition3DTimeseriesDataReader.Read( ) )
                {
                    var data = simplePosition3DTimeseriesDataReader.GetDataObject( );
                    result.Add( data );
                }
            }
            return result;
        }

        public void GetPosition3DTimeseriesCollection( Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simplePosition3DTimeseriesDataReader = GetPosition3DTimeseriesCollectionDataReader( );
                using ( simplePosition3DTimeseriesDataReader )
                {
                    simplePosition3DTimeseriesDataReader.WriteResultSetTo( destinationWriter );
                }
            }
        }

        public SimplePosition3DTimeseriesDataReader GetPosition3DTimeseriesCollectionByCatalogDataReader( Guid? catalog )
        {
            const string sql = SimplePosition3DTimeseriesDataReader.BaseQuery + " WHERE " +
                    SimplePosition3DTimeseriesDataReader.ViewAliasName + ".[Catalog] = @catalog " +
                    " ORDER BY " + SimplePosition3DTimeseriesDataReader.ViewAliasName + ".[Catalog]," +SimplePosition3DTimeseriesDataReader.ViewAliasName + ".[Name]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var catalogParameter = sqlCommandParameters.AddReference( "@catalog", catalog );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simplePosition3DTimeseriesDataReader = new SimplePosition3DTimeseriesDataReader( _loggerFactory, sqlDataReader );
                return simplePosition3DTimeseriesDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<Position3DTimeseriesObject> GetPosition3DTimeseriesCollectionByCatalog( Guid? catalog )
        {
            throw new NotImplementedException( );
        }
        public IList<Position3DTimeseriesObject> GetPosition3DTimeseriesCollectionByCatalogIsNull(  )
        {
            throw new NotImplementedException( );
        }
        public SimplePosition3DTimeseriesDataReader GetPosition3DTimeseriesByCatalogAndNameDataReader( Guid? catalog, string name )
        {
            const string sql = SimplePosition3DTimeseriesDataReader.BaseQuery + " WHERE " +
                    SimplePosition3DTimeseriesDataReader.ViewAliasName + ".[Catalog] = @catalog AND " +
                    SimplePosition3DTimeseriesDataReader.ViewAliasName + ".[Name] = @name " +
                    " ORDER BY " + SimplePosition3DTimeseriesDataReader.ViewAliasName + ".[Catalog]," +SimplePosition3DTimeseriesDataReader.ViewAliasName + ".[Name]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var catalogParameter = sqlCommandParameters.AddReference( "@catalog", catalog );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@name", name, 127 );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simplePosition3DTimeseriesDataReader = new SimplePosition3DTimeseriesDataReader( _loggerFactory, sqlDataReader );
                return simplePosition3DTimeseriesDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public Position3DTimeseriesObject? GetPosition3DTimeseriesByCatalogAndName( Guid? catalog, string name )
        {
            throw new NotImplementedException( );
        }
        public IList<Position3DTimeseriesObject> GetPosition3DTimeseriesCollectionByCatalogIsNullAndName( string name )
        {
            throw new NotImplementedException( );
        }
        // ---------------------------------------------------------------------
        // ReferenceTimeseries queries
        // ---------------------------------------------------------------------
        public SimpleReferenceTimeseriesDataReader GetReferenceTimeseriesByIdDataReader( Guid id )
        {
            const string sql = SimpleReferenceTimeseriesDataReader.BaseQuery + "WHERE " + SimpleReferenceTimeseriesDataReader.ViewAliasName + ".[Id] = @id"; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                sqlCommandParameters.AddGuid( "@id", id );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleReferenceTimeseriesDataReader = new SimpleReferenceTimeseriesDataReader( _loggerFactory, sqlDataReader );
                return simpleReferenceTimeseriesDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public ReferenceTimeseriesObject? GetReferenceTimeseriesById( Guid id )
        {
            var simpleReferenceTimeseriesDataReader = GetReferenceTimeseriesByIdDataReader( id );
            using ( simpleReferenceTimeseriesDataReader )
            {
                if ( simpleReferenceTimeseriesDataReader.Read( ) )
                {
                    var result = simpleReferenceTimeseriesDataReader.GetDataObject( );
                    return result;
                }
            }
            return null;
        }

        public void GetReferenceTimeseriesById( Guid id, Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleReferenceTimeseriesDataReader = GetReferenceTimeseriesByIdDataReader( id );
                using ( simpleReferenceTimeseriesDataReader )
                {
                    if ( simpleReferenceTimeseriesDataReader.Read( ) )
                    {
                        destinationWriter.Write( true );
                        simpleReferenceTimeseriesDataReader.WriteTo( destinationWriter );
                    }
                    else
                    {
                        destinationWriter.Write( false );
                    }
                }
            }
        }

        public SimpleReferenceTimeseriesDataReader GetReferenceTimeseriesCollectionDataReader( )
        {
            const string sql = SimpleReferenceTimeseriesDataReader.BaseQuery; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleReferenceTimeseriesDataReader = new SimpleReferenceTimeseriesDataReader( _loggerFactory, sqlDataReader );
                return simpleReferenceTimeseriesDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public IList<ReferenceTimeseriesObject> GetReferenceTimeseriesCollection( )
        {
            var result = new List<ReferenceTimeseriesObject>( );
            var simpleReferenceTimeseriesDataReader = GetReferenceTimeseriesCollectionDataReader( );
            using ( simpleReferenceTimeseriesDataReader )
            {
                while ( simpleReferenceTimeseriesDataReader.Read( ) )
                {
                    var data = simpleReferenceTimeseriesDataReader.GetDataObject( );
                    result.Add( data );
                }
            }
            return result;
        }

        public void GetReferenceTimeseriesCollection( Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleReferenceTimeseriesDataReader = GetReferenceTimeseriesCollectionDataReader( );
                using ( simpleReferenceTimeseriesDataReader )
                {
                    simpleReferenceTimeseriesDataReader.WriteResultSetTo( destinationWriter );
                }
            }
        }

        public SimpleReferenceTimeseriesDataReader GetReferenceTimeseriesCollectionByCatalogDataReader( Guid? catalog )
        {
            const string sql = SimpleReferenceTimeseriesDataReader.BaseQuery + " WHERE " +
                    SimpleReferenceTimeseriesDataReader.ViewAliasName + ".[Catalog] = @catalog " +
                    " ORDER BY " + SimpleReferenceTimeseriesDataReader.ViewAliasName + ".[Catalog]," +SimpleReferenceTimeseriesDataReader.ViewAliasName + ".[Name]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var catalogParameter = sqlCommandParameters.AddReference( "@catalog", catalog );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleReferenceTimeseriesDataReader = new SimpleReferenceTimeseriesDataReader( _loggerFactory, sqlDataReader );
                return simpleReferenceTimeseriesDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<ReferenceTimeseriesObject> GetReferenceTimeseriesCollectionByCatalog( Guid? catalog )
        {
            throw new NotImplementedException( );
        }
        public IList<ReferenceTimeseriesObject> GetReferenceTimeseriesCollectionByCatalogIsNull(  )
        {
            throw new NotImplementedException( );
        }
        public SimpleReferenceTimeseriesDataReader GetReferenceTimeseriesByCatalogAndNameDataReader( Guid? catalog, string name )
        {
            const string sql = SimpleReferenceTimeseriesDataReader.BaseQuery + " WHERE " +
                    SimpleReferenceTimeseriesDataReader.ViewAliasName + ".[Catalog] = @catalog AND " +
                    SimpleReferenceTimeseriesDataReader.ViewAliasName + ".[Name] = @name " +
                    " ORDER BY " + SimpleReferenceTimeseriesDataReader.ViewAliasName + ".[Catalog]," +SimpleReferenceTimeseriesDataReader.ViewAliasName + ".[Name]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var catalogParameter = sqlCommandParameters.AddReference( "@catalog", catalog );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@name", name, 127 );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleReferenceTimeseriesDataReader = new SimpleReferenceTimeseriesDataReader( _loggerFactory, sqlDataReader );
                return simpleReferenceTimeseriesDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public ReferenceTimeseriesObject? GetReferenceTimeseriesByCatalogAndName( Guid? catalog, string name )
        {
            throw new NotImplementedException( );
        }
        public IList<ReferenceTimeseriesObject> GetReferenceTimeseriesCollectionByCatalogIsNullAndName( string name )
        {
            throw new NotImplementedException( );
        }
        // ---------------------------------------------------------------------
        // SByteTimeseries queries
        // ---------------------------------------------------------------------
        public SimpleSByteTimeseriesDataReader GetSByteTimeseriesByIdDataReader( Guid id )
        {
            const string sql = SimpleSByteTimeseriesDataReader.BaseQuery + "WHERE " + SimpleSByteTimeseriesDataReader.ViewAliasName + ".[Id] = @id"; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                sqlCommandParameters.AddGuid( "@id", id );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleSByteTimeseriesDataReader = new SimpleSByteTimeseriesDataReader( _loggerFactory, sqlDataReader );
                return simpleSByteTimeseriesDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public SByteTimeseriesObject? GetSByteTimeseriesById( Guid id )
        {
            var simpleSByteTimeseriesDataReader = GetSByteTimeseriesByIdDataReader( id );
            using ( simpleSByteTimeseriesDataReader )
            {
                if ( simpleSByteTimeseriesDataReader.Read( ) )
                {
                    var result = simpleSByteTimeseriesDataReader.GetDataObject( );
                    return result;
                }
            }
            return null;
        }

        public void GetSByteTimeseriesById( Guid id, Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleSByteTimeseriesDataReader = GetSByteTimeseriesByIdDataReader( id );
                using ( simpleSByteTimeseriesDataReader )
                {
                    if ( simpleSByteTimeseriesDataReader.Read( ) )
                    {
                        destinationWriter.Write( true );
                        simpleSByteTimeseriesDataReader.WriteTo( destinationWriter );
                    }
                    else
                    {
                        destinationWriter.Write( false );
                    }
                }
            }
        }

        public SimpleSByteTimeseriesDataReader GetSByteTimeseriesCollectionDataReader( )
        {
            const string sql = SimpleSByteTimeseriesDataReader.BaseQuery; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleSByteTimeseriesDataReader = new SimpleSByteTimeseriesDataReader( _loggerFactory, sqlDataReader );
                return simpleSByteTimeseriesDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public IList<SByteTimeseriesObject> GetSByteTimeseriesCollection( )
        {
            var result = new List<SByteTimeseriesObject>( );
            var simpleSByteTimeseriesDataReader = GetSByteTimeseriesCollectionDataReader( );
            using ( simpleSByteTimeseriesDataReader )
            {
                while ( simpleSByteTimeseriesDataReader.Read( ) )
                {
                    var data = simpleSByteTimeseriesDataReader.GetDataObject( );
                    result.Add( data );
                }
            }
            return result;
        }

        public void GetSByteTimeseriesCollection( Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleSByteTimeseriesDataReader = GetSByteTimeseriesCollectionDataReader( );
                using ( simpleSByteTimeseriesDataReader )
                {
                    simpleSByteTimeseriesDataReader.WriteResultSetTo( destinationWriter );
                }
            }
        }

        public SimpleSByteTimeseriesDataReader GetSByteTimeseriesCollectionByCatalogDataReader( Guid? catalog )
        {
            const string sql = SimpleSByteTimeseriesDataReader.BaseQuery + " WHERE " +
                    SimpleSByteTimeseriesDataReader.ViewAliasName + ".[Catalog] = @catalog " +
                    " ORDER BY " + SimpleSByteTimeseriesDataReader.ViewAliasName + ".[Catalog]," +SimpleSByteTimeseriesDataReader.ViewAliasName + ".[Name]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var catalogParameter = sqlCommandParameters.AddReference( "@catalog", catalog );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleSByteTimeseriesDataReader = new SimpleSByteTimeseriesDataReader( _loggerFactory, sqlDataReader );
                return simpleSByteTimeseriesDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<SByteTimeseriesObject> GetSByteTimeseriesCollectionByCatalog( Guid? catalog )
        {
            throw new NotImplementedException( );
        }
        public IList<SByteTimeseriesObject> GetSByteTimeseriesCollectionByCatalogIsNull(  )
        {
            throw new NotImplementedException( );
        }
        public SimpleSByteTimeseriesDataReader GetSByteTimeseriesByCatalogAndNameDataReader( Guid? catalog, string name )
        {
            const string sql = SimpleSByteTimeseriesDataReader.BaseQuery + " WHERE " +
                    SimpleSByteTimeseriesDataReader.ViewAliasName + ".[Catalog] = @catalog AND " +
                    SimpleSByteTimeseriesDataReader.ViewAliasName + ".[Name] = @name " +
                    " ORDER BY " + SimpleSByteTimeseriesDataReader.ViewAliasName + ".[Catalog]," +SimpleSByteTimeseriesDataReader.ViewAliasName + ".[Name]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var catalogParameter = sqlCommandParameters.AddReference( "@catalog", catalog );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@name", name, 127 );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleSByteTimeseriesDataReader = new SimpleSByteTimeseriesDataReader( _loggerFactory, sqlDataReader );
                return simpleSByteTimeseriesDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public SByteTimeseriesObject? GetSByteTimeseriesByCatalogAndName( Guid? catalog, string name )
        {
            throw new NotImplementedException( );
        }
        public IList<SByteTimeseriesObject> GetSByteTimeseriesCollectionByCatalogIsNullAndName( string name )
        {
            throw new NotImplementedException( );
        }
        // ---------------------------------------------------------------------
        // SingleTimeseries queries
        // ---------------------------------------------------------------------
        public SimpleSingleTimeseriesDataReader GetSingleTimeseriesByIdDataReader( Guid id )
        {
            const string sql = SimpleSingleTimeseriesDataReader.BaseQuery + "WHERE " + SimpleSingleTimeseriesDataReader.ViewAliasName + ".[Id] = @id"; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                sqlCommandParameters.AddGuid( "@id", id );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleSingleTimeseriesDataReader = new SimpleSingleTimeseriesDataReader( _loggerFactory, sqlDataReader );
                return simpleSingleTimeseriesDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public SingleTimeseriesObject? GetSingleTimeseriesById( Guid id )
        {
            var simpleSingleTimeseriesDataReader = GetSingleTimeseriesByIdDataReader( id );
            using ( simpleSingleTimeseriesDataReader )
            {
                if ( simpleSingleTimeseriesDataReader.Read( ) )
                {
                    var result = simpleSingleTimeseriesDataReader.GetDataObject( );
                    return result;
                }
            }
            return null;
        }

        public void GetSingleTimeseriesById( Guid id, Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleSingleTimeseriesDataReader = GetSingleTimeseriesByIdDataReader( id );
                using ( simpleSingleTimeseriesDataReader )
                {
                    if ( simpleSingleTimeseriesDataReader.Read( ) )
                    {
                        destinationWriter.Write( true );
                        simpleSingleTimeseriesDataReader.WriteTo( destinationWriter );
                    }
                    else
                    {
                        destinationWriter.Write( false );
                    }
                }
            }
        }

        public SimpleSingleTimeseriesDataReader GetSingleTimeseriesCollectionDataReader( )
        {
            const string sql = SimpleSingleTimeseriesDataReader.BaseQuery; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleSingleTimeseriesDataReader = new SimpleSingleTimeseriesDataReader( _loggerFactory, sqlDataReader );
                return simpleSingleTimeseriesDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public IList<SingleTimeseriesObject> GetSingleTimeseriesCollection( )
        {
            var result = new List<SingleTimeseriesObject>( );
            var simpleSingleTimeseriesDataReader = GetSingleTimeseriesCollectionDataReader( );
            using ( simpleSingleTimeseriesDataReader )
            {
                while ( simpleSingleTimeseriesDataReader.Read( ) )
                {
                    var data = simpleSingleTimeseriesDataReader.GetDataObject( );
                    result.Add( data );
                }
            }
            return result;
        }

        public void GetSingleTimeseriesCollection( Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleSingleTimeseriesDataReader = GetSingleTimeseriesCollectionDataReader( );
                using ( simpleSingleTimeseriesDataReader )
                {
                    simpleSingleTimeseriesDataReader.WriteResultSetTo( destinationWriter );
                }
            }
        }

        public SimpleSingleTimeseriesDataReader GetSingleTimeseriesCollectionByCatalogDataReader( Guid? catalog )
        {
            const string sql = SimpleSingleTimeseriesDataReader.BaseQuery + " WHERE " +
                    SimpleSingleTimeseriesDataReader.ViewAliasName + ".[Catalog] = @catalog " +
                    " ORDER BY " + SimpleSingleTimeseriesDataReader.ViewAliasName + ".[Catalog]," +SimpleSingleTimeseriesDataReader.ViewAliasName + ".[Name]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var catalogParameter = sqlCommandParameters.AddReference( "@catalog", catalog );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleSingleTimeseriesDataReader = new SimpleSingleTimeseriesDataReader( _loggerFactory, sqlDataReader );
                return simpleSingleTimeseriesDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<SingleTimeseriesObject> GetSingleTimeseriesCollectionByCatalog( Guid? catalog )
        {
            throw new NotImplementedException( );
        }
        public IList<SingleTimeseriesObject> GetSingleTimeseriesCollectionByCatalogIsNull(  )
        {
            throw new NotImplementedException( );
        }
        public SimpleSingleTimeseriesDataReader GetSingleTimeseriesByCatalogAndNameDataReader( Guid? catalog, string name )
        {
            const string sql = SimpleSingleTimeseriesDataReader.BaseQuery + " WHERE " +
                    SimpleSingleTimeseriesDataReader.ViewAliasName + ".[Catalog] = @catalog AND " +
                    SimpleSingleTimeseriesDataReader.ViewAliasName + ".[Name] = @name " +
                    " ORDER BY " + SimpleSingleTimeseriesDataReader.ViewAliasName + ".[Catalog]," +SimpleSingleTimeseriesDataReader.ViewAliasName + ".[Name]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var catalogParameter = sqlCommandParameters.AddReference( "@catalog", catalog );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@name", name, 127 );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleSingleTimeseriesDataReader = new SimpleSingleTimeseriesDataReader( _loggerFactory, sqlDataReader );
                return simpleSingleTimeseriesDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public SingleTimeseriesObject? GetSingleTimeseriesByCatalogAndName( Guid? catalog, string name )
        {
            throw new NotImplementedException( );
        }
        public IList<SingleTimeseriesObject> GetSingleTimeseriesCollectionByCatalogIsNullAndName( string name )
        {
            throw new NotImplementedException( );
        }
        // ---------------------------------------------------------------------
        // StringTimeseries queries
        // ---------------------------------------------------------------------
        public SimpleStringTimeseriesDataReader GetStringTimeseriesByIdDataReader( Guid id )
        {
            const string sql = SimpleStringTimeseriesDataReader.BaseQuery + "WHERE " + SimpleStringTimeseriesDataReader.ViewAliasName + ".[Id] = @id"; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                sqlCommandParameters.AddGuid( "@id", id );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleStringTimeseriesDataReader = new SimpleStringTimeseriesDataReader( _loggerFactory, sqlDataReader );
                return simpleStringTimeseriesDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public StringTimeseriesObject? GetStringTimeseriesById( Guid id )
        {
            var simpleStringTimeseriesDataReader = GetStringTimeseriesByIdDataReader( id );
            using ( simpleStringTimeseriesDataReader )
            {
                if ( simpleStringTimeseriesDataReader.Read( ) )
                {
                    var result = simpleStringTimeseriesDataReader.GetDataObject( );
                    return result;
                }
            }
            return null;
        }

        public void GetStringTimeseriesById( Guid id, Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleStringTimeseriesDataReader = GetStringTimeseriesByIdDataReader( id );
                using ( simpleStringTimeseriesDataReader )
                {
                    if ( simpleStringTimeseriesDataReader.Read( ) )
                    {
                        destinationWriter.Write( true );
                        simpleStringTimeseriesDataReader.WriteTo( destinationWriter );
                    }
                    else
                    {
                        destinationWriter.Write( false );
                    }
                }
            }
        }

        public SimpleStringTimeseriesDataReader GetStringTimeseriesCollectionDataReader( )
        {
            const string sql = SimpleStringTimeseriesDataReader.BaseQuery; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleStringTimeseriesDataReader = new SimpleStringTimeseriesDataReader( _loggerFactory, sqlDataReader );
                return simpleStringTimeseriesDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public IList<StringTimeseriesObject> GetStringTimeseriesCollection( )
        {
            var result = new List<StringTimeseriesObject>( );
            var simpleStringTimeseriesDataReader = GetStringTimeseriesCollectionDataReader( );
            using ( simpleStringTimeseriesDataReader )
            {
                while ( simpleStringTimeseriesDataReader.Read( ) )
                {
                    var data = simpleStringTimeseriesDataReader.GetDataObject( );
                    result.Add( data );
                }
            }
            return result;
        }

        public void GetStringTimeseriesCollection( Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleStringTimeseriesDataReader = GetStringTimeseriesCollectionDataReader( );
                using ( simpleStringTimeseriesDataReader )
                {
                    simpleStringTimeseriesDataReader.WriteResultSetTo( destinationWriter );
                }
            }
        }

        public SimpleStringTimeseriesDataReader GetStringTimeseriesCollectionByCatalogDataReader( Guid? catalog )
        {
            const string sql = SimpleStringTimeseriesDataReader.BaseQuery + " WHERE " +
                    SimpleStringTimeseriesDataReader.ViewAliasName + ".[Catalog] = @catalog " +
                    " ORDER BY " + SimpleStringTimeseriesDataReader.ViewAliasName + ".[Catalog]," +SimpleStringTimeseriesDataReader.ViewAliasName + ".[Name]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var catalogParameter = sqlCommandParameters.AddReference( "@catalog", catalog );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleStringTimeseriesDataReader = new SimpleStringTimeseriesDataReader( _loggerFactory, sqlDataReader );
                return simpleStringTimeseriesDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<StringTimeseriesObject> GetStringTimeseriesCollectionByCatalog( Guid? catalog )
        {
            throw new NotImplementedException( );
        }
        public IList<StringTimeseriesObject> GetStringTimeseriesCollectionByCatalogIsNull(  )
        {
            throw new NotImplementedException( );
        }
        public SimpleStringTimeseriesDataReader GetStringTimeseriesByCatalogAndNameDataReader( Guid? catalog, string name )
        {
            const string sql = SimpleStringTimeseriesDataReader.BaseQuery + " WHERE " +
                    SimpleStringTimeseriesDataReader.ViewAliasName + ".[Catalog] = @catalog AND " +
                    SimpleStringTimeseriesDataReader.ViewAliasName + ".[Name] = @name " +
                    " ORDER BY " + SimpleStringTimeseriesDataReader.ViewAliasName + ".[Catalog]," +SimpleStringTimeseriesDataReader.ViewAliasName + ".[Name]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var catalogParameter = sqlCommandParameters.AddReference( "@catalog", catalog );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@name", name, 127 );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleStringTimeseriesDataReader = new SimpleStringTimeseriesDataReader( _loggerFactory, sqlDataReader );
                return simpleStringTimeseriesDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public StringTimeseriesObject? GetStringTimeseriesByCatalogAndName( Guid? catalog, string name )
        {
            throw new NotImplementedException( );
        }
        public IList<StringTimeseriesObject> GetStringTimeseriesCollectionByCatalogIsNullAndName( string name )
        {
            throw new NotImplementedException( );
        }
        // ---------------------------------------------------------------------
        // TimeSpanTimeseries queries
        // ---------------------------------------------------------------------
        public SimpleTimeSpanTimeseriesDataReader GetTimeSpanTimeseriesByIdDataReader( Guid id )
        {
            const string sql = SimpleTimeSpanTimeseriesDataReader.BaseQuery + "WHERE " + SimpleTimeSpanTimeseriesDataReader.ViewAliasName + ".[Id] = @id"; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                sqlCommandParameters.AddGuid( "@id", id );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleTimeSpanTimeseriesDataReader = new SimpleTimeSpanTimeseriesDataReader( _loggerFactory, sqlDataReader );
                return simpleTimeSpanTimeseriesDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public TimeSpanTimeseriesObject? GetTimeSpanTimeseriesById( Guid id )
        {
            var simpleTimeSpanTimeseriesDataReader = GetTimeSpanTimeseriesByIdDataReader( id );
            using ( simpleTimeSpanTimeseriesDataReader )
            {
                if ( simpleTimeSpanTimeseriesDataReader.Read( ) )
                {
                    var result = simpleTimeSpanTimeseriesDataReader.GetDataObject( );
                    return result;
                }
            }
            return null;
        }

        public void GetTimeSpanTimeseriesById( Guid id, Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleTimeSpanTimeseriesDataReader = GetTimeSpanTimeseriesByIdDataReader( id );
                using ( simpleTimeSpanTimeseriesDataReader )
                {
                    if ( simpleTimeSpanTimeseriesDataReader.Read( ) )
                    {
                        destinationWriter.Write( true );
                        simpleTimeSpanTimeseriesDataReader.WriteTo( destinationWriter );
                    }
                    else
                    {
                        destinationWriter.Write( false );
                    }
                }
            }
        }

        public SimpleTimeSpanTimeseriesDataReader GetTimeSpanTimeseriesCollectionDataReader( )
        {
            const string sql = SimpleTimeSpanTimeseriesDataReader.BaseQuery; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleTimeSpanTimeseriesDataReader = new SimpleTimeSpanTimeseriesDataReader( _loggerFactory, sqlDataReader );
                return simpleTimeSpanTimeseriesDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public IList<TimeSpanTimeseriesObject> GetTimeSpanTimeseriesCollection( )
        {
            var result = new List<TimeSpanTimeseriesObject>( );
            var simpleTimeSpanTimeseriesDataReader = GetTimeSpanTimeseriesCollectionDataReader( );
            using ( simpleTimeSpanTimeseriesDataReader )
            {
                while ( simpleTimeSpanTimeseriesDataReader.Read( ) )
                {
                    var data = simpleTimeSpanTimeseriesDataReader.GetDataObject( );
                    result.Add( data );
                }
            }
            return result;
        }

        public void GetTimeSpanTimeseriesCollection( Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleTimeSpanTimeseriesDataReader = GetTimeSpanTimeseriesCollectionDataReader( );
                using ( simpleTimeSpanTimeseriesDataReader )
                {
                    simpleTimeSpanTimeseriesDataReader.WriteResultSetTo( destinationWriter );
                }
            }
        }

        public SimpleTimeSpanTimeseriesDataReader GetTimeSpanTimeseriesCollectionByCatalogDataReader( Guid? catalog )
        {
            const string sql = SimpleTimeSpanTimeseriesDataReader.BaseQuery + " WHERE " +
                    SimpleTimeSpanTimeseriesDataReader.ViewAliasName + ".[Catalog] = @catalog " +
                    " ORDER BY " + SimpleTimeSpanTimeseriesDataReader.ViewAliasName + ".[Catalog]," +SimpleTimeSpanTimeseriesDataReader.ViewAliasName + ".[Name]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var catalogParameter = sqlCommandParameters.AddReference( "@catalog", catalog );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleTimeSpanTimeseriesDataReader = new SimpleTimeSpanTimeseriesDataReader( _loggerFactory, sqlDataReader );
                return simpleTimeSpanTimeseriesDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<TimeSpanTimeseriesObject> GetTimeSpanTimeseriesCollectionByCatalog( Guid? catalog )
        {
            throw new NotImplementedException( );
        }
        public IList<TimeSpanTimeseriesObject> GetTimeSpanTimeseriesCollectionByCatalogIsNull(  )
        {
            throw new NotImplementedException( );
        }
        public SimpleTimeSpanTimeseriesDataReader GetTimeSpanTimeseriesByCatalogAndNameDataReader( Guid? catalog, string name )
        {
            const string sql = SimpleTimeSpanTimeseriesDataReader.BaseQuery + " WHERE " +
                    SimpleTimeSpanTimeseriesDataReader.ViewAliasName + ".[Catalog] = @catalog AND " +
                    SimpleTimeSpanTimeseriesDataReader.ViewAliasName + ".[Name] = @name " +
                    " ORDER BY " + SimpleTimeSpanTimeseriesDataReader.ViewAliasName + ".[Catalog]," +SimpleTimeSpanTimeseriesDataReader.ViewAliasName + ".[Name]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var catalogParameter = sqlCommandParameters.AddReference( "@catalog", catalog );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@name", name, 127 );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleTimeSpanTimeseriesDataReader = new SimpleTimeSpanTimeseriesDataReader( _loggerFactory, sqlDataReader );
                return simpleTimeSpanTimeseriesDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public TimeSpanTimeseriesObject? GetTimeSpanTimeseriesByCatalogAndName( Guid? catalog, string name )
        {
            throw new NotImplementedException( );
        }
        public IList<TimeSpanTimeseriesObject> GetTimeSpanTimeseriesCollectionByCatalogIsNullAndName( string name )
        {
            throw new NotImplementedException( );
        }
        // ---------------------------------------------------------------------
        // UInt16Timeseries queries
        // ---------------------------------------------------------------------
        public SimpleUInt16TimeseriesDataReader GetUInt16TimeseriesByIdDataReader( Guid id )
        {
            const string sql = SimpleUInt16TimeseriesDataReader.BaseQuery + "WHERE " + SimpleUInt16TimeseriesDataReader.ViewAliasName + ".[Id] = @id"; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                sqlCommandParameters.AddGuid( "@id", id );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleUInt16TimeseriesDataReader = new SimpleUInt16TimeseriesDataReader( _loggerFactory, sqlDataReader );
                return simpleUInt16TimeseriesDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public UInt16TimeseriesObject? GetUInt16TimeseriesById( Guid id )
        {
            var simpleUInt16TimeseriesDataReader = GetUInt16TimeseriesByIdDataReader( id );
            using ( simpleUInt16TimeseriesDataReader )
            {
                if ( simpleUInt16TimeseriesDataReader.Read( ) )
                {
                    var result = simpleUInt16TimeseriesDataReader.GetDataObject( );
                    return result;
                }
            }
            return null;
        }

        public void GetUInt16TimeseriesById( Guid id, Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleUInt16TimeseriesDataReader = GetUInt16TimeseriesByIdDataReader( id );
                using ( simpleUInt16TimeseriesDataReader )
                {
                    if ( simpleUInt16TimeseriesDataReader.Read( ) )
                    {
                        destinationWriter.Write( true );
                        simpleUInt16TimeseriesDataReader.WriteTo( destinationWriter );
                    }
                    else
                    {
                        destinationWriter.Write( false );
                    }
                }
            }
        }

        public SimpleUInt16TimeseriesDataReader GetUInt16TimeseriesCollectionDataReader( )
        {
            const string sql = SimpleUInt16TimeseriesDataReader.BaseQuery; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleUInt16TimeseriesDataReader = new SimpleUInt16TimeseriesDataReader( _loggerFactory, sqlDataReader );
                return simpleUInt16TimeseriesDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public IList<UInt16TimeseriesObject> GetUInt16TimeseriesCollection( )
        {
            var result = new List<UInt16TimeseriesObject>( );
            var simpleUInt16TimeseriesDataReader = GetUInt16TimeseriesCollectionDataReader( );
            using ( simpleUInt16TimeseriesDataReader )
            {
                while ( simpleUInt16TimeseriesDataReader.Read( ) )
                {
                    var data = simpleUInt16TimeseriesDataReader.GetDataObject( );
                    result.Add( data );
                }
            }
            return result;
        }

        public void GetUInt16TimeseriesCollection( Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleUInt16TimeseriesDataReader = GetUInt16TimeseriesCollectionDataReader( );
                using ( simpleUInt16TimeseriesDataReader )
                {
                    simpleUInt16TimeseriesDataReader.WriteResultSetTo( destinationWriter );
                }
            }
        }

        public SimpleUInt16TimeseriesDataReader GetUInt16TimeseriesCollectionByCatalogDataReader( Guid? catalog )
        {
            const string sql = SimpleUInt16TimeseriesDataReader.BaseQuery + " WHERE " +
                    SimpleUInt16TimeseriesDataReader.ViewAliasName + ".[Catalog] = @catalog " +
                    " ORDER BY " + SimpleUInt16TimeseriesDataReader.ViewAliasName + ".[Catalog]," +SimpleUInt16TimeseriesDataReader.ViewAliasName + ".[Name]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var catalogParameter = sqlCommandParameters.AddReference( "@catalog", catalog );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleUInt16TimeseriesDataReader = new SimpleUInt16TimeseriesDataReader( _loggerFactory, sqlDataReader );
                return simpleUInt16TimeseriesDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<UInt16TimeseriesObject> GetUInt16TimeseriesCollectionByCatalog( Guid? catalog )
        {
            throw new NotImplementedException( );
        }
        public IList<UInt16TimeseriesObject> GetUInt16TimeseriesCollectionByCatalogIsNull(  )
        {
            throw new NotImplementedException( );
        }
        public SimpleUInt16TimeseriesDataReader GetUInt16TimeseriesByCatalogAndNameDataReader( Guid? catalog, string name )
        {
            const string sql = SimpleUInt16TimeseriesDataReader.BaseQuery + " WHERE " +
                    SimpleUInt16TimeseriesDataReader.ViewAliasName + ".[Catalog] = @catalog AND " +
                    SimpleUInt16TimeseriesDataReader.ViewAliasName + ".[Name] = @name " +
                    " ORDER BY " + SimpleUInt16TimeseriesDataReader.ViewAliasName + ".[Catalog]," +SimpleUInt16TimeseriesDataReader.ViewAliasName + ".[Name]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var catalogParameter = sqlCommandParameters.AddReference( "@catalog", catalog );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@name", name, 127 );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleUInt16TimeseriesDataReader = new SimpleUInt16TimeseriesDataReader( _loggerFactory, sqlDataReader );
                return simpleUInt16TimeseriesDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public UInt16TimeseriesObject? GetUInt16TimeseriesByCatalogAndName( Guid? catalog, string name )
        {
            throw new NotImplementedException( );
        }
        public IList<UInt16TimeseriesObject> GetUInt16TimeseriesCollectionByCatalogIsNullAndName( string name )
        {
            throw new NotImplementedException( );
        }
        // ---------------------------------------------------------------------
        // UInt32Timeseries queries
        // ---------------------------------------------------------------------
        public ComplexUInt32TimeseriesDataReader GetUInt32TimeseriesByIdDataReader( Guid id )
        {
            const string sql = ComplexUInt32TimeseriesDataReader.BaseQuery + "WHERE " + ComplexUInt32TimeseriesDataReader.ViewAliasName + ".[Id] = @id"; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                sqlCommandParameters.AddGuid( "@id", id );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var complexUInt32TimeseriesDataReader = new ComplexUInt32TimeseriesDataReader( _loggerFactory, sqlDataReader );
                return complexUInt32TimeseriesDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public UInt32TimeseriesObject? GetUInt32TimeseriesById( Guid id )
        {
            var complexUInt32TimeseriesDataReader = GetUInt32TimeseriesByIdDataReader( id );
            using ( complexUInt32TimeseriesDataReader )
            {
                if ( complexUInt32TimeseriesDataReader.Read( ) )
                {
                    var result = complexUInt32TimeseriesDataReader.GetDataObject( );
                    return result;
                }
            }
            return null;
        }

        public void GetUInt32TimeseriesById( Guid id, Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var complexUInt32TimeseriesDataReader = GetUInt32TimeseriesByIdDataReader( id );
                using ( complexUInt32TimeseriesDataReader )
                {
                    if ( complexUInt32TimeseriesDataReader.Read( ) )
                    {
                        destinationWriter.Write( true );
                        complexUInt32TimeseriesDataReader.WriteTo( destinationWriter );
                    }
                    else
                    {
                        destinationWriter.Write( false );
                    }
                }
            }
        }

        public ComplexUInt32TimeseriesDataReader GetUInt32TimeseriesCollectionDataReader( )
        {
            const string sql = ComplexUInt32TimeseriesDataReader.BaseQuery; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var complexUInt32TimeseriesDataReader = new ComplexUInt32TimeseriesDataReader( _loggerFactory, sqlDataReader );
                return complexUInt32TimeseriesDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public IList<UInt32TimeseriesObject> GetUInt32TimeseriesCollection( )
        {
            var result = new List<UInt32TimeseriesObject>( );
            var complexUInt32TimeseriesDataReader = GetUInt32TimeseriesCollectionDataReader( );
            using ( complexUInt32TimeseriesDataReader )
            {
                while ( complexUInt32TimeseriesDataReader.Read( ) )
                {
                    var data = complexUInt32TimeseriesDataReader.GetDataObject( );
                    result.Add( data );
                }
            }
            return result;
        }

        public void GetUInt32TimeseriesCollection( Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var complexUInt32TimeseriesDataReader = GetUInt32TimeseriesCollectionDataReader( );
                using ( complexUInt32TimeseriesDataReader )
                {
                    complexUInt32TimeseriesDataReader.WriteResultSetTo( destinationWriter );
                }
            }
        }

        public ComplexUInt32TimeseriesDataReader GetUInt32TimeseriesCollectionByCatalogDataReader( Guid? catalog )
        {
            const string sql = ComplexUInt32TimeseriesDataReader.BaseQuery + " WHERE " +
                    ComplexUInt32TimeseriesDataReader.ViewAliasName + ".[Catalog] = @catalog " +
                    " ORDER BY " + ComplexUInt32TimeseriesDataReader.ViewAliasName + ".[Catalog]," +ComplexUInt32TimeseriesDataReader.ViewAliasName + ".[Name]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var catalogParameter = sqlCommandParameters.AddReference( "@catalog", catalog );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var complexUInt32TimeseriesDataReader = new ComplexUInt32TimeseriesDataReader( _loggerFactory, sqlDataReader );
                return complexUInt32TimeseriesDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<UInt32TimeseriesObject> GetUInt32TimeseriesCollectionByCatalog( Guid? catalog )
        {
            throw new NotImplementedException( );
        }
        public IList<UInt32TimeseriesObject> GetUInt32TimeseriesCollectionByCatalogIsNull(  )
        {
            throw new NotImplementedException( );
        }
        public ComplexUInt32TimeseriesDataReader GetUInt32TimeseriesByCatalogAndNameDataReader( Guid? catalog, string name )
        {
            const string sql = ComplexUInt32TimeseriesDataReader.BaseQuery + " WHERE " +
                    ComplexUInt32TimeseriesDataReader.ViewAliasName + ".[Catalog] = @catalog AND " +
                    ComplexUInt32TimeseriesDataReader.ViewAliasName + ".[Name] = @name " +
                    " ORDER BY " + ComplexUInt32TimeseriesDataReader.ViewAliasName + ".[Catalog]," +ComplexUInt32TimeseriesDataReader.ViewAliasName + ".[Name]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var catalogParameter = sqlCommandParameters.AddReference( "@catalog", catalog );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@name", name, 127 );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var complexUInt32TimeseriesDataReader = new ComplexUInt32TimeseriesDataReader( _loggerFactory, sqlDataReader );
                return complexUInt32TimeseriesDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public UInt32TimeseriesObject? GetUInt32TimeseriesByCatalogAndName( Guid? catalog, string name )
        {
            throw new NotImplementedException( );
        }
        public IList<UInt32TimeseriesObject> GetUInt32TimeseriesCollectionByCatalogIsNullAndName( string name )
        {
            throw new NotImplementedException( );
        }
        // ---------------------------------------------------------------------
        // RadomeStatusTimeseries queries
        // ---------------------------------------------------------------------
        public SimpleRadomeStatusTimeseriesDataReader GetRadomeStatusTimeseriesByIdDataReader( Guid id )
        {
            const string sql = SimpleRadomeStatusTimeseriesDataReader.BaseQuery + "WHERE " + SimpleRadomeStatusTimeseriesDataReader.ViewAliasName + ".[Id] = @id"; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                sqlCommandParameters.AddGuid( "@id", id );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleRadomeStatusTimeseriesDataReader = new SimpleRadomeStatusTimeseriesDataReader( _loggerFactory, sqlDataReader );
                return simpleRadomeStatusTimeseriesDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public RadomeStatusTimeseriesObject? GetRadomeStatusTimeseriesById( Guid id )
        {
            var simpleRadomeStatusTimeseriesDataReader = GetRadomeStatusTimeseriesByIdDataReader( id );
            using ( simpleRadomeStatusTimeseriesDataReader )
            {
                if ( simpleRadomeStatusTimeseriesDataReader.Read( ) )
                {
                    var result = simpleRadomeStatusTimeseriesDataReader.GetDataObject( );
                    return result;
                }
            }
            return null;
        }

        public void GetRadomeStatusTimeseriesById( Guid id, Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleRadomeStatusTimeseriesDataReader = GetRadomeStatusTimeseriesByIdDataReader( id );
                using ( simpleRadomeStatusTimeseriesDataReader )
                {
                    if ( simpleRadomeStatusTimeseriesDataReader.Read( ) )
                    {
                        destinationWriter.Write( true );
                        simpleRadomeStatusTimeseriesDataReader.WriteTo( destinationWriter );
                    }
                    else
                    {
                        destinationWriter.Write( false );
                    }
                }
            }
        }

        public SimpleRadomeStatusTimeseriesDataReader GetRadomeStatusTimeseriesCollectionDataReader( )
        {
            const string sql = SimpleRadomeStatusTimeseriesDataReader.BaseQuery; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleRadomeStatusTimeseriesDataReader = new SimpleRadomeStatusTimeseriesDataReader( _loggerFactory, sqlDataReader );
                return simpleRadomeStatusTimeseriesDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public IList<RadomeStatusTimeseriesObject> GetRadomeStatusTimeseriesCollection( )
        {
            var result = new List<RadomeStatusTimeseriesObject>( );
            var simpleRadomeStatusTimeseriesDataReader = GetRadomeStatusTimeseriesCollectionDataReader( );
            using ( simpleRadomeStatusTimeseriesDataReader )
            {
                while ( simpleRadomeStatusTimeseriesDataReader.Read( ) )
                {
                    var data = simpleRadomeStatusTimeseriesDataReader.GetDataObject( );
                    result.Add( data );
                }
            }
            return result;
        }

        public void GetRadomeStatusTimeseriesCollection( Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleRadomeStatusTimeseriesDataReader = GetRadomeStatusTimeseriesCollectionDataReader( );
                using ( simpleRadomeStatusTimeseriesDataReader )
                {
                    simpleRadomeStatusTimeseriesDataReader.WriteResultSetTo( destinationWriter );
                }
            }
        }

        public SimpleRadomeStatusTimeseriesDataReader GetRadomeStatusTimeseriesCollectionByCatalogDataReader( Guid? catalog )
        {
            const string sql = SimpleRadomeStatusTimeseriesDataReader.BaseQuery + " WHERE " +
                    SimpleRadomeStatusTimeseriesDataReader.ViewAliasName + ".[Catalog] = @catalog " +
                    " ORDER BY " + SimpleRadomeStatusTimeseriesDataReader.ViewAliasName + ".[Catalog]," +SimpleRadomeStatusTimeseriesDataReader.ViewAliasName + ".[Name]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var catalogParameter = sqlCommandParameters.AddReference( "@catalog", catalog );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleRadomeStatusTimeseriesDataReader = new SimpleRadomeStatusTimeseriesDataReader( _loggerFactory, sqlDataReader );
                return simpleRadomeStatusTimeseriesDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<RadomeStatusTimeseriesObject> GetRadomeStatusTimeseriesCollectionByCatalog( Guid? catalog )
        {
            throw new NotImplementedException( );
        }
        public IList<RadomeStatusTimeseriesObject> GetRadomeStatusTimeseriesCollectionByCatalogIsNull(  )
        {
            throw new NotImplementedException( );
        }
        public SimpleRadomeStatusTimeseriesDataReader GetRadomeStatusTimeseriesByCatalogAndNameDataReader( Guid? catalog, string name )
        {
            const string sql = SimpleRadomeStatusTimeseriesDataReader.BaseQuery + " WHERE " +
                    SimpleRadomeStatusTimeseriesDataReader.ViewAliasName + ".[Catalog] = @catalog AND " +
                    SimpleRadomeStatusTimeseriesDataReader.ViewAliasName + ".[Name] = @name " +
                    " ORDER BY " + SimpleRadomeStatusTimeseriesDataReader.ViewAliasName + ".[Catalog]," +SimpleRadomeStatusTimeseriesDataReader.ViewAliasName + ".[Name]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var catalogParameter = sqlCommandParameters.AddReference( "@catalog", catalog );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@name", name, 127 );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleRadomeStatusTimeseriesDataReader = new SimpleRadomeStatusTimeseriesDataReader( _loggerFactory, sqlDataReader );
                return simpleRadomeStatusTimeseriesDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public RadomeStatusTimeseriesObject? GetRadomeStatusTimeseriesByCatalogAndName( Guid? catalog, string name )
        {
            throw new NotImplementedException( );
        }
        public IList<RadomeStatusTimeseriesObject> GetRadomeStatusTimeseriesCollectionByCatalogIsNullAndName( string name )
        {
            throw new NotImplementedException( );
        }
        // ---------------------------------------------------------------------
        // UInt64Timeseries queries
        // ---------------------------------------------------------------------
        public SimpleUInt64TimeseriesDataReader GetUInt64TimeseriesByIdDataReader( Guid id )
        {
            const string sql = SimpleUInt64TimeseriesDataReader.BaseQuery + "WHERE " + SimpleUInt64TimeseriesDataReader.ViewAliasName + ".[Id] = @id"; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                sqlCommandParameters.AddGuid( "@id", id );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleUInt64TimeseriesDataReader = new SimpleUInt64TimeseriesDataReader( _loggerFactory, sqlDataReader );
                return simpleUInt64TimeseriesDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public UInt64TimeseriesObject? GetUInt64TimeseriesById( Guid id )
        {
            var simpleUInt64TimeseriesDataReader = GetUInt64TimeseriesByIdDataReader( id );
            using ( simpleUInt64TimeseriesDataReader )
            {
                if ( simpleUInt64TimeseriesDataReader.Read( ) )
                {
                    var result = simpleUInt64TimeseriesDataReader.GetDataObject( );
                    return result;
                }
            }
            return null;
        }

        public void GetUInt64TimeseriesById( Guid id, Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleUInt64TimeseriesDataReader = GetUInt64TimeseriesByIdDataReader( id );
                using ( simpleUInt64TimeseriesDataReader )
                {
                    if ( simpleUInt64TimeseriesDataReader.Read( ) )
                    {
                        destinationWriter.Write( true );
                        simpleUInt64TimeseriesDataReader.WriteTo( destinationWriter );
                    }
                    else
                    {
                        destinationWriter.Write( false );
                    }
                }
            }
        }

        public SimpleUInt64TimeseriesDataReader GetUInt64TimeseriesCollectionDataReader( )
        {
            const string sql = SimpleUInt64TimeseriesDataReader.BaseQuery; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleUInt64TimeseriesDataReader = new SimpleUInt64TimeseriesDataReader( _loggerFactory, sqlDataReader );
                return simpleUInt64TimeseriesDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public IList<UInt64TimeseriesObject> GetUInt64TimeseriesCollection( )
        {
            var result = new List<UInt64TimeseriesObject>( );
            var simpleUInt64TimeseriesDataReader = GetUInt64TimeseriesCollectionDataReader( );
            using ( simpleUInt64TimeseriesDataReader )
            {
                while ( simpleUInt64TimeseriesDataReader.Read( ) )
                {
                    var data = simpleUInt64TimeseriesDataReader.GetDataObject( );
                    result.Add( data );
                }
            }
            return result;
        }

        public void GetUInt64TimeseriesCollection( Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleUInt64TimeseriesDataReader = GetUInt64TimeseriesCollectionDataReader( );
                using ( simpleUInt64TimeseriesDataReader )
                {
                    simpleUInt64TimeseriesDataReader.WriteResultSetTo( destinationWriter );
                }
            }
        }

        public SimpleUInt64TimeseriesDataReader GetUInt64TimeseriesCollectionByCatalogDataReader( Guid? catalog )
        {
            const string sql = SimpleUInt64TimeseriesDataReader.BaseQuery + " WHERE " +
                    SimpleUInt64TimeseriesDataReader.ViewAliasName + ".[Catalog] = @catalog " +
                    " ORDER BY " + SimpleUInt64TimeseriesDataReader.ViewAliasName + ".[Catalog]," +SimpleUInt64TimeseriesDataReader.ViewAliasName + ".[Name]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var catalogParameter = sqlCommandParameters.AddReference( "@catalog", catalog );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleUInt64TimeseriesDataReader = new SimpleUInt64TimeseriesDataReader( _loggerFactory, sqlDataReader );
                return simpleUInt64TimeseriesDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<UInt64TimeseriesObject> GetUInt64TimeseriesCollectionByCatalog( Guid? catalog )
        {
            throw new NotImplementedException( );
        }
        public IList<UInt64TimeseriesObject> GetUInt64TimeseriesCollectionByCatalogIsNull(  )
        {
            throw new NotImplementedException( );
        }
        public SimpleUInt64TimeseriesDataReader GetUInt64TimeseriesByCatalogAndNameDataReader( Guid? catalog, string name )
        {
            const string sql = SimpleUInt64TimeseriesDataReader.BaseQuery + " WHERE " +
                    SimpleUInt64TimeseriesDataReader.ViewAliasName + ".[Catalog] = @catalog AND " +
                    SimpleUInt64TimeseriesDataReader.ViewAliasName + ".[Name] = @name " +
                    " ORDER BY " + SimpleUInt64TimeseriesDataReader.ViewAliasName + ".[Catalog]," +SimpleUInt64TimeseriesDataReader.ViewAliasName + ".[Name]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var catalogParameter = sqlCommandParameters.AddReference( "@catalog", catalog );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@name", name, 127 );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleUInt64TimeseriesDataReader = new SimpleUInt64TimeseriesDataReader( _loggerFactory, sqlDataReader );
                return simpleUInt64TimeseriesDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public UInt64TimeseriesObject? GetUInt64TimeseriesByCatalogAndName( Guid? catalog, string name )
        {
            throw new NotImplementedException( );
        }
        public IList<UInt64TimeseriesObject> GetUInt64TimeseriesCollectionByCatalogIsNullAndName( string name )
        {
            throw new NotImplementedException( );
        }
        // ---------------------------------------------------------------------
        // TimeseriesCatalog queries
        // ---------------------------------------------------------------------
        public SimpleTimeseriesCatalogDataReader GetTimeseriesCatalogByIdDataReader( Guid id )
        {
            const string sql = SimpleTimeseriesCatalogDataReader.BaseQuery + "WHERE " + SimpleTimeseriesCatalogDataReader.ViewAliasName + ".[Id] = @id"; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                sqlCommandParameters.AddGuid( "@id", id );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleTimeseriesCatalogDataReader = new SimpleTimeseriesCatalogDataReader( _loggerFactory, sqlDataReader );
                return simpleTimeseriesCatalogDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public TimeseriesCatalogObject? GetTimeseriesCatalogById( Guid id )
        {
            var simpleTimeseriesCatalogDataReader = GetTimeseriesCatalogByIdDataReader( id );
            using ( simpleTimeseriesCatalogDataReader )
            {
                if ( simpleTimeseriesCatalogDataReader.Read( ) )
                {
                    var result = simpleTimeseriesCatalogDataReader.GetDataObject( );
                    return result;
                }
            }
            return null;
        }

        public void GetTimeseriesCatalogById( Guid id, Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleTimeseriesCatalogDataReader = GetTimeseriesCatalogByIdDataReader( id );
                using ( simpleTimeseriesCatalogDataReader )
                {
                    if ( simpleTimeseriesCatalogDataReader.Read( ) )
                    {
                        destinationWriter.Write( true );
                        simpleTimeseriesCatalogDataReader.WriteTo( destinationWriter );
                    }
                    else
                    {
                        destinationWriter.Write( false );
                    }
                }
            }
        }

        public SimpleTimeseriesCatalogDataReader GetTimeseriesCatalogCollectionDataReader( )
        {
            const string sql = SimpleTimeseriesCatalogDataReader.BaseQuery; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleTimeseriesCatalogDataReader = new SimpleTimeseriesCatalogDataReader( _loggerFactory, sqlDataReader );
                return simpleTimeseriesCatalogDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public IList<TimeseriesCatalogObject> GetTimeseriesCatalogCollection( )
        {
            var result = new List<TimeseriesCatalogObject>( );
            var simpleTimeseriesCatalogDataReader = GetTimeseriesCatalogCollectionDataReader( );
            using ( simpleTimeseriesCatalogDataReader )
            {
                while ( simpleTimeseriesCatalogDataReader.Read( ) )
                {
                    var data = simpleTimeseriesCatalogDataReader.GetDataObject( );
                    result.Add( data );
                }
            }
            return result;
        }

        public void GetTimeseriesCatalogCollection( Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleTimeseriesCatalogDataReader = GetTimeseriesCatalogCollectionDataReader( );
                using ( simpleTimeseriesCatalogDataReader )
                {
                    simpleTimeseriesCatalogDataReader.WriteResultSetTo( destinationWriter );
                }
            }
        }

        public SimpleTimeseriesCatalogDataReader GetTimeseriesCatalogCollectionByCatalogDataReader( Guid? catalog )
        {
            const string sql = SimpleTimeseriesCatalogDataReader.BaseQuery + " WHERE " +
                    SimpleTimeseriesCatalogDataReader.ViewAliasName + ".[Catalog] = @catalog " +
                    " ORDER BY " + SimpleTimeseriesCatalogDataReader.ViewAliasName + ".[Catalog]," +SimpleTimeseriesCatalogDataReader.ViewAliasName + ".[Name]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var catalogParameter = sqlCommandParameters.AddReference( "@catalog", catalog );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleTimeseriesCatalogDataReader = new SimpleTimeseriesCatalogDataReader( _loggerFactory, sqlDataReader );
                return simpleTimeseriesCatalogDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<TimeseriesCatalogObject> GetTimeseriesCatalogCollectionByCatalog( Guid? catalog )
        {
            throw new NotImplementedException( );
        }
        public IList<TimeseriesCatalogObject> GetTimeseriesCatalogCollectionByCatalogIsNull(  )
        {
            throw new NotImplementedException( );
        }
        public SimpleTimeseriesCatalogDataReader GetTimeseriesCatalogByCatalogAndNameDataReader( Guid? catalog, string name )
        {
            const string sql = SimpleTimeseriesCatalogDataReader.BaseQuery + " WHERE " +
                    SimpleTimeseriesCatalogDataReader.ViewAliasName + ".[Catalog] = @catalog AND " +
                    SimpleTimeseriesCatalogDataReader.ViewAliasName + ".[Name] = @name " +
                    " ORDER BY " + SimpleTimeseriesCatalogDataReader.ViewAliasName + ".[Catalog]," +SimpleTimeseriesCatalogDataReader.ViewAliasName + ".[Name]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var catalogParameter = sqlCommandParameters.AddReference( "@catalog", catalog );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@name", name, 127 );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleTimeseriesCatalogDataReader = new SimpleTimeseriesCatalogDataReader( _loggerFactory, sqlDataReader );
                return simpleTimeseriesCatalogDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public TimeseriesCatalogObject? GetTimeseriesCatalogByCatalogAndName( Guid? catalog, string name )
        {
            throw new NotImplementedException( );
        }
        public IList<TimeseriesCatalogObject> GetTimeseriesCatalogCollectionByCatalogIsNullAndName( string name )
        {
            throw new NotImplementedException( );
        }
        // ---------------------------------------------------------------------
        // TimeseriesInfo queries
        // ---------------------------------------------------------------------
        public SimpleTimeseriesInfoDataReader GetTimeseriesInfoByIdDataReader( Guid id )
        {
            const string sql = SimpleTimeseriesInfoDataReader.BaseQuery + "WHERE " + SimpleTimeseriesInfoDataReader.ViewAliasName + ".[Id] = @id"; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                sqlCommandParameters.AddGuid( "@id", id );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleTimeseriesInfoDataReader = new SimpleTimeseriesInfoDataReader( _loggerFactory, sqlDataReader );
                return simpleTimeseriesInfoDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public TimeseriesInfoObject? GetTimeseriesInfoById( Guid id )
        {
            var simpleTimeseriesInfoDataReader = GetTimeseriesInfoByIdDataReader( id );
            using ( simpleTimeseriesInfoDataReader )
            {
                if ( simpleTimeseriesInfoDataReader.Read( ) )
                {
                    var result = simpleTimeseriesInfoDataReader.GetDataObject( );
                    return result;
                }
            }
            return null;
        }

        public void GetTimeseriesInfoById( Guid id, Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleTimeseriesInfoDataReader = GetTimeseriesInfoByIdDataReader( id );
                using ( simpleTimeseriesInfoDataReader )
                {
                    if ( simpleTimeseriesInfoDataReader.Read( ) )
                    {
                        destinationWriter.Write( true );
                        simpleTimeseriesInfoDataReader.WriteTo( destinationWriter );
                    }
                    else
                    {
                        destinationWriter.Write( false );
                    }
                }
            }
        }

        public SimpleTimeseriesInfoDataReader GetTimeseriesInfoCollectionDataReader( )
        {
            const string sql = SimpleTimeseriesInfoDataReader.BaseQuery; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleTimeseriesInfoDataReader = new SimpleTimeseriesInfoDataReader( _loggerFactory, sqlDataReader );
                return simpleTimeseriesInfoDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public IList<TimeseriesInfoObject> GetTimeseriesInfoCollection( )
        {
            var result = new List<TimeseriesInfoObject>( );
            var simpleTimeseriesInfoDataReader = GetTimeseriesInfoCollectionDataReader( );
            using ( simpleTimeseriesInfoDataReader )
            {
                while ( simpleTimeseriesInfoDataReader.Read( ) )
                {
                    var data = simpleTimeseriesInfoDataReader.GetDataObject( );
                    result.Add( data );
                }
            }
            return result;
        }

        public void GetTimeseriesInfoCollection( Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleTimeseriesInfoDataReader = GetTimeseriesInfoCollectionDataReader( );
                using ( simpleTimeseriesInfoDataReader )
                {
                    simpleTimeseriesInfoDataReader.WriteResultSetTo( destinationWriter );
                }
            }
        }

        // ---------------------------------------------------------------------
        // TimeSpanTimeseriesValue queries
        // ---------------------------------------------------------------------
        public SimpleTimeSpanTimeseriesValueDataReader GetTimeSpanTimeseriesValueByIdDataReader( Guid id )
        {
            const string sql = SimpleTimeSpanTimeseriesValueDataReader.BaseQuery + "WHERE " + SimpleTimeSpanTimeseriesValueDataReader.ViewAliasName + ".[Id] = @id"; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                sqlCommandParameters.AddGuid( "@id", id );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleTimeSpanTimeseriesValueDataReader = new SimpleTimeSpanTimeseriesValueDataReader( _loggerFactory, sqlDataReader );
                return simpleTimeSpanTimeseriesValueDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public TimeSpanTimeseriesValueObject? GetTimeSpanTimeseriesValueById( Guid id )
        {
            var simpleTimeSpanTimeseriesValueDataReader = GetTimeSpanTimeseriesValueByIdDataReader( id );
            using ( simpleTimeSpanTimeseriesValueDataReader )
            {
                if ( simpleTimeSpanTimeseriesValueDataReader.Read( ) )
                {
                    var result = simpleTimeSpanTimeseriesValueDataReader.GetDataObject( );
                    return result;
                }
            }
            return null;
        }

        public void GetTimeSpanTimeseriesValueById( Guid id, Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleTimeSpanTimeseriesValueDataReader = GetTimeSpanTimeseriesValueByIdDataReader( id );
                using ( simpleTimeSpanTimeseriesValueDataReader )
                {
                    if ( simpleTimeSpanTimeseriesValueDataReader.Read( ) )
                    {
                        destinationWriter.Write( true );
                        simpleTimeSpanTimeseriesValueDataReader.WriteTo( destinationWriter );
                    }
                    else
                    {
                        destinationWriter.Write( false );
                    }
                }
            }
        }

        public SimpleTimeSpanTimeseriesValueDataReader GetTimeSpanTimeseriesValueCollectionDataReader( )
        {
            const string sql = SimpleTimeSpanTimeseriesValueDataReader.BaseQuery; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleTimeSpanTimeseriesValueDataReader = new SimpleTimeSpanTimeseriesValueDataReader( _loggerFactory, sqlDataReader );
                return simpleTimeSpanTimeseriesValueDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public IList<TimeSpanTimeseriesValueObject> GetTimeSpanTimeseriesValueCollection( )
        {
            var result = new List<TimeSpanTimeseriesValueObject>( );
            var simpleTimeSpanTimeseriesValueDataReader = GetTimeSpanTimeseriesValueCollectionDataReader( );
            using ( simpleTimeSpanTimeseriesValueDataReader )
            {
                while ( simpleTimeSpanTimeseriesValueDataReader.Read( ) )
                {
                    var data = simpleTimeSpanTimeseriesValueDataReader.GetDataObject( );
                    result.Add( data );
                }
            }
            return result;
        }

        public void GetTimeSpanTimeseriesValueCollection( Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleTimeSpanTimeseriesValueDataReader = GetTimeSpanTimeseriesValueCollectionDataReader( );
                using ( simpleTimeSpanTimeseriesValueDataReader )
                {
                    simpleTimeSpanTimeseriesValueDataReader.WriteResultSetTo( destinationWriter );
                }
            }
        }

        public SimpleTimeSpanTimeseriesValueDataReader GetTimeSpanTimeseriesValueCollectionByTimeseriesDataReader( Guid timeseries )
        {
            const string sql = SimpleTimeSpanTimeseriesValueDataReader.BaseQuery + " WHERE " +
                    SimpleTimeSpanTimeseriesValueDataReader.ViewAliasName + ".[Timeseries] = @timeseries " +
                    " ORDER BY " + SimpleTimeSpanTimeseriesValueDataReader.ViewAliasName + ".[Timeseries]," +SimpleTimeSpanTimeseriesValueDataReader.ViewAliasName + ".[Timestamp]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var timeseriesParameter = sqlCommandParameters.AddReference( "@timeseries", timeseries );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleTimeSpanTimeseriesValueDataReader = new SimpleTimeSpanTimeseriesValueDataReader( _loggerFactory, sqlDataReader );
                return simpleTimeSpanTimeseriesValueDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<TimeSpanTimeseriesValueObject> GetTimeSpanTimeseriesValueCollectionByTimeseries( Guid timeseries )
        {
            throw new NotImplementedException( );
        }
        public SimpleTimeSpanTimeseriesValueDataReader GetTimeSpanTimeseriesValueByTimeseriesAndTimestampDataReader( Guid timeseries, DateTime timestamp )
        {
            const string sql = SimpleTimeSpanTimeseriesValueDataReader.BaseQuery + " WHERE " +
                    SimpleTimeSpanTimeseriesValueDataReader.ViewAliasName + ".[Timeseries] = @timeseries AND " +
                    SimpleTimeSpanTimeseriesValueDataReader.ViewAliasName + ".[Timestamp] = @timestamp " +
                    " ORDER BY " + SimpleTimeSpanTimeseriesValueDataReader.ViewAliasName + ".[Timeseries]," +SimpleTimeSpanTimeseriesValueDataReader.ViewAliasName + ".[Timestamp]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var timeseriesParameter = sqlCommandParameters.AddReference( "@timeseries", timeseries );
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@timestamp", timestamp );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleTimeSpanTimeseriesValueDataReader = new SimpleTimeSpanTimeseriesValueDataReader( _loggerFactory, sqlDataReader );
                return simpleTimeSpanTimeseriesValueDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public TimeSpanTimeseriesValueObject? GetTimeSpanTimeseriesValueByTimeseriesAndTimestamp( Guid timeseries, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public TimeSpanTimeseriesValueObject? GetTimeSpanTimeseriesValueByTimeseriesAtTimestamp( Guid timeseries, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<TimeSpanTimeseriesValueObject> GetTimeSpanTimeseriesValueByTimeseriesFromTimestamp( Guid timeseries, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<TimeSpanTimeseriesValueObject> GetTimeSpanTimeseriesValueByTimeseriesUntilTimestamp( Guid timeseries, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<TimeSpanTimeseriesValueObject> GetTimeSpanTimeseriesValueByTimeseriesOverTimestamp( Guid timeseries, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException( );
        }
        public SimpleTimeSpanTimeseriesValueDataReader GetTimeSpanTimeseriesValueCollectionByTimestampDataReader( DateTime timestamp )
        {
            const string sql = SimpleTimeSpanTimeseriesValueDataReader.BaseQuery + " WHERE " +
                    SimpleTimeSpanTimeseriesValueDataReader.ViewAliasName + ".[Timestamp] = @timestamp " +
                    " ORDER BY " + SimpleTimeSpanTimeseriesValueDataReader.ViewAliasName + ".[Timestamp]," +SimpleTimeSpanTimeseriesValueDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@timestamp", timestamp );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleTimeSpanTimeseriesValueDataReader = new SimpleTimeSpanTimeseriesValueDataReader( _loggerFactory, sqlDataReader );
                return simpleTimeSpanTimeseriesValueDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<TimeSpanTimeseriesValueObject> GetTimeSpanTimeseriesValueCollectionByTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<TimeSpanTimeseriesValueObject> GetTimeSpanTimeseriesValueCollectionAtTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<TimeSpanTimeseriesValueObject> GetTimeSpanTimeseriesValueCollectionFromTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<TimeSpanTimeseriesValueObject> GetTimeSpanTimeseriesValueCollectionUntilTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<TimeSpanTimeseriesValueObject> GetTimeSpanTimeseriesValueCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException( );
        }
        // ---------------------------------------------------------------------
        // TrackableItemTrackLink queries
        // ---------------------------------------------------------------------
        public SimpleTrackableItemTrackLinkDataReader GetTrackableItemTrackLinkByIdDataReader( Guid id )
        {
            const string sql = SimpleTrackableItemTrackLinkDataReader.BaseQuery + "WHERE " + SimpleTrackableItemTrackLinkDataReader.ViewAliasName + ".[Id] = @id"; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                sqlCommandParameters.AddGuid( "@id", id );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleTrackableItemTrackLinkDataReader = new SimpleTrackableItemTrackLinkDataReader( _loggerFactory, sqlDataReader );
                return simpleTrackableItemTrackLinkDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public TrackableItemTrackLinkObject? GetTrackableItemTrackLinkById( Guid id )
        {
            var simpleTrackableItemTrackLinkDataReader = GetTrackableItemTrackLinkByIdDataReader( id );
            using ( simpleTrackableItemTrackLinkDataReader )
            {
                if ( simpleTrackableItemTrackLinkDataReader.Read( ) )
                {
                    var result = simpleTrackableItemTrackLinkDataReader.GetDataObject( );
                    return result;
                }
            }
            return null;
        }

        public void GetTrackableItemTrackLinkById( Guid id, Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleTrackableItemTrackLinkDataReader = GetTrackableItemTrackLinkByIdDataReader( id );
                using ( simpleTrackableItemTrackLinkDataReader )
                {
                    if ( simpleTrackableItemTrackLinkDataReader.Read( ) )
                    {
                        destinationWriter.Write( true );
                        simpleTrackableItemTrackLinkDataReader.WriteTo( destinationWriter );
                    }
                    else
                    {
                        destinationWriter.Write( false );
                    }
                }
            }
        }

        public SimpleTrackableItemTrackLinkDataReader GetTrackableItemTrackLinkCollectionDataReader( )
        {
            const string sql = SimpleTrackableItemTrackLinkDataReader.BaseQuery; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleTrackableItemTrackLinkDataReader = new SimpleTrackableItemTrackLinkDataReader( _loggerFactory, sqlDataReader );
                return simpleTrackableItemTrackLinkDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public IList<TrackableItemTrackLinkObject> GetTrackableItemTrackLinkCollection( )
        {
            var result = new List<TrackableItemTrackLinkObject>( );
            var simpleTrackableItemTrackLinkDataReader = GetTrackableItemTrackLinkCollectionDataReader( );
            using ( simpleTrackableItemTrackLinkDataReader )
            {
                while ( simpleTrackableItemTrackLinkDataReader.Read( ) )
                {
                    var data = simpleTrackableItemTrackLinkDataReader.GetDataObject( );
                    result.Add( data );
                }
            }
            return result;
        }

        public void GetTrackableItemTrackLinkCollection( Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleTrackableItemTrackLinkDataReader = GetTrackableItemTrackLinkCollectionDataReader( );
                using ( simpleTrackableItemTrackLinkDataReader )
                {
                    simpleTrackableItemTrackLinkDataReader.WriteResultSetTo( destinationWriter );
                }
            }
        }

        public SimpleTrackableItemTrackLinkDataReader GetTrackableItemTrackLinkCollectionByItemDataReader( Guid item )
        {
            const string sql = SimpleTrackableItemTrackLinkDataReader.BaseQuery + " WHERE " +
                    SimpleTrackableItemTrackLinkDataReader.ViewAliasName + ".[Item] = @item " +
                    " ORDER BY " + SimpleTrackableItemTrackLinkDataReader.ViewAliasName + ".[Item]," +SimpleTrackableItemTrackLinkDataReader.ViewAliasName + ".[Start]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var itemParameter = sqlCommandParameters.AddReference( "@item", item );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleTrackableItemTrackLinkDataReader = new SimpleTrackableItemTrackLinkDataReader( _loggerFactory, sqlDataReader );
                return simpleTrackableItemTrackLinkDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<TrackableItemTrackLinkObject> GetTrackableItemTrackLinkCollectionByItem( Guid item )
        {
            throw new NotImplementedException( );
        }
        public SimpleTrackableItemTrackLinkDataReader GetTrackableItemTrackLinkByItemAndStartDataReader( Guid item, DateTime start )
        {
            const string sql = SimpleTrackableItemTrackLinkDataReader.BaseQuery + " WHERE " +
                    SimpleTrackableItemTrackLinkDataReader.ViewAliasName + ".[Item] = @item AND " +
                    SimpleTrackableItemTrackLinkDataReader.ViewAliasName + ".[Start] = @start " +
                    " ORDER BY " + SimpleTrackableItemTrackLinkDataReader.ViewAliasName + ".[Item]," +SimpleTrackableItemTrackLinkDataReader.ViewAliasName + ".[Start]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var itemParameter = sqlCommandParameters.AddReference( "@item", item );
                var startParameter = sqlCommandParameters.AddDateTimeAsInt64( "@start", start );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleTrackableItemTrackLinkDataReader = new SimpleTrackableItemTrackLinkDataReader( _loggerFactory, sqlDataReader );
                return simpleTrackableItemTrackLinkDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public TrackableItemTrackLinkObject? GetTrackableItemTrackLinkByItemAndStart( Guid item, DateTime start )
        {
            throw new NotImplementedException( );
        }
        public TrackableItemTrackLinkObject? GetTrackableItemTrackLinkByItemAtStart( Guid item, DateTime start )
        {
            throw new NotImplementedException( );
        }
        public IList<TrackableItemTrackLinkObject> GetTrackableItemTrackLinkByItemFromStart( Guid item, DateTime start )
        {
            throw new NotImplementedException( );
        }
        public IList<TrackableItemTrackLinkObject> GetTrackableItemTrackLinkByItemUntilStart( Guid item, DateTime start )
        {
            throw new NotImplementedException( );
        }
        public IList<TrackableItemTrackLinkObject> GetTrackableItemTrackLinkByItemOverStart( Guid item, DateTime fromStart, DateTime untilStart )
        {
            throw new NotImplementedException( );
        }
        public SimpleTrackableItemTrackLinkDataReader GetTrackableItemTrackLinkCollectionByItemAndEndDataReader( Guid item, DateTime? end )
        {
            const string sql = SimpleTrackableItemTrackLinkDataReader.BaseQuery + " WHERE " +
                    SimpleTrackableItemTrackLinkDataReader.ViewAliasName + ".[Item] = @item AND " +
                    SimpleTrackableItemTrackLinkDataReader.ViewAliasName + ".[End] = @end " +
                    " ORDER BY " + SimpleTrackableItemTrackLinkDataReader.ViewAliasName + ".[Item]," +SimpleTrackableItemTrackLinkDataReader.ViewAliasName + ".[End]," +SimpleTrackableItemTrackLinkDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var itemParameter = sqlCommandParameters.AddReference( "@item", item );
                var endParameter = sqlCommandParameters.AddDateTimeAsInt64( "@end", end );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleTrackableItemTrackLinkDataReader = new SimpleTrackableItemTrackLinkDataReader( _loggerFactory, sqlDataReader );
                return simpleTrackableItemTrackLinkDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<TrackableItemTrackLinkObject> GetTrackableItemTrackLinkCollectionByItemAndEnd( Guid item, DateTime? end )
        {
            throw new NotImplementedException( );
        }
        public IList<TrackableItemTrackLinkObject> GetTrackableItemTrackLinkCollectionByItemAndEndIsNull( Guid item )
        {
            throw new NotImplementedException( );
        }
        public IList<TrackableItemTrackLinkObject> GetTrackableItemTrackLinkCollectionByItemAtEnd( Guid item, DateTime? end )
        {
            throw new NotImplementedException( );
        }
        public IList<TrackableItemTrackLinkObject> GetTrackableItemTrackLinkCollectionByItemFromEnd( Guid item, DateTime? end )
        {
            throw new NotImplementedException( );
        }
        public IList<TrackableItemTrackLinkObject> GetTrackableItemTrackLinkCollectionByItemUntilEnd( Guid item, DateTime? end )
        {
            throw new NotImplementedException( );
        }
        public IList<TrackableItemTrackLinkObject> GetTrackableItemTrackLinkCollectionByItemOverEnd( Guid item, DateTime fromEnd, DateTime untilEnd )
        {
            throw new NotImplementedException( );
        }
        public SimpleTrackableItemTrackLinkDataReader GetTrackableItemTrackLinkCollectionByTrackDataReader( Guid track )
        {
            const string sql = SimpleTrackableItemTrackLinkDataReader.BaseQuery + " WHERE " +
                    SimpleTrackableItemTrackLinkDataReader.ViewAliasName + ".[Track] = @track " +
                    " ORDER BY " + SimpleTrackableItemTrackLinkDataReader.ViewAliasName + ".[Track]," +SimpleTrackableItemTrackLinkDataReader.ViewAliasName + ".[Start]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var trackParameter = sqlCommandParameters.AddReference( "@track", track );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleTrackableItemTrackLinkDataReader = new SimpleTrackableItemTrackLinkDataReader( _loggerFactory, sqlDataReader );
                return simpleTrackableItemTrackLinkDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<TrackableItemTrackLinkObject> GetTrackableItemTrackLinkCollectionByTrack( Guid track )
        {
            throw new NotImplementedException( );
        }
        public SimpleTrackableItemTrackLinkDataReader GetTrackableItemTrackLinkByTrackAndStartDataReader( Guid track, DateTime start )
        {
            const string sql = SimpleTrackableItemTrackLinkDataReader.BaseQuery + " WHERE " +
                    SimpleTrackableItemTrackLinkDataReader.ViewAliasName + ".[Track] = @track AND " +
                    SimpleTrackableItemTrackLinkDataReader.ViewAliasName + ".[Start] = @start " +
                    " ORDER BY " + SimpleTrackableItemTrackLinkDataReader.ViewAliasName + ".[Track]," +SimpleTrackableItemTrackLinkDataReader.ViewAliasName + ".[Start]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var trackParameter = sqlCommandParameters.AddReference( "@track", track );
                var startParameter = sqlCommandParameters.AddDateTimeAsInt64( "@start", start );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleTrackableItemTrackLinkDataReader = new SimpleTrackableItemTrackLinkDataReader( _loggerFactory, sqlDataReader );
                return simpleTrackableItemTrackLinkDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public TrackableItemTrackLinkObject? GetTrackableItemTrackLinkByTrackAndStart( Guid track, DateTime start )
        {
            throw new NotImplementedException( );
        }
        public TrackableItemTrackLinkObject? GetTrackableItemTrackLinkByTrackAtStart( Guid track, DateTime start )
        {
            throw new NotImplementedException( );
        }
        public IList<TrackableItemTrackLinkObject> GetTrackableItemTrackLinkByTrackFromStart( Guid track, DateTime start )
        {
            throw new NotImplementedException( );
        }
        public IList<TrackableItemTrackLinkObject> GetTrackableItemTrackLinkByTrackUntilStart( Guid track, DateTime start )
        {
            throw new NotImplementedException( );
        }
        public IList<TrackableItemTrackLinkObject> GetTrackableItemTrackLinkByTrackOverStart( Guid track, DateTime fromStart, DateTime untilStart )
        {
            throw new NotImplementedException( );
        }
        public SimpleTrackableItemTrackLinkDataReader GetTrackableItemTrackLinkCollectionByTrackAndEndDataReader( Guid track, DateTime? end )
        {
            const string sql = SimpleTrackableItemTrackLinkDataReader.BaseQuery + " WHERE " +
                    SimpleTrackableItemTrackLinkDataReader.ViewAliasName + ".[Track] = @track AND " +
                    SimpleTrackableItemTrackLinkDataReader.ViewAliasName + ".[End] = @end " +
                    " ORDER BY " + SimpleTrackableItemTrackLinkDataReader.ViewAliasName + ".[Track]," +SimpleTrackableItemTrackLinkDataReader.ViewAliasName + ".[End]," +SimpleTrackableItemTrackLinkDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var trackParameter = sqlCommandParameters.AddReference( "@track", track );
                var endParameter = sqlCommandParameters.AddDateTimeAsInt64( "@end", end );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleTrackableItemTrackLinkDataReader = new SimpleTrackableItemTrackLinkDataReader( _loggerFactory, sqlDataReader );
                return simpleTrackableItemTrackLinkDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<TrackableItemTrackLinkObject> GetTrackableItemTrackLinkCollectionByTrackAndEnd( Guid track, DateTime? end )
        {
            throw new NotImplementedException( );
        }
        public IList<TrackableItemTrackLinkObject> GetTrackableItemTrackLinkCollectionByTrackAndEndIsNull( Guid track )
        {
            throw new NotImplementedException( );
        }
        public IList<TrackableItemTrackLinkObject> GetTrackableItemTrackLinkCollectionByTrackAtEnd( Guid track, DateTime? end )
        {
            throw new NotImplementedException( );
        }
        public IList<TrackableItemTrackLinkObject> GetTrackableItemTrackLinkCollectionByTrackFromEnd( Guid track, DateTime? end )
        {
            throw new NotImplementedException( );
        }
        public IList<TrackableItemTrackLinkObject> GetTrackableItemTrackLinkCollectionByTrackUntilEnd( Guid track, DateTime? end )
        {
            throw new NotImplementedException( );
        }
        public IList<TrackableItemTrackLinkObject> GetTrackableItemTrackLinkCollectionByTrackOverEnd( Guid track, DateTime fromEnd, DateTime untilEnd )
        {
            throw new NotImplementedException( );
        }
        public SimpleTrackableItemTrackLinkDataReader GetTrackableItemTrackLinkCollectionByStartDataReader( DateTime start )
        {
            const string sql = SimpleTrackableItemTrackLinkDataReader.BaseQuery + " WHERE " +
                    SimpleTrackableItemTrackLinkDataReader.ViewAliasName + ".[Start] = @start " +
                    " ORDER BY " + SimpleTrackableItemTrackLinkDataReader.ViewAliasName + ".[Start]," +SimpleTrackableItemTrackLinkDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var startParameter = sqlCommandParameters.AddDateTimeAsInt64( "@start", start );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleTrackableItemTrackLinkDataReader = new SimpleTrackableItemTrackLinkDataReader( _loggerFactory, sqlDataReader );
                return simpleTrackableItemTrackLinkDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<TrackableItemTrackLinkObject> GetTrackableItemTrackLinkCollectionByStart( DateTime start )
        {
            throw new NotImplementedException( );
        }
        public IList<TrackableItemTrackLinkObject> GetTrackableItemTrackLinkCollectionAtStart( DateTime start )
        {
            throw new NotImplementedException( );
        }
        public IList<TrackableItemTrackLinkObject> GetTrackableItemTrackLinkCollectionFromStart( DateTime start )
        {
            throw new NotImplementedException( );
        }
        public IList<TrackableItemTrackLinkObject> GetTrackableItemTrackLinkCollectionUntilStart( DateTime start )
        {
            throw new NotImplementedException( );
        }
        public IList<TrackableItemTrackLinkObject> GetTrackableItemTrackLinkCollectionOverStart( DateTime fromStart, DateTime untilStart )
        {
            throw new NotImplementedException( );
        }
        // ---------------------------------------------------------------------
        // TrackBase queries
        // ---------------------------------------------------------------------
        public ComplexTrackBaseDataReader GetTrackBaseByIdDataReader( Guid id )
        {
            const string sql = ComplexTrackBaseDataReader.BaseQuery + "WHERE " + ComplexTrackBaseDataReader.ViewAliasName + ".[Id] = @id"; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                sqlCommandParameters.AddGuid( "@id", id );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var complexTrackBaseDataReader = new ComplexTrackBaseDataReader( _loggerFactory, sqlDataReader );
                return complexTrackBaseDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public TrackBaseObject? GetTrackBaseById( Guid id )
        {
            var complexTrackBaseDataReader = GetTrackBaseByIdDataReader( id );
            using ( complexTrackBaseDataReader )
            {
                if ( complexTrackBaseDataReader.Read( ) )
                {
                    var result = complexTrackBaseDataReader.GetDataObject( );
                    return result;
                }
            }
            return null;
        }

        public void GetTrackBaseById( Guid id, Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var complexTrackBaseDataReader = GetTrackBaseByIdDataReader( id );
                using ( complexTrackBaseDataReader )
                {
                    if ( complexTrackBaseDataReader.Read( ) )
                    {
                        destinationWriter.Write( true );
                        complexTrackBaseDataReader.WriteTo( destinationWriter );
                    }
                    else
                    {
                        destinationWriter.Write( false );
                    }
                }
            }
        }

        public ComplexTrackBaseDataReader GetTrackBaseCollectionDataReader( )
        {
            const string sql = ComplexTrackBaseDataReader.BaseQuery; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var complexTrackBaseDataReader = new ComplexTrackBaseDataReader( _loggerFactory, sqlDataReader );
                return complexTrackBaseDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public IList<TrackBaseObject> GetTrackBaseCollection( )
        {
            var result = new List<TrackBaseObject>( );
            var complexTrackBaseDataReader = GetTrackBaseCollectionDataReader( );
            using ( complexTrackBaseDataReader )
            {
                while ( complexTrackBaseDataReader.Read( ) )
                {
                    var data = complexTrackBaseDataReader.GetDataObject( );
                    result.Add( data );
                }
            }
            return result;
        }

        public void GetTrackBaseCollection( Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var complexTrackBaseDataReader = GetTrackBaseCollectionDataReader( );
                using ( complexTrackBaseDataReader )
                {
                    complexTrackBaseDataReader.WriteResultSetTo( destinationWriter );
                }
            }
        }

        public ComplexTrackBaseDataReader GetTrackBaseCollectionByTrackerDataReader( Guid tracker )
        {
            const string sql = ComplexTrackBaseDataReader.BaseQuery + " WHERE " +
                    ComplexTrackBaseDataReader.ViewAliasName + ".[Tracker] = @tracker " +
                    " ORDER BY " + ComplexTrackBaseDataReader.ViewAliasName + ".[Tracker]," +ComplexTrackBaseDataReader.ViewAliasName + ".[TrackNumber]," +ComplexTrackBaseDataReader.ViewAliasName + ".[Timestamp]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var trackerParameter = sqlCommandParameters.AddReference( "@tracker", tracker );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var complexTrackBaseDataReader = new ComplexTrackBaseDataReader( _loggerFactory, sqlDataReader );
                return complexTrackBaseDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<TrackBaseObject> GetTrackBaseCollectionByTracker( Guid tracker )
        {
            throw new NotImplementedException( );
        }
        public ComplexTrackBaseDataReader GetTrackBaseCollectionByTrackerAndTrackNumberDataReader( Guid tracker, long trackNumber )
        {
            const string sql = ComplexTrackBaseDataReader.BaseQuery + " WHERE " +
                    ComplexTrackBaseDataReader.ViewAliasName + ".[Tracker] = @tracker AND " +
                    ComplexTrackBaseDataReader.ViewAliasName + ".[TrackNumber] = @trackNumber " +
                    " ORDER BY " + ComplexTrackBaseDataReader.ViewAliasName + ".[Tracker]," +ComplexTrackBaseDataReader.ViewAliasName + ".[TrackNumber]," +ComplexTrackBaseDataReader.ViewAliasName + ".[Timestamp]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var trackerParameter = sqlCommandParameters.AddReference( "@tracker", tracker );
                var trackNumberParameter = sqlCommandParameters.AddInt64( "@trackNumber", trackNumber );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var complexTrackBaseDataReader = new ComplexTrackBaseDataReader( _loggerFactory, sqlDataReader );
                return complexTrackBaseDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<TrackBaseObject> GetTrackBaseCollectionByTrackerAndTrackNumber( Guid tracker, long trackNumber )
        {
            throw new NotImplementedException( );
        }
        public IList<TrackBaseObject> GetTrackBaseCollectionByTrackerFromTrackNumber( Guid tracker, long trackNumber )
        {
            throw new NotImplementedException( );
        }
        public IList<TrackBaseObject> GetTrackBaseCollectionByTrackerUntilTrackNumber( Guid tracker, long trackNumber )
        {
            throw new NotImplementedException( );
        }
        public IList<TrackBaseObject> GetTrackBaseCollectionByTrackerOverTrackNumber( Guid tracker, long fromTrackNumber, long untilTrackNumber )
        {
            throw new NotImplementedException( );
        }
        public ComplexTrackBaseDataReader GetTrackBaseByTrackerTrackNumberAndTimestampDataReader( Guid tracker, long trackNumber, DateTime timestamp )
        {
            const string sql = ComplexTrackBaseDataReader.BaseQuery + " WHERE " +
                    ComplexTrackBaseDataReader.ViewAliasName + ".[Tracker] = @tracker AND " +
                    ComplexTrackBaseDataReader.ViewAliasName + ".[TrackNumber] = @trackNumber AND " +
                    ComplexTrackBaseDataReader.ViewAliasName + ".[Timestamp] = @timestamp " +
                    " ORDER BY " + ComplexTrackBaseDataReader.ViewAliasName + ".[Tracker]," +ComplexTrackBaseDataReader.ViewAliasName + ".[TrackNumber]," +ComplexTrackBaseDataReader.ViewAliasName + ".[Timestamp]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var trackerParameter = sqlCommandParameters.AddReference( "@tracker", tracker );
                var trackNumberParameter = sqlCommandParameters.AddInt64( "@trackNumber", trackNumber );
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@timestamp", timestamp );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var complexTrackBaseDataReader = new ComplexTrackBaseDataReader( _loggerFactory, sqlDataReader );
                return complexTrackBaseDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public TrackBaseObject? GetTrackBaseByTrackerTrackNumberAndTimestamp( Guid tracker, long trackNumber, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public TrackBaseObject? GetTrackBaseByTrackerTrackNumberAtTimestamp( Guid tracker, long trackNumber, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<TrackBaseObject> GetTrackBaseByTrackerTrackNumberFromTimestamp( Guid tracker, long trackNumber, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<TrackBaseObject> GetTrackBaseByTrackerTrackNumberUntilTimestamp( Guid tracker, long trackNumber, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<TrackBaseObject> GetTrackBaseByTrackerTrackNumberOverTimestamp( Guid tracker, long trackNumber, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException( );
        }
        public ComplexTrackBaseDataReader GetTrackBaseCollectionByTrackerAndTimestampDataReader( Guid tracker, DateTime timestamp )
        {
            const string sql = ComplexTrackBaseDataReader.BaseQuery + " WHERE " +
                    ComplexTrackBaseDataReader.ViewAliasName + ".[Tracker] = @tracker AND " +
                    ComplexTrackBaseDataReader.ViewAliasName + ".[Timestamp] = @timestamp " +
                    " ORDER BY " + ComplexTrackBaseDataReader.ViewAliasName + ".[Tracker]," +ComplexTrackBaseDataReader.ViewAliasName + ".[Timestamp]," +ComplexTrackBaseDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var trackerParameter = sqlCommandParameters.AddReference( "@tracker", tracker );
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@timestamp", timestamp );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var complexTrackBaseDataReader = new ComplexTrackBaseDataReader( _loggerFactory, sqlDataReader );
                return complexTrackBaseDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<TrackBaseObject> GetTrackBaseCollectionByTrackerAndTimestamp( Guid tracker, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<TrackBaseObject> GetTrackBaseCollectionByTrackerAtTimestamp( Guid tracker, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<TrackBaseObject> GetTrackBaseCollectionByTrackerFromTimestamp( Guid tracker, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<TrackBaseObject> GetTrackBaseCollectionByTrackerUntilTimestamp( Guid tracker, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<TrackBaseObject> GetTrackBaseCollectionByTrackerOverTimestamp( Guid tracker, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException( );
        }
        public ComplexTrackBaseDataReader GetTrackBaseCollectionByTrackNumberDataReader( long trackNumber )
        {
            const string sql = ComplexTrackBaseDataReader.BaseQuery + " WHERE " +
                    ComplexTrackBaseDataReader.ViewAliasName + ".[TrackNumber] = @trackNumber " +
                    " ORDER BY " + ComplexTrackBaseDataReader.ViewAliasName + ".[TrackNumber]," +ComplexTrackBaseDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var trackNumberParameter = sqlCommandParameters.AddInt64( "@trackNumber", trackNumber );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var complexTrackBaseDataReader = new ComplexTrackBaseDataReader( _loggerFactory, sqlDataReader );
                return complexTrackBaseDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<TrackBaseObject> GetTrackBaseCollectionByTrackNumber( long trackNumber )
        {
            throw new NotImplementedException( );
        }
        public IList<TrackBaseObject> GetTrackBaseCollectionFromTrackNumber( long trackNumber )
        {
            throw new NotImplementedException( );
        }
        public IList<TrackBaseObject> GetTrackBaseCollectionUntilTrackNumber( long trackNumber )
        {
            throw new NotImplementedException( );
        }
        public IList<TrackBaseObject> GetTrackBaseCollectionOverTrackNumber( long fromTrackNumber, long untilTrackNumber )
        {
            throw new NotImplementedException( );
        }
        public ComplexTrackBaseDataReader GetTrackBaseCollectionByTimestampDataReader( DateTime timestamp )
        {
            const string sql = ComplexTrackBaseDataReader.BaseQuery + " WHERE " +
                    ComplexTrackBaseDataReader.ViewAliasName + ".[Timestamp] = @timestamp " +
                    " ORDER BY " + ComplexTrackBaseDataReader.ViewAliasName + ".[Timestamp]," +ComplexTrackBaseDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@timestamp", timestamp );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var complexTrackBaseDataReader = new ComplexTrackBaseDataReader( _loggerFactory, sqlDataReader );
                return complexTrackBaseDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<TrackBaseObject> GetTrackBaseCollectionByTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<TrackBaseObject> GetTrackBaseCollectionAtTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<TrackBaseObject> GetTrackBaseCollectionFromTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<TrackBaseObject> GetTrackBaseCollectionUntilTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<TrackBaseObject> GetTrackBaseCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException( );
        }
        // ---------------------------------------------------------------------
        // Track queries
        // ---------------------------------------------------------------------
        public SimpleTrackDataReader GetTrackByIdDataReader( Guid id )
        {
            const string sql = SimpleTrackDataReader.BaseQuery + "WHERE " + SimpleTrackDataReader.ViewAliasName + ".[Id] = @id"; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                sqlCommandParameters.AddGuid( "@id", id );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleTrackDataReader = new SimpleTrackDataReader( _loggerFactory, sqlDataReader );
                return simpleTrackDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public TrackObject? GetTrackById( Guid id )
        {
            var simpleTrackDataReader = GetTrackByIdDataReader( id );
            using ( simpleTrackDataReader )
            {
                if ( simpleTrackDataReader.Read( ) )
                {
                    var result = simpleTrackDataReader.GetDataObject( );
                    return result;
                }
            }
            return null;
        }

        public void GetTrackById( Guid id, Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleTrackDataReader = GetTrackByIdDataReader( id );
                using ( simpleTrackDataReader )
                {
                    if ( simpleTrackDataReader.Read( ) )
                    {
                        destinationWriter.Write( true );
                        simpleTrackDataReader.WriteTo( destinationWriter );
                    }
                    else
                    {
                        destinationWriter.Write( false );
                    }
                }
            }
        }

        public SimpleTrackDataReader GetTrackCollectionDataReader( )
        {
            const string sql = SimpleTrackDataReader.BaseQuery; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleTrackDataReader = new SimpleTrackDataReader( _loggerFactory, sqlDataReader );
                return simpleTrackDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public IList<TrackObject> GetTrackCollection( )
        {
            var result = new List<TrackObject>( );
            var simpleTrackDataReader = GetTrackCollectionDataReader( );
            using ( simpleTrackDataReader )
            {
                while ( simpleTrackDataReader.Read( ) )
                {
                    var data = simpleTrackDataReader.GetDataObject( );
                    result.Add( data );
                }
            }
            return result;
        }

        public void GetTrackCollection( Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleTrackDataReader = GetTrackCollectionDataReader( );
                using ( simpleTrackDataReader )
                {
                    simpleTrackDataReader.WriteResultSetTo( destinationWriter );
                }
            }
        }

        public SimpleTrackDataReader GetTrackCollectionByTrackerDataReader( Guid tracker )
        {
            const string sql = SimpleTrackDataReader.BaseQuery + " WHERE " +
                    SimpleTrackDataReader.ViewAliasName + ".[Tracker] = @tracker " +
                    " ORDER BY " + SimpleTrackDataReader.ViewAliasName + ".[Tracker]," +SimpleTrackDataReader.ViewAliasName + ".[TrackNumber]," +SimpleTrackDataReader.ViewAliasName + ".[Timestamp]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var trackerParameter = sqlCommandParameters.AddReference( "@tracker", tracker );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleTrackDataReader = new SimpleTrackDataReader( _loggerFactory, sqlDataReader );
                return simpleTrackDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<TrackObject> GetTrackCollectionByTracker( Guid tracker )
        {
            throw new NotImplementedException( );
        }
        public SimpleTrackDataReader GetTrackCollectionByTrackerAndTrackNumberDataReader( Guid tracker, long trackNumber )
        {
            const string sql = SimpleTrackDataReader.BaseQuery + " WHERE " +
                    SimpleTrackDataReader.ViewAliasName + ".[Tracker] = @tracker AND " +
                    SimpleTrackDataReader.ViewAliasName + ".[TrackNumber] = @trackNumber " +
                    " ORDER BY " + SimpleTrackDataReader.ViewAliasName + ".[Tracker]," +SimpleTrackDataReader.ViewAliasName + ".[TrackNumber]," +SimpleTrackDataReader.ViewAliasName + ".[Timestamp]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var trackerParameter = sqlCommandParameters.AddReference( "@tracker", tracker );
                var trackNumberParameter = sqlCommandParameters.AddInt64( "@trackNumber", trackNumber );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleTrackDataReader = new SimpleTrackDataReader( _loggerFactory, sqlDataReader );
                return simpleTrackDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<TrackObject> GetTrackCollectionByTrackerAndTrackNumber( Guid tracker, long trackNumber )
        {
            throw new NotImplementedException( );
        }
        public IList<TrackObject> GetTrackCollectionByTrackerFromTrackNumber( Guid tracker, long trackNumber )
        {
            throw new NotImplementedException( );
        }
        public IList<TrackObject> GetTrackCollectionByTrackerUntilTrackNumber( Guid tracker, long trackNumber )
        {
            throw new NotImplementedException( );
        }
        public IList<TrackObject> GetTrackCollectionByTrackerOverTrackNumber( Guid tracker, long fromTrackNumber, long untilTrackNumber )
        {
            throw new NotImplementedException( );
        }
        public SimpleTrackDataReader GetTrackByTrackerTrackNumberAndTimestampDataReader( Guid tracker, long trackNumber, DateTime timestamp )
        {
            const string sql = SimpleTrackDataReader.BaseQuery + " WHERE " +
                    SimpleTrackDataReader.ViewAliasName + ".[Tracker] = @tracker AND " +
                    SimpleTrackDataReader.ViewAliasName + ".[TrackNumber] = @trackNumber AND " +
                    SimpleTrackDataReader.ViewAliasName + ".[Timestamp] = @timestamp " +
                    " ORDER BY " + SimpleTrackDataReader.ViewAliasName + ".[Tracker]," +SimpleTrackDataReader.ViewAliasName + ".[TrackNumber]," +SimpleTrackDataReader.ViewAliasName + ".[Timestamp]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var trackerParameter = sqlCommandParameters.AddReference( "@tracker", tracker );
                var trackNumberParameter = sqlCommandParameters.AddInt64( "@trackNumber", trackNumber );
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@timestamp", timestamp );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleTrackDataReader = new SimpleTrackDataReader( _loggerFactory, sqlDataReader );
                return simpleTrackDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public TrackObject? GetTrackByTrackerTrackNumberAndTimestamp( Guid tracker, long trackNumber, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public TrackObject? GetTrackByTrackerTrackNumberAtTimestamp( Guid tracker, long trackNumber, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<TrackObject> GetTrackByTrackerTrackNumberFromTimestamp( Guid tracker, long trackNumber, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<TrackObject> GetTrackByTrackerTrackNumberUntilTimestamp( Guid tracker, long trackNumber, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<TrackObject> GetTrackByTrackerTrackNumberOverTimestamp( Guid tracker, long trackNumber, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException( );
        }
        public SimpleTrackDataReader GetTrackCollectionByTrackerAndTimestampDataReader( Guid tracker, DateTime timestamp )
        {
            const string sql = SimpleTrackDataReader.BaseQuery + " WHERE " +
                    SimpleTrackDataReader.ViewAliasName + ".[Tracker] = @tracker AND " +
                    SimpleTrackDataReader.ViewAliasName + ".[Timestamp] = @timestamp " +
                    " ORDER BY " + SimpleTrackDataReader.ViewAliasName + ".[Tracker]," +SimpleTrackDataReader.ViewAliasName + ".[Timestamp]," +SimpleTrackDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var trackerParameter = sqlCommandParameters.AddReference( "@tracker", tracker );
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@timestamp", timestamp );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleTrackDataReader = new SimpleTrackDataReader( _loggerFactory, sqlDataReader );
                return simpleTrackDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<TrackObject> GetTrackCollectionByTrackerAndTimestamp( Guid tracker, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<TrackObject> GetTrackCollectionByTrackerAtTimestamp( Guid tracker, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<TrackObject> GetTrackCollectionByTrackerFromTimestamp( Guid tracker, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<TrackObject> GetTrackCollectionByTrackerUntilTimestamp( Guid tracker, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<TrackObject> GetTrackCollectionByTrackerOverTimestamp( Guid tracker, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException( );
        }
        public SimpleTrackDataReader GetTrackCollectionByTrackNumberDataReader( long trackNumber )
        {
            const string sql = SimpleTrackDataReader.BaseQuery + " WHERE " +
                    SimpleTrackDataReader.ViewAliasName + ".[TrackNumber] = @trackNumber " +
                    " ORDER BY " + SimpleTrackDataReader.ViewAliasName + ".[TrackNumber]," +SimpleTrackDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var trackNumberParameter = sqlCommandParameters.AddInt64( "@trackNumber", trackNumber );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleTrackDataReader = new SimpleTrackDataReader( _loggerFactory, sqlDataReader );
                return simpleTrackDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<TrackObject> GetTrackCollectionByTrackNumber( long trackNumber )
        {
            throw new NotImplementedException( );
        }
        public IList<TrackObject> GetTrackCollectionFromTrackNumber( long trackNumber )
        {
            throw new NotImplementedException( );
        }
        public IList<TrackObject> GetTrackCollectionUntilTrackNumber( long trackNumber )
        {
            throw new NotImplementedException( );
        }
        public IList<TrackObject> GetTrackCollectionOverTrackNumber( long fromTrackNumber, long untilTrackNumber )
        {
            throw new NotImplementedException( );
        }
        public SimpleTrackDataReader GetTrackCollectionByTimestampDataReader( DateTime timestamp )
        {
            const string sql = SimpleTrackDataReader.BaseQuery + " WHERE " +
                    SimpleTrackDataReader.ViewAliasName + ".[Timestamp] = @timestamp " +
                    " ORDER BY " + SimpleTrackDataReader.ViewAliasName + ".[Timestamp]," +SimpleTrackDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@timestamp", timestamp );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleTrackDataReader = new SimpleTrackDataReader( _loggerFactory, sqlDataReader );
                return simpleTrackDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<TrackObject> GetTrackCollectionByTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<TrackObject> GetTrackCollectionAtTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<TrackObject> GetTrackCollectionFromTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<TrackObject> GetTrackCollectionUntilTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<TrackObject> GetTrackCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException( );
        }
        // ---------------------------------------------------------------------
        // Track3D queries
        // ---------------------------------------------------------------------
        public SimpleTrack3DDataReader GetTrack3DByIdDataReader( Guid id )
        {
            const string sql = SimpleTrack3DDataReader.BaseQuery + "WHERE " + SimpleTrack3DDataReader.ViewAliasName + ".[Id] = @id"; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                sqlCommandParameters.AddGuid( "@id", id );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleTrack3DDataReader = new SimpleTrack3DDataReader( _loggerFactory, sqlDataReader );
                return simpleTrack3DDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public Track3DObject? GetTrack3DById( Guid id )
        {
            var simpleTrack3DDataReader = GetTrack3DByIdDataReader( id );
            using ( simpleTrack3DDataReader )
            {
                if ( simpleTrack3DDataReader.Read( ) )
                {
                    var result = simpleTrack3DDataReader.GetDataObject( );
                    return result;
                }
            }
            return null;
        }

        public void GetTrack3DById( Guid id, Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleTrack3DDataReader = GetTrack3DByIdDataReader( id );
                using ( simpleTrack3DDataReader )
                {
                    if ( simpleTrack3DDataReader.Read( ) )
                    {
                        destinationWriter.Write( true );
                        simpleTrack3DDataReader.WriteTo( destinationWriter );
                    }
                    else
                    {
                        destinationWriter.Write( false );
                    }
                }
            }
        }

        public SimpleTrack3DDataReader GetTrack3DCollectionDataReader( )
        {
            const string sql = SimpleTrack3DDataReader.BaseQuery; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleTrack3DDataReader = new SimpleTrack3DDataReader( _loggerFactory, sqlDataReader );
                return simpleTrack3DDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public IList<Track3DObject> GetTrack3DCollection( )
        {
            var result = new List<Track3DObject>( );
            var simpleTrack3DDataReader = GetTrack3DCollectionDataReader( );
            using ( simpleTrack3DDataReader )
            {
                while ( simpleTrack3DDataReader.Read( ) )
                {
                    var data = simpleTrack3DDataReader.GetDataObject( );
                    result.Add( data );
                }
            }
            return result;
        }

        public void GetTrack3DCollection( Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleTrack3DDataReader = GetTrack3DCollectionDataReader( );
                using ( simpleTrack3DDataReader )
                {
                    simpleTrack3DDataReader.WriteResultSetTo( destinationWriter );
                }
            }
        }

        public SimpleTrack3DDataReader GetTrack3DCollectionByTrackerDataReader( Guid tracker )
        {
            const string sql = SimpleTrack3DDataReader.BaseQuery + " WHERE " +
                    SimpleTrack3DDataReader.ViewAliasName + ".[Tracker] = @tracker " +
                    " ORDER BY " + SimpleTrack3DDataReader.ViewAliasName + ".[Tracker]," +SimpleTrack3DDataReader.ViewAliasName + ".[TrackNumber]," +SimpleTrack3DDataReader.ViewAliasName + ".[Timestamp]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var trackerParameter = sqlCommandParameters.AddReference( "@tracker", tracker );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleTrack3DDataReader = new SimpleTrack3DDataReader( _loggerFactory, sqlDataReader );
                return simpleTrack3DDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<Track3DObject> GetTrack3DCollectionByTracker( Guid tracker )
        {
            throw new NotImplementedException( );
        }
        public SimpleTrack3DDataReader GetTrack3DCollectionByTrackerAndTrackNumberDataReader( Guid tracker, long trackNumber )
        {
            const string sql = SimpleTrack3DDataReader.BaseQuery + " WHERE " +
                    SimpleTrack3DDataReader.ViewAliasName + ".[Tracker] = @tracker AND " +
                    SimpleTrack3DDataReader.ViewAliasName + ".[TrackNumber] = @trackNumber " +
                    " ORDER BY " + SimpleTrack3DDataReader.ViewAliasName + ".[Tracker]," +SimpleTrack3DDataReader.ViewAliasName + ".[TrackNumber]," +SimpleTrack3DDataReader.ViewAliasName + ".[Timestamp]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var trackerParameter = sqlCommandParameters.AddReference( "@tracker", tracker );
                var trackNumberParameter = sqlCommandParameters.AddInt64( "@trackNumber", trackNumber );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleTrack3DDataReader = new SimpleTrack3DDataReader( _loggerFactory, sqlDataReader );
                return simpleTrack3DDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<Track3DObject> GetTrack3DCollectionByTrackerAndTrackNumber( Guid tracker, long trackNumber )
        {
            throw new NotImplementedException( );
        }
        public IList<Track3DObject> GetTrack3DCollectionByTrackerFromTrackNumber( Guid tracker, long trackNumber )
        {
            throw new NotImplementedException( );
        }
        public IList<Track3DObject> GetTrack3DCollectionByTrackerUntilTrackNumber( Guid tracker, long trackNumber )
        {
            throw new NotImplementedException( );
        }
        public IList<Track3DObject> GetTrack3DCollectionByTrackerOverTrackNumber( Guid tracker, long fromTrackNumber, long untilTrackNumber )
        {
            throw new NotImplementedException( );
        }
        public SimpleTrack3DDataReader GetTrack3DByTrackerTrackNumberAndTimestampDataReader( Guid tracker, long trackNumber, DateTime timestamp )
        {
            const string sql = SimpleTrack3DDataReader.BaseQuery + " WHERE " +
                    SimpleTrack3DDataReader.ViewAliasName + ".[Tracker] = @tracker AND " +
                    SimpleTrack3DDataReader.ViewAliasName + ".[TrackNumber] = @trackNumber AND " +
                    SimpleTrack3DDataReader.ViewAliasName + ".[Timestamp] = @timestamp " +
                    " ORDER BY " + SimpleTrack3DDataReader.ViewAliasName + ".[Tracker]," +SimpleTrack3DDataReader.ViewAliasName + ".[TrackNumber]," +SimpleTrack3DDataReader.ViewAliasName + ".[Timestamp]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var trackerParameter = sqlCommandParameters.AddReference( "@tracker", tracker );
                var trackNumberParameter = sqlCommandParameters.AddInt64( "@trackNumber", trackNumber );
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@timestamp", timestamp );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleTrack3DDataReader = new SimpleTrack3DDataReader( _loggerFactory, sqlDataReader );
                return simpleTrack3DDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public Track3DObject? GetTrack3DByTrackerTrackNumberAndTimestamp( Guid tracker, long trackNumber, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public Track3DObject? GetTrack3DByTrackerTrackNumberAtTimestamp( Guid tracker, long trackNumber, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<Track3DObject> GetTrack3DByTrackerTrackNumberFromTimestamp( Guid tracker, long trackNumber, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<Track3DObject> GetTrack3DByTrackerTrackNumberUntilTimestamp( Guid tracker, long trackNumber, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<Track3DObject> GetTrack3DByTrackerTrackNumberOverTimestamp( Guid tracker, long trackNumber, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException( );
        }
        public SimpleTrack3DDataReader GetTrack3DCollectionByTrackerAndTimestampDataReader( Guid tracker, DateTime timestamp )
        {
            const string sql = SimpleTrack3DDataReader.BaseQuery + " WHERE " +
                    SimpleTrack3DDataReader.ViewAliasName + ".[Tracker] = @tracker AND " +
                    SimpleTrack3DDataReader.ViewAliasName + ".[Timestamp] = @timestamp " +
                    " ORDER BY " + SimpleTrack3DDataReader.ViewAliasName + ".[Tracker]," +SimpleTrack3DDataReader.ViewAliasName + ".[Timestamp]," +SimpleTrack3DDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var trackerParameter = sqlCommandParameters.AddReference( "@tracker", tracker );
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@timestamp", timestamp );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleTrack3DDataReader = new SimpleTrack3DDataReader( _loggerFactory, sqlDataReader );
                return simpleTrack3DDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<Track3DObject> GetTrack3DCollectionByTrackerAndTimestamp( Guid tracker, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<Track3DObject> GetTrack3DCollectionByTrackerAtTimestamp( Guid tracker, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<Track3DObject> GetTrack3DCollectionByTrackerFromTimestamp( Guid tracker, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<Track3DObject> GetTrack3DCollectionByTrackerUntilTimestamp( Guid tracker, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<Track3DObject> GetTrack3DCollectionByTrackerOverTimestamp( Guid tracker, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException( );
        }
        public SimpleTrack3DDataReader GetTrack3DCollectionByTrackNumberDataReader( long trackNumber )
        {
            const string sql = SimpleTrack3DDataReader.BaseQuery + " WHERE " +
                    SimpleTrack3DDataReader.ViewAliasName + ".[TrackNumber] = @trackNumber " +
                    " ORDER BY " + SimpleTrack3DDataReader.ViewAliasName + ".[TrackNumber]," +SimpleTrack3DDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var trackNumberParameter = sqlCommandParameters.AddInt64( "@trackNumber", trackNumber );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleTrack3DDataReader = new SimpleTrack3DDataReader( _loggerFactory, sqlDataReader );
                return simpleTrack3DDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<Track3DObject> GetTrack3DCollectionByTrackNumber( long trackNumber )
        {
            throw new NotImplementedException( );
        }
        public IList<Track3DObject> GetTrack3DCollectionFromTrackNumber( long trackNumber )
        {
            throw new NotImplementedException( );
        }
        public IList<Track3DObject> GetTrack3DCollectionUntilTrackNumber( long trackNumber )
        {
            throw new NotImplementedException( );
        }
        public IList<Track3DObject> GetTrack3DCollectionOverTrackNumber( long fromTrackNumber, long untilTrackNumber )
        {
            throw new NotImplementedException( );
        }
        public SimpleTrack3DDataReader GetTrack3DCollectionByTimestampDataReader( DateTime timestamp )
        {
            const string sql = SimpleTrack3DDataReader.BaseQuery + " WHERE " +
                    SimpleTrack3DDataReader.ViewAliasName + ".[Timestamp] = @timestamp " +
                    " ORDER BY " + SimpleTrack3DDataReader.ViewAliasName + ".[Timestamp]," +SimpleTrack3DDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@timestamp", timestamp );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleTrack3DDataReader = new SimpleTrack3DDataReader( _loggerFactory, sqlDataReader );
                return simpleTrack3DDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<Track3DObject> GetTrack3DCollectionByTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<Track3DObject> GetTrack3DCollectionAtTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<Track3DObject> GetTrack3DCollectionFromTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<Track3DObject> GetTrack3DCollectionUntilTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<Track3DObject> GetTrack3DCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException( );
        }
        // ---------------------------------------------------------------------
        // TrackerFilterParameters queries
        // ---------------------------------------------------------------------
        public SimpleTrackerFilterParametersDataReader GetTrackerFilterParametersByIdDataReader( Guid id )
        {
            const string sql = SimpleTrackerFilterParametersDataReader.BaseQuery + "WHERE " + SimpleTrackerFilterParametersDataReader.ViewAliasName + ".[Id] = @id"; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                sqlCommandParameters.AddGuid( "@id", id );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleTrackerFilterParametersDataReader = new SimpleTrackerFilterParametersDataReader( _loggerFactory, sqlDataReader );
                return simpleTrackerFilterParametersDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public TrackerFilterParametersObject? GetTrackerFilterParametersById( Guid id )
        {
            var simpleTrackerFilterParametersDataReader = GetTrackerFilterParametersByIdDataReader( id );
            using ( simpleTrackerFilterParametersDataReader )
            {
                if ( simpleTrackerFilterParametersDataReader.Read( ) )
                {
                    var result = simpleTrackerFilterParametersDataReader.GetDataObject( );
                    return result;
                }
            }
            return null;
        }

        public void GetTrackerFilterParametersById( Guid id, Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleTrackerFilterParametersDataReader = GetTrackerFilterParametersByIdDataReader( id );
                using ( simpleTrackerFilterParametersDataReader )
                {
                    if ( simpleTrackerFilterParametersDataReader.Read( ) )
                    {
                        destinationWriter.Write( true );
                        simpleTrackerFilterParametersDataReader.WriteTo( destinationWriter );
                    }
                    else
                    {
                        destinationWriter.Write( false );
                    }
                }
            }
        }

        public SimpleTrackerFilterParametersDataReader GetTrackerFilterParametersCollectionDataReader( )
        {
            const string sql = SimpleTrackerFilterParametersDataReader.BaseQuery; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleTrackerFilterParametersDataReader = new SimpleTrackerFilterParametersDataReader( _loggerFactory, sqlDataReader );
                return simpleTrackerFilterParametersDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public IList<TrackerFilterParametersObject> GetTrackerFilterParametersCollection( )
        {
            var result = new List<TrackerFilterParametersObject>( );
            var simpleTrackerFilterParametersDataReader = GetTrackerFilterParametersCollectionDataReader( );
            using ( simpleTrackerFilterParametersDataReader )
            {
                while ( simpleTrackerFilterParametersDataReader.Read( ) )
                {
                    var data = simpleTrackerFilterParametersDataReader.GetDataObject( );
                    result.Add( data );
                }
            }
            return result;
        }

        public void GetTrackerFilterParametersCollection( Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleTrackerFilterParametersDataReader = GetTrackerFilterParametersCollectionDataReader( );
                using ( simpleTrackerFilterParametersDataReader )
                {
                    simpleTrackerFilterParametersDataReader.WriteResultSetTo( destinationWriter );
                }
            }
        }

        public SimpleTrackerFilterParametersDataReader GetTrackerFilterParametersCollectionByTrackerDataReader( Guid tracker )
        {
            const string sql = SimpleTrackerFilterParametersDataReader.BaseQuery + " WHERE " +
                    SimpleTrackerFilterParametersDataReader.ViewAliasName + ".[Tracker] = @tracker " +
                    " ORDER BY " + SimpleTrackerFilterParametersDataReader.ViewAliasName + ".[Tracker]," +SimpleTrackerFilterParametersDataReader.ViewAliasName + ".[Name]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var trackerParameter = sqlCommandParameters.AddReference( "@tracker", tracker );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleTrackerFilterParametersDataReader = new SimpleTrackerFilterParametersDataReader( _loggerFactory, sqlDataReader );
                return simpleTrackerFilterParametersDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<TrackerFilterParametersObject> GetTrackerFilterParametersCollectionByTracker( Guid tracker )
        {
            throw new NotImplementedException( );
        }
        public SimpleTrackerFilterParametersDataReader GetTrackerFilterParametersByTrackerAndNameDataReader( Guid tracker, string name )
        {
            const string sql = SimpleTrackerFilterParametersDataReader.BaseQuery + " WHERE " +
                    SimpleTrackerFilterParametersDataReader.ViewAliasName + ".[Tracker] = @tracker AND " +
                    SimpleTrackerFilterParametersDataReader.ViewAliasName + ".[Name] = @name " +
                    " ORDER BY " + SimpleTrackerFilterParametersDataReader.ViewAliasName + ".[Tracker]," +SimpleTrackerFilterParametersDataReader.ViewAliasName + ".[Name]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var trackerParameter = sqlCommandParameters.AddReference( "@tracker", tracker );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@name", name, 127 );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleTrackerFilterParametersDataReader = new SimpleTrackerFilterParametersDataReader( _loggerFactory, sqlDataReader );
                return simpleTrackerFilterParametersDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public TrackerFilterParametersObject? GetTrackerFilterParametersByTrackerAndName( Guid tracker, string name )
        {
            throw new NotImplementedException( );
        }
        // ---------------------------------------------------------------------
        // TrackerFilterParametersConfiguration queries
        // ---------------------------------------------------------------------
        public SimpleTrackerFilterParametersConfigurationDataReader GetTrackerFilterParametersConfigurationByIdDataReader( Guid id )
        {
            const string sql = SimpleTrackerFilterParametersConfigurationDataReader.BaseQuery + "WHERE " + SimpleTrackerFilterParametersConfigurationDataReader.ViewAliasName + ".[Id] = @id"; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                sqlCommandParameters.AddGuid( "@id", id );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleTrackerFilterParametersConfigurationDataReader = new SimpleTrackerFilterParametersConfigurationDataReader( _loggerFactory, sqlDataReader );
                return simpleTrackerFilterParametersConfigurationDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public TrackerFilterParametersConfigurationObject? GetTrackerFilterParametersConfigurationById( Guid id )
        {
            var simpleTrackerFilterParametersConfigurationDataReader = GetTrackerFilterParametersConfigurationByIdDataReader( id );
            using ( simpleTrackerFilterParametersConfigurationDataReader )
            {
                if ( simpleTrackerFilterParametersConfigurationDataReader.Read( ) )
                {
                    var result = simpleTrackerFilterParametersConfigurationDataReader.GetDataObject( );
                    return result;
                }
            }
            return null;
        }

        public void GetTrackerFilterParametersConfigurationById( Guid id, Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleTrackerFilterParametersConfigurationDataReader = GetTrackerFilterParametersConfigurationByIdDataReader( id );
                using ( simpleTrackerFilterParametersConfigurationDataReader )
                {
                    if ( simpleTrackerFilterParametersConfigurationDataReader.Read( ) )
                    {
                        destinationWriter.Write( true );
                        simpleTrackerFilterParametersConfigurationDataReader.WriteTo( destinationWriter );
                    }
                    else
                    {
                        destinationWriter.Write( false );
                    }
                }
            }
        }

        public SimpleTrackerFilterParametersConfigurationDataReader GetTrackerFilterParametersConfigurationCollectionDataReader( )
        {
            const string sql = SimpleTrackerFilterParametersConfigurationDataReader.BaseQuery; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleTrackerFilterParametersConfigurationDataReader = new SimpleTrackerFilterParametersConfigurationDataReader( _loggerFactory, sqlDataReader );
                return simpleTrackerFilterParametersConfigurationDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public IList<TrackerFilterParametersConfigurationObject> GetTrackerFilterParametersConfigurationCollection( )
        {
            var result = new List<TrackerFilterParametersConfigurationObject>( );
            var simpleTrackerFilterParametersConfigurationDataReader = GetTrackerFilterParametersConfigurationCollectionDataReader( );
            using ( simpleTrackerFilterParametersConfigurationDataReader )
            {
                while ( simpleTrackerFilterParametersConfigurationDataReader.Read( ) )
                {
                    var data = simpleTrackerFilterParametersConfigurationDataReader.GetDataObject( );
                    result.Add( data );
                }
            }
            return result;
        }

        public void GetTrackerFilterParametersConfigurationCollection( Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleTrackerFilterParametersConfigurationDataReader = GetTrackerFilterParametersConfigurationCollectionDataReader( );
                using ( simpleTrackerFilterParametersConfigurationDataReader )
                {
                    simpleTrackerFilterParametersConfigurationDataReader.WriteResultSetTo( destinationWriter );
                }
            }
        }

        public SimpleTrackerFilterParametersConfigurationDataReader GetTrackerFilterParametersConfigurationCollectionByParametersDataReader( Guid parameters )
        {
            const string sql = SimpleTrackerFilterParametersConfigurationDataReader.BaseQuery + " WHERE " +
                    SimpleTrackerFilterParametersConfigurationDataReader.ViewAliasName + ".[Parameters] = @parameters " +
                    " ORDER BY " + SimpleTrackerFilterParametersConfigurationDataReader.ViewAliasName + ".[Parameters]," +SimpleTrackerFilterParametersConfigurationDataReader.ViewAliasName + ".[Timestamp]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var parametersParameter = sqlCommandParameters.AddReference( "@parameters", parameters );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleTrackerFilterParametersConfigurationDataReader = new SimpleTrackerFilterParametersConfigurationDataReader( _loggerFactory, sqlDataReader );
                return simpleTrackerFilterParametersConfigurationDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<TrackerFilterParametersConfigurationObject> GetTrackerFilterParametersConfigurationCollectionByParameters( Guid parameters )
        {
            throw new NotImplementedException( );
        }
        public SimpleTrackerFilterParametersConfigurationDataReader GetTrackerFilterParametersConfigurationByParametersAndTimestampDataReader( Guid parameters, DateTime timestamp )
        {
            const string sql = SimpleTrackerFilterParametersConfigurationDataReader.BaseQuery + " WHERE " +
                    SimpleTrackerFilterParametersConfigurationDataReader.ViewAliasName + ".[Parameters] = @parameters AND " +
                    SimpleTrackerFilterParametersConfigurationDataReader.ViewAliasName + ".[Timestamp] = @timestamp " +
                    " ORDER BY " + SimpleTrackerFilterParametersConfigurationDataReader.ViewAliasName + ".[Parameters]," +SimpleTrackerFilterParametersConfigurationDataReader.ViewAliasName + ".[Timestamp]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var parametersParameter = sqlCommandParameters.AddReference( "@parameters", parameters );
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@timestamp", timestamp );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleTrackerFilterParametersConfigurationDataReader = new SimpleTrackerFilterParametersConfigurationDataReader( _loggerFactory, sqlDataReader );
                return simpleTrackerFilterParametersConfigurationDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public TrackerFilterParametersConfigurationObject? GetTrackerFilterParametersConfigurationByParametersAndTimestamp( Guid parameters, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public TrackerFilterParametersConfigurationObject? GetTrackerFilterParametersConfigurationByParametersAtTimestamp( Guid parameters, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<TrackerFilterParametersConfigurationObject> GetTrackerFilterParametersConfigurationByParametersFromTimestamp( Guid parameters, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<TrackerFilterParametersConfigurationObject> GetTrackerFilterParametersConfigurationByParametersUntilTimestamp( Guid parameters, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<TrackerFilterParametersConfigurationObject> GetTrackerFilterParametersConfigurationByParametersOverTimestamp( Guid parameters, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException( );
        }
        public SimpleTrackerFilterParametersConfigurationDataReader GetTrackerFilterParametersConfigurationCollectionByTimestampDataReader( DateTime timestamp )
        {
            const string sql = SimpleTrackerFilterParametersConfigurationDataReader.BaseQuery + " WHERE " +
                    SimpleTrackerFilterParametersConfigurationDataReader.ViewAliasName + ".[Timestamp] = @timestamp " +
                    " ORDER BY " + SimpleTrackerFilterParametersConfigurationDataReader.ViewAliasName + ".[Timestamp]," +SimpleTrackerFilterParametersConfigurationDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@timestamp", timestamp );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleTrackerFilterParametersConfigurationDataReader = new SimpleTrackerFilterParametersConfigurationDataReader( _loggerFactory, sqlDataReader );
                return simpleTrackerFilterParametersConfigurationDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<TrackerFilterParametersConfigurationObject> GetTrackerFilterParametersConfigurationCollectionByTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<TrackerFilterParametersConfigurationObject> GetTrackerFilterParametersConfigurationCollectionAtTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<TrackerFilterParametersConfigurationObject> GetTrackerFilterParametersConfigurationCollectionFromTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<TrackerFilterParametersConfigurationObject> GetTrackerFilterParametersConfigurationCollectionUntilTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<TrackerFilterParametersConfigurationObject> GetTrackerFilterParametersConfigurationCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException( );
        }
        // ---------------------------------------------------------------------
        // TrackInfo queries
        // ---------------------------------------------------------------------
        public SimpleTrackInfoDataReader GetTrackInfoByIdDataReader( Guid id )
        {
            const string sql = SimpleTrackInfoDataReader.BaseQuery + "WHERE " + SimpleTrackInfoDataReader.ViewAliasName + ".[Id] = @id"; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                sqlCommandParameters.AddGuid( "@id", id );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleTrackInfoDataReader = new SimpleTrackInfoDataReader( _loggerFactory, sqlDataReader );
                return simpleTrackInfoDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public TrackInfoObject? GetTrackInfoById( Guid id )
        {
            var simpleTrackInfoDataReader = GetTrackInfoByIdDataReader( id );
            using ( simpleTrackInfoDataReader )
            {
                if ( simpleTrackInfoDataReader.Read( ) )
                {
                    var result = simpleTrackInfoDataReader.GetDataObject( );
                    return result;
                }
            }
            return null;
        }

        public void GetTrackInfoById( Guid id, Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleTrackInfoDataReader = GetTrackInfoByIdDataReader( id );
                using ( simpleTrackInfoDataReader )
                {
                    if ( simpleTrackInfoDataReader.Read( ) )
                    {
                        destinationWriter.Write( true );
                        simpleTrackInfoDataReader.WriteTo( destinationWriter );
                    }
                    else
                    {
                        destinationWriter.Write( false );
                    }
                }
            }
        }

        public SimpleTrackInfoDataReader GetTrackInfoCollectionDataReader( )
        {
            const string sql = SimpleTrackInfoDataReader.BaseQuery; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleTrackInfoDataReader = new SimpleTrackInfoDataReader( _loggerFactory, sqlDataReader );
                return simpleTrackInfoDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public IList<TrackInfoObject> GetTrackInfoCollection( )
        {
            var result = new List<TrackInfoObject>( );
            var simpleTrackInfoDataReader = GetTrackInfoCollectionDataReader( );
            using ( simpleTrackInfoDataReader )
            {
                while ( simpleTrackInfoDataReader.Read( ) )
                {
                    var data = simpleTrackInfoDataReader.GetDataObject( );
                    result.Add( data );
                }
            }
            return result;
        }

        public void GetTrackInfoCollection( Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleTrackInfoDataReader = GetTrackInfoCollectionDataReader( );
                using ( simpleTrackInfoDataReader )
                {
                    simpleTrackInfoDataReader.WriteResultSetTo( destinationWriter );
                }
            }
        }

        // ---------------------------------------------------------------------
        // TrackingServiceOptions queries
        // ---------------------------------------------------------------------
        public SimpleTrackingServiceOptionsDataReader GetTrackingServiceOptionsByIdDataReader( Guid id )
        {
            const string sql = SimpleTrackingServiceOptionsDataReader.BaseQuery + "WHERE " + SimpleTrackingServiceOptionsDataReader.ViewAliasName + ".[Id] = @id"; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                sqlCommandParameters.AddGuid( "@id", id );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleTrackingServiceOptionsDataReader = new SimpleTrackingServiceOptionsDataReader( _loggerFactory, sqlDataReader );
                return simpleTrackingServiceOptionsDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public TrackingServiceOptionsObject? GetTrackingServiceOptionsById( Guid id )
        {
            var simpleTrackingServiceOptionsDataReader = GetTrackingServiceOptionsByIdDataReader( id );
            using ( simpleTrackingServiceOptionsDataReader )
            {
                if ( simpleTrackingServiceOptionsDataReader.Read( ) )
                {
                    var result = simpleTrackingServiceOptionsDataReader.GetDataObject( );
                    return result;
                }
            }
            return null;
        }

        public void GetTrackingServiceOptionsById( Guid id, Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleTrackingServiceOptionsDataReader = GetTrackingServiceOptionsByIdDataReader( id );
                using ( simpleTrackingServiceOptionsDataReader )
                {
                    if ( simpleTrackingServiceOptionsDataReader.Read( ) )
                    {
                        destinationWriter.Write( true );
                        simpleTrackingServiceOptionsDataReader.WriteTo( destinationWriter );
                    }
                    else
                    {
                        destinationWriter.Write( false );
                    }
                }
            }
        }

        public SimpleTrackingServiceOptionsDataReader GetTrackingServiceOptionsCollectionDataReader( )
        {
            const string sql = SimpleTrackingServiceOptionsDataReader.BaseQuery; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleTrackingServiceOptionsDataReader = new SimpleTrackingServiceOptionsDataReader( _loggerFactory, sqlDataReader );
                return simpleTrackingServiceOptionsDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public IList<TrackingServiceOptionsObject> GetTrackingServiceOptionsCollection( )
        {
            var result = new List<TrackingServiceOptionsObject>( );
            var simpleTrackingServiceOptionsDataReader = GetTrackingServiceOptionsCollectionDataReader( );
            using ( simpleTrackingServiceOptionsDataReader )
            {
                while ( simpleTrackingServiceOptionsDataReader.Read( ) )
                {
                    var data = simpleTrackingServiceOptionsDataReader.GetDataObject( );
                    result.Add( data );
                }
            }
            return result;
        }

        public void GetTrackingServiceOptionsCollection( Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleTrackingServiceOptionsDataReader = GetTrackingServiceOptionsCollectionDataReader( );
                using ( simpleTrackingServiceOptionsDataReader )
                {
                    simpleTrackingServiceOptionsDataReader.WriteResultSetTo( destinationWriter );
                }
            }
        }

        public SimpleTrackingServiceOptionsDataReader GetTrackingServiceOptionsByTimestampDataReader( DateTime timestamp )
        {
            const string sql = SimpleTrackingServiceOptionsDataReader.BaseQuery + " WHERE " +
                    SimpleTrackingServiceOptionsDataReader.ViewAliasName + ".[Timestamp] = @timestamp " +
                    " ORDER BY " + SimpleTrackingServiceOptionsDataReader.ViewAliasName + ".[Timestamp]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@timestamp", timestamp );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleTrackingServiceOptionsDataReader = new SimpleTrackingServiceOptionsDataReader( _loggerFactory, sqlDataReader );
                return simpleTrackingServiceOptionsDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public TrackingServiceOptionsObject? GetTrackingServiceOptionsByTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public TrackingServiceOptionsObject? GetTrackingServiceOptionsAtTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<TrackingServiceOptionsObject> GetTrackingServiceOptionsFromTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<TrackingServiceOptionsObject> GetTrackingServiceOptionsUntilTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<TrackingServiceOptionsObject> GetTrackingServiceOptionsOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException( );
        }
        // ---------------------------------------------------------------------
        // TrackLink queries
        // ---------------------------------------------------------------------
        public SimpleTrackLinkDataReader GetTrackLinkByIdDataReader( Guid id )
        {
            const string sql = SimpleTrackLinkDataReader.BaseQuery + "WHERE " + SimpleTrackLinkDataReader.ViewAliasName + ".[Id] = @id"; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                sqlCommandParameters.AddGuid( "@id", id );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleTrackLinkDataReader = new SimpleTrackLinkDataReader( _loggerFactory, sqlDataReader );
                return simpleTrackLinkDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public TrackLinkObject? GetTrackLinkById( Guid id )
        {
            var simpleTrackLinkDataReader = GetTrackLinkByIdDataReader( id );
            using ( simpleTrackLinkDataReader )
            {
                if ( simpleTrackLinkDataReader.Read( ) )
                {
                    var result = simpleTrackLinkDataReader.GetDataObject( );
                    return result;
                }
            }
            return null;
        }

        public void GetTrackLinkById( Guid id, Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleTrackLinkDataReader = GetTrackLinkByIdDataReader( id );
                using ( simpleTrackLinkDataReader )
                {
                    if ( simpleTrackLinkDataReader.Read( ) )
                    {
                        destinationWriter.Write( true );
                        simpleTrackLinkDataReader.WriteTo( destinationWriter );
                    }
                    else
                    {
                        destinationWriter.Write( false );
                    }
                }
            }
        }

        public SimpleTrackLinkDataReader GetTrackLinkCollectionDataReader( )
        {
            const string sql = SimpleTrackLinkDataReader.BaseQuery; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleTrackLinkDataReader = new SimpleTrackLinkDataReader( _loggerFactory, sqlDataReader );
                return simpleTrackLinkDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public IList<TrackLinkObject> GetTrackLinkCollection( )
        {
            var result = new List<TrackLinkObject>( );
            var simpleTrackLinkDataReader = GetTrackLinkCollectionDataReader( );
            using ( simpleTrackLinkDataReader )
            {
                while ( simpleTrackLinkDataReader.Read( ) )
                {
                    var data = simpleTrackLinkDataReader.GetDataObject( );
                    result.Add( data );
                }
            }
            return result;
        }

        public void GetTrackLinkCollection( Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleTrackLinkDataReader = GetTrackLinkCollectionDataReader( );
                using ( simpleTrackLinkDataReader )
                {
                    simpleTrackLinkDataReader.WriteResultSetTo( destinationWriter );
                }
            }
        }

        public SimpleTrackLinkDataReader GetTrackLinkCollectionByPrimaryDataReader( Guid primary )
        {
            const string sql = SimpleTrackLinkDataReader.BaseQuery + " WHERE " +
                    SimpleTrackLinkDataReader.ViewAliasName + ".[Primary] = @primary " +
                    " ORDER BY " + SimpleTrackLinkDataReader.ViewAliasName + ".[Primary]," +SimpleTrackLinkDataReader.ViewAliasName + ".[Start]," +SimpleTrackLinkDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var primaryParameter = sqlCommandParameters.AddReference( "@primary", primary );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleTrackLinkDataReader = new SimpleTrackLinkDataReader( _loggerFactory, sqlDataReader );
                return simpleTrackLinkDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<TrackLinkObject> GetTrackLinkCollectionByPrimary( Guid primary )
        {
            throw new NotImplementedException( );
        }
        public SimpleTrackLinkDataReader GetTrackLinkCollectionByPrimaryAndStartDataReader( Guid primary, DateTime start )
        {
            const string sql = SimpleTrackLinkDataReader.BaseQuery + " WHERE " +
                    SimpleTrackLinkDataReader.ViewAliasName + ".[Primary] = @primary AND " +
                    SimpleTrackLinkDataReader.ViewAliasName + ".[Start] = @start " +
                    " ORDER BY " + SimpleTrackLinkDataReader.ViewAliasName + ".[Primary]," +SimpleTrackLinkDataReader.ViewAliasName + ".[Start]," +SimpleTrackLinkDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var primaryParameter = sqlCommandParameters.AddReference( "@primary", primary );
                var startParameter = sqlCommandParameters.AddDateTimeAsInt64( "@start", start );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleTrackLinkDataReader = new SimpleTrackLinkDataReader( _loggerFactory, sqlDataReader );
                return simpleTrackLinkDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<TrackLinkObject> GetTrackLinkCollectionByPrimaryAndStart( Guid primary, DateTime start )
        {
            throw new NotImplementedException( );
        }
        public IList<TrackLinkObject> GetTrackLinkCollectionByPrimaryAtStart( Guid primary, DateTime start )
        {
            throw new NotImplementedException( );
        }
        public IList<TrackLinkObject> GetTrackLinkCollectionByPrimaryFromStart( Guid primary, DateTime start )
        {
            throw new NotImplementedException( );
        }
        public IList<TrackLinkObject> GetTrackLinkCollectionByPrimaryUntilStart( Guid primary, DateTime start )
        {
            throw new NotImplementedException( );
        }
        public IList<TrackLinkObject> GetTrackLinkCollectionByPrimaryOverStart( Guid primary, DateTime fromStart, DateTime untilStart )
        {
            throw new NotImplementedException( );
        }
        public SimpleTrackLinkDataReader GetTrackLinkCollectionBySecondaryDataReader( Guid secondary )
        {
            const string sql = SimpleTrackLinkDataReader.BaseQuery + " WHERE " +
                    SimpleTrackLinkDataReader.ViewAliasName + ".[Secondary] = @secondary " +
                    " ORDER BY " + SimpleTrackLinkDataReader.ViewAliasName + ".[Secondary]," +SimpleTrackLinkDataReader.ViewAliasName + ".[Start]," +SimpleTrackLinkDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var secondaryParameter = sqlCommandParameters.AddReference( "@secondary", secondary );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleTrackLinkDataReader = new SimpleTrackLinkDataReader( _loggerFactory, sqlDataReader );
                return simpleTrackLinkDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<TrackLinkObject> GetTrackLinkCollectionBySecondary( Guid secondary )
        {
            throw new NotImplementedException( );
        }
        public SimpleTrackLinkDataReader GetTrackLinkCollectionBySecondaryAndStartDataReader( Guid secondary, DateTime start )
        {
            const string sql = SimpleTrackLinkDataReader.BaseQuery + " WHERE " +
                    SimpleTrackLinkDataReader.ViewAliasName + ".[Secondary] = @secondary AND " +
                    SimpleTrackLinkDataReader.ViewAliasName + ".[Start] = @start " +
                    " ORDER BY " + SimpleTrackLinkDataReader.ViewAliasName + ".[Secondary]," +SimpleTrackLinkDataReader.ViewAliasName + ".[Start]," +SimpleTrackLinkDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var secondaryParameter = sqlCommandParameters.AddReference( "@secondary", secondary );
                var startParameter = sqlCommandParameters.AddDateTimeAsInt64( "@start", start );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleTrackLinkDataReader = new SimpleTrackLinkDataReader( _loggerFactory, sqlDataReader );
                return simpleTrackLinkDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<TrackLinkObject> GetTrackLinkCollectionBySecondaryAndStart( Guid secondary, DateTime start )
        {
            throw new NotImplementedException( );
        }
        public IList<TrackLinkObject> GetTrackLinkCollectionBySecondaryAtStart( Guid secondary, DateTime start )
        {
            throw new NotImplementedException( );
        }
        public IList<TrackLinkObject> GetTrackLinkCollectionBySecondaryFromStart( Guid secondary, DateTime start )
        {
            throw new NotImplementedException( );
        }
        public IList<TrackLinkObject> GetTrackLinkCollectionBySecondaryUntilStart( Guid secondary, DateTime start )
        {
            throw new NotImplementedException( );
        }
        public IList<TrackLinkObject> GetTrackLinkCollectionBySecondaryOverStart( Guid secondary, DateTime fromStart, DateTime untilStart )
        {
            throw new NotImplementedException( );
        }
        public SimpleTrackLinkDataReader GetTrackLinkCollectionByStartDataReader( DateTime start )
        {
            const string sql = SimpleTrackLinkDataReader.BaseQuery + " WHERE " +
                    SimpleTrackLinkDataReader.ViewAliasName + ".[Start] = @start " +
                    " ORDER BY " + SimpleTrackLinkDataReader.ViewAliasName + ".[Start]," +SimpleTrackLinkDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var startParameter = sqlCommandParameters.AddDateTimeAsInt64( "@start", start );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleTrackLinkDataReader = new SimpleTrackLinkDataReader( _loggerFactory, sqlDataReader );
                return simpleTrackLinkDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<TrackLinkObject> GetTrackLinkCollectionByStart( DateTime start )
        {
            throw new NotImplementedException( );
        }
        public IList<TrackLinkObject> GetTrackLinkCollectionAtStart( DateTime start )
        {
            throw new NotImplementedException( );
        }
        public IList<TrackLinkObject> GetTrackLinkCollectionFromStart( DateTime start )
        {
            throw new NotImplementedException( );
        }
        public IList<TrackLinkObject> GetTrackLinkCollectionUntilStart( DateTime start )
        {
            throw new NotImplementedException( );
        }
        public IList<TrackLinkObject> GetTrackLinkCollectionOverStart( DateTime fromStart, DateTime untilStart )
        {
            throw new NotImplementedException( );
        }
        // ---------------------------------------------------------------------
        // TrackValue queries
        // ---------------------------------------------------------------------
        public SimpleTrackValueDataReader GetTrackValueByIdDataReader( Guid id )
        {
            const string sql = SimpleTrackValueDataReader.BaseQuery + "WHERE " + SimpleTrackValueDataReader.ViewAliasName + ".[Id] = @id"; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                sqlCommandParameters.AddGuid( "@id", id );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleTrackValueDataReader = new SimpleTrackValueDataReader( _loggerFactory, sqlDataReader );
                return simpleTrackValueDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public TrackValueObject? GetTrackValueById( Guid id )
        {
            var simpleTrackValueDataReader = GetTrackValueByIdDataReader( id );
            using ( simpleTrackValueDataReader )
            {
                if ( simpleTrackValueDataReader.Read( ) )
                {
                    var result = simpleTrackValueDataReader.GetDataObject( );
                    return result;
                }
            }
            return null;
        }

        public void GetTrackValueById( Guid id, Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleTrackValueDataReader = GetTrackValueByIdDataReader( id );
                using ( simpleTrackValueDataReader )
                {
                    if ( simpleTrackValueDataReader.Read( ) )
                    {
                        destinationWriter.Write( true );
                        simpleTrackValueDataReader.WriteTo( destinationWriter );
                    }
                    else
                    {
                        destinationWriter.Write( false );
                    }
                }
            }
        }

        public SimpleTrackValueDataReader GetTrackValueCollectionDataReader( )
        {
            const string sql = SimpleTrackValueDataReader.BaseQuery; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleTrackValueDataReader = new SimpleTrackValueDataReader( _loggerFactory, sqlDataReader );
                return simpleTrackValueDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public IList<TrackValueObject> GetTrackValueCollection( )
        {
            var result = new List<TrackValueObject>( );
            var simpleTrackValueDataReader = GetTrackValueCollectionDataReader( );
            using ( simpleTrackValueDataReader )
            {
                while ( simpleTrackValueDataReader.Read( ) )
                {
                    var data = simpleTrackValueDataReader.GetDataObject( );
                    result.Add( data );
                }
            }
            return result;
        }

        public void GetTrackValueCollection( Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleTrackValueDataReader = GetTrackValueCollectionDataReader( );
                using ( simpleTrackValueDataReader )
                {
                    simpleTrackValueDataReader.WriteResultSetTo( destinationWriter );
                }
            }
        }

        public SimpleTrackValueDataReader GetTrackValueCollectionByTrackDataReader( Guid track )
        {
            const string sql = SimpleTrackValueDataReader.BaseQuery + " WHERE " +
                    SimpleTrackValueDataReader.ViewAliasName + ".[Track] = @track " +
                    " ORDER BY " + SimpleTrackValueDataReader.ViewAliasName + ".[Track]," +SimpleTrackValueDataReader.ViewAliasName + ".[Timestamp]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var trackParameter = sqlCommandParameters.AddReference( "@track", track );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleTrackValueDataReader = new SimpleTrackValueDataReader( _loggerFactory, sqlDataReader );
                return simpleTrackValueDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<TrackValueObject> GetTrackValueCollectionByTrack( Guid track )
        {
            throw new NotImplementedException( );
        }
        public SimpleTrackValueDataReader GetTrackValueByTrackAndTimestampDataReader( Guid track, DateTime timestamp )
        {
            const string sql = SimpleTrackValueDataReader.BaseQuery + " WHERE " +
                    SimpleTrackValueDataReader.ViewAliasName + ".[Track] = @track AND " +
                    SimpleTrackValueDataReader.ViewAliasName + ".[Timestamp] = @timestamp " +
                    " ORDER BY " + SimpleTrackValueDataReader.ViewAliasName + ".[Track]," +SimpleTrackValueDataReader.ViewAliasName + ".[Timestamp]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var trackParameter = sqlCommandParameters.AddReference( "@track", track );
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@timestamp", timestamp );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleTrackValueDataReader = new SimpleTrackValueDataReader( _loggerFactory, sqlDataReader );
                return simpleTrackValueDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public TrackValueObject? GetTrackValueByTrackAndTimestamp( Guid track, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public TrackValueObject? GetTrackValueByTrackAtTimestamp( Guid track, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<TrackValueObject> GetTrackValueByTrackFromTimestamp( Guid track, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<TrackValueObject> GetTrackValueByTrackUntilTimestamp( Guid track, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<TrackValueObject> GetTrackValueByTrackOverTimestamp( Guid track, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException( );
        }
        public SimpleTrackValueDataReader GetTrackValueCollectionByTimestampDataReader( DateTime timestamp )
        {
            const string sql = SimpleTrackValueDataReader.BaseQuery + " WHERE " +
                    SimpleTrackValueDataReader.ViewAliasName + ".[Timestamp] = @timestamp " +
                    " ORDER BY " + SimpleTrackValueDataReader.ViewAliasName + ".[Timestamp]," +SimpleTrackValueDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@timestamp", timestamp );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleTrackValueDataReader = new SimpleTrackValueDataReader( _loggerFactory, sqlDataReader );
                return simpleTrackValueDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<TrackValueObject> GetTrackValueCollectionByTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<TrackValueObject> GetTrackValueCollectionAtTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<TrackValueObject> GetTrackValueCollectionFromTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<TrackValueObject> GetTrackValueCollectionUntilTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<TrackValueObject> GetTrackValueCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException( );
        }
        // ---------------------------------------------------------------------
        // TrackValue3D queries
        // ---------------------------------------------------------------------
        public SimpleTrackValue3DDataReader GetTrackValue3DByIdDataReader( Guid id )
        {
            const string sql = SimpleTrackValue3DDataReader.BaseQuery + "WHERE " + SimpleTrackValue3DDataReader.ViewAliasName + ".[Id] = @id"; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                sqlCommandParameters.AddGuid( "@id", id );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleTrackValue3DDataReader = new SimpleTrackValue3DDataReader( _loggerFactory, sqlDataReader );
                return simpleTrackValue3DDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public TrackValue3DObject? GetTrackValue3DById( Guid id )
        {
            var simpleTrackValue3DDataReader = GetTrackValue3DByIdDataReader( id );
            using ( simpleTrackValue3DDataReader )
            {
                if ( simpleTrackValue3DDataReader.Read( ) )
                {
                    var result = simpleTrackValue3DDataReader.GetDataObject( );
                    return result;
                }
            }
            return null;
        }

        public void GetTrackValue3DById( Guid id, Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleTrackValue3DDataReader = GetTrackValue3DByIdDataReader( id );
                using ( simpleTrackValue3DDataReader )
                {
                    if ( simpleTrackValue3DDataReader.Read( ) )
                    {
                        destinationWriter.Write( true );
                        simpleTrackValue3DDataReader.WriteTo( destinationWriter );
                    }
                    else
                    {
                        destinationWriter.Write( false );
                    }
                }
            }
        }

        public SimpleTrackValue3DDataReader GetTrackValue3DCollectionDataReader( )
        {
            const string sql = SimpleTrackValue3DDataReader.BaseQuery; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleTrackValue3DDataReader = new SimpleTrackValue3DDataReader( _loggerFactory, sqlDataReader );
                return simpleTrackValue3DDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public IList<TrackValue3DObject> GetTrackValue3DCollection( )
        {
            var result = new List<TrackValue3DObject>( );
            var simpleTrackValue3DDataReader = GetTrackValue3DCollectionDataReader( );
            using ( simpleTrackValue3DDataReader )
            {
                while ( simpleTrackValue3DDataReader.Read( ) )
                {
                    var data = simpleTrackValue3DDataReader.GetDataObject( );
                    result.Add( data );
                }
            }
            return result;
        }

        public void GetTrackValue3DCollection( Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleTrackValue3DDataReader = GetTrackValue3DCollectionDataReader( );
                using ( simpleTrackValue3DDataReader )
                {
                    simpleTrackValue3DDataReader.WriteResultSetTo( destinationWriter );
                }
            }
        }

        public SimpleTrackValue3DDataReader GetTrackValue3DCollectionByTrackDataReader( Guid track )
        {
            const string sql = SimpleTrackValue3DDataReader.BaseQuery + " WHERE " +
                    SimpleTrackValue3DDataReader.ViewAliasName + ".[Track] = @track " +
                    " ORDER BY " + SimpleTrackValue3DDataReader.ViewAliasName + ".[Track]," +SimpleTrackValue3DDataReader.ViewAliasName + ".[Timestamp]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var trackParameter = sqlCommandParameters.AddReference( "@track", track );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleTrackValue3DDataReader = new SimpleTrackValue3DDataReader( _loggerFactory, sqlDataReader );
                return simpleTrackValue3DDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<TrackValue3DObject> GetTrackValue3DCollectionByTrack( Guid track )
        {
            throw new NotImplementedException( );
        }
        public SimpleTrackValue3DDataReader GetTrackValue3DByTrackAndTimestampDataReader( Guid track, DateTime timestamp )
        {
            const string sql = SimpleTrackValue3DDataReader.BaseQuery + " WHERE " +
                    SimpleTrackValue3DDataReader.ViewAliasName + ".[Track] = @track AND " +
                    SimpleTrackValue3DDataReader.ViewAliasName + ".[Timestamp] = @timestamp " +
                    " ORDER BY " + SimpleTrackValue3DDataReader.ViewAliasName + ".[Track]," +SimpleTrackValue3DDataReader.ViewAliasName + ".[Timestamp]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var trackParameter = sqlCommandParameters.AddReference( "@track", track );
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@timestamp", timestamp );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleTrackValue3DDataReader = new SimpleTrackValue3DDataReader( _loggerFactory, sqlDataReader );
                return simpleTrackValue3DDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public TrackValue3DObject? GetTrackValue3DByTrackAndTimestamp( Guid track, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public TrackValue3DObject? GetTrackValue3DByTrackAtTimestamp( Guid track, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<TrackValue3DObject> GetTrackValue3DByTrackFromTimestamp( Guid track, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<TrackValue3DObject> GetTrackValue3DByTrackUntilTimestamp( Guid track, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<TrackValue3DObject> GetTrackValue3DByTrackOverTimestamp( Guid track, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException( );
        }
        public SimpleTrackValue3DDataReader GetTrackValue3DCollectionByTimestampDataReader( DateTime timestamp )
        {
            const string sql = SimpleTrackValue3DDataReader.BaseQuery + " WHERE " +
                    SimpleTrackValue3DDataReader.ViewAliasName + ".[Timestamp] = @timestamp " +
                    " ORDER BY " + SimpleTrackValue3DDataReader.ViewAliasName + ".[Timestamp]," +SimpleTrackValue3DDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@timestamp", timestamp );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleTrackValue3DDataReader = new SimpleTrackValue3DDataReader( _loggerFactory, sqlDataReader );
                return simpleTrackValue3DDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<TrackValue3DObject> GetTrackValue3DCollectionByTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<TrackValue3DObject> GetTrackValue3DCollectionAtTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<TrackValue3DObject> GetTrackValue3DCollectionFromTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<TrackValue3DObject> GetTrackValue3DCollectionUntilTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<TrackValue3DObject> GetTrackValue3DCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException( );
        }
        // ---------------------------------------------------------------------
        // UInt16TimeseriesValue queries
        // ---------------------------------------------------------------------
        public SimpleUInt16TimeseriesValueDataReader GetUInt16TimeseriesValueByIdDataReader( Guid id )
        {
            const string sql = SimpleUInt16TimeseriesValueDataReader.BaseQuery + "WHERE " + SimpleUInt16TimeseriesValueDataReader.ViewAliasName + ".[Id] = @id"; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                sqlCommandParameters.AddGuid( "@id", id );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleUInt16TimeseriesValueDataReader = new SimpleUInt16TimeseriesValueDataReader( _loggerFactory, sqlDataReader );
                return simpleUInt16TimeseriesValueDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public UInt16TimeseriesValueObject? GetUInt16TimeseriesValueById( Guid id )
        {
            var simpleUInt16TimeseriesValueDataReader = GetUInt16TimeseriesValueByIdDataReader( id );
            using ( simpleUInt16TimeseriesValueDataReader )
            {
                if ( simpleUInt16TimeseriesValueDataReader.Read( ) )
                {
                    var result = simpleUInt16TimeseriesValueDataReader.GetDataObject( );
                    return result;
                }
            }
            return null;
        }

        public void GetUInt16TimeseriesValueById( Guid id, Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleUInt16TimeseriesValueDataReader = GetUInt16TimeseriesValueByIdDataReader( id );
                using ( simpleUInt16TimeseriesValueDataReader )
                {
                    if ( simpleUInt16TimeseriesValueDataReader.Read( ) )
                    {
                        destinationWriter.Write( true );
                        simpleUInt16TimeseriesValueDataReader.WriteTo( destinationWriter );
                    }
                    else
                    {
                        destinationWriter.Write( false );
                    }
                }
            }
        }

        public SimpleUInt16TimeseriesValueDataReader GetUInt16TimeseriesValueCollectionDataReader( )
        {
            const string sql = SimpleUInt16TimeseriesValueDataReader.BaseQuery; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleUInt16TimeseriesValueDataReader = new SimpleUInt16TimeseriesValueDataReader( _loggerFactory, sqlDataReader );
                return simpleUInt16TimeseriesValueDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public IList<UInt16TimeseriesValueObject> GetUInt16TimeseriesValueCollection( )
        {
            var result = new List<UInt16TimeseriesValueObject>( );
            var simpleUInt16TimeseriesValueDataReader = GetUInt16TimeseriesValueCollectionDataReader( );
            using ( simpleUInt16TimeseriesValueDataReader )
            {
                while ( simpleUInt16TimeseriesValueDataReader.Read( ) )
                {
                    var data = simpleUInt16TimeseriesValueDataReader.GetDataObject( );
                    result.Add( data );
                }
            }
            return result;
        }

        public void GetUInt16TimeseriesValueCollection( Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleUInt16TimeseriesValueDataReader = GetUInt16TimeseriesValueCollectionDataReader( );
                using ( simpleUInt16TimeseriesValueDataReader )
                {
                    simpleUInt16TimeseriesValueDataReader.WriteResultSetTo( destinationWriter );
                }
            }
        }

        public SimpleUInt16TimeseriesValueDataReader GetUInt16TimeseriesValueCollectionByTimeseriesDataReader( Guid timeseries )
        {
            const string sql = SimpleUInt16TimeseriesValueDataReader.BaseQuery + " WHERE " +
                    SimpleUInt16TimeseriesValueDataReader.ViewAliasName + ".[Timeseries] = @timeseries " +
                    " ORDER BY " + SimpleUInt16TimeseriesValueDataReader.ViewAliasName + ".[Timeseries]," +SimpleUInt16TimeseriesValueDataReader.ViewAliasName + ".[Timestamp]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var timeseriesParameter = sqlCommandParameters.AddReference( "@timeseries", timeseries );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleUInt16TimeseriesValueDataReader = new SimpleUInt16TimeseriesValueDataReader( _loggerFactory, sqlDataReader );
                return simpleUInt16TimeseriesValueDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<UInt16TimeseriesValueObject> GetUInt16TimeseriesValueCollectionByTimeseries( Guid timeseries )
        {
            throw new NotImplementedException( );
        }
        public SimpleUInt16TimeseriesValueDataReader GetUInt16TimeseriesValueByTimeseriesAndTimestampDataReader( Guid timeseries, DateTime timestamp )
        {
            const string sql = SimpleUInt16TimeseriesValueDataReader.BaseQuery + " WHERE " +
                    SimpleUInt16TimeseriesValueDataReader.ViewAliasName + ".[Timeseries] = @timeseries AND " +
                    SimpleUInt16TimeseriesValueDataReader.ViewAliasName + ".[Timestamp] = @timestamp " +
                    " ORDER BY " + SimpleUInt16TimeseriesValueDataReader.ViewAliasName + ".[Timeseries]," +SimpleUInt16TimeseriesValueDataReader.ViewAliasName + ".[Timestamp]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var timeseriesParameter = sqlCommandParameters.AddReference( "@timeseries", timeseries );
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@timestamp", timestamp );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleUInt16TimeseriesValueDataReader = new SimpleUInt16TimeseriesValueDataReader( _loggerFactory, sqlDataReader );
                return simpleUInt16TimeseriesValueDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public UInt16TimeseriesValueObject? GetUInt16TimeseriesValueByTimeseriesAndTimestamp( Guid timeseries, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public UInt16TimeseriesValueObject? GetUInt16TimeseriesValueByTimeseriesAtTimestamp( Guid timeseries, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<UInt16TimeseriesValueObject> GetUInt16TimeseriesValueByTimeseriesFromTimestamp( Guid timeseries, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<UInt16TimeseriesValueObject> GetUInt16TimeseriesValueByTimeseriesUntilTimestamp( Guid timeseries, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<UInt16TimeseriesValueObject> GetUInt16TimeseriesValueByTimeseriesOverTimestamp( Guid timeseries, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException( );
        }
        public SimpleUInt16TimeseriesValueDataReader GetUInt16TimeseriesValueCollectionByTimestampDataReader( DateTime timestamp )
        {
            const string sql = SimpleUInt16TimeseriesValueDataReader.BaseQuery + " WHERE " +
                    SimpleUInt16TimeseriesValueDataReader.ViewAliasName + ".[Timestamp] = @timestamp " +
                    " ORDER BY " + SimpleUInt16TimeseriesValueDataReader.ViewAliasName + ".[Timestamp]," +SimpleUInt16TimeseriesValueDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@timestamp", timestamp );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleUInt16TimeseriesValueDataReader = new SimpleUInt16TimeseriesValueDataReader( _loggerFactory, sqlDataReader );
                return simpleUInt16TimeseriesValueDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<UInt16TimeseriesValueObject> GetUInt16TimeseriesValueCollectionByTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<UInt16TimeseriesValueObject> GetUInt16TimeseriesValueCollectionAtTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<UInt16TimeseriesValueObject> GetUInt16TimeseriesValueCollectionFromTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<UInt16TimeseriesValueObject> GetUInt16TimeseriesValueCollectionUntilTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<UInt16TimeseriesValueObject> GetUInt16TimeseriesValueCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException( );
        }
        // ---------------------------------------------------------------------
        // UInt32TimeseriesValue queries
        // ---------------------------------------------------------------------
        public SimpleUInt32TimeseriesValueDataReader GetUInt32TimeseriesValueByIdDataReader( Guid id )
        {
            const string sql = SimpleUInt32TimeseriesValueDataReader.BaseQuery + "WHERE " + SimpleUInt32TimeseriesValueDataReader.ViewAliasName + ".[Id] = @id"; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                sqlCommandParameters.AddGuid( "@id", id );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleUInt32TimeseriesValueDataReader = new SimpleUInt32TimeseriesValueDataReader( _loggerFactory, sqlDataReader );
                return simpleUInt32TimeseriesValueDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public UInt32TimeseriesValueObject? GetUInt32TimeseriesValueById( Guid id )
        {
            var simpleUInt32TimeseriesValueDataReader = GetUInt32TimeseriesValueByIdDataReader( id );
            using ( simpleUInt32TimeseriesValueDataReader )
            {
                if ( simpleUInt32TimeseriesValueDataReader.Read( ) )
                {
                    var result = simpleUInt32TimeseriesValueDataReader.GetDataObject( );
                    return result;
                }
            }
            return null;
        }

        public void GetUInt32TimeseriesValueById( Guid id, Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleUInt32TimeseriesValueDataReader = GetUInt32TimeseriesValueByIdDataReader( id );
                using ( simpleUInt32TimeseriesValueDataReader )
                {
                    if ( simpleUInt32TimeseriesValueDataReader.Read( ) )
                    {
                        destinationWriter.Write( true );
                        simpleUInt32TimeseriesValueDataReader.WriteTo( destinationWriter );
                    }
                    else
                    {
                        destinationWriter.Write( false );
                    }
                }
            }
        }

        public SimpleUInt32TimeseriesValueDataReader GetUInt32TimeseriesValueCollectionDataReader( )
        {
            const string sql = SimpleUInt32TimeseriesValueDataReader.BaseQuery; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleUInt32TimeseriesValueDataReader = new SimpleUInt32TimeseriesValueDataReader( _loggerFactory, sqlDataReader );
                return simpleUInt32TimeseriesValueDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public IList<UInt32TimeseriesValueObject> GetUInt32TimeseriesValueCollection( )
        {
            var result = new List<UInt32TimeseriesValueObject>( );
            var simpleUInt32TimeseriesValueDataReader = GetUInt32TimeseriesValueCollectionDataReader( );
            using ( simpleUInt32TimeseriesValueDataReader )
            {
                while ( simpleUInt32TimeseriesValueDataReader.Read( ) )
                {
                    var data = simpleUInt32TimeseriesValueDataReader.GetDataObject( );
                    result.Add( data );
                }
            }
            return result;
        }

        public void GetUInt32TimeseriesValueCollection( Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleUInt32TimeseriesValueDataReader = GetUInt32TimeseriesValueCollectionDataReader( );
                using ( simpleUInt32TimeseriesValueDataReader )
                {
                    simpleUInt32TimeseriesValueDataReader.WriteResultSetTo( destinationWriter );
                }
            }
        }

        public SimpleUInt32TimeseriesValueDataReader GetUInt32TimeseriesValueCollectionByTimeseriesDataReader( Guid timeseries )
        {
            const string sql = SimpleUInt32TimeseriesValueDataReader.BaseQuery + " WHERE " +
                    SimpleUInt32TimeseriesValueDataReader.ViewAliasName + ".[Timeseries] = @timeseries " +
                    " ORDER BY " + SimpleUInt32TimeseriesValueDataReader.ViewAliasName + ".[Timeseries]," +SimpleUInt32TimeseriesValueDataReader.ViewAliasName + ".[Timestamp]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var timeseriesParameter = sqlCommandParameters.AddReference( "@timeseries", timeseries );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleUInt32TimeseriesValueDataReader = new SimpleUInt32TimeseriesValueDataReader( _loggerFactory, sqlDataReader );
                return simpleUInt32TimeseriesValueDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<UInt32TimeseriesValueObject> GetUInt32TimeseriesValueCollectionByTimeseries( Guid timeseries )
        {
            throw new NotImplementedException( );
        }
        public SimpleUInt32TimeseriesValueDataReader GetUInt32TimeseriesValueByTimeseriesAndTimestampDataReader( Guid timeseries, DateTime timestamp )
        {
            const string sql = SimpleUInt32TimeseriesValueDataReader.BaseQuery + " WHERE " +
                    SimpleUInt32TimeseriesValueDataReader.ViewAliasName + ".[Timeseries] = @timeseries AND " +
                    SimpleUInt32TimeseriesValueDataReader.ViewAliasName + ".[Timestamp] = @timestamp " +
                    " ORDER BY " + SimpleUInt32TimeseriesValueDataReader.ViewAliasName + ".[Timeseries]," +SimpleUInt32TimeseriesValueDataReader.ViewAliasName + ".[Timestamp]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var timeseriesParameter = sqlCommandParameters.AddReference( "@timeseries", timeseries );
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@timestamp", timestamp );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleUInt32TimeseriesValueDataReader = new SimpleUInt32TimeseriesValueDataReader( _loggerFactory, sqlDataReader );
                return simpleUInt32TimeseriesValueDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public UInt32TimeseriesValueObject? GetUInt32TimeseriesValueByTimeseriesAndTimestamp( Guid timeseries, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public UInt32TimeseriesValueObject? GetUInt32TimeseriesValueByTimeseriesAtTimestamp( Guid timeseries, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<UInt32TimeseriesValueObject> GetUInt32TimeseriesValueByTimeseriesFromTimestamp( Guid timeseries, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<UInt32TimeseriesValueObject> GetUInt32TimeseriesValueByTimeseriesUntilTimestamp( Guid timeseries, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<UInt32TimeseriesValueObject> GetUInt32TimeseriesValueByTimeseriesOverTimestamp( Guid timeseries, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException( );
        }
        public SimpleUInt32TimeseriesValueDataReader GetUInt32TimeseriesValueCollectionByTimestampDataReader( DateTime timestamp )
        {
            const string sql = SimpleUInt32TimeseriesValueDataReader.BaseQuery + " WHERE " +
                    SimpleUInt32TimeseriesValueDataReader.ViewAliasName + ".[Timestamp] = @timestamp " +
                    " ORDER BY " + SimpleUInt32TimeseriesValueDataReader.ViewAliasName + ".[Timestamp]," +SimpleUInt32TimeseriesValueDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@timestamp", timestamp );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleUInt32TimeseriesValueDataReader = new SimpleUInt32TimeseriesValueDataReader( _loggerFactory, sqlDataReader );
                return simpleUInt32TimeseriesValueDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<UInt32TimeseriesValueObject> GetUInt32TimeseriesValueCollectionByTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<UInt32TimeseriesValueObject> GetUInt32TimeseriesValueCollectionAtTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<UInt32TimeseriesValueObject> GetUInt32TimeseriesValueCollectionFromTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<UInt32TimeseriesValueObject> GetUInt32TimeseriesValueCollectionUntilTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<UInt32TimeseriesValueObject> GetUInt32TimeseriesValueCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException( );
        }
        // ---------------------------------------------------------------------
        // UInt64TimeseriesValue queries
        // ---------------------------------------------------------------------
        public SimpleUInt64TimeseriesValueDataReader GetUInt64TimeseriesValueByIdDataReader( Guid id )
        {
            const string sql = SimpleUInt64TimeseriesValueDataReader.BaseQuery + "WHERE " + SimpleUInt64TimeseriesValueDataReader.ViewAliasName + ".[Id] = @id"; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                sqlCommandParameters.AddGuid( "@id", id );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleUInt64TimeseriesValueDataReader = new SimpleUInt64TimeseriesValueDataReader( _loggerFactory, sqlDataReader );
                return simpleUInt64TimeseriesValueDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public UInt64TimeseriesValueObject? GetUInt64TimeseriesValueById( Guid id )
        {
            var simpleUInt64TimeseriesValueDataReader = GetUInt64TimeseriesValueByIdDataReader( id );
            using ( simpleUInt64TimeseriesValueDataReader )
            {
                if ( simpleUInt64TimeseriesValueDataReader.Read( ) )
                {
                    var result = simpleUInt64TimeseriesValueDataReader.GetDataObject( );
                    return result;
                }
            }
            return null;
        }

        public void GetUInt64TimeseriesValueById( Guid id, Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleUInt64TimeseriesValueDataReader = GetUInt64TimeseriesValueByIdDataReader( id );
                using ( simpleUInt64TimeseriesValueDataReader )
                {
                    if ( simpleUInt64TimeseriesValueDataReader.Read( ) )
                    {
                        destinationWriter.Write( true );
                        simpleUInt64TimeseriesValueDataReader.WriteTo( destinationWriter );
                    }
                    else
                    {
                        destinationWriter.Write( false );
                    }
                }
            }
        }

        public SimpleUInt64TimeseriesValueDataReader GetUInt64TimeseriesValueCollectionDataReader( )
        {
            const string sql = SimpleUInt64TimeseriesValueDataReader.BaseQuery; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleUInt64TimeseriesValueDataReader = new SimpleUInt64TimeseriesValueDataReader( _loggerFactory, sqlDataReader );
                return simpleUInt64TimeseriesValueDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public IList<UInt64TimeseriesValueObject> GetUInt64TimeseriesValueCollection( )
        {
            var result = new List<UInt64TimeseriesValueObject>( );
            var simpleUInt64TimeseriesValueDataReader = GetUInt64TimeseriesValueCollectionDataReader( );
            using ( simpleUInt64TimeseriesValueDataReader )
            {
                while ( simpleUInt64TimeseriesValueDataReader.Read( ) )
                {
                    var data = simpleUInt64TimeseriesValueDataReader.GetDataObject( );
                    result.Add( data );
                }
            }
            return result;
        }

        public void GetUInt64TimeseriesValueCollection( Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleUInt64TimeseriesValueDataReader = GetUInt64TimeseriesValueCollectionDataReader( );
                using ( simpleUInt64TimeseriesValueDataReader )
                {
                    simpleUInt64TimeseriesValueDataReader.WriteResultSetTo( destinationWriter );
                }
            }
        }

        public SimpleUInt64TimeseriesValueDataReader GetUInt64TimeseriesValueCollectionByTimeseriesDataReader( Guid timeseries )
        {
            const string sql = SimpleUInt64TimeseriesValueDataReader.BaseQuery + " WHERE " +
                    SimpleUInt64TimeseriesValueDataReader.ViewAliasName + ".[Timeseries] = @timeseries " +
                    " ORDER BY " + SimpleUInt64TimeseriesValueDataReader.ViewAliasName + ".[Timeseries]," +SimpleUInt64TimeseriesValueDataReader.ViewAliasName + ".[Timestamp]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var timeseriesParameter = sqlCommandParameters.AddReference( "@timeseries", timeseries );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleUInt64TimeseriesValueDataReader = new SimpleUInt64TimeseriesValueDataReader( _loggerFactory, sqlDataReader );
                return simpleUInt64TimeseriesValueDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<UInt64TimeseriesValueObject> GetUInt64TimeseriesValueCollectionByTimeseries( Guid timeseries )
        {
            throw new NotImplementedException( );
        }
        public SimpleUInt64TimeseriesValueDataReader GetUInt64TimeseriesValueByTimeseriesAndTimestampDataReader( Guid timeseries, DateTime timestamp )
        {
            const string sql = SimpleUInt64TimeseriesValueDataReader.BaseQuery + " WHERE " +
                    SimpleUInt64TimeseriesValueDataReader.ViewAliasName + ".[Timeseries] = @timeseries AND " +
                    SimpleUInt64TimeseriesValueDataReader.ViewAliasName + ".[Timestamp] = @timestamp " +
                    " ORDER BY " + SimpleUInt64TimeseriesValueDataReader.ViewAliasName + ".[Timeseries]," +SimpleUInt64TimeseriesValueDataReader.ViewAliasName + ".[Timestamp]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var timeseriesParameter = sqlCommandParameters.AddReference( "@timeseries", timeseries );
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@timestamp", timestamp );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleUInt64TimeseriesValueDataReader = new SimpleUInt64TimeseriesValueDataReader( _loggerFactory, sqlDataReader );
                return simpleUInt64TimeseriesValueDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public UInt64TimeseriesValueObject? GetUInt64TimeseriesValueByTimeseriesAndTimestamp( Guid timeseries, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public UInt64TimeseriesValueObject? GetUInt64TimeseriesValueByTimeseriesAtTimestamp( Guid timeseries, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<UInt64TimeseriesValueObject> GetUInt64TimeseriesValueByTimeseriesFromTimestamp( Guid timeseries, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<UInt64TimeseriesValueObject> GetUInt64TimeseriesValueByTimeseriesUntilTimestamp( Guid timeseries, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<UInt64TimeseriesValueObject> GetUInt64TimeseriesValueByTimeseriesOverTimestamp( Guid timeseries, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException( );
        }
        public SimpleUInt64TimeseriesValueDataReader GetUInt64TimeseriesValueCollectionByTimestampDataReader( DateTime timestamp )
        {
            const string sql = SimpleUInt64TimeseriesValueDataReader.BaseQuery + " WHERE " +
                    SimpleUInt64TimeseriesValueDataReader.ViewAliasName + ".[Timestamp] = @timestamp " +
                    " ORDER BY " + SimpleUInt64TimeseriesValueDataReader.ViewAliasName + ".[Timestamp]," +SimpleUInt64TimeseriesValueDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@timestamp", timestamp );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleUInt64TimeseriesValueDataReader = new SimpleUInt64TimeseriesValueDataReader( _loggerFactory, sqlDataReader );
                return simpleUInt64TimeseriesValueDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<UInt64TimeseriesValueObject> GetUInt64TimeseriesValueCollectionByTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<UInt64TimeseriesValueObject> GetUInt64TimeseriesValueCollectionAtTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<UInt64TimeseriesValueObject> GetUInt64TimeseriesValueCollectionFromTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<UInt64TimeseriesValueObject> GetUInt64TimeseriesValueCollectionUntilTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<UInt64TimeseriesValueObject> GetUInt64TimeseriesValueCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException( );
        }
        // ---------------------------------------------------------------------
        // VehicleType queries
        // ---------------------------------------------------------------------
        public SimpleVehicleTypeDataReader GetVehicleTypeByIdDataReader( Guid id )
        {
            const string sql = SimpleVehicleTypeDataReader.BaseQuery + "WHERE " + SimpleVehicleTypeDataReader.ViewAliasName + ".[Id] = @id"; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                sqlCommandParameters.AddGuid( "@id", id );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleVehicleTypeDataReader = new SimpleVehicleTypeDataReader( _loggerFactory, sqlDataReader );
                return simpleVehicleTypeDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public VehicleTypeObject? GetVehicleTypeById( Guid id )
        {
            var simpleVehicleTypeDataReader = GetVehicleTypeByIdDataReader( id );
            using ( simpleVehicleTypeDataReader )
            {
                if ( simpleVehicleTypeDataReader.Read( ) )
                {
                    var result = simpleVehicleTypeDataReader.GetDataObject( );
                    return result;
                }
            }
            return null;
        }

        public void GetVehicleTypeById( Guid id, Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleVehicleTypeDataReader = GetVehicleTypeByIdDataReader( id );
                using ( simpleVehicleTypeDataReader )
                {
                    if ( simpleVehicleTypeDataReader.Read( ) )
                    {
                        destinationWriter.Write( true );
                        simpleVehicleTypeDataReader.WriteTo( destinationWriter );
                    }
                    else
                    {
                        destinationWriter.Write( false );
                    }
                }
            }
        }

        public SimpleVehicleTypeDataReader GetVehicleTypeCollectionDataReader( )
        {
            const string sql = SimpleVehicleTypeDataReader.BaseQuery; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleVehicleTypeDataReader = new SimpleVehicleTypeDataReader( _loggerFactory, sqlDataReader );
                return simpleVehicleTypeDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public IList<VehicleTypeObject> GetVehicleTypeCollection( )
        {
            var result = new List<VehicleTypeObject>( );
            var simpleVehicleTypeDataReader = GetVehicleTypeCollectionDataReader( );
            using ( simpleVehicleTypeDataReader )
            {
                while ( simpleVehicleTypeDataReader.Read( ) )
                {
                    var data = simpleVehicleTypeDataReader.GetDataObject( );
                    result.Add( data );
                }
            }
            return result;
        }

        public void GetVehicleTypeCollection( Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleVehicleTypeDataReader = GetVehicleTypeCollectionDataReader( );
                using ( simpleVehicleTypeDataReader )
                {
                    simpleVehicleTypeDataReader.WriteResultSetTo( destinationWriter );
                }
            }
        }

        public SimpleVehicleTypeDataReader GetVehicleTypeByNameDataReader( string name )
        {
            const string sql = SimpleVehicleTypeDataReader.BaseQuery + " WHERE " +
                    SimpleVehicleTypeDataReader.ViewAliasName + ".[Name] = @name " +
                    " ORDER BY " + SimpleVehicleTypeDataReader.ViewAliasName + ".[Name]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var nameParameter = sqlCommandParameters.AddNVarChar( "@name", name, 127 );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleVehicleTypeDataReader = new SimpleVehicleTypeDataReader( _loggerFactory, sqlDataReader );
                return simpleVehicleTypeDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public VehicleTypeObject? GetVehicleTypeByName( string name )
        {
            throw new NotImplementedException( );
        }
        // ---------------------------------------------------------------------
        // VesselType queries
        // ---------------------------------------------------------------------
        public SimpleVesselTypeDataReader GetVesselTypeByIdDataReader( Guid id )
        {
            const string sql = SimpleVesselTypeDataReader.BaseQuery + "WHERE " + SimpleVesselTypeDataReader.ViewAliasName + ".[Id] = @id"; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                sqlCommandParameters.AddGuid( "@id", id );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleVesselTypeDataReader = new SimpleVesselTypeDataReader( _loggerFactory, sqlDataReader );
                return simpleVesselTypeDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public VesselTypeObject? GetVesselTypeById( Guid id )
        {
            var simpleVesselTypeDataReader = GetVesselTypeByIdDataReader( id );
            using ( simpleVesselTypeDataReader )
            {
                if ( simpleVesselTypeDataReader.Read( ) )
                {
                    var result = simpleVesselTypeDataReader.GetDataObject( );
                    return result;
                }
            }
            return null;
        }

        public void GetVesselTypeById( Guid id, Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleVesselTypeDataReader = GetVesselTypeByIdDataReader( id );
                using ( simpleVesselTypeDataReader )
                {
                    if ( simpleVesselTypeDataReader.Read( ) )
                    {
                        destinationWriter.Write( true );
                        simpleVesselTypeDataReader.WriteTo( destinationWriter );
                    }
                    else
                    {
                        destinationWriter.Write( false );
                    }
                }
            }
        }

        public SimpleVesselTypeDataReader GetVesselTypeCollectionDataReader( )
        {
            const string sql = SimpleVesselTypeDataReader.BaseQuery; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleVesselTypeDataReader = new SimpleVesselTypeDataReader( _loggerFactory, sqlDataReader );
                return simpleVesselTypeDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public IList<VesselTypeObject> GetVesselTypeCollection( )
        {
            var result = new List<VesselTypeObject>( );
            var simpleVesselTypeDataReader = GetVesselTypeCollectionDataReader( );
            using ( simpleVesselTypeDataReader )
            {
                while ( simpleVesselTypeDataReader.Read( ) )
                {
                    var data = simpleVesselTypeDataReader.GetDataObject( );
                    result.Add( data );
                }
            }
            return result;
        }

        public void GetVesselTypeCollection( Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleVesselTypeDataReader = GetVesselTypeCollectionDataReader( );
                using ( simpleVesselTypeDataReader )
                {
                    simpleVesselTypeDataReader.WriteResultSetTo( destinationWriter );
                }
            }
        }

        public SimpleVesselTypeDataReader GetVesselTypeByNameDataReader( string name )
        {
            const string sql = SimpleVesselTypeDataReader.BaseQuery + " WHERE " +
                    SimpleVesselTypeDataReader.ViewAliasName + ".[Name] = @name " +
                    " ORDER BY " + SimpleVesselTypeDataReader.ViewAliasName + ".[Name]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var nameParameter = sqlCommandParameters.AddNVarChar( "@name", name, 127 );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleVesselTypeDataReader = new SimpleVesselTypeDataReader( _loggerFactory, sqlDataReader );
                return simpleVesselTypeDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public VesselTypeObject? GetVesselTypeByName( string name )
        {
            throw new NotImplementedException( );
        }
        public SimpleVesselTypeDataReader GetVesselTypeByCodeDataReader( int code )
        {
            const string sql = SimpleVesselTypeDataReader.BaseQuery + " WHERE " +
                    SimpleVesselTypeDataReader.ViewAliasName + ".[Code] = @code " +
                    " ORDER BY " + SimpleVesselTypeDataReader.ViewAliasName + ".[Code]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var codeParameter = sqlCommandParameters.AddInt32( "@code", code );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleVesselTypeDataReader = new SimpleVesselTypeDataReader( _loggerFactory, sqlDataReader );
                return simpleVesselTypeDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public VesselTypeObject? GetVesselTypeByCode( int code )
        {
            throw new NotImplementedException( );
        }
        public IList<VesselTypeObject> GetVesselTypeFromCode( int code )
        {
            throw new NotImplementedException( );
        }
        public IList<VesselTypeObject> GetVesselTypeUntilCode( int code )
        {
            throw new NotImplementedException( );
        }
        public IList<VesselTypeObject> GetVesselTypeOverCode( int fromCode, int untilCode )
        {
            throw new NotImplementedException( );
        }
        // ---------------------------------------------------------------------
        // View queries
        // ---------------------------------------------------------------------
        public SimpleViewDataReader GetViewByIdDataReader( Guid id )
        {
            const string sql = SimpleViewDataReader.BaseQuery + "WHERE " + SimpleViewDataReader.ViewAliasName + ".[Id] = @id"; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                sqlCommandParameters.AddGuid( "@id", id );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleViewDataReader = new SimpleViewDataReader( _loggerFactory, sqlDataReader );
                return simpleViewDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public ViewObject? GetViewById( Guid id )
        {
            var simpleViewDataReader = GetViewByIdDataReader( id );
            using ( simpleViewDataReader )
            {
                if ( simpleViewDataReader.Read( ) )
                {
                    var result = simpleViewDataReader.GetDataObject( );
                    return result;
                }
            }
            return null;
        }

        public void GetViewById( Guid id, Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleViewDataReader = GetViewByIdDataReader( id );
                using ( simpleViewDataReader )
                {
                    if ( simpleViewDataReader.Read( ) )
                    {
                        destinationWriter.Write( true );
                        simpleViewDataReader.WriteTo( destinationWriter );
                    }
                    else
                    {
                        destinationWriter.Write( false );
                    }
                }
            }
        }

        public SimpleViewDataReader GetViewCollectionDataReader( )
        {
            const string sql = SimpleViewDataReader.BaseQuery; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleViewDataReader = new SimpleViewDataReader( _loggerFactory, sqlDataReader );
                return simpleViewDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public IList<ViewObject> GetViewCollection( )
        {
            var result = new List<ViewObject>( );
            var simpleViewDataReader = GetViewCollectionDataReader( );
            using ( simpleViewDataReader )
            {
                while ( simpleViewDataReader.Read( ) )
                {
                    var data = simpleViewDataReader.GetDataObject( );
                    result.Add( data );
                }
            }
            return result;
        }

        public void GetViewCollection( Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleViewDataReader = GetViewCollectionDataReader( );
                using ( simpleViewDataReader )
                {
                    simpleViewDataReader.WriteResultSetTo( destinationWriter );
                }
            }
        }

        public SimpleViewDataReader GetViewByNameDataReader( string name )
        {
            const string sql = SimpleViewDataReader.BaseQuery + " WHERE " +
                    SimpleViewDataReader.ViewAliasName + ".[Name] = @name " +
                    " ORDER BY " + SimpleViewDataReader.ViewAliasName + ".[Name]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var nameParameter = sqlCommandParameters.AddNVarChar( "@name", name, 127 );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleViewDataReader = new SimpleViewDataReader( _loggerFactory, sqlDataReader );
                return simpleViewDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public ViewObject? GetViewByName( string name )
        {
            throw new NotImplementedException( );
        }
        // ---------------------------------------------------------------------
        // ViewCameraLink queries
        // ---------------------------------------------------------------------
        public SimpleViewCameraLinkDataReader GetViewCameraLinkByIdDataReader( Guid id )
        {
            const string sql = SimpleViewCameraLinkDataReader.BaseQuery + "WHERE " + SimpleViewCameraLinkDataReader.ViewAliasName + ".[Id] = @id"; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                sqlCommandParameters.AddGuid( "@id", id );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleViewCameraLinkDataReader = new SimpleViewCameraLinkDataReader( _loggerFactory, sqlDataReader );
                return simpleViewCameraLinkDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public ViewCameraLinkObject? GetViewCameraLinkById( Guid id )
        {
            var simpleViewCameraLinkDataReader = GetViewCameraLinkByIdDataReader( id );
            using ( simpleViewCameraLinkDataReader )
            {
                if ( simpleViewCameraLinkDataReader.Read( ) )
                {
                    var result = simpleViewCameraLinkDataReader.GetDataObject( );
                    return result;
                }
            }
            return null;
        }

        public void GetViewCameraLinkById( Guid id, Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleViewCameraLinkDataReader = GetViewCameraLinkByIdDataReader( id );
                using ( simpleViewCameraLinkDataReader )
                {
                    if ( simpleViewCameraLinkDataReader.Read( ) )
                    {
                        destinationWriter.Write( true );
                        simpleViewCameraLinkDataReader.WriteTo( destinationWriter );
                    }
                    else
                    {
                        destinationWriter.Write( false );
                    }
                }
            }
        }

        public SimpleViewCameraLinkDataReader GetViewCameraLinkCollectionDataReader( )
        {
            const string sql = SimpleViewCameraLinkDataReader.BaseQuery; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleViewCameraLinkDataReader = new SimpleViewCameraLinkDataReader( _loggerFactory, sqlDataReader );
                return simpleViewCameraLinkDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public IList<ViewCameraLinkObject> GetViewCameraLinkCollection( )
        {
            var result = new List<ViewCameraLinkObject>( );
            var simpleViewCameraLinkDataReader = GetViewCameraLinkCollectionDataReader( );
            using ( simpleViewCameraLinkDataReader )
            {
                while ( simpleViewCameraLinkDataReader.Read( ) )
                {
                    var data = simpleViewCameraLinkDataReader.GetDataObject( );
                    result.Add( data );
                }
            }
            return result;
        }

        public void GetViewCameraLinkCollection( Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleViewCameraLinkDataReader = GetViewCameraLinkCollectionDataReader( );
                using ( simpleViewCameraLinkDataReader )
                {
                    simpleViewCameraLinkDataReader.WriteResultSetTo( destinationWriter );
                }
            }
        }

        public SimpleViewCameraLinkDataReader GetViewCameraLinkCollectionByViewDataReader( Guid view )
        {
            const string sql = SimpleViewCameraLinkDataReader.BaseQuery + " WHERE " +
                    SimpleViewCameraLinkDataReader.ViewAliasName + ".[View] = @view " +
                    " ORDER BY " + SimpleViewCameraLinkDataReader.ViewAliasName + ".[View]," +SimpleViewCameraLinkDataReader.ViewAliasName + ".[Start]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var viewParameter = sqlCommandParameters.AddReference( "@view", view );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleViewCameraLinkDataReader = new SimpleViewCameraLinkDataReader( _loggerFactory, sqlDataReader );
                return simpleViewCameraLinkDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<ViewCameraLinkObject> GetViewCameraLinkCollectionByView( Guid view )
        {
            throw new NotImplementedException( );
        }
        public SimpleViewCameraLinkDataReader GetViewCameraLinkByViewAndStartDataReader( Guid view, DateTime start )
        {
            const string sql = SimpleViewCameraLinkDataReader.BaseQuery + " WHERE " +
                    SimpleViewCameraLinkDataReader.ViewAliasName + ".[View] = @view AND " +
                    SimpleViewCameraLinkDataReader.ViewAliasName + ".[Start] = @start " +
                    " ORDER BY " + SimpleViewCameraLinkDataReader.ViewAliasName + ".[View]," +SimpleViewCameraLinkDataReader.ViewAliasName + ".[Start]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var viewParameter = sqlCommandParameters.AddReference( "@view", view );
                var startParameter = sqlCommandParameters.AddDateTimeAsInt64( "@start", start );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleViewCameraLinkDataReader = new SimpleViewCameraLinkDataReader( _loggerFactory, sqlDataReader );
                return simpleViewCameraLinkDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public ViewCameraLinkObject? GetViewCameraLinkByViewAndStart( Guid view, DateTime start )
        {
            throw new NotImplementedException( );
        }
        public ViewCameraLinkObject? GetViewCameraLinkByViewAtStart( Guid view, DateTime start )
        {
            throw new NotImplementedException( );
        }
        public IList<ViewCameraLinkObject> GetViewCameraLinkByViewFromStart( Guid view, DateTime start )
        {
            throw new NotImplementedException( );
        }
        public IList<ViewCameraLinkObject> GetViewCameraLinkByViewUntilStart( Guid view, DateTime start )
        {
            throw new NotImplementedException( );
        }
        public IList<ViewCameraLinkObject> GetViewCameraLinkByViewOverStart( Guid view, DateTime fromStart, DateTime untilStart )
        {
            throw new NotImplementedException( );
        }
        public SimpleViewCameraLinkDataReader GetViewCameraLinkCollectionByCameraDataReader( Guid camera )
        {
            const string sql = SimpleViewCameraLinkDataReader.BaseQuery + " WHERE " +
                    SimpleViewCameraLinkDataReader.ViewAliasName + ".[Camera] = @camera " +
                    " ORDER BY " + SimpleViewCameraLinkDataReader.ViewAliasName + ".[Camera]," +SimpleViewCameraLinkDataReader.ViewAliasName + ".[Start]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var cameraParameter = sqlCommandParameters.AddReference( "@camera", camera );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleViewCameraLinkDataReader = new SimpleViewCameraLinkDataReader( _loggerFactory, sqlDataReader );
                return simpleViewCameraLinkDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<ViewCameraLinkObject> GetViewCameraLinkCollectionByCamera( Guid camera )
        {
            throw new NotImplementedException( );
        }
        public SimpleViewCameraLinkDataReader GetViewCameraLinkByCameraAndStartDataReader( Guid camera, DateTime start )
        {
            const string sql = SimpleViewCameraLinkDataReader.BaseQuery + " WHERE " +
                    SimpleViewCameraLinkDataReader.ViewAliasName + ".[Camera] = @camera AND " +
                    SimpleViewCameraLinkDataReader.ViewAliasName + ".[Start] = @start " +
                    " ORDER BY " + SimpleViewCameraLinkDataReader.ViewAliasName + ".[Camera]," +SimpleViewCameraLinkDataReader.ViewAliasName + ".[Start]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var cameraParameter = sqlCommandParameters.AddReference( "@camera", camera );
                var startParameter = sqlCommandParameters.AddDateTimeAsInt64( "@start", start );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleViewCameraLinkDataReader = new SimpleViewCameraLinkDataReader( _loggerFactory, sqlDataReader );
                return simpleViewCameraLinkDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public ViewCameraLinkObject? GetViewCameraLinkByCameraAndStart( Guid camera, DateTime start )
        {
            throw new NotImplementedException( );
        }
        public ViewCameraLinkObject? GetViewCameraLinkByCameraAtStart( Guid camera, DateTime start )
        {
            throw new NotImplementedException( );
        }
        public IList<ViewCameraLinkObject> GetViewCameraLinkByCameraFromStart( Guid camera, DateTime start )
        {
            throw new NotImplementedException( );
        }
        public IList<ViewCameraLinkObject> GetViewCameraLinkByCameraUntilStart( Guid camera, DateTime start )
        {
            throw new NotImplementedException( );
        }
        public IList<ViewCameraLinkObject> GetViewCameraLinkByCameraOverStart( Guid camera, DateTime fromStart, DateTime untilStart )
        {
            throw new NotImplementedException( );
        }
        public SimpleViewCameraLinkDataReader GetViewCameraLinkCollectionByStartDataReader( DateTime start )
        {
            const string sql = SimpleViewCameraLinkDataReader.BaseQuery + " WHERE " +
                    SimpleViewCameraLinkDataReader.ViewAliasName + ".[Start] = @start " +
                    " ORDER BY " + SimpleViewCameraLinkDataReader.ViewAliasName + ".[Start]," +SimpleViewCameraLinkDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var startParameter = sqlCommandParameters.AddDateTimeAsInt64( "@start", start );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleViewCameraLinkDataReader = new SimpleViewCameraLinkDataReader( _loggerFactory, sqlDataReader );
                return simpleViewCameraLinkDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<ViewCameraLinkObject> GetViewCameraLinkCollectionByStart( DateTime start )
        {
            throw new NotImplementedException( );
        }
        public IList<ViewCameraLinkObject> GetViewCameraLinkCollectionAtStart( DateTime start )
        {
            throw new NotImplementedException( );
        }
        public IList<ViewCameraLinkObject> GetViewCameraLinkCollectionFromStart( DateTime start )
        {
            throw new NotImplementedException( );
        }
        public IList<ViewCameraLinkObject> GetViewCameraLinkCollectionUntilStart( DateTime start )
        {
            throw new NotImplementedException( );
        }
        public IList<ViewCameraLinkObject> GetViewCameraLinkCollectionOverStart( DateTime fromStart, DateTime untilStart )
        {
            throw new NotImplementedException( );
        }
        // ---------------------------------------------------------------------
        // ViewTrackerLink queries
        // ---------------------------------------------------------------------
        public SimpleViewTrackerLinkDataReader GetViewTrackerLinkByIdDataReader( Guid id )
        {
            const string sql = SimpleViewTrackerLinkDataReader.BaseQuery + "WHERE " + SimpleViewTrackerLinkDataReader.ViewAliasName + ".[Id] = @id"; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                sqlCommandParameters.AddGuid( "@id", id );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleViewTrackerLinkDataReader = new SimpleViewTrackerLinkDataReader( _loggerFactory, sqlDataReader );
                return simpleViewTrackerLinkDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public ViewTrackerLinkObject? GetViewTrackerLinkById( Guid id )
        {
            var simpleViewTrackerLinkDataReader = GetViewTrackerLinkByIdDataReader( id );
            using ( simpleViewTrackerLinkDataReader )
            {
                if ( simpleViewTrackerLinkDataReader.Read( ) )
                {
                    var result = simpleViewTrackerLinkDataReader.GetDataObject( );
                    return result;
                }
            }
            return null;
        }

        public void GetViewTrackerLinkById( Guid id, Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleViewTrackerLinkDataReader = GetViewTrackerLinkByIdDataReader( id );
                using ( simpleViewTrackerLinkDataReader )
                {
                    if ( simpleViewTrackerLinkDataReader.Read( ) )
                    {
                        destinationWriter.Write( true );
                        simpleViewTrackerLinkDataReader.WriteTo( destinationWriter );
                    }
                    else
                    {
                        destinationWriter.Write( false );
                    }
                }
            }
        }

        public SimpleViewTrackerLinkDataReader GetViewTrackerLinkCollectionDataReader( )
        {
            const string sql = SimpleViewTrackerLinkDataReader.BaseQuery; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleViewTrackerLinkDataReader = new SimpleViewTrackerLinkDataReader( _loggerFactory, sqlDataReader );
                return simpleViewTrackerLinkDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public IList<ViewTrackerLinkObject> GetViewTrackerLinkCollection( )
        {
            var result = new List<ViewTrackerLinkObject>( );
            var simpleViewTrackerLinkDataReader = GetViewTrackerLinkCollectionDataReader( );
            using ( simpleViewTrackerLinkDataReader )
            {
                while ( simpleViewTrackerLinkDataReader.Read( ) )
                {
                    var data = simpleViewTrackerLinkDataReader.GetDataObject( );
                    result.Add( data );
                }
            }
            return result;
        }

        public void GetViewTrackerLinkCollection( Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleViewTrackerLinkDataReader = GetViewTrackerLinkCollectionDataReader( );
                using ( simpleViewTrackerLinkDataReader )
                {
                    simpleViewTrackerLinkDataReader.WriteResultSetTo( destinationWriter );
                }
            }
        }

        public SimpleViewTrackerLinkDataReader GetViewTrackerLinkCollectionByViewDataReader( Guid view )
        {
            const string sql = SimpleViewTrackerLinkDataReader.BaseQuery + " WHERE " +
                    SimpleViewTrackerLinkDataReader.ViewAliasName + ".[View] = @view " +
                    " ORDER BY " + SimpleViewTrackerLinkDataReader.ViewAliasName + ".[View]," +SimpleViewTrackerLinkDataReader.ViewAliasName + ".[Start]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var viewParameter = sqlCommandParameters.AddReference( "@view", view );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleViewTrackerLinkDataReader = new SimpleViewTrackerLinkDataReader( _loggerFactory, sqlDataReader );
                return simpleViewTrackerLinkDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<ViewTrackerLinkObject> GetViewTrackerLinkCollectionByView( Guid view )
        {
            throw new NotImplementedException( );
        }
        public SimpleViewTrackerLinkDataReader GetViewTrackerLinkByViewAndStartDataReader( Guid view, DateTime start )
        {
            const string sql = SimpleViewTrackerLinkDataReader.BaseQuery + " WHERE " +
                    SimpleViewTrackerLinkDataReader.ViewAliasName + ".[View] = @view AND " +
                    SimpleViewTrackerLinkDataReader.ViewAliasName + ".[Start] = @start " +
                    " ORDER BY " + SimpleViewTrackerLinkDataReader.ViewAliasName + ".[View]," +SimpleViewTrackerLinkDataReader.ViewAliasName + ".[Start]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var viewParameter = sqlCommandParameters.AddReference( "@view", view );
                var startParameter = sqlCommandParameters.AddDateTimeAsInt64( "@start", start );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleViewTrackerLinkDataReader = new SimpleViewTrackerLinkDataReader( _loggerFactory, sqlDataReader );
                return simpleViewTrackerLinkDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public ViewTrackerLinkObject? GetViewTrackerLinkByViewAndStart( Guid view, DateTime start )
        {
            throw new NotImplementedException( );
        }
        public ViewTrackerLinkObject? GetViewTrackerLinkByViewAtStart( Guid view, DateTime start )
        {
            throw new NotImplementedException( );
        }
        public IList<ViewTrackerLinkObject> GetViewTrackerLinkByViewFromStart( Guid view, DateTime start )
        {
            throw new NotImplementedException( );
        }
        public IList<ViewTrackerLinkObject> GetViewTrackerLinkByViewUntilStart( Guid view, DateTime start )
        {
            throw new NotImplementedException( );
        }
        public IList<ViewTrackerLinkObject> GetViewTrackerLinkByViewOverStart( Guid view, DateTime fromStart, DateTime untilStart )
        {
            throw new NotImplementedException( );
        }
        public SimpleViewTrackerLinkDataReader GetViewTrackerLinkCollectionByTrackerDataReader( Guid tracker )
        {
            const string sql = SimpleViewTrackerLinkDataReader.BaseQuery + " WHERE " +
                    SimpleViewTrackerLinkDataReader.ViewAliasName + ".[Tracker] = @tracker " +
                    " ORDER BY " + SimpleViewTrackerLinkDataReader.ViewAliasName + ".[Tracker]," +SimpleViewTrackerLinkDataReader.ViewAliasName + ".[Start]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var trackerParameter = sqlCommandParameters.AddReference( "@tracker", tracker );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleViewTrackerLinkDataReader = new SimpleViewTrackerLinkDataReader( _loggerFactory, sqlDataReader );
                return simpleViewTrackerLinkDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<ViewTrackerLinkObject> GetViewTrackerLinkCollectionByTracker( Guid tracker )
        {
            throw new NotImplementedException( );
        }
        public SimpleViewTrackerLinkDataReader GetViewTrackerLinkByTrackerAndStartDataReader( Guid tracker, DateTime start )
        {
            const string sql = SimpleViewTrackerLinkDataReader.BaseQuery + " WHERE " +
                    SimpleViewTrackerLinkDataReader.ViewAliasName + ".[Tracker] = @tracker AND " +
                    SimpleViewTrackerLinkDataReader.ViewAliasName + ".[Start] = @start " +
                    " ORDER BY " + SimpleViewTrackerLinkDataReader.ViewAliasName + ".[Tracker]," +SimpleViewTrackerLinkDataReader.ViewAliasName + ".[Start]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var trackerParameter = sqlCommandParameters.AddReference( "@tracker", tracker );
                var startParameter = sqlCommandParameters.AddDateTimeAsInt64( "@start", start );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleViewTrackerLinkDataReader = new SimpleViewTrackerLinkDataReader( _loggerFactory, sqlDataReader );
                return simpleViewTrackerLinkDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public ViewTrackerLinkObject? GetViewTrackerLinkByTrackerAndStart( Guid tracker, DateTime start )
        {
            throw new NotImplementedException( );
        }
        public ViewTrackerLinkObject? GetViewTrackerLinkByTrackerAtStart( Guid tracker, DateTime start )
        {
            throw new NotImplementedException( );
        }
        public IList<ViewTrackerLinkObject> GetViewTrackerLinkByTrackerFromStart( Guid tracker, DateTime start )
        {
            throw new NotImplementedException( );
        }
        public IList<ViewTrackerLinkObject> GetViewTrackerLinkByTrackerUntilStart( Guid tracker, DateTime start )
        {
            throw new NotImplementedException( );
        }
        public IList<ViewTrackerLinkObject> GetViewTrackerLinkByTrackerOverStart( Guid tracker, DateTime fromStart, DateTime untilStart )
        {
            throw new NotImplementedException( );
        }
        public SimpleViewTrackerLinkDataReader GetViewTrackerLinkCollectionByStartDataReader( DateTime start )
        {
            const string sql = SimpleViewTrackerLinkDataReader.BaseQuery + " WHERE " +
                    SimpleViewTrackerLinkDataReader.ViewAliasName + ".[Start] = @start " +
                    " ORDER BY " + SimpleViewTrackerLinkDataReader.ViewAliasName + ".[Start]," +SimpleViewTrackerLinkDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var startParameter = sqlCommandParameters.AddDateTimeAsInt64( "@start", start );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleViewTrackerLinkDataReader = new SimpleViewTrackerLinkDataReader( _loggerFactory, sqlDataReader );
                return simpleViewTrackerLinkDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<ViewTrackerLinkObject> GetViewTrackerLinkCollectionByStart( DateTime start )
        {
            throw new NotImplementedException( );
        }
        public IList<ViewTrackerLinkObject> GetViewTrackerLinkCollectionAtStart( DateTime start )
        {
            throw new NotImplementedException( );
        }
        public IList<ViewTrackerLinkObject> GetViewTrackerLinkCollectionFromStart( DateTime start )
        {
            throw new NotImplementedException( );
        }
        public IList<ViewTrackerLinkObject> GetViewTrackerLinkCollectionUntilStart( DateTime start )
        {
            throw new NotImplementedException( );
        }
        public IList<ViewTrackerLinkObject> GetViewTrackerLinkCollectionOverStart( DateTime fromStart, DateTime untilStart )
        {
            throw new NotImplementedException( );
        }
        // ---------------------------------------------------------------------
        // WeatherStationCommand queries
        // ---------------------------------------------------------------------
        public SimpleWeatherStationCommandDataReader GetWeatherStationCommandByIdDataReader( Guid id )
        {
            const string sql = SimpleWeatherStationCommandDataReader.BaseQuery + "WHERE " + SimpleWeatherStationCommandDataReader.ViewAliasName + ".[Id] = @id"; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                sqlCommandParameters.AddGuid( "@id", id );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleWeatherStationCommandDataReader = new SimpleWeatherStationCommandDataReader( _loggerFactory, sqlDataReader );
                return simpleWeatherStationCommandDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public WeatherStationCommandObject? GetWeatherStationCommandById( Guid id )
        {
            var simpleWeatherStationCommandDataReader = GetWeatherStationCommandByIdDataReader( id );
            using ( simpleWeatherStationCommandDataReader )
            {
                if ( simpleWeatherStationCommandDataReader.Read( ) )
                {
                    var result = simpleWeatherStationCommandDataReader.GetDataObject( );
                    return result;
                }
            }
            return null;
        }

        public void GetWeatherStationCommandById( Guid id, Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleWeatherStationCommandDataReader = GetWeatherStationCommandByIdDataReader( id );
                using ( simpleWeatherStationCommandDataReader )
                {
                    if ( simpleWeatherStationCommandDataReader.Read( ) )
                    {
                        destinationWriter.Write( true );
                        simpleWeatherStationCommandDataReader.WriteTo( destinationWriter );
                    }
                    else
                    {
                        destinationWriter.Write( false );
                    }
                }
            }
        }

        public SimpleWeatherStationCommandDataReader GetWeatherStationCommandCollectionDataReader( )
        {
            const string sql = SimpleWeatherStationCommandDataReader.BaseQuery; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleWeatherStationCommandDataReader = new SimpleWeatherStationCommandDataReader( _loggerFactory, sqlDataReader );
                return simpleWeatherStationCommandDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public IList<WeatherStationCommandObject> GetWeatherStationCommandCollection( )
        {
            var result = new List<WeatherStationCommandObject>( );
            var simpleWeatherStationCommandDataReader = GetWeatherStationCommandCollectionDataReader( );
            using ( simpleWeatherStationCommandDataReader )
            {
                while ( simpleWeatherStationCommandDataReader.Read( ) )
                {
                    var data = simpleWeatherStationCommandDataReader.GetDataObject( );
                    result.Add( data );
                }
            }
            return result;
        }

        public void GetWeatherStationCommandCollection( Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleWeatherStationCommandDataReader = GetWeatherStationCommandCollectionDataReader( );
                using ( simpleWeatherStationCommandDataReader )
                {
                    simpleWeatherStationCommandDataReader.WriteResultSetTo( destinationWriter );
                }
            }
        }

        public SimpleWeatherStationCommandDataReader GetWeatherStationCommandCollectionByWeatherStationDataReader( Guid weatherStation )
        {
            const string sql = SimpleWeatherStationCommandDataReader.BaseQuery + " WHERE " +
                    SimpleWeatherStationCommandDataReader.ViewAliasName + ".[WeatherStation] = @weatherStation " +
                    " ORDER BY " + SimpleWeatherStationCommandDataReader.ViewAliasName + ".[WeatherStation]," +SimpleWeatherStationCommandDataReader.ViewAliasName + ".[Timestamp]," +SimpleWeatherStationCommandDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var weatherStationParameter = sqlCommandParameters.AddReference( "@weatherStation", weatherStation );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleWeatherStationCommandDataReader = new SimpleWeatherStationCommandDataReader( _loggerFactory, sqlDataReader );
                return simpleWeatherStationCommandDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<WeatherStationCommandObject> GetWeatherStationCommandCollectionByWeatherStation( Guid weatherStation )
        {
            throw new NotImplementedException( );
        }
        public SimpleWeatherStationCommandDataReader GetWeatherStationCommandCollectionByWeatherStationAndTimestampDataReader( Guid weatherStation, DateTime timestamp )
        {
            const string sql = SimpleWeatherStationCommandDataReader.BaseQuery + " WHERE " +
                    SimpleWeatherStationCommandDataReader.ViewAliasName + ".[WeatherStation] = @weatherStation AND " +
                    SimpleWeatherStationCommandDataReader.ViewAliasName + ".[Timestamp] = @timestamp " +
                    " ORDER BY " + SimpleWeatherStationCommandDataReader.ViewAliasName + ".[WeatherStation]," +SimpleWeatherStationCommandDataReader.ViewAliasName + ".[Timestamp]," +SimpleWeatherStationCommandDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var weatherStationParameter = sqlCommandParameters.AddReference( "@weatherStation", weatherStation );
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@timestamp", timestamp );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleWeatherStationCommandDataReader = new SimpleWeatherStationCommandDataReader( _loggerFactory, sqlDataReader );
                return simpleWeatherStationCommandDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<WeatherStationCommandObject> GetWeatherStationCommandCollectionByWeatherStationAndTimestamp( Guid weatherStation, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<WeatherStationCommandObject> GetWeatherStationCommandCollectionByWeatherStationAtTimestamp( Guid weatherStation, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<WeatherStationCommandObject> GetWeatherStationCommandCollectionByWeatherStationFromTimestamp( Guid weatherStation, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<WeatherStationCommandObject> GetWeatherStationCommandCollectionByWeatherStationUntilTimestamp( Guid weatherStation, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<WeatherStationCommandObject> GetWeatherStationCommandCollectionByWeatherStationOverTimestamp( Guid weatherStation, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException( );
        }
        public SimpleWeatherStationCommandDataReader GetWeatherStationCommandCollectionByTimestampDataReader( DateTime timestamp )
        {
            const string sql = SimpleWeatherStationCommandDataReader.BaseQuery + " WHERE " +
                    SimpleWeatherStationCommandDataReader.ViewAliasName + ".[Timestamp] = @timestamp " +
                    " ORDER BY " + SimpleWeatherStationCommandDataReader.ViewAliasName + ".[Timestamp]," +SimpleWeatherStationCommandDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@timestamp", timestamp );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleWeatherStationCommandDataReader = new SimpleWeatherStationCommandDataReader( _loggerFactory, sqlDataReader );
                return simpleWeatherStationCommandDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<WeatherStationCommandObject> GetWeatherStationCommandCollectionByTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<WeatherStationCommandObject> GetWeatherStationCommandCollectionAtTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<WeatherStationCommandObject> GetWeatherStationCommandCollectionFromTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<WeatherStationCommandObject> GetWeatherStationCommandCollectionUntilTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<WeatherStationCommandObject> GetWeatherStationCommandCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException( );
        }
        public SimpleWeatherStationCommandDataReader GetWeatherStationCommandCollectionByReplyDataReader( Guid reply )
        {
            const string sql = SimpleWeatherStationCommandDataReader.BaseQuery + " WHERE " +
                    SimpleWeatherStationCommandDataReader.ViewAliasName + ".[Reply] = @reply " +
                    " ORDER BY " + SimpleWeatherStationCommandDataReader.ViewAliasName + ".[Reply]," +SimpleWeatherStationCommandDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var replyParameter = sqlCommandParameters.AddReference( "@reply", reply );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleWeatherStationCommandDataReader = new SimpleWeatherStationCommandDataReader( _loggerFactory, sqlDataReader );
                return simpleWeatherStationCommandDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<WeatherStationCommandObject> GetWeatherStationCommandCollectionByReply( Guid reply )
        {
            throw new NotImplementedException( );
        }
        // ---------------------------------------------------------------------
        // WeatherStationCommandReply queries
        // ---------------------------------------------------------------------
        public SimpleWeatherStationCommandReplyDataReader GetWeatherStationCommandReplyByIdDataReader( Guid id )
        {
            const string sql = SimpleWeatherStationCommandReplyDataReader.BaseQuery + "WHERE " + SimpleWeatherStationCommandReplyDataReader.ViewAliasName + ".[Id] = @id"; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                sqlCommandParameters.AddGuid( "@id", id );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleWeatherStationCommandReplyDataReader = new SimpleWeatherStationCommandReplyDataReader( _loggerFactory, sqlDataReader );
                return simpleWeatherStationCommandReplyDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public WeatherStationCommandReplyObject? GetWeatherStationCommandReplyById( Guid id )
        {
            var simpleWeatherStationCommandReplyDataReader = GetWeatherStationCommandReplyByIdDataReader( id );
            using ( simpleWeatherStationCommandReplyDataReader )
            {
                if ( simpleWeatherStationCommandReplyDataReader.Read( ) )
                {
                    var result = simpleWeatherStationCommandReplyDataReader.GetDataObject( );
                    return result;
                }
            }
            return null;
        }

        public void GetWeatherStationCommandReplyById( Guid id, Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleWeatherStationCommandReplyDataReader = GetWeatherStationCommandReplyByIdDataReader( id );
                using ( simpleWeatherStationCommandReplyDataReader )
                {
                    if ( simpleWeatherStationCommandReplyDataReader.Read( ) )
                    {
                        destinationWriter.Write( true );
                        simpleWeatherStationCommandReplyDataReader.WriteTo( destinationWriter );
                    }
                    else
                    {
                        destinationWriter.Write( false );
                    }
                }
            }
        }

        public SimpleWeatherStationCommandReplyDataReader GetWeatherStationCommandReplyCollectionDataReader( )
        {
            const string sql = SimpleWeatherStationCommandReplyDataReader.BaseQuery; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleWeatherStationCommandReplyDataReader = new SimpleWeatherStationCommandReplyDataReader( _loggerFactory, sqlDataReader );
                return simpleWeatherStationCommandReplyDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public IList<WeatherStationCommandReplyObject> GetWeatherStationCommandReplyCollection( )
        {
            var result = new List<WeatherStationCommandReplyObject>( );
            var simpleWeatherStationCommandReplyDataReader = GetWeatherStationCommandReplyCollectionDataReader( );
            using ( simpleWeatherStationCommandReplyDataReader )
            {
                while ( simpleWeatherStationCommandReplyDataReader.Read( ) )
                {
                    var data = simpleWeatherStationCommandReplyDataReader.GetDataObject( );
                    result.Add( data );
                }
            }
            return result;
        }

        public void GetWeatherStationCommandReplyCollection( Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleWeatherStationCommandReplyDataReader = GetWeatherStationCommandReplyCollectionDataReader( );
                using ( simpleWeatherStationCommandReplyDataReader )
                {
                    simpleWeatherStationCommandReplyDataReader.WriteResultSetTo( destinationWriter );
                }
            }
        }

        public SimpleWeatherStationCommandReplyDataReader GetWeatherStationCommandReplyCollectionByWeatherStationDataReader( Guid weatherStation )
        {
            const string sql = SimpleWeatherStationCommandReplyDataReader.BaseQuery + " WHERE " +
                    SimpleWeatherStationCommandReplyDataReader.ViewAliasName + ".[WeatherStation] = @weatherStation " +
                    " ORDER BY " + SimpleWeatherStationCommandReplyDataReader.ViewAliasName + ".[WeatherStation]," +SimpleWeatherStationCommandReplyDataReader.ViewAliasName + ".[Timestamp]," +SimpleWeatherStationCommandReplyDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var weatherStationParameter = sqlCommandParameters.AddReference( "@weatherStation", weatherStation );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleWeatherStationCommandReplyDataReader = new SimpleWeatherStationCommandReplyDataReader( _loggerFactory, sqlDataReader );
                return simpleWeatherStationCommandReplyDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<WeatherStationCommandReplyObject> GetWeatherStationCommandReplyCollectionByWeatherStation( Guid weatherStation )
        {
            throw new NotImplementedException( );
        }
        public SimpleWeatherStationCommandReplyDataReader GetWeatherStationCommandReplyCollectionByWeatherStationAndTimestampDataReader( Guid weatherStation, DateTime timestamp )
        {
            const string sql = SimpleWeatherStationCommandReplyDataReader.BaseQuery + " WHERE " +
                    SimpleWeatherStationCommandReplyDataReader.ViewAliasName + ".[WeatherStation] = @weatherStation AND " +
                    SimpleWeatherStationCommandReplyDataReader.ViewAliasName + ".[Timestamp] = @timestamp " +
                    " ORDER BY " + SimpleWeatherStationCommandReplyDataReader.ViewAliasName + ".[WeatherStation]," +SimpleWeatherStationCommandReplyDataReader.ViewAliasName + ".[Timestamp]," +SimpleWeatherStationCommandReplyDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var weatherStationParameter = sqlCommandParameters.AddReference( "@weatherStation", weatherStation );
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@timestamp", timestamp );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleWeatherStationCommandReplyDataReader = new SimpleWeatherStationCommandReplyDataReader( _loggerFactory, sqlDataReader );
                return simpleWeatherStationCommandReplyDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<WeatherStationCommandReplyObject> GetWeatherStationCommandReplyCollectionByWeatherStationAndTimestamp( Guid weatherStation, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<WeatherStationCommandReplyObject> GetWeatherStationCommandReplyCollectionByWeatherStationAtTimestamp( Guid weatherStation, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<WeatherStationCommandReplyObject> GetWeatherStationCommandReplyCollectionByWeatherStationFromTimestamp( Guid weatherStation, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<WeatherStationCommandReplyObject> GetWeatherStationCommandReplyCollectionByWeatherStationUntilTimestamp( Guid weatherStation, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<WeatherStationCommandReplyObject> GetWeatherStationCommandReplyCollectionByWeatherStationOverTimestamp( Guid weatherStation, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException( );
        }
        public SimpleWeatherStationCommandReplyDataReader GetWeatherStationCommandReplyCollectionByTimestampDataReader( DateTime timestamp )
        {
            const string sql = SimpleWeatherStationCommandReplyDataReader.BaseQuery + " WHERE " +
                    SimpleWeatherStationCommandReplyDataReader.ViewAliasName + ".[Timestamp] = @timestamp " +
                    " ORDER BY " + SimpleWeatherStationCommandReplyDataReader.ViewAliasName + ".[Timestamp]," +SimpleWeatherStationCommandReplyDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@timestamp", timestamp );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleWeatherStationCommandReplyDataReader = new SimpleWeatherStationCommandReplyDataReader( _loggerFactory, sqlDataReader );
                return simpleWeatherStationCommandReplyDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<WeatherStationCommandReplyObject> GetWeatherStationCommandReplyCollectionByTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<WeatherStationCommandReplyObject> GetWeatherStationCommandReplyCollectionAtTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<WeatherStationCommandReplyObject> GetWeatherStationCommandReplyCollectionFromTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<WeatherStationCommandReplyObject> GetWeatherStationCommandReplyCollectionUntilTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<WeatherStationCommandReplyObject> GetWeatherStationCommandReplyCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException( );
        }
        public SimpleWeatherStationCommandReplyDataReader GetWeatherStationCommandReplyByCommandDataReader( Guid command )
        {
            const string sql = SimpleWeatherStationCommandReplyDataReader.BaseQuery + " WHERE " +
                    SimpleWeatherStationCommandReplyDataReader.ViewAliasName + ".[Command] = @command " +
                    " ORDER BY " + SimpleWeatherStationCommandReplyDataReader.ViewAliasName + ".[Command]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var commandParameter = sqlCommandParameters.AddReference( "@command", command );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleWeatherStationCommandReplyDataReader = new SimpleWeatherStationCommandReplyDataReader( _loggerFactory, sqlDataReader );
                return simpleWeatherStationCommandReplyDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public WeatherStationCommandReplyObject? GetWeatherStationCommandReplyByCommand( Guid command )
        {
            throw new NotImplementedException( );
        }
        // ---------------------------------------------------------------------
        // WeatherStationConfiguration queries
        // ---------------------------------------------------------------------
        public SimpleWeatherStationConfigurationDataReader GetWeatherStationConfigurationByIdDataReader( Guid id )
        {
            const string sql = SimpleWeatherStationConfigurationDataReader.BaseQuery + "WHERE " + SimpleWeatherStationConfigurationDataReader.ViewAliasName + ".[Id] = @id"; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                sqlCommandParameters.AddGuid( "@id", id );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleWeatherStationConfigurationDataReader = new SimpleWeatherStationConfigurationDataReader( _loggerFactory, sqlDataReader );
                return simpleWeatherStationConfigurationDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public WeatherStationConfigurationObject? GetWeatherStationConfigurationById( Guid id )
        {
            var simpleWeatherStationConfigurationDataReader = GetWeatherStationConfigurationByIdDataReader( id );
            using ( simpleWeatherStationConfigurationDataReader )
            {
                if ( simpleWeatherStationConfigurationDataReader.Read( ) )
                {
                    var result = simpleWeatherStationConfigurationDataReader.GetDataObject( );
                    return result;
                }
            }
            return null;
        }

        public void GetWeatherStationConfigurationById( Guid id, Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleWeatherStationConfigurationDataReader = GetWeatherStationConfigurationByIdDataReader( id );
                using ( simpleWeatherStationConfigurationDataReader )
                {
                    if ( simpleWeatherStationConfigurationDataReader.Read( ) )
                    {
                        destinationWriter.Write( true );
                        simpleWeatherStationConfigurationDataReader.WriteTo( destinationWriter );
                    }
                    else
                    {
                        destinationWriter.Write( false );
                    }
                }
            }
        }

        public SimpleWeatherStationConfigurationDataReader GetWeatherStationConfigurationCollectionDataReader( )
        {
            const string sql = SimpleWeatherStationConfigurationDataReader.BaseQuery; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleWeatherStationConfigurationDataReader = new SimpleWeatherStationConfigurationDataReader( _loggerFactory, sqlDataReader );
                return simpleWeatherStationConfigurationDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public IList<WeatherStationConfigurationObject> GetWeatherStationConfigurationCollection( )
        {
            var result = new List<WeatherStationConfigurationObject>( );
            var simpleWeatherStationConfigurationDataReader = GetWeatherStationConfigurationCollectionDataReader( );
            using ( simpleWeatherStationConfigurationDataReader )
            {
                while ( simpleWeatherStationConfigurationDataReader.Read( ) )
                {
                    var data = simpleWeatherStationConfigurationDataReader.GetDataObject( );
                    result.Add( data );
                }
            }
            return result;
        }

        public void GetWeatherStationConfigurationCollection( Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleWeatherStationConfigurationDataReader = GetWeatherStationConfigurationCollectionDataReader( );
                using ( simpleWeatherStationConfigurationDataReader )
                {
                    simpleWeatherStationConfigurationDataReader.WriteResultSetTo( destinationWriter );
                }
            }
        }

        public SimpleWeatherStationConfigurationDataReader GetWeatherStationConfigurationCollectionByWeatherStationDataReader( Guid weatherStation )
        {
            const string sql = SimpleWeatherStationConfigurationDataReader.BaseQuery + " WHERE " +
                    SimpleWeatherStationConfigurationDataReader.ViewAliasName + ".[WeatherStation] = @weatherStation " +
                    " ORDER BY " + SimpleWeatherStationConfigurationDataReader.ViewAliasName + ".[WeatherStation]," +SimpleWeatherStationConfigurationDataReader.ViewAliasName + ".[Timestamp]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var weatherStationParameter = sqlCommandParameters.AddReference( "@weatherStation", weatherStation );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleWeatherStationConfigurationDataReader = new SimpleWeatherStationConfigurationDataReader( _loggerFactory, sqlDataReader );
                return simpleWeatherStationConfigurationDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<WeatherStationConfigurationObject> GetWeatherStationConfigurationCollectionByWeatherStation( Guid weatherStation )
        {
            throw new NotImplementedException( );
        }
        public SimpleWeatherStationConfigurationDataReader GetWeatherStationConfigurationByWeatherStationAndTimestampDataReader( Guid weatherStation, DateTime timestamp )
        {
            const string sql = SimpleWeatherStationConfigurationDataReader.BaseQuery + " WHERE " +
                    SimpleWeatherStationConfigurationDataReader.ViewAliasName + ".[WeatherStation] = @weatherStation AND " +
                    SimpleWeatherStationConfigurationDataReader.ViewAliasName + ".[Timestamp] = @timestamp " +
                    " ORDER BY " + SimpleWeatherStationConfigurationDataReader.ViewAliasName + ".[WeatherStation]," +SimpleWeatherStationConfigurationDataReader.ViewAliasName + ".[Timestamp]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var weatherStationParameter = sqlCommandParameters.AddReference( "@weatherStation", weatherStation );
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@timestamp", timestamp );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleWeatherStationConfigurationDataReader = new SimpleWeatherStationConfigurationDataReader( _loggerFactory, sqlDataReader );
                return simpleWeatherStationConfigurationDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public WeatherStationConfigurationObject? GetWeatherStationConfigurationByWeatherStationAndTimestamp( Guid weatherStation, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public WeatherStationConfigurationObject? GetWeatherStationConfigurationByWeatherStationAtTimestamp( Guid weatherStation, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<WeatherStationConfigurationObject> GetWeatherStationConfigurationByWeatherStationFromTimestamp( Guid weatherStation, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<WeatherStationConfigurationObject> GetWeatherStationConfigurationByWeatherStationUntilTimestamp( Guid weatherStation, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<WeatherStationConfigurationObject> GetWeatherStationConfigurationByWeatherStationOverTimestamp( Guid weatherStation, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException( );
        }
        public SimpleWeatherStationConfigurationDataReader GetWeatherStationConfigurationCollectionByTimestampDataReader( DateTime timestamp )
        {
            const string sql = SimpleWeatherStationConfigurationDataReader.BaseQuery + " WHERE " +
                    SimpleWeatherStationConfigurationDataReader.ViewAliasName + ".[Timestamp] = @timestamp " +
                    " ORDER BY " + SimpleWeatherStationConfigurationDataReader.ViewAliasName + ".[Timestamp]," +SimpleWeatherStationConfigurationDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@timestamp", timestamp );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleWeatherStationConfigurationDataReader = new SimpleWeatherStationConfigurationDataReader( _loggerFactory, sqlDataReader );
                return simpleWeatherStationConfigurationDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<WeatherStationConfigurationObject> GetWeatherStationConfigurationCollectionByTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<WeatherStationConfigurationObject> GetWeatherStationConfigurationCollectionAtTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<WeatherStationConfigurationObject> GetWeatherStationConfigurationCollectionFromTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<WeatherStationConfigurationObject> GetWeatherStationConfigurationCollectionUntilTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<WeatherStationConfigurationObject> GetWeatherStationConfigurationCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException( );
        }
        // ---------------------------------------------------------------------
        // Zone queries
        // ---------------------------------------------------------------------
        public ComplexZoneDataReader GetZoneByIdDataReader( Guid id )
        {
            const string sql = ComplexZoneDataReader.BaseQuery + "WHERE " + ComplexZoneDataReader.ViewAliasName + ".[Id] = @id"; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                sqlCommandParameters.AddGuid( "@id", id );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var complexZoneDataReader = new ComplexZoneDataReader( _loggerFactory, sqlDataReader );
                return complexZoneDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public ZoneObject? GetZoneById( Guid id )
        {
            var complexZoneDataReader = GetZoneByIdDataReader( id );
            using ( complexZoneDataReader )
            {
                if ( complexZoneDataReader.Read( ) )
                {
                    var result = complexZoneDataReader.GetDataObject( );
                    return result;
                }
            }
            return null;
        }

        public void GetZoneById( Guid id, Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var complexZoneDataReader = GetZoneByIdDataReader( id );
                using ( complexZoneDataReader )
                {
                    if ( complexZoneDataReader.Read( ) )
                    {
                        destinationWriter.Write( true );
                        complexZoneDataReader.WriteTo( destinationWriter );
                    }
                    else
                    {
                        destinationWriter.Write( false );
                    }
                }
            }
        }

        public ComplexZoneDataReader GetZoneCollectionDataReader( )
        {
            const string sql = ComplexZoneDataReader.BaseQuery; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var complexZoneDataReader = new ComplexZoneDataReader( _loggerFactory, sqlDataReader );
                return complexZoneDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public IList<ZoneObject> GetZoneCollection( )
        {
            var result = new List<ZoneObject>( );
            var complexZoneDataReader = GetZoneCollectionDataReader( );
            using ( complexZoneDataReader )
            {
                while ( complexZoneDataReader.Read( ) )
                {
                    var data = complexZoneDataReader.GetDataObject( );
                    result.Add( data );
                }
            }
            return result;
        }

        public void GetZoneCollection( Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var complexZoneDataReader = GetZoneCollectionDataReader( );
                using ( complexZoneDataReader )
                {
                    complexZoneDataReader.WriteResultSetTo( destinationWriter );
                }
            }
        }

        public ComplexZoneDataReader GetZoneByNameDataReader( string name )
        {
            const string sql = ComplexZoneDataReader.BaseQuery + " WHERE " +
                    ComplexZoneDataReader.ViewAliasName + ".[Name] = @name " +
                    " ORDER BY " + ComplexZoneDataReader.ViewAliasName + ".[Name]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var nameParameter = sqlCommandParameters.AddNVarChar( "@name", name, 127 );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var complexZoneDataReader = new ComplexZoneDataReader( _loggerFactory, sqlDataReader );
                return complexZoneDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public ZoneObject? GetZoneByName( string name )
        {
            throw new NotImplementedException( );
        }
        // ---------------------------------------------------------------------
        // CircularZone queries
        // ---------------------------------------------------------------------
        public SimpleCircularZoneDataReader GetCircularZoneByIdDataReader( Guid id )
        {
            const string sql = SimpleCircularZoneDataReader.BaseQuery + "WHERE " + SimpleCircularZoneDataReader.ViewAliasName + ".[Id] = @id"; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                sqlCommandParameters.AddGuid( "@id", id );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleCircularZoneDataReader = new SimpleCircularZoneDataReader( _loggerFactory, sqlDataReader );
                return simpleCircularZoneDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public CircularZoneObject? GetCircularZoneById( Guid id )
        {
            var simpleCircularZoneDataReader = GetCircularZoneByIdDataReader( id );
            using ( simpleCircularZoneDataReader )
            {
                if ( simpleCircularZoneDataReader.Read( ) )
                {
                    var result = simpleCircularZoneDataReader.GetDataObject( );
                    return result;
                }
            }
            return null;
        }

        public void GetCircularZoneById( Guid id, Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleCircularZoneDataReader = GetCircularZoneByIdDataReader( id );
                using ( simpleCircularZoneDataReader )
                {
                    if ( simpleCircularZoneDataReader.Read( ) )
                    {
                        destinationWriter.Write( true );
                        simpleCircularZoneDataReader.WriteTo( destinationWriter );
                    }
                    else
                    {
                        destinationWriter.Write( false );
                    }
                }
            }
        }

        public SimpleCircularZoneDataReader GetCircularZoneCollectionDataReader( )
        {
            const string sql = SimpleCircularZoneDataReader.BaseQuery; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleCircularZoneDataReader = new SimpleCircularZoneDataReader( _loggerFactory, sqlDataReader );
                return simpleCircularZoneDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public IList<CircularZoneObject> GetCircularZoneCollection( )
        {
            var result = new List<CircularZoneObject>( );
            var simpleCircularZoneDataReader = GetCircularZoneCollectionDataReader( );
            using ( simpleCircularZoneDataReader )
            {
                while ( simpleCircularZoneDataReader.Read( ) )
                {
                    var data = simpleCircularZoneDataReader.GetDataObject( );
                    result.Add( data );
                }
            }
            return result;
        }

        public void GetCircularZoneCollection( Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleCircularZoneDataReader = GetCircularZoneCollectionDataReader( );
                using ( simpleCircularZoneDataReader )
                {
                    simpleCircularZoneDataReader.WriteResultSetTo( destinationWriter );
                }
            }
        }

        public SimpleCircularZoneDataReader GetCircularZoneByNameDataReader( string name )
        {
            const string sql = SimpleCircularZoneDataReader.BaseQuery + " WHERE " +
                    SimpleCircularZoneDataReader.ViewAliasName + ".[Name] = @name " +
                    " ORDER BY " + SimpleCircularZoneDataReader.ViewAliasName + ".[Name]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var nameParameter = sqlCommandParameters.AddNVarChar( "@name", name, 127 );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleCircularZoneDataReader = new SimpleCircularZoneDataReader( _loggerFactory, sqlDataReader );
                return simpleCircularZoneDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public CircularZoneObject? GetCircularZoneByName( string name )
        {
            throw new NotImplementedException( );
        }
        // ---------------------------------------------------------------------
        // PolygonZone queries
        // ---------------------------------------------------------------------
        public SimplePolygonZoneDataReader GetPolygonZoneByIdDataReader( Guid id )
        {
            const string sql = SimplePolygonZoneDataReader.BaseQuery + "WHERE " + SimplePolygonZoneDataReader.ViewAliasName + ".[Id] = @id"; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                sqlCommandParameters.AddGuid( "@id", id );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simplePolygonZoneDataReader = new SimplePolygonZoneDataReader( _loggerFactory, sqlDataReader );
                return simplePolygonZoneDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public PolygonZoneObject? GetPolygonZoneById( Guid id )
        {
            var simplePolygonZoneDataReader = GetPolygonZoneByIdDataReader( id );
            using ( simplePolygonZoneDataReader )
            {
                if ( simplePolygonZoneDataReader.Read( ) )
                {
                    var result = simplePolygonZoneDataReader.GetDataObject( );
                    return result;
                }
            }
            return null;
        }

        public void GetPolygonZoneById( Guid id, Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simplePolygonZoneDataReader = GetPolygonZoneByIdDataReader( id );
                using ( simplePolygonZoneDataReader )
                {
                    if ( simplePolygonZoneDataReader.Read( ) )
                    {
                        destinationWriter.Write( true );
                        simplePolygonZoneDataReader.WriteTo( destinationWriter );
                    }
                    else
                    {
                        destinationWriter.Write( false );
                    }
                }
            }
        }

        public SimplePolygonZoneDataReader GetPolygonZoneCollectionDataReader( )
        {
            const string sql = SimplePolygonZoneDataReader.BaseQuery; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simplePolygonZoneDataReader = new SimplePolygonZoneDataReader( _loggerFactory, sqlDataReader );
                return simplePolygonZoneDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public IList<PolygonZoneObject> GetPolygonZoneCollection( )
        {
            var result = new List<PolygonZoneObject>( );
            var simplePolygonZoneDataReader = GetPolygonZoneCollectionDataReader( );
            using ( simplePolygonZoneDataReader )
            {
                while ( simplePolygonZoneDataReader.Read( ) )
                {
                    var data = simplePolygonZoneDataReader.GetDataObject( );
                    result.Add( data );
                }
            }
            return result;
        }

        public void GetPolygonZoneCollection( Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simplePolygonZoneDataReader = GetPolygonZoneCollectionDataReader( );
                using ( simplePolygonZoneDataReader )
                {
                    simplePolygonZoneDataReader.WriteResultSetTo( destinationWriter );
                }
            }
        }

        public SimplePolygonZoneDataReader GetPolygonZoneByNameDataReader( string name )
        {
            const string sql = SimplePolygonZoneDataReader.BaseQuery + " WHERE " +
                    SimplePolygonZoneDataReader.ViewAliasName + ".[Name] = @name " +
                    " ORDER BY " + SimplePolygonZoneDataReader.ViewAliasName + ".[Name]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var nameParameter = sqlCommandParameters.AddNVarChar( "@name", name, 127 );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simplePolygonZoneDataReader = new SimplePolygonZoneDataReader( _loggerFactory, sqlDataReader );
                return simplePolygonZoneDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public PolygonZoneObject? GetPolygonZoneByName( string name )
        {
            throw new NotImplementedException( );
        }
        // ---------------------------------------------------------------------
        // ZoneExceptions queries
        // ---------------------------------------------------------------------
        public SimpleZoneExceptionsDataReader GetZoneExceptionsByIdDataReader( Guid id )
        {
            const string sql = SimpleZoneExceptionsDataReader.BaseQuery + "WHERE " + SimpleZoneExceptionsDataReader.ViewAliasName + ".[Id] = @id"; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                sqlCommandParameters.AddGuid( "@id", id );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleZoneExceptionsDataReader = new SimpleZoneExceptionsDataReader( _loggerFactory, sqlDataReader );
                return simpleZoneExceptionsDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public ZoneExceptionsObject? GetZoneExceptionsById( Guid id )
        {
            var simpleZoneExceptionsDataReader = GetZoneExceptionsByIdDataReader( id );
            using ( simpleZoneExceptionsDataReader )
            {
                if ( simpleZoneExceptionsDataReader.Read( ) )
                {
                    var result = simpleZoneExceptionsDataReader.GetDataObject( );
                    return result;
                }
            }
            return null;
        }

        public void GetZoneExceptionsById( Guid id, Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleZoneExceptionsDataReader = GetZoneExceptionsByIdDataReader( id );
                using ( simpleZoneExceptionsDataReader )
                {
                    if ( simpleZoneExceptionsDataReader.Read( ) )
                    {
                        destinationWriter.Write( true );
                        simpleZoneExceptionsDataReader.WriteTo( destinationWriter );
                    }
                    else
                    {
                        destinationWriter.Write( false );
                    }
                }
            }
        }

        public SimpleZoneExceptionsDataReader GetZoneExceptionsCollectionDataReader( )
        {
            const string sql = SimpleZoneExceptionsDataReader.BaseQuery; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleZoneExceptionsDataReader = new SimpleZoneExceptionsDataReader( _loggerFactory, sqlDataReader );
                return simpleZoneExceptionsDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public IList<ZoneExceptionsObject> GetZoneExceptionsCollection( )
        {
            var result = new List<ZoneExceptionsObject>( );
            var simpleZoneExceptionsDataReader = GetZoneExceptionsCollectionDataReader( );
            using ( simpleZoneExceptionsDataReader )
            {
                while ( simpleZoneExceptionsDataReader.Read( ) )
                {
                    var data = simpleZoneExceptionsDataReader.GetDataObject( );
                    result.Add( data );
                }
            }
            return result;
        }

        public void GetZoneExceptionsCollection( Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleZoneExceptionsDataReader = GetZoneExceptionsCollectionDataReader( );
                using ( simpleZoneExceptionsDataReader )
                {
                    simpleZoneExceptionsDataReader.WriteResultSetTo( destinationWriter );
                }
            }
        }

        public SimpleZoneExceptionsDataReader GetZoneExceptionsCollectionByZoneDataReader( Guid zone )
        {
            const string sql = SimpleZoneExceptionsDataReader.BaseQuery + " WHERE " +
                    SimpleZoneExceptionsDataReader.ViewAliasName + ".[Zone] = @zone " +
                    " ORDER BY " + SimpleZoneExceptionsDataReader.ViewAliasName + ".[Zone]," +SimpleZoneExceptionsDataReader.ViewAliasName + ".[Timestamp]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var zoneParameter = sqlCommandParameters.AddReference( "@zone", zone );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleZoneExceptionsDataReader = new SimpleZoneExceptionsDataReader( _loggerFactory, sqlDataReader );
                return simpleZoneExceptionsDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<ZoneExceptionsObject> GetZoneExceptionsCollectionByZone( Guid zone )
        {
            throw new NotImplementedException( );
        }
        public SimpleZoneExceptionsDataReader GetZoneExceptionsByZoneAndTimestampDataReader( Guid zone, DateTime timestamp )
        {
            const string sql = SimpleZoneExceptionsDataReader.BaseQuery + " WHERE " +
                    SimpleZoneExceptionsDataReader.ViewAliasName + ".[Zone] = @zone AND " +
                    SimpleZoneExceptionsDataReader.ViewAliasName + ".[Timestamp] = @timestamp " +
                    " ORDER BY " + SimpleZoneExceptionsDataReader.ViewAliasName + ".[Zone]," +SimpleZoneExceptionsDataReader.ViewAliasName + ".[Timestamp]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var zoneParameter = sqlCommandParameters.AddReference( "@zone", zone );
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@timestamp", timestamp );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleZoneExceptionsDataReader = new SimpleZoneExceptionsDataReader( _loggerFactory, sqlDataReader );
                return simpleZoneExceptionsDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public ZoneExceptionsObject? GetZoneExceptionsByZoneAndTimestamp( Guid zone, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public ZoneExceptionsObject? GetZoneExceptionsByZoneAtTimestamp( Guid zone, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<ZoneExceptionsObject> GetZoneExceptionsByZoneFromTimestamp( Guid zone, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<ZoneExceptionsObject> GetZoneExceptionsByZoneUntilTimestamp( Guid zone, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<ZoneExceptionsObject> GetZoneExceptionsByZoneOverTimestamp( Guid zone, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException( );
        }
        public SimpleZoneExceptionsDataReader GetZoneExceptionsCollectionByTimestampDataReader( DateTime timestamp )
        {
            const string sql = SimpleZoneExceptionsDataReader.BaseQuery + " WHERE " +
                    SimpleZoneExceptionsDataReader.ViewAliasName + ".[Timestamp] = @timestamp " +
                    " ORDER BY " + SimpleZoneExceptionsDataReader.ViewAliasName + ".[Timestamp]," +SimpleZoneExceptionsDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@timestamp", timestamp );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleZoneExceptionsDataReader = new SimpleZoneExceptionsDataReader( _loggerFactory, sqlDataReader );
                return simpleZoneExceptionsDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<ZoneExceptionsObject> GetZoneExceptionsCollectionByTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<ZoneExceptionsObject> GetZoneExceptionsCollectionAtTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<ZoneExceptionsObject> GetZoneExceptionsCollectionFromTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<ZoneExceptionsObject> GetZoneExceptionsCollectionUntilTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<ZoneExceptionsObject> GetZoneExceptionsCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException( );
        }
        // ---------------------------------------------------------------------
        // ZoneExceptionsVesselLink queries
        // ---------------------------------------------------------------------
        public SimpleZoneExceptionsVesselLinkDataReader GetZoneExceptionsVesselLinkByIdDataReader( Guid id )
        {
            const string sql = SimpleZoneExceptionsVesselLinkDataReader.BaseQuery + "WHERE " + SimpleZoneExceptionsVesselLinkDataReader.ViewAliasName + ".[Id] = @id"; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                sqlCommandParameters.AddGuid( "@id", id );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleZoneExceptionsVesselLinkDataReader = new SimpleZoneExceptionsVesselLinkDataReader( _loggerFactory, sqlDataReader );
                return simpleZoneExceptionsVesselLinkDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public ZoneExceptionsVesselLinkObject? GetZoneExceptionsVesselLinkById( Guid id )
        {
            var simpleZoneExceptionsVesselLinkDataReader = GetZoneExceptionsVesselLinkByIdDataReader( id );
            using ( simpleZoneExceptionsVesselLinkDataReader )
            {
                if ( simpleZoneExceptionsVesselLinkDataReader.Read( ) )
                {
                    var result = simpleZoneExceptionsVesselLinkDataReader.GetDataObject( );
                    return result;
                }
            }
            return null;
        }

        public void GetZoneExceptionsVesselLinkById( Guid id, Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleZoneExceptionsVesselLinkDataReader = GetZoneExceptionsVesselLinkByIdDataReader( id );
                using ( simpleZoneExceptionsVesselLinkDataReader )
                {
                    if ( simpleZoneExceptionsVesselLinkDataReader.Read( ) )
                    {
                        destinationWriter.Write( true );
                        simpleZoneExceptionsVesselLinkDataReader.WriteTo( destinationWriter );
                    }
                    else
                    {
                        destinationWriter.Write( false );
                    }
                }
            }
        }

        public SimpleZoneExceptionsVesselLinkDataReader GetZoneExceptionsVesselLinkCollectionDataReader( )
        {
            const string sql = SimpleZoneExceptionsVesselLinkDataReader.BaseQuery; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleZoneExceptionsVesselLinkDataReader = new SimpleZoneExceptionsVesselLinkDataReader( _loggerFactory, sqlDataReader );
                return simpleZoneExceptionsVesselLinkDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public IList<ZoneExceptionsVesselLinkObject> GetZoneExceptionsVesselLinkCollection( )
        {
            var result = new List<ZoneExceptionsVesselLinkObject>( );
            var simpleZoneExceptionsVesselLinkDataReader = GetZoneExceptionsVesselLinkCollectionDataReader( );
            using ( simpleZoneExceptionsVesselLinkDataReader )
            {
                while ( simpleZoneExceptionsVesselLinkDataReader.Read( ) )
                {
                    var data = simpleZoneExceptionsVesselLinkDataReader.GetDataObject( );
                    result.Add( data );
                }
            }
            return result;
        }

        public void GetZoneExceptionsVesselLinkCollection( Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleZoneExceptionsVesselLinkDataReader = GetZoneExceptionsVesselLinkCollectionDataReader( );
                using ( simpleZoneExceptionsVesselLinkDataReader )
                {
                    simpleZoneExceptionsVesselLinkDataReader.WriteResultSetTo( destinationWriter );
                }
            }
        }

        public SimpleZoneExceptionsVesselLinkDataReader GetZoneExceptionsVesselLinkCollectionByZoneExceptionsDataReader( Guid zoneExceptions )
        {
            const string sql = SimpleZoneExceptionsVesselLinkDataReader.BaseQuery + " WHERE " +
                    SimpleZoneExceptionsVesselLinkDataReader.ViewAliasName + ".[ZoneExceptions] = @zoneExceptions " +
                    " ORDER BY " + SimpleZoneExceptionsVesselLinkDataReader.ViewAliasName + ".[ZoneExceptions]," +SimpleZoneExceptionsVesselLinkDataReader.ViewAliasName + ".[Vessel]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var zoneExceptionsParameter = sqlCommandParameters.AddReference( "@zoneExceptions", zoneExceptions );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleZoneExceptionsVesselLinkDataReader = new SimpleZoneExceptionsVesselLinkDataReader( _loggerFactory, sqlDataReader );
                return simpleZoneExceptionsVesselLinkDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<ZoneExceptionsVesselLinkObject> GetZoneExceptionsVesselLinkCollectionByZoneExceptions( Guid zoneExceptions )
        {
            throw new NotImplementedException( );
        }
        public SimpleZoneExceptionsVesselLinkDataReader GetZoneExceptionsVesselLinkByZoneExceptionsAndVesselDataReader( Guid zoneExceptions, Guid vessel )
        {
            const string sql = SimpleZoneExceptionsVesselLinkDataReader.BaseQuery + " WHERE " +
                    SimpleZoneExceptionsVesselLinkDataReader.ViewAliasName + ".[ZoneExceptions] = @zoneExceptions AND " +
                    SimpleZoneExceptionsVesselLinkDataReader.ViewAliasName + ".[Vessel] = @vessel " +
                    " ORDER BY " + SimpleZoneExceptionsVesselLinkDataReader.ViewAliasName + ".[ZoneExceptions]," +SimpleZoneExceptionsVesselLinkDataReader.ViewAliasName + ".[Vessel]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var zoneExceptionsParameter = sqlCommandParameters.AddReference( "@zoneExceptions", zoneExceptions );
                var vesselParameter = sqlCommandParameters.AddReference( "@vessel", vessel );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleZoneExceptionsVesselLinkDataReader = new SimpleZoneExceptionsVesselLinkDataReader( _loggerFactory, sqlDataReader );
                return simpleZoneExceptionsVesselLinkDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public ZoneExceptionsVesselLinkObject? GetZoneExceptionsVesselLinkByZoneExceptionsAndVessel( Guid zoneExceptions, Guid vessel )
        {
            throw new NotImplementedException( );
        }
        public SimpleZoneExceptionsVesselLinkDataReader GetZoneExceptionsVesselLinkCollectionByVesselDataReader( Guid vessel )
        {
            const string sql = SimpleZoneExceptionsVesselLinkDataReader.BaseQuery + " WHERE " +
                    SimpleZoneExceptionsVesselLinkDataReader.ViewAliasName + ".[Vessel] = @vessel " +
                    " ORDER BY " + SimpleZoneExceptionsVesselLinkDataReader.ViewAliasName + ".[Vessel]," +SimpleZoneExceptionsVesselLinkDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var vesselParameter = sqlCommandParameters.AddReference( "@vessel", vessel );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleZoneExceptionsVesselLinkDataReader = new SimpleZoneExceptionsVesselLinkDataReader( _loggerFactory, sqlDataReader );
                return simpleZoneExceptionsVesselLinkDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<ZoneExceptionsVesselLinkObject> GetZoneExceptionsVesselLinkCollectionByVessel( Guid vessel )
        {
            throw new NotImplementedException( );
        }
        // ---------------------------------------------------------------------
        // ZoneTrackAlarm queries
        // ---------------------------------------------------------------------
        public SimpleZoneTrackAlarmDataReader GetZoneTrackAlarmByIdDataReader( Guid id )
        {
            const string sql = SimpleZoneTrackAlarmDataReader.BaseQuery + "WHERE " + SimpleZoneTrackAlarmDataReader.ViewAliasName + ".[Id] = @id"; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                sqlCommandParameters.AddGuid( "@id", id );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleZoneTrackAlarmDataReader = new SimpleZoneTrackAlarmDataReader( _loggerFactory, sqlDataReader );
                return simpleZoneTrackAlarmDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public ZoneTrackAlarmObject? GetZoneTrackAlarmById( Guid id )
        {
            var simpleZoneTrackAlarmDataReader = GetZoneTrackAlarmByIdDataReader( id );
            using ( simpleZoneTrackAlarmDataReader )
            {
                if ( simpleZoneTrackAlarmDataReader.Read( ) )
                {
                    var result = simpleZoneTrackAlarmDataReader.GetDataObject( );
                    return result;
                }
            }
            return null;
        }

        public void GetZoneTrackAlarmById( Guid id, Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleZoneTrackAlarmDataReader = GetZoneTrackAlarmByIdDataReader( id );
                using ( simpleZoneTrackAlarmDataReader )
                {
                    if ( simpleZoneTrackAlarmDataReader.Read( ) )
                    {
                        destinationWriter.Write( true );
                        simpleZoneTrackAlarmDataReader.WriteTo( destinationWriter );
                    }
                    else
                    {
                        destinationWriter.Write( false );
                    }
                }
            }
        }

        public SimpleZoneTrackAlarmDataReader GetZoneTrackAlarmCollectionDataReader( )
        {
            const string sql = SimpleZoneTrackAlarmDataReader.BaseQuery; 
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleZoneTrackAlarmDataReader = new SimpleZoneTrackAlarmDataReader( _loggerFactory, sqlDataReader );
                return simpleZoneTrackAlarmDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }

        public IList<ZoneTrackAlarmObject> GetZoneTrackAlarmCollection( )
        {
            var result = new List<ZoneTrackAlarmObject>( );
            var simpleZoneTrackAlarmDataReader = GetZoneTrackAlarmCollectionDataReader( );
            using ( simpleZoneTrackAlarmDataReader )
            {
                while ( simpleZoneTrackAlarmDataReader.Read( ) )
                {
                    var data = simpleZoneTrackAlarmDataReader.GetDataObject( );
                    result.Add( data );
                }
            }
            return result;
        }

        public void GetZoneTrackAlarmCollection( Stream destinationStream )
        {
            var destinationWriter = new BinaryWriter( destinationStream, Encoding.Unicode );
            using( destinationWriter )
            {
                var simpleZoneTrackAlarmDataReader = GetZoneTrackAlarmCollectionDataReader( );
                using ( simpleZoneTrackAlarmDataReader )
                {
                    simpleZoneTrackAlarmDataReader.WriteResultSetTo( destinationWriter );
                }
            }
        }

        public SimpleZoneTrackAlarmDataReader GetZoneTrackAlarmCollectionByTrackDataReader( Guid track )
        {
            const string sql = SimpleZoneTrackAlarmDataReader.BaseQuery + " WHERE " +
                    SimpleZoneTrackAlarmDataReader.ViewAliasName + ".[Track] = @track " +
                    " ORDER BY " + SimpleZoneTrackAlarmDataReader.ViewAliasName + ".[Track]," +SimpleZoneTrackAlarmDataReader.ViewAliasName + ".[Timestamp]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var trackParameter = sqlCommandParameters.AddReference( "@track", track );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleZoneTrackAlarmDataReader = new SimpleZoneTrackAlarmDataReader( _loggerFactory, sqlDataReader );
                return simpleZoneTrackAlarmDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<ZoneTrackAlarmObject> GetZoneTrackAlarmCollectionByTrack( Guid track )
        {
            throw new NotImplementedException( );
        }
        public SimpleZoneTrackAlarmDataReader GetZoneTrackAlarmByTrackAndTimestampDataReader( Guid track, DateTime timestamp )
        {
            const string sql = SimpleZoneTrackAlarmDataReader.BaseQuery + " WHERE " +
                    SimpleZoneTrackAlarmDataReader.ViewAliasName + ".[Track] = @track AND " +
                    SimpleZoneTrackAlarmDataReader.ViewAliasName + ".[Timestamp] = @timestamp " +
                    " ORDER BY " + SimpleZoneTrackAlarmDataReader.ViewAliasName + ".[Track]," +SimpleZoneTrackAlarmDataReader.ViewAliasName + ".[Timestamp]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var trackParameter = sqlCommandParameters.AddReference( "@track", track );
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@timestamp", timestamp );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleZoneTrackAlarmDataReader = new SimpleZoneTrackAlarmDataReader( _loggerFactory, sqlDataReader );
                return simpleZoneTrackAlarmDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public ZoneTrackAlarmObject? GetZoneTrackAlarmByTrackAndTimestamp( Guid track, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public ZoneTrackAlarmObject? GetZoneTrackAlarmByTrackAtTimestamp( Guid track, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<ZoneTrackAlarmObject> GetZoneTrackAlarmByTrackFromTimestamp( Guid track, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<ZoneTrackAlarmObject> GetZoneTrackAlarmByTrackUntilTimestamp( Guid track, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<ZoneTrackAlarmObject> GetZoneTrackAlarmByTrackOverTimestamp( Guid track, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException( );
        }
        public SimpleZoneTrackAlarmDataReader GetZoneTrackAlarmCollectionByZoneDataReader( Guid zone )
        {
            const string sql = SimpleZoneTrackAlarmDataReader.BaseQuery + " WHERE " +
                    SimpleZoneTrackAlarmDataReader.ViewAliasName + ".[Zone] = @zone " +
                    " ORDER BY " + SimpleZoneTrackAlarmDataReader.ViewAliasName + ".[Zone]," +SimpleZoneTrackAlarmDataReader.ViewAliasName + ".[Track]," +SimpleZoneTrackAlarmDataReader.ViewAliasName + ".[Timestamp]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var zoneParameter = sqlCommandParameters.AddReference( "@zone", zone );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleZoneTrackAlarmDataReader = new SimpleZoneTrackAlarmDataReader( _loggerFactory, sqlDataReader );
                return simpleZoneTrackAlarmDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<ZoneTrackAlarmObject> GetZoneTrackAlarmCollectionByZone( Guid zone )
        {
            throw new NotImplementedException( );
        }
        public SimpleZoneTrackAlarmDataReader GetZoneTrackAlarmCollectionByZoneAndTrackDataReader( Guid zone, Guid track )
        {
            const string sql = SimpleZoneTrackAlarmDataReader.BaseQuery + " WHERE " +
                    SimpleZoneTrackAlarmDataReader.ViewAliasName + ".[Zone] = @zone AND " +
                    SimpleZoneTrackAlarmDataReader.ViewAliasName + ".[Track] = @track " +
                    " ORDER BY " + SimpleZoneTrackAlarmDataReader.ViewAliasName + ".[Zone]," +SimpleZoneTrackAlarmDataReader.ViewAliasName + ".[Track]," +SimpleZoneTrackAlarmDataReader.ViewAliasName + ".[Timestamp]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var zoneParameter = sqlCommandParameters.AddReference( "@zone", zone );
                var trackParameter = sqlCommandParameters.AddReference( "@track", track );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleZoneTrackAlarmDataReader = new SimpleZoneTrackAlarmDataReader( _loggerFactory, sqlDataReader );
                return simpleZoneTrackAlarmDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<ZoneTrackAlarmObject> GetZoneTrackAlarmCollectionByZoneAndTrack( Guid zone, Guid track )
        {
            throw new NotImplementedException( );
        }
        public SimpleZoneTrackAlarmDataReader GetZoneTrackAlarmByZoneTrackAndTimestampDataReader( Guid zone, Guid track, DateTime timestamp )
        {
            const string sql = SimpleZoneTrackAlarmDataReader.BaseQuery + " WHERE " +
                    SimpleZoneTrackAlarmDataReader.ViewAliasName + ".[Zone] = @zone AND " +
                    SimpleZoneTrackAlarmDataReader.ViewAliasName + ".[Track] = @track AND " +
                    SimpleZoneTrackAlarmDataReader.ViewAliasName + ".[Timestamp] = @timestamp " +
                    " ORDER BY " + SimpleZoneTrackAlarmDataReader.ViewAliasName + ".[Zone]," +SimpleZoneTrackAlarmDataReader.ViewAliasName + ".[Track]," +SimpleZoneTrackAlarmDataReader.ViewAliasName + ".[Timestamp]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var zoneParameter = sqlCommandParameters.AddReference( "@zone", zone );
                var trackParameter = sqlCommandParameters.AddReference( "@track", track );
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@timestamp", timestamp );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleRow );
                var simpleZoneTrackAlarmDataReader = new SimpleZoneTrackAlarmDataReader( _loggerFactory, sqlDataReader );
                return simpleZoneTrackAlarmDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public ZoneTrackAlarmObject? GetZoneTrackAlarmByZoneTrackAndTimestamp( Guid zone, Guid track, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public ZoneTrackAlarmObject? GetZoneTrackAlarmByZoneTrackAtTimestamp( Guid zone, Guid track, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<ZoneTrackAlarmObject> GetZoneTrackAlarmByZoneTrackFromTimestamp( Guid zone, Guid track, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<ZoneTrackAlarmObject> GetZoneTrackAlarmByZoneTrackUntilTimestamp( Guid zone, Guid track, DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<ZoneTrackAlarmObject> GetZoneTrackAlarmByZoneTrackOverTimestamp( Guid zone, Guid track, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException( );
        }
        public SimpleZoneTrackAlarmDataReader GetZoneTrackAlarmCollectionByTimestampDataReader( DateTime timestamp )
        {
            const string sql = SimpleZoneTrackAlarmDataReader.BaseQuery + " WHERE " +
                    SimpleZoneTrackAlarmDataReader.ViewAliasName + ".[Timestamp] = @timestamp " +
                    " ORDER BY " + SimpleZoneTrackAlarmDataReader.ViewAliasName + ".[Timestamp]," +SimpleZoneTrackAlarmDataReader.ViewAliasName + ".[Id]";
            try
            {
                var sqlConnection = GetSqlConnection( );
                var sqlCommand = sqlConnection.CreateCommand( );
                sqlCommand.CommandText = sql;
                var sqlCommandParameters = sqlCommand.Parameters;
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@timestamp", timestamp );
                var sqlDataReader = sqlCommand.ExecuteReader( System.Data.CommandBehavior.SingleResult );
                var simpleZoneTrackAlarmDataReader = new SimpleZoneTrackAlarmDataReader( _loggerFactory, sqlDataReader );
                return simpleZoneTrackAlarmDataReader;
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
        }
        public IList<ZoneTrackAlarmObject> GetZoneTrackAlarmCollectionByTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<ZoneTrackAlarmObject> GetZoneTrackAlarmCollectionAtTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<ZoneTrackAlarmObject> GetZoneTrackAlarmCollectionFromTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<ZoneTrackAlarmObject> GetZoneTrackAlarmCollectionUntilTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException( );
        }
        public IList<ZoneTrackAlarmObject> GetZoneTrackAlarmCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException( );
        }
    }
}
