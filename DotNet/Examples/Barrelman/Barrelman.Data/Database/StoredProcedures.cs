using System;
using System.Diagnostics.CodeAnalysis;
using System.IO;
using System.Runtime.CompilerServices;

using Microsoft.Data.SqlClient;
using Microsoft.Extensions.Logging;

using Harlinn.Common.Core.Net;
using Harlinn.Common.Core.Net.Data;
using Harlinn.Common.Core.Net.Data.SqlClient;
using Harlinn.Common.Core.Net.IO;

using Barrelman.Data.Types;

namespace Barrelman.Data.Database
{
    public partial class StoredProcedures
    {
        private ILogger _logger;
        SqlConnection _connection;

        public StoredProcedures( [ DisallowNull ] ILoggerFactory loggerFactory, [ DisallowNull ] SqlConnection connection )
        {
            _logger = loggerFactory.CreateLogger<StoredProcedures>( );
            _connection = connection;
        }

        protected void LogException( [ DisallowNull ] Exception exc, [ CallerMemberName ] string methodName = "" )
        {
            string exceptionMessageText = exc.Message;
            string messageText = string.Format( "Exception in {0} - {1}", methodName, exceptionMessageText );

            _logger.LogError( exc, messageText );
#if DEBUG
            if ( System.Diagnostics.Debugger.IsAttached )
            {
                System.Diagnostics.Debugger.Log( 1, "Exception", messageText );
                System.Diagnostics.Debugger.Break( );
            }
#endif
        }

        public bool InsertAircraftType( ref Guid id, string name )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "AircraftTypeInsert";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id, System.Data.ParameterDirection.InputOutput );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@Name", name, 127 );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    id = (Guid)idParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool UpdateAircraftType( Guid id, ref long rowVersion, string name )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "AircraftTypeUpdate";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion, System.Data.ParameterDirection.InputOutput );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@Name", name, 127 );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    rowVersion = (long)rowVersionParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool DeleteAircraftType( Guid id, long rowVersion )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "AircraftTypeDelete";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool InsertAisDeviceCommand( ref Guid id, Guid aisDevice, DateTime timestamp, Types.DeviceCommandSourceType deviceCommandSourceType, Guid deviceCommandSourceId, Guid? reply )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "AisDeviceCommandInsert";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id, System.Data.ParameterDirection.InputOutput );
                var aisDeviceParameter = sqlCommandParameters.AddReference( "@AisDevice", aisDevice );
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@Timestamp", timestamp );
                var deviceCommandSourceTypeParameter = sqlCommandParameters.AddEnum( "@DeviceCommandSourceType", deviceCommandSourceType );
                var deviceCommandSourceIdParameter = sqlCommandParameters.AddGuid( "@DeviceCommandSourceId", deviceCommandSourceId );
                var replyParameter = sqlCommandParameters.AddReference( "@Reply", reply );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    id = (Guid)idParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool UpdateAisDeviceCommand( Guid id, ref long rowVersion, Guid aisDevice, DateTime timestamp, Types.DeviceCommandSourceType deviceCommandSourceType, Guid deviceCommandSourceId, Guid? reply )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "AisDeviceCommandUpdate";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion, System.Data.ParameterDirection.InputOutput );
                var aisDeviceParameter = sqlCommandParameters.AddReference( "@AisDevice", aisDevice );
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@Timestamp", timestamp );
                var deviceCommandSourceTypeParameter = sqlCommandParameters.AddEnum( "@DeviceCommandSourceType", deviceCommandSourceType );
                var deviceCommandSourceIdParameter = sqlCommandParameters.AddGuid( "@DeviceCommandSourceId", deviceCommandSourceId );
                var replyParameter = sqlCommandParameters.AddReference( "@Reply", reply );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    rowVersion = (long)rowVersionParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool DeleteAisDeviceCommand( Guid id, long rowVersion )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "AisDeviceCommandDelete";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool InsertAisDeviceCommandReply( ref Guid id, Guid aisDevice, DateTime timestamp, Guid command, Types.DeviceCommandReplyStatus status, string message )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "AisDeviceCommandReplyInsert";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id, System.Data.ParameterDirection.InputOutput );
                var aisDeviceParameter = sqlCommandParameters.AddReference( "@AisDevice", aisDevice );
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@Timestamp", timestamp );
                var commandParameter = sqlCommandParameters.AddReference( "@Command", command );
                var statusParameter = sqlCommandParameters.AddEnum( "@Status", status );
                var messageParameter = sqlCommandParameters.AddNVarChar( "@Message", message, 0 );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    id = (Guid)idParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool UpdateAisDeviceCommandReply( Guid id, ref long rowVersion, Guid aisDevice, DateTime timestamp, Guid command, Types.DeviceCommandReplyStatus status, string message )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "AisDeviceCommandReplyUpdate";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion, System.Data.ParameterDirection.InputOutput );
                var aisDeviceParameter = sqlCommandParameters.AddReference( "@AisDevice", aisDevice );
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@Timestamp", timestamp );
                var commandParameter = sqlCommandParameters.AddReference( "@Command", command );
                var statusParameter = sqlCommandParameters.AddEnum( "@Status", status );
                var messageParameter = sqlCommandParameters.AddNVarChar( "@Message", message, 0 );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    rowVersion = (long)rowVersionParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool DeleteAisDeviceCommandReply( Guid id, long rowVersion )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "AisDeviceCommandReplyDelete";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool InsertAisDeviceConfiguration( ref Guid id, Guid aisDevice, DateTime timestamp, bool filter, double northWestLatitude, double northWestLongitude, double southEastLatitude, double southEastLongitude, string comPort, int baudRate, string iPAddress, int port, int udpPort, bool authenticate, string userName, string password, string authenticationURL, Types.AisDeviceConnectionType connectionType, int sourceUpdateRate, string configurationURL, bool storeReceivedSentences )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "AisDeviceConfigurationInsert";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id, System.Data.ParameterDirection.InputOutput );
                var aisDeviceParameter = sqlCommandParameters.AddReference( "@AisDevice", aisDevice );
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@Timestamp", timestamp );
                var filterParameter = sqlCommandParameters.AddBoolean( "@Filter", filter );
                var northWestLatitudeParameter = sqlCommandParameters.AddDouble( "@NorthWestLatitude", northWestLatitude );
                var northWestLongitudeParameter = sqlCommandParameters.AddDouble( "@NorthWestLongitude", northWestLongitude );
                var southEastLatitudeParameter = sqlCommandParameters.AddDouble( "@SouthEastLatitude", southEastLatitude );
                var southEastLongitudeParameter = sqlCommandParameters.AddDouble( "@SouthEastLongitude", southEastLongitude );
                var comPortParameter = sqlCommandParameters.AddNVarChar( "@ComPort", comPort, 32 );
                var baudRateParameter = sqlCommandParameters.AddInt32( "@BaudRate", baudRate );
                var iPAddressParameter = sqlCommandParameters.AddNVarChar( "@IPAddress", iPAddress, 127 );
                var portParameter = sqlCommandParameters.AddInt32( "@Port", port );
                var udpPortParameter = sqlCommandParameters.AddInt32( "@UdpPort", udpPort );
                var authenticateParameter = sqlCommandParameters.AddBoolean( "@Authenticate", authenticate );
                var userNameParameter = sqlCommandParameters.AddNVarChar( "@UserName", userName, 127 );
                var passwordParameter = sqlCommandParameters.AddNVarChar( "@Password", password, 127 );
                var authenticationURLParameter = sqlCommandParameters.AddNVarChar( "@AuthenticationURL", authenticationURL, 127 );
                var connectionTypeParameter = sqlCommandParameters.AddEnum( "@ConnectionType", connectionType );
                var sourceUpdateRateParameter = sqlCommandParameters.AddInt32( "@SourceUpdateRate", sourceUpdateRate );
                var configurationURLParameter = sqlCommandParameters.AddNVarChar( "@ConfigurationURL", configurationURL, 127 );
                var storeReceivedSentencesParameter = sqlCommandParameters.AddBoolean( "@StoreReceivedSentences", storeReceivedSentences );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    id = (Guid)idParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool UpdateAisDeviceConfiguration( Guid id, ref long rowVersion, Guid aisDevice, DateTime timestamp, bool filter, double northWestLatitude, double northWestLongitude, double southEastLatitude, double southEastLongitude, string comPort, int baudRate, string iPAddress, int port, int udpPort, bool authenticate, string userName, string password, string authenticationURL, Types.AisDeviceConnectionType connectionType, int sourceUpdateRate, string configurationURL, bool storeReceivedSentences )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "AisDeviceConfigurationUpdate";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion, System.Data.ParameterDirection.InputOutput );
                var aisDeviceParameter = sqlCommandParameters.AddReference( "@AisDevice", aisDevice );
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@Timestamp", timestamp );
                var filterParameter = sqlCommandParameters.AddBoolean( "@Filter", filter );
                var northWestLatitudeParameter = sqlCommandParameters.AddDouble( "@NorthWestLatitude", northWestLatitude );
                var northWestLongitudeParameter = sqlCommandParameters.AddDouble( "@NorthWestLongitude", northWestLongitude );
                var southEastLatitudeParameter = sqlCommandParameters.AddDouble( "@SouthEastLatitude", southEastLatitude );
                var southEastLongitudeParameter = sqlCommandParameters.AddDouble( "@SouthEastLongitude", southEastLongitude );
                var comPortParameter = sqlCommandParameters.AddNVarChar( "@ComPort", comPort, 32 );
                var baudRateParameter = sqlCommandParameters.AddInt32( "@BaudRate", baudRate );
                var iPAddressParameter = sqlCommandParameters.AddNVarChar( "@IPAddress", iPAddress, 127 );
                var portParameter = sqlCommandParameters.AddInt32( "@Port", port );
                var udpPortParameter = sqlCommandParameters.AddInt32( "@UdpPort", udpPort );
                var authenticateParameter = sqlCommandParameters.AddBoolean( "@Authenticate", authenticate );
                var userNameParameter = sqlCommandParameters.AddNVarChar( "@UserName", userName, 127 );
                var passwordParameter = sqlCommandParameters.AddNVarChar( "@Password", password, 127 );
                var authenticationURLParameter = sqlCommandParameters.AddNVarChar( "@AuthenticationURL", authenticationURL, 127 );
                var connectionTypeParameter = sqlCommandParameters.AddEnum( "@ConnectionType", connectionType );
                var sourceUpdateRateParameter = sqlCommandParameters.AddInt32( "@SourceUpdateRate", sourceUpdateRate );
                var configurationURLParameter = sqlCommandParameters.AddNVarChar( "@ConfigurationURL", configurationURL, 127 );
                var storeReceivedSentencesParameter = sqlCommandParameters.AddBoolean( "@StoreReceivedSentences", storeReceivedSentences );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    rowVersion = (long)rowVersionParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool DeleteAisDeviceConfiguration( Guid id, long rowVersion )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "AisDeviceConfigurationDelete";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool InsertAisDeviceRawMessage( ref Guid id, Guid aisDevice, DateTime timestamp, bool isSent, string message )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "AisDeviceRawMessageInsert";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id, System.Data.ParameterDirection.InputOutput );
                var aisDeviceParameter = sqlCommandParameters.AddReference( "@AisDevice", aisDevice );
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@Timestamp", timestamp );
                var isSentParameter = sqlCommandParameters.AddBoolean( "@IsSent", isSent );
                var messageParameter = sqlCommandParameters.AddNVarChar( "@Message", message, 127 );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    id = (Guid)idParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool UpdateAisDeviceRawMessage( Guid id, ref long rowVersion, Guid aisDevice, DateTime timestamp, bool isSent, string message )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "AisDeviceRawMessageUpdate";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion, System.Data.ParameterDirection.InputOutput );
                var aisDeviceParameter = sqlCommandParameters.AddReference( "@AisDevice", aisDevice );
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@Timestamp", timestamp );
                var isSentParameter = sqlCommandParameters.AddBoolean( "@IsSent", isSent );
                var messageParameter = sqlCommandParameters.AddNVarChar( "@Message", message, 127 );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    rowVersion = (long)rowVersionParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool DeleteAisDeviceRawMessage( Guid id, long rowVersion )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "AisDeviceRawMessageDelete";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool InsertAisDeviceRawSentence( ref Guid id, Guid aisDevice, DateTime timestamp, string sentence )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "AisDeviceRawSentenceInsert";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id, System.Data.ParameterDirection.InputOutput );
                var aisDeviceParameter = sqlCommandParameters.AddReference( "@AisDevice", aisDevice );
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@Timestamp", timestamp );
                var sentenceParameter = sqlCommandParameters.AddNVarChar( "@Sentence", sentence, 1024 );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    id = (Guid)idParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool UpdateAisDeviceRawSentence( Guid id, ref long rowVersion, Guid aisDevice, DateTime timestamp, string sentence )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "AisDeviceRawSentenceUpdate";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion, System.Data.ParameterDirection.InputOutput );
                var aisDeviceParameter = sqlCommandParameters.AddReference( "@AisDevice", aisDevice );
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@Timestamp", timestamp );
                var sentenceParameter = sqlCommandParameters.AddNVarChar( "@Sentence", sentence, 1024 );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    rowVersion = (long)rowVersionParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool DeleteAisDeviceRawSentence( Guid id, long rowVersion )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "AisDeviceRawSentenceDelete";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool InsertAidToNavigationReportMessage( ref Guid id, Guid aisDevice, DateTime receivedTimestamp, long messageSequenceNumber, int repeat, Guid mmsi, Types.NavigationalAidType navigationalAidType, string name, Types.PositionAccuracy positionAccuracy, double longitude, double latitude, int dimensionToBow, int dimensionToStern, int dimensionToPort, int dimensionToStarboard, Types.PositionFixType positionFixType, int timestamp, bool offPosition, int regionalReserved, Types.Raim raim, bool virtualAid, bool assigned, int spare, string nameExtension )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "AidToNavigationReportMessageInsert";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id, System.Data.ParameterDirection.InputOutput );
                var aisDeviceParameter = sqlCommandParameters.AddReference( "@AisDevice", aisDevice );
                var receivedTimestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@ReceivedTimestamp", receivedTimestamp );
                var messageSequenceNumberParameter = sqlCommandParameters.AddInt64( "@MessageSequenceNumber", messageSequenceNumber );
                var repeatParameter = sqlCommandParameters.AddInt32( "@Repeat", repeat );
                var mmsiParameter = sqlCommandParameters.AddReference( "@Mmsi", mmsi );
                var navigationalAidTypeParameter = sqlCommandParameters.AddEnum( "@NavigationalAidType", navigationalAidType );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@Name", name, 127 );
                var positionAccuracyParameter = sqlCommandParameters.AddEnum( "@PositionAccuracy", positionAccuracy );
                var longitudeParameter = sqlCommandParameters.AddDouble( "@Longitude", longitude );
                var latitudeParameter = sqlCommandParameters.AddDouble( "@Latitude", latitude );
                var dimensionToBowParameter = sqlCommandParameters.AddInt32( "@DimensionToBow", dimensionToBow );
                var dimensionToSternParameter = sqlCommandParameters.AddInt32( "@DimensionToStern", dimensionToStern );
                var dimensionToPortParameter = sqlCommandParameters.AddInt32( "@DimensionToPort", dimensionToPort );
                var dimensionToStarboardParameter = sqlCommandParameters.AddInt32( "@DimensionToStarboard", dimensionToStarboard );
                var positionFixTypeParameter = sqlCommandParameters.AddEnum( "@PositionFixType", positionFixType );
                var timestampParameter = sqlCommandParameters.AddInt32( "@Timestamp", timestamp );
                var offPositionParameter = sqlCommandParameters.AddBoolean( "@OffPosition", offPosition );
                var regionalReservedParameter = sqlCommandParameters.AddInt32( "@RegionalReserved", regionalReserved );
                var raimParameter = sqlCommandParameters.AddEnum( "@Raim", raim );
                var virtualAidParameter = sqlCommandParameters.AddBoolean( "@VirtualAid", virtualAid );
                var assignedParameter = sqlCommandParameters.AddBoolean( "@Assigned", assigned );
                var spareParameter = sqlCommandParameters.AddInt32( "@Spare", spare );
                var nameExtensionParameter = sqlCommandParameters.AddNVarChar( "@NameExtension", nameExtension, 127 );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    id = (Guid)idParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool UpdateAidToNavigationReportMessage( Guid id, ref long rowVersion, Guid aisDevice, DateTime receivedTimestamp, long messageSequenceNumber, int repeat, Guid mmsi, Types.NavigationalAidType navigationalAidType, string name, Types.PositionAccuracy positionAccuracy, double longitude, double latitude, int dimensionToBow, int dimensionToStern, int dimensionToPort, int dimensionToStarboard, Types.PositionFixType positionFixType, int timestamp, bool offPosition, int regionalReserved, Types.Raim raim, bool virtualAid, bool assigned, int spare, string nameExtension )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "AidToNavigationReportMessageUpdate";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion, System.Data.ParameterDirection.InputOutput );
                var aisDeviceParameter = sqlCommandParameters.AddReference( "@AisDevice", aisDevice );
                var receivedTimestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@ReceivedTimestamp", receivedTimestamp );
                var messageSequenceNumberParameter = sqlCommandParameters.AddInt64( "@MessageSequenceNumber", messageSequenceNumber );
                var repeatParameter = sqlCommandParameters.AddInt32( "@Repeat", repeat );
                var mmsiParameter = sqlCommandParameters.AddReference( "@Mmsi", mmsi );
                var navigationalAidTypeParameter = sqlCommandParameters.AddEnum( "@NavigationalAidType", navigationalAidType );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@Name", name, 127 );
                var positionAccuracyParameter = sqlCommandParameters.AddEnum( "@PositionAccuracy", positionAccuracy );
                var longitudeParameter = sqlCommandParameters.AddDouble( "@Longitude", longitude );
                var latitudeParameter = sqlCommandParameters.AddDouble( "@Latitude", latitude );
                var dimensionToBowParameter = sqlCommandParameters.AddInt32( "@DimensionToBow", dimensionToBow );
                var dimensionToSternParameter = sqlCommandParameters.AddInt32( "@DimensionToStern", dimensionToStern );
                var dimensionToPortParameter = sqlCommandParameters.AddInt32( "@DimensionToPort", dimensionToPort );
                var dimensionToStarboardParameter = sqlCommandParameters.AddInt32( "@DimensionToStarboard", dimensionToStarboard );
                var positionFixTypeParameter = sqlCommandParameters.AddEnum( "@PositionFixType", positionFixType );
                var timestampParameter = sqlCommandParameters.AddInt32( "@Timestamp", timestamp );
                var offPositionParameter = sqlCommandParameters.AddBoolean( "@OffPosition", offPosition );
                var regionalReservedParameter = sqlCommandParameters.AddInt32( "@RegionalReserved", regionalReserved );
                var raimParameter = sqlCommandParameters.AddEnum( "@Raim", raim );
                var virtualAidParameter = sqlCommandParameters.AddBoolean( "@VirtualAid", virtualAid );
                var assignedParameter = sqlCommandParameters.AddBoolean( "@Assigned", assigned );
                var spareParameter = sqlCommandParameters.AddInt32( "@Spare", spare );
                var nameExtensionParameter = sqlCommandParameters.AddNVarChar( "@NameExtension", nameExtension, 127 );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    rowVersion = (long)rowVersionParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool DeleteAidToNavigationReportMessage( Guid id, long rowVersion )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "AidToNavigationReportMessageDelete";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool InsertAisAddressedSafetyRelatedMessage( ref Guid id, Guid aisDevice, DateTime receivedTimestamp, long messageSequenceNumber, int repeat, Guid mmsi, int sequenceNumber, Guid destinationMmsi, bool retransmitFlag, int spare, string text )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "AisAddressedSafetyRelatedMessageInsert";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id, System.Data.ParameterDirection.InputOutput );
                var aisDeviceParameter = sqlCommandParameters.AddReference( "@AisDevice", aisDevice );
                var receivedTimestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@ReceivedTimestamp", receivedTimestamp );
                var messageSequenceNumberParameter = sqlCommandParameters.AddInt64( "@MessageSequenceNumber", messageSequenceNumber );
                var repeatParameter = sqlCommandParameters.AddInt32( "@Repeat", repeat );
                var mmsiParameter = sqlCommandParameters.AddReference( "@Mmsi", mmsi );
                var sequenceNumberParameter = sqlCommandParameters.AddInt32( "@SequenceNumber", sequenceNumber );
                var destinationMmsiParameter = sqlCommandParameters.AddReference( "@DestinationMmsi", destinationMmsi );
                var retransmitFlagParameter = sqlCommandParameters.AddBoolean( "@RetransmitFlag", retransmitFlag );
                var spareParameter = sqlCommandParameters.AddInt32( "@Spare", spare );
                var textParameter = sqlCommandParameters.AddNVarChar( "@Text", text, 127 );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    id = (Guid)idParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool UpdateAisAddressedSafetyRelatedMessage( Guid id, ref long rowVersion, Guid aisDevice, DateTime receivedTimestamp, long messageSequenceNumber, int repeat, Guid mmsi, int sequenceNumber, Guid destinationMmsi, bool retransmitFlag, int spare, string text )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "AisAddressedSafetyRelatedMessageUpdate";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion, System.Data.ParameterDirection.InputOutput );
                var aisDeviceParameter = sqlCommandParameters.AddReference( "@AisDevice", aisDevice );
                var receivedTimestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@ReceivedTimestamp", receivedTimestamp );
                var messageSequenceNumberParameter = sqlCommandParameters.AddInt64( "@MessageSequenceNumber", messageSequenceNumber );
                var repeatParameter = sqlCommandParameters.AddInt32( "@Repeat", repeat );
                var mmsiParameter = sqlCommandParameters.AddReference( "@Mmsi", mmsi );
                var sequenceNumberParameter = sqlCommandParameters.AddInt32( "@SequenceNumber", sequenceNumber );
                var destinationMmsiParameter = sqlCommandParameters.AddReference( "@DestinationMmsi", destinationMmsi );
                var retransmitFlagParameter = sqlCommandParameters.AddBoolean( "@RetransmitFlag", retransmitFlag );
                var spareParameter = sqlCommandParameters.AddInt32( "@Spare", spare );
                var textParameter = sqlCommandParameters.AddNVarChar( "@Text", text, 127 );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    rowVersion = (long)rowVersionParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool DeleteAisAddressedSafetyRelatedMessage( Guid id, long rowVersion )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "AisAddressedSafetyRelatedMessageDelete";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool InsertAisBaseStationReportMessage( ref Guid id, Guid aisDevice, DateTime receivedTimestamp, long messageSequenceNumber, int repeat, Guid mmsi, DateTime timestamp, Types.PositionAccuracy positionAccuracy, double longitude, double latitude, Types.PositionFixType positionFixType, int spare, Types.Raim raim, int radioStatus )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "AisBaseStationReportMessageInsert";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id, System.Data.ParameterDirection.InputOutput );
                var aisDeviceParameter = sqlCommandParameters.AddReference( "@AisDevice", aisDevice );
                var receivedTimestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@ReceivedTimestamp", receivedTimestamp );
                var messageSequenceNumberParameter = sqlCommandParameters.AddInt64( "@MessageSequenceNumber", messageSequenceNumber );
                var repeatParameter = sqlCommandParameters.AddInt32( "@Repeat", repeat );
                var mmsiParameter = sqlCommandParameters.AddReference( "@Mmsi", mmsi );
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@Timestamp", timestamp );
                var positionAccuracyParameter = sqlCommandParameters.AddEnum( "@PositionAccuracy", positionAccuracy );
                var longitudeParameter = sqlCommandParameters.AddDouble( "@Longitude", longitude );
                var latitudeParameter = sqlCommandParameters.AddDouble( "@Latitude", latitude );
                var positionFixTypeParameter = sqlCommandParameters.AddEnum( "@PositionFixType", positionFixType );
                var spareParameter = sqlCommandParameters.AddInt32( "@Spare", spare );
                var raimParameter = sqlCommandParameters.AddEnum( "@Raim", raim );
                var radioStatusParameter = sqlCommandParameters.AddInt32( "@RadioStatus", radioStatus );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    id = (Guid)idParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool UpdateAisBaseStationReportMessage( Guid id, ref long rowVersion, Guid aisDevice, DateTime receivedTimestamp, long messageSequenceNumber, int repeat, Guid mmsi, DateTime timestamp, Types.PositionAccuracy positionAccuracy, double longitude, double latitude, Types.PositionFixType positionFixType, int spare, Types.Raim raim, int radioStatus )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "AisBaseStationReportMessageUpdate";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion, System.Data.ParameterDirection.InputOutput );
                var aisDeviceParameter = sqlCommandParameters.AddReference( "@AisDevice", aisDevice );
                var receivedTimestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@ReceivedTimestamp", receivedTimestamp );
                var messageSequenceNumberParameter = sqlCommandParameters.AddInt64( "@MessageSequenceNumber", messageSequenceNumber );
                var repeatParameter = sqlCommandParameters.AddInt32( "@Repeat", repeat );
                var mmsiParameter = sqlCommandParameters.AddReference( "@Mmsi", mmsi );
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@Timestamp", timestamp );
                var positionAccuracyParameter = sqlCommandParameters.AddEnum( "@PositionAccuracy", positionAccuracy );
                var longitudeParameter = sqlCommandParameters.AddDouble( "@Longitude", longitude );
                var latitudeParameter = sqlCommandParameters.AddDouble( "@Latitude", latitude );
                var positionFixTypeParameter = sqlCommandParameters.AddEnum( "@PositionFixType", positionFixType );
                var spareParameter = sqlCommandParameters.AddInt32( "@Spare", spare );
                var raimParameter = sqlCommandParameters.AddEnum( "@Raim", raim );
                var radioStatusParameter = sqlCommandParameters.AddInt32( "@RadioStatus", radioStatus );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    rowVersion = (long)rowVersionParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool DeleteAisBaseStationReportMessage( Guid id, long rowVersion )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "AisBaseStationReportMessageDelete";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool InsertAisBinaryAcknowledgeMessage( ref Guid id, Guid aisDevice, DateTime receivedTimestamp, long messageSequenceNumber, int repeat, Guid mmsi, int spare, int sequenceNumber1, Guid mmsi1, int? sequenceNumber2, Guid? mmsi2, int? sequenceNumber3, Guid? mmsi3, int? sequenceNumber4, Guid? mmsi4 )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "AisBinaryAcknowledgeMessageInsert";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id, System.Data.ParameterDirection.InputOutput );
                var aisDeviceParameter = sqlCommandParameters.AddReference( "@AisDevice", aisDevice );
                var receivedTimestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@ReceivedTimestamp", receivedTimestamp );
                var messageSequenceNumberParameter = sqlCommandParameters.AddInt64( "@MessageSequenceNumber", messageSequenceNumber );
                var repeatParameter = sqlCommandParameters.AddInt32( "@Repeat", repeat );
                var mmsiParameter = sqlCommandParameters.AddReference( "@Mmsi", mmsi );
                var spareParameter = sqlCommandParameters.AddInt32( "@Spare", spare );
                var sequenceNumber1Parameter = sqlCommandParameters.AddInt32( "@SequenceNumber1", sequenceNumber1 );
                var mmsi1Parameter = sqlCommandParameters.AddReference( "@Mmsi1", mmsi1 );
                var sequenceNumber2Parameter = sqlCommandParameters.AddInt32( "@SequenceNumber2", sequenceNumber2 );
                var mmsi2Parameter = sqlCommandParameters.AddReference( "@Mmsi2", mmsi2 );
                var sequenceNumber3Parameter = sqlCommandParameters.AddInt32( "@SequenceNumber3", sequenceNumber3 );
                var mmsi3Parameter = sqlCommandParameters.AddReference( "@Mmsi3", mmsi3 );
                var sequenceNumber4Parameter = sqlCommandParameters.AddInt32( "@SequenceNumber4", sequenceNumber4 );
                var mmsi4Parameter = sqlCommandParameters.AddReference( "@Mmsi4", mmsi4 );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    id = (Guid)idParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool UpdateAisBinaryAcknowledgeMessage( Guid id, ref long rowVersion, Guid aisDevice, DateTime receivedTimestamp, long messageSequenceNumber, int repeat, Guid mmsi, int spare, int sequenceNumber1, Guid mmsi1, int? sequenceNumber2, Guid? mmsi2, int? sequenceNumber3, Guid? mmsi3, int? sequenceNumber4, Guid? mmsi4 )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "AisBinaryAcknowledgeMessageUpdate";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion, System.Data.ParameterDirection.InputOutput );
                var aisDeviceParameter = sqlCommandParameters.AddReference( "@AisDevice", aisDevice );
                var receivedTimestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@ReceivedTimestamp", receivedTimestamp );
                var messageSequenceNumberParameter = sqlCommandParameters.AddInt64( "@MessageSequenceNumber", messageSequenceNumber );
                var repeatParameter = sqlCommandParameters.AddInt32( "@Repeat", repeat );
                var mmsiParameter = sqlCommandParameters.AddReference( "@Mmsi", mmsi );
                var spareParameter = sqlCommandParameters.AddInt32( "@Spare", spare );
                var sequenceNumber1Parameter = sqlCommandParameters.AddInt32( "@SequenceNumber1", sequenceNumber1 );
                var mmsi1Parameter = sqlCommandParameters.AddReference( "@Mmsi1", mmsi1 );
                var sequenceNumber2Parameter = sqlCommandParameters.AddInt32( "@SequenceNumber2", sequenceNumber2 );
                var mmsi2Parameter = sqlCommandParameters.AddReference( "@Mmsi2", mmsi2 );
                var sequenceNumber3Parameter = sqlCommandParameters.AddInt32( "@SequenceNumber3", sequenceNumber3 );
                var mmsi3Parameter = sqlCommandParameters.AddReference( "@Mmsi3", mmsi3 );
                var sequenceNumber4Parameter = sqlCommandParameters.AddInt32( "@SequenceNumber4", sequenceNumber4 );
                var mmsi4Parameter = sqlCommandParameters.AddReference( "@Mmsi4", mmsi4 );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    rowVersion = (long)rowVersionParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool DeleteAisBinaryAcknowledgeMessage( Guid id, long rowVersion )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "AisBinaryAcknowledgeMessageDelete";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool InsertAisBinaryAddressedMessage( ref Guid id, Guid aisDevice, DateTime receivedTimestamp, long messageSequenceNumber, int repeat, Guid mmsi, int sequenceNumber, Guid destinationMmsi, bool retransmitFlag, int spare, int designatedAreaCode, int functionalId, string data )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "AisBinaryAddressedMessageInsert";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id, System.Data.ParameterDirection.InputOutput );
                var aisDeviceParameter = sqlCommandParameters.AddReference( "@AisDevice", aisDevice );
                var receivedTimestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@ReceivedTimestamp", receivedTimestamp );
                var messageSequenceNumberParameter = sqlCommandParameters.AddInt64( "@MessageSequenceNumber", messageSequenceNumber );
                var repeatParameter = sqlCommandParameters.AddInt32( "@Repeat", repeat );
                var mmsiParameter = sqlCommandParameters.AddReference( "@Mmsi", mmsi );
                var sequenceNumberParameter = sqlCommandParameters.AddInt32( "@SequenceNumber", sequenceNumber );
                var destinationMmsiParameter = sqlCommandParameters.AddReference( "@DestinationMmsi", destinationMmsi );
                var retransmitFlagParameter = sqlCommandParameters.AddBoolean( "@RetransmitFlag", retransmitFlag );
                var spareParameter = sqlCommandParameters.AddInt32( "@Spare", spare );
                var designatedAreaCodeParameter = sqlCommandParameters.AddInt32( "@DesignatedAreaCode", designatedAreaCode );
                var functionalIdParameter = sqlCommandParameters.AddInt32( "@FunctionalId", functionalId );
                var dataParameter = sqlCommandParameters.AddNVarChar( "@Data", data, 0 );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    id = (Guid)idParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool UpdateAisBinaryAddressedMessage( Guid id, ref long rowVersion, Guid aisDevice, DateTime receivedTimestamp, long messageSequenceNumber, int repeat, Guid mmsi, int sequenceNumber, Guid destinationMmsi, bool retransmitFlag, int spare, int designatedAreaCode, int functionalId, string data )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "AisBinaryAddressedMessageUpdate";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion, System.Data.ParameterDirection.InputOutput );
                var aisDeviceParameter = sqlCommandParameters.AddReference( "@AisDevice", aisDevice );
                var receivedTimestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@ReceivedTimestamp", receivedTimestamp );
                var messageSequenceNumberParameter = sqlCommandParameters.AddInt64( "@MessageSequenceNumber", messageSequenceNumber );
                var repeatParameter = sqlCommandParameters.AddInt32( "@Repeat", repeat );
                var mmsiParameter = sqlCommandParameters.AddReference( "@Mmsi", mmsi );
                var sequenceNumberParameter = sqlCommandParameters.AddInt32( "@SequenceNumber", sequenceNumber );
                var destinationMmsiParameter = sqlCommandParameters.AddReference( "@DestinationMmsi", destinationMmsi );
                var retransmitFlagParameter = sqlCommandParameters.AddBoolean( "@RetransmitFlag", retransmitFlag );
                var spareParameter = sqlCommandParameters.AddInt32( "@Spare", spare );
                var designatedAreaCodeParameter = sqlCommandParameters.AddInt32( "@DesignatedAreaCode", designatedAreaCode );
                var functionalIdParameter = sqlCommandParameters.AddInt32( "@FunctionalId", functionalId );
                var dataParameter = sqlCommandParameters.AddNVarChar( "@Data", data, 0 );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    rowVersion = (long)rowVersionParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool DeleteAisBinaryAddressedMessage( Guid id, long rowVersion )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "AisBinaryAddressedMessageDelete";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool InsertAisBinaryBroadcastMessage( ref Guid id, Guid aisDevice, DateTime receivedTimestamp, long messageSequenceNumber, int repeat, Guid mmsi, int spare, int designatedAreaCode, int functionalId, string data )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "AisBinaryBroadcastMessageInsert";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id, System.Data.ParameterDirection.InputOutput );
                var aisDeviceParameter = sqlCommandParameters.AddReference( "@AisDevice", aisDevice );
                var receivedTimestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@ReceivedTimestamp", receivedTimestamp );
                var messageSequenceNumberParameter = sqlCommandParameters.AddInt64( "@MessageSequenceNumber", messageSequenceNumber );
                var repeatParameter = sqlCommandParameters.AddInt32( "@Repeat", repeat );
                var mmsiParameter = sqlCommandParameters.AddReference( "@Mmsi", mmsi );
                var spareParameter = sqlCommandParameters.AddInt32( "@Spare", spare );
                var designatedAreaCodeParameter = sqlCommandParameters.AddInt32( "@DesignatedAreaCode", designatedAreaCode );
                var functionalIdParameter = sqlCommandParameters.AddInt32( "@FunctionalId", functionalId );
                var dataParameter = sqlCommandParameters.AddNVarChar( "@Data", data, 0 );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    id = (Guid)idParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool UpdateAisBinaryBroadcastMessage( Guid id, ref long rowVersion, Guid aisDevice, DateTime receivedTimestamp, long messageSequenceNumber, int repeat, Guid mmsi, int spare, int designatedAreaCode, int functionalId, string data )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "AisBinaryBroadcastMessageUpdate";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion, System.Data.ParameterDirection.InputOutput );
                var aisDeviceParameter = sqlCommandParameters.AddReference( "@AisDevice", aisDevice );
                var receivedTimestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@ReceivedTimestamp", receivedTimestamp );
                var messageSequenceNumberParameter = sqlCommandParameters.AddInt64( "@MessageSequenceNumber", messageSequenceNumber );
                var repeatParameter = sqlCommandParameters.AddInt32( "@Repeat", repeat );
                var mmsiParameter = sqlCommandParameters.AddReference( "@Mmsi", mmsi );
                var spareParameter = sqlCommandParameters.AddInt32( "@Spare", spare );
                var designatedAreaCodeParameter = sqlCommandParameters.AddInt32( "@DesignatedAreaCode", designatedAreaCode );
                var functionalIdParameter = sqlCommandParameters.AddInt32( "@FunctionalId", functionalId );
                var dataParameter = sqlCommandParameters.AddNVarChar( "@Data", data, 0 );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    rowVersion = (long)rowVersionParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool DeleteAisBinaryBroadcastMessage( Guid id, long rowVersion )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "AisBinaryBroadcastMessageDelete";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool InsertAisDataLinkManagementMessage( ref Guid id, Guid aisDevice, DateTime receivedTimestamp, long messageSequenceNumber, int repeat, Guid mmsi, int spare, int offset1, int reservedSlots1, int timeout1, int increment1, int? offset2, int? reservedSlots2, int? timeout2, int? increment2, int? offset3, int? reservedSlots3, int? timeout3, int? increment3, int? offset4, int? reservedSlots4, int? timeout4, int? increment4 )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "AisDataLinkManagementMessageInsert";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id, System.Data.ParameterDirection.InputOutput );
                var aisDeviceParameter = sqlCommandParameters.AddReference( "@AisDevice", aisDevice );
                var receivedTimestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@ReceivedTimestamp", receivedTimestamp );
                var messageSequenceNumberParameter = sqlCommandParameters.AddInt64( "@MessageSequenceNumber", messageSequenceNumber );
                var repeatParameter = sqlCommandParameters.AddInt32( "@Repeat", repeat );
                var mmsiParameter = sqlCommandParameters.AddReference( "@Mmsi", mmsi );
                var spareParameter = sqlCommandParameters.AddInt32( "@Spare", spare );
                var offset1Parameter = sqlCommandParameters.AddInt32( "@Offset1", offset1 );
                var reservedSlots1Parameter = sqlCommandParameters.AddInt32( "@ReservedSlots1", reservedSlots1 );
                var timeout1Parameter = sqlCommandParameters.AddInt32( "@Timeout1", timeout1 );
                var increment1Parameter = sqlCommandParameters.AddInt32( "@Increment1", increment1 );
                var offset2Parameter = sqlCommandParameters.AddInt32( "@Offset2", offset2 );
                var reservedSlots2Parameter = sqlCommandParameters.AddInt32( "@ReservedSlots2", reservedSlots2 );
                var timeout2Parameter = sqlCommandParameters.AddInt32( "@Timeout2", timeout2 );
                var increment2Parameter = sqlCommandParameters.AddInt32( "@Increment2", increment2 );
                var offset3Parameter = sqlCommandParameters.AddInt32( "@Offset3", offset3 );
                var reservedSlots3Parameter = sqlCommandParameters.AddInt32( "@ReservedSlots3", reservedSlots3 );
                var timeout3Parameter = sqlCommandParameters.AddInt32( "@Timeout3", timeout3 );
                var increment3Parameter = sqlCommandParameters.AddInt32( "@Increment3", increment3 );
                var offset4Parameter = sqlCommandParameters.AddInt32( "@Offset4", offset4 );
                var reservedSlots4Parameter = sqlCommandParameters.AddInt32( "@ReservedSlots4", reservedSlots4 );
                var timeout4Parameter = sqlCommandParameters.AddInt32( "@Timeout4", timeout4 );
                var increment4Parameter = sqlCommandParameters.AddInt32( "@Increment4", increment4 );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    id = (Guid)idParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool UpdateAisDataLinkManagementMessage( Guid id, ref long rowVersion, Guid aisDevice, DateTime receivedTimestamp, long messageSequenceNumber, int repeat, Guid mmsi, int spare, int offset1, int reservedSlots1, int timeout1, int increment1, int? offset2, int? reservedSlots2, int? timeout2, int? increment2, int? offset3, int? reservedSlots3, int? timeout3, int? increment3, int? offset4, int? reservedSlots4, int? timeout4, int? increment4 )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "AisDataLinkManagementMessageUpdate";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion, System.Data.ParameterDirection.InputOutput );
                var aisDeviceParameter = sqlCommandParameters.AddReference( "@AisDevice", aisDevice );
                var receivedTimestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@ReceivedTimestamp", receivedTimestamp );
                var messageSequenceNumberParameter = sqlCommandParameters.AddInt64( "@MessageSequenceNumber", messageSequenceNumber );
                var repeatParameter = sqlCommandParameters.AddInt32( "@Repeat", repeat );
                var mmsiParameter = sqlCommandParameters.AddReference( "@Mmsi", mmsi );
                var spareParameter = sqlCommandParameters.AddInt32( "@Spare", spare );
                var offset1Parameter = sqlCommandParameters.AddInt32( "@Offset1", offset1 );
                var reservedSlots1Parameter = sqlCommandParameters.AddInt32( "@ReservedSlots1", reservedSlots1 );
                var timeout1Parameter = sqlCommandParameters.AddInt32( "@Timeout1", timeout1 );
                var increment1Parameter = sqlCommandParameters.AddInt32( "@Increment1", increment1 );
                var offset2Parameter = sqlCommandParameters.AddInt32( "@Offset2", offset2 );
                var reservedSlots2Parameter = sqlCommandParameters.AddInt32( "@ReservedSlots2", reservedSlots2 );
                var timeout2Parameter = sqlCommandParameters.AddInt32( "@Timeout2", timeout2 );
                var increment2Parameter = sqlCommandParameters.AddInt32( "@Increment2", increment2 );
                var offset3Parameter = sqlCommandParameters.AddInt32( "@Offset3", offset3 );
                var reservedSlots3Parameter = sqlCommandParameters.AddInt32( "@ReservedSlots3", reservedSlots3 );
                var timeout3Parameter = sqlCommandParameters.AddInt32( "@Timeout3", timeout3 );
                var increment3Parameter = sqlCommandParameters.AddInt32( "@Increment3", increment3 );
                var offset4Parameter = sqlCommandParameters.AddInt32( "@Offset4", offset4 );
                var reservedSlots4Parameter = sqlCommandParameters.AddInt32( "@ReservedSlots4", reservedSlots4 );
                var timeout4Parameter = sqlCommandParameters.AddInt32( "@Timeout4", timeout4 );
                var increment4Parameter = sqlCommandParameters.AddInt32( "@Increment4", increment4 );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    rowVersion = (long)rowVersionParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool DeleteAisDataLinkManagementMessage( Guid id, long rowVersion )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "AisDataLinkManagementMessageDelete";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool InsertAisExtendedClassBCsPositionReportMessage( ref Guid id, Guid aisDevice, DateTime receivedTimestamp, long messageSequenceNumber, int repeat, Guid mmsi, int reserved, double speedOverGround, Types.PositionAccuracy positionAccuracy, double longitude, double latitude, double courseOverGround, int? trueHeading, int timestamp, int regionalReserved, Guid name, Types.ShipType shipType, int dimensionToBow, int dimensionToStern, int dimensionToPort, int dimensionToStarboard, Types.PositionFixType positionFixType, Types.Raim raim, bool dataTerminalReady, bool assigned, int spare )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "AisExtendedClassBCsPositionReportMessageInsert";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id, System.Data.ParameterDirection.InputOutput );
                var aisDeviceParameter = sqlCommandParameters.AddReference( "@AisDevice", aisDevice );
                var receivedTimestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@ReceivedTimestamp", receivedTimestamp );
                var messageSequenceNumberParameter = sqlCommandParameters.AddInt64( "@MessageSequenceNumber", messageSequenceNumber );
                var repeatParameter = sqlCommandParameters.AddInt32( "@Repeat", repeat );
                var mmsiParameter = sqlCommandParameters.AddReference( "@Mmsi", mmsi );
                var reservedParameter = sqlCommandParameters.AddInt32( "@Reserved", reserved );
                var speedOverGroundParameter = sqlCommandParameters.AddDouble( "@SpeedOverGround", speedOverGround );
                var positionAccuracyParameter = sqlCommandParameters.AddEnum( "@PositionAccuracy", positionAccuracy );
                var longitudeParameter = sqlCommandParameters.AddDouble( "@Longitude", longitude );
                var latitudeParameter = sqlCommandParameters.AddDouble( "@Latitude", latitude );
                var courseOverGroundParameter = sqlCommandParameters.AddDouble( "@CourseOverGround", courseOverGround );
                var trueHeadingParameter = sqlCommandParameters.AddInt32( "@TrueHeading", trueHeading );
                var timestampParameter = sqlCommandParameters.AddInt32( "@Timestamp", timestamp );
                var regionalReservedParameter = sqlCommandParameters.AddInt32( "@RegionalReserved", regionalReserved );
                var nameParameter = sqlCommandParameters.AddReference( "@Name", name );
                var shipTypeParameter = sqlCommandParameters.AddEnum( "@ShipType", shipType );
                var dimensionToBowParameter = sqlCommandParameters.AddInt32( "@DimensionToBow", dimensionToBow );
                var dimensionToSternParameter = sqlCommandParameters.AddInt32( "@DimensionToStern", dimensionToStern );
                var dimensionToPortParameter = sqlCommandParameters.AddInt32( "@DimensionToPort", dimensionToPort );
                var dimensionToStarboardParameter = sqlCommandParameters.AddInt32( "@DimensionToStarboard", dimensionToStarboard );
                var positionFixTypeParameter = sqlCommandParameters.AddEnum( "@PositionFixType", positionFixType );
                var raimParameter = sqlCommandParameters.AddEnum( "@Raim", raim );
                var dataTerminalReadyParameter = sqlCommandParameters.AddBoolean( "@DataTerminalReady", dataTerminalReady );
                var assignedParameter = sqlCommandParameters.AddBoolean( "@Assigned", assigned );
                var spareParameter = sqlCommandParameters.AddInt32( "@Spare", spare );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    id = (Guid)idParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool UpdateAisExtendedClassBCsPositionReportMessage( Guid id, ref long rowVersion, Guid aisDevice, DateTime receivedTimestamp, long messageSequenceNumber, int repeat, Guid mmsi, int reserved, double speedOverGround, Types.PositionAccuracy positionAccuracy, double longitude, double latitude, double courseOverGround, int? trueHeading, int timestamp, int regionalReserved, Guid name, Types.ShipType shipType, int dimensionToBow, int dimensionToStern, int dimensionToPort, int dimensionToStarboard, Types.PositionFixType positionFixType, Types.Raim raim, bool dataTerminalReady, bool assigned, int spare )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "AisExtendedClassBCsPositionReportMessageUpdate";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion, System.Data.ParameterDirection.InputOutput );
                var aisDeviceParameter = sqlCommandParameters.AddReference( "@AisDevice", aisDevice );
                var receivedTimestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@ReceivedTimestamp", receivedTimestamp );
                var messageSequenceNumberParameter = sqlCommandParameters.AddInt64( "@MessageSequenceNumber", messageSequenceNumber );
                var repeatParameter = sqlCommandParameters.AddInt32( "@Repeat", repeat );
                var mmsiParameter = sqlCommandParameters.AddReference( "@Mmsi", mmsi );
                var reservedParameter = sqlCommandParameters.AddInt32( "@Reserved", reserved );
                var speedOverGroundParameter = sqlCommandParameters.AddDouble( "@SpeedOverGround", speedOverGround );
                var positionAccuracyParameter = sqlCommandParameters.AddEnum( "@PositionAccuracy", positionAccuracy );
                var longitudeParameter = sqlCommandParameters.AddDouble( "@Longitude", longitude );
                var latitudeParameter = sqlCommandParameters.AddDouble( "@Latitude", latitude );
                var courseOverGroundParameter = sqlCommandParameters.AddDouble( "@CourseOverGround", courseOverGround );
                var trueHeadingParameter = sqlCommandParameters.AddInt32( "@TrueHeading", trueHeading );
                var timestampParameter = sqlCommandParameters.AddInt32( "@Timestamp", timestamp );
                var regionalReservedParameter = sqlCommandParameters.AddInt32( "@RegionalReserved", regionalReserved );
                var nameParameter = sqlCommandParameters.AddReference( "@Name", name );
                var shipTypeParameter = sqlCommandParameters.AddEnum( "@ShipType", shipType );
                var dimensionToBowParameter = sqlCommandParameters.AddInt32( "@DimensionToBow", dimensionToBow );
                var dimensionToSternParameter = sqlCommandParameters.AddInt32( "@DimensionToStern", dimensionToStern );
                var dimensionToPortParameter = sqlCommandParameters.AddInt32( "@DimensionToPort", dimensionToPort );
                var dimensionToStarboardParameter = sqlCommandParameters.AddInt32( "@DimensionToStarboard", dimensionToStarboard );
                var positionFixTypeParameter = sqlCommandParameters.AddEnum( "@PositionFixType", positionFixType );
                var raimParameter = sqlCommandParameters.AddEnum( "@Raim", raim );
                var dataTerminalReadyParameter = sqlCommandParameters.AddBoolean( "@DataTerminalReady", dataTerminalReady );
                var assignedParameter = sqlCommandParameters.AddBoolean( "@Assigned", assigned );
                var spareParameter = sqlCommandParameters.AddInt32( "@Spare", spare );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    rowVersion = (long)rowVersionParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool DeleteAisExtendedClassBCsPositionReportMessage( Guid id, long rowVersion )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "AisExtendedClassBCsPositionReportMessageDelete";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool InsertAisInterrogationMessage( ref Guid id, Guid aisDevice, DateTime receivedTimestamp, long messageSequenceNumber, int repeat, Guid mmsi, Guid interrogatedMmsi, Types.AisMessageType firstMessageType, int firstSlotOffset, Types.AisMessageType? secondMessageType, int? secondSlotOffset, Guid? secondStationInterrogationMmsi, Types.AisMessageType? secondStationFirstMessageType, int? secondStationFirstSlotOffset )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "AisInterrogationMessageInsert";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id, System.Data.ParameterDirection.InputOutput );
                var aisDeviceParameter = sqlCommandParameters.AddReference( "@AisDevice", aisDevice );
                var receivedTimestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@ReceivedTimestamp", receivedTimestamp );
                var messageSequenceNumberParameter = sqlCommandParameters.AddInt64( "@MessageSequenceNumber", messageSequenceNumber );
                var repeatParameter = sqlCommandParameters.AddInt32( "@Repeat", repeat );
                var mmsiParameter = sqlCommandParameters.AddReference( "@Mmsi", mmsi );
                var interrogatedMmsiParameter = sqlCommandParameters.AddReference( "@InterrogatedMmsi", interrogatedMmsi );
                var firstMessageTypeParameter = sqlCommandParameters.AddEnum( "@FirstMessageType", firstMessageType );
                var firstSlotOffsetParameter = sqlCommandParameters.AddInt32( "@FirstSlotOffset", firstSlotOffset );
                var secondMessageTypeParameter = sqlCommandParameters.AddEnum( "@SecondMessageType", secondMessageType );
                var secondSlotOffsetParameter = sqlCommandParameters.AddInt32( "@SecondSlotOffset", secondSlotOffset );
                var secondStationInterrogationMmsiParameter = sqlCommandParameters.AddReference( "@SecondStationInterrogationMmsi", secondStationInterrogationMmsi );
                var secondStationFirstMessageTypeParameter = sqlCommandParameters.AddEnum( "@SecondStationFirstMessageType", secondStationFirstMessageType );
                var secondStationFirstSlotOffsetParameter = sqlCommandParameters.AddInt32( "@SecondStationFirstSlotOffset", secondStationFirstSlotOffset );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    id = (Guid)idParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool UpdateAisInterrogationMessage( Guid id, ref long rowVersion, Guid aisDevice, DateTime receivedTimestamp, long messageSequenceNumber, int repeat, Guid mmsi, Guid interrogatedMmsi, Types.AisMessageType firstMessageType, int firstSlotOffset, Types.AisMessageType? secondMessageType, int? secondSlotOffset, Guid? secondStationInterrogationMmsi, Types.AisMessageType? secondStationFirstMessageType, int? secondStationFirstSlotOffset )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "AisInterrogationMessageUpdate";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion, System.Data.ParameterDirection.InputOutput );
                var aisDeviceParameter = sqlCommandParameters.AddReference( "@AisDevice", aisDevice );
                var receivedTimestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@ReceivedTimestamp", receivedTimestamp );
                var messageSequenceNumberParameter = sqlCommandParameters.AddInt64( "@MessageSequenceNumber", messageSequenceNumber );
                var repeatParameter = sqlCommandParameters.AddInt32( "@Repeat", repeat );
                var mmsiParameter = sqlCommandParameters.AddReference( "@Mmsi", mmsi );
                var interrogatedMmsiParameter = sqlCommandParameters.AddReference( "@InterrogatedMmsi", interrogatedMmsi );
                var firstMessageTypeParameter = sqlCommandParameters.AddEnum( "@FirstMessageType", firstMessageType );
                var firstSlotOffsetParameter = sqlCommandParameters.AddInt32( "@FirstSlotOffset", firstSlotOffset );
                var secondMessageTypeParameter = sqlCommandParameters.AddEnum( "@SecondMessageType", secondMessageType );
                var secondSlotOffsetParameter = sqlCommandParameters.AddInt32( "@SecondSlotOffset", secondSlotOffset );
                var secondStationInterrogationMmsiParameter = sqlCommandParameters.AddReference( "@SecondStationInterrogationMmsi", secondStationInterrogationMmsi );
                var secondStationFirstMessageTypeParameter = sqlCommandParameters.AddEnum( "@SecondStationFirstMessageType", secondStationFirstMessageType );
                var secondStationFirstSlotOffsetParameter = sqlCommandParameters.AddInt32( "@SecondStationFirstSlotOffset", secondStationFirstSlotOffset );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    rowVersion = (long)rowVersionParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool DeleteAisInterrogationMessage( Guid id, long rowVersion )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "AisInterrogationMessageDelete";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool InsertAisPositionReportClassAAssignedScheduleMessage( ref Guid id, Guid aisDevice, DateTime receivedTimestamp, long messageSequenceNumber, int repeat, Guid mmsi, Types.NavigationStatus navigationStatus, int? rateOfTurn, double speedOverGround, Types.PositionAccuracy positionAccuracy, double longitude, double latitude, double courseOverGround, int? trueHeading, int timestamp, Types.ManeuverIndicator maneuverIndicator, int spare, Types.Raim raim, int radioStatus )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "AisPositionReportClassAAssignedScheduleMessageInsert";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id, System.Data.ParameterDirection.InputOutput );
                var aisDeviceParameter = sqlCommandParameters.AddReference( "@AisDevice", aisDevice );
                var receivedTimestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@ReceivedTimestamp", receivedTimestamp );
                var messageSequenceNumberParameter = sqlCommandParameters.AddInt64( "@MessageSequenceNumber", messageSequenceNumber );
                var repeatParameter = sqlCommandParameters.AddInt32( "@Repeat", repeat );
                var mmsiParameter = sqlCommandParameters.AddReference( "@Mmsi", mmsi );
                var navigationStatusParameter = sqlCommandParameters.AddEnum( "@NavigationStatus", navigationStatus );
                var rateOfTurnParameter = sqlCommandParameters.AddInt32( "@RateOfTurn", rateOfTurn );
                var speedOverGroundParameter = sqlCommandParameters.AddDouble( "@SpeedOverGround", speedOverGround );
                var positionAccuracyParameter = sqlCommandParameters.AddEnum( "@PositionAccuracy", positionAccuracy );
                var longitudeParameter = sqlCommandParameters.AddDouble( "@Longitude", longitude );
                var latitudeParameter = sqlCommandParameters.AddDouble( "@Latitude", latitude );
                var courseOverGroundParameter = sqlCommandParameters.AddDouble( "@CourseOverGround", courseOverGround );
                var trueHeadingParameter = sqlCommandParameters.AddInt32( "@TrueHeading", trueHeading );
                var timestampParameter = sqlCommandParameters.AddInt32( "@Timestamp", timestamp );
                var maneuverIndicatorParameter = sqlCommandParameters.AddEnum( "@ManeuverIndicator", maneuverIndicator );
                var spareParameter = sqlCommandParameters.AddInt32( "@Spare", spare );
                var raimParameter = sqlCommandParameters.AddEnum( "@Raim", raim );
                var radioStatusParameter = sqlCommandParameters.AddInt32( "@RadioStatus", radioStatus );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    id = (Guid)idParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool UpdateAisPositionReportClassAAssignedScheduleMessage( Guid id, ref long rowVersion, Guid aisDevice, DateTime receivedTimestamp, long messageSequenceNumber, int repeat, Guid mmsi, Types.NavigationStatus navigationStatus, int? rateOfTurn, double speedOverGround, Types.PositionAccuracy positionAccuracy, double longitude, double latitude, double courseOverGround, int? trueHeading, int timestamp, Types.ManeuverIndicator maneuverIndicator, int spare, Types.Raim raim, int radioStatus )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "AisPositionReportClassAAssignedScheduleMessageUpdate";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion, System.Data.ParameterDirection.InputOutput );
                var aisDeviceParameter = sqlCommandParameters.AddReference( "@AisDevice", aisDevice );
                var receivedTimestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@ReceivedTimestamp", receivedTimestamp );
                var messageSequenceNumberParameter = sqlCommandParameters.AddInt64( "@MessageSequenceNumber", messageSequenceNumber );
                var repeatParameter = sqlCommandParameters.AddInt32( "@Repeat", repeat );
                var mmsiParameter = sqlCommandParameters.AddReference( "@Mmsi", mmsi );
                var navigationStatusParameter = sqlCommandParameters.AddEnum( "@NavigationStatus", navigationStatus );
                var rateOfTurnParameter = sqlCommandParameters.AddInt32( "@RateOfTurn", rateOfTurn );
                var speedOverGroundParameter = sqlCommandParameters.AddDouble( "@SpeedOverGround", speedOverGround );
                var positionAccuracyParameter = sqlCommandParameters.AddEnum( "@PositionAccuracy", positionAccuracy );
                var longitudeParameter = sqlCommandParameters.AddDouble( "@Longitude", longitude );
                var latitudeParameter = sqlCommandParameters.AddDouble( "@Latitude", latitude );
                var courseOverGroundParameter = sqlCommandParameters.AddDouble( "@CourseOverGround", courseOverGround );
                var trueHeadingParameter = sqlCommandParameters.AddInt32( "@TrueHeading", trueHeading );
                var timestampParameter = sqlCommandParameters.AddInt32( "@Timestamp", timestamp );
                var maneuverIndicatorParameter = sqlCommandParameters.AddEnum( "@ManeuverIndicator", maneuverIndicator );
                var spareParameter = sqlCommandParameters.AddInt32( "@Spare", spare );
                var raimParameter = sqlCommandParameters.AddEnum( "@Raim", raim );
                var radioStatusParameter = sqlCommandParameters.AddInt32( "@RadioStatus", radioStatus );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    rowVersion = (long)rowVersionParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool DeleteAisPositionReportClassAAssignedScheduleMessage( Guid id, long rowVersion )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "AisPositionReportClassAAssignedScheduleMessageDelete";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool InsertAisPositionReportClassAMessage( ref Guid id, Guid aisDevice, DateTime receivedTimestamp, long messageSequenceNumber, int repeat, Guid mmsi, Types.NavigationStatus navigationStatus, int? rateOfTurn, double speedOverGround, Types.PositionAccuracy positionAccuracy, double longitude, double latitude, double courseOverGround, int? trueHeading, int timestamp, Types.ManeuverIndicator maneuverIndicator, int spare, Types.Raim raim, int radioStatus )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "AisPositionReportClassAMessageInsert";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id, System.Data.ParameterDirection.InputOutput );
                var aisDeviceParameter = sqlCommandParameters.AddReference( "@AisDevice", aisDevice );
                var receivedTimestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@ReceivedTimestamp", receivedTimestamp );
                var messageSequenceNumberParameter = sqlCommandParameters.AddInt64( "@MessageSequenceNumber", messageSequenceNumber );
                var repeatParameter = sqlCommandParameters.AddInt32( "@Repeat", repeat );
                var mmsiParameter = sqlCommandParameters.AddReference( "@Mmsi", mmsi );
                var navigationStatusParameter = sqlCommandParameters.AddEnum( "@NavigationStatus", navigationStatus );
                var rateOfTurnParameter = sqlCommandParameters.AddInt32( "@RateOfTurn", rateOfTurn );
                var speedOverGroundParameter = sqlCommandParameters.AddDouble( "@SpeedOverGround", speedOverGround );
                var positionAccuracyParameter = sqlCommandParameters.AddEnum( "@PositionAccuracy", positionAccuracy );
                var longitudeParameter = sqlCommandParameters.AddDouble( "@Longitude", longitude );
                var latitudeParameter = sqlCommandParameters.AddDouble( "@Latitude", latitude );
                var courseOverGroundParameter = sqlCommandParameters.AddDouble( "@CourseOverGround", courseOverGround );
                var trueHeadingParameter = sqlCommandParameters.AddInt32( "@TrueHeading", trueHeading );
                var timestampParameter = sqlCommandParameters.AddInt32( "@Timestamp", timestamp );
                var maneuverIndicatorParameter = sqlCommandParameters.AddEnum( "@ManeuverIndicator", maneuverIndicator );
                var spareParameter = sqlCommandParameters.AddInt32( "@Spare", spare );
                var raimParameter = sqlCommandParameters.AddEnum( "@Raim", raim );
                var radioStatusParameter = sqlCommandParameters.AddInt32( "@RadioStatus", radioStatus );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    id = (Guid)idParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool UpdateAisPositionReportClassAMessage( Guid id, ref long rowVersion, Guid aisDevice, DateTime receivedTimestamp, long messageSequenceNumber, int repeat, Guid mmsi, Types.NavigationStatus navigationStatus, int? rateOfTurn, double speedOverGround, Types.PositionAccuracy positionAccuracy, double longitude, double latitude, double courseOverGround, int? trueHeading, int timestamp, Types.ManeuverIndicator maneuverIndicator, int spare, Types.Raim raim, int radioStatus )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "AisPositionReportClassAMessageUpdate";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion, System.Data.ParameterDirection.InputOutput );
                var aisDeviceParameter = sqlCommandParameters.AddReference( "@AisDevice", aisDevice );
                var receivedTimestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@ReceivedTimestamp", receivedTimestamp );
                var messageSequenceNumberParameter = sqlCommandParameters.AddInt64( "@MessageSequenceNumber", messageSequenceNumber );
                var repeatParameter = sqlCommandParameters.AddInt32( "@Repeat", repeat );
                var mmsiParameter = sqlCommandParameters.AddReference( "@Mmsi", mmsi );
                var navigationStatusParameter = sqlCommandParameters.AddEnum( "@NavigationStatus", navigationStatus );
                var rateOfTurnParameter = sqlCommandParameters.AddInt32( "@RateOfTurn", rateOfTurn );
                var speedOverGroundParameter = sqlCommandParameters.AddDouble( "@SpeedOverGround", speedOverGround );
                var positionAccuracyParameter = sqlCommandParameters.AddEnum( "@PositionAccuracy", positionAccuracy );
                var longitudeParameter = sqlCommandParameters.AddDouble( "@Longitude", longitude );
                var latitudeParameter = sqlCommandParameters.AddDouble( "@Latitude", latitude );
                var courseOverGroundParameter = sqlCommandParameters.AddDouble( "@CourseOverGround", courseOverGround );
                var trueHeadingParameter = sqlCommandParameters.AddInt32( "@TrueHeading", trueHeading );
                var timestampParameter = sqlCommandParameters.AddInt32( "@Timestamp", timestamp );
                var maneuverIndicatorParameter = sqlCommandParameters.AddEnum( "@ManeuverIndicator", maneuverIndicator );
                var spareParameter = sqlCommandParameters.AddInt32( "@Spare", spare );
                var raimParameter = sqlCommandParameters.AddEnum( "@Raim", raim );
                var radioStatusParameter = sqlCommandParameters.AddInt32( "@RadioStatus", radioStatus );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    rowVersion = (long)rowVersionParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool DeleteAisPositionReportClassAMessage( Guid id, long rowVersion )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "AisPositionReportClassAMessageDelete";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool InsertAisPositionReportClassAResponseToInterrogationMessage( ref Guid id, Guid aisDevice, DateTime receivedTimestamp, long messageSequenceNumber, int repeat, Guid mmsi, Types.NavigationStatus navigationStatus, int? rateOfTurn, double speedOverGround, Types.PositionAccuracy positionAccuracy, double longitude, double latitude, double courseOverGround, int? trueHeading, int timestamp, Types.ManeuverIndicator maneuverIndicator, int spare, Types.Raim raim, int radioStatus )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "AisPositionReportClassAResponseToInterrogationMessageInsert";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id, System.Data.ParameterDirection.InputOutput );
                var aisDeviceParameter = sqlCommandParameters.AddReference( "@AisDevice", aisDevice );
                var receivedTimestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@ReceivedTimestamp", receivedTimestamp );
                var messageSequenceNumberParameter = sqlCommandParameters.AddInt64( "@MessageSequenceNumber", messageSequenceNumber );
                var repeatParameter = sqlCommandParameters.AddInt32( "@Repeat", repeat );
                var mmsiParameter = sqlCommandParameters.AddReference( "@Mmsi", mmsi );
                var navigationStatusParameter = sqlCommandParameters.AddEnum( "@NavigationStatus", navigationStatus );
                var rateOfTurnParameter = sqlCommandParameters.AddInt32( "@RateOfTurn", rateOfTurn );
                var speedOverGroundParameter = sqlCommandParameters.AddDouble( "@SpeedOverGround", speedOverGround );
                var positionAccuracyParameter = sqlCommandParameters.AddEnum( "@PositionAccuracy", positionAccuracy );
                var longitudeParameter = sqlCommandParameters.AddDouble( "@Longitude", longitude );
                var latitudeParameter = sqlCommandParameters.AddDouble( "@Latitude", latitude );
                var courseOverGroundParameter = sqlCommandParameters.AddDouble( "@CourseOverGround", courseOverGround );
                var trueHeadingParameter = sqlCommandParameters.AddInt32( "@TrueHeading", trueHeading );
                var timestampParameter = sqlCommandParameters.AddInt32( "@Timestamp", timestamp );
                var maneuverIndicatorParameter = sqlCommandParameters.AddEnum( "@ManeuverIndicator", maneuverIndicator );
                var spareParameter = sqlCommandParameters.AddInt32( "@Spare", spare );
                var raimParameter = sqlCommandParameters.AddEnum( "@Raim", raim );
                var radioStatusParameter = sqlCommandParameters.AddInt32( "@RadioStatus", radioStatus );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    id = (Guid)idParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool UpdateAisPositionReportClassAResponseToInterrogationMessage( Guid id, ref long rowVersion, Guid aisDevice, DateTime receivedTimestamp, long messageSequenceNumber, int repeat, Guid mmsi, Types.NavigationStatus navigationStatus, int? rateOfTurn, double speedOverGround, Types.PositionAccuracy positionAccuracy, double longitude, double latitude, double courseOverGround, int? trueHeading, int timestamp, Types.ManeuverIndicator maneuverIndicator, int spare, Types.Raim raim, int radioStatus )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "AisPositionReportClassAResponseToInterrogationMessageUpdate";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion, System.Data.ParameterDirection.InputOutput );
                var aisDeviceParameter = sqlCommandParameters.AddReference( "@AisDevice", aisDevice );
                var receivedTimestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@ReceivedTimestamp", receivedTimestamp );
                var messageSequenceNumberParameter = sqlCommandParameters.AddInt64( "@MessageSequenceNumber", messageSequenceNumber );
                var repeatParameter = sqlCommandParameters.AddInt32( "@Repeat", repeat );
                var mmsiParameter = sqlCommandParameters.AddReference( "@Mmsi", mmsi );
                var navigationStatusParameter = sqlCommandParameters.AddEnum( "@NavigationStatus", navigationStatus );
                var rateOfTurnParameter = sqlCommandParameters.AddInt32( "@RateOfTurn", rateOfTurn );
                var speedOverGroundParameter = sqlCommandParameters.AddDouble( "@SpeedOverGround", speedOverGround );
                var positionAccuracyParameter = sqlCommandParameters.AddEnum( "@PositionAccuracy", positionAccuracy );
                var longitudeParameter = sqlCommandParameters.AddDouble( "@Longitude", longitude );
                var latitudeParameter = sqlCommandParameters.AddDouble( "@Latitude", latitude );
                var courseOverGroundParameter = sqlCommandParameters.AddDouble( "@CourseOverGround", courseOverGround );
                var trueHeadingParameter = sqlCommandParameters.AddInt32( "@TrueHeading", trueHeading );
                var timestampParameter = sqlCommandParameters.AddInt32( "@Timestamp", timestamp );
                var maneuverIndicatorParameter = sqlCommandParameters.AddEnum( "@ManeuverIndicator", maneuverIndicator );
                var spareParameter = sqlCommandParameters.AddInt32( "@Spare", spare );
                var raimParameter = sqlCommandParameters.AddEnum( "@Raim", raim );
                var radioStatusParameter = sqlCommandParameters.AddInt32( "@RadioStatus", radioStatus );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    rowVersion = (long)rowVersionParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool DeleteAisPositionReportClassAResponseToInterrogationMessage( Guid id, long rowVersion )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "AisPositionReportClassAResponseToInterrogationMessageDelete";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool InsertAisPositionReportForLongRangeApplicationsMessage( ref Guid id, Guid aisDevice, DateTime receivedTimestamp, long messageSequenceNumber, int repeat, Guid mmsi, Types.PositionAccuracy positionAccuracy, Types.Raim raim, Types.NavigationStatus navigationStatus, double longitude, double latitude, double speedOverGround, double courseOverGround, Types.GnssPositionStatus gnssPositionStatus, int spare )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "AisPositionReportForLongRangeApplicationsMessageInsert";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id, System.Data.ParameterDirection.InputOutput );
                var aisDeviceParameter = sqlCommandParameters.AddReference( "@AisDevice", aisDevice );
                var receivedTimestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@ReceivedTimestamp", receivedTimestamp );
                var messageSequenceNumberParameter = sqlCommandParameters.AddInt64( "@MessageSequenceNumber", messageSequenceNumber );
                var repeatParameter = sqlCommandParameters.AddInt32( "@Repeat", repeat );
                var mmsiParameter = sqlCommandParameters.AddReference( "@Mmsi", mmsi );
                var positionAccuracyParameter = sqlCommandParameters.AddEnum( "@PositionAccuracy", positionAccuracy );
                var raimParameter = sqlCommandParameters.AddEnum( "@Raim", raim );
                var navigationStatusParameter = sqlCommandParameters.AddEnum( "@NavigationStatus", navigationStatus );
                var longitudeParameter = sqlCommandParameters.AddDouble( "@Longitude", longitude );
                var latitudeParameter = sqlCommandParameters.AddDouble( "@Latitude", latitude );
                var speedOverGroundParameter = sqlCommandParameters.AddDouble( "@SpeedOverGround", speedOverGround );
                var courseOverGroundParameter = sqlCommandParameters.AddDouble( "@CourseOverGround", courseOverGround );
                var gnssPositionStatusParameter = sqlCommandParameters.AddEnum( "@GnssPositionStatus", gnssPositionStatus );
                var spareParameter = sqlCommandParameters.AddInt32( "@Spare", spare );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    id = (Guid)idParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool UpdateAisPositionReportForLongRangeApplicationsMessage( Guid id, ref long rowVersion, Guid aisDevice, DateTime receivedTimestamp, long messageSequenceNumber, int repeat, Guid mmsi, Types.PositionAccuracy positionAccuracy, Types.Raim raim, Types.NavigationStatus navigationStatus, double longitude, double latitude, double speedOverGround, double courseOverGround, Types.GnssPositionStatus gnssPositionStatus, int spare )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "AisPositionReportForLongRangeApplicationsMessageUpdate";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion, System.Data.ParameterDirection.InputOutput );
                var aisDeviceParameter = sqlCommandParameters.AddReference( "@AisDevice", aisDevice );
                var receivedTimestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@ReceivedTimestamp", receivedTimestamp );
                var messageSequenceNumberParameter = sqlCommandParameters.AddInt64( "@MessageSequenceNumber", messageSequenceNumber );
                var repeatParameter = sqlCommandParameters.AddInt32( "@Repeat", repeat );
                var mmsiParameter = sqlCommandParameters.AddReference( "@Mmsi", mmsi );
                var positionAccuracyParameter = sqlCommandParameters.AddEnum( "@PositionAccuracy", positionAccuracy );
                var raimParameter = sqlCommandParameters.AddEnum( "@Raim", raim );
                var navigationStatusParameter = sqlCommandParameters.AddEnum( "@NavigationStatus", navigationStatus );
                var longitudeParameter = sqlCommandParameters.AddDouble( "@Longitude", longitude );
                var latitudeParameter = sqlCommandParameters.AddDouble( "@Latitude", latitude );
                var speedOverGroundParameter = sqlCommandParameters.AddDouble( "@SpeedOverGround", speedOverGround );
                var courseOverGroundParameter = sqlCommandParameters.AddDouble( "@CourseOverGround", courseOverGround );
                var gnssPositionStatusParameter = sqlCommandParameters.AddEnum( "@GnssPositionStatus", gnssPositionStatus );
                var spareParameter = sqlCommandParameters.AddInt32( "@Spare", spare );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    rowVersion = (long)rowVersionParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool DeleteAisPositionReportForLongRangeApplicationsMessage( Guid id, long rowVersion )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "AisPositionReportForLongRangeApplicationsMessageDelete";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool InsertAisSafetyRelatedAcknowledgmentMessage( ref Guid id, Guid aisDevice, DateTime receivedTimestamp, long messageSequenceNumber, int repeat, Guid mmsi, int spare, int sequenceNumber1, Guid mmsi1, int? sequenceNumber2, Guid? mmsi2, int? sequenceNumber3, Guid? mmsi3, int? sequenceNumber4, Guid? mmsi4 )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "AisSafetyRelatedAcknowledgmentMessageInsert";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id, System.Data.ParameterDirection.InputOutput );
                var aisDeviceParameter = sqlCommandParameters.AddReference( "@AisDevice", aisDevice );
                var receivedTimestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@ReceivedTimestamp", receivedTimestamp );
                var messageSequenceNumberParameter = sqlCommandParameters.AddInt64( "@MessageSequenceNumber", messageSequenceNumber );
                var repeatParameter = sqlCommandParameters.AddInt32( "@Repeat", repeat );
                var mmsiParameter = sqlCommandParameters.AddReference( "@Mmsi", mmsi );
                var spareParameter = sqlCommandParameters.AddInt32( "@Spare", spare );
                var sequenceNumber1Parameter = sqlCommandParameters.AddInt32( "@SequenceNumber1", sequenceNumber1 );
                var mmsi1Parameter = sqlCommandParameters.AddReference( "@Mmsi1", mmsi1 );
                var sequenceNumber2Parameter = sqlCommandParameters.AddInt32( "@SequenceNumber2", sequenceNumber2 );
                var mmsi2Parameter = sqlCommandParameters.AddReference( "@Mmsi2", mmsi2 );
                var sequenceNumber3Parameter = sqlCommandParameters.AddInt32( "@SequenceNumber3", sequenceNumber3 );
                var mmsi3Parameter = sqlCommandParameters.AddReference( "@Mmsi3", mmsi3 );
                var sequenceNumber4Parameter = sqlCommandParameters.AddInt32( "@SequenceNumber4", sequenceNumber4 );
                var mmsi4Parameter = sqlCommandParameters.AddReference( "@Mmsi4", mmsi4 );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    id = (Guid)idParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool UpdateAisSafetyRelatedAcknowledgmentMessage( Guid id, ref long rowVersion, Guid aisDevice, DateTime receivedTimestamp, long messageSequenceNumber, int repeat, Guid mmsi, int spare, int sequenceNumber1, Guid mmsi1, int? sequenceNumber2, Guid? mmsi2, int? sequenceNumber3, Guid? mmsi3, int? sequenceNumber4, Guid? mmsi4 )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "AisSafetyRelatedAcknowledgmentMessageUpdate";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion, System.Data.ParameterDirection.InputOutput );
                var aisDeviceParameter = sqlCommandParameters.AddReference( "@AisDevice", aisDevice );
                var receivedTimestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@ReceivedTimestamp", receivedTimestamp );
                var messageSequenceNumberParameter = sqlCommandParameters.AddInt64( "@MessageSequenceNumber", messageSequenceNumber );
                var repeatParameter = sqlCommandParameters.AddInt32( "@Repeat", repeat );
                var mmsiParameter = sqlCommandParameters.AddReference( "@Mmsi", mmsi );
                var spareParameter = sqlCommandParameters.AddInt32( "@Spare", spare );
                var sequenceNumber1Parameter = sqlCommandParameters.AddInt32( "@SequenceNumber1", sequenceNumber1 );
                var mmsi1Parameter = sqlCommandParameters.AddReference( "@Mmsi1", mmsi1 );
                var sequenceNumber2Parameter = sqlCommandParameters.AddInt32( "@SequenceNumber2", sequenceNumber2 );
                var mmsi2Parameter = sqlCommandParameters.AddReference( "@Mmsi2", mmsi2 );
                var sequenceNumber3Parameter = sqlCommandParameters.AddInt32( "@SequenceNumber3", sequenceNumber3 );
                var mmsi3Parameter = sqlCommandParameters.AddReference( "@Mmsi3", mmsi3 );
                var sequenceNumber4Parameter = sqlCommandParameters.AddInt32( "@SequenceNumber4", sequenceNumber4 );
                var mmsi4Parameter = sqlCommandParameters.AddReference( "@Mmsi4", mmsi4 );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    rowVersion = (long)rowVersionParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool DeleteAisSafetyRelatedAcknowledgmentMessage( Guid id, long rowVersion )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "AisSafetyRelatedAcknowledgmentMessageDelete";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool InsertAisStandardClassBCsPositionReportMessage( ref Guid id, Guid aisDevice, DateTime receivedTimestamp, long messageSequenceNumber, int repeat, Guid mmsi, int reserved, double speedOverGround, Types.PositionAccuracy positionAccuracy, double longitude, double latitude, double courseOverGround, int? trueHeading, int timestamp, int regionalReserved, bool isCsUnit, bool hasDisplay, bool hasDscCapability, bool band, bool canAcceptMessage22, bool assigned, Types.Raim raim, int radioStatus )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "AisStandardClassBCsPositionReportMessageInsert";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id, System.Data.ParameterDirection.InputOutput );
                var aisDeviceParameter = sqlCommandParameters.AddReference( "@AisDevice", aisDevice );
                var receivedTimestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@ReceivedTimestamp", receivedTimestamp );
                var messageSequenceNumberParameter = sqlCommandParameters.AddInt64( "@MessageSequenceNumber", messageSequenceNumber );
                var repeatParameter = sqlCommandParameters.AddInt32( "@Repeat", repeat );
                var mmsiParameter = sqlCommandParameters.AddReference( "@Mmsi", mmsi );
                var reservedParameter = sqlCommandParameters.AddInt32( "@Reserved", reserved );
                var speedOverGroundParameter = sqlCommandParameters.AddDouble( "@SpeedOverGround", speedOverGround );
                var positionAccuracyParameter = sqlCommandParameters.AddEnum( "@PositionAccuracy", positionAccuracy );
                var longitudeParameter = sqlCommandParameters.AddDouble( "@Longitude", longitude );
                var latitudeParameter = sqlCommandParameters.AddDouble( "@Latitude", latitude );
                var courseOverGroundParameter = sqlCommandParameters.AddDouble( "@CourseOverGround", courseOverGround );
                var trueHeadingParameter = sqlCommandParameters.AddInt32( "@TrueHeading", trueHeading );
                var timestampParameter = sqlCommandParameters.AddInt32( "@Timestamp", timestamp );
                var regionalReservedParameter = sqlCommandParameters.AddInt32( "@RegionalReserved", regionalReserved );
                var isCsUnitParameter = sqlCommandParameters.AddBoolean( "@IsCsUnit", isCsUnit );
                var hasDisplayParameter = sqlCommandParameters.AddBoolean( "@HasDisplay", hasDisplay );
                var hasDscCapabilityParameter = sqlCommandParameters.AddBoolean( "@HasDscCapability", hasDscCapability );
                var bandParameter = sqlCommandParameters.AddBoolean( "@Band", band );
                var canAcceptMessage22Parameter = sqlCommandParameters.AddBoolean( "@CanAcceptMessage22", canAcceptMessage22 );
                var assignedParameter = sqlCommandParameters.AddBoolean( "@Assigned", assigned );
                var raimParameter = sqlCommandParameters.AddEnum( "@Raim", raim );
                var radioStatusParameter = sqlCommandParameters.AddInt32( "@RadioStatus", radioStatus );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    id = (Guid)idParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool UpdateAisStandardClassBCsPositionReportMessage( Guid id, ref long rowVersion, Guid aisDevice, DateTime receivedTimestamp, long messageSequenceNumber, int repeat, Guid mmsi, int reserved, double speedOverGround, Types.PositionAccuracy positionAccuracy, double longitude, double latitude, double courseOverGround, int? trueHeading, int timestamp, int regionalReserved, bool isCsUnit, bool hasDisplay, bool hasDscCapability, bool band, bool canAcceptMessage22, bool assigned, Types.Raim raim, int radioStatus )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "AisStandardClassBCsPositionReportMessageUpdate";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion, System.Data.ParameterDirection.InputOutput );
                var aisDeviceParameter = sqlCommandParameters.AddReference( "@AisDevice", aisDevice );
                var receivedTimestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@ReceivedTimestamp", receivedTimestamp );
                var messageSequenceNumberParameter = sqlCommandParameters.AddInt64( "@MessageSequenceNumber", messageSequenceNumber );
                var repeatParameter = sqlCommandParameters.AddInt32( "@Repeat", repeat );
                var mmsiParameter = sqlCommandParameters.AddReference( "@Mmsi", mmsi );
                var reservedParameter = sqlCommandParameters.AddInt32( "@Reserved", reserved );
                var speedOverGroundParameter = sqlCommandParameters.AddDouble( "@SpeedOverGround", speedOverGround );
                var positionAccuracyParameter = sqlCommandParameters.AddEnum( "@PositionAccuracy", positionAccuracy );
                var longitudeParameter = sqlCommandParameters.AddDouble( "@Longitude", longitude );
                var latitudeParameter = sqlCommandParameters.AddDouble( "@Latitude", latitude );
                var courseOverGroundParameter = sqlCommandParameters.AddDouble( "@CourseOverGround", courseOverGround );
                var trueHeadingParameter = sqlCommandParameters.AddInt32( "@TrueHeading", trueHeading );
                var timestampParameter = sqlCommandParameters.AddInt32( "@Timestamp", timestamp );
                var regionalReservedParameter = sqlCommandParameters.AddInt32( "@RegionalReserved", regionalReserved );
                var isCsUnitParameter = sqlCommandParameters.AddBoolean( "@IsCsUnit", isCsUnit );
                var hasDisplayParameter = sqlCommandParameters.AddBoolean( "@HasDisplay", hasDisplay );
                var hasDscCapabilityParameter = sqlCommandParameters.AddBoolean( "@HasDscCapability", hasDscCapability );
                var bandParameter = sqlCommandParameters.AddBoolean( "@Band", band );
                var canAcceptMessage22Parameter = sqlCommandParameters.AddBoolean( "@CanAcceptMessage22", canAcceptMessage22 );
                var assignedParameter = sqlCommandParameters.AddBoolean( "@Assigned", assigned );
                var raimParameter = sqlCommandParameters.AddEnum( "@Raim", raim );
                var radioStatusParameter = sqlCommandParameters.AddInt32( "@RadioStatus", radioStatus );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    rowVersion = (long)rowVersionParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool DeleteAisStandardClassBCsPositionReportMessage( Guid id, long rowVersion )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "AisStandardClassBCsPositionReportMessageDelete";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool InsertAisStandardSarAircraftPositionReportMessage( ref Guid id, Guid aisDevice, DateTime receivedTimestamp, long messageSequenceNumber, int repeat, Guid mmsi, int altitude, int speedOverGround, Types.PositionAccuracy positionAccuracy, double longitude, double latitude, double courseOverGround, int timestamp, int reserved, bool dataTerminalReady, int spare, bool assigned, Types.Raim raim, int radioStatus )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "AisStandardSarAircraftPositionReportMessageInsert";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id, System.Data.ParameterDirection.InputOutput );
                var aisDeviceParameter = sqlCommandParameters.AddReference( "@AisDevice", aisDevice );
                var receivedTimestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@ReceivedTimestamp", receivedTimestamp );
                var messageSequenceNumberParameter = sqlCommandParameters.AddInt64( "@MessageSequenceNumber", messageSequenceNumber );
                var repeatParameter = sqlCommandParameters.AddInt32( "@Repeat", repeat );
                var mmsiParameter = sqlCommandParameters.AddReference( "@Mmsi", mmsi );
                var altitudeParameter = sqlCommandParameters.AddInt32( "@Altitude", altitude );
                var speedOverGroundParameter = sqlCommandParameters.AddInt32( "@SpeedOverGround", speedOverGround );
                var positionAccuracyParameter = sqlCommandParameters.AddEnum( "@PositionAccuracy", positionAccuracy );
                var longitudeParameter = sqlCommandParameters.AddDouble( "@Longitude", longitude );
                var latitudeParameter = sqlCommandParameters.AddDouble( "@Latitude", latitude );
                var courseOverGroundParameter = sqlCommandParameters.AddDouble( "@CourseOverGround", courseOverGround );
                var timestampParameter = sqlCommandParameters.AddInt32( "@Timestamp", timestamp );
                var reservedParameter = sqlCommandParameters.AddInt32( "@Reserved", reserved );
                var dataTerminalReadyParameter = sqlCommandParameters.AddBoolean( "@DataTerminalReady", dataTerminalReady );
                var spareParameter = sqlCommandParameters.AddInt32( "@Spare", spare );
                var assignedParameter = sqlCommandParameters.AddBoolean( "@Assigned", assigned );
                var raimParameter = sqlCommandParameters.AddEnum( "@Raim", raim );
                var radioStatusParameter = sqlCommandParameters.AddInt32( "@RadioStatus", radioStatus );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    id = (Guid)idParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool UpdateAisStandardSarAircraftPositionReportMessage( Guid id, ref long rowVersion, Guid aisDevice, DateTime receivedTimestamp, long messageSequenceNumber, int repeat, Guid mmsi, int altitude, int speedOverGround, Types.PositionAccuracy positionAccuracy, double longitude, double latitude, double courseOverGround, int timestamp, int reserved, bool dataTerminalReady, int spare, bool assigned, Types.Raim raim, int radioStatus )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "AisStandardSarAircraftPositionReportMessageUpdate";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion, System.Data.ParameterDirection.InputOutput );
                var aisDeviceParameter = sqlCommandParameters.AddReference( "@AisDevice", aisDevice );
                var receivedTimestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@ReceivedTimestamp", receivedTimestamp );
                var messageSequenceNumberParameter = sqlCommandParameters.AddInt64( "@MessageSequenceNumber", messageSequenceNumber );
                var repeatParameter = sqlCommandParameters.AddInt32( "@Repeat", repeat );
                var mmsiParameter = sqlCommandParameters.AddReference( "@Mmsi", mmsi );
                var altitudeParameter = sqlCommandParameters.AddInt32( "@Altitude", altitude );
                var speedOverGroundParameter = sqlCommandParameters.AddInt32( "@SpeedOverGround", speedOverGround );
                var positionAccuracyParameter = sqlCommandParameters.AddEnum( "@PositionAccuracy", positionAccuracy );
                var longitudeParameter = sqlCommandParameters.AddDouble( "@Longitude", longitude );
                var latitudeParameter = sqlCommandParameters.AddDouble( "@Latitude", latitude );
                var courseOverGroundParameter = sqlCommandParameters.AddDouble( "@CourseOverGround", courseOverGround );
                var timestampParameter = sqlCommandParameters.AddInt32( "@Timestamp", timestamp );
                var reservedParameter = sqlCommandParameters.AddInt32( "@Reserved", reserved );
                var dataTerminalReadyParameter = sqlCommandParameters.AddBoolean( "@DataTerminalReady", dataTerminalReady );
                var spareParameter = sqlCommandParameters.AddInt32( "@Spare", spare );
                var assignedParameter = sqlCommandParameters.AddBoolean( "@Assigned", assigned );
                var raimParameter = sqlCommandParameters.AddEnum( "@Raim", raim );
                var radioStatusParameter = sqlCommandParameters.AddInt32( "@RadioStatus", radioStatus );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    rowVersion = (long)rowVersionParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool DeleteAisStandardSarAircraftPositionReportMessage( Guid id, long rowVersion )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "AisStandardSarAircraftPositionReportMessageDelete";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool InsertAisStaticAndVoyageRelatedDataMessage( ref Guid id, Guid aisDevice, DateTime receivedTimestamp, long messageSequenceNumber, int repeat, Guid mmsi, int aisVersion, Guid imoNumber, Guid callsign, Guid shipName, Types.ShipType shipType, int dimensionToBow, int dimensionToStern, int dimensionToPort, int dimensionToStarboard, Types.PositionFixType positionFixType, DateTime? estimatedTimeOfArrival, double draught, string destination, bool dataTerminalReady, int spare )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "AisStaticAndVoyageRelatedDataMessageInsert";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id, System.Data.ParameterDirection.InputOutput );
                var aisDeviceParameter = sqlCommandParameters.AddReference( "@AisDevice", aisDevice );
                var receivedTimestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@ReceivedTimestamp", receivedTimestamp );
                var messageSequenceNumberParameter = sqlCommandParameters.AddInt64( "@MessageSequenceNumber", messageSequenceNumber );
                var repeatParameter = sqlCommandParameters.AddInt32( "@Repeat", repeat );
                var mmsiParameter = sqlCommandParameters.AddReference( "@Mmsi", mmsi );
                var aisVersionParameter = sqlCommandParameters.AddInt32( "@AisVersion", aisVersion );
                var imoNumberParameter = sqlCommandParameters.AddReference( "@ImoNumber", imoNumber );
                var callsignParameter = sqlCommandParameters.AddReference( "@Callsign", callsign );
                var shipNameParameter = sqlCommandParameters.AddReference( "@ShipName", shipName );
                var shipTypeParameter = sqlCommandParameters.AddEnum( "@ShipType", shipType );
                var dimensionToBowParameter = sqlCommandParameters.AddInt32( "@DimensionToBow", dimensionToBow );
                var dimensionToSternParameter = sqlCommandParameters.AddInt32( "@DimensionToStern", dimensionToStern );
                var dimensionToPortParameter = sqlCommandParameters.AddInt32( "@DimensionToPort", dimensionToPort );
                var dimensionToStarboardParameter = sqlCommandParameters.AddInt32( "@DimensionToStarboard", dimensionToStarboard );
                var positionFixTypeParameter = sqlCommandParameters.AddEnum( "@PositionFixType", positionFixType );
                var estimatedTimeOfArrivalParameter = sqlCommandParameters.AddDateTimeAsInt64( "@EstimatedTimeOfArrival", estimatedTimeOfArrival );
                var draughtParameter = sqlCommandParameters.AddDouble( "@Draught", draught );
                var destinationParameter = sqlCommandParameters.AddNVarChar( "@Destination", destination, 127 );
                var dataTerminalReadyParameter = sqlCommandParameters.AddBoolean( "@DataTerminalReady", dataTerminalReady );
                var spareParameter = sqlCommandParameters.AddInt32( "@Spare", spare );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    id = (Guid)idParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool UpdateAisStaticAndVoyageRelatedDataMessage( Guid id, ref long rowVersion, Guid aisDevice, DateTime receivedTimestamp, long messageSequenceNumber, int repeat, Guid mmsi, int aisVersion, Guid imoNumber, Guid callsign, Guid shipName, Types.ShipType shipType, int dimensionToBow, int dimensionToStern, int dimensionToPort, int dimensionToStarboard, Types.PositionFixType positionFixType, DateTime? estimatedTimeOfArrival, double draught, string destination, bool dataTerminalReady, int spare )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "AisStaticAndVoyageRelatedDataMessageUpdate";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion, System.Data.ParameterDirection.InputOutput );
                var aisDeviceParameter = sqlCommandParameters.AddReference( "@AisDevice", aisDevice );
                var receivedTimestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@ReceivedTimestamp", receivedTimestamp );
                var messageSequenceNumberParameter = sqlCommandParameters.AddInt64( "@MessageSequenceNumber", messageSequenceNumber );
                var repeatParameter = sqlCommandParameters.AddInt32( "@Repeat", repeat );
                var mmsiParameter = sqlCommandParameters.AddReference( "@Mmsi", mmsi );
                var aisVersionParameter = sqlCommandParameters.AddInt32( "@AisVersion", aisVersion );
                var imoNumberParameter = sqlCommandParameters.AddReference( "@ImoNumber", imoNumber );
                var callsignParameter = sqlCommandParameters.AddReference( "@Callsign", callsign );
                var shipNameParameter = sqlCommandParameters.AddReference( "@ShipName", shipName );
                var shipTypeParameter = sqlCommandParameters.AddEnum( "@ShipType", shipType );
                var dimensionToBowParameter = sqlCommandParameters.AddInt32( "@DimensionToBow", dimensionToBow );
                var dimensionToSternParameter = sqlCommandParameters.AddInt32( "@DimensionToStern", dimensionToStern );
                var dimensionToPortParameter = sqlCommandParameters.AddInt32( "@DimensionToPort", dimensionToPort );
                var dimensionToStarboardParameter = sqlCommandParameters.AddInt32( "@DimensionToStarboard", dimensionToStarboard );
                var positionFixTypeParameter = sqlCommandParameters.AddEnum( "@PositionFixType", positionFixType );
                var estimatedTimeOfArrivalParameter = sqlCommandParameters.AddDateTimeAsInt64( "@EstimatedTimeOfArrival", estimatedTimeOfArrival );
                var draughtParameter = sqlCommandParameters.AddDouble( "@Draught", draught );
                var destinationParameter = sqlCommandParameters.AddNVarChar( "@Destination", destination, 127 );
                var dataTerminalReadyParameter = sqlCommandParameters.AddBoolean( "@DataTerminalReady", dataTerminalReady );
                var spareParameter = sqlCommandParameters.AddInt32( "@Spare", spare );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    rowVersion = (long)rowVersionParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool DeleteAisStaticAndVoyageRelatedDataMessage( Guid id, long rowVersion )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "AisStaticAndVoyageRelatedDataMessageDelete";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool InsertAisStaticDataReportMessage( ref Guid id, Guid aisDevice, DateTime receivedTimestamp, long messageSequenceNumber, int repeat, Guid mmsi, int partNumber )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "AisStaticDataReportMessageInsert";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id, System.Data.ParameterDirection.InputOutput );
                var aisDeviceParameter = sqlCommandParameters.AddReference( "@AisDevice", aisDevice );
                var receivedTimestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@ReceivedTimestamp", receivedTimestamp );
                var messageSequenceNumberParameter = sqlCommandParameters.AddInt64( "@MessageSequenceNumber", messageSequenceNumber );
                var repeatParameter = sqlCommandParameters.AddInt32( "@Repeat", repeat );
                var mmsiParameter = sqlCommandParameters.AddReference( "@Mmsi", mmsi );
                var partNumberParameter = sqlCommandParameters.AddInt32( "@PartNumber", partNumber );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    id = (Guid)idParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool UpdateAisStaticDataReportMessage( Guid id, ref long rowVersion, Guid aisDevice, DateTime receivedTimestamp, long messageSequenceNumber, int repeat, Guid mmsi, int partNumber )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "AisStaticDataReportMessageUpdate";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion, System.Data.ParameterDirection.InputOutput );
                var aisDeviceParameter = sqlCommandParameters.AddReference( "@AisDevice", aisDevice );
                var receivedTimestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@ReceivedTimestamp", receivedTimestamp );
                var messageSequenceNumberParameter = sqlCommandParameters.AddInt64( "@MessageSequenceNumber", messageSequenceNumber );
                var repeatParameter = sqlCommandParameters.AddInt32( "@Repeat", repeat );
                var mmsiParameter = sqlCommandParameters.AddReference( "@Mmsi", mmsi );
                var partNumberParameter = sqlCommandParameters.AddInt32( "@PartNumber", partNumber );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    rowVersion = (long)rowVersionParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool DeleteAisStaticDataReportMessage( Guid id, long rowVersion )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "AisStaticDataReportMessageDelete";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool InsertAisStaticDataReportPartAMessage( ref Guid id, Guid aisDevice, DateTime receivedTimestamp, long messageSequenceNumber, int repeat, Guid mmsi, int partNumber, Guid shipName, int spare )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "AisStaticDataReportPartAMessageInsert";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id, System.Data.ParameterDirection.InputOutput );
                var aisDeviceParameter = sqlCommandParameters.AddReference( "@AisDevice", aisDevice );
                var receivedTimestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@ReceivedTimestamp", receivedTimestamp );
                var messageSequenceNumberParameter = sqlCommandParameters.AddInt64( "@MessageSequenceNumber", messageSequenceNumber );
                var repeatParameter = sqlCommandParameters.AddInt32( "@Repeat", repeat );
                var mmsiParameter = sqlCommandParameters.AddReference( "@Mmsi", mmsi );
                var partNumberParameter = sqlCommandParameters.AddInt32( "@PartNumber", partNumber );
                var shipNameParameter = sqlCommandParameters.AddReference( "@ShipName", shipName );
                var spareParameter = sqlCommandParameters.AddInt32( "@Spare", spare );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    id = (Guid)idParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool UpdateAisStaticDataReportPartAMessage( Guid id, ref long rowVersion, Guid aisDevice, DateTime receivedTimestamp, long messageSequenceNumber, int repeat, Guid mmsi, int partNumber, Guid shipName, int spare )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "AisStaticDataReportPartAMessageUpdate";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion, System.Data.ParameterDirection.InputOutput );
                var aisDeviceParameter = sqlCommandParameters.AddReference( "@AisDevice", aisDevice );
                var receivedTimestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@ReceivedTimestamp", receivedTimestamp );
                var messageSequenceNumberParameter = sqlCommandParameters.AddInt64( "@MessageSequenceNumber", messageSequenceNumber );
                var repeatParameter = sqlCommandParameters.AddInt32( "@Repeat", repeat );
                var mmsiParameter = sqlCommandParameters.AddReference( "@Mmsi", mmsi );
                var partNumberParameter = sqlCommandParameters.AddInt32( "@PartNumber", partNumber );
                var shipNameParameter = sqlCommandParameters.AddReference( "@ShipName", shipName );
                var spareParameter = sqlCommandParameters.AddInt32( "@Spare", spare );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    rowVersion = (long)rowVersionParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool DeleteAisStaticDataReportPartAMessage( Guid id, long rowVersion )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "AisStaticDataReportPartAMessageDelete";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool InsertAisStaticDataReportPartBMessage( ref Guid id, Guid aisDevice, DateTime receivedTimestamp, long messageSequenceNumber, int repeat, Guid mmsi, int partNumber, Types.ShipType shipType, string vendorId, int unitModelCode, int serialNumber, Guid callsign, int dimensionToBow, int dimensionToStern, int dimensionToPort, int dimensionToStarboard, Guid? mothershipMmsi, Types.PositionFixType positionFixType, int spare )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "AisStaticDataReportPartBMessageInsert";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id, System.Data.ParameterDirection.InputOutput );
                var aisDeviceParameter = sqlCommandParameters.AddReference( "@AisDevice", aisDevice );
                var receivedTimestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@ReceivedTimestamp", receivedTimestamp );
                var messageSequenceNumberParameter = sqlCommandParameters.AddInt64( "@MessageSequenceNumber", messageSequenceNumber );
                var repeatParameter = sqlCommandParameters.AddInt32( "@Repeat", repeat );
                var mmsiParameter = sqlCommandParameters.AddReference( "@Mmsi", mmsi );
                var partNumberParameter = sqlCommandParameters.AddInt32( "@PartNumber", partNumber );
                var shipTypeParameter = sqlCommandParameters.AddEnum( "@ShipType", shipType );
                var vendorIdParameter = sqlCommandParameters.AddNVarChar( "@VendorId", vendorId, 127 );
                var unitModelCodeParameter = sqlCommandParameters.AddInt32( "@UnitModelCode", unitModelCode );
                var serialNumberParameter = sqlCommandParameters.AddInt32( "@SerialNumber", serialNumber );
                var callsignParameter = sqlCommandParameters.AddReference( "@Callsign", callsign );
                var dimensionToBowParameter = sqlCommandParameters.AddInt32( "@DimensionToBow", dimensionToBow );
                var dimensionToSternParameter = sqlCommandParameters.AddInt32( "@DimensionToStern", dimensionToStern );
                var dimensionToPortParameter = sqlCommandParameters.AddInt32( "@DimensionToPort", dimensionToPort );
                var dimensionToStarboardParameter = sqlCommandParameters.AddInt32( "@DimensionToStarboard", dimensionToStarboard );
                var mothershipMmsiParameter = sqlCommandParameters.AddReference( "@MothershipMmsi", mothershipMmsi );
                var positionFixTypeParameter = sqlCommandParameters.AddEnum( "@PositionFixType", positionFixType );
                var spareParameter = sqlCommandParameters.AddInt32( "@Spare", spare );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    id = (Guid)idParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool UpdateAisStaticDataReportPartBMessage( Guid id, ref long rowVersion, Guid aisDevice, DateTime receivedTimestamp, long messageSequenceNumber, int repeat, Guid mmsi, int partNumber, Types.ShipType shipType, string vendorId, int unitModelCode, int serialNumber, Guid callsign, int dimensionToBow, int dimensionToStern, int dimensionToPort, int dimensionToStarboard, Guid? mothershipMmsi, Types.PositionFixType positionFixType, int spare )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "AisStaticDataReportPartBMessageUpdate";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion, System.Data.ParameterDirection.InputOutput );
                var aisDeviceParameter = sqlCommandParameters.AddReference( "@AisDevice", aisDevice );
                var receivedTimestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@ReceivedTimestamp", receivedTimestamp );
                var messageSequenceNumberParameter = sqlCommandParameters.AddInt64( "@MessageSequenceNumber", messageSequenceNumber );
                var repeatParameter = sqlCommandParameters.AddInt32( "@Repeat", repeat );
                var mmsiParameter = sqlCommandParameters.AddReference( "@Mmsi", mmsi );
                var partNumberParameter = sqlCommandParameters.AddInt32( "@PartNumber", partNumber );
                var shipTypeParameter = sqlCommandParameters.AddEnum( "@ShipType", shipType );
                var vendorIdParameter = sqlCommandParameters.AddNVarChar( "@VendorId", vendorId, 127 );
                var unitModelCodeParameter = sqlCommandParameters.AddInt32( "@UnitModelCode", unitModelCode );
                var serialNumberParameter = sqlCommandParameters.AddInt32( "@SerialNumber", serialNumber );
                var callsignParameter = sqlCommandParameters.AddReference( "@Callsign", callsign );
                var dimensionToBowParameter = sqlCommandParameters.AddInt32( "@DimensionToBow", dimensionToBow );
                var dimensionToSternParameter = sqlCommandParameters.AddInt32( "@DimensionToStern", dimensionToStern );
                var dimensionToPortParameter = sqlCommandParameters.AddInt32( "@DimensionToPort", dimensionToPort );
                var dimensionToStarboardParameter = sqlCommandParameters.AddInt32( "@DimensionToStarboard", dimensionToStarboard );
                var mothershipMmsiParameter = sqlCommandParameters.AddReference( "@MothershipMmsi", mothershipMmsi );
                var positionFixTypeParameter = sqlCommandParameters.AddEnum( "@PositionFixType", positionFixType );
                var spareParameter = sqlCommandParameters.AddInt32( "@Spare", spare );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    rowVersion = (long)rowVersionParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool DeleteAisStaticDataReportPartBMessage( Guid id, long rowVersion )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "AisStaticDataReportPartBMessageDelete";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool InsertAisUtcAndDateInquiryMessage( ref Guid id, Guid aisDevice, DateTime receivedTimestamp, long messageSequenceNumber, int repeat, Guid mmsi, int spare1, int destinationMmsi, int spare2 )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "AisUtcAndDateInquiryMessageInsert";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id, System.Data.ParameterDirection.InputOutput );
                var aisDeviceParameter = sqlCommandParameters.AddReference( "@AisDevice", aisDevice );
                var receivedTimestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@ReceivedTimestamp", receivedTimestamp );
                var messageSequenceNumberParameter = sqlCommandParameters.AddInt64( "@MessageSequenceNumber", messageSequenceNumber );
                var repeatParameter = sqlCommandParameters.AddInt32( "@Repeat", repeat );
                var mmsiParameter = sqlCommandParameters.AddReference( "@Mmsi", mmsi );
                var spare1Parameter = sqlCommandParameters.AddInt32( "@Spare1", spare1 );
                var destinationMmsiParameter = sqlCommandParameters.AddInt32( "@DestinationMmsi", destinationMmsi );
                var spare2Parameter = sqlCommandParameters.AddInt32( "@Spare2", spare2 );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    id = (Guid)idParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool UpdateAisUtcAndDateInquiryMessage( Guid id, ref long rowVersion, Guid aisDevice, DateTime receivedTimestamp, long messageSequenceNumber, int repeat, Guid mmsi, int spare1, int destinationMmsi, int spare2 )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "AisUtcAndDateInquiryMessageUpdate";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion, System.Data.ParameterDirection.InputOutput );
                var aisDeviceParameter = sqlCommandParameters.AddReference( "@AisDevice", aisDevice );
                var receivedTimestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@ReceivedTimestamp", receivedTimestamp );
                var messageSequenceNumberParameter = sqlCommandParameters.AddInt64( "@MessageSequenceNumber", messageSequenceNumber );
                var repeatParameter = sqlCommandParameters.AddInt32( "@Repeat", repeat );
                var mmsiParameter = sqlCommandParameters.AddReference( "@Mmsi", mmsi );
                var spare1Parameter = sqlCommandParameters.AddInt32( "@Spare1", spare1 );
                var destinationMmsiParameter = sqlCommandParameters.AddInt32( "@DestinationMmsi", destinationMmsi );
                var spare2Parameter = sqlCommandParameters.AddInt32( "@Spare2", spare2 );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    rowVersion = (long)rowVersionParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool DeleteAisUtcAndDateInquiryMessage( Guid id, long rowVersion )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "AisUtcAndDateInquiryMessageDelete";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool InsertAisUtcAndDateResponseMessage( ref Guid id, Guid aisDevice, DateTime receivedTimestamp, long messageSequenceNumber, int repeat, Guid mmsi, DateTime datetime, Types.PositionAccuracy positionAccuracy, double longitude, double latitude, Types.PositionFixType positionFixType, int spare, Types.Raim raim, int radioStatus )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "AisUtcAndDateResponseMessageInsert";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id, System.Data.ParameterDirection.InputOutput );
                var aisDeviceParameter = sqlCommandParameters.AddReference( "@AisDevice", aisDevice );
                var receivedTimestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@ReceivedTimestamp", receivedTimestamp );
                var messageSequenceNumberParameter = sqlCommandParameters.AddInt64( "@MessageSequenceNumber", messageSequenceNumber );
                var repeatParameter = sqlCommandParameters.AddInt32( "@Repeat", repeat );
                var mmsiParameter = sqlCommandParameters.AddReference( "@Mmsi", mmsi );
                var datetimeParameter = sqlCommandParameters.AddDateTimeAsInt64( "@Datetime", datetime );
                var positionAccuracyParameter = sqlCommandParameters.AddEnum( "@PositionAccuracy", positionAccuracy );
                var longitudeParameter = sqlCommandParameters.AddDouble( "@Longitude", longitude );
                var latitudeParameter = sqlCommandParameters.AddDouble( "@Latitude", latitude );
                var positionFixTypeParameter = sqlCommandParameters.AddEnum( "@PositionFixType", positionFixType );
                var spareParameter = sqlCommandParameters.AddInt32( "@Spare", spare );
                var raimParameter = sqlCommandParameters.AddEnum( "@Raim", raim );
                var radioStatusParameter = sqlCommandParameters.AddInt32( "@RadioStatus", radioStatus );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    id = (Guid)idParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool UpdateAisUtcAndDateResponseMessage( Guid id, ref long rowVersion, Guid aisDevice, DateTime receivedTimestamp, long messageSequenceNumber, int repeat, Guid mmsi, DateTime datetime, Types.PositionAccuracy positionAccuracy, double longitude, double latitude, Types.PositionFixType positionFixType, int spare, Types.Raim raim, int radioStatus )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "AisUtcAndDateResponseMessageUpdate";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion, System.Data.ParameterDirection.InputOutput );
                var aisDeviceParameter = sqlCommandParameters.AddReference( "@AisDevice", aisDevice );
                var receivedTimestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@ReceivedTimestamp", receivedTimestamp );
                var messageSequenceNumberParameter = sqlCommandParameters.AddInt64( "@MessageSequenceNumber", messageSequenceNumber );
                var repeatParameter = sqlCommandParameters.AddInt32( "@Repeat", repeat );
                var mmsiParameter = sqlCommandParameters.AddReference( "@Mmsi", mmsi );
                var datetimeParameter = sqlCommandParameters.AddDateTimeAsInt64( "@Datetime", datetime );
                var positionAccuracyParameter = sqlCommandParameters.AddEnum( "@PositionAccuracy", positionAccuracy );
                var longitudeParameter = sqlCommandParameters.AddDouble( "@Longitude", longitude );
                var latitudeParameter = sqlCommandParameters.AddDouble( "@Latitude", latitude );
                var positionFixTypeParameter = sqlCommandParameters.AddEnum( "@PositionFixType", positionFixType );
                var spareParameter = sqlCommandParameters.AddInt32( "@Spare", spare );
                var raimParameter = sqlCommandParameters.AddEnum( "@Raim", raim );
                var radioStatusParameter = sqlCommandParameters.AddInt32( "@RadioStatus", radioStatus );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    rowVersion = (long)rowVersionParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool DeleteAisUtcAndDateResponseMessage( Guid id, long rowVersion )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "AisUtcAndDateResponseMessageDelete";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool InsertAlarmStateChange( ref Guid id, Guid alarm, DateTime timestamp, Types.AlarmState state )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "AlarmStateChangeInsert";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id, System.Data.ParameterDirection.InputOutput );
                var alarmParameter = sqlCommandParameters.AddReference( "@Alarm", alarm );
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@Timestamp", timestamp );
                var stateParameter = sqlCommandParameters.AddEnum( "@State", state );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    id = (Guid)idParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool UpdateAlarmStateChange( Guid id, ref long rowVersion, Guid alarm, DateTime timestamp, Types.AlarmState state )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "AlarmStateChangeUpdate";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion, System.Data.ParameterDirection.InputOutput );
                var alarmParameter = sqlCommandParameters.AddReference( "@Alarm", alarm );
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@Timestamp", timestamp );
                var stateParameter = sqlCommandParameters.AddEnum( "@State", state );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    rowVersion = (long)rowVersionParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool DeleteAlarmStateChange( Guid id, long rowVersion )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "AlarmStateChangeDelete";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool InsertBaseStationType( ref Guid id, string name )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "BaseStationTypeInsert";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id, System.Data.ParameterDirection.InputOutput );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@Name", name, 127 );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    id = (Guid)idParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool UpdateBaseStationType( Guid id, ref long rowVersion, string name )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "BaseStationTypeUpdate";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion, System.Data.ParameterDirection.InputOutput );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@Name", name, 127 );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    rowVersion = (long)rowVersionParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool DeleteBaseStationType( Guid id, long rowVersion )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "BaseStationTypeDelete";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool InsertBinaryTimeseriesValue( ref Guid id, Guid timeseries, DateTime timestamp, byte[] value__ )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "BinaryTimeseriesValueInsert";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id, System.Data.ParameterDirection.InputOutput );
                var timeseriesParameter = sqlCommandParameters.AddReference( "@Timeseries", timeseries );
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@Timestamp", timestamp );
                var valueParameter = sqlCommandParameters.AddBinary( "@Value", value__, 0 );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    id = (Guid)idParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool UpdateBinaryTimeseriesValue( Guid id, ref long rowVersion, Guid timeseries, DateTime timestamp, byte[] value__ )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "BinaryTimeseriesValueUpdate";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion, System.Data.ParameterDirection.InputOutput );
                var timeseriesParameter = sqlCommandParameters.AddReference( "@Timeseries", timeseries );
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@Timestamp", timestamp );
                var valueParameter = sqlCommandParameters.AddBinary( "@Value", value__, 0 );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    rowVersion = (long)rowVersionParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool DeleteBinaryTimeseriesValue( Guid id, long rowVersion )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "BinaryTimeseriesValueDelete";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool InsertBookmark( ref Guid id, Guid view, string name, DateTime? timestamp, double latitude, double longitude, double zoomLevel )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "BookmarkInsert";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id, System.Data.ParameterDirection.InputOutput );
                var viewParameter = sqlCommandParameters.AddReference( "@View", view );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@Name", name, 127 );
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@Timestamp", timestamp );
                var latitudeParameter = sqlCommandParameters.AddDouble( "@Latitude", latitude );
                var longitudeParameter = sqlCommandParameters.AddDouble( "@Longitude", longitude );
                var zoomLevelParameter = sqlCommandParameters.AddDouble( "@ZoomLevel", zoomLevel );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    id = (Guid)idParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool UpdateBookmark( Guid id, ref long rowVersion, Guid view, string name, DateTime? timestamp, double latitude, double longitude, double zoomLevel )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "BookmarkUpdate";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion, System.Data.ParameterDirection.InputOutput );
                var viewParameter = sqlCommandParameters.AddReference( "@View", view );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@Name", name, 127 );
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@Timestamp", timestamp );
                var latitudeParameter = sqlCommandParameters.AddDouble( "@Latitude", latitude );
                var longitudeParameter = sqlCommandParameters.AddDouble( "@Longitude", longitude );
                var zoomLevelParameter = sqlCommandParameters.AddDouble( "@ZoomLevel", zoomLevel );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    rowVersion = (long)rowVersionParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool DeleteBookmark( Guid id, long rowVersion )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "BookmarkDelete";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool InsertBooleanTimeseriesValue( ref Guid id, Guid timeseries, DateTime timestamp, bool? value__ )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "BooleanTimeseriesValueInsert";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id, System.Data.ParameterDirection.InputOutput );
                var timeseriesParameter = sqlCommandParameters.AddReference( "@Timeseries", timeseries );
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@Timestamp", timestamp );
                var valueParameter = sqlCommandParameters.AddBoolean( "@Value", value__ );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    id = (Guid)idParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool UpdateBooleanTimeseriesValue( Guid id, ref long rowVersion, Guid timeseries, DateTime timestamp, bool? value__ )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "BooleanTimeseriesValueUpdate";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion, System.Data.ParameterDirection.InputOutput );
                var timeseriesParameter = sqlCommandParameters.AddReference( "@Timeseries", timeseries );
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@Timestamp", timestamp );
                var valueParameter = sqlCommandParameters.AddBoolean( "@Value", value__ );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    rowVersion = (long)rowVersionParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool DeleteBooleanTimeseriesValue( Guid id, long rowVersion )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "BooleanTimeseriesValueDelete";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool InsertByteTimeseriesValue( ref Guid id, Guid timeseries, DateTime timestamp, byte? value__ )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "ByteTimeseriesValueInsert";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id, System.Data.ParameterDirection.InputOutput );
                var timeseriesParameter = sqlCommandParameters.AddReference( "@Timeseries", timeseries );
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@Timestamp", timestamp );
                var valueParameter = sqlCommandParameters.AddByte( "@Value", value__ );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    id = (Guid)idParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool UpdateByteTimeseriesValue( Guid id, ref long rowVersion, Guid timeseries, DateTime timestamp, byte? value__ )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "ByteTimeseriesValueUpdate";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion, System.Data.ParameterDirection.InputOutput );
                var timeseriesParameter = sqlCommandParameters.AddReference( "@Timeseries", timeseries );
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@Timestamp", timestamp );
                var valueParameter = sqlCommandParameters.AddByte( "@Value", value__ );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    rowVersion = (long)rowVersionParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool DeleteByteTimeseriesValue( Guid id, long rowVersion )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "ByteTimeseriesValueDelete";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool InsertCameraCommand( ref Guid id, Guid camera, DateTime timestamp, Types.DeviceCommandSourceType deviceCommandSourceType, Guid deviceCommandSourceId, Guid reply )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "CameraCommandInsert";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id, System.Data.ParameterDirection.InputOutput );
                var cameraParameter = sqlCommandParameters.AddReference( "@Camera", camera );
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@Timestamp", timestamp );
                var deviceCommandSourceTypeParameter = sqlCommandParameters.AddEnum( "@DeviceCommandSourceType", deviceCommandSourceType );
                var deviceCommandSourceIdParameter = sqlCommandParameters.AddGuid( "@DeviceCommandSourceId", deviceCommandSourceId );
                var replyParameter = sqlCommandParameters.AddReference( "@Reply", reply );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    id = (Guid)idParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool UpdateCameraCommand( Guid id, ref long rowVersion, Guid camera, DateTime timestamp, Types.DeviceCommandSourceType deviceCommandSourceType, Guid deviceCommandSourceId, Guid reply )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "CameraCommandUpdate";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion, System.Data.ParameterDirection.InputOutput );
                var cameraParameter = sqlCommandParameters.AddReference( "@Camera", camera );
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@Timestamp", timestamp );
                var deviceCommandSourceTypeParameter = sqlCommandParameters.AddEnum( "@DeviceCommandSourceType", deviceCommandSourceType );
                var deviceCommandSourceIdParameter = sqlCommandParameters.AddGuid( "@DeviceCommandSourceId", deviceCommandSourceId );
                var replyParameter = sqlCommandParameters.AddReference( "@Reply", reply );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    rowVersion = (long)rowVersionParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool DeleteCameraCommand( Guid id, long rowVersion )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "CameraCommandDelete";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool InsertCameraCommandAbsoluteMove( ref Guid id, Guid camera, DateTime timestamp, Types.DeviceCommandSourceType deviceCommandSourceType, Guid deviceCommandSourceId, Guid reply, Types.CameraPanTiltMode positionPanTiltMode, double? panAngle, double? tiltAngle, Types.CameraFocalLengthMode positionFocalLengthMode, double? focalLength, Types.CameraPanTiltMode speedPanTiltMode, double? panSpeed, double? tiltSpeed, Types.CameraFocalLengthMode speedFocalLengthMode, double? zoomSpeed )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "CameraCommandAbsoluteMoveInsert";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id, System.Data.ParameterDirection.InputOutput );
                var cameraParameter = sqlCommandParameters.AddReference( "@Camera", camera );
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@Timestamp", timestamp );
                var deviceCommandSourceTypeParameter = sqlCommandParameters.AddEnum( "@DeviceCommandSourceType", deviceCommandSourceType );
                var deviceCommandSourceIdParameter = sqlCommandParameters.AddGuid( "@DeviceCommandSourceId", deviceCommandSourceId );
                var replyParameter = sqlCommandParameters.AddReference( "@Reply", reply );
                var positionPanTiltModeParameter = sqlCommandParameters.AddEnum( "@PositionPanTiltMode", positionPanTiltMode );
                var panAngleParameter = sqlCommandParameters.AddDouble( "@PanAngle", panAngle );
                var tiltAngleParameter = sqlCommandParameters.AddDouble( "@TiltAngle", tiltAngle );
                var positionFocalLengthModeParameter = sqlCommandParameters.AddEnum( "@PositionFocalLengthMode", positionFocalLengthMode );
                var focalLengthParameter = sqlCommandParameters.AddDouble( "@FocalLength", focalLength );
                var speedPanTiltModeParameter = sqlCommandParameters.AddEnum( "@SpeedPanTiltMode", speedPanTiltMode );
                var panSpeedParameter = sqlCommandParameters.AddDouble( "@PanSpeed", panSpeed );
                var tiltSpeedParameter = sqlCommandParameters.AddDouble( "@TiltSpeed", tiltSpeed );
                var speedFocalLengthModeParameter = sqlCommandParameters.AddEnum( "@SpeedFocalLengthMode", speedFocalLengthMode );
                var zoomSpeedParameter = sqlCommandParameters.AddDouble( "@ZoomSpeed", zoomSpeed );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    id = (Guid)idParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool UpdateCameraCommandAbsoluteMove( Guid id, ref long rowVersion, Guid camera, DateTime timestamp, Types.DeviceCommandSourceType deviceCommandSourceType, Guid deviceCommandSourceId, Guid reply, Types.CameraPanTiltMode positionPanTiltMode, double? panAngle, double? tiltAngle, Types.CameraFocalLengthMode positionFocalLengthMode, double? focalLength, Types.CameraPanTiltMode speedPanTiltMode, double? panSpeed, double? tiltSpeed, Types.CameraFocalLengthMode speedFocalLengthMode, double? zoomSpeed )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "CameraCommandAbsoluteMoveUpdate";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion, System.Data.ParameterDirection.InputOutput );
                var cameraParameter = sqlCommandParameters.AddReference( "@Camera", camera );
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@Timestamp", timestamp );
                var deviceCommandSourceTypeParameter = sqlCommandParameters.AddEnum( "@DeviceCommandSourceType", deviceCommandSourceType );
                var deviceCommandSourceIdParameter = sqlCommandParameters.AddGuid( "@DeviceCommandSourceId", deviceCommandSourceId );
                var replyParameter = sqlCommandParameters.AddReference( "@Reply", reply );
                var positionPanTiltModeParameter = sqlCommandParameters.AddEnum( "@PositionPanTiltMode", positionPanTiltMode );
                var panAngleParameter = sqlCommandParameters.AddDouble( "@PanAngle", panAngle );
                var tiltAngleParameter = sqlCommandParameters.AddDouble( "@TiltAngle", tiltAngle );
                var positionFocalLengthModeParameter = sqlCommandParameters.AddEnum( "@PositionFocalLengthMode", positionFocalLengthMode );
                var focalLengthParameter = sqlCommandParameters.AddDouble( "@FocalLength", focalLength );
                var speedPanTiltModeParameter = sqlCommandParameters.AddEnum( "@SpeedPanTiltMode", speedPanTiltMode );
                var panSpeedParameter = sqlCommandParameters.AddDouble( "@PanSpeed", panSpeed );
                var tiltSpeedParameter = sqlCommandParameters.AddDouble( "@TiltSpeed", tiltSpeed );
                var speedFocalLengthModeParameter = sqlCommandParameters.AddEnum( "@SpeedFocalLengthMode", speedFocalLengthMode );
                var zoomSpeedParameter = sqlCommandParameters.AddDouble( "@ZoomSpeed", zoomSpeed );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    rowVersion = (long)rowVersionParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool DeleteCameraCommandAbsoluteMove( Guid id, long rowVersion )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "CameraCommandAbsoluteMoveDelete";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool InsertCameraCommandAdjustPanTiltZoom( ref Guid id, Guid camera, DateTime timestamp, Types.DeviceCommandSourceType deviceCommandSourceType, Guid deviceCommandSourceId, Guid reply, double? x, double? y, double? z )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "CameraCommandAdjustPanTiltZoomInsert";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id, System.Data.ParameterDirection.InputOutput );
                var cameraParameter = sqlCommandParameters.AddReference( "@Camera", camera );
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@Timestamp", timestamp );
                var deviceCommandSourceTypeParameter = sqlCommandParameters.AddEnum( "@DeviceCommandSourceType", deviceCommandSourceType );
                var deviceCommandSourceIdParameter = sqlCommandParameters.AddGuid( "@DeviceCommandSourceId", deviceCommandSourceId );
                var replyParameter = sqlCommandParameters.AddReference( "@Reply", reply );
                var xParameter = sqlCommandParameters.AddDouble( "@X", x );
                var yParameter = sqlCommandParameters.AddDouble( "@Y", y );
                var zParameter = sqlCommandParameters.AddDouble( "@Z", z );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    id = (Guid)idParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool UpdateCameraCommandAdjustPanTiltZoom( Guid id, ref long rowVersion, Guid camera, DateTime timestamp, Types.DeviceCommandSourceType deviceCommandSourceType, Guid deviceCommandSourceId, Guid reply, double? x, double? y, double? z )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "CameraCommandAdjustPanTiltZoomUpdate";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion, System.Data.ParameterDirection.InputOutput );
                var cameraParameter = sqlCommandParameters.AddReference( "@Camera", camera );
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@Timestamp", timestamp );
                var deviceCommandSourceTypeParameter = sqlCommandParameters.AddEnum( "@DeviceCommandSourceType", deviceCommandSourceType );
                var deviceCommandSourceIdParameter = sqlCommandParameters.AddGuid( "@DeviceCommandSourceId", deviceCommandSourceId );
                var replyParameter = sqlCommandParameters.AddReference( "@Reply", reply );
                var xParameter = sqlCommandParameters.AddDouble( "@X", x );
                var yParameter = sqlCommandParameters.AddDouble( "@Y", y );
                var zParameter = sqlCommandParameters.AddDouble( "@Z", z );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    rowVersion = (long)rowVersionParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool DeleteCameraCommandAdjustPanTiltZoom( Guid id, long rowVersion )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "CameraCommandAdjustPanTiltZoomDelete";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool InsertCameraCommandContinuousMove( ref Guid id, Guid camera, DateTime timestamp, Types.DeviceCommandSourceType deviceCommandSourceType, Guid deviceCommandSourceId, Guid reply, bool normalized, double? panVelocity, double? tiltVelocity, double? zoomVelocity, TimeSpan? duration )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "CameraCommandContinuousMoveInsert";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id, System.Data.ParameterDirection.InputOutput );
                var cameraParameter = sqlCommandParameters.AddReference( "@Camera", camera );
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@Timestamp", timestamp );
                var deviceCommandSourceTypeParameter = sqlCommandParameters.AddEnum( "@DeviceCommandSourceType", deviceCommandSourceType );
                var deviceCommandSourceIdParameter = sqlCommandParameters.AddGuid( "@DeviceCommandSourceId", deviceCommandSourceId );
                var replyParameter = sqlCommandParameters.AddReference( "@Reply", reply );
                var normalizedParameter = sqlCommandParameters.AddBoolean( "@Normalized", normalized );
                var panVelocityParameter = sqlCommandParameters.AddDouble( "@PanVelocity", panVelocity );
                var tiltVelocityParameter = sqlCommandParameters.AddDouble( "@TiltVelocity", tiltVelocity );
                var zoomVelocityParameter = sqlCommandParameters.AddDouble( "@ZoomVelocity", zoomVelocity );
                var durationParameter = sqlCommandParameters.AddTimeSpanAsInt64( "@Duration", duration );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    id = (Guid)idParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool UpdateCameraCommandContinuousMove( Guid id, ref long rowVersion, Guid camera, DateTime timestamp, Types.DeviceCommandSourceType deviceCommandSourceType, Guid deviceCommandSourceId, Guid reply, bool normalized, double? panVelocity, double? tiltVelocity, double? zoomVelocity, TimeSpan? duration )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "CameraCommandContinuousMoveUpdate";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion, System.Data.ParameterDirection.InputOutput );
                var cameraParameter = sqlCommandParameters.AddReference( "@Camera", camera );
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@Timestamp", timestamp );
                var deviceCommandSourceTypeParameter = sqlCommandParameters.AddEnum( "@DeviceCommandSourceType", deviceCommandSourceType );
                var deviceCommandSourceIdParameter = sqlCommandParameters.AddGuid( "@DeviceCommandSourceId", deviceCommandSourceId );
                var replyParameter = sqlCommandParameters.AddReference( "@Reply", reply );
                var normalizedParameter = sqlCommandParameters.AddBoolean( "@Normalized", normalized );
                var panVelocityParameter = sqlCommandParameters.AddDouble( "@PanVelocity", panVelocity );
                var tiltVelocityParameter = sqlCommandParameters.AddDouble( "@TiltVelocity", tiltVelocity );
                var zoomVelocityParameter = sqlCommandParameters.AddDouble( "@ZoomVelocity", zoomVelocity );
                var durationParameter = sqlCommandParameters.AddTimeSpanAsInt64( "@Duration", duration );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    rowVersion = (long)rowVersionParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool DeleteCameraCommandContinuousMove( Guid id, long rowVersion )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "CameraCommandContinuousMoveDelete";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool InsertCameraCommandGeoMove( ref Guid id, Guid camera, DateTime timestamp, Types.DeviceCommandSourceType deviceCommandSourceType, Guid deviceCommandSourceId, Guid reply, double latitude, double longitude, double? altitude, double? viewportWidth, double? viewportHeight )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "CameraCommandGeoMoveInsert";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id, System.Data.ParameterDirection.InputOutput );
                var cameraParameter = sqlCommandParameters.AddReference( "@Camera", camera );
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@Timestamp", timestamp );
                var deviceCommandSourceTypeParameter = sqlCommandParameters.AddEnum( "@DeviceCommandSourceType", deviceCommandSourceType );
                var deviceCommandSourceIdParameter = sqlCommandParameters.AddGuid( "@DeviceCommandSourceId", deviceCommandSourceId );
                var replyParameter = sqlCommandParameters.AddReference( "@Reply", reply );
                var latitudeParameter = sqlCommandParameters.AddDouble( "@Latitude", latitude );
                var longitudeParameter = sqlCommandParameters.AddDouble( "@Longitude", longitude );
                var altitudeParameter = sqlCommandParameters.AddDouble( "@Altitude", altitude );
                var viewportWidthParameter = sqlCommandParameters.AddDouble( "@ViewportWidth", viewportWidth );
                var viewportHeightParameter = sqlCommandParameters.AddDouble( "@ViewportHeight", viewportHeight );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    id = (Guid)idParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool UpdateCameraCommandGeoMove( Guid id, ref long rowVersion, Guid camera, DateTime timestamp, Types.DeviceCommandSourceType deviceCommandSourceType, Guid deviceCommandSourceId, Guid reply, double latitude, double longitude, double? altitude, double? viewportWidth, double? viewportHeight )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "CameraCommandGeoMoveUpdate";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion, System.Data.ParameterDirection.InputOutput );
                var cameraParameter = sqlCommandParameters.AddReference( "@Camera", camera );
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@Timestamp", timestamp );
                var deviceCommandSourceTypeParameter = sqlCommandParameters.AddEnum( "@DeviceCommandSourceType", deviceCommandSourceType );
                var deviceCommandSourceIdParameter = sqlCommandParameters.AddGuid( "@DeviceCommandSourceId", deviceCommandSourceId );
                var replyParameter = sqlCommandParameters.AddReference( "@Reply", reply );
                var latitudeParameter = sqlCommandParameters.AddDouble( "@Latitude", latitude );
                var longitudeParameter = sqlCommandParameters.AddDouble( "@Longitude", longitude );
                var altitudeParameter = sqlCommandParameters.AddDouble( "@Altitude", altitude );
                var viewportWidthParameter = sqlCommandParameters.AddDouble( "@ViewportWidth", viewportWidth );
                var viewportHeightParameter = sqlCommandParameters.AddDouble( "@ViewportHeight", viewportHeight );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    rowVersion = (long)rowVersionParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool DeleteCameraCommandGeoMove( Guid id, long rowVersion )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "CameraCommandGeoMoveDelete";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool InsertCameraCommandRelativeMove( ref Guid id, Guid camera, DateTime timestamp, Types.DeviceCommandSourceType deviceCommandSourceType, Guid deviceCommandSourceId, Guid reply, bool normalized, double? panAngle, double? tiltAngle, double? focalLength, double? panSpeed, double? tiltSpeed, double? zoomSpeed )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "CameraCommandRelativeMoveInsert";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id, System.Data.ParameterDirection.InputOutput );
                var cameraParameter = sqlCommandParameters.AddReference( "@Camera", camera );
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@Timestamp", timestamp );
                var deviceCommandSourceTypeParameter = sqlCommandParameters.AddEnum( "@DeviceCommandSourceType", deviceCommandSourceType );
                var deviceCommandSourceIdParameter = sqlCommandParameters.AddGuid( "@DeviceCommandSourceId", deviceCommandSourceId );
                var replyParameter = sqlCommandParameters.AddReference( "@Reply", reply );
                var normalizedParameter = sqlCommandParameters.AddBoolean( "@Normalized", normalized );
                var panAngleParameter = sqlCommandParameters.AddDouble( "@PanAngle", panAngle );
                var tiltAngleParameter = sqlCommandParameters.AddDouble( "@TiltAngle", tiltAngle );
                var focalLengthParameter = sqlCommandParameters.AddDouble( "@FocalLength", focalLength );
                var panSpeedParameter = sqlCommandParameters.AddDouble( "@PanSpeed", panSpeed );
                var tiltSpeedParameter = sqlCommandParameters.AddDouble( "@TiltSpeed", tiltSpeed );
                var zoomSpeedParameter = sqlCommandParameters.AddDouble( "@ZoomSpeed", zoomSpeed );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    id = (Guid)idParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool UpdateCameraCommandRelativeMove( Guid id, ref long rowVersion, Guid camera, DateTime timestamp, Types.DeviceCommandSourceType deviceCommandSourceType, Guid deviceCommandSourceId, Guid reply, bool normalized, double? panAngle, double? tiltAngle, double? focalLength, double? panSpeed, double? tiltSpeed, double? zoomSpeed )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "CameraCommandRelativeMoveUpdate";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion, System.Data.ParameterDirection.InputOutput );
                var cameraParameter = sqlCommandParameters.AddReference( "@Camera", camera );
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@Timestamp", timestamp );
                var deviceCommandSourceTypeParameter = sqlCommandParameters.AddEnum( "@DeviceCommandSourceType", deviceCommandSourceType );
                var deviceCommandSourceIdParameter = sqlCommandParameters.AddGuid( "@DeviceCommandSourceId", deviceCommandSourceId );
                var replyParameter = sqlCommandParameters.AddReference( "@Reply", reply );
                var normalizedParameter = sqlCommandParameters.AddBoolean( "@Normalized", normalized );
                var panAngleParameter = sqlCommandParameters.AddDouble( "@PanAngle", panAngle );
                var tiltAngleParameter = sqlCommandParameters.AddDouble( "@TiltAngle", tiltAngle );
                var focalLengthParameter = sqlCommandParameters.AddDouble( "@FocalLength", focalLength );
                var panSpeedParameter = sqlCommandParameters.AddDouble( "@PanSpeed", panSpeed );
                var tiltSpeedParameter = sqlCommandParameters.AddDouble( "@TiltSpeed", tiltSpeed );
                var zoomSpeedParameter = sqlCommandParameters.AddDouble( "@ZoomSpeed", zoomSpeed );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    rowVersion = (long)rowVersionParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool DeleteCameraCommandRelativeMove( Guid id, long rowVersion )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "CameraCommandRelativeMoveDelete";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool InsertCameraCommandReleasePTZOwnership( ref Guid id, Guid camera, DateTime timestamp, Types.DeviceCommandSourceType deviceCommandSourceType, Guid deviceCommandSourceId, Guid reply )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "CameraCommandReleasePTZOwnershipInsert";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id, System.Data.ParameterDirection.InputOutput );
                var cameraParameter = sqlCommandParameters.AddReference( "@Camera", camera );
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@Timestamp", timestamp );
                var deviceCommandSourceTypeParameter = sqlCommandParameters.AddEnum( "@DeviceCommandSourceType", deviceCommandSourceType );
                var deviceCommandSourceIdParameter = sqlCommandParameters.AddGuid( "@DeviceCommandSourceId", deviceCommandSourceId );
                var replyParameter = sqlCommandParameters.AddReference( "@Reply", reply );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    id = (Guid)idParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool UpdateCameraCommandReleasePTZOwnership( Guid id, ref long rowVersion, Guid camera, DateTime timestamp, Types.DeviceCommandSourceType deviceCommandSourceType, Guid deviceCommandSourceId, Guid reply )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "CameraCommandReleasePTZOwnershipUpdate";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion, System.Data.ParameterDirection.InputOutput );
                var cameraParameter = sqlCommandParameters.AddReference( "@Camera", camera );
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@Timestamp", timestamp );
                var deviceCommandSourceTypeParameter = sqlCommandParameters.AddEnum( "@DeviceCommandSourceType", deviceCommandSourceType );
                var deviceCommandSourceIdParameter = sqlCommandParameters.AddGuid( "@DeviceCommandSourceId", deviceCommandSourceId );
                var replyParameter = sqlCommandParameters.AddReference( "@Reply", reply );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    rowVersion = (long)rowVersionParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool DeleteCameraCommandReleasePTZOwnership( Guid id, long rowVersion )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "CameraCommandReleasePTZOwnershipDelete";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool InsertCameraCommandRequestPTZOwnership( ref Guid id, Guid camera, DateTime timestamp, Types.DeviceCommandSourceType deviceCommandSourceType, Guid deviceCommandSourceId, Guid reply )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "CameraCommandRequestPTZOwnershipInsert";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id, System.Data.ParameterDirection.InputOutput );
                var cameraParameter = sqlCommandParameters.AddReference( "@Camera", camera );
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@Timestamp", timestamp );
                var deviceCommandSourceTypeParameter = sqlCommandParameters.AddEnum( "@DeviceCommandSourceType", deviceCommandSourceType );
                var deviceCommandSourceIdParameter = sqlCommandParameters.AddGuid( "@DeviceCommandSourceId", deviceCommandSourceId );
                var replyParameter = sqlCommandParameters.AddReference( "@Reply", reply );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    id = (Guid)idParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool UpdateCameraCommandRequestPTZOwnership( Guid id, ref long rowVersion, Guid camera, DateTime timestamp, Types.DeviceCommandSourceType deviceCommandSourceType, Guid deviceCommandSourceId, Guid reply )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "CameraCommandRequestPTZOwnershipUpdate";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion, System.Data.ParameterDirection.InputOutput );
                var cameraParameter = sqlCommandParameters.AddReference( "@Camera", camera );
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@Timestamp", timestamp );
                var deviceCommandSourceTypeParameter = sqlCommandParameters.AddEnum( "@DeviceCommandSourceType", deviceCommandSourceType );
                var deviceCommandSourceIdParameter = sqlCommandParameters.AddGuid( "@DeviceCommandSourceId", deviceCommandSourceId );
                var replyParameter = sqlCommandParameters.AddReference( "@Reply", reply );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    rowVersion = (long)rowVersionParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool DeleteCameraCommandRequestPTZOwnership( Guid id, long rowVersion )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "CameraCommandRequestPTZOwnershipDelete";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool InsertCameraCommandSetAutoFocus( ref Guid id, Guid camera, DateTime timestamp, Types.DeviceCommandSourceType deviceCommandSourceType, Guid deviceCommandSourceId, Guid reply, bool enabled )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "CameraCommandSetAutoFocusInsert";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id, System.Data.ParameterDirection.InputOutput );
                var cameraParameter = sqlCommandParameters.AddReference( "@Camera", camera );
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@Timestamp", timestamp );
                var deviceCommandSourceTypeParameter = sqlCommandParameters.AddEnum( "@DeviceCommandSourceType", deviceCommandSourceType );
                var deviceCommandSourceIdParameter = sqlCommandParameters.AddGuid( "@DeviceCommandSourceId", deviceCommandSourceId );
                var replyParameter = sqlCommandParameters.AddReference( "@Reply", reply );
                var enabledParameter = sqlCommandParameters.AddBoolean( "@Enabled", enabled );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    id = (Guid)idParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool UpdateCameraCommandSetAutoFocus( Guid id, ref long rowVersion, Guid camera, DateTime timestamp, Types.DeviceCommandSourceType deviceCommandSourceType, Guid deviceCommandSourceId, Guid reply, bool enabled )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "CameraCommandSetAutoFocusUpdate";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion, System.Data.ParameterDirection.InputOutput );
                var cameraParameter = sqlCommandParameters.AddReference( "@Camera", camera );
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@Timestamp", timestamp );
                var deviceCommandSourceTypeParameter = sqlCommandParameters.AddEnum( "@DeviceCommandSourceType", deviceCommandSourceType );
                var deviceCommandSourceIdParameter = sqlCommandParameters.AddGuid( "@DeviceCommandSourceId", deviceCommandSourceId );
                var replyParameter = sqlCommandParameters.AddReference( "@Reply", reply );
                var enabledParameter = sqlCommandParameters.AddBoolean( "@Enabled", enabled );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    rowVersion = (long)rowVersionParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool DeleteCameraCommandSetAutoFocus( Guid id, long rowVersion )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "CameraCommandSetAutoFocusDelete";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool InsertCameraCommandSetBlackAndWhite( ref Guid id, Guid camera, DateTime timestamp, Types.DeviceCommandSourceType deviceCommandSourceType, Guid deviceCommandSourceId, Guid reply, bool enabled )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "CameraCommandSetBlackAndWhiteInsert";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id, System.Data.ParameterDirection.InputOutput );
                var cameraParameter = sqlCommandParameters.AddReference( "@Camera", camera );
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@Timestamp", timestamp );
                var deviceCommandSourceTypeParameter = sqlCommandParameters.AddEnum( "@DeviceCommandSourceType", deviceCommandSourceType );
                var deviceCommandSourceIdParameter = sqlCommandParameters.AddGuid( "@DeviceCommandSourceId", deviceCommandSourceId );
                var replyParameter = sqlCommandParameters.AddReference( "@Reply", reply );
                var enabledParameter = sqlCommandParameters.AddBoolean( "@Enabled", enabled );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    id = (Guid)idParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool UpdateCameraCommandSetBlackAndWhite( Guid id, ref long rowVersion, Guid camera, DateTime timestamp, Types.DeviceCommandSourceType deviceCommandSourceType, Guid deviceCommandSourceId, Guid reply, bool enabled )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "CameraCommandSetBlackAndWhiteUpdate";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion, System.Data.ParameterDirection.InputOutput );
                var cameraParameter = sqlCommandParameters.AddReference( "@Camera", camera );
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@Timestamp", timestamp );
                var deviceCommandSourceTypeParameter = sqlCommandParameters.AddEnum( "@DeviceCommandSourceType", deviceCommandSourceType );
                var deviceCommandSourceIdParameter = sqlCommandParameters.AddGuid( "@DeviceCommandSourceId", deviceCommandSourceId );
                var replyParameter = sqlCommandParameters.AddReference( "@Reply", reply );
                var enabledParameter = sqlCommandParameters.AddBoolean( "@Enabled", enabled );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    rowVersion = (long)rowVersionParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool DeleteCameraCommandSetBlackAndWhite( Guid id, long rowVersion )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "CameraCommandSetBlackAndWhiteDelete";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool InsertCameraCommandSetFollowed( ref Guid id, Guid camera, DateTime timestamp, Types.DeviceCommandSourceType deviceCommandSourceType, Guid deviceCommandSourceId, Guid reply, Guid trackId, Types.CameraFollowReason reason )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "CameraCommandSetFollowedInsert";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id, System.Data.ParameterDirection.InputOutput );
                var cameraParameter = sqlCommandParameters.AddReference( "@Camera", camera );
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@Timestamp", timestamp );
                var deviceCommandSourceTypeParameter = sqlCommandParameters.AddEnum( "@DeviceCommandSourceType", deviceCommandSourceType );
                var deviceCommandSourceIdParameter = sqlCommandParameters.AddGuid( "@DeviceCommandSourceId", deviceCommandSourceId );
                var replyParameter = sqlCommandParameters.AddReference( "@Reply", reply );
                var trackIdParameter = sqlCommandParameters.AddGuid( "@TrackId", trackId );
                var reasonParameter = sqlCommandParameters.AddEnum( "@Reason", reason );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    id = (Guid)idParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool UpdateCameraCommandSetFollowed( Guid id, ref long rowVersion, Guid camera, DateTime timestamp, Types.DeviceCommandSourceType deviceCommandSourceType, Guid deviceCommandSourceId, Guid reply, Guid trackId, Types.CameraFollowReason reason )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "CameraCommandSetFollowedUpdate";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion, System.Data.ParameterDirection.InputOutput );
                var cameraParameter = sqlCommandParameters.AddReference( "@Camera", camera );
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@Timestamp", timestamp );
                var deviceCommandSourceTypeParameter = sqlCommandParameters.AddEnum( "@DeviceCommandSourceType", deviceCommandSourceType );
                var deviceCommandSourceIdParameter = sqlCommandParameters.AddGuid( "@DeviceCommandSourceId", deviceCommandSourceId );
                var replyParameter = sqlCommandParameters.AddReference( "@Reply", reply );
                var trackIdParameter = sqlCommandParameters.AddGuid( "@TrackId", trackId );
                var reasonParameter = sqlCommandParameters.AddEnum( "@Reason", reason );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    rowVersion = (long)rowVersionParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool DeleteCameraCommandSetFollowed( Guid id, long rowVersion )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "CameraCommandSetFollowedDelete";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool InsertCameraCommandSetInfraRedLamp( ref Guid id, Guid camera, DateTime timestamp, Types.DeviceCommandSourceType deviceCommandSourceType, Guid deviceCommandSourceId, Guid reply, bool enabled )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "CameraCommandSetInfraRedLampInsert";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id, System.Data.ParameterDirection.InputOutput );
                var cameraParameter = sqlCommandParameters.AddReference( "@Camera", camera );
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@Timestamp", timestamp );
                var deviceCommandSourceTypeParameter = sqlCommandParameters.AddEnum( "@DeviceCommandSourceType", deviceCommandSourceType );
                var deviceCommandSourceIdParameter = sqlCommandParameters.AddGuid( "@DeviceCommandSourceId", deviceCommandSourceId );
                var replyParameter = sqlCommandParameters.AddReference( "@Reply", reply );
                var enabledParameter = sqlCommandParameters.AddBoolean( "@Enabled", enabled );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    id = (Guid)idParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool UpdateCameraCommandSetInfraRedLamp( Guid id, ref long rowVersion, Guid camera, DateTime timestamp, Types.DeviceCommandSourceType deviceCommandSourceType, Guid deviceCommandSourceId, Guid reply, bool enabled )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "CameraCommandSetInfraRedLampUpdate";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion, System.Data.ParameterDirection.InputOutput );
                var cameraParameter = sqlCommandParameters.AddReference( "@Camera", camera );
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@Timestamp", timestamp );
                var deviceCommandSourceTypeParameter = sqlCommandParameters.AddEnum( "@DeviceCommandSourceType", deviceCommandSourceType );
                var deviceCommandSourceIdParameter = sqlCommandParameters.AddGuid( "@DeviceCommandSourceId", deviceCommandSourceId );
                var replyParameter = sqlCommandParameters.AddReference( "@Reply", reply );
                var enabledParameter = sqlCommandParameters.AddBoolean( "@Enabled", enabled );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    rowVersion = (long)rowVersionParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool DeleteCameraCommandSetInfraRedLamp( Guid id, long rowVersion )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "CameraCommandSetInfraRedLampDelete";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool InsertCameraCommandSetWasher( ref Guid id, Guid camera, DateTime timestamp, Types.DeviceCommandSourceType deviceCommandSourceType, Guid deviceCommandSourceId, Guid reply, bool enabled )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "CameraCommandSetWasherInsert";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id, System.Data.ParameterDirection.InputOutput );
                var cameraParameter = sqlCommandParameters.AddReference( "@Camera", camera );
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@Timestamp", timestamp );
                var deviceCommandSourceTypeParameter = sqlCommandParameters.AddEnum( "@DeviceCommandSourceType", deviceCommandSourceType );
                var deviceCommandSourceIdParameter = sqlCommandParameters.AddGuid( "@DeviceCommandSourceId", deviceCommandSourceId );
                var replyParameter = sqlCommandParameters.AddReference( "@Reply", reply );
                var enabledParameter = sqlCommandParameters.AddBoolean( "@Enabled", enabled );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    id = (Guid)idParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool UpdateCameraCommandSetWasher( Guid id, ref long rowVersion, Guid camera, DateTime timestamp, Types.DeviceCommandSourceType deviceCommandSourceType, Guid deviceCommandSourceId, Guid reply, bool enabled )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "CameraCommandSetWasherUpdate";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion, System.Data.ParameterDirection.InputOutput );
                var cameraParameter = sqlCommandParameters.AddReference( "@Camera", camera );
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@Timestamp", timestamp );
                var deviceCommandSourceTypeParameter = sqlCommandParameters.AddEnum( "@DeviceCommandSourceType", deviceCommandSourceType );
                var deviceCommandSourceIdParameter = sqlCommandParameters.AddGuid( "@DeviceCommandSourceId", deviceCommandSourceId );
                var replyParameter = sqlCommandParameters.AddReference( "@Reply", reply );
                var enabledParameter = sqlCommandParameters.AddBoolean( "@Enabled", enabled );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    rowVersion = (long)rowVersionParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool DeleteCameraCommandSetWasher( Guid id, long rowVersion )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "CameraCommandSetWasherDelete";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool InsertCameraCommandSetWiper( ref Guid id, Guid camera, DateTime timestamp, Types.DeviceCommandSourceType deviceCommandSourceType, Guid deviceCommandSourceId, Guid reply, bool enabled )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "CameraCommandSetWiperInsert";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id, System.Data.ParameterDirection.InputOutput );
                var cameraParameter = sqlCommandParameters.AddReference( "@Camera", camera );
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@Timestamp", timestamp );
                var deviceCommandSourceTypeParameter = sqlCommandParameters.AddEnum( "@DeviceCommandSourceType", deviceCommandSourceType );
                var deviceCommandSourceIdParameter = sqlCommandParameters.AddGuid( "@DeviceCommandSourceId", deviceCommandSourceId );
                var replyParameter = sqlCommandParameters.AddReference( "@Reply", reply );
                var enabledParameter = sqlCommandParameters.AddBoolean( "@Enabled", enabled );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    id = (Guid)idParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool UpdateCameraCommandSetWiper( Guid id, ref long rowVersion, Guid camera, DateTime timestamp, Types.DeviceCommandSourceType deviceCommandSourceType, Guid deviceCommandSourceId, Guid reply, bool enabled )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "CameraCommandSetWiperUpdate";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion, System.Data.ParameterDirection.InputOutput );
                var cameraParameter = sqlCommandParameters.AddReference( "@Camera", camera );
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@Timestamp", timestamp );
                var deviceCommandSourceTypeParameter = sqlCommandParameters.AddEnum( "@DeviceCommandSourceType", deviceCommandSourceType );
                var deviceCommandSourceIdParameter = sqlCommandParameters.AddGuid( "@DeviceCommandSourceId", deviceCommandSourceId );
                var replyParameter = sqlCommandParameters.AddReference( "@Reply", reply );
                var enabledParameter = sqlCommandParameters.AddBoolean( "@Enabled", enabled );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    rowVersion = (long)rowVersionParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool DeleteCameraCommandSetWiper( Guid id, long rowVersion )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "CameraCommandSetWiperDelete";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool InsertCameraCommandStop( ref Guid id, Guid camera, DateTime timestamp, Types.DeviceCommandSourceType deviceCommandSourceType, Guid deviceCommandSourceId, Guid reply, bool panTilt, bool zoom )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "CameraCommandStopInsert";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id, System.Data.ParameterDirection.InputOutput );
                var cameraParameter = sqlCommandParameters.AddReference( "@Camera", camera );
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@Timestamp", timestamp );
                var deviceCommandSourceTypeParameter = sqlCommandParameters.AddEnum( "@DeviceCommandSourceType", deviceCommandSourceType );
                var deviceCommandSourceIdParameter = sqlCommandParameters.AddGuid( "@DeviceCommandSourceId", deviceCommandSourceId );
                var replyParameter = sqlCommandParameters.AddReference( "@Reply", reply );
                var panTiltParameter = sqlCommandParameters.AddBoolean( "@PanTilt", panTilt );
                var zoomParameter = sqlCommandParameters.AddBoolean( "@Zoom", zoom );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    id = (Guid)idParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool UpdateCameraCommandStop( Guid id, ref long rowVersion, Guid camera, DateTime timestamp, Types.DeviceCommandSourceType deviceCommandSourceType, Guid deviceCommandSourceId, Guid reply, bool panTilt, bool zoom )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "CameraCommandStopUpdate";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion, System.Data.ParameterDirection.InputOutput );
                var cameraParameter = sqlCommandParameters.AddReference( "@Camera", camera );
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@Timestamp", timestamp );
                var deviceCommandSourceTypeParameter = sqlCommandParameters.AddEnum( "@DeviceCommandSourceType", deviceCommandSourceType );
                var deviceCommandSourceIdParameter = sqlCommandParameters.AddGuid( "@DeviceCommandSourceId", deviceCommandSourceId );
                var replyParameter = sqlCommandParameters.AddReference( "@Reply", reply );
                var panTiltParameter = sqlCommandParameters.AddBoolean( "@PanTilt", panTilt );
                var zoomParameter = sqlCommandParameters.AddBoolean( "@Zoom", zoom );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    rowVersion = (long)rowVersionParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool DeleteCameraCommandStop( Guid id, long rowVersion )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "CameraCommandStopDelete";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool InsertCameraCommandReply( ref Guid id, Guid camera, DateTime timestamp, Guid command, Types.DeviceCommandReplyStatus status, string message, double panAngle, double tiltAngle, double focalLength )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "CameraCommandReplyInsert";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id, System.Data.ParameterDirection.InputOutput );
                var cameraParameter = sqlCommandParameters.AddReference( "@Camera", camera );
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@Timestamp", timestamp );
                var commandParameter = sqlCommandParameters.AddReference( "@Command", command );
                var statusParameter = sqlCommandParameters.AddEnum( "@Status", status );
                var messageParameter = sqlCommandParameters.AddNVarChar( "@Message", message, 0 );
                var panAngleParameter = sqlCommandParameters.AddDouble( "@PanAngle", panAngle );
                var tiltAngleParameter = sqlCommandParameters.AddDouble( "@TiltAngle", tiltAngle );
                var focalLengthParameter = sqlCommandParameters.AddDouble( "@FocalLength", focalLength );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    id = (Guid)idParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool UpdateCameraCommandReply( Guid id, ref long rowVersion, Guid camera, DateTime timestamp, Guid command, Types.DeviceCommandReplyStatus status, string message, double panAngle, double tiltAngle, double focalLength )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "CameraCommandReplyUpdate";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion, System.Data.ParameterDirection.InputOutput );
                var cameraParameter = sqlCommandParameters.AddReference( "@Camera", camera );
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@Timestamp", timestamp );
                var commandParameter = sqlCommandParameters.AddReference( "@Command", command );
                var statusParameter = sqlCommandParameters.AddEnum( "@Status", status );
                var messageParameter = sqlCommandParameters.AddNVarChar( "@Message", message, 0 );
                var panAngleParameter = sqlCommandParameters.AddDouble( "@PanAngle", panAngle );
                var tiltAngleParameter = sqlCommandParameters.AddDouble( "@TiltAngle", tiltAngle );
                var focalLengthParameter = sqlCommandParameters.AddDouble( "@FocalLength", focalLength );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    rowVersion = (long)rowVersionParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool DeleteCameraCommandReply( Guid id, long rowVersion )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "CameraCommandReplyDelete";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool InsertCameraConfiguration( ref Guid id, Guid camera, DateTime timestamp, Types.CameraControlProtocol cameraControlProtocol, string cameraURL, string configurationURL, string userName, string password, bool useRtspUriOverride, string rtspUriOverride, double latitude, double longitude, double altitude, bool useRelativePosition, Types.CameraPanTiltMode panTiltMode, double minTiltAngle, double maxTiltAngle, double minTiltScaleAngle, double maxTiltScaleAngle, bool useReverseTiltAngle, bool useReverseNormalizedTiltAngle, double minTiltVelocity, double maxTiltVelocity, double minTiltSpeed, double maxTiltSpeed, double minPanAngle, double maxPanAngle, double minPanScaleAngle, double maxPanScaleAngle, bool useReversePanAngle, bool useReverseNormalizedPanAngle, double minPanVelocity, double maxPanVelocity, double minPanSpeed, double maxPanSpeed, Types.CameraFocalLengthMode focalLengthMode, double minFocalLength, double maxFocalLength, double minFocalLengthScale, double maxFocalLengthScale, double minZoomVelocity, double maxZoomVelocity, double minZoomSpeed, double maxZoomSpeed, double imageSensorWidth, double imageSensorHeight, double homePanAngle, double homeTiltAngle, double homeFocalLength, double panOffset, double tiltOffset, double aimAltitude, double minimumTargetWidth, TimeSpan targetLockTimeout, TimeSpan updateStatusInterval, TimeSpan readTimeout, TimeSpan moveCommandStatusDelay, string ptzProfileName, string ptzConfigurationToken, string videoSourceToken )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "CameraConfigurationInsert";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id, System.Data.ParameterDirection.InputOutput );
                var cameraParameter = sqlCommandParameters.AddReference( "@Camera", camera );
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@Timestamp", timestamp );
                var cameraControlProtocolParameter = sqlCommandParameters.AddEnum( "@CameraControlProtocol", cameraControlProtocol );
                var cameraURLParameter = sqlCommandParameters.AddNVarChar( "@CameraURL", cameraURL, 127 );
                var configurationURLParameter = sqlCommandParameters.AddNVarChar( "@ConfigurationURL", configurationURL, 127 );
                var userNameParameter = sqlCommandParameters.AddNVarChar( "@UserName", userName, 127 );
                var passwordParameter = sqlCommandParameters.AddNVarChar( "@Password", password, 127 );
                var useRtspUriOverrideParameter = sqlCommandParameters.AddBoolean( "@UseRtspUriOverride", useRtspUriOverride );
                var rtspUriOverrideParameter = sqlCommandParameters.AddNVarChar( "@RtspUriOverride", rtspUriOverride, 127 );
                var latitudeParameter = sqlCommandParameters.AddDouble( "@Latitude", latitude );
                var longitudeParameter = sqlCommandParameters.AddDouble( "@Longitude", longitude );
                var altitudeParameter = sqlCommandParameters.AddDouble( "@Altitude", altitude );
                var useRelativePositionParameter = sqlCommandParameters.AddBoolean( "@UseRelativePosition", useRelativePosition );
                var panTiltModeParameter = sqlCommandParameters.AddEnum( "@PanTiltMode", panTiltMode );
                var minTiltAngleParameter = sqlCommandParameters.AddDouble( "@MinTiltAngle", minTiltAngle );
                var maxTiltAngleParameter = sqlCommandParameters.AddDouble( "@MaxTiltAngle", maxTiltAngle );
                var minTiltScaleAngleParameter = sqlCommandParameters.AddDouble( "@MinTiltScaleAngle", minTiltScaleAngle );
                var maxTiltScaleAngleParameter = sqlCommandParameters.AddDouble( "@MaxTiltScaleAngle", maxTiltScaleAngle );
                var useReverseTiltAngleParameter = sqlCommandParameters.AddBoolean( "@UseReverseTiltAngle", useReverseTiltAngle );
                var useReverseNormalizedTiltAngleParameter = sqlCommandParameters.AddBoolean( "@UseReverseNormalizedTiltAngle", useReverseNormalizedTiltAngle );
                var minTiltVelocityParameter = sqlCommandParameters.AddDouble( "@MinTiltVelocity", minTiltVelocity );
                var maxTiltVelocityParameter = sqlCommandParameters.AddDouble( "@MaxTiltVelocity", maxTiltVelocity );
                var minTiltSpeedParameter = sqlCommandParameters.AddDouble( "@MinTiltSpeed", minTiltSpeed );
                var maxTiltSpeedParameter = sqlCommandParameters.AddDouble( "@MaxTiltSpeed", maxTiltSpeed );
                var minPanAngleParameter = sqlCommandParameters.AddDouble( "@MinPanAngle", minPanAngle );
                var maxPanAngleParameter = sqlCommandParameters.AddDouble( "@MaxPanAngle", maxPanAngle );
                var minPanScaleAngleParameter = sqlCommandParameters.AddDouble( "@MinPanScaleAngle", minPanScaleAngle );
                var maxPanScaleAngleParameter = sqlCommandParameters.AddDouble( "@MaxPanScaleAngle", maxPanScaleAngle );
                var useReversePanAngleParameter = sqlCommandParameters.AddBoolean( "@UseReversePanAngle", useReversePanAngle );
                var useReverseNormalizedPanAngleParameter = sqlCommandParameters.AddBoolean( "@UseReverseNormalizedPanAngle", useReverseNormalizedPanAngle );
                var minPanVelocityParameter = sqlCommandParameters.AddDouble( "@MinPanVelocity", minPanVelocity );
                var maxPanVelocityParameter = sqlCommandParameters.AddDouble( "@MaxPanVelocity", maxPanVelocity );
                var minPanSpeedParameter = sqlCommandParameters.AddDouble( "@MinPanSpeed", minPanSpeed );
                var maxPanSpeedParameter = sqlCommandParameters.AddDouble( "@MaxPanSpeed", maxPanSpeed );
                var focalLengthModeParameter = sqlCommandParameters.AddEnum( "@FocalLengthMode", focalLengthMode );
                var minFocalLengthParameter = sqlCommandParameters.AddDouble( "@MinFocalLength", minFocalLength );
                var maxFocalLengthParameter = sqlCommandParameters.AddDouble( "@MaxFocalLength", maxFocalLength );
                var minFocalLengthScaleParameter = sqlCommandParameters.AddDouble( "@MinFocalLengthScale", minFocalLengthScale );
                var maxFocalLengthScaleParameter = sqlCommandParameters.AddDouble( "@MaxFocalLengthScale", maxFocalLengthScale );
                var minZoomVelocityParameter = sqlCommandParameters.AddDouble( "@MinZoomVelocity", minZoomVelocity );
                var maxZoomVelocityParameter = sqlCommandParameters.AddDouble( "@MaxZoomVelocity", maxZoomVelocity );
                var minZoomSpeedParameter = sqlCommandParameters.AddDouble( "@MinZoomSpeed", minZoomSpeed );
                var maxZoomSpeedParameter = sqlCommandParameters.AddDouble( "@MaxZoomSpeed", maxZoomSpeed );
                var imageSensorWidthParameter = sqlCommandParameters.AddDouble( "@ImageSensorWidth", imageSensorWidth );
                var imageSensorHeightParameter = sqlCommandParameters.AddDouble( "@ImageSensorHeight", imageSensorHeight );
                var homePanAngleParameter = sqlCommandParameters.AddDouble( "@HomePanAngle", homePanAngle );
                var homeTiltAngleParameter = sqlCommandParameters.AddDouble( "@HomeTiltAngle", homeTiltAngle );
                var homeFocalLengthParameter = sqlCommandParameters.AddDouble( "@HomeFocalLength", homeFocalLength );
                var panOffsetParameter = sqlCommandParameters.AddDouble( "@PanOffset", panOffset );
                var tiltOffsetParameter = sqlCommandParameters.AddDouble( "@TiltOffset", tiltOffset );
                var aimAltitudeParameter = sqlCommandParameters.AddDouble( "@AimAltitude", aimAltitude );
                var minimumTargetWidthParameter = sqlCommandParameters.AddDouble( "@MinimumTargetWidth", minimumTargetWidth );
                var targetLockTimeoutParameter = sqlCommandParameters.AddTimeSpanAsInt64( "@TargetLockTimeout", targetLockTimeout );
                var updateStatusIntervalParameter = sqlCommandParameters.AddTimeSpanAsInt64( "@UpdateStatusInterval", updateStatusInterval );
                var readTimeoutParameter = sqlCommandParameters.AddTimeSpanAsInt64( "@ReadTimeout", readTimeout );
                var moveCommandStatusDelayParameter = sqlCommandParameters.AddTimeSpanAsInt64( "@MoveCommandStatusDelay", moveCommandStatusDelay );
                var ptzProfileNameParameter = sqlCommandParameters.AddNVarChar( "@PtzProfileName", ptzProfileName, 127 );
                var ptzConfigurationTokenParameter = sqlCommandParameters.AddNVarChar( "@PtzConfigurationToken", ptzConfigurationToken, 127 );
                var videoSourceTokenParameter = sqlCommandParameters.AddNVarChar( "@VideoSourceToken", videoSourceToken, 127 );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    id = (Guid)idParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool UpdateCameraConfiguration( Guid id, ref long rowVersion, Guid camera, DateTime timestamp, Types.CameraControlProtocol cameraControlProtocol, string cameraURL, string configurationURL, string userName, string password, bool useRtspUriOverride, string rtspUriOverride, double latitude, double longitude, double altitude, bool useRelativePosition, Types.CameraPanTiltMode panTiltMode, double minTiltAngle, double maxTiltAngle, double minTiltScaleAngle, double maxTiltScaleAngle, bool useReverseTiltAngle, bool useReverseNormalizedTiltAngle, double minTiltVelocity, double maxTiltVelocity, double minTiltSpeed, double maxTiltSpeed, double minPanAngle, double maxPanAngle, double minPanScaleAngle, double maxPanScaleAngle, bool useReversePanAngle, bool useReverseNormalizedPanAngle, double minPanVelocity, double maxPanVelocity, double minPanSpeed, double maxPanSpeed, Types.CameraFocalLengthMode focalLengthMode, double minFocalLength, double maxFocalLength, double minFocalLengthScale, double maxFocalLengthScale, double minZoomVelocity, double maxZoomVelocity, double minZoomSpeed, double maxZoomSpeed, double imageSensorWidth, double imageSensorHeight, double homePanAngle, double homeTiltAngle, double homeFocalLength, double panOffset, double tiltOffset, double aimAltitude, double minimumTargetWidth, TimeSpan targetLockTimeout, TimeSpan updateStatusInterval, TimeSpan readTimeout, TimeSpan moveCommandStatusDelay, string ptzProfileName, string ptzConfigurationToken, string videoSourceToken )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "CameraConfigurationUpdate";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion, System.Data.ParameterDirection.InputOutput );
                var cameraParameter = sqlCommandParameters.AddReference( "@Camera", camera );
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@Timestamp", timestamp );
                var cameraControlProtocolParameter = sqlCommandParameters.AddEnum( "@CameraControlProtocol", cameraControlProtocol );
                var cameraURLParameter = sqlCommandParameters.AddNVarChar( "@CameraURL", cameraURL, 127 );
                var configurationURLParameter = sqlCommandParameters.AddNVarChar( "@ConfigurationURL", configurationURL, 127 );
                var userNameParameter = sqlCommandParameters.AddNVarChar( "@UserName", userName, 127 );
                var passwordParameter = sqlCommandParameters.AddNVarChar( "@Password", password, 127 );
                var useRtspUriOverrideParameter = sqlCommandParameters.AddBoolean( "@UseRtspUriOverride", useRtspUriOverride );
                var rtspUriOverrideParameter = sqlCommandParameters.AddNVarChar( "@RtspUriOverride", rtspUriOverride, 127 );
                var latitudeParameter = sqlCommandParameters.AddDouble( "@Latitude", latitude );
                var longitudeParameter = sqlCommandParameters.AddDouble( "@Longitude", longitude );
                var altitudeParameter = sqlCommandParameters.AddDouble( "@Altitude", altitude );
                var useRelativePositionParameter = sqlCommandParameters.AddBoolean( "@UseRelativePosition", useRelativePosition );
                var panTiltModeParameter = sqlCommandParameters.AddEnum( "@PanTiltMode", panTiltMode );
                var minTiltAngleParameter = sqlCommandParameters.AddDouble( "@MinTiltAngle", minTiltAngle );
                var maxTiltAngleParameter = sqlCommandParameters.AddDouble( "@MaxTiltAngle", maxTiltAngle );
                var minTiltScaleAngleParameter = sqlCommandParameters.AddDouble( "@MinTiltScaleAngle", minTiltScaleAngle );
                var maxTiltScaleAngleParameter = sqlCommandParameters.AddDouble( "@MaxTiltScaleAngle", maxTiltScaleAngle );
                var useReverseTiltAngleParameter = sqlCommandParameters.AddBoolean( "@UseReverseTiltAngle", useReverseTiltAngle );
                var useReverseNormalizedTiltAngleParameter = sqlCommandParameters.AddBoolean( "@UseReverseNormalizedTiltAngle", useReverseNormalizedTiltAngle );
                var minTiltVelocityParameter = sqlCommandParameters.AddDouble( "@MinTiltVelocity", minTiltVelocity );
                var maxTiltVelocityParameter = sqlCommandParameters.AddDouble( "@MaxTiltVelocity", maxTiltVelocity );
                var minTiltSpeedParameter = sqlCommandParameters.AddDouble( "@MinTiltSpeed", minTiltSpeed );
                var maxTiltSpeedParameter = sqlCommandParameters.AddDouble( "@MaxTiltSpeed", maxTiltSpeed );
                var minPanAngleParameter = sqlCommandParameters.AddDouble( "@MinPanAngle", minPanAngle );
                var maxPanAngleParameter = sqlCommandParameters.AddDouble( "@MaxPanAngle", maxPanAngle );
                var minPanScaleAngleParameter = sqlCommandParameters.AddDouble( "@MinPanScaleAngle", minPanScaleAngle );
                var maxPanScaleAngleParameter = sqlCommandParameters.AddDouble( "@MaxPanScaleAngle", maxPanScaleAngle );
                var useReversePanAngleParameter = sqlCommandParameters.AddBoolean( "@UseReversePanAngle", useReversePanAngle );
                var useReverseNormalizedPanAngleParameter = sqlCommandParameters.AddBoolean( "@UseReverseNormalizedPanAngle", useReverseNormalizedPanAngle );
                var minPanVelocityParameter = sqlCommandParameters.AddDouble( "@MinPanVelocity", minPanVelocity );
                var maxPanVelocityParameter = sqlCommandParameters.AddDouble( "@MaxPanVelocity", maxPanVelocity );
                var minPanSpeedParameter = sqlCommandParameters.AddDouble( "@MinPanSpeed", minPanSpeed );
                var maxPanSpeedParameter = sqlCommandParameters.AddDouble( "@MaxPanSpeed", maxPanSpeed );
                var focalLengthModeParameter = sqlCommandParameters.AddEnum( "@FocalLengthMode", focalLengthMode );
                var minFocalLengthParameter = sqlCommandParameters.AddDouble( "@MinFocalLength", minFocalLength );
                var maxFocalLengthParameter = sqlCommandParameters.AddDouble( "@MaxFocalLength", maxFocalLength );
                var minFocalLengthScaleParameter = sqlCommandParameters.AddDouble( "@MinFocalLengthScale", minFocalLengthScale );
                var maxFocalLengthScaleParameter = sqlCommandParameters.AddDouble( "@MaxFocalLengthScale", maxFocalLengthScale );
                var minZoomVelocityParameter = sqlCommandParameters.AddDouble( "@MinZoomVelocity", minZoomVelocity );
                var maxZoomVelocityParameter = sqlCommandParameters.AddDouble( "@MaxZoomVelocity", maxZoomVelocity );
                var minZoomSpeedParameter = sqlCommandParameters.AddDouble( "@MinZoomSpeed", minZoomSpeed );
                var maxZoomSpeedParameter = sqlCommandParameters.AddDouble( "@MaxZoomSpeed", maxZoomSpeed );
                var imageSensorWidthParameter = sqlCommandParameters.AddDouble( "@ImageSensorWidth", imageSensorWidth );
                var imageSensorHeightParameter = sqlCommandParameters.AddDouble( "@ImageSensorHeight", imageSensorHeight );
                var homePanAngleParameter = sqlCommandParameters.AddDouble( "@HomePanAngle", homePanAngle );
                var homeTiltAngleParameter = sqlCommandParameters.AddDouble( "@HomeTiltAngle", homeTiltAngle );
                var homeFocalLengthParameter = sqlCommandParameters.AddDouble( "@HomeFocalLength", homeFocalLength );
                var panOffsetParameter = sqlCommandParameters.AddDouble( "@PanOffset", panOffset );
                var tiltOffsetParameter = sqlCommandParameters.AddDouble( "@TiltOffset", tiltOffset );
                var aimAltitudeParameter = sqlCommandParameters.AddDouble( "@AimAltitude", aimAltitude );
                var minimumTargetWidthParameter = sqlCommandParameters.AddDouble( "@MinimumTargetWidth", minimumTargetWidth );
                var targetLockTimeoutParameter = sqlCommandParameters.AddTimeSpanAsInt64( "@TargetLockTimeout", targetLockTimeout );
                var updateStatusIntervalParameter = sqlCommandParameters.AddTimeSpanAsInt64( "@UpdateStatusInterval", updateStatusInterval );
                var readTimeoutParameter = sqlCommandParameters.AddTimeSpanAsInt64( "@ReadTimeout", readTimeout );
                var moveCommandStatusDelayParameter = sqlCommandParameters.AddTimeSpanAsInt64( "@MoveCommandStatusDelay", moveCommandStatusDelay );
                var ptzProfileNameParameter = sqlCommandParameters.AddNVarChar( "@PtzProfileName", ptzProfileName, 127 );
                var ptzConfigurationTokenParameter = sqlCommandParameters.AddNVarChar( "@PtzConfigurationToken", ptzConfigurationToken, 127 );
                var videoSourceTokenParameter = sqlCommandParameters.AddNVarChar( "@VideoSourceToken", videoSourceToken, 127 );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    rowVersion = (long)rowVersionParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool DeleteCameraConfiguration( Guid id, long rowVersion )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "CameraConfigurationDelete";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool InsertCameraPanCalibration( ref Guid id, Guid camera, DateTime timestamp )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "CameraPanCalibrationInsert";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id, System.Data.ParameterDirection.InputOutput );
                var cameraParameter = sqlCommandParameters.AddReference( "@Camera", camera );
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@Timestamp", timestamp );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    id = (Guid)idParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool UpdateCameraPanCalibration( Guid id, ref long rowVersion, Guid camera, DateTime timestamp )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "CameraPanCalibrationUpdate";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion, System.Data.ParameterDirection.InputOutput );
                var cameraParameter = sqlCommandParameters.AddReference( "@Camera", camera );
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@Timestamp", timestamp );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    rowVersion = (long)rowVersionParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool DeleteCameraPanCalibration( Guid id, long rowVersion )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "CameraPanCalibrationDelete";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool InsertCameraPanCalibrationValue( ref Guid id, Guid panCalibration, double panAngle, double panOffset )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "CameraPanCalibrationValueInsert";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id, System.Data.ParameterDirection.InputOutput );
                var panCalibrationParameter = sqlCommandParameters.AddReference( "@PanCalibration", panCalibration );
                var panAngleParameter = sqlCommandParameters.AddDouble( "@PanAngle", panAngle );
                var panOffsetParameter = sqlCommandParameters.AddDouble( "@PanOffset", panOffset );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    id = (Guid)idParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool UpdateCameraPanCalibrationValue( Guid id, ref long rowVersion, Guid panCalibration, double panAngle, double panOffset )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "CameraPanCalibrationValueUpdate";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion, System.Data.ParameterDirection.InputOutput );
                var panCalibrationParameter = sqlCommandParameters.AddReference( "@PanCalibration", panCalibration );
                var panAngleParameter = sqlCommandParameters.AddDouble( "@PanAngle", panAngle );
                var panOffsetParameter = sqlCommandParameters.AddDouble( "@PanOffset", panOffset );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    rowVersion = (long)rowVersionParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool DeleteCameraPanCalibrationValue( Guid id, long rowVersion )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "CameraPanCalibrationValueDelete";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool InsertCameraStatus( ref Guid id, Guid camera, Guid track, DateTime timestamp, Types.CameraPanTiltMode positionPanTiltMode, double panAngle, double tiltAngle, Types.CameraFocalLengthMode positionFocalLengthMode, double focalLength, Types.CameraMoveStatus panTiltMoveStatus, Types.CameraMoveStatus zoomMoveStatus, Types.CameraPanTiltMode velocityPanTiltMode, double? panVelocity, double? tiltVelocity, Types.CameraFocalLengthMode velocityFocalLengthMode, double? zoomVelocity, Types.CameraFeatures activeFeatures, string error )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "CameraStatusInsert";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id, System.Data.ParameterDirection.InputOutput );
                var cameraParameter = sqlCommandParameters.AddReference( "@Camera", camera );
                var trackParameter = sqlCommandParameters.AddReference( "@Track", track );
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@Timestamp", timestamp );
                var positionPanTiltModeParameter = sqlCommandParameters.AddEnum( "@PositionPanTiltMode", positionPanTiltMode );
                var panAngleParameter = sqlCommandParameters.AddDouble( "@PanAngle", panAngle );
                var tiltAngleParameter = sqlCommandParameters.AddDouble( "@TiltAngle", tiltAngle );
                var positionFocalLengthModeParameter = sqlCommandParameters.AddEnum( "@PositionFocalLengthMode", positionFocalLengthMode );
                var focalLengthParameter = sqlCommandParameters.AddDouble( "@FocalLength", focalLength );
                var panTiltMoveStatusParameter = sqlCommandParameters.AddEnum( "@PanTiltMoveStatus", panTiltMoveStatus );
                var zoomMoveStatusParameter = sqlCommandParameters.AddEnum( "@ZoomMoveStatus", zoomMoveStatus );
                var velocityPanTiltModeParameter = sqlCommandParameters.AddEnum( "@VelocityPanTiltMode", velocityPanTiltMode );
                var panVelocityParameter = sqlCommandParameters.AddDouble( "@PanVelocity", panVelocity );
                var tiltVelocityParameter = sqlCommandParameters.AddDouble( "@TiltVelocity", tiltVelocity );
                var velocityFocalLengthModeParameter = sqlCommandParameters.AddEnum( "@VelocityFocalLengthMode", velocityFocalLengthMode );
                var zoomVelocityParameter = sqlCommandParameters.AddDouble( "@ZoomVelocity", zoomVelocity );
                var activeFeaturesParameter = sqlCommandParameters.AddEnum( "@ActiveFeatures", activeFeatures );
                var errorParameter = sqlCommandParameters.AddNVarChar( "@Error", error, 0 );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    id = (Guid)idParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool UpdateCameraStatus( Guid id, ref long rowVersion, Guid camera, Guid track, DateTime timestamp, Types.CameraPanTiltMode positionPanTiltMode, double panAngle, double tiltAngle, Types.CameraFocalLengthMode positionFocalLengthMode, double focalLength, Types.CameraMoveStatus panTiltMoveStatus, Types.CameraMoveStatus zoomMoveStatus, Types.CameraPanTiltMode velocityPanTiltMode, double? panVelocity, double? tiltVelocity, Types.CameraFocalLengthMode velocityFocalLengthMode, double? zoomVelocity, Types.CameraFeatures activeFeatures, string error )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "CameraStatusUpdate";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion, System.Data.ParameterDirection.InputOutput );
                var cameraParameter = sqlCommandParameters.AddReference( "@Camera", camera );
                var trackParameter = sqlCommandParameters.AddReference( "@Track", track );
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@Timestamp", timestamp );
                var positionPanTiltModeParameter = sqlCommandParameters.AddEnum( "@PositionPanTiltMode", positionPanTiltMode );
                var panAngleParameter = sqlCommandParameters.AddDouble( "@PanAngle", panAngle );
                var tiltAngleParameter = sqlCommandParameters.AddDouble( "@TiltAngle", tiltAngle );
                var positionFocalLengthModeParameter = sqlCommandParameters.AddEnum( "@PositionFocalLengthMode", positionFocalLengthMode );
                var focalLengthParameter = sqlCommandParameters.AddDouble( "@FocalLength", focalLength );
                var panTiltMoveStatusParameter = sqlCommandParameters.AddEnum( "@PanTiltMoveStatus", panTiltMoveStatus );
                var zoomMoveStatusParameter = sqlCommandParameters.AddEnum( "@ZoomMoveStatus", zoomMoveStatus );
                var velocityPanTiltModeParameter = sqlCommandParameters.AddEnum( "@VelocityPanTiltMode", velocityPanTiltMode );
                var panVelocityParameter = sqlCommandParameters.AddDouble( "@PanVelocity", panVelocity );
                var tiltVelocityParameter = sqlCommandParameters.AddDouble( "@TiltVelocity", tiltVelocity );
                var velocityFocalLengthModeParameter = sqlCommandParameters.AddEnum( "@VelocityFocalLengthMode", velocityFocalLengthMode );
                var zoomVelocityParameter = sqlCommandParameters.AddDouble( "@ZoomVelocity", zoomVelocity );
                var activeFeaturesParameter = sqlCommandParameters.AddEnum( "@ActiveFeatures", activeFeatures );
                var errorParameter = sqlCommandParameters.AddNVarChar( "@Error", error, 0 );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    rowVersion = (long)rowVersionParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool DeleteCameraStatus( Guid id, long rowVersion )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "CameraStatusDelete";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool InsertCameraTiltCalibration( ref Guid id, Guid camera, DateTime timestamp )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "CameraTiltCalibrationInsert";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id, System.Data.ParameterDirection.InputOutput );
                var cameraParameter = sqlCommandParameters.AddReference( "@Camera", camera );
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@Timestamp", timestamp );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    id = (Guid)idParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool UpdateCameraTiltCalibration( Guid id, ref long rowVersion, Guid camera, DateTime timestamp )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "CameraTiltCalibrationUpdate";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion, System.Data.ParameterDirection.InputOutput );
                var cameraParameter = sqlCommandParameters.AddReference( "@Camera", camera );
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@Timestamp", timestamp );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    rowVersion = (long)rowVersionParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool DeleteCameraTiltCalibration( Guid id, long rowVersion )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "CameraTiltCalibrationDelete";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool InsertCameraTiltCalibrationValue( ref Guid id, Guid tiltCalibration, double panAngle, double tiltOffset )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "CameraTiltCalibrationValueInsert";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id, System.Data.ParameterDirection.InputOutput );
                var tiltCalibrationParameter = sqlCommandParameters.AddReference( "@TiltCalibration", tiltCalibration );
                var panAngleParameter = sqlCommandParameters.AddDouble( "@PanAngle", panAngle );
                var tiltOffsetParameter = sqlCommandParameters.AddDouble( "@TiltOffset", tiltOffset );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    id = (Guid)idParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool UpdateCameraTiltCalibrationValue( Guid id, ref long rowVersion, Guid tiltCalibration, double panAngle, double tiltOffset )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "CameraTiltCalibrationValueUpdate";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion, System.Data.ParameterDirection.InputOutput );
                var tiltCalibrationParameter = sqlCommandParameters.AddReference( "@TiltCalibration", tiltCalibration );
                var panAngleParameter = sqlCommandParameters.AddDouble( "@PanAngle", panAngle );
                var tiltOffsetParameter = sqlCommandParameters.AddDouble( "@TiltOffset", tiltOffset );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    rowVersion = (long)rowVersionParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool DeleteCameraTiltCalibrationValue( Guid id, long rowVersion )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "CameraTiltCalibrationValueDelete";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool InsertCameraZoomCalibration( ref Guid id, Guid camera, DateTime timestamp )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "CameraZoomCalibrationInsert";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id, System.Data.ParameterDirection.InputOutput );
                var cameraParameter = sqlCommandParameters.AddReference( "@Camera", camera );
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@Timestamp", timestamp );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    id = (Guid)idParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool UpdateCameraZoomCalibration( Guid id, ref long rowVersion, Guid camera, DateTime timestamp )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "CameraZoomCalibrationUpdate";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion, System.Data.ParameterDirection.InputOutput );
                var cameraParameter = sqlCommandParameters.AddReference( "@Camera", camera );
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@Timestamp", timestamp );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    rowVersion = (long)rowVersionParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool DeleteCameraZoomCalibration( Guid id, long rowVersion )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "CameraZoomCalibrationDelete";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool InsertCameraZoomCalibrationValue( ref Guid id, Guid zoomCalibration, double focalLength, double focalLengthOffset )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "CameraZoomCalibrationValueInsert";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id, System.Data.ParameterDirection.InputOutput );
                var zoomCalibrationParameter = sqlCommandParameters.AddReference( "@ZoomCalibration", zoomCalibration );
                var focalLengthParameter = sqlCommandParameters.AddDouble( "@FocalLength", focalLength );
                var focalLengthOffsetParameter = sqlCommandParameters.AddDouble( "@FocalLengthOffset", focalLengthOffset );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    id = (Guid)idParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool UpdateCameraZoomCalibrationValue( Guid id, ref long rowVersion, Guid zoomCalibration, double focalLength, double focalLengthOffset )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "CameraZoomCalibrationValueUpdate";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion, System.Data.ParameterDirection.InputOutput );
                var zoomCalibrationParameter = sqlCommandParameters.AddReference( "@ZoomCalibration", zoomCalibration );
                var focalLengthParameter = sqlCommandParameters.AddDouble( "@FocalLength", focalLength );
                var focalLengthOffsetParameter = sqlCommandParameters.AddDouble( "@FocalLengthOffset", focalLengthOffset );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    rowVersion = (long)rowVersionParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool DeleteCameraZoomCalibrationValue( Guid id, long rowVersion )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "CameraZoomCalibrationValueDelete";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool InsertCatalog( ref Guid id, Guid catalog, string name )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "CatalogInsert";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id, System.Data.ParameterDirection.InputOutput );
                var catalogParameter = sqlCommandParameters.AddReference( "@Catalog", catalog );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@Name", name, 127 );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    id = (Guid)idParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool UpdateCatalog( Guid id, ref long rowVersion, Guid catalog, string name )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "CatalogUpdate";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion, System.Data.ParameterDirection.InputOutput );
                var catalogParameter = sqlCommandParameters.AddReference( "@Catalog", catalog );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@Name", name, 127 );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    rowVersion = (long)rowVersionParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool DeleteCatalog( Guid id, long rowVersion )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "CatalogDelete";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool InsertElement( ref Guid id, Guid catalog, string name, Guid elementType )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "ElementInsert";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id, System.Data.ParameterDirection.InputOutput );
                var catalogParameter = sqlCommandParameters.AddReference( "@Catalog", catalog );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@Name", name, 127 );
                var elementTypeParameter = sqlCommandParameters.AddReference( "@ElementType", elementType );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    id = (Guid)idParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool UpdateElement( Guid id, ref long rowVersion, Guid catalog, string name, Guid elementType )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "ElementUpdate";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion, System.Data.ParameterDirection.InputOutput );
                var catalogParameter = sqlCommandParameters.AddReference( "@Catalog", catalog );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@Name", name, 127 );
                var elementTypeParameter = sqlCommandParameters.AddReference( "@ElementType", elementType );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    rowVersion = (long)rowVersionParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool DeleteElement( Guid id, long rowVersion )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "ElementDelete";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool InsertCollectionInfo( ref Guid id, long count )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "CollectionInfoInsert";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id, System.Data.ParameterDirection.InputOutput );
                var countParameter = sqlCommandParameters.AddInt64( "@Count", count );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    id = (Guid)idParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool UpdateCollectionInfo( Guid id, ref long rowVersion, long count )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "CollectionInfoUpdate";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion, System.Data.ParameterDirection.InputOutput );
                var countParameter = sqlCommandParameters.AddInt64( "@Count", count );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    rowVersion = (long)rowVersionParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool DeleteCollectionInfo( Guid id, long rowVersion )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "CollectionInfoDelete";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool InsertCountry( ref Guid id, string name, int code, string alpha2, string alpha3 )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "CountryInsert";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id, System.Data.ParameterDirection.InputOutput );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@Name", name, 127 );
                var codeParameter = sqlCommandParameters.AddInt32( "@Code", code );
                var alpha2Parameter = sqlCommandParameters.AddNVarChar( "@Alpha2", alpha2, 2 );
                var alpha3Parameter = sqlCommandParameters.AddNVarChar( "@Alpha3", alpha3, 3 );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    id = (Guid)idParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool UpdateCountry( Guid id, ref long rowVersion, string name, int code, string alpha2, string alpha3 )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "CountryUpdate";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion, System.Data.ParameterDirection.InputOutput );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@Name", name, 127 );
                var codeParameter = sqlCommandParameters.AddInt32( "@Code", code );
                var alpha2Parameter = sqlCommandParameters.AddNVarChar( "@Alpha2", alpha2, 2 );
                var alpha3Parameter = sqlCommandParameters.AddNVarChar( "@Alpha3", alpha3, 3 );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    rowVersion = (long)rowVersionParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool DeleteCountry( Guid id, long rowVersion )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "CountryDelete";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool InsertCursorInfo( ref Guid id, int typeCode )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "CursorInfoInsert";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id, System.Data.ParameterDirection.InputOutput );
                var typeCodeParameter = sqlCommandParameters.AddInt32( "@TypeCode", typeCode );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    id = (Guid)idParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool UpdateCursorInfo( Guid id, ref long rowVersion, int typeCode )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "CursorInfoUpdate";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion, System.Data.ParameterDirection.InputOutput );
                var typeCodeParameter = sqlCommandParameters.AddInt32( "@TypeCode", typeCode );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    rowVersion = (long)rowVersionParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool DeleteCursorInfo( Guid id, long rowVersion )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "CursorInfoDelete";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool InsertDateTimeTimeseriesValue( ref Guid id, Guid timeseries, DateTime timestamp, DateTime? value__ )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "DateTimeTimeseriesValueInsert";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id, System.Data.ParameterDirection.InputOutput );
                var timeseriesParameter = sqlCommandParameters.AddReference( "@Timeseries", timeseries );
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@Timestamp", timestamp );
                var valueParameter = sqlCommandParameters.AddDateTimeAsInt64( "@Value", value__ );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    id = (Guid)idParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool UpdateDateTimeTimeseriesValue( Guid id, ref long rowVersion, Guid timeseries, DateTime timestamp, DateTime? value__ )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "DateTimeTimeseriesValueUpdate";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion, System.Data.ParameterDirection.InputOutput );
                var timeseriesParameter = sqlCommandParameters.AddReference( "@Timeseries", timeseries );
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@Timestamp", timestamp );
                var valueParameter = sqlCommandParameters.AddDateTimeAsInt64( "@Value", value__ );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    rowVersion = (long)rowVersionParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool DeleteDateTimeTimeseriesValue( Guid id, long rowVersion )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "DateTimeTimeseriesValueDelete";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool InsertDeviceHost( ref Guid id, string name )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "DeviceHostInsert";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id, System.Data.ParameterDirection.InputOutput );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@Name", name, 127 );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    id = (Guid)idParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool UpdateDeviceHost( Guid id, ref long rowVersion, string name )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "DeviceHostUpdate";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion, System.Data.ParameterDirection.InputOutput );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@Name", name, 127 );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    rowVersion = (long)rowVersionParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool DeleteDeviceHost( Guid id, long rowVersion )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "DeviceHostDelete";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool InsertDeviceHostConfiguration( ref Guid id, Guid host, DateTime timestamp, string hostname, int port, string queueName )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "DeviceHostConfigurationInsert";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id, System.Data.ParameterDirection.InputOutput );
                var hostParameter = sqlCommandParameters.AddReference( "@Host", host );
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@Timestamp", timestamp );
                var hostnameParameter = sqlCommandParameters.AddNVarChar( "@Hostname", hostname, 127 );
                var portParameter = sqlCommandParameters.AddInt32( "@Port", port );
                var queueNameParameter = sqlCommandParameters.AddNVarChar( "@QueueName", queueName, 127 );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    id = (Guid)idParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool UpdateDeviceHostConfiguration( Guid id, ref long rowVersion, Guid host, DateTime timestamp, string hostname, int port, string queueName )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "DeviceHostConfigurationUpdate";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion, System.Data.ParameterDirection.InputOutput );
                var hostParameter = sqlCommandParameters.AddReference( "@Host", host );
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@Timestamp", timestamp );
                var hostnameParameter = sqlCommandParameters.AddNVarChar( "@Hostname", hostname, 127 );
                var portParameter = sqlCommandParameters.AddInt32( "@Port", port );
                var queueNameParameter = sqlCommandParameters.AddNVarChar( "@QueueName", queueName, 127 );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    rowVersion = (long)rowVersionParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool DeleteDeviceHostConfiguration( Guid id, long rowVersion )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "DeviceHostConfigurationDelete";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool InsertDoubleTimeseriesValue( ref Guid id, Guid timeseries, DateTime timestamp, double? value__ )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "DoubleTimeseriesValueInsert";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id, System.Data.ParameterDirection.InputOutput );
                var timeseriesParameter = sqlCommandParameters.AddReference( "@Timeseries", timeseries );
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@Timestamp", timestamp );
                var valueParameter = sqlCommandParameters.AddDouble( "@Value", value__ );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    id = (Guid)idParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool UpdateDoubleTimeseriesValue( Guid id, ref long rowVersion, Guid timeseries, DateTime timestamp, double? value__ )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "DoubleTimeseriesValueUpdate";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion, System.Data.ParameterDirection.InputOutput );
                var timeseriesParameter = sqlCommandParameters.AddReference( "@Timeseries", timeseries );
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@Timestamp", timestamp );
                var valueParameter = sqlCommandParameters.AddDouble( "@Value", value__ );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    rowVersion = (long)rowVersionParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool DeleteDoubleTimeseriesValue( Guid id, long rowVersion )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "DoubleTimeseriesValueDelete";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool InsertFacilityType( ref Guid id, string name )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "FacilityTypeInsert";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id, System.Data.ParameterDirection.InputOutput );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@Name", name, 127 );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    id = (Guid)idParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool UpdateFacilityType( Guid id, ref long rowVersion, string name )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "FacilityTypeUpdate";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion, System.Data.ParameterDirection.InputOutput );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@Name", name, 127 );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    rowVersion = (long)rowVersionParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool DeleteFacilityType( Guid id, long rowVersion )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "FacilityTypeDelete";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool InsertGeoPosition2DTimeseriesValue( ref Guid id, Guid timeseries, DateTime timestamp, double? latitude, double? longitude )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "GeoPosition2DTimeseriesValueInsert";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id, System.Data.ParameterDirection.InputOutput );
                var timeseriesParameter = sqlCommandParameters.AddReference( "@Timeseries", timeseries );
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@Timestamp", timestamp );
                var latitudeParameter = sqlCommandParameters.AddDouble( "@Latitude", latitude );
                var longitudeParameter = sqlCommandParameters.AddDouble( "@Longitude", longitude );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    id = (Guid)idParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool UpdateGeoPosition2DTimeseriesValue( Guid id, ref long rowVersion, Guid timeseries, DateTime timestamp, double? latitude, double? longitude )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "GeoPosition2DTimeseriesValueUpdate";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion, System.Data.ParameterDirection.InputOutput );
                var timeseriesParameter = sqlCommandParameters.AddReference( "@Timeseries", timeseries );
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@Timestamp", timestamp );
                var latitudeParameter = sqlCommandParameters.AddDouble( "@Latitude", latitude );
                var longitudeParameter = sqlCommandParameters.AddDouble( "@Longitude", longitude );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    rowVersion = (long)rowVersionParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool DeleteGeoPosition2DTimeseriesValue( Guid id, long rowVersion )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "GeoPosition2DTimeseriesValueDelete";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool InsertGeoPosition3DTimeseriesValue( ref Guid id, Guid timeseries, DateTime timestamp, double? latitude, double? longitude, double? altitude )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "GeoPosition3DTimeseriesValueInsert";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id, System.Data.ParameterDirection.InputOutput );
                var timeseriesParameter = sqlCommandParameters.AddReference( "@Timeseries", timeseries );
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@Timestamp", timestamp );
                var latitudeParameter = sqlCommandParameters.AddDouble( "@Latitude", latitude );
                var longitudeParameter = sqlCommandParameters.AddDouble( "@Longitude", longitude );
                var altitudeParameter = sqlCommandParameters.AddDouble( "@Altitude", altitude );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    id = (Guid)idParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool UpdateGeoPosition3DTimeseriesValue( Guid id, ref long rowVersion, Guid timeseries, DateTime timestamp, double? latitude, double? longitude, double? altitude )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "GeoPosition3DTimeseriesValueUpdate";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion, System.Data.ParameterDirection.InputOutput );
                var timeseriesParameter = sqlCommandParameters.AddReference( "@Timeseries", timeseries );
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@Timestamp", timestamp );
                var latitudeParameter = sqlCommandParameters.AddDouble( "@Latitude", latitude );
                var longitudeParameter = sqlCommandParameters.AddDouble( "@Longitude", longitude );
                var altitudeParameter = sqlCommandParameters.AddDouble( "@Altitude", altitude );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    rowVersion = (long)rowVersionParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool DeleteGeoPosition3DTimeseriesValue( Guid id, long rowVersion )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "GeoPosition3DTimeseriesValueDelete";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool InsertGNSSDeviceCommand( ref Guid id, Guid gNSSDevice, DateTime timestamp, Types.DeviceCommandSourceType deviceCommandSourceType, Guid deviceCommandSourceId, Guid reply )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "GNSSDeviceCommandInsert";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id, System.Data.ParameterDirection.InputOutput );
                var gNSSDeviceParameter = sqlCommandParameters.AddReference( "@GNSSDevice", gNSSDevice );
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@Timestamp", timestamp );
                var deviceCommandSourceTypeParameter = sqlCommandParameters.AddEnum( "@DeviceCommandSourceType", deviceCommandSourceType );
                var deviceCommandSourceIdParameter = sqlCommandParameters.AddGuid( "@DeviceCommandSourceId", deviceCommandSourceId );
                var replyParameter = sqlCommandParameters.AddReference( "@Reply", reply );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    id = (Guid)idParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool UpdateGNSSDeviceCommand( Guid id, ref long rowVersion, Guid gNSSDevice, DateTime timestamp, Types.DeviceCommandSourceType deviceCommandSourceType, Guid deviceCommandSourceId, Guid reply )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "GNSSDeviceCommandUpdate";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion, System.Data.ParameterDirection.InputOutput );
                var gNSSDeviceParameter = sqlCommandParameters.AddReference( "@GNSSDevice", gNSSDevice );
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@Timestamp", timestamp );
                var deviceCommandSourceTypeParameter = sqlCommandParameters.AddEnum( "@DeviceCommandSourceType", deviceCommandSourceType );
                var deviceCommandSourceIdParameter = sqlCommandParameters.AddGuid( "@DeviceCommandSourceId", deviceCommandSourceId );
                var replyParameter = sqlCommandParameters.AddReference( "@Reply", reply );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    rowVersion = (long)rowVersionParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool DeleteGNSSDeviceCommand( Guid id, long rowVersion )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "GNSSDeviceCommandDelete";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool InsertGNSSDeviceCommandReply( ref Guid id, Guid gNSSDevice, DateTime timestamp, Guid command, Types.DeviceCommandReplyStatus status, string message )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "GNSSDeviceCommandReplyInsert";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id, System.Data.ParameterDirection.InputOutput );
                var gNSSDeviceParameter = sqlCommandParameters.AddReference( "@GNSSDevice", gNSSDevice );
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@Timestamp", timestamp );
                var commandParameter = sqlCommandParameters.AddReference( "@Command", command );
                var statusParameter = sqlCommandParameters.AddEnum( "@Status", status );
                var messageParameter = sqlCommandParameters.AddNVarChar( "@Message", message, 0 );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    id = (Guid)idParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool UpdateGNSSDeviceCommandReply( Guid id, ref long rowVersion, Guid gNSSDevice, DateTime timestamp, Guid command, Types.DeviceCommandReplyStatus status, string message )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "GNSSDeviceCommandReplyUpdate";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion, System.Data.ParameterDirection.InputOutput );
                var gNSSDeviceParameter = sqlCommandParameters.AddReference( "@GNSSDevice", gNSSDevice );
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@Timestamp", timestamp );
                var commandParameter = sqlCommandParameters.AddReference( "@Command", command );
                var statusParameter = sqlCommandParameters.AddEnum( "@Status", status );
                var messageParameter = sqlCommandParameters.AddNVarChar( "@Message", message, 0 );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    rowVersion = (long)rowVersionParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool DeleteGNSSDeviceCommandReply( Guid id, long rowVersion )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "GNSSDeviceCommandReplyDelete";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool InsertGNSSDeviceConfiguration( ref Guid id, Guid gNSSDevice, DateTime timestamp, double defaultLatitude, double defaultLongitude, double defaultAltitude, double latitudeOffset, double longitudeOffset, double altitudeOffset )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "GNSSDeviceConfigurationInsert";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id, System.Data.ParameterDirection.InputOutput );
                var gNSSDeviceParameter = sqlCommandParameters.AddReference( "@GNSSDevice", gNSSDevice );
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@Timestamp", timestamp );
                var defaultLatitudeParameter = sqlCommandParameters.AddDouble( "@DefaultLatitude", defaultLatitude );
                var defaultLongitudeParameter = sqlCommandParameters.AddDouble( "@DefaultLongitude", defaultLongitude );
                var defaultAltitudeParameter = sqlCommandParameters.AddDouble( "@DefaultAltitude", defaultAltitude );
                var latitudeOffsetParameter = sqlCommandParameters.AddDouble( "@LatitudeOffset", latitudeOffset );
                var longitudeOffsetParameter = sqlCommandParameters.AddDouble( "@LongitudeOffset", longitudeOffset );
                var altitudeOffsetParameter = sqlCommandParameters.AddDouble( "@AltitudeOffset", altitudeOffset );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    id = (Guid)idParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool UpdateGNSSDeviceConfiguration( Guid id, ref long rowVersion, Guid gNSSDevice, DateTime timestamp, double defaultLatitude, double defaultLongitude, double defaultAltitude, double latitudeOffset, double longitudeOffset, double altitudeOffset )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "GNSSDeviceConfigurationUpdate";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion, System.Data.ParameterDirection.InputOutput );
                var gNSSDeviceParameter = sqlCommandParameters.AddReference( "@GNSSDevice", gNSSDevice );
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@Timestamp", timestamp );
                var defaultLatitudeParameter = sqlCommandParameters.AddDouble( "@DefaultLatitude", defaultLatitude );
                var defaultLongitudeParameter = sqlCommandParameters.AddDouble( "@DefaultLongitude", defaultLongitude );
                var defaultAltitudeParameter = sqlCommandParameters.AddDouble( "@DefaultAltitude", defaultAltitude );
                var latitudeOffsetParameter = sqlCommandParameters.AddDouble( "@LatitudeOffset", latitudeOffset );
                var longitudeOffsetParameter = sqlCommandParameters.AddDouble( "@LongitudeOffset", longitudeOffset );
                var altitudeOffsetParameter = sqlCommandParameters.AddDouble( "@AltitudeOffset", altitudeOffset );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    rowVersion = (long)rowVersionParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool DeleteGNSSDeviceConfiguration( Guid id, long rowVersion )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "GNSSDeviceConfigurationDelete";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool InsertGuidTimeseriesValue( ref Guid id, Guid timeseries, DateTime timestamp, Guid? value__ )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "GuidTimeseriesValueInsert";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id, System.Data.ParameterDirection.InputOutput );
                var timeseriesParameter = sqlCommandParameters.AddReference( "@Timeseries", timeseries );
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@Timestamp", timestamp );
                var valueParameter = sqlCommandParameters.AddGuid( "@Value", value__ );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    id = (Guid)idParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool UpdateGuidTimeseriesValue( Guid id, ref long rowVersion, Guid timeseries, DateTime timestamp, Guid? value__ )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "GuidTimeseriesValueUpdate";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion, System.Data.ParameterDirection.InputOutput );
                var timeseriesParameter = sqlCommandParameters.AddReference( "@Timeseries", timeseries );
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@Timestamp", timestamp );
                var valueParameter = sqlCommandParameters.AddGuid( "@Value", value__ );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    rowVersion = (long)rowVersionParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool DeleteGuidTimeseriesValue( Guid id, long rowVersion )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "GuidTimeseriesValueDelete";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool InsertGyroDeviceCommand( ref Guid id, Guid gyroDevice, DateTime timestamp, Types.DeviceCommandSourceType deviceCommandSourceType, Guid deviceCommandSourceId, Guid reply )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "GyroDeviceCommandInsert";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id, System.Data.ParameterDirection.InputOutput );
                var gyroDeviceParameter = sqlCommandParameters.AddReference( "@GyroDevice", gyroDevice );
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@Timestamp", timestamp );
                var deviceCommandSourceTypeParameter = sqlCommandParameters.AddEnum( "@DeviceCommandSourceType", deviceCommandSourceType );
                var deviceCommandSourceIdParameter = sqlCommandParameters.AddGuid( "@DeviceCommandSourceId", deviceCommandSourceId );
                var replyParameter = sqlCommandParameters.AddReference( "@Reply", reply );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    id = (Guid)idParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool UpdateGyroDeviceCommand( Guid id, ref long rowVersion, Guid gyroDevice, DateTime timestamp, Types.DeviceCommandSourceType deviceCommandSourceType, Guid deviceCommandSourceId, Guid reply )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "GyroDeviceCommandUpdate";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion, System.Data.ParameterDirection.InputOutput );
                var gyroDeviceParameter = sqlCommandParameters.AddReference( "@GyroDevice", gyroDevice );
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@Timestamp", timestamp );
                var deviceCommandSourceTypeParameter = sqlCommandParameters.AddEnum( "@DeviceCommandSourceType", deviceCommandSourceType );
                var deviceCommandSourceIdParameter = sqlCommandParameters.AddGuid( "@DeviceCommandSourceId", deviceCommandSourceId );
                var replyParameter = sqlCommandParameters.AddReference( "@Reply", reply );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    rowVersion = (long)rowVersionParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool DeleteGyroDeviceCommand( Guid id, long rowVersion )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "GyroDeviceCommandDelete";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool InsertGyroDeviceCommandReply( ref Guid id, Guid gyroDevice, DateTime timestamp, Guid command, Types.DeviceCommandReplyStatus status, string message )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "GyroDeviceCommandReplyInsert";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id, System.Data.ParameterDirection.InputOutput );
                var gyroDeviceParameter = sqlCommandParameters.AddReference( "@GyroDevice", gyroDevice );
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@Timestamp", timestamp );
                var commandParameter = sqlCommandParameters.AddReference( "@Command", command );
                var statusParameter = sqlCommandParameters.AddEnum( "@Status", status );
                var messageParameter = sqlCommandParameters.AddNVarChar( "@Message", message, 0 );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    id = (Guid)idParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool UpdateGyroDeviceCommandReply( Guid id, ref long rowVersion, Guid gyroDevice, DateTime timestamp, Guid command, Types.DeviceCommandReplyStatus status, string message )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "GyroDeviceCommandReplyUpdate";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion, System.Data.ParameterDirection.InputOutput );
                var gyroDeviceParameter = sqlCommandParameters.AddReference( "@GyroDevice", gyroDevice );
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@Timestamp", timestamp );
                var commandParameter = sqlCommandParameters.AddReference( "@Command", command );
                var statusParameter = sqlCommandParameters.AddEnum( "@Status", status );
                var messageParameter = sqlCommandParameters.AddNVarChar( "@Message", message, 0 );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    rowVersion = (long)rowVersionParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool DeleteGyroDeviceCommandReply( Guid id, long rowVersion )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "GyroDeviceCommandReplyDelete";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool InsertGyroDeviceConfiguration( ref Guid id, Guid gyroDevice, DateTime timestamp, double defaultHeadingTrueNorth, double defaultMagneticTrueNorth, double headingTrueNorthOffset, double headingMagneticNorthOffset, string pitchTransducerName, string rollTransducerName )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "GyroDeviceConfigurationInsert";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id, System.Data.ParameterDirection.InputOutput );
                var gyroDeviceParameter = sqlCommandParameters.AddReference( "@GyroDevice", gyroDevice );
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@Timestamp", timestamp );
                var defaultHeadingTrueNorthParameter = sqlCommandParameters.AddDouble( "@DefaultHeadingTrueNorth", defaultHeadingTrueNorth );
                var defaultMagneticTrueNorthParameter = sqlCommandParameters.AddDouble( "@DefaultMagneticTrueNorth", defaultMagneticTrueNorth );
                var headingTrueNorthOffsetParameter = sqlCommandParameters.AddDouble( "@HeadingTrueNorthOffset", headingTrueNorthOffset );
                var headingMagneticNorthOffsetParameter = sqlCommandParameters.AddDouble( "@HeadingMagneticNorthOffset", headingMagneticNorthOffset );
                var pitchTransducerNameParameter = sqlCommandParameters.AddNVarChar( "@PitchTransducerName", pitchTransducerName, 64 );
                var rollTransducerNameParameter = sqlCommandParameters.AddNVarChar( "@RollTransducerName", rollTransducerName, 64 );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    id = (Guid)idParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool UpdateGyroDeviceConfiguration( Guid id, ref long rowVersion, Guid gyroDevice, DateTime timestamp, double defaultHeadingTrueNorth, double defaultMagneticTrueNorth, double headingTrueNorthOffset, double headingMagneticNorthOffset, string pitchTransducerName, string rollTransducerName )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "GyroDeviceConfigurationUpdate";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion, System.Data.ParameterDirection.InputOutput );
                var gyroDeviceParameter = sqlCommandParameters.AddReference( "@GyroDevice", gyroDevice );
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@Timestamp", timestamp );
                var defaultHeadingTrueNorthParameter = sqlCommandParameters.AddDouble( "@DefaultHeadingTrueNorth", defaultHeadingTrueNorth );
                var defaultMagneticTrueNorthParameter = sqlCommandParameters.AddDouble( "@DefaultMagneticTrueNorth", defaultMagneticTrueNorth );
                var headingTrueNorthOffsetParameter = sqlCommandParameters.AddDouble( "@HeadingTrueNorthOffset", headingTrueNorthOffset );
                var headingMagneticNorthOffsetParameter = sqlCommandParameters.AddDouble( "@HeadingMagneticNorthOffset", headingMagneticNorthOffset );
                var pitchTransducerNameParameter = sqlCommandParameters.AddNVarChar( "@PitchTransducerName", pitchTransducerName, 64 );
                var rollTransducerNameParameter = sqlCommandParameters.AddNVarChar( "@RollTransducerName", rollTransducerName, 64 );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    rowVersion = (long)rowVersionParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool DeleteGyroDeviceConfiguration( Guid id, long rowVersion )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "GyroDeviceConfigurationDelete";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool InsertCallsign( ref Guid id, string identifier )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "CallsignInsert";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id, System.Data.ParameterDirection.InputOutput );
                var identifierParameter = sqlCommandParameters.AddNVarChar( "@Identifier", identifier, 127 );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    id = (Guid)idParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool UpdateCallsign( Guid id, ref long rowVersion, string identifier )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "CallsignUpdate";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion, System.Data.ParameterDirection.InputOutput );
                var identifierParameter = sqlCommandParameters.AddNVarChar( "@Identifier", identifier, 127 );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    rowVersion = (long)rowVersionParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool DeleteCallsign( Guid id, long rowVersion )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "CallsignDelete";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool InsertInternationalMaritimeOrganizationNumber( ref Guid id, long identifier )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "InternationalMaritimeOrganizationNumberInsert";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id, System.Data.ParameterDirection.InputOutput );
                var identifierParameter = sqlCommandParameters.AddInt64( "@Identifier", identifier );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    id = (Guid)idParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool UpdateInternationalMaritimeOrganizationNumber( Guid id, ref long rowVersion, long identifier )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "InternationalMaritimeOrganizationNumberUpdate";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion, System.Data.ParameterDirection.InputOutput );
                var identifierParameter = sqlCommandParameters.AddInt64( "@Identifier", identifier );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    rowVersion = (long)rowVersionParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool DeleteInternationalMaritimeOrganizationNumber( Guid id, long rowVersion )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "InternationalMaritimeOrganizationNumberDelete";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool InsertMaritimeMobileServiceIdentity( ref Guid id, long identifier )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "MaritimeMobileServiceIdentityInsert";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id, System.Data.ParameterDirection.InputOutput );
                var identifierParameter = sqlCommandParameters.AddInt64( "@Identifier", identifier );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    id = (Guid)idParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool UpdateMaritimeMobileServiceIdentity( Guid id, ref long rowVersion, long identifier )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "MaritimeMobileServiceIdentityUpdate";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion, System.Data.ParameterDirection.InputOutput );
                var identifierParameter = sqlCommandParameters.AddInt64( "@Identifier", identifier );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    rowVersion = (long)rowVersionParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool DeleteMaritimeMobileServiceIdentity( Guid id, long rowVersion )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "MaritimeMobileServiceIdentityDelete";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool InsertName( ref Guid id, string text )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "NameInsert";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id, System.Data.ParameterDirection.InputOutput );
                var textParameter = sqlCommandParameters.AddNVarChar( "@Text", text, 127 );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    id = (Guid)idParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool UpdateName( Guid id, ref long rowVersion, string text )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "NameUpdate";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion, System.Data.ParameterDirection.InputOutput );
                var textParameter = sqlCommandParameters.AddNVarChar( "@Text", text, 127 );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    rowVersion = (long)rowVersionParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool DeleteName( Guid id, long rowVersion )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "NameDelete";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool InsertInt16TimeseriesValue( ref Guid id, Guid timeseries, DateTime timestamp, short? value__ )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "Int16TimeseriesValueInsert";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id, System.Data.ParameterDirection.InputOutput );
                var timeseriesParameter = sqlCommandParameters.AddReference( "@Timeseries", timeseries );
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@Timestamp", timestamp );
                var valueParameter = sqlCommandParameters.AddInt16( "@Value", value__ );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    id = (Guid)idParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool UpdateInt16TimeseriesValue( Guid id, ref long rowVersion, Guid timeseries, DateTime timestamp, short? value__ )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "Int16TimeseriesValueUpdate";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion, System.Data.ParameterDirection.InputOutput );
                var timeseriesParameter = sqlCommandParameters.AddReference( "@Timeseries", timeseries );
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@Timestamp", timestamp );
                var valueParameter = sqlCommandParameters.AddInt16( "@Value", value__ );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    rowVersion = (long)rowVersionParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool DeleteInt16TimeseriesValue( Guid id, long rowVersion )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "Int16TimeseriesValueDelete";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool InsertInt32TimeseriesValue( ref Guid id, Guid timeseries, DateTime timestamp, int? value__ )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "Int32TimeseriesValueInsert";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id, System.Data.ParameterDirection.InputOutput );
                var timeseriesParameter = sqlCommandParameters.AddReference( "@Timeseries", timeseries );
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@Timestamp", timestamp );
                var valueParameter = sqlCommandParameters.AddInt32( "@Value", value__ );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    id = (Guid)idParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool UpdateInt32TimeseriesValue( Guid id, ref long rowVersion, Guid timeseries, DateTime timestamp, int? value__ )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "Int32TimeseriesValueUpdate";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion, System.Data.ParameterDirection.InputOutput );
                var timeseriesParameter = sqlCommandParameters.AddReference( "@Timeseries", timeseries );
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@Timestamp", timestamp );
                var valueParameter = sqlCommandParameters.AddInt32( "@Value", value__ );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    rowVersion = (long)rowVersionParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool DeleteInt32TimeseriesValue( Guid id, long rowVersion )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "Int32TimeseriesValueDelete";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool InsertInt64TimeseriesValue( ref Guid id, Guid timeseries, DateTime timestamp, long? value__ )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "Int64TimeseriesValueInsert";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id, System.Data.ParameterDirection.InputOutput );
                var timeseriesParameter = sqlCommandParameters.AddReference( "@Timeseries", timeseries );
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@Timestamp", timestamp );
                var valueParameter = sqlCommandParameters.AddInt64( "@Value", value__ );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    id = (Guid)idParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool UpdateInt64TimeseriesValue( Guid id, ref long rowVersion, Guid timeseries, DateTime timestamp, long? value__ )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "Int64TimeseriesValueUpdate";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion, System.Data.ParameterDirection.InputOutput );
                var timeseriesParameter = sqlCommandParameters.AddReference( "@Timeseries", timeseries );
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@Timestamp", timestamp );
                var valueParameter = sqlCommandParameters.AddInt64( "@Value", value__ );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    rowVersion = (long)rowVersionParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool DeleteInt64TimeseriesValue( Guid id, long rowVersion )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "Int64TimeseriesValueDelete";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool InsertBaseStation( ref Guid id, string name, Guid type )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "BaseStationInsert";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id, System.Data.ParameterDirection.InputOutput );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@Name", name, 127 );
                var typeParameter = sqlCommandParameters.AddReference( "@Type", type );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    id = (Guid)idParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool UpdateBaseStation( Guid id, ref long rowVersion, string name, Guid type )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "BaseStationUpdate";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion, System.Data.ParameterDirection.InputOutput );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@Name", name, 127 );
                var typeParameter = sqlCommandParameters.AddReference( "@Type", type );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    rowVersion = (long)rowVersionParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool DeleteBaseStation( Guid id, long rowVersion )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "BaseStationDelete";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool InsertCameraDevice( ref Guid id, Guid host, string name, string description, Guid enabledTimeseries )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "CameraDeviceInsert";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id, System.Data.ParameterDirection.InputOutput );
                var hostParameter = sqlCommandParameters.AddReference( "@Host", host );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@Name", name, 127 );
                var descriptionParameter = sqlCommandParameters.AddNVarChar( "@Description", description, 0 );
                var enabledTimeseriesParameter = sqlCommandParameters.AddReference( "@EnabledTimeseries", enabledTimeseries );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    id = (Guid)idParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool UpdateCameraDevice( Guid id, ref long rowVersion, Guid host, string name, string description, Guid enabledTimeseries )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "CameraDeviceUpdate";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion, System.Data.ParameterDirection.InputOutput );
                var hostParameter = sqlCommandParameters.AddReference( "@Host", host );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@Name", name, 127 );
                var descriptionParameter = sqlCommandParameters.AddNVarChar( "@Description", description, 0 );
                var enabledTimeseriesParameter = sqlCommandParameters.AddReference( "@EnabledTimeseries", enabledTimeseries );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    rowVersion = (long)rowVersionParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool DeleteCameraDevice( Guid id, long rowVersion )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "CameraDeviceDelete";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool InsertGNSSDevice( ref Guid id, Guid host, string name, string description, Guid enabledTimeseries, Guid latitudeTimeseries, Guid longitudeTimeseries, Guid altitudeTimeseries )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "GNSSDeviceInsert";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id, System.Data.ParameterDirection.InputOutput );
                var hostParameter = sqlCommandParameters.AddReference( "@Host", host );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@Name", name, 127 );
                var descriptionParameter = sqlCommandParameters.AddNVarChar( "@Description", description, 0 );
                var enabledTimeseriesParameter = sqlCommandParameters.AddReference( "@EnabledTimeseries", enabledTimeseries );
                var latitudeTimeseriesParameter = sqlCommandParameters.AddReference( "@LatitudeTimeseries", latitudeTimeseries );
                var longitudeTimeseriesParameter = sqlCommandParameters.AddReference( "@LongitudeTimeseries", longitudeTimeseries );
                var altitudeTimeseriesParameter = sqlCommandParameters.AddReference( "@AltitudeTimeseries", altitudeTimeseries );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    id = (Guid)idParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool UpdateGNSSDevice( Guid id, ref long rowVersion, Guid host, string name, string description, Guid enabledTimeseries, Guid latitudeTimeseries, Guid longitudeTimeseries, Guid altitudeTimeseries )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "GNSSDeviceUpdate";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion, System.Data.ParameterDirection.InputOutput );
                var hostParameter = sqlCommandParameters.AddReference( "@Host", host );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@Name", name, 127 );
                var descriptionParameter = sqlCommandParameters.AddNVarChar( "@Description", description, 0 );
                var enabledTimeseriesParameter = sqlCommandParameters.AddReference( "@EnabledTimeseries", enabledTimeseries );
                var latitudeTimeseriesParameter = sqlCommandParameters.AddReference( "@LatitudeTimeseries", latitudeTimeseries );
                var longitudeTimeseriesParameter = sqlCommandParameters.AddReference( "@LongitudeTimeseries", longitudeTimeseries );
                var altitudeTimeseriesParameter = sqlCommandParameters.AddReference( "@AltitudeTimeseries", altitudeTimeseries );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    rowVersion = (long)rowVersionParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool DeleteGNSSDevice( Guid id, long rowVersion )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "GNSSDeviceDelete";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool InsertGyroDevice( ref Guid id, Guid host, string name, string description, Guid enabledTimeseries, Guid headingTrueNorthTimeseries, Guid headingMagneticNorthTimeseries, Guid pitchTimeseries, Guid rateOfTurnTimeseries, Guid rollTimeseries, Guid courseTimeseries, Guid speedTimeseries, Guid gNSSDevice )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "GyroDeviceInsert";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id, System.Data.ParameterDirection.InputOutput );
                var hostParameter = sqlCommandParameters.AddReference( "@Host", host );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@Name", name, 127 );
                var descriptionParameter = sqlCommandParameters.AddNVarChar( "@Description", description, 0 );
                var enabledTimeseriesParameter = sqlCommandParameters.AddReference( "@EnabledTimeseries", enabledTimeseries );
                var headingTrueNorthTimeseriesParameter = sqlCommandParameters.AddReference( "@HeadingTrueNorthTimeseries", headingTrueNorthTimeseries );
                var headingMagneticNorthTimeseriesParameter = sqlCommandParameters.AddReference( "@HeadingMagneticNorthTimeseries", headingMagneticNorthTimeseries );
                var pitchTimeseriesParameter = sqlCommandParameters.AddReference( "@PitchTimeseries", pitchTimeseries );
                var rateOfTurnTimeseriesParameter = sqlCommandParameters.AddReference( "@RateOfTurnTimeseries", rateOfTurnTimeseries );
                var rollTimeseriesParameter = sqlCommandParameters.AddReference( "@RollTimeseries", rollTimeseries );
                var courseTimeseriesParameter = sqlCommandParameters.AddReference( "@CourseTimeseries", courseTimeseries );
                var speedTimeseriesParameter = sqlCommandParameters.AddReference( "@SpeedTimeseries", speedTimeseries );
                var gNSSDeviceParameter = sqlCommandParameters.AddReference( "@GNSSDevice", gNSSDevice );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    id = (Guid)idParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool UpdateGyroDevice( Guid id, ref long rowVersion, Guid host, string name, string description, Guid enabledTimeseries, Guid headingTrueNorthTimeseries, Guid headingMagneticNorthTimeseries, Guid pitchTimeseries, Guid rateOfTurnTimeseries, Guid rollTimeseries, Guid courseTimeseries, Guid speedTimeseries, Guid gNSSDevice )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "GyroDeviceUpdate";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion, System.Data.ParameterDirection.InputOutput );
                var hostParameter = sqlCommandParameters.AddReference( "@Host", host );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@Name", name, 127 );
                var descriptionParameter = sqlCommandParameters.AddNVarChar( "@Description", description, 0 );
                var enabledTimeseriesParameter = sqlCommandParameters.AddReference( "@EnabledTimeseries", enabledTimeseries );
                var headingTrueNorthTimeseriesParameter = sqlCommandParameters.AddReference( "@HeadingTrueNorthTimeseries", headingTrueNorthTimeseries );
                var headingMagneticNorthTimeseriesParameter = sqlCommandParameters.AddReference( "@HeadingMagneticNorthTimeseries", headingMagneticNorthTimeseries );
                var pitchTimeseriesParameter = sqlCommandParameters.AddReference( "@PitchTimeseries", pitchTimeseries );
                var rateOfTurnTimeseriesParameter = sqlCommandParameters.AddReference( "@RateOfTurnTimeseries", rateOfTurnTimeseries );
                var rollTimeseriesParameter = sqlCommandParameters.AddReference( "@RollTimeseries", rollTimeseries );
                var courseTimeseriesParameter = sqlCommandParameters.AddReference( "@CourseTimeseries", courseTimeseries );
                var speedTimeseriesParameter = sqlCommandParameters.AddReference( "@SpeedTimeseries", speedTimeseries );
                var gNSSDeviceParameter = sqlCommandParameters.AddReference( "@GNSSDevice", gNSSDevice );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    rowVersion = (long)rowVersionParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool DeleteGyroDevice( Guid id, long rowVersion )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "GyroDeviceDelete";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool InsertLineInputDevice( ref Guid id, Guid host, string name, string description, Guid enabledTimeseries )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "LineInputDeviceInsert";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id, System.Data.ParameterDirection.InputOutput );
                var hostParameter = sqlCommandParameters.AddReference( "@Host", host );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@Name", name, 127 );
                var descriptionParameter = sqlCommandParameters.AddNVarChar( "@Description", description, 0 );
                var enabledTimeseriesParameter = sqlCommandParameters.AddReference( "@EnabledTimeseries", enabledTimeseries );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    id = (Guid)idParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool UpdateLineInputDevice( Guid id, ref long rowVersion, Guid host, string name, string description, Guid enabledTimeseries )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "LineInputDeviceUpdate";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion, System.Data.ParameterDirection.InputOutput );
                var hostParameter = sqlCommandParameters.AddReference( "@Host", host );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@Name", name, 127 );
                var descriptionParameter = sqlCommandParameters.AddNVarChar( "@Description", description, 0 );
                var enabledTimeseriesParameter = sqlCommandParameters.AddReference( "@EnabledTimeseries", enabledTimeseries );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    rowVersion = (long)rowVersionParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool DeleteLineInputDevice( Guid id, long rowVersion )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "LineInputDeviceDelete";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool InsertOilSpillDetectorDevice( ref Guid id, Guid host, string name, string description, Guid enabledTimeseries )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "OilSpillDetectorDeviceInsert";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id, System.Data.ParameterDirection.InputOutput );
                var hostParameter = sqlCommandParameters.AddReference( "@Host", host );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@Name", name, 127 );
                var descriptionParameter = sqlCommandParameters.AddNVarChar( "@Description", description, 0 );
                var enabledTimeseriesParameter = sqlCommandParameters.AddReference( "@EnabledTimeseries", enabledTimeseries );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    id = (Guid)idParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool UpdateOilSpillDetectorDevice( Guid id, ref long rowVersion, Guid host, string name, string description, Guid enabledTimeseries )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "OilSpillDetectorDeviceUpdate";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion, System.Data.ParameterDirection.InputOutput );
                var hostParameter = sqlCommandParameters.AddReference( "@Host", host );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@Name", name, 127 );
                var descriptionParameter = sqlCommandParameters.AddNVarChar( "@Description", description, 0 );
                var enabledTimeseriesParameter = sqlCommandParameters.AddReference( "@EnabledTimeseries", enabledTimeseries );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    rowVersion = (long)rowVersionParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool DeleteOilSpillDetectorDevice( Guid id, long rowVersion )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "OilSpillDetectorDeviceDelete";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool InsertRadioDevice( ref Guid id, Guid host, string name, string description, Guid enabledTimeseries )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "RadioDeviceInsert";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id, System.Data.ParameterDirection.InputOutput );
                var hostParameter = sqlCommandParameters.AddReference( "@Host", host );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@Name", name, 127 );
                var descriptionParameter = sqlCommandParameters.AddNVarChar( "@Description", description, 0 );
                var enabledTimeseriesParameter = sqlCommandParameters.AddReference( "@EnabledTimeseries", enabledTimeseries );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    id = (Guid)idParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool UpdateRadioDevice( Guid id, ref long rowVersion, Guid host, string name, string description, Guid enabledTimeseries )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "RadioDeviceUpdate";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion, System.Data.ParameterDirection.InputOutput );
                var hostParameter = sqlCommandParameters.AddReference( "@Host", host );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@Name", name, 127 );
                var descriptionParameter = sqlCommandParameters.AddNVarChar( "@Description", description, 0 );
                var enabledTimeseriesParameter = sqlCommandParameters.AddReference( "@EnabledTimeseries", enabledTimeseries );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    rowVersion = (long)rowVersionParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool DeleteRadioDevice( Guid id, long rowVersion )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "RadioDeviceDelete";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool InsertRadomeDevice( ref Guid id, Guid host, string name, string description, Guid enabledTimeseries, Guid? radar, Guid pressureTimeseries, Guid temperatureTimeseries, Guid dewPointTimeseries, Guid statusTimeseries )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "RadomeDeviceInsert";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id, System.Data.ParameterDirection.InputOutput );
                var hostParameter = sqlCommandParameters.AddReference( "@Host", host );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@Name", name, 127 );
                var descriptionParameter = sqlCommandParameters.AddNVarChar( "@Description", description, 0 );
                var enabledTimeseriesParameter = sqlCommandParameters.AddReference( "@EnabledTimeseries", enabledTimeseries );
                var radarParameter = sqlCommandParameters.AddReference( "@Radar", radar );
                var pressureTimeseriesParameter = sqlCommandParameters.AddReference( "@PressureTimeseries", pressureTimeseries );
                var temperatureTimeseriesParameter = sqlCommandParameters.AddReference( "@TemperatureTimeseries", temperatureTimeseries );
                var dewPointTimeseriesParameter = sqlCommandParameters.AddReference( "@DewPointTimeseries", dewPointTimeseries );
                var statusTimeseriesParameter = sqlCommandParameters.AddReference( "@StatusTimeseries", statusTimeseries );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    id = (Guid)idParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool UpdateRadomeDevice( Guid id, ref long rowVersion, Guid host, string name, string description, Guid enabledTimeseries, Guid? radar, Guid pressureTimeseries, Guid temperatureTimeseries, Guid dewPointTimeseries, Guid statusTimeseries )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "RadomeDeviceUpdate";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion, System.Data.ParameterDirection.InputOutput );
                var hostParameter = sqlCommandParameters.AddReference( "@Host", host );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@Name", name, 127 );
                var descriptionParameter = sqlCommandParameters.AddNVarChar( "@Description", description, 0 );
                var enabledTimeseriesParameter = sqlCommandParameters.AddReference( "@EnabledTimeseries", enabledTimeseries );
                var radarParameter = sqlCommandParameters.AddReference( "@Radar", radar );
                var pressureTimeseriesParameter = sqlCommandParameters.AddReference( "@PressureTimeseries", pressureTimeseries );
                var temperatureTimeseriesParameter = sqlCommandParameters.AddReference( "@TemperatureTimeseries", temperatureTimeseries );
                var dewPointTimeseriesParameter = sqlCommandParameters.AddReference( "@DewPointTimeseries", dewPointTimeseries );
                var statusTimeseriesParameter = sqlCommandParameters.AddReference( "@StatusTimeseries", statusTimeseries );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    rowVersion = (long)rowVersionParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool DeleteRadomeDevice( Guid id, long rowVersion )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "RadomeDeviceDelete";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool InsertAisDevice( ref Guid id, Guid host, string name, string description, Guid enabledTimeseries )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "AisDeviceInsert";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id, System.Data.ParameterDirection.InputOutput );
                var hostParameter = sqlCommandParameters.AddReference( "@Host", host );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@Name", name, 127 );
                var descriptionParameter = sqlCommandParameters.AddNVarChar( "@Description", description, 0 );
                var enabledTimeseriesParameter = sqlCommandParameters.AddReference( "@EnabledTimeseries", enabledTimeseries );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    id = (Guid)idParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool UpdateAisDevice( Guid id, ref long rowVersion, Guid host, string name, string description, Guid enabledTimeseries )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "AisDeviceUpdate";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion, System.Data.ParameterDirection.InputOutput );
                var hostParameter = sqlCommandParameters.AddReference( "@Host", host );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@Name", name, 127 );
                var descriptionParameter = sqlCommandParameters.AddNVarChar( "@Description", description, 0 );
                var enabledTimeseriesParameter = sqlCommandParameters.AddReference( "@EnabledTimeseries", enabledTimeseries );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    rowVersion = (long)rowVersionParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool DeleteAisDevice( Guid id, long rowVersion )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "AisDeviceDelete";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool InsertRadarDevice( ref Guid id, Guid host, string name, string description, Guid enabledTimeseries, Guid saveSettingsTimeseries, Guid powerOnTimeseries, Guid trackingOnTimeseries, Guid radarPulseTimeseries, Guid tuningTimeseries, Guid blankSector1Timeseries, Guid sector1StartTimeseries, Guid sector1EndTimeseries, Guid blankSector2Timeseries, Guid sector2StartTimeseries, Guid sector2EndTimeseries, Guid enableAutomaticFrequencyControlTimeseries, Guid azimuthOffsetTimeseries, Guid enableSensitivityTimeControlTimeseries, Guid automaticSensitivityTimeControlTimeseries, Guid sensitivityTimeControlLevelTimeseries, Guid enableFastTimeConstantTimeseries, Guid fastTimeConstantLevelTimeseries, Guid fastTimeConstantModeTimeseries, Guid latitudeTimeseries, Guid longitudeTimeseries, Guid? radome, Guid? gNSSDevice )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "RadarDeviceInsert";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id, System.Data.ParameterDirection.InputOutput );
                var hostParameter = sqlCommandParameters.AddReference( "@Host", host );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@Name", name, 127 );
                var descriptionParameter = sqlCommandParameters.AddNVarChar( "@Description", description, 0 );
                var enabledTimeseriesParameter = sqlCommandParameters.AddReference( "@EnabledTimeseries", enabledTimeseries );
                var saveSettingsTimeseriesParameter = sqlCommandParameters.AddReference( "@SaveSettingsTimeseries", saveSettingsTimeseries );
                var powerOnTimeseriesParameter = sqlCommandParameters.AddReference( "@PowerOnTimeseries", powerOnTimeseries );
                var trackingOnTimeseriesParameter = sqlCommandParameters.AddReference( "@TrackingOnTimeseries", trackingOnTimeseries );
                var radarPulseTimeseriesParameter = sqlCommandParameters.AddReference( "@RadarPulseTimeseries", radarPulseTimeseries );
                var tuningTimeseriesParameter = sqlCommandParameters.AddReference( "@TuningTimeseries", tuningTimeseries );
                var blankSector1TimeseriesParameter = sqlCommandParameters.AddReference( "@BlankSector1Timeseries", blankSector1Timeseries );
                var sector1StartTimeseriesParameter = sqlCommandParameters.AddReference( "@Sector1StartTimeseries", sector1StartTimeseries );
                var sector1EndTimeseriesParameter = sqlCommandParameters.AddReference( "@Sector1EndTimeseries", sector1EndTimeseries );
                var blankSector2TimeseriesParameter = sqlCommandParameters.AddReference( "@BlankSector2Timeseries", blankSector2Timeseries );
                var sector2StartTimeseriesParameter = sqlCommandParameters.AddReference( "@Sector2StartTimeseries", sector2StartTimeseries );
                var sector2EndTimeseriesParameter = sqlCommandParameters.AddReference( "@Sector2EndTimeseries", sector2EndTimeseries );
                var enableAutomaticFrequencyControlTimeseriesParameter = sqlCommandParameters.AddReference( "@EnableAutomaticFrequencyControlTimeseries", enableAutomaticFrequencyControlTimeseries );
                var azimuthOffsetTimeseriesParameter = sqlCommandParameters.AddReference( "@AzimuthOffsetTimeseries", azimuthOffsetTimeseries );
                var enableSensitivityTimeControlTimeseriesParameter = sqlCommandParameters.AddReference( "@EnableSensitivityTimeControlTimeseries", enableSensitivityTimeControlTimeseries );
                var automaticSensitivityTimeControlTimeseriesParameter = sqlCommandParameters.AddReference( "@AutomaticSensitivityTimeControlTimeseries", automaticSensitivityTimeControlTimeseries );
                var sensitivityTimeControlLevelTimeseriesParameter = sqlCommandParameters.AddReference( "@SensitivityTimeControlLevelTimeseries", sensitivityTimeControlLevelTimeseries );
                var enableFastTimeConstantTimeseriesParameter = sqlCommandParameters.AddReference( "@EnableFastTimeConstantTimeseries", enableFastTimeConstantTimeseries );
                var fastTimeConstantLevelTimeseriesParameter = sqlCommandParameters.AddReference( "@FastTimeConstantLevelTimeseries", fastTimeConstantLevelTimeseries );
                var fastTimeConstantModeTimeseriesParameter = sqlCommandParameters.AddReference( "@FastTimeConstantModeTimeseries", fastTimeConstantModeTimeseries );
                var latitudeTimeseriesParameter = sqlCommandParameters.AddReference( "@LatitudeTimeseries", latitudeTimeseries );
                var longitudeTimeseriesParameter = sqlCommandParameters.AddReference( "@LongitudeTimeseries", longitudeTimeseries );
                var radomeParameter = sqlCommandParameters.AddReference( "@Radome", radome );
                var gNSSDeviceParameter = sqlCommandParameters.AddReference( "@GNSSDevice", gNSSDevice );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    id = (Guid)idParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool UpdateRadarDevice( Guid id, ref long rowVersion, Guid host, string name, string description, Guid enabledTimeseries, Guid saveSettingsTimeseries, Guid powerOnTimeseries, Guid trackingOnTimeseries, Guid radarPulseTimeseries, Guid tuningTimeseries, Guid blankSector1Timeseries, Guid sector1StartTimeseries, Guid sector1EndTimeseries, Guid blankSector2Timeseries, Guid sector2StartTimeseries, Guid sector2EndTimeseries, Guid enableAutomaticFrequencyControlTimeseries, Guid azimuthOffsetTimeseries, Guid enableSensitivityTimeControlTimeseries, Guid automaticSensitivityTimeControlTimeseries, Guid sensitivityTimeControlLevelTimeseries, Guid enableFastTimeConstantTimeseries, Guid fastTimeConstantLevelTimeseries, Guid fastTimeConstantModeTimeseries, Guid latitudeTimeseries, Guid longitudeTimeseries, Guid? radome, Guid? gNSSDevice )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "RadarDeviceUpdate";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion, System.Data.ParameterDirection.InputOutput );
                var hostParameter = sqlCommandParameters.AddReference( "@Host", host );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@Name", name, 127 );
                var descriptionParameter = sqlCommandParameters.AddNVarChar( "@Description", description, 0 );
                var enabledTimeseriesParameter = sqlCommandParameters.AddReference( "@EnabledTimeseries", enabledTimeseries );
                var saveSettingsTimeseriesParameter = sqlCommandParameters.AddReference( "@SaveSettingsTimeseries", saveSettingsTimeseries );
                var powerOnTimeseriesParameter = sqlCommandParameters.AddReference( "@PowerOnTimeseries", powerOnTimeseries );
                var trackingOnTimeseriesParameter = sqlCommandParameters.AddReference( "@TrackingOnTimeseries", trackingOnTimeseries );
                var radarPulseTimeseriesParameter = sqlCommandParameters.AddReference( "@RadarPulseTimeseries", radarPulseTimeseries );
                var tuningTimeseriesParameter = sqlCommandParameters.AddReference( "@TuningTimeseries", tuningTimeseries );
                var blankSector1TimeseriesParameter = sqlCommandParameters.AddReference( "@BlankSector1Timeseries", blankSector1Timeseries );
                var sector1StartTimeseriesParameter = sqlCommandParameters.AddReference( "@Sector1StartTimeseries", sector1StartTimeseries );
                var sector1EndTimeseriesParameter = sqlCommandParameters.AddReference( "@Sector1EndTimeseries", sector1EndTimeseries );
                var blankSector2TimeseriesParameter = sqlCommandParameters.AddReference( "@BlankSector2Timeseries", blankSector2Timeseries );
                var sector2StartTimeseriesParameter = sqlCommandParameters.AddReference( "@Sector2StartTimeseries", sector2StartTimeseries );
                var sector2EndTimeseriesParameter = sqlCommandParameters.AddReference( "@Sector2EndTimeseries", sector2EndTimeseries );
                var enableAutomaticFrequencyControlTimeseriesParameter = sqlCommandParameters.AddReference( "@EnableAutomaticFrequencyControlTimeseries", enableAutomaticFrequencyControlTimeseries );
                var azimuthOffsetTimeseriesParameter = sqlCommandParameters.AddReference( "@AzimuthOffsetTimeseries", azimuthOffsetTimeseries );
                var enableSensitivityTimeControlTimeseriesParameter = sqlCommandParameters.AddReference( "@EnableSensitivityTimeControlTimeseries", enableSensitivityTimeControlTimeseries );
                var automaticSensitivityTimeControlTimeseriesParameter = sqlCommandParameters.AddReference( "@AutomaticSensitivityTimeControlTimeseries", automaticSensitivityTimeControlTimeseries );
                var sensitivityTimeControlLevelTimeseriesParameter = sqlCommandParameters.AddReference( "@SensitivityTimeControlLevelTimeseries", sensitivityTimeControlLevelTimeseries );
                var enableFastTimeConstantTimeseriesParameter = sqlCommandParameters.AddReference( "@EnableFastTimeConstantTimeseries", enableFastTimeConstantTimeseries );
                var fastTimeConstantLevelTimeseriesParameter = sqlCommandParameters.AddReference( "@FastTimeConstantLevelTimeseries", fastTimeConstantLevelTimeseries );
                var fastTimeConstantModeTimeseriesParameter = sqlCommandParameters.AddReference( "@FastTimeConstantModeTimeseries", fastTimeConstantModeTimeseries );
                var latitudeTimeseriesParameter = sqlCommandParameters.AddReference( "@LatitudeTimeseries", latitudeTimeseries );
                var longitudeTimeseriesParameter = sqlCommandParameters.AddReference( "@LongitudeTimeseries", longitudeTimeseries );
                var radomeParameter = sqlCommandParameters.AddReference( "@Radome", radome );
                var gNSSDeviceParameter = sqlCommandParameters.AddReference( "@GNSSDevice", gNSSDevice );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    rowVersion = (long)rowVersionParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool DeleteRadarDevice( Guid id, long rowVersion )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "RadarDeviceDelete";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool InsertWeatherStationDevice( ref Guid id, Guid host, string name, string description, Guid enabledTimeseries, Guid barometricPressureTimeseries, Guid airTemperatureTimeseries, Guid waterTemperatureTimeseries, Guid relativeHumidityTimeseries, Guid absoluteHumidityTimeseries, Guid dewPointTimeseries, Guid windDirectionTimeseries, Guid windSpeedTimeseries, Guid gyro )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "WeatherStationDeviceInsert";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id, System.Data.ParameterDirection.InputOutput );
                var hostParameter = sqlCommandParameters.AddReference( "@Host", host );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@Name", name, 127 );
                var descriptionParameter = sqlCommandParameters.AddNVarChar( "@Description", description, 0 );
                var enabledTimeseriesParameter = sqlCommandParameters.AddReference( "@EnabledTimeseries", enabledTimeseries );
                var barometricPressureTimeseriesParameter = sqlCommandParameters.AddReference( "@BarometricPressureTimeseries", barometricPressureTimeseries );
                var airTemperatureTimeseriesParameter = sqlCommandParameters.AddReference( "@AirTemperatureTimeseries", airTemperatureTimeseries );
                var waterTemperatureTimeseriesParameter = sqlCommandParameters.AddReference( "@WaterTemperatureTimeseries", waterTemperatureTimeseries );
                var relativeHumidityTimeseriesParameter = sqlCommandParameters.AddReference( "@RelativeHumidityTimeseries", relativeHumidityTimeseries );
                var absoluteHumidityTimeseriesParameter = sqlCommandParameters.AddReference( "@AbsoluteHumidityTimeseries", absoluteHumidityTimeseries );
                var dewPointTimeseriesParameter = sqlCommandParameters.AddReference( "@DewPointTimeseries", dewPointTimeseries );
                var windDirectionTimeseriesParameter = sqlCommandParameters.AddReference( "@WindDirectionTimeseries", windDirectionTimeseries );
                var windSpeedTimeseriesParameter = sqlCommandParameters.AddReference( "@WindSpeedTimeseries", windSpeedTimeseries );
                var gyroParameter = sqlCommandParameters.AddReference( "@Gyro", gyro );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    id = (Guid)idParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool UpdateWeatherStationDevice( Guid id, ref long rowVersion, Guid host, string name, string description, Guid enabledTimeseries, Guid barometricPressureTimeseries, Guid airTemperatureTimeseries, Guid waterTemperatureTimeseries, Guid relativeHumidityTimeseries, Guid absoluteHumidityTimeseries, Guid dewPointTimeseries, Guid windDirectionTimeseries, Guid windSpeedTimeseries, Guid gyro )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "WeatherStationDeviceUpdate";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion, System.Data.ParameterDirection.InputOutput );
                var hostParameter = sqlCommandParameters.AddReference( "@Host", host );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@Name", name, 127 );
                var descriptionParameter = sqlCommandParameters.AddNVarChar( "@Description", description, 0 );
                var enabledTimeseriesParameter = sqlCommandParameters.AddReference( "@EnabledTimeseries", enabledTimeseries );
                var barometricPressureTimeseriesParameter = sqlCommandParameters.AddReference( "@BarometricPressureTimeseries", barometricPressureTimeseries );
                var airTemperatureTimeseriesParameter = sqlCommandParameters.AddReference( "@AirTemperatureTimeseries", airTemperatureTimeseries );
                var waterTemperatureTimeseriesParameter = sqlCommandParameters.AddReference( "@WaterTemperatureTimeseries", waterTemperatureTimeseries );
                var relativeHumidityTimeseriesParameter = sqlCommandParameters.AddReference( "@RelativeHumidityTimeseries", relativeHumidityTimeseries );
                var absoluteHumidityTimeseriesParameter = sqlCommandParameters.AddReference( "@AbsoluteHumidityTimeseries", absoluteHumidityTimeseries );
                var dewPointTimeseriesParameter = sqlCommandParameters.AddReference( "@DewPointTimeseries", dewPointTimeseries );
                var windDirectionTimeseriesParameter = sqlCommandParameters.AddReference( "@WindDirectionTimeseries", windDirectionTimeseries );
                var windSpeedTimeseriesParameter = sqlCommandParameters.AddReference( "@WindSpeedTimeseries", windSpeedTimeseries );
                var gyroParameter = sqlCommandParameters.AddReference( "@Gyro", gyro );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    rowVersion = (long)rowVersionParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool DeleteWeatherStationDevice( Guid id, long rowVersion )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "WeatherStationDeviceDelete";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool InsertFacility( ref Guid id, string name, Guid type, double longitude, double latitude, double altitude )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "FacilityInsert";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id, System.Data.ParameterDirection.InputOutput );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@Name", name, 127 );
                var typeParameter = sqlCommandParameters.AddReference( "@Type", type );
                var longitudeParameter = sqlCommandParameters.AddDouble( "@Longitude", longitude );
                var latitudeParameter = sqlCommandParameters.AddDouble( "@Latitude", latitude );
                var altitudeParameter = sqlCommandParameters.AddDouble( "@Altitude", altitude );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    id = (Guid)idParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool UpdateFacility( Guid id, ref long rowVersion, string name, Guid type, double longitude, double latitude, double altitude )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "FacilityUpdate";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion, System.Data.ParameterDirection.InputOutput );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@Name", name, 127 );
                var typeParameter = sqlCommandParameters.AddReference( "@Type", type );
                var longitudeParameter = sqlCommandParameters.AddDouble( "@Longitude", longitude );
                var latitudeParameter = sqlCommandParameters.AddDouble( "@Latitude", latitude );
                var altitudeParameter = sqlCommandParameters.AddDouble( "@Altitude", altitude );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    rowVersion = (long)rowVersionParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool DeleteFacility( Guid id, long rowVersion )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "FacilityDelete";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool InsertAircraft( ref Guid id, string name, Guid type )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "AircraftInsert";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id, System.Data.ParameterDirection.InputOutput );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@Name", name, 127 );
                var typeParameter = sqlCommandParameters.AddReference( "@Type", type );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    id = (Guid)idParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool UpdateAircraft( Guid id, ref long rowVersion, string name, Guid type )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "AircraftUpdate";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion, System.Data.ParameterDirection.InputOutput );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@Name", name, 127 );
                var typeParameter = sqlCommandParameters.AddReference( "@Type", type );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    rowVersion = (long)rowVersionParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool DeleteAircraft( Guid id, long rowVersion )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "AircraftDelete";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool InsertAisAidToNavigation( ref Guid id, string name, Guid mMSI, Types.NavigationalAidType navigationalAidType, Guid position, bool isVirtual, int toBow, int toStern, int toPort, int toStarboard, Guid offPositionTimeseries )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "AisAidToNavigationInsert";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id, System.Data.ParameterDirection.InputOutput );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@Name", name, 127 );
                var mMSIParameter = sqlCommandParameters.AddReference( "@MMSI", mMSI );
                var navigationalAidTypeParameter = sqlCommandParameters.AddEnum( "@NavigationalAidType", navigationalAidType );
                var positionParameter = sqlCommandParameters.AddReference( "@Position", position );
                var isVirtualParameter = sqlCommandParameters.AddBoolean( "@IsVirtual", isVirtual );
                var toBowParameter = sqlCommandParameters.AddInt32( "@ToBow", toBow );
                var toSternParameter = sqlCommandParameters.AddInt32( "@ToStern", toStern );
                var toPortParameter = sqlCommandParameters.AddInt32( "@ToPort", toPort );
                var toStarboardParameter = sqlCommandParameters.AddInt32( "@ToStarboard", toStarboard );
                var offPositionTimeseriesParameter = sqlCommandParameters.AddReference( "@OffPositionTimeseries", offPositionTimeseries );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    id = (Guid)idParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool UpdateAisAidToNavigation( Guid id, ref long rowVersion, string name, Guid mMSI, Types.NavigationalAidType navigationalAidType, Guid position, bool isVirtual, int toBow, int toStern, int toPort, int toStarboard, Guid offPositionTimeseries )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "AisAidToNavigationUpdate";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion, System.Data.ParameterDirection.InputOutput );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@Name", name, 127 );
                var mMSIParameter = sqlCommandParameters.AddReference( "@MMSI", mMSI );
                var navigationalAidTypeParameter = sqlCommandParameters.AddEnum( "@NavigationalAidType", navigationalAidType );
                var positionParameter = sqlCommandParameters.AddReference( "@Position", position );
                var isVirtualParameter = sqlCommandParameters.AddBoolean( "@IsVirtual", isVirtual );
                var toBowParameter = sqlCommandParameters.AddInt32( "@ToBow", toBow );
                var toSternParameter = sqlCommandParameters.AddInt32( "@ToStern", toStern );
                var toPortParameter = sqlCommandParameters.AddInt32( "@ToPort", toPort );
                var toStarboardParameter = sqlCommandParameters.AddInt32( "@ToStarboard", toStarboard );
                var offPositionTimeseriesParameter = sqlCommandParameters.AddReference( "@OffPositionTimeseries", offPositionTimeseries );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    rowVersion = (long)rowVersionParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool DeleteAisAidToNavigation( Guid id, long rowVersion )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "AisAidToNavigationDelete";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool InsertVehicle( ref Guid id, string name, Guid type )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "VehicleInsert";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id, System.Data.ParameterDirection.InputOutput );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@Name", name, 127 );
                var typeParameter = sqlCommandParameters.AddReference( "@Type", type );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    id = (Guid)idParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool UpdateVehicle( Guid id, ref long rowVersion, string name, Guid type )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "VehicleUpdate";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion, System.Data.ParameterDirection.InputOutput );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@Name", name, 127 );
                var typeParameter = sqlCommandParameters.AddReference( "@Type", type );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    rowVersion = (long)rowVersionParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool DeleteVehicle( Guid id, long rowVersion )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "VehicleDelete";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool InsertVessel( ref Guid id, string name, Guid type, int toBow, int toStern, int toPort, int toStarboard, Guid draughtTimeseries, Guid personsOnBoardTimeseries )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "VesselInsert";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id, System.Data.ParameterDirection.InputOutput );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@Name", name, 127 );
                var typeParameter = sqlCommandParameters.AddReference( "@Type", type );
                var toBowParameter = sqlCommandParameters.AddInt32( "@ToBow", toBow );
                var toSternParameter = sqlCommandParameters.AddInt32( "@ToStern", toStern );
                var toPortParameter = sqlCommandParameters.AddInt32( "@ToPort", toPort );
                var toStarboardParameter = sqlCommandParameters.AddInt32( "@ToStarboard", toStarboard );
                var draughtTimeseriesParameter = sqlCommandParameters.AddReference( "@DraughtTimeseries", draughtTimeseries );
                var personsOnBoardTimeseriesParameter = sqlCommandParameters.AddReference( "@PersonsOnBoardTimeseries", personsOnBoardTimeseries );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    id = (Guid)idParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool UpdateVessel( Guid id, ref long rowVersion, string name, Guid type, int toBow, int toStern, int toPort, int toStarboard, Guid draughtTimeseries, Guid personsOnBoardTimeseries )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "VesselUpdate";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion, System.Data.ParameterDirection.InputOutput );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@Name", name, 127 );
                var typeParameter = sqlCommandParameters.AddReference( "@Type", type );
                var toBowParameter = sqlCommandParameters.AddInt32( "@ToBow", toBow );
                var toSternParameter = sqlCommandParameters.AddInt32( "@ToStern", toStern );
                var toPortParameter = sqlCommandParameters.AddInt32( "@ToPort", toPort );
                var toStarboardParameter = sqlCommandParameters.AddInt32( "@ToStarboard", toStarboard );
                var draughtTimeseriesParameter = sqlCommandParameters.AddReference( "@DraughtTimeseries", draughtTimeseries );
                var personsOnBoardTimeseriesParameter = sqlCommandParameters.AddReference( "@PersonsOnBoardTimeseries", personsOnBoardTimeseries );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    rowVersion = (long)rowVersionParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool DeleteVessel( Guid id, long rowVersion )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "VesselDelete";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool InsertItemIdentityLink( ref Guid id, Guid item, Guid identity, DateTime start, DateTime? end )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "ItemIdentityLinkInsert";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id, System.Data.ParameterDirection.InputOutput );
                var itemParameter = sqlCommandParameters.AddReference( "@Item", item );
                var identityParameter = sqlCommandParameters.AddReference( "@Identity", identity );
                var startParameter = sqlCommandParameters.AddDateTimeAsInt64( "@Start", start );
                var endParameter = sqlCommandParameters.AddDateTimeAsInt64( "@End", end );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    id = (Guid)idParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool UpdateItemIdentityLink( Guid id, ref long rowVersion, Guid item, Guid identity, DateTime start, DateTime? end )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "ItemIdentityLinkUpdate";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion, System.Data.ParameterDirection.InputOutput );
                var itemParameter = sqlCommandParameters.AddReference( "@Item", item );
                var identityParameter = sqlCommandParameters.AddReference( "@Identity", identity );
                var startParameter = sqlCommandParameters.AddDateTimeAsInt64( "@Start", start );
                var endParameter = sqlCommandParameters.AddDateTimeAsInt64( "@End", end );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    rowVersion = (long)rowVersionParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool DeleteItemIdentityLink( Guid id, long rowVersion )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "ItemIdentityLinkDelete";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool InsertItemParentChildLink( ref Guid id, Guid parent, Guid child, DateTime timestamp )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "ItemParentChildLinkInsert";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id, System.Data.ParameterDirection.InputOutput );
                var parentParameter = sqlCommandParameters.AddReference( "@Parent", parent );
                var childParameter = sqlCommandParameters.AddReference( "@Child", child );
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@Timestamp", timestamp );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    id = (Guid)idParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool UpdateItemParentChildLink( Guid id, ref long rowVersion, Guid parent, Guid child, DateTime timestamp )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "ItemParentChildLinkUpdate";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion, System.Data.ParameterDirection.InputOutput );
                var parentParameter = sqlCommandParameters.AddReference( "@Parent", parent );
                var childParameter = sqlCommandParameters.AddReference( "@Child", child );
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@Timestamp", timestamp );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    rowVersion = (long)rowVersionParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool DeleteItemParentChildLink( Guid id, long rowVersion )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "ItemParentChildLinkDelete";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool InsertLineInputDeviceCommand( ref Guid id, Guid lineInputDevice, DateTime timestamp, Types.DeviceCommandSourceType deviceCommandSourceType, Guid deviceCommandSourceId, Guid reply )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "LineInputDeviceCommandInsert";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id, System.Data.ParameterDirection.InputOutput );
                var lineInputDeviceParameter = sqlCommandParameters.AddReference( "@LineInputDevice", lineInputDevice );
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@Timestamp", timestamp );
                var deviceCommandSourceTypeParameter = sqlCommandParameters.AddEnum( "@DeviceCommandSourceType", deviceCommandSourceType );
                var deviceCommandSourceIdParameter = sqlCommandParameters.AddGuid( "@DeviceCommandSourceId", deviceCommandSourceId );
                var replyParameter = sqlCommandParameters.AddReference( "@Reply", reply );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    id = (Guid)idParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool UpdateLineInputDeviceCommand( Guid id, ref long rowVersion, Guid lineInputDevice, DateTime timestamp, Types.DeviceCommandSourceType deviceCommandSourceType, Guid deviceCommandSourceId, Guid reply )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "LineInputDeviceCommandUpdate";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion, System.Data.ParameterDirection.InputOutput );
                var lineInputDeviceParameter = sqlCommandParameters.AddReference( "@LineInputDevice", lineInputDevice );
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@Timestamp", timestamp );
                var deviceCommandSourceTypeParameter = sqlCommandParameters.AddEnum( "@DeviceCommandSourceType", deviceCommandSourceType );
                var deviceCommandSourceIdParameter = sqlCommandParameters.AddGuid( "@DeviceCommandSourceId", deviceCommandSourceId );
                var replyParameter = sqlCommandParameters.AddReference( "@Reply", reply );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    rowVersion = (long)rowVersionParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool DeleteLineInputDeviceCommand( Guid id, long rowVersion )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "LineInputDeviceCommandDelete";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool InsertLineInputDeviceCommandReply( ref Guid id, Guid lineInputDevice, DateTime timestamp, Guid command, Types.DeviceCommandReplyStatus status, string message )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "LineInputDeviceCommandReplyInsert";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id, System.Data.ParameterDirection.InputOutput );
                var lineInputDeviceParameter = sqlCommandParameters.AddReference( "@LineInputDevice", lineInputDevice );
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@Timestamp", timestamp );
                var commandParameter = sqlCommandParameters.AddReference( "@Command", command );
                var statusParameter = sqlCommandParameters.AddEnum( "@Status", status );
                var messageParameter = sqlCommandParameters.AddNVarChar( "@Message", message, 0 );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    id = (Guid)idParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool UpdateLineInputDeviceCommandReply( Guid id, ref long rowVersion, Guid lineInputDevice, DateTime timestamp, Guid command, Types.DeviceCommandReplyStatus status, string message )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "LineInputDeviceCommandReplyUpdate";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion, System.Data.ParameterDirection.InputOutput );
                var lineInputDeviceParameter = sqlCommandParameters.AddReference( "@LineInputDevice", lineInputDevice );
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@Timestamp", timestamp );
                var commandParameter = sqlCommandParameters.AddReference( "@Command", command );
                var statusParameter = sqlCommandParameters.AddEnum( "@Status", status );
                var messageParameter = sqlCommandParameters.AddNVarChar( "@Message", message, 0 );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    rowVersion = (long)rowVersionParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool DeleteLineInputDeviceCommandReply( Guid id, long rowVersion )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "LineInputDeviceCommandReplyDelete";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool InsertLineInputDeviceConfiguration( ref Guid id, Guid lineInputDevice, DateTime timestamp, bool storeReceivedSentences, bool storeSentMessages, bool storeUnsentMessages, bool nMEA, bool strictNMEA, Types.LineInputDeviceConnectionType connectionType, int udpReceivePort, string udpSendHostname, int udpSendPort, string tcpHostname, int tcpPort, bool useHttpLogin, string loginHostname, int loginPort, string userName, string password, string comPort, int baudRate, int dataBits, bool discardNull, bool dtrEnable, Types.Handshake handshake, string newLine, Types.Parity parity, byte parityReplace, int readBufferSize, TimeSpan readTimeout, int receivedBytesThreshold, bool rtsEnable, Types.StopBits stopBits, int writeBufferSize, TimeSpan writeTimeout, string pairedComPort )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "LineInputDeviceConfigurationInsert";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id, System.Data.ParameterDirection.InputOutput );
                var lineInputDeviceParameter = sqlCommandParameters.AddReference( "@LineInputDevice", lineInputDevice );
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@Timestamp", timestamp );
                var storeReceivedSentencesParameter = sqlCommandParameters.AddBoolean( "@StoreReceivedSentences", storeReceivedSentences );
                var storeSentMessagesParameter = sqlCommandParameters.AddBoolean( "@StoreSentMessages", storeSentMessages );
                var storeUnsentMessagesParameter = sqlCommandParameters.AddBoolean( "@StoreUnsentMessages", storeUnsentMessages );
                var nMEAParameter = sqlCommandParameters.AddBoolean( "@NMEA", nMEA );
                var strictNMEAParameter = sqlCommandParameters.AddBoolean( "@StrictNMEA", strictNMEA );
                var connectionTypeParameter = sqlCommandParameters.AddEnum( "@ConnectionType", connectionType );
                var udpReceivePortParameter = sqlCommandParameters.AddInt32( "@UdpReceivePort", udpReceivePort );
                var udpSendHostnameParameter = sqlCommandParameters.AddNVarChar( "@UdpSendHostname", udpSendHostname, 127 );
                var udpSendPortParameter = sqlCommandParameters.AddInt32( "@UdpSendPort", udpSendPort );
                var tcpHostnameParameter = sqlCommandParameters.AddNVarChar( "@TcpHostname", tcpHostname, 127 );
                var tcpPortParameter = sqlCommandParameters.AddInt32( "@TcpPort", tcpPort );
                var useHttpLoginParameter = sqlCommandParameters.AddBoolean( "@UseHttpLogin", useHttpLogin );
                var loginHostnameParameter = sqlCommandParameters.AddNVarChar( "@LoginHostname", loginHostname, 127 );
                var loginPortParameter = sqlCommandParameters.AddInt32( "@LoginPort", loginPort );
                var userNameParameter = sqlCommandParameters.AddNVarChar( "@UserName", userName, 127 );
                var passwordParameter = sqlCommandParameters.AddNVarChar( "@Password", password, 127 );
                var comPortParameter = sqlCommandParameters.AddNVarChar( "@ComPort", comPort, 127 );
                var baudRateParameter = sqlCommandParameters.AddInt32( "@BaudRate", baudRate );
                var dataBitsParameter = sqlCommandParameters.AddInt32( "@DataBits", dataBits );
                var discardNullParameter = sqlCommandParameters.AddBoolean( "@DiscardNull", discardNull );
                var dtrEnableParameter = sqlCommandParameters.AddBoolean( "@DtrEnable", dtrEnable );
                var handshakeParameter = sqlCommandParameters.AddEnum( "@Handshake", handshake );
                var newLineParameter = sqlCommandParameters.AddNVarChar( "@NewLine", newLine, 127 );
                var parityParameter = sqlCommandParameters.AddEnum( "@Parity", parity );
                var parityReplaceParameter = sqlCommandParameters.AddByte( "@ParityReplace", parityReplace );
                var readBufferSizeParameter = sqlCommandParameters.AddInt32( "@ReadBufferSize", readBufferSize );
                var readTimeoutParameter = sqlCommandParameters.AddTimeSpanAsInt64( "@ReadTimeout", readTimeout );
                var receivedBytesThresholdParameter = sqlCommandParameters.AddInt32( "@ReceivedBytesThreshold", receivedBytesThreshold );
                var rtsEnableParameter = sqlCommandParameters.AddBoolean( "@RtsEnable", rtsEnable );
                var stopBitsParameter = sqlCommandParameters.AddEnum( "@StopBits", stopBits );
                var writeBufferSizeParameter = sqlCommandParameters.AddInt32( "@WriteBufferSize", writeBufferSize );
                var writeTimeoutParameter = sqlCommandParameters.AddTimeSpanAsInt64( "@WriteTimeout", writeTimeout );
                var pairedComPortParameter = sqlCommandParameters.AddNVarChar( "@PairedComPort", pairedComPort, 127 );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    id = (Guid)idParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool UpdateLineInputDeviceConfiguration( Guid id, ref long rowVersion, Guid lineInputDevice, DateTime timestamp, bool storeReceivedSentences, bool storeSentMessages, bool storeUnsentMessages, bool nMEA, bool strictNMEA, Types.LineInputDeviceConnectionType connectionType, int udpReceivePort, string udpSendHostname, int udpSendPort, string tcpHostname, int tcpPort, bool useHttpLogin, string loginHostname, int loginPort, string userName, string password, string comPort, int baudRate, int dataBits, bool discardNull, bool dtrEnable, Types.Handshake handshake, string newLine, Types.Parity parity, byte parityReplace, int readBufferSize, TimeSpan readTimeout, int receivedBytesThreshold, bool rtsEnable, Types.StopBits stopBits, int writeBufferSize, TimeSpan writeTimeout, string pairedComPort )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "LineInputDeviceConfigurationUpdate";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion, System.Data.ParameterDirection.InputOutput );
                var lineInputDeviceParameter = sqlCommandParameters.AddReference( "@LineInputDevice", lineInputDevice );
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@Timestamp", timestamp );
                var storeReceivedSentencesParameter = sqlCommandParameters.AddBoolean( "@StoreReceivedSentences", storeReceivedSentences );
                var storeSentMessagesParameter = sqlCommandParameters.AddBoolean( "@StoreSentMessages", storeSentMessages );
                var storeUnsentMessagesParameter = sqlCommandParameters.AddBoolean( "@StoreUnsentMessages", storeUnsentMessages );
                var nMEAParameter = sqlCommandParameters.AddBoolean( "@NMEA", nMEA );
                var strictNMEAParameter = sqlCommandParameters.AddBoolean( "@StrictNMEA", strictNMEA );
                var connectionTypeParameter = sqlCommandParameters.AddEnum( "@ConnectionType", connectionType );
                var udpReceivePortParameter = sqlCommandParameters.AddInt32( "@UdpReceivePort", udpReceivePort );
                var udpSendHostnameParameter = sqlCommandParameters.AddNVarChar( "@UdpSendHostname", udpSendHostname, 127 );
                var udpSendPortParameter = sqlCommandParameters.AddInt32( "@UdpSendPort", udpSendPort );
                var tcpHostnameParameter = sqlCommandParameters.AddNVarChar( "@TcpHostname", tcpHostname, 127 );
                var tcpPortParameter = sqlCommandParameters.AddInt32( "@TcpPort", tcpPort );
                var useHttpLoginParameter = sqlCommandParameters.AddBoolean( "@UseHttpLogin", useHttpLogin );
                var loginHostnameParameter = sqlCommandParameters.AddNVarChar( "@LoginHostname", loginHostname, 127 );
                var loginPortParameter = sqlCommandParameters.AddInt32( "@LoginPort", loginPort );
                var userNameParameter = sqlCommandParameters.AddNVarChar( "@UserName", userName, 127 );
                var passwordParameter = sqlCommandParameters.AddNVarChar( "@Password", password, 127 );
                var comPortParameter = sqlCommandParameters.AddNVarChar( "@ComPort", comPort, 127 );
                var baudRateParameter = sqlCommandParameters.AddInt32( "@BaudRate", baudRate );
                var dataBitsParameter = sqlCommandParameters.AddInt32( "@DataBits", dataBits );
                var discardNullParameter = sqlCommandParameters.AddBoolean( "@DiscardNull", discardNull );
                var dtrEnableParameter = sqlCommandParameters.AddBoolean( "@DtrEnable", dtrEnable );
                var handshakeParameter = sqlCommandParameters.AddEnum( "@Handshake", handshake );
                var newLineParameter = sqlCommandParameters.AddNVarChar( "@NewLine", newLine, 127 );
                var parityParameter = sqlCommandParameters.AddEnum( "@Parity", parity );
                var parityReplaceParameter = sqlCommandParameters.AddByte( "@ParityReplace", parityReplace );
                var readBufferSizeParameter = sqlCommandParameters.AddInt32( "@ReadBufferSize", readBufferSize );
                var readTimeoutParameter = sqlCommandParameters.AddTimeSpanAsInt64( "@ReadTimeout", readTimeout );
                var receivedBytesThresholdParameter = sqlCommandParameters.AddInt32( "@ReceivedBytesThreshold", receivedBytesThreshold );
                var rtsEnableParameter = sqlCommandParameters.AddBoolean( "@RtsEnable", rtsEnable );
                var stopBitsParameter = sqlCommandParameters.AddEnum( "@StopBits", stopBits );
                var writeBufferSizeParameter = sqlCommandParameters.AddInt32( "@WriteBufferSize", writeBufferSize );
                var writeTimeoutParameter = sqlCommandParameters.AddTimeSpanAsInt64( "@WriteTimeout", writeTimeout );
                var pairedComPortParameter = sqlCommandParameters.AddNVarChar( "@PairedComPort", pairedComPort, 127 );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    rowVersion = (long)rowVersionParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool DeleteLineInputDeviceConfiguration( Guid id, long rowVersion )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "LineInputDeviceConfigurationDelete";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool InsertLineInputMessageRouting( ref Guid id, Guid lineInputDevice, string type )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "LineInputMessageRoutingInsert";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id, System.Data.ParameterDirection.InputOutput );
                var lineInputDeviceParameter = sqlCommandParameters.AddReference( "@LineInputDevice", lineInputDevice );
                var typeParameter = sqlCommandParameters.AddNVarChar( "@Type", type, 127 );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    id = (Guid)idParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool UpdateLineInputMessageRouting( Guid id, ref long rowVersion, Guid lineInputDevice, string type )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "LineInputMessageRoutingUpdate";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion, System.Data.ParameterDirection.InputOutput );
                var lineInputDeviceParameter = sqlCommandParameters.AddReference( "@LineInputDevice", lineInputDevice );
                var typeParameter = sqlCommandParameters.AddNVarChar( "@Type", type, 127 );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    rowVersion = (long)rowVersionParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool DeleteLineInputMessageRouting( Guid id, long rowVersion )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "LineInputMessageRoutingDelete";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool InsertLineInputMessageRoutingDestination( ref Guid id, Guid routing, Guid listener )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "LineInputMessageRoutingDestinationInsert";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id, System.Data.ParameterDirection.InputOutput );
                var routingParameter = sqlCommandParameters.AddReference( "@Routing", routing );
                var listenerParameter = sqlCommandParameters.AddReference( "@Listener", listener );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    id = (Guid)idParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool UpdateLineInputMessageRoutingDestination( Guid id, ref long rowVersion, Guid routing, Guid listener )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "LineInputMessageRoutingDestinationUpdate";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion, System.Data.ParameterDirection.InputOutput );
                var routingParameter = sqlCommandParameters.AddReference( "@Routing", routing );
                var listenerParameter = sqlCommandParameters.AddReference( "@Listener", listener );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    rowVersion = (long)rowVersionParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool DeleteLineInputMessageRoutingDestination( Guid id, long rowVersion )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "LineInputMessageRoutingDestinationDelete";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool InsertLineInputWhiteListEntry( ref Guid id, Guid lineInputDevice, string hostName, int port )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "LineInputWhiteListEntryInsert";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id, System.Data.ParameterDirection.InputOutput );
                var lineInputDeviceParameter = sqlCommandParameters.AddReference( "@LineInputDevice", lineInputDevice );
                var hostNameParameter = sqlCommandParameters.AddNVarChar( "@HostName", hostName, 128 );
                var portParameter = sqlCommandParameters.AddInt32( "@Port", port );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    id = (Guid)idParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool UpdateLineInputWhiteListEntry( Guid id, ref long rowVersion, Guid lineInputDevice, string hostName, int port )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "LineInputWhiteListEntryUpdate";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion, System.Data.ParameterDirection.InputOutput );
                var lineInputDeviceParameter = sqlCommandParameters.AddReference( "@LineInputDevice", lineInputDevice );
                var hostNameParameter = sqlCommandParameters.AddNVarChar( "@HostName", hostName, 128 );
                var portParameter = sqlCommandParameters.AddInt32( "@Port", port );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    rowVersion = (long)rowVersionParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool DeleteLineInputWhiteListEntry( Guid id, long rowVersion )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "LineInputWhiteListEntryDelete";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool InsertLogApplication( ref Guid id, string name, string description )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "LogApplicationInsert";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id, System.Data.ParameterDirection.InputOutput );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@Name", name, 127 );
                var descriptionParameter = sqlCommandParameters.AddNVarChar( "@Description", description, 0 );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    id = (Guid)idParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool UpdateLogApplication( Guid id, ref long rowVersion, string name, string description )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "LogApplicationUpdate";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion, System.Data.ParameterDirection.InputOutput );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@Name", name, 127 );
                var descriptionParameter = sqlCommandParameters.AddNVarChar( "@Description", description, 0 );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    rowVersion = (long)rowVersionParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool DeleteLogApplication( Guid id, long rowVersion )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "LogApplicationDelete";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool InsertLogApplicationConfiguration( ref Guid id, Guid application, DateTime timestamp, bool finest, bool finer, bool fine, bool info, bool notice, bool warn, bool error, bool severe, bool critical, bool alert, bool fatal, bool emergency )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "LogApplicationConfigurationInsert";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id, System.Data.ParameterDirection.InputOutput );
                var applicationParameter = sqlCommandParameters.AddReference( "@Application", application );
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@Timestamp", timestamp );
                var finestParameter = sqlCommandParameters.AddBoolean( "@Finest", finest );
                var finerParameter = sqlCommandParameters.AddBoolean( "@Finer", finer );
                var fineParameter = sqlCommandParameters.AddBoolean( "@Fine", fine );
                var infoParameter = sqlCommandParameters.AddBoolean( "@Info", info );
                var noticeParameter = sqlCommandParameters.AddBoolean( "@Notice", notice );
                var warnParameter = sqlCommandParameters.AddBoolean( "@Warn", warn );
                var errorParameter = sqlCommandParameters.AddBoolean( "@Error", error );
                var severeParameter = sqlCommandParameters.AddBoolean( "@Severe", severe );
                var criticalParameter = sqlCommandParameters.AddBoolean( "@Critical", critical );
                var alertParameter = sqlCommandParameters.AddBoolean( "@Alert", alert );
                var fatalParameter = sqlCommandParameters.AddBoolean( "@Fatal", fatal );
                var emergencyParameter = sqlCommandParameters.AddBoolean( "@Emergency", emergency );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    id = (Guid)idParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool UpdateLogApplicationConfiguration( Guid id, ref long rowVersion, Guid application, DateTime timestamp, bool finest, bool finer, bool fine, bool info, bool notice, bool warn, bool error, bool severe, bool critical, bool alert, bool fatal, bool emergency )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "LogApplicationConfigurationUpdate";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion, System.Data.ParameterDirection.InputOutput );
                var applicationParameter = sqlCommandParameters.AddReference( "@Application", application );
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@Timestamp", timestamp );
                var finestParameter = sqlCommandParameters.AddBoolean( "@Finest", finest );
                var finerParameter = sqlCommandParameters.AddBoolean( "@Finer", finer );
                var fineParameter = sqlCommandParameters.AddBoolean( "@Fine", fine );
                var infoParameter = sqlCommandParameters.AddBoolean( "@Info", info );
                var noticeParameter = sqlCommandParameters.AddBoolean( "@Notice", notice );
                var warnParameter = sqlCommandParameters.AddBoolean( "@Warn", warn );
                var errorParameter = sqlCommandParameters.AddBoolean( "@Error", error );
                var severeParameter = sqlCommandParameters.AddBoolean( "@Severe", severe );
                var criticalParameter = sqlCommandParameters.AddBoolean( "@Critical", critical );
                var alertParameter = sqlCommandParameters.AddBoolean( "@Alert", alert );
                var fatalParameter = sqlCommandParameters.AddBoolean( "@Fatal", fatal );
                var emergencyParameter = sqlCommandParameters.AddBoolean( "@Emergency", emergency );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    rowVersion = (long)rowVersionParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool DeleteLogApplicationConfiguration( Guid id, long rowVersion )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "LogApplicationConfigurationDelete";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool InsertLogHost( ref Guid id, string computerName, string description )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "LogHostInsert";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id, System.Data.ParameterDirection.InputOutput );
                var computerNameParameter = sqlCommandParameters.AddNVarChar( "@ComputerName", computerName, 127 );
                var descriptionParameter = sqlCommandParameters.AddNVarChar( "@Description", description, 0 );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    id = (Guid)idParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool UpdateLogHost( Guid id, ref long rowVersion, string computerName, string description )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "LogHostUpdate";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion, System.Data.ParameterDirection.InputOutput );
                var computerNameParameter = sqlCommandParameters.AddNVarChar( "@ComputerName", computerName, 127 );
                var descriptionParameter = sqlCommandParameters.AddNVarChar( "@Description", description, 0 );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    rowVersion = (long)rowVersionParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool DeleteLogHost( Guid id, long rowVersion )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "LogHostDelete";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool InsertLogHostConfiguration( ref Guid id, Guid host, DateTime timestamp, bool finest, bool finer, bool fine, bool info, bool notice, bool warn, bool error, bool severe, bool critical, bool alert, bool fatal, bool emergency )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "LogHostConfigurationInsert";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id, System.Data.ParameterDirection.InputOutput );
                var hostParameter = sqlCommandParameters.AddReference( "@Host", host );
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@Timestamp", timestamp );
                var finestParameter = sqlCommandParameters.AddBoolean( "@Finest", finest );
                var finerParameter = sqlCommandParameters.AddBoolean( "@Finer", finer );
                var fineParameter = sqlCommandParameters.AddBoolean( "@Fine", fine );
                var infoParameter = sqlCommandParameters.AddBoolean( "@Info", info );
                var noticeParameter = sqlCommandParameters.AddBoolean( "@Notice", notice );
                var warnParameter = sqlCommandParameters.AddBoolean( "@Warn", warn );
                var errorParameter = sqlCommandParameters.AddBoolean( "@Error", error );
                var severeParameter = sqlCommandParameters.AddBoolean( "@Severe", severe );
                var criticalParameter = sqlCommandParameters.AddBoolean( "@Critical", critical );
                var alertParameter = sqlCommandParameters.AddBoolean( "@Alert", alert );
                var fatalParameter = sqlCommandParameters.AddBoolean( "@Fatal", fatal );
                var emergencyParameter = sqlCommandParameters.AddBoolean( "@Emergency", emergency );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    id = (Guid)idParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool UpdateLogHostConfiguration( Guid id, ref long rowVersion, Guid host, DateTime timestamp, bool finest, bool finer, bool fine, bool info, bool notice, bool warn, bool error, bool severe, bool critical, bool alert, bool fatal, bool emergency )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "LogHostConfigurationUpdate";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion, System.Data.ParameterDirection.InputOutput );
                var hostParameter = sqlCommandParameters.AddReference( "@Host", host );
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@Timestamp", timestamp );
                var finestParameter = sqlCommandParameters.AddBoolean( "@Finest", finest );
                var finerParameter = sqlCommandParameters.AddBoolean( "@Finer", finer );
                var fineParameter = sqlCommandParameters.AddBoolean( "@Fine", fine );
                var infoParameter = sqlCommandParameters.AddBoolean( "@Info", info );
                var noticeParameter = sqlCommandParameters.AddBoolean( "@Notice", notice );
                var warnParameter = sqlCommandParameters.AddBoolean( "@Warn", warn );
                var errorParameter = sqlCommandParameters.AddBoolean( "@Error", error );
                var severeParameter = sqlCommandParameters.AddBoolean( "@Severe", severe );
                var criticalParameter = sqlCommandParameters.AddBoolean( "@Critical", critical );
                var alertParameter = sqlCommandParameters.AddBoolean( "@Alert", alert );
                var fatalParameter = sqlCommandParameters.AddBoolean( "@Fatal", fatal );
                var emergencyParameter = sqlCommandParameters.AddBoolean( "@Emergency", emergency );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    rowVersion = (long)rowVersionParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool DeleteLogHostConfiguration( Guid id, long rowVersion )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "LogHostConfigurationDelete";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool InsertLogLocation( ref Guid id, string fileName, int lineNumber, string namespace__, string className, string methodName )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "LogLocationInsert";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id, System.Data.ParameterDirection.InputOutput );
                var fileNameParameter = sqlCommandParameters.AddNVarChar( "@FileName", fileName, 260 );
                var lineNumberParameter = sqlCommandParameters.AddInt32( "@LineNumber", lineNumber );
                var namespaceParameter = sqlCommandParameters.AddNVarChar( "@Namespace", namespace__, 512 );
                var classNameParameter = sqlCommandParameters.AddNVarChar( "@ClassName", className, 512 );
                var methodNameParameter = sqlCommandParameters.AddNVarChar( "@MethodName", methodName, 255 );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    id = (Guid)idParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool UpdateLogLocation( Guid id, ref long rowVersion, string fileName, int lineNumber, string namespace__, string className, string methodName )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "LogLocationUpdate";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion, System.Data.ParameterDirection.InputOutput );
                var fileNameParameter = sqlCommandParameters.AddNVarChar( "@FileName", fileName, 260 );
                var lineNumberParameter = sqlCommandParameters.AddInt32( "@LineNumber", lineNumber );
                var namespaceParameter = sqlCommandParameters.AddNVarChar( "@Namespace", namespace__, 512 );
                var classNameParameter = sqlCommandParameters.AddNVarChar( "@ClassName", className, 512 );
                var methodNameParameter = sqlCommandParameters.AddNVarChar( "@MethodName", methodName, 255 );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    rowVersion = (long)rowVersionParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool DeleteLogLocation( Guid id, long rowVersion )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "LogLocationDelete";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool InsertLogProcess( ref Guid id, Guid application, Guid host, DateTime started, DateTime? stopped, long processId, string path, string identity )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "LogProcessInsert";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id, System.Data.ParameterDirection.InputOutput );
                var applicationParameter = sqlCommandParameters.AddReference( "@Application", application );
                var hostParameter = sqlCommandParameters.AddReference( "@Host", host );
                var startedParameter = sqlCommandParameters.AddDateTimeAsInt64( "@Started", started );
                var stoppedParameter = sqlCommandParameters.AddDateTimeAsInt64( "@Stopped", stopped );
                var processIdParameter = sqlCommandParameters.AddInt64( "@ProcessId", processId );
                var pathParameter = sqlCommandParameters.AddNVarChar( "@Path", path, 0 );
                var identityParameter = sqlCommandParameters.AddNVarChar( "@Identity", identity, 127 );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    id = (Guid)idParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool UpdateLogProcess( Guid id, ref long rowVersion, Guid application, Guid host, DateTime started, DateTime? stopped, long processId, string path, string identity )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "LogProcessUpdate";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion, System.Data.ParameterDirection.InputOutput );
                var applicationParameter = sqlCommandParameters.AddReference( "@Application", application );
                var hostParameter = sqlCommandParameters.AddReference( "@Host", host );
                var startedParameter = sqlCommandParameters.AddDateTimeAsInt64( "@Started", started );
                var stoppedParameter = sqlCommandParameters.AddDateTimeAsInt64( "@Stopped", stopped );
                var processIdParameter = sqlCommandParameters.AddInt64( "@ProcessId", processId );
                var pathParameter = sqlCommandParameters.AddNVarChar( "@Path", path, 0 );
                var identityParameter = sqlCommandParameters.AddNVarChar( "@Identity", identity, 127 );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    rowVersion = (long)rowVersionParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool DeleteLogProcess( Guid id, long rowVersion )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "LogProcessDelete";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool InsertLogRecord( ref Guid id, Guid thread, long sequenceNumber, Types.LogLevel level, DateTime timestamp, int depth, Guid location, string message, string exceptionString, byte[] propertiesData )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "LogRecordInsert";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id, System.Data.ParameterDirection.InputOutput );
                var threadParameter = sqlCommandParameters.AddReference( "@Thread", thread );
                var sequenceNumberParameter = sqlCommandParameters.AddInt64( "@SequenceNumber", sequenceNumber );
                var levelParameter = sqlCommandParameters.AddEnum( "@Level", level );
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@Timestamp", timestamp );
                var depthParameter = sqlCommandParameters.AddInt32( "@Depth", depth );
                var locationParameter = sqlCommandParameters.AddReference( "@Location", location );
                var messageParameter = sqlCommandParameters.AddNVarChar( "@Message", message, 2000 );
                var exceptionStringParameter = sqlCommandParameters.AddNVarChar( "@ExceptionString", exceptionString, 0 );
                var propertiesDataParameter = sqlCommandParameters.AddBinary( "@PropertiesData", propertiesData, 0 );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    id = (Guid)idParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool UpdateLogRecord( Guid id, ref long rowVersion, Guid thread, long sequenceNumber, Types.LogLevel level, DateTime timestamp, int depth, Guid location, string message, string exceptionString, byte[] propertiesData )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "LogRecordUpdate";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion, System.Data.ParameterDirection.InputOutput );
                var threadParameter = sqlCommandParameters.AddReference( "@Thread", thread );
                var sequenceNumberParameter = sqlCommandParameters.AddInt64( "@SequenceNumber", sequenceNumber );
                var levelParameter = sqlCommandParameters.AddEnum( "@Level", level );
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@Timestamp", timestamp );
                var depthParameter = sqlCommandParameters.AddInt32( "@Depth", depth );
                var locationParameter = sqlCommandParameters.AddReference( "@Location", location );
                var messageParameter = sqlCommandParameters.AddNVarChar( "@Message", message, 2000 );
                var exceptionStringParameter = sqlCommandParameters.AddNVarChar( "@ExceptionString", exceptionString, 0 );
                var propertiesDataParameter = sqlCommandParameters.AddBinary( "@PropertiesData", propertiesData, 0 );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    rowVersion = (long)rowVersionParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool DeleteLogRecord( Guid id, long rowVersion )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "LogRecordDelete";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool InsertLogThread( ref Guid id, Guid process, DateTime started, DateTime? stopped, long threadId, string name )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "LogThreadInsert";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id, System.Data.ParameterDirection.InputOutput );
                var processParameter = sqlCommandParameters.AddReference( "@Process", process );
                var startedParameter = sqlCommandParameters.AddDateTimeAsInt64( "@Started", started );
                var stoppedParameter = sqlCommandParameters.AddDateTimeAsInt64( "@Stopped", stopped );
                var threadIdParameter = sqlCommandParameters.AddInt64( "@ThreadId", threadId );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@Name", name, 127 );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    id = (Guid)idParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool UpdateLogThread( Guid id, ref long rowVersion, Guid process, DateTime started, DateTime? stopped, long threadId, string name )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "LogThreadUpdate";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion, System.Data.ParameterDirection.InputOutput );
                var processParameter = sqlCommandParameters.AddReference( "@Process", process );
                var startedParameter = sqlCommandParameters.AddDateTimeAsInt64( "@Started", started );
                var stoppedParameter = sqlCommandParameters.AddDateTimeAsInt64( "@Stopped", stopped );
                var threadIdParameter = sqlCommandParameters.AddInt64( "@ThreadId", threadId );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@Name", name, 127 );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    rowVersion = (long)rowVersionParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool DeleteLogThread( Guid id, long rowVersion )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "LogThreadDelete";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool InsertLogTraceEntry( ref Guid id, Guid thread, long sequenceNumber, Guid location, int depth, DateTime entered, DateTime? ended )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "LogTraceEntryInsert";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id, System.Data.ParameterDirection.InputOutput );
                var threadParameter = sqlCommandParameters.AddReference( "@Thread", thread );
                var sequenceNumberParameter = sqlCommandParameters.AddInt64( "@SequenceNumber", sequenceNumber );
                var locationParameter = sqlCommandParameters.AddReference( "@Location", location );
                var depthParameter = sqlCommandParameters.AddInt32( "@Depth", depth );
                var enteredParameter = sqlCommandParameters.AddDateTimeAsInt64( "@Entered", entered );
                var endedParameter = sqlCommandParameters.AddDateTimeAsInt64( "@Ended", ended );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    id = (Guid)idParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool UpdateLogTraceEntry( Guid id, ref long rowVersion, Guid thread, long sequenceNumber, Guid location, int depth, DateTime entered, DateTime? ended )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "LogTraceEntryUpdate";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion, System.Data.ParameterDirection.InputOutput );
                var threadParameter = sqlCommandParameters.AddReference( "@Thread", thread );
                var sequenceNumberParameter = sqlCommandParameters.AddInt64( "@SequenceNumber", sequenceNumber );
                var locationParameter = sqlCommandParameters.AddReference( "@Location", location );
                var depthParameter = sqlCommandParameters.AddInt32( "@Depth", depth );
                var enteredParameter = sqlCommandParameters.AddDateTimeAsInt64( "@Entered", entered );
                var endedParameter = sqlCommandParameters.AddDateTimeAsInt64( "@Ended", ended );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    rowVersion = (long)rowVersionParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool DeleteLogTraceEntry( Guid id, long rowVersion )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "LogTraceEntryDelete";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool InsertMapElement( ref Guid id, Guid item, Types.MapElementType elementType, double latitude, double longitude, double angle, double left, double top, double width, double height, string label, byte[] data )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "MapElementInsert";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id, System.Data.ParameterDirection.InputOutput );
                var itemParameter = sqlCommandParameters.AddReference( "@Item", item );
                var elementTypeParameter = sqlCommandParameters.AddEnum( "@ElementType", elementType );
                var latitudeParameter = sqlCommandParameters.AddDouble( "@Latitude", latitude );
                var longitudeParameter = sqlCommandParameters.AddDouble( "@Longitude", longitude );
                var angleParameter = sqlCommandParameters.AddDouble( "@Angle", angle );
                var leftParameter = sqlCommandParameters.AddDouble( "@Left", left );
                var topParameter = sqlCommandParameters.AddDouble( "@Top", top );
                var widthParameter = sqlCommandParameters.AddDouble( "@Width", width );
                var heightParameter = sqlCommandParameters.AddDouble( "@Height", height );
                var labelParameter = sqlCommandParameters.AddNVarChar( "@Label", label, 127 );
                var dataParameter = sqlCommandParameters.AddBinary( "@Data", data, 0 );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    id = (Guid)idParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool UpdateMapElement( Guid id, ref long rowVersion, Guid item, Types.MapElementType elementType, double latitude, double longitude, double angle, double left, double top, double width, double height, string label, byte[] data )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "MapElementUpdate";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion, System.Data.ParameterDirection.InputOutput );
                var itemParameter = sqlCommandParameters.AddReference( "@Item", item );
                var elementTypeParameter = sqlCommandParameters.AddEnum( "@ElementType", elementType );
                var latitudeParameter = sqlCommandParameters.AddDouble( "@Latitude", latitude );
                var longitudeParameter = sqlCommandParameters.AddDouble( "@Longitude", longitude );
                var angleParameter = sqlCommandParameters.AddDouble( "@Angle", angle );
                var leftParameter = sqlCommandParameters.AddDouble( "@Left", left );
                var topParameter = sqlCommandParameters.AddDouble( "@Top", top );
                var widthParameter = sqlCommandParameters.AddDouble( "@Width", width );
                var heightParameter = sqlCommandParameters.AddDouble( "@Height", height );
                var labelParameter = sqlCommandParameters.AddNVarChar( "@Label", label, 127 );
                var dataParameter = sqlCommandParameters.AddBinary( "@Data", data, 0 );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    rowVersion = (long)rowVersionParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool DeleteMapElement( Guid id, long rowVersion )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "MapElementDelete";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool InsertMapInfo( ref Guid id, int scale, double latitude, double longitude, double northWestLatitude, double northWestLongitude, double southEastLatitude, double southEastLongitude, byte[] image )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "MapInfoInsert";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id, System.Data.ParameterDirection.InputOutput );
                var scaleParameter = sqlCommandParameters.AddInt32( "@Scale", scale );
                var latitudeParameter = sqlCommandParameters.AddDouble( "@Latitude", latitude );
                var longitudeParameter = sqlCommandParameters.AddDouble( "@Longitude", longitude );
                var northWestLatitudeParameter = sqlCommandParameters.AddDouble( "@NorthWestLatitude", northWestLatitude );
                var northWestLongitudeParameter = sqlCommandParameters.AddDouble( "@NorthWestLongitude", northWestLongitude );
                var southEastLatitudeParameter = sqlCommandParameters.AddDouble( "@SouthEastLatitude", southEastLatitude );
                var southEastLongitudeParameter = sqlCommandParameters.AddDouble( "@SouthEastLongitude", southEastLongitude );
                var imageParameter = sqlCommandParameters.AddBinary( "@Image", image, 0 );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    id = (Guid)idParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool UpdateMapInfo( Guid id, ref long rowVersion, int scale, double latitude, double longitude, double northWestLatitude, double northWestLongitude, double southEastLatitude, double southEastLongitude, byte[] image )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "MapInfoUpdate";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion, System.Data.ParameterDirection.InputOutput );
                var scaleParameter = sqlCommandParameters.AddInt32( "@Scale", scale );
                var latitudeParameter = sqlCommandParameters.AddDouble( "@Latitude", latitude );
                var longitudeParameter = sqlCommandParameters.AddDouble( "@Longitude", longitude );
                var northWestLatitudeParameter = sqlCommandParameters.AddDouble( "@NorthWestLatitude", northWestLatitude );
                var northWestLongitudeParameter = sqlCommandParameters.AddDouble( "@NorthWestLongitude", northWestLongitude );
                var southEastLatitudeParameter = sqlCommandParameters.AddDouble( "@SouthEastLatitude", southEastLatitude );
                var southEastLongitudeParameter = sqlCommandParameters.AddDouble( "@SouthEastLongitude", southEastLongitude );
                var imageParameter = sqlCommandParameters.AddBinary( "@Image", image, 0 );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    rowVersion = (long)rowVersionParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool DeleteMapInfo( Guid id, long rowVersion )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "MapInfoDelete";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool InsertMapServiceOptions( ref Guid id, DateTime timestamp, string ipAddress, int port, double imageScaleFactorX, double imageOffsetX, double imageScaleFactorY, double imageOffsetY )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "MapServiceOptionsInsert";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id, System.Data.ParameterDirection.InputOutput );
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@Timestamp", timestamp );
                var ipAddressParameter = sqlCommandParameters.AddNVarChar( "@IpAddress", ipAddress, 127 );
                var portParameter = sqlCommandParameters.AddInt32( "@Port", port );
                var imageScaleFactorXParameter = sqlCommandParameters.AddDouble( "@ImageScaleFactorX", imageScaleFactorX );
                var imageOffsetXParameter = sqlCommandParameters.AddDouble( "@ImageOffsetX", imageOffsetX );
                var imageScaleFactorYParameter = sqlCommandParameters.AddDouble( "@ImageScaleFactorY", imageScaleFactorY );
                var imageOffsetYParameter = sqlCommandParameters.AddDouble( "@ImageOffsetY", imageOffsetY );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    id = (Guid)idParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool UpdateMapServiceOptions( Guid id, ref long rowVersion, DateTime timestamp, string ipAddress, int port, double imageScaleFactorX, double imageOffsetX, double imageScaleFactorY, double imageOffsetY )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "MapServiceOptionsUpdate";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion, System.Data.ParameterDirection.InputOutput );
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@Timestamp", timestamp );
                var ipAddressParameter = sqlCommandParameters.AddNVarChar( "@IpAddress", ipAddress, 127 );
                var portParameter = sqlCommandParameters.AddInt32( "@Port", port );
                var imageScaleFactorXParameter = sqlCommandParameters.AddDouble( "@ImageScaleFactorX", imageScaleFactorX );
                var imageOffsetXParameter = sqlCommandParameters.AddDouble( "@ImageOffsetX", imageOffsetX );
                var imageScaleFactorYParameter = sqlCommandParameters.AddDouble( "@ImageScaleFactorY", imageScaleFactorY );
                var imageOffsetYParameter = sqlCommandParameters.AddDouble( "@ImageOffsetY", imageOffsetY );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    rowVersion = (long)rowVersionParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool DeleteMapServiceOptions( Guid id, long rowVersion )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "MapServiceOptionsDelete";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool InsertMaritimeIdentificationDigits( ref Guid id, int code, Guid country )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "MaritimeIdentificationDigitsInsert";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id, System.Data.ParameterDirection.InputOutput );
                var codeParameter = sqlCommandParameters.AddInt32( "@Code", code );
                var countryParameter = sqlCommandParameters.AddReference( "@Country", country );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    id = (Guid)idParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool UpdateMaritimeIdentificationDigits( Guid id, ref long rowVersion, int code, Guid country )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "MaritimeIdentificationDigitsUpdate";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion, System.Data.ParameterDirection.InputOutput );
                var codeParameter = sqlCommandParameters.AddInt32( "@Code", code );
                var countryParameter = sqlCommandParameters.AddReference( "@Country", country );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    rowVersion = (long)rowVersionParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool DeleteMaritimeIdentificationDigits( Guid id, long rowVersion )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "MaritimeIdentificationDigitsDelete";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool InsertMediaProxySession( ref Guid id, Guid service, string name, Guid enabledTimeseries )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "MediaProxySessionInsert";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id, System.Data.ParameterDirection.InputOutput );
                var serviceParameter = sqlCommandParameters.AddReference( "@Service", service );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@Name", name, 128 );
                var enabledTimeseriesParameter = sqlCommandParameters.AddReference( "@EnabledTimeseries", enabledTimeseries );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    id = (Guid)idParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool UpdateMediaProxySession( Guid id, ref long rowVersion, Guid service, string name, Guid enabledTimeseries )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "MediaProxySessionUpdate";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion, System.Data.ParameterDirection.InputOutput );
                var serviceParameter = sqlCommandParameters.AddReference( "@Service", service );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@Name", name, 128 );
                var enabledTimeseriesParameter = sqlCommandParameters.AddReference( "@EnabledTimeseries", enabledTimeseries );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    rowVersion = (long)rowVersionParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool DeleteMediaProxySession( Guid id, long rowVersion )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "MediaProxySessionDelete";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool InsertMediaProxySessionFile( ref Guid id, Guid proxySession, DateTime timestamp, string streamName )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "MediaProxySessionFileInsert";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id, System.Data.ParameterDirection.InputOutput );
                var proxySessionParameter = sqlCommandParameters.AddReference( "@ProxySession", proxySession );
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@Timestamp", timestamp );
                var streamNameParameter = sqlCommandParameters.AddNVarChar( "@StreamName", streamName, 127 );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    id = (Guid)idParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool UpdateMediaProxySessionFile( Guid id, ref long rowVersion, Guid proxySession, DateTime timestamp, string streamName )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "MediaProxySessionFileUpdate";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion, System.Data.ParameterDirection.InputOutput );
                var proxySessionParameter = sqlCommandParameters.AddReference( "@ProxySession", proxySession );
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@Timestamp", timestamp );
                var streamNameParameter = sqlCommandParameters.AddNVarChar( "@StreamName", streamName, 127 );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    rowVersion = (long)rowVersionParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool DeleteMediaProxySessionFile( Guid id, long rowVersion )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "MediaProxySessionFileDelete";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool InsertMediaProxySessionOptions( ref Guid id, Guid proxySession, DateTime timestamp, string sourceStreamUrl, string streamName, Types.MediaProxySessionMode mode, int tunnelOverHTTPPortNumber, string username, string password, int recorderPortNumber, Types.MediaProxySessionType sessionType, TimeSpan maxFileTime, TimeSpan maxFileRetention, string videoDirectory )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "MediaProxySessionOptionsInsert";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id, System.Data.ParameterDirection.InputOutput );
                var proxySessionParameter = sqlCommandParameters.AddReference( "@ProxySession", proxySession );
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@Timestamp", timestamp );
                var sourceStreamUrlParameter = sqlCommandParameters.AddNVarChar( "@SourceStreamUrl", sourceStreamUrl, 255 );
                var streamNameParameter = sqlCommandParameters.AddNVarChar( "@StreamName", streamName, 255 );
                var modeParameter = sqlCommandParameters.AddEnum( "@Mode", mode );
                var tunnelOverHTTPPortNumberParameter = sqlCommandParameters.AddInt32( "@TunnelOverHTTPPortNumber", tunnelOverHTTPPortNumber );
                var usernameParameter = sqlCommandParameters.AddNVarChar( "@Username", username, 128 );
                var passwordParameter = sqlCommandParameters.AddNVarChar( "@Password", password, 128 );
                var recorderPortNumberParameter = sqlCommandParameters.AddInt32( "@RecorderPortNumber", recorderPortNumber );
                var sessionTypeParameter = sqlCommandParameters.AddEnum( "@SessionType", sessionType );
                var maxFileTimeParameter = sqlCommandParameters.AddTimeSpanAsInt64( "@MaxFileTime", maxFileTime );
                var maxFileRetentionParameter = sqlCommandParameters.AddTimeSpanAsInt64( "@MaxFileRetention", maxFileRetention );
                var videoDirectoryParameter = sqlCommandParameters.AddNVarChar( "@VideoDirectory", videoDirectory, 260 );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    id = (Guid)idParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool UpdateMediaProxySessionOptions( Guid id, ref long rowVersion, Guid proxySession, DateTime timestamp, string sourceStreamUrl, string streamName, Types.MediaProxySessionMode mode, int tunnelOverHTTPPortNumber, string username, string password, int recorderPortNumber, Types.MediaProxySessionType sessionType, TimeSpan maxFileTime, TimeSpan maxFileRetention, string videoDirectory )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "MediaProxySessionOptionsUpdate";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion, System.Data.ParameterDirection.InputOutput );
                var proxySessionParameter = sqlCommandParameters.AddReference( "@ProxySession", proxySession );
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@Timestamp", timestamp );
                var sourceStreamUrlParameter = sqlCommandParameters.AddNVarChar( "@SourceStreamUrl", sourceStreamUrl, 255 );
                var streamNameParameter = sqlCommandParameters.AddNVarChar( "@StreamName", streamName, 255 );
                var modeParameter = sqlCommandParameters.AddEnum( "@Mode", mode );
                var tunnelOverHTTPPortNumberParameter = sqlCommandParameters.AddInt32( "@TunnelOverHTTPPortNumber", tunnelOverHTTPPortNumber );
                var usernameParameter = sqlCommandParameters.AddNVarChar( "@Username", username, 128 );
                var passwordParameter = sqlCommandParameters.AddNVarChar( "@Password", password, 128 );
                var recorderPortNumberParameter = sqlCommandParameters.AddInt32( "@RecorderPortNumber", recorderPortNumber );
                var sessionTypeParameter = sqlCommandParameters.AddEnum( "@SessionType", sessionType );
                var maxFileTimeParameter = sqlCommandParameters.AddTimeSpanAsInt64( "@MaxFileTime", maxFileTime );
                var maxFileRetentionParameter = sqlCommandParameters.AddTimeSpanAsInt64( "@MaxFileRetention", maxFileRetention );
                var videoDirectoryParameter = sqlCommandParameters.AddNVarChar( "@VideoDirectory", videoDirectory, 260 );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    rowVersion = (long)rowVersionParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool DeleteMediaProxySessionOptions( Guid id, long rowVersion )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "MediaProxySessionOptionsDelete";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool InsertMediaService( ref Guid id, Guid enabledTimeseries )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "MediaServiceInsert";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id, System.Data.ParameterDirection.InputOutput );
                var enabledTimeseriesParameter = sqlCommandParameters.AddReference( "@EnabledTimeseries", enabledTimeseries );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    id = (Guid)idParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool UpdateMediaService( Guid id, ref long rowVersion, Guid enabledTimeseries )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "MediaServiceUpdate";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion, System.Data.ParameterDirection.InputOutput );
                var enabledTimeseriesParameter = sqlCommandParameters.AddReference( "@EnabledTimeseries", enabledTimeseries );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    rowVersion = (long)rowVersionParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool DeleteMediaService( Guid id, long rowVersion )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "MediaServiceDelete";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool InsertMediaServiceOptions( ref Guid id, Guid mediaService, DateTime timestamp, int rtspPortNumber, int httpPortNumber )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "MediaServiceOptionsInsert";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id, System.Data.ParameterDirection.InputOutput );
                var mediaServiceParameter = sqlCommandParameters.AddReference( "@MediaService", mediaService );
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@Timestamp", timestamp );
                var rtspPortNumberParameter = sqlCommandParameters.AddInt32( "@RtspPortNumber", rtspPortNumber );
                var httpPortNumberParameter = sqlCommandParameters.AddInt32( "@HttpPortNumber", httpPortNumber );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    id = (Guid)idParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool UpdateMediaServiceOptions( Guid id, ref long rowVersion, Guid mediaService, DateTime timestamp, int rtspPortNumber, int httpPortNumber )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "MediaServiceOptionsUpdate";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion, System.Data.ParameterDirection.InputOutput );
                var mediaServiceParameter = sqlCommandParameters.AddReference( "@MediaService", mediaService );
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@Timestamp", timestamp );
                var rtspPortNumberParameter = sqlCommandParameters.AddInt32( "@RtspPortNumber", rtspPortNumber );
                var httpPortNumberParameter = sqlCommandParameters.AddInt32( "@HttpPortNumber", httpPortNumber );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    rowVersion = (long)rowVersionParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool DeleteMediaServiceOptions( Guid id, long rowVersion )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "MediaServiceOptionsDelete";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool InsertElementType( ref Guid id, Guid namespace__, string name, string description )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "ElementTypeInsert";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id, System.Data.ParameterDirection.InputOutput );
                var namespaceParameter = sqlCommandParameters.AddReference( "@Namespace", namespace__ );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@Name", name, 127 );
                var descriptionParameter = sqlCommandParameters.AddNVarChar( "@Description", description, 0 );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    id = (Guid)idParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool UpdateElementType( Guid id, ref long rowVersion, Guid namespace__, string name, string description )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "ElementTypeUpdate";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion, System.Data.ParameterDirection.InputOutput );
                var namespaceParameter = sqlCommandParameters.AddReference( "@Namespace", namespace__ );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@Name", name, 127 );
                var descriptionParameter = sqlCommandParameters.AddNVarChar( "@Description", description, 0 );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    rowVersion = (long)rowVersionParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool DeleteElementType( Guid id, long rowVersion )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "ElementTypeDelete";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool InsertNamespace( ref Guid id, Guid namespace__, string name, string description )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "NamespaceInsert";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id, System.Data.ParameterDirection.InputOutput );
                var namespaceParameter = sqlCommandParameters.AddReference( "@Namespace", namespace__ );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@Name", name, 127 );
                var descriptionParameter = sqlCommandParameters.AddNVarChar( "@Description", description, 0 );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    id = (Guid)idParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool UpdateNamespace( Guid id, ref long rowVersion, Guid namespace__, string name, string description )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "NamespaceUpdate";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion, System.Data.ParameterDirection.InputOutput );
                var namespaceParameter = sqlCommandParameters.AddReference( "@Namespace", namespace__ );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@Name", name, 127 );
                var descriptionParameter = sqlCommandParameters.AddNVarChar( "@Description", description, 0 );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    rowVersion = (long)rowVersionParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool DeleteNamespace( Guid id, long rowVersion )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "NamespaceDelete";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool InsertOilSpill( ref Guid id, Guid oilSpillDetector, DateTime timestamp, double oilArea, byte[] shape, byte[] bSI, byte[] oil, byte[] trace )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "OilSpillInsert";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id, System.Data.ParameterDirection.InputOutput );
                var oilSpillDetectorParameter = sqlCommandParameters.AddReference( "@OilSpillDetector", oilSpillDetector );
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@Timestamp", timestamp );
                var oilAreaParameter = sqlCommandParameters.AddDouble( "@OilArea", oilArea );
                var shapeParameter = sqlCommandParameters.AddBinary( "@Shape", shape, 0 );
                var bSIParameter = sqlCommandParameters.AddBinary( "@BSI", bSI, 0 );
                var oilParameter = sqlCommandParameters.AddBinary( "@Oil", oil, 0 );
                var traceParameter = sqlCommandParameters.AddBinary( "@Trace", trace, 0 );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    id = (Guid)idParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool UpdateOilSpill( Guid id, ref long rowVersion, Guid oilSpillDetector, DateTime timestamp, double oilArea, byte[] shape, byte[] bSI, byte[] oil, byte[] trace )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "OilSpillUpdate";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion, System.Data.ParameterDirection.InputOutput );
                var oilSpillDetectorParameter = sqlCommandParameters.AddReference( "@OilSpillDetector", oilSpillDetector );
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@Timestamp", timestamp );
                var oilAreaParameter = sqlCommandParameters.AddDouble( "@OilArea", oilArea );
                var shapeParameter = sqlCommandParameters.AddBinary( "@Shape", shape, 0 );
                var bSIParameter = sqlCommandParameters.AddBinary( "@BSI", bSI, 0 );
                var oilParameter = sqlCommandParameters.AddBinary( "@Oil", oil, 0 );
                var traceParameter = sqlCommandParameters.AddBinary( "@Trace", trace, 0 );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    rowVersion = (long)rowVersionParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool DeleteOilSpill( Guid id, long rowVersion )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "OilSpillDelete";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool InsertOilSpillDetectorCommand( ref Guid id, Guid oilSpillDetector, DateTime timestamp, Types.DeviceCommandSourceType deviceCommandSourceType, Guid deviceCommandSourceId, Guid reply )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "OilSpillDetectorCommandInsert";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id, System.Data.ParameterDirection.InputOutput );
                var oilSpillDetectorParameter = sqlCommandParameters.AddReference( "@OilSpillDetector", oilSpillDetector );
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@Timestamp", timestamp );
                var deviceCommandSourceTypeParameter = sqlCommandParameters.AddEnum( "@DeviceCommandSourceType", deviceCommandSourceType );
                var deviceCommandSourceIdParameter = sqlCommandParameters.AddGuid( "@DeviceCommandSourceId", deviceCommandSourceId );
                var replyParameter = sqlCommandParameters.AddReference( "@Reply", reply );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    id = (Guid)idParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool UpdateOilSpillDetectorCommand( Guid id, ref long rowVersion, Guid oilSpillDetector, DateTime timestamp, Types.DeviceCommandSourceType deviceCommandSourceType, Guid deviceCommandSourceId, Guid reply )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "OilSpillDetectorCommandUpdate";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion, System.Data.ParameterDirection.InputOutput );
                var oilSpillDetectorParameter = sqlCommandParameters.AddReference( "@OilSpillDetector", oilSpillDetector );
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@Timestamp", timestamp );
                var deviceCommandSourceTypeParameter = sqlCommandParameters.AddEnum( "@DeviceCommandSourceType", deviceCommandSourceType );
                var deviceCommandSourceIdParameter = sqlCommandParameters.AddGuid( "@DeviceCommandSourceId", deviceCommandSourceId );
                var replyParameter = sqlCommandParameters.AddReference( "@Reply", reply );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    rowVersion = (long)rowVersionParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool DeleteOilSpillDetectorCommand( Guid id, long rowVersion )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "OilSpillDetectorCommandDelete";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool InsertOilSpillDetectorCommandReply( ref Guid id, Guid oilSpillDetector, DateTime timestamp, Guid command, Types.DeviceCommandReplyStatus status, string message )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "OilSpillDetectorCommandReplyInsert";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id, System.Data.ParameterDirection.InputOutput );
                var oilSpillDetectorParameter = sqlCommandParameters.AddReference( "@OilSpillDetector", oilSpillDetector );
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@Timestamp", timestamp );
                var commandParameter = sqlCommandParameters.AddReference( "@Command", command );
                var statusParameter = sqlCommandParameters.AddEnum( "@Status", status );
                var messageParameter = sqlCommandParameters.AddNVarChar( "@Message", message, 0 );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    id = (Guid)idParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool UpdateOilSpillDetectorCommandReply( Guid id, ref long rowVersion, Guid oilSpillDetector, DateTime timestamp, Guid command, Types.DeviceCommandReplyStatus status, string message )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "OilSpillDetectorCommandReplyUpdate";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion, System.Data.ParameterDirection.InputOutput );
                var oilSpillDetectorParameter = sqlCommandParameters.AddReference( "@OilSpillDetector", oilSpillDetector );
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@Timestamp", timestamp );
                var commandParameter = sqlCommandParameters.AddReference( "@Command", command );
                var statusParameter = sqlCommandParameters.AddEnum( "@Status", status );
                var messageParameter = sqlCommandParameters.AddNVarChar( "@Message", message, 0 );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    rowVersion = (long)rowVersionParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool DeleteOilSpillDetectorCommandReply( Guid id, long rowVersion )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "OilSpillDetectorCommandReplyDelete";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool InsertOilSpillDetectorConfiguration( ref Guid id, Guid oilSpillDetector, DateTime timestamp, double range, double startAngle, double endAngle, double startRange, double endRange, int updateRate, TimeSpan statusSendTime, bool drawBorder, byte[] colors, bool sendToServer, string directory, bool transparentWater, bool savePictures, bool sendAsTarget, bool writeLog, string targetFilePrefix, Guid targetMMSI, double latitude, double longitude, bool testSourceEnabled, string proxyServer, bool useProxyServer )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "OilSpillDetectorConfigurationInsert";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id, System.Data.ParameterDirection.InputOutput );
                var oilSpillDetectorParameter = sqlCommandParameters.AddReference( "@OilSpillDetector", oilSpillDetector );
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@Timestamp", timestamp );
                var rangeParameter = sqlCommandParameters.AddDouble( "@Range", range );
                var startAngleParameter = sqlCommandParameters.AddDouble( "@StartAngle", startAngle );
                var endAngleParameter = sqlCommandParameters.AddDouble( "@EndAngle", endAngle );
                var startRangeParameter = sqlCommandParameters.AddDouble( "@StartRange", startRange );
                var endRangeParameter = sqlCommandParameters.AddDouble( "@EndRange", endRange );
                var updateRateParameter = sqlCommandParameters.AddInt32( "@UpdateRate", updateRate );
                var statusSendTimeParameter = sqlCommandParameters.AddTimeSpanAsInt64( "@StatusSendTime", statusSendTime );
                var drawBorderParameter = sqlCommandParameters.AddBoolean( "@DrawBorder", drawBorder );
                var colorsParameter = sqlCommandParameters.AddBinary( "@Colors", colors, 0 );
                var sendToServerParameter = sqlCommandParameters.AddBoolean( "@SendToServer", sendToServer );
                var directoryParameter = sqlCommandParameters.AddNVarChar( "@Directory", directory, 260 );
                var transparentWaterParameter = sqlCommandParameters.AddBoolean( "@TransparentWater", transparentWater );
                var savePicturesParameter = sqlCommandParameters.AddBoolean( "@SavePictures", savePictures );
                var sendAsTargetParameter = sqlCommandParameters.AddBoolean( "@SendAsTarget", sendAsTarget );
                var writeLogParameter = sqlCommandParameters.AddBoolean( "@WriteLog", writeLog );
                var targetFilePrefixParameter = sqlCommandParameters.AddNVarChar( "@TargetFilePrefix", targetFilePrefix, 127 );
                var targetMMSIParameter = sqlCommandParameters.AddReference( "@TargetMMSI", targetMMSI );
                var latitudeParameter = sqlCommandParameters.AddDouble( "@Latitude", latitude );
                var longitudeParameter = sqlCommandParameters.AddDouble( "@Longitude", longitude );
                var testSourceEnabledParameter = sqlCommandParameters.AddBoolean( "@TestSourceEnabled", testSourceEnabled );
                var proxyServerParameter = sqlCommandParameters.AddNVarChar( "@ProxyServer", proxyServer, 127 );
                var useProxyServerParameter = sqlCommandParameters.AddBoolean( "@UseProxyServer", useProxyServer );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    id = (Guid)idParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool UpdateOilSpillDetectorConfiguration( Guid id, ref long rowVersion, Guid oilSpillDetector, DateTime timestamp, double range, double startAngle, double endAngle, double startRange, double endRange, int updateRate, TimeSpan statusSendTime, bool drawBorder, byte[] colors, bool sendToServer, string directory, bool transparentWater, bool savePictures, bool sendAsTarget, bool writeLog, string targetFilePrefix, Guid targetMMSI, double latitude, double longitude, bool testSourceEnabled, string proxyServer, bool useProxyServer )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "OilSpillDetectorConfigurationUpdate";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion, System.Data.ParameterDirection.InputOutput );
                var oilSpillDetectorParameter = sqlCommandParameters.AddReference( "@OilSpillDetector", oilSpillDetector );
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@Timestamp", timestamp );
                var rangeParameter = sqlCommandParameters.AddDouble( "@Range", range );
                var startAngleParameter = sqlCommandParameters.AddDouble( "@StartAngle", startAngle );
                var endAngleParameter = sqlCommandParameters.AddDouble( "@EndAngle", endAngle );
                var startRangeParameter = sqlCommandParameters.AddDouble( "@StartRange", startRange );
                var endRangeParameter = sqlCommandParameters.AddDouble( "@EndRange", endRange );
                var updateRateParameter = sqlCommandParameters.AddInt32( "@UpdateRate", updateRate );
                var statusSendTimeParameter = sqlCommandParameters.AddTimeSpanAsInt64( "@StatusSendTime", statusSendTime );
                var drawBorderParameter = sqlCommandParameters.AddBoolean( "@DrawBorder", drawBorder );
                var colorsParameter = sqlCommandParameters.AddBinary( "@Colors", colors, 0 );
                var sendToServerParameter = sqlCommandParameters.AddBoolean( "@SendToServer", sendToServer );
                var directoryParameter = sqlCommandParameters.AddNVarChar( "@Directory", directory, 260 );
                var transparentWaterParameter = sqlCommandParameters.AddBoolean( "@TransparentWater", transparentWater );
                var savePicturesParameter = sqlCommandParameters.AddBoolean( "@SavePictures", savePictures );
                var sendAsTargetParameter = sqlCommandParameters.AddBoolean( "@SendAsTarget", sendAsTarget );
                var writeLogParameter = sqlCommandParameters.AddBoolean( "@WriteLog", writeLog );
                var targetFilePrefixParameter = sqlCommandParameters.AddNVarChar( "@TargetFilePrefix", targetFilePrefix, 127 );
                var targetMMSIParameter = sqlCommandParameters.AddReference( "@TargetMMSI", targetMMSI );
                var latitudeParameter = sqlCommandParameters.AddDouble( "@Latitude", latitude );
                var longitudeParameter = sqlCommandParameters.AddDouble( "@Longitude", longitude );
                var testSourceEnabledParameter = sqlCommandParameters.AddBoolean( "@TestSourceEnabled", testSourceEnabled );
                var proxyServerParameter = sqlCommandParameters.AddNVarChar( "@ProxyServer", proxyServer, 127 );
                var useProxyServerParameter = sqlCommandParameters.AddBoolean( "@UseProxyServer", useProxyServer );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    rowVersion = (long)rowVersionParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool DeleteOilSpillDetectorConfiguration( Guid id, long rowVersion )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "OilSpillDetectorConfigurationDelete";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool InsertPosition2DTimeseriesValue( ref Guid id, Guid timeseries, DateTime timestamp, double? x, double? y )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "Position2DTimeseriesValueInsert";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id, System.Data.ParameterDirection.InputOutput );
                var timeseriesParameter = sqlCommandParameters.AddReference( "@Timeseries", timeseries );
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@Timestamp", timestamp );
                var xParameter = sqlCommandParameters.AddDouble( "@X", x );
                var yParameter = sqlCommandParameters.AddDouble( "@Y", y );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    id = (Guid)idParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool UpdatePosition2DTimeseriesValue( Guid id, ref long rowVersion, Guid timeseries, DateTime timestamp, double? x, double? y )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "Position2DTimeseriesValueUpdate";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion, System.Data.ParameterDirection.InputOutput );
                var timeseriesParameter = sqlCommandParameters.AddReference( "@Timeseries", timeseries );
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@Timestamp", timestamp );
                var xParameter = sqlCommandParameters.AddDouble( "@X", x );
                var yParameter = sqlCommandParameters.AddDouble( "@Y", y );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    rowVersion = (long)rowVersionParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool DeletePosition2DTimeseriesValue( Guid id, long rowVersion )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "Position2DTimeseriesValueDelete";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool InsertPosition3DTimeseriesValue( ref Guid id, Guid timeseries, DateTime timestamp, double? x, double? y, double? z )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "Position3DTimeseriesValueInsert";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id, System.Data.ParameterDirection.InputOutput );
                var timeseriesParameter = sqlCommandParameters.AddReference( "@Timeseries", timeseries );
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@Timestamp", timestamp );
                var xParameter = sqlCommandParameters.AddDouble( "@X", x );
                var yParameter = sqlCommandParameters.AddDouble( "@Y", y );
                var zParameter = sqlCommandParameters.AddDouble( "@Z", z );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    id = (Guid)idParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool UpdatePosition3DTimeseriesValue( Guid id, ref long rowVersion, Guid timeseries, DateTime timestamp, double? x, double? y, double? z )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "Position3DTimeseriesValueUpdate";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion, System.Data.ParameterDirection.InputOutput );
                var timeseriesParameter = sqlCommandParameters.AddReference( "@Timeseries", timeseries );
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@Timestamp", timestamp );
                var xParameter = sqlCommandParameters.AddDouble( "@X", x );
                var yParameter = sqlCommandParameters.AddDouble( "@Y", y );
                var zParameter = sqlCommandParameters.AddDouble( "@Z", z );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    rowVersion = (long)rowVersionParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool DeletePosition3DTimeseriesValue( Guid id, long rowVersion )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "Position3DTimeseriesValueDelete";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool InsertProcessTrackValueResult( ref Guid id, bool createdNewTrack, Guid trackId )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "ProcessTrackValueResultInsert";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id, System.Data.ParameterDirection.InputOutput );
                var createdNewTrackParameter = sqlCommandParameters.AddBoolean( "@CreatedNewTrack", createdNewTrack );
                var trackIdParameter = sqlCommandParameters.AddGuid( "@TrackId", trackId );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    id = (Guid)idParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool UpdateProcessTrackValueResult( Guid id, ref long rowVersion, bool createdNewTrack, Guid trackId )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "ProcessTrackValueResultUpdate";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion, System.Data.ParameterDirection.InputOutput );
                var createdNewTrackParameter = sqlCommandParameters.AddBoolean( "@CreatedNewTrack", createdNewTrack );
                var trackIdParameter = sqlCommandParameters.AddGuid( "@TrackId", trackId );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    rowVersion = (long)rowVersionParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool DeleteProcessTrackValueResult( Guid id, long rowVersion )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "ProcessTrackValueResultDelete";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool InsertBinaryProperty( ref Guid id, Guid element, Guid definition, byte[] value__ )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "BinaryPropertyInsert";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id, System.Data.ParameterDirection.InputOutput );
                var elementParameter = sqlCommandParameters.AddReference( "@Element", element );
                var definitionParameter = sqlCommandParameters.AddReference( "@Definition", definition );
                var valueParameter = sqlCommandParameters.AddBinary( "@Value", value__, 0 );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    id = (Guid)idParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool UpdateBinaryProperty( Guid id, ref long rowVersion, Guid element, Guid definition, byte[] value__ )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "BinaryPropertyUpdate";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion, System.Data.ParameterDirection.InputOutput );
                var elementParameter = sqlCommandParameters.AddReference( "@Element", element );
                var definitionParameter = sqlCommandParameters.AddReference( "@Definition", definition );
                var valueParameter = sqlCommandParameters.AddBinary( "@Value", value__, 0 );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    rowVersion = (long)rowVersionParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool DeleteBinaryProperty( Guid id, long rowVersion )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "BinaryPropertyDelete";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool InsertBooleanProperty( ref Guid id, Guid element, Guid definition, bool value__ )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "BooleanPropertyInsert";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id, System.Data.ParameterDirection.InputOutput );
                var elementParameter = sqlCommandParameters.AddReference( "@Element", element );
                var definitionParameter = sqlCommandParameters.AddReference( "@Definition", definition );
                var valueParameter = sqlCommandParameters.AddBoolean( "@Value", value__ );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    id = (Guid)idParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool UpdateBooleanProperty( Guid id, ref long rowVersion, Guid element, Guid definition, bool value__ )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "BooleanPropertyUpdate";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion, System.Data.ParameterDirection.InputOutput );
                var elementParameter = sqlCommandParameters.AddReference( "@Element", element );
                var definitionParameter = sqlCommandParameters.AddReference( "@Definition", definition );
                var valueParameter = sqlCommandParameters.AddBoolean( "@Value", value__ );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    rowVersion = (long)rowVersionParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool DeleteBooleanProperty( Guid id, long rowVersion )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "BooleanPropertyDelete";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool InsertByteProperty( ref Guid id, Guid element, Guid definition, byte value__ )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "BytePropertyInsert";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id, System.Data.ParameterDirection.InputOutput );
                var elementParameter = sqlCommandParameters.AddReference( "@Element", element );
                var definitionParameter = sqlCommandParameters.AddReference( "@Definition", definition );
                var valueParameter = sqlCommandParameters.AddByte( "@Value", value__ );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    id = (Guid)idParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool UpdateByteProperty( Guid id, ref long rowVersion, Guid element, Guid definition, byte value__ )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "BytePropertyUpdate";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion, System.Data.ParameterDirection.InputOutput );
                var elementParameter = sqlCommandParameters.AddReference( "@Element", element );
                var definitionParameter = sqlCommandParameters.AddReference( "@Definition", definition );
                var valueParameter = sqlCommandParameters.AddByte( "@Value", value__ );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    rowVersion = (long)rowVersionParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool DeleteByteProperty( Guid id, long rowVersion )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "BytePropertyDelete";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool InsertDateTimeProperty( ref Guid id, Guid element, Guid definition, DateTime value__ )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "DateTimePropertyInsert";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id, System.Data.ParameterDirection.InputOutput );
                var elementParameter = sqlCommandParameters.AddReference( "@Element", element );
                var definitionParameter = sqlCommandParameters.AddReference( "@Definition", definition );
                var valueParameter = sqlCommandParameters.AddDateTimeAsInt64( "@Value", value__ );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    id = (Guid)idParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool UpdateDateTimeProperty( Guid id, ref long rowVersion, Guid element, Guid definition, DateTime value__ )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "DateTimePropertyUpdate";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion, System.Data.ParameterDirection.InputOutput );
                var elementParameter = sqlCommandParameters.AddReference( "@Element", element );
                var definitionParameter = sqlCommandParameters.AddReference( "@Definition", definition );
                var valueParameter = sqlCommandParameters.AddDateTimeAsInt64( "@Value", value__ );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    rowVersion = (long)rowVersionParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool DeleteDateTimeProperty( Guid id, long rowVersion )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "DateTimePropertyDelete";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool InsertDoubleProperty( ref Guid id, Guid element, Guid definition, double value__ )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "DoublePropertyInsert";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id, System.Data.ParameterDirection.InputOutput );
                var elementParameter = sqlCommandParameters.AddReference( "@Element", element );
                var definitionParameter = sqlCommandParameters.AddReference( "@Definition", definition );
                var valueParameter = sqlCommandParameters.AddDouble( "@Value", value__ );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    id = (Guid)idParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool UpdateDoubleProperty( Guid id, ref long rowVersion, Guid element, Guid definition, double value__ )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "DoublePropertyUpdate";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion, System.Data.ParameterDirection.InputOutput );
                var elementParameter = sqlCommandParameters.AddReference( "@Element", element );
                var definitionParameter = sqlCommandParameters.AddReference( "@Definition", definition );
                var valueParameter = sqlCommandParameters.AddDouble( "@Value", value__ );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    rowVersion = (long)rowVersionParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool DeleteDoubleProperty( Guid id, long rowVersion )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "DoublePropertyDelete";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool InsertGuidProperty( ref Guid id, Guid element, Guid definition, Guid value__ )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "GuidPropertyInsert";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id, System.Data.ParameterDirection.InputOutput );
                var elementParameter = sqlCommandParameters.AddReference( "@Element", element );
                var definitionParameter = sqlCommandParameters.AddReference( "@Definition", definition );
                var valueParameter = sqlCommandParameters.AddGuid( "@Value", value__ );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    id = (Guid)idParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool UpdateGuidProperty( Guid id, ref long rowVersion, Guid element, Guid definition, Guid value__ )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "GuidPropertyUpdate";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion, System.Data.ParameterDirection.InputOutput );
                var elementParameter = sqlCommandParameters.AddReference( "@Element", element );
                var definitionParameter = sqlCommandParameters.AddReference( "@Definition", definition );
                var valueParameter = sqlCommandParameters.AddGuid( "@Value", value__ );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    rowVersion = (long)rowVersionParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool DeleteGuidProperty( Guid id, long rowVersion )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "GuidPropertyDelete";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool InsertInt16Property( ref Guid id, Guid element, Guid definition, short value__ )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "Int16PropertyInsert";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id, System.Data.ParameterDirection.InputOutput );
                var elementParameter = sqlCommandParameters.AddReference( "@Element", element );
                var definitionParameter = sqlCommandParameters.AddReference( "@Definition", definition );
                var valueParameter = sqlCommandParameters.AddInt16( "@Value", value__ );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    id = (Guid)idParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool UpdateInt16Property( Guid id, ref long rowVersion, Guid element, Guid definition, short value__ )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "Int16PropertyUpdate";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion, System.Data.ParameterDirection.InputOutput );
                var elementParameter = sqlCommandParameters.AddReference( "@Element", element );
                var definitionParameter = sqlCommandParameters.AddReference( "@Definition", definition );
                var valueParameter = sqlCommandParameters.AddInt16( "@Value", value__ );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    rowVersion = (long)rowVersionParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool DeleteInt16Property( Guid id, long rowVersion )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "Int16PropertyDelete";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool InsertInt32Property( ref Guid id, Guid element, Guid definition, int value__ )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "Int32PropertyInsert";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id, System.Data.ParameterDirection.InputOutput );
                var elementParameter = sqlCommandParameters.AddReference( "@Element", element );
                var definitionParameter = sqlCommandParameters.AddReference( "@Definition", definition );
                var valueParameter = sqlCommandParameters.AddInt32( "@Value", value__ );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    id = (Guid)idParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool UpdateInt32Property( Guid id, ref long rowVersion, Guid element, Guid definition, int value__ )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "Int32PropertyUpdate";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion, System.Data.ParameterDirection.InputOutput );
                var elementParameter = sqlCommandParameters.AddReference( "@Element", element );
                var definitionParameter = sqlCommandParameters.AddReference( "@Definition", definition );
                var valueParameter = sqlCommandParameters.AddInt32( "@Value", value__ );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    rowVersion = (long)rowVersionParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool DeleteInt32Property( Guid id, long rowVersion )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "Int32PropertyDelete";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool InsertInt64Property( ref Guid id, Guid element, Guid definition, long value__ )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "Int64PropertyInsert";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id, System.Data.ParameterDirection.InputOutput );
                var elementParameter = sqlCommandParameters.AddReference( "@Element", element );
                var definitionParameter = sqlCommandParameters.AddReference( "@Definition", definition );
                var valueParameter = sqlCommandParameters.AddInt64( "@Value", value__ );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    id = (Guid)idParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool UpdateInt64Property( Guid id, ref long rowVersion, Guid element, Guid definition, long value__ )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "Int64PropertyUpdate";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion, System.Data.ParameterDirection.InputOutput );
                var elementParameter = sqlCommandParameters.AddReference( "@Element", element );
                var definitionParameter = sqlCommandParameters.AddReference( "@Definition", definition );
                var valueParameter = sqlCommandParameters.AddInt64( "@Value", value__ );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    rowVersion = (long)rowVersionParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool DeleteInt64Property( Guid id, long rowVersion )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "Int64PropertyDelete";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool InsertReferenceProperty( ref Guid id, Guid element, Guid definition, Guid value__ )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "ReferencePropertyInsert";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id, System.Data.ParameterDirection.InputOutput );
                var elementParameter = sqlCommandParameters.AddReference( "@Element", element );
                var definitionParameter = sqlCommandParameters.AddReference( "@Definition", definition );
                var valueParameter = sqlCommandParameters.AddReference( "@Value", value__ );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    id = (Guid)idParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool UpdateReferenceProperty( Guid id, ref long rowVersion, Guid element, Guid definition, Guid value__ )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "ReferencePropertyUpdate";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion, System.Data.ParameterDirection.InputOutput );
                var elementParameter = sqlCommandParameters.AddReference( "@Element", element );
                var definitionParameter = sqlCommandParameters.AddReference( "@Definition", definition );
                var valueParameter = sqlCommandParameters.AddReference( "@Value", value__ );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    rowVersion = (long)rowVersionParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool DeleteReferenceProperty( Guid id, long rowVersion )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "ReferencePropertyDelete";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool InsertSByteProperty( ref Guid id, Guid element, Guid definition, sbyte value__ )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "SBytePropertyInsert";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id, System.Data.ParameterDirection.InputOutput );
                var elementParameter = sqlCommandParameters.AddReference( "@Element", element );
                var definitionParameter = sqlCommandParameters.AddReference( "@Definition", definition );
                var valueParameter = sqlCommandParameters.AddSByte( "@Value", value__ );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    id = (Guid)idParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool UpdateSByteProperty( Guid id, ref long rowVersion, Guid element, Guid definition, sbyte value__ )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "SBytePropertyUpdate";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion, System.Data.ParameterDirection.InputOutput );
                var elementParameter = sqlCommandParameters.AddReference( "@Element", element );
                var definitionParameter = sqlCommandParameters.AddReference( "@Definition", definition );
                var valueParameter = sqlCommandParameters.AddSByte( "@Value", value__ );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    rowVersion = (long)rowVersionParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool DeleteSByteProperty( Guid id, long rowVersion )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "SBytePropertyDelete";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool InsertSingleProperty( ref Guid id, Guid element, Guid definition, float value__ )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "SinglePropertyInsert";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id, System.Data.ParameterDirection.InputOutput );
                var elementParameter = sqlCommandParameters.AddReference( "@Element", element );
                var definitionParameter = sqlCommandParameters.AddReference( "@Definition", definition );
                var valueParameter = sqlCommandParameters.AddSingle( "@Value", value__ );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    id = (Guid)idParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool UpdateSingleProperty( Guid id, ref long rowVersion, Guid element, Guid definition, float value__ )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "SinglePropertyUpdate";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion, System.Data.ParameterDirection.InputOutput );
                var elementParameter = sqlCommandParameters.AddReference( "@Element", element );
                var definitionParameter = sqlCommandParameters.AddReference( "@Definition", definition );
                var valueParameter = sqlCommandParameters.AddSingle( "@Value", value__ );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    rowVersion = (long)rowVersionParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool DeleteSingleProperty( Guid id, long rowVersion )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "SinglePropertyDelete";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool InsertStringProperty( ref Guid id, Guid element, Guid definition, string value__ )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "StringPropertyInsert";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id, System.Data.ParameterDirection.InputOutput );
                var elementParameter = sqlCommandParameters.AddReference( "@Element", element );
                var definitionParameter = sqlCommandParameters.AddReference( "@Definition", definition );
                var valueParameter = sqlCommandParameters.AddNVarChar( "@Value", value__, 127 );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    id = (Guid)idParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool UpdateStringProperty( Guid id, ref long rowVersion, Guid element, Guid definition, string value__ )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "StringPropertyUpdate";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion, System.Data.ParameterDirection.InputOutput );
                var elementParameter = sqlCommandParameters.AddReference( "@Element", element );
                var definitionParameter = sqlCommandParameters.AddReference( "@Definition", definition );
                var valueParameter = sqlCommandParameters.AddNVarChar( "@Value", value__, 127 );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    rowVersion = (long)rowVersionParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool DeleteStringProperty( Guid id, long rowVersion )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "StringPropertyDelete";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool InsertBinaryTimeseriesProperty( ref Guid id, Guid element, Guid definition, Guid timeseries )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "BinaryTimeseriesPropertyInsert";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id, System.Data.ParameterDirection.InputOutput );
                var elementParameter = sqlCommandParameters.AddReference( "@Element", element );
                var definitionParameter = sqlCommandParameters.AddReference( "@Definition", definition );
                var timeseriesParameter = sqlCommandParameters.AddReference( "@Timeseries", timeseries );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    id = (Guid)idParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool UpdateBinaryTimeseriesProperty( Guid id, ref long rowVersion, Guid element, Guid definition, Guid timeseries )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "BinaryTimeseriesPropertyUpdate";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion, System.Data.ParameterDirection.InputOutput );
                var elementParameter = sqlCommandParameters.AddReference( "@Element", element );
                var definitionParameter = sqlCommandParameters.AddReference( "@Definition", definition );
                var timeseriesParameter = sqlCommandParameters.AddReference( "@Timeseries", timeseries );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    rowVersion = (long)rowVersionParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool DeleteBinaryTimeseriesProperty( Guid id, long rowVersion )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "BinaryTimeseriesPropertyDelete";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool InsertBooleanTimeseriesProperty( ref Guid id, Guid element, Guid definition, Guid timeseries )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "BooleanTimeseriesPropertyInsert";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id, System.Data.ParameterDirection.InputOutput );
                var elementParameter = sqlCommandParameters.AddReference( "@Element", element );
                var definitionParameter = sqlCommandParameters.AddReference( "@Definition", definition );
                var timeseriesParameter = sqlCommandParameters.AddReference( "@Timeseries", timeseries );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    id = (Guid)idParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool UpdateBooleanTimeseriesProperty( Guid id, ref long rowVersion, Guid element, Guid definition, Guid timeseries )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "BooleanTimeseriesPropertyUpdate";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion, System.Data.ParameterDirection.InputOutput );
                var elementParameter = sqlCommandParameters.AddReference( "@Element", element );
                var definitionParameter = sqlCommandParameters.AddReference( "@Definition", definition );
                var timeseriesParameter = sqlCommandParameters.AddReference( "@Timeseries", timeseries );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    rowVersion = (long)rowVersionParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool DeleteBooleanTimeseriesProperty( Guid id, long rowVersion )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "BooleanTimeseriesPropertyDelete";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool InsertByteTimeseriesProperty( ref Guid id, Guid element, Guid definition, Guid timeseries )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "ByteTimeseriesPropertyInsert";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id, System.Data.ParameterDirection.InputOutput );
                var elementParameter = sqlCommandParameters.AddReference( "@Element", element );
                var definitionParameter = sqlCommandParameters.AddReference( "@Definition", definition );
                var timeseriesParameter = sqlCommandParameters.AddReference( "@Timeseries", timeseries );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    id = (Guid)idParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool UpdateByteTimeseriesProperty( Guid id, ref long rowVersion, Guid element, Guid definition, Guid timeseries )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "ByteTimeseriesPropertyUpdate";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion, System.Data.ParameterDirection.InputOutput );
                var elementParameter = sqlCommandParameters.AddReference( "@Element", element );
                var definitionParameter = sqlCommandParameters.AddReference( "@Definition", definition );
                var timeseriesParameter = sqlCommandParameters.AddReference( "@Timeseries", timeseries );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    rowVersion = (long)rowVersionParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool DeleteByteTimeseriesProperty( Guid id, long rowVersion )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "ByteTimeseriesPropertyDelete";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool InsertDateTimeTimeseriesProperty( ref Guid id, Guid element, Guid definition, Guid timeseries )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "DateTimeTimeseriesPropertyInsert";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id, System.Data.ParameterDirection.InputOutput );
                var elementParameter = sqlCommandParameters.AddReference( "@Element", element );
                var definitionParameter = sqlCommandParameters.AddReference( "@Definition", definition );
                var timeseriesParameter = sqlCommandParameters.AddReference( "@Timeseries", timeseries );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    id = (Guid)idParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool UpdateDateTimeTimeseriesProperty( Guid id, ref long rowVersion, Guid element, Guid definition, Guid timeseries )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "DateTimeTimeseriesPropertyUpdate";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion, System.Data.ParameterDirection.InputOutput );
                var elementParameter = sqlCommandParameters.AddReference( "@Element", element );
                var definitionParameter = sqlCommandParameters.AddReference( "@Definition", definition );
                var timeseriesParameter = sqlCommandParameters.AddReference( "@Timeseries", timeseries );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    rowVersion = (long)rowVersionParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool DeleteDateTimeTimeseriesProperty( Guid id, long rowVersion )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "DateTimeTimeseriesPropertyDelete";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool InsertDoubleTimeseriesProperty( ref Guid id, Guid element, Guid definition, Guid timeseries )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "DoubleTimeseriesPropertyInsert";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id, System.Data.ParameterDirection.InputOutput );
                var elementParameter = sqlCommandParameters.AddReference( "@Element", element );
                var definitionParameter = sqlCommandParameters.AddReference( "@Definition", definition );
                var timeseriesParameter = sqlCommandParameters.AddReference( "@Timeseries", timeseries );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    id = (Guid)idParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool UpdateDoubleTimeseriesProperty( Guid id, ref long rowVersion, Guid element, Guid definition, Guid timeseries )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "DoubleTimeseriesPropertyUpdate";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion, System.Data.ParameterDirection.InputOutput );
                var elementParameter = sqlCommandParameters.AddReference( "@Element", element );
                var definitionParameter = sqlCommandParameters.AddReference( "@Definition", definition );
                var timeseriesParameter = sqlCommandParameters.AddReference( "@Timeseries", timeseries );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    rowVersion = (long)rowVersionParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool DeleteDoubleTimeseriesProperty( Guid id, long rowVersion )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "DoubleTimeseriesPropertyDelete";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool InsertGuidTimeseriesProperty( ref Guid id, Guid element, Guid definition, Guid timeseries )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "GuidTimeseriesPropertyInsert";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id, System.Data.ParameterDirection.InputOutput );
                var elementParameter = sqlCommandParameters.AddReference( "@Element", element );
                var definitionParameter = sqlCommandParameters.AddReference( "@Definition", definition );
                var timeseriesParameter = sqlCommandParameters.AddReference( "@Timeseries", timeseries );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    id = (Guid)idParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool UpdateGuidTimeseriesProperty( Guid id, ref long rowVersion, Guid element, Guid definition, Guid timeseries )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "GuidTimeseriesPropertyUpdate";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion, System.Data.ParameterDirection.InputOutput );
                var elementParameter = sqlCommandParameters.AddReference( "@Element", element );
                var definitionParameter = sqlCommandParameters.AddReference( "@Definition", definition );
                var timeseriesParameter = sqlCommandParameters.AddReference( "@Timeseries", timeseries );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    rowVersion = (long)rowVersionParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool DeleteGuidTimeseriesProperty( Guid id, long rowVersion )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "GuidTimeseriesPropertyDelete";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool InsertInt16TimeseriesProperty( ref Guid id, Guid element, Guid definition, Guid timeseries )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "Int16TimeseriesPropertyInsert";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id, System.Data.ParameterDirection.InputOutput );
                var elementParameter = sqlCommandParameters.AddReference( "@Element", element );
                var definitionParameter = sqlCommandParameters.AddReference( "@Definition", definition );
                var timeseriesParameter = sqlCommandParameters.AddReference( "@Timeseries", timeseries );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    id = (Guid)idParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool UpdateInt16TimeseriesProperty( Guid id, ref long rowVersion, Guid element, Guid definition, Guid timeseries )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "Int16TimeseriesPropertyUpdate";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion, System.Data.ParameterDirection.InputOutput );
                var elementParameter = sqlCommandParameters.AddReference( "@Element", element );
                var definitionParameter = sqlCommandParameters.AddReference( "@Definition", definition );
                var timeseriesParameter = sqlCommandParameters.AddReference( "@Timeseries", timeseries );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    rowVersion = (long)rowVersionParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool DeleteInt16TimeseriesProperty( Guid id, long rowVersion )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "Int16TimeseriesPropertyDelete";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool InsertInt32TimeseriesProperty( ref Guid id, Guid element, Guid definition, Guid timeseries )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "Int32TimeseriesPropertyInsert";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id, System.Data.ParameterDirection.InputOutput );
                var elementParameter = sqlCommandParameters.AddReference( "@Element", element );
                var definitionParameter = sqlCommandParameters.AddReference( "@Definition", definition );
                var timeseriesParameter = sqlCommandParameters.AddReference( "@Timeseries", timeseries );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    id = (Guid)idParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool UpdateInt32TimeseriesProperty( Guid id, ref long rowVersion, Guid element, Guid definition, Guid timeseries )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "Int32TimeseriesPropertyUpdate";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion, System.Data.ParameterDirection.InputOutput );
                var elementParameter = sqlCommandParameters.AddReference( "@Element", element );
                var definitionParameter = sqlCommandParameters.AddReference( "@Definition", definition );
                var timeseriesParameter = sqlCommandParameters.AddReference( "@Timeseries", timeseries );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    rowVersion = (long)rowVersionParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool DeleteInt32TimeseriesProperty( Guid id, long rowVersion )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "Int32TimeseriesPropertyDelete";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool InsertInt64TimeseriesProperty( ref Guid id, Guid element, Guid definition, Guid timeseries )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "Int64TimeseriesPropertyInsert";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id, System.Data.ParameterDirection.InputOutput );
                var elementParameter = sqlCommandParameters.AddReference( "@Element", element );
                var definitionParameter = sqlCommandParameters.AddReference( "@Definition", definition );
                var timeseriesParameter = sqlCommandParameters.AddReference( "@Timeseries", timeseries );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    id = (Guid)idParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool UpdateInt64TimeseriesProperty( Guid id, ref long rowVersion, Guid element, Guid definition, Guid timeseries )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "Int64TimeseriesPropertyUpdate";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion, System.Data.ParameterDirection.InputOutput );
                var elementParameter = sqlCommandParameters.AddReference( "@Element", element );
                var definitionParameter = sqlCommandParameters.AddReference( "@Definition", definition );
                var timeseriesParameter = sqlCommandParameters.AddReference( "@Timeseries", timeseries );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    rowVersion = (long)rowVersionParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool DeleteInt64TimeseriesProperty( Guid id, long rowVersion )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "Int64TimeseriesPropertyDelete";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool InsertReferenceTimeseriesProperty( ref Guid id, Guid element, Guid definition, Guid timeseries )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "ReferenceTimeseriesPropertyInsert";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id, System.Data.ParameterDirection.InputOutput );
                var elementParameter = sqlCommandParameters.AddReference( "@Element", element );
                var definitionParameter = sqlCommandParameters.AddReference( "@Definition", definition );
                var timeseriesParameter = sqlCommandParameters.AddReference( "@Timeseries", timeseries );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    id = (Guid)idParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool UpdateReferenceTimeseriesProperty( Guid id, ref long rowVersion, Guid element, Guid definition, Guid timeseries )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "ReferenceTimeseriesPropertyUpdate";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion, System.Data.ParameterDirection.InputOutput );
                var elementParameter = sqlCommandParameters.AddReference( "@Element", element );
                var definitionParameter = sqlCommandParameters.AddReference( "@Definition", definition );
                var timeseriesParameter = sqlCommandParameters.AddReference( "@Timeseries", timeseries );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    rowVersion = (long)rowVersionParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool DeleteReferenceTimeseriesProperty( Guid id, long rowVersion )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "ReferenceTimeseriesPropertyDelete";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool InsertSByteTimeseriesProperty( ref Guid id, Guid element, Guid definition, Guid timeseries )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "SByteTimeseriesPropertyInsert";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id, System.Data.ParameterDirection.InputOutput );
                var elementParameter = sqlCommandParameters.AddReference( "@Element", element );
                var definitionParameter = sqlCommandParameters.AddReference( "@Definition", definition );
                var timeseriesParameter = sqlCommandParameters.AddReference( "@Timeseries", timeseries );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    id = (Guid)idParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool UpdateSByteTimeseriesProperty( Guid id, ref long rowVersion, Guid element, Guid definition, Guid timeseries )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "SByteTimeseriesPropertyUpdate";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion, System.Data.ParameterDirection.InputOutput );
                var elementParameter = sqlCommandParameters.AddReference( "@Element", element );
                var definitionParameter = sqlCommandParameters.AddReference( "@Definition", definition );
                var timeseriesParameter = sqlCommandParameters.AddReference( "@Timeseries", timeseries );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    rowVersion = (long)rowVersionParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool DeleteSByteTimeseriesProperty( Guid id, long rowVersion )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "SByteTimeseriesPropertyDelete";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool InsertSingleTimeseriesProperty( ref Guid id, Guid element, Guid definition, Guid timeseries )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "SingleTimeseriesPropertyInsert";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id, System.Data.ParameterDirection.InputOutput );
                var elementParameter = sqlCommandParameters.AddReference( "@Element", element );
                var definitionParameter = sqlCommandParameters.AddReference( "@Definition", definition );
                var timeseriesParameter = sqlCommandParameters.AddReference( "@Timeseries", timeseries );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    id = (Guid)idParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool UpdateSingleTimeseriesProperty( Guid id, ref long rowVersion, Guid element, Guid definition, Guid timeseries )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "SingleTimeseriesPropertyUpdate";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion, System.Data.ParameterDirection.InputOutput );
                var elementParameter = sqlCommandParameters.AddReference( "@Element", element );
                var definitionParameter = sqlCommandParameters.AddReference( "@Definition", definition );
                var timeseriesParameter = sqlCommandParameters.AddReference( "@Timeseries", timeseries );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    rowVersion = (long)rowVersionParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool DeleteSingleTimeseriesProperty( Guid id, long rowVersion )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "SingleTimeseriesPropertyDelete";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool InsertStringTimeseriesProperty( ref Guid id, Guid element, Guid definition, Guid timeseries )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "StringTimeseriesPropertyInsert";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id, System.Data.ParameterDirection.InputOutput );
                var elementParameter = sqlCommandParameters.AddReference( "@Element", element );
                var definitionParameter = sqlCommandParameters.AddReference( "@Definition", definition );
                var timeseriesParameter = sqlCommandParameters.AddReference( "@Timeseries", timeseries );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    id = (Guid)idParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool UpdateStringTimeseriesProperty( Guid id, ref long rowVersion, Guid element, Guid definition, Guid timeseries )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "StringTimeseriesPropertyUpdate";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion, System.Data.ParameterDirection.InputOutput );
                var elementParameter = sqlCommandParameters.AddReference( "@Element", element );
                var definitionParameter = sqlCommandParameters.AddReference( "@Definition", definition );
                var timeseriesParameter = sqlCommandParameters.AddReference( "@Timeseries", timeseries );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    rowVersion = (long)rowVersionParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool DeleteStringTimeseriesProperty( Guid id, long rowVersion )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "StringTimeseriesPropertyDelete";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool InsertTimeSpanTimeseriesProperty( ref Guid id, Guid element, Guid definition, Guid timeseries )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "TimeSpanTimeseriesPropertyInsert";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id, System.Data.ParameterDirection.InputOutput );
                var elementParameter = sqlCommandParameters.AddReference( "@Element", element );
                var definitionParameter = sqlCommandParameters.AddReference( "@Definition", definition );
                var timeseriesParameter = sqlCommandParameters.AddReference( "@Timeseries", timeseries );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    id = (Guid)idParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool UpdateTimeSpanTimeseriesProperty( Guid id, ref long rowVersion, Guid element, Guid definition, Guid timeseries )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "TimeSpanTimeseriesPropertyUpdate";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion, System.Data.ParameterDirection.InputOutput );
                var elementParameter = sqlCommandParameters.AddReference( "@Element", element );
                var definitionParameter = sqlCommandParameters.AddReference( "@Definition", definition );
                var timeseriesParameter = sqlCommandParameters.AddReference( "@Timeseries", timeseries );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    rowVersion = (long)rowVersionParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool DeleteTimeSpanTimeseriesProperty( Guid id, long rowVersion )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "TimeSpanTimeseriesPropertyDelete";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool InsertUInt16TimeseriesProperty( ref Guid id, Guid element, Guid definition, Guid timeseries )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "UInt16TimeseriesPropertyInsert";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id, System.Data.ParameterDirection.InputOutput );
                var elementParameter = sqlCommandParameters.AddReference( "@Element", element );
                var definitionParameter = sqlCommandParameters.AddReference( "@Definition", definition );
                var timeseriesParameter = sqlCommandParameters.AddReference( "@Timeseries", timeseries );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    id = (Guid)idParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool UpdateUInt16TimeseriesProperty( Guid id, ref long rowVersion, Guid element, Guid definition, Guid timeseries )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "UInt16TimeseriesPropertyUpdate";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion, System.Data.ParameterDirection.InputOutput );
                var elementParameter = sqlCommandParameters.AddReference( "@Element", element );
                var definitionParameter = sqlCommandParameters.AddReference( "@Definition", definition );
                var timeseriesParameter = sqlCommandParameters.AddReference( "@Timeseries", timeseries );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    rowVersion = (long)rowVersionParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool DeleteUInt16TimeseriesProperty( Guid id, long rowVersion )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "UInt16TimeseriesPropertyDelete";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool InsertUInt32TimeseriesProperty( ref Guid id, Guid element, Guid definition, Guid timeseries )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "UInt32TimeseriesPropertyInsert";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id, System.Data.ParameterDirection.InputOutput );
                var elementParameter = sqlCommandParameters.AddReference( "@Element", element );
                var definitionParameter = sqlCommandParameters.AddReference( "@Definition", definition );
                var timeseriesParameter = sqlCommandParameters.AddReference( "@Timeseries", timeseries );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    id = (Guid)idParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool UpdateUInt32TimeseriesProperty( Guid id, ref long rowVersion, Guid element, Guid definition, Guid timeseries )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "UInt32TimeseriesPropertyUpdate";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion, System.Data.ParameterDirection.InputOutput );
                var elementParameter = sqlCommandParameters.AddReference( "@Element", element );
                var definitionParameter = sqlCommandParameters.AddReference( "@Definition", definition );
                var timeseriesParameter = sqlCommandParameters.AddReference( "@Timeseries", timeseries );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    rowVersion = (long)rowVersionParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool DeleteUInt32TimeseriesProperty( Guid id, long rowVersion )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "UInt32TimeseriesPropertyDelete";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool InsertUInt64TimeseriesProperty( ref Guid id, Guid element, Guid definition, Guid timeseries )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "UInt64TimeseriesPropertyInsert";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id, System.Data.ParameterDirection.InputOutput );
                var elementParameter = sqlCommandParameters.AddReference( "@Element", element );
                var definitionParameter = sqlCommandParameters.AddReference( "@Definition", definition );
                var timeseriesParameter = sqlCommandParameters.AddReference( "@Timeseries", timeseries );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    id = (Guid)idParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool UpdateUInt64TimeseriesProperty( Guid id, ref long rowVersion, Guid element, Guid definition, Guid timeseries )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "UInt64TimeseriesPropertyUpdate";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion, System.Data.ParameterDirection.InputOutput );
                var elementParameter = sqlCommandParameters.AddReference( "@Element", element );
                var definitionParameter = sqlCommandParameters.AddReference( "@Definition", definition );
                var timeseriesParameter = sqlCommandParameters.AddReference( "@Timeseries", timeseries );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    rowVersion = (long)rowVersionParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool DeleteUInt64TimeseriesProperty( Guid id, long rowVersion )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "UInt64TimeseriesPropertyDelete";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool InsertTimeSpanProperty( ref Guid id, Guid element, Guid definition, TimeSpan value__ )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "TimeSpanPropertyInsert";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id, System.Data.ParameterDirection.InputOutput );
                var elementParameter = sqlCommandParameters.AddReference( "@Element", element );
                var definitionParameter = sqlCommandParameters.AddReference( "@Definition", definition );
                var valueParameter = sqlCommandParameters.AddTimeSpanAsInt64( "@Value", value__ );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    id = (Guid)idParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool UpdateTimeSpanProperty( Guid id, ref long rowVersion, Guid element, Guid definition, TimeSpan value__ )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "TimeSpanPropertyUpdate";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion, System.Data.ParameterDirection.InputOutput );
                var elementParameter = sqlCommandParameters.AddReference( "@Element", element );
                var definitionParameter = sqlCommandParameters.AddReference( "@Definition", definition );
                var valueParameter = sqlCommandParameters.AddTimeSpanAsInt64( "@Value", value__ );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    rowVersion = (long)rowVersionParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool DeleteTimeSpanProperty( Guid id, long rowVersion )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "TimeSpanPropertyDelete";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool InsertUInt16Property( ref Guid id, Guid element, Guid definition, ushort value__ )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "UInt16PropertyInsert";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id, System.Data.ParameterDirection.InputOutput );
                var elementParameter = sqlCommandParameters.AddReference( "@Element", element );
                var definitionParameter = sqlCommandParameters.AddReference( "@Definition", definition );
                var valueParameter = sqlCommandParameters.AddUInt16( "@Value", value__ );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    id = (Guid)idParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool UpdateUInt16Property( Guid id, ref long rowVersion, Guid element, Guid definition, ushort value__ )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "UInt16PropertyUpdate";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion, System.Data.ParameterDirection.InputOutput );
                var elementParameter = sqlCommandParameters.AddReference( "@Element", element );
                var definitionParameter = sqlCommandParameters.AddReference( "@Definition", definition );
                var valueParameter = sqlCommandParameters.AddUInt16( "@Value", value__ );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    rowVersion = (long)rowVersionParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool DeleteUInt16Property( Guid id, long rowVersion )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "UInt16PropertyDelete";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool InsertUInt32Property( ref Guid id, Guid element, Guid definition, uint value__ )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "UInt32PropertyInsert";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id, System.Data.ParameterDirection.InputOutput );
                var elementParameter = sqlCommandParameters.AddReference( "@Element", element );
                var definitionParameter = sqlCommandParameters.AddReference( "@Definition", definition );
                var valueParameter = sqlCommandParameters.AddUInt32( "@Value", value__ );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    id = (Guid)idParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool UpdateUInt32Property( Guid id, ref long rowVersion, Guid element, Guid definition, uint value__ )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "UInt32PropertyUpdate";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion, System.Data.ParameterDirection.InputOutput );
                var elementParameter = sqlCommandParameters.AddReference( "@Element", element );
                var definitionParameter = sqlCommandParameters.AddReference( "@Definition", definition );
                var valueParameter = sqlCommandParameters.AddUInt32( "@Value", value__ );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    rowVersion = (long)rowVersionParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool DeleteUInt32Property( Guid id, long rowVersion )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "UInt32PropertyDelete";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool InsertUInt64Property( ref Guid id, Guid element, Guid definition, long value__ )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "UInt64PropertyInsert";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id, System.Data.ParameterDirection.InputOutput );
                var elementParameter = sqlCommandParameters.AddReference( "@Element", element );
                var definitionParameter = sqlCommandParameters.AddReference( "@Definition", definition );
                var valueParameter = sqlCommandParameters.AddInt64( "@Value", value__ );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    id = (Guid)idParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool UpdateUInt64Property( Guid id, ref long rowVersion, Guid element, Guid definition, long value__ )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "UInt64PropertyUpdate";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion, System.Data.ParameterDirection.InputOutput );
                var elementParameter = sqlCommandParameters.AddReference( "@Element", element );
                var definitionParameter = sqlCommandParameters.AddReference( "@Definition", definition );
                var valueParameter = sqlCommandParameters.AddInt64( "@Value", value__ );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    rowVersion = (long)rowVersionParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool DeleteUInt64Property( Guid id, long rowVersion )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "UInt64PropertyDelete";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool InsertBinaryPropertyDefinition( ref Guid id, Guid elementType, string name, string description, byte[] defaultValue )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "BinaryPropertyDefinitionInsert";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id, System.Data.ParameterDirection.InputOutput );
                var elementTypeParameter = sqlCommandParameters.AddReference( "@ElementType", elementType );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@Name", name, 127 );
                var descriptionParameter = sqlCommandParameters.AddNVarChar( "@Description", description, 0 );
                var defaultValueParameter = sqlCommandParameters.AddBinary( "@DefaultValue", defaultValue, 0 );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    id = (Guid)idParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool UpdateBinaryPropertyDefinition( Guid id, ref long rowVersion, Guid elementType, string name, string description, byte[] defaultValue )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "BinaryPropertyDefinitionUpdate";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion, System.Data.ParameterDirection.InputOutput );
                var elementTypeParameter = sqlCommandParameters.AddReference( "@ElementType", elementType );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@Name", name, 127 );
                var descriptionParameter = sqlCommandParameters.AddNVarChar( "@Description", description, 0 );
                var defaultValueParameter = sqlCommandParameters.AddBinary( "@DefaultValue", defaultValue, 0 );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    rowVersion = (long)rowVersionParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool DeleteBinaryPropertyDefinition( Guid id, long rowVersion )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "BinaryPropertyDefinitionDelete";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool InsertBooleanPropertyDefinition( ref Guid id, Guid elementType, string name, string description, bool defaultValue )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "BooleanPropertyDefinitionInsert";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id, System.Data.ParameterDirection.InputOutput );
                var elementTypeParameter = sqlCommandParameters.AddReference( "@ElementType", elementType );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@Name", name, 127 );
                var descriptionParameter = sqlCommandParameters.AddNVarChar( "@Description", description, 0 );
                var defaultValueParameter = sqlCommandParameters.AddBoolean( "@DefaultValue", defaultValue );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    id = (Guid)idParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool UpdateBooleanPropertyDefinition( Guid id, ref long rowVersion, Guid elementType, string name, string description, bool defaultValue )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "BooleanPropertyDefinitionUpdate";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion, System.Data.ParameterDirection.InputOutput );
                var elementTypeParameter = sqlCommandParameters.AddReference( "@ElementType", elementType );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@Name", name, 127 );
                var descriptionParameter = sqlCommandParameters.AddNVarChar( "@Description", description, 0 );
                var defaultValueParameter = sqlCommandParameters.AddBoolean( "@DefaultValue", defaultValue );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    rowVersion = (long)rowVersionParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool DeleteBooleanPropertyDefinition( Guid id, long rowVersion )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "BooleanPropertyDefinitionDelete";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool InsertBytePropertyDefinition( ref Guid id, Guid elementType, string name, string description, byte defaultValue, byte minValue, byte maxValue )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "BytePropertyDefinitionInsert";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id, System.Data.ParameterDirection.InputOutput );
                var elementTypeParameter = sqlCommandParameters.AddReference( "@ElementType", elementType );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@Name", name, 127 );
                var descriptionParameter = sqlCommandParameters.AddNVarChar( "@Description", description, 0 );
                var defaultValueParameter = sqlCommandParameters.AddByte( "@DefaultValue", defaultValue );
                var minValueParameter = sqlCommandParameters.AddByte( "@MinValue", minValue );
                var maxValueParameter = sqlCommandParameters.AddByte( "@MaxValue", maxValue );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    id = (Guid)idParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool UpdateBytePropertyDefinition( Guid id, ref long rowVersion, Guid elementType, string name, string description, byte defaultValue, byte minValue, byte maxValue )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "BytePropertyDefinitionUpdate";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion, System.Data.ParameterDirection.InputOutput );
                var elementTypeParameter = sqlCommandParameters.AddReference( "@ElementType", elementType );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@Name", name, 127 );
                var descriptionParameter = sqlCommandParameters.AddNVarChar( "@Description", description, 0 );
                var defaultValueParameter = sqlCommandParameters.AddByte( "@DefaultValue", defaultValue );
                var minValueParameter = sqlCommandParameters.AddByte( "@MinValue", minValue );
                var maxValueParameter = sqlCommandParameters.AddByte( "@MaxValue", maxValue );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    rowVersion = (long)rowVersionParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool DeleteBytePropertyDefinition( Guid id, long rowVersion )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "BytePropertyDefinitionDelete";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool InsertDateTimePropertyDefinition( ref Guid id, Guid elementType, string name, string description, string defaultValue, string minValue, string maxValue )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "DateTimePropertyDefinitionInsert";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id, System.Data.ParameterDirection.InputOutput );
                var elementTypeParameter = sqlCommandParameters.AddReference( "@ElementType", elementType );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@Name", name, 127 );
                var descriptionParameter = sqlCommandParameters.AddNVarChar( "@Description", description, 0 );
                var defaultValueParameter = sqlCommandParameters.AddNVarChar( "@DefaultValue", defaultValue, 127 );
                var minValueParameter = sqlCommandParameters.AddNVarChar( "@MinValue", minValue, 127 );
                var maxValueParameter = sqlCommandParameters.AddNVarChar( "@MaxValue", maxValue, 127 );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    id = (Guid)idParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool UpdateDateTimePropertyDefinition( Guid id, ref long rowVersion, Guid elementType, string name, string description, string defaultValue, string minValue, string maxValue )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "DateTimePropertyDefinitionUpdate";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion, System.Data.ParameterDirection.InputOutput );
                var elementTypeParameter = sqlCommandParameters.AddReference( "@ElementType", elementType );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@Name", name, 127 );
                var descriptionParameter = sqlCommandParameters.AddNVarChar( "@Description", description, 0 );
                var defaultValueParameter = sqlCommandParameters.AddNVarChar( "@DefaultValue", defaultValue, 127 );
                var minValueParameter = sqlCommandParameters.AddNVarChar( "@MinValue", minValue, 127 );
                var maxValueParameter = sqlCommandParameters.AddNVarChar( "@MaxValue", maxValue, 127 );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    rowVersion = (long)rowVersionParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool DeleteDateTimePropertyDefinition( Guid id, long rowVersion )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "DateTimePropertyDefinitionDelete";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool InsertDoublePropertyDefinition( ref Guid id, Guid elementType, string name, string description, double defaultValue, double minValue, double maxValue )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "DoublePropertyDefinitionInsert";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id, System.Data.ParameterDirection.InputOutput );
                var elementTypeParameter = sqlCommandParameters.AddReference( "@ElementType", elementType );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@Name", name, 127 );
                var descriptionParameter = sqlCommandParameters.AddNVarChar( "@Description", description, 0 );
                var defaultValueParameter = sqlCommandParameters.AddDouble( "@DefaultValue", defaultValue );
                var minValueParameter = sqlCommandParameters.AddDouble( "@MinValue", minValue );
                var maxValueParameter = sqlCommandParameters.AddDouble( "@MaxValue", maxValue );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    id = (Guid)idParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool UpdateDoublePropertyDefinition( Guid id, ref long rowVersion, Guid elementType, string name, string description, double defaultValue, double minValue, double maxValue )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "DoublePropertyDefinitionUpdate";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion, System.Data.ParameterDirection.InputOutput );
                var elementTypeParameter = sqlCommandParameters.AddReference( "@ElementType", elementType );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@Name", name, 127 );
                var descriptionParameter = sqlCommandParameters.AddNVarChar( "@Description", description, 0 );
                var defaultValueParameter = sqlCommandParameters.AddDouble( "@DefaultValue", defaultValue );
                var minValueParameter = sqlCommandParameters.AddDouble( "@MinValue", minValue );
                var maxValueParameter = sqlCommandParameters.AddDouble( "@MaxValue", maxValue );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    rowVersion = (long)rowVersionParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool DeleteDoublePropertyDefinition( Guid id, long rowVersion )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "DoublePropertyDefinitionDelete";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool InsertGuidPropertyDefinition( ref Guid id, Guid elementType, string name, string description, Guid defaultValue )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "GuidPropertyDefinitionInsert";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id, System.Data.ParameterDirection.InputOutput );
                var elementTypeParameter = sqlCommandParameters.AddReference( "@ElementType", elementType );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@Name", name, 127 );
                var descriptionParameter = sqlCommandParameters.AddNVarChar( "@Description", description, 0 );
                var defaultValueParameter = sqlCommandParameters.AddGuid( "@DefaultValue", defaultValue );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    id = (Guid)idParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool UpdateGuidPropertyDefinition( Guid id, ref long rowVersion, Guid elementType, string name, string description, Guid defaultValue )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "GuidPropertyDefinitionUpdate";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion, System.Data.ParameterDirection.InputOutput );
                var elementTypeParameter = sqlCommandParameters.AddReference( "@ElementType", elementType );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@Name", name, 127 );
                var descriptionParameter = sqlCommandParameters.AddNVarChar( "@Description", description, 0 );
                var defaultValueParameter = sqlCommandParameters.AddGuid( "@DefaultValue", defaultValue );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    rowVersion = (long)rowVersionParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool DeleteGuidPropertyDefinition( Guid id, long rowVersion )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "GuidPropertyDefinitionDelete";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool InsertInt16PropertyDefinition( ref Guid id, Guid elementType, string name, string description, short defaultValue, short minValue, short maxValue )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "Int16PropertyDefinitionInsert";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id, System.Data.ParameterDirection.InputOutput );
                var elementTypeParameter = sqlCommandParameters.AddReference( "@ElementType", elementType );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@Name", name, 127 );
                var descriptionParameter = sqlCommandParameters.AddNVarChar( "@Description", description, 0 );
                var defaultValueParameter = sqlCommandParameters.AddInt16( "@DefaultValue", defaultValue );
                var minValueParameter = sqlCommandParameters.AddInt16( "@MinValue", minValue );
                var maxValueParameter = sqlCommandParameters.AddInt16( "@MaxValue", maxValue );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    id = (Guid)idParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool UpdateInt16PropertyDefinition( Guid id, ref long rowVersion, Guid elementType, string name, string description, short defaultValue, short minValue, short maxValue )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "Int16PropertyDefinitionUpdate";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion, System.Data.ParameterDirection.InputOutput );
                var elementTypeParameter = sqlCommandParameters.AddReference( "@ElementType", elementType );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@Name", name, 127 );
                var descriptionParameter = sqlCommandParameters.AddNVarChar( "@Description", description, 0 );
                var defaultValueParameter = sqlCommandParameters.AddInt16( "@DefaultValue", defaultValue );
                var minValueParameter = sqlCommandParameters.AddInt16( "@MinValue", minValue );
                var maxValueParameter = sqlCommandParameters.AddInt16( "@MaxValue", maxValue );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    rowVersion = (long)rowVersionParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool DeleteInt16PropertyDefinition( Guid id, long rowVersion )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "Int16PropertyDefinitionDelete";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool InsertInt32PropertyDefinition( ref Guid id, Guid elementType, string name, string description, int defaultValue, int minValue, int maxValue )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "Int32PropertyDefinitionInsert";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id, System.Data.ParameterDirection.InputOutput );
                var elementTypeParameter = sqlCommandParameters.AddReference( "@ElementType", elementType );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@Name", name, 127 );
                var descriptionParameter = sqlCommandParameters.AddNVarChar( "@Description", description, 0 );
                var defaultValueParameter = sqlCommandParameters.AddInt32( "@DefaultValue", defaultValue );
                var minValueParameter = sqlCommandParameters.AddInt32( "@MinValue", minValue );
                var maxValueParameter = sqlCommandParameters.AddInt32( "@MaxValue", maxValue );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    id = (Guid)idParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool UpdateInt32PropertyDefinition( Guid id, ref long rowVersion, Guid elementType, string name, string description, int defaultValue, int minValue, int maxValue )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "Int32PropertyDefinitionUpdate";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion, System.Data.ParameterDirection.InputOutput );
                var elementTypeParameter = sqlCommandParameters.AddReference( "@ElementType", elementType );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@Name", name, 127 );
                var descriptionParameter = sqlCommandParameters.AddNVarChar( "@Description", description, 0 );
                var defaultValueParameter = sqlCommandParameters.AddInt32( "@DefaultValue", defaultValue );
                var minValueParameter = sqlCommandParameters.AddInt32( "@MinValue", minValue );
                var maxValueParameter = sqlCommandParameters.AddInt32( "@MaxValue", maxValue );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    rowVersion = (long)rowVersionParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool DeleteInt32PropertyDefinition( Guid id, long rowVersion )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "Int32PropertyDefinitionDelete";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool InsertInt64PropertyDefinition( ref Guid id, Guid elementType, string name, string description, long defaultValue, long minValue, long maxValue )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "Int64PropertyDefinitionInsert";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id, System.Data.ParameterDirection.InputOutput );
                var elementTypeParameter = sqlCommandParameters.AddReference( "@ElementType", elementType );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@Name", name, 127 );
                var descriptionParameter = sqlCommandParameters.AddNVarChar( "@Description", description, 0 );
                var defaultValueParameter = sqlCommandParameters.AddInt64( "@DefaultValue", defaultValue );
                var minValueParameter = sqlCommandParameters.AddInt64( "@MinValue", minValue );
                var maxValueParameter = sqlCommandParameters.AddInt64( "@MaxValue", maxValue );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    id = (Guid)idParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool UpdateInt64PropertyDefinition( Guid id, ref long rowVersion, Guid elementType, string name, string description, long defaultValue, long minValue, long maxValue )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "Int64PropertyDefinitionUpdate";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion, System.Data.ParameterDirection.InputOutput );
                var elementTypeParameter = sqlCommandParameters.AddReference( "@ElementType", elementType );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@Name", name, 127 );
                var descriptionParameter = sqlCommandParameters.AddNVarChar( "@Description", description, 0 );
                var defaultValueParameter = sqlCommandParameters.AddInt64( "@DefaultValue", defaultValue );
                var minValueParameter = sqlCommandParameters.AddInt64( "@MinValue", minValue );
                var maxValueParameter = sqlCommandParameters.AddInt64( "@MaxValue", maxValue );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    rowVersion = (long)rowVersionParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool DeleteInt64PropertyDefinition( Guid id, long rowVersion )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "Int64PropertyDefinitionDelete";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool InsertReferencePropertyDefinition( ref Guid id, Guid elementType, string name, string description, Guid defaultValue, Guid referencedElementType )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "ReferencePropertyDefinitionInsert";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id, System.Data.ParameterDirection.InputOutput );
                var elementTypeParameter = sqlCommandParameters.AddReference( "@ElementType", elementType );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@Name", name, 127 );
                var descriptionParameter = sqlCommandParameters.AddNVarChar( "@Description", description, 0 );
                var defaultValueParameter = sqlCommandParameters.AddReference( "@DefaultValue", defaultValue );
                var referencedElementTypeParameter = sqlCommandParameters.AddReference( "@ReferencedElementType", referencedElementType );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    id = (Guid)idParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool UpdateReferencePropertyDefinition( Guid id, ref long rowVersion, Guid elementType, string name, string description, Guid defaultValue, Guid referencedElementType )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "ReferencePropertyDefinitionUpdate";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion, System.Data.ParameterDirection.InputOutput );
                var elementTypeParameter = sqlCommandParameters.AddReference( "@ElementType", elementType );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@Name", name, 127 );
                var descriptionParameter = sqlCommandParameters.AddNVarChar( "@Description", description, 0 );
                var defaultValueParameter = sqlCommandParameters.AddReference( "@DefaultValue", defaultValue );
                var referencedElementTypeParameter = sqlCommandParameters.AddReference( "@ReferencedElementType", referencedElementType );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    rowVersion = (long)rowVersionParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool DeleteReferencePropertyDefinition( Guid id, long rowVersion )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "ReferencePropertyDefinitionDelete";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool InsertSBytePropertyDefinition( ref Guid id, Guid elementType, string name, string description, sbyte defaultValue, sbyte minValue, sbyte maxValue )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "SBytePropertyDefinitionInsert";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id, System.Data.ParameterDirection.InputOutput );
                var elementTypeParameter = sqlCommandParameters.AddReference( "@ElementType", elementType );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@Name", name, 127 );
                var descriptionParameter = sqlCommandParameters.AddNVarChar( "@Description", description, 0 );
                var defaultValueParameter = sqlCommandParameters.AddSByte( "@DefaultValue", defaultValue );
                var minValueParameter = sqlCommandParameters.AddSByte( "@MinValue", minValue );
                var maxValueParameter = sqlCommandParameters.AddSByte( "@MaxValue", maxValue );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    id = (Guid)idParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool UpdateSBytePropertyDefinition( Guid id, ref long rowVersion, Guid elementType, string name, string description, sbyte defaultValue, sbyte minValue, sbyte maxValue )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "SBytePropertyDefinitionUpdate";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion, System.Data.ParameterDirection.InputOutput );
                var elementTypeParameter = sqlCommandParameters.AddReference( "@ElementType", elementType );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@Name", name, 127 );
                var descriptionParameter = sqlCommandParameters.AddNVarChar( "@Description", description, 0 );
                var defaultValueParameter = sqlCommandParameters.AddSByte( "@DefaultValue", defaultValue );
                var minValueParameter = sqlCommandParameters.AddSByte( "@MinValue", minValue );
                var maxValueParameter = sqlCommandParameters.AddSByte( "@MaxValue", maxValue );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    rowVersion = (long)rowVersionParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool DeleteSBytePropertyDefinition( Guid id, long rowVersion )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "SBytePropertyDefinitionDelete";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool InsertSinglePropertyDefinition( ref Guid id, Guid elementType, string name, string description, float defaultValue, float minValue, float maxValue )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "SinglePropertyDefinitionInsert";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id, System.Data.ParameterDirection.InputOutput );
                var elementTypeParameter = sqlCommandParameters.AddReference( "@ElementType", elementType );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@Name", name, 127 );
                var descriptionParameter = sqlCommandParameters.AddNVarChar( "@Description", description, 0 );
                var defaultValueParameter = sqlCommandParameters.AddSingle( "@DefaultValue", defaultValue );
                var minValueParameter = sqlCommandParameters.AddSingle( "@MinValue", minValue );
                var maxValueParameter = sqlCommandParameters.AddSingle( "@MaxValue", maxValue );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    id = (Guid)idParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool UpdateSinglePropertyDefinition( Guid id, ref long rowVersion, Guid elementType, string name, string description, float defaultValue, float minValue, float maxValue )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "SinglePropertyDefinitionUpdate";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion, System.Data.ParameterDirection.InputOutput );
                var elementTypeParameter = sqlCommandParameters.AddReference( "@ElementType", elementType );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@Name", name, 127 );
                var descriptionParameter = sqlCommandParameters.AddNVarChar( "@Description", description, 0 );
                var defaultValueParameter = sqlCommandParameters.AddSingle( "@DefaultValue", defaultValue );
                var minValueParameter = sqlCommandParameters.AddSingle( "@MinValue", minValue );
                var maxValueParameter = sqlCommandParameters.AddSingle( "@MaxValue", maxValue );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    rowVersion = (long)rowVersionParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool DeleteSinglePropertyDefinition( Guid id, long rowVersion )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "SinglePropertyDefinitionDelete";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool InsertStringPropertyDefinition( ref Guid id, Guid elementType, string name, string description, string defaultValue, string pattern )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "StringPropertyDefinitionInsert";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id, System.Data.ParameterDirection.InputOutput );
                var elementTypeParameter = sqlCommandParameters.AddReference( "@ElementType", elementType );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@Name", name, 127 );
                var descriptionParameter = sqlCommandParameters.AddNVarChar( "@Description", description, 0 );
                var defaultValueParameter = sqlCommandParameters.AddNVarChar( "@DefaultValue", defaultValue, 127 );
                var patternParameter = sqlCommandParameters.AddNVarChar( "@Pattern", pattern, 127 );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    id = (Guid)idParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool UpdateStringPropertyDefinition( Guid id, ref long rowVersion, Guid elementType, string name, string description, string defaultValue, string pattern )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "StringPropertyDefinitionUpdate";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion, System.Data.ParameterDirection.InputOutput );
                var elementTypeParameter = sqlCommandParameters.AddReference( "@ElementType", elementType );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@Name", name, 127 );
                var descriptionParameter = sqlCommandParameters.AddNVarChar( "@Description", description, 0 );
                var defaultValueParameter = sqlCommandParameters.AddNVarChar( "@DefaultValue", defaultValue, 127 );
                var patternParameter = sqlCommandParameters.AddNVarChar( "@Pattern", pattern, 127 );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    rowVersion = (long)rowVersionParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool DeleteStringPropertyDefinition( Guid id, long rowVersion )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "StringPropertyDefinitionDelete";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool InsertBinaryTimeseriesPropertyDefinition( ref Guid id, Guid elementType, string name, string description )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "BinaryTimeseriesPropertyDefinitionInsert";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id, System.Data.ParameterDirection.InputOutput );
                var elementTypeParameter = sqlCommandParameters.AddReference( "@ElementType", elementType );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@Name", name, 127 );
                var descriptionParameter = sqlCommandParameters.AddNVarChar( "@Description", description, 0 );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    id = (Guid)idParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool UpdateBinaryTimeseriesPropertyDefinition( Guid id, ref long rowVersion, Guid elementType, string name, string description )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "BinaryTimeseriesPropertyDefinitionUpdate";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion, System.Data.ParameterDirection.InputOutput );
                var elementTypeParameter = sqlCommandParameters.AddReference( "@ElementType", elementType );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@Name", name, 127 );
                var descriptionParameter = sqlCommandParameters.AddNVarChar( "@Description", description, 0 );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    rowVersion = (long)rowVersionParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool DeleteBinaryTimeseriesPropertyDefinition( Guid id, long rowVersion )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "BinaryTimeseriesPropertyDefinitionDelete";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool InsertBooleanTimeseriesPropertyDefinition( ref Guid id, Guid elementType, string name, string description )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "BooleanTimeseriesPropertyDefinitionInsert";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id, System.Data.ParameterDirection.InputOutput );
                var elementTypeParameter = sqlCommandParameters.AddReference( "@ElementType", elementType );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@Name", name, 127 );
                var descriptionParameter = sqlCommandParameters.AddNVarChar( "@Description", description, 0 );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    id = (Guid)idParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool UpdateBooleanTimeseriesPropertyDefinition( Guid id, ref long rowVersion, Guid elementType, string name, string description )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "BooleanTimeseriesPropertyDefinitionUpdate";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion, System.Data.ParameterDirection.InputOutput );
                var elementTypeParameter = sqlCommandParameters.AddReference( "@ElementType", elementType );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@Name", name, 127 );
                var descriptionParameter = sqlCommandParameters.AddNVarChar( "@Description", description, 0 );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    rowVersion = (long)rowVersionParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool DeleteBooleanTimeseriesPropertyDefinition( Guid id, long rowVersion )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "BooleanTimeseriesPropertyDefinitionDelete";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool InsertByteTimeseriesPropertyDefinition( ref Guid id, Guid elementType, string name, string description, byte minValue, byte maxValue )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "ByteTimeseriesPropertyDefinitionInsert";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id, System.Data.ParameterDirection.InputOutput );
                var elementTypeParameter = sqlCommandParameters.AddReference( "@ElementType", elementType );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@Name", name, 127 );
                var descriptionParameter = sqlCommandParameters.AddNVarChar( "@Description", description, 0 );
                var minValueParameter = sqlCommandParameters.AddByte( "@MinValue", minValue );
                var maxValueParameter = sqlCommandParameters.AddByte( "@MaxValue", maxValue );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    id = (Guid)idParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool UpdateByteTimeseriesPropertyDefinition( Guid id, ref long rowVersion, Guid elementType, string name, string description, byte minValue, byte maxValue )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "ByteTimeseriesPropertyDefinitionUpdate";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion, System.Data.ParameterDirection.InputOutput );
                var elementTypeParameter = sqlCommandParameters.AddReference( "@ElementType", elementType );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@Name", name, 127 );
                var descriptionParameter = sqlCommandParameters.AddNVarChar( "@Description", description, 0 );
                var minValueParameter = sqlCommandParameters.AddByte( "@MinValue", minValue );
                var maxValueParameter = sqlCommandParameters.AddByte( "@MaxValue", maxValue );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    rowVersion = (long)rowVersionParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool DeleteByteTimeseriesPropertyDefinition( Guid id, long rowVersion )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "ByteTimeseriesPropertyDefinitionDelete";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool InsertDateTimeTimeseriesPropertyDefinition( ref Guid id, Guid elementType, string name, string description, string minValue, string maxValue )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "DateTimeTimeseriesPropertyDefinitionInsert";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id, System.Data.ParameterDirection.InputOutput );
                var elementTypeParameter = sqlCommandParameters.AddReference( "@ElementType", elementType );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@Name", name, 127 );
                var descriptionParameter = sqlCommandParameters.AddNVarChar( "@Description", description, 0 );
                var minValueParameter = sqlCommandParameters.AddNVarChar( "@MinValue", minValue, 127 );
                var maxValueParameter = sqlCommandParameters.AddNVarChar( "@MaxValue", maxValue, 127 );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    id = (Guid)idParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool UpdateDateTimeTimeseriesPropertyDefinition( Guid id, ref long rowVersion, Guid elementType, string name, string description, string minValue, string maxValue )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "DateTimeTimeseriesPropertyDefinitionUpdate";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion, System.Data.ParameterDirection.InputOutput );
                var elementTypeParameter = sqlCommandParameters.AddReference( "@ElementType", elementType );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@Name", name, 127 );
                var descriptionParameter = sqlCommandParameters.AddNVarChar( "@Description", description, 0 );
                var minValueParameter = sqlCommandParameters.AddNVarChar( "@MinValue", minValue, 127 );
                var maxValueParameter = sqlCommandParameters.AddNVarChar( "@MaxValue", maxValue, 127 );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    rowVersion = (long)rowVersionParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool DeleteDateTimeTimeseriesPropertyDefinition( Guid id, long rowVersion )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "DateTimeTimeseriesPropertyDefinitionDelete";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool InsertDoubleTimeseriesPropertyDefinition( ref Guid id, Guid elementType, string name, string description, double minValue, double maxValue )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "DoubleTimeseriesPropertyDefinitionInsert";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id, System.Data.ParameterDirection.InputOutput );
                var elementTypeParameter = sqlCommandParameters.AddReference( "@ElementType", elementType );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@Name", name, 127 );
                var descriptionParameter = sqlCommandParameters.AddNVarChar( "@Description", description, 0 );
                var minValueParameter = sqlCommandParameters.AddDouble( "@MinValue", minValue );
                var maxValueParameter = sqlCommandParameters.AddDouble( "@MaxValue", maxValue );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    id = (Guid)idParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool UpdateDoubleTimeseriesPropertyDefinition( Guid id, ref long rowVersion, Guid elementType, string name, string description, double minValue, double maxValue )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "DoubleTimeseriesPropertyDefinitionUpdate";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion, System.Data.ParameterDirection.InputOutput );
                var elementTypeParameter = sqlCommandParameters.AddReference( "@ElementType", elementType );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@Name", name, 127 );
                var descriptionParameter = sqlCommandParameters.AddNVarChar( "@Description", description, 0 );
                var minValueParameter = sqlCommandParameters.AddDouble( "@MinValue", minValue );
                var maxValueParameter = sqlCommandParameters.AddDouble( "@MaxValue", maxValue );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    rowVersion = (long)rowVersionParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool DeleteDoubleTimeseriesPropertyDefinition( Guid id, long rowVersion )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "DoubleTimeseriesPropertyDefinitionDelete";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool InsertGuidTimeseriesPropertyDefinition( ref Guid id, Guid elementType, string name, string description )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "GuidTimeseriesPropertyDefinitionInsert";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id, System.Data.ParameterDirection.InputOutput );
                var elementTypeParameter = sqlCommandParameters.AddReference( "@ElementType", elementType );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@Name", name, 127 );
                var descriptionParameter = sqlCommandParameters.AddNVarChar( "@Description", description, 0 );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    id = (Guid)idParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool UpdateGuidTimeseriesPropertyDefinition( Guid id, ref long rowVersion, Guid elementType, string name, string description )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "GuidTimeseriesPropertyDefinitionUpdate";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion, System.Data.ParameterDirection.InputOutput );
                var elementTypeParameter = sqlCommandParameters.AddReference( "@ElementType", elementType );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@Name", name, 127 );
                var descriptionParameter = sqlCommandParameters.AddNVarChar( "@Description", description, 0 );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    rowVersion = (long)rowVersionParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool DeleteGuidTimeseriesPropertyDefinition( Guid id, long rowVersion )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "GuidTimeseriesPropertyDefinitionDelete";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool InsertInt16TimeseriesPropertyDefinition( ref Guid id, Guid elementType, string name, string description, short minValue, short maxValue )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "Int16TimeseriesPropertyDefinitionInsert";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id, System.Data.ParameterDirection.InputOutput );
                var elementTypeParameter = sqlCommandParameters.AddReference( "@ElementType", elementType );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@Name", name, 127 );
                var descriptionParameter = sqlCommandParameters.AddNVarChar( "@Description", description, 0 );
                var minValueParameter = sqlCommandParameters.AddInt16( "@MinValue", minValue );
                var maxValueParameter = sqlCommandParameters.AddInt16( "@MaxValue", maxValue );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    id = (Guid)idParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool UpdateInt16TimeseriesPropertyDefinition( Guid id, ref long rowVersion, Guid elementType, string name, string description, short minValue, short maxValue )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "Int16TimeseriesPropertyDefinitionUpdate";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion, System.Data.ParameterDirection.InputOutput );
                var elementTypeParameter = sqlCommandParameters.AddReference( "@ElementType", elementType );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@Name", name, 127 );
                var descriptionParameter = sqlCommandParameters.AddNVarChar( "@Description", description, 0 );
                var minValueParameter = sqlCommandParameters.AddInt16( "@MinValue", minValue );
                var maxValueParameter = sqlCommandParameters.AddInt16( "@MaxValue", maxValue );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    rowVersion = (long)rowVersionParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool DeleteInt16TimeseriesPropertyDefinition( Guid id, long rowVersion )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "Int16TimeseriesPropertyDefinitionDelete";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool InsertInt32TimeseriesPropertyDefinition( ref Guid id, Guid elementType, string name, string description, int minValue, int maxValue )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "Int32TimeseriesPropertyDefinitionInsert";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id, System.Data.ParameterDirection.InputOutput );
                var elementTypeParameter = sqlCommandParameters.AddReference( "@ElementType", elementType );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@Name", name, 127 );
                var descriptionParameter = sqlCommandParameters.AddNVarChar( "@Description", description, 0 );
                var minValueParameter = sqlCommandParameters.AddInt32( "@MinValue", minValue );
                var maxValueParameter = sqlCommandParameters.AddInt32( "@MaxValue", maxValue );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    id = (Guid)idParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool UpdateInt32TimeseriesPropertyDefinition( Guid id, ref long rowVersion, Guid elementType, string name, string description, int minValue, int maxValue )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "Int32TimeseriesPropertyDefinitionUpdate";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion, System.Data.ParameterDirection.InputOutput );
                var elementTypeParameter = sqlCommandParameters.AddReference( "@ElementType", elementType );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@Name", name, 127 );
                var descriptionParameter = sqlCommandParameters.AddNVarChar( "@Description", description, 0 );
                var minValueParameter = sqlCommandParameters.AddInt32( "@MinValue", minValue );
                var maxValueParameter = sqlCommandParameters.AddInt32( "@MaxValue", maxValue );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    rowVersion = (long)rowVersionParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool DeleteInt32TimeseriesPropertyDefinition( Guid id, long rowVersion )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "Int32TimeseriesPropertyDefinitionDelete";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool InsertInt64TimeseriesPropertyDefinition( ref Guid id, Guid elementType, string name, string description, long minValue, long maxValue )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "Int64TimeseriesPropertyDefinitionInsert";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id, System.Data.ParameterDirection.InputOutput );
                var elementTypeParameter = sqlCommandParameters.AddReference( "@ElementType", elementType );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@Name", name, 127 );
                var descriptionParameter = sqlCommandParameters.AddNVarChar( "@Description", description, 0 );
                var minValueParameter = sqlCommandParameters.AddInt64( "@MinValue", minValue );
                var maxValueParameter = sqlCommandParameters.AddInt64( "@MaxValue", maxValue );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    id = (Guid)idParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool UpdateInt64TimeseriesPropertyDefinition( Guid id, ref long rowVersion, Guid elementType, string name, string description, long minValue, long maxValue )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "Int64TimeseriesPropertyDefinitionUpdate";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion, System.Data.ParameterDirection.InputOutput );
                var elementTypeParameter = sqlCommandParameters.AddReference( "@ElementType", elementType );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@Name", name, 127 );
                var descriptionParameter = sqlCommandParameters.AddNVarChar( "@Description", description, 0 );
                var minValueParameter = sqlCommandParameters.AddInt64( "@MinValue", minValue );
                var maxValueParameter = sqlCommandParameters.AddInt64( "@MaxValue", maxValue );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    rowVersion = (long)rowVersionParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool DeleteInt64TimeseriesPropertyDefinition( Guid id, long rowVersion )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "Int64TimeseriesPropertyDefinitionDelete";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool InsertReferenceTimeseriesPropertyDefinition( ref Guid id, Guid elementType, string name, string description, Guid referencedElementType )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "ReferenceTimeseriesPropertyDefinitionInsert";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id, System.Data.ParameterDirection.InputOutput );
                var elementTypeParameter = sqlCommandParameters.AddReference( "@ElementType", elementType );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@Name", name, 127 );
                var descriptionParameter = sqlCommandParameters.AddNVarChar( "@Description", description, 0 );
                var referencedElementTypeParameter = sqlCommandParameters.AddReference( "@ReferencedElementType", referencedElementType );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    id = (Guid)idParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool UpdateReferenceTimeseriesPropertyDefinition( Guid id, ref long rowVersion, Guid elementType, string name, string description, Guid referencedElementType )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "ReferenceTimeseriesPropertyDefinitionUpdate";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion, System.Data.ParameterDirection.InputOutput );
                var elementTypeParameter = sqlCommandParameters.AddReference( "@ElementType", elementType );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@Name", name, 127 );
                var descriptionParameter = sqlCommandParameters.AddNVarChar( "@Description", description, 0 );
                var referencedElementTypeParameter = sqlCommandParameters.AddReference( "@ReferencedElementType", referencedElementType );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    rowVersion = (long)rowVersionParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool DeleteReferenceTimeseriesPropertyDefinition( Guid id, long rowVersion )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "ReferenceTimeseriesPropertyDefinitionDelete";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool InsertSByteTimeseriesPropertyDefinition( ref Guid id, Guid elementType, string name, string description, sbyte minValue, sbyte maxValue )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "SByteTimeseriesPropertyDefinitionInsert";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id, System.Data.ParameterDirection.InputOutput );
                var elementTypeParameter = sqlCommandParameters.AddReference( "@ElementType", elementType );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@Name", name, 127 );
                var descriptionParameter = sqlCommandParameters.AddNVarChar( "@Description", description, 0 );
                var minValueParameter = sqlCommandParameters.AddSByte( "@MinValue", minValue );
                var maxValueParameter = sqlCommandParameters.AddSByte( "@MaxValue", maxValue );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    id = (Guid)idParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool UpdateSByteTimeseriesPropertyDefinition( Guid id, ref long rowVersion, Guid elementType, string name, string description, sbyte minValue, sbyte maxValue )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "SByteTimeseriesPropertyDefinitionUpdate";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion, System.Data.ParameterDirection.InputOutput );
                var elementTypeParameter = sqlCommandParameters.AddReference( "@ElementType", elementType );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@Name", name, 127 );
                var descriptionParameter = sqlCommandParameters.AddNVarChar( "@Description", description, 0 );
                var minValueParameter = sqlCommandParameters.AddSByte( "@MinValue", minValue );
                var maxValueParameter = sqlCommandParameters.AddSByte( "@MaxValue", maxValue );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    rowVersion = (long)rowVersionParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool DeleteSByteTimeseriesPropertyDefinition( Guid id, long rowVersion )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "SByteTimeseriesPropertyDefinitionDelete";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool InsertSingleTimeseriesPropertyDefinition( ref Guid id, Guid elementType, string name, string description, float minValue, float maxValue )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "SingleTimeseriesPropertyDefinitionInsert";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id, System.Data.ParameterDirection.InputOutput );
                var elementTypeParameter = sqlCommandParameters.AddReference( "@ElementType", elementType );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@Name", name, 127 );
                var descriptionParameter = sqlCommandParameters.AddNVarChar( "@Description", description, 0 );
                var minValueParameter = sqlCommandParameters.AddSingle( "@MinValue", minValue );
                var maxValueParameter = sqlCommandParameters.AddSingle( "@MaxValue", maxValue );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    id = (Guid)idParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool UpdateSingleTimeseriesPropertyDefinition( Guid id, ref long rowVersion, Guid elementType, string name, string description, float minValue, float maxValue )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "SingleTimeseriesPropertyDefinitionUpdate";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion, System.Data.ParameterDirection.InputOutput );
                var elementTypeParameter = sqlCommandParameters.AddReference( "@ElementType", elementType );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@Name", name, 127 );
                var descriptionParameter = sqlCommandParameters.AddNVarChar( "@Description", description, 0 );
                var minValueParameter = sqlCommandParameters.AddSingle( "@MinValue", minValue );
                var maxValueParameter = sqlCommandParameters.AddSingle( "@MaxValue", maxValue );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    rowVersion = (long)rowVersionParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool DeleteSingleTimeseriesPropertyDefinition( Guid id, long rowVersion )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "SingleTimeseriesPropertyDefinitionDelete";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool InsertStringTimeseriesPropertyDefinition( ref Guid id, Guid elementType, string name, string description, string pattern )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "StringTimeseriesPropertyDefinitionInsert";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id, System.Data.ParameterDirection.InputOutput );
                var elementTypeParameter = sqlCommandParameters.AddReference( "@ElementType", elementType );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@Name", name, 127 );
                var descriptionParameter = sqlCommandParameters.AddNVarChar( "@Description", description, 0 );
                var patternParameter = sqlCommandParameters.AddNVarChar( "@Pattern", pattern, 127 );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    id = (Guid)idParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool UpdateStringTimeseriesPropertyDefinition( Guid id, ref long rowVersion, Guid elementType, string name, string description, string pattern )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "StringTimeseriesPropertyDefinitionUpdate";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion, System.Data.ParameterDirection.InputOutput );
                var elementTypeParameter = sqlCommandParameters.AddReference( "@ElementType", elementType );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@Name", name, 127 );
                var descriptionParameter = sqlCommandParameters.AddNVarChar( "@Description", description, 0 );
                var patternParameter = sqlCommandParameters.AddNVarChar( "@Pattern", pattern, 127 );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    rowVersion = (long)rowVersionParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool DeleteStringTimeseriesPropertyDefinition( Guid id, long rowVersion )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "StringTimeseriesPropertyDefinitionDelete";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool InsertTimeSpanTimeseriesPropertyDefinition( ref Guid id, Guid elementType, string name, string description, TimeSpan minValue, TimeSpan maxValue )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "TimeSpanTimeseriesPropertyDefinitionInsert";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id, System.Data.ParameterDirection.InputOutput );
                var elementTypeParameter = sqlCommandParameters.AddReference( "@ElementType", elementType );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@Name", name, 127 );
                var descriptionParameter = sqlCommandParameters.AddNVarChar( "@Description", description, 0 );
                var minValueParameter = sqlCommandParameters.AddTimeSpanAsInt64( "@MinValue", minValue );
                var maxValueParameter = sqlCommandParameters.AddTimeSpanAsInt64( "@MaxValue", maxValue );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    id = (Guid)idParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool UpdateTimeSpanTimeseriesPropertyDefinition( Guid id, ref long rowVersion, Guid elementType, string name, string description, TimeSpan minValue, TimeSpan maxValue )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "TimeSpanTimeseriesPropertyDefinitionUpdate";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion, System.Data.ParameterDirection.InputOutput );
                var elementTypeParameter = sqlCommandParameters.AddReference( "@ElementType", elementType );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@Name", name, 127 );
                var descriptionParameter = sqlCommandParameters.AddNVarChar( "@Description", description, 0 );
                var minValueParameter = sqlCommandParameters.AddTimeSpanAsInt64( "@MinValue", minValue );
                var maxValueParameter = sqlCommandParameters.AddTimeSpanAsInt64( "@MaxValue", maxValue );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    rowVersion = (long)rowVersionParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool DeleteTimeSpanTimeseriesPropertyDefinition( Guid id, long rowVersion )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "TimeSpanTimeseriesPropertyDefinitionDelete";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool InsertUInt16TimeseriesPropertyDefinition( ref Guid id, Guid elementType, string name, string description, ushort minValue, ushort maxValue )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "UInt16TimeseriesPropertyDefinitionInsert";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id, System.Data.ParameterDirection.InputOutput );
                var elementTypeParameter = sqlCommandParameters.AddReference( "@ElementType", elementType );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@Name", name, 127 );
                var descriptionParameter = sqlCommandParameters.AddNVarChar( "@Description", description, 0 );
                var minValueParameter = sqlCommandParameters.AddUInt16( "@MinValue", minValue );
                var maxValueParameter = sqlCommandParameters.AddUInt16( "@MaxValue", maxValue );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    id = (Guid)idParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool UpdateUInt16TimeseriesPropertyDefinition( Guid id, ref long rowVersion, Guid elementType, string name, string description, ushort minValue, ushort maxValue )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "UInt16TimeseriesPropertyDefinitionUpdate";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion, System.Data.ParameterDirection.InputOutput );
                var elementTypeParameter = sqlCommandParameters.AddReference( "@ElementType", elementType );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@Name", name, 127 );
                var descriptionParameter = sqlCommandParameters.AddNVarChar( "@Description", description, 0 );
                var minValueParameter = sqlCommandParameters.AddUInt16( "@MinValue", minValue );
                var maxValueParameter = sqlCommandParameters.AddUInt16( "@MaxValue", maxValue );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    rowVersion = (long)rowVersionParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool DeleteUInt16TimeseriesPropertyDefinition( Guid id, long rowVersion )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "UInt16TimeseriesPropertyDefinitionDelete";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool InsertUInt32TimeseriesPropertyDefinition( ref Guid id, Guid elementType, string name, string description, uint minValue, uint maxValue )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "UInt32TimeseriesPropertyDefinitionInsert";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id, System.Data.ParameterDirection.InputOutput );
                var elementTypeParameter = sqlCommandParameters.AddReference( "@ElementType", elementType );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@Name", name, 127 );
                var descriptionParameter = sqlCommandParameters.AddNVarChar( "@Description", description, 0 );
                var minValueParameter = sqlCommandParameters.AddUInt32( "@MinValue", minValue );
                var maxValueParameter = sqlCommandParameters.AddUInt32( "@MaxValue", maxValue );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    id = (Guid)idParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool UpdateUInt32TimeseriesPropertyDefinition( Guid id, ref long rowVersion, Guid elementType, string name, string description, uint minValue, uint maxValue )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "UInt32TimeseriesPropertyDefinitionUpdate";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion, System.Data.ParameterDirection.InputOutput );
                var elementTypeParameter = sqlCommandParameters.AddReference( "@ElementType", elementType );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@Name", name, 127 );
                var descriptionParameter = sqlCommandParameters.AddNVarChar( "@Description", description, 0 );
                var minValueParameter = sqlCommandParameters.AddUInt32( "@MinValue", minValue );
                var maxValueParameter = sqlCommandParameters.AddUInt32( "@MaxValue", maxValue );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    rowVersion = (long)rowVersionParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool DeleteUInt32TimeseriesPropertyDefinition( Guid id, long rowVersion )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "UInt32TimeseriesPropertyDefinitionDelete";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool InsertUInt64TimeseriesPropertyDefinition( ref Guid id, Guid elementType, string name, string description, long minValue, long maxValue )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "UInt64TimeseriesPropertyDefinitionInsert";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id, System.Data.ParameterDirection.InputOutput );
                var elementTypeParameter = sqlCommandParameters.AddReference( "@ElementType", elementType );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@Name", name, 127 );
                var descriptionParameter = sqlCommandParameters.AddNVarChar( "@Description", description, 0 );
                var minValueParameter = sqlCommandParameters.AddInt64( "@MinValue", minValue );
                var maxValueParameter = sqlCommandParameters.AddInt64( "@MaxValue", maxValue );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    id = (Guid)idParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool UpdateUInt64TimeseriesPropertyDefinition( Guid id, ref long rowVersion, Guid elementType, string name, string description, long minValue, long maxValue )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "UInt64TimeseriesPropertyDefinitionUpdate";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion, System.Data.ParameterDirection.InputOutput );
                var elementTypeParameter = sqlCommandParameters.AddReference( "@ElementType", elementType );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@Name", name, 127 );
                var descriptionParameter = sqlCommandParameters.AddNVarChar( "@Description", description, 0 );
                var minValueParameter = sqlCommandParameters.AddInt64( "@MinValue", minValue );
                var maxValueParameter = sqlCommandParameters.AddInt64( "@MaxValue", maxValue );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    rowVersion = (long)rowVersionParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool DeleteUInt64TimeseriesPropertyDefinition( Guid id, long rowVersion )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "UInt64TimeseriesPropertyDefinitionDelete";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool InsertTimeSpanPropertyDefinition( ref Guid id, Guid elementType, string name, string description, TimeSpan defaultValue, TimeSpan minValue, TimeSpan maxValue )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "TimeSpanPropertyDefinitionInsert";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id, System.Data.ParameterDirection.InputOutput );
                var elementTypeParameter = sqlCommandParameters.AddReference( "@ElementType", elementType );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@Name", name, 127 );
                var descriptionParameter = sqlCommandParameters.AddNVarChar( "@Description", description, 0 );
                var defaultValueParameter = sqlCommandParameters.AddTimeSpanAsInt64( "@DefaultValue", defaultValue );
                var minValueParameter = sqlCommandParameters.AddTimeSpanAsInt64( "@MinValue", minValue );
                var maxValueParameter = sqlCommandParameters.AddTimeSpanAsInt64( "@MaxValue", maxValue );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    id = (Guid)idParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool UpdateTimeSpanPropertyDefinition( Guid id, ref long rowVersion, Guid elementType, string name, string description, TimeSpan defaultValue, TimeSpan minValue, TimeSpan maxValue )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "TimeSpanPropertyDefinitionUpdate";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion, System.Data.ParameterDirection.InputOutput );
                var elementTypeParameter = sqlCommandParameters.AddReference( "@ElementType", elementType );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@Name", name, 127 );
                var descriptionParameter = sqlCommandParameters.AddNVarChar( "@Description", description, 0 );
                var defaultValueParameter = sqlCommandParameters.AddTimeSpanAsInt64( "@DefaultValue", defaultValue );
                var minValueParameter = sqlCommandParameters.AddTimeSpanAsInt64( "@MinValue", minValue );
                var maxValueParameter = sqlCommandParameters.AddTimeSpanAsInt64( "@MaxValue", maxValue );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    rowVersion = (long)rowVersionParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool DeleteTimeSpanPropertyDefinition( Guid id, long rowVersion )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "TimeSpanPropertyDefinitionDelete";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool InsertUInt16PropertyDefinition( ref Guid id, Guid elementType, string name, string description, ushort defaultValue, ushort minValue, ushort maxValue )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "UInt16PropertyDefinitionInsert";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id, System.Data.ParameterDirection.InputOutput );
                var elementTypeParameter = sqlCommandParameters.AddReference( "@ElementType", elementType );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@Name", name, 127 );
                var descriptionParameter = sqlCommandParameters.AddNVarChar( "@Description", description, 0 );
                var defaultValueParameter = sqlCommandParameters.AddUInt16( "@DefaultValue", defaultValue );
                var minValueParameter = sqlCommandParameters.AddUInt16( "@MinValue", minValue );
                var maxValueParameter = sqlCommandParameters.AddUInt16( "@MaxValue", maxValue );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    id = (Guid)idParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool UpdateUInt16PropertyDefinition( Guid id, ref long rowVersion, Guid elementType, string name, string description, ushort defaultValue, ushort minValue, ushort maxValue )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "UInt16PropertyDefinitionUpdate";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion, System.Data.ParameterDirection.InputOutput );
                var elementTypeParameter = sqlCommandParameters.AddReference( "@ElementType", elementType );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@Name", name, 127 );
                var descriptionParameter = sqlCommandParameters.AddNVarChar( "@Description", description, 0 );
                var defaultValueParameter = sqlCommandParameters.AddUInt16( "@DefaultValue", defaultValue );
                var minValueParameter = sqlCommandParameters.AddUInt16( "@MinValue", minValue );
                var maxValueParameter = sqlCommandParameters.AddUInt16( "@MaxValue", maxValue );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    rowVersion = (long)rowVersionParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool DeleteUInt16PropertyDefinition( Guid id, long rowVersion )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "UInt16PropertyDefinitionDelete";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool InsertUInt32PropertyDefinition( ref Guid id, Guid elementType, string name, string description, uint defaultValue, uint minValue, uint maxValue )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "UInt32PropertyDefinitionInsert";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id, System.Data.ParameterDirection.InputOutput );
                var elementTypeParameter = sqlCommandParameters.AddReference( "@ElementType", elementType );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@Name", name, 127 );
                var descriptionParameter = sqlCommandParameters.AddNVarChar( "@Description", description, 0 );
                var defaultValueParameter = sqlCommandParameters.AddUInt32( "@DefaultValue", defaultValue );
                var minValueParameter = sqlCommandParameters.AddUInt32( "@MinValue", minValue );
                var maxValueParameter = sqlCommandParameters.AddUInt32( "@MaxValue", maxValue );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    id = (Guid)idParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool UpdateUInt32PropertyDefinition( Guid id, ref long rowVersion, Guid elementType, string name, string description, uint defaultValue, uint minValue, uint maxValue )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "UInt32PropertyDefinitionUpdate";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion, System.Data.ParameterDirection.InputOutput );
                var elementTypeParameter = sqlCommandParameters.AddReference( "@ElementType", elementType );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@Name", name, 127 );
                var descriptionParameter = sqlCommandParameters.AddNVarChar( "@Description", description, 0 );
                var defaultValueParameter = sqlCommandParameters.AddUInt32( "@DefaultValue", defaultValue );
                var minValueParameter = sqlCommandParameters.AddUInt32( "@MinValue", minValue );
                var maxValueParameter = sqlCommandParameters.AddUInt32( "@MaxValue", maxValue );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    rowVersion = (long)rowVersionParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool DeleteUInt32PropertyDefinition( Guid id, long rowVersion )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "UInt32PropertyDefinitionDelete";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool InsertUInt64PropertyDefinition( ref Guid id, Guid elementType, string name, string description, long defaultValue, long minValue, long maxValue )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "UInt64PropertyDefinitionInsert";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id, System.Data.ParameterDirection.InputOutput );
                var elementTypeParameter = sqlCommandParameters.AddReference( "@ElementType", elementType );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@Name", name, 127 );
                var descriptionParameter = sqlCommandParameters.AddNVarChar( "@Description", description, 0 );
                var defaultValueParameter = sqlCommandParameters.AddInt64( "@DefaultValue", defaultValue );
                var minValueParameter = sqlCommandParameters.AddInt64( "@MinValue", minValue );
                var maxValueParameter = sqlCommandParameters.AddInt64( "@MaxValue", maxValue );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    id = (Guid)idParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool UpdateUInt64PropertyDefinition( Guid id, ref long rowVersion, Guid elementType, string name, string description, long defaultValue, long minValue, long maxValue )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "UInt64PropertyDefinitionUpdate";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion, System.Data.ParameterDirection.InputOutput );
                var elementTypeParameter = sqlCommandParameters.AddReference( "@ElementType", elementType );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@Name", name, 127 );
                var descriptionParameter = sqlCommandParameters.AddNVarChar( "@Description", description, 0 );
                var defaultValueParameter = sqlCommandParameters.AddInt64( "@DefaultValue", defaultValue );
                var minValueParameter = sqlCommandParameters.AddInt64( "@MinValue", minValue );
                var maxValueParameter = sqlCommandParameters.AddInt64( "@MaxValue", maxValue );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    rowVersion = (long)rowVersionParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool DeleteUInt64PropertyDefinition( Guid id, long rowVersion )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "UInt64PropertyDefinitionDelete";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool InsertRadarAlarmStatus( ref Guid id, Guid radar, DateTime timestamp, Types.AlarmState type )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "RadarAlarmStatusInsert";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id, System.Data.ParameterDirection.InputOutput );
                var radarParameter = sqlCommandParameters.AddReference( "@Radar", radar );
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@Timestamp", timestamp );
                var typeParameter = sqlCommandParameters.AddEnum( "@Type", type );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    id = (Guid)idParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool UpdateRadarAlarmStatus( Guid id, ref long rowVersion, Guid radar, DateTime timestamp, Types.AlarmState type )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "RadarAlarmStatusUpdate";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion, System.Data.ParameterDirection.InputOutput );
                var radarParameter = sqlCommandParameters.AddReference( "@Radar", radar );
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@Timestamp", timestamp );
                var typeParameter = sqlCommandParameters.AddEnum( "@Type", type );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    rowVersion = (long)rowVersionParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool DeleteRadarAlarmStatus( Guid id, long rowVersion )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "RadarAlarmStatusDelete";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool InsertRadarCommand( ref Guid id, Guid radar, DateTime timestamp, Types.DeviceCommandSourceType deviceCommandSourceType, Guid deviceCommandSourceId, Guid reply )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "RadarCommandInsert";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id, System.Data.ParameterDirection.InputOutput );
                var radarParameter = sqlCommandParameters.AddReference( "@Radar", radar );
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@Timestamp", timestamp );
                var deviceCommandSourceTypeParameter = sqlCommandParameters.AddEnum( "@DeviceCommandSourceType", deviceCommandSourceType );
                var deviceCommandSourceIdParameter = sqlCommandParameters.AddGuid( "@DeviceCommandSourceId", deviceCommandSourceId );
                var replyParameter = sqlCommandParameters.AddReference( "@Reply", reply );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    id = (Guid)idParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool UpdateRadarCommand( Guid id, ref long rowVersion, Guid radar, DateTime timestamp, Types.DeviceCommandSourceType deviceCommandSourceType, Guid deviceCommandSourceId, Guid reply )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "RadarCommandUpdate";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion, System.Data.ParameterDirection.InputOutput );
                var radarParameter = sqlCommandParameters.AddReference( "@Radar", radar );
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@Timestamp", timestamp );
                var deviceCommandSourceTypeParameter = sqlCommandParameters.AddEnum( "@DeviceCommandSourceType", deviceCommandSourceType );
                var deviceCommandSourceIdParameter = sqlCommandParameters.AddGuid( "@DeviceCommandSourceId", deviceCommandSourceId );
                var replyParameter = sqlCommandParameters.AddReference( "@Reply", reply );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    rowVersion = (long)rowVersionParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool DeleteRadarCommand( Guid id, long rowVersion )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "RadarCommandDelete";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool InsertRadarCommandGetStatus( ref Guid id, Guid radar, DateTime timestamp, Types.DeviceCommandSourceType deviceCommandSourceType, Guid deviceCommandSourceId, Guid reply )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "RadarCommandGetStatusInsert";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id, System.Data.ParameterDirection.InputOutput );
                var radarParameter = sqlCommandParameters.AddReference( "@Radar", radar );
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@Timestamp", timestamp );
                var deviceCommandSourceTypeParameter = sqlCommandParameters.AddEnum( "@DeviceCommandSourceType", deviceCommandSourceType );
                var deviceCommandSourceIdParameter = sqlCommandParameters.AddGuid( "@DeviceCommandSourceId", deviceCommandSourceId );
                var replyParameter = sqlCommandParameters.AddReference( "@Reply", reply );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    id = (Guid)idParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool UpdateRadarCommandGetStatus( Guid id, ref long rowVersion, Guid radar, DateTime timestamp, Types.DeviceCommandSourceType deviceCommandSourceType, Guid deviceCommandSourceId, Guid reply )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "RadarCommandGetStatusUpdate";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion, System.Data.ParameterDirection.InputOutput );
                var radarParameter = sqlCommandParameters.AddReference( "@Radar", radar );
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@Timestamp", timestamp );
                var deviceCommandSourceTypeParameter = sqlCommandParameters.AddEnum( "@DeviceCommandSourceType", deviceCommandSourceType );
                var deviceCommandSourceIdParameter = sqlCommandParameters.AddGuid( "@DeviceCommandSourceId", deviceCommandSourceId );
                var replyParameter = sqlCommandParameters.AddReference( "@Reply", reply );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    rowVersion = (long)rowVersionParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool DeleteRadarCommandGetStatus( Guid id, long rowVersion )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "RadarCommandGetStatusDelete";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool InsertRadarCommandReply( ref Guid id, Guid radar, DateTime timestamp, Guid command, Types.DeviceCommandReplyStatus status, string message )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "RadarCommandReplyInsert";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id, System.Data.ParameterDirection.InputOutput );
                var radarParameter = sqlCommandParameters.AddReference( "@Radar", radar );
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@Timestamp", timestamp );
                var commandParameter = sqlCommandParameters.AddReference( "@Command", command );
                var statusParameter = sqlCommandParameters.AddEnum( "@Status", status );
                var messageParameter = sqlCommandParameters.AddNVarChar( "@Message", message, 0 );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    id = (Guid)idParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool UpdateRadarCommandReply( Guid id, ref long rowVersion, Guid radar, DateTime timestamp, Guid command, Types.DeviceCommandReplyStatus status, string message )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "RadarCommandReplyUpdate";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion, System.Data.ParameterDirection.InputOutput );
                var radarParameter = sqlCommandParameters.AddReference( "@Radar", radar );
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@Timestamp", timestamp );
                var commandParameter = sqlCommandParameters.AddReference( "@Command", command );
                var statusParameter = sqlCommandParameters.AddEnum( "@Status", status );
                var messageParameter = sqlCommandParameters.AddNVarChar( "@Message", message, 0 );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    rowVersion = (long)rowVersionParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool DeleteRadarCommandReply( Guid id, long rowVersion )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "RadarCommandReplyDelete";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool InsertRadarCommandReplyGetStatus( ref Guid id, Guid radar, DateTime timestamp, Guid command, Types.DeviceCommandReplyStatus status, string message, int azimuthCount, int triggerCount, TimeSpan rotationCount, Types.RadarPulse pulse, bool tx )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "RadarCommandReplyGetStatusInsert";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id, System.Data.ParameterDirection.InputOutput );
                var radarParameter = sqlCommandParameters.AddReference( "@Radar", radar );
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@Timestamp", timestamp );
                var commandParameter = sqlCommandParameters.AddReference( "@Command", command );
                var statusParameter = sqlCommandParameters.AddEnum( "@Status", status );
                var messageParameter = sqlCommandParameters.AddNVarChar( "@Message", message, 0 );
                var azimuthCountParameter = sqlCommandParameters.AddInt32( "@AzimuthCount", azimuthCount );
                var triggerCountParameter = sqlCommandParameters.AddInt32( "@TriggerCount", triggerCount );
                var rotationCountParameter = sqlCommandParameters.AddTimeSpanAsInt64( "@RotationCount", rotationCount );
                var pulseParameter = sqlCommandParameters.AddEnum( "@Pulse", pulse );
                var txParameter = sqlCommandParameters.AddBoolean( "@Tx", tx );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    id = (Guid)idParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool UpdateRadarCommandReplyGetStatus( Guid id, ref long rowVersion, Guid radar, DateTime timestamp, Guid command, Types.DeviceCommandReplyStatus status, string message, int azimuthCount, int triggerCount, TimeSpan rotationCount, Types.RadarPulse pulse, bool tx )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "RadarCommandReplyGetStatusUpdate";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion, System.Data.ParameterDirection.InputOutput );
                var radarParameter = sqlCommandParameters.AddReference( "@Radar", radar );
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@Timestamp", timestamp );
                var commandParameter = sqlCommandParameters.AddReference( "@Command", command );
                var statusParameter = sqlCommandParameters.AddEnum( "@Status", status );
                var messageParameter = sqlCommandParameters.AddNVarChar( "@Message", message, 0 );
                var azimuthCountParameter = sqlCommandParameters.AddInt32( "@AzimuthCount", azimuthCount );
                var triggerCountParameter = sqlCommandParameters.AddInt32( "@TriggerCount", triggerCount );
                var rotationCountParameter = sqlCommandParameters.AddTimeSpanAsInt64( "@RotationCount", rotationCount );
                var pulseParameter = sqlCommandParameters.AddEnum( "@Pulse", pulse );
                var txParameter = sqlCommandParameters.AddBoolean( "@Tx", tx );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    rowVersion = (long)rowVersionParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool DeleteRadarCommandReplyGetStatus( Guid id, long rowVersion )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "RadarCommandReplyGetStatusDelete";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool InsertRadarConfiguration( ref Guid id, Guid radar, DateTime timestamp, int radarProtocolVersion, string radarIPAddress, int radarPort, int radarConfigurationPort, TimeSpan skipMagicTimeout, TimeSpan readTimeout, TimeSpan synchronizationInterval, int targetsRefreshRate, int range, int sectorCount, int sectorOffset, uint imageColor, uint? imageSubstitutionColor, uint transparentColor, double imageScaleFactorX, double imageOffsetX, double imageScaleFactorY, double imageOffsetY, Types.RadarImageType radarImageType, uint trackColor, uint vectorColor, bool enableNmea, string nmeaReceiverIPAddress, int nmeaReceiverPort, string nmeaReceiverSourceId )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "RadarConfigurationInsert";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id, System.Data.ParameterDirection.InputOutput );
                var radarParameter = sqlCommandParameters.AddReference( "@Radar", radar );
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@Timestamp", timestamp );
                var radarProtocolVersionParameter = sqlCommandParameters.AddInt32( "@RadarProtocolVersion", radarProtocolVersion );
                var radarIPAddressParameter = sqlCommandParameters.AddNVarChar( "@RadarIPAddress", radarIPAddress, 127 );
                var radarPortParameter = sqlCommandParameters.AddInt32( "@RadarPort", radarPort );
                var radarConfigurationPortParameter = sqlCommandParameters.AddInt32( "@RadarConfigurationPort", radarConfigurationPort );
                var skipMagicTimeoutParameter = sqlCommandParameters.AddTimeSpanAsInt64( "@SkipMagicTimeout", skipMagicTimeout );
                var readTimeoutParameter = sqlCommandParameters.AddTimeSpanAsInt64( "@ReadTimeout", readTimeout );
                var synchronizationIntervalParameter = sqlCommandParameters.AddTimeSpanAsInt64( "@SynchronizationInterval", synchronizationInterval );
                var targetsRefreshRateParameter = sqlCommandParameters.AddInt32( "@TargetsRefreshRate", targetsRefreshRate );
                var rangeParameter = sqlCommandParameters.AddInt32( "@Range", range );
                var sectorCountParameter = sqlCommandParameters.AddInt32( "@SectorCount", sectorCount );
                var sectorOffsetParameter = sqlCommandParameters.AddInt32( "@SectorOffset", sectorOffset );
                var imageColorParameter = sqlCommandParameters.AddUInt32( "@ImageColor", imageColor );
                var imageSubstitutionColorParameter = sqlCommandParameters.AddUInt32( "@ImageSubstitutionColor", imageSubstitutionColor );
                var transparentColorParameter = sqlCommandParameters.AddUInt32( "@TransparentColor", transparentColor );
                var imageScaleFactorXParameter = sqlCommandParameters.AddDouble( "@ImageScaleFactorX", imageScaleFactorX );
                var imageOffsetXParameter = sqlCommandParameters.AddDouble( "@ImageOffsetX", imageOffsetX );
                var imageScaleFactorYParameter = sqlCommandParameters.AddDouble( "@ImageScaleFactorY", imageScaleFactorY );
                var imageOffsetYParameter = sqlCommandParameters.AddDouble( "@ImageOffsetY", imageOffsetY );
                var radarImageTypeParameter = sqlCommandParameters.AddEnum( "@RadarImageType", radarImageType );
                var trackColorParameter = sqlCommandParameters.AddUInt32( "@TrackColor", trackColor );
                var vectorColorParameter = sqlCommandParameters.AddUInt32( "@VectorColor", vectorColor );
                var enableNmeaParameter = sqlCommandParameters.AddBoolean( "@EnableNmea", enableNmea );
                var nmeaReceiverIPAddressParameter = sqlCommandParameters.AddNVarChar( "@NmeaReceiverIPAddress", nmeaReceiverIPAddress, 127 );
                var nmeaReceiverPortParameter = sqlCommandParameters.AddInt32( "@NmeaReceiverPort", nmeaReceiverPort );
                var nmeaReceiverSourceIdParameter = sqlCommandParameters.AddNVarChar( "@NmeaReceiverSourceId", nmeaReceiverSourceId, 127 );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    id = (Guid)idParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool UpdateRadarConfiguration( Guid id, ref long rowVersion, Guid radar, DateTime timestamp, int radarProtocolVersion, string radarIPAddress, int radarPort, int radarConfigurationPort, TimeSpan skipMagicTimeout, TimeSpan readTimeout, TimeSpan synchronizationInterval, int targetsRefreshRate, int range, int sectorCount, int sectorOffset, uint imageColor, uint? imageSubstitutionColor, uint transparentColor, double imageScaleFactorX, double imageOffsetX, double imageScaleFactorY, double imageOffsetY, Types.RadarImageType radarImageType, uint trackColor, uint vectorColor, bool enableNmea, string nmeaReceiverIPAddress, int nmeaReceiverPort, string nmeaReceiverSourceId )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "RadarConfigurationUpdate";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion, System.Data.ParameterDirection.InputOutput );
                var radarParameter = sqlCommandParameters.AddReference( "@Radar", radar );
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@Timestamp", timestamp );
                var radarProtocolVersionParameter = sqlCommandParameters.AddInt32( "@RadarProtocolVersion", radarProtocolVersion );
                var radarIPAddressParameter = sqlCommandParameters.AddNVarChar( "@RadarIPAddress", radarIPAddress, 127 );
                var radarPortParameter = sqlCommandParameters.AddInt32( "@RadarPort", radarPort );
                var radarConfigurationPortParameter = sqlCommandParameters.AddInt32( "@RadarConfigurationPort", radarConfigurationPort );
                var skipMagicTimeoutParameter = sqlCommandParameters.AddTimeSpanAsInt64( "@SkipMagicTimeout", skipMagicTimeout );
                var readTimeoutParameter = sqlCommandParameters.AddTimeSpanAsInt64( "@ReadTimeout", readTimeout );
                var synchronizationIntervalParameter = sqlCommandParameters.AddTimeSpanAsInt64( "@SynchronizationInterval", synchronizationInterval );
                var targetsRefreshRateParameter = sqlCommandParameters.AddInt32( "@TargetsRefreshRate", targetsRefreshRate );
                var rangeParameter = sqlCommandParameters.AddInt32( "@Range", range );
                var sectorCountParameter = sqlCommandParameters.AddInt32( "@SectorCount", sectorCount );
                var sectorOffsetParameter = sqlCommandParameters.AddInt32( "@SectorOffset", sectorOffset );
                var imageColorParameter = sqlCommandParameters.AddUInt32( "@ImageColor", imageColor );
                var imageSubstitutionColorParameter = sqlCommandParameters.AddUInt32( "@ImageSubstitutionColor", imageSubstitutionColor );
                var transparentColorParameter = sqlCommandParameters.AddUInt32( "@TransparentColor", transparentColor );
                var imageScaleFactorXParameter = sqlCommandParameters.AddDouble( "@ImageScaleFactorX", imageScaleFactorX );
                var imageOffsetXParameter = sqlCommandParameters.AddDouble( "@ImageOffsetX", imageOffsetX );
                var imageScaleFactorYParameter = sqlCommandParameters.AddDouble( "@ImageScaleFactorY", imageScaleFactorY );
                var imageOffsetYParameter = sqlCommandParameters.AddDouble( "@ImageOffsetY", imageOffsetY );
                var radarImageTypeParameter = sqlCommandParameters.AddEnum( "@RadarImageType", radarImageType );
                var trackColorParameter = sqlCommandParameters.AddUInt32( "@TrackColor", trackColor );
                var vectorColorParameter = sqlCommandParameters.AddUInt32( "@VectorColor", vectorColor );
                var enableNmeaParameter = sqlCommandParameters.AddBoolean( "@EnableNmea", enableNmea );
                var nmeaReceiverIPAddressParameter = sqlCommandParameters.AddNVarChar( "@NmeaReceiverIPAddress", nmeaReceiverIPAddress, 127 );
                var nmeaReceiverPortParameter = sqlCommandParameters.AddInt32( "@NmeaReceiverPort", nmeaReceiverPort );
                var nmeaReceiverSourceIdParameter = sqlCommandParameters.AddNVarChar( "@NmeaReceiverSourceId", nmeaReceiverSourceId, 127 );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    rowVersion = (long)rowVersionParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool DeleteRadarConfiguration( Guid id, long rowVersion )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "RadarConfigurationDelete";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool InsertRadarImage( ref Guid id, Guid radar, DateTime timestamp, uint depth, int resolution, int range, byte[] image )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "RadarImageInsert";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id, System.Data.ParameterDirection.InputOutput );
                var radarParameter = sqlCommandParameters.AddReference( "@Radar", radar );
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@Timestamp", timestamp );
                var depthParameter = sqlCommandParameters.AddUInt32( "@Depth", depth );
                var resolutionParameter = sqlCommandParameters.AddInt32( "@Resolution", resolution );
                var rangeParameter = sqlCommandParameters.AddInt32( "@Range", range );
                var imageParameter = sqlCommandParameters.AddBinary( "@Image", image, 0 );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    id = (Guid)idParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool UpdateRadarImage( Guid id, ref long rowVersion, Guid radar, DateTime timestamp, uint depth, int resolution, int range, byte[] image )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "RadarImageUpdate";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion, System.Data.ParameterDirection.InputOutput );
                var radarParameter = sqlCommandParameters.AddReference( "@Radar", radar );
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@Timestamp", timestamp );
                var depthParameter = sqlCommandParameters.AddUInt32( "@Depth", depth );
                var resolutionParameter = sqlCommandParameters.AddInt32( "@Resolution", resolution );
                var rangeParameter = sqlCommandParameters.AddInt32( "@Range", range );
                var imageParameter = sqlCommandParameters.AddBinary( "@Image", image, 0 );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    rowVersion = (long)rowVersionParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool DeleteRadarImage( Guid id, long rowVersion )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "RadarImageDelete";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool InsertRadarRawTrackTable( ref Guid id, Guid radar, DateTime timestamp, int count, byte[] table )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "RadarRawTrackTableInsert";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id, System.Data.ParameterDirection.InputOutput );
                var radarParameter = sqlCommandParameters.AddReference( "@Radar", radar );
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@Timestamp", timestamp );
                var countParameter = sqlCommandParameters.AddInt32( "@Count", count );
                var tableParameter = sqlCommandParameters.AddBinary( "@Table", table, 0 );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    id = (Guid)idParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool UpdateRadarRawTrackTable( Guid id, ref long rowVersion, Guid radar, DateTime timestamp, int count, byte[] table )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "RadarRawTrackTableUpdate";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion, System.Data.ParameterDirection.InputOutput );
                var radarParameter = sqlCommandParameters.AddReference( "@Radar", radar );
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@Timestamp", timestamp );
                var countParameter = sqlCommandParameters.AddInt32( "@Count", count );
                var tableParameter = sqlCommandParameters.AddBinary( "@Table", table, 0 );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    rowVersion = (long)rowVersionParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool DeleteRadarRawTrackTable( Guid id, long rowVersion )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "RadarRawTrackTableDelete";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool InsertRadarStatus( ref Guid id, Guid radar, DateTime timestamp, int azimuthCount, int triggerCount, TimeSpan rotationTime, Types.RadarPulse pulse, bool tx, bool tracking )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "RadarStatusInsert";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id, System.Data.ParameterDirection.InputOutput );
                var radarParameter = sqlCommandParameters.AddReference( "@Radar", radar );
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@Timestamp", timestamp );
                var azimuthCountParameter = sqlCommandParameters.AddInt32( "@AzimuthCount", azimuthCount );
                var triggerCountParameter = sqlCommandParameters.AddInt32( "@TriggerCount", triggerCount );
                var rotationTimeParameter = sqlCommandParameters.AddTimeSpanAsInt64( "@RotationTime", rotationTime );
                var pulseParameter = sqlCommandParameters.AddEnum( "@Pulse", pulse );
                var txParameter = sqlCommandParameters.AddBoolean( "@Tx", tx );
                var trackingParameter = sqlCommandParameters.AddBoolean( "@Tracking", tracking );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    id = (Guid)idParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool UpdateRadarStatus( Guid id, ref long rowVersion, Guid radar, DateTime timestamp, int azimuthCount, int triggerCount, TimeSpan rotationTime, Types.RadarPulse pulse, bool tx, bool tracking )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "RadarStatusUpdate";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion, System.Data.ParameterDirection.InputOutput );
                var radarParameter = sqlCommandParameters.AddReference( "@Radar", radar );
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@Timestamp", timestamp );
                var azimuthCountParameter = sqlCommandParameters.AddInt32( "@AzimuthCount", azimuthCount );
                var triggerCountParameter = sqlCommandParameters.AddInt32( "@TriggerCount", triggerCount );
                var rotationTimeParameter = sqlCommandParameters.AddTimeSpanAsInt64( "@RotationTime", rotationTime );
                var pulseParameter = sqlCommandParameters.AddEnum( "@Pulse", pulse );
                var txParameter = sqlCommandParameters.AddBoolean( "@Tx", tx );
                var trackingParameter = sqlCommandParameters.AddBoolean( "@Tracking", tracking );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    rowVersion = (long)rowVersionParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool DeleteRadarStatus( Guid id, long rowVersion )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "RadarStatusDelete";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool InsertRadioCommand( ref Guid id, Guid radio, DateTime timestamp, Types.DeviceCommandSourceType deviceCommandSourceType, Guid deviceCommandSourceId, Guid reply )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "RadioCommandInsert";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id, System.Data.ParameterDirection.InputOutput );
                var radioParameter = sqlCommandParameters.AddReference( "@Radio", radio );
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@Timestamp", timestamp );
                var deviceCommandSourceTypeParameter = sqlCommandParameters.AddEnum( "@DeviceCommandSourceType", deviceCommandSourceType );
                var deviceCommandSourceIdParameter = sqlCommandParameters.AddGuid( "@DeviceCommandSourceId", deviceCommandSourceId );
                var replyParameter = sqlCommandParameters.AddReference( "@Reply", reply );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    id = (Guid)idParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool UpdateRadioCommand( Guid id, ref long rowVersion, Guid radio, DateTime timestamp, Types.DeviceCommandSourceType deviceCommandSourceType, Guid deviceCommandSourceId, Guid reply )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "RadioCommandUpdate";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion, System.Data.ParameterDirection.InputOutput );
                var radioParameter = sqlCommandParameters.AddReference( "@Radio", radio );
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@Timestamp", timestamp );
                var deviceCommandSourceTypeParameter = sqlCommandParameters.AddEnum( "@DeviceCommandSourceType", deviceCommandSourceType );
                var deviceCommandSourceIdParameter = sqlCommandParameters.AddGuid( "@DeviceCommandSourceId", deviceCommandSourceId );
                var replyParameter = sqlCommandParameters.AddReference( "@Reply", reply );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    rowVersion = (long)rowVersionParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool DeleteRadioCommand( Guid id, long rowVersion )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "RadioCommandDelete";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool InsertRadioCommandReply( ref Guid id, Guid radio, DateTime timestamp, Guid command, Types.DeviceCommandReplyStatus status, string message )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "RadioCommandReplyInsert";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id, System.Data.ParameterDirection.InputOutput );
                var radioParameter = sqlCommandParameters.AddReference( "@Radio", radio );
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@Timestamp", timestamp );
                var commandParameter = sqlCommandParameters.AddReference( "@Command", command );
                var statusParameter = sqlCommandParameters.AddEnum( "@Status", status );
                var messageParameter = sqlCommandParameters.AddNVarChar( "@Message", message, 0 );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    id = (Guid)idParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool UpdateRadioCommandReply( Guid id, ref long rowVersion, Guid radio, DateTime timestamp, Guid command, Types.DeviceCommandReplyStatus status, string message )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "RadioCommandReplyUpdate";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion, System.Data.ParameterDirection.InputOutput );
                var radioParameter = sqlCommandParameters.AddReference( "@Radio", radio );
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@Timestamp", timestamp );
                var commandParameter = sqlCommandParameters.AddReference( "@Command", command );
                var statusParameter = sqlCommandParameters.AddEnum( "@Status", status );
                var messageParameter = sqlCommandParameters.AddNVarChar( "@Message", message, 0 );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    rowVersion = (long)rowVersionParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool DeleteRadioCommandReply( Guid id, long rowVersion )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "RadioCommandReplyDelete";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool InsertRadioConfiguration( ref Guid id, Guid radio, DateTime timestamp, double longitude, double latitude, string playbackUrl, string radioIPAddress, int radioPort, string ed137IPAddress, int ed137Port )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "RadioConfigurationInsert";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id, System.Data.ParameterDirection.InputOutput );
                var radioParameter = sqlCommandParameters.AddReference( "@Radio", radio );
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@Timestamp", timestamp );
                var longitudeParameter = sqlCommandParameters.AddDouble( "@Longitude", longitude );
                var latitudeParameter = sqlCommandParameters.AddDouble( "@Latitude", latitude );
                var playbackUrlParameter = sqlCommandParameters.AddNVarChar( "@PlaybackUrl", playbackUrl, 127 );
                var radioIPAddressParameter = sqlCommandParameters.AddNVarChar( "@RadioIPAddress", radioIPAddress, 127 );
                var radioPortParameter = sqlCommandParameters.AddInt32( "@RadioPort", radioPort );
                var ed137IPAddressParameter = sqlCommandParameters.AddNVarChar( "@Ed137IPAddress", ed137IPAddress, 127 );
                var ed137PortParameter = sqlCommandParameters.AddInt32( "@Ed137Port", ed137Port );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    id = (Guid)idParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool UpdateRadioConfiguration( Guid id, ref long rowVersion, Guid radio, DateTime timestamp, double longitude, double latitude, string playbackUrl, string radioIPAddress, int radioPort, string ed137IPAddress, int ed137Port )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "RadioConfigurationUpdate";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion, System.Data.ParameterDirection.InputOutput );
                var radioParameter = sqlCommandParameters.AddReference( "@Radio", radio );
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@Timestamp", timestamp );
                var longitudeParameter = sqlCommandParameters.AddDouble( "@Longitude", longitude );
                var latitudeParameter = sqlCommandParameters.AddDouble( "@Latitude", latitude );
                var playbackUrlParameter = sqlCommandParameters.AddNVarChar( "@PlaybackUrl", playbackUrl, 127 );
                var radioIPAddressParameter = sqlCommandParameters.AddNVarChar( "@RadioIPAddress", radioIPAddress, 127 );
                var radioPortParameter = sqlCommandParameters.AddInt32( "@RadioPort", radioPort );
                var ed137IPAddressParameter = sqlCommandParameters.AddNVarChar( "@Ed137IPAddress", ed137IPAddress, 127 );
                var ed137PortParameter = sqlCommandParameters.AddInt32( "@Ed137Port", ed137Port );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    rowVersion = (long)rowVersionParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool DeleteRadioConfiguration( Guid id, long rowVersion )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "RadioConfigurationDelete";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool InsertRadomeCommand( ref Guid id, Guid radome, DateTime timestamp, Types.DeviceCommandSourceType deviceCommandSourceType, Guid deviceCommandSourceId, Guid reply )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "RadomeCommandInsert";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id, System.Data.ParameterDirection.InputOutput );
                var radomeParameter = sqlCommandParameters.AddReference( "@Radome", radome );
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@Timestamp", timestamp );
                var deviceCommandSourceTypeParameter = sqlCommandParameters.AddEnum( "@DeviceCommandSourceType", deviceCommandSourceType );
                var deviceCommandSourceIdParameter = sqlCommandParameters.AddGuid( "@DeviceCommandSourceId", deviceCommandSourceId );
                var replyParameter = sqlCommandParameters.AddReference( "@Reply", reply );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    id = (Guid)idParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool UpdateRadomeCommand( Guid id, ref long rowVersion, Guid radome, DateTime timestamp, Types.DeviceCommandSourceType deviceCommandSourceType, Guid deviceCommandSourceId, Guid reply )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "RadomeCommandUpdate";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion, System.Data.ParameterDirection.InputOutput );
                var radomeParameter = sqlCommandParameters.AddReference( "@Radome", radome );
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@Timestamp", timestamp );
                var deviceCommandSourceTypeParameter = sqlCommandParameters.AddEnum( "@DeviceCommandSourceType", deviceCommandSourceType );
                var deviceCommandSourceIdParameter = sqlCommandParameters.AddGuid( "@DeviceCommandSourceId", deviceCommandSourceId );
                var replyParameter = sqlCommandParameters.AddReference( "@Reply", reply );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    rowVersion = (long)rowVersionParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool DeleteRadomeCommand( Guid id, long rowVersion )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "RadomeCommandDelete";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool InsertRadomeCommandReply( ref Guid id, Guid radome, DateTime timestamp, Guid command, Types.DeviceCommandReplyStatus status, string message )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "RadomeCommandReplyInsert";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id, System.Data.ParameterDirection.InputOutput );
                var radomeParameter = sqlCommandParameters.AddReference( "@Radome", radome );
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@Timestamp", timestamp );
                var commandParameter = sqlCommandParameters.AddReference( "@Command", command );
                var statusParameter = sqlCommandParameters.AddEnum( "@Status", status );
                var messageParameter = sqlCommandParameters.AddNVarChar( "@Message", message, 0 );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    id = (Guid)idParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool UpdateRadomeCommandReply( Guid id, ref long rowVersion, Guid radome, DateTime timestamp, Guid command, Types.DeviceCommandReplyStatus status, string message )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "RadomeCommandReplyUpdate";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion, System.Data.ParameterDirection.InputOutput );
                var radomeParameter = sqlCommandParameters.AddReference( "@Radome", radome );
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@Timestamp", timestamp );
                var commandParameter = sqlCommandParameters.AddReference( "@Command", command );
                var statusParameter = sqlCommandParameters.AddEnum( "@Status", status );
                var messageParameter = sqlCommandParameters.AddNVarChar( "@Message", message, 0 );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    rowVersion = (long)rowVersionParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool DeleteRadomeCommandReply( Guid id, long rowVersion )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "RadomeCommandReplyDelete";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool InsertRadomeConfiguration( ref Guid id, Guid radome, DateTime timestamp, TimeSpan interval, double lowPressureLimit, double highPressureLimit, double lowTemperatureLimit, double highTemperatureLimit )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "RadomeConfigurationInsert";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id, System.Data.ParameterDirection.InputOutput );
                var radomeParameter = sqlCommandParameters.AddReference( "@Radome", radome );
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@Timestamp", timestamp );
                var intervalParameter = sqlCommandParameters.AddTimeSpanAsInt64( "@Interval", interval );
                var lowPressureLimitParameter = sqlCommandParameters.AddDouble( "@LowPressureLimit", lowPressureLimit );
                var highPressureLimitParameter = sqlCommandParameters.AddDouble( "@HighPressureLimit", highPressureLimit );
                var lowTemperatureLimitParameter = sqlCommandParameters.AddDouble( "@LowTemperatureLimit", lowTemperatureLimit );
                var highTemperatureLimitParameter = sqlCommandParameters.AddDouble( "@HighTemperatureLimit", highTemperatureLimit );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    id = (Guid)idParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool UpdateRadomeConfiguration( Guid id, ref long rowVersion, Guid radome, DateTime timestamp, TimeSpan interval, double lowPressureLimit, double highPressureLimit, double lowTemperatureLimit, double highTemperatureLimit )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "RadomeConfigurationUpdate";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion, System.Data.ParameterDirection.InputOutput );
                var radomeParameter = sqlCommandParameters.AddReference( "@Radome", radome );
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@Timestamp", timestamp );
                var intervalParameter = sqlCommandParameters.AddTimeSpanAsInt64( "@Interval", interval );
                var lowPressureLimitParameter = sqlCommandParameters.AddDouble( "@LowPressureLimit", lowPressureLimit );
                var highPressureLimitParameter = sqlCommandParameters.AddDouble( "@HighPressureLimit", highPressureLimit );
                var lowTemperatureLimitParameter = sqlCommandParameters.AddDouble( "@LowTemperatureLimit", lowTemperatureLimit );
                var highTemperatureLimitParameter = sqlCommandParameters.AddDouble( "@HighTemperatureLimit", highTemperatureLimit );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    rowVersion = (long)rowVersionParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool DeleteRadomeConfiguration( Guid id, long rowVersion )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "RadomeConfigurationDelete";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool InsertReferenceTimeseriesValue( ref Guid id, Guid timeseries, DateTime timestamp, Guid value__ )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "ReferenceTimeseriesValueInsert";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id, System.Data.ParameterDirection.InputOutput );
                var timeseriesParameter = sqlCommandParameters.AddReference( "@Timeseries", timeseries );
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@Timestamp", timestamp );
                var valueParameter = sqlCommandParameters.AddReference( "@Value", value__ );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    id = (Guid)idParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool UpdateReferenceTimeseriesValue( Guid id, ref long rowVersion, Guid timeseries, DateTime timestamp, Guid value__ )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "ReferenceTimeseriesValueUpdate";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion, System.Data.ParameterDirection.InputOutput );
                var timeseriesParameter = sqlCommandParameters.AddReference( "@Timeseries", timeseries );
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@Timestamp", timestamp );
                var valueParameter = sqlCommandParameters.AddReference( "@Value", value__ );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    rowVersion = (long)rowVersionParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool DeleteReferenceTimeseriesValue( Guid id, long rowVersion )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "ReferenceTimeseriesValueDelete";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool InsertSByteTimeseriesValue( ref Guid id, Guid timeseries, DateTime timestamp, sbyte? value__ )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "SByteTimeseriesValueInsert";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id, System.Data.ParameterDirection.InputOutput );
                var timeseriesParameter = sqlCommandParameters.AddReference( "@Timeseries", timeseries );
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@Timestamp", timestamp );
                var valueParameter = sqlCommandParameters.AddSByte( "@Value", value__ );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    id = (Guid)idParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool UpdateSByteTimeseriesValue( Guid id, ref long rowVersion, Guid timeseries, DateTime timestamp, sbyte? value__ )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "SByteTimeseriesValueUpdate";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion, System.Data.ParameterDirection.InputOutput );
                var timeseriesParameter = sqlCommandParameters.AddReference( "@Timeseries", timeseries );
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@Timestamp", timestamp );
                var valueParameter = sqlCommandParameters.AddSByte( "@Value", value__ );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    rowVersion = (long)rowVersionParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool DeleteSByteTimeseriesValue( Guid id, long rowVersion )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "SByteTimeseriesValueDelete";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool InsertSecurityDomain( ref Guid id, string name, string description )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "SecurityDomainInsert";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id, System.Data.ParameterDirection.InputOutput );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@Name", name, 127 );
                var descriptionParameter = sqlCommandParameters.AddNVarChar( "@Description", description, 0 );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    id = (Guid)idParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool UpdateSecurityDomain( Guid id, ref long rowVersion, string name, string description )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "SecurityDomainUpdate";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion, System.Data.ParameterDirection.InputOutput );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@Name", name, 127 );
                var descriptionParameter = sqlCommandParameters.AddNVarChar( "@Description", description, 0 );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    rowVersion = (long)rowVersionParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool DeleteSecurityDomain( Guid id, long rowVersion )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "SecurityDomainDelete";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool InsertSecurityLogin( ref Guid id, Guid domain, string identity, string description )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "SecurityLoginInsert";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id, System.Data.ParameterDirection.InputOutput );
                var domainParameter = sqlCommandParameters.AddReference( "@Domain", domain );
                var identityParameter = sqlCommandParameters.AddNVarChar( "@Identity", identity, 255 );
                var descriptionParameter = sqlCommandParameters.AddNVarChar( "@Description", description, 0 );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    id = (Guid)idParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool UpdateSecurityLogin( Guid id, ref long rowVersion, Guid domain, string identity, string description )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "SecurityLoginUpdate";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion, System.Data.ParameterDirection.InputOutput );
                var domainParameter = sqlCommandParameters.AddReference( "@Domain", domain );
                var identityParameter = sqlCommandParameters.AddNVarChar( "@Identity", identity, 255 );
                var descriptionParameter = sqlCommandParameters.AddNVarChar( "@Description", description, 0 );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    rowVersion = (long)rowVersionParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool DeleteSecurityLogin( Guid id, long rowVersion )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "SecurityLoginDelete";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool InsertSecurityRole( ref Guid id, Guid domain, string identity, string description, string name )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "SecurityRoleInsert";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id, System.Data.ParameterDirection.InputOutput );
                var domainParameter = sqlCommandParameters.AddReference( "@Domain", domain );
                var identityParameter = sqlCommandParameters.AddNVarChar( "@Identity", identity, 255 );
                var descriptionParameter = sqlCommandParameters.AddNVarChar( "@Description", description, 0 );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@Name", name, 127 );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    id = (Guid)idParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool UpdateSecurityRole( Guid id, ref long rowVersion, Guid domain, string identity, string description, string name )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "SecurityRoleUpdate";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion, System.Data.ParameterDirection.InputOutput );
                var domainParameter = sqlCommandParameters.AddReference( "@Domain", domain );
                var identityParameter = sqlCommandParameters.AddNVarChar( "@Identity", identity, 255 );
                var descriptionParameter = sqlCommandParameters.AddNVarChar( "@Description", description, 0 );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@Name", name, 127 );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    rowVersion = (long)rowVersionParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool DeleteSecurityRole( Guid id, long rowVersion )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "SecurityRoleDelete";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool InsertSecurityIdentifierRoleLink( ref Guid id, Guid member, Guid role, DateTime start, DateTime? end )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "SecurityIdentifierRoleLinkInsert";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id, System.Data.ParameterDirection.InputOutput );
                var memberParameter = sqlCommandParameters.AddReference( "@Member", member );
                var roleParameter = sqlCommandParameters.AddReference( "@Role", role );
                var startParameter = sqlCommandParameters.AddDateTimeAsInt64( "@Start", start );
                var endParameter = sqlCommandParameters.AddDateTimeAsInt64( "@End", end );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    id = (Guid)idParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool UpdateSecurityIdentifierRoleLink( Guid id, ref long rowVersion, Guid member, Guid role, DateTime start, DateTime? end )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "SecurityIdentifierRoleLinkUpdate";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion, System.Data.ParameterDirection.InputOutput );
                var memberParameter = sqlCommandParameters.AddReference( "@Member", member );
                var roleParameter = sqlCommandParameters.AddReference( "@Role", role );
                var startParameter = sqlCommandParameters.AddDateTimeAsInt64( "@Start", start );
                var endParameter = sqlCommandParameters.AddDateTimeAsInt64( "@End", end );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    rowVersion = (long)rowVersionParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool DeleteSecurityIdentifierRoleLink( Guid id, long rowVersion )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "SecurityIdentifierRoleLinkDelete";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool InsertSecurityLoginSession( ref Guid id, Guid login, DateTime fromTime, DateTime? throughTime, Guid clientSession, string notificationQueueName, string messageQueueName )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "SecurityLoginSessionInsert";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id, System.Data.ParameterDirection.InputOutput );
                var loginParameter = sqlCommandParameters.AddReference( "@Login", login );
                var fromTimeParameter = sqlCommandParameters.AddDateTimeAsInt64( "@FromTime", fromTime );
                var throughTimeParameter = sqlCommandParameters.AddDateTimeAsInt64( "@ThroughTime", throughTime );
                var clientSessionParameter = sqlCommandParameters.AddGuid( "@ClientSession", clientSession );
                var notificationQueueNameParameter = sqlCommandParameters.AddNVarChar( "@NotificationQueueName", notificationQueueName, 260 );
                var messageQueueNameParameter = sqlCommandParameters.AddNVarChar( "@MessageQueueName", messageQueueName, 260 );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    id = (Guid)idParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool UpdateSecurityLoginSession( Guid id, ref long rowVersion, Guid login, DateTime fromTime, DateTime? throughTime, Guid clientSession, string notificationQueueName, string messageQueueName )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "SecurityLoginSessionUpdate";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion, System.Data.ParameterDirection.InputOutput );
                var loginParameter = sqlCommandParameters.AddReference( "@Login", login );
                var fromTimeParameter = sqlCommandParameters.AddDateTimeAsInt64( "@FromTime", fromTime );
                var throughTimeParameter = sqlCommandParameters.AddDateTimeAsInt64( "@ThroughTime", throughTime );
                var clientSessionParameter = sqlCommandParameters.AddGuid( "@ClientSession", clientSession );
                var notificationQueueNameParameter = sqlCommandParameters.AddNVarChar( "@NotificationQueueName", notificationQueueName, 260 );
                var messageQueueNameParameter = sqlCommandParameters.AddNVarChar( "@MessageQueueName", messageQueueName, 260 );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    rowVersion = (long)rowVersionParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool DeleteSecurityLoginSession( Guid id, long rowVersion )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "SecurityLoginSessionDelete";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool InsertSecurityPermission( ref Guid id, Guid identifier, DateTime timestamp, int typeCode, bool canCreate, bool canRead, bool canUpdate, bool canDelete )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "SecurityPermissionInsert";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id, System.Data.ParameterDirection.InputOutput );
                var identifierParameter = sqlCommandParameters.AddReference( "@Identifier", identifier );
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@Timestamp", timestamp );
                var typeCodeParameter = sqlCommandParameters.AddInt32( "@TypeCode", typeCode );
                var canCreateParameter = sqlCommandParameters.AddBoolean( "@CanCreate", canCreate );
                var canReadParameter = sqlCommandParameters.AddBoolean( "@CanRead", canRead );
                var canUpdateParameter = sqlCommandParameters.AddBoolean( "@CanUpdate", canUpdate );
                var canDeleteParameter = sqlCommandParameters.AddBoolean( "@CanDelete", canDelete );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    id = (Guid)idParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool UpdateSecurityPermission( Guid id, ref long rowVersion, Guid identifier, DateTime timestamp, int typeCode, bool canCreate, bool canRead, bool canUpdate, bool canDelete )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "SecurityPermissionUpdate";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion, System.Data.ParameterDirection.InputOutput );
                var identifierParameter = sqlCommandParameters.AddReference( "@Identifier", identifier );
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@Timestamp", timestamp );
                var typeCodeParameter = sqlCommandParameters.AddInt32( "@TypeCode", typeCode );
                var canCreateParameter = sqlCommandParameters.AddBoolean( "@CanCreate", canCreate );
                var canReadParameter = sqlCommandParameters.AddBoolean( "@CanRead", canRead );
                var canUpdateParameter = sqlCommandParameters.AddBoolean( "@CanUpdate", canUpdate );
                var canDeleteParameter = sqlCommandParameters.AddBoolean( "@CanDelete", canDelete );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    rowVersion = (long)rowVersionParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool DeleteSecurityPermission( Guid id, long rowVersion )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "SecurityPermissionDelete";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool InsertSingleTimeseriesValue( ref Guid id, Guid timeseries, DateTime timestamp, float? value__ )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "SingleTimeseriesValueInsert";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id, System.Data.ParameterDirection.InputOutput );
                var timeseriesParameter = sqlCommandParameters.AddReference( "@Timeseries", timeseries );
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@Timestamp", timestamp );
                var valueParameter = sqlCommandParameters.AddSingle( "@Value", value__ );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    id = (Guid)idParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool UpdateSingleTimeseriesValue( Guid id, ref long rowVersion, Guid timeseries, DateTime timestamp, float? value__ )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "SingleTimeseriesValueUpdate";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion, System.Data.ParameterDirection.InputOutput );
                var timeseriesParameter = sqlCommandParameters.AddReference( "@Timeseries", timeseries );
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@Timestamp", timestamp );
                var valueParameter = sqlCommandParameters.AddSingle( "@Value", value__ );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    rowVersion = (long)rowVersionParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool DeleteSingleTimeseriesValue( Guid id, long rowVersion )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "SingleTimeseriesValueDelete";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool InsertStringTimeseriesValue( ref Guid id, Guid timeseries, DateTime timestamp, string value__ )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "StringTimeseriesValueInsert";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id, System.Data.ParameterDirection.InputOutput );
                var timeseriesParameter = sqlCommandParameters.AddReference( "@Timeseries", timeseries );
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@Timestamp", timestamp );
                var valueParameter = sqlCommandParameters.AddNVarChar( "@Value", value__, 0 );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    id = (Guid)idParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool UpdateStringTimeseriesValue( Guid id, ref long rowVersion, Guid timeseries, DateTime timestamp, string value__ )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "StringTimeseriesValueUpdate";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion, System.Data.ParameterDirection.InputOutput );
                var timeseriesParameter = sqlCommandParameters.AddReference( "@Timeseries", timeseries );
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@Timestamp", timestamp );
                var valueParameter = sqlCommandParameters.AddNVarChar( "@Value", value__, 0 );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    rowVersion = (long)rowVersionParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool DeleteStringTimeseriesValue( Guid id, long rowVersion )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "StringTimeseriesValueDelete";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool InsertBinaryTimeseries( ref Guid id, Guid? catalog, string name, TimeSpan maxRetention )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "BinaryTimeseriesInsert";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id, System.Data.ParameterDirection.InputOutput );
                var catalogParameter = sqlCommandParameters.AddReference( "@Catalog", catalog );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@Name", name, 127 );
                var maxRetentionParameter = sqlCommandParameters.AddTimeSpanAsInt64( "@MaxRetention", maxRetention );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    id = (Guid)idParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool UpdateBinaryTimeseries( Guid id, ref long rowVersion, Guid? catalog, string name, TimeSpan maxRetention )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "BinaryTimeseriesUpdate";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion, System.Data.ParameterDirection.InputOutput );
                var catalogParameter = sqlCommandParameters.AddReference( "@Catalog", catalog );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@Name", name, 127 );
                var maxRetentionParameter = sqlCommandParameters.AddTimeSpanAsInt64( "@MaxRetention", maxRetention );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    rowVersion = (long)rowVersionParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool DeleteBinaryTimeseries( Guid id, long rowVersion )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "BinaryTimeseriesDelete";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool InsertBooleanTimeseries( ref Guid id, Guid? catalog, string name, TimeSpan maxRetention )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "BooleanTimeseriesInsert";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id, System.Data.ParameterDirection.InputOutput );
                var catalogParameter = sqlCommandParameters.AddReference( "@Catalog", catalog );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@Name", name, 127 );
                var maxRetentionParameter = sqlCommandParameters.AddTimeSpanAsInt64( "@MaxRetention", maxRetention );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    id = (Guid)idParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool UpdateBooleanTimeseries( Guid id, ref long rowVersion, Guid? catalog, string name, TimeSpan maxRetention )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "BooleanTimeseriesUpdate";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion, System.Data.ParameterDirection.InputOutput );
                var catalogParameter = sqlCommandParameters.AddReference( "@Catalog", catalog );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@Name", name, 127 );
                var maxRetentionParameter = sqlCommandParameters.AddTimeSpanAsInt64( "@MaxRetention", maxRetention );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    rowVersion = (long)rowVersionParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool DeleteBooleanTimeseries( Guid id, long rowVersion )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "BooleanTimeseriesDelete";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool InsertAisAidToNavigationOffPositionTimeseries( ref Guid id, Guid? catalog, string name, TimeSpan maxRetention, Guid aidToNavigation )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "AisAidToNavigationOffPositionTimeseriesInsert";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id, System.Data.ParameterDirection.InputOutput );
                var catalogParameter = sqlCommandParameters.AddReference( "@Catalog", catalog );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@Name", name, 127 );
                var maxRetentionParameter = sqlCommandParameters.AddTimeSpanAsInt64( "@MaxRetention", maxRetention );
                var aidToNavigationParameter = sqlCommandParameters.AddReference( "@AidToNavigation", aidToNavigation );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    id = (Guid)idParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool UpdateAisAidToNavigationOffPositionTimeseries( Guid id, ref long rowVersion, Guid? catalog, string name, TimeSpan maxRetention, Guid aidToNavigation )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "AisAidToNavigationOffPositionTimeseriesUpdate";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion, System.Data.ParameterDirection.InputOutput );
                var catalogParameter = sqlCommandParameters.AddReference( "@Catalog", catalog );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@Name", name, 127 );
                var maxRetentionParameter = sqlCommandParameters.AddTimeSpanAsInt64( "@MaxRetention", maxRetention );
                var aidToNavigationParameter = sqlCommandParameters.AddReference( "@AidToNavigation", aidToNavigation );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    rowVersion = (long)rowVersionParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool DeleteAisAidToNavigationOffPositionTimeseries( Guid id, long rowVersion )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "AisAidToNavigationOffPositionTimeseriesDelete";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool InsertDeviceEnabledTimeseries( ref Guid id, Guid? catalog, string name, TimeSpan maxRetention, Guid? device )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "DeviceEnabledTimeseriesInsert";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id, System.Data.ParameterDirection.InputOutput );
                var catalogParameter = sqlCommandParameters.AddReference( "@Catalog", catalog );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@Name", name, 127 );
                var maxRetentionParameter = sqlCommandParameters.AddTimeSpanAsInt64( "@MaxRetention", maxRetention );
                var deviceParameter = sqlCommandParameters.AddReference( "@Device", device );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    id = (Guid)idParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool UpdateDeviceEnabledTimeseries( Guid id, ref long rowVersion, Guid? catalog, string name, TimeSpan maxRetention, Guid? device )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "DeviceEnabledTimeseriesUpdate";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion, System.Data.ParameterDirection.InputOutput );
                var catalogParameter = sqlCommandParameters.AddReference( "@Catalog", catalog );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@Name", name, 127 );
                var maxRetentionParameter = sqlCommandParameters.AddTimeSpanAsInt64( "@MaxRetention", maxRetention );
                var deviceParameter = sqlCommandParameters.AddReference( "@Device", device );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    rowVersion = (long)rowVersionParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool DeleteDeviceEnabledTimeseries( Guid id, long rowVersion )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "DeviceEnabledTimeseriesDelete";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool InsertRadarAutomaticSensitivityTimeControlTimeseries( ref Guid id, Guid? catalog, string name, TimeSpan maxRetention, Guid radar )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "RadarAutomaticSensitivityTimeControlTimeseriesInsert";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id, System.Data.ParameterDirection.InputOutput );
                var catalogParameter = sqlCommandParameters.AddReference( "@Catalog", catalog );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@Name", name, 127 );
                var maxRetentionParameter = sqlCommandParameters.AddTimeSpanAsInt64( "@MaxRetention", maxRetention );
                var radarParameter = sqlCommandParameters.AddReference( "@Radar", radar );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    id = (Guid)idParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool UpdateRadarAutomaticSensitivityTimeControlTimeseries( Guid id, ref long rowVersion, Guid? catalog, string name, TimeSpan maxRetention, Guid radar )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "RadarAutomaticSensitivityTimeControlTimeseriesUpdate";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion, System.Data.ParameterDirection.InputOutput );
                var catalogParameter = sqlCommandParameters.AddReference( "@Catalog", catalog );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@Name", name, 127 );
                var maxRetentionParameter = sqlCommandParameters.AddTimeSpanAsInt64( "@MaxRetention", maxRetention );
                var radarParameter = sqlCommandParameters.AddReference( "@Radar", radar );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    rowVersion = (long)rowVersionParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool DeleteRadarAutomaticSensitivityTimeControlTimeseries( Guid id, long rowVersion )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "RadarAutomaticSensitivityTimeControlTimeseriesDelete";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool InsertRadarBlankSector1Timeseries( ref Guid id, Guid? catalog, string name, TimeSpan maxRetention, Guid radar )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "RadarBlankSector1TimeseriesInsert";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id, System.Data.ParameterDirection.InputOutput );
                var catalogParameter = sqlCommandParameters.AddReference( "@Catalog", catalog );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@Name", name, 127 );
                var maxRetentionParameter = sqlCommandParameters.AddTimeSpanAsInt64( "@MaxRetention", maxRetention );
                var radarParameter = sqlCommandParameters.AddReference( "@Radar", radar );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    id = (Guid)idParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool UpdateRadarBlankSector1Timeseries( Guid id, ref long rowVersion, Guid? catalog, string name, TimeSpan maxRetention, Guid radar )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "RadarBlankSector1TimeseriesUpdate";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion, System.Data.ParameterDirection.InputOutput );
                var catalogParameter = sqlCommandParameters.AddReference( "@Catalog", catalog );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@Name", name, 127 );
                var maxRetentionParameter = sqlCommandParameters.AddTimeSpanAsInt64( "@MaxRetention", maxRetention );
                var radarParameter = sqlCommandParameters.AddReference( "@Radar", radar );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    rowVersion = (long)rowVersionParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool DeleteRadarBlankSector1Timeseries( Guid id, long rowVersion )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "RadarBlankSector1TimeseriesDelete";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool InsertRadarBlankSector2Timeseries( ref Guid id, Guid? catalog, string name, TimeSpan maxRetention, Guid radar )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "RadarBlankSector2TimeseriesInsert";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id, System.Data.ParameterDirection.InputOutput );
                var catalogParameter = sqlCommandParameters.AddReference( "@Catalog", catalog );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@Name", name, 127 );
                var maxRetentionParameter = sqlCommandParameters.AddTimeSpanAsInt64( "@MaxRetention", maxRetention );
                var radarParameter = sqlCommandParameters.AddReference( "@Radar", radar );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    id = (Guid)idParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool UpdateRadarBlankSector2Timeseries( Guid id, ref long rowVersion, Guid? catalog, string name, TimeSpan maxRetention, Guid radar )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "RadarBlankSector2TimeseriesUpdate";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion, System.Data.ParameterDirection.InputOutput );
                var catalogParameter = sqlCommandParameters.AddReference( "@Catalog", catalog );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@Name", name, 127 );
                var maxRetentionParameter = sqlCommandParameters.AddTimeSpanAsInt64( "@MaxRetention", maxRetention );
                var radarParameter = sqlCommandParameters.AddReference( "@Radar", radar );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    rowVersion = (long)rowVersionParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool DeleteRadarBlankSector2Timeseries( Guid id, long rowVersion )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "RadarBlankSector2TimeseriesDelete";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool InsertRadarEnableAutomaticFrequencyControlTimeseries( ref Guid id, Guid? catalog, string name, TimeSpan maxRetention, Guid radar )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "RadarEnableAutomaticFrequencyControlTimeseriesInsert";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id, System.Data.ParameterDirection.InputOutput );
                var catalogParameter = sqlCommandParameters.AddReference( "@Catalog", catalog );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@Name", name, 127 );
                var maxRetentionParameter = sqlCommandParameters.AddTimeSpanAsInt64( "@MaxRetention", maxRetention );
                var radarParameter = sqlCommandParameters.AddReference( "@Radar", radar );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    id = (Guid)idParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool UpdateRadarEnableAutomaticFrequencyControlTimeseries( Guid id, ref long rowVersion, Guid? catalog, string name, TimeSpan maxRetention, Guid radar )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "RadarEnableAutomaticFrequencyControlTimeseriesUpdate";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion, System.Data.ParameterDirection.InputOutput );
                var catalogParameter = sqlCommandParameters.AddReference( "@Catalog", catalog );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@Name", name, 127 );
                var maxRetentionParameter = sqlCommandParameters.AddTimeSpanAsInt64( "@MaxRetention", maxRetention );
                var radarParameter = sqlCommandParameters.AddReference( "@Radar", radar );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    rowVersion = (long)rowVersionParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool DeleteRadarEnableAutomaticFrequencyControlTimeseries( Guid id, long rowVersion )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "RadarEnableAutomaticFrequencyControlTimeseriesDelete";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool InsertRadarEnableFastTimeConstantTimeseries( ref Guid id, Guid? catalog, string name, TimeSpan maxRetention, Guid radar )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "RadarEnableFastTimeConstantTimeseriesInsert";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id, System.Data.ParameterDirection.InputOutput );
                var catalogParameter = sqlCommandParameters.AddReference( "@Catalog", catalog );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@Name", name, 127 );
                var maxRetentionParameter = sqlCommandParameters.AddTimeSpanAsInt64( "@MaxRetention", maxRetention );
                var radarParameter = sqlCommandParameters.AddReference( "@Radar", radar );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    id = (Guid)idParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool UpdateRadarEnableFastTimeConstantTimeseries( Guid id, ref long rowVersion, Guid? catalog, string name, TimeSpan maxRetention, Guid radar )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "RadarEnableFastTimeConstantTimeseriesUpdate";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion, System.Data.ParameterDirection.InputOutput );
                var catalogParameter = sqlCommandParameters.AddReference( "@Catalog", catalog );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@Name", name, 127 );
                var maxRetentionParameter = sqlCommandParameters.AddTimeSpanAsInt64( "@MaxRetention", maxRetention );
                var radarParameter = sqlCommandParameters.AddReference( "@Radar", radar );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    rowVersion = (long)rowVersionParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool DeleteRadarEnableFastTimeConstantTimeseries( Guid id, long rowVersion )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "RadarEnableFastTimeConstantTimeseriesDelete";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool InsertRadarEnableSensitivityTimeControlTimeseries( ref Guid id, Guid? catalog, string name, TimeSpan maxRetention, Guid radar )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "RadarEnableSensitivityTimeControlTimeseriesInsert";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id, System.Data.ParameterDirection.InputOutput );
                var catalogParameter = sqlCommandParameters.AddReference( "@Catalog", catalog );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@Name", name, 127 );
                var maxRetentionParameter = sqlCommandParameters.AddTimeSpanAsInt64( "@MaxRetention", maxRetention );
                var radarParameter = sqlCommandParameters.AddReference( "@Radar", radar );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    id = (Guid)idParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool UpdateRadarEnableSensitivityTimeControlTimeseries( Guid id, ref long rowVersion, Guid? catalog, string name, TimeSpan maxRetention, Guid radar )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "RadarEnableSensitivityTimeControlTimeseriesUpdate";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion, System.Data.ParameterDirection.InputOutput );
                var catalogParameter = sqlCommandParameters.AddReference( "@Catalog", catalog );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@Name", name, 127 );
                var maxRetentionParameter = sqlCommandParameters.AddTimeSpanAsInt64( "@MaxRetention", maxRetention );
                var radarParameter = sqlCommandParameters.AddReference( "@Radar", radar );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    rowVersion = (long)rowVersionParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool DeleteRadarEnableSensitivityTimeControlTimeseries( Guid id, long rowVersion )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "RadarEnableSensitivityTimeControlTimeseriesDelete";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool InsertRadarPowerOnTimeseries( ref Guid id, Guid? catalog, string name, TimeSpan maxRetention, Guid radar )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "RadarPowerOnTimeseriesInsert";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id, System.Data.ParameterDirection.InputOutput );
                var catalogParameter = sqlCommandParameters.AddReference( "@Catalog", catalog );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@Name", name, 127 );
                var maxRetentionParameter = sqlCommandParameters.AddTimeSpanAsInt64( "@MaxRetention", maxRetention );
                var radarParameter = sqlCommandParameters.AddReference( "@Radar", radar );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    id = (Guid)idParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool UpdateRadarPowerOnTimeseries( Guid id, ref long rowVersion, Guid? catalog, string name, TimeSpan maxRetention, Guid radar )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "RadarPowerOnTimeseriesUpdate";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion, System.Data.ParameterDirection.InputOutput );
                var catalogParameter = sqlCommandParameters.AddReference( "@Catalog", catalog );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@Name", name, 127 );
                var maxRetentionParameter = sqlCommandParameters.AddTimeSpanAsInt64( "@MaxRetention", maxRetention );
                var radarParameter = sqlCommandParameters.AddReference( "@Radar", radar );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    rowVersion = (long)rowVersionParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool DeleteRadarPowerOnTimeseries( Guid id, long rowVersion )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "RadarPowerOnTimeseriesDelete";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool InsertRadarSaveSettingsTimeseries( ref Guid id, Guid? catalog, string name, TimeSpan maxRetention, Guid radar )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "RadarSaveSettingsTimeseriesInsert";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id, System.Data.ParameterDirection.InputOutput );
                var catalogParameter = sqlCommandParameters.AddReference( "@Catalog", catalog );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@Name", name, 127 );
                var maxRetentionParameter = sqlCommandParameters.AddTimeSpanAsInt64( "@MaxRetention", maxRetention );
                var radarParameter = sqlCommandParameters.AddReference( "@Radar", radar );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    id = (Guid)idParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool UpdateRadarSaveSettingsTimeseries( Guid id, ref long rowVersion, Guid? catalog, string name, TimeSpan maxRetention, Guid radar )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "RadarSaveSettingsTimeseriesUpdate";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion, System.Data.ParameterDirection.InputOutput );
                var catalogParameter = sqlCommandParameters.AddReference( "@Catalog", catalog );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@Name", name, 127 );
                var maxRetentionParameter = sqlCommandParameters.AddTimeSpanAsInt64( "@MaxRetention", maxRetention );
                var radarParameter = sqlCommandParameters.AddReference( "@Radar", radar );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    rowVersion = (long)rowVersionParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool DeleteRadarSaveSettingsTimeseries( Guid id, long rowVersion )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "RadarSaveSettingsTimeseriesDelete";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool InsertRadarTrackingTimeseries( ref Guid id, Guid? catalog, string name, TimeSpan maxRetention, Guid radar )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "RadarTrackingTimeseriesInsert";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id, System.Data.ParameterDirection.InputOutput );
                var catalogParameter = sqlCommandParameters.AddReference( "@Catalog", catalog );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@Name", name, 127 );
                var maxRetentionParameter = sqlCommandParameters.AddTimeSpanAsInt64( "@MaxRetention", maxRetention );
                var radarParameter = sqlCommandParameters.AddReference( "@Radar", radar );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    id = (Guid)idParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool UpdateRadarTrackingTimeseries( Guid id, ref long rowVersion, Guid? catalog, string name, TimeSpan maxRetention, Guid radar )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "RadarTrackingTimeseriesUpdate";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion, System.Data.ParameterDirection.InputOutput );
                var catalogParameter = sqlCommandParameters.AddReference( "@Catalog", catalog );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@Name", name, 127 );
                var maxRetentionParameter = sqlCommandParameters.AddTimeSpanAsInt64( "@MaxRetention", maxRetention );
                var radarParameter = sqlCommandParameters.AddReference( "@Radar", radar );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    rowVersion = (long)rowVersionParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool DeleteRadarTrackingTimeseries( Guid id, long rowVersion )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "RadarTrackingTimeseriesDelete";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool InsertMediaProxySessionEnabledTimeseries( ref Guid id, Guid? catalog, string name, TimeSpan maxRetention, Guid proxySession )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "MediaProxySessionEnabledTimeseriesInsert";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id, System.Data.ParameterDirection.InputOutput );
                var catalogParameter = sqlCommandParameters.AddReference( "@Catalog", catalog );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@Name", name, 127 );
                var maxRetentionParameter = sqlCommandParameters.AddTimeSpanAsInt64( "@MaxRetention", maxRetention );
                var proxySessionParameter = sqlCommandParameters.AddReference( "@ProxySession", proxySession );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    id = (Guid)idParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool UpdateMediaProxySessionEnabledTimeseries( Guid id, ref long rowVersion, Guid? catalog, string name, TimeSpan maxRetention, Guid proxySession )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "MediaProxySessionEnabledTimeseriesUpdate";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion, System.Data.ParameterDirection.InputOutput );
                var catalogParameter = sqlCommandParameters.AddReference( "@Catalog", catalog );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@Name", name, 127 );
                var maxRetentionParameter = sqlCommandParameters.AddTimeSpanAsInt64( "@MaxRetention", maxRetention );
                var proxySessionParameter = sqlCommandParameters.AddReference( "@ProxySession", proxySession );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    rowVersion = (long)rowVersionParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool DeleteMediaProxySessionEnabledTimeseries( Guid id, long rowVersion )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "MediaProxySessionEnabledTimeseriesDelete";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool InsertMediaServiceEnabledTimeseries( ref Guid id, Guid? catalog, string name, TimeSpan maxRetention, Guid service )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "MediaServiceEnabledTimeseriesInsert";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id, System.Data.ParameterDirection.InputOutput );
                var catalogParameter = sqlCommandParameters.AddReference( "@Catalog", catalog );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@Name", name, 127 );
                var maxRetentionParameter = sqlCommandParameters.AddTimeSpanAsInt64( "@MaxRetention", maxRetention );
                var serviceParameter = sqlCommandParameters.AddReference( "@Service", service );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    id = (Guid)idParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool UpdateMediaServiceEnabledTimeseries( Guid id, ref long rowVersion, Guid? catalog, string name, TimeSpan maxRetention, Guid service )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "MediaServiceEnabledTimeseriesUpdate";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion, System.Data.ParameterDirection.InputOutput );
                var catalogParameter = sqlCommandParameters.AddReference( "@Catalog", catalog );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@Name", name, 127 );
                var maxRetentionParameter = sqlCommandParameters.AddTimeSpanAsInt64( "@MaxRetention", maxRetention );
                var serviceParameter = sqlCommandParameters.AddReference( "@Service", service );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    rowVersion = (long)rowVersionParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool DeleteMediaServiceEnabledTimeseries( Guid id, long rowVersion )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "MediaServiceEnabledTimeseriesDelete";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool InsertByteTimeseries( ref Guid id, Guid? catalog, string name, TimeSpan maxRetention )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "ByteTimeseriesInsert";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id, System.Data.ParameterDirection.InputOutput );
                var catalogParameter = sqlCommandParameters.AddReference( "@Catalog", catalog );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@Name", name, 127 );
                var maxRetentionParameter = sqlCommandParameters.AddTimeSpanAsInt64( "@MaxRetention", maxRetention );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    id = (Guid)idParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool UpdateByteTimeseries( Guid id, ref long rowVersion, Guid? catalog, string name, TimeSpan maxRetention )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "ByteTimeseriesUpdate";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion, System.Data.ParameterDirection.InputOutput );
                var catalogParameter = sqlCommandParameters.AddReference( "@Catalog", catalog );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@Name", name, 127 );
                var maxRetentionParameter = sqlCommandParameters.AddTimeSpanAsInt64( "@MaxRetention", maxRetention );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    rowVersion = (long)rowVersionParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool DeleteByteTimeseries( Guid id, long rowVersion )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "ByteTimeseriesDelete";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool InsertDateTimeTimeseries( ref Guid id, Guid? catalog, string name, TimeSpan maxRetention )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "DateTimeTimeseriesInsert";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id, System.Data.ParameterDirection.InputOutput );
                var catalogParameter = sqlCommandParameters.AddReference( "@Catalog", catalog );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@Name", name, 127 );
                var maxRetentionParameter = sqlCommandParameters.AddTimeSpanAsInt64( "@MaxRetention", maxRetention );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    id = (Guid)idParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool UpdateDateTimeTimeseries( Guid id, ref long rowVersion, Guid? catalog, string name, TimeSpan maxRetention )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "DateTimeTimeseriesUpdate";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion, System.Data.ParameterDirection.InputOutput );
                var catalogParameter = sqlCommandParameters.AddReference( "@Catalog", catalog );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@Name", name, 127 );
                var maxRetentionParameter = sqlCommandParameters.AddTimeSpanAsInt64( "@MaxRetention", maxRetention );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    rowVersion = (long)rowVersionParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool DeleteDateTimeTimeseries( Guid id, long rowVersion )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "DateTimeTimeseriesDelete";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool InsertDoubleTimeseries( ref Guid id, Guid? catalog, string name, TimeSpan maxRetention )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "DoubleTimeseriesInsert";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id, System.Data.ParameterDirection.InputOutput );
                var catalogParameter = sqlCommandParameters.AddReference( "@Catalog", catalog );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@Name", name, 127 );
                var maxRetentionParameter = sqlCommandParameters.AddTimeSpanAsInt64( "@MaxRetention", maxRetention );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    id = (Guid)idParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool UpdateDoubleTimeseries( Guid id, ref long rowVersion, Guid? catalog, string name, TimeSpan maxRetention )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "DoubleTimeseriesUpdate";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion, System.Data.ParameterDirection.InputOutput );
                var catalogParameter = sqlCommandParameters.AddReference( "@Catalog", catalog );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@Name", name, 127 );
                var maxRetentionParameter = sqlCommandParameters.AddTimeSpanAsInt64( "@MaxRetention", maxRetention );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    rowVersion = (long)rowVersionParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool DeleteDoubleTimeseries( Guid id, long rowVersion )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "DoubleTimeseriesDelete";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool InsertGNSSAltitudeTimeseries( ref Guid id, Guid? catalog, string name, TimeSpan maxRetention, Guid gNSSDevice )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "GNSSAltitudeTimeseriesInsert";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id, System.Data.ParameterDirection.InputOutput );
                var catalogParameter = sqlCommandParameters.AddReference( "@Catalog", catalog );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@Name", name, 127 );
                var maxRetentionParameter = sqlCommandParameters.AddTimeSpanAsInt64( "@MaxRetention", maxRetention );
                var gNSSDeviceParameter = sqlCommandParameters.AddReference( "@GNSSDevice", gNSSDevice );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    id = (Guid)idParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool UpdateGNSSAltitudeTimeseries( Guid id, ref long rowVersion, Guid? catalog, string name, TimeSpan maxRetention, Guid gNSSDevice )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "GNSSAltitudeTimeseriesUpdate";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion, System.Data.ParameterDirection.InputOutput );
                var catalogParameter = sqlCommandParameters.AddReference( "@Catalog", catalog );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@Name", name, 127 );
                var maxRetentionParameter = sqlCommandParameters.AddTimeSpanAsInt64( "@MaxRetention", maxRetention );
                var gNSSDeviceParameter = sqlCommandParameters.AddReference( "@GNSSDevice", gNSSDevice );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    rowVersion = (long)rowVersionParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool DeleteGNSSAltitudeTimeseries( Guid id, long rowVersion )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "GNSSAltitudeTimeseriesDelete";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool InsertGNSSLatitudeTimeseries( ref Guid id, Guid? catalog, string name, TimeSpan maxRetention, Guid gNSSDevice )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "GNSSLatitudeTimeseriesInsert";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id, System.Data.ParameterDirection.InputOutput );
                var catalogParameter = sqlCommandParameters.AddReference( "@Catalog", catalog );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@Name", name, 127 );
                var maxRetentionParameter = sqlCommandParameters.AddTimeSpanAsInt64( "@MaxRetention", maxRetention );
                var gNSSDeviceParameter = sqlCommandParameters.AddReference( "@GNSSDevice", gNSSDevice );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    id = (Guid)idParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool UpdateGNSSLatitudeTimeseries( Guid id, ref long rowVersion, Guid? catalog, string name, TimeSpan maxRetention, Guid gNSSDevice )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "GNSSLatitudeTimeseriesUpdate";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion, System.Data.ParameterDirection.InputOutput );
                var catalogParameter = sqlCommandParameters.AddReference( "@Catalog", catalog );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@Name", name, 127 );
                var maxRetentionParameter = sqlCommandParameters.AddTimeSpanAsInt64( "@MaxRetention", maxRetention );
                var gNSSDeviceParameter = sqlCommandParameters.AddReference( "@GNSSDevice", gNSSDevice );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    rowVersion = (long)rowVersionParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool DeleteGNSSLatitudeTimeseries( Guid id, long rowVersion )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "GNSSLatitudeTimeseriesDelete";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool InsertGNSSLongitudeTimeseries( ref Guid id, Guid? catalog, string name, TimeSpan maxRetention, Guid gNSSDevice )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "GNSSLongitudeTimeseriesInsert";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id, System.Data.ParameterDirection.InputOutput );
                var catalogParameter = sqlCommandParameters.AddReference( "@Catalog", catalog );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@Name", name, 127 );
                var maxRetentionParameter = sqlCommandParameters.AddTimeSpanAsInt64( "@MaxRetention", maxRetention );
                var gNSSDeviceParameter = sqlCommandParameters.AddReference( "@GNSSDevice", gNSSDevice );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    id = (Guid)idParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool UpdateGNSSLongitudeTimeseries( Guid id, ref long rowVersion, Guid? catalog, string name, TimeSpan maxRetention, Guid gNSSDevice )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "GNSSLongitudeTimeseriesUpdate";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion, System.Data.ParameterDirection.InputOutput );
                var catalogParameter = sqlCommandParameters.AddReference( "@Catalog", catalog );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@Name", name, 127 );
                var maxRetentionParameter = sqlCommandParameters.AddTimeSpanAsInt64( "@MaxRetention", maxRetention );
                var gNSSDeviceParameter = sqlCommandParameters.AddReference( "@GNSSDevice", gNSSDevice );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    rowVersion = (long)rowVersionParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool DeleteGNSSLongitudeTimeseries( Guid id, long rowVersion )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "GNSSLongitudeTimeseriesDelete";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool InsertGyroCourseTimeseries( ref Guid id, Guid? catalog, string name, TimeSpan maxRetention, Guid gyroDevice )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "GyroCourseTimeseriesInsert";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id, System.Data.ParameterDirection.InputOutput );
                var catalogParameter = sqlCommandParameters.AddReference( "@Catalog", catalog );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@Name", name, 127 );
                var maxRetentionParameter = sqlCommandParameters.AddTimeSpanAsInt64( "@MaxRetention", maxRetention );
                var gyroDeviceParameter = sqlCommandParameters.AddReference( "@GyroDevice", gyroDevice );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    id = (Guid)idParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool UpdateGyroCourseTimeseries( Guid id, ref long rowVersion, Guid? catalog, string name, TimeSpan maxRetention, Guid gyroDevice )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "GyroCourseTimeseriesUpdate";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion, System.Data.ParameterDirection.InputOutput );
                var catalogParameter = sqlCommandParameters.AddReference( "@Catalog", catalog );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@Name", name, 127 );
                var maxRetentionParameter = sqlCommandParameters.AddTimeSpanAsInt64( "@MaxRetention", maxRetention );
                var gyroDeviceParameter = sqlCommandParameters.AddReference( "@GyroDevice", gyroDevice );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    rowVersion = (long)rowVersionParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool DeleteGyroCourseTimeseries( Guid id, long rowVersion )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "GyroCourseTimeseriesDelete";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool InsertGyroHeadingMagneticNorthTimeseries( ref Guid id, Guid? catalog, string name, TimeSpan maxRetention, Guid gyroDevice )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "GyroHeadingMagneticNorthTimeseriesInsert";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id, System.Data.ParameterDirection.InputOutput );
                var catalogParameter = sqlCommandParameters.AddReference( "@Catalog", catalog );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@Name", name, 127 );
                var maxRetentionParameter = sqlCommandParameters.AddTimeSpanAsInt64( "@MaxRetention", maxRetention );
                var gyroDeviceParameter = sqlCommandParameters.AddReference( "@GyroDevice", gyroDevice );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    id = (Guid)idParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool UpdateGyroHeadingMagneticNorthTimeseries( Guid id, ref long rowVersion, Guid? catalog, string name, TimeSpan maxRetention, Guid gyroDevice )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "GyroHeadingMagneticNorthTimeseriesUpdate";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion, System.Data.ParameterDirection.InputOutput );
                var catalogParameter = sqlCommandParameters.AddReference( "@Catalog", catalog );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@Name", name, 127 );
                var maxRetentionParameter = sqlCommandParameters.AddTimeSpanAsInt64( "@MaxRetention", maxRetention );
                var gyroDeviceParameter = sqlCommandParameters.AddReference( "@GyroDevice", gyroDevice );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    rowVersion = (long)rowVersionParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool DeleteGyroHeadingMagneticNorthTimeseries( Guid id, long rowVersion )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "GyroHeadingMagneticNorthTimeseriesDelete";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool InsertGyroHeadingTrueNorthTimeseries( ref Guid id, Guid? catalog, string name, TimeSpan maxRetention, Guid gyroDevice )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "GyroHeadingTrueNorthTimeseriesInsert";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id, System.Data.ParameterDirection.InputOutput );
                var catalogParameter = sqlCommandParameters.AddReference( "@Catalog", catalog );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@Name", name, 127 );
                var maxRetentionParameter = sqlCommandParameters.AddTimeSpanAsInt64( "@MaxRetention", maxRetention );
                var gyroDeviceParameter = sqlCommandParameters.AddReference( "@GyroDevice", gyroDevice );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    id = (Guid)idParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool UpdateGyroHeadingTrueNorthTimeseries( Guid id, ref long rowVersion, Guid? catalog, string name, TimeSpan maxRetention, Guid gyroDevice )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "GyroHeadingTrueNorthTimeseriesUpdate";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion, System.Data.ParameterDirection.InputOutput );
                var catalogParameter = sqlCommandParameters.AddReference( "@Catalog", catalog );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@Name", name, 127 );
                var maxRetentionParameter = sqlCommandParameters.AddTimeSpanAsInt64( "@MaxRetention", maxRetention );
                var gyroDeviceParameter = sqlCommandParameters.AddReference( "@GyroDevice", gyroDevice );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    rowVersion = (long)rowVersionParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool DeleteGyroHeadingTrueNorthTimeseries( Guid id, long rowVersion )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "GyroHeadingTrueNorthTimeseriesDelete";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool InsertGyroPitchTimeseries( ref Guid id, Guid? catalog, string name, TimeSpan maxRetention, Guid gyroDevice )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "GyroPitchTimeseriesInsert";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id, System.Data.ParameterDirection.InputOutput );
                var catalogParameter = sqlCommandParameters.AddReference( "@Catalog", catalog );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@Name", name, 127 );
                var maxRetentionParameter = sqlCommandParameters.AddTimeSpanAsInt64( "@MaxRetention", maxRetention );
                var gyroDeviceParameter = sqlCommandParameters.AddReference( "@GyroDevice", gyroDevice );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    id = (Guid)idParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool UpdateGyroPitchTimeseries( Guid id, ref long rowVersion, Guid? catalog, string name, TimeSpan maxRetention, Guid gyroDevice )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "GyroPitchTimeseriesUpdate";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion, System.Data.ParameterDirection.InputOutput );
                var catalogParameter = sqlCommandParameters.AddReference( "@Catalog", catalog );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@Name", name, 127 );
                var maxRetentionParameter = sqlCommandParameters.AddTimeSpanAsInt64( "@MaxRetention", maxRetention );
                var gyroDeviceParameter = sqlCommandParameters.AddReference( "@GyroDevice", gyroDevice );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    rowVersion = (long)rowVersionParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool DeleteGyroPitchTimeseries( Guid id, long rowVersion )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "GyroPitchTimeseriesDelete";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool InsertGyroRateOfTurnTimeseries( ref Guid id, Guid? catalog, string name, TimeSpan maxRetention, Guid gyroDevice )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "GyroRateOfTurnTimeseriesInsert";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id, System.Data.ParameterDirection.InputOutput );
                var catalogParameter = sqlCommandParameters.AddReference( "@Catalog", catalog );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@Name", name, 127 );
                var maxRetentionParameter = sqlCommandParameters.AddTimeSpanAsInt64( "@MaxRetention", maxRetention );
                var gyroDeviceParameter = sqlCommandParameters.AddReference( "@GyroDevice", gyroDevice );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    id = (Guid)idParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool UpdateGyroRateOfTurnTimeseries( Guid id, ref long rowVersion, Guid? catalog, string name, TimeSpan maxRetention, Guid gyroDevice )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "GyroRateOfTurnTimeseriesUpdate";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion, System.Data.ParameterDirection.InputOutput );
                var catalogParameter = sqlCommandParameters.AddReference( "@Catalog", catalog );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@Name", name, 127 );
                var maxRetentionParameter = sqlCommandParameters.AddTimeSpanAsInt64( "@MaxRetention", maxRetention );
                var gyroDeviceParameter = sqlCommandParameters.AddReference( "@GyroDevice", gyroDevice );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    rowVersion = (long)rowVersionParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool DeleteGyroRateOfTurnTimeseries( Guid id, long rowVersion )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "GyroRateOfTurnTimeseriesDelete";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool InsertGyroRollTimeseries( ref Guid id, Guid? catalog, string name, TimeSpan maxRetention, Guid gyroDevice )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "GyroRollTimeseriesInsert";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id, System.Data.ParameterDirection.InputOutput );
                var catalogParameter = sqlCommandParameters.AddReference( "@Catalog", catalog );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@Name", name, 127 );
                var maxRetentionParameter = sqlCommandParameters.AddTimeSpanAsInt64( "@MaxRetention", maxRetention );
                var gyroDeviceParameter = sqlCommandParameters.AddReference( "@GyroDevice", gyroDevice );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    id = (Guid)idParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool UpdateGyroRollTimeseries( Guid id, ref long rowVersion, Guid? catalog, string name, TimeSpan maxRetention, Guid gyroDevice )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "GyroRollTimeseriesUpdate";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion, System.Data.ParameterDirection.InputOutput );
                var catalogParameter = sqlCommandParameters.AddReference( "@Catalog", catalog );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@Name", name, 127 );
                var maxRetentionParameter = sqlCommandParameters.AddTimeSpanAsInt64( "@MaxRetention", maxRetention );
                var gyroDeviceParameter = sqlCommandParameters.AddReference( "@GyroDevice", gyroDevice );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    rowVersion = (long)rowVersionParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool DeleteGyroRollTimeseries( Guid id, long rowVersion )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "GyroRollTimeseriesDelete";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool InsertGyroSpeedTimeseries( ref Guid id, Guid? catalog, string name, TimeSpan maxRetention, Guid gyroDevice )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "GyroSpeedTimeseriesInsert";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id, System.Data.ParameterDirection.InputOutput );
                var catalogParameter = sqlCommandParameters.AddReference( "@Catalog", catalog );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@Name", name, 127 );
                var maxRetentionParameter = sqlCommandParameters.AddTimeSpanAsInt64( "@MaxRetention", maxRetention );
                var gyroDeviceParameter = sqlCommandParameters.AddReference( "@GyroDevice", gyroDevice );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    id = (Guid)idParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool UpdateGyroSpeedTimeseries( Guid id, ref long rowVersion, Guid? catalog, string name, TimeSpan maxRetention, Guid gyroDevice )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "GyroSpeedTimeseriesUpdate";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion, System.Data.ParameterDirection.InputOutput );
                var catalogParameter = sqlCommandParameters.AddReference( "@Catalog", catalog );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@Name", name, 127 );
                var maxRetentionParameter = sqlCommandParameters.AddTimeSpanAsInt64( "@MaxRetention", maxRetention );
                var gyroDeviceParameter = sqlCommandParameters.AddReference( "@GyroDevice", gyroDevice );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    rowVersion = (long)rowVersionParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool DeleteGyroSpeedTimeseries( Guid id, long rowVersion )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "GyroSpeedTimeseriesDelete";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool InsertRadarLatitudeTimeseries( ref Guid id, Guid? catalog, string name, TimeSpan maxRetention, Guid radar )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "RadarLatitudeTimeseriesInsert";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id, System.Data.ParameterDirection.InputOutput );
                var catalogParameter = sqlCommandParameters.AddReference( "@Catalog", catalog );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@Name", name, 127 );
                var maxRetentionParameter = sqlCommandParameters.AddTimeSpanAsInt64( "@MaxRetention", maxRetention );
                var radarParameter = sqlCommandParameters.AddReference( "@Radar", radar );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    id = (Guid)idParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool UpdateRadarLatitudeTimeseries( Guid id, ref long rowVersion, Guid? catalog, string name, TimeSpan maxRetention, Guid radar )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "RadarLatitudeTimeseriesUpdate";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion, System.Data.ParameterDirection.InputOutput );
                var catalogParameter = sqlCommandParameters.AddReference( "@Catalog", catalog );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@Name", name, 127 );
                var maxRetentionParameter = sqlCommandParameters.AddTimeSpanAsInt64( "@MaxRetention", maxRetention );
                var radarParameter = sqlCommandParameters.AddReference( "@Radar", radar );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    rowVersion = (long)rowVersionParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool DeleteRadarLatitudeTimeseries( Guid id, long rowVersion )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "RadarLatitudeTimeseriesDelete";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool InsertRadarLongitudeTimeseries( ref Guid id, Guid? catalog, string name, TimeSpan maxRetention, Guid radar )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "RadarLongitudeTimeseriesInsert";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id, System.Data.ParameterDirection.InputOutput );
                var catalogParameter = sqlCommandParameters.AddReference( "@Catalog", catalog );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@Name", name, 127 );
                var maxRetentionParameter = sqlCommandParameters.AddTimeSpanAsInt64( "@MaxRetention", maxRetention );
                var radarParameter = sqlCommandParameters.AddReference( "@Radar", radar );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    id = (Guid)idParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool UpdateRadarLongitudeTimeseries( Guid id, ref long rowVersion, Guid? catalog, string name, TimeSpan maxRetention, Guid radar )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "RadarLongitudeTimeseriesUpdate";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion, System.Data.ParameterDirection.InputOutput );
                var catalogParameter = sqlCommandParameters.AddReference( "@Catalog", catalog );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@Name", name, 127 );
                var maxRetentionParameter = sqlCommandParameters.AddTimeSpanAsInt64( "@MaxRetention", maxRetention );
                var radarParameter = sqlCommandParameters.AddReference( "@Radar", radar );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    rowVersion = (long)rowVersionParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool DeleteRadarLongitudeTimeseries( Guid id, long rowVersion )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "RadarLongitudeTimeseriesDelete";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool InsertRadomeDewPointTimeseries( ref Guid id, Guid? catalog, string name, TimeSpan maxRetention, Guid radome )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "RadomeDewPointTimeseriesInsert";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id, System.Data.ParameterDirection.InputOutput );
                var catalogParameter = sqlCommandParameters.AddReference( "@Catalog", catalog );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@Name", name, 127 );
                var maxRetentionParameter = sqlCommandParameters.AddTimeSpanAsInt64( "@MaxRetention", maxRetention );
                var radomeParameter = sqlCommandParameters.AddReference( "@Radome", radome );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    id = (Guid)idParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool UpdateRadomeDewPointTimeseries( Guid id, ref long rowVersion, Guid? catalog, string name, TimeSpan maxRetention, Guid radome )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "RadomeDewPointTimeseriesUpdate";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion, System.Data.ParameterDirection.InputOutput );
                var catalogParameter = sqlCommandParameters.AddReference( "@Catalog", catalog );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@Name", name, 127 );
                var maxRetentionParameter = sqlCommandParameters.AddTimeSpanAsInt64( "@MaxRetention", maxRetention );
                var radomeParameter = sqlCommandParameters.AddReference( "@Radome", radome );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    rowVersion = (long)rowVersionParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool DeleteRadomeDewPointTimeseries( Guid id, long rowVersion )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "RadomeDewPointTimeseriesDelete";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool InsertRadomePressureTimeseries( ref Guid id, Guid? catalog, string name, TimeSpan maxRetention, Guid radome )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "RadomePressureTimeseriesInsert";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id, System.Data.ParameterDirection.InputOutput );
                var catalogParameter = sqlCommandParameters.AddReference( "@Catalog", catalog );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@Name", name, 127 );
                var maxRetentionParameter = sqlCommandParameters.AddTimeSpanAsInt64( "@MaxRetention", maxRetention );
                var radomeParameter = sqlCommandParameters.AddReference( "@Radome", radome );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    id = (Guid)idParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool UpdateRadomePressureTimeseries( Guid id, ref long rowVersion, Guid? catalog, string name, TimeSpan maxRetention, Guid radome )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "RadomePressureTimeseriesUpdate";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion, System.Data.ParameterDirection.InputOutput );
                var catalogParameter = sqlCommandParameters.AddReference( "@Catalog", catalog );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@Name", name, 127 );
                var maxRetentionParameter = sqlCommandParameters.AddTimeSpanAsInt64( "@MaxRetention", maxRetention );
                var radomeParameter = sqlCommandParameters.AddReference( "@Radome", radome );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    rowVersion = (long)rowVersionParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool DeleteRadomePressureTimeseries( Guid id, long rowVersion )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "RadomePressureTimeseriesDelete";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool InsertRadomeTemperatureTimeseries( ref Guid id, Guid? catalog, string name, TimeSpan maxRetention, Guid radome )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "RadomeTemperatureTimeseriesInsert";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id, System.Data.ParameterDirection.InputOutput );
                var catalogParameter = sqlCommandParameters.AddReference( "@Catalog", catalog );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@Name", name, 127 );
                var maxRetentionParameter = sqlCommandParameters.AddTimeSpanAsInt64( "@MaxRetention", maxRetention );
                var radomeParameter = sqlCommandParameters.AddReference( "@Radome", radome );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    id = (Guid)idParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool UpdateRadomeTemperatureTimeseries( Guid id, ref long rowVersion, Guid? catalog, string name, TimeSpan maxRetention, Guid radome )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "RadomeTemperatureTimeseriesUpdate";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion, System.Data.ParameterDirection.InputOutput );
                var catalogParameter = sqlCommandParameters.AddReference( "@Catalog", catalog );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@Name", name, 127 );
                var maxRetentionParameter = sqlCommandParameters.AddTimeSpanAsInt64( "@MaxRetention", maxRetention );
                var radomeParameter = sqlCommandParameters.AddReference( "@Radome", radome );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    rowVersion = (long)rowVersionParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool DeleteRadomeTemperatureTimeseries( Guid id, long rowVersion )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "RadomeTemperatureTimeseriesDelete";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool InsertVesselDraughtTimeseries( ref Guid id, Guid? catalog, string name, TimeSpan maxRetention, Guid vessel )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "VesselDraughtTimeseriesInsert";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id, System.Data.ParameterDirection.InputOutput );
                var catalogParameter = sqlCommandParameters.AddReference( "@Catalog", catalog );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@Name", name, 127 );
                var maxRetentionParameter = sqlCommandParameters.AddTimeSpanAsInt64( "@MaxRetention", maxRetention );
                var vesselParameter = sqlCommandParameters.AddReference( "@Vessel", vessel );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    id = (Guid)idParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool UpdateVesselDraughtTimeseries( Guid id, ref long rowVersion, Guid? catalog, string name, TimeSpan maxRetention, Guid vessel )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "VesselDraughtTimeseriesUpdate";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion, System.Data.ParameterDirection.InputOutput );
                var catalogParameter = sqlCommandParameters.AddReference( "@Catalog", catalog );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@Name", name, 127 );
                var maxRetentionParameter = sqlCommandParameters.AddTimeSpanAsInt64( "@MaxRetention", maxRetention );
                var vesselParameter = sqlCommandParameters.AddReference( "@Vessel", vessel );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    rowVersion = (long)rowVersionParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool DeleteVesselDraughtTimeseries( Guid id, long rowVersion )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "VesselDraughtTimeseriesDelete";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool InsertViewLatitudeTimeseries( ref Guid id, Guid? catalog, string name, TimeSpan maxRetention, Guid view )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "ViewLatitudeTimeseriesInsert";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id, System.Data.ParameterDirection.InputOutput );
                var catalogParameter = sqlCommandParameters.AddReference( "@Catalog", catalog );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@Name", name, 127 );
                var maxRetentionParameter = sqlCommandParameters.AddTimeSpanAsInt64( "@MaxRetention", maxRetention );
                var viewParameter = sqlCommandParameters.AddReference( "@View", view );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    id = (Guid)idParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool UpdateViewLatitudeTimeseries( Guid id, ref long rowVersion, Guid? catalog, string name, TimeSpan maxRetention, Guid view )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "ViewLatitudeTimeseriesUpdate";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion, System.Data.ParameterDirection.InputOutput );
                var catalogParameter = sqlCommandParameters.AddReference( "@Catalog", catalog );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@Name", name, 127 );
                var maxRetentionParameter = sqlCommandParameters.AddTimeSpanAsInt64( "@MaxRetention", maxRetention );
                var viewParameter = sqlCommandParameters.AddReference( "@View", view );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    rowVersion = (long)rowVersionParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool DeleteViewLatitudeTimeseries( Guid id, long rowVersion )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "ViewLatitudeTimeseriesDelete";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool InsertViewLongitudeTimeseries( ref Guid id, Guid? catalog, string name, TimeSpan maxRetention, Guid view )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "ViewLongitudeTimeseriesInsert";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id, System.Data.ParameterDirection.InputOutput );
                var catalogParameter = sqlCommandParameters.AddReference( "@Catalog", catalog );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@Name", name, 127 );
                var maxRetentionParameter = sqlCommandParameters.AddTimeSpanAsInt64( "@MaxRetention", maxRetention );
                var viewParameter = sqlCommandParameters.AddReference( "@View", view );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    id = (Guid)idParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool UpdateViewLongitudeTimeseries( Guid id, ref long rowVersion, Guid? catalog, string name, TimeSpan maxRetention, Guid view )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "ViewLongitudeTimeseriesUpdate";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion, System.Data.ParameterDirection.InputOutput );
                var catalogParameter = sqlCommandParameters.AddReference( "@Catalog", catalog );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@Name", name, 127 );
                var maxRetentionParameter = sqlCommandParameters.AddTimeSpanAsInt64( "@MaxRetention", maxRetention );
                var viewParameter = sqlCommandParameters.AddReference( "@View", view );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    rowVersion = (long)rowVersionParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool DeleteViewLongitudeTimeseries( Guid id, long rowVersion )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "ViewLongitudeTimeseriesDelete";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool InsertViewZoomLevelTimeseries( ref Guid id, Guid? catalog, string name, TimeSpan maxRetention, Guid view )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "ViewZoomLevelTimeseriesInsert";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id, System.Data.ParameterDirection.InputOutput );
                var catalogParameter = sqlCommandParameters.AddReference( "@Catalog", catalog );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@Name", name, 127 );
                var maxRetentionParameter = sqlCommandParameters.AddTimeSpanAsInt64( "@MaxRetention", maxRetention );
                var viewParameter = sqlCommandParameters.AddReference( "@View", view );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    id = (Guid)idParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool UpdateViewZoomLevelTimeseries( Guid id, ref long rowVersion, Guid? catalog, string name, TimeSpan maxRetention, Guid view )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "ViewZoomLevelTimeseriesUpdate";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion, System.Data.ParameterDirection.InputOutput );
                var catalogParameter = sqlCommandParameters.AddReference( "@Catalog", catalog );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@Name", name, 127 );
                var maxRetentionParameter = sqlCommandParameters.AddTimeSpanAsInt64( "@MaxRetention", maxRetention );
                var viewParameter = sqlCommandParameters.AddReference( "@View", view );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    rowVersion = (long)rowVersionParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool DeleteViewZoomLevelTimeseries( Guid id, long rowVersion )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "ViewZoomLevelTimeseriesDelete";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool InsertWeatherStationAbsoluteHumidityTimeseries( ref Guid id, Guid? catalog, string name, TimeSpan maxRetention, Guid weatherStation )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "WeatherStationAbsoluteHumidityTimeseriesInsert";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id, System.Data.ParameterDirection.InputOutput );
                var catalogParameter = sqlCommandParameters.AddReference( "@Catalog", catalog );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@Name", name, 127 );
                var maxRetentionParameter = sqlCommandParameters.AddTimeSpanAsInt64( "@MaxRetention", maxRetention );
                var weatherStationParameter = sqlCommandParameters.AddReference( "@WeatherStation", weatherStation );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    id = (Guid)idParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool UpdateWeatherStationAbsoluteHumidityTimeseries( Guid id, ref long rowVersion, Guid? catalog, string name, TimeSpan maxRetention, Guid weatherStation )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "WeatherStationAbsoluteHumidityTimeseriesUpdate";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion, System.Data.ParameterDirection.InputOutput );
                var catalogParameter = sqlCommandParameters.AddReference( "@Catalog", catalog );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@Name", name, 127 );
                var maxRetentionParameter = sqlCommandParameters.AddTimeSpanAsInt64( "@MaxRetention", maxRetention );
                var weatherStationParameter = sqlCommandParameters.AddReference( "@WeatherStation", weatherStation );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    rowVersion = (long)rowVersionParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool DeleteWeatherStationAbsoluteHumidityTimeseries( Guid id, long rowVersion )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "WeatherStationAbsoluteHumidityTimeseriesDelete";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool InsertWeatherStationAirTemperatureTimeseries( ref Guid id, Guid? catalog, string name, TimeSpan maxRetention, Guid weatherStation )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "WeatherStationAirTemperatureTimeseriesInsert";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id, System.Data.ParameterDirection.InputOutput );
                var catalogParameter = sqlCommandParameters.AddReference( "@Catalog", catalog );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@Name", name, 127 );
                var maxRetentionParameter = sqlCommandParameters.AddTimeSpanAsInt64( "@MaxRetention", maxRetention );
                var weatherStationParameter = sqlCommandParameters.AddReference( "@WeatherStation", weatherStation );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    id = (Guid)idParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool UpdateWeatherStationAirTemperatureTimeseries( Guid id, ref long rowVersion, Guid? catalog, string name, TimeSpan maxRetention, Guid weatherStation )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "WeatherStationAirTemperatureTimeseriesUpdate";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion, System.Data.ParameterDirection.InputOutput );
                var catalogParameter = sqlCommandParameters.AddReference( "@Catalog", catalog );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@Name", name, 127 );
                var maxRetentionParameter = sqlCommandParameters.AddTimeSpanAsInt64( "@MaxRetention", maxRetention );
                var weatherStationParameter = sqlCommandParameters.AddReference( "@WeatherStation", weatherStation );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    rowVersion = (long)rowVersionParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool DeleteWeatherStationAirTemperatureTimeseries( Guid id, long rowVersion )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "WeatherStationAirTemperatureTimeseriesDelete";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool InsertWeatherStationBarometricPressureTimeseries( ref Guid id, Guid? catalog, string name, TimeSpan maxRetention, Guid weatherStation )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "WeatherStationBarometricPressureTimeseriesInsert";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id, System.Data.ParameterDirection.InputOutput );
                var catalogParameter = sqlCommandParameters.AddReference( "@Catalog", catalog );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@Name", name, 127 );
                var maxRetentionParameter = sqlCommandParameters.AddTimeSpanAsInt64( "@MaxRetention", maxRetention );
                var weatherStationParameter = sqlCommandParameters.AddReference( "@WeatherStation", weatherStation );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    id = (Guid)idParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool UpdateWeatherStationBarometricPressureTimeseries( Guid id, ref long rowVersion, Guid? catalog, string name, TimeSpan maxRetention, Guid weatherStation )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "WeatherStationBarometricPressureTimeseriesUpdate";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion, System.Data.ParameterDirection.InputOutput );
                var catalogParameter = sqlCommandParameters.AddReference( "@Catalog", catalog );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@Name", name, 127 );
                var maxRetentionParameter = sqlCommandParameters.AddTimeSpanAsInt64( "@MaxRetention", maxRetention );
                var weatherStationParameter = sqlCommandParameters.AddReference( "@WeatherStation", weatherStation );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    rowVersion = (long)rowVersionParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool DeleteWeatherStationBarometricPressureTimeseries( Guid id, long rowVersion )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "WeatherStationBarometricPressureTimeseriesDelete";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool InsertWeatherStationDewPointTimeseries( ref Guid id, Guid? catalog, string name, TimeSpan maxRetention, Guid weatherStation )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "WeatherStationDewPointTimeseriesInsert";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id, System.Data.ParameterDirection.InputOutput );
                var catalogParameter = sqlCommandParameters.AddReference( "@Catalog", catalog );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@Name", name, 127 );
                var maxRetentionParameter = sqlCommandParameters.AddTimeSpanAsInt64( "@MaxRetention", maxRetention );
                var weatherStationParameter = sqlCommandParameters.AddReference( "@WeatherStation", weatherStation );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    id = (Guid)idParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool UpdateWeatherStationDewPointTimeseries( Guid id, ref long rowVersion, Guid? catalog, string name, TimeSpan maxRetention, Guid weatherStation )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "WeatherStationDewPointTimeseriesUpdate";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion, System.Data.ParameterDirection.InputOutput );
                var catalogParameter = sqlCommandParameters.AddReference( "@Catalog", catalog );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@Name", name, 127 );
                var maxRetentionParameter = sqlCommandParameters.AddTimeSpanAsInt64( "@MaxRetention", maxRetention );
                var weatherStationParameter = sqlCommandParameters.AddReference( "@WeatherStation", weatherStation );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    rowVersion = (long)rowVersionParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool DeleteWeatherStationDewPointTimeseries( Guid id, long rowVersion )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "WeatherStationDewPointTimeseriesDelete";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool InsertWeatherStationRelativeHumidityTimeseries( ref Guid id, Guid? catalog, string name, TimeSpan maxRetention, Guid weatherStation )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "WeatherStationRelativeHumidityTimeseriesInsert";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id, System.Data.ParameterDirection.InputOutput );
                var catalogParameter = sqlCommandParameters.AddReference( "@Catalog", catalog );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@Name", name, 127 );
                var maxRetentionParameter = sqlCommandParameters.AddTimeSpanAsInt64( "@MaxRetention", maxRetention );
                var weatherStationParameter = sqlCommandParameters.AddReference( "@WeatherStation", weatherStation );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    id = (Guid)idParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool UpdateWeatherStationRelativeHumidityTimeseries( Guid id, ref long rowVersion, Guid? catalog, string name, TimeSpan maxRetention, Guid weatherStation )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "WeatherStationRelativeHumidityTimeseriesUpdate";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion, System.Data.ParameterDirection.InputOutput );
                var catalogParameter = sqlCommandParameters.AddReference( "@Catalog", catalog );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@Name", name, 127 );
                var maxRetentionParameter = sqlCommandParameters.AddTimeSpanAsInt64( "@MaxRetention", maxRetention );
                var weatherStationParameter = sqlCommandParameters.AddReference( "@WeatherStation", weatherStation );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    rowVersion = (long)rowVersionParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool DeleteWeatherStationRelativeHumidityTimeseries( Guid id, long rowVersion )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "WeatherStationRelativeHumidityTimeseriesDelete";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool InsertWeatherStationWaterTemperatureTimeseries( ref Guid id, Guid? catalog, string name, TimeSpan maxRetention, Guid weatherStation )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "WeatherStationWaterTemperatureTimeseriesInsert";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id, System.Data.ParameterDirection.InputOutput );
                var catalogParameter = sqlCommandParameters.AddReference( "@Catalog", catalog );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@Name", name, 127 );
                var maxRetentionParameter = sqlCommandParameters.AddTimeSpanAsInt64( "@MaxRetention", maxRetention );
                var weatherStationParameter = sqlCommandParameters.AddReference( "@WeatherStation", weatherStation );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    id = (Guid)idParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool UpdateWeatherStationWaterTemperatureTimeseries( Guid id, ref long rowVersion, Guid? catalog, string name, TimeSpan maxRetention, Guid weatherStation )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "WeatherStationWaterTemperatureTimeseriesUpdate";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion, System.Data.ParameterDirection.InputOutput );
                var catalogParameter = sqlCommandParameters.AddReference( "@Catalog", catalog );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@Name", name, 127 );
                var maxRetentionParameter = sqlCommandParameters.AddTimeSpanAsInt64( "@MaxRetention", maxRetention );
                var weatherStationParameter = sqlCommandParameters.AddReference( "@WeatherStation", weatherStation );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    rowVersion = (long)rowVersionParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool DeleteWeatherStationWaterTemperatureTimeseries( Guid id, long rowVersion )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "WeatherStationWaterTemperatureTimeseriesDelete";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool InsertWeatherStationWindDirectionTimeseries( ref Guid id, Guid? catalog, string name, TimeSpan maxRetention, Guid weatherStation )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "WeatherStationWindDirectionTimeseriesInsert";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id, System.Data.ParameterDirection.InputOutput );
                var catalogParameter = sqlCommandParameters.AddReference( "@Catalog", catalog );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@Name", name, 127 );
                var maxRetentionParameter = sqlCommandParameters.AddTimeSpanAsInt64( "@MaxRetention", maxRetention );
                var weatherStationParameter = sqlCommandParameters.AddReference( "@WeatherStation", weatherStation );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    id = (Guid)idParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool UpdateWeatherStationWindDirectionTimeseries( Guid id, ref long rowVersion, Guid? catalog, string name, TimeSpan maxRetention, Guid weatherStation )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "WeatherStationWindDirectionTimeseriesUpdate";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion, System.Data.ParameterDirection.InputOutput );
                var catalogParameter = sqlCommandParameters.AddReference( "@Catalog", catalog );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@Name", name, 127 );
                var maxRetentionParameter = sqlCommandParameters.AddTimeSpanAsInt64( "@MaxRetention", maxRetention );
                var weatherStationParameter = sqlCommandParameters.AddReference( "@WeatherStation", weatherStation );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    rowVersion = (long)rowVersionParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool DeleteWeatherStationWindDirectionTimeseries( Guid id, long rowVersion )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "WeatherStationWindDirectionTimeseriesDelete";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool InsertWeatherStationWindSpeedTimeseries( ref Guid id, Guid? catalog, string name, TimeSpan maxRetention, Guid weatherStation )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "WeatherStationWindSpeedTimeseriesInsert";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id, System.Data.ParameterDirection.InputOutput );
                var catalogParameter = sqlCommandParameters.AddReference( "@Catalog", catalog );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@Name", name, 127 );
                var maxRetentionParameter = sqlCommandParameters.AddTimeSpanAsInt64( "@MaxRetention", maxRetention );
                var weatherStationParameter = sqlCommandParameters.AddReference( "@WeatherStation", weatherStation );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    id = (Guid)idParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool UpdateWeatherStationWindSpeedTimeseries( Guid id, ref long rowVersion, Guid? catalog, string name, TimeSpan maxRetention, Guid weatherStation )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "WeatherStationWindSpeedTimeseriesUpdate";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion, System.Data.ParameterDirection.InputOutput );
                var catalogParameter = sqlCommandParameters.AddReference( "@Catalog", catalog );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@Name", name, 127 );
                var maxRetentionParameter = sqlCommandParameters.AddTimeSpanAsInt64( "@MaxRetention", maxRetention );
                var weatherStationParameter = sqlCommandParameters.AddReference( "@WeatherStation", weatherStation );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    rowVersion = (long)rowVersionParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool DeleteWeatherStationWindSpeedTimeseries( Guid id, long rowVersion )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "WeatherStationWindSpeedTimeseriesDelete";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool InsertGeoPosition2DTimeseries( ref Guid id, Guid? catalog, string name, TimeSpan maxRetention )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "GeoPosition2DTimeseriesInsert";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id, System.Data.ParameterDirection.InputOutput );
                var catalogParameter = sqlCommandParameters.AddReference( "@Catalog", catalog );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@Name", name, 127 );
                var maxRetentionParameter = sqlCommandParameters.AddTimeSpanAsInt64( "@MaxRetention", maxRetention );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    id = (Guid)idParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool UpdateGeoPosition2DTimeseries( Guid id, ref long rowVersion, Guid? catalog, string name, TimeSpan maxRetention )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "GeoPosition2DTimeseriesUpdate";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion, System.Data.ParameterDirection.InputOutput );
                var catalogParameter = sqlCommandParameters.AddReference( "@Catalog", catalog );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@Name", name, 127 );
                var maxRetentionParameter = sqlCommandParameters.AddTimeSpanAsInt64( "@MaxRetention", maxRetention );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    rowVersion = (long)rowVersionParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool DeleteGeoPosition2DTimeseries( Guid id, long rowVersion )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "GeoPosition2DTimeseriesDelete";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool InsertAisAidToNavigationPositionTimeseries( ref Guid id, Guid? catalog, string name, TimeSpan maxRetention, Guid aidToNavigation )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "AisAidToNavigationPositionTimeseriesInsert";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id, System.Data.ParameterDirection.InputOutput );
                var catalogParameter = sqlCommandParameters.AddReference( "@Catalog", catalog );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@Name", name, 127 );
                var maxRetentionParameter = sqlCommandParameters.AddTimeSpanAsInt64( "@MaxRetention", maxRetention );
                var aidToNavigationParameter = sqlCommandParameters.AddReference( "@AidToNavigation", aidToNavigation );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    id = (Guid)idParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool UpdateAisAidToNavigationPositionTimeseries( Guid id, ref long rowVersion, Guid? catalog, string name, TimeSpan maxRetention, Guid aidToNavigation )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "AisAidToNavigationPositionTimeseriesUpdate";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion, System.Data.ParameterDirection.InputOutput );
                var catalogParameter = sqlCommandParameters.AddReference( "@Catalog", catalog );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@Name", name, 127 );
                var maxRetentionParameter = sqlCommandParameters.AddTimeSpanAsInt64( "@MaxRetention", maxRetention );
                var aidToNavigationParameter = sqlCommandParameters.AddReference( "@AidToNavigation", aidToNavigation );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    rowVersion = (long)rowVersionParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool DeleteAisAidToNavigationPositionTimeseries( Guid id, long rowVersion )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "AisAidToNavigationPositionTimeseriesDelete";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool InsertGeoPosition3DTimeseries( ref Guid id, Guid? catalog, string name, TimeSpan maxRetention )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "GeoPosition3DTimeseriesInsert";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id, System.Data.ParameterDirection.InputOutput );
                var catalogParameter = sqlCommandParameters.AddReference( "@Catalog", catalog );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@Name", name, 127 );
                var maxRetentionParameter = sqlCommandParameters.AddTimeSpanAsInt64( "@MaxRetention", maxRetention );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    id = (Guid)idParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool UpdateGeoPosition3DTimeseries( Guid id, ref long rowVersion, Guid? catalog, string name, TimeSpan maxRetention )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "GeoPosition3DTimeseriesUpdate";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion, System.Data.ParameterDirection.InputOutput );
                var catalogParameter = sqlCommandParameters.AddReference( "@Catalog", catalog );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@Name", name, 127 );
                var maxRetentionParameter = sqlCommandParameters.AddTimeSpanAsInt64( "@MaxRetention", maxRetention );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    rowVersion = (long)rowVersionParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool DeleteGeoPosition3DTimeseries( Guid id, long rowVersion )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "GeoPosition3DTimeseriesDelete";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool InsertGuidTimeseries( ref Guid id, Guid? catalog, string name, TimeSpan maxRetention )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "GuidTimeseriesInsert";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id, System.Data.ParameterDirection.InputOutput );
                var catalogParameter = sqlCommandParameters.AddReference( "@Catalog", catalog );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@Name", name, 127 );
                var maxRetentionParameter = sqlCommandParameters.AddTimeSpanAsInt64( "@MaxRetention", maxRetention );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    id = (Guid)idParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool UpdateGuidTimeseries( Guid id, ref long rowVersion, Guid? catalog, string name, TimeSpan maxRetention )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "GuidTimeseriesUpdate";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion, System.Data.ParameterDirection.InputOutput );
                var catalogParameter = sqlCommandParameters.AddReference( "@Catalog", catalog );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@Name", name, 127 );
                var maxRetentionParameter = sqlCommandParameters.AddTimeSpanAsInt64( "@MaxRetention", maxRetention );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    rowVersion = (long)rowVersionParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool DeleteGuidTimeseries( Guid id, long rowVersion )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "GuidTimeseriesDelete";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool InsertInt16Timeseries( ref Guid id, Guid? catalog, string name, TimeSpan maxRetention )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "Int16TimeseriesInsert";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id, System.Data.ParameterDirection.InputOutput );
                var catalogParameter = sqlCommandParameters.AddReference( "@Catalog", catalog );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@Name", name, 127 );
                var maxRetentionParameter = sqlCommandParameters.AddTimeSpanAsInt64( "@MaxRetention", maxRetention );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    id = (Guid)idParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool UpdateInt16Timeseries( Guid id, ref long rowVersion, Guid? catalog, string name, TimeSpan maxRetention )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "Int16TimeseriesUpdate";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion, System.Data.ParameterDirection.InputOutput );
                var catalogParameter = sqlCommandParameters.AddReference( "@Catalog", catalog );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@Name", name, 127 );
                var maxRetentionParameter = sqlCommandParameters.AddTimeSpanAsInt64( "@MaxRetention", maxRetention );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    rowVersion = (long)rowVersionParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool DeleteInt16Timeseries( Guid id, long rowVersion )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "Int16TimeseriesDelete";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool InsertInt32Timeseries( ref Guid id, Guid? catalog, string name, TimeSpan maxRetention )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "Int32TimeseriesInsert";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id, System.Data.ParameterDirection.InputOutput );
                var catalogParameter = sqlCommandParameters.AddReference( "@Catalog", catalog );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@Name", name, 127 );
                var maxRetentionParameter = sqlCommandParameters.AddTimeSpanAsInt64( "@MaxRetention", maxRetention );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    id = (Guid)idParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool UpdateInt32Timeseries( Guid id, ref long rowVersion, Guid? catalog, string name, TimeSpan maxRetention )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "Int32TimeseriesUpdate";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion, System.Data.ParameterDirection.InputOutput );
                var catalogParameter = sqlCommandParameters.AddReference( "@Catalog", catalog );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@Name", name, 127 );
                var maxRetentionParameter = sqlCommandParameters.AddTimeSpanAsInt64( "@MaxRetention", maxRetention );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    rowVersion = (long)rowVersionParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool DeleteInt32Timeseries( Guid id, long rowVersion )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "Int32TimeseriesDelete";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool InsertRadarAzimuthOffsetTimeseries( ref Guid id, Guid? catalog, string name, TimeSpan maxRetention, Guid radar )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "RadarAzimuthOffsetTimeseriesInsert";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id, System.Data.ParameterDirection.InputOutput );
                var catalogParameter = sqlCommandParameters.AddReference( "@Catalog", catalog );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@Name", name, 127 );
                var maxRetentionParameter = sqlCommandParameters.AddTimeSpanAsInt64( "@MaxRetention", maxRetention );
                var radarParameter = sqlCommandParameters.AddReference( "@Radar", radar );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    id = (Guid)idParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool UpdateRadarAzimuthOffsetTimeseries( Guid id, ref long rowVersion, Guid? catalog, string name, TimeSpan maxRetention, Guid radar )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "RadarAzimuthOffsetTimeseriesUpdate";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion, System.Data.ParameterDirection.InputOutput );
                var catalogParameter = sqlCommandParameters.AddReference( "@Catalog", catalog );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@Name", name, 127 );
                var maxRetentionParameter = sqlCommandParameters.AddTimeSpanAsInt64( "@MaxRetention", maxRetention );
                var radarParameter = sqlCommandParameters.AddReference( "@Radar", radar );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    rowVersion = (long)rowVersionParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool DeleteRadarAzimuthOffsetTimeseries( Guid id, long rowVersion )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "RadarAzimuthOffsetTimeseriesDelete";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool InsertRadarFastTimeConstantLevelTimeseries( ref Guid id, Guid? catalog, string name, TimeSpan maxRetention, Guid radar )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "RadarFastTimeConstantLevelTimeseriesInsert";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id, System.Data.ParameterDirection.InputOutput );
                var catalogParameter = sqlCommandParameters.AddReference( "@Catalog", catalog );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@Name", name, 127 );
                var maxRetentionParameter = sqlCommandParameters.AddTimeSpanAsInt64( "@MaxRetention", maxRetention );
                var radarParameter = sqlCommandParameters.AddReference( "@Radar", radar );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    id = (Guid)idParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool UpdateRadarFastTimeConstantLevelTimeseries( Guid id, ref long rowVersion, Guid? catalog, string name, TimeSpan maxRetention, Guid radar )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "RadarFastTimeConstantLevelTimeseriesUpdate";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion, System.Data.ParameterDirection.InputOutput );
                var catalogParameter = sqlCommandParameters.AddReference( "@Catalog", catalog );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@Name", name, 127 );
                var maxRetentionParameter = sqlCommandParameters.AddTimeSpanAsInt64( "@MaxRetention", maxRetention );
                var radarParameter = sqlCommandParameters.AddReference( "@Radar", radar );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    rowVersion = (long)rowVersionParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool DeleteRadarFastTimeConstantLevelTimeseries( Guid id, long rowVersion )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "RadarFastTimeConstantLevelTimeseriesDelete";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool InsertRadarFastTimeConstantModeTimeseries( ref Guid id, Guid? catalog, string name, TimeSpan maxRetention, Guid radar )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "RadarFastTimeConstantModeTimeseriesInsert";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id, System.Data.ParameterDirection.InputOutput );
                var catalogParameter = sqlCommandParameters.AddReference( "@Catalog", catalog );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@Name", name, 127 );
                var maxRetentionParameter = sqlCommandParameters.AddTimeSpanAsInt64( "@MaxRetention", maxRetention );
                var radarParameter = sqlCommandParameters.AddReference( "@Radar", radar );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    id = (Guid)idParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool UpdateRadarFastTimeConstantModeTimeseries( Guid id, ref long rowVersion, Guid? catalog, string name, TimeSpan maxRetention, Guid radar )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "RadarFastTimeConstantModeTimeseriesUpdate";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion, System.Data.ParameterDirection.InputOutput );
                var catalogParameter = sqlCommandParameters.AddReference( "@Catalog", catalog );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@Name", name, 127 );
                var maxRetentionParameter = sqlCommandParameters.AddTimeSpanAsInt64( "@MaxRetention", maxRetention );
                var radarParameter = sqlCommandParameters.AddReference( "@Radar", radar );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    rowVersion = (long)rowVersionParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool DeleteRadarFastTimeConstantModeTimeseries( Guid id, long rowVersion )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "RadarFastTimeConstantModeTimeseriesDelete";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool InsertRadarPulseTimeseries( ref Guid id, Guid? catalog, string name, TimeSpan maxRetention, Guid radar )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "RadarPulseTimeseriesInsert";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id, System.Data.ParameterDirection.InputOutput );
                var catalogParameter = sqlCommandParameters.AddReference( "@Catalog", catalog );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@Name", name, 127 );
                var maxRetentionParameter = sqlCommandParameters.AddTimeSpanAsInt64( "@MaxRetention", maxRetention );
                var radarParameter = sqlCommandParameters.AddReference( "@Radar", radar );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    id = (Guid)idParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool UpdateRadarPulseTimeseries( Guid id, ref long rowVersion, Guid? catalog, string name, TimeSpan maxRetention, Guid radar )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "RadarPulseTimeseriesUpdate";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion, System.Data.ParameterDirection.InputOutput );
                var catalogParameter = sqlCommandParameters.AddReference( "@Catalog", catalog );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@Name", name, 127 );
                var maxRetentionParameter = sqlCommandParameters.AddTimeSpanAsInt64( "@MaxRetention", maxRetention );
                var radarParameter = sqlCommandParameters.AddReference( "@Radar", radar );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    rowVersion = (long)rowVersionParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool DeleteRadarPulseTimeseries( Guid id, long rowVersion )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "RadarPulseTimeseriesDelete";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool InsertRadarSector1EndTimeseries( ref Guid id, Guid? catalog, string name, TimeSpan maxRetention, Guid radar )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "RadarSector1EndTimeseriesInsert";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id, System.Data.ParameterDirection.InputOutput );
                var catalogParameter = sqlCommandParameters.AddReference( "@Catalog", catalog );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@Name", name, 127 );
                var maxRetentionParameter = sqlCommandParameters.AddTimeSpanAsInt64( "@MaxRetention", maxRetention );
                var radarParameter = sqlCommandParameters.AddReference( "@Radar", radar );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    id = (Guid)idParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool UpdateRadarSector1EndTimeseries( Guid id, ref long rowVersion, Guid? catalog, string name, TimeSpan maxRetention, Guid radar )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "RadarSector1EndTimeseriesUpdate";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion, System.Data.ParameterDirection.InputOutput );
                var catalogParameter = sqlCommandParameters.AddReference( "@Catalog", catalog );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@Name", name, 127 );
                var maxRetentionParameter = sqlCommandParameters.AddTimeSpanAsInt64( "@MaxRetention", maxRetention );
                var radarParameter = sqlCommandParameters.AddReference( "@Radar", radar );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    rowVersion = (long)rowVersionParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool DeleteRadarSector1EndTimeseries( Guid id, long rowVersion )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "RadarSector1EndTimeseriesDelete";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool InsertRadarSector1StartTimeseries( ref Guid id, Guid? catalog, string name, TimeSpan maxRetention, Guid radar )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "RadarSector1StartTimeseriesInsert";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id, System.Data.ParameterDirection.InputOutput );
                var catalogParameter = sqlCommandParameters.AddReference( "@Catalog", catalog );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@Name", name, 127 );
                var maxRetentionParameter = sqlCommandParameters.AddTimeSpanAsInt64( "@MaxRetention", maxRetention );
                var radarParameter = sqlCommandParameters.AddReference( "@Radar", radar );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    id = (Guid)idParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool UpdateRadarSector1StartTimeseries( Guid id, ref long rowVersion, Guid? catalog, string name, TimeSpan maxRetention, Guid radar )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "RadarSector1StartTimeseriesUpdate";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion, System.Data.ParameterDirection.InputOutput );
                var catalogParameter = sqlCommandParameters.AddReference( "@Catalog", catalog );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@Name", name, 127 );
                var maxRetentionParameter = sqlCommandParameters.AddTimeSpanAsInt64( "@MaxRetention", maxRetention );
                var radarParameter = sqlCommandParameters.AddReference( "@Radar", radar );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    rowVersion = (long)rowVersionParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool DeleteRadarSector1StartTimeseries( Guid id, long rowVersion )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "RadarSector1StartTimeseriesDelete";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool InsertRadarSector2EndTimeseries( ref Guid id, Guid? catalog, string name, TimeSpan maxRetention, Guid radar )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "RadarSector2EndTimeseriesInsert";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id, System.Data.ParameterDirection.InputOutput );
                var catalogParameter = sqlCommandParameters.AddReference( "@Catalog", catalog );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@Name", name, 127 );
                var maxRetentionParameter = sqlCommandParameters.AddTimeSpanAsInt64( "@MaxRetention", maxRetention );
                var radarParameter = sqlCommandParameters.AddReference( "@Radar", radar );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    id = (Guid)idParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool UpdateRadarSector2EndTimeseries( Guid id, ref long rowVersion, Guid? catalog, string name, TimeSpan maxRetention, Guid radar )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "RadarSector2EndTimeseriesUpdate";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion, System.Data.ParameterDirection.InputOutput );
                var catalogParameter = sqlCommandParameters.AddReference( "@Catalog", catalog );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@Name", name, 127 );
                var maxRetentionParameter = sqlCommandParameters.AddTimeSpanAsInt64( "@MaxRetention", maxRetention );
                var radarParameter = sqlCommandParameters.AddReference( "@Radar", radar );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    rowVersion = (long)rowVersionParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool DeleteRadarSector2EndTimeseries( Guid id, long rowVersion )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "RadarSector2EndTimeseriesDelete";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool InsertRadarSector2StartTimeseries( ref Guid id, Guid? catalog, string name, TimeSpan maxRetention, Guid radar )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "RadarSector2StartTimeseriesInsert";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id, System.Data.ParameterDirection.InputOutput );
                var catalogParameter = sqlCommandParameters.AddReference( "@Catalog", catalog );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@Name", name, 127 );
                var maxRetentionParameter = sqlCommandParameters.AddTimeSpanAsInt64( "@MaxRetention", maxRetention );
                var radarParameter = sqlCommandParameters.AddReference( "@Radar", radar );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    id = (Guid)idParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool UpdateRadarSector2StartTimeseries( Guid id, ref long rowVersion, Guid? catalog, string name, TimeSpan maxRetention, Guid radar )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "RadarSector2StartTimeseriesUpdate";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion, System.Data.ParameterDirection.InputOutput );
                var catalogParameter = sqlCommandParameters.AddReference( "@Catalog", catalog );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@Name", name, 127 );
                var maxRetentionParameter = sqlCommandParameters.AddTimeSpanAsInt64( "@MaxRetention", maxRetention );
                var radarParameter = sqlCommandParameters.AddReference( "@Radar", radar );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    rowVersion = (long)rowVersionParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool DeleteRadarSector2StartTimeseries( Guid id, long rowVersion )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "RadarSector2StartTimeseriesDelete";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool InsertRadarSensitivityTimeControlLevelTimeseries( ref Guid id, Guid? catalog, string name, TimeSpan maxRetention, Guid radar )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "RadarSensitivityTimeControlLevelTimeseriesInsert";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id, System.Data.ParameterDirection.InputOutput );
                var catalogParameter = sqlCommandParameters.AddReference( "@Catalog", catalog );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@Name", name, 127 );
                var maxRetentionParameter = sqlCommandParameters.AddTimeSpanAsInt64( "@MaxRetention", maxRetention );
                var radarParameter = sqlCommandParameters.AddReference( "@Radar", radar );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    id = (Guid)idParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool UpdateRadarSensitivityTimeControlLevelTimeseries( Guid id, ref long rowVersion, Guid? catalog, string name, TimeSpan maxRetention, Guid radar )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "RadarSensitivityTimeControlLevelTimeseriesUpdate";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion, System.Data.ParameterDirection.InputOutput );
                var catalogParameter = sqlCommandParameters.AddReference( "@Catalog", catalog );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@Name", name, 127 );
                var maxRetentionParameter = sqlCommandParameters.AddTimeSpanAsInt64( "@MaxRetention", maxRetention );
                var radarParameter = sqlCommandParameters.AddReference( "@Radar", radar );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    rowVersion = (long)rowVersionParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool DeleteRadarSensitivityTimeControlLevelTimeseries( Guid id, long rowVersion )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "RadarSensitivityTimeControlLevelTimeseriesDelete";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool InsertRadarTuningTimeseries( ref Guid id, Guid? catalog, string name, TimeSpan maxRetention, Guid radar )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "RadarTuningTimeseriesInsert";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id, System.Data.ParameterDirection.InputOutput );
                var catalogParameter = sqlCommandParameters.AddReference( "@Catalog", catalog );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@Name", name, 127 );
                var maxRetentionParameter = sqlCommandParameters.AddTimeSpanAsInt64( "@MaxRetention", maxRetention );
                var radarParameter = sqlCommandParameters.AddReference( "@Radar", radar );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    id = (Guid)idParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool UpdateRadarTuningTimeseries( Guid id, ref long rowVersion, Guid? catalog, string name, TimeSpan maxRetention, Guid radar )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "RadarTuningTimeseriesUpdate";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion, System.Data.ParameterDirection.InputOutput );
                var catalogParameter = sqlCommandParameters.AddReference( "@Catalog", catalog );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@Name", name, 127 );
                var maxRetentionParameter = sqlCommandParameters.AddTimeSpanAsInt64( "@MaxRetention", maxRetention );
                var radarParameter = sqlCommandParameters.AddReference( "@Radar", radar );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    rowVersion = (long)rowVersionParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool DeleteRadarTuningTimeseries( Guid id, long rowVersion )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "RadarTuningTimeseriesDelete";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool InsertVesselPersonsOnBoardTimeseries( ref Guid id, Guid? catalog, string name, TimeSpan maxRetention, Guid vessel )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "VesselPersonsOnBoardTimeseriesInsert";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id, System.Data.ParameterDirection.InputOutput );
                var catalogParameter = sqlCommandParameters.AddReference( "@Catalog", catalog );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@Name", name, 127 );
                var maxRetentionParameter = sqlCommandParameters.AddTimeSpanAsInt64( "@MaxRetention", maxRetention );
                var vesselParameter = sqlCommandParameters.AddReference( "@Vessel", vessel );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    id = (Guid)idParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool UpdateVesselPersonsOnBoardTimeseries( Guid id, ref long rowVersion, Guid? catalog, string name, TimeSpan maxRetention, Guid vessel )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "VesselPersonsOnBoardTimeseriesUpdate";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion, System.Data.ParameterDirection.InputOutput );
                var catalogParameter = sqlCommandParameters.AddReference( "@Catalog", catalog );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@Name", name, 127 );
                var maxRetentionParameter = sqlCommandParameters.AddTimeSpanAsInt64( "@MaxRetention", maxRetention );
                var vesselParameter = sqlCommandParameters.AddReference( "@Vessel", vessel );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    rowVersion = (long)rowVersionParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool DeleteVesselPersonsOnBoardTimeseries( Guid id, long rowVersion )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "VesselPersonsOnBoardTimeseriesDelete";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool InsertInt64Timeseries( ref Guid id, Guid? catalog, string name, TimeSpan maxRetention )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "Int64TimeseriesInsert";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id, System.Data.ParameterDirection.InputOutput );
                var catalogParameter = sqlCommandParameters.AddReference( "@Catalog", catalog );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@Name", name, 127 );
                var maxRetentionParameter = sqlCommandParameters.AddTimeSpanAsInt64( "@MaxRetention", maxRetention );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    id = (Guid)idParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool UpdateInt64Timeseries( Guid id, ref long rowVersion, Guid? catalog, string name, TimeSpan maxRetention )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "Int64TimeseriesUpdate";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion, System.Data.ParameterDirection.InputOutput );
                var catalogParameter = sqlCommandParameters.AddReference( "@Catalog", catalog );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@Name", name, 127 );
                var maxRetentionParameter = sqlCommandParameters.AddTimeSpanAsInt64( "@MaxRetention", maxRetention );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    rowVersion = (long)rowVersionParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool DeleteInt64Timeseries( Guid id, long rowVersion )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "Int64TimeseriesDelete";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool InsertPosition2DTimeseries( ref Guid id, Guid? catalog, string name, TimeSpan maxRetention )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "Position2DTimeseriesInsert";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id, System.Data.ParameterDirection.InputOutput );
                var catalogParameter = sqlCommandParameters.AddReference( "@Catalog", catalog );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@Name", name, 127 );
                var maxRetentionParameter = sqlCommandParameters.AddTimeSpanAsInt64( "@MaxRetention", maxRetention );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    id = (Guid)idParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool UpdatePosition2DTimeseries( Guid id, ref long rowVersion, Guid? catalog, string name, TimeSpan maxRetention )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "Position2DTimeseriesUpdate";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion, System.Data.ParameterDirection.InputOutput );
                var catalogParameter = sqlCommandParameters.AddReference( "@Catalog", catalog );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@Name", name, 127 );
                var maxRetentionParameter = sqlCommandParameters.AddTimeSpanAsInt64( "@MaxRetention", maxRetention );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    rowVersion = (long)rowVersionParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool DeletePosition2DTimeseries( Guid id, long rowVersion )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "Position2DTimeseriesDelete";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool InsertPosition3DTimeseries( ref Guid id, Guid? catalog, string name, TimeSpan maxRetention )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "Position3DTimeseriesInsert";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id, System.Data.ParameterDirection.InputOutput );
                var catalogParameter = sqlCommandParameters.AddReference( "@Catalog", catalog );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@Name", name, 127 );
                var maxRetentionParameter = sqlCommandParameters.AddTimeSpanAsInt64( "@MaxRetention", maxRetention );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    id = (Guid)idParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool UpdatePosition3DTimeseries( Guid id, ref long rowVersion, Guid? catalog, string name, TimeSpan maxRetention )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "Position3DTimeseriesUpdate";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion, System.Data.ParameterDirection.InputOutput );
                var catalogParameter = sqlCommandParameters.AddReference( "@Catalog", catalog );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@Name", name, 127 );
                var maxRetentionParameter = sqlCommandParameters.AddTimeSpanAsInt64( "@MaxRetention", maxRetention );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    rowVersion = (long)rowVersionParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool DeletePosition3DTimeseries( Guid id, long rowVersion )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "Position3DTimeseriesDelete";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool InsertReferenceTimeseries( ref Guid id, Guid? catalog, string name, TimeSpan maxRetention )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "ReferenceTimeseriesInsert";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id, System.Data.ParameterDirection.InputOutput );
                var catalogParameter = sqlCommandParameters.AddReference( "@Catalog", catalog );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@Name", name, 127 );
                var maxRetentionParameter = sqlCommandParameters.AddTimeSpanAsInt64( "@MaxRetention", maxRetention );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    id = (Guid)idParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool UpdateReferenceTimeseries( Guid id, ref long rowVersion, Guid? catalog, string name, TimeSpan maxRetention )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "ReferenceTimeseriesUpdate";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion, System.Data.ParameterDirection.InputOutput );
                var catalogParameter = sqlCommandParameters.AddReference( "@Catalog", catalog );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@Name", name, 127 );
                var maxRetentionParameter = sqlCommandParameters.AddTimeSpanAsInt64( "@MaxRetention", maxRetention );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    rowVersion = (long)rowVersionParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool DeleteReferenceTimeseries( Guid id, long rowVersion )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "ReferenceTimeseriesDelete";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool InsertSByteTimeseries( ref Guid id, Guid? catalog, string name, TimeSpan maxRetention )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "SByteTimeseriesInsert";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id, System.Data.ParameterDirection.InputOutput );
                var catalogParameter = sqlCommandParameters.AddReference( "@Catalog", catalog );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@Name", name, 127 );
                var maxRetentionParameter = sqlCommandParameters.AddTimeSpanAsInt64( "@MaxRetention", maxRetention );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    id = (Guid)idParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool UpdateSByteTimeseries( Guid id, ref long rowVersion, Guid? catalog, string name, TimeSpan maxRetention )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "SByteTimeseriesUpdate";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion, System.Data.ParameterDirection.InputOutput );
                var catalogParameter = sqlCommandParameters.AddReference( "@Catalog", catalog );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@Name", name, 127 );
                var maxRetentionParameter = sqlCommandParameters.AddTimeSpanAsInt64( "@MaxRetention", maxRetention );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    rowVersion = (long)rowVersionParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool DeleteSByteTimeseries( Guid id, long rowVersion )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "SByteTimeseriesDelete";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool InsertSingleTimeseries( ref Guid id, Guid? catalog, string name, TimeSpan maxRetention )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "SingleTimeseriesInsert";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id, System.Data.ParameterDirection.InputOutput );
                var catalogParameter = sqlCommandParameters.AddReference( "@Catalog", catalog );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@Name", name, 127 );
                var maxRetentionParameter = sqlCommandParameters.AddTimeSpanAsInt64( "@MaxRetention", maxRetention );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    id = (Guid)idParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool UpdateSingleTimeseries( Guid id, ref long rowVersion, Guid? catalog, string name, TimeSpan maxRetention )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "SingleTimeseriesUpdate";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion, System.Data.ParameterDirection.InputOutput );
                var catalogParameter = sqlCommandParameters.AddReference( "@Catalog", catalog );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@Name", name, 127 );
                var maxRetentionParameter = sqlCommandParameters.AddTimeSpanAsInt64( "@MaxRetention", maxRetention );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    rowVersion = (long)rowVersionParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool DeleteSingleTimeseries( Guid id, long rowVersion )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "SingleTimeseriesDelete";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool InsertStringTimeseries( ref Guid id, Guid? catalog, string name, TimeSpan maxRetention )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "StringTimeseriesInsert";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id, System.Data.ParameterDirection.InputOutput );
                var catalogParameter = sqlCommandParameters.AddReference( "@Catalog", catalog );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@Name", name, 127 );
                var maxRetentionParameter = sqlCommandParameters.AddTimeSpanAsInt64( "@MaxRetention", maxRetention );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    id = (Guid)idParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool UpdateStringTimeseries( Guid id, ref long rowVersion, Guid? catalog, string name, TimeSpan maxRetention )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "StringTimeseriesUpdate";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion, System.Data.ParameterDirection.InputOutput );
                var catalogParameter = sqlCommandParameters.AddReference( "@Catalog", catalog );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@Name", name, 127 );
                var maxRetentionParameter = sqlCommandParameters.AddTimeSpanAsInt64( "@MaxRetention", maxRetention );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    rowVersion = (long)rowVersionParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool DeleteStringTimeseries( Guid id, long rowVersion )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "StringTimeseriesDelete";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool InsertTimeSpanTimeseries( ref Guid id, Guid? catalog, string name, TimeSpan maxRetention )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "TimeSpanTimeseriesInsert";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id, System.Data.ParameterDirection.InputOutput );
                var catalogParameter = sqlCommandParameters.AddReference( "@Catalog", catalog );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@Name", name, 127 );
                var maxRetentionParameter = sqlCommandParameters.AddTimeSpanAsInt64( "@MaxRetention", maxRetention );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    id = (Guid)idParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool UpdateTimeSpanTimeseries( Guid id, ref long rowVersion, Guid? catalog, string name, TimeSpan maxRetention )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "TimeSpanTimeseriesUpdate";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion, System.Data.ParameterDirection.InputOutput );
                var catalogParameter = sqlCommandParameters.AddReference( "@Catalog", catalog );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@Name", name, 127 );
                var maxRetentionParameter = sqlCommandParameters.AddTimeSpanAsInt64( "@MaxRetention", maxRetention );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    rowVersion = (long)rowVersionParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool DeleteTimeSpanTimeseries( Guid id, long rowVersion )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "TimeSpanTimeseriesDelete";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool InsertUInt16Timeseries( ref Guid id, Guid? catalog, string name, TimeSpan maxRetention )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "UInt16TimeseriesInsert";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id, System.Data.ParameterDirection.InputOutput );
                var catalogParameter = sqlCommandParameters.AddReference( "@Catalog", catalog );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@Name", name, 127 );
                var maxRetentionParameter = sqlCommandParameters.AddTimeSpanAsInt64( "@MaxRetention", maxRetention );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    id = (Guid)idParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool UpdateUInt16Timeseries( Guid id, ref long rowVersion, Guid? catalog, string name, TimeSpan maxRetention )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "UInt16TimeseriesUpdate";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion, System.Data.ParameterDirection.InputOutput );
                var catalogParameter = sqlCommandParameters.AddReference( "@Catalog", catalog );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@Name", name, 127 );
                var maxRetentionParameter = sqlCommandParameters.AddTimeSpanAsInt64( "@MaxRetention", maxRetention );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    rowVersion = (long)rowVersionParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool DeleteUInt16Timeseries( Guid id, long rowVersion )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "UInt16TimeseriesDelete";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool InsertUInt32Timeseries( ref Guid id, Guid? catalog, string name, TimeSpan maxRetention )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "UInt32TimeseriesInsert";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id, System.Data.ParameterDirection.InputOutput );
                var catalogParameter = sqlCommandParameters.AddReference( "@Catalog", catalog );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@Name", name, 127 );
                var maxRetentionParameter = sqlCommandParameters.AddTimeSpanAsInt64( "@MaxRetention", maxRetention );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    id = (Guid)idParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool UpdateUInt32Timeseries( Guid id, ref long rowVersion, Guid? catalog, string name, TimeSpan maxRetention )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "UInt32TimeseriesUpdate";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion, System.Data.ParameterDirection.InputOutput );
                var catalogParameter = sqlCommandParameters.AddReference( "@Catalog", catalog );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@Name", name, 127 );
                var maxRetentionParameter = sqlCommandParameters.AddTimeSpanAsInt64( "@MaxRetention", maxRetention );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    rowVersion = (long)rowVersionParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool DeleteUInt32Timeseries( Guid id, long rowVersion )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "UInt32TimeseriesDelete";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool InsertRadomeStatusTimeseries( ref Guid id, Guid? catalog, string name, TimeSpan maxRetention, Guid radome )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "RadomeStatusTimeseriesInsert";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id, System.Data.ParameterDirection.InputOutput );
                var catalogParameter = sqlCommandParameters.AddReference( "@Catalog", catalog );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@Name", name, 127 );
                var maxRetentionParameter = sqlCommandParameters.AddTimeSpanAsInt64( "@MaxRetention", maxRetention );
                var radomeParameter = sqlCommandParameters.AddReference( "@Radome", radome );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    id = (Guid)idParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool UpdateRadomeStatusTimeseries( Guid id, ref long rowVersion, Guid? catalog, string name, TimeSpan maxRetention, Guid radome )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "RadomeStatusTimeseriesUpdate";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion, System.Data.ParameterDirection.InputOutput );
                var catalogParameter = sqlCommandParameters.AddReference( "@Catalog", catalog );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@Name", name, 127 );
                var maxRetentionParameter = sqlCommandParameters.AddTimeSpanAsInt64( "@MaxRetention", maxRetention );
                var radomeParameter = sqlCommandParameters.AddReference( "@Radome", radome );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    rowVersion = (long)rowVersionParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool DeleteRadomeStatusTimeseries( Guid id, long rowVersion )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "RadomeStatusTimeseriesDelete";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool InsertUInt64Timeseries( ref Guid id, Guid? catalog, string name, TimeSpan maxRetention )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "UInt64TimeseriesInsert";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id, System.Data.ParameterDirection.InputOutput );
                var catalogParameter = sqlCommandParameters.AddReference( "@Catalog", catalog );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@Name", name, 127 );
                var maxRetentionParameter = sqlCommandParameters.AddTimeSpanAsInt64( "@MaxRetention", maxRetention );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    id = (Guid)idParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool UpdateUInt64Timeseries( Guid id, ref long rowVersion, Guid? catalog, string name, TimeSpan maxRetention )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "UInt64TimeseriesUpdate";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion, System.Data.ParameterDirection.InputOutput );
                var catalogParameter = sqlCommandParameters.AddReference( "@Catalog", catalog );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@Name", name, 127 );
                var maxRetentionParameter = sqlCommandParameters.AddTimeSpanAsInt64( "@MaxRetention", maxRetention );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    rowVersion = (long)rowVersionParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool DeleteUInt64Timeseries( Guid id, long rowVersion )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "UInt64TimeseriesDelete";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool InsertTimeseriesCatalog( ref Guid id, Guid? catalog, string name )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "TimeseriesCatalogInsert";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id, System.Data.ParameterDirection.InputOutput );
                var catalogParameter = sqlCommandParameters.AddReference( "@Catalog", catalog );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@Name", name, 127 );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    id = (Guid)idParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool UpdateTimeseriesCatalog( Guid id, ref long rowVersion, Guid? catalog, string name )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "TimeseriesCatalogUpdate";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion, System.Data.ParameterDirection.InputOutput );
                var catalogParameter = sqlCommandParameters.AddReference( "@Catalog", catalog );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@Name", name, 127 );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    rowVersion = (long)rowVersionParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool DeleteTimeseriesCatalog( Guid id, long rowVersion )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "TimeseriesCatalogDelete";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool InsertTimeseriesInfo( ref Guid id, DateTime? firstTimestamp, DateTime? lastTimestamp, long count )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "TimeseriesInfoInsert";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id, System.Data.ParameterDirection.InputOutput );
                var firstTimestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@FirstTimestamp", firstTimestamp );
                var lastTimestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@LastTimestamp", lastTimestamp );
                var countParameter = sqlCommandParameters.AddInt64( "@Count", count );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    id = (Guid)idParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool UpdateTimeseriesInfo( Guid id, ref long rowVersion, DateTime? firstTimestamp, DateTime? lastTimestamp, long count )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "TimeseriesInfoUpdate";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion, System.Data.ParameterDirection.InputOutput );
                var firstTimestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@FirstTimestamp", firstTimestamp );
                var lastTimestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@LastTimestamp", lastTimestamp );
                var countParameter = sqlCommandParameters.AddInt64( "@Count", count );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    rowVersion = (long)rowVersionParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool DeleteTimeseriesInfo( Guid id, long rowVersion )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "TimeseriesInfoDelete";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool InsertTimeSpanTimeseriesValue( ref Guid id, Guid timeseries, DateTime timestamp, TimeSpan? value__ )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "TimeSpanTimeseriesValueInsert";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id, System.Data.ParameterDirection.InputOutput );
                var timeseriesParameter = sqlCommandParameters.AddReference( "@Timeseries", timeseries );
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@Timestamp", timestamp );
                var valueParameter = sqlCommandParameters.AddTimeSpanAsInt64( "@Value", value__ );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    id = (Guid)idParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool UpdateTimeSpanTimeseriesValue( Guid id, ref long rowVersion, Guid timeseries, DateTime timestamp, TimeSpan? value__ )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "TimeSpanTimeseriesValueUpdate";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion, System.Data.ParameterDirection.InputOutput );
                var timeseriesParameter = sqlCommandParameters.AddReference( "@Timeseries", timeseries );
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@Timestamp", timestamp );
                var valueParameter = sqlCommandParameters.AddTimeSpanAsInt64( "@Value", value__ );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    rowVersion = (long)rowVersionParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool DeleteTimeSpanTimeseriesValue( Guid id, long rowVersion )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "TimeSpanTimeseriesValueDelete";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool InsertTrackableItemTrackLink( ref Guid id, Guid item, Guid track, DateTime start, DateTime? end )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "TrackableItemTrackLinkInsert";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id, System.Data.ParameterDirection.InputOutput );
                var itemParameter = sqlCommandParameters.AddReference( "@Item", item );
                var trackParameter = sqlCommandParameters.AddReference( "@Track", track );
                var startParameter = sqlCommandParameters.AddDateTimeAsInt64( "@Start", start );
                var endParameter = sqlCommandParameters.AddDateTimeAsInt64( "@End", end );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    id = (Guid)idParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool UpdateTrackableItemTrackLink( Guid id, ref long rowVersion, Guid item, Guid track, DateTime start, DateTime? end )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "TrackableItemTrackLinkUpdate";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion, System.Data.ParameterDirection.InputOutput );
                var itemParameter = sqlCommandParameters.AddReference( "@Item", item );
                var trackParameter = sqlCommandParameters.AddReference( "@Track", track );
                var startParameter = sqlCommandParameters.AddDateTimeAsInt64( "@Start", start );
                var endParameter = sqlCommandParameters.AddDateTimeAsInt64( "@End", end );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    rowVersion = (long)rowVersionParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool DeleteTrackableItemTrackLink( Guid id, long rowVersion )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "TrackableItemTrackLinkDelete";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool InsertTrack( ref Guid id, Guid tracker, long trackNumber, DateTime timestamp )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "TrackInsert";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id, System.Data.ParameterDirection.InputOutput );
                var trackerParameter = sqlCommandParameters.AddReference( "@Tracker", tracker );
                var trackNumberParameter = sqlCommandParameters.AddInt64( "@TrackNumber", trackNumber );
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@Timestamp", timestamp );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    id = (Guid)idParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool UpdateTrack( Guid id, ref long rowVersion, Guid tracker, long trackNumber, DateTime timestamp )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "TrackUpdate";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion, System.Data.ParameterDirection.InputOutput );
                var trackerParameter = sqlCommandParameters.AddReference( "@Tracker", tracker );
                var trackNumberParameter = sqlCommandParameters.AddInt64( "@TrackNumber", trackNumber );
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@Timestamp", timestamp );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    rowVersion = (long)rowVersionParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool DeleteTrack( Guid id, long rowVersion )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "TrackDelete";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool InsertTrack3D( ref Guid id, Guid tracker, long trackNumber, DateTime timestamp )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "Track3DInsert";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id, System.Data.ParameterDirection.InputOutput );
                var trackerParameter = sqlCommandParameters.AddReference( "@Tracker", tracker );
                var trackNumberParameter = sqlCommandParameters.AddInt64( "@TrackNumber", trackNumber );
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@Timestamp", timestamp );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    id = (Guid)idParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool UpdateTrack3D( Guid id, ref long rowVersion, Guid tracker, long trackNumber, DateTime timestamp )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "Track3DUpdate";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion, System.Data.ParameterDirection.InputOutput );
                var trackerParameter = sqlCommandParameters.AddReference( "@Tracker", tracker );
                var trackNumberParameter = sqlCommandParameters.AddInt64( "@TrackNumber", trackNumber );
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@Timestamp", timestamp );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    rowVersion = (long)rowVersionParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool DeleteTrack3D( Guid id, long rowVersion )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "Track3DDelete";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool InsertTrackerFilterParameters( ref Guid id, Guid tracker, string name )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "TrackerFilterParametersInsert";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id, System.Data.ParameterDirection.InputOutput );
                var trackerParameter = sqlCommandParameters.AddReference( "@Tracker", tracker );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@Name", name, 127 );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    id = (Guid)idParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool UpdateTrackerFilterParameters( Guid id, ref long rowVersion, Guid tracker, string name )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "TrackerFilterParametersUpdate";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion, System.Data.ParameterDirection.InputOutput );
                var trackerParameter = sqlCommandParameters.AddReference( "@Tracker", tracker );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@Name", name, 127 );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    rowVersion = (long)rowVersionParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool DeleteTrackerFilterParameters( Guid id, long rowVersion )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "TrackerFilterParametersDelete";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool InsertTrackerFilterParametersConfiguration( ref Guid id, Guid parameters, DateTime timestamp, bool useNaivePredictor, int numberOfPoints, int windowSize, int stabilizeCount, int maxBadPoints, Types.TrackerFilterModelType modelType, double sigmaR, double sigmaAcc, double tauVel, double tauAcc, double deltaRMin, double deltaVMax, double deltaAMax )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "TrackerFilterParametersConfigurationInsert";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id, System.Data.ParameterDirection.InputOutput );
                var parametersParameter = sqlCommandParameters.AddReference( "@Parameters", parameters );
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@Timestamp", timestamp );
                var useNaivePredictorParameter = sqlCommandParameters.AddBoolean( "@UseNaivePredictor", useNaivePredictor );
                var numberOfPointsParameter = sqlCommandParameters.AddInt32( "@NumberOfPoints", numberOfPoints );
                var windowSizeParameter = sqlCommandParameters.AddInt32( "@WindowSize", windowSize );
                var stabilizeCountParameter = sqlCommandParameters.AddInt32( "@StabilizeCount", stabilizeCount );
                var maxBadPointsParameter = sqlCommandParameters.AddInt32( "@MaxBadPoints", maxBadPoints );
                var modelTypeParameter = sqlCommandParameters.AddEnum( "@ModelType", modelType );
                var sigmaRParameter = sqlCommandParameters.AddDouble( "@SigmaR", sigmaR );
                var sigmaAccParameter = sqlCommandParameters.AddDouble( "@SigmaAcc", sigmaAcc );
                var tauVelParameter = sqlCommandParameters.AddDouble( "@TauVel", tauVel );
                var tauAccParameter = sqlCommandParameters.AddDouble( "@TauAcc", tauAcc );
                var deltaRMinParameter = sqlCommandParameters.AddDouble( "@DeltaRMin", deltaRMin );
                var deltaVMaxParameter = sqlCommandParameters.AddDouble( "@DeltaVMax", deltaVMax );
                var deltaAMaxParameter = sqlCommandParameters.AddDouble( "@DeltaAMax", deltaAMax );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    id = (Guid)idParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool UpdateTrackerFilterParametersConfiguration( Guid id, ref long rowVersion, Guid parameters, DateTime timestamp, bool useNaivePredictor, int numberOfPoints, int windowSize, int stabilizeCount, int maxBadPoints, Types.TrackerFilterModelType modelType, double sigmaR, double sigmaAcc, double tauVel, double tauAcc, double deltaRMin, double deltaVMax, double deltaAMax )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "TrackerFilterParametersConfigurationUpdate";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion, System.Data.ParameterDirection.InputOutput );
                var parametersParameter = sqlCommandParameters.AddReference( "@Parameters", parameters );
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@Timestamp", timestamp );
                var useNaivePredictorParameter = sqlCommandParameters.AddBoolean( "@UseNaivePredictor", useNaivePredictor );
                var numberOfPointsParameter = sqlCommandParameters.AddInt32( "@NumberOfPoints", numberOfPoints );
                var windowSizeParameter = sqlCommandParameters.AddInt32( "@WindowSize", windowSize );
                var stabilizeCountParameter = sqlCommandParameters.AddInt32( "@StabilizeCount", stabilizeCount );
                var maxBadPointsParameter = sqlCommandParameters.AddInt32( "@MaxBadPoints", maxBadPoints );
                var modelTypeParameter = sqlCommandParameters.AddEnum( "@ModelType", modelType );
                var sigmaRParameter = sqlCommandParameters.AddDouble( "@SigmaR", sigmaR );
                var sigmaAccParameter = sqlCommandParameters.AddDouble( "@SigmaAcc", sigmaAcc );
                var tauVelParameter = sqlCommandParameters.AddDouble( "@TauVel", tauVel );
                var tauAccParameter = sqlCommandParameters.AddDouble( "@TauAcc", tauAcc );
                var deltaRMinParameter = sqlCommandParameters.AddDouble( "@DeltaRMin", deltaRMin );
                var deltaVMaxParameter = sqlCommandParameters.AddDouble( "@DeltaVMax", deltaVMax );
                var deltaAMaxParameter = sqlCommandParameters.AddDouble( "@DeltaAMax", deltaAMax );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    rowVersion = (long)rowVersionParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool DeleteTrackerFilterParametersConfiguration( Guid id, long rowVersion )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "TrackerFilterParametersConfigurationDelete";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool InsertTrackInfo( ref Guid id, DateTime? firstTimestamp, DateTime? lastTimestamp, long count, double? northWestLatitude, double? northWestLongitude, double? southEastLatitude, double? southEastLongitude )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "TrackInfoInsert";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id, System.Data.ParameterDirection.InputOutput );
                var firstTimestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@FirstTimestamp", firstTimestamp );
                var lastTimestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@LastTimestamp", lastTimestamp );
                var countParameter = sqlCommandParameters.AddInt64( "@Count", count );
                var northWestLatitudeParameter = sqlCommandParameters.AddDouble( "@NorthWestLatitude", northWestLatitude );
                var northWestLongitudeParameter = sqlCommandParameters.AddDouble( "@NorthWestLongitude", northWestLongitude );
                var southEastLatitudeParameter = sqlCommandParameters.AddDouble( "@SouthEastLatitude", southEastLatitude );
                var southEastLongitudeParameter = sqlCommandParameters.AddDouble( "@SouthEastLongitude", southEastLongitude );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    id = (Guid)idParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool UpdateTrackInfo( Guid id, ref long rowVersion, DateTime? firstTimestamp, DateTime? lastTimestamp, long count, double? northWestLatitude, double? northWestLongitude, double? southEastLatitude, double? southEastLongitude )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "TrackInfoUpdate";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion, System.Data.ParameterDirection.InputOutput );
                var firstTimestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@FirstTimestamp", firstTimestamp );
                var lastTimestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@LastTimestamp", lastTimestamp );
                var countParameter = sqlCommandParameters.AddInt64( "@Count", count );
                var northWestLatitudeParameter = sqlCommandParameters.AddDouble( "@NorthWestLatitude", northWestLatitude );
                var northWestLongitudeParameter = sqlCommandParameters.AddDouble( "@NorthWestLongitude", northWestLongitude );
                var southEastLatitudeParameter = sqlCommandParameters.AddDouble( "@SouthEastLatitude", southEastLatitude );
                var southEastLongitudeParameter = sqlCommandParameters.AddDouble( "@SouthEastLongitude", southEastLongitude );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    rowVersion = (long)rowVersionParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool DeleteTrackInfo( Guid id, long rowVersion )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "TrackInfoDelete";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool InsertTrackingServiceOptions( ref Guid id, DateTime timestamp, TimeSpan timerInterval, TimeSpan maxAgeOfCurrentTrackValue, double falseThreshold, double distanceThreshold, double distanceUnmergeThreshold, long unmergeLatency, bool kalmanFiltering, double maxCourseDeviation, double maxSpeedDeviation, double minimumSpeedThreshold )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "TrackingServiceOptionsInsert";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id, System.Data.ParameterDirection.InputOutput );
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@Timestamp", timestamp );
                var timerIntervalParameter = sqlCommandParameters.AddTimeSpanAsInt64( "@TimerInterval", timerInterval );
                var maxAgeOfCurrentTrackValueParameter = sqlCommandParameters.AddTimeSpanAsInt64( "@MaxAgeOfCurrentTrackValue", maxAgeOfCurrentTrackValue );
                var falseThresholdParameter = sqlCommandParameters.AddDouble( "@FalseThreshold", falseThreshold );
                var distanceThresholdParameter = sqlCommandParameters.AddDouble( "@DistanceThreshold", distanceThreshold );
                var distanceUnmergeThresholdParameter = sqlCommandParameters.AddDouble( "@DistanceUnmergeThreshold", distanceUnmergeThreshold );
                var unmergeLatencyParameter = sqlCommandParameters.AddInt64( "@UnmergeLatency", unmergeLatency );
                var kalmanFilteringParameter = sqlCommandParameters.AddBoolean( "@KalmanFiltering", kalmanFiltering );
                var maxCourseDeviationParameter = sqlCommandParameters.AddDouble( "@MaxCourseDeviation", maxCourseDeviation );
                var maxSpeedDeviationParameter = sqlCommandParameters.AddDouble( "@MaxSpeedDeviation", maxSpeedDeviation );
                var minimumSpeedThresholdParameter = sqlCommandParameters.AddDouble( "@MinimumSpeedThreshold", minimumSpeedThreshold );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    id = (Guid)idParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool UpdateTrackingServiceOptions( Guid id, ref long rowVersion, DateTime timestamp, TimeSpan timerInterval, TimeSpan maxAgeOfCurrentTrackValue, double falseThreshold, double distanceThreshold, double distanceUnmergeThreshold, long unmergeLatency, bool kalmanFiltering, double maxCourseDeviation, double maxSpeedDeviation, double minimumSpeedThreshold )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "TrackingServiceOptionsUpdate";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion, System.Data.ParameterDirection.InputOutput );
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@Timestamp", timestamp );
                var timerIntervalParameter = sqlCommandParameters.AddTimeSpanAsInt64( "@TimerInterval", timerInterval );
                var maxAgeOfCurrentTrackValueParameter = sqlCommandParameters.AddTimeSpanAsInt64( "@MaxAgeOfCurrentTrackValue", maxAgeOfCurrentTrackValue );
                var falseThresholdParameter = sqlCommandParameters.AddDouble( "@FalseThreshold", falseThreshold );
                var distanceThresholdParameter = sqlCommandParameters.AddDouble( "@DistanceThreshold", distanceThreshold );
                var distanceUnmergeThresholdParameter = sqlCommandParameters.AddDouble( "@DistanceUnmergeThreshold", distanceUnmergeThreshold );
                var unmergeLatencyParameter = sqlCommandParameters.AddInt64( "@UnmergeLatency", unmergeLatency );
                var kalmanFilteringParameter = sqlCommandParameters.AddBoolean( "@KalmanFiltering", kalmanFiltering );
                var maxCourseDeviationParameter = sqlCommandParameters.AddDouble( "@MaxCourseDeviation", maxCourseDeviation );
                var maxSpeedDeviationParameter = sqlCommandParameters.AddDouble( "@MaxSpeedDeviation", maxSpeedDeviation );
                var minimumSpeedThresholdParameter = sqlCommandParameters.AddDouble( "@MinimumSpeedThreshold", minimumSpeedThreshold );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    rowVersion = (long)rowVersionParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool DeleteTrackingServiceOptions( Guid id, long rowVersion )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "TrackingServiceOptionsDelete";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool InsertTrackLink( ref Guid id, Guid primary, Guid secondary, DateTime start, DateTime? end )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "TrackLinkInsert";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id, System.Data.ParameterDirection.InputOutput );
                var primaryParameter = sqlCommandParameters.AddReference( "@Primary", primary );
                var secondaryParameter = sqlCommandParameters.AddReference( "@Secondary", secondary );
                var startParameter = sqlCommandParameters.AddDateTimeAsInt64( "@Start", start );
                var endParameter = sqlCommandParameters.AddDateTimeAsInt64( "@End", end );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    id = (Guid)idParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool UpdateTrackLink( Guid id, ref long rowVersion, Guid primary, Guid secondary, DateTime start, DateTime? end )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "TrackLinkUpdate";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion, System.Data.ParameterDirection.InputOutput );
                var primaryParameter = sqlCommandParameters.AddReference( "@Primary", primary );
                var secondaryParameter = sqlCommandParameters.AddReference( "@Secondary", secondary );
                var startParameter = sqlCommandParameters.AddDateTimeAsInt64( "@Start", start );
                var endParameter = sqlCommandParameters.AddDateTimeAsInt64( "@End", end );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    rowVersion = (long)rowVersionParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool DeleteTrackLink( Guid id, long rowVersion )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "TrackLinkDelete";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool InsertTrackValue( ref Guid id, Guid track, DateTime timestamp, Types.TrackFlags flags, Types.TrackStatus status, double latitude, double longitude, double speed, double course, double heading )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "TrackValueInsert";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id, System.Data.ParameterDirection.InputOutput );
                var trackParameter = sqlCommandParameters.AddReference( "@Track", track );
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@Timestamp", timestamp );
                var flagsParameter = sqlCommandParameters.AddEnum( "@Flags", flags );
                var statusParameter = sqlCommandParameters.AddEnum( "@Status", status );
                var latitudeParameter = sqlCommandParameters.AddDouble( "@Latitude", latitude );
                var longitudeParameter = sqlCommandParameters.AddDouble( "@Longitude", longitude );
                var speedParameter = sqlCommandParameters.AddDouble( "@Speed", speed );
                var courseParameter = sqlCommandParameters.AddDouble( "@Course", course );
                var headingParameter = sqlCommandParameters.AddDouble( "@Heading", heading );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    id = (Guid)idParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool UpdateTrackValue( Guid id, ref long rowVersion, Guid track, DateTime timestamp, Types.TrackFlags flags, Types.TrackStatus status, double latitude, double longitude, double speed, double course, double heading )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "TrackValueUpdate";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion, System.Data.ParameterDirection.InputOutput );
                var trackParameter = sqlCommandParameters.AddReference( "@Track", track );
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@Timestamp", timestamp );
                var flagsParameter = sqlCommandParameters.AddEnum( "@Flags", flags );
                var statusParameter = sqlCommandParameters.AddEnum( "@Status", status );
                var latitudeParameter = sqlCommandParameters.AddDouble( "@Latitude", latitude );
                var longitudeParameter = sqlCommandParameters.AddDouble( "@Longitude", longitude );
                var speedParameter = sqlCommandParameters.AddDouble( "@Speed", speed );
                var courseParameter = sqlCommandParameters.AddDouble( "@Course", course );
                var headingParameter = sqlCommandParameters.AddDouble( "@Heading", heading );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    rowVersion = (long)rowVersionParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool DeleteTrackValue( Guid id, long rowVersion )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "TrackValueDelete";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool InsertTrackValue3D( ref Guid id, Guid track, DateTime timestamp, Types.TrackFlags3D flags, uint status, double latitude, double longitude, double altitude, double speed, double course, double rateOfClimb )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "TrackValue3DInsert";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id, System.Data.ParameterDirection.InputOutput );
                var trackParameter = sqlCommandParameters.AddReference( "@Track", track );
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@Timestamp", timestamp );
                var flagsParameter = sqlCommandParameters.AddEnum( "@Flags", flags );
                var statusParameter = sqlCommandParameters.AddUInt32( "@Status", status );
                var latitudeParameter = sqlCommandParameters.AddDouble( "@Latitude", latitude );
                var longitudeParameter = sqlCommandParameters.AddDouble( "@Longitude", longitude );
                var altitudeParameter = sqlCommandParameters.AddDouble( "@Altitude", altitude );
                var speedParameter = sqlCommandParameters.AddDouble( "@Speed", speed );
                var courseParameter = sqlCommandParameters.AddDouble( "@Course", course );
                var rateOfClimbParameter = sqlCommandParameters.AddDouble( "@RateOfClimb", rateOfClimb );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    id = (Guid)idParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool UpdateTrackValue3D( Guid id, ref long rowVersion, Guid track, DateTime timestamp, Types.TrackFlags3D flags, uint status, double latitude, double longitude, double altitude, double speed, double course, double rateOfClimb )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "TrackValue3DUpdate";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion, System.Data.ParameterDirection.InputOutput );
                var trackParameter = sqlCommandParameters.AddReference( "@Track", track );
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@Timestamp", timestamp );
                var flagsParameter = sqlCommandParameters.AddEnum( "@Flags", flags );
                var statusParameter = sqlCommandParameters.AddUInt32( "@Status", status );
                var latitudeParameter = sqlCommandParameters.AddDouble( "@Latitude", latitude );
                var longitudeParameter = sqlCommandParameters.AddDouble( "@Longitude", longitude );
                var altitudeParameter = sqlCommandParameters.AddDouble( "@Altitude", altitude );
                var speedParameter = sqlCommandParameters.AddDouble( "@Speed", speed );
                var courseParameter = sqlCommandParameters.AddDouble( "@Course", course );
                var rateOfClimbParameter = sqlCommandParameters.AddDouble( "@RateOfClimb", rateOfClimb );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    rowVersion = (long)rowVersionParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool DeleteTrackValue3D( Guid id, long rowVersion )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "TrackValue3DDelete";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool InsertUInt16TimeseriesValue( ref Guid id, Guid timeseries, DateTime timestamp, ushort? value__ )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "UInt16TimeseriesValueInsert";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id, System.Data.ParameterDirection.InputOutput );
                var timeseriesParameter = sqlCommandParameters.AddReference( "@Timeseries", timeseries );
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@Timestamp", timestamp );
                var valueParameter = sqlCommandParameters.AddUInt16( "@Value", value__ );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    id = (Guid)idParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool UpdateUInt16TimeseriesValue( Guid id, ref long rowVersion, Guid timeseries, DateTime timestamp, ushort? value__ )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "UInt16TimeseriesValueUpdate";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion, System.Data.ParameterDirection.InputOutput );
                var timeseriesParameter = sqlCommandParameters.AddReference( "@Timeseries", timeseries );
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@Timestamp", timestamp );
                var valueParameter = sqlCommandParameters.AddUInt16( "@Value", value__ );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    rowVersion = (long)rowVersionParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool DeleteUInt16TimeseriesValue( Guid id, long rowVersion )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "UInt16TimeseriesValueDelete";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool InsertUInt32TimeseriesValue( ref Guid id, Guid timeseries, DateTime timestamp, uint? value__ )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "UInt32TimeseriesValueInsert";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id, System.Data.ParameterDirection.InputOutput );
                var timeseriesParameter = sqlCommandParameters.AddReference( "@Timeseries", timeseries );
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@Timestamp", timestamp );
                var valueParameter = sqlCommandParameters.AddUInt32( "@Value", value__ );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    id = (Guid)idParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool UpdateUInt32TimeseriesValue( Guid id, ref long rowVersion, Guid timeseries, DateTime timestamp, uint? value__ )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "UInt32TimeseriesValueUpdate";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion, System.Data.ParameterDirection.InputOutput );
                var timeseriesParameter = sqlCommandParameters.AddReference( "@Timeseries", timeseries );
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@Timestamp", timestamp );
                var valueParameter = sqlCommandParameters.AddUInt32( "@Value", value__ );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    rowVersion = (long)rowVersionParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool DeleteUInt32TimeseriesValue( Guid id, long rowVersion )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "UInt32TimeseriesValueDelete";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool InsertUInt64TimeseriesValue( ref Guid id, Guid timeseries, DateTime timestamp, long? value__ )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "UInt64TimeseriesValueInsert";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id, System.Data.ParameterDirection.InputOutput );
                var timeseriesParameter = sqlCommandParameters.AddReference( "@Timeseries", timeseries );
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@Timestamp", timestamp );
                var valueParameter = sqlCommandParameters.AddInt64( "@Value", value__ );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    id = (Guid)idParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool UpdateUInt64TimeseriesValue( Guid id, ref long rowVersion, Guid timeseries, DateTime timestamp, long? value__ )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "UInt64TimeseriesValueUpdate";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion, System.Data.ParameterDirection.InputOutput );
                var timeseriesParameter = sqlCommandParameters.AddReference( "@Timeseries", timeseries );
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@Timestamp", timestamp );
                var valueParameter = sqlCommandParameters.AddInt64( "@Value", value__ );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    rowVersion = (long)rowVersionParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool DeleteUInt64TimeseriesValue( Guid id, long rowVersion )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "UInt64TimeseriesValueDelete";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool InsertVehicleType( ref Guid id, string name )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "VehicleTypeInsert";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id, System.Data.ParameterDirection.InputOutput );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@Name", name, 127 );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    id = (Guid)idParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool UpdateVehicleType( Guid id, ref long rowVersion, string name )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "VehicleTypeUpdate";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion, System.Data.ParameterDirection.InputOutput );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@Name", name, 127 );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    rowVersion = (long)rowVersionParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool DeleteVehicleType( Guid id, long rowVersion )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "VehicleTypeDelete";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool InsertVesselType( ref Guid id, string name, int code )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "VesselTypeInsert";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id, System.Data.ParameterDirection.InputOutput );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@Name", name, 127 );
                var codeParameter = sqlCommandParameters.AddInt32( "@Code", code );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    id = (Guid)idParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool UpdateVesselType( Guid id, ref long rowVersion, string name, int code )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "VesselTypeUpdate";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion, System.Data.ParameterDirection.InputOutput );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@Name", name, 127 );
                var codeParameter = sqlCommandParameters.AddInt32( "@Code", code );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    rowVersion = (long)rowVersionParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool DeleteVesselType( Guid id, long rowVersion )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "VesselTypeDelete";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool InsertView( ref Guid id, string name, Guid latitudeTimeseries, Guid longitudeTimeseries, Guid zoomLevelTimeseries )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "ViewInsert";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id, System.Data.ParameterDirection.InputOutput );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@Name", name, 127 );
                var latitudeTimeseriesParameter = sqlCommandParameters.AddReference( "@LatitudeTimeseries", latitudeTimeseries );
                var longitudeTimeseriesParameter = sqlCommandParameters.AddReference( "@LongitudeTimeseries", longitudeTimeseries );
                var zoomLevelTimeseriesParameter = sqlCommandParameters.AddReference( "@ZoomLevelTimeseries", zoomLevelTimeseries );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    id = (Guid)idParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool UpdateView( Guid id, ref long rowVersion, string name, Guid latitudeTimeseries, Guid longitudeTimeseries, Guid zoomLevelTimeseries )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "ViewUpdate";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion, System.Data.ParameterDirection.InputOutput );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@Name", name, 127 );
                var latitudeTimeseriesParameter = sqlCommandParameters.AddReference( "@LatitudeTimeseries", latitudeTimeseries );
                var longitudeTimeseriesParameter = sqlCommandParameters.AddReference( "@LongitudeTimeseries", longitudeTimeseries );
                var zoomLevelTimeseriesParameter = sqlCommandParameters.AddReference( "@ZoomLevelTimeseries", zoomLevelTimeseries );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    rowVersion = (long)rowVersionParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool DeleteView( Guid id, long rowVersion )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "ViewDelete";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool InsertViewCameraLink( ref Guid id, Guid view, Guid camera, DateTime start, DateTime? end )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "ViewCameraLinkInsert";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id, System.Data.ParameterDirection.InputOutput );
                var viewParameter = sqlCommandParameters.AddReference( "@View", view );
                var cameraParameter = sqlCommandParameters.AddReference( "@Camera", camera );
                var startParameter = sqlCommandParameters.AddDateTimeAsInt64( "@Start", start );
                var endParameter = sqlCommandParameters.AddDateTimeAsInt64( "@End", end );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    id = (Guid)idParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool UpdateViewCameraLink( Guid id, ref long rowVersion, Guid view, Guid camera, DateTime start, DateTime? end )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "ViewCameraLinkUpdate";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion, System.Data.ParameterDirection.InputOutput );
                var viewParameter = sqlCommandParameters.AddReference( "@View", view );
                var cameraParameter = sqlCommandParameters.AddReference( "@Camera", camera );
                var startParameter = sqlCommandParameters.AddDateTimeAsInt64( "@Start", start );
                var endParameter = sqlCommandParameters.AddDateTimeAsInt64( "@End", end );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    rowVersion = (long)rowVersionParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool DeleteViewCameraLink( Guid id, long rowVersion )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "ViewCameraLinkDelete";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool InsertViewTrackerLink( ref Guid id, Guid view, Guid tracker, DateTime start, DateTime? end )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "ViewTrackerLinkInsert";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id, System.Data.ParameterDirection.InputOutput );
                var viewParameter = sqlCommandParameters.AddReference( "@View", view );
                var trackerParameter = sqlCommandParameters.AddReference( "@Tracker", tracker );
                var startParameter = sqlCommandParameters.AddDateTimeAsInt64( "@Start", start );
                var endParameter = sqlCommandParameters.AddDateTimeAsInt64( "@End", end );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    id = (Guid)idParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool UpdateViewTrackerLink( Guid id, ref long rowVersion, Guid view, Guid tracker, DateTime start, DateTime? end )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "ViewTrackerLinkUpdate";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion, System.Data.ParameterDirection.InputOutput );
                var viewParameter = sqlCommandParameters.AddReference( "@View", view );
                var trackerParameter = sqlCommandParameters.AddReference( "@Tracker", tracker );
                var startParameter = sqlCommandParameters.AddDateTimeAsInt64( "@Start", start );
                var endParameter = sqlCommandParameters.AddDateTimeAsInt64( "@End", end );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    rowVersion = (long)rowVersionParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool DeleteViewTrackerLink( Guid id, long rowVersion )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "ViewTrackerLinkDelete";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool InsertWeatherStationCommand( ref Guid id, Guid weatherStation, DateTime timestamp, Types.DeviceCommandSourceType deviceCommandSourceType, Guid deviceCommandSourceId, Guid reply )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "WeatherStationCommandInsert";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id, System.Data.ParameterDirection.InputOutput );
                var weatherStationParameter = sqlCommandParameters.AddReference( "@WeatherStation", weatherStation );
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@Timestamp", timestamp );
                var deviceCommandSourceTypeParameter = sqlCommandParameters.AddEnum( "@DeviceCommandSourceType", deviceCommandSourceType );
                var deviceCommandSourceIdParameter = sqlCommandParameters.AddGuid( "@DeviceCommandSourceId", deviceCommandSourceId );
                var replyParameter = sqlCommandParameters.AddReference( "@Reply", reply );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    id = (Guid)idParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool UpdateWeatherStationCommand( Guid id, ref long rowVersion, Guid weatherStation, DateTime timestamp, Types.DeviceCommandSourceType deviceCommandSourceType, Guid deviceCommandSourceId, Guid reply )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "WeatherStationCommandUpdate";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion, System.Data.ParameterDirection.InputOutput );
                var weatherStationParameter = sqlCommandParameters.AddReference( "@WeatherStation", weatherStation );
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@Timestamp", timestamp );
                var deviceCommandSourceTypeParameter = sqlCommandParameters.AddEnum( "@DeviceCommandSourceType", deviceCommandSourceType );
                var deviceCommandSourceIdParameter = sqlCommandParameters.AddGuid( "@DeviceCommandSourceId", deviceCommandSourceId );
                var replyParameter = sqlCommandParameters.AddReference( "@Reply", reply );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    rowVersion = (long)rowVersionParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool DeleteWeatherStationCommand( Guid id, long rowVersion )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "WeatherStationCommandDelete";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool InsertWeatherStationCommandReply( ref Guid id, Guid weatherStation, DateTime timestamp, Guid command, Types.DeviceCommandReplyStatus status, string message )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "WeatherStationCommandReplyInsert";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id, System.Data.ParameterDirection.InputOutput );
                var weatherStationParameter = sqlCommandParameters.AddReference( "@WeatherStation", weatherStation );
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@Timestamp", timestamp );
                var commandParameter = sqlCommandParameters.AddReference( "@Command", command );
                var statusParameter = sqlCommandParameters.AddEnum( "@Status", status );
                var messageParameter = sqlCommandParameters.AddNVarChar( "@Message", message, 0 );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    id = (Guid)idParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool UpdateWeatherStationCommandReply( Guid id, ref long rowVersion, Guid weatherStation, DateTime timestamp, Guid command, Types.DeviceCommandReplyStatus status, string message )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "WeatherStationCommandReplyUpdate";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion, System.Data.ParameterDirection.InputOutput );
                var weatherStationParameter = sqlCommandParameters.AddReference( "@WeatherStation", weatherStation );
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@Timestamp", timestamp );
                var commandParameter = sqlCommandParameters.AddReference( "@Command", command );
                var statusParameter = sqlCommandParameters.AddEnum( "@Status", status );
                var messageParameter = sqlCommandParameters.AddNVarChar( "@Message", message, 0 );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    rowVersion = (long)rowVersionParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool DeleteWeatherStationCommandReply( Guid id, long rowVersion )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "WeatherStationCommandReplyDelete";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool InsertWeatherStationConfiguration( ref Guid id, Guid weatherStation, DateTime timestamp, TimeSpan noDataTimeOut, TimeSpan sendInterval, double latitude, double longitude, double gyroOffset, bool enableAveraging, TimeSpan averagingInterval )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "WeatherStationConfigurationInsert";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id, System.Data.ParameterDirection.InputOutput );
                var weatherStationParameter = sqlCommandParameters.AddReference( "@WeatherStation", weatherStation );
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@Timestamp", timestamp );
                var noDataTimeOutParameter = sqlCommandParameters.AddTimeSpanAsInt64( "@NoDataTimeOut", noDataTimeOut );
                var sendIntervalParameter = sqlCommandParameters.AddTimeSpanAsInt64( "@SendInterval", sendInterval );
                var latitudeParameter = sqlCommandParameters.AddDouble( "@Latitude", latitude );
                var longitudeParameter = sqlCommandParameters.AddDouble( "@Longitude", longitude );
                var gyroOffsetParameter = sqlCommandParameters.AddDouble( "@GyroOffset", gyroOffset );
                var enableAveragingParameter = sqlCommandParameters.AddBoolean( "@EnableAveraging", enableAveraging );
                var averagingIntervalParameter = sqlCommandParameters.AddTimeSpanAsInt64( "@AveragingInterval", averagingInterval );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    id = (Guid)idParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool UpdateWeatherStationConfiguration( Guid id, ref long rowVersion, Guid weatherStation, DateTime timestamp, TimeSpan noDataTimeOut, TimeSpan sendInterval, double latitude, double longitude, double gyroOffset, bool enableAveraging, TimeSpan averagingInterval )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "WeatherStationConfigurationUpdate";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion, System.Data.ParameterDirection.InputOutput );
                var weatherStationParameter = sqlCommandParameters.AddReference( "@WeatherStation", weatherStation );
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@Timestamp", timestamp );
                var noDataTimeOutParameter = sqlCommandParameters.AddTimeSpanAsInt64( "@NoDataTimeOut", noDataTimeOut );
                var sendIntervalParameter = sqlCommandParameters.AddTimeSpanAsInt64( "@SendInterval", sendInterval );
                var latitudeParameter = sqlCommandParameters.AddDouble( "@Latitude", latitude );
                var longitudeParameter = sqlCommandParameters.AddDouble( "@Longitude", longitude );
                var gyroOffsetParameter = sqlCommandParameters.AddDouble( "@GyroOffset", gyroOffset );
                var enableAveragingParameter = sqlCommandParameters.AddBoolean( "@EnableAveraging", enableAveraging );
                var averagingIntervalParameter = sqlCommandParameters.AddTimeSpanAsInt64( "@AveragingInterval", averagingInterval );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    rowVersion = (long)rowVersionParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool DeleteWeatherStationConfiguration( Guid id, long rowVersion )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "WeatherStationConfigurationDelete";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool InsertCircularZone( ref Guid id, string name, double longitude, double latitude, Types.ZoneAlarmType alarmType, TimeSpan alarmTime, TimeSpan radarTrackMinimumLifetime, double speed, uint strokeColor, uint fillColor, double radius )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "CircularZoneInsert";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id, System.Data.ParameterDirection.InputOutput );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@Name", name, 127 );
                var longitudeParameter = sqlCommandParameters.AddDouble( "@Longitude", longitude );
                var latitudeParameter = sqlCommandParameters.AddDouble( "@Latitude", latitude );
                var alarmTypeParameter = sqlCommandParameters.AddEnum( "@AlarmType", alarmType );
                var alarmTimeParameter = sqlCommandParameters.AddTimeSpanAsInt64( "@AlarmTime", alarmTime );
                var radarTrackMinimumLifetimeParameter = sqlCommandParameters.AddTimeSpanAsInt64( "@RadarTrackMinimumLifetime", radarTrackMinimumLifetime );
                var speedParameter = sqlCommandParameters.AddDouble( "@Speed", speed );
                var strokeColorParameter = sqlCommandParameters.AddUInt32( "@StrokeColor", strokeColor );
                var fillColorParameter = sqlCommandParameters.AddUInt32( "@FillColor", fillColor );
                var radiusParameter = sqlCommandParameters.AddDouble( "@Radius", radius );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    id = (Guid)idParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool UpdateCircularZone( Guid id, ref long rowVersion, string name, double longitude, double latitude, Types.ZoneAlarmType alarmType, TimeSpan alarmTime, TimeSpan radarTrackMinimumLifetime, double speed, uint strokeColor, uint fillColor, double radius )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "CircularZoneUpdate";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion, System.Data.ParameterDirection.InputOutput );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@Name", name, 127 );
                var longitudeParameter = sqlCommandParameters.AddDouble( "@Longitude", longitude );
                var latitudeParameter = sqlCommandParameters.AddDouble( "@Latitude", latitude );
                var alarmTypeParameter = sqlCommandParameters.AddEnum( "@AlarmType", alarmType );
                var alarmTimeParameter = sqlCommandParameters.AddTimeSpanAsInt64( "@AlarmTime", alarmTime );
                var radarTrackMinimumLifetimeParameter = sqlCommandParameters.AddTimeSpanAsInt64( "@RadarTrackMinimumLifetime", radarTrackMinimumLifetime );
                var speedParameter = sqlCommandParameters.AddDouble( "@Speed", speed );
                var strokeColorParameter = sqlCommandParameters.AddUInt32( "@StrokeColor", strokeColor );
                var fillColorParameter = sqlCommandParameters.AddUInt32( "@FillColor", fillColor );
                var radiusParameter = sqlCommandParameters.AddDouble( "@Radius", radius );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    rowVersion = (long)rowVersionParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool DeleteCircularZone( Guid id, long rowVersion )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "CircularZoneDelete";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool InsertPolygonZone( ref Guid id, string name, double longitude, double latitude, Types.ZoneAlarmType alarmType, TimeSpan alarmTime, TimeSpan radarTrackMinimumLifetime, double speed, uint strokeColor, uint fillColor, byte[] polygon )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "PolygonZoneInsert";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id, System.Data.ParameterDirection.InputOutput );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@Name", name, 127 );
                var longitudeParameter = sqlCommandParameters.AddDouble( "@Longitude", longitude );
                var latitudeParameter = sqlCommandParameters.AddDouble( "@Latitude", latitude );
                var alarmTypeParameter = sqlCommandParameters.AddEnum( "@AlarmType", alarmType );
                var alarmTimeParameter = sqlCommandParameters.AddTimeSpanAsInt64( "@AlarmTime", alarmTime );
                var radarTrackMinimumLifetimeParameter = sqlCommandParameters.AddTimeSpanAsInt64( "@RadarTrackMinimumLifetime", radarTrackMinimumLifetime );
                var speedParameter = sqlCommandParameters.AddDouble( "@Speed", speed );
                var strokeColorParameter = sqlCommandParameters.AddUInt32( "@StrokeColor", strokeColor );
                var fillColorParameter = sqlCommandParameters.AddUInt32( "@FillColor", fillColor );
                var polygonParameter = sqlCommandParameters.AddBinary( "@Polygon", polygon, 0 );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    id = (Guid)idParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool UpdatePolygonZone( Guid id, ref long rowVersion, string name, double longitude, double latitude, Types.ZoneAlarmType alarmType, TimeSpan alarmTime, TimeSpan radarTrackMinimumLifetime, double speed, uint strokeColor, uint fillColor, byte[] polygon )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "PolygonZoneUpdate";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion, System.Data.ParameterDirection.InputOutput );
                var nameParameter = sqlCommandParameters.AddNVarChar( "@Name", name, 127 );
                var longitudeParameter = sqlCommandParameters.AddDouble( "@Longitude", longitude );
                var latitudeParameter = sqlCommandParameters.AddDouble( "@Latitude", latitude );
                var alarmTypeParameter = sqlCommandParameters.AddEnum( "@AlarmType", alarmType );
                var alarmTimeParameter = sqlCommandParameters.AddTimeSpanAsInt64( "@AlarmTime", alarmTime );
                var radarTrackMinimumLifetimeParameter = sqlCommandParameters.AddTimeSpanAsInt64( "@RadarTrackMinimumLifetime", radarTrackMinimumLifetime );
                var speedParameter = sqlCommandParameters.AddDouble( "@Speed", speed );
                var strokeColorParameter = sqlCommandParameters.AddUInt32( "@StrokeColor", strokeColor );
                var fillColorParameter = sqlCommandParameters.AddUInt32( "@FillColor", fillColor );
                var polygonParameter = sqlCommandParameters.AddBinary( "@Polygon", polygon, 0 );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    rowVersion = (long)rowVersionParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool DeletePolygonZone( Guid id, long rowVersion )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "PolygonZoneDelete";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool InsertZoneExceptions( ref Guid id, Guid zone, DateTime timestamp )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "ZoneExceptionsInsert";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id, System.Data.ParameterDirection.InputOutput );
                var zoneParameter = sqlCommandParameters.AddReference( "@Zone", zone );
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@Timestamp", timestamp );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    id = (Guid)idParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool UpdateZoneExceptions( Guid id, ref long rowVersion, Guid zone, DateTime timestamp )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "ZoneExceptionsUpdate";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion, System.Data.ParameterDirection.InputOutput );
                var zoneParameter = sqlCommandParameters.AddReference( "@Zone", zone );
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@Timestamp", timestamp );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    rowVersion = (long)rowVersionParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool DeleteZoneExceptions( Guid id, long rowVersion )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "ZoneExceptionsDelete";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool InsertZoneExceptionsVesselLink( ref Guid id, Guid zoneExceptions, Guid vessel )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "ZoneExceptionsVesselLinkInsert";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id, System.Data.ParameterDirection.InputOutput );
                var zoneExceptionsParameter = sqlCommandParameters.AddReference( "@ZoneExceptions", zoneExceptions );
                var vesselParameter = sqlCommandParameters.AddReference( "@Vessel", vessel );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    id = (Guid)idParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool UpdateZoneExceptionsVesselLink( Guid id, ref long rowVersion, Guid zoneExceptions, Guid vessel )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "ZoneExceptionsVesselLinkUpdate";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion, System.Data.ParameterDirection.InputOutput );
                var zoneExceptionsParameter = sqlCommandParameters.AddReference( "@ZoneExceptions", zoneExceptions );
                var vesselParameter = sqlCommandParameters.AddReference( "@Vessel", vessel );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    rowVersion = (long)rowVersionParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool DeleteZoneExceptionsVesselLink( Guid id, long rowVersion )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "ZoneExceptionsVesselLinkDelete";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool InsertZoneTrackAlarm( ref Guid id, Guid track, Guid zone, Guid radarTrack, DateTime timestamp, double latitude, double longitude, double speed, double? course, double? heading, double enterLatitude, double enterLongitude, double? leaveLatitude, double? leaveLongitude )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "ZoneTrackAlarmInsert";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id, System.Data.ParameterDirection.InputOutput );
                var trackParameter = sqlCommandParameters.AddReference( "@Track", track );
                var zoneParameter = sqlCommandParameters.AddReference( "@Zone", zone );
                var radarTrackParameter = sqlCommandParameters.AddReference( "@RadarTrack", radarTrack );
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@Timestamp", timestamp );
                var latitudeParameter = sqlCommandParameters.AddDouble( "@Latitude", latitude );
                var longitudeParameter = sqlCommandParameters.AddDouble( "@Longitude", longitude );
                var speedParameter = sqlCommandParameters.AddDouble( "@Speed", speed );
                var courseParameter = sqlCommandParameters.AddDouble( "@Course", course );
                var headingParameter = sqlCommandParameters.AddDouble( "@Heading", heading );
                var enterLatitudeParameter = sqlCommandParameters.AddDouble( "@EnterLatitude", enterLatitude );
                var enterLongitudeParameter = sqlCommandParameters.AddDouble( "@EnterLongitude", enterLongitude );
                var leaveLatitudeParameter = sqlCommandParameters.AddDouble( "@LeaveLatitude", leaveLatitude );
                var leaveLongitudeParameter = sqlCommandParameters.AddDouble( "@LeaveLongitude", leaveLongitude );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    id = (Guid)idParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool UpdateZoneTrackAlarm( Guid id, ref long rowVersion, Guid track, Guid zone, Guid radarTrack, DateTime timestamp, double latitude, double longitude, double speed, double? course, double? heading, double enterLatitude, double enterLongitude, double? leaveLatitude, double? leaveLongitude )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "ZoneTrackAlarmUpdate";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion, System.Data.ParameterDirection.InputOutput );
                var trackParameter = sqlCommandParameters.AddReference( "@Track", track );
                var zoneParameter = sqlCommandParameters.AddReference( "@Zone", zone );
                var radarTrackParameter = sqlCommandParameters.AddReference( "@RadarTrack", radarTrack );
                var timestampParameter = sqlCommandParameters.AddDateTimeAsInt64( "@Timestamp", timestamp );
                var latitudeParameter = sqlCommandParameters.AddDouble( "@Latitude", latitude );
                var longitudeParameter = sqlCommandParameters.AddDouble( "@Longitude", longitude );
                var speedParameter = sqlCommandParameters.AddDouble( "@Speed", speed );
                var courseParameter = sqlCommandParameters.AddDouble( "@Course", course );
                var headingParameter = sqlCommandParameters.AddDouble( "@Heading", heading );
                var enterLatitudeParameter = sqlCommandParameters.AddDouble( "@EnterLatitude", enterLatitude );
                var enterLongitudeParameter = sqlCommandParameters.AddDouble( "@EnterLongitude", enterLongitude );
                var leaveLatitudeParameter = sqlCommandParameters.AddDouble( "@LeaveLatitude", leaveLatitude );
                var leaveLongitudeParameter = sqlCommandParameters.AddDouble( "@LeaveLongitude", leaveLongitude );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    rowVersion = (long)rowVersionParameter.Value;
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

        public bool DeleteZoneTrackAlarm( Guid id, long rowVersion )
        {
            bool result = false;
            try
            {
                var sqlCommand = _connection.CreateCommand( );
                sqlCommand.CommandText = "ZoneTrackAlarmDelete";
                sqlCommand.CommandType = System.Data.CommandType.StoredProcedure;
                var sqlCommandParameters = sqlCommand.Parameters;
                var idParameter = sqlCommandParameters.AddGuid( "@Id", id );
                var rowVersionParameter = sqlCommandParameters.AddInt64( "@RowVersion", rowVersion );
                int rowsAffected = sqlCommand.ExecuteNonQuery( );
                if(rowsAffected > 0)
                {
                    result = true;
                }
            }
            catch ( Exception exc )
            {
                LogException( exc );
                throw;
            }
            return result;
        }

    }
}
