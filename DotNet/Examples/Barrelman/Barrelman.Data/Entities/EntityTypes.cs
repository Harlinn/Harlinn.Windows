using System;
using System.Diagnostics.CodeAnalysis;
using System.IO;
using System.Runtime.CompilerServices;

using Microsoft.Extensions.Logging;

using Harlinn.Common.Core.Net;
using Harlinn.Common.Core.Net.Data;
using Harlinn.Common.Core.Net.Entities;
using Harlinn.Common.Core.Net.IO;

using Barrelman.Data.Types;

namespace Barrelman.Data.Entities
{
    public class AircraftTypeEntity : BaseEntity<Kind>
    {
        public AircraftTypeEntity( [DisallowNull] EntityContext entityContext, [DisallowNull] AircraftTypeObject data )
            : base( entityContext, data )
        {
        }

        public EntityContext? Context => (EntityContext?)_Context;

        protected EntityContext CheckedContext
        {
            get
            {
                var context = Context;
                if ( context is null )
                {
                    throw new InvalidOperationException( "Context is null" );
                }
                return context;
            }
        }

        private AircraftTypeObject GetData( ) 
        {
            return (AircraftTypeObject)base._GetData( );
        }

        public string Name
        {
            get => GetData( ).Name;
            set
            {
                var data = GetData( );
                if( data.Name != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Name = value;
                    OnPropertyChanged( );
                }
            }
        }

    }

    public class AisDeviceCommandEntity : BaseEntity<Kind>
    {
        WeakReference? _aisDeviceReference = null;
        WeakReference? _replyReference = null;
        public AisDeviceCommandEntity( [DisallowNull] EntityContext entityContext, [DisallowNull] AisDeviceCommandObject data )
            : base( entityContext, data )
        {
        }

        public EntityContext? Context => (EntityContext?)_Context;

        protected EntityContext CheckedContext
        {
            get
            {
                var context = Context;
                if ( context is null )
                {
                    throw new InvalidOperationException( "Context is null" );
                }
                return context;
            }
        }

        private AisDeviceCommandObject GetData( ) 
        {
            return (AisDeviceCommandObject)base._GetData( );
        }

        public Guid AisDeviceId
        {
            get => GetData( ).AisDevice;
            set
            {
                var data = GetData( );
                if( data.AisDevice != value )
                {
                    OnPropertyChanging( );
                    OnPropertyChanging( "AisDevice", false );
                    data = GetData( );
                    data.AisDevice = value;
                    OnPropertyChanged( );
                    OnPropertyChanged( "AisDevice" );
                }
            }
        }

        public AisDeviceEntity AisDevice
        {
            get
            {
                if(_aisDeviceReference != null)
                {
                    var result = (AisDeviceEntity?)_aisDeviceReference.Target;
                    if( result != null )
                    {
                        return result;
                    }
                }
                var data = GetData( );
                var context = CheckedContext;
                var entity = context.GetAisDeviceById( data.AisDevice );
                if( entity != null )
                {
                    _aisDeviceReference = new WeakReference( entity );
                }
                else
                {
                    var message = $"Cannot find the AisDeviceEntity object identified by {data.AisDevice}";
                    throw new Exception( message );
                }
                return entity;
            }
            set
            {
                AisDeviceId = value != null? value.Id : Guid.Empty;
            }
        }

        public DateTime Timestamp
        {
            get => GetData( ).Timestamp;
            set
            {
                var data = GetData( );
                if( data.Timestamp != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Timestamp = value;
                    OnPropertyChanged( );
                }
            }
        }

        public Types.DeviceCommandSourceType DeviceCommandSourceType
        {
            get => GetData( ).DeviceCommandSourceType;
            set
            {
                var data = GetData( );
                if( data.DeviceCommandSourceType != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.DeviceCommandSourceType = value;
                    OnPropertyChanged( );
                }
            }
        }

        public Guid DeviceCommandSourceId
        {
            get => GetData( ).DeviceCommandSourceId;
            set
            {
                var data = GetData( );
                if( data.DeviceCommandSourceId != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.DeviceCommandSourceId = value;
                    OnPropertyChanged( );
                }
            }
        }

        public Guid? ReplyId
        {
            get => GetData( ).Reply;
            set
            {
                var data = GetData( );
                if( data.Reply != value )
                {
                    OnPropertyChanging( );
                    OnPropertyChanging( "Reply", false );
                    data = GetData( );
                    data.Reply = value;
                    OnPropertyChanged( );
                    OnPropertyChanged( "Reply" );
                }
            }
        }

        public AisDeviceCommandReplyEntity? Reply
        {
            get
            {
                if(_replyReference != null)
                {
                    var result = (AisDeviceCommandReplyEntity?)_replyReference.Target;
                    if( result != null )
                    {
                        return result;
                    }
                }
                var data = GetData( );
                var context = CheckedContext;
                if( data.Reply is Guid replyId )
                {
                    var entity = context.GetAisDeviceCommandReplyById( replyId );
                    if( entity != null )
                    {
                        _replyReference = new WeakReference( entity );
                    }
                    return entity;
                }
                return null;
            }
            set
            {
                ReplyId = value != null? value.Id : null;
            }
        }

    }

    public class AisDeviceCommandReplyEntity : BaseEntity<Kind>
    {
        WeakReference? _aisDeviceReference = null;
        WeakReference? _commandReference = null;
        public AisDeviceCommandReplyEntity( [DisallowNull] EntityContext entityContext, [DisallowNull] AisDeviceCommandReplyObject data )
            : base( entityContext, data )
        {
        }

        public EntityContext? Context => (EntityContext?)_Context;

        protected EntityContext CheckedContext
        {
            get
            {
                var context = Context;
                if ( context is null )
                {
                    throw new InvalidOperationException( "Context is null" );
                }
                return context;
            }
        }

        private AisDeviceCommandReplyObject GetData( ) 
        {
            return (AisDeviceCommandReplyObject)base._GetData( );
        }

        public Guid AisDeviceId
        {
            get => GetData( ).AisDevice;
            set
            {
                var data = GetData( );
                if( data.AisDevice != value )
                {
                    OnPropertyChanging( );
                    OnPropertyChanging( "AisDevice", false );
                    data = GetData( );
                    data.AisDevice = value;
                    OnPropertyChanged( );
                    OnPropertyChanged( "AisDevice" );
                }
            }
        }

        public AisDeviceEntity AisDevice
        {
            get
            {
                if(_aisDeviceReference != null)
                {
                    var result = (AisDeviceEntity?)_aisDeviceReference.Target;
                    if( result != null )
                    {
                        return result;
                    }
                }
                var data = GetData( );
                var context = CheckedContext;
                var entity = context.GetAisDeviceById( data.AisDevice );
                if( entity != null )
                {
                    _aisDeviceReference = new WeakReference( entity );
                }
                else
                {
                    var message = $"Cannot find the AisDeviceEntity object identified by {data.AisDevice}";
                    throw new Exception( message );
                }
                return entity;
            }
            set
            {
                AisDeviceId = value != null? value.Id : Guid.Empty;
            }
        }

        public DateTime Timestamp
        {
            get => GetData( ).Timestamp;
            set
            {
                var data = GetData( );
                if( data.Timestamp != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Timestamp = value;
                    OnPropertyChanged( );
                }
            }
        }

        public Guid? CommandId
        {
            get => GetData( ).Command;
            set
            {
                var data = GetData( );
                if( data.Command != value )
                {
                    OnPropertyChanging( );
                    OnPropertyChanging( "Command", false );
                    data = GetData( );
                    data.Command = value;
                    OnPropertyChanged( );
                    OnPropertyChanged( "Command" );
                }
            }
        }

        public AisDeviceCommandEntity? Command
        {
            get
            {
                if(_commandReference != null)
                {
                    var result = (AisDeviceCommandEntity?)_commandReference.Target;
                    if( result != null )
                    {
                        return result;
                    }
                }
                var data = GetData( );
                var context = CheckedContext;
                if( data.Command is Guid commandId )
                {
                    var entity = context.GetAisDeviceCommandById( commandId );
                    if( entity != null )
                    {
                        _commandReference = new WeakReference( entity );
                    }
                    return entity;
                }
                return null;
            }
            set
            {
                CommandId = value != null? value.Id : null;
            }
        }

        public Types.DeviceCommandReplyStatus Status
        {
            get => GetData( ).Status;
            set
            {
                var data = GetData( );
                if( data.Status != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Status = value;
                    OnPropertyChanged( );
                }
            }
        }

        public string Message
        {
            get => GetData( ).Message;
            set
            {
                var data = GetData( );
                if( data.Message != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Message = value;
                    OnPropertyChanged( );
                }
            }
        }

    }

    public class AisDeviceConfigurationEntity : BaseEntity<Kind>
    {
        WeakReference? _aisDeviceReference = null;
        public AisDeviceConfigurationEntity( [DisallowNull] EntityContext entityContext, [DisallowNull] AisDeviceConfigurationObject data )
            : base( entityContext, data )
        {
        }

        public EntityContext? Context => (EntityContext?)_Context;

        protected EntityContext CheckedContext
        {
            get
            {
                var context = Context;
                if ( context is null )
                {
                    throw new InvalidOperationException( "Context is null" );
                }
                return context;
            }
        }

        private AisDeviceConfigurationObject GetData( ) 
        {
            return (AisDeviceConfigurationObject)base._GetData( );
        }

        public Guid AisDeviceId
        {
            get => GetData( ).AisDevice;
            set
            {
                var data = GetData( );
                if( data.AisDevice != value )
                {
                    OnPropertyChanging( );
                    OnPropertyChanging( "AisDevice", false );
                    data = GetData( );
                    data.AisDevice = value;
                    OnPropertyChanged( );
                    OnPropertyChanged( "AisDevice" );
                }
            }
        }

        public AisDeviceEntity AisDevice
        {
            get
            {
                if(_aisDeviceReference != null)
                {
                    var result = (AisDeviceEntity?)_aisDeviceReference.Target;
                    if( result != null )
                    {
                        return result;
                    }
                }
                var data = GetData( );
                var context = CheckedContext;
                var entity = context.GetAisDeviceById( data.AisDevice );
                if( entity != null )
                {
                    _aisDeviceReference = new WeakReference( entity );
                }
                else
                {
                    var message = $"Cannot find the AisDeviceEntity object identified by {data.AisDevice}";
                    throw new Exception( message );
                }
                return entity;
            }
            set
            {
                AisDeviceId = value != null? value.Id : Guid.Empty;
            }
        }

        public DateTime Timestamp
        {
            get => GetData( ).Timestamp;
            set
            {
                var data = GetData( );
                if( data.Timestamp != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Timestamp = value;
                    OnPropertyChanged( );
                }
            }
        }

        public bool Filter
        {
            get => GetData( ).Filter;
            set
            {
                var data = GetData( );
                if( data.Filter != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Filter = value;
                    OnPropertyChanged( );
                }
            }
        }

        public double NorthWestLatitude
        {
            get => GetData( ).NorthWestLatitude;
            set
            {
                var data = GetData( );
                if( data.NorthWestLatitude != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.NorthWestLatitude = value;
                    OnPropertyChanged( );
                }
            }
        }

        public double NorthWestLongitude
        {
            get => GetData( ).NorthWestLongitude;
            set
            {
                var data = GetData( );
                if( data.NorthWestLongitude != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.NorthWestLongitude = value;
                    OnPropertyChanged( );
                }
            }
        }

        public double SouthEastLatitude
        {
            get => GetData( ).SouthEastLatitude;
            set
            {
                var data = GetData( );
                if( data.SouthEastLatitude != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.SouthEastLatitude = value;
                    OnPropertyChanged( );
                }
            }
        }

        public double SouthEastLongitude
        {
            get => GetData( ).SouthEastLongitude;
            set
            {
                var data = GetData( );
                if( data.SouthEastLongitude != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.SouthEastLongitude = value;
                    OnPropertyChanged( );
                }
            }
        }

        public string ComPort
        {
            get => GetData( ).ComPort;
            set
            {
                var data = GetData( );
                if( data.ComPort != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.ComPort = value;
                    OnPropertyChanged( );
                }
            }
        }

        public int BaudRate
        {
            get => GetData( ).BaudRate;
            set
            {
                var data = GetData( );
                if( data.BaudRate != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.BaudRate = value;
                    OnPropertyChanged( );
                }
            }
        }

        public string IPAddress
        {
            get => GetData( ).IPAddress;
            set
            {
                var data = GetData( );
                if( data.IPAddress != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.IPAddress = value;
                    OnPropertyChanged( );
                }
            }
        }

        public int Port
        {
            get => GetData( ).Port;
            set
            {
                var data = GetData( );
                if( data.Port != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Port = value;
                    OnPropertyChanged( );
                }
            }
        }

        public int UdpPort
        {
            get => GetData( ).UdpPort;
            set
            {
                var data = GetData( );
                if( data.UdpPort != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.UdpPort = value;
                    OnPropertyChanged( );
                }
            }
        }

        public bool Authenticate
        {
            get => GetData( ).Authenticate;
            set
            {
                var data = GetData( );
                if( data.Authenticate != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Authenticate = value;
                    OnPropertyChanged( );
                }
            }
        }

        public string UserName
        {
            get => GetData( ).UserName;
            set
            {
                var data = GetData( );
                if( data.UserName != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.UserName = value;
                    OnPropertyChanged( );
                }
            }
        }

        public string Password
        {
            get => GetData( ).Password;
            set
            {
                var data = GetData( );
                if( data.Password != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Password = value;
                    OnPropertyChanged( );
                }
            }
        }

        public string AuthenticationURL
        {
            get => GetData( ).AuthenticationURL;
            set
            {
                var data = GetData( );
                if( data.AuthenticationURL != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.AuthenticationURL = value;
                    OnPropertyChanged( );
                }
            }
        }

        public Types.AisDeviceConnectionType ConnectionType
        {
            get => GetData( ).ConnectionType;
            set
            {
                var data = GetData( );
                if( data.ConnectionType != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.ConnectionType = value;
                    OnPropertyChanged( );
                }
            }
        }

        public int SourceUpdateRate
        {
            get => GetData( ).SourceUpdateRate;
            set
            {
                var data = GetData( );
                if( data.SourceUpdateRate != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.SourceUpdateRate = value;
                    OnPropertyChanged( );
                }
            }
        }

        public string ConfigurationURL
        {
            get => GetData( ).ConfigurationURL;
            set
            {
                var data = GetData( );
                if( data.ConfigurationURL != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.ConfigurationURL = value;
                    OnPropertyChanged( );
                }
            }
        }

        public bool StoreReceivedSentences
        {
            get => GetData( ).StoreReceivedSentences;
            set
            {
                var data = GetData( );
                if( data.StoreReceivedSentences != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.StoreReceivedSentences = value;
                    OnPropertyChanged( );
                }
            }
        }

    }

    public class AisDeviceRawMessageEntity : BaseEntity<Kind>
    {
        WeakReference? _aisDeviceReference = null;
        public AisDeviceRawMessageEntity( [DisallowNull] EntityContext entityContext, [DisallowNull] AisDeviceRawMessageObject data )
            : base( entityContext, data )
        {
        }

        public EntityContext? Context => (EntityContext?)_Context;

        protected EntityContext CheckedContext
        {
            get
            {
                var context = Context;
                if ( context is null )
                {
                    throw new InvalidOperationException( "Context is null" );
                }
                return context;
            }
        }

        private AisDeviceRawMessageObject GetData( ) 
        {
            return (AisDeviceRawMessageObject)base._GetData( );
        }

        public Guid AisDeviceId
        {
            get => GetData( ).AisDevice;
            set
            {
                var data = GetData( );
                if( data.AisDevice != value )
                {
                    OnPropertyChanging( );
                    OnPropertyChanging( "AisDevice", false );
                    data = GetData( );
                    data.AisDevice = value;
                    OnPropertyChanged( );
                    OnPropertyChanged( "AisDevice" );
                }
            }
        }

        public AisDeviceEntity AisDevice
        {
            get
            {
                if(_aisDeviceReference != null)
                {
                    var result = (AisDeviceEntity?)_aisDeviceReference.Target;
                    if( result != null )
                    {
                        return result;
                    }
                }
                var data = GetData( );
                var context = CheckedContext;
                var entity = context.GetAisDeviceById( data.AisDevice );
                if( entity != null )
                {
                    _aisDeviceReference = new WeakReference( entity );
                }
                else
                {
                    var message = $"Cannot find the AisDeviceEntity object identified by {data.AisDevice}";
                    throw new Exception( message );
                }
                return entity;
            }
            set
            {
                AisDeviceId = value != null? value.Id : Guid.Empty;
            }
        }

        public DateTime Timestamp
        {
            get => GetData( ).Timestamp;
            set
            {
                var data = GetData( );
                if( data.Timestamp != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Timestamp = value;
                    OnPropertyChanged( );
                }
            }
        }

        public bool IsSent
        {
            get => GetData( ).IsSent;
            set
            {
                var data = GetData( );
                if( data.IsSent != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.IsSent = value;
                    OnPropertyChanged( );
                }
            }
        }

        public string Message
        {
            get => GetData( ).Message;
            set
            {
                var data = GetData( );
                if( data.Message != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Message = value;
                    OnPropertyChanged( );
                }
            }
        }

    }

    public class AisDeviceRawSentenceEntity : BaseEntity<Kind>
    {
        WeakReference? _aisDeviceReference = null;
        public AisDeviceRawSentenceEntity( [DisallowNull] EntityContext entityContext, [DisallowNull] AisDeviceRawSentenceObject data )
            : base( entityContext, data )
        {
        }

        public EntityContext? Context => (EntityContext?)_Context;

        protected EntityContext CheckedContext
        {
            get
            {
                var context = Context;
                if ( context is null )
                {
                    throw new InvalidOperationException( "Context is null" );
                }
                return context;
            }
        }

        private AisDeviceRawSentenceObject GetData( ) 
        {
            return (AisDeviceRawSentenceObject)base._GetData( );
        }

        public Guid AisDeviceId
        {
            get => GetData( ).AisDevice;
            set
            {
                var data = GetData( );
                if( data.AisDevice != value )
                {
                    OnPropertyChanging( );
                    OnPropertyChanging( "AisDevice", false );
                    data = GetData( );
                    data.AisDevice = value;
                    OnPropertyChanged( );
                    OnPropertyChanged( "AisDevice" );
                }
            }
        }

        public AisDeviceEntity AisDevice
        {
            get
            {
                if(_aisDeviceReference != null)
                {
                    var result = (AisDeviceEntity?)_aisDeviceReference.Target;
                    if( result != null )
                    {
                        return result;
                    }
                }
                var data = GetData( );
                var context = CheckedContext;
                var entity = context.GetAisDeviceById( data.AisDevice );
                if( entity != null )
                {
                    _aisDeviceReference = new WeakReference( entity );
                }
                else
                {
                    var message = $"Cannot find the AisDeviceEntity object identified by {data.AisDevice}";
                    throw new Exception( message );
                }
                return entity;
            }
            set
            {
                AisDeviceId = value != null? value.Id : Guid.Empty;
            }
        }

        public DateTime Timestamp
        {
            get => GetData( ).Timestamp;
            set
            {
                var data = GetData( );
                if( data.Timestamp != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Timestamp = value;
                    OnPropertyChanged( );
                }
            }
        }

        public string Sentence
        {
            get => GetData( ).Sentence;
            set
            {
                var data = GetData( );
                if( data.Sentence != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Sentence = value;
                    OnPropertyChanged( );
                }
            }
        }

    }

    public abstract class AisMessageEntity : BaseEntity<Kind>
    {
        WeakReference? _aisDeviceReference = null;
        WeakReference? _mmsiReference = null;
        protected AisMessageEntity( [DisallowNull] EntityContext entityContext, [DisallowNull] AisMessageObject data )
            : base( entityContext, data )
        {
        }

        public EntityContext? Context => (EntityContext?)_Context;

        protected EntityContext CheckedContext
        {
            get
            {
                var context = Context;
                if ( context is null )
                {
                    throw new InvalidOperationException( "Context is null" );
                }
                return context;
            }
        }

        private AisMessageObject GetData( ) 
        {
            return (AisMessageObject)base._GetData( );
        }

        public Guid AisDeviceId
        {
            get => GetData( ).AisDevice;
            set
            {
                var data = GetData( );
                if( data.AisDevice != value )
                {
                    OnPropertyChanging( );
                    OnPropertyChanging( "AisDevice", false );
                    data = GetData( );
                    data.AisDevice = value;
                    OnPropertyChanged( );
                    OnPropertyChanged( "AisDevice" );
                }
            }
        }

        public AisDeviceEntity AisDevice
        {
            get
            {
                if(_aisDeviceReference != null)
                {
                    var result = (AisDeviceEntity?)_aisDeviceReference.Target;
                    if( result != null )
                    {
                        return result;
                    }
                }
                var data = GetData( );
                var context = CheckedContext;
                var entity = context.GetAisDeviceById( data.AisDevice );
                if( entity != null )
                {
                    _aisDeviceReference = new WeakReference( entity );
                }
                else
                {
                    var message = $"Cannot find the AisDeviceEntity object identified by {data.AisDevice}";
                    throw new Exception( message );
                }
                return entity;
            }
            set
            {
                AisDeviceId = value != null? value.Id : Guid.Empty;
            }
        }

        public DateTime ReceivedTimestamp
        {
            get => GetData( ).ReceivedTimestamp;
            set
            {
                var data = GetData( );
                if( data.ReceivedTimestamp != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.ReceivedTimestamp = value;
                    OnPropertyChanged( );
                }
            }
        }

        public long MessageSequenceNumber
        {
            get => GetData( ).MessageSequenceNumber;
            set
            {
                var data = GetData( );
                if( data.MessageSequenceNumber != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.MessageSequenceNumber = value;
                    OnPropertyChanged( );
                }
            }
        }

        public int Repeat
        {
            get => GetData( ).Repeat;
            set
            {
                var data = GetData( );
                if( data.Repeat != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Repeat = value;
                    OnPropertyChanged( );
                }
            }
        }

        public Guid? MmsiId
        {
            get => GetData( ).Mmsi;
            set
            {
                var data = GetData( );
                if( data.Mmsi != value )
                {
                    OnPropertyChanging( );
                    OnPropertyChanging( "Mmsi", false );
                    data = GetData( );
                    data.Mmsi = value;
                    OnPropertyChanged( );
                    OnPropertyChanged( "Mmsi" );
                }
            }
        }

        public MaritimeMobileServiceIdentityEntity? Mmsi
        {
            get
            {
                if(_mmsiReference != null)
                {
                    var result = (MaritimeMobileServiceIdentityEntity?)_mmsiReference.Target;
                    if( result != null )
                    {
                        return result;
                    }
                }
                var data = GetData( );
                var context = CheckedContext;
                if( data.Mmsi is Guid mmsiId )
                {
                    var entity = context.GetMaritimeMobileServiceIdentityById( mmsiId );
                    if( entity != null )
                    {
                        _mmsiReference = new WeakReference( entity );
                    }
                    return entity;
                }
                return null;
            }
            set
            {
                MmsiId = value != null? value.Id : null;
            }
        }

    }

    public class AidToNavigationReportMessageEntity : AisMessageEntity
    {
        public AidToNavigationReportMessageEntity( [DisallowNull] EntityContext entityContext, [DisallowNull] AidToNavigationReportMessageObject data )
            : base( entityContext, data )
        {
        }

        private AidToNavigationReportMessageObject GetData( ) 
        {
            return (AidToNavigationReportMessageObject)base._GetData( );
        }

        public Types.NavigationalAidType NavigationalAidType
        {
            get => GetData( ).NavigationalAidType;
            set
            {
                var data = GetData( );
                if( data.NavigationalAidType != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.NavigationalAidType = value;
                    OnPropertyChanged( );
                }
            }
        }

        public string Name
        {
            get => GetData( ).Name;
            set
            {
                var data = GetData( );
                if( data.Name != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Name = value;
                    OnPropertyChanged( );
                }
            }
        }

        public Types.PositionAccuracy PositionAccuracy
        {
            get => GetData( ).PositionAccuracy;
            set
            {
                var data = GetData( );
                if( data.PositionAccuracy != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.PositionAccuracy = value;
                    OnPropertyChanged( );
                }
            }
        }

        public double Longitude
        {
            get => GetData( ).Longitude;
            set
            {
                var data = GetData( );
                if( data.Longitude != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Longitude = value;
                    OnPropertyChanged( );
                }
            }
        }

        public double Latitude
        {
            get => GetData( ).Latitude;
            set
            {
                var data = GetData( );
                if( data.Latitude != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Latitude = value;
                    OnPropertyChanged( );
                }
            }
        }

        public int DimensionToBow
        {
            get => GetData( ).DimensionToBow;
            set
            {
                var data = GetData( );
                if( data.DimensionToBow != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.DimensionToBow = value;
                    OnPropertyChanged( );
                }
            }
        }

        public int DimensionToStern
        {
            get => GetData( ).DimensionToStern;
            set
            {
                var data = GetData( );
                if( data.DimensionToStern != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.DimensionToStern = value;
                    OnPropertyChanged( );
                }
            }
        }

        public int DimensionToPort
        {
            get => GetData( ).DimensionToPort;
            set
            {
                var data = GetData( );
                if( data.DimensionToPort != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.DimensionToPort = value;
                    OnPropertyChanged( );
                }
            }
        }

        public int DimensionToStarboard
        {
            get => GetData( ).DimensionToStarboard;
            set
            {
                var data = GetData( );
                if( data.DimensionToStarboard != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.DimensionToStarboard = value;
                    OnPropertyChanged( );
                }
            }
        }

        public Types.PositionFixType PositionFixType
        {
            get => GetData( ).PositionFixType;
            set
            {
                var data = GetData( );
                if( data.PositionFixType != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.PositionFixType = value;
                    OnPropertyChanged( );
                }
            }
        }

        public int Timestamp
        {
            get => GetData( ).Timestamp;
            set
            {
                var data = GetData( );
                if( data.Timestamp != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Timestamp = value;
                    OnPropertyChanged( );
                }
            }
        }

        public bool OffPosition
        {
            get => GetData( ).OffPosition;
            set
            {
                var data = GetData( );
                if( data.OffPosition != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.OffPosition = value;
                    OnPropertyChanged( );
                }
            }
        }

        public int RegionalReserved
        {
            get => GetData( ).RegionalReserved;
            set
            {
                var data = GetData( );
                if( data.RegionalReserved != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.RegionalReserved = value;
                    OnPropertyChanged( );
                }
            }
        }

        public Types.Raim Raim
        {
            get => GetData( ).Raim;
            set
            {
                var data = GetData( );
                if( data.Raim != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Raim = value;
                    OnPropertyChanged( );
                }
            }
        }

        public bool VirtualAid
        {
            get => GetData( ).VirtualAid;
            set
            {
                var data = GetData( );
                if( data.VirtualAid != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.VirtualAid = value;
                    OnPropertyChanged( );
                }
            }
        }

        public bool Assigned
        {
            get => GetData( ).Assigned;
            set
            {
                var data = GetData( );
                if( data.Assigned != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Assigned = value;
                    OnPropertyChanged( );
                }
            }
        }

        public int Spare
        {
            get => GetData( ).Spare;
            set
            {
                var data = GetData( );
                if( data.Spare != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Spare = value;
                    OnPropertyChanged( );
                }
            }
        }

        public string NameExtension
        {
            get => GetData( ).NameExtension;
            set
            {
                var data = GetData( );
                if( data.NameExtension != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.NameExtension = value;
                    OnPropertyChanged( );
                }
            }
        }

    }

    public class AisAddressedSafetyRelatedMessageEntity : AisMessageEntity
    {
        WeakReference? _destinationMmsiReference = null;
        public AisAddressedSafetyRelatedMessageEntity( [DisallowNull] EntityContext entityContext, [DisallowNull] AisAddressedSafetyRelatedMessageObject data )
            : base( entityContext, data )
        {
        }

        private AisAddressedSafetyRelatedMessageObject GetData( ) 
        {
            return (AisAddressedSafetyRelatedMessageObject)base._GetData( );
        }

        public int SequenceNumber
        {
            get => GetData( ).SequenceNumber;
            set
            {
                var data = GetData( );
                if( data.SequenceNumber != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.SequenceNumber = value;
                    OnPropertyChanged( );
                }
            }
        }

        public Guid? DestinationMmsiId
        {
            get => GetData( ).DestinationMmsi;
            set
            {
                var data = GetData( );
                if( data.DestinationMmsi != value )
                {
                    OnPropertyChanging( );
                    OnPropertyChanging( "DestinationMmsi", false );
                    data = GetData( );
                    data.DestinationMmsi = value;
                    OnPropertyChanged( );
                    OnPropertyChanged( "DestinationMmsi" );
                }
            }
        }

        public MaritimeMobileServiceIdentityEntity? DestinationMmsi
        {
            get
            {
                if(_destinationMmsiReference != null)
                {
                    var result = (MaritimeMobileServiceIdentityEntity?)_destinationMmsiReference.Target;
                    if( result != null )
                    {
                        return result;
                    }
                }
                var data = GetData( );
                var context = CheckedContext;
                if( data.DestinationMmsi is Guid destinationMmsiId )
                {
                    var entity = context.GetMaritimeMobileServiceIdentityById( destinationMmsiId );
                    if( entity != null )
                    {
                        _destinationMmsiReference = new WeakReference( entity );
                    }
                    return entity;
                }
                return null;
            }
            set
            {
                DestinationMmsiId = value != null? value.Id : null;
            }
        }

        public bool RetransmitFlag
        {
            get => GetData( ).RetransmitFlag;
            set
            {
                var data = GetData( );
                if( data.RetransmitFlag != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.RetransmitFlag = value;
                    OnPropertyChanged( );
                }
            }
        }

        public int Spare
        {
            get => GetData( ).Spare;
            set
            {
                var data = GetData( );
                if( data.Spare != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Spare = value;
                    OnPropertyChanged( );
                }
            }
        }

        public string Text
        {
            get => GetData( ).Text;
            set
            {
                var data = GetData( );
                if( data.Text != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Text = value;
                    OnPropertyChanged( );
                }
            }
        }

    }

    public class AisBaseStationReportMessageEntity : AisMessageEntity
    {
        public AisBaseStationReportMessageEntity( [DisallowNull] EntityContext entityContext, [DisallowNull] AisBaseStationReportMessageObject data )
            : base( entityContext, data )
        {
        }

        private AisBaseStationReportMessageObject GetData( ) 
        {
            return (AisBaseStationReportMessageObject)base._GetData( );
        }

        public DateTime Timestamp
        {
            get => GetData( ).Timestamp;
            set
            {
                var data = GetData( );
                if( data.Timestamp != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Timestamp = value;
                    OnPropertyChanged( );
                }
            }
        }

        public Types.PositionAccuracy PositionAccuracy
        {
            get => GetData( ).PositionAccuracy;
            set
            {
                var data = GetData( );
                if( data.PositionAccuracy != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.PositionAccuracy = value;
                    OnPropertyChanged( );
                }
            }
        }

        public double Longitude
        {
            get => GetData( ).Longitude;
            set
            {
                var data = GetData( );
                if( data.Longitude != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Longitude = value;
                    OnPropertyChanged( );
                }
            }
        }

        public double Latitude
        {
            get => GetData( ).Latitude;
            set
            {
                var data = GetData( );
                if( data.Latitude != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Latitude = value;
                    OnPropertyChanged( );
                }
            }
        }

        public Types.PositionFixType PositionFixType
        {
            get => GetData( ).PositionFixType;
            set
            {
                var data = GetData( );
                if( data.PositionFixType != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.PositionFixType = value;
                    OnPropertyChanged( );
                }
            }
        }

        public int Spare
        {
            get => GetData( ).Spare;
            set
            {
                var data = GetData( );
                if( data.Spare != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Spare = value;
                    OnPropertyChanged( );
                }
            }
        }

        public Types.Raim Raim
        {
            get => GetData( ).Raim;
            set
            {
                var data = GetData( );
                if( data.Raim != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Raim = value;
                    OnPropertyChanged( );
                }
            }
        }

        public int RadioStatus
        {
            get => GetData( ).RadioStatus;
            set
            {
                var data = GetData( );
                if( data.RadioStatus != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.RadioStatus = value;
                    OnPropertyChanged( );
                }
            }
        }

    }

    public class AisBinaryAcknowledgeMessageEntity : AisMessageEntity
    {
        WeakReference? _mmsi1Reference = null;
        WeakReference? _mmsi2Reference = null;
        WeakReference? _mmsi3Reference = null;
        WeakReference? _mmsi4Reference = null;
        public AisBinaryAcknowledgeMessageEntity( [DisallowNull] EntityContext entityContext, [DisallowNull] AisBinaryAcknowledgeMessageObject data )
            : base( entityContext, data )
        {
        }

        private AisBinaryAcknowledgeMessageObject GetData( ) 
        {
            return (AisBinaryAcknowledgeMessageObject)base._GetData( );
        }

        public int Spare
        {
            get => GetData( ).Spare;
            set
            {
                var data = GetData( );
                if( data.Spare != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Spare = value;
                    OnPropertyChanged( );
                }
            }
        }

        public int SequenceNumber1
        {
            get => GetData( ).SequenceNumber1;
            set
            {
                var data = GetData( );
                if( data.SequenceNumber1 != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.SequenceNumber1 = value;
                    OnPropertyChanged( );
                }
            }
        }

        public Guid? Mmsi1Id
        {
            get => GetData( ).Mmsi1;
            set
            {
                var data = GetData( );
                if( data.Mmsi1 != value )
                {
                    OnPropertyChanging( );
                    OnPropertyChanging( "Mmsi1", false );
                    data = GetData( );
                    data.Mmsi1 = value;
                    OnPropertyChanged( );
                    OnPropertyChanged( "Mmsi1" );
                }
            }
        }

        public MaritimeMobileServiceIdentityEntity? Mmsi1
        {
            get
            {
                if(_mmsi1Reference != null)
                {
                    var result = (MaritimeMobileServiceIdentityEntity?)_mmsi1Reference.Target;
                    if( result != null )
                    {
                        return result;
                    }
                }
                var data = GetData( );
                var context = CheckedContext;
                if( data.Mmsi1 is Guid mmsi1Id )
                {
                    var entity = context.GetMaritimeMobileServiceIdentityById( mmsi1Id );
                    if( entity != null )
                    {
                        _mmsi1Reference = new WeakReference( entity );
                    }
                    return entity;
                }
                return null;
            }
            set
            {
                Mmsi1Id = value != null? value.Id : null;
            }
        }

        public int? SequenceNumber2
        {
            get => GetData( ).SequenceNumber2;
            set
            {
                var data = GetData( );
                if( data.SequenceNumber2 != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.SequenceNumber2 = value;
                    OnPropertyChanged( );
                }
            }
        }

        public Guid? Mmsi2Id
        {
            get => GetData( ).Mmsi2;
            set
            {
                var data = GetData( );
                if( data.Mmsi2 != value )
                {
                    OnPropertyChanging( );
                    OnPropertyChanging( "Mmsi2", false );
                    data = GetData( );
                    data.Mmsi2 = value;
                    OnPropertyChanged( );
                    OnPropertyChanged( "Mmsi2" );
                }
            }
        }

        public MaritimeMobileServiceIdentityEntity? Mmsi2
        {
            get
            {
                if(_mmsi2Reference != null)
                {
                    var result = (MaritimeMobileServiceIdentityEntity?)_mmsi2Reference.Target;
                    if( result != null )
                    {
                        return result;
                    }
                }
                var data = GetData( );
                var context = CheckedContext;
                if( data.Mmsi2 is Guid mmsi2Id )
                {
                    var entity = context.GetMaritimeMobileServiceIdentityById( mmsi2Id );
                    if( entity != null )
                    {
                        _mmsi2Reference = new WeakReference( entity );
                    }
                    return entity;
                }
                return null;
            }
            set
            {
                Mmsi2Id = value != null? value.Id : null;
            }
        }

        public int? SequenceNumber3
        {
            get => GetData( ).SequenceNumber3;
            set
            {
                var data = GetData( );
                if( data.SequenceNumber3 != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.SequenceNumber3 = value;
                    OnPropertyChanged( );
                }
            }
        }

        public Guid? Mmsi3Id
        {
            get => GetData( ).Mmsi3;
            set
            {
                var data = GetData( );
                if( data.Mmsi3 != value )
                {
                    OnPropertyChanging( );
                    OnPropertyChanging( "Mmsi3", false );
                    data = GetData( );
                    data.Mmsi3 = value;
                    OnPropertyChanged( );
                    OnPropertyChanged( "Mmsi3" );
                }
            }
        }

        public MaritimeMobileServiceIdentityEntity? Mmsi3
        {
            get
            {
                if(_mmsi3Reference != null)
                {
                    var result = (MaritimeMobileServiceIdentityEntity?)_mmsi3Reference.Target;
                    if( result != null )
                    {
                        return result;
                    }
                }
                var data = GetData( );
                var context = CheckedContext;
                if( data.Mmsi3 is Guid mmsi3Id )
                {
                    var entity = context.GetMaritimeMobileServiceIdentityById( mmsi3Id );
                    if( entity != null )
                    {
                        _mmsi3Reference = new WeakReference( entity );
                    }
                    return entity;
                }
                return null;
            }
            set
            {
                Mmsi3Id = value != null? value.Id : null;
            }
        }

        public int? SequenceNumber4
        {
            get => GetData( ).SequenceNumber4;
            set
            {
                var data = GetData( );
                if( data.SequenceNumber4 != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.SequenceNumber4 = value;
                    OnPropertyChanged( );
                }
            }
        }

        public Guid? Mmsi4Id
        {
            get => GetData( ).Mmsi4;
            set
            {
                var data = GetData( );
                if( data.Mmsi4 != value )
                {
                    OnPropertyChanging( );
                    OnPropertyChanging( "Mmsi4", false );
                    data = GetData( );
                    data.Mmsi4 = value;
                    OnPropertyChanged( );
                    OnPropertyChanged( "Mmsi4" );
                }
            }
        }

        public MaritimeMobileServiceIdentityEntity? Mmsi4
        {
            get
            {
                if(_mmsi4Reference != null)
                {
                    var result = (MaritimeMobileServiceIdentityEntity?)_mmsi4Reference.Target;
                    if( result != null )
                    {
                        return result;
                    }
                }
                var data = GetData( );
                var context = CheckedContext;
                if( data.Mmsi4 is Guid mmsi4Id )
                {
                    var entity = context.GetMaritimeMobileServiceIdentityById( mmsi4Id );
                    if( entity != null )
                    {
                        _mmsi4Reference = new WeakReference( entity );
                    }
                    return entity;
                }
                return null;
            }
            set
            {
                Mmsi4Id = value != null? value.Id : null;
            }
        }

    }

    public class AisBinaryAddressedMessageEntity : AisMessageEntity
    {
        WeakReference? _destinationMmsiReference = null;
        public AisBinaryAddressedMessageEntity( [DisallowNull] EntityContext entityContext, [DisallowNull] AisBinaryAddressedMessageObject data )
            : base( entityContext, data )
        {
        }

        private AisBinaryAddressedMessageObject GetData( ) 
        {
            return (AisBinaryAddressedMessageObject)base._GetData( );
        }

        public int SequenceNumber
        {
            get => GetData( ).SequenceNumber;
            set
            {
                var data = GetData( );
                if( data.SequenceNumber != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.SequenceNumber = value;
                    OnPropertyChanged( );
                }
            }
        }

        public Guid? DestinationMmsiId
        {
            get => GetData( ).DestinationMmsi;
            set
            {
                var data = GetData( );
                if( data.DestinationMmsi != value )
                {
                    OnPropertyChanging( );
                    OnPropertyChanging( "DestinationMmsi", false );
                    data = GetData( );
                    data.DestinationMmsi = value;
                    OnPropertyChanged( );
                    OnPropertyChanged( "DestinationMmsi" );
                }
            }
        }

        public MaritimeMobileServiceIdentityEntity? DestinationMmsi
        {
            get
            {
                if(_destinationMmsiReference != null)
                {
                    var result = (MaritimeMobileServiceIdentityEntity?)_destinationMmsiReference.Target;
                    if( result != null )
                    {
                        return result;
                    }
                }
                var data = GetData( );
                var context = CheckedContext;
                if( data.DestinationMmsi is Guid destinationMmsiId )
                {
                    var entity = context.GetMaritimeMobileServiceIdentityById( destinationMmsiId );
                    if( entity != null )
                    {
                        _destinationMmsiReference = new WeakReference( entity );
                    }
                    return entity;
                }
                return null;
            }
            set
            {
                DestinationMmsiId = value != null? value.Id : null;
            }
        }

        public bool RetransmitFlag
        {
            get => GetData( ).RetransmitFlag;
            set
            {
                var data = GetData( );
                if( data.RetransmitFlag != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.RetransmitFlag = value;
                    OnPropertyChanged( );
                }
            }
        }

        public int Spare
        {
            get => GetData( ).Spare;
            set
            {
                var data = GetData( );
                if( data.Spare != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Spare = value;
                    OnPropertyChanged( );
                }
            }
        }

        public int DesignatedAreaCode
        {
            get => GetData( ).DesignatedAreaCode;
            set
            {
                var data = GetData( );
                if( data.DesignatedAreaCode != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.DesignatedAreaCode = value;
                    OnPropertyChanged( );
                }
            }
        }

        public int FunctionalId
        {
            get => GetData( ).FunctionalId;
            set
            {
                var data = GetData( );
                if( data.FunctionalId != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.FunctionalId = value;
                    OnPropertyChanged( );
                }
            }
        }

        public string Data
        {
            get => GetData( ).Data;
            set
            {
                var data = GetData( );
                if( data.Data != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Data = value;
                    OnPropertyChanged( );
                }
            }
        }

    }

    public class AisBinaryBroadcastMessageEntity : AisMessageEntity
    {
        public AisBinaryBroadcastMessageEntity( [DisallowNull] EntityContext entityContext, [DisallowNull] AisBinaryBroadcastMessageObject data )
            : base( entityContext, data )
        {
        }

        private AisBinaryBroadcastMessageObject GetData( ) 
        {
            return (AisBinaryBroadcastMessageObject)base._GetData( );
        }

        public int Spare
        {
            get => GetData( ).Spare;
            set
            {
                var data = GetData( );
                if( data.Spare != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Spare = value;
                    OnPropertyChanged( );
                }
            }
        }

        public int DesignatedAreaCode
        {
            get => GetData( ).DesignatedAreaCode;
            set
            {
                var data = GetData( );
                if( data.DesignatedAreaCode != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.DesignatedAreaCode = value;
                    OnPropertyChanged( );
                }
            }
        }

        public int FunctionalId
        {
            get => GetData( ).FunctionalId;
            set
            {
                var data = GetData( );
                if( data.FunctionalId != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.FunctionalId = value;
                    OnPropertyChanged( );
                }
            }
        }

        public string Data
        {
            get => GetData( ).Data;
            set
            {
                var data = GetData( );
                if( data.Data != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Data = value;
                    OnPropertyChanged( );
                }
            }
        }

    }

    public class AisDataLinkManagementMessageEntity : AisMessageEntity
    {
        public AisDataLinkManagementMessageEntity( [DisallowNull] EntityContext entityContext, [DisallowNull] AisDataLinkManagementMessageObject data )
            : base( entityContext, data )
        {
        }

        private AisDataLinkManagementMessageObject GetData( ) 
        {
            return (AisDataLinkManagementMessageObject)base._GetData( );
        }

        public int Spare
        {
            get => GetData( ).Spare;
            set
            {
                var data = GetData( );
                if( data.Spare != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Spare = value;
                    OnPropertyChanged( );
                }
            }
        }

        public int Offset1
        {
            get => GetData( ).Offset1;
            set
            {
                var data = GetData( );
                if( data.Offset1 != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Offset1 = value;
                    OnPropertyChanged( );
                }
            }
        }

        public int ReservedSlots1
        {
            get => GetData( ).ReservedSlots1;
            set
            {
                var data = GetData( );
                if( data.ReservedSlots1 != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.ReservedSlots1 = value;
                    OnPropertyChanged( );
                }
            }
        }

        public int Timeout1
        {
            get => GetData( ).Timeout1;
            set
            {
                var data = GetData( );
                if( data.Timeout1 != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Timeout1 = value;
                    OnPropertyChanged( );
                }
            }
        }

        public int Increment1
        {
            get => GetData( ).Increment1;
            set
            {
                var data = GetData( );
                if( data.Increment1 != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Increment1 = value;
                    OnPropertyChanged( );
                }
            }
        }

        public int? Offset2
        {
            get => GetData( ).Offset2;
            set
            {
                var data = GetData( );
                if( data.Offset2 != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Offset2 = value;
                    OnPropertyChanged( );
                }
            }
        }

        public int? ReservedSlots2
        {
            get => GetData( ).ReservedSlots2;
            set
            {
                var data = GetData( );
                if( data.ReservedSlots2 != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.ReservedSlots2 = value;
                    OnPropertyChanged( );
                }
            }
        }

        public int? Timeout2
        {
            get => GetData( ).Timeout2;
            set
            {
                var data = GetData( );
                if( data.Timeout2 != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Timeout2 = value;
                    OnPropertyChanged( );
                }
            }
        }

        public int? Increment2
        {
            get => GetData( ).Increment2;
            set
            {
                var data = GetData( );
                if( data.Increment2 != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Increment2 = value;
                    OnPropertyChanged( );
                }
            }
        }

        public int? Offset3
        {
            get => GetData( ).Offset3;
            set
            {
                var data = GetData( );
                if( data.Offset3 != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Offset3 = value;
                    OnPropertyChanged( );
                }
            }
        }

        public int? ReservedSlots3
        {
            get => GetData( ).ReservedSlots3;
            set
            {
                var data = GetData( );
                if( data.ReservedSlots3 != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.ReservedSlots3 = value;
                    OnPropertyChanged( );
                }
            }
        }

        public int? Timeout3
        {
            get => GetData( ).Timeout3;
            set
            {
                var data = GetData( );
                if( data.Timeout3 != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Timeout3 = value;
                    OnPropertyChanged( );
                }
            }
        }

        public int? Increment3
        {
            get => GetData( ).Increment3;
            set
            {
                var data = GetData( );
                if( data.Increment3 != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Increment3 = value;
                    OnPropertyChanged( );
                }
            }
        }

        public int? Offset4
        {
            get => GetData( ).Offset4;
            set
            {
                var data = GetData( );
                if( data.Offset4 != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Offset4 = value;
                    OnPropertyChanged( );
                }
            }
        }

        public int? ReservedSlots4
        {
            get => GetData( ).ReservedSlots4;
            set
            {
                var data = GetData( );
                if( data.ReservedSlots4 != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.ReservedSlots4 = value;
                    OnPropertyChanged( );
                }
            }
        }

        public int? Timeout4
        {
            get => GetData( ).Timeout4;
            set
            {
                var data = GetData( );
                if( data.Timeout4 != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Timeout4 = value;
                    OnPropertyChanged( );
                }
            }
        }

        public int? Increment4
        {
            get => GetData( ).Increment4;
            set
            {
                var data = GetData( );
                if( data.Increment4 != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Increment4 = value;
                    OnPropertyChanged( );
                }
            }
        }

    }

    public class AisExtendedClassBCsPositionReportMessageEntity : AisMessageEntity
    {
        WeakReference? _nameReference = null;
        public AisExtendedClassBCsPositionReportMessageEntity( [DisallowNull] EntityContext entityContext, [DisallowNull] AisExtendedClassBCsPositionReportMessageObject data )
            : base( entityContext, data )
        {
        }

        private AisExtendedClassBCsPositionReportMessageObject GetData( ) 
        {
            return (AisExtendedClassBCsPositionReportMessageObject)base._GetData( );
        }

        public int Reserved
        {
            get => GetData( ).Reserved;
            set
            {
                var data = GetData( );
                if( data.Reserved != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Reserved = value;
                    OnPropertyChanged( );
                }
            }
        }

        public double SpeedOverGround
        {
            get => GetData( ).SpeedOverGround;
            set
            {
                var data = GetData( );
                if( data.SpeedOverGround != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.SpeedOverGround = value;
                    OnPropertyChanged( );
                }
            }
        }

        public Types.PositionAccuracy PositionAccuracy
        {
            get => GetData( ).PositionAccuracy;
            set
            {
                var data = GetData( );
                if( data.PositionAccuracy != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.PositionAccuracy = value;
                    OnPropertyChanged( );
                }
            }
        }

        public double Longitude
        {
            get => GetData( ).Longitude;
            set
            {
                var data = GetData( );
                if( data.Longitude != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Longitude = value;
                    OnPropertyChanged( );
                }
            }
        }

        public double Latitude
        {
            get => GetData( ).Latitude;
            set
            {
                var data = GetData( );
                if( data.Latitude != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Latitude = value;
                    OnPropertyChanged( );
                }
            }
        }

        public double CourseOverGround
        {
            get => GetData( ).CourseOverGround;
            set
            {
                var data = GetData( );
                if( data.CourseOverGround != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.CourseOverGround = value;
                    OnPropertyChanged( );
                }
            }
        }

        public int? TrueHeading
        {
            get => GetData( ).TrueHeading;
            set
            {
                var data = GetData( );
                if( data.TrueHeading != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.TrueHeading = value;
                    OnPropertyChanged( );
                }
            }
        }

        public int Timestamp
        {
            get => GetData( ).Timestamp;
            set
            {
                var data = GetData( );
                if( data.Timestamp != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Timestamp = value;
                    OnPropertyChanged( );
                }
            }
        }

        public int RegionalReserved
        {
            get => GetData( ).RegionalReserved;
            set
            {
                var data = GetData( );
                if( data.RegionalReserved != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.RegionalReserved = value;
                    OnPropertyChanged( );
                }
            }
        }

        public Guid? NameId
        {
            get => GetData( ).Name;
            set
            {
                var data = GetData( );
                if( data.Name != value )
                {
                    OnPropertyChanging( );
                    OnPropertyChanging( "Name", false );
                    data = GetData( );
                    data.Name = value;
                    OnPropertyChanged( );
                    OnPropertyChanged( "Name" );
                }
            }
        }

        public NameEntity? Name
        {
            get
            {
                if(_nameReference != null)
                {
                    var result = (NameEntity?)_nameReference.Target;
                    if( result != null )
                    {
                        return result;
                    }
                }
                var data = GetData( );
                var context = CheckedContext;
                if( data.Name is Guid nameId )
                {
                    var entity = context.GetNameById( nameId );
                    if( entity != null )
                    {
                        _nameReference = new WeakReference( entity );
                    }
                    return entity;
                }
                return null;
            }
            set
            {
                NameId = value != null? value.Id : null;
            }
        }

        public Types.ShipType ShipType
        {
            get => GetData( ).ShipType;
            set
            {
                var data = GetData( );
                if( data.ShipType != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.ShipType = value;
                    OnPropertyChanged( );
                }
            }
        }

        public int DimensionToBow
        {
            get => GetData( ).DimensionToBow;
            set
            {
                var data = GetData( );
                if( data.DimensionToBow != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.DimensionToBow = value;
                    OnPropertyChanged( );
                }
            }
        }

        public int DimensionToStern
        {
            get => GetData( ).DimensionToStern;
            set
            {
                var data = GetData( );
                if( data.DimensionToStern != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.DimensionToStern = value;
                    OnPropertyChanged( );
                }
            }
        }

        public int DimensionToPort
        {
            get => GetData( ).DimensionToPort;
            set
            {
                var data = GetData( );
                if( data.DimensionToPort != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.DimensionToPort = value;
                    OnPropertyChanged( );
                }
            }
        }

        public int DimensionToStarboard
        {
            get => GetData( ).DimensionToStarboard;
            set
            {
                var data = GetData( );
                if( data.DimensionToStarboard != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.DimensionToStarboard = value;
                    OnPropertyChanged( );
                }
            }
        }

        public Types.PositionFixType PositionFixType
        {
            get => GetData( ).PositionFixType;
            set
            {
                var data = GetData( );
                if( data.PositionFixType != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.PositionFixType = value;
                    OnPropertyChanged( );
                }
            }
        }

        public Types.Raim Raim
        {
            get => GetData( ).Raim;
            set
            {
                var data = GetData( );
                if( data.Raim != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Raim = value;
                    OnPropertyChanged( );
                }
            }
        }

        public bool DataTerminalReady
        {
            get => GetData( ).DataTerminalReady;
            set
            {
                var data = GetData( );
                if( data.DataTerminalReady != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.DataTerminalReady = value;
                    OnPropertyChanged( );
                }
            }
        }

        public bool Assigned
        {
            get => GetData( ).Assigned;
            set
            {
                var data = GetData( );
                if( data.Assigned != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Assigned = value;
                    OnPropertyChanged( );
                }
            }
        }

        public int Spare
        {
            get => GetData( ).Spare;
            set
            {
                var data = GetData( );
                if( data.Spare != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Spare = value;
                    OnPropertyChanged( );
                }
            }
        }

    }

    public class AisInterrogationMessageEntity : AisMessageEntity
    {
        WeakReference? _interrogatedMmsiReference = null;
        WeakReference? _secondStationInterrogationMmsiReference = null;
        public AisInterrogationMessageEntity( [DisallowNull] EntityContext entityContext, [DisallowNull] AisInterrogationMessageObject data )
            : base( entityContext, data )
        {
        }

        private AisInterrogationMessageObject GetData( ) 
        {
            return (AisInterrogationMessageObject)base._GetData( );
        }

        public Guid? InterrogatedMmsiId
        {
            get => GetData( ).InterrogatedMmsi;
            set
            {
                var data = GetData( );
                if( data.InterrogatedMmsi != value )
                {
                    OnPropertyChanging( );
                    OnPropertyChanging( "InterrogatedMmsi", false );
                    data = GetData( );
                    data.InterrogatedMmsi = value;
                    OnPropertyChanged( );
                    OnPropertyChanged( "InterrogatedMmsi" );
                }
            }
        }

        public MaritimeMobileServiceIdentityEntity? InterrogatedMmsi
        {
            get
            {
                if(_interrogatedMmsiReference != null)
                {
                    var result = (MaritimeMobileServiceIdentityEntity?)_interrogatedMmsiReference.Target;
                    if( result != null )
                    {
                        return result;
                    }
                }
                var data = GetData( );
                var context = CheckedContext;
                if( data.InterrogatedMmsi is Guid interrogatedMmsiId )
                {
                    var entity = context.GetMaritimeMobileServiceIdentityById( interrogatedMmsiId );
                    if( entity != null )
                    {
                        _interrogatedMmsiReference = new WeakReference( entity );
                    }
                    return entity;
                }
                return null;
            }
            set
            {
                InterrogatedMmsiId = value != null? value.Id : null;
            }
        }

        public Types.AisMessageType FirstMessageType
        {
            get => GetData( ).FirstMessageType;
            set
            {
                var data = GetData( );
                if( data.FirstMessageType != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.FirstMessageType = value;
                    OnPropertyChanged( );
                }
            }
        }

        public int FirstSlotOffset
        {
            get => GetData( ).FirstSlotOffset;
            set
            {
                var data = GetData( );
                if( data.FirstSlotOffset != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.FirstSlotOffset = value;
                    OnPropertyChanged( );
                }
            }
        }

        public Types.AisMessageType? SecondMessageType
        {
            get => GetData( ).SecondMessageType;
            set
            {
                var data = GetData( );
                if( data.SecondMessageType != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.SecondMessageType = value;
                    OnPropertyChanged( );
                }
            }
        }

        public int? SecondSlotOffset
        {
            get => GetData( ).SecondSlotOffset;
            set
            {
                var data = GetData( );
                if( data.SecondSlotOffset != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.SecondSlotOffset = value;
                    OnPropertyChanged( );
                }
            }
        }

        public Guid? SecondStationInterrogationMmsiId
        {
            get => GetData( ).SecondStationInterrogationMmsi;
            set
            {
                var data = GetData( );
                if( data.SecondStationInterrogationMmsi != value )
                {
                    OnPropertyChanging( );
                    OnPropertyChanging( "SecondStationInterrogationMmsi", false );
                    data = GetData( );
                    data.SecondStationInterrogationMmsi = value;
                    OnPropertyChanged( );
                    OnPropertyChanged( "SecondStationInterrogationMmsi" );
                }
            }
        }

        public MaritimeMobileServiceIdentityEntity? SecondStationInterrogationMmsi
        {
            get
            {
                if(_secondStationInterrogationMmsiReference != null)
                {
                    var result = (MaritimeMobileServiceIdentityEntity?)_secondStationInterrogationMmsiReference.Target;
                    if( result != null )
                    {
                        return result;
                    }
                }
                var data = GetData( );
                var context = CheckedContext;
                if( data.SecondStationInterrogationMmsi is Guid secondStationInterrogationMmsiId )
                {
                    var entity = context.GetMaritimeMobileServiceIdentityById( secondStationInterrogationMmsiId );
                    if( entity != null )
                    {
                        _secondStationInterrogationMmsiReference = new WeakReference( entity );
                    }
                    return entity;
                }
                return null;
            }
            set
            {
                SecondStationInterrogationMmsiId = value != null? value.Id : null;
            }
        }

        public Types.AisMessageType? SecondStationFirstMessageType
        {
            get => GetData( ).SecondStationFirstMessageType;
            set
            {
                var data = GetData( );
                if( data.SecondStationFirstMessageType != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.SecondStationFirstMessageType = value;
                    OnPropertyChanged( );
                }
            }
        }

        public int? SecondStationFirstSlotOffset
        {
            get => GetData( ).SecondStationFirstSlotOffset;
            set
            {
                var data = GetData( );
                if( data.SecondStationFirstSlotOffset != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.SecondStationFirstSlotOffset = value;
                    OnPropertyChanged( );
                }
            }
        }

    }

    public abstract class AisPositionReportClassAMessageBaseEntity : AisMessageEntity
    {
        protected AisPositionReportClassAMessageBaseEntity( [DisallowNull] EntityContext entityContext, [DisallowNull] AisPositionReportClassAMessageBaseObject data )
            : base( entityContext, data )
        {
        }

        private AisPositionReportClassAMessageBaseObject GetData( ) 
        {
            return (AisPositionReportClassAMessageBaseObject)base._GetData( );
        }

        public Types.NavigationStatus NavigationStatus
        {
            get => GetData( ).NavigationStatus;
            set
            {
                var data = GetData( );
                if( data.NavigationStatus != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.NavigationStatus = value;
                    OnPropertyChanged( );
                }
            }
        }

        public int? RateOfTurn
        {
            get => GetData( ).RateOfTurn;
            set
            {
                var data = GetData( );
                if( data.RateOfTurn != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.RateOfTurn = value;
                    OnPropertyChanged( );
                }
            }
        }

        public double SpeedOverGround
        {
            get => GetData( ).SpeedOverGround;
            set
            {
                var data = GetData( );
                if( data.SpeedOverGround != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.SpeedOverGround = value;
                    OnPropertyChanged( );
                }
            }
        }

        public Types.PositionAccuracy PositionAccuracy
        {
            get => GetData( ).PositionAccuracy;
            set
            {
                var data = GetData( );
                if( data.PositionAccuracy != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.PositionAccuracy = value;
                    OnPropertyChanged( );
                }
            }
        }

        public double Longitude
        {
            get => GetData( ).Longitude;
            set
            {
                var data = GetData( );
                if( data.Longitude != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Longitude = value;
                    OnPropertyChanged( );
                }
            }
        }

        public double Latitude
        {
            get => GetData( ).Latitude;
            set
            {
                var data = GetData( );
                if( data.Latitude != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Latitude = value;
                    OnPropertyChanged( );
                }
            }
        }

        public double CourseOverGround
        {
            get => GetData( ).CourseOverGround;
            set
            {
                var data = GetData( );
                if( data.CourseOverGround != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.CourseOverGround = value;
                    OnPropertyChanged( );
                }
            }
        }

        public int? TrueHeading
        {
            get => GetData( ).TrueHeading;
            set
            {
                var data = GetData( );
                if( data.TrueHeading != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.TrueHeading = value;
                    OnPropertyChanged( );
                }
            }
        }

        public int Timestamp
        {
            get => GetData( ).Timestamp;
            set
            {
                var data = GetData( );
                if( data.Timestamp != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Timestamp = value;
                    OnPropertyChanged( );
                }
            }
        }

        public Types.ManeuverIndicator ManeuverIndicator
        {
            get => GetData( ).ManeuverIndicator;
            set
            {
                var data = GetData( );
                if( data.ManeuverIndicator != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.ManeuverIndicator = value;
                    OnPropertyChanged( );
                }
            }
        }

        public int Spare
        {
            get => GetData( ).Spare;
            set
            {
                var data = GetData( );
                if( data.Spare != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Spare = value;
                    OnPropertyChanged( );
                }
            }
        }

        public Types.Raim Raim
        {
            get => GetData( ).Raim;
            set
            {
                var data = GetData( );
                if( data.Raim != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Raim = value;
                    OnPropertyChanged( );
                }
            }
        }

        public int RadioStatus
        {
            get => GetData( ).RadioStatus;
            set
            {
                var data = GetData( );
                if( data.RadioStatus != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.RadioStatus = value;
                    OnPropertyChanged( );
                }
            }
        }

    }

    public class AisPositionReportClassAAssignedScheduleMessageEntity : AisPositionReportClassAMessageBaseEntity
    {
        public AisPositionReportClassAAssignedScheduleMessageEntity( [DisallowNull] EntityContext entityContext, [DisallowNull] AisPositionReportClassAAssignedScheduleMessageObject data )
            : base( entityContext, data )
        {
        }

    }

    public class AisPositionReportClassAMessageEntity : AisPositionReportClassAMessageBaseEntity
    {
        public AisPositionReportClassAMessageEntity( [DisallowNull] EntityContext entityContext, [DisallowNull] AisPositionReportClassAMessageObject data )
            : base( entityContext, data )
        {
        }

    }

    public class AisPositionReportClassAResponseToInterrogationMessageEntity : AisPositionReportClassAMessageBaseEntity
    {
        public AisPositionReportClassAResponseToInterrogationMessageEntity( [DisallowNull] EntityContext entityContext, [DisallowNull] AisPositionReportClassAResponseToInterrogationMessageObject data )
            : base( entityContext, data )
        {
        }

    }

    public class AisPositionReportForLongRangeApplicationsMessageEntity : AisMessageEntity
    {
        public AisPositionReportForLongRangeApplicationsMessageEntity( [DisallowNull] EntityContext entityContext, [DisallowNull] AisPositionReportForLongRangeApplicationsMessageObject data )
            : base( entityContext, data )
        {
        }

        private AisPositionReportForLongRangeApplicationsMessageObject GetData( ) 
        {
            return (AisPositionReportForLongRangeApplicationsMessageObject)base._GetData( );
        }

        public Types.PositionAccuracy PositionAccuracy
        {
            get => GetData( ).PositionAccuracy;
            set
            {
                var data = GetData( );
                if( data.PositionAccuracy != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.PositionAccuracy = value;
                    OnPropertyChanged( );
                }
            }
        }

        public Types.Raim Raim
        {
            get => GetData( ).Raim;
            set
            {
                var data = GetData( );
                if( data.Raim != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Raim = value;
                    OnPropertyChanged( );
                }
            }
        }

        public Types.NavigationStatus NavigationStatus
        {
            get => GetData( ).NavigationStatus;
            set
            {
                var data = GetData( );
                if( data.NavigationStatus != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.NavigationStatus = value;
                    OnPropertyChanged( );
                }
            }
        }

        public double Longitude
        {
            get => GetData( ).Longitude;
            set
            {
                var data = GetData( );
                if( data.Longitude != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Longitude = value;
                    OnPropertyChanged( );
                }
            }
        }

        public double Latitude
        {
            get => GetData( ).Latitude;
            set
            {
                var data = GetData( );
                if( data.Latitude != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Latitude = value;
                    OnPropertyChanged( );
                }
            }
        }

        public double SpeedOverGround
        {
            get => GetData( ).SpeedOverGround;
            set
            {
                var data = GetData( );
                if( data.SpeedOverGround != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.SpeedOverGround = value;
                    OnPropertyChanged( );
                }
            }
        }

        public double CourseOverGround
        {
            get => GetData( ).CourseOverGround;
            set
            {
                var data = GetData( );
                if( data.CourseOverGround != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.CourseOverGround = value;
                    OnPropertyChanged( );
                }
            }
        }

        public Types.GnssPositionStatus GnssPositionStatus
        {
            get => GetData( ).GnssPositionStatus;
            set
            {
                var data = GetData( );
                if( data.GnssPositionStatus != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.GnssPositionStatus = value;
                    OnPropertyChanged( );
                }
            }
        }

        public int Spare
        {
            get => GetData( ).Spare;
            set
            {
                var data = GetData( );
                if( data.Spare != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Spare = value;
                    OnPropertyChanged( );
                }
            }
        }

    }

    public class AisSafetyRelatedAcknowledgmentMessageEntity : AisMessageEntity
    {
        WeakReference? _mmsi1Reference = null;
        WeakReference? _mmsi2Reference = null;
        WeakReference? _mmsi3Reference = null;
        WeakReference? _mmsi4Reference = null;
        public AisSafetyRelatedAcknowledgmentMessageEntity( [DisallowNull] EntityContext entityContext, [DisallowNull] AisSafetyRelatedAcknowledgmentMessageObject data )
            : base( entityContext, data )
        {
        }

        private AisSafetyRelatedAcknowledgmentMessageObject GetData( ) 
        {
            return (AisSafetyRelatedAcknowledgmentMessageObject)base._GetData( );
        }

        public int Spare
        {
            get => GetData( ).Spare;
            set
            {
                var data = GetData( );
                if( data.Spare != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Spare = value;
                    OnPropertyChanged( );
                }
            }
        }

        public int SequenceNumber1
        {
            get => GetData( ).SequenceNumber1;
            set
            {
                var data = GetData( );
                if( data.SequenceNumber1 != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.SequenceNumber1 = value;
                    OnPropertyChanged( );
                }
            }
        }

        public Guid? Mmsi1Id
        {
            get => GetData( ).Mmsi1;
            set
            {
                var data = GetData( );
                if( data.Mmsi1 != value )
                {
                    OnPropertyChanging( );
                    OnPropertyChanging( "Mmsi1", false );
                    data = GetData( );
                    data.Mmsi1 = value;
                    OnPropertyChanged( );
                    OnPropertyChanged( "Mmsi1" );
                }
            }
        }

        public MaritimeMobileServiceIdentityEntity? Mmsi1
        {
            get
            {
                if(_mmsi1Reference != null)
                {
                    var result = (MaritimeMobileServiceIdentityEntity?)_mmsi1Reference.Target;
                    if( result != null )
                    {
                        return result;
                    }
                }
                var data = GetData( );
                var context = CheckedContext;
                if( data.Mmsi1 is Guid mmsi1Id )
                {
                    var entity = context.GetMaritimeMobileServiceIdentityById( mmsi1Id );
                    if( entity != null )
                    {
                        _mmsi1Reference = new WeakReference( entity );
                    }
                    return entity;
                }
                return null;
            }
            set
            {
                Mmsi1Id = value != null? value.Id : null;
            }
        }

        public int? SequenceNumber2
        {
            get => GetData( ).SequenceNumber2;
            set
            {
                var data = GetData( );
                if( data.SequenceNumber2 != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.SequenceNumber2 = value;
                    OnPropertyChanged( );
                }
            }
        }

        public Guid? Mmsi2Id
        {
            get => GetData( ).Mmsi2;
            set
            {
                var data = GetData( );
                if( data.Mmsi2 != value )
                {
                    OnPropertyChanging( );
                    OnPropertyChanging( "Mmsi2", false );
                    data = GetData( );
                    data.Mmsi2 = value;
                    OnPropertyChanged( );
                    OnPropertyChanged( "Mmsi2" );
                }
            }
        }

        public MaritimeMobileServiceIdentityEntity? Mmsi2
        {
            get
            {
                if(_mmsi2Reference != null)
                {
                    var result = (MaritimeMobileServiceIdentityEntity?)_mmsi2Reference.Target;
                    if( result != null )
                    {
                        return result;
                    }
                }
                var data = GetData( );
                var context = CheckedContext;
                if( data.Mmsi2 is Guid mmsi2Id )
                {
                    var entity = context.GetMaritimeMobileServiceIdentityById( mmsi2Id );
                    if( entity != null )
                    {
                        _mmsi2Reference = new WeakReference( entity );
                    }
                    return entity;
                }
                return null;
            }
            set
            {
                Mmsi2Id = value != null? value.Id : null;
            }
        }

        public int? SequenceNumber3
        {
            get => GetData( ).SequenceNumber3;
            set
            {
                var data = GetData( );
                if( data.SequenceNumber3 != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.SequenceNumber3 = value;
                    OnPropertyChanged( );
                }
            }
        }

        public Guid? Mmsi3Id
        {
            get => GetData( ).Mmsi3;
            set
            {
                var data = GetData( );
                if( data.Mmsi3 != value )
                {
                    OnPropertyChanging( );
                    OnPropertyChanging( "Mmsi3", false );
                    data = GetData( );
                    data.Mmsi3 = value;
                    OnPropertyChanged( );
                    OnPropertyChanged( "Mmsi3" );
                }
            }
        }

        public MaritimeMobileServiceIdentityEntity? Mmsi3
        {
            get
            {
                if(_mmsi3Reference != null)
                {
                    var result = (MaritimeMobileServiceIdentityEntity?)_mmsi3Reference.Target;
                    if( result != null )
                    {
                        return result;
                    }
                }
                var data = GetData( );
                var context = CheckedContext;
                if( data.Mmsi3 is Guid mmsi3Id )
                {
                    var entity = context.GetMaritimeMobileServiceIdentityById( mmsi3Id );
                    if( entity != null )
                    {
                        _mmsi3Reference = new WeakReference( entity );
                    }
                    return entity;
                }
                return null;
            }
            set
            {
                Mmsi3Id = value != null? value.Id : null;
            }
        }

        public int? SequenceNumber4
        {
            get => GetData( ).SequenceNumber4;
            set
            {
                var data = GetData( );
                if( data.SequenceNumber4 != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.SequenceNumber4 = value;
                    OnPropertyChanged( );
                }
            }
        }

        public Guid? Mmsi4Id
        {
            get => GetData( ).Mmsi4;
            set
            {
                var data = GetData( );
                if( data.Mmsi4 != value )
                {
                    OnPropertyChanging( );
                    OnPropertyChanging( "Mmsi4", false );
                    data = GetData( );
                    data.Mmsi4 = value;
                    OnPropertyChanged( );
                    OnPropertyChanged( "Mmsi4" );
                }
            }
        }

        public MaritimeMobileServiceIdentityEntity? Mmsi4
        {
            get
            {
                if(_mmsi4Reference != null)
                {
                    var result = (MaritimeMobileServiceIdentityEntity?)_mmsi4Reference.Target;
                    if( result != null )
                    {
                        return result;
                    }
                }
                var data = GetData( );
                var context = CheckedContext;
                if( data.Mmsi4 is Guid mmsi4Id )
                {
                    var entity = context.GetMaritimeMobileServiceIdentityById( mmsi4Id );
                    if( entity != null )
                    {
                        _mmsi4Reference = new WeakReference( entity );
                    }
                    return entity;
                }
                return null;
            }
            set
            {
                Mmsi4Id = value != null? value.Id : null;
            }
        }

    }

    public class AisStandardClassBCsPositionReportMessageEntity : AisMessageEntity
    {
        public AisStandardClassBCsPositionReportMessageEntity( [DisallowNull] EntityContext entityContext, [DisallowNull] AisStandardClassBCsPositionReportMessageObject data )
            : base( entityContext, data )
        {
        }

        private AisStandardClassBCsPositionReportMessageObject GetData( ) 
        {
            return (AisStandardClassBCsPositionReportMessageObject)base._GetData( );
        }

        public int Reserved
        {
            get => GetData( ).Reserved;
            set
            {
                var data = GetData( );
                if( data.Reserved != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Reserved = value;
                    OnPropertyChanged( );
                }
            }
        }

        public double SpeedOverGround
        {
            get => GetData( ).SpeedOverGround;
            set
            {
                var data = GetData( );
                if( data.SpeedOverGround != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.SpeedOverGround = value;
                    OnPropertyChanged( );
                }
            }
        }

        public Types.PositionAccuracy PositionAccuracy
        {
            get => GetData( ).PositionAccuracy;
            set
            {
                var data = GetData( );
                if( data.PositionAccuracy != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.PositionAccuracy = value;
                    OnPropertyChanged( );
                }
            }
        }

        public double Longitude
        {
            get => GetData( ).Longitude;
            set
            {
                var data = GetData( );
                if( data.Longitude != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Longitude = value;
                    OnPropertyChanged( );
                }
            }
        }

        public double Latitude
        {
            get => GetData( ).Latitude;
            set
            {
                var data = GetData( );
                if( data.Latitude != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Latitude = value;
                    OnPropertyChanged( );
                }
            }
        }

        public double CourseOverGround
        {
            get => GetData( ).CourseOverGround;
            set
            {
                var data = GetData( );
                if( data.CourseOverGround != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.CourseOverGround = value;
                    OnPropertyChanged( );
                }
            }
        }

        public int? TrueHeading
        {
            get => GetData( ).TrueHeading;
            set
            {
                var data = GetData( );
                if( data.TrueHeading != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.TrueHeading = value;
                    OnPropertyChanged( );
                }
            }
        }

        public int Timestamp
        {
            get => GetData( ).Timestamp;
            set
            {
                var data = GetData( );
                if( data.Timestamp != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Timestamp = value;
                    OnPropertyChanged( );
                }
            }
        }

        public int RegionalReserved
        {
            get => GetData( ).RegionalReserved;
            set
            {
                var data = GetData( );
                if( data.RegionalReserved != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.RegionalReserved = value;
                    OnPropertyChanged( );
                }
            }
        }

        public bool IsCsUnit
        {
            get => GetData( ).IsCsUnit;
            set
            {
                var data = GetData( );
                if( data.IsCsUnit != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.IsCsUnit = value;
                    OnPropertyChanged( );
                }
            }
        }

        public bool HasDisplay
        {
            get => GetData( ).HasDisplay;
            set
            {
                var data = GetData( );
                if( data.HasDisplay != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.HasDisplay = value;
                    OnPropertyChanged( );
                }
            }
        }

        public bool HasDscCapability
        {
            get => GetData( ).HasDscCapability;
            set
            {
                var data = GetData( );
                if( data.HasDscCapability != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.HasDscCapability = value;
                    OnPropertyChanged( );
                }
            }
        }

        public bool Band
        {
            get => GetData( ).Band;
            set
            {
                var data = GetData( );
                if( data.Band != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Band = value;
                    OnPropertyChanged( );
                }
            }
        }

        public bool CanAcceptMessage22
        {
            get => GetData( ).CanAcceptMessage22;
            set
            {
                var data = GetData( );
                if( data.CanAcceptMessage22 != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.CanAcceptMessage22 = value;
                    OnPropertyChanged( );
                }
            }
        }

        public bool Assigned
        {
            get => GetData( ).Assigned;
            set
            {
                var data = GetData( );
                if( data.Assigned != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Assigned = value;
                    OnPropertyChanged( );
                }
            }
        }

        public Types.Raim Raim
        {
            get => GetData( ).Raim;
            set
            {
                var data = GetData( );
                if( data.Raim != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Raim = value;
                    OnPropertyChanged( );
                }
            }
        }

        public int RadioStatus
        {
            get => GetData( ).RadioStatus;
            set
            {
                var data = GetData( );
                if( data.RadioStatus != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.RadioStatus = value;
                    OnPropertyChanged( );
                }
            }
        }

    }

    public class AisStandardSarAircraftPositionReportMessageEntity : AisMessageEntity
    {
        public AisStandardSarAircraftPositionReportMessageEntity( [DisallowNull] EntityContext entityContext, [DisallowNull] AisStandardSarAircraftPositionReportMessageObject data )
            : base( entityContext, data )
        {
        }

        private AisStandardSarAircraftPositionReportMessageObject GetData( ) 
        {
            return (AisStandardSarAircraftPositionReportMessageObject)base._GetData( );
        }

        public int Altitude
        {
            get => GetData( ).Altitude;
            set
            {
                var data = GetData( );
                if( data.Altitude != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Altitude = value;
                    OnPropertyChanged( );
                }
            }
        }

        public int SpeedOverGround
        {
            get => GetData( ).SpeedOverGround;
            set
            {
                var data = GetData( );
                if( data.SpeedOverGround != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.SpeedOverGround = value;
                    OnPropertyChanged( );
                }
            }
        }

        public Types.PositionAccuracy PositionAccuracy
        {
            get => GetData( ).PositionAccuracy;
            set
            {
                var data = GetData( );
                if( data.PositionAccuracy != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.PositionAccuracy = value;
                    OnPropertyChanged( );
                }
            }
        }

        public double Longitude
        {
            get => GetData( ).Longitude;
            set
            {
                var data = GetData( );
                if( data.Longitude != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Longitude = value;
                    OnPropertyChanged( );
                }
            }
        }

        public double Latitude
        {
            get => GetData( ).Latitude;
            set
            {
                var data = GetData( );
                if( data.Latitude != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Latitude = value;
                    OnPropertyChanged( );
                }
            }
        }

        public double CourseOverGround
        {
            get => GetData( ).CourseOverGround;
            set
            {
                var data = GetData( );
                if( data.CourseOverGround != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.CourseOverGround = value;
                    OnPropertyChanged( );
                }
            }
        }

        public int Timestamp
        {
            get => GetData( ).Timestamp;
            set
            {
                var data = GetData( );
                if( data.Timestamp != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Timestamp = value;
                    OnPropertyChanged( );
                }
            }
        }

        public int Reserved
        {
            get => GetData( ).Reserved;
            set
            {
                var data = GetData( );
                if( data.Reserved != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Reserved = value;
                    OnPropertyChanged( );
                }
            }
        }

        public bool DataTerminalReady
        {
            get => GetData( ).DataTerminalReady;
            set
            {
                var data = GetData( );
                if( data.DataTerminalReady != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.DataTerminalReady = value;
                    OnPropertyChanged( );
                }
            }
        }

        public int Spare
        {
            get => GetData( ).Spare;
            set
            {
                var data = GetData( );
                if( data.Spare != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Spare = value;
                    OnPropertyChanged( );
                }
            }
        }

        public bool Assigned
        {
            get => GetData( ).Assigned;
            set
            {
                var data = GetData( );
                if( data.Assigned != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Assigned = value;
                    OnPropertyChanged( );
                }
            }
        }

        public Types.Raim Raim
        {
            get => GetData( ).Raim;
            set
            {
                var data = GetData( );
                if( data.Raim != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Raim = value;
                    OnPropertyChanged( );
                }
            }
        }

        public int RadioStatus
        {
            get => GetData( ).RadioStatus;
            set
            {
                var data = GetData( );
                if( data.RadioStatus != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.RadioStatus = value;
                    OnPropertyChanged( );
                }
            }
        }

    }

    public class AisStaticAndVoyageRelatedDataMessageEntity : AisMessageEntity
    {
        WeakReference? _imoNumberReference = null;
        WeakReference? _callsignReference = null;
        WeakReference? _shipNameReference = null;
        public AisStaticAndVoyageRelatedDataMessageEntity( [DisallowNull] EntityContext entityContext, [DisallowNull] AisStaticAndVoyageRelatedDataMessageObject data )
            : base( entityContext, data )
        {
        }

        private AisStaticAndVoyageRelatedDataMessageObject GetData( ) 
        {
            return (AisStaticAndVoyageRelatedDataMessageObject)base._GetData( );
        }

        public int AisVersion
        {
            get => GetData( ).AisVersion;
            set
            {
                var data = GetData( );
                if( data.AisVersion != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.AisVersion = value;
                    OnPropertyChanged( );
                }
            }
        }

        public Guid? ImoNumberId
        {
            get => GetData( ).ImoNumber;
            set
            {
                var data = GetData( );
                if( data.ImoNumber != value )
                {
                    OnPropertyChanging( );
                    OnPropertyChanging( "ImoNumber", false );
                    data = GetData( );
                    data.ImoNumber = value;
                    OnPropertyChanged( );
                    OnPropertyChanged( "ImoNumber" );
                }
            }
        }

        public InternationalMaritimeOrganizationNumberEntity? ImoNumber
        {
            get
            {
                if(_imoNumberReference != null)
                {
                    var result = (InternationalMaritimeOrganizationNumberEntity?)_imoNumberReference.Target;
                    if( result != null )
                    {
                        return result;
                    }
                }
                var data = GetData( );
                var context = CheckedContext;
                if( data.ImoNumber is Guid imoNumberId )
                {
                    var entity = context.GetInternationalMaritimeOrganizationNumberById( imoNumberId );
                    if( entity != null )
                    {
                        _imoNumberReference = new WeakReference( entity );
                    }
                    return entity;
                }
                return null;
            }
            set
            {
                ImoNumberId = value != null? value.Id : null;
            }
        }

        public Guid? CallsignId
        {
            get => GetData( ).Callsign;
            set
            {
                var data = GetData( );
                if( data.Callsign != value )
                {
                    OnPropertyChanging( );
                    OnPropertyChanging( "Callsign", false );
                    data = GetData( );
                    data.Callsign = value;
                    OnPropertyChanged( );
                    OnPropertyChanged( "Callsign" );
                }
            }
        }

        public CallsignEntity? Callsign
        {
            get
            {
                if(_callsignReference != null)
                {
                    var result = (CallsignEntity?)_callsignReference.Target;
                    if( result != null )
                    {
                        return result;
                    }
                }
                var data = GetData( );
                var context = CheckedContext;
                if( data.Callsign is Guid callsignId )
                {
                    var entity = context.GetCallsignById( callsignId );
                    if( entity != null )
                    {
                        _callsignReference = new WeakReference( entity );
                    }
                    return entity;
                }
                return null;
            }
            set
            {
                CallsignId = value != null? value.Id : null;
            }
        }

        public Guid? ShipNameId
        {
            get => GetData( ).ShipName;
            set
            {
                var data = GetData( );
                if( data.ShipName != value )
                {
                    OnPropertyChanging( );
                    OnPropertyChanging( "ShipName", false );
                    data = GetData( );
                    data.ShipName = value;
                    OnPropertyChanged( );
                    OnPropertyChanged( "ShipName" );
                }
            }
        }

        public NameEntity? ShipName
        {
            get
            {
                if(_shipNameReference != null)
                {
                    var result = (NameEntity?)_shipNameReference.Target;
                    if( result != null )
                    {
                        return result;
                    }
                }
                var data = GetData( );
                var context = CheckedContext;
                if( data.ShipName is Guid shipNameId )
                {
                    var entity = context.GetNameById( shipNameId );
                    if( entity != null )
                    {
                        _shipNameReference = new WeakReference( entity );
                    }
                    return entity;
                }
                return null;
            }
            set
            {
                ShipNameId = value != null? value.Id : null;
            }
        }

        public Types.ShipType ShipType
        {
            get => GetData( ).ShipType;
            set
            {
                var data = GetData( );
                if( data.ShipType != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.ShipType = value;
                    OnPropertyChanged( );
                }
            }
        }

        public int DimensionToBow
        {
            get => GetData( ).DimensionToBow;
            set
            {
                var data = GetData( );
                if( data.DimensionToBow != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.DimensionToBow = value;
                    OnPropertyChanged( );
                }
            }
        }

        public int DimensionToStern
        {
            get => GetData( ).DimensionToStern;
            set
            {
                var data = GetData( );
                if( data.DimensionToStern != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.DimensionToStern = value;
                    OnPropertyChanged( );
                }
            }
        }

        public int DimensionToPort
        {
            get => GetData( ).DimensionToPort;
            set
            {
                var data = GetData( );
                if( data.DimensionToPort != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.DimensionToPort = value;
                    OnPropertyChanged( );
                }
            }
        }

        public int DimensionToStarboard
        {
            get => GetData( ).DimensionToStarboard;
            set
            {
                var data = GetData( );
                if( data.DimensionToStarboard != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.DimensionToStarboard = value;
                    OnPropertyChanged( );
                }
            }
        }

        public Types.PositionFixType PositionFixType
        {
            get => GetData( ).PositionFixType;
            set
            {
                var data = GetData( );
                if( data.PositionFixType != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.PositionFixType = value;
                    OnPropertyChanged( );
                }
            }
        }

        public DateTime? EstimatedTimeOfArrival
        {
            get => GetData( ).EstimatedTimeOfArrival;
            set
            {
                var data = GetData( );
                if( data.EstimatedTimeOfArrival != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.EstimatedTimeOfArrival = value;
                    OnPropertyChanged( );
                }
            }
        }

        public double Draught
        {
            get => GetData( ).Draught;
            set
            {
                var data = GetData( );
                if( data.Draught != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Draught = value;
                    OnPropertyChanged( );
                }
            }
        }

        public string Destination
        {
            get => GetData( ).Destination;
            set
            {
                var data = GetData( );
                if( data.Destination != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Destination = value;
                    OnPropertyChanged( );
                }
            }
        }

        public bool DataTerminalReady
        {
            get => GetData( ).DataTerminalReady;
            set
            {
                var data = GetData( );
                if( data.DataTerminalReady != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.DataTerminalReady = value;
                    OnPropertyChanged( );
                }
            }
        }

        public int Spare
        {
            get => GetData( ).Spare;
            set
            {
                var data = GetData( );
                if( data.Spare != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Spare = value;
                    OnPropertyChanged( );
                }
            }
        }

    }

    public class AisStaticDataReportMessageEntity : AisMessageEntity
    {
        public AisStaticDataReportMessageEntity( [DisallowNull] EntityContext entityContext, [DisallowNull] AisStaticDataReportMessageObject data )
            : base( entityContext, data )
        {
        }

        private AisStaticDataReportMessageObject GetData( ) 
        {
            return (AisStaticDataReportMessageObject)base._GetData( );
        }

        public int PartNumber
        {
            get => GetData( ).PartNumber;
            set
            {
                var data = GetData( );
                if( data.PartNumber != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.PartNumber = value;
                    OnPropertyChanged( );
                }
            }
        }

    }

    public class AisStaticDataReportPartAMessageEntity : AisStaticDataReportMessageEntity
    {
        WeakReference? _shipNameReference = null;
        public AisStaticDataReportPartAMessageEntity( [DisallowNull] EntityContext entityContext, [DisallowNull] AisStaticDataReportPartAMessageObject data )
            : base( entityContext, data )
        {
        }

        private AisStaticDataReportPartAMessageObject GetData( ) 
        {
            return (AisStaticDataReportPartAMessageObject)base._GetData( );
        }

        public Guid? ShipNameId
        {
            get => GetData( ).ShipName;
            set
            {
                var data = GetData( );
                if( data.ShipName != value )
                {
                    OnPropertyChanging( );
                    OnPropertyChanging( "ShipName", false );
                    data = GetData( );
                    data.ShipName = value;
                    OnPropertyChanged( );
                    OnPropertyChanged( "ShipName" );
                }
            }
        }

        public NameEntity? ShipName
        {
            get
            {
                if(_shipNameReference != null)
                {
                    var result = (NameEntity?)_shipNameReference.Target;
                    if( result != null )
                    {
                        return result;
                    }
                }
                var data = GetData( );
                var context = CheckedContext;
                if( data.ShipName is Guid shipNameId )
                {
                    var entity = context.GetNameById( shipNameId );
                    if( entity != null )
                    {
                        _shipNameReference = new WeakReference( entity );
                    }
                    return entity;
                }
                return null;
            }
            set
            {
                ShipNameId = value != null? value.Id : null;
            }
        }

        public int Spare
        {
            get => GetData( ).Spare;
            set
            {
                var data = GetData( );
                if( data.Spare != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Spare = value;
                    OnPropertyChanged( );
                }
            }
        }

    }

    public class AisStaticDataReportPartBMessageEntity : AisStaticDataReportMessageEntity
    {
        WeakReference? _callsignReference = null;
        WeakReference? _mothershipMmsiReference = null;
        public AisStaticDataReportPartBMessageEntity( [DisallowNull] EntityContext entityContext, [DisallowNull] AisStaticDataReportPartBMessageObject data )
            : base( entityContext, data )
        {
        }

        private AisStaticDataReportPartBMessageObject GetData( ) 
        {
            return (AisStaticDataReportPartBMessageObject)base._GetData( );
        }

        public Types.ShipType ShipType
        {
            get => GetData( ).ShipType;
            set
            {
                var data = GetData( );
                if( data.ShipType != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.ShipType = value;
                    OnPropertyChanged( );
                }
            }
        }

        public string VendorId
        {
            get => GetData( ).VendorId;
            set
            {
                var data = GetData( );
                if( data.VendorId != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.VendorId = value;
                    OnPropertyChanged( );
                }
            }
        }

        public int UnitModelCode
        {
            get => GetData( ).UnitModelCode;
            set
            {
                var data = GetData( );
                if( data.UnitModelCode != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.UnitModelCode = value;
                    OnPropertyChanged( );
                }
            }
        }

        public int SerialNumber
        {
            get => GetData( ).SerialNumber;
            set
            {
                var data = GetData( );
                if( data.SerialNumber != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.SerialNumber = value;
                    OnPropertyChanged( );
                }
            }
        }

        public Guid? CallsignId
        {
            get => GetData( ).Callsign;
            set
            {
                var data = GetData( );
                if( data.Callsign != value )
                {
                    OnPropertyChanging( );
                    OnPropertyChanging( "Callsign", false );
                    data = GetData( );
                    data.Callsign = value;
                    OnPropertyChanged( );
                    OnPropertyChanged( "Callsign" );
                }
            }
        }

        public CallsignEntity? Callsign
        {
            get
            {
                if(_callsignReference != null)
                {
                    var result = (CallsignEntity?)_callsignReference.Target;
                    if( result != null )
                    {
                        return result;
                    }
                }
                var data = GetData( );
                var context = CheckedContext;
                if( data.Callsign is Guid callsignId )
                {
                    var entity = context.GetCallsignById( callsignId );
                    if( entity != null )
                    {
                        _callsignReference = new WeakReference( entity );
                    }
                    return entity;
                }
                return null;
            }
            set
            {
                CallsignId = value != null? value.Id : null;
            }
        }

        public int DimensionToBow
        {
            get => GetData( ).DimensionToBow;
            set
            {
                var data = GetData( );
                if( data.DimensionToBow != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.DimensionToBow = value;
                    OnPropertyChanged( );
                }
            }
        }

        public int DimensionToStern
        {
            get => GetData( ).DimensionToStern;
            set
            {
                var data = GetData( );
                if( data.DimensionToStern != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.DimensionToStern = value;
                    OnPropertyChanged( );
                }
            }
        }

        public int DimensionToPort
        {
            get => GetData( ).DimensionToPort;
            set
            {
                var data = GetData( );
                if( data.DimensionToPort != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.DimensionToPort = value;
                    OnPropertyChanged( );
                }
            }
        }

        public int DimensionToStarboard
        {
            get => GetData( ).DimensionToStarboard;
            set
            {
                var data = GetData( );
                if( data.DimensionToStarboard != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.DimensionToStarboard = value;
                    OnPropertyChanged( );
                }
            }
        }

        public Guid? MothershipMmsiId
        {
            get => GetData( ).MothershipMmsi;
            set
            {
                var data = GetData( );
                if( data.MothershipMmsi != value )
                {
                    OnPropertyChanging( );
                    OnPropertyChanging( "MothershipMmsi", false );
                    data = GetData( );
                    data.MothershipMmsi = value;
                    OnPropertyChanged( );
                    OnPropertyChanged( "MothershipMmsi" );
                }
            }
        }

        public MaritimeMobileServiceIdentityEntity? MothershipMmsi
        {
            get
            {
                if(_mothershipMmsiReference != null)
                {
                    var result = (MaritimeMobileServiceIdentityEntity?)_mothershipMmsiReference.Target;
                    if( result != null )
                    {
                        return result;
                    }
                }
                var data = GetData( );
                var context = CheckedContext;
                if( data.MothershipMmsi is Guid mothershipMmsiId )
                {
                    var entity = context.GetMaritimeMobileServiceIdentityById( mothershipMmsiId );
                    if( entity != null )
                    {
                        _mothershipMmsiReference = new WeakReference( entity );
                    }
                    return entity;
                }
                return null;
            }
            set
            {
                MothershipMmsiId = value != null? value.Id : null;
            }
        }

        public Types.PositionFixType PositionFixType
        {
            get => GetData( ).PositionFixType;
            set
            {
                var data = GetData( );
                if( data.PositionFixType != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.PositionFixType = value;
                    OnPropertyChanged( );
                }
            }
        }

        public int Spare
        {
            get => GetData( ).Spare;
            set
            {
                var data = GetData( );
                if( data.Spare != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Spare = value;
                    OnPropertyChanged( );
                }
            }
        }

    }

    public class AisUtcAndDateInquiryMessageEntity : AisMessageEntity
    {
        WeakReference? _destinationMmsiReference = null;
        public AisUtcAndDateInquiryMessageEntity( [DisallowNull] EntityContext entityContext, [DisallowNull] AisUtcAndDateInquiryMessageObject data )
            : base( entityContext, data )
        {
        }

        private AisUtcAndDateInquiryMessageObject GetData( ) 
        {
            return (AisUtcAndDateInquiryMessageObject)base._GetData( );
        }

        public int Spare1
        {
            get => GetData( ).Spare1;
            set
            {
                var data = GetData( );
                if( data.Spare1 != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Spare1 = value;
                    OnPropertyChanged( );
                }
            }
        }

        public Guid? DestinationMmsiId
        {
            get => GetData( ).DestinationMmsi;
            set
            {
                var data = GetData( );
                if( data.DestinationMmsi != value )
                {
                    OnPropertyChanging( );
                    OnPropertyChanging( "DestinationMmsi", false );
                    data = GetData( );
                    data.DestinationMmsi = value;
                    OnPropertyChanged( );
                    OnPropertyChanged( "DestinationMmsi" );
                }
            }
        }

        public MaritimeMobileServiceIdentityEntity? DestinationMmsi
        {
            get
            {
                if(_destinationMmsiReference != null)
                {
                    var result = (MaritimeMobileServiceIdentityEntity?)_destinationMmsiReference.Target;
                    if( result != null )
                    {
                        return result;
                    }
                }
                var data = GetData( );
                var context = CheckedContext;
                if( data.DestinationMmsi is Guid destinationMmsiId )
                {
                    var entity = context.GetMaritimeMobileServiceIdentityById( destinationMmsiId );
                    if( entity != null )
                    {
                        _destinationMmsiReference = new WeakReference( entity );
                    }
                    return entity;
                }
                return null;
            }
            set
            {
                DestinationMmsiId = value != null? value.Id : null;
            }
        }

        public int Spare2
        {
            get => GetData( ).Spare2;
            set
            {
                var data = GetData( );
                if( data.Spare2 != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Spare2 = value;
                    OnPropertyChanged( );
                }
            }
        }

    }

    public class AisUtcAndDateResponseMessageEntity : AisMessageEntity
    {
        public AisUtcAndDateResponseMessageEntity( [DisallowNull] EntityContext entityContext, [DisallowNull] AisUtcAndDateResponseMessageObject data )
            : base( entityContext, data )
        {
        }

        private AisUtcAndDateResponseMessageObject GetData( ) 
        {
            return (AisUtcAndDateResponseMessageObject)base._GetData( );
        }

        public DateTime Datetime
        {
            get => GetData( ).Datetime;
            set
            {
                var data = GetData( );
                if( data.Datetime != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Datetime = value;
                    OnPropertyChanged( );
                }
            }
        }

        public Types.PositionAccuracy PositionAccuracy
        {
            get => GetData( ).PositionAccuracy;
            set
            {
                var data = GetData( );
                if( data.PositionAccuracy != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.PositionAccuracy = value;
                    OnPropertyChanged( );
                }
            }
        }

        public double Longitude
        {
            get => GetData( ).Longitude;
            set
            {
                var data = GetData( );
                if( data.Longitude != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Longitude = value;
                    OnPropertyChanged( );
                }
            }
        }

        public double Latitude
        {
            get => GetData( ).Latitude;
            set
            {
                var data = GetData( );
                if( data.Latitude != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Latitude = value;
                    OnPropertyChanged( );
                }
            }
        }

        public Types.PositionFixType PositionFixType
        {
            get => GetData( ).PositionFixType;
            set
            {
                var data = GetData( );
                if( data.PositionFixType != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.PositionFixType = value;
                    OnPropertyChanged( );
                }
            }
        }

        public int Spare
        {
            get => GetData( ).Spare;
            set
            {
                var data = GetData( );
                if( data.Spare != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Spare = value;
                    OnPropertyChanged( );
                }
            }
        }

        public Types.Raim Raim
        {
            get => GetData( ).Raim;
            set
            {
                var data = GetData( );
                if( data.Raim != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Raim = value;
                    OnPropertyChanged( );
                }
            }
        }

        public int RadioStatus
        {
            get => GetData( ).RadioStatus;
            set
            {
                var data = GetData( );
                if( data.RadioStatus != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.RadioStatus = value;
                    OnPropertyChanged( );
                }
            }
        }

    }

    public class AlarmStateChangeEntity : BaseEntity<Kind>
    {
        WeakReference? _alarmReference = null;
        public AlarmStateChangeEntity( [DisallowNull] EntityContext entityContext, [DisallowNull] AlarmStateChangeObject data )
            : base( entityContext, data )
        {
        }

        public EntityContext? Context => (EntityContext?)_Context;

        protected EntityContext CheckedContext
        {
            get
            {
                var context = Context;
                if ( context is null )
                {
                    throw new InvalidOperationException( "Context is null" );
                }
                return context;
            }
        }

        private AlarmStateChangeObject GetData( ) 
        {
            return (AlarmStateChangeObject)base._GetData( );
        }

        public Guid AlarmId
        {
            get => GetData( ).Alarm;
            set
            {
                var data = GetData( );
                if( data.Alarm != value )
                {
                    OnPropertyChanging( );
                    OnPropertyChanging( "Alarm", false );
                    data = GetData( );
                    data.Alarm = value;
                    OnPropertyChanged( );
                    OnPropertyChanged( "Alarm" );
                }
            }
        }

        public ZoneTrackAlarmEntity Alarm
        {
            get
            {
                if(_alarmReference != null)
                {
                    var result = (ZoneTrackAlarmEntity?)_alarmReference.Target;
                    if( result != null )
                    {
                        return result;
                    }
                }
                var data = GetData( );
                var context = CheckedContext;
                var entity = context.GetZoneTrackAlarmById( data.Alarm );
                if( entity != null )
                {
                    _alarmReference = new WeakReference( entity );
                }
                else
                {
                    var message = $"Cannot find the ZoneTrackAlarmEntity object identified by {data.Alarm}";
                    throw new Exception( message );
                }
                return entity;
            }
            set
            {
                AlarmId = value != null? value.Id : Guid.Empty;
            }
        }

        public DateTime Timestamp
        {
            get => GetData( ).Timestamp;
            set
            {
                var data = GetData( );
                if( data.Timestamp != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Timestamp = value;
                    OnPropertyChanged( );
                }
            }
        }

        public Types.AlarmState State
        {
            get => GetData( ).State;
            set
            {
                var data = GetData( );
                if( data.State != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.State = value;
                    OnPropertyChanged( );
                }
            }
        }

    }

    public class BaseStationTypeEntity : BaseEntity<Kind>
    {
        public BaseStationTypeEntity( [DisallowNull] EntityContext entityContext, [DisallowNull] BaseStationTypeObject data )
            : base( entityContext, data )
        {
        }

        public EntityContext? Context => (EntityContext?)_Context;

        protected EntityContext CheckedContext
        {
            get
            {
                var context = Context;
                if ( context is null )
                {
                    throw new InvalidOperationException( "Context is null" );
                }
                return context;
            }
        }

        private BaseStationTypeObject GetData( ) 
        {
            return (BaseStationTypeObject)base._GetData( );
        }

        public string Name
        {
            get => GetData( ).Name;
            set
            {
                var data = GetData( );
                if( data.Name != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Name = value;
                    OnPropertyChanged( );
                }
            }
        }

    }

    public class BinaryTimeseriesValueEntity : BaseEntity<Kind>
    {
        WeakReference? _timeseriesReference = null;
        public BinaryTimeseriesValueEntity( [DisallowNull] EntityContext entityContext, [DisallowNull] BinaryTimeseriesValueObject data )
            : base( entityContext, data )
        {
        }

        public EntityContext? Context => (EntityContext?)_Context;

        protected EntityContext CheckedContext
        {
            get
            {
                var context = Context;
                if ( context is null )
                {
                    throw new InvalidOperationException( "Context is null" );
                }
                return context;
            }
        }

        private BinaryTimeseriesValueObject GetData( ) 
        {
            return (BinaryTimeseriesValueObject)base._GetData( );
        }

        public Guid TimeseriesId
        {
            get => GetData( ).Timeseries;
            set
            {
                var data = GetData( );
                if( data.Timeseries != value )
                {
                    OnPropertyChanging( );
                    OnPropertyChanging( "Timeseries", false );
                    data = GetData( );
                    data.Timeseries = value;
                    OnPropertyChanged( );
                    OnPropertyChanged( "Timeseries" );
                }
            }
        }

        public BinaryTimeseriesEntity Timeseries
        {
            get
            {
                if(_timeseriesReference != null)
                {
                    var result = (BinaryTimeseriesEntity?)_timeseriesReference.Target;
                    if( result != null )
                    {
                        return result;
                    }
                }
                var data = GetData( );
                var context = CheckedContext;
                var entity = context.GetBinaryTimeseriesById( data.Timeseries );
                if( entity != null )
                {
                    _timeseriesReference = new WeakReference( entity );
                }
                else
                {
                    var message = $"Cannot find the BinaryTimeseriesEntity object identified by {data.Timeseries}";
                    throw new Exception( message );
                }
                return entity;
            }
            set
            {
                TimeseriesId = value != null? value.Id : Guid.Empty;
            }
        }

        public DateTime Timestamp
        {
            get => GetData( ).Timestamp;
            set
            {
                var data = GetData( );
                if( data.Timestamp != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Timestamp = value;
                    OnPropertyChanged( );
                }
            }
        }

        public byte[] Value
        {
            get => GetData( ).Value;
            set
            {
                var data = GetData( );
                if( data.Value != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Value = value;
                    OnPropertyChanged( );
                }
            }
        }

    }

    public class BookmarkEntity : BaseEntity<Kind>
    {
        WeakReference? _viewReference = null;
        public BookmarkEntity( [DisallowNull] EntityContext entityContext, [DisallowNull] BookmarkObject data )
            : base( entityContext, data )
        {
        }

        public EntityContext? Context => (EntityContext?)_Context;

        protected EntityContext CheckedContext
        {
            get
            {
                var context = Context;
                if ( context is null )
                {
                    throw new InvalidOperationException( "Context is null" );
                }
                return context;
            }
        }

        private BookmarkObject GetData( ) 
        {
            return (BookmarkObject)base._GetData( );
        }

        public Guid ViewId
        {
            get => GetData( ).View;
            set
            {
                var data = GetData( );
                if( data.View != value )
                {
                    OnPropertyChanging( );
                    OnPropertyChanging( "View", false );
                    data = GetData( );
                    data.View = value;
                    OnPropertyChanged( );
                    OnPropertyChanged( "View" );
                }
            }
        }

        public ViewEntity View
        {
            get
            {
                if(_viewReference != null)
                {
                    var result = (ViewEntity?)_viewReference.Target;
                    if( result != null )
                    {
                        return result;
                    }
                }
                var data = GetData( );
                var context = CheckedContext;
                var entity = context.GetViewById( data.View );
                if( entity != null )
                {
                    _viewReference = new WeakReference( entity );
                }
                else
                {
                    var message = $"Cannot find the ViewEntity object identified by {data.View}";
                    throw new Exception( message );
                }
                return entity;
            }
            set
            {
                ViewId = value != null? value.Id : Guid.Empty;
            }
        }

        public string Name
        {
            get => GetData( ).Name;
            set
            {
                var data = GetData( );
                if( data.Name != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Name = value;
                    OnPropertyChanged( );
                }
            }
        }

        public DateTime? Timestamp
        {
            get => GetData( ).Timestamp;
            set
            {
                var data = GetData( );
                if( data.Timestamp != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Timestamp = value;
                    OnPropertyChanged( );
                }
            }
        }

        public double Latitude
        {
            get => GetData( ).Latitude;
            set
            {
                var data = GetData( );
                if( data.Latitude != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Latitude = value;
                    OnPropertyChanged( );
                }
            }
        }

        public double Longitude
        {
            get => GetData( ).Longitude;
            set
            {
                var data = GetData( );
                if( data.Longitude != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Longitude = value;
                    OnPropertyChanged( );
                }
            }
        }

        public double ZoomLevel
        {
            get => GetData( ).ZoomLevel;
            set
            {
                var data = GetData( );
                if( data.ZoomLevel != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.ZoomLevel = value;
                    OnPropertyChanged( );
                }
            }
        }

    }

    public class BooleanTimeseriesValueEntity : BaseEntity<Kind>
    {
        WeakReference? _timeseriesReference = null;
        public BooleanTimeseriesValueEntity( [DisallowNull] EntityContext entityContext, [DisallowNull] BooleanTimeseriesValueObject data )
            : base( entityContext, data )
        {
        }

        public EntityContext? Context => (EntityContext?)_Context;

        protected EntityContext CheckedContext
        {
            get
            {
                var context = Context;
                if ( context is null )
                {
                    throw new InvalidOperationException( "Context is null" );
                }
                return context;
            }
        }

        private BooleanTimeseriesValueObject GetData( ) 
        {
            return (BooleanTimeseriesValueObject)base._GetData( );
        }

        public Guid TimeseriesId
        {
            get => GetData( ).Timeseries;
            set
            {
                var data = GetData( );
                if( data.Timeseries != value )
                {
                    OnPropertyChanging( );
                    OnPropertyChanging( "Timeseries", false );
                    data = GetData( );
                    data.Timeseries = value;
                    OnPropertyChanged( );
                    OnPropertyChanged( "Timeseries" );
                }
            }
        }

        public BooleanTimeseriesEntity Timeseries
        {
            get
            {
                if(_timeseriesReference != null)
                {
                    var result = (BooleanTimeseriesEntity?)_timeseriesReference.Target;
                    if( result != null )
                    {
                        return result;
                    }
                }
                var data = GetData( );
                var context = CheckedContext;
                var entity = context.GetBooleanTimeseriesById( data.Timeseries );
                if( entity != null )
                {
                    _timeseriesReference = new WeakReference( entity );
                }
                else
                {
                    var message = $"Cannot find the BooleanTimeseriesEntity object identified by {data.Timeseries}";
                    throw new Exception( message );
                }
                return entity;
            }
            set
            {
                TimeseriesId = value != null? value.Id : Guid.Empty;
            }
        }

        public DateTime Timestamp
        {
            get => GetData( ).Timestamp;
            set
            {
                var data = GetData( );
                if( data.Timestamp != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Timestamp = value;
                    OnPropertyChanged( );
                }
            }
        }

        public bool? Value
        {
            get => GetData( ).Value;
            set
            {
                var data = GetData( );
                if( data.Value != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Value = value;
                    OnPropertyChanged( );
                }
            }
        }

    }

    public class ByteTimeseriesValueEntity : BaseEntity<Kind>
    {
        WeakReference? _timeseriesReference = null;
        public ByteTimeseriesValueEntity( [DisallowNull] EntityContext entityContext, [DisallowNull] ByteTimeseriesValueObject data )
            : base( entityContext, data )
        {
        }

        public EntityContext? Context => (EntityContext?)_Context;

        protected EntityContext CheckedContext
        {
            get
            {
                var context = Context;
                if ( context is null )
                {
                    throw new InvalidOperationException( "Context is null" );
                }
                return context;
            }
        }

        private ByteTimeseriesValueObject GetData( ) 
        {
            return (ByteTimeseriesValueObject)base._GetData( );
        }

        public Guid TimeseriesId
        {
            get => GetData( ).Timeseries;
            set
            {
                var data = GetData( );
                if( data.Timeseries != value )
                {
                    OnPropertyChanging( );
                    OnPropertyChanging( "Timeseries", false );
                    data = GetData( );
                    data.Timeseries = value;
                    OnPropertyChanged( );
                    OnPropertyChanged( "Timeseries" );
                }
            }
        }

        public ByteTimeseriesEntity Timeseries
        {
            get
            {
                if(_timeseriesReference != null)
                {
                    var result = (ByteTimeseriesEntity?)_timeseriesReference.Target;
                    if( result != null )
                    {
                        return result;
                    }
                }
                var data = GetData( );
                var context = CheckedContext;
                var entity = context.GetByteTimeseriesById( data.Timeseries );
                if( entity != null )
                {
                    _timeseriesReference = new WeakReference( entity );
                }
                else
                {
                    var message = $"Cannot find the ByteTimeseriesEntity object identified by {data.Timeseries}";
                    throw new Exception( message );
                }
                return entity;
            }
            set
            {
                TimeseriesId = value != null? value.Id : Guid.Empty;
            }
        }

        public DateTime Timestamp
        {
            get => GetData( ).Timestamp;
            set
            {
                var data = GetData( );
                if( data.Timestamp != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Timestamp = value;
                    OnPropertyChanged( );
                }
            }
        }

        public byte? Value
        {
            get => GetData( ).Value;
            set
            {
                var data = GetData( );
                if( data.Value != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Value = value;
                    OnPropertyChanged( );
                }
            }
        }

    }

    public class CameraCommandEntity : BaseEntity<Kind>
    {
        WeakReference? _cameraReference = null;
        WeakReference? _replyReference = null;
        public CameraCommandEntity( [DisallowNull] EntityContext entityContext, [DisallowNull] CameraCommandObject data )
            : base( entityContext, data )
        {
        }

        public EntityContext? Context => (EntityContext?)_Context;

        protected EntityContext CheckedContext
        {
            get
            {
                var context = Context;
                if ( context is null )
                {
                    throw new InvalidOperationException( "Context is null" );
                }
                return context;
            }
        }

        private CameraCommandObject GetData( ) 
        {
            return (CameraCommandObject)base._GetData( );
        }

        public Guid CameraId
        {
            get => GetData( ).Camera;
            set
            {
                var data = GetData( );
                if( data.Camera != value )
                {
                    OnPropertyChanging( );
                    OnPropertyChanging( "Camera", false );
                    data = GetData( );
                    data.Camera = value;
                    OnPropertyChanged( );
                    OnPropertyChanged( "Camera" );
                }
            }
        }

        public CameraDeviceEntity Camera
        {
            get
            {
                if(_cameraReference != null)
                {
                    var result = (CameraDeviceEntity?)_cameraReference.Target;
                    if( result != null )
                    {
                        return result;
                    }
                }
                var data = GetData( );
                var context = CheckedContext;
                var entity = context.GetCameraDeviceById( data.Camera );
                if( entity != null )
                {
                    _cameraReference = new WeakReference( entity );
                }
                else
                {
                    var message = $"Cannot find the CameraDeviceEntity object identified by {data.Camera}";
                    throw new Exception( message );
                }
                return entity;
            }
            set
            {
                CameraId = value != null? value.Id : Guid.Empty;
            }
        }

        public DateTime Timestamp
        {
            get => GetData( ).Timestamp;
            set
            {
                var data = GetData( );
                if( data.Timestamp != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Timestamp = value;
                    OnPropertyChanged( );
                }
            }
        }

        public Types.DeviceCommandSourceType DeviceCommandSourceType
        {
            get => GetData( ).DeviceCommandSourceType;
            set
            {
                var data = GetData( );
                if( data.DeviceCommandSourceType != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.DeviceCommandSourceType = value;
                    OnPropertyChanged( );
                }
            }
        }

        public Guid DeviceCommandSourceId
        {
            get => GetData( ).DeviceCommandSourceId;
            set
            {
                var data = GetData( );
                if( data.DeviceCommandSourceId != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.DeviceCommandSourceId = value;
                    OnPropertyChanged( );
                }
            }
        }

        public Guid? ReplyId
        {
            get => GetData( ).Reply;
            set
            {
                var data = GetData( );
                if( data.Reply != value )
                {
                    OnPropertyChanging( );
                    OnPropertyChanging( "Reply", false );
                    data = GetData( );
                    data.Reply = value;
                    OnPropertyChanged( );
                    OnPropertyChanged( "Reply" );
                }
            }
        }

        public CameraCommandReplyEntity? Reply
        {
            get
            {
                if(_replyReference != null)
                {
                    var result = (CameraCommandReplyEntity?)_replyReference.Target;
                    if( result != null )
                    {
                        return result;
                    }
                }
                var data = GetData( );
                var context = CheckedContext;
                if( data.Reply is Guid replyId )
                {
                    var entity = context.GetCameraCommandReplyById( replyId );
                    if( entity != null )
                    {
                        _replyReference = new WeakReference( entity );
                    }
                    return entity;
                }
                return null;
            }
            set
            {
                ReplyId = value != null? value.Id : null;
            }
        }

    }

    public class CameraCommandAbsoluteMoveEntity : CameraCommandEntity
    {
        public CameraCommandAbsoluteMoveEntity( [DisallowNull] EntityContext entityContext, [DisallowNull] CameraCommandAbsoluteMoveObject data )
            : base( entityContext, data )
        {
        }

        private CameraCommandAbsoluteMoveObject GetData( ) 
        {
            return (CameraCommandAbsoluteMoveObject)base._GetData( );
        }

        public Types.CameraPanTiltMode PositionPanTiltMode
        {
            get => GetData( ).PositionPanTiltMode;
            set
            {
                var data = GetData( );
                if( data.PositionPanTiltMode != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.PositionPanTiltMode = value;
                    OnPropertyChanged( );
                }
            }
        }

        public double? PanAngle
        {
            get => GetData( ).PanAngle;
            set
            {
                var data = GetData( );
                if( data.PanAngle != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.PanAngle = value;
                    OnPropertyChanged( );
                }
            }
        }

        public double? TiltAngle
        {
            get => GetData( ).TiltAngle;
            set
            {
                var data = GetData( );
                if( data.TiltAngle != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.TiltAngle = value;
                    OnPropertyChanged( );
                }
            }
        }

        public Types.CameraFocalLengthMode PositionFocalLengthMode
        {
            get => GetData( ).PositionFocalLengthMode;
            set
            {
                var data = GetData( );
                if( data.PositionFocalLengthMode != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.PositionFocalLengthMode = value;
                    OnPropertyChanged( );
                }
            }
        }

        public double? FocalLength
        {
            get => GetData( ).FocalLength;
            set
            {
                var data = GetData( );
                if( data.FocalLength != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.FocalLength = value;
                    OnPropertyChanged( );
                }
            }
        }

        public Types.CameraPanTiltMode SpeedPanTiltMode
        {
            get => GetData( ).SpeedPanTiltMode;
            set
            {
                var data = GetData( );
                if( data.SpeedPanTiltMode != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.SpeedPanTiltMode = value;
                    OnPropertyChanged( );
                }
            }
        }

        public double? PanSpeed
        {
            get => GetData( ).PanSpeed;
            set
            {
                var data = GetData( );
                if( data.PanSpeed != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.PanSpeed = value;
                    OnPropertyChanged( );
                }
            }
        }

        public double? TiltSpeed
        {
            get => GetData( ).TiltSpeed;
            set
            {
                var data = GetData( );
                if( data.TiltSpeed != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.TiltSpeed = value;
                    OnPropertyChanged( );
                }
            }
        }

        public Types.CameraFocalLengthMode SpeedFocalLengthMode
        {
            get => GetData( ).SpeedFocalLengthMode;
            set
            {
                var data = GetData( );
                if( data.SpeedFocalLengthMode != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.SpeedFocalLengthMode = value;
                    OnPropertyChanged( );
                }
            }
        }

        public double? ZoomSpeed
        {
            get => GetData( ).ZoomSpeed;
            set
            {
                var data = GetData( );
                if( data.ZoomSpeed != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.ZoomSpeed = value;
                    OnPropertyChanged( );
                }
            }
        }

    }

    public class CameraCommandAdjustPanTiltZoomEntity : CameraCommandEntity
    {
        public CameraCommandAdjustPanTiltZoomEntity( [DisallowNull] EntityContext entityContext, [DisallowNull] CameraCommandAdjustPanTiltZoomObject data )
            : base( entityContext, data )
        {
        }

        private CameraCommandAdjustPanTiltZoomObject GetData( ) 
        {
            return (CameraCommandAdjustPanTiltZoomObject)base._GetData( );
        }

        public double? X
        {
            get => GetData( ).X;
            set
            {
                var data = GetData( );
                if( data.X != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.X = value;
                    OnPropertyChanged( );
                }
            }
        }

        public double? Y
        {
            get => GetData( ).Y;
            set
            {
                var data = GetData( );
                if( data.Y != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Y = value;
                    OnPropertyChanged( );
                }
            }
        }

        public double? Z
        {
            get => GetData( ).Z;
            set
            {
                var data = GetData( );
                if( data.Z != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Z = value;
                    OnPropertyChanged( );
                }
            }
        }

    }

    public class CameraCommandContinuousMoveEntity : CameraCommandEntity
    {
        public CameraCommandContinuousMoveEntity( [DisallowNull] EntityContext entityContext, [DisallowNull] CameraCommandContinuousMoveObject data )
            : base( entityContext, data )
        {
        }

        private CameraCommandContinuousMoveObject GetData( ) 
        {
            return (CameraCommandContinuousMoveObject)base._GetData( );
        }

        public bool Normalized
        {
            get => GetData( ).Normalized;
            set
            {
                var data = GetData( );
                if( data.Normalized != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Normalized = value;
                    OnPropertyChanged( );
                }
            }
        }

        public double? PanVelocity
        {
            get => GetData( ).PanVelocity;
            set
            {
                var data = GetData( );
                if( data.PanVelocity != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.PanVelocity = value;
                    OnPropertyChanged( );
                }
            }
        }

        public double? TiltVelocity
        {
            get => GetData( ).TiltVelocity;
            set
            {
                var data = GetData( );
                if( data.TiltVelocity != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.TiltVelocity = value;
                    OnPropertyChanged( );
                }
            }
        }

        public double? ZoomVelocity
        {
            get => GetData( ).ZoomVelocity;
            set
            {
                var data = GetData( );
                if( data.ZoomVelocity != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.ZoomVelocity = value;
                    OnPropertyChanged( );
                }
            }
        }

        public TimeSpan? Duration
        {
            get => GetData( ).Duration;
            set
            {
                var data = GetData( );
                if( data.Duration != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Duration = value;
                    OnPropertyChanged( );
                }
            }
        }

    }

    public class CameraCommandGeoMoveEntity : CameraCommandEntity
    {
        public CameraCommandGeoMoveEntity( [DisallowNull] EntityContext entityContext, [DisallowNull] CameraCommandGeoMoveObject data )
            : base( entityContext, data )
        {
        }

        private CameraCommandGeoMoveObject GetData( ) 
        {
            return (CameraCommandGeoMoveObject)base._GetData( );
        }

        public double Latitude
        {
            get => GetData( ).Latitude;
            set
            {
                var data = GetData( );
                if( data.Latitude != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Latitude = value;
                    OnPropertyChanged( );
                }
            }
        }

        public double Longitude
        {
            get => GetData( ).Longitude;
            set
            {
                var data = GetData( );
                if( data.Longitude != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Longitude = value;
                    OnPropertyChanged( );
                }
            }
        }

        public double? Altitude
        {
            get => GetData( ).Altitude;
            set
            {
                var data = GetData( );
                if( data.Altitude != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Altitude = value;
                    OnPropertyChanged( );
                }
            }
        }

        public double? ViewportWidth
        {
            get => GetData( ).ViewportWidth;
            set
            {
                var data = GetData( );
                if( data.ViewportWidth != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.ViewportWidth = value;
                    OnPropertyChanged( );
                }
            }
        }

        public double? ViewportHeight
        {
            get => GetData( ).ViewportHeight;
            set
            {
                var data = GetData( );
                if( data.ViewportHeight != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.ViewportHeight = value;
                    OnPropertyChanged( );
                }
            }
        }

    }

    public class CameraCommandRelativeMoveEntity : CameraCommandEntity
    {
        public CameraCommandRelativeMoveEntity( [DisallowNull] EntityContext entityContext, [DisallowNull] CameraCommandRelativeMoveObject data )
            : base( entityContext, data )
        {
        }

        private CameraCommandRelativeMoveObject GetData( ) 
        {
            return (CameraCommandRelativeMoveObject)base._GetData( );
        }

        public bool Normalized
        {
            get => GetData( ).Normalized;
            set
            {
                var data = GetData( );
                if( data.Normalized != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Normalized = value;
                    OnPropertyChanged( );
                }
            }
        }

        public double? PanAngle
        {
            get => GetData( ).PanAngle;
            set
            {
                var data = GetData( );
                if( data.PanAngle != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.PanAngle = value;
                    OnPropertyChanged( );
                }
            }
        }

        public double? TiltAngle
        {
            get => GetData( ).TiltAngle;
            set
            {
                var data = GetData( );
                if( data.TiltAngle != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.TiltAngle = value;
                    OnPropertyChanged( );
                }
            }
        }

        public double? FocalLength
        {
            get => GetData( ).FocalLength;
            set
            {
                var data = GetData( );
                if( data.FocalLength != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.FocalLength = value;
                    OnPropertyChanged( );
                }
            }
        }

        public double? PanSpeed
        {
            get => GetData( ).PanSpeed;
            set
            {
                var data = GetData( );
                if( data.PanSpeed != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.PanSpeed = value;
                    OnPropertyChanged( );
                }
            }
        }

        public double? TiltSpeed
        {
            get => GetData( ).TiltSpeed;
            set
            {
                var data = GetData( );
                if( data.TiltSpeed != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.TiltSpeed = value;
                    OnPropertyChanged( );
                }
            }
        }

        public double? ZoomSpeed
        {
            get => GetData( ).ZoomSpeed;
            set
            {
                var data = GetData( );
                if( data.ZoomSpeed != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.ZoomSpeed = value;
                    OnPropertyChanged( );
                }
            }
        }

    }

    public class CameraCommandReleasePTZOwnershipEntity : CameraCommandEntity
    {
        public CameraCommandReleasePTZOwnershipEntity( [DisallowNull] EntityContext entityContext, [DisallowNull] CameraCommandReleasePTZOwnershipObject data )
            : base( entityContext, data )
        {
        }

    }

    public class CameraCommandRequestPTZOwnershipEntity : CameraCommandEntity
    {
        public CameraCommandRequestPTZOwnershipEntity( [DisallowNull] EntityContext entityContext, [DisallowNull] CameraCommandRequestPTZOwnershipObject data )
            : base( entityContext, data )
        {
        }

    }

    public class CameraCommandSetAutoFocusEntity : CameraCommandEntity
    {
        public CameraCommandSetAutoFocusEntity( [DisallowNull] EntityContext entityContext, [DisallowNull] CameraCommandSetAutoFocusObject data )
            : base( entityContext, data )
        {
        }

        private CameraCommandSetAutoFocusObject GetData( ) 
        {
            return (CameraCommandSetAutoFocusObject)base._GetData( );
        }

        public bool Enabled
        {
            get => GetData( ).Enabled;
            set
            {
                var data = GetData( );
                if( data.Enabled != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Enabled = value;
                    OnPropertyChanged( );
                }
            }
        }

    }

    public class CameraCommandSetBlackAndWhiteEntity : CameraCommandEntity
    {
        public CameraCommandSetBlackAndWhiteEntity( [DisallowNull] EntityContext entityContext, [DisallowNull] CameraCommandSetBlackAndWhiteObject data )
            : base( entityContext, data )
        {
        }

        private CameraCommandSetBlackAndWhiteObject GetData( ) 
        {
            return (CameraCommandSetBlackAndWhiteObject)base._GetData( );
        }

        public bool Enabled
        {
            get => GetData( ).Enabled;
            set
            {
                var data = GetData( );
                if( data.Enabled != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Enabled = value;
                    OnPropertyChanged( );
                }
            }
        }

    }

    public class CameraCommandSetFollowedEntity : CameraCommandEntity
    {
        public CameraCommandSetFollowedEntity( [DisallowNull] EntityContext entityContext, [DisallowNull] CameraCommandSetFollowedObject data )
            : base( entityContext, data )
        {
        }

        private CameraCommandSetFollowedObject GetData( ) 
        {
            return (CameraCommandSetFollowedObject)base._GetData( );
        }

        public Guid TrackId
        {
            get => GetData( ).TrackId;
            set
            {
                var data = GetData( );
                if( data.TrackId != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.TrackId = value;
                    OnPropertyChanged( );
                }
            }
        }

        public Types.CameraFollowReason Reason
        {
            get => GetData( ).Reason;
            set
            {
                var data = GetData( );
                if( data.Reason != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Reason = value;
                    OnPropertyChanged( );
                }
            }
        }

    }

    public class CameraCommandSetInfraRedLampEntity : CameraCommandEntity
    {
        public CameraCommandSetInfraRedLampEntity( [DisallowNull] EntityContext entityContext, [DisallowNull] CameraCommandSetInfraRedLampObject data )
            : base( entityContext, data )
        {
        }

        private CameraCommandSetInfraRedLampObject GetData( ) 
        {
            return (CameraCommandSetInfraRedLampObject)base._GetData( );
        }

        public bool Enabled
        {
            get => GetData( ).Enabled;
            set
            {
                var data = GetData( );
                if( data.Enabled != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Enabled = value;
                    OnPropertyChanged( );
                }
            }
        }

    }

    public class CameraCommandSetWasherEntity : CameraCommandEntity
    {
        public CameraCommandSetWasherEntity( [DisallowNull] EntityContext entityContext, [DisallowNull] CameraCommandSetWasherObject data )
            : base( entityContext, data )
        {
        }

        private CameraCommandSetWasherObject GetData( ) 
        {
            return (CameraCommandSetWasherObject)base._GetData( );
        }

        public bool Enabled
        {
            get => GetData( ).Enabled;
            set
            {
                var data = GetData( );
                if( data.Enabled != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Enabled = value;
                    OnPropertyChanged( );
                }
            }
        }

    }

    public class CameraCommandSetWiperEntity : CameraCommandEntity
    {
        public CameraCommandSetWiperEntity( [DisallowNull] EntityContext entityContext, [DisallowNull] CameraCommandSetWiperObject data )
            : base( entityContext, data )
        {
        }

        private CameraCommandSetWiperObject GetData( ) 
        {
            return (CameraCommandSetWiperObject)base._GetData( );
        }

        public bool Enabled
        {
            get => GetData( ).Enabled;
            set
            {
                var data = GetData( );
                if( data.Enabled != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Enabled = value;
                    OnPropertyChanged( );
                }
            }
        }

    }

    public class CameraCommandStopEntity : CameraCommandEntity
    {
        public CameraCommandStopEntity( [DisallowNull] EntityContext entityContext, [DisallowNull] CameraCommandStopObject data )
            : base( entityContext, data )
        {
        }

        private CameraCommandStopObject GetData( ) 
        {
            return (CameraCommandStopObject)base._GetData( );
        }

        public bool PanTilt
        {
            get => GetData( ).PanTilt;
            set
            {
                var data = GetData( );
                if( data.PanTilt != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.PanTilt = value;
                    OnPropertyChanged( );
                }
            }
        }

        public bool Zoom
        {
            get => GetData( ).Zoom;
            set
            {
                var data = GetData( );
                if( data.Zoom != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Zoom = value;
                    OnPropertyChanged( );
                }
            }
        }

    }

    public class CameraCommandReplyEntity : BaseEntity<Kind>
    {
        WeakReference? _cameraReference = null;
        WeakReference? _commandReference = null;
        public CameraCommandReplyEntity( [DisallowNull] EntityContext entityContext, [DisallowNull] CameraCommandReplyObject data )
            : base( entityContext, data )
        {
        }

        public EntityContext? Context => (EntityContext?)_Context;

        protected EntityContext CheckedContext
        {
            get
            {
                var context = Context;
                if ( context is null )
                {
                    throw new InvalidOperationException( "Context is null" );
                }
                return context;
            }
        }

        private CameraCommandReplyObject GetData( ) 
        {
            return (CameraCommandReplyObject)base._GetData( );
        }

        public Guid CameraId
        {
            get => GetData( ).Camera;
            set
            {
                var data = GetData( );
                if( data.Camera != value )
                {
                    OnPropertyChanging( );
                    OnPropertyChanging( "Camera", false );
                    data = GetData( );
                    data.Camera = value;
                    OnPropertyChanged( );
                    OnPropertyChanged( "Camera" );
                }
            }
        }

        public CameraDeviceEntity Camera
        {
            get
            {
                if(_cameraReference != null)
                {
                    var result = (CameraDeviceEntity?)_cameraReference.Target;
                    if( result != null )
                    {
                        return result;
                    }
                }
                var data = GetData( );
                var context = CheckedContext;
                var entity = context.GetCameraDeviceById( data.Camera );
                if( entity != null )
                {
                    _cameraReference = new WeakReference( entity );
                }
                else
                {
                    var message = $"Cannot find the CameraDeviceEntity object identified by {data.Camera}";
                    throw new Exception( message );
                }
                return entity;
            }
            set
            {
                CameraId = value != null? value.Id : Guid.Empty;
            }
        }

        public DateTime Timestamp
        {
            get => GetData( ).Timestamp;
            set
            {
                var data = GetData( );
                if( data.Timestamp != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Timestamp = value;
                    OnPropertyChanged( );
                }
            }
        }

        public Guid? CommandId
        {
            get => GetData( ).Command;
            set
            {
                var data = GetData( );
                if( data.Command != value )
                {
                    OnPropertyChanging( );
                    OnPropertyChanging( "Command", false );
                    data = GetData( );
                    data.Command = value;
                    OnPropertyChanged( );
                    OnPropertyChanged( "Command" );
                }
            }
        }

        public CameraCommandEntity? Command
        {
            get
            {
                if(_commandReference != null)
                {
                    var result = (CameraCommandEntity?)_commandReference.Target;
                    if( result != null )
                    {
                        return result;
                    }
                }
                var data = GetData( );
                var context = CheckedContext;
                if( data.Command is Guid commandId )
                {
                    var entity = context.GetCameraCommandById( commandId );
                    if( entity != null )
                    {
                        _commandReference = new WeakReference( entity );
                    }
                    return entity;
                }
                return null;
            }
            set
            {
                CommandId = value != null? value.Id : null;
            }
        }

        public Types.DeviceCommandReplyStatus Status
        {
            get => GetData( ).Status;
            set
            {
                var data = GetData( );
                if( data.Status != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Status = value;
                    OnPropertyChanged( );
                }
            }
        }

        public string Message
        {
            get => GetData( ).Message;
            set
            {
                var data = GetData( );
                if( data.Message != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Message = value;
                    OnPropertyChanged( );
                }
            }
        }

        public double PanAngle
        {
            get => GetData( ).PanAngle;
            set
            {
                var data = GetData( );
                if( data.PanAngle != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.PanAngle = value;
                    OnPropertyChanged( );
                }
            }
        }

        public double TiltAngle
        {
            get => GetData( ).TiltAngle;
            set
            {
                var data = GetData( );
                if( data.TiltAngle != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.TiltAngle = value;
                    OnPropertyChanged( );
                }
            }
        }

        public double FocalLength
        {
            get => GetData( ).FocalLength;
            set
            {
                var data = GetData( );
                if( data.FocalLength != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.FocalLength = value;
                    OnPropertyChanged( );
                }
            }
        }

    }

    public class CameraConfigurationEntity : BaseEntity<Kind>
    {
        WeakReference? _cameraReference = null;
        public CameraConfigurationEntity( [DisallowNull] EntityContext entityContext, [DisallowNull] CameraConfigurationObject data )
            : base( entityContext, data )
        {
        }

        public EntityContext? Context => (EntityContext?)_Context;

        protected EntityContext CheckedContext
        {
            get
            {
                var context = Context;
                if ( context is null )
                {
                    throw new InvalidOperationException( "Context is null" );
                }
                return context;
            }
        }

        private CameraConfigurationObject GetData( ) 
        {
            return (CameraConfigurationObject)base._GetData( );
        }

        public Guid CameraId
        {
            get => GetData( ).Camera;
            set
            {
                var data = GetData( );
                if( data.Camera != value )
                {
                    OnPropertyChanging( );
                    OnPropertyChanging( "Camera", false );
                    data = GetData( );
                    data.Camera = value;
                    OnPropertyChanged( );
                    OnPropertyChanged( "Camera" );
                }
            }
        }

        public CameraDeviceEntity Camera
        {
            get
            {
                if(_cameraReference != null)
                {
                    var result = (CameraDeviceEntity?)_cameraReference.Target;
                    if( result != null )
                    {
                        return result;
                    }
                }
                var data = GetData( );
                var context = CheckedContext;
                var entity = context.GetCameraDeviceById( data.Camera );
                if( entity != null )
                {
                    _cameraReference = new WeakReference( entity );
                }
                else
                {
                    var message = $"Cannot find the CameraDeviceEntity object identified by {data.Camera}";
                    throw new Exception( message );
                }
                return entity;
            }
            set
            {
                CameraId = value != null? value.Id : Guid.Empty;
            }
        }

        public DateTime Timestamp
        {
            get => GetData( ).Timestamp;
            set
            {
                var data = GetData( );
                if( data.Timestamp != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Timestamp = value;
                    OnPropertyChanged( );
                }
            }
        }

        public Types.CameraControlProtocol CameraControlProtocol
        {
            get => GetData( ).CameraControlProtocol;
            set
            {
                var data = GetData( );
                if( data.CameraControlProtocol != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.CameraControlProtocol = value;
                    OnPropertyChanged( );
                }
            }
        }

        public string CameraURL
        {
            get => GetData( ).CameraURL;
            set
            {
                var data = GetData( );
                if( data.CameraURL != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.CameraURL = value;
                    OnPropertyChanged( );
                }
            }
        }

        public string ConfigurationURL
        {
            get => GetData( ).ConfigurationURL;
            set
            {
                var data = GetData( );
                if( data.ConfigurationURL != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.ConfigurationURL = value;
                    OnPropertyChanged( );
                }
            }
        }

        public string UserName
        {
            get => GetData( ).UserName;
            set
            {
                var data = GetData( );
                if( data.UserName != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.UserName = value;
                    OnPropertyChanged( );
                }
            }
        }

        public string Password
        {
            get => GetData( ).Password;
            set
            {
                var data = GetData( );
                if( data.Password != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Password = value;
                    OnPropertyChanged( );
                }
            }
        }

        public bool UseRtspUriOverride
        {
            get => GetData( ).UseRtspUriOverride;
            set
            {
                var data = GetData( );
                if( data.UseRtspUriOverride != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.UseRtspUriOverride = value;
                    OnPropertyChanged( );
                }
            }
        }

        public string RtspUriOverride
        {
            get => GetData( ).RtspUriOverride;
            set
            {
                var data = GetData( );
                if( data.RtspUriOverride != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.RtspUriOverride = value;
                    OnPropertyChanged( );
                }
            }
        }

        public double Latitude
        {
            get => GetData( ).Latitude;
            set
            {
                var data = GetData( );
                if( data.Latitude != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Latitude = value;
                    OnPropertyChanged( );
                }
            }
        }

        public double Longitude
        {
            get => GetData( ).Longitude;
            set
            {
                var data = GetData( );
                if( data.Longitude != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Longitude = value;
                    OnPropertyChanged( );
                }
            }
        }

        public double Altitude
        {
            get => GetData( ).Altitude;
            set
            {
                var data = GetData( );
                if( data.Altitude != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Altitude = value;
                    OnPropertyChanged( );
                }
            }
        }

        public bool UseRelativePosition
        {
            get => GetData( ).UseRelativePosition;
            set
            {
                var data = GetData( );
                if( data.UseRelativePosition != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.UseRelativePosition = value;
                    OnPropertyChanged( );
                }
            }
        }

        public Types.CameraPanTiltMode PanTiltMode
        {
            get => GetData( ).PanTiltMode;
            set
            {
                var data = GetData( );
                if( data.PanTiltMode != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.PanTiltMode = value;
                    OnPropertyChanged( );
                }
            }
        }

        public double MinTiltAngle
        {
            get => GetData( ).MinTiltAngle;
            set
            {
                var data = GetData( );
                if( data.MinTiltAngle != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.MinTiltAngle = value;
                    OnPropertyChanged( );
                }
            }
        }

        public double MaxTiltAngle
        {
            get => GetData( ).MaxTiltAngle;
            set
            {
                var data = GetData( );
                if( data.MaxTiltAngle != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.MaxTiltAngle = value;
                    OnPropertyChanged( );
                }
            }
        }

        public double MinTiltScaleAngle
        {
            get => GetData( ).MinTiltScaleAngle;
            set
            {
                var data = GetData( );
                if( data.MinTiltScaleAngle != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.MinTiltScaleAngle = value;
                    OnPropertyChanged( );
                }
            }
        }

        public double MaxTiltScaleAngle
        {
            get => GetData( ).MaxTiltScaleAngle;
            set
            {
                var data = GetData( );
                if( data.MaxTiltScaleAngle != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.MaxTiltScaleAngle = value;
                    OnPropertyChanged( );
                }
            }
        }

        public bool UseReverseTiltAngle
        {
            get => GetData( ).UseReverseTiltAngle;
            set
            {
                var data = GetData( );
                if( data.UseReverseTiltAngle != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.UseReverseTiltAngle = value;
                    OnPropertyChanged( );
                }
            }
        }

        public bool UseReverseNormalizedTiltAngle
        {
            get => GetData( ).UseReverseNormalizedTiltAngle;
            set
            {
                var data = GetData( );
                if( data.UseReverseNormalizedTiltAngle != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.UseReverseNormalizedTiltAngle = value;
                    OnPropertyChanged( );
                }
            }
        }

        public double MinTiltVelocity
        {
            get => GetData( ).MinTiltVelocity;
            set
            {
                var data = GetData( );
                if( data.MinTiltVelocity != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.MinTiltVelocity = value;
                    OnPropertyChanged( );
                }
            }
        }

        public double MaxTiltVelocity
        {
            get => GetData( ).MaxTiltVelocity;
            set
            {
                var data = GetData( );
                if( data.MaxTiltVelocity != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.MaxTiltVelocity = value;
                    OnPropertyChanged( );
                }
            }
        }

        public double MinTiltSpeed
        {
            get => GetData( ).MinTiltSpeed;
            set
            {
                var data = GetData( );
                if( data.MinTiltSpeed != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.MinTiltSpeed = value;
                    OnPropertyChanged( );
                }
            }
        }

        public double MaxTiltSpeed
        {
            get => GetData( ).MaxTiltSpeed;
            set
            {
                var data = GetData( );
                if( data.MaxTiltSpeed != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.MaxTiltSpeed = value;
                    OnPropertyChanged( );
                }
            }
        }

        public double MinPanAngle
        {
            get => GetData( ).MinPanAngle;
            set
            {
                var data = GetData( );
                if( data.MinPanAngle != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.MinPanAngle = value;
                    OnPropertyChanged( );
                }
            }
        }

        public double MaxPanAngle
        {
            get => GetData( ).MaxPanAngle;
            set
            {
                var data = GetData( );
                if( data.MaxPanAngle != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.MaxPanAngle = value;
                    OnPropertyChanged( );
                }
            }
        }

        public double MinPanScaleAngle
        {
            get => GetData( ).MinPanScaleAngle;
            set
            {
                var data = GetData( );
                if( data.MinPanScaleAngle != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.MinPanScaleAngle = value;
                    OnPropertyChanged( );
                }
            }
        }

        public double MaxPanScaleAngle
        {
            get => GetData( ).MaxPanScaleAngle;
            set
            {
                var data = GetData( );
                if( data.MaxPanScaleAngle != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.MaxPanScaleAngle = value;
                    OnPropertyChanged( );
                }
            }
        }

        public bool UseReversePanAngle
        {
            get => GetData( ).UseReversePanAngle;
            set
            {
                var data = GetData( );
                if( data.UseReversePanAngle != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.UseReversePanAngle = value;
                    OnPropertyChanged( );
                }
            }
        }

        public bool UseReverseNormalizedPanAngle
        {
            get => GetData( ).UseReverseNormalizedPanAngle;
            set
            {
                var data = GetData( );
                if( data.UseReverseNormalizedPanAngle != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.UseReverseNormalizedPanAngle = value;
                    OnPropertyChanged( );
                }
            }
        }

        public double MinPanVelocity
        {
            get => GetData( ).MinPanVelocity;
            set
            {
                var data = GetData( );
                if( data.MinPanVelocity != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.MinPanVelocity = value;
                    OnPropertyChanged( );
                }
            }
        }

        public double MaxPanVelocity
        {
            get => GetData( ).MaxPanVelocity;
            set
            {
                var data = GetData( );
                if( data.MaxPanVelocity != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.MaxPanVelocity = value;
                    OnPropertyChanged( );
                }
            }
        }

        public double MinPanSpeed
        {
            get => GetData( ).MinPanSpeed;
            set
            {
                var data = GetData( );
                if( data.MinPanSpeed != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.MinPanSpeed = value;
                    OnPropertyChanged( );
                }
            }
        }

        public double MaxPanSpeed
        {
            get => GetData( ).MaxPanSpeed;
            set
            {
                var data = GetData( );
                if( data.MaxPanSpeed != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.MaxPanSpeed = value;
                    OnPropertyChanged( );
                }
            }
        }

        public Types.CameraFocalLengthMode FocalLengthMode
        {
            get => GetData( ).FocalLengthMode;
            set
            {
                var data = GetData( );
                if( data.FocalLengthMode != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.FocalLengthMode = value;
                    OnPropertyChanged( );
                }
            }
        }

        public double MinFocalLength
        {
            get => GetData( ).MinFocalLength;
            set
            {
                var data = GetData( );
                if( data.MinFocalLength != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.MinFocalLength = value;
                    OnPropertyChanged( );
                }
            }
        }

        public double MaxFocalLength
        {
            get => GetData( ).MaxFocalLength;
            set
            {
                var data = GetData( );
                if( data.MaxFocalLength != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.MaxFocalLength = value;
                    OnPropertyChanged( );
                }
            }
        }

        public double MinFocalLengthScale
        {
            get => GetData( ).MinFocalLengthScale;
            set
            {
                var data = GetData( );
                if( data.MinFocalLengthScale != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.MinFocalLengthScale = value;
                    OnPropertyChanged( );
                }
            }
        }

        public double MaxFocalLengthScale
        {
            get => GetData( ).MaxFocalLengthScale;
            set
            {
                var data = GetData( );
                if( data.MaxFocalLengthScale != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.MaxFocalLengthScale = value;
                    OnPropertyChanged( );
                }
            }
        }

        public double MinZoomVelocity
        {
            get => GetData( ).MinZoomVelocity;
            set
            {
                var data = GetData( );
                if( data.MinZoomVelocity != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.MinZoomVelocity = value;
                    OnPropertyChanged( );
                }
            }
        }

        public double MaxZoomVelocity
        {
            get => GetData( ).MaxZoomVelocity;
            set
            {
                var data = GetData( );
                if( data.MaxZoomVelocity != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.MaxZoomVelocity = value;
                    OnPropertyChanged( );
                }
            }
        }

        public double MinZoomSpeed
        {
            get => GetData( ).MinZoomSpeed;
            set
            {
                var data = GetData( );
                if( data.MinZoomSpeed != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.MinZoomSpeed = value;
                    OnPropertyChanged( );
                }
            }
        }

        public double MaxZoomSpeed
        {
            get => GetData( ).MaxZoomSpeed;
            set
            {
                var data = GetData( );
                if( data.MaxZoomSpeed != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.MaxZoomSpeed = value;
                    OnPropertyChanged( );
                }
            }
        }

        public double ImageSensorWidth
        {
            get => GetData( ).ImageSensorWidth;
            set
            {
                var data = GetData( );
                if( data.ImageSensorWidth != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.ImageSensorWidth = value;
                    OnPropertyChanged( );
                }
            }
        }

        public double ImageSensorHeight
        {
            get => GetData( ).ImageSensorHeight;
            set
            {
                var data = GetData( );
                if( data.ImageSensorHeight != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.ImageSensorHeight = value;
                    OnPropertyChanged( );
                }
            }
        }

        public double HomePanAngle
        {
            get => GetData( ).HomePanAngle;
            set
            {
                var data = GetData( );
                if( data.HomePanAngle != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.HomePanAngle = value;
                    OnPropertyChanged( );
                }
            }
        }

        public double HomeTiltAngle
        {
            get => GetData( ).HomeTiltAngle;
            set
            {
                var data = GetData( );
                if( data.HomeTiltAngle != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.HomeTiltAngle = value;
                    OnPropertyChanged( );
                }
            }
        }

        public double HomeFocalLength
        {
            get => GetData( ).HomeFocalLength;
            set
            {
                var data = GetData( );
                if( data.HomeFocalLength != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.HomeFocalLength = value;
                    OnPropertyChanged( );
                }
            }
        }

        public double PanOffset
        {
            get => GetData( ).PanOffset;
            set
            {
                var data = GetData( );
                if( data.PanOffset != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.PanOffset = value;
                    OnPropertyChanged( );
                }
            }
        }

        public double TiltOffset
        {
            get => GetData( ).TiltOffset;
            set
            {
                var data = GetData( );
                if( data.TiltOffset != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.TiltOffset = value;
                    OnPropertyChanged( );
                }
            }
        }

        public double AimAltitude
        {
            get => GetData( ).AimAltitude;
            set
            {
                var data = GetData( );
                if( data.AimAltitude != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.AimAltitude = value;
                    OnPropertyChanged( );
                }
            }
        }

        public double MinimumTargetWidth
        {
            get => GetData( ).MinimumTargetWidth;
            set
            {
                var data = GetData( );
                if( data.MinimumTargetWidth != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.MinimumTargetWidth = value;
                    OnPropertyChanged( );
                }
            }
        }

        public TimeSpan TargetLockTimeout
        {
            get => GetData( ).TargetLockTimeout;
            set
            {
                var data = GetData( );
                if( data.TargetLockTimeout != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.TargetLockTimeout = value;
                    OnPropertyChanged( );
                }
            }
        }

        public TimeSpan UpdateStatusInterval
        {
            get => GetData( ).UpdateStatusInterval;
            set
            {
                var data = GetData( );
                if( data.UpdateStatusInterval != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.UpdateStatusInterval = value;
                    OnPropertyChanged( );
                }
            }
        }

        public TimeSpan ReadTimeout
        {
            get => GetData( ).ReadTimeout;
            set
            {
                var data = GetData( );
                if( data.ReadTimeout != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.ReadTimeout = value;
                    OnPropertyChanged( );
                }
            }
        }

        public TimeSpan MoveCommandStatusDelay
        {
            get => GetData( ).MoveCommandStatusDelay;
            set
            {
                var data = GetData( );
                if( data.MoveCommandStatusDelay != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.MoveCommandStatusDelay = value;
                    OnPropertyChanged( );
                }
            }
        }

        public string PtzProfileName
        {
            get => GetData( ).PtzProfileName;
            set
            {
                var data = GetData( );
                if( data.PtzProfileName != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.PtzProfileName = value;
                    OnPropertyChanged( );
                }
            }
        }

        public string PtzConfigurationToken
        {
            get => GetData( ).PtzConfigurationToken;
            set
            {
                var data = GetData( );
                if( data.PtzConfigurationToken != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.PtzConfigurationToken = value;
                    OnPropertyChanged( );
                }
            }
        }

        public string VideoSourceToken
        {
            get => GetData( ).VideoSourceToken;
            set
            {
                var data = GetData( );
                if( data.VideoSourceToken != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.VideoSourceToken = value;
                    OnPropertyChanged( );
                }
            }
        }

    }

    public class CameraPanCalibrationEntity : BaseEntity<Kind>
    {
        WeakReference? _cameraReference = null;
        public CameraPanCalibrationEntity( [DisallowNull] EntityContext entityContext, [DisallowNull] CameraPanCalibrationObject data )
            : base( entityContext, data )
        {
        }

        public EntityContext? Context => (EntityContext?)_Context;

        protected EntityContext CheckedContext
        {
            get
            {
                var context = Context;
                if ( context is null )
                {
                    throw new InvalidOperationException( "Context is null" );
                }
                return context;
            }
        }

        private CameraPanCalibrationObject GetData( ) 
        {
            return (CameraPanCalibrationObject)base._GetData( );
        }

        public Guid CameraId
        {
            get => GetData( ).Camera;
            set
            {
                var data = GetData( );
                if( data.Camera != value )
                {
                    OnPropertyChanging( );
                    OnPropertyChanging( "Camera", false );
                    data = GetData( );
                    data.Camera = value;
                    OnPropertyChanged( );
                    OnPropertyChanged( "Camera" );
                }
            }
        }

        public CameraDeviceEntity Camera
        {
            get
            {
                if(_cameraReference != null)
                {
                    var result = (CameraDeviceEntity?)_cameraReference.Target;
                    if( result != null )
                    {
                        return result;
                    }
                }
                var data = GetData( );
                var context = CheckedContext;
                var entity = context.GetCameraDeviceById( data.Camera );
                if( entity != null )
                {
                    _cameraReference = new WeakReference( entity );
                }
                else
                {
                    var message = $"Cannot find the CameraDeviceEntity object identified by {data.Camera}";
                    throw new Exception( message );
                }
                return entity;
            }
            set
            {
                CameraId = value != null? value.Id : Guid.Empty;
            }
        }

        public DateTime Timestamp
        {
            get => GetData( ).Timestamp;
            set
            {
                var data = GetData( );
                if( data.Timestamp != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Timestamp = value;
                    OnPropertyChanged( );
                }
            }
        }

    }

    public class CameraPanCalibrationValueEntity : BaseEntity<Kind>
    {
        WeakReference? _panCalibrationReference = null;
        public CameraPanCalibrationValueEntity( [DisallowNull] EntityContext entityContext, [DisallowNull] CameraPanCalibrationValueObject data )
            : base( entityContext, data )
        {
        }

        public EntityContext? Context => (EntityContext?)_Context;

        protected EntityContext CheckedContext
        {
            get
            {
                var context = Context;
                if ( context is null )
                {
                    throw new InvalidOperationException( "Context is null" );
                }
                return context;
            }
        }

        private CameraPanCalibrationValueObject GetData( ) 
        {
            return (CameraPanCalibrationValueObject)base._GetData( );
        }

        public Guid PanCalibrationId
        {
            get => GetData( ).PanCalibration;
            set
            {
                var data = GetData( );
                if( data.PanCalibration != value )
                {
                    OnPropertyChanging( );
                    OnPropertyChanging( "PanCalibration", false );
                    data = GetData( );
                    data.PanCalibration = value;
                    OnPropertyChanged( );
                    OnPropertyChanged( "PanCalibration" );
                }
            }
        }

        public CameraPanCalibrationEntity PanCalibration
        {
            get
            {
                if(_panCalibrationReference != null)
                {
                    var result = (CameraPanCalibrationEntity?)_panCalibrationReference.Target;
                    if( result != null )
                    {
                        return result;
                    }
                }
                var data = GetData( );
                var context = CheckedContext;
                var entity = context.GetCameraPanCalibrationById( data.PanCalibration );
                if( entity != null )
                {
                    _panCalibrationReference = new WeakReference( entity );
                }
                else
                {
                    var message = $"Cannot find the CameraPanCalibrationEntity object identified by {data.PanCalibration}";
                    throw new Exception( message );
                }
                return entity;
            }
            set
            {
                PanCalibrationId = value != null? value.Id : Guid.Empty;
            }
        }

        public double PanAngle
        {
            get => GetData( ).PanAngle;
            set
            {
                var data = GetData( );
                if( data.PanAngle != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.PanAngle = value;
                    OnPropertyChanged( );
                }
            }
        }

        public double PanOffset
        {
            get => GetData( ).PanOffset;
            set
            {
                var data = GetData( );
                if( data.PanOffset != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.PanOffset = value;
                    OnPropertyChanged( );
                }
            }
        }

    }

    public class CameraStatusEntity : BaseEntity<Kind>
    {
        WeakReference? _cameraReference = null;
        WeakReference? _trackReference = null;
        public CameraStatusEntity( [DisallowNull] EntityContext entityContext, [DisallowNull] CameraStatusObject data )
            : base( entityContext, data )
        {
        }

        public EntityContext? Context => (EntityContext?)_Context;

        protected EntityContext CheckedContext
        {
            get
            {
                var context = Context;
                if ( context is null )
                {
                    throw new InvalidOperationException( "Context is null" );
                }
                return context;
            }
        }

        private CameraStatusObject GetData( ) 
        {
            return (CameraStatusObject)base._GetData( );
        }

        public Guid CameraId
        {
            get => GetData( ).Camera;
            set
            {
                var data = GetData( );
                if( data.Camera != value )
                {
                    OnPropertyChanging( );
                    OnPropertyChanging( "Camera", false );
                    data = GetData( );
                    data.Camera = value;
                    OnPropertyChanged( );
                    OnPropertyChanged( "Camera" );
                }
            }
        }

        public CameraDeviceEntity Camera
        {
            get
            {
                if(_cameraReference != null)
                {
                    var result = (CameraDeviceEntity?)_cameraReference.Target;
                    if( result != null )
                    {
                        return result;
                    }
                }
                var data = GetData( );
                var context = CheckedContext;
                var entity = context.GetCameraDeviceById( data.Camera );
                if( entity != null )
                {
                    _cameraReference = new WeakReference( entity );
                }
                else
                {
                    var message = $"Cannot find the CameraDeviceEntity object identified by {data.Camera}";
                    throw new Exception( message );
                }
                return entity;
            }
            set
            {
                CameraId = value != null? value.Id : Guid.Empty;
            }
        }

        public Guid? TrackId
        {
            get => GetData( ).Track;
            set
            {
                var data = GetData( );
                if( data.Track != value )
                {
                    OnPropertyChanging( );
                    OnPropertyChanging( "Track", false );
                    data = GetData( );
                    data.Track = value;
                    OnPropertyChanged( );
                    OnPropertyChanged( "Track" );
                }
            }
        }

        public TrackBaseEntity? Track
        {
            get
            {
                if(_trackReference != null)
                {
                    var result = (TrackBaseEntity?)_trackReference.Target;
                    if( result != null )
                    {
                        return result;
                    }
                }
                var data = GetData( );
                var context = CheckedContext;
                if( data.Track is Guid trackId )
                {
                    var entity = context.GetTrackBaseById( trackId );
                    if( entity != null )
                    {
                        _trackReference = new WeakReference( entity );
                    }
                    return entity;
                }
                return null;
            }
            set
            {
                TrackId = value != null? value.Id : null;
            }
        }

        public DateTime Timestamp
        {
            get => GetData( ).Timestamp;
            set
            {
                var data = GetData( );
                if( data.Timestamp != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Timestamp = value;
                    OnPropertyChanged( );
                }
            }
        }

        public Types.CameraPanTiltMode PositionPanTiltMode
        {
            get => GetData( ).PositionPanTiltMode;
            set
            {
                var data = GetData( );
                if( data.PositionPanTiltMode != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.PositionPanTiltMode = value;
                    OnPropertyChanged( );
                }
            }
        }

        public double PanAngle
        {
            get => GetData( ).PanAngle;
            set
            {
                var data = GetData( );
                if( data.PanAngle != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.PanAngle = value;
                    OnPropertyChanged( );
                }
            }
        }

        public double TiltAngle
        {
            get => GetData( ).TiltAngle;
            set
            {
                var data = GetData( );
                if( data.TiltAngle != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.TiltAngle = value;
                    OnPropertyChanged( );
                }
            }
        }

        public Types.CameraFocalLengthMode PositionFocalLengthMode
        {
            get => GetData( ).PositionFocalLengthMode;
            set
            {
                var data = GetData( );
                if( data.PositionFocalLengthMode != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.PositionFocalLengthMode = value;
                    OnPropertyChanged( );
                }
            }
        }

        public double FocalLength
        {
            get => GetData( ).FocalLength;
            set
            {
                var data = GetData( );
                if( data.FocalLength != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.FocalLength = value;
                    OnPropertyChanged( );
                }
            }
        }

        public Types.CameraMoveStatus PanTiltMoveStatus
        {
            get => GetData( ).PanTiltMoveStatus;
            set
            {
                var data = GetData( );
                if( data.PanTiltMoveStatus != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.PanTiltMoveStatus = value;
                    OnPropertyChanged( );
                }
            }
        }

        public Types.CameraMoveStatus ZoomMoveStatus
        {
            get => GetData( ).ZoomMoveStatus;
            set
            {
                var data = GetData( );
                if( data.ZoomMoveStatus != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.ZoomMoveStatus = value;
                    OnPropertyChanged( );
                }
            }
        }

        public Types.CameraPanTiltMode VelocityPanTiltMode
        {
            get => GetData( ).VelocityPanTiltMode;
            set
            {
                var data = GetData( );
                if( data.VelocityPanTiltMode != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.VelocityPanTiltMode = value;
                    OnPropertyChanged( );
                }
            }
        }

        public double? PanVelocity
        {
            get => GetData( ).PanVelocity;
            set
            {
                var data = GetData( );
                if( data.PanVelocity != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.PanVelocity = value;
                    OnPropertyChanged( );
                }
            }
        }

        public double? TiltVelocity
        {
            get => GetData( ).TiltVelocity;
            set
            {
                var data = GetData( );
                if( data.TiltVelocity != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.TiltVelocity = value;
                    OnPropertyChanged( );
                }
            }
        }

        public Types.CameraFocalLengthMode VelocityFocalLengthMode
        {
            get => GetData( ).VelocityFocalLengthMode;
            set
            {
                var data = GetData( );
                if( data.VelocityFocalLengthMode != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.VelocityFocalLengthMode = value;
                    OnPropertyChanged( );
                }
            }
        }

        public double? ZoomVelocity
        {
            get => GetData( ).ZoomVelocity;
            set
            {
                var data = GetData( );
                if( data.ZoomVelocity != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.ZoomVelocity = value;
                    OnPropertyChanged( );
                }
            }
        }

        public Types.CameraFeatures ActiveFeatures
        {
            get => GetData( ).ActiveFeatures;
            set
            {
                var data = GetData( );
                if( data.ActiveFeatures != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.ActiveFeatures = value;
                    OnPropertyChanged( );
                }
            }
        }

        public string Error
        {
            get => GetData( ).Error;
            set
            {
                var data = GetData( );
                if( data.Error != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Error = value;
                    OnPropertyChanged( );
                }
            }
        }

    }

    public class CameraTiltCalibrationEntity : BaseEntity<Kind>
    {
        WeakReference? _cameraReference = null;
        public CameraTiltCalibrationEntity( [DisallowNull] EntityContext entityContext, [DisallowNull] CameraTiltCalibrationObject data )
            : base( entityContext, data )
        {
        }

        public EntityContext? Context => (EntityContext?)_Context;

        protected EntityContext CheckedContext
        {
            get
            {
                var context = Context;
                if ( context is null )
                {
                    throw new InvalidOperationException( "Context is null" );
                }
                return context;
            }
        }

        private CameraTiltCalibrationObject GetData( ) 
        {
            return (CameraTiltCalibrationObject)base._GetData( );
        }

        public Guid CameraId
        {
            get => GetData( ).Camera;
            set
            {
                var data = GetData( );
                if( data.Camera != value )
                {
                    OnPropertyChanging( );
                    OnPropertyChanging( "Camera", false );
                    data = GetData( );
                    data.Camera = value;
                    OnPropertyChanged( );
                    OnPropertyChanged( "Camera" );
                }
            }
        }

        public CameraDeviceEntity Camera
        {
            get
            {
                if(_cameraReference != null)
                {
                    var result = (CameraDeviceEntity?)_cameraReference.Target;
                    if( result != null )
                    {
                        return result;
                    }
                }
                var data = GetData( );
                var context = CheckedContext;
                var entity = context.GetCameraDeviceById( data.Camera );
                if( entity != null )
                {
                    _cameraReference = new WeakReference( entity );
                }
                else
                {
                    var message = $"Cannot find the CameraDeviceEntity object identified by {data.Camera}";
                    throw new Exception( message );
                }
                return entity;
            }
            set
            {
                CameraId = value != null? value.Id : Guid.Empty;
            }
        }

        public DateTime Timestamp
        {
            get => GetData( ).Timestamp;
            set
            {
                var data = GetData( );
                if( data.Timestamp != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Timestamp = value;
                    OnPropertyChanged( );
                }
            }
        }

    }

    public class CameraTiltCalibrationValueEntity : BaseEntity<Kind>
    {
        WeakReference? _tiltCalibrationReference = null;
        public CameraTiltCalibrationValueEntity( [DisallowNull] EntityContext entityContext, [DisallowNull] CameraTiltCalibrationValueObject data )
            : base( entityContext, data )
        {
        }

        public EntityContext? Context => (EntityContext?)_Context;

        protected EntityContext CheckedContext
        {
            get
            {
                var context = Context;
                if ( context is null )
                {
                    throw new InvalidOperationException( "Context is null" );
                }
                return context;
            }
        }

        private CameraTiltCalibrationValueObject GetData( ) 
        {
            return (CameraTiltCalibrationValueObject)base._GetData( );
        }

        public Guid TiltCalibrationId
        {
            get => GetData( ).TiltCalibration;
            set
            {
                var data = GetData( );
                if( data.TiltCalibration != value )
                {
                    OnPropertyChanging( );
                    OnPropertyChanging( "TiltCalibration", false );
                    data = GetData( );
                    data.TiltCalibration = value;
                    OnPropertyChanged( );
                    OnPropertyChanged( "TiltCalibration" );
                }
            }
        }

        public CameraTiltCalibrationEntity TiltCalibration
        {
            get
            {
                if(_tiltCalibrationReference != null)
                {
                    var result = (CameraTiltCalibrationEntity?)_tiltCalibrationReference.Target;
                    if( result != null )
                    {
                        return result;
                    }
                }
                var data = GetData( );
                var context = CheckedContext;
                var entity = context.GetCameraTiltCalibrationById( data.TiltCalibration );
                if( entity != null )
                {
                    _tiltCalibrationReference = new WeakReference( entity );
                }
                else
                {
                    var message = $"Cannot find the CameraTiltCalibrationEntity object identified by {data.TiltCalibration}";
                    throw new Exception( message );
                }
                return entity;
            }
            set
            {
                TiltCalibrationId = value != null? value.Id : Guid.Empty;
            }
        }

        public double PanAngle
        {
            get => GetData( ).PanAngle;
            set
            {
                var data = GetData( );
                if( data.PanAngle != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.PanAngle = value;
                    OnPropertyChanged( );
                }
            }
        }

        public double TiltOffset
        {
            get => GetData( ).TiltOffset;
            set
            {
                var data = GetData( );
                if( data.TiltOffset != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.TiltOffset = value;
                    OnPropertyChanged( );
                }
            }
        }

    }

    public class CameraZoomCalibrationEntity : BaseEntity<Kind>
    {
        WeakReference? _cameraReference = null;
        public CameraZoomCalibrationEntity( [DisallowNull] EntityContext entityContext, [DisallowNull] CameraZoomCalibrationObject data )
            : base( entityContext, data )
        {
        }

        public EntityContext? Context => (EntityContext?)_Context;

        protected EntityContext CheckedContext
        {
            get
            {
                var context = Context;
                if ( context is null )
                {
                    throw new InvalidOperationException( "Context is null" );
                }
                return context;
            }
        }

        private CameraZoomCalibrationObject GetData( ) 
        {
            return (CameraZoomCalibrationObject)base._GetData( );
        }

        public Guid CameraId
        {
            get => GetData( ).Camera;
            set
            {
                var data = GetData( );
                if( data.Camera != value )
                {
                    OnPropertyChanging( );
                    OnPropertyChanging( "Camera", false );
                    data = GetData( );
                    data.Camera = value;
                    OnPropertyChanged( );
                    OnPropertyChanged( "Camera" );
                }
            }
        }

        public CameraDeviceEntity Camera
        {
            get
            {
                if(_cameraReference != null)
                {
                    var result = (CameraDeviceEntity?)_cameraReference.Target;
                    if( result != null )
                    {
                        return result;
                    }
                }
                var data = GetData( );
                var context = CheckedContext;
                var entity = context.GetCameraDeviceById( data.Camera );
                if( entity != null )
                {
                    _cameraReference = new WeakReference( entity );
                }
                else
                {
                    var message = $"Cannot find the CameraDeviceEntity object identified by {data.Camera}";
                    throw new Exception( message );
                }
                return entity;
            }
            set
            {
                CameraId = value != null? value.Id : Guid.Empty;
            }
        }

        public DateTime Timestamp
        {
            get => GetData( ).Timestamp;
            set
            {
                var data = GetData( );
                if( data.Timestamp != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Timestamp = value;
                    OnPropertyChanged( );
                }
            }
        }

    }

    public class CameraZoomCalibrationValueEntity : BaseEntity<Kind>
    {
        WeakReference? _zoomCalibrationReference = null;
        public CameraZoomCalibrationValueEntity( [DisallowNull] EntityContext entityContext, [DisallowNull] CameraZoomCalibrationValueObject data )
            : base( entityContext, data )
        {
        }

        public EntityContext? Context => (EntityContext?)_Context;

        protected EntityContext CheckedContext
        {
            get
            {
                var context = Context;
                if ( context is null )
                {
                    throw new InvalidOperationException( "Context is null" );
                }
                return context;
            }
        }

        private CameraZoomCalibrationValueObject GetData( ) 
        {
            return (CameraZoomCalibrationValueObject)base._GetData( );
        }

        public Guid ZoomCalibrationId
        {
            get => GetData( ).ZoomCalibration;
            set
            {
                var data = GetData( );
                if( data.ZoomCalibration != value )
                {
                    OnPropertyChanging( );
                    OnPropertyChanging( "ZoomCalibration", false );
                    data = GetData( );
                    data.ZoomCalibration = value;
                    OnPropertyChanged( );
                    OnPropertyChanged( "ZoomCalibration" );
                }
            }
        }

        public CameraZoomCalibrationEntity ZoomCalibration
        {
            get
            {
                if(_zoomCalibrationReference != null)
                {
                    var result = (CameraZoomCalibrationEntity?)_zoomCalibrationReference.Target;
                    if( result != null )
                    {
                        return result;
                    }
                }
                var data = GetData( );
                var context = CheckedContext;
                var entity = context.GetCameraZoomCalibrationById( data.ZoomCalibration );
                if( entity != null )
                {
                    _zoomCalibrationReference = new WeakReference( entity );
                }
                else
                {
                    var message = $"Cannot find the CameraZoomCalibrationEntity object identified by {data.ZoomCalibration}";
                    throw new Exception( message );
                }
                return entity;
            }
            set
            {
                ZoomCalibrationId = value != null? value.Id : Guid.Empty;
            }
        }

        public double FocalLength
        {
            get => GetData( ).FocalLength;
            set
            {
                var data = GetData( );
                if( data.FocalLength != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.FocalLength = value;
                    OnPropertyChanged( );
                }
            }
        }

        public double FocalLengthOffset
        {
            get => GetData( ).FocalLengthOffset;
            set
            {
                var data = GetData( );
                if( data.FocalLengthOffset != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.FocalLengthOffset = value;
                    OnPropertyChanged( );
                }
            }
        }

    }

    public abstract class CatalogElementEntity : BaseEntity<Kind>
    {
        WeakReference? _catalogReference = null;
        protected CatalogElementEntity( [DisallowNull] EntityContext entityContext, [DisallowNull] CatalogElementObject data )
            : base( entityContext, data )
        {
        }

        public EntityContext? Context => (EntityContext?)_Context;

        protected EntityContext CheckedContext
        {
            get
            {
                var context = Context;
                if ( context is null )
                {
                    throw new InvalidOperationException( "Context is null" );
                }
                return context;
            }
        }

        private CatalogElementObject GetData( ) 
        {
            return (CatalogElementObject)base._GetData( );
        }

        public Guid? CatalogId
        {
            get => GetData( ).Catalog;
            set
            {
                var data = GetData( );
                if( data.Catalog != value )
                {
                    OnPropertyChanging( );
                    OnPropertyChanging( "Catalog", false );
                    data = GetData( );
                    data.Catalog = value;
                    OnPropertyChanged( );
                    OnPropertyChanged( "Catalog" );
                }
            }
        }

        public CatalogEntity? Catalog
        {
            get
            {
                if(_catalogReference != null)
                {
                    var result = (CatalogEntity?)_catalogReference.Target;
                    if( result != null )
                    {
                        return result;
                    }
                }
                var data = GetData( );
                var context = CheckedContext;
                if( data.Catalog is Guid catalogId )
                {
                    var entity = context.GetCatalogById( catalogId );
                    if( entity != null )
                    {
                        _catalogReference = new WeakReference( entity );
                    }
                    return entity;
                }
                return null;
            }
            set
            {
                CatalogId = value != null? value.Id : null;
            }
        }

        public string Name
        {
            get => GetData( ).Name;
            set
            {
                var data = GetData( );
                if( data.Name != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Name = value;
                    OnPropertyChanged( );
                }
            }
        }

    }

    public class CatalogEntity : CatalogElementEntity
    {
        public CatalogEntity( [DisallowNull] EntityContext entityContext, [DisallowNull] CatalogObject data )
            : base( entityContext, data )
        {
        }

        private CatalogObject GetData( ) 
        {
            return (CatalogObject)base._GetData( );
        }

    }

    public class ElementEntity : CatalogElementEntity
    {
        WeakReference? _elementTypeReference = null;
        public ElementEntity( [DisallowNull] EntityContext entityContext, [DisallowNull] ElementObject data )
            : base( entityContext, data )
        {
        }

        private ElementObject GetData( ) 
        {
            return (ElementObject)base._GetData( );
        }

        public Guid? ElementTypeId
        {
            get => GetData( ).ElementType;
            set
            {
                var data = GetData( );
                if( data.ElementType != value )
                {
                    OnPropertyChanging( );
                    OnPropertyChanging( "ElementType", false );
                    data = GetData( );
                    data.ElementType = value;
                    OnPropertyChanged( );
                    OnPropertyChanged( "ElementType" );
                }
            }
        }

        public ElementTypeEntity? ElementType
        {
            get
            {
                if(_elementTypeReference != null)
                {
                    var result = (ElementTypeEntity?)_elementTypeReference.Target;
                    if( result != null )
                    {
                        return result;
                    }
                }
                var data = GetData( );
                var context = CheckedContext;
                if( data.ElementType is Guid elementTypeId )
                {
                    var entity = context.GetElementTypeById( elementTypeId );
                    if( entity != null )
                    {
                        _elementTypeReference = new WeakReference( entity );
                    }
                    return entity;
                }
                return null;
            }
            set
            {
                ElementTypeId = value != null? value.Id : null;
            }
        }

    }

    public class CollectionInfoEntity : BaseEntity<Kind>
    {
        public CollectionInfoEntity( [DisallowNull] EntityContext entityContext, [DisallowNull] CollectionInfoObject data )
            : base( entityContext, data )
        {
        }

        public EntityContext? Context => (EntityContext?)_Context;

        protected EntityContext CheckedContext
        {
            get
            {
                var context = Context;
                if ( context is null )
                {
                    throw new InvalidOperationException( "Context is null" );
                }
                return context;
            }
        }

        private CollectionInfoObject GetData( ) 
        {
            return (CollectionInfoObject)base._GetData( );
        }

        public long Count
        {
            get => GetData( ).Count;
            set
            {
                var data = GetData( );
                if( data.Count != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Count = value;
                    OnPropertyChanged( );
                }
            }
        }

    }

    public class CountryEntity : BaseEntity<Kind>
    {
        public CountryEntity( [DisallowNull] EntityContext entityContext, [DisallowNull] CountryObject data )
            : base( entityContext, data )
        {
        }

        public EntityContext? Context => (EntityContext?)_Context;

        protected EntityContext CheckedContext
        {
            get
            {
                var context = Context;
                if ( context is null )
                {
                    throw new InvalidOperationException( "Context is null" );
                }
                return context;
            }
        }

        private CountryObject GetData( ) 
        {
            return (CountryObject)base._GetData( );
        }

        public string Name
        {
            get => GetData( ).Name;
            set
            {
                var data = GetData( );
                if( data.Name != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Name = value;
                    OnPropertyChanged( );
                }
            }
        }

        public int Code
        {
            get => GetData( ).Code;
            set
            {
                var data = GetData( );
                if( data.Code != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Code = value;
                    OnPropertyChanged( );
                }
            }
        }

        public string Alpha2
        {
            get => GetData( ).Alpha2;
            set
            {
                var data = GetData( );
                if( data.Alpha2 != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Alpha2 = value;
                    OnPropertyChanged( );
                }
            }
        }

        public string Alpha3
        {
            get => GetData( ).Alpha3;
            set
            {
                var data = GetData( );
                if( data.Alpha3 != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Alpha3 = value;
                    OnPropertyChanged( );
                }
            }
        }

    }

    public class CursorInfoEntity : BaseEntity<Kind>
    {
        public CursorInfoEntity( [DisallowNull] EntityContext entityContext, [DisallowNull] CursorInfoObject data )
            : base( entityContext, data )
        {
        }

        public EntityContext? Context => (EntityContext?)_Context;

        protected EntityContext CheckedContext
        {
            get
            {
                var context = Context;
                if ( context is null )
                {
                    throw new InvalidOperationException( "Context is null" );
                }
                return context;
            }
        }

        private CursorInfoObject GetData( ) 
        {
            return (CursorInfoObject)base._GetData( );
        }

        public int TypeCode
        {
            get => GetData( ).TypeCode;
            set
            {
                var data = GetData( );
                if( data.TypeCode != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.TypeCode = value;
                    OnPropertyChanged( );
                }
            }
        }

    }

    public class DateTimeTimeseriesValueEntity : BaseEntity<Kind>
    {
        WeakReference? _timeseriesReference = null;
        public DateTimeTimeseriesValueEntity( [DisallowNull] EntityContext entityContext, [DisallowNull] DateTimeTimeseriesValueObject data )
            : base( entityContext, data )
        {
        }

        public EntityContext? Context => (EntityContext?)_Context;

        protected EntityContext CheckedContext
        {
            get
            {
                var context = Context;
                if ( context is null )
                {
                    throw new InvalidOperationException( "Context is null" );
                }
                return context;
            }
        }

        private DateTimeTimeseriesValueObject GetData( ) 
        {
            return (DateTimeTimeseriesValueObject)base._GetData( );
        }

        public Guid TimeseriesId
        {
            get => GetData( ).Timeseries;
            set
            {
                var data = GetData( );
                if( data.Timeseries != value )
                {
                    OnPropertyChanging( );
                    OnPropertyChanging( "Timeseries", false );
                    data = GetData( );
                    data.Timeseries = value;
                    OnPropertyChanged( );
                    OnPropertyChanged( "Timeseries" );
                }
            }
        }

        public DateTimeTimeseriesEntity Timeseries
        {
            get
            {
                if(_timeseriesReference != null)
                {
                    var result = (DateTimeTimeseriesEntity?)_timeseriesReference.Target;
                    if( result != null )
                    {
                        return result;
                    }
                }
                var data = GetData( );
                var context = CheckedContext;
                var entity = context.GetDateTimeTimeseriesById( data.Timeseries );
                if( entity != null )
                {
                    _timeseriesReference = new WeakReference( entity );
                }
                else
                {
                    var message = $"Cannot find the DateTimeTimeseriesEntity object identified by {data.Timeseries}";
                    throw new Exception( message );
                }
                return entity;
            }
            set
            {
                TimeseriesId = value != null? value.Id : Guid.Empty;
            }
        }

        public DateTime Timestamp
        {
            get => GetData( ).Timestamp;
            set
            {
                var data = GetData( );
                if( data.Timestamp != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Timestamp = value;
                    OnPropertyChanged( );
                }
            }
        }

        public DateTime? Value
        {
            get => GetData( ).Value;
            set
            {
                var data = GetData( );
                if( data.Value != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Value = value;
                    OnPropertyChanged( );
                }
            }
        }

    }

    public class DeviceHostEntity : BaseEntity<Kind>
    {
        public DeviceHostEntity( [DisallowNull] EntityContext entityContext, [DisallowNull] DeviceHostObject data )
            : base( entityContext, data )
        {
        }

        public EntityContext? Context => (EntityContext?)_Context;

        protected EntityContext CheckedContext
        {
            get
            {
                var context = Context;
                if ( context is null )
                {
                    throw new InvalidOperationException( "Context is null" );
                }
                return context;
            }
        }

        private DeviceHostObject GetData( ) 
        {
            return (DeviceHostObject)base._GetData( );
        }

        public string Name
        {
            get => GetData( ).Name;
            set
            {
                var data = GetData( );
                if( data.Name != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Name = value;
                    OnPropertyChanged( );
                }
            }
        }

    }

    public class DeviceHostConfigurationEntity : BaseEntity<Kind>
    {
        WeakReference? _hostReference = null;
        public DeviceHostConfigurationEntity( [DisallowNull] EntityContext entityContext, [DisallowNull] DeviceHostConfigurationObject data )
            : base( entityContext, data )
        {
        }

        public EntityContext? Context => (EntityContext?)_Context;

        protected EntityContext CheckedContext
        {
            get
            {
                var context = Context;
                if ( context is null )
                {
                    throw new InvalidOperationException( "Context is null" );
                }
                return context;
            }
        }

        private DeviceHostConfigurationObject GetData( ) 
        {
            return (DeviceHostConfigurationObject)base._GetData( );
        }

        public Guid HostId
        {
            get => GetData( ).Host;
            set
            {
                var data = GetData( );
                if( data.Host != value )
                {
                    OnPropertyChanging( );
                    OnPropertyChanging( "Host", false );
                    data = GetData( );
                    data.Host = value;
                    OnPropertyChanged( );
                    OnPropertyChanged( "Host" );
                }
            }
        }

        public DeviceHostEntity Host
        {
            get
            {
                if(_hostReference != null)
                {
                    var result = (DeviceHostEntity?)_hostReference.Target;
                    if( result != null )
                    {
                        return result;
                    }
                }
                var data = GetData( );
                var context = CheckedContext;
                var entity = context.GetDeviceHostById( data.Host );
                if( entity != null )
                {
                    _hostReference = new WeakReference( entity );
                }
                else
                {
                    var message = $"Cannot find the DeviceHostEntity object identified by {data.Host}";
                    throw new Exception( message );
                }
                return entity;
            }
            set
            {
                HostId = value != null? value.Id : Guid.Empty;
            }
        }

        public DateTime Timestamp
        {
            get => GetData( ).Timestamp;
            set
            {
                var data = GetData( );
                if( data.Timestamp != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Timestamp = value;
                    OnPropertyChanged( );
                }
            }
        }

        public string Hostname
        {
            get => GetData( ).Hostname;
            set
            {
                var data = GetData( );
                if( data.Hostname != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Hostname = value;
                    OnPropertyChanged( );
                }
            }
        }

        public int Port
        {
            get => GetData( ).Port;
            set
            {
                var data = GetData( );
                if( data.Port != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Port = value;
                    OnPropertyChanged( );
                }
            }
        }

        public string QueueName
        {
            get => GetData( ).QueueName;
            set
            {
                var data = GetData( );
                if( data.QueueName != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.QueueName = value;
                    OnPropertyChanged( );
                }
            }
        }

    }

    public class DoubleTimeseriesValueEntity : BaseEntity<Kind>
    {
        WeakReference? _timeseriesReference = null;
        public DoubleTimeseriesValueEntity( [DisallowNull] EntityContext entityContext, [DisallowNull] DoubleTimeseriesValueObject data )
            : base( entityContext, data )
        {
        }

        public EntityContext? Context => (EntityContext?)_Context;

        protected EntityContext CheckedContext
        {
            get
            {
                var context = Context;
                if ( context is null )
                {
                    throw new InvalidOperationException( "Context is null" );
                }
                return context;
            }
        }

        private DoubleTimeseriesValueObject GetData( ) 
        {
            return (DoubleTimeseriesValueObject)base._GetData( );
        }

        public Guid TimeseriesId
        {
            get => GetData( ).Timeseries;
            set
            {
                var data = GetData( );
                if( data.Timeseries != value )
                {
                    OnPropertyChanging( );
                    OnPropertyChanging( "Timeseries", false );
                    data = GetData( );
                    data.Timeseries = value;
                    OnPropertyChanged( );
                    OnPropertyChanged( "Timeseries" );
                }
            }
        }

        public DoubleTimeseriesEntity Timeseries
        {
            get
            {
                if(_timeseriesReference != null)
                {
                    var result = (DoubleTimeseriesEntity?)_timeseriesReference.Target;
                    if( result != null )
                    {
                        return result;
                    }
                }
                var data = GetData( );
                var context = CheckedContext;
                var entity = context.GetDoubleTimeseriesById( data.Timeseries );
                if( entity != null )
                {
                    _timeseriesReference = new WeakReference( entity );
                }
                else
                {
                    var message = $"Cannot find the DoubleTimeseriesEntity object identified by {data.Timeseries}";
                    throw new Exception( message );
                }
                return entity;
            }
            set
            {
                TimeseriesId = value != null? value.Id : Guid.Empty;
            }
        }

        public DateTime Timestamp
        {
            get => GetData( ).Timestamp;
            set
            {
                var data = GetData( );
                if( data.Timestamp != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Timestamp = value;
                    OnPropertyChanged( );
                }
            }
        }

        public double? Value
        {
            get => GetData( ).Value;
            set
            {
                var data = GetData( );
                if( data.Value != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Value = value;
                    OnPropertyChanged( );
                }
            }
        }

    }

    public class FacilityTypeEntity : BaseEntity<Kind>
    {
        public FacilityTypeEntity( [DisallowNull] EntityContext entityContext, [DisallowNull] FacilityTypeObject data )
            : base( entityContext, data )
        {
        }

        public EntityContext? Context => (EntityContext?)_Context;

        protected EntityContext CheckedContext
        {
            get
            {
                var context = Context;
                if ( context is null )
                {
                    throw new InvalidOperationException( "Context is null" );
                }
                return context;
            }
        }

        private FacilityTypeObject GetData( ) 
        {
            return (FacilityTypeObject)base._GetData( );
        }

        public string Name
        {
            get => GetData( ).Name;
            set
            {
                var data = GetData( );
                if( data.Name != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Name = value;
                    OnPropertyChanged( );
                }
            }
        }

    }

    public class GeoPosition2DTimeseriesValueEntity : BaseEntity<Kind>
    {
        WeakReference? _timeseriesReference = null;
        public GeoPosition2DTimeseriesValueEntity( [DisallowNull] EntityContext entityContext, [DisallowNull] GeoPosition2DTimeseriesValueObject data )
            : base( entityContext, data )
        {
        }

        public EntityContext? Context => (EntityContext?)_Context;

        protected EntityContext CheckedContext
        {
            get
            {
                var context = Context;
                if ( context is null )
                {
                    throw new InvalidOperationException( "Context is null" );
                }
                return context;
            }
        }

        private GeoPosition2DTimeseriesValueObject GetData( ) 
        {
            return (GeoPosition2DTimeseriesValueObject)base._GetData( );
        }

        public Guid TimeseriesId
        {
            get => GetData( ).Timeseries;
            set
            {
                var data = GetData( );
                if( data.Timeseries != value )
                {
                    OnPropertyChanging( );
                    OnPropertyChanging( "Timeseries", false );
                    data = GetData( );
                    data.Timeseries = value;
                    OnPropertyChanged( );
                    OnPropertyChanged( "Timeseries" );
                }
            }
        }

        public GeoPosition2DTimeseriesEntity Timeseries
        {
            get
            {
                if(_timeseriesReference != null)
                {
                    var result = (GeoPosition2DTimeseriesEntity?)_timeseriesReference.Target;
                    if( result != null )
                    {
                        return result;
                    }
                }
                var data = GetData( );
                var context = CheckedContext;
                var entity = context.GetGeoPosition2DTimeseriesById( data.Timeseries );
                if( entity != null )
                {
                    _timeseriesReference = new WeakReference( entity );
                }
                else
                {
                    var message = $"Cannot find the GeoPosition2DTimeseriesEntity object identified by {data.Timeseries}";
                    throw new Exception( message );
                }
                return entity;
            }
            set
            {
                TimeseriesId = value != null? value.Id : Guid.Empty;
            }
        }

        public DateTime Timestamp
        {
            get => GetData( ).Timestamp;
            set
            {
                var data = GetData( );
                if( data.Timestamp != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Timestamp = value;
                    OnPropertyChanged( );
                }
            }
        }

        public double? Latitude
        {
            get => GetData( ).Latitude;
            set
            {
                var data = GetData( );
                if( data.Latitude != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Latitude = value;
                    OnPropertyChanged( );
                }
            }
        }

        public double? Longitude
        {
            get => GetData( ).Longitude;
            set
            {
                var data = GetData( );
                if( data.Longitude != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Longitude = value;
                    OnPropertyChanged( );
                }
            }
        }

    }

    public class GeoPosition3DTimeseriesValueEntity : BaseEntity<Kind>
    {
        WeakReference? _timeseriesReference = null;
        public GeoPosition3DTimeseriesValueEntity( [DisallowNull] EntityContext entityContext, [DisallowNull] GeoPosition3DTimeseriesValueObject data )
            : base( entityContext, data )
        {
        }

        public EntityContext? Context => (EntityContext?)_Context;

        protected EntityContext CheckedContext
        {
            get
            {
                var context = Context;
                if ( context is null )
                {
                    throw new InvalidOperationException( "Context is null" );
                }
                return context;
            }
        }

        private GeoPosition3DTimeseriesValueObject GetData( ) 
        {
            return (GeoPosition3DTimeseriesValueObject)base._GetData( );
        }

        public Guid TimeseriesId
        {
            get => GetData( ).Timeseries;
            set
            {
                var data = GetData( );
                if( data.Timeseries != value )
                {
                    OnPropertyChanging( );
                    OnPropertyChanging( "Timeseries", false );
                    data = GetData( );
                    data.Timeseries = value;
                    OnPropertyChanged( );
                    OnPropertyChanged( "Timeseries" );
                }
            }
        }

        public GeoPosition3DTimeseriesEntity Timeseries
        {
            get
            {
                if(_timeseriesReference != null)
                {
                    var result = (GeoPosition3DTimeseriesEntity?)_timeseriesReference.Target;
                    if( result != null )
                    {
                        return result;
                    }
                }
                var data = GetData( );
                var context = CheckedContext;
                var entity = context.GetGeoPosition3DTimeseriesById( data.Timeseries );
                if( entity != null )
                {
                    _timeseriesReference = new WeakReference( entity );
                }
                else
                {
                    var message = $"Cannot find the GeoPosition3DTimeseriesEntity object identified by {data.Timeseries}";
                    throw new Exception( message );
                }
                return entity;
            }
            set
            {
                TimeseriesId = value != null? value.Id : Guid.Empty;
            }
        }

        public DateTime Timestamp
        {
            get => GetData( ).Timestamp;
            set
            {
                var data = GetData( );
                if( data.Timestamp != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Timestamp = value;
                    OnPropertyChanged( );
                }
            }
        }

        public double? Latitude
        {
            get => GetData( ).Latitude;
            set
            {
                var data = GetData( );
                if( data.Latitude != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Latitude = value;
                    OnPropertyChanged( );
                }
            }
        }

        public double? Longitude
        {
            get => GetData( ).Longitude;
            set
            {
                var data = GetData( );
                if( data.Longitude != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Longitude = value;
                    OnPropertyChanged( );
                }
            }
        }

        public double? Altitude
        {
            get => GetData( ).Altitude;
            set
            {
                var data = GetData( );
                if( data.Altitude != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Altitude = value;
                    OnPropertyChanged( );
                }
            }
        }

    }

    public class GNSSDeviceCommandEntity : BaseEntity<Kind>
    {
        WeakReference? _gNSSDeviceReference = null;
        WeakReference? _replyReference = null;
        public GNSSDeviceCommandEntity( [DisallowNull] EntityContext entityContext, [DisallowNull] GNSSDeviceCommandObject data )
            : base( entityContext, data )
        {
        }

        public EntityContext? Context => (EntityContext?)_Context;

        protected EntityContext CheckedContext
        {
            get
            {
                var context = Context;
                if ( context is null )
                {
                    throw new InvalidOperationException( "Context is null" );
                }
                return context;
            }
        }

        private GNSSDeviceCommandObject GetData( ) 
        {
            return (GNSSDeviceCommandObject)base._GetData( );
        }

        public Guid GNSSDeviceId
        {
            get => GetData( ).GNSSDevice;
            set
            {
                var data = GetData( );
                if( data.GNSSDevice != value )
                {
                    OnPropertyChanging( );
                    OnPropertyChanging( "GNSSDevice", false );
                    data = GetData( );
                    data.GNSSDevice = value;
                    OnPropertyChanged( );
                    OnPropertyChanged( "GNSSDevice" );
                }
            }
        }

        public GNSSDeviceEntity GNSSDevice
        {
            get
            {
                if(_gNSSDeviceReference != null)
                {
                    var result = (GNSSDeviceEntity?)_gNSSDeviceReference.Target;
                    if( result != null )
                    {
                        return result;
                    }
                }
                var data = GetData( );
                var context = CheckedContext;
                var entity = context.GetGNSSDeviceById( data.GNSSDevice );
                if( entity != null )
                {
                    _gNSSDeviceReference = new WeakReference( entity );
                }
                else
                {
                    var message = $"Cannot find the GNSSDeviceEntity object identified by {data.GNSSDevice}";
                    throw new Exception( message );
                }
                return entity;
            }
            set
            {
                GNSSDeviceId = value != null? value.Id : Guid.Empty;
            }
        }

        public DateTime Timestamp
        {
            get => GetData( ).Timestamp;
            set
            {
                var data = GetData( );
                if( data.Timestamp != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Timestamp = value;
                    OnPropertyChanged( );
                }
            }
        }

        public Types.DeviceCommandSourceType DeviceCommandSourceType
        {
            get => GetData( ).DeviceCommandSourceType;
            set
            {
                var data = GetData( );
                if( data.DeviceCommandSourceType != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.DeviceCommandSourceType = value;
                    OnPropertyChanged( );
                }
            }
        }

        public Guid DeviceCommandSourceId
        {
            get => GetData( ).DeviceCommandSourceId;
            set
            {
                var data = GetData( );
                if( data.DeviceCommandSourceId != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.DeviceCommandSourceId = value;
                    OnPropertyChanged( );
                }
            }
        }

        public Guid? ReplyId
        {
            get => GetData( ).Reply;
            set
            {
                var data = GetData( );
                if( data.Reply != value )
                {
                    OnPropertyChanging( );
                    OnPropertyChanging( "Reply", false );
                    data = GetData( );
                    data.Reply = value;
                    OnPropertyChanged( );
                    OnPropertyChanged( "Reply" );
                }
            }
        }

        public GNSSDeviceCommandReplyEntity? Reply
        {
            get
            {
                if(_replyReference != null)
                {
                    var result = (GNSSDeviceCommandReplyEntity?)_replyReference.Target;
                    if( result != null )
                    {
                        return result;
                    }
                }
                var data = GetData( );
                var context = CheckedContext;
                if( data.Reply is Guid replyId )
                {
                    var entity = context.GetGNSSDeviceCommandReplyById( replyId );
                    if( entity != null )
                    {
                        _replyReference = new WeakReference( entity );
                    }
                    return entity;
                }
                return null;
            }
            set
            {
                ReplyId = value != null? value.Id : null;
            }
        }

    }

    public class GNSSDeviceCommandReplyEntity : BaseEntity<Kind>
    {
        WeakReference? _gNSSDeviceReference = null;
        WeakReference? _commandReference = null;
        public GNSSDeviceCommandReplyEntity( [DisallowNull] EntityContext entityContext, [DisallowNull] GNSSDeviceCommandReplyObject data )
            : base( entityContext, data )
        {
        }

        public EntityContext? Context => (EntityContext?)_Context;

        protected EntityContext CheckedContext
        {
            get
            {
                var context = Context;
                if ( context is null )
                {
                    throw new InvalidOperationException( "Context is null" );
                }
                return context;
            }
        }

        private GNSSDeviceCommandReplyObject GetData( ) 
        {
            return (GNSSDeviceCommandReplyObject)base._GetData( );
        }

        public Guid GNSSDeviceId
        {
            get => GetData( ).GNSSDevice;
            set
            {
                var data = GetData( );
                if( data.GNSSDevice != value )
                {
                    OnPropertyChanging( );
                    OnPropertyChanging( "GNSSDevice", false );
                    data = GetData( );
                    data.GNSSDevice = value;
                    OnPropertyChanged( );
                    OnPropertyChanged( "GNSSDevice" );
                }
            }
        }

        public GNSSDeviceEntity GNSSDevice
        {
            get
            {
                if(_gNSSDeviceReference != null)
                {
                    var result = (GNSSDeviceEntity?)_gNSSDeviceReference.Target;
                    if( result != null )
                    {
                        return result;
                    }
                }
                var data = GetData( );
                var context = CheckedContext;
                var entity = context.GetGNSSDeviceById( data.GNSSDevice );
                if( entity != null )
                {
                    _gNSSDeviceReference = new WeakReference( entity );
                }
                else
                {
                    var message = $"Cannot find the GNSSDeviceEntity object identified by {data.GNSSDevice}";
                    throw new Exception( message );
                }
                return entity;
            }
            set
            {
                GNSSDeviceId = value != null? value.Id : Guid.Empty;
            }
        }

        public DateTime Timestamp
        {
            get => GetData( ).Timestamp;
            set
            {
                var data = GetData( );
                if( data.Timestamp != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Timestamp = value;
                    OnPropertyChanged( );
                }
            }
        }

        public Guid? CommandId
        {
            get => GetData( ).Command;
            set
            {
                var data = GetData( );
                if( data.Command != value )
                {
                    OnPropertyChanging( );
                    OnPropertyChanging( "Command", false );
                    data = GetData( );
                    data.Command = value;
                    OnPropertyChanged( );
                    OnPropertyChanged( "Command" );
                }
            }
        }

        public GNSSDeviceCommandEntity? Command
        {
            get
            {
                if(_commandReference != null)
                {
                    var result = (GNSSDeviceCommandEntity?)_commandReference.Target;
                    if( result != null )
                    {
                        return result;
                    }
                }
                var data = GetData( );
                var context = CheckedContext;
                if( data.Command is Guid commandId )
                {
                    var entity = context.GetGNSSDeviceCommandById( commandId );
                    if( entity != null )
                    {
                        _commandReference = new WeakReference( entity );
                    }
                    return entity;
                }
                return null;
            }
            set
            {
                CommandId = value != null? value.Id : null;
            }
        }

        public Types.DeviceCommandReplyStatus Status
        {
            get => GetData( ).Status;
            set
            {
                var data = GetData( );
                if( data.Status != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Status = value;
                    OnPropertyChanged( );
                }
            }
        }

        public string Message
        {
            get => GetData( ).Message;
            set
            {
                var data = GetData( );
                if( data.Message != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Message = value;
                    OnPropertyChanged( );
                }
            }
        }

    }

    public class GNSSDeviceConfigurationEntity : BaseEntity<Kind>
    {
        WeakReference? _gNSSDeviceReference = null;
        public GNSSDeviceConfigurationEntity( [DisallowNull] EntityContext entityContext, [DisallowNull] GNSSDeviceConfigurationObject data )
            : base( entityContext, data )
        {
        }

        public EntityContext? Context => (EntityContext?)_Context;

        protected EntityContext CheckedContext
        {
            get
            {
                var context = Context;
                if ( context is null )
                {
                    throw new InvalidOperationException( "Context is null" );
                }
                return context;
            }
        }

        private GNSSDeviceConfigurationObject GetData( ) 
        {
            return (GNSSDeviceConfigurationObject)base._GetData( );
        }

        public Guid GNSSDeviceId
        {
            get => GetData( ).GNSSDevice;
            set
            {
                var data = GetData( );
                if( data.GNSSDevice != value )
                {
                    OnPropertyChanging( );
                    OnPropertyChanging( "GNSSDevice", false );
                    data = GetData( );
                    data.GNSSDevice = value;
                    OnPropertyChanged( );
                    OnPropertyChanged( "GNSSDevice" );
                }
            }
        }

        public GNSSDeviceEntity GNSSDevice
        {
            get
            {
                if(_gNSSDeviceReference != null)
                {
                    var result = (GNSSDeviceEntity?)_gNSSDeviceReference.Target;
                    if( result != null )
                    {
                        return result;
                    }
                }
                var data = GetData( );
                var context = CheckedContext;
                var entity = context.GetGNSSDeviceById( data.GNSSDevice );
                if( entity != null )
                {
                    _gNSSDeviceReference = new WeakReference( entity );
                }
                else
                {
                    var message = $"Cannot find the GNSSDeviceEntity object identified by {data.GNSSDevice}";
                    throw new Exception( message );
                }
                return entity;
            }
            set
            {
                GNSSDeviceId = value != null? value.Id : Guid.Empty;
            }
        }

        public DateTime Timestamp
        {
            get => GetData( ).Timestamp;
            set
            {
                var data = GetData( );
                if( data.Timestamp != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Timestamp = value;
                    OnPropertyChanged( );
                }
            }
        }

        public double DefaultLatitude
        {
            get => GetData( ).DefaultLatitude;
            set
            {
                var data = GetData( );
                if( data.DefaultLatitude != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.DefaultLatitude = value;
                    OnPropertyChanged( );
                }
            }
        }

        public double DefaultLongitude
        {
            get => GetData( ).DefaultLongitude;
            set
            {
                var data = GetData( );
                if( data.DefaultLongitude != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.DefaultLongitude = value;
                    OnPropertyChanged( );
                }
            }
        }

        public double DefaultAltitude
        {
            get => GetData( ).DefaultAltitude;
            set
            {
                var data = GetData( );
                if( data.DefaultAltitude != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.DefaultAltitude = value;
                    OnPropertyChanged( );
                }
            }
        }

        public double LatitudeOffset
        {
            get => GetData( ).LatitudeOffset;
            set
            {
                var data = GetData( );
                if( data.LatitudeOffset != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.LatitudeOffset = value;
                    OnPropertyChanged( );
                }
            }
        }

        public double LongitudeOffset
        {
            get => GetData( ).LongitudeOffset;
            set
            {
                var data = GetData( );
                if( data.LongitudeOffset != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.LongitudeOffset = value;
                    OnPropertyChanged( );
                }
            }
        }

        public double AltitudeOffset
        {
            get => GetData( ).AltitudeOffset;
            set
            {
                var data = GetData( );
                if( data.AltitudeOffset != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.AltitudeOffset = value;
                    OnPropertyChanged( );
                }
            }
        }

    }

    public class GuidTimeseriesValueEntity : BaseEntity<Kind>
    {
        WeakReference? _timeseriesReference = null;
        public GuidTimeseriesValueEntity( [DisallowNull] EntityContext entityContext, [DisallowNull] GuidTimeseriesValueObject data )
            : base( entityContext, data )
        {
        }

        public EntityContext? Context => (EntityContext?)_Context;

        protected EntityContext CheckedContext
        {
            get
            {
                var context = Context;
                if ( context is null )
                {
                    throw new InvalidOperationException( "Context is null" );
                }
                return context;
            }
        }

        private GuidTimeseriesValueObject GetData( ) 
        {
            return (GuidTimeseriesValueObject)base._GetData( );
        }

        public Guid TimeseriesId
        {
            get => GetData( ).Timeseries;
            set
            {
                var data = GetData( );
                if( data.Timeseries != value )
                {
                    OnPropertyChanging( );
                    OnPropertyChanging( "Timeseries", false );
                    data = GetData( );
                    data.Timeseries = value;
                    OnPropertyChanged( );
                    OnPropertyChanged( "Timeseries" );
                }
            }
        }

        public GuidTimeseriesEntity Timeseries
        {
            get
            {
                if(_timeseriesReference != null)
                {
                    var result = (GuidTimeseriesEntity?)_timeseriesReference.Target;
                    if( result != null )
                    {
                        return result;
                    }
                }
                var data = GetData( );
                var context = CheckedContext;
                var entity = context.GetGuidTimeseriesById( data.Timeseries );
                if( entity != null )
                {
                    _timeseriesReference = new WeakReference( entity );
                }
                else
                {
                    var message = $"Cannot find the GuidTimeseriesEntity object identified by {data.Timeseries}";
                    throw new Exception( message );
                }
                return entity;
            }
            set
            {
                TimeseriesId = value != null? value.Id : Guid.Empty;
            }
        }

        public DateTime Timestamp
        {
            get => GetData( ).Timestamp;
            set
            {
                var data = GetData( );
                if( data.Timestamp != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Timestamp = value;
                    OnPropertyChanged( );
                }
            }
        }

        public Guid? Value
        {
            get => GetData( ).Value;
            set
            {
                var data = GetData( );
                if( data.Value != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Value = value;
                    OnPropertyChanged( );
                }
            }
        }

    }

    public class GyroDeviceCommandEntity : BaseEntity<Kind>
    {
        WeakReference? _gyroDeviceReference = null;
        WeakReference? _replyReference = null;
        public GyroDeviceCommandEntity( [DisallowNull] EntityContext entityContext, [DisallowNull] GyroDeviceCommandObject data )
            : base( entityContext, data )
        {
        }

        public EntityContext? Context => (EntityContext?)_Context;

        protected EntityContext CheckedContext
        {
            get
            {
                var context = Context;
                if ( context is null )
                {
                    throw new InvalidOperationException( "Context is null" );
                }
                return context;
            }
        }

        private GyroDeviceCommandObject GetData( ) 
        {
            return (GyroDeviceCommandObject)base._GetData( );
        }

        public Guid GyroDeviceId
        {
            get => GetData( ).GyroDevice;
            set
            {
                var data = GetData( );
                if( data.GyroDevice != value )
                {
                    OnPropertyChanging( );
                    OnPropertyChanging( "GyroDevice", false );
                    data = GetData( );
                    data.GyroDevice = value;
                    OnPropertyChanged( );
                    OnPropertyChanged( "GyroDevice" );
                }
            }
        }

        public GyroDeviceEntity GyroDevice
        {
            get
            {
                if(_gyroDeviceReference != null)
                {
                    var result = (GyroDeviceEntity?)_gyroDeviceReference.Target;
                    if( result != null )
                    {
                        return result;
                    }
                }
                var data = GetData( );
                var context = CheckedContext;
                var entity = context.GetGyroDeviceById( data.GyroDevice );
                if( entity != null )
                {
                    _gyroDeviceReference = new WeakReference( entity );
                }
                else
                {
                    var message = $"Cannot find the GyroDeviceEntity object identified by {data.GyroDevice}";
                    throw new Exception( message );
                }
                return entity;
            }
            set
            {
                GyroDeviceId = value != null? value.Id : Guid.Empty;
            }
        }

        public DateTime Timestamp
        {
            get => GetData( ).Timestamp;
            set
            {
                var data = GetData( );
                if( data.Timestamp != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Timestamp = value;
                    OnPropertyChanged( );
                }
            }
        }

        public Types.DeviceCommandSourceType DeviceCommandSourceType
        {
            get => GetData( ).DeviceCommandSourceType;
            set
            {
                var data = GetData( );
                if( data.DeviceCommandSourceType != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.DeviceCommandSourceType = value;
                    OnPropertyChanged( );
                }
            }
        }

        public Guid DeviceCommandSourceId
        {
            get => GetData( ).DeviceCommandSourceId;
            set
            {
                var data = GetData( );
                if( data.DeviceCommandSourceId != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.DeviceCommandSourceId = value;
                    OnPropertyChanged( );
                }
            }
        }

        public Guid? ReplyId
        {
            get => GetData( ).Reply;
            set
            {
                var data = GetData( );
                if( data.Reply != value )
                {
                    OnPropertyChanging( );
                    OnPropertyChanging( "Reply", false );
                    data = GetData( );
                    data.Reply = value;
                    OnPropertyChanged( );
                    OnPropertyChanged( "Reply" );
                }
            }
        }

        public GyroDeviceCommandReplyEntity? Reply
        {
            get
            {
                if(_replyReference != null)
                {
                    var result = (GyroDeviceCommandReplyEntity?)_replyReference.Target;
                    if( result != null )
                    {
                        return result;
                    }
                }
                var data = GetData( );
                var context = CheckedContext;
                if( data.Reply is Guid replyId )
                {
                    var entity = context.GetGyroDeviceCommandReplyById( replyId );
                    if( entity != null )
                    {
                        _replyReference = new WeakReference( entity );
                    }
                    return entity;
                }
                return null;
            }
            set
            {
                ReplyId = value != null? value.Id : null;
            }
        }

    }

    public class GyroDeviceCommandReplyEntity : BaseEntity<Kind>
    {
        WeakReference? _gyroDeviceReference = null;
        WeakReference? _commandReference = null;
        public GyroDeviceCommandReplyEntity( [DisallowNull] EntityContext entityContext, [DisallowNull] GyroDeviceCommandReplyObject data )
            : base( entityContext, data )
        {
        }

        public EntityContext? Context => (EntityContext?)_Context;

        protected EntityContext CheckedContext
        {
            get
            {
                var context = Context;
                if ( context is null )
                {
                    throw new InvalidOperationException( "Context is null" );
                }
                return context;
            }
        }

        private GyroDeviceCommandReplyObject GetData( ) 
        {
            return (GyroDeviceCommandReplyObject)base._GetData( );
        }

        public Guid GyroDeviceId
        {
            get => GetData( ).GyroDevice;
            set
            {
                var data = GetData( );
                if( data.GyroDevice != value )
                {
                    OnPropertyChanging( );
                    OnPropertyChanging( "GyroDevice", false );
                    data = GetData( );
                    data.GyroDevice = value;
                    OnPropertyChanged( );
                    OnPropertyChanged( "GyroDevice" );
                }
            }
        }

        public GyroDeviceEntity GyroDevice
        {
            get
            {
                if(_gyroDeviceReference != null)
                {
                    var result = (GyroDeviceEntity?)_gyroDeviceReference.Target;
                    if( result != null )
                    {
                        return result;
                    }
                }
                var data = GetData( );
                var context = CheckedContext;
                var entity = context.GetGyroDeviceById( data.GyroDevice );
                if( entity != null )
                {
                    _gyroDeviceReference = new WeakReference( entity );
                }
                else
                {
                    var message = $"Cannot find the GyroDeviceEntity object identified by {data.GyroDevice}";
                    throw new Exception( message );
                }
                return entity;
            }
            set
            {
                GyroDeviceId = value != null? value.Id : Guid.Empty;
            }
        }

        public DateTime Timestamp
        {
            get => GetData( ).Timestamp;
            set
            {
                var data = GetData( );
                if( data.Timestamp != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Timestamp = value;
                    OnPropertyChanged( );
                }
            }
        }

        public Guid? CommandId
        {
            get => GetData( ).Command;
            set
            {
                var data = GetData( );
                if( data.Command != value )
                {
                    OnPropertyChanging( );
                    OnPropertyChanging( "Command", false );
                    data = GetData( );
                    data.Command = value;
                    OnPropertyChanged( );
                    OnPropertyChanged( "Command" );
                }
            }
        }

        public GyroDeviceCommandEntity? Command
        {
            get
            {
                if(_commandReference != null)
                {
                    var result = (GyroDeviceCommandEntity?)_commandReference.Target;
                    if( result != null )
                    {
                        return result;
                    }
                }
                var data = GetData( );
                var context = CheckedContext;
                if( data.Command is Guid commandId )
                {
                    var entity = context.GetGyroDeviceCommandById( commandId );
                    if( entity != null )
                    {
                        _commandReference = new WeakReference( entity );
                    }
                    return entity;
                }
                return null;
            }
            set
            {
                CommandId = value != null? value.Id : null;
            }
        }

        public Types.DeviceCommandReplyStatus Status
        {
            get => GetData( ).Status;
            set
            {
                var data = GetData( );
                if( data.Status != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Status = value;
                    OnPropertyChanged( );
                }
            }
        }

        public string Message
        {
            get => GetData( ).Message;
            set
            {
                var data = GetData( );
                if( data.Message != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Message = value;
                    OnPropertyChanged( );
                }
            }
        }

    }

    public class GyroDeviceConfigurationEntity : BaseEntity<Kind>
    {
        WeakReference? _gyroDeviceReference = null;
        public GyroDeviceConfigurationEntity( [DisallowNull] EntityContext entityContext, [DisallowNull] GyroDeviceConfigurationObject data )
            : base( entityContext, data )
        {
        }

        public EntityContext? Context => (EntityContext?)_Context;

        protected EntityContext CheckedContext
        {
            get
            {
                var context = Context;
                if ( context is null )
                {
                    throw new InvalidOperationException( "Context is null" );
                }
                return context;
            }
        }

        private GyroDeviceConfigurationObject GetData( ) 
        {
            return (GyroDeviceConfigurationObject)base._GetData( );
        }

        public Guid GyroDeviceId
        {
            get => GetData( ).GyroDevice;
            set
            {
                var data = GetData( );
                if( data.GyroDevice != value )
                {
                    OnPropertyChanging( );
                    OnPropertyChanging( "GyroDevice", false );
                    data = GetData( );
                    data.GyroDevice = value;
                    OnPropertyChanged( );
                    OnPropertyChanged( "GyroDevice" );
                }
            }
        }

        public GyroDeviceEntity GyroDevice
        {
            get
            {
                if(_gyroDeviceReference != null)
                {
                    var result = (GyroDeviceEntity?)_gyroDeviceReference.Target;
                    if( result != null )
                    {
                        return result;
                    }
                }
                var data = GetData( );
                var context = CheckedContext;
                var entity = context.GetGyroDeviceById( data.GyroDevice );
                if( entity != null )
                {
                    _gyroDeviceReference = new WeakReference( entity );
                }
                else
                {
                    var message = $"Cannot find the GyroDeviceEntity object identified by {data.GyroDevice}";
                    throw new Exception( message );
                }
                return entity;
            }
            set
            {
                GyroDeviceId = value != null? value.Id : Guid.Empty;
            }
        }

        public DateTime Timestamp
        {
            get => GetData( ).Timestamp;
            set
            {
                var data = GetData( );
                if( data.Timestamp != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Timestamp = value;
                    OnPropertyChanged( );
                }
            }
        }

        public double DefaultHeadingTrueNorth
        {
            get => GetData( ).DefaultHeadingTrueNorth;
            set
            {
                var data = GetData( );
                if( data.DefaultHeadingTrueNorth != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.DefaultHeadingTrueNorth = value;
                    OnPropertyChanged( );
                }
            }
        }

        public double DefaultMagneticTrueNorth
        {
            get => GetData( ).DefaultMagneticTrueNorth;
            set
            {
                var data = GetData( );
                if( data.DefaultMagneticTrueNorth != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.DefaultMagneticTrueNorth = value;
                    OnPropertyChanged( );
                }
            }
        }

        public double HeadingTrueNorthOffset
        {
            get => GetData( ).HeadingTrueNorthOffset;
            set
            {
                var data = GetData( );
                if( data.HeadingTrueNorthOffset != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.HeadingTrueNorthOffset = value;
                    OnPropertyChanged( );
                }
            }
        }

        public double HeadingMagneticNorthOffset
        {
            get => GetData( ).HeadingMagneticNorthOffset;
            set
            {
                var data = GetData( );
                if( data.HeadingMagneticNorthOffset != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.HeadingMagneticNorthOffset = value;
                    OnPropertyChanged( );
                }
            }
        }

        public string PitchTransducerName
        {
            get => GetData( ).PitchTransducerName;
            set
            {
                var data = GetData( );
                if( data.PitchTransducerName != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.PitchTransducerName = value;
                    OnPropertyChanged( );
                }
            }
        }

        public string RollTransducerName
        {
            get => GetData( ).RollTransducerName;
            set
            {
                var data = GetData( );
                if( data.RollTransducerName != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.RollTransducerName = value;
                    OnPropertyChanged( );
                }
            }
        }

    }

    public abstract class IdentityEntity : BaseEntity<Kind>
    {
        protected IdentityEntity( [DisallowNull] EntityContext entityContext, [DisallowNull] IdentityObject data )
            : base( entityContext, data )
        {
        }

        public EntityContext? Context => (EntityContext?)_Context;

        protected EntityContext CheckedContext
        {
            get
            {
                var context = Context;
                if ( context is null )
                {
                    throw new InvalidOperationException( "Context is null" );
                }
                return context;
            }
        }

        private IdentityObject GetData( ) 
        {
            return (IdentityObject)base._GetData( );
        }

    }

    public class CallsignEntity : IdentityEntity
    {
        public CallsignEntity( [DisallowNull] EntityContext entityContext, [DisallowNull] CallsignObject data )
            : base( entityContext, data )
        {
        }

        private CallsignObject GetData( ) 
        {
            return (CallsignObject)base._GetData( );
        }

        public string Identifier
        {
            get => GetData( ).Identifier;
            set
            {
                var data = GetData( );
                if( data.Identifier != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Identifier = value;
                    OnPropertyChanged( );
                }
            }
        }

    }

    public class InternationalMaritimeOrganizationNumberEntity : IdentityEntity
    {
        public InternationalMaritimeOrganizationNumberEntity( [DisallowNull] EntityContext entityContext, [DisallowNull] InternationalMaritimeOrganizationNumberObject data )
            : base( entityContext, data )
        {
        }

        private InternationalMaritimeOrganizationNumberObject GetData( ) 
        {
            return (InternationalMaritimeOrganizationNumberObject)base._GetData( );
        }

        public long Identifier
        {
            get => GetData( ).Identifier;
            set
            {
                var data = GetData( );
                if( data.Identifier != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Identifier = value;
                    OnPropertyChanged( );
                }
            }
        }

    }

    public class MaritimeMobileServiceIdentityEntity : IdentityEntity
    {
        public MaritimeMobileServiceIdentityEntity( [DisallowNull] EntityContext entityContext, [DisallowNull] MaritimeMobileServiceIdentityObject data )
            : base( entityContext, data )
        {
        }

        private MaritimeMobileServiceIdentityObject GetData( ) 
        {
            return (MaritimeMobileServiceIdentityObject)base._GetData( );
        }

        public long Identifier
        {
            get => GetData( ).Identifier;
            set
            {
                var data = GetData( );
                if( data.Identifier != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Identifier = value;
                    OnPropertyChanged( );
                }
            }
        }

    }

    public class NameEntity : IdentityEntity
    {
        public NameEntity( [DisallowNull] EntityContext entityContext, [DisallowNull] NameObject data )
            : base( entityContext, data )
        {
        }

        private NameObject GetData( ) 
        {
            return (NameObject)base._GetData( );
        }

        public string Text
        {
            get => GetData( ).Text;
            set
            {
                var data = GetData( );
                if( data.Text != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Text = value;
                    OnPropertyChanged( );
                }
            }
        }

    }

    public class Int16TimeseriesValueEntity : BaseEntity<Kind>
    {
        WeakReference? _timeseriesReference = null;
        public Int16TimeseriesValueEntity( [DisallowNull] EntityContext entityContext, [DisallowNull] Int16TimeseriesValueObject data )
            : base( entityContext, data )
        {
        }

        public EntityContext? Context => (EntityContext?)_Context;

        protected EntityContext CheckedContext
        {
            get
            {
                var context = Context;
                if ( context is null )
                {
                    throw new InvalidOperationException( "Context is null" );
                }
                return context;
            }
        }

        private Int16TimeseriesValueObject GetData( ) 
        {
            return (Int16TimeseriesValueObject)base._GetData( );
        }

        public Guid TimeseriesId
        {
            get => GetData( ).Timeseries;
            set
            {
                var data = GetData( );
                if( data.Timeseries != value )
                {
                    OnPropertyChanging( );
                    OnPropertyChanging( "Timeseries", false );
                    data = GetData( );
                    data.Timeseries = value;
                    OnPropertyChanged( );
                    OnPropertyChanged( "Timeseries" );
                }
            }
        }

        public Int16TimeseriesEntity Timeseries
        {
            get
            {
                if(_timeseriesReference != null)
                {
                    var result = (Int16TimeseriesEntity?)_timeseriesReference.Target;
                    if( result != null )
                    {
                        return result;
                    }
                }
                var data = GetData( );
                var context = CheckedContext;
                var entity = context.GetInt16TimeseriesById( data.Timeseries );
                if( entity != null )
                {
                    _timeseriesReference = new WeakReference( entity );
                }
                else
                {
                    var message = $"Cannot find the Int16TimeseriesEntity object identified by {data.Timeseries}";
                    throw new Exception( message );
                }
                return entity;
            }
            set
            {
                TimeseriesId = value != null? value.Id : Guid.Empty;
            }
        }

        public DateTime Timestamp
        {
            get => GetData( ).Timestamp;
            set
            {
                var data = GetData( );
                if( data.Timestamp != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Timestamp = value;
                    OnPropertyChanged( );
                }
            }
        }

        public short? Value
        {
            get => GetData( ).Value;
            set
            {
                var data = GetData( );
                if( data.Value != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Value = value;
                    OnPropertyChanged( );
                }
            }
        }

    }

    public class Int32TimeseriesValueEntity : BaseEntity<Kind>
    {
        WeakReference? _timeseriesReference = null;
        public Int32TimeseriesValueEntity( [DisallowNull] EntityContext entityContext, [DisallowNull] Int32TimeseriesValueObject data )
            : base( entityContext, data )
        {
        }

        public EntityContext? Context => (EntityContext?)_Context;

        protected EntityContext CheckedContext
        {
            get
            {
                var context = Context;
                if ( context is null )
                {
                    throw new InvalidOperationException( "Context is null" );
                }
                return context;
            }
        }

        private Int32TimeseriesValueObject GetData( ) 
        {
            return (Int32TimeseriesValueObject)base._GetData( );
        }

        public Guid TimeseriesId
        {
            get => GetData( ).Timeseries;
            set
            {
                var data = GetData( );
                if( data.Timeseries != value )
                {
                    OnPropertyChanging( );
                    OnPropertyChanging( "Timeseries", false );
                    data = GetData( );
                    data.Timeseries = value;
                    OnPropertyChanged( );
                    OnPropertyChanged( "Timeseries" );
                }
            }
        }

        public Int32TimeseriesEntity Timeseries
        {
            get
            {
                if(_timeseriesReference != null)
                {
                    var result = (Int32TimeseriesEntity?)_timeseriesReference.Target;
                    if( result != null )
                    {
                        return result;
                    }
                }
                var data = GetData( );
                var context = CheckedContext;
                var entity = context.GetInt32TimeseriesById( data.Timeseries );
                if( entity != null )
                {
                    _timeseriesReference = new WeakReference( entity );
                }
                else
                {
                    var message = $"Cannot find the Int32TimeseriesEntity object identified by {data.Timeseries}";
                    throw new Exception( message );
                }
                return entity;
            }
            set
            {
                TimeseriesId = value != null? value.Id : Guid.Empty;
            }
        }

        public DateTime Timestamp
        {
            get => GetData( ).Timestamp;
            set
            {
                var data = GetData( );
                if( data.Timestamp != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Timestamp = value;
                    OnPropertyChanged( );
                }
            }
        }

        public int? Value
        {
            get => GetData( ).Value;
            set
            {
                var data = GetData( );
                if( data.Value != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Value = value;
                    OnPropertyChanged( );
                }
            }
        }

    }

    public class Int64TimeseriesValueEntity : BaseEntity<Kind>
    {
        WeakReference? _timeseriesReference = null;
        public Int64TimeseriesValueEntity( [DisallowNull] EntityContext entityContext, [DisallowNull] Int64TimeseriesValueObject data )
            : base( entityContext, data )
        {
        }

        public EntityContext? Context => (EntityContext?)_Context;

        protected EntityContext CheckedContext
        {
            get
            {
                var context = Context;
                if ( context is null )
                {
                    throw new InvalidOperationException( "Context is null" );
                }
                return context;
            }
        }

        private Int64TimeseriesValueObject GetData( ) 
        {
            return (Int64TimeseriesValueObject)base._GetData( );
        }

        public Guid TimeseriesId
        {
            get => GetData( ).Timeseries;
            set
            {
                var data = GetData( );
                if( data.Timeseries != value )
                {
                    OnPropertyChanging( );
                    OnPropertyChanging( "Timeseries", false );
                    data = GetData( );
                    data.Timeseries = value;
                    OnPropertyChanged( );
                    OnPropertyChanged( "Timeseries" );
                }
            }
        }

        public Int64TimeseriesEntity Timeseries
        {
            get
            {
                if(_timeseriesReference != null)
                {
                    var result = (Int64TimeseriesEntity?)_timeseriesReference.Target;
                    if( result != null )
                    {
                        return result;
                    }
                }
                var data = GetData( );
                var context = CheckedContext;
                var entity = context.GetInt64TimeseriesById( data.Timeseries );
                if( entity != null )
                {
                    _timeseriesReference = new WeakReference( entity );
                }
                else
                {
                    var message = $"Cannot find the Int64TimeseriesEntity object identified by {data.Timeseries}";
                    throw new Exception( message );
                }
                return entity;
            }
            set
            {
                TimeseriesId = value != null? value.Id : Guid.Empty;
            }
        }

        public DateTime Timestamp
        {
            get => GetData( ).Timestamp;
            set
            {
                var data = GetData( );
                if( data.Timestamp != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Timestamp = value;
                    OnPropertyChanged( );
                }
            }
        }

        public long? Value
        {
            get => GetData( ).Value;
            set
            {
                var data = GetData( );
                if( data.Value != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Value = value;
                    OnPropertyChanged( );
                }
            }
        }

    }

    public abstract class ItemEntity : BaseEntity<Kind>
    {
        protected ItemEntity( [DisallowNull] EntityContext entityContext, [DisallowNull] ItemObject data )
            : base( entityContext, data )
        {
        }

        public EntityContext? Context => (EntityContext?)_Context;

        protected EntityContext CheckedContext
        {
            get
            {
                var context = Context;
                if ( context is null )
                {
                    throw new InvalidOperationException( "Context is null" );
                }
                return context;
            }
        }

        private ItemObject GetData( ) 
        {
            return (ItemObject)base._GetData( );
        }

    }

    public class BaseStationEntity : ItemEntity
    {
        WeakReference? _typeReference = null;
        public BaseStationEntity( [DisallowNull] EntityContext entityContext, [DisallowNull] BaseStationObject data )
            : base( entityContext, data )
        {
        }

        private BaseStationObject GetData( ) 
        {
            return (BaseStationObject)base._GetData( );
        }

        public string Name
        {
            get => GetData( ).Name;
            set
            {
                var data = GetData( );
                if( data.Name != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Name = value;
                    OnPropertyChanged( );
                }
            }
        }

        public Guid? TypeId
        {
            get => GetData( ).Type;
            set
            {
                var data = GetData( );
                if( data.Type != value )
                {
                    OnPropertyChanging( );
                    OnPropertyChanging( "Type", false );
                    data = GetData( );
                    data.Type = value;
                    OnPropertyChanged( );
                    OnPropertyChanged( "Type" );
                }
            }
        }

        public BaseStationTypeEntity? Type
        {
            get
            {
                if(_typeReference != null)
                {
                    var result = (BaseStationTypeEntity?)_typeReference.Target;
                    if( result != null )
                    {
                        return result;
                    }
                }
                var data = GetData( );
                var context = CheckedContext;
                if( data.Type is Guid typeId )
                {
                    var entity = context.GetBaseStationTypeById( typeId );
                    if( entity != null )
                    {
                        _typeReference = new WeakReference( entity );
                    }
                    return entity;
                }
                return null;
            }
            set
            {
                TypeId = value != null? value.Id : null;
            }
        }

    }

    public abstract class DeviceEntity : ItemEntity
    {
        WeakReference? _hostReference = null;
        WeakReference? _enabledTimeseriesReference = null;
        protected DeviceEntity( [DisallowNull] EntityContext entityContext, [DisallowNull] DeviceObject data )
            : base( entityContext, data )
        {
        }

        private DeviceObject GetData( ) 
        {
            return (DeviceObject)base._GetData( );
        }

        public Guid HostId
        {
            get => GetData( ).Host;
            set
            {
                var data = GetData( );
                if( data.Host != value )
                {
                    OnPropertyChanging( );
                    OnPropertyChanging( "Host", false );
                    data = GetData( );
                    data.Host = value;
                    OnPropertyChanged( );
                    OnPropertyChanged( "Host" );
                }
            }
        }

        public DeviceHostEntity Host
        {
            get
            {
                if(_hostReference != null)
                {
                    var result = (DeviceHostEntity?)_hostReference.Target;
                    if( result != null )
                    {
                        return result;
                    }
                }
                var data = GetData( );
                var context = CheckedContext;
                var entity = context.GetDeviceHostById( data.Host );
                if( entity != null )
                {
                    _hostReference = new WeakReference( entity );
                }
                else
                {
                    var message = $"Cannot find the DeviceHostEntity object identified by {data.Host}";
                    throw new Exception( message );
                }
                return entity;
            }
            set
            {
                HostId = value != null? value.Id : Guid.Empty;
            }
        }

        public string Name
        {
            get => GetData( ).Name;
            set
            {
                var data = GetData( );
                if( data.Name != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Name = value;
                    OnPropertyChanged( );
                }
            }
        }

        public string Description
        {
            get => GetData( ).Description;
            set
            {
                var data = GetData( );
                if( data.Description != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Description = value;
                    OnPropertyChanged( );
                }
            }
        }

        public Guid? EnabledTimeseriesId
        {
            get => GetData( ).EnabledTimeseries;
            set
            {
                var data = GetData( );
                if( data.EnabledTimeseries != value )
                {
                    OnPropertyChanging( );
                    OnPropertyChanging( "EnabledTimeseries", false );
                    data = GetData( );
                    data.EnabledTimeseries = value;
                    OnPropertyChanged( );
                    OnPropertyChanged( "EnabledTimeseries" );
                }
            }
        }

        public DeviceEnabledTimeseriesEntity? EnabledTimeseries
        {
            get
            {
                if(_enabledTimeseriesReference != null)
                {
                    var result = (DeviceEnabledTimeseriesEntity?)_enabledTimeseriesReference.Target;
                    if( result != null )
                    {
                        return result;
                    }
                }
                var data = GetData( );
                var context = CheckedContext;
                if( data.EnabledTimeseries is Guid enabledTimeseriesId )
                {
                    var entity = context.GetDeviceEnabledTimeseriesById( enabledTimeseriesId );
                    if( entity != null )
                    {
                        _enabledTimeseriesReference = new WeakReference( entity );
                    }
                    return entity;
                }
                return null;
            }
            set
            {
                EnabledTimeseriesId = value != null? value.Id : null;
            }
        }

    }

    public class CameraDeviceEntity : DeviceEntity
    {
        public CameraDeviceEntity( [DisallowNull] EntityContext entityContext, [DisallowNull] CameraDeviceObject data )
            : base( entityContext, data )
        {
        }

        private CameraDeviceObject GetData( ) 
        {
            return (CameraDeviceObject)base._GetData( );
        }

    }

    public class GNSSDeviceEntity : DeviceEntity
    {
        WeakReference? _latitudeTimeseriesReference = null;
        WeakReference? _longitudeTimeseriesReference = null;
        WeakReference? _altitudeTimeseriesReference = null;
        public GNSSDeviceEntity( [DisallowNull] EntityContext entityContext, [DisallowNull] GNSSDeviceObject data )
            : base( entityContext, data )
        {
        }

        private GNSSDeviceObject GetData( ) 
        {
            return (GNSSDeviceObject)base._GetData( );
        }

        public Guid? LatitudeTimeseriesId
        {
            get => GetData( ).LatitudeTimeseries;
            set
            {
                var data = GetData( );
                if( data.LatitudeTimeseries != value )
                {
                    OnPropertyChanging( );
                    OnPropertyChanging( "LatitudeTimeseries", false );
                    data = GetData( );
                    data.LatitudeTimeseries = value;
                    OnPropertyChanged( );
                    OnPropertyChanged( "LatitudeTimeseries" );
                }
            }
        }

        public GNSSLatitudeTimeseriesEntity? LatitudeTimeseries
        {
            get
            {
                if(_latitudeTimeseriesReference != null)
                {
                    var result = (GNSSLatitudeTimeseriesEntity?)_latitudeTimeseriesReference.Target;
                    if( result != null )
                    {
                        return result;
                    }
                }
                var data = GetData( );
                var context = CheckedContext;
                if( data.LatitudeTimeseries is Guid latitudeTimeseriesId )
                {
                    var entity = context.GetGNSSLatitudeTimeseriesById( latitudeTimeseriesId );
                    if( entity != null )
                    {
                        _latitudeTimeseriesReference = new WeakReference( entity );
                    }
                    return entity;
                }
                return null;
            }
            set
            {
                LatitudeTimeseriesId = value != null? value.Id : null;
            }
        }

        public Guid? LongitudeTimeseriesId
        {
            get => GetData( ).LongitudeTimeseries;
            set
            {
                var data = GetData( );
                if( data.LongitudeTimeseries != value )
                {
                    OnPropertyChanging( );
                    OnPropertyChanging( "LongitudeTimeseries", false );
                    data = GetData( );
                    data.LongitudeTimeseries = value;
                    OnPropertyChanged( );
                    OnPropertyChanged( "LongitudeTimeseries" );
                }
            }
        }

        public GNSSLongitudeTimeseriesEntity? LongitudeTimeseries
        {
            get
            {
                if(_longitudeTimeseriesReference != null)
                {
                    var result = (GNSSLongitudeTimeseriesEntity?)_longitudeTimeseriesReference.Target;
                    if( result != null )
                    {
                        return result;
                    }
                }
                var data = GetData( );
                var context = CheckedContext;
                if( data.LongitudeTimeseries is Guid longitudeTimeseriesId )
                {
                    var entity = context.GetGNSSLongitudeTimeseriesById( longitudeTimeseriesId );
                    if( entity != null )
                    {
                        _longitudeTimeseriesReference = new WeakReference( entity );
                    }
                    return entity;
                }
                return null;
            }
            set
            {
                LongitudeTimeseriesId = value != null? value.Id : null;
            }
        }

        public Guid? AltitudeTimeseriesId
        {
            get => GetData( ).AltitudeTimeseries;
            set
            {
                var data = GetData( );
                if( data.AltitudeTimeseries != value )
                {
                    OnPropertyChanging( );
                    OnPropertyChanging( "AltitudeTimeseries", false );
                    data = GetData( );
                    data.AltitudeTimeseries = value;
                    OnPropertyChanged( );
                    OnPropertyChanged( "AltitudeTimeseries" );
                }
            }
        }

        public GNSSAltitudeTimeseriesEntity? AltitudeTimeseries
        {
            get
            {
                if(_altitudeTimeseriesReference != null)
                {
                    var result = (GNSSAltitudeTimeseriesEntity?)_altitudeTimeseriesReference.Target;
                    if( result != null )
                    {
                        return result;
                    }
                }
                var data = GetData( );
                var context = CheckedContext;
                if( data.AltitudeTimeseries is Guid altitudeTimeseriesId )
                {
                    var entity = context.GetGNSSAltitudeTimeseriesById( altitudeTimeseriesId );
                    if( entity != null )
                    {
                        _altitudeTimeseriesReference = new WeakReference( entity );
                    }
                    return entity;
                }
                return null;
            }
            set
            {
                AltitudeTimeseriesId = value != null? value.Id : null;
            }
        }

    }

    public class GyroDeviceEntity : DeviceEntity
    {
        WeakReference? _headingTrueNorthTimeseriesReference = null;
        WeakReference? _headingMagneticNorthTimeseriesReference = null;
        WeakReference? _pitchTimeseriesReference = null;
        WeakReference? _rateOfTurnTimeseriesReference = null;
        WeakReference? _rollTimeseriesReference = null;
        WeakReference? _courseTimeseriesReference = null;
        WeakReference? _speedTimeseriesReference = null;
        WeakReference? _gNSSDeviceReference = null;
        public GyroDeviceEntity( [DisallowNull] EntityContext entityContext, [DisallowNull] GyroDeviceObject data )
            : base( entityContext, data )
        {
        }

        private GyroDeviceObject GetData( ) 
        {
            return (GyroDeviceObject)base._GetData( );
        }

        public Guid? HeadingTrueNorthTimeseriesId
        {
            get => GetData( ).HeadingTrueNorthTimeseries;
            set
            {
                var data = GetData( );
                if( data.HeadingTrueNorthTimeseries != value )
                {
                    OnPropertyChanging( );
                    OnPropertyChanging( "HeadingTrueNorthTimeseries", false );
                    data = GetData( );
                    data.HeadingTrueNorthTimeseries = value;
                    OnPropertyChanged( );
                    OnPropertyChanged( "HeadingTrueNorthTimeseries" );
                }
            }
        }

        public GyroHeadingTrueNorthTimeseriesEntity? HeadingTrueNorthTimeseries
        {
            get
            {
                if(_headingTrueNorthTimeseriesReference != null)
                {
                    var result = (GyroHeadingTrueNorthTimeseriesEntity?)_headingTrueNorthTimeseriesReference.Target;
                    if( result != null )
                    {
                        return result;
                    }
                }
                var data = GetData( );
                var context = CheckedContext;
                if( data.HeadingTrueNorthTimeseries is Guid headingTrueNorthTimeseriesId )
                {
                    var entity = context.GetGyroHeadingTrueNorthTimeseriesById( headingTrueNorthTimeseriesId );
                    if( entity != null )
                    {
                        _headingTrueNorthTimeseriesReference = new WeakReference( entity );
                    }
                    return entity;
                }
                return null;
            }
            set
            {
                HeadingTrueNorthTimeseriesId = value != null? value.Id : null;
            }
        }

        public Guid? HeadingMagneticNorthTimeseriesId
        {
            get => GetData( ).HeadingMagneticNorthTimeseries;
            set
            {
                var data = GetData( );
                if( data.HeadingMagneticNorthTimeseries != value )
                {
                    OnPropertyChanging( );
                    OnPropertyChanging( "HeadingMagneticNorthTimeseries", false );
                    data = GetData( );
                    data.HeadingMagneticNorthTimeseries = value;
                    OnPropertyChanged( );
                    OnPropertyChanged( "HeadingMagneticNorthTimeseries" );
                }
            }
        }

        public GyroHeadingMagneticNorthTimeseriesEntity? HeadingMagneticNorthTimeseries
        {
            get
            {
                if(_headingMagneticNorthTimeseriesReference != null)
                {
                    var result = (GyroHeadingMagneticNorthTimeseriesEntity?)_headingMagneticNorthTimeseriesReference.Target;
                    if( result != null )
                    {
                        return result;
                    }
                }
                var data = GetData( );
                var context = CheckedContext;
                if( data.HeadingMagneticNorthTimeseries is Guid headingMagneticNorthTimeseriesId )
                {
                    var entity = context.GetGyroHeadingMagneticNorthTimeseriesById( headingMagneticNorthTimeseriesId );
                    if( entity != null )
                    {
                        _headingMagneticNorthTimeseriesReference = new WeakReference( entity );
                    }
                    return entity;
                }
                return null;
            }
            set
            {
                HeadingMagneticNorthTimeseriesId = value != null? value.Id : null;
            }
        }

        public Guid? PitchTimeseriesId
        {
            get => GetData( ).PitchTimeseries;
            set
            {
                var data = GetData( );
                if( data.PitchTimeseries != value )
                {
                    OnPropertyChanging( );
                    OnPropertyChanging( "PitchTimeseries", false );
                    data = GetData( );
                    data.PitchTimeseries = value;
                    OnPropertyChanged( );
                    OnPropertyChanged( "PitchTimeseries" );
                }
            }
        }

        public GyroPitchTimeseriesEntity? PitchTimeseries
        {
            get
            {
                if(_pitchTimeseriesReference != null)
                {
                    var result = (GyroPitchTimeseriesEntity?)_pitchTimeseriesReference.Target;
                    if( result != null )
                    {
                        return result;
                    }
                }
                var data = GetData( );
                var context = CheckedContext;
                if( data.PitchTimeseries is Guid pitchTimeseriesId )
                {
                    var entity = context.GetGyroPitchTimeseriesById( pitchTimeseriesId );
                    if( entity != null )
                    {
                        _pitchTimeseriesReference = new WeakReference( entity );
                    }
                    return entity;
                }
                return null;
            }
            set
            {
                PitchTimeseriesId = value != null? value.Id : null;
            }
        }

        public Guid? RateOfTurnTimeseriesId
        {
            get => GetData( ).RateOfTurnTimeseries;
            set
            {
                var data = GetData( );
                if( data.RateOfTurnTimeseries != value )
                {
                    OnPropertyChanging( );
                    OnPropertyChanging( "RateOfTurnTimeseries", false );
                    data = GetData( );
                    data.RateOfTurnTimeseries = value;
                    OnPropertyChanged( );
                    OnPropertyChanged( "RateOfTurnTimeseries" );
                }
            }
        }

        public GyroRateOfTurnTimeseriesEntity? RateOfTurnTimeseries
        {
            get
            {
                if(_rateOfTurnTimeseriesReference != null)
                {
                    var result = (GyroRateOfTurnTimeseriesEntity?)_rateOfTurnTimeseriesReference.Target;
                    if( result != null )
                    {
                        return result;
                    }
                }
                var data = GetData( );
                var context = CheckedContext;
                if( data.RateOfTurnTimeseries is Guid rateOfTurnTimeseriesId )
                {
                    var entity = context.GetGyroRateOfTurnTimeseriesById( rateOfTurnTimeseriesId );
                    if( entity != null )
                    {
                        _rateOfTurnTimeseriesReference = new WeakReference( entity );
                    }
                    return entity;
                }
                return null;
            }
            set
            {
                RateOfTurnTimeseriesId = value != null? value.Id : null;
            }
        }

        public Guid? RollTimeseriesId
        {
            get => GetData( ).RollTimeseries;
            set
            {
                var data = GetData( );
                if( data.RollTimeseries != value )
                {
                    OnPropertyChanging( );
                    OnPropertyChanging( "RollTimeseries", false );
                    data = GetData( );
                    data.RollTimeseries = value;
                    OnPropertyChanged( );
                    OnPropertyChanged( "RollTimeseries" );
                }
            }
        }

        public GyroRollTimeseriesEntity? RollTimeseries
        {
            get
            {
                if(_rollTimeseriesReference != null)
                {
                    var result = (GyroRollTimeseriesEntity?)_rollTimeseriesReference.Target;
                    if( result != null )
                    {
                        return result;
                    }
                }
                var data = GetData( );
                var context = CheckedContext;
                if( data.RollTimeseries is Guid rollTimeseriesId )
                {
                    var entity = context.GetGyroRollTimeseriesById( rollTimeseriesId );
                    if( entity != null )
                    {
                        _rollTimeseriesReference = new WeakReference( entity );
                    }
                    return entity;
                }
                return null;
            }
            set
            {
                RollTimeseriesId = value != null? value.Id : null;
            }
        }

        public Guid? CourseTimeseriesId
        {
            get => GetData( ).CourseTimeseries;
            set
            {
                var data = GetData( );
                if( data.CourseTimeseries != value )
                {
                    OnPropertyChanging( );
                    OnPropertyChanging( "CourseTimeseries", false );
                    data = GetData( );
                    data.CourseTimeseries = value;
                    OnPropertyChanged( );
                    OnPropertyChanged( "CourseTimeseries" );
                }
            }
        }

        public GyroCourseTimeseriesEntity? CourseTimeseries
        {
            get
            {
                if(_courseTimeseriesReference != null)
                {
                    var result = (GyroCourseTimeseriesEntity?)_courseTimeseriesReference.Target;
                    if( result != null )
                    {
                        return result;
                    }
                }
                var data = GetData( );
                var context = CheckedContext;
                if( data.CourseTimeseries is Guid courseTimeseriesId )
                {
                    var entity = context.GetGyroCourseTimeseriesById( courseTimeseriesId );
                    if( entity != null )
                    {
                        _courseTimeseriesReference = new WeakReference( entity );
                    }
                    return entity;
                }
                return null;
            }
            set
            {
                CourseTimeseriesId = value != null? value.Id : null;
            }
        }

        public Guid? SpeedTimeseriesId
        {
            get => GetData( ).SpeedTimeseries;
            set
            {
                var data = GetData( );
                if( data.SpeedTimeseries != value )
                {
                    OnPropertyChanging( );
                    OnPropertyChanging( "SpeedTimeseries", false );
                    data = GetData( );
                    data.SpeedTimeseries = value;
                    OnPropertyChanged( );
                    OnPropertyChanged( "SpeedTimeseries" );
                }
            }
        }

        public GyroSpeedTimeseriesEntity? SpeedTimeseries
        {
            get
            {
                if(_speedTimeseriesReference != null)
                {
                    var result = (GyroSpeedTimeseriesEntity?)_speedTimeseriesReference.Target;
                    if( result != null )
                    {
                        return result;
                    }
                }
                var data = GetData( );
                var context = CheckedContext;
                if( data.SpeedTimeseries is Guid speedTimeseriesId )
                {
                    var entity = context.GetGyroSpeedTimeseriesById( speedTimeseriesId );
                    if( entity != null )
                    {
                        _speedTimeseriesReference = new WeakReference( entity );
                    }
                    return entity;
                }
                return null;
            }
            set
            {
                SpeedTimeseriesId = value != null? value.Id : null;
            }
        }

        public Guid? GNSSDeviceId
        {
            get => GetData( ).GNSSDevice;
            set
            {
                var data = GetData( );
                if( data.GNSSDevice != value )
                {
                    OnPropertyChanging( );
                    OnPropertyChanging( "GNSSDevice", false );
                    data = GetData( );
                    data.GNSSDevice = value;
                    OnPropertyChanged( );
                    OnPropertyChanged( "GNSSDevice" );
                }
            }
        }

        public GNSSDeviceEntity? GNSSDevice
        {
            get
            {
                if(_gNSSDeviceReference != null)
                {
                    var result = (GNSSDeviceEntity?)_gNSSDeviceReference.Target;
                    if( result != null )
                    {
                        return result;
                    }
                }
                var data = GetData( );
                var context = CheckedContext;
                if( data.GNSSDevice is Guid gNSSDeviceId )
                {
                    var entity = context.GetGNSSDeviceById( gNSSDeviceId );
                    if( entity != null )
                    {
                        _gNSSDeviceReference = new WeakReference( entity );
                    }
                    return entity;
                }
                return null;
            }
            set
            {
                GNSSDeviceId = value != null? value.Id : null;
            }
        }

    }

    public class LineInputDeviceEntity : DeviceEntity
    {
        public LineInputDeviceEntity( [DisallowNull] EntityContext entityContext, [DisallowNull] LineInputDeviceObject data )
            : base( entityContext, data )
        {
        }

        private LineInputDeviceObject GetData( ) 
        {
            return (LineInputDeviceObject)base._GetData( );
        }

    }

    public class OilSpillDetectorDeviceEntity : DeviceEntity
    {
        public OilSpillDetectorDeviceEntity( [DisallowNull] EntityContext entityContext, [DisallowNull] OilSpillDetectorDeviceObject data )
            : base( entityContext, data )
        {
        }

        private OilSpillDetectorDeviceObject GetData( ) 
        {
            return (OilSpillDetectorDeviceObject)base._GetData( );
        }

    }

    public class RadioDeviceEntity : DeviceEntity
    {
        public RadioDeviceEntity( [DisallowNull] EntityContext entityContext, [DisallowNull] RadioDeviceObject data )
            : base( entityContext, data )
        {
        }

        private RadioDeviceObject GetData( ) 
        {
            return (RadioDeviceObject)base._GetData( );
        }

    }

    public class RadomeDeviceEntity : DeviceEntity
    {
        WeakReference? _radarReference = null;
        WeakReference? _pressureTimeseriesReference = null;
        WeakReference? _temperatureTimeseriesReference = null;
        WeakReference? _dewPointTimeseriesReference = null;
        WeakReference? _statusTimeseriesReference = null;
        public RadomeDeviceEntity( [DisallowNull] EntityContext entityContext, [DisallowNull] RadomeDeviceObject data )
            : base( entityContext, data )
        {
        }

        private RadomeDeviceObject GetData( ) 
        {
            return (RadomeDeviceObject)base._GetData( );
        }

        public Guid? RadarId
        {
            get => GetData( ).Radar;
            set
            {
                var data = GetData( );
                if( data.Radar != value )
                {
                    OnPropertyChanging( );
                    OnPropertyChanging( "Radar", false );
                    data = GetData( );
                    data.Radar = value;
                    OnPropertyChanged( );
                    OnPropertyChanged( "Radar" );
                }
            }
        }

        public RadarDeviceEntity? Radar
        {
            get
            {
                if(_radarReference != null)
                {
                    var result = (RadarDeviceEntity?)_radarReference.Target;
                    if( result != null )
                    {
                        return result;
                    }
                }
                var data = GetData( );
                var context = CheckedContext;
                if( data.Radar is Guid radarId )
                {
                    var entity = context.GetRadarDeviceById( radarId );
                    if( entity != null )
                    {
                        _radarReference = new WeakReference( entity );
                    }
                    return entity;
                }
                return null;
            }
            set
            {
                RadarId = value != null? value.Id : null;
            }
        }

        public Guid? PressureTimeseriesId
        {
            get => GetData( ).PressureTimeseries;
            set
            {
                var data = GetData( );
                if( data.PressureTimeseries != value )
                {
                    OnPropertyChanging( );
                    OnPropertyChanging( "PressureTimeseries", false );
                    data = GetData( );
                    data.PressureTimeseries = value;
                    OnPropertyChanged( );
                    OnPropertyChanged( "PressureTimeseries" );
                }
            }
        }

        public RadomePressureTimeseriesEntity? PressureTimeseries
        {
            get
            {
                if(_pressureTimeseriesReference != null)
                {
                    var result = (RadomePressureTimeseriesEntity?)_pressureTimeseriesReference.Target;
                    if( result != null )
                    {
                        return result;
                    }
                }
                var data = GetData( );
                var context = CheckedContext;
                if( data.PressureTimeseries is Guid pressureTimeseriesId )
                {
                    var entity = context.GetRadomePressureTimeseriesById( pressureTimeseriesId );
                    if( entity != null )
                    {
                        _pressureTimeseriesReference = new WeakReference( entity );
                    }
                    return entity;
                }
                return null;
            }
            set
            {
                PressureTimeseriesId = value != null? value.Id : null;
            }
        }

        public Guid? TemperatureTimeseriesId
        {
            get => GetData( ).TemperatureTimeseries;
            set
            {
                var data = GetData( );
                if( data.TemperatureTimeseries != value )
                {
                    OnPropertyChanging( );
                    OnPropertyChanging( "TemperatureTimeseries", false );
                    data = GetData( );
                    data.TemperatureTimeseries = value;
                    OnPropertyChanged( );
                    OnPropertyChanged( "TemperatureTimeseries" );
                }
            }
        }

        public RadomeTemperatureTimeseriesEntity? TemperatureTimeseries
        {
            get
            {
                if(_temperatureTimeseriesReference != null)
                {
                    var result = (RadomeTemperatureTimeseriesEntity?)_temperatureTimeseriesReference.Target;
                    if( result != null )
                    {
                        return result;
                    }
                }
                var data = GetData( );
                var context = CheckedContext;
                if( data.TemperatureTimeseries is Guid temperatureTimeseriesId )
                {
                    var entity = context.GetRadomeTemperatureTimeseriesById( temperatureTimeseriesId );
                    if( entity != null )
                    {
                        _temperatureTimeseriesReference = new WeakReference( entity );
                    }
                    return entity;
                }
                return null;
            }
            set
            {
                TemperatureTimeseriesId = value != null? value.Id : null;
            }
        }

        public Guid? DewPointTimeseriesId
        {
            get => GetData( ).DewPointTimeseries;
            set
            {
                var data = GetData( );
                if( data.DewPointTimeseries != value )
                {
                    OnPropertyChanging( );
                    OnPropertyChanging( "DewPointTimeseries", false );
                    data = GetData( );
                    data.DewPointTimeseries = value;
                    OnPropertyChanged( );
                    OnPropertyChanged( "DewPointTimeseries" );
                }
            }
        }

        public RadomeDewPointTimeseriesEntity? DewPointTimeseries
        {
            get
            {
                if(_dewPointTimeseriesReference != null)
                {
                    var result = (RadomeDewPointTimeseriesEntity?)_dewPointTimeseriesReference.Target;
                    if( result != null )
                    {
                        return result;
                    }
                }
                var data = GetData( );
                var context = CheckedContext;
                if( data.DewPointTimeseries is Guid dewPointTimeseriesId )
                {
                    var entity = context.GetRadomeDewPointTimeseriesById( dewPointTimeseriesId );
                    if( entity != null )
                    {
                        _dewPointTimeseriesReference = new WeakReference( entity );
                    }
                    return entity;
                }
                return null;
            }
            set
            {
                DewPointTimeseriesId = value != null? value.Id : null;
            }
        }

        public Guid? StatusTimeseriesId
        {
            get => GetData( ).StatusTimeseries;
            set
            {
                var data = GetData( );
                if( data.StatusTimeseries != value )
                {
                    OnPropertyChanging( );
                    OnPropertyChanging( "StatusTimeseries", false );
                    data = GetData( );
                    data.StatusTimeseries = value;
                    OnPropertyChanged( );
                    OnPropertyChanged( "StatusTimeseries" );
                }
            }
        }

        public RadomeStatusTimeseriesEntity? StatusTimeseries
        {
            get
            {
                if(_statusTimeseriesReference != null)
                {
                    var result = (RadomeStatusTimeseriesEntity?)_statusTimeseriesReference.Target;
                    if( result != null )
                    {
                        return result;
                    }
                }
                var data = GetData( );
                var context = CheckedContext;
                if( data.StatusTimeseries is Guid statusTimeseriesId )
                {
                    var entity = context.GetRadomeStatusTimeseriesById( statusTimeseriesId );
                    if( entity != null )
                    {
                        _statusTimeseriesReference = new WeakReference( entity );
                    }
                    return entity;
                }
                return null;
            }
            set
            {
                StatusTimeseriesId = value != null? value.Id : null;
            }
        }

    }

    public abstract class TrackerDeviceEntity : DeviceEntity
    {
        protected TrackerDeviceEntity( [DisallowNull] EntityContext entityContext, [DisallowNull] TrackerDeviceObject data )
            : base( entityContext, data )
        {
        }

        private TrackerDeviceObject GetData( ) 
        {
            return (TrackerDeviceObject)base._GetData( );
        }

    }

    public class AisDeviceEntity : TrackerDeviceEntity
    {
        public AisDeviceEntity( [DisallowNull] EntityContext entityContext, [DisallowNull] AisDeviceObject data )
            : base( entityContext, data )
        {
        }

        private AisDeviceObject GetData( ) 
        {
            return (AisDeviceObject)base._GetData( );
        }

    }

    public class RadarDeviceEntity : TrackerDeviceEntity
    {
        WeakReference? _saveSettingsTimeseriesReference = null;
        WeakReference? _powerOnTimeseriesReference = null;
        WeakReference? _trackingOnTimeseriesReference = null;
        WeakReference? _radarPulseTimeseriesReference = null;
        WeakReference? _tuningTimeseriesReference = null;
        WeakReference? _blankSector1TimeseriesReference = null;
        WeakReference? _sector1StartTimeseriesReference = null;
        WeakReference? _sector1EndTimeseriesReference = null;
        WeakReference? _blankSector2TimeseriesReference = null;
        WeakReference? _sector2StartTimeseriesReference = null;
        WeakReference? _sector2EndTimeseriesReference = null;
        WeakReference? _enableAutomaticFrequencyControlTimeseriesReference = null;
        WeakReference? _azimuthOffsetTimeseriesReference = null;
        WeakReference? _enableSensitivityTimeControlTimeseriesReference = null;
        WeakReference? _automaticSensitivityTimeControlTimeseriesReference = null;
        WeakReference? _sensitivityTimeControlLevelTimeseriesReference = null;
        WeakReference? _enableFastTimeConstantTimeseriesReference = null;
        WeakReference? _fastTimeConstantLevelTimeseriesReference = null;
        WeakReference? _fastTimeConstantModeTimeseriesReference = null;
        WeakReference? _latitudeTimeseriesReference = null;
        WeakReference? _longitudeTimeseriesReference = null;
        WeakReference? _radomeReference = null;
        WeakReference? _gNSSDeviceReference = null;
        public RadarDeviceEntity( [DisallowNull] EntityContext entityContext, [DisallowNull] RadarDeviceObject data )
            : base( entityContext, data )
        {
        }

        private RadarDeviceObject GetData( ) 
        {
            return (RadarDeviceObject)base._GetData( );
        }

        public Guid? SaveSettingsTimeseriesId
        {
            get => GetData( ).SaveSettingsTimeseries;
            set
            {
                var data = GetData( );
                if( data.SaveSettingsTimeseries != value )
                {
                    OnPropertyChanging( );
                    OnPropertyChanging( "SaveSettingsTimeseries", false );
                    data = GetData( );
                    data.SaveSettingsTimeseries = value;
                    OnPropertyChanged( );
                    OnPropertyChanged( "SaveSettingsTimeseries" );
                }
            }
        }

        public RadarSaveSettingsTimeseriesEntity? SaveSettingsTimeseries
        {
            get
            {
                if(_saveSettingsTimeseriesReference != null)
                {
                    var result = (RadarSaveSettingsTimeseriesEntity?)_saveSettingsTimeseriesReference.Target;
                    if( result != null )
                    {
                        return result;
                    }
                }
                var data = GetData( );
                var context = CheckedContext;
                if( data.SaveSettingsTimeseries is Guid saveSettingsTimeseriesId )
                {
                    var entity = context.GetRadarSaveSettingsTimeseriesById( saveSettingsTimeseriesId );
                    if( entity != null )
                    {
                        _saveSettingsTimeseriesReference = new WeakReference( entity );
                    }
                    return entity;
                }
                return null;
            }
            set
            {
                SaveSettingsTimeseriesId = value != null? value.Id : null;
            }
        }

        public Guid? PowerOnTimeseriesId
        {
            get => GetData( ).PowerOnTimeseries;
            set
            {
                var data = GetData( );
                if( data.PowerOnTimeseries != value )
                {
                    OnPropertyChanging( );
                    OnPropertyChanging( "PowerOnTimeseries", false );
                    data = GetData( );
                    data.PowerOnTimeseries = value;
                    OnPropertyChanged( );
                    OnPropertyChanged( "PowerOnTimeseries" );
                }
            }
        }

        public RadarPowerOnTimeseriesEntity? PowerOnTimeseries
        {
            get
            {
                if(_powerOnTimeseriesReference != null)
                {
                    var result = (RadarPowerOnTimeseriesEntity?)_powerOnTimeseriesReference.Target;
                    if( result != null )
                    {
                        return result;
                    }
                }
                var data = GetData( );
                var context = CheckedContext;
                if( data.PowerOnTimeseries is Guid powerOnTimeseriesId )
                {
                    var entity = context.GetRadarPowerOnTimeseriesById( powerOnTimeseriesId );
                    if( entity != null )
                    {
                        _powerOnTimeseriesReference = new WeakReference( entity );
                    }
                    return entity;
                }
                return null;
            }
            set
            {
                PowerOnTimeseriesId = value != null? value.Id : null;
            }
        }

        public Guid? TrackingOnTimeseriesId
        {
            get => GetData( ).TrackingOnTimeseries;
            set
            {
                var data = GetData( );
                if( data.TrackingOnTimeseries != value )
                {
                    OnPropertyChanging( );
                    OnPropertyChanging( "TrackingOnTimeseries", false );
                    data = GetData( );
                    data.TrackingOnTimeseries = value;
                    OnPropertyChanged( );
                    OnPropertyChanged( "TrackingOnTimeseries" );
                }
            }
        }

        public RadarTrackingTimeseriesEntity? TrackingOnTimeseries
        {
            get
            {
                if(_trackingOnTimeseriesReference != null)
                {
                    var result = (RadarTrackingTimeseriesEntity?)_trackingOnTimeseriesReference.Target;
                    if( result != null )
                    {
                        return result;
                    }
                }
                var data = GetData( );
                var context = CheckedContext;
                if( data.TrackingOnTimeseries is Guid trackingOnTimeseriesId )
                {
                    var entity = context.GetRadarTrackingTimeseriesById( trackingOnTimeseriesId );
                    if( entity != null )
                    {
                        _trackingOnTimeseriesReference = new WeakReference( entity );
                    }
                    return entity;
                }
                return null;
            }
            set
            {
                TrackingOnTimeseriesId = value != null? value.Id : null;
            }
        }

        public Guid? RadarPulseTimeseriesId
        {
            get => GetData( ).RadarPulseTimeseries;
            set
            {
                var data = GetData( );
                if( data.RadarPulseTimeseries != value )
                {
                    OnPropertyChanging( );
                    OnPropertyChanging( "RadarPulseTimeseries", false );
                    data = GetData( );
                    data.RadarPulseTimeseries = value;
                    OnPropertyChanged( );
                    OnPropertyChanged( "RadarPulseTimeseries" );
                }
            }
        }

        public RadarPulseTimeseriesEntity? RadarPulseTimeseries
        {
            get
            {
                if(_radarPulseTimeseriesReference != null)
                {
                    var result = (RadarPulseTimeseriesEntity?)_radarPulseTimeseriesReference.Target;
                    if( result != null )
                    {
                        return result;
                    }
                }
                var data = GetData( );
                var context = CheckedContext;
                if( data.RadarPulseTimeseries is Guid radarPulseTimeseriesId )
                {
                    var entity = context.GetRadarPulseTimeseriesById( radarPulseTimeseriesId );
                    if( entity != null )
                    {
                        _radarPulseTimeseriesReference = new WeakReference( entity );
                    }
                    return entity;
                }
                return null;
            }
            set
            {
                RadarPulseTimeseriesId = value != null? value.Id : null;
            }
        }

        public Guid? TuningTimeseriesId
        {
            get => GetData( ).TuningTimeseries;
            set
            {
                var data = GetData( );
                if( data.TuningTimeseries != value )
                {
                    OnPropertyChanging( );
                    OnPropertyChanging( "TuningTimeseries", false );
                    data = GetData( );
                    data.TuningTimeseries = value;
                    OnPropertyChanged( );
                    OnPropertyChanged( "TuningTimeseries" );
                }
            }
        }

        public RadarTuningTimeseriesEntity? TuningTimeseries
        {
            get
            {
                if(_tuningTimeseriesReference != null)
                {
                    var result = (RadarTuningTimeseriesEntity?)_tuningTimeseriesReference.Target;
                    if( result != null )
                    {
                        return result;
                    }
                }
                var data = GetData( );
                var context = CheckedContext;
                if( data.TuningTimeseries is Guid tuningTimeseriesId )
                {
                    var entity = context.GetRadarTuningTimeseriesById( tuningTimeseriesId );
                    if( entity != null )
                    {
                        _tuningTimeseriesReference = new WeakReference( entity );
                    }
                    return entity;
                }
                return null;
            }
            set
            {
                TuningTimeseriesId = value != null? value.Id : null;
            }
        }

        public Guid? BlankSector1TimeseriesId
        {
            get => GetData( ).BlankSector1Timeseries;
            set
            {
                var data = GetData( );
                if( data.BlankSector1Timeseries != value )
                {
                    OnPropertyChanging( );
                    OnPropertyChanging( "BlankSector1Timeseries", false );
                    data = GetData( );
                    data.BlankSector1Timeseries = value;
                    OnPropertyChanged( );
                    OnPropertyChanged( "BlankSector1Timeseries" );
                }
            }
        }

        public RadarBlankSector1TimeseriesEntity? BlankSector1Timeseries
        {
            get
            {
                if(_blankSector1TimeseriesReference != null)
                {
                    var result = (RadarBlankSector1TimeseriesEntity?)_blankSector1TimeseriesReference.Target;
                    if( result != null )
                    {
                        return result;
                    }
                }
                var data = GetData( );
                var context = CheckedContext;
                if( data.BlankSector1Timeseries is Guid blankSector1TimeseriesId )
                {
                    var entity = context.GetRadarBlankSector1TimeseriesById( blankSector1TimeseriesId );
                    if( entity != null )
                    {
                        _blankSector1TimeseriesReference = new WeakReference( entity );
                    }
                    return entity;
                }
                return null;
            }
            set
            {
                BlankSector1TimeseriesId = value != null? value.Id : null;
            }
        }

        public Guid? Sector1StartTimeseriesId
        {
            get => GetData( ).Sector1StartTimeseries;
            set
            {
                var data = GetData( );
                if( data.Sector1StartTimeseries != value )
                {
                    OnPropertyChanging( );
                    OnPropertyChanging( "Sector1StartTimeseries", false );
                    data = GetData( );
                    data.Sector1StartTimeseries = value;
                    OnPropertyChanged( );
                    OnPropertyChanged( "Sector1StartTimeseries" );
                }
            }
        }

        public RadarSector1StartTimeseriesEntity? Sector1StartTimeseries
        {
            get
            {
                if(_sector1StartTimeseriesReference != null)
                {
                    var result = (RadarSector1StartTimeseriesEntity?)_sector1StartTimeseriesReference.Target;
                    if( result != null )
                    {
                        return result;
                    }
                }
                var data = GetData( );
                var context = CheckedContext;
                if( data.Sector1StartTimeseries is Guid sector1StartTimeseriesId )
                {
                    var entity = context.GetRadarSector1StartTimeseriesById( sector1StartTimeseriesId );
                    if( entity != null )
                    {
                        _sector1StartTimeseriesReference = new WeakReference( entity );
                    }
                    return entity;
                }
                return null;
            }
            set
            {
                Sector1StartTimeseriesId = value != null? value.Id : null;
            }
        }

        public Guid? Sector1EndTimeseriesId
        {
            get => GetData( ).Sector1EndTimeseries;
            set
            {
                var data = GetData( );
                if( data.Sector1EndTimeseries != value )
                {
                    OnPropertyChanging( );
                    OnPropertyChanging( "Sector1EndTimeseries", false );
                    data = GetData( );
                    data.Sector1EndTimeseries = value;
                    OnPropertyChanged( );
                    OnPropertyChanged( "Sector1EndTimeseries" );
                }
            }
        }

        public RadarSector1EndTimeseriesEntity? Sector1EndTimeseries
        {
            get
            {
                if(_sector1EndTimeseriesReference != null)
                {
                    var result = (RadarSector1EndTimeseriesEntity?)_sector1EndTimeseriesReference.Target;
                    if( result != null )
                    {
                        return result;
                    }
                }
                var data = GetData( );
                var context = CheckedContext;
                if( data.Sector1EndTimeseries is Guid sector1EndTimeseriesId )
                {
                    var entity = context.GetRadarSector1EndTimeseriesById( sector1EndTimeseriesId );
                    if( entity != null )
                    {
                        _sector1EndTimeseriesReference = new WeakReference( entity );
                    }
                    return entity;
                }
                return null;
            }
            set
            {
                Sector1EndTimeseriesId = value != null? value.Id : null;
            }
        }

        public Guid? BlankSector2TimeseriesId
        {
            get => GetData( ).BlankSector2Timeseries;
            set
            {
                var data = GetData( );
                if( data.BlankSector2Timeseries != value )
                {
                    OnPropertyChanging( );
                    OnPropertyChanging( "BlankSector2Timeseries", false );
                    data = GetData( );
                    data.BlankSector2Timeseries = value;
                    OnPropertyChanged( );
                    OnPropertyChanged( "BlankSector2Timeseries" );
                }
            }
        }

        public RadarBlankSector2TimeseriesEntity? BlankSector2Timeseries
        {
            get
            {
                if(_blankSector2TimeseriesReference != null)
                {
                    var result = (RadarBlankSector2TimeseriesEntity?)_blankSector2TimeseriesReference.Target;
                    if( result != null )
                    {
                        return result;
                    }
                }
                var data = GetData( );
                var context = CheckedContext;
                if( data.BlankSector2Timeseries is Guid blankSector2TimeseriesId )
                {
                    var entity = context.GetRadarBlankSector2TimeseriesById( blankSector2TimeseriesId );
                    if( entity != null )
                    {
                        _blankSector2TimeseriesReference = new WeakReference( entity );
                    }
                    return entity;
                }
                return null;
            }
            set
            {
                BlankSector2TimeseriesId = value != null? value.Id : null;
            }
        }

        public Guid? Sector2StartTimeseriesId
        {
            get => GetData( ).Sector2StartTimeseries;
            set
            {
                var data = GetData( );
                if( data.Sector2StartTimeseries != value )
                {
                    OnPropertyChanging( );
                    OnPropertyChanging( "Sector2StartTimeseries", false );
                    data = GetData( );
                    data.Sector2StartTimeseries = value;
                    OnPropertyChanged( );
                    OnPropertyChanged( "Sector2StartTimeseries" );
                }
            }
        }

        public RadarSector2StartTimeseriesEntity? Sector2StartTimeseries
        {
            get
            {
                if(_sector2StartTimeseriesReference != null)
                {
                    var result = (RadarSector2StartTimeseriesEntity?)_sector2StartTimeseriesReference.Target;
                    if( result != null )
                    {
                        return result;
                    }
                }
                var data = GetData( );
                var context = CheckedContext;
                if( data.Sector2StartTimeseries is Guid sector2StartTimeseriesId )
                {
                    var entity = context.GetRadarSector2StartTimeseriesById( sector2StartTimeseriesId );
                    if( entity != null )
                    {
                        _sector2StartTimeseriesReference = new WeakReference( entity );
                    }
                    return entity;
                }
                return null;
            }
            set
            {
                Sector2StartTimeseriesId = value != null? value.Id : null;
            }
        }

        public Guid? Sector2EndTimeseriesId
        {
            get => GetData( ).Sector2EndTimeseries;
            set
            {
                var data = GetData( );
                if( data.Sector2EndTimeseries != value )
                {
                    OnPropertyChanging( );
                    OnPropertyChanging( "Sector2EndTimeseries", false );
                    data = GetData( );
                    data.Sector2EndTimeseries = value;
                    OnPropertyChanged( );
                    OnPropertyChanged( "Sector2EndTimeseries" );
                }
            }
        }

        public RadarSector2EndTimeseriesEntity? Sector2EndTimeseries
        {
            get
            {
                if(_sector2EndTimeseriesReference != null)
                {
                    var result = (RadarSector2EndTimeseriesEntity?)_sector2EndTimeseriesReference.Target;
                    if( result != null )
                    {
                        return result;
                    }
                }
                var data = GetData( );
                var context = CheckedContext;
                if( data.Sector2EndTimeseries is Guid sector2EndTimeseriesId )
                {
                    var entity = context.GetRadarSector2EndTimeseriesById( sector2EndTimeseriesId );
                    if( entity != null )
                    {
                        _sector2EndTimeseriesReference = new WeakReference( entity );
                    }
                    return entity;
                }
                return null;
            }
            set
            {
                Sector2EndTimeseriesId = value != null? value.Id : null;
            }
        }

        public Guid? EnableAutomaticFrequencyControlTimeseriesId
        {
            get => GetData( ).EnableAutomaticFrequencyControlTimeseries;
            set
            {
                var data = GetData( );
                if( data.EnableAutomaticFrequencyControlTimeseries != value )
                {
                    OnPropertyChanging( );
                    OnPropertyChanging( "EnableAutomaticFrequencyControlTimeseries", false );
                    data = GetData( );
                    data.EnableAutomaticFrequencyControlTimeseries = value;
                    OnPropertyChanged( );
                    OnPropertyChanged( "EnableAutomaticFrequencyControlTimeseries" );
                }
            }
        }

        public RadarEnableAutomaticFrequencyControlTimeseriesEntity? EnableAutomaticFrequencyControlTimeseries
        {
            get
            {
                if(_enableAutomaticFrequencyControlTimeseriesReference != null)
                {
                    var result = (RadarEnableAutomaticFrequencyControlTimeseriesEntity?)_enableAutomaticFrequencyControlTimeseriesReference.Target;
                    if( result != null )
                    {
                        return result;
                    }
                }
                var data = GetData( );
                var context = CheckedContext;
                if( data.EnableAutomaticFrequencyControlTimeseries is Guid enableAutomaticFrequencyControlTimeseriesId )
                {
                    var entity = context.GetRadarEnableAutomaticFrequencyControlTimeseriesById( enableAutomaticFrequencyControlTimeseriesId );
                    if( entity != null )
                    {
                        _enableAutomaticFrequencyControlTimeseriesReference = new WeakReference( entity );
                    }
                    return entity;
                }
                return null;
            }
            set
            {
                EnableAutomaticFrequencyControlTimeseriesId = value != null? value.Id : null;
            }
        }

        public Guid? AzimuthOffsetTimeseriesId
        {
            get => GetData( ).AzimuthOffsetTimeseries;
            set
            {
                var data = GetData( );
                if( data.AzimuthOffsetTimeseries != value )
                {
                    OnPropertyChanging( );
                    OnPropertyChanging( "AzimuthOffsetTimeseries", false );
                    data = GetData( );
                    data.AzimuthOffsetTimeseries = value;
                    OnPropertyChanged( );
                    OnPropertyChanged( "AzimuthOffsetTimeseries" );
                }
            }
        }

        public RadarAzimuthOffsetTimeseriesEntity? AzimuthOffsetTimeseries
        {
            get
            {
                if(_azimuthOffsetTimeseriesReference != null)
                {
                    var result = (RadarAzimuthOffsetTimeseriesEntity?)_azimuthOffsetTimeseriesReference.Target;
                    if( result != null )
                    {
                        return result;
                    }
                }
                var data = GetData( );
                var context = CheckedContext;
                if( data.AzimuthOffsetTimeseries is Guid azimuthOffsetTimeseriesId )
                {
                    var entity = context.GetRadarAzimuthOffsetTimeseriesById( azimuthOffsetTimeseriesId );
                    if( entity != null )
                    {
                        _azimuthOffsetTimeseriesReference = new WeakReference( entity );
                    }
                    return entity;
                }
                return null;
            }
            set
            {
                AzimuthOffsetTimeseriesId = value != null? value.Id : null;
            }
        }

        public Guid? EnableSensitivityTimeControlTimeseriesId
        {
            get => GetData( ).EnableSensitivityTimeControlTimeseries;
            set
            {
                var data = GetData( );
                if( data.EnableSensitivityTimeControlTimeseries != value )
                {
                    OnPropertyChanging( );
                    OnPropertyChanging( "EnableSensitivityTimeControlTimeseries", false );
                    data = GetData( );
                    data.EnableSensitivityTimeControlTimeseries = value;
                    OnPropertyChanged( );
                    OnPropertyChanged( "EnableSensitivityTimeControlTimeseries" );
                }
            }
        }

        public RadarEnableSensitivityTimeControlTimeseriesEntity? EnableSensitivityTimeControlTimeseries
        {
            get
            {
                if(_enableSensitivityTimeControlTimeseriesReference != null)
                {
                    var result = (RadarEnableSensitivityTimeControlTimeseriesEntity?)_enableSensitivityTimeControlTimeseriesReference.Target;
                    if( result != null )
                    {
                        return result;
                    }
                }
                var data = GetData( );
                var context = CheckedContext;
                if( data.EnableSensitivityTimeControlTimeseries is Guid enableSensitivityTimeControlTimeseriesId )
                {
                    var entity = context.GetRadarEnableSensitivityTimeControlTimeseriesById( enableSensitivityTimeControlTimeseriesId );
                    if( entity != null )
                    {
                        _enableSensitivityTimeControlTimeseriesReference = new WeakReference( entity );
                    }
                    return entity;
                }
                return null;
            }
            set
            {
                EnableSensitivityTimeControlTimeseriesId = value != null? value.Id : null;
            }
        }

        public Guid? AutomaticSensitivityTimeControlTimeseriesId
        {
            get => GetData( ).AutomaticSensitivityTimeControlTimeseries;
            set
            {
                var data = GetData( );
                if( data.AutomaticSensitivityTimeControlTimeseries != value )
                {
                    OnPropertyChanging( );
                    OnPropertyChanging( "AutomaticSensitivityTimeControlTimeseries", false );
                    data = GetData( );
                    data.AutomaticSensitivityTimeControlTimeseries = value;
                    OnPropertyChanged( );
                    OnPropertyChanged( "AutomaticSensitivityTimeControlTimeseries" );
                }
            }
        }

        public RadarAutomaticSensitivityTimeControlTimeseriesEntity? AutomaticSensitivityTimeControlTimeseries
        {
            get
            {
                if(_automaticSensitivityTimeControlTimeseriesReference != null)
                {
                    var result = (RadarAutomaticSensitivityTimeControlTimeseriesEntity?)_automaticSensitivityTimeControlTimeseriesReference.Target;
                    if( result != null )
                    {
                        return result;
                    }
                }
                var data = GetData( );
                var context = CheckedContext;
                if( data.AutomaticSensitivityTimeControlTimeseries is Guid automaticSensitivityTimeControlTimeseriesId )
                {
                    var entity = context.GetRadarAutomaticSensitivityTimeControlTimeseriesById( automaticSensitivityTimeControlTimeseriesId );
                    if( entity != null )
                    {
                        _automaticSensitivityTimeControlTimeseriesReference = new WeakReference( entity );
                    }
                    return entity;
                }
                return null;
            }
            set
            {
                AutomaticSensitivityTimeControlTimeseriesId = value != null? value.Id : null;
            }
        }

        public Guid? SensitivityTimeControlLevelTimeseriesId
        {
            get => GetData( ).SensitivityTimeControlLevelTimeseries;
            set
            {
                var data = GetData( );
                if( data.SensitivityTimeControlLevelTimeseries != value )
                {
                    OnPropertyChanging( );
                    OnPropertyChanging( "SensitivityTimeControlLevelTimeseries", false );
                    data = GetData( );
                    data.SensitivityTimeControlLevelTimeseries = value;
                    OnPropertyChanged( );
                    OnPropertyChanged( "SensitivityTimeControlLevelTimeseries" );
                }
            }
        }

        public RadarSensitivityTimeControlLevelTimeseriesEntity? SensitivityTimeControlLevelTimeseries
        {
            get
            {
                if(_sensitivityTimeControlLevelTimeseriesReference != null)
                {
                    var result = (RadarSensitivityTimeControlLevelTimeseriesEntity?)_sensitivityTimeControlLevelTimeseriesReference.Target;
                    if( result != null )
                    {
                        return result;
                    }
                }
                var data = GetData( );
                var context = CheckedContext;
                if( data.SensitivityTimeControlLevelTimeseries is Guid sensitivityTimeControlLevelTimeseriesId )
                {
                    var entity = context.GetRadarSensitivityTimeControlLevelTimeseriesById( sensitivityTimeControlLevelTimeseriesId );
                    if( entity != null )
                    {
                        _sensitivityTimeControlLevelTimeseriesReference = new WeakReference( entity );
                    }
                    return entity;
                }
                return null;
            }
            set
            {
                SensitivityTimeControlLevelTimeseriesId = value != null? value.Id : null;
            }
        }

        public Guid? EnableFastTimeConstantTimeseriesId
        {
            get => GetData( ).EnableFastTimeConstantTimeseries;
            set
            {
                var data = GetData( );
                if( data.EnableFastTimeConstantTimeseries != value )
                {
                    OnPropertyChanging( );
                    OnPropertyChanging( "EnableFastTimeConstantTimeseries", false );
                    data = GetData( );
                    data.EnableFastTimeConstantTimeseries = value;
                    OnPropertyChanged( );
                    OnPropertyChanged( "EnableFastTimeConstantTimeseries" );
                }
            }
        }

        public RadarEnableFastTimeConstantTimeseriesEntity? EnableFastTimeConstantTimeseries
        {
            get
            {
                if(_enableFastTimeConstantTimeseriesReference != null)
                {
                    var result = (RadarEnableFastTimeConstantTimeseriesEntity?)_enableFastTimeConstantTimeseriesReference.Target;
                    if( result != null )
                    {
                        return result;
                    }
                }
                var data = GetData( );
                var context = CheckedContext;
                if( data.EnableFastTimeConstantTimeseries is Guid enableFastTimeConstantTimeseriesId )
                {
                    var entity = context.GetRadarEnableFastTimeConstantTimeseriesById( enableFastTimeConstantTimeseriesId );
                    if( entity != null )
                    {
                        _enableFastTimeConstantTimeseriesReference = new WeakReference( entity );
                    }
                    return entity;
                }
                return null;
            }
            set
            {
                EnableFastTimeConstantTimeseriesId = value != null? value.Id : null;
            }
        }

        public Guid? FastTimeConstantLevelTimeseriesId
        {
            get => GetData( ).FastTimeConstantLevelTimeseries;
            set
            {
                var data = GetData( );
                if( data.FastTimeConstantLevelTimeseries != value )
                {
                    OnPropertyChanging( );
                    OnPropertyChanging( "FastTimeConstantLevelTimeseries", false );
                    data = GetData( );
                    data.FastTimeConstantLevelTimeseries = value;
                    OnPropertyChanged( );
                    OnPropertyChanged( "FastTimeConstantLevelTimeseries" );
                }
            }
        }

        public RadarFastTimeConstantLevelTimeseriesEntity? FastTimeConstantLevelTimeseries
        {
            get
            {
                if(_fastTimeConstantLevelTimeseriesReference != null)
                {
                    var result = (RadarFastTimeConstantLevelTimeseriesEntity?)_fastTimeConstantLevelTimeseriesReference.Target;
                    if( result != null )
                    {
                        return result;
                    }
                }
                var data = GetData( );
                var context = CheckedContext;
                if( data.FastTimeConstantLevelTimeseries is Guid fastTimeConstantLevelTimeseriesId )
                {
                    var entity = context.GetRadarFastTimeConstantLevelTimeseriesById( fastTimeConstantLevelTimeseriesId );
                    if( entity != null )
                    {
                        _fastTimeConstantLevelTimeseriesReference = new WeakReference( entity );
                    }
                    return entity;
                }
                return null;
            }
            set
            {
                FastTimeConstantLevelTimeseriesId = value != null? value.Id : null;
            }
        }

        public Guid? FastTimeConstantModeTimeseriesId
        {
            get => GetData( ).FastTimeConstantModeTimeseries;
            set
            {
                var data = GetData( );
                if( data.FastTimeConstantModeTimeseries != value )
                {
                    OnPropertyChanging( );
                    OnPropertyChanging( "FastTimeConstantModeTimeseries", false );
                    data = GetData( );
                    data.FastTimeConstantModeTimeseries = value;
                    OnPropertyChanged( );
                    OnPropertyChanged( "FastTimeConstantModeTimeseries" );
                }
            }
        }

        public RadarFastTimeConstantModeTimeseriesEntity? FastTimeConstantModeTimeseries
        {
            get
            {
                if(_fastTimeConstantModeTimeseriesReference != null)
                {
                    var result = (RadarFastTimeConstantModeTimeseriesEntity?)_fastTimeConstantModeTimeseriesReference.Target;
                    if( result != null )
                    {
                        return result;
                    }
                }
                var data = GetData( );
                var context = CheckedContext;
                if( data.FastTimeConstantModeTimeseries is Guid fastTimeConstantModeTimeseriesId )
                {
                    var entity = context.GetRadarFastTimeConstantModeTimeseriesById( fastTimeConstantModeTimeseriesId );
                    if( entity != null )
                    {
                        _fastTimeConstantModeTimeseriesReference = new WeakReference( entity );
                    }
                    return entity;
                }
                return null;
            }
            set
            {
                FastTimeConstantModeTimeseriesId = value != null? value.Id : null;
            }
        }

        public Guid? LatitudeTimeseriesId
        {
            get => GetData( ).LatitudeTimeseries;
            set
            {
                var data = GetData( );
                if( data.LatitudeTimeseries != value )
                {
                    OnPropertyChanging( );
                    OnPropertyChanging( "LatitudeTimeseries", false );
                    data = GetData( );
                    data.LatitudeTimeseries = value;
                    OnPropertyChanged( );
                    OnPropertyChanged( "LatitudeTimeseries" );
                }
            }
        }

        public RadarLatitudeTimeseriesEntity? LatitudeTimeseries
        {
            get
            {
                if(_latitudeTimeseriesReference != null)
                {
                    var result = (RadarLatitudeTimeseriesEntity?)_latitudeTimeseriesReference.Target;
                    if( result != null )
                    {
                        return result;
                    }
                }
                var data = GetData( );
                var context = CheckedContext;
                if( data.LatitudeTimeseries is Guid latitudeTimeseriesId )
                {
                    var entity = context.GetRadarLatitudeTimeseriesById( latitudeTimeseriesId );
                    if( entity != null )
                    {
                        _latitudeTimeseriesReference = new WeakReference( entity );
                    }
                    return entity;
                }
                return null;
            }
            set
            {
                LatitudeTimeseriesId = value != null? value.Id : null;
            }
        }

        public Guid? LongitudeTimeseriesId
        {
            get => GetData( ).LongitudeTimeseries;
            set
            {
                var data = GetData( );
                if( data.LongitudeTimeseries != value )
                {
                    OnPropertyChanging( );
                    OnPropertyChanging( "LongitudeTimeseries", false );
                    data = GetData( );
                    data.LongitudeTimeseries = value;
                    OnPropertyChanged( );
                    OnPropertyChanged( "LongitudeTimeseries" );
                }
            }
        }

        public RadarLongitudeTimeseriesEntity? LongitudeTimeseries
        {
            get
            {
                if(_longitudeTimeseriesReference != null)
                {
                    var result = (RadarLongitudeTimeseriesEntity?)_longitudeTimeseriesReference.Target;
                    if( result != null )
                    {
                        return result;
                    }
                }
                var data = GetData( );
                var context = CheckedContext;
                if( data.LongitudeTimeseries is Guid longitudeTimeseriesId )
                {
                    var entity = context.GetRadarLongitudeTimeseriesById( longitudeTimeseriesId );
                    if( entity != null )
                    {
                        _longitudeTimeseriesReference = new WeakReference( entity );
                    }
                    return entity;
                }
                return null;
            }
            set
            {
                LongitudeTimeseriesId = value != null? value.Id : null;
            }
        }

        public Guid? RadomeId
        {
            get => GetData( ).Radome;
            set
            {
                var data = GetData( );
                if( data.Radome != value )
                {
                    OnPropertyChanging( );
                    OnPropertyChanging( "Radome", false );
                    data = GetData( );
                    data.Radome = value;
                    OnPropertyChanged( );
                    OnPropertyChanged( "Radome" );
                }
            }
        }

        public RadomeDeviceEntity? Radome
        {
            get
            {
                if(_radomeReference != null)
                {
                    var result = (RadomeDeviceEntity?)_radomeReference.Target;
                    if( result != null )
                    {
                        return result;
                    }
                }
                var data = GetData( );
                var context = CheckedContext;
                if( data.Radome is Guid radomeId )
                {
                    var entity = context.GetRadomeDeviceById( radomeId );
                    if( entity != null )
                    {
                        _radomeReference = new WeakReference( entity );
                    }
                    return entity;
                }
                return null;
            }
            set
            {
                RadomeId = value != null? value.Id : null;
            }
        }

        public Guid? GNSSDeviceId
        {
            get => GetData( ).GNSSDevice;
            set
            {
                var data = GetData( );
                if( data.GNSSDevice != value )
                {
                    OnPropertyChanging( );
                    OnPropertyChanging( "GNSSDevice", false );
                    data = GetData( );
                    data.GNSSDevice = value;
                    OnPropertyChanged( );
                    OnPropertyChanged( "GNSSDevice" );
                }
            }
        }

        public GNSSDeviceEntity? GNSSDevice
        {
            get
            {
                if(_gNSSDeviceReference != null)
                {
                    var result = (GNSSDeviceEntity?)_gNSSDeviceReference.Target;
                    if( result != null )
                    {
                        return result;
                    }
                }
                var data = GetData( );
                var context = CheckedContext;
                if( data.GNSSDevice is Guid gNSSDeviceId )
                {
                    var entity = context.GetGNSSDeviceById( gNSSDeviceId );
                    if( entity != null )
                    {
                        _gNSSDeviceReference = new WeakReference( entity );
                    }
                    return entity;
                }
                return null;
            }
            set
            {
                GNSSDeviceId = value != null? value.Id : null;
            }
        }

    }

    public class WeatherStationDeviceEntity : DeviceEntity
    {
        WeakReference? _barometricPressureTimeseriesReference = null;
        WeakReference? _airTemperatureTimeseriesReference = null;
        WeakReference? _waterTemperatureTimeseriesReference = null;
        WeakReference? _relativeHumidityTimeseriesReference = null;
        WeakReference? _absoluteHumidityTimeseriesReference = null;
        WeakReference? _dewPointTimeseriesReference = null;
        WeakReference? _windDirectionTimeseriesReference = null;
        WeakReference? _windSpeedTimeseriesReference = null;
        WeakReference? _gyroReference = null;
        public WeatherStationDeviceEntity( [DisallowNull] EntityContext entityContext, [DisallowNull] WeatherStationDeviceObject data )
            : base( entityContext, data )
        {
        }

        private WeatherStationDeviceObject GetData( ) 
        {
            return (WeatherStationDeviceObject)base._GetData( );
        }

        public Guid? BarometricPressureTimeseriesId
        {
            get => GetData( ).BarometricPressureTimeseries;
            set
            {
                var data = GetData( );
                if( data.BarometricPressureTimeseries != value )
                {
                    OnPropertyChanging( );
                    OnPropertyChanging( "BarometricPressureTimeseries", false );
                    data = GetData( );
                    data.BarometricPressureTimeseries = value;
                    OnPropertyChanged( );
                    OnPropertyChanged( "BarometricPressureTimeseries" );
                }
            }
        }

        public WeatherStationBarometricPressureTimeseriesEntity? BarometricPressureTimeseries
        {
            get
            {
                if(_barometricPressureTimeseriesReference != null)
                {
                    var result = (WeatherStationBarometricPressureTimeseriesEntity?)_barometricPressureTimeseriesReference.Target;
                    if( result != null )
                    {
                        return result;
                    }
                }
                var data = GetData( );
                var context = CheckedContext;
                if( data.BarometricPressureTimeseries is Guid barometricPressureTimeseriesId )
                {
                    var entity = context.GetWeatherStationBarometricPressureTimeseriesById( barometricPressureTimeseriesId );
                    if( entity != null )
                    {
                        _barometricPressureTimeseriesReference = new WeakReference( entity );
                    }
                    return entity;
                }
                return null;
            }
            set
            {
                BarometricPressureTimeseriesId = value != null? value.Id : null;
            }
        }

        public Guid? AirTemperatureTimeseriesId
        {
            get => GetData( ).AirTemperatureTimeseries;
            set
            {
                var data = GetData( );
                if( data.AirTemperatureTimeseries != value )
                {
                    OnPropertyChanging( );
                    OnPropertyChanging( "AirTemperatureTimeseries", false );
                    data = GetData( );
                    data.AirTemperatureTimeseries = value;
                    OnPropertyChanged( );
                    OnPropertyChanged( "AirTemperatureTimeseries" );
                }
            }
        }

        public WeatherStationAirTemperatureTimeseriesEntity? AirTemperatureTimeseries
        {
            get
            {
                if(_airTemperatureTimeseriesReference != null)
                {
                    var result = (WeatherStationAirTemperatureTimeseriesEntity?)_airTemperatureTimeseriesReference.Target;
                    if( result != null )
                    {
                        return result;
                    }
                }
                var data = GetData( );
                var context = CheckedContext;
                if( data.AirTemperatureTimeseries is Guid airTemperatureTimeseriesId )
                {
                    var entity = context.GetWeatherStationAirTemperatureTimeseriesById( airTemperatureTimeseriesId );
                    if( entity != null )
                    {
                        _airTemperatureTimeseriesReference = new WeakReference( entity );
                    }
                    return entity;
                }
                return null;
            }
            set
            {
                AirTemperatureTimeseriesId = value != null? value.Id : null;
            }
        }

        public Guid? WaterTemperatureTimeseriesId
        {
            get => GetData( ).WaterTemperatureTimeseries;
            set
            {
                var data = GetData( );
                if( data.WaterTemperatureTimeseries != value )
                {
                    OnPropertyChanging( );
                    OnPropertyChanging( "WaterTemperatureTimeseries", false );
                    data = GetData( );
                    data.WaterTemperatureTimeseries = value;
                    OnPropertyChanged( );
                    OnPropertyChanged( "WaterTemperatureTimeseries" );
                }
            }
        }

        public WeatherStationWaterTemperatureTimeseriesEntity? WaterTemperatureTimeseries
        {
            get
            {
                if(_waterTemperatureTimeseriesReference != null)
                {
                    var result = (WeatherStationWaterTemperatureTimeseriesEntity?)_waterTemperatureTimeseriesReference.Target;
                    if( result != null )
                    {
                        return result;
                    }
                }
                var data = GetData( );
                var context = CheckedContext;
                if( data.WaterTemperatureTimeseries is Guid waterTemperatureTimeseriesId )
                {
                    var entity = context.GetWeatherStationWaterTemperatureTimeseriesById( waterTemperatureTimeseriesId );
                    if( entity != null )
                    {
                        _waterTemperatureTimeseriesReference = new WeakReference( entity );
                    }
                    return entity;
                }
                return null;
            }
            set
            {
                WaterTemperatureTimeseriesId = value != null? value.Id : null;
            }
        }

        public Guid? RelativeHumidityTimeseriesId
        {
            get => GetData( ).RelativeHumidityTimeseries;
            set
            {
                var data = GetData( );
                if( data.RelativeHumidityTimeseries != value )
                {
                    OnPropertyChanging( );
                    OnPropertyChanging( "RelativeHumidityTimeseries", false );
                    data = GetData( );
                    data.RelativeHumidityTimeseries = value;
                    OnPropertyChanged( );
                    OnPropertyChanged( "RelativeHumidityTimeseries" );
                }
            }
        }

        public WeatherStationRelativeHumidityTimeseriesEntity? RelativeHumidityTimeseries
        {
            get
            {
                if(_relativeHumidityTimeseriesReference != null)
                {
                    var result = (WeatherStationRelativeHumidityTimeseriesEntity?)_relativeHumidityTimeseriesReference.Target;
                    if( result != null )
                    {
                        return result;
                    }
                }
                var data = GetData( );
                var context = CheckedContext;
                if( data.RelativeHumidityTimeseries is Guid relativeHumidityTimeseriesId )
                {
                    var entity = context.GetWeatherStationRelativeHumidityTimeseriesById( relativeHumidityTimeseriesId );
                    if( entity != null )
                    {
                        _relativeHumidityTimeseriesReference = new WeakReference( entity );
                    }
                    return entity;
                }
                return null;
            }
            set
            {
                RelativeHumidityTimeseriesId = value != null? value.Id : null;
            }
        }

        public Guid? AbsoluteHumidityTimeseriesId
        {
            get => GetData( ).AbsoluteHumidityTimeseries;
            set
            {
                var data = GetData( );
                if( data.AbsoluteHumidityTimeseries != value )
                {
                    OnPropertyChanging( );
                    OnPropertyChanging( "AbsoluteHumidityTimeseries", false );
                    data = GetData( );
                    data.AbsoluteHumidityTimeseries = value;
                    OnPropertyChanged( );
                    OnPropertyChanged( "AbsoluteHumidityTimeseries" );
                }
            }
        }

        public WeatherStationAbsoluteHumidityTimeseriesEntity? AbsoluteHumidityTimeseries
        {
            get
            {
                if(_absoluteHumidityTimeseriesReference != null)
                {
                    var result = (WeatherStationAbsoluteHumidityTimeseriesEntity?)_absoluteHumidityTimeseriesReference.Target;
                    if( result != null )
                    {
                        return result;
                    }
                }
                var data = GetData( );
                var context = CheckedContext;
                if( data.AbsoluteHumidityTimeseries is Guid absoluteHumidityTimeseriesId )
                {
                    var entity = context.GetWeatherStationAbsoluteHumidityTimeseriesById( absoluteHumidityTimeseriesId );
                    if( entity != null )
                    {
                        _absoluteHumidityTimeseriesReference = new WeakReference( entity );
                    }
                    return entity;
                }
                return null;
            }
            set
            {
                AbsoluteHumidityTimeseriesId = value != null? value.Id : null;
            }
        }

        public Guid? DewPointTimeseriesId
        {
            get => GetData( ).DewPointTimeseries;
            set
            {
                var data = GetData( );
                if( data.DewPointTimeseries != value )
                {
                    OnPropertyChanging( );
                    OnPropertyChanging( "DewPointTimeseries", false );
                    data = GetData( );
                    data.DewPointTimeseries = value;
                    OnPropertyChanged( );
                    OnPropertyChanged( "DewPointTimeseries" );
                }
            }
        }

        public WeatherStationDewPointTimeseriesEntity? DewPointTimeseries
        {
            get
            {
                if(_dewPointTimeseriesReference != null)
                {
                    var result = (WeatherStationDewPointTimeseriesEntity?)_dewPointTimeseriesReference.Target;
                    if( result != null )
                    {
                        return result;
                    }
                }
                var data = GetData( );
                var context = CheckedContext;
                if( data.DewPointTimeseries is Guid dewPointTimeseriesId )
                {
                    var entity = context.GetWeatherStationDewPointTimeseriesById( dewPointTimeseriesId );
                    if( entity != null )
                    {
                        _dewPointTimeseriesReference = new WeakReference( entity );
                    }
                    return entity;
                }
                return null;
            }
            set
            {
                DewPointTimeseriesId = value != null? value.Id : null;
            }
        }

        public Guid? WindDirectionTimeseriesId
        {
            get => GetData( ).WindDirectionTimeseries;
            set
            {
                var data = GetData( );
                if( data.WindDirectionTimeseries != value )
                {
                    OnPropertyChanging( );
                    OnPropertyChanging( "WindDirectionTimeseries", false );
                    data = GetData( );
                    data.WindDirectionTimeseries = value;
                    OnPropertyChanged( );
                    OnPropertyChanged( "WindDirectionTimeseries" );
                }
            }
        }

        public WeatherStationWindDirectionTimeseriesEntity? WindDirectionTimeseries
        {
            get
            {
                if(_windDirectionTimeseriesReference != null)
                {
                    var result = (WeatherStationWindDirectionTimeseriesEntity?)_windDirectionTimeseriesReference.Target;
                    if( result != null )
                    {
                        return result;
                    }
                }
                var data = GetData( );
                var context = CheckedContext;
                if( data.WindDirectionTimeseries is Guid windDirectionTimeseriesId )
                {
                    var entity = context.GetWeatherStationWindDirectionTimeseriesById( windDirectionTimeseriesId );
                    if( entity != null )
                    {
                        _windDirectionTimeseriesReference = new WeakReference( entity );
                    }
                    return entity;
                }
                return null;
            }
            set
            {
                WindDirectionTimeseriesId = value != null? value.Id : null;
            }
        }

        public Guid? WindSpeedTimeseriesId
        {
            get => GetData( ).WindSpeedTimeseries;
            set
            {
                var data = GetData( );
                if( data.WindSpeedTimeseries != value )
                {
                    OnPropertyChanging( );
                    OnPropertyChanging( "WindSpeedTimeseries", false );
                    data = GetData( );
                    data.WindSpeedTimeseries = value;
                    OnPropertyChanged( );
                    OnPropertyChanged( "WindSpeedTimeseries" );
                }
            }
        }

        public WeatherStationWindSpeedTimeseriesEntity? WindSpeedTimeseries
        {
            get
            {
                if(_windSpeedTimeseriesReference != null)
                {
                    var result = (WeatherStationWindSpeedTimeseriesEntity?)_windSpeedTimeseriesReference.Target;
                    if( result != null )
                    {
                        return result;
                    }
                }
                var data = GetData( );
                var context = CheckedContext;
                if( data.WindSpeedTimeseries is Guid windSpeedTimeseriesId )
                {
                    var entity = context.GetWeatherStationWindSpeedTimeseriesById( windSpeedTimeseriesId );
                    if( entity != null )
                    {
                        _windSpeedTimeseriesReference = new WeakReference( entity );
                    }
                    return entity;
                }
                return null;
            }
            set
            {
                WindSpeedTimeseriesId = value != null? value.Id : null;
            }
        }

        public Guid? GyroId
        {
            get => GetData( ).Gyro;
            set
            {
                var data = GetData( );
                if( data.Gyro != value )
                {
                    OnPropertyChanging( );
                    OnPropertyChanging( "Gyro", false );
                    data = GetData( );
                    data.Gyro = value;
                    OnPropertyChanged( );
                    OnPropertyChanged( "Gyro" );
                }
            }
        }

        public GyroDeviceEntity? Gyro
        {
            get
            {
                if(_gyroReference != null)
                {
                    var result = (GyroDeviceEntity?)_gyroReference.Target;
                    if( result != null )
                    {
                        return result;
                    }
                }
                var data = GetData( );
                var context = CheckedContext;
                if( data.Gyro is Guid gyroId )
                {
                    var entity = context.GetGyroDeviceById( gyroId );
                    if( entity != null )
                    {
                        _gyroReference = new WeakReference( entity );
                    }
                    return entity;
                }
                return null;
            }
            set
            {
                GyroId = value != null? value.Id : null;
            }
        }

    }

    public class FacilityEntity : ItemEntity
    {
        WeakReference? _typeReference = null;
        public FacilityEntity( [DisallowNull] EntityContext entityContext, [DisallowNull] FacilityObject data )
            : base( entityContext, data )
        {
        }

        private FacilityObject GetData( ) 
        {
            return (FacilityObject)base._GetData( );
        }

        public string Name
        {
            get => GetData( ).Name;
            set
            {
                var data = GetData( );
                if( data.Name != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Name = value;
                    OnPropertyChanged( );
                }
            }
        }

        public Guid? TypeId
        {
            get => GetData( ).Type;
            set
            {
                var data = GetData( );
                if( data.Type != value )
                {
                    OnPropertyChanging( );
                    OnPropertyChanging( "Type", false );
                    data = GetData( );
                    data.Type = value;
                    OnPropertyChanged( );
                    OnPropertyChanged( "Type" );
                }
            }
        }

        public FacilityTypeEntity? Type
        {
            get
            {
                if(_typeReference != null)
                {
                    var result = (FacilityTypeEntity?)_typeReference.Target;
                    if( result != null )
                    {
                        return result;
                    }
                }
                var data = GetData( );
                var context = CheckedContext;
                if( data.Type is Guid typeId )
                {
                    var entity = context.GetFacilityTypeById( typeId );
                    if( entity != null )
                    {
                        _typeReference = new WeakReference( entity );
                    }
                    return entity;
                }
                return null;
            }
            set
            {
                TypeId = value != null? value.Id : null;
            }
        }

        public double Longitude
        {
            get => GetData( ).Longitude;
            set
            {
                var data = GetData( );
                if( data.Longitude != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Longitude = value;
                    OnPropertyChanged( );
                }
            }
        }

        public double Latitude
        {
            get => GetData( ).Latitude;
            set
            {
                var data = GetData( );
                if( data.Latitude != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Latitude = value;
                    OnPropertyChanged( );
                }
            }
        }

        public double Altitude
        {
            get => GetData( ).Altitude;
            set
            {
                var data = GetData( );
                if( data.Altitude != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Altitude = value;
                    OnPropertyChanged( );
                }
            }
        }

    }

    public abstract class TrackableItemEntity : ItemEntity
    {
        protected TrackableItemEntity( [DisallowNull] EntityContext entityContext, [DisallowNull] TrackableItemObject data )
            : base( entityContext, data )
        {
        }

        private TrackableItemObject GetData( ) 
        {
            return (TrackableItemObject)base._GetData( );
        }

    }

    public class AircraftEntity : TrackableItemEntity
    {
        WeakReference? _typeReference = null;
        public AircraftEntity( [DisallowNull] EntityContext entityContext, [DisallowNull] AircraftObject data )
            : base( entityContext, data )
        {
        }

        private AircraftObject GetData( ) 
        {
            return (AircraftObject)base._GetData( );
        }

        public string Name
        {
            get => GetData( ).Name;
            set
            {
                var data = GetData( );
                if( data.Name != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Name = value;
                    OnPropertyChanged( );
                }
            }
        }

        public Guid? TypeId
        {
            get => GetData( ).Type;
            set
            {
                var data = GetData( );
                if( data.Type != value )
                {
                    OnPropertyChanging( );
                    OnPropertyChanging( "Type", false );
                    data = GetData( );
                    data.Type = value;
                    OnPropertyChanged( );
                    OnPropertyChanged( "Type" );
                }
            }
        }

        public AircraftTypeEntity? Type
        {
            get
            {
                if(_typeReference != null)
                {
                    var result = (AircraftTypeEntity?)_typeReference.Target;
                    if( result != null )
                    {
                        return result;
                    }
                }
                var data = GetData( );
                var context = CheckedContext;
                if( data.Type is Guid typeId )
                {
                    var entity = context.GetAircraftTypeById( typeId );
                    if( entity != null )
                    {
                        _typeReference = new WeakReference( entity );
                    }
                    return entity;
                }
                return null;
            }
            set
            {
                TypeId = value != null? value.Id : null;
            }
        }

    }

    public class AisAidToNavigationEntity : TrackableItemEntity
    {
        WeakReference? _mMSIReference = null;
        WeakReference? _positionReference = null;
        WeakReference? _offPositionTimeseriesReference = null;
        public AisAidToNavigationEntity( [DisallowNull] EntityContext entityContext, [DisallowNull] AisAidToNavigationObject data )
            : base( entityContext, data )
        {
        }

        private AisAidToNavigationObject GetData( ) 
        {
            return (AisAidToNavigationObject)base._GetData( );
        }

        public string Name
        {
            get => GetData( ).Name;
            set
            {
                var data = GetData( );
                if( data.Name != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Name = value;
                    OnPropertyChanged( );
                }
            }
        }

        public Guid? MMSIId
        {
            get => GetData( ).MMSI;
            set
            {
                var data = GetData( );
                if( data.MMSI != value )
                {
                    OnPropertyChanging( );
                    OnPropertyChanging( "MMSI", false );
                    data = GetData( );
                    data.MMSI = value;
                    OnPropertyChanged( );
                    OnPropertyChanged( "MMSI" );
                }
            }
        }

        public MaritimeMobileServiceIdentityEntity? MMSI
        {
            get
            {
                if(_mMSIReference != null)
                {
                    var result = (MaritimeMobileServiceIdentityEntity?)_mMSIReference.Target;
                    if( result != null )
                    {
                        return result;
                    }
                }
                var data = GetData( );
                var context = CheckedContext;
                if( data.MMSI is Guid mMSIId )
                {
                    var entity = context.GetMaritimeMobileServiceIdentityById( mMSIId );
                    if( entity != null )
                    {
                        _mMSIReference = new WeakReference( entity );
                    }
                    return entity;
                }
                return null;
            }
            set
            {
                MMSIId = value != null? value.Id : null;
            }
        }

        public Types.NavigationalAidType NavigationalAidType
        {
            get => GetData( ).NavigationalAidType;
            set
            {
                var data = GetData( );
                if( data.NavigationalAidType != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.NavigationalAidType = value;
                    OnPropertyChanged( );
                }
            }
        }

        public Guid? PositionId
        {
            get => GetData( ).Position;
            set
            {
                var data = GetData( );
                if( data.Position != value )
                {
                    OnPropertyChanging( );
                    OnPropertyChanging( "Position", false );
                    data = GetData( );
                    data.Position = value;
                    OnPropertyChanged( );
                    OnPropertyChanged( "Position" );
                }
            }
        }

        public AisAidToNavigationPositionTimeseriesEntity? Position
        {
            get
            {
                if(_positionReference != null)
                {
                    var result = (AisAidToNavigationPositionTimeseriesEntity?)_positionReference.Target;
                    if( result != null )
                    {
                        return result;
                    }
                }
                var data = GetData( );
                var context = CheckedContext;
                if( data.Position is Guid positionId )
                {
                    var entity = context.GetAisAidToNavigationPositionTimeseriesById( positionId );
                    if( entity != null )
                    {
                        _positionReference = new WeakReference( entity );
                    }
                    return entity;
                }
                return null;
            }
            set
            {
                PositionId = value != null? value.Id : null;
            }
        }

        public bool IsVirtual
        {
            get => GetData( ).IsVirtual;
            set
            {
                var data = GetData( );
                if( data.IsVirtual != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.IsVirtual = value;
                    OnPropertyChanged( );
                }
            }
        }

        public int ToBow
        {
            get => GetData( ).ToBow;
            set
            {
                var data = GetData( );
                if( data.ToBow != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.ToBow = value;
                    OnPropertyChanged( );
                }
            }
        }

        public int ToStern
        {
            get => GetData( ).ToStern;
            set
            {
                var data = GetData( );
                if( data.ToStern != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.ToStern = value;
                    OnPropertyChanged( );
                }
            }
        }

        public int ToPort
        {
            get => GetData( ).ToPort;
            set
            {
                var data = GetData( );
                if( data.ToPort != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.ToPort = value;
                    OnPropertyChanged( );
                }
            }
        }

        public int ToStarboard
        {
            get => GetData( ).ToStarboard;
            set
            {
                var data = GetData( );
                if( data.ToStarboard != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.ToStarboard = value;
                    OnPropertyChanged( );
                }
            }
        }

        public Guid? OffPositionTimeseriesId
        {
            get => GetData( ).OffPositionTimeseries;
            set
            {
                var data = GetData( );
                if( data.OffPositionTimeseries != value )
                {
                    OnPropertyChanging( );
                    OnPropertyChanging( "OffPositionTimeseries", false );
                    data = GetData( );
                    data.OffPositionTimeseries = value;
                    OnPropertyChanged( );
                    OnPropertyChanged( "OffPositionTimeseries" );
                }
            }
        }

        public AisAidToNavigationOffPositionTimeseriesEntity? OffPositionTimeseries
        {
            get
            {
                if(_offPositionTimeseriesReference != null)
                {
                    var result = (AisAidToNavigationOffPositionTimeseriesEntity?)_offPositionTimeseriesReference.Target;
                    if( result != null )
                    {
                        return result;
                    }
                }
                var data = GetData( );
                var context = CheckedContext;
                if( data.OffPositionTimeseries is Guid offPositionTimeseriesId )
                {
                    var entity = context.GetAisAidToNavigationOffPositionTimeseriesById( offPositionTimeseriesId );
                    if( entity != null )
                    {
                        _offPositionTimeseriesReference = new WeakReference( entity );
                    }
                    return entity;
                }
                return null;
            }
            set
            {
                OffPositionTimeseriesId = value != null? value.Id : null;
            }
        }

    }

    public class VehicleEntity : TrackableItemEntity
    {
        WeakReference? _typeReference = null;
        public VehicleEntity( [DisallowNull] EntityContext entityContext, [DisallowNull] VehicleObject data )
            : base( entityContext, data )
        {
        }

        private VehicleObject GetData( ) 
        {
            return (VehicleObject)base._GetData( );
        }

        public string Name
        {
            get => GetData( ).Name;
            set
            {
                var data = GetData( );
                if( data.Name != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Name = value;
                    OnPropertyChanged( );
                }
            }
        }

        public Guid? TypeId
        {
            get => GetData( ).Type;
            set
            {
                var data = GetData( );
                if( data.Type != value )
                {
                    OnPropertyChanging( );
                    OnPropertyChanging( "Type", false );
                    data = GetData( );
                    data.Type = value;
                    OnPropertyChanged( );
                    OnPropertyChanged( "Type" );
                }
            }
        }

        public VehicleTypeEntity? Type
        {
            get
            {
                if(_typeReference != null)
                {
                    var result = (VehicleTypeEntity?)_typeReference.Target;
                    if( result != null )
                    {
                        return result;
                    }
                }
                var data = GetData( );
                var context = CheckedContext;
                if( data.Type is Guid typeId )
                {
                    var entity = context.GetVehicleTypeById( typeId );
                    if( entity != null )
                    {
                        _typeReference = new WeakReference( entity );
                    }
                    return entity;
                }
                return null;
            }
            set
            {
                TypeId = value != null? value.Id : null;
            }
        }

    }

    public class VesselEntity : TrackableItemEntity
    {
        WeakReference? _typeReference = null;
        WeakReference? _draughtTimeseriesReference = null;
        WeakReference? _personsOnBoardTimeseriesReference = null;
        public VesselEntity( [DisallowNull] EntityContext entityContext, [DisallowNull] VesselObject data )
            : base( entityContext, data )
        {
        }

        private VesselObject GetData( ) 
        {
            return (VesselObject)base._GetData( );
        }

        public string Name
        {
            get => GetData( ).Name;
            set
            {
                var data = GetData( );
                if( data.Name != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Name = value;
                    OnPropertyChanged( );
                }
            }
        }

        public Guid? TypeId
        {
            get => GetData( ).Type;
            set
            {
                var data = GetData( );
                if( data.Type != value )
                {
                    OnPropertyChanging( );
                    OnPropertyChanging( "Type", false );
                    data = GetData( );
                    data.Type = value;
                    OnPropertyChanged( );
                    OnPropertyChanged( "Type" );
                }
            }
        }

        public VesselTypeEntity? Type
        {
            get
            {
                if(_typeReference != null)
                {
                    var result = (VesselTypeEntity?)_typeReference.Target;
                    if( result != null )
                    {
                        return result;
                    }
                }
                var data = GetData( );
                var context = CheckedContext;
                if( data.Type is Guid typeId )
                {
                    var entity = context.GetVesselTypeById( typeId );
                    if( entity != null )
                    {
                        _typeReference = new WeakReference( entity );
                    }
                    return entity;
                }
                return null;
            }
            set
            {
                TypeId = value != null? value.Id : null;
            }
        }

        public int ToBow
        {
            get => GetData( ).ToBow;
            set
            {
                var data = GetData( );
                if( data.ToBow != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.ToBow = value;
                    OnPropertyChanged( );
                }
            }
        }

        public int ToStern
        {
            get => GetData( ).ToStern;
            set
            {
                var data = GetData( );
                if( data.ToStern != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.ToStern = value;
                    OnPropertyChanged( );
                }
            }
        }

        public int ToPort
        {
            get => GetData( ).ToPort;
            set
            {
                var data = GetData( );
                if( data.ToPort != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.ToPort = value;
                    OnPropertyChanged( );
                }
            }
        }

        public int ToStarboard
        {
            get => GetData( ).ToStarboard;
            set
            {
                var data = GetData( );
                if( data.ToStarboard != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.ToStarboard = value;
                    OnPropertyChanged( );
                }
            }
        }

        public Guid? DraughtTimeseriesId
        {
            get => GetData( ).DraughtTimeseries;
            set
            {
                var data = GetData( );
                if( data.DraughtTimeseries != value )
                {
                    OnPropertyChanging( );
                    OnPropertyChanging( "DraughtTimeseries", false );
                    data = GetData( );
                    data.DraughtTimeseries = value;
                    OnPropertyChanged( );
                    OnPropertyChanged( "DraughtTimeseries" );
                }
            }
        }

        public VesselDraughtTimeseriesEntity? DraughtTimeseries
        {
            get
            {
                if(_draughtTimeseriesReference != null)
                {
                    var result = (VesselDraughtTimeseriesEntity?)_draughtTimeseriesReference.Target;
                    if( result != null )
                    {
                        return result;
                    }
                }
                var data = GetData( );
                var context = CheckedContext;
                if( data.DraughtTimeseries is Guid draughtTimeseriesId )
                {
                    var entity = context.GetVesselDraughtTimeseriesById( draughtTimeseriesId );
                    if( entity != null )
                    {
                        _draughtTimeseriesReference = new WeakReference( entity );
                    }
                    return entity;
                }
                return null;
            }
            set
            {
                DraughtTimeseriesId = value != null? value.Id : null;
            }
        }

        public Guid? PersonsOnBoardTimeseriesId
        {
            get => GetData( ).PersonsOnBoardTimeseries;
            set
            {
                var data = GetData( );
                if( data.PersonsOnBoardTimeseries != value )
                {
                    OnPropertyChanging( );
                    OnPropertyChanging( "PersonsOnBoardTimeseries", false );
                    data = GetData( );
                    data.PersonsOnBoardTimeseries = value;
                    OnPropertyChanged( );
                    OnPropertyChanged( "PersonsOnBoardTimeseries" );
                }
            }
        }

        public VesselPersonsOnBoardTimeseriesEntity? PersonsOnBoardTimeseries
        {
            get
            {
                if(_personsOnBoardTimeseriesReference != null)
                {
                    var result = (VesselPersonsOnBoardTimeseriesEntity?)_personsOnBoardTimeseriesReference.Target;
                    if( result != null )
                    {
                        return result;
                    }
                }
                var data = GetData( );
                var context = CheckedContext;
                if( data.PersonsOnBoardTimeseries is Guid personsOnBoardTimeseriesId )
                {
                    var entity = context.GetVesselPersonsOnBoardTimeseriesById( personsOnBoardTimeseriesId );
                    if( entity != null )
                    {
                        _personsOnBoardTimeseriesReference = new WeakReference( entity );
                    }
                    return entity;
                }
                return null;
            }
            set
            {
                PersonsOnBoardTimeseriesId = value != null? value.Id : null;
            }
        }

    }

    public class ItemIdentityLinkEntity : BaseEntity<Kind>
    {
        WeakReference? _itemReference = null;
        WeakReference? _identityReference = null;
        public ItemIdentityLinkEntity( [DisallowNull] EntityContext entityContext, [DisallowNull] ItemIdentityLinkObject data )
            : base( entityContext, data )
        {
        }

        public EntityContext? Context => (EntityContext?)_Context;

        protected EntityContext CheckedContext
        {
            get
            {
                var context = Context;
                if ( context is null )
                {
                    throw new InvalidOperationException( "Context is null" );
                }
                return context;
            }
        }

        private ItemIdentityLinkObject GetData( ) 
        {
            return (ItemIdentityLinkObject)base._GetData( );
        }

        public Guid ItemId
        {
            get => GetData( ).Item;
            set
            {
                var data = GetData( );
                if( data.Item != value )
                {
                    OnPropertyChanging( );
                    OnPropertyChanging( "Item", false );
                    data = GetData( );
                    data.Item = value;
                    OnPropertyChanged( );
                    OnPropertyChanged( "Item" );
                }
            }
        }

        public ItemEntity Item
        {
            get
            {
                if(_itemReference != null)
                {
                    var result = (ItemEntity?)_itemReference.Target;
                    if( result != null )
                    {
                        return result;
                    }
                }
                var data = GetData( );
                var context = CheckedContext;
                var entity = context.GetItemById( data.Item );
                if( entity != null )
                {
                    _itemReference = new WeakReference( entity );
                }
                else
                {
                    var message = $"Cannot find the ItemEntity object identified by {data.Item}";
                    throw new Exception( message );
                }
                return entity;
            }
            set
            {
                ItemId = value != null? value.Id : Guid.Empty;
            }
        }

        public Guid IdentityId
        {
            get => GetData( ).Identity;
            set
            {
                var data = GetData( );
                if( data.Identity != value )
                {
                    OnPropertyChanging( );
                    OnPropertyChanging( "Identity", false );
                    data = GetData( );
                    data.Identity = value;
                    OnPropertyChanged( );
                    OnPropertyChanged( "Identity" );
                }
            }
        }

        public IdentityEntity Identity
        {
            get
            {
                if(_identityReference != null)
                {
                    var result = (IdentityEntity?)_identityReference.Target;
                    if( result != null )
                    {
                        return result;
                    }
                }
                var data = GetData( );
                var context = CheckedContext;
                var entity = context.GetIdentityById( data.Identity );
                if( entity != null )
                {
                    _identityReference = new WeakReference( entity );
                }
                else
                {
                    var message = $"Cannot find the IdentityEntity object identified by {data.Identity}";
                    throw new Exception( message );
                }
                return entity;
            }
            set
            {
                IdentityId = value != null? value.Id : Guid.Empty;
            }
        }

        public DateTime Start
        {
            get => GetData( ).Start;
            set
            {
                var data = GetData( );
                if( data.Start != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Start = value;
                    OnPropertyChanged( );
                }
            }
        }

        public DateTime? End
        {
            get => GetData( ).End;
            set
            {
                var data = GetData( );
                if( data.End != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.End = value;
                    OnPropertyChanged( );
                }
            }
        }

    }

    public class ItemParentChildLinkEntity : BaseEntity<Kind>
    {
        WeakReference? _parentReference = null;
        WeakReference? _childReference = null;
        public ItemParentChildLinkEntity( [DisallowNull] EntityContext entityContext, [DisallowNull] ItemParentChildLinkObject data )
            : base( entityContext, data )
        {
        }

        public EntityContext? Context => (EntityContext?)_Context;

        protected EntityContext CheckedContext
        {
            get
            {
                var context = Context;
                if ( context is null )
                {
                    throw new InvalidOperationException( "Context is null" );
                }
                return context;
            }
        }

        private ItemParentChildLinkObject GetData( ) 
        {
            return (ItemParentChildLinkObject)base._GetData( );
        }

        public Guid ParentId
        {
            get => GetData( ).Parent;
            set
            {
                var data = GetData( );
                if( data.Parent != value )
                {
                    OnPropertyChanging( );
                    OnPropertyChanging( "Parent", false );
                    data = GetData( );
                    data.Parent = value;
                    OnPropertyChanged( );
                    OnPropertyChanged( "Parent" );
                }
            }
        }

        public ItemEntity Parent
        {
            get
            {
                if(_parentReference != null)
                {
                    var result = (ItemEntity?)_parentReference.Target;
                    if( result != null )
                    {
                        return result;
                    }
                }
                var data = GetData( );
                var context = CheckedContext;
                var entity = context.GetItemById( data.Parent );
                if( entity != null )
                {
                    _parentReference = new WeakReference( entity );
                }
                else
                {
                    var message = $"Cannot find the ItemEntity object identified by {data.Parent}";
                    throw new Exception( message );
                }
                return entity;
            }
            set
            {
                ParentId = value != null? value.Id : Guid.Empty;
            }
        }

        public Guid ChildId
        {
            get => GetData( ).Child;
            set
            {
                var data = GetData( );
                if( data.Child != value )
                {
                    OnPropertyChanging( );
                    OnPropertyChanging( "Child", false );
                    data = GetData( );
                    data.Child = value;
                    OnPropertyChanged( );
                    OnPropertyChanged( "Child" );
                }
            }
        }

        public ItemEntity Child
        {
            get
            {
                if(_childReference != null)
                {
                    var result = (ItemEntity?)_childReference.Target;
                    if( result != null )
                    {
                        return result;
                    }
                }
                var data = GetData( );
                var context = CheckedContext;
                var entity = context.GetItemById( data.Child );
                if( entity != null )
                {
                    _childReference = new WeakReference( entity );
                }
                else
                {
                    var message = $"Cannot find the ItemEntity object identified by {data.Child}";
                    throw new Exception( message );
                }
                return entity;
            }
            set
            {
                ChildId = value != null? value.Id : Guid.Empty;
            }
        }

        public DateTime Timestamp
        {
            get => GetData( ).Timestamp;
            set
            {
                var data = GetData( );
                if( data.Timestamp != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Timestamp = value;
                    OnPropertyChanged( );
                }
            }
        }

    }

    public class LineInputDeviceCommandEntity : BaseEntity<Kind>
    {
        WeakReference? _lineInputDeviceReference = null;
        WeakReference? _replyReference = null;
        public LineInputDeviceCommandEntity( [DisallowNull] EntityContext entityContext, [DisallowNull] LineInputDeviceCommandObject data )
            : base( entityContext, data )
        {
        }

        public EntityContext? Context => (EntityContext?)_Context;

        protected EntityContext CheckedContext
        {
            get
            {
                var context = Context;
                if ( context is null )
                {
                    throw new InvalidOperationException( "Context is null" );
                }
                return context;
            }
        }

        private LineInputDeviceCommandObject GetData( ) 
        {
            return (LineInputDeviceCommandObject)base._GetData( );
        }

        public Guid LineInputDeviceId
        {
            get => GetData( ).LineInputDevice;
            set
            {
                var data = GetData( );
                if( data.LineInputDevice != value )
                {
                    OnPropertyChanging( );
                    OnPropertyChanging( "LineInputDevice", false );
                    data = GetData( );
                    data.LineInputDevice = value;
                    OnPropertyChanged( );
                    OnPropertyChanged( "LineInputDevice" );
                }
            }
        }

        public LineInputDeviceEntity LineInputDevice
        {
            get
            {
                if(_lineInputDeviceReference != null)
                {
                    var result = (LineInputDeviceEntity?)_lineInputDeviceReference.Target;
                    if( result != null )
                    {
                        return result;
                    }
                }
                var data = GetData( );
                var context = CheckedContext;
                var entity = context.GetLineInputDeviceById( data.LineInputDevice );
                if( entity != null )
                {
                    _lineInputDeviceReference = new WeakReference( entity );
                }
                else
                {
                    var message = $"Cannot find the LineInputDeviceEntity object identified by {data.LineInputDevice}";
                    throw new Exception( message );
                }
                return entity;
            }
            set
            {
                LineInputDeviceId = value != null? value.Id : Guid.Empty;
            }
        }

        public DateTime Timestamp
        {
            get => GetData( ).Timestamp;
            set
            {
                var data = GetData( );
                if( data.Timestamp != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Timestamp = value;
                    OnPropertyChanged( );
                }
            }
        }

        public Types.DeviceCommandSourceType DeviceCommandSourceType
        {
            get => GetData( ).DeviceCommandSourceType;
            set
            {
                var data = GetData( );
                if( data.DeviceCommandSourceType != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.DeviceCommandSourceType = value;
                    OnPropertyChanged( );
                }
            }
        }

        public Guid DeviceCommandSourceId
        {
            get => GetData( ).DeviceCommandSourceId;
            set
            {
                var data = GetData( );
                if( data.DeviceCommandSourceId != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.DeviceCommandSourceId = value;
                    OnPropertyChanged( );
                }
            }
        }

        public Guid? ReplyId
        {
            get => GetData( ).Reply;
            set
            {
                var data = GetData( );
                if( data.Reply != value )
                {
                    OnPropertyChanging( );
                    OnPropertyChanging( "Reply", false );
                    data = GetData( );
                    data.Reply = value;
                    OnPropertyChanged( );
                    OnPropertyChanged( "Reply" );
                }
            }
        }

        public LineInputDeviceCommandReplyEntity? Reply
        {
            get
            {
                if(_replyReference != null)
                {
                    var result = (LineInputDeviceCommandReplyEntity?)_replyReference.Target;
                    if( result != null )
                    {
                        return result;
                    }
                }
                var data = GetData( );
                var context = CheckedContext;
                if( data.Reply is Guid replyId )
                {
                    var entity = context.GetLineInputDeviceCommandReplyById( replyId );
                    if( entity != null )
                    {
                        _replyReference = new WeakReference( entity );
                    }
                    return entity;
                }
                return null;
            }
            set
            {
                ReplyId = value != null? value.Id : null;
            }
        }

    }

    public class LineInputDeviceCommandReplyEntity : BaseEntity<Kind>
    {
        WeakReference? _lineInputDeviceReference = null;
        WeakReference? _commandReference = null;
        public LineInputDeviceCommandReplyEntity( [DisallowNull] EntityContext entityContext, [DisallowNull] LineInputDeviceCommandReplyObject data )
            : base( entityContext, data )
        {
        }

        public EntityContext? Context => (EntityContext?)_Context;

        protected EntityContext CheckedContext
        {
            get
            {
                var context = Context;
                if ( context is null )
                {
                    throw new InvalidOperationException( "Context is null" );
                }
                return context;
            }
        }

        private LineInputDeviceCommandReplyObject GetData( ) 
        {
            return (LineInputDeviceCommandReplyObject)base._GetData( );
        }

        public Guid LineInputDeviceId
        {
            get => GetData( ).LineInputDevice;
            set
            {
                var data = GetData( );
                if( data.LineInputDevice != value )
                {
                    OnPropertyChanging( );
                    OnPropertyChanging( "LineInputDevice", false );
                    data = GetData( );
                    data.LineInputDevice = value;
                    OnPropertyChanged( );
                    OnPropertyChanged( "LineInputDevice" );
                }
            }
        }

        public LineInputDeviceEntity LineInputDevice
        {
            get
            {
                if(_lineInputDeviceReference != null)
                {
                    var result = (LineInputDeviceEntity?)_lineInputDeviceReference.Target;
                    if( result != null )
                    {
                        return result;
                    }
                }
                var data = GetData( );
                var context = CheckedContext;
                var entity = context.GetLineInputDeviceById( data.LineInputDevice );
                if( entity != null )
                {
                    _lineInputDeviceReference = new WeakReference( entity );
                }
                else
                {
                    var message = $"Cannot find the LineInputDeviceEntity object identified by {data.LineInputDevice}";
                    throw new Exception( message );
                }
                return entity;
            }
            set
            {
                LineInputDeviceId = value != null? value.Id : Guid.Empty;
            }
        }

        public DateTime Timestamp
        {
            get => GetData( ).Timestamp;
            set
            {
                var data = GetData( );
                if( data.Timestamp != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Timestamp = value;
                    OnPropertyChanged( );
                }
            }
        }

        public Guid? CommandId
        {
            get => GetData( ).Command;
            set
            {
                var data = GetData( );
                if( data.Command != value )
                {
                    OnPropertyChanging( );
                    OnPropertyChanging( "Command", false );
                    data = GetData( );
                    data.Command = value;
                    OnPropertyChanged( );
                    OnPropertyChanged( "Command" );
                }
            }
        }

        public LineInputDeviceCommandEntity? Command
        {
            get
            {
                if(_commandReference != null)
                {
                    var result = (LineInputDeviceCommandEntity?)_commandReference.Target;
                    if( result != null )
                    {
                        return result;
                    }
                }
                var data = GetData( );
                var context = CheckedContext;
                if( data.Command is Guid commandId )
                {
                    var entity = context.GetLineInputDeviceCommandById( commandId );
                    if( entity != null )
                    {
                        _commandReference = new WeakReference( entity );
                    }
                    return entity;
                }
                return null;
            }
            set
            {
                CommandId = value != null? value.Id : null;
            }
        }

        public Types.DeviceCommandReplyStatus Status
        {
            get => GetData( ).Status;
            set
            {
                var data = GetData( );
                if( data.Status != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Status = value;
                    OnPropertyChanged( );
                }
            }
        }

        public string Message
        {
            get => GetData( ).Message;
            set
            {
                var data = GetData( );
                if( data.Message != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Message = value;
                    OnPropertyChanged( );
                }
            }
        }

    }

    public class LineInputDeviceConfigurationEntity : BaseEntity<Kind>
    {
        WeakReference? _lineInputDeviceReference = null;
        public LineInputDeviceConfigurationEntity( [DisallowNull] EntityContext entityContext, [DisallowNull] LineInputDeviceConfigurationObject data )
            : base( entityContext, data )
        {
        }

        public EntityContext? Context => (EntityContext?)_Context;

        protected EntityContext CheckedContext
        {
            get
            {
                var context = Context;
                if ( context is null )
                {
                    throw new InvalidOperationException( "Context is null" );
                }
                return context;
            }
        }

        private LineInputDeviceConfigurationObject GetData( ) 
        {
            return (LineInputDeviceConfigurationObject)base._GetData( );
        }

        public Guid LineInputDeviceId
        {
            get => GetData( ).LineInputDevice;
            set
            {
                var data = GetData( );
                if( data.LineInputDevice != value )
                {
                    OnPropertyChanging( );
                    OnPropertyChanging( "LineInputDevice", false );
                    data = GetData( );
                    data.LineInputDevice = value;
                    OnPropertyChanged( );
                    OnPropertyChanged( "LineInputDevice" );
                }
            }
        }

        public LineInputDeviceEntity LineInputDevice
        {
            get
            {
                if(_lineInputDeviceReference != null)
                {
                    var result = (LineInputDeviceEntity?)_lineInputDeviceReference.Target;
                    if( result != null )
                    {
                        return result;
                    }
                }
                var data = GetData( );
                var context = CheckedContext;
                var entity = context.GetLineInputDeviceById( data.LineInputDevice );
                if( entity != null )
                {
                    _lineInputDeviceReference = new WeakReference( entity );
                }
                else
                {
                    var message = $"Cannot find the LineInputDeviceEntity object identified by {data.LineInputDevice}";
                    throw new Exception( message );
                }
                return entity;
            }
            set
            {
                LineInputDeviceId = value != null? value.Id : Guid.Empty;
            }
        }

        public DateTime Timestamp
        {
            get => GetData( ).Timestamp;
            set
            {
                var data = GetData( );
                if( data.Timestamp != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Timestamp = value;
                    OnPropertyChanged( );
                }
            }
        }

        public bool StoreReceivedSentences
        {
            get => GetData( ).StoreReceivedSentences;
            set
            {
                var data = GetData( );
                if( data.StoreReceivedSentences != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.StoreReceivedSentences = value;
                    OnPropertyChanged( );
                }
            }
        }

        public bool StoreSentMessages
        {
            get => GetData( ).StoreSentMessages;
            set
            {
                var data = GetData( );
                if( data.StoreSentMessages != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.StoreSentMessages = value;
                    OnPropertyChanged( );
                }
            }
        }

        public bool StoreUnsentMessages
        {
            get => GetData( ).StoreUnsentMessages;
            set
            {
                var data = GetData( );
                if( data.StoreUnsentMessages != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.StoreUnsentMessages = value;
                    OnPropertyChanged( );
                }
            }
        }

        public bool NMEA
        {
            get => GetData( ).NMEA;
            set
            {
                var data = GetData( );
                if( data.NMEA != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.NMEA = value;
                    OnPropertyChanged( );
                }
            }
        }

        public bool StrictNMEA
        {
            get => GetData( ).StrictNMEA;
            set
            {
                var data = GetData( );
                if( data.StrictNMEA != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.StrictNMEA = value;
                    OnPropertyChanged( );
                }
            }
        }

        public Types.LineInputDeviceConnectionType ConnectionType
        {
            get => GetData( ).ConnectionType;
            set
            {
                var data = GetData( );
                if( data.ConnectionType != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.ConnectionType = value;
                    OnPropertyChanged( );
                }
            }
        }

        public int UdpReceivePort
        {
            get => GetData( ).UdpReceivePort;
            set
            {
                var data = GetData( );
                if( data.UdpReceivePort != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.UdpReceivePort = value;
                    OnPropertyChanged( );
                }
            }
        }

        public string UdpSendHostname
        {
            get => GetData( ).UdpSendHostname;
            set
            {
                var data = GetData( );
                if( data.UdpSendHostname != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.UdpSendHostname = value;
                    OnPropertyChanged( );
                }
            }
        }

        public int UdpSendPort
        {
            get => GetData( ).UdpSendPort;
            set
            {
                var data = GetData( );
                if( data.UdpSendPort != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.UdpSendPort = value;
                    OnPropertyChanged( );
                }
            }
        }

        public string TcpHostname
        {
            get => GetData( ).TcpHostname;
            set
            {
                var data = GetData( );
                if( data.TcpHostname != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.TcpHostname = value;
                    OnPropertyChanged( );
                }
            }
        }

        public int TcpPort
        {
            get => GetData( ).TcpPort;
            set
            {
                var data = GetData( );
                if( data.TcpPort != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.TcpPort = value;
                    OnPropertyChanged( );
                }
            }
        }

        public bool UseHttpLogin
        {
            get => GetData( ).UseHttpLogin;
            set
            {
                var data = GetData( );
                if( data.UseHttpLogin != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.UseHttpLogin = value;
                    OnPropertyChanged( );
                }
            }
        }

        public string LoginHostname
        {
            get => GetData( ).LoginHostname;
            set
            {
                var data = GetData( );
                if( data.LoginHostname != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.LoginHostname = value;
                    OnPropertyChanged( );
                }
            }
        }

        public int LoginPort
        {
            get => GetData( ).LoginPort;
            set
            {
                var data = GetData( );
                if( data.LoginPort != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.LoginPort = value;
                    OnPropertyChanged( );
                }
            }
        }

        public string UserName
        {
            get => GetData( ).UserName;
            set
            {
                var data = GetData( );
                if( data.UserName != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.UserName = value;
                    OnPropertyChanged( );
                }
            }
        }

        public string Password
        {
            get => GetData( ).Password;
            set
            {
                var data = GetData( );
                if( data.Password != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Password = value;
                    OnPropertyChanged( );
                }
            }
        }

        public string ComPort
        {
            get => GetData( ).ComPort;
            set
            {
                var data = GetData( );
                if( data.ComPort != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.ComPort = value;
                    OnPropertyChanged( );
                }
            }
        }

        public int BaudRate
        {
            get => GetData( ).BaudRate;
            set
            {
                var data = GetData( );
                if( data.BaudRate != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.BaudRate = value;
                    OnPropertyChanged( );
                }
            }
        }

        public int DataBits
        {
            get => GetData( ).DataBits;
            set
            {
                var data = GetData( );
                if( data.DataBits != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.DataBits = value;
                    OnPropertyChanged( );
                }
            }
        }

        public bool DiscardNull
        {
            get => GetData( ).DiscardNull;
            set
            {
                var data = GetData( );
                if( data.DiscardNull != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.DiscardNull = value;
                    OnPropertyChanged( );
                }
            }
        }

        public bool DtrEnable
        {
            get => GetData( ).DtrEnable;
            set
            {
                var data = GetData( );
                if( data.DtrEnable != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.DtrEnable = value;
                    OnPropertyChanged( );
                }
            }
        }

        public Types.Handshake Handshake
        {
            get => GetData( ).Handshake;
            set
            {
                var data = GetData( );
                if( data.Handshake != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Handshake = value;
                    OnPropertyChanged( );
                }
            }
        }

        public string NewLine
        {
            get => GetData( ).NewLine;
            set
            {
                var data = GetData( );
                if( data.NewLine != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.NewLine = value;
                    OnPropertyChanged( );
                }
            }
        }

        public Types.Parity Parity
        {
            get => GetData( ).Parity;
            set
            {
                var data = GetData( );
                if( data.Parity != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Parity = value;
                    OnPropertyChanged( );
                }
            }
        }

        public byte ParityReplace
        {
            get => GetData( ).ParityReplace;
            set
            {
                var data = GetData( );
                if( data.ParityReplace != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.ParityReplace = value;
                    OnPropertyChanged( );
                }
            }
        }

        public int ReadBufferSize
        {
            get => GetData( ).ReadBufferSize;
            set
            {
                var data = GetData( );
                if( data.ReadBufferSize != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.ReadBufferSize = value;
                    OnPropertyChanged( );
                }
            }
        }

        public TimeSpan ReadTimeout
        {
            get => GetData( ).ReadTimeout;
            set
            {
                var data = GetData( );
                if( data.ReadTimeout != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.ReadTimeout = value;
                    OnPropertyChanged( );
                }
            }
        }

        public int ReceivedBytesThreshold
        {
            get => GetData( ).ReceivedBytesThreshold;
            set
            {
                var data = GetData( );
                if( data.ReceivedBytesThreshold != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.ReceivedBytesThreshold = value;
                    OnPropertyChanged( );
                }
            }
        }

        public bool RtsEnable
        {
            get => GetData( ).RtsEnable;
            set
            {
                var data = GetData( );
                if( data.RtsEnable != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.RtsEnable = value;
                    OnPropertyChanged( );
                }
            }
        }

        public Types.StopBits StopBits
        {
            get => GetData( ).StopBits;
            set
            {
                var data = GetData( );
                if( data.StopBits != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.StopBits = value;
                    OnPropertyChanged( );
                }
            }
        }

        public int WriteBufferSize
        {
            get => GetData( ).WriteBufferSize;
            set
            {
                var data = GetData( );
                if( data.WriteBufferSize != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.WriteBufferSize = value;
                    OnPropertyChanged( );
                }
            }
        }

        public TimeSpan WriteTimeout
        {
            get => GetData( ).WriteTimeout;
            set
            {
                var data = GetData( );
                if( data.WriteTimeout != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.WriteTimeout = value;
                    OnPropertyChanged( );
                }
            }
        }

        public string PairedComPort
        {
            get => GetData( ).PairedComPort;
            set
            {
                var data = GetData( );
                if( data.PairedComPort != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.PairedComPort = value;
                    OnPropertyChanged( );
                }
            }
        }

    }

    public class LineInputMessageRoutingEntity : BaseEntity<Kind>
    {
        WeakReference? _lineInputDeviceReference = null;
        public LineInputMessageRoutingEntity( [DisallowNull] EntityContext entityContext, [DisallowNull] LineInputMessageRoutingObject data )
            : base( entityContext, data )
        {
        }

        public EntityContext? Context => (EntityContext?)_Context;

        protected EntityContext CheckedContext
        {
            get
            {
                var context = Context;
                if ( context is null )
                {
                    throw new InvalidOperationException( "Context is null" );
                }
                return context;
            }
        }

        private LineInputMessageRoutingObject GetData( ) 
        {
            return (LineInputMessageRoutingObject)base._GetData( );
        }

        public Guid LineInputDeviceId
        {
            get => GetData( ).LineInputDevice;
            set
            {
                var data = GetData( );
                if( data.LineInputDevice != value )
                {
                    OnPropertyChanging( );
                    OnPropertyChanging( "LineInputDevice", false );
                    data = GetData( );
                    data.LineInputDevice = value;
                    OnPropertyChanged( );
                    OnPropertyChanged( "LineInputDevice" );
                }
            }
        }

        public LineInputDeviceEntity LineInputDevice
        {
            get
            {
                if(_lineInputDeviceReference != null)
                {
                    var result = (LineInputDeviceEntity?)_lineInputDeviceReference.Target;
                    if( result != null )
                    {
                        return result;
                    }
                }
                var data = GetData( );
                var context = CheckedContext;
                var entity = context.GetLineInputDeviceById( data.LineInputDevice );
                if( entity != null )
                {
                    _lineInputDeviceReference = new WeakReference( entity );
                }
                else
                {
                    var message = $"Cannot find the LineInputDeviceEntity object identified by {data.LineInputDevice}";
                    throw new Exception( message );
                }
                return entity;
            }
            set
            {
                LineInputDeviceId = value != null? value.Id : Guid.Empty;
            }
        }

        public string Type
        {
            get => GetData( ).Type;
            set
            {
                var data = GetData( );
                if( data.Type != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Type = value;
                    OnPropertyChanged( );
                }
            }
        }

    }

    public class LineInputMessageRoutingDestinationEntity : BaseEntity<Kind>
    {
        WeakReference? _routingReference = null;
        WeakReference? _listenerReference = null;
        public LineInputMessageRoutingDestinationEntity( [DisallowNull] EntityContext entityContext, [DisallowNull] LineInputMessageRoutingDestinationObject data )
            : base( entityContext, data )
        {
        }

        public EntityContext? Context => (EntityContext?)_Context;

        protected EntityContext CheckedContext
        {
            get
            {
                var context = Context;
                if ( context is null )
                {
                    throw new InvalidOperationException( "Context is null" );
                }
                return context;
            }
        }

        private LineInputMessageRoutingDestinationObject GetData( ) 
        {
            return (LineInputMessageRoutingDestinationObject)base._GetData( );
        }

        public Guid RoutingId
        {
            get => GetData( ).Routing;
            set
            {
                var data = GetData( );
                if( data.Routing != value )
                {
                    OnPropertyChanging( );
                    OnPropertyChanging( "Routing", false );
                    data = GetData( );
                    data.Routing = value;
                    OnPropertyChanged( );
                    OnPropertyChanged( "Routing" );
                }
            }
        }

        public LineInputMessageRoutingEntity Routing
        {
            get
            {
                if(_routingReference != null)
                {
                    var result = (LineInputMessageRoutingEntity?)_routingReference.Target;
                    if( result != null )
                    {
                        return result;
                    }
                }
                var data = GetData( );
                var context = CheckedContext;
                var entity = context.GetLineInputMessageRoutingById( data.Routing );
                if( entity != null )
                {
                    _routingReference = new WeakReference( entity );
                }
                else
                {
                    var message = $"Cannot find the LineInputMessageRoutingEntity object identified by {data.Routing}";
                    throw new Exception( message );
                }
                return entity;
            }
            set
            {
                RoutingId = value != null? value.Id : Guid.Empty;
            }
        }

        public Guid? ListenerId
        {
            get => GetData( ).Listener;
            set
            {
                var data = GetData( );
                if( data.Listener != value )
                {
                    OnPropertyChanging( );
                    OnPropertyChanging( "Listener", false );
                    data = GetData( );
                    data.Listener = value;
                    OnPropertyChanged( );
                    OnPropertyChanged( "Listener" );
                }
            }
        }

        public DeviceEntity? Listener
        {
            get
            {
                if(_listenerReference != null)
                {
                    var result = (DeviceEntity?)_listenerReference.Target;
                    if( result != null )
                    {
                        return result;
                    }
                }
                var data = GetData( );
                var context = CheckedContext;
                if( data.Listener is Guid listenerId )
                {
                    var entity = context.GetDeviceById( listenerId );
                    if( entity != null )
                    {
                        _listenerReference = new WeakReference( entity );
                    }
                    return entity;
                }
                return null;
            }
            set
            {
                ListenerId = value != null? value.Id : null;
            }
        }

    }

    public class LineInputWhiteListEntryEntity : BaseEntity<Kind>
    {
        WeakReference? _lineInputDeviceReference = null;
        public LineInputWhiteListEntryEntity( [DisallowNull] EntityContext entityContext, [DisallowNull] LineInputWhiteListEntryObject data )
            : base( entityContext, data )
        {
        }

        public EntityContext? Context => (EntityContext?)_Context;

        protected EntityContext CheckedContext
        {
            get
            {
                var context = Context;
                if ( context is null )
                {
                    throw new InvalidOperationException( "Context is null" );
                }
                return context;
            }
        }

        private LineInputWhiteListEntryObject GetData( ) 
        {
            return (LineInputWhiteListEntryObject)base._GetData( );
        }

        public Guid LineInputDeviceId
        {
            get => GetData( ).LineInputDevice;
            set
            {
                var data = GetData( );
                if( data.LineInputDevice != value )
                {
                    OnPropertyChanging( );
                    OnPropertyChanging( "LineInputDevice", false );
                    data = GetData( );
                    data.LineInputDevice = value;
                    OnPropertyChanged( );
                    OnPropertyChanged( "LineInputDevice" );
                }
            }
        }

        public LineInputDeviceEntity LineInputDevice
        {
            get
            {
                if(_lineInputDeviceReference != null)
                {
                    var result = (LineInputDeviceEntity?)_lineInputDeviceReference.Target;
                    if( result != null )
                    {
                        return result;
                    }
                }
                var data = GetData( );
                var context = CheckedContext;
                var entity = context.GetLineInputDeviceById( data.LineInputDevice );
                if( entity != null )
                {
                    _lineInputDeviceReference = new WeakReference( entity );
                }
                else
                {
                    var message = $"Cannot find the LineInputDeviceEntity object identified by {data.LineInputDevice}";
                    throw new Exception( message );
                }
                return entity;
            }
            set
            {
                LineInputDeviceId = value != null? value.Id : Guid.Empty;
            }
        }

        public string HostName
        {
            get => GetData( ).HostName;
            set
            {
                var data = GetData( );
                if( data.HostName != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.HostName = value;
                    OnPropertyChanged( );
                }
            }
        }

        public int Port
        {
            get => GetData( ).Port;
            set
            {
                var data = GetData( );
                if( data.Port != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Port = value;
                    OnPropertyChanged( );
                }
            }
        }

    }

    public class LogApplicationEntity : BaseEntity<Kind>
    {
        public LogApplicationEntity( [DisallowNull] EntityContext entityContext, [DisallowNull] LogApplicationObject data )
            : base( entityContext, data )
        {
        }

        public EntityContext? Context => (EntityContext?)_Context;

        protected EntityContext CheckedContext
        {
            get
            {
                var context = Context;
                if ( context is null )
                {
                    throw new InvalidOperationException( "Context is null" );
                }
                return context;
            }
        }

        private LogApplicationObject GetData( ) 
        {
            return (LogApplicationObject)base._GetData( );
        }

        public string Name
        {
            get => GetData( ).Name;
            set
            {
                var data = GetData( );
                if( data.Name != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Name = value;
                    OnPropertyChanged( );
                }
            }
        }

        public string Description
        {
            get => GetData( ).Description;
            set
            {
                var data = GetData( );
                if( data.Description != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Description = value;
                    OnPropertyChanged( );
                }
            }
        }

    }

    public class LogApplicationConfigurationEntity : BaseEntity<Kind>
    {
        WeakReference? _applicationReference = null;
        public LogApplicationConfigurationEntity( [DisallowNull] EntityContext entityContext, [DisallowNull] LogApplicationConfigurationObject data )
            : base( entityContext, data )
        {
        }

        public EntityContext? Context => (EntityContext?)_Context;

        protected EntityContext CheckedContext
        {
            get
            {
                var context = Context;
                if ( context is null )
                {
                    throw new InvalidOperationException( "Context is null" );
                }
                return context;
            }
        }

        private LogApplicationConfigurationObject GetData( ) 
        {
            return (LogApplicationConfigurationObject)base._GetData( );
        }

        public Guid ApplicationId
        {
            get => GetData( ).Application;
            set
            {
                var data = GetData( );
                if( data.Application != value )
                {
                    OnPropertyChanging( );
                    OnPropertyChanging( "Application", false );
                    data = GetData( );
                    data.Application = value;
                    OnPropertyChanged( );
                    OnPropertyChanged( "Application" );
                }
            }
        }

        public LogApplicationEntity Application
        {
            get
            {
                if(_applicationReference != null)
                {
                    var result = (LogApplicationEntity?)_applicationReference.Target;
                    if( result != null )
                    {
                        return result;
                    }
                }
                var data = GetData( );
                var context = CheckedContext;
                var entity = context.GetLogApplicationById( data.Application );
                if( entity != null )
                {
                    _applicationReference = new WeakReference( entity );
                }
                else
                {
                    var message = $"Cannot find the LogApplicationEntity object identified by {data.Application}";
                    throw new Exception( message );
                }
                return entity;
            }
            set
            {
                ApplicationId = value != null? value.Id : Guid.Empty;
            }
        }

        public DateTime Timestamp
        {
            get => GetData( ).Timestamp;
            set
            {
                var data = GetData( );
                if( data.Timestamp != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Timestamp = value;
                    OnPropertyChanged( );
                }
            }
        }

        public bool Finest
        {
            get => GetData( ).Finest;
            set
            {
                var data = GetData( );
                if( data.Finest != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Finest = value;
                    OnPropertyChanged( );
                }
            }
        }

        public bool Finer
        {
            get => GetData( ).Finer;
            set
            {
                var data = GetData( );
                if( data.Finer != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Finer = value;
                    OnPropertyChanged( );
                }
            }
        }

        public bool Fine
        {
            get => GetData( ).Fine;
            set
            {
                var data = GetData( );
                if( data.Fine != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Fine = value;
                    OnPropertyChanged( );
                }
            }
        }

        public bool Info
        {
            get => GetData( ).Info;
            set
            {
                var data = GetData( );
                if( data.Info != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Info = value;
                    OnPropertyChanged( );
                }
            }
        }

        public bool Notice
        {
            get => GetData( ).Notice;
            set
            {
                var data = GetData( );
                if( data.Notice != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Notice = value;
                    OnPropertyChanged( );
                }
            }
        }

        public bool Warn
        {
            get => GetData( ).Warn;
            set
            {
                var data = GetData( );
                if( data.Warn != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Warn = value;
                    OnPropertyChanged( );
                }
            }
        }

        public bool Error
        {
            get => GetData( ).Error;
            set
            {
                var data = GetData( );
                if( data.Error != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Error = value;
                    OnPropertyChanged( );
                }
            }
        }

        public bool Severe
        {
            get => GetData( ).Severe;
            set
            {
                var data = GetData( );
                if( data.Severe != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Severe = value;
                    OnPropertyChanged( );
                }
            }
        }

        public bool Critical
        {
            get => GetData( ).Critical;
            set
            {
                var data = GetData( );
                if( data.Critical != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Critical = value;
                    OnPropertyChanged( );
                }
            }
        }

        public bool Alert
        {
            get => GetData( ).Alert;
            set
            {
                var data = GetData( );
                if( data.Alert != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Alert = value;
                    OnPropertyChanged( );
                }
            }
        }

        public bool Fatal
        {
            get => GetData( ).Fatal;
            set
            {
                var data = GetData( );
                if( data.Fatal != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Fatal = value;
                    OnPropertyChanged( );
                }
            }
        }

        public bool Emergency
        {
            get => GetData( ).Emergency;
            set
            {
                var data = GetData( );
                if( data.Emergency != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Emergency = value;
                    OnPropertyChanged( );
                }
            }
        }

    }

    public class LogHostEntity : BaseEntity<Kind>
    {
        public LogHostEntity( [DisallowNull] EntityContext entityContext, [DisallowNull] LogHostObject data )
            : base( entityContext, data )
        {
        }

        public EntityContext? Context => (EntityContext?)_Context;

        protected EntityContext CheckedContext
        {
            get
            {
                var context = Context;
                if ( context is null )
                {
                    throw new InvalidOperationException( "Context is null" );
                }
                return context;
            }
        }

        private LogHostObject GetData( ) 
        {
            return (LogHostObject)base._GetData( );
        }

        public string ComputerName
        {
            get => GetData( ).ComputerName;
            set
            {
                var data = GetData( );
                if( data.ComputerName != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.ComputerName = value;
                    OnPropertyChanged( );
                }
            }
        }

        public string Description
        {
            get => GetData( ).Description;
            set
            {
                var data = GetData( );
                if( data.Description != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Description = value;
                    OnPropertyChanged( );
                }
            }
        }

    }

    public class LogHostConfigurationEntity : BaseEntity<Kind>
    {
        WeakReference? _hostReference = null;
        public LogHostConfigurationEntity( [DisallowNull] EntityContext entityContext, [DisallowNull] LogHostConfigurationObject data )
            : base( entityContext, data )
        {
        }

        public EntityContext? Context => (EntityContext?)_Context;

        protected EntityContext CheckedContext
        {
            get
            {
                var context = Context;
                if ( context is null )
                {
                    throw new InvalidOperationException( "Context is null" );
                }
                return context;
            }
        }

        private LogHostConfigurationObject GetData( ) 
        {
            return (LogHostConfigurationObject)base._GetData( );
        }

        public Guid HostId
        {
            get => GetData( ).Host;
            set
            {
                var data = GetData( );
                if( data.Host != value )
                {
                    OnPropertyChanging( );
                    OnPropertyChanging( "Host", false );
                    data = GetData( );
                    data.Host = value;
                    OnPropertyChanged( );
                    OnPropertyChanged( "Host" );
                }
            }
        }

        public LogHostEntity Host
        {
            get
            {
                if(_hostReference != null)
                {
                    var result = (LogHostEntity?)_hostReference.Target;
                    if( result != null )
                    {
                        return result;
                    }
                }
                var data = GetData( );
                var context = CheckedContext;
                var entity = context.GetLogHostById( data.Host );
                if( entity != null )
                {
                    _hostReference = new WeakReference( entity );
                }
                else
                {
                    var message = $"Cannot find the LogHostEntity object identified by {data.Host}";
                    throw new Exception( message );
                }
                return entity;
            }
            set
            {
                HostId = value != null? value.Id : Guid.Empty;
            }
        }

        public DateTime Timestamp
        {
            get => GetData( ).Timestamp;
            set
            {
                var data = GetData( );
                if( data.Timestamp != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Timestamp = value;
                    OnPropertyChanged( );
                }
            }
        }

        public bool Finest
        {
            get => GetData( ).Finest;
            set
            {
                var data = GetData( );
                if( data.Finest != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Finest = value;
                    OnPropertyChanged( );
                }
            }
        }

        public bool Finer
        {
            get => GetData( ).Finer;
            set
            {
                var data = GetData( );
                if( data.Finer != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Finer = value;
                    OnPropertyChanged( );
                }
            }
        }

        public bool Fine
        {
            get => GetData( ).Fine;
            set
            {
                var data = GetData( );
                if( data.Fine != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Fine = value;
                    OnPropertyChanged( );
                }
            }
        }

        public bool Info
        {
            get => GetData( ).Info;
            set
            {
                var data = GetData( );
                if( data.Info != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Info = value;
                    OnPropertyChanged( );
                }
            }
        }

        public bool Notice
        {
            get => GetData( ).Notice;
            set
            {
                var data = GetData( );
                if( data.Notice != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Notice = value;
                    OnPropertyChanged( );
                }
            }
        }

        public bool Warn
        {
            get => GetData( ).Warn;
            set
            {
                var data = GetData( );
                if( data.Warn != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Warn = value;
                    OnPropertyChanged( );
                }
            }
        }

        public bool Error
        {
            get => GetData( ).Error;
            set
            {
                var data = GetData( );
                if( data.Error != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Error = value;
                    OnPropertyChanged( );
                }
            }
        }

        public bool Severe
        {
            get => GetData( ).Severe;
            set
            {
                var data = GetData( );
                if( data.Severe != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Severe = value;
                    OnPropertyChanged( );
                }
            }
        }

        public bool Critical
        {
            get => GetData( ).Critical;
            set
            {
                var data = GetData( );
                if( data.Critical != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Critical = value;
                    OnPropertyChanged( );
                }
            }
        }

        public bool Alert
        {
            get => GetData( ).Alert;
            set
            {
                var data = GetData( );
                if( data.Alert != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Alert = value;
                    OnPropertyChanged( );
                }
            }
        }

        public bool Fatal
        {
            get => GetData( ).Fatal;
            set
            {
                var data = GetData( );
                if( data.Fatal != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Fatal = value;
                    OnPropertyChanged( );
                }
            }
        }

        public bool Emergency
        {
            get => GetData( ).Emergency;
            set
            {
                var data = GetData( );
                if( data.Emergency != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Emergency = value;
                    OnPropertyChanged( );
                }
            }
        }

    }

    public class LogLocationEntity : BaseEntity<Kind>
    {
        public LogLocationEntity( [DisallowNull] EntityContext entityContext, [DisallowNull] LogLocationObject data )
            : base( entityContext, data )
        {
        }

        public EntityContext? Context => (EntityContext?)_Context;

        protected EntityContext CheckedContext
        {
            get
            {
                var context = Context;
                if ( context is null )
                {
                    throw new InvalidOperationException( "Context is null" );
                }
                return context;
            }
        }

        private LogLocationObject GetData( ) 
        {
            return (LogLocationObject)base._GetData( );
        }

        public string FileName
        {
            get => GetData( ).FileName;
            set
            {
                var data = GetData( );
                if( data.FileName != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.FileName = value;
                    OnPropertyChanged( );
                }
            }
        }

        public int LineNumber
        {
            get => GetData( ).LineNumber;
            set
            {
                var data = GetData( );
                if( data.LineNumber != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.LineNumber = value;
                    OnPropertyChanged( );
                }
            }
        }

        public string Namespace
        {
            get => GetData( ).Namespace;
            set
            {
                var data = GetData( );
                if( data.Namespace != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Namespace = value;
                    OnPropertyChanged( );
                }
            }
        }

        public string ClassName
        {
            get => GetData( ).ClassName;
            set
            {
                var data = GetData( );
                if( data.ClassName != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.ClassName = value;
                    OnPropertyChanged( );
                }
            }
        }

        public string MethodName
        {
            get => GetData( ).MethodName;
            set
            {
                var data = GetData( );
                if( data.MethodName != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.MethodName = value;
                    OnPropertyChanged( );
                }
            }
        }

    }

    public class LogProcessEntity : BaseEntity<Kind>
    {
        WeakReference? _applicationReference = null;
        WeakReference? _hostReference = null;
        public LogProcessEntity( [DisallowNull] EntityContext entityContext, [DisallowNull] LogProcessObject data )
            : base( entityContext, data )
        {
        }

        public EntityContext? Context => (EntityContext?)_Context;

        protected EntityContext CheckedContext
        {
            get
            {
                var context = Context;
                if ( context is null )
                {
                    throw new InvalidOperationException( "Context is null" );
                }
                return context;
            }
        }

        private LogProcessObject GetData( ) 
        {
            return (LogProcessObject)base._GetData( );
        }

        public Guid ApplicationId
        {
            get => GetData( ).Application;
            set
            {
                var data = GetData( );
                if( data.Application != value )
                {
                    OnPropertyChanging( );
                    OnPropertyChanging( "Application", false );
                    data = GetData( );
                    data.Application = value;
                    OnPropertyChanged( );
                    OnPropertyChanged( "Application" );
                }
            }
        }

        public LogApplicationEntity Application
        {
            get
            {
                if(_applicationReference != null)
                {
                    var result = (LogApplicationEntity?)_applicationReference.Target;
                    if( result != null )
                    {
                        return result;
                    }
                }
                var data = GetData( );
                var context = CheckedContext;
                var entity = context.GetLogApplicationById( data.Application );
                if( entity != null )
                {
                    _applicationReference = new WeakReference( entity );
                }
                else
                {
                    var message = $"Cannot find the LogApplicationEntity object identified by {data.Application}";
                    throw new Exception( message );
                }
                return entity;
            }
            set
            {
                ApplicationId = value != null? value.Id : Guid.Empty;
            }
        }

        public Guid? HostId
        {
            get => GetData( ).Host;
            set
            {
                var data = GetData( );
                if( data.Host != value )
                {
                    OnPropertyChanging( );
                    OnPropertyChanging( "Host", false );
                    data = GetData( );
                    data.Host = value;
                    OnPropertyChanged( );
                    OnPropertyChanged( "Host" );
                }
            }
        }

        public LogHostEntity? Host
        {
            get
            {
                if(_hostReference != null)
                {
                    var result = (LogHostEntity?)_hostReference.Target;
                    if( result != null )
                    {
                        return result;
                    }
                }
                var data = GetData( );
                var context = CheckedContext;
                if( data.Host is Guid hostId )
                {
                    var entity = context.GetLogHostById( hostId );
                    if( entity != null )
                    {
                        _hostReference = new WeakReference( entity );
                    }
                    return entity;
                }
                return null;
            }
            set
            {
                HostId = value != null? value.Id : null;
            }
        }

        public DateTime Started
        {
            get => GetData( ).Started;
            set
            {
                var data = GetData( );
                if( data.Started != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Started = value;
                    OnPropertyChanged( );
                }
            }
        }

        public DateTime? Stopped
        {
            get => GetData( ).Stopped;
            set
            {
                var data = GetData( );
                if( data.Stopped != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Stopped = value;
                    OnPropertyChanged( );
                }
            }
        }

        public long ProcessId
        {
            get => GetData( ).ProcessId;
            set
            {
                var data = GetData( );
                if( data.ProcessId != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.ProcessId = value;
                    OnPropertyChanged( );
                }
            }
        }

        public string Path
        {
            get => GetData( ).Path;
            set
            {
                var data = GetData( );
                if( data.Path != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Path = value;
                    OnPropertyChanged( );
                }
            }
        }

        public string Identity
        {
            get => GetData( ).Identity;
            set
            {
                var data = GetData( );
                if( data.Identity != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Identity = value;
                    OnPropertyChanged( );
                }
            }
        }

    }

    public class LogRecordEntity : BaseEntity<Kind>
    {
        WeakReference? _threadReference = null;
        WeakReference? _locationReference = null;
        public LogRecordEntity( [DisallowNull] EntityContext entityContext, [DisallowNull] LogRecordObject data )
            : base( entityContext, data )
        {
        }

        public EntityContext? Context => (EntityContext?)_Context;

        protected EntityContext CheckedContext
        {
            get
            {
                var context = Context;
                if ( context is null )
                {
                    throw new InvalidOperationException( "Context is null" );
                }
                return context;
            }
        }

        private LogRecordObject GetData( ) 
        {
            return (LogRecordObject)base._GetData( );
        }

        public Guid ThreadId
        {
            get => GetData( ).Thread;
            set
            {
                var data = GetData( );
                if( data.Thread != value )
                {
                    OnPropertyChanging( );
                    OnPropertyChanging( "Thread", false );
                    data = GetData( );
                    data.Thread = value;
                    OnPropertyChanged( );
                    OnPropertyChanged( "Thread" );
                }
            }
        }

        public LogThreadEntity Thread
        {
            get
            {
                if(_threadReference != null)
                {
                    var result = (LogThreadEntity?)_threadReference.Target;
                    if( result != null )
                    {
                        return result;
                    }
                }
                var data = GetData( );
                var context = CheckedContext;
                var entity = context.GetLogThreadById( data.Thread );
                if( entity != null )
                {
                    _threadReference = new WeakReference( entity );
                }
                else
                {
                    var message = $"Cannot find the LogThreadEntity object identified by {data.Thread}";
                    throw new Exception( message );
                }
                return entity;
            }
            set
            {
                ThreadId = value != null? value.Id : Guid.Empty;
            }
        }

        public long SequenceNumber
        {
            get => GetData( ).SequenceNumber;
            set
            {
                var data = GetData( );
                if( data.SequenceNumber != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.SequenceNumber = value;
                    OnPropertyChanged( );
                }
            }
        }

        public Types.LogLevel Level
        {
            get => GetData( ).Level;
            set
            {
                var data = GetData( );
                if( data.Level != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Level = value;
                    OnPropertyChanged( );
                }
            }
        }

        public DateTime Timestamp
        {
            get => GetData( ).Timestamp;
            set
            {
                var data = GetData( );
                if( data.Timestamp != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Timestamp = value;
                    OnPropertyChanged( );
                }
            }
        }

        public int Depth
        {
            get => GetData( ).Depth;
            set
            {
                var data = GetData( );
                if( data.Depth != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Depth = value;
                    OnPropertyChanged( );
                }
            }
        }

        public Guid LocationId
        {
            get => GetData( ).Location;
            set
            {
                var data = GetData( );
                if( data.Location != value )
                {
                    OnPropertyChanging( );
                    OnPropertyChanging( "Location", false );
                    data = GetData( );
                    data.Location = value;
                    OnPropertyChanged( );
                    OnPropertyChanged( "Location" );
                }
            }
        }

        public LogLocationEntity Location
        {
            get
            {
                if(_locationReference != null)
                {
                    var result = (LogLocationEntity?)_locationReference.Target;
                    if( result != null )
                    {
                        return result;
                    }
                }
                var data = GetData( );
                var context = CheckedContext;
                var entity = context.GetLogLocationById( data.Location );
                if( entity != null )
                {
                    _locationReference = new WeakReference( entity );
                }
                else
                {
                    var message = $"Cannot find the LogLocationEntity object identified by {data.Location}";
                    throw new Exception( message );
                }
                return entity;
            }
            set
            {
                LocationId = value != null? value.Id : Guid.Empty;
            }
        }

        public string Message
        {
            get => GetData( ).Message;
            set
            {
                var data = GetData( );
                if( data.Message != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Message = value;
                    OnPropertyChanged( );
                }
            }
        }

        public string ExceptionString
        {
            get => GetData( ).ExceptionString;
            set
            {
                var data = GetData( );
                if( data.ExceptionString != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.ExceptionString = value;
                    OnPropertyChanged( );
                }
            }
        }

        public byte[] PropertiesData
        {
            get => GetData( ).PropertiesData;
            set
            {
                var data = GetData( );
                if( data.PropertiesData != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.PropertiesData = value;
                    OnPropertyChanged( );
                }
            }
        }

    }

    public class LogThreadEntity : BaseEntity<Kind>
    {
        WeakReference? _processReference = null;
        public LogThreadEntity( [DisallowNull] EntityContext entityContext, [DisallowNull] LogThreadObject data )
            : base( entityContext, data )
        {
        }

        public EntityContext? Context => (EntityContext?)_Context;

        protected EntityContext CheckedContext
        {
            get
            {
                var context = Context;
                if ( context is null )
                {
                    throw new InvalidOperationException( "Context is null" );
                }
                return context;
            }
        }

        private LogThreadObject GetData( ) 
        {
            return (LogThreadObject)base._GetData( );
        }

        public Guid ProcessId
        {
            get => GetData( ).Process;
            set
            {
                var data = GetData( );
                if( data.Process != value )
                {
                    OnPropertyChanging( );
                    OnPropertyChanging( "Process", false );
                    data = GetData( );
                    data.Process = value;
                    OnPropertyChanged( );
                    OnPropertyChanged( "Process" );
                }
            }
        }

        public LogProcessEntity Process
        {
            get
            {
                if(_processReference != null)
                {
                    var result = (LogProcessEntity?)_processReference.Target;
                    if( result != null )
                    {
                        return result;
                    }
                }
                var data = GetData( );
                var context = CheckedContext;
                var entity = context.GetLogProcessById( data.Process );
                if( entity != null )
                {
                    _processReference = new WeakReference( entity );
                }
                else
                {
                    var message = $"Cannot find the LogProcessEntity object identified by {data.Process}";
                    throw new Exception( message );
                }
                return entity;
            }
            set
            {
                ProcessId = value != null? value.Id : Guid.Empty;
            }
        }

        public DateTime Started
        {
            get => GetData( ).Started;
            set
            {
                var data = GetData( );
                if( data.Started != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Started = value;
                    OnPropertyChanged( );
                }
            }
        }

        public DateTime? Stopped
        {
            get => GetData( ).Stopped;
            set
            {
                var data = GetData( );
                if( data.Stopped != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Stopped = value;
                    OnPropertyChanged( );
                }
            }
        }

        public long ThreadId
        {
            get => GetData( ).ThreadId;
            set
            {
                var data = GetData( );
                if( data.ThreadId != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.ThreadId = value;
                    OnPropertyChanged( );
                }
            }
        }

        public string Name
        {
            get => GetData( ).Name;
            set
            {
                var data = GetData( );
                if( data.Name != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Name = value;
                    OnPropertyChanged( );
                }
            }
        }

    }

    public class LogTraceEntryEntity : BaseEntity<Kind>
    {
        WeakReference? _threadReference = null;
        WeakReference? _locationReference = null;
        public LogTraceEntryEntity( [DisallowNull] EntityContext entityContext, [DisallowNull] LogTraceEntryObject data )
            : base( entityContext, data )
        {
        }

        public EntityContext? Context => (EntityContext?)_Context;

        protected EntityContext CheckedContext
        {
            get
            {
                var context = Context;
                if ( context is null )
                {
                    throw new InvalidOperationException( "Context is null" );
                }
                return context;
            }
        }

        private LogTraceEntryObject GetData( ) 
        {
            return (LogTraceEntryObject)base._GetData( );
        }

        public Guid ThreadId
        {
            get => GetData( ).Thread;
            set
            {
                var data = GetData( );
                if( data.Thread != value )
                {
                    OnPropertyChanging( );
                    OnPropertyChanging( "Thread", false );
                    data = GetData( );
                    data.Thread = value;
                    OnPropertyChanged( );
                    OnPropertyChanged( "Thread" );
                }
            }
        }

        public LogThreadEntity Thread
        {
            get
            {
                if(_threadReference != null)
                {
                    var result = (LogThreadEntity?)_threadReference.Target;
                    if( result != null )
                    {
                        return result;
                    }
                }
                var data = GetData( );
                var context = CheckedContext;
                var entity = context.GetLogThreadById( data.Thread );
                if( entity != null )
                {
                    _threadReference = new WeakReference( entity );
                }
                else
                {
                    var message = $"Cannot find the LogThreadEntity object identified by {data.Thread}";
                    throw new Exception( message );
                }
                return entity;
            }
            set
            {
                ThreadId = value != null? value.Id : Guid.Empty;
            }
        }

        public long SequenceNumber
        {
            get => GetData( ).SequenceNumber;
            set
            {
                var data = GetData( );
                if( data.SequenceNumber != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.SequenceNumber = value;
                    OnPropertyChanged( );
                }
            }
        }

        public Guid LocationId
        {
            get => GetData( ).Location;
            set
            {
                var data = GetData( );
                if( data.Location != value )
                {
                    OnPropertyChanging( );
                    OnPropertyChanging( "Location", false );
                    data = GetData( );
                    data.Location = value;
                    OnPropertyChanged( );
                    OnPropertyChanged( "Location" );
                }
            }
        }

        public LogLocationEntity Location
        {
            get
            {
                if(_locationReference != null)
                {
                    var result = (LogLocationEntity?)_locationReference.Target;
                    if( result != null )
                    {
                        return result;
                    }
                }
                var data = GetData( );
                var context = CheckedContext;
                var entity = context.GetLogLocationById( data.Location );
                if( entity != null )
                {
                    _locationReference = new WeakReference( entity );
                }
                else
                {
                    var message = $"Cannot find the LogLocationEntity object identified by {data.Location}";
                    throw new Exception( message );
                }
                return entity;
            }
            set
            {
                LocationId = value != null? value.Id : Guid.Empty;
            }
        }

        public int Depth
        {
            get => GetData( ).Depth;
            set
            {
                var data = GetData( );
                if( data.Depth != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Depth = value;
                    OnPropertyChanged( );
                }
            }
        }

        public DateTime Entered
        {
            get => GetData( ).Entered;
            set
            {
                var data = GetData( );
                if( data.Entered != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Entered = value;
                    OnPropertyChanged( );
                }
            }
        }

        public DateTime? Ended
        {
            get => GetData( ).Ended;
            set
            {
                var data = GetData( );
                if( data.Ended != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Ended = value;
                    OnPropertyChanged( );
                }
            }
        }

    }

    public class MapElementEntity : BaseEntity<Kind>
    {
        WeakReference? _itemReference = null;
        public MapElementEntity( [DisallowNull] EntityContext entityContext, [DisallowNull] MapElementObject data )
            : base( entityContext, data )
        {
        }

        public EntityContext? Context => (EntityContext?)_Context;

        protected EntityContext CheckedContext
        {
            get
            {
                var context = Context;
                if ( context is null )
                {
                    throw new InvalidOperationException( "Context is null" );
                }
                return context;
            }
        }

        private MapElementObject GetData( ) 
        {
            return (MapElementObject)base._GetData( );
        }

        public Guid ItemId
        {
            get => GetData( ).Item;
            set
            {
                var data = GetData( );
                if( data.Item != value )
                {
                    OnPropertyChanging( );
                    OnPropertyChanging( "Item", false );
                    data = GetData( );
                    data.Item = value;
                    OnPropertyChanged( );
                    OnPropertyChanged( "Item" );
                }
            }
        }

        public ItemEntity Item
        {
            get
            {
                if(_itemReference != null)
                {
                    var result = (ItemEntity?)_itemReference.Target;
                    if( result != null )
                    {
                        return result;
                    }
                }
                var data = GetData( );
                var context = CheckedContext;
                var entity = context.GetItemById( data.Item );
                if( entity != null )
                {
                    _itemReference = new WeakReference( entity );
                }
                else
                {
                    var message = $"Cannot find the ItemEntity object identified by {data.Item}";
                    throw new Exception( message );
                }
                return entity;
            }
            set
            {
                ItemId = value != null? value.Id : Guid.Empty;
            }
        }

        public Types.MapElementType ElementType
        {
            get => GetData( ).ElementType;
            set
            {
                var data = GetData( );
                if( data.ElementType != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.ElementType = value;
                    OnPropertyChanged( );
                }
            }
        }

        public double Latitude
        {
            get => GetData( ).Latitude;
            set
            {
                var data = GetData( );
                if( data.Latitude != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Latitude = value;
                    OnPropertyChanged( );
                }
            }
        }

        public double Longitude
        {
            get => GetData( ).Longitude;
            set
            {
                var data = GetData( );
                if( data.Longitude != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Longitude = value;
                    OnPropertyChanged( );
                }
            }
        }

        public double Angle
        {
            get => GetData( ).Angle;
            set
            {
                var data = GetData( );
                if( data.Angle != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Angle = value;
                    OnPropertyChanged( );
                }
            }
        }

        public double Left
        {
            get => GetData( ).Left;
            set
            {
                var data = GetData( );
                if( data.Left != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Left = value;
                    OnPropertyChanged( );
                }
            }
        }

        public double Top
        {
            get => GetData( ).Top;
            set
            {
                var data = GetData( );
                if( data.Top != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Top = value;
                    OnPropertyChanged( );
                }
            }
        }

        public double Width
        {
            get => GetData( ).Width;
            set
            {
                var data = GetData( );
                if( data.Width != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Width = value;
                    OnPropertyChanged( );
                }
            }
        }

        public double Height
        {
            get => GetData( ).Height;
            set
            {
                var data = GetData( );
                if( data.Height != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Height = value;
                    OnPropertyChanged( );
                }
            }
        }

        public string Label
        {
            get => GetData( ).Label;
            set
            {
                var data = GetData( );
                if( data.Label != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Label = value;
                    OnPropertyChanged( );
                }
            }
        }

        public byte[] Data
        {
            get => GetData( ).Data;
            set
            {
                var data = GetData( );
                if( data.Data != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Data = value;
                    OnPropertyChanged( );
                }
            }
        }

    }

    public class MapInfoEntity : BaseEntity<Kind>
    {
        public MapInfoEntity( [DisallowNull] EntityContext entityContext, [DisallowNull] MapInfoObject data )
            : base( entityContext, data )
        {
        }

        public EntityContext? Context => (EntityContext?)_Context;

        protected EntityContext CheckedContext
        {
            get
            {
                var context = Context;
                if ( context is null )
                {
                    throw new InvalidOperationException( "Context is null" );
                }
                return context;
            }
        }

        private MapInfoObject GetData( ) 
        {
            return (MapInfoObject)base._GetData( );
        }

        public int Scale
        {
            get => GetData( ).Scale;
            set
            {
                var data = GetData( );
                if( data.Scale != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Scale = value;
                    OnPropertyChanged( );
                }
            }
        }

        public double Latitude
        {
            get => GetData( ).Latitude;
            set
            {
                var data = GetData( );
                if( data.Latitude != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Latitude = value;
                    OnPropertyChanged( );
                }
            }
        }

        public double Longitude
        {
            get => GetData( ).Longitude;
            set
            {
                var data = GetData( );
                if( data.Longitude != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Longitude = value;
                    OnPropertyChanged( );
                }
            }
        }

        public double NorthWestLatitude
        {
            get => GetData( ).NorthWestLatitude;
            set
            {
                var data = GetData( );
                if( data.NorthWestLatitude != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.NorthWestLatitude = value;
                    OnPropertyChanged( );
                }
            }
        }

        public double NorthWestLongitude
        {
            get => GetData( ).NorthWestLongitude;
            set
            {
                var data = GetData( );
                if( data.NorthWestLongitude != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.NorthWestLongitude = value;
                    OnPropertyChanged( );
                }
            }
        }

        public double SouthEastLatitude
        {
            get => GetData( ).SouthEastLatitude;
            set
            {
                var data = GetData( );
                if( data.SouthEastLatitude != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.SouthEastLatitude = value;
                    OnPropertyChanged( );
                }
            }
        }

        public double SouthEastLongitude
        {
            get => GetData( ).SouthEastLongitude;
            set
            {
                var data = GetData( );
                if( data.SouthEastLongitude != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.SouthEastLongitude = value;
                    OnPropertyChanged( );
                }
            }
        }

        public byte[] Image
        {
            get => GetData( ).Image;
            set
            {
                var data = GetData( );
                if( data.Image != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Image = value;
                    OnPropertyChanged( );
                }
            }
        }

    }

    public class MapServiceOptionsEntity : BaseEntity<Kind>
    {
        public MapServiceOptionsEntity( [DisallowNull] EntityContext entityContext, [DisallowNull] MapServiceOptionsObject data )
            : base( entityContext, data )
        {
        }

        public EntityContext? Context => (EntityContext?)_Context;

        protected EntityContext CheckedContext
        {
            get
            {
                var context = Context;
                if ( context is null )
                {
                    throw new InvalidOperationException( "Context is null" );
                }
                return context;
            }
        }

        private MapServiceOptionsObject GetData( ) 
        {
            return (MapServiceOptionsObject)base._GetData( );
        }

        public DateTime Timestamp
        {
            get => GetData( ).Timestamp;
            set
            {
                var data = GetData( );
                if( data.Timestamp != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Timestamp = value;
                    OnPropertyChanged( );
                }
            }
        }

        public string IpAddress
        {
            get => GetData( ).IpAddress;
            set
            {
                var data = GetData( );
                if( data.IpAddress != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.IpAddress = value;
                    OnPropertyChanged( );
                }
            }
        }

        public int Port
        {
            get => GetData( ).Port;
            set
            {
                var data = GetData( );
                if( data.Port != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Port = value;
                    OnPropertyChanged( );
                }
            }
        }

        public double ImageScaleFactorX
        {
            get => GetData( ).ImageScaleFactorX;
            set
            {
                var data = GetData( );
                if( data.ImageScaleFactorX != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.ImageScaleFactorX = value;
                    OnPropertyChanged( );
                }
            }
        }

        public double ImageOffsetX
        {
            get => GetData( ).ImageOffsetX;
            set
            {
                var data = GetData( );
                if( data.ImageOffsetX != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.ImageOffsetX = value;
                    OnPropertyChanged( );
                }
            }
        }

        public double ImageScaleFactorY
        {
            get => GetData( ).ImageScaleFactorY;
            set
            {
                var data = GetData( );
                if( data.ImageScaleFactorY != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.ImageScaleFactorY = value;
                    OnPropertyChanged( );
                }
            }
        }

        public double ImageOffsetY
        {
            get => GetData( ).ImageOffsetY;
            set
            {
                var data = GetData( );
                if( data.ImageOffsetY != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.ImageOffsetY = value;
                    OnPropertyChanged( );
                }
            }
        }

    }

    public class MaritimeIdentificationDigitsEntity : BaseEntity<Kind>
    {
        WeakReference? _countryReference = null;
        public MaritimeIdentificationDigitsEntity( [DisallowNull] EntityContext entityContext, [DisallowNull] MaritimeIdentificationDigitsObject data )
            : base( entityContext, data )
        {
        }

        public EntityContext? Context => (EntityContext?)_Context;

        protected EntityContext CheckedContext
        {
            get
            {
                var context = Context;
                if ( context is null )
                {
                    throw new InvalidOperationException( "Context is null" );
                }
                return context;
            }
        }

        private MaritimeIdentificationDigitsObject GetData( ) 
        {
            return (MaritimeIdentificationDigitsObject)base._GetData( );
        }

        public int Code
        {
            get => GetData( ).Code;
            set
            {
                var data = GetData( );
                if( data.Code != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Code = value;
                    OnPropertyChanged( );
                }
            }
        }

        public Guid CountryId
        {
            get => GetData( ).Country;
            set
            {
                var data = GetData( );
                if( data.Country != value )
                {
                    OnPropertyChanging( );
                    OnPropertyChanging( "Country", false );
                    data = GetData( );
                    data.Country = value;
                    OnPropertyChanged( );
                    OnPropertyChanged( "Country" );
                }
            }
        }

        public CountryEntity Country
        {
            get
            {
                if(_countryReference != null)
                {
                    var result = (CountryEntity?)_countryReference.Target;
                    if( result != null )
                    {
                        return result;
                    }
                }
                var data = GetData( );
                var context = CheckedContext;
                var entity = context.GetCountryById( data.Country );
                if( entity != null )
                {
                    _countryReference = new WeakReference( entity );
                }
                else
                {
                    var message = $"Cannot find the CountryEntity object identified by {data.Country}";
                    throw new Exception( message );
                }
                return entity;
            }
            set
            {
                CountryId = value != null? value.Id : Guid.Empty;
            }
        }

    }

    public class MediaProxySessionEntity : BaseEntity<Kind>
    {
        WeakReference? _serviceReference = null;
        WeakReference? _enabledTimeseriesReference = null;
        public MediaProxySessionEntity( [DisallowNull] EntityContext entityContext, [DisallowNull] MediaProxySessionObject data )
            : base( entityContext, data )
        {
        }

        public EntityContext? Context => (EntityContext?)_Context;

        protected EntityContext CheckedContext
        {
            get
            {
                var context = Context;
                if ( context is null )
                {
                    throw new InvalidOperationException( "Context is null" );
                }
                return context;
            }
        }

        private MediaProxySessionObject GetData( ) 
        {
            return (MediaProxySessionObject)base._GetData( );
        }

        public Guid ServiceId
        {
            get => GetData( ).Service;
            set
            {
                var data = GetData( );
                if( data.Service != value )
                {
                    OnPropertyChanging( );
                    OnPropertyChanging( "Service", false );
                    data = GetData( );
                    data.Service = value;
                    OnPropertyChanged( );
                    OnPropertyChanged( "Service" );
                }
            }
        }

        public MediaServiceEntity Service
        {
            get
            {
                if(_serviceReference != null)
                {
                    var result = (MediaServiceEntity?)_serviceReference.Target;
                    if( result != null )
                    {
                        return result;
                    }
                }
                var data = GetData( );
                var context = CheckedContext;
                var entity = context.GetMediaServiceById( data.Service );
                if( entity != null )
                {
                    _serviceReference = new WeakReference( entity );
                }
                else
                {
                    var message = $"Cannot find the MediaServiceEntity object identified by {data.Service}";
                    throw new Exception( message );
                }
                return entity;
            }
            set
            {
                ServiceId = value != null? value.Id : Guid.Empty;
            }
        }

        public string Name
        {
            get => GetData( ).Name;
            set
            {
                var data = GetData( );
                if( data.Name != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Name = value;
                    OnPropertyChanged( );
                }
            }
        }

        public Guid? EnabledTimeseriesId
        {
            get => GetData( ).EnabledTimeseries;
            set
            {
                var data = GetData( );
                if( data.EnabledTimeseries != value )
                {
                    OnPropertyChanging( );
                    OnPropertyChanging( "EnabledTimeseries", false );
                    data = GetData( );
                    data.EnabledTimeseries = value;
                    OnPropertyChanged( );
                    OnPropertyChanged( "EnabledTimeseries" );
                }
            }
        }

        public MediaProxySessionEnabledTimeseriesEntity? EnabledTimeseries
        {
            get
            {
                if(_enabledTimeseriesReference != null)
                {
                    var result = (MediaProxySessionEnabledTimeseriesEntity?)_enabledTimeseriesReference.Target;
                    if( result != null )
                    {
                        return result;
                    }
                }
                var data = GetData( );
                var context = CheckedContext;
                if( data.EnabledTimeseries is Guid enabledTimeseriesId )
                {
                    var entity = context.GetMediaProxySessionEnabledTimeseriesById( enabledTimeseriesId );
                    if( entity != null )
                    {
                        _enabledTimeseriesReference = new WeakReference( entity );
                    }
                    return entity;
                }
                return null;
            }
            set
            {
                EnabledTimeseriesId = value != null? value.Id : null;
            }
        }

    }

    public class MediaProxySessionFileEntity : BaseEntity<Kind>
    {
        WeakReference? _proxySessionReference = null;
        public MediaProxySessionFileEntity( [DisallowNull] EntityContext entityContext, [DisallowNull] MediaProxySessionFileObject data )
            : base( entityContext, data )
        {
        }

        public EntityContext? Context => (EntityContext?)_Context;

        protected EntityContext CheckedContext
        {
            get
            {
                var context = Context;
                if ( context is null )
                {
                    throw new InvalidOperationException( "Context is null" );
                }
                return context;
            }
        }

        private MediaProxySessionFileObject GetData( ) 
        {
            return (MediaProxySessionFileObject)base._GetData( );
        }

        public Guid ProxySessionId
        {
            get => GetData( ).ProxySession;
            set
            {
                var data = GetData( );
                if( data.ProxySession != value )
                {
                    OnPropertyChanging( );
                    OnPropertyChanging( "ProxySession", false );
                    data = GetData( );
                    data.ProxySession = value;
                    OnPropertyChanged( );
                    OnPropertyChanged( "ProxySession" );
                }
            }
        }

        public MediaProxySessionEntity ProxySession
        {
            get
            {
                if(_proxySessionReference != null)
                {
                    var result = (MediaProxySessionEntity?)_proxySessionReference.Target;
                    if( result != null )
                    {
                        return result;
                    }
                }
                var data = GetData( );
                var context = CheckedContext;
                var entity = context.GetMediaProxySessionById( data.ProxySession );
                if( entity != null )
                {
                    _proxySessionReference = new WeakReference( entity );
                }
                else
                {
                    var message = $"Cannot find the MediaProxySessionEntity object identified by {data.ProxySession}";
                    throw new Exception( message );
                }
                return entity;
            }
            set
            {
                ProxySessionId = value != null? value.Id : Guid.Empty;
            }
        }

        public DateTime Timestamp
        {
            get => GetData( ).Timestamp;
            set
            {
                var data = GetData( );
                if( data.Timestamp != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Timestamp = value;
                    OnPropertyChanged( );
                }
            }
        }

        public string StreamName
        {
            get => GetData( ).StreamName;
            set
            {
                var data = GetData( );
                if( data.StreamName != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.StreamName = value;
                    OnPropertyChanged( );
                }
            }
        }

    }

    public class MediaProxySessionOptionsEntity : BaseEntity<Kind>
    {
        WeakReference? _proxySessionReference = null;
        public MediaProxySessionOptionsEntity( [DisallowNull] EntityContext entityContext, [DisallowNull] MediaProxySessionOptionsObject data )
            : base( entityContext, data )
        {
        }

        public EntityContext? Context => (EntityContext?)_Context;

        protected EntityContext CheckedContext
        {
            get
            {
                var context = Context;
                if ( context is null )
                {
                    throw new InvalidOperationException( "Context is null" );
                }
                return context;
            }
        }

        private MediaProxySessionOptionsObject GetData( ) 
        {
            return (MediaProxySessionOptionsObject)base._GetData( );
        }

        public Guid ProxySessionId
        {
            get => GetData( ).ProxySession;
            set
            {
                var data = GetData( );
                if( data.ProxySession != value )
                {
                    OnPropertyChanging( );
                    OnPropertyChanging( "ProxySession", false );
                    data = GetData( );
                    data.ProxySession = value;
                    OnPropertyChanged( );
                    OnPropertyChanged( "ProxySession" );
                }
            }
        }

        public MediaProxySessionEntity ProxySession
        {
            get
            {
                if(_proxySessionReference != null)
                {
                    var result = (MediaProxySessionEntity?)_proxySessionReference.Target;
                    if( result != null )
                    {
                        return result;
                    }
                }
                var data = GetData( );
                var context = CheckedContext;
                var entity = context.GetMediaProxySessionById( data.ProxySession );
                if( entity != null )
                {
                    _proxySessionReference = new WeakReference( entity );
                }
                else
                {
                    var message = $"Cannot find the MediaProxySessionEntity object identified by {data.ProxySession}";
                    throw new Exception( message );
                }
                return entity;
            }
            set
            {
                ProxySessionId = value != null? value.Id : Guid.Empty;
            }
        }

        public DateTime Timestamp
        {
            get => GetData( ).Timestamp;
            set
            {
                var data = GetData( );
                if( data.Timestamp != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Timestamp = value;
                    OnPropertyChanged( );
                }
            }
        }

        public string SourceStreamUrl
        {
            get => GetData( ).SourceStreamUrl;
            set
            {
                var data = GetData( );
                if( data.SourceStreamUrl != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.SourceStreamUrl = value;
                    OnPropertyChanged( );
                }
            }
        }

        public string StreamName
        {
            get => GetData( ).StreamName;
            set
            {
                var data = GetData( );
                if( data.StreamName != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.StreamName = value;
                    OnPropertyChanged( );
                }
            }
        }

        public Types.MediaProxySessionMode Mode
        {
            get => GetData( ).Mode;
            set
            {
                var data = GetData( );
                if( data.Mode != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Mode = value;
                    OnPropertyChanged( );
                }
            }
        }

        public int TunnelOverHTTPPortNumber
        {
            get => GetData( ).TunnelOverHTTPPortNumber;
            set
            {
                var data = GetData( );
                if( data.TunnelOverHTTPPortNumber != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.TunnelOverHTTPPortNumber = value;
                    OnPropertyChanged( );
                }
            }
        }

        public string Username
        {
            get => GetData( ).Username;
            set
            {
                var data = GetData( );
                if( data.Username != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Username = value;
                    OnPropertyChanged( );
                }
            }
        }

        public string Password
        {
            get => GetData( ).Password;
            set
            {
                var data = GetData( );
                if( data.Password != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Password = value;
                    OnPropertyChanged( );
                }
            }
        }

        public int RecorderPortNumber
        {
            get => GetData( ).RecorderPortNumber;
            set
            {
                var data = GetData( );
                if( data.RecorderPortNumber != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.RecorderPortNumber = value;
                    OnPropertyChanged( );
                }
            }
        }

        public Types.MediaProxySessionType SessionType
        {
            get => GetData( ).SessionType;
            set
            {
                var data = GetData( );
                if( data.SessionType != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.SessionType = value;
                    OnPropertyChanged( );
                }
            }
        }

        public TimeSpan MaxFileTime
        {
            get => GetData( ).MaxFileTime;
            set
            {
                var data = GetData( );
                if( data.MaxFileTime != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.MaxFileTime = value;
                    OnPropertyChanged( );
                }
            }
        }

        public TimeSpan MaxFileRetention
        {
            get => GetData( ).MaxFileRetention;
            set
            {
                var data = GetData( );
                if( data.MaxFileRetention != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.MaxFileRetention = value;
                    OnPropertyChanged( );
                }
            }
        }

        public string VideoDirectory
        {
            get => GetData( ).VideoDirectory;
            set
            {
                var data = GetData( );
                if( data.VideoDirectory != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.VideoDirectory = value;
                    OnPropertyChanged( );
                }
            }
        }

    }

    public class MediaServiceEntity : BaseEntity<Kind>
    {
        WeakReference? _enabledTimeseriesReference = null;
        public MediaServiceEntity( [DisallowNull] EntityContext entityContext, [DisallowNull] MediaServiceObject data )
            : base( entityContext, data )
        {
        }

        public EntityContext? Context => (EntityContext?)_Context;

        protected EntityContext CheckedContext
        {
            get
            {
                var context = Context;
                if ( context is null )
                {
                    throw new InvalidOperationException( "Context is null" );
                }
                return context;
            }
        }

        private MediaServiceObject GetData( ) 
        {
            return (MediaServiceObject)base._GetData( );
        }

        public Guid? EnabledTimeseriesId
        {
            get => GetData( ).EnabledTimeseries;
            set
            {
                var data = GetData( );
                if( data.EnabledTimeseries != value )
                {
                    OnPropertyChanging( );
                    OnPropertyChanging( "EnabledTimeseries", false );
                    data = GetData( );
                    data.EnabledTimeseries = value;
                    OnPropertyChanged( );
                    OnPropertyChanged( "EnabledTimeseries" );
                }
            }
        }

        public MediaServiceEnabledTimeseriesEntity? EnabledTimeseries
        {
            get
            {
                if(_enabledTimeseriesReference != null)
                {
                    var result = (MediaServiceEnabledTimeseriesEntity?)_enabledTimeseriesReference.Target;
                    if( result != null )
                    {
                        return result;
                    }
                }
                var data = GetData( );
                var context = CheckedContext;
                if( data.EnabledTimeseries is Guid enabledTimeseriesId )
                {
                    var entity = context.GetMediaServiceEnabledTimeseriesById( enabledTimeseriesId );
                    if( entity != null )
                    {
                        _enabledTimeseriesReference = new WeakReference( entity );
                    }
                    return entity;
                }
                return null;
            }
            set
            {
                EnabledTimeseriesId = value != null? value.Id : null;
            }
        }

    }

    public class MediaServiceOptionsEntity : BaseEntity<Kind>
    {
        WeakReference? _mediaServiceReference = null;
        public MediaServiceOptionsEntity( [DisallowNull] EntityContext entityContext, [DisallowNull] MediaServiceOptionsObject data )
            : base( entityContext, data )
        {
        }

        public EntityContext? Context => (EntityContext?)_Context;

        protected EntityContext CheckedContext
        {
            get
            {
                var context = Context;
                if ( context is null )
                {
                    throw new InvalidOperationException( "Context is null" );
                }
                return context;
            }
        }

        private MediaServiceOptionsObject GetData( ) 
        {
            return (MediaServiceOptionsObject)base._GetData( );
        }

        public Guid MediaServiceId
        {
            get => GetData( ).MediaService;
            set
            {
                var data = GetData( );
                if( data.MediaService != value )
                {
                    OnPropertyChanging( );
                    OnPropertyChanging( "MediaService", false );
                    data = GetData( );
                    data.MediaService = value;
                    OnPropertyChanged( );
                    OnPropertyChanged( "MediaService" );
                }
            }
        }

        public MediaServiceEntity MediaService
        {
            get
            {
                if(_mediaServiceReference != null)
                {
                    var result = (MediaServiceEntity?)_mediaServiceReference.Target;
                    if( result != null )
                    {
                        return result;
                    }
                }
                var data = GetData( );
                var context = CheckedContext;
                var entity = context.GetMediaServiceById( data.MediaService );
                if( entity != null )
                {
                    _mediaServiceReference = new WeakReference( entity );
                }
                else
                {
                    var message = $"Cannot find the MediaServiceEntity object identified by {data.MediaService}";
                    throw new Exception( message );
                }
                return entity;
            }
            set
            {
                MediaServiceId = value != null? value.Id : Guid.Empty;
            }
        }

        public DateTime Timestamp
        {
            get => GetData( ).Timestamp;
            set
            {
                var data = GetData( );
                if( data.Timestamp != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Timestamp = value;
                    OnPropertyChanged( );
                }
            }
        }

        public int RtspPortNumber
        {
            get => GetData( ).RtspPortNumber;
            set
            {
                var data = GetData( );
                if( data.RtspPortNumber != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.RtspPortNumber = value;
                    OnPropertyChanged( );
                }
            }
        }

        public int HttpPortNumber
        {
            get => GetData( ).HttpPortNumber;
            set
            {
                var data = GetData( );
                if( data.HttpPortNumber != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.HttpPortNumber = value;
                    OnPropertyChanged( );
                }
            }
        }

    }

    public abstract class NamespaceElementEntity : BaseEntity<Kind>
    {
        WeakReference? _namespaceReference = null;
        protected NamespaceElementEntity( [DisallowNull] EntityContext entityContext, [DisallowNull] NamespaceElementObject data )
            : base( entityContext, data )
        {
        }

        public EntityContext? Context => (EntityContext?)_Context;

        protected EntityContext CheckedContext
        {
            get
            {
                var context = Context;
                if ( context is null )
                {
                    throw new InvalidOperationException( "Context is null" );
                }
                return context;
            }
        }

        private NamespaceElementObject GetData( ) 
        {
            return (NamespaceElementObject)base._GetData( );
        }

        public Guid NamespaceId
        {
            get => GetData( ).Namespace;
            set
            {
                var data = GetData( );
                if( data.Namespace != value )
                {
                    OnPropertyChanging( );
                    OnPropertyChanging( "Namespace", false );
                    data = GetData( );
                    data.Namespace = value;
                    OnPropertyChanged( );
                    OnPropertyChanged( "Namespace" );
                }
            }
        }

        public NamespaceEntity Namespace
        {
            get
            {
                if(_namespaceReference != null)
                {
                    var result = (NamespaceEntity?)_namespaceReference.Target;
                    if( result != null )
                    {
                        return result;
                    }
                }
                var data = GetData( );
                var context = CheckedContext;
                var entity = context.GetNamespaceById( data.Namespace );
                if( entity != null )
                {
                    _namespaceReference = new WeakReference( entity );
                }
                else
                {
                    var message = $"Cannot find the NamespaceEntity object identified by {data.Namespace}";
                    throw new Exception( message );
                }
                return entity;
            }
            set
            {
                NamespaceId = value != null? value.Id : Guid.Empty;
            }
        }

        public string Name
        {
            get => GetData( ).Name;
            set
            {
                var data = GetData( );
                if( data.Name != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Name = value;
                    OnPropertyChanged( );
                }
            }
        }

        public string Description
        {
            get => GetData( ).Description;
            set
            {
                var data = GetData( );
                if( data.Description != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Description = value;
                    OnPropertyChanged( );
                }
            }
        }

    }

    public class ElementTypeEntity : NamespaceElementEntity
    {
        public ElementTypeEntity( [DisallowNull] EntityContext entityContext, [DisallowNull] ElementTypeObject data )
            : base( entityContext, data )
        {
        }

        private ElementTypeObject GetData( ) 
        {
            return (ElementTypeObject)base._GetData( );
        }

    }

    public class NamespaceEntity : NamespaceElementEntity
    {
        public NamespaceEntity( [DisallowNull] EntityContext entityContext, [DisallowNull] NamespaceObject data )
            : base( entityContext, data )
        {
        }

        private NamespaceObject GetData( ) 
        {
            return (NamespaceObject)base._GetData( );
        }

    }

    public class OilSpillEntity : BaseEntity<Kind>
    {
        WeakReference? _oilSpillDetectorReference = null;
        public OilSpillEntity( [DisallowNull] EntityContext entityContext, [DisallowNull] OilSpillObject data )
            : base( entityContext, data )
        {
        }

        public EntityContext? Context => (EntityContext?)_Context;

        protected EntityContext CheckedContext
        {
            get
            {
                var context = Context;
                if ( context is null )
                {
                    throw new InvalidOperationException( "Context is null" );
                }
                return context;
            }
        }

        private OilSpillObject GetData( ) 
        {
            return (OilSpillObject)base._GetData( );
        }

        public Guid OilSpillDetectorId
        {
            get => GetData( ).OilSpillDetector;
            set
            {
                var data = GetData( );
                if( data.OilSpillDetector != value )
                {
                    OnPropertyChanging( );
                    OnPropertyChanging( "OilSpillDetector", false );
                    data = GetData( );
                    data.OilSpillDetector = value;
                    OnPropertyChanged( );
                    OnPropertyChanged( "OilSpillDetector" );
                }
            }
        }

        public OilSpillDetectorDeviceEntity OilSpillDetector
        {
            get
            {
                if(_oilSpillDetectorReference != null)
                {
                    var result = (OilSpillDetectorDeviceEntity?)_oilSpillDetectorReference.Target;
                    if( result != null )
                    {
                        return result;
                    }
                }
                var data = GetData( );
                var context = CheckedContext;
                var entity = context.GetOilSpillDetectorDeviceById( data.OilSpillDetector );
                if( entity != null )
                {
                    _oilSpillDetectorReference = new WeakReference( entity );
                }
                else
                {
                    var message = $"Cannot find the OilSpillDetectorDeviceEntity object identified by {data.OilSpillDetector}";
                    throw new Exception( message );
                }
                return entity;
            }
            set
            {
                OilSpillDetectorId = value != null? value.Id : Guid.Empty;
            }
        }

        public DateTime Timestamp
        {
            get => GetData( ).Timestamp;
            set
            {
                var data = GetData( );
                if( data.Timestamp != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Timestamp = value;
                    OnPropertyChanged( );
                }
            }
        }

        public double OilArea
        {
            get => GetData( ).OilArea;
            set
            {
                var data = GetData( );
                if( data.OilArea != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.OilArea = value;
                    OnPropertyChanged( );
                }
            }
        }

        public byte[] Shape
        {
            get => GetData( ).Shape;
            set
            {
                var data = GetData( );
                if( data.Shape != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Shape = value;
                    OnPropertyChanged( );
                }
            }
        }

        public byte[] BSI
        {
            get => GetData( ).BSI;
            set
            {
                var data = GetData( );
                if( data.BSI != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.BSI = value;
                    OnPropertyChanged( );
                }
            }
        }

        public byte[] Oil
        {
            get => GetData( ).Oil;
            set
            {
                var data = GetData( );
                if( data.Oil != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Oil = value;
                    OnPropertyChanged( );
                }
            }
        }

        public byte[] Trace
        {
            get => GetData( ).Trace;
            set
            {
                var data = GetData( );
                if( data.Trace != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Trace = value;
                    OnPropertyChanged( );
                }
            }
        }

    }

    public class OilSpillDetectorCommandEntity : BaseEntity<Kind>
    {
        WeakReference? _oilSpillDetectorReference = null;
        WeakReference? _replyReference = null;
        public OilSpillDetectorCommandEntity( [DisallowNull] EntityContext entityContext, [DisallowNull] OilSpillDetectorCommandObject data )
            : base( entityContext, data )
        {
        }

        public EntityContext? Context => (EntityContext?)_Context;

        protected EntityContext CheckedContext
        {
            get
            {
                var context = Context;
                if ( context is null )
                {
                    throw new InvalidOperationException( "Context is null" );
                }
                return context;
            }
        }

        private OilSpillDetectorCommandObject GetData( ) 
        {
            return (OilSpillDetectorCommandObject)base._GetData( );
        }

        public Guid OilSpillDetectorId
        {
            get => GetData( ).OilSpillDetector;
            set
            {
                var data = GetData( );
                if( data.OilSpillDetector != value )
                {
                    OnPropertyChanging( );
                    OnPropertyChanging( "OilSpillDetector", false );
                    data = GetData( );
                    data.OilSpillDetector = value;
                    OnPropertyChanged( );
                    OnPropertyChanged( "OilSpillDetector" );
                }
            }
        }

        public OilSpillDetectorDeviceEntity OilSpillDetector
        {
            get
            {
                if(_oilSpillDetectorReference != null)
                {
                    var result = (OilSpillDetectorDeviceEntity?)_oilSpillDetectorReference.Target;
                    if( result != null )
                    {
                        return result;
                    }
                }
                var data = GetData( );
                var context = CheckedContext;
                var entity = context.GetOilSpillDetectorDeviceById( data.OilSpillDetector );
                if( entity != null )
                {
                    _oilSpillDetectorReference = new WeakReference( entity );
                }
                else
                {
                    var message = $"Cannot find the OilSpillDetectorDeviceEntity object identified by {data.OilSpillDetector}";
                    throw new Exception( message );
                }
                return entity;
            }
            set
            {
                OilSpillDetectorId = value != null? value.Id : Guid.Empty;
            }
        }

        public DateTime Timestamp
        {
            get => GetData( ).Timestamp;
            set
            {
                var data = GetData( );
                if( data.Timestamp != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Timestamp = value;
                    OnPropertyChanged( );
                }
            }
        }

        public Types.DeviceCommandSourceType DeviceCommandSourceType
        {
            get => GetData( ).DeviceCommandSourceType;
            set
            {
                var data = GetData( );
                if( data.DeviceCommandSourceType != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.DeviceCommandSourceType = value;
                    OnPropertyChanged( );
                }
            }
        }

        public Guid DeviceCommandSourceId
        {
            get => GetData( ).DeviceCommandSourceId;
            set
            {
                var data = GetData( );
                if( data.DeviceCommandSourceId != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.DeviceCommandSourceId = value;
                    OnPropertyChanged( );
                }
            }
        }

        public Guid? ReplyId
        {
            get => GetData( ).Reply;
            set
            {
                var data = GetData( );
                if( data.Reply != value )
                {
                    OnPropertyChanging( );
                    OnPropertyChanging( "Reply", false );
                    data = GetData( );
                    data.Reply = value;
                    OnPropertyChanged( );
                    OnPropertyChanged( "Reply" );
                }
            }
        }

        public OilSpillDetectorCommandReplyEntity? Reply
        {
            get
            {
                if(_replyReference != null)
                {
                    var result = (OilSpillDetectorCommandReplyEntity?)_replyReference.Target;
                    if( result != null )
                    {
                        return result;
                    }
                }
                var data = GetData( );
                var context = CheckedContext;
                if( data.Reply is Guid replyId )
                {
                    var entity = context.GetOilSpillDetectorCommandReplyById( replyId );
                    if( entity != null )
                    {
                        _replyReference = new WeakReference( entity );
                    }
                    return entity;
                }
                return null;
            }
            set
            {
                ReplyId = value != null? value.Id : null;
            }
        }

    }

    public class OilSpillDetectorCommandReplyEntity : BaseEntity<Kind>
    {
        WeakReference? _oilSpillDetectorReference = null;
        WeakReference? _commandReference = null;
        public OilSpillDetectorCommandReplyEntity( [DisallowNull] EntityContext entityContext, [DisallowNull] OilSpillDetectorCommandReplyObject data )
            : base( entityContext, data )
        {
        }

        public EntityContext? Context => (EntityContext?)_Context;

        protected EntityContext CheckedContext
        {
            get
            {
                var context = Context;
                if ( context is null )
                {
                    throw new InvalidOperationException( "Context is null" );
                }
                return context;
            }
        }

        private OilSpillDetectorCommandReplyObject GetData( ) 
        {
            return (OilSpillDetectorCommandReplyObject)base._GetData( );
        }

        public Guid OilSpillDetectorId
        {
            get => GetData( ).OilSpillDetector;
            set
            {
                var data = GetData( );
                if( data.OilSpillDetector != value )
                {
                    OnPropertyChanging( );
                    OnPropertyChanging( "OilSpillDetector", false );
                    data = GetData( );
                    data.OilSpillDetector = value;
                    OnPropertyChanged( );
                    OnPropertyChanged( "OilSpillDetector" );
                }
            }
        }

        public OilSpillDetectorDeviceEntity OilSpillDetector
        {
            get
            {
                if(_oilSpillDetectorReference != null)
                {
                    var result = (OilSpillDetectorDeviceEntity?)_oilSpillDetectorReference.Target;
                    if( result != null )
                    {
                        return result;
                    }
                }
                var data = GetData( );
                var context = CheckedContext;
                var entity = context.GetOilSpillDetectorDeviceById( data.OilSpillDetector );
                if( entity != null )
                {
                    _oilSpillDetectorReference = new WeakReference( entity );
                }
                else
                {
                    var message = $"Cannot find the OilSpillDetectorDeviceEntity object identified by {data.OilSpillDetector}";
                    throw new Exception( message );
                }
                return entity;
            }
            set
            {
                OilSpillDetectorId = value != null? value.Id : Guid.Empty;
            }
        }

        public DateTime Timestamp
        {
            get => GetData( ).Timestamp;
            set
            {
                var data = GetData( );
                if( data.Timestamp != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Timestamp = value;
                    OnPropertyChanged( );
                }
            }
        }

        public Guid? CommandId
        {
            get => GetData( ).Command;
            set
            {
                var data = GetData( );
                if( data.Command != value )
                {
                    OnPropertyChanging( );
                    OnPropertyChanging( "Command", false );
                    data = GetData( );
                    data.Command = value;
                    OnPropertyChanged( );
                    OnPropertyChanged( "Command" );
                }
            }
        }

        public OilSpillDetectorCommandEntity? Command
        {
            get
            {
                if(_commandReference != null)
                {
                    var result = (OilSpillDetectorCommandEntity?)_commandReference.Target;
                    if( result != null )
                    {
                        return result;
                    }
                }
                var data = GetData( );
                var context = CheckedContext;
                if( data.Command is Guid commandId )
                {
                    var entity = context.GetOilSpillDetectorCommandById( commandId );
                    if( entity != null )
                    {
                        _commandReference = new WeakReference( entity );
                    }
                    return entity;
                }
                return null;
            }
            set
            {
                CommandId = value != null? value.Id : null;
            }
        }

        public Types.DeviceCommandReplyStatus Status
        {
            get => GetData( ).Status;
            set
            {
                var data = GetData( );
                if( data.Status != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Status = value;
                    OnPropertyChanged( );
                }
            }
        }

        public string Message
        {
            get => GetData( ).Message;
            set
            {
                var data = GetData( );
                if( data.Message != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Message = value;
                    OnPropertyChanged( );
                }
            }
        }

    }

    public class OilSpillDetectorConfigurationEntity : BaseEntity<Kind>
    {
        WeakReference? _oilSpillDetectorReference = null;
        WeakReference? _targetMMSIReference = null;
        public OilSpillDetectorConfigurationEntity( [DisallowNull] EntityContext entityContext, [DisallowNull] OilSpillDetectorConfigurationObject data )
            : base( entityContext, data )
        {
        }

        public EntityContext? Context => (EntityContext?)_Context;

        protected EntityContext CheckedContext
        {
            get
            {
                var context = Context;
                if ( context is null )
                {
                    throw new InvalidOperationException( "Context is null" );
                }
                return context;
            }
        }

        private OilSpillDetectorConfigurationObject GetData( ) 
        {
            return (OilSpillDetectorConfigurationObject)base._GetData( );
        }

        public Guid OilSpillDetectorId
        {
            get => GetData( ).OilSpillDetector;
            set
            {
                var data = GetData( );
                if( data.OilSpillDetector != value )
                {
                    OnPropertyChanging( );
                    OnPropertyChanging( "OilSpillDetector", false );
                    data = GetData( );
                    data.OilSpillDetector = value;
                    OnPropertyChanged( );
                    OnPropertyChanged( "OilSpillDetector" );
                }
            }
        }

        public OilSpillDetectorDeviceEntity OilSpillDetector
        {
            get
            {
                if(_oilSpillDetectorReference != null)
                {
                    var result = (OilSpillDetectorDeviceEntity?)_oilSpillDetectorReference.Target;
                    if( result != null )
                    {
                        return result;
                    }
                }
                var data = GetData( );
                var context = CheckedContext;
                var entity = context.GetOilSpillDetectorDeviceById( data.OilSpillDetector );
                if( entity != null )
                {
                    _oilSpillDetectorReference = new WeakReference( entity );
                }
                else
                {
                    var message = $"Cannot find the OilSpillDetectorDeviceEntity object identified by {data.OilSpillDetector}";
                    throw new Exception( message );
                }
                return entity;
            }
            set
            {
                OilSpillDetectorId = value != null? value.Id : Guid.Empty;
            }
        }

        public DateTime Timestamp
        {
            get => GetData( ).Timestamp;
            set
            {
                var data = GetData( );
                if( data.Timestamp != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Timestamp = value;
                    OnPropertyChanged( );
                }
            }
        }

        public double Range
        {
            get => GetData( ).Range;
            set
            {
                var data = GetData( );
                if( data.Range != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Range = value;
                    OnPropertyChanged( );
                }
            }
        }

        public double StartAngle
        {
            get => GetData( ).StartAngle;
            set
            {
                var data = GetData( );
                if( data.StartAngle != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.StartAngle = value;
                    OnPropertyChanged( );
                }
            }
        }

        public double EndAngle
        {
            get => GetData( ).EndAngle;
            set
            {
                var data = GetData( );
                if( data.EndAngle != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.EndAngle = value;
                    OnPropertyChanged( );
                }
            }
        }

        public double StartRange
        {
            get => GetData( ).StartRange;
            set
            {
                var data = GetData( );
                if( data.StartRange != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.StartRange = value;
                    OnPropertyChanged( );
                }
            }
        }

        public double EndRange
        {
            get => GetData( ).EndRange;
            set
            {
                var data = GetData( );
                if( data.EndRange != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.EndRange = value;
                    OnPropertyChanged( );
                }
            }
        }

        public int UpdateRate
        {
            get => GetData( ).UpdateRate;
            set
            {
                var data = GetData( );
                if( data.UpdateRate != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.UpdateRate = value;
                    OnPropertyChanged( );
                }
            }
        }

        public TimeSpan StatusSendTime
        {
            get => GetData( ).StatusSendTime;
            set
            {
                var data = GetData( );
                if( data.StatusSendTime != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.StatusSendTime = value;
                    OnPropertyChanged( );
                }
            }
        }

        public bool DrawBorder
        {
            get => GetData( ).DrawBorder;
            set
            {
                var data = GetData( );
                if( data.DrawBorder != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.DrawBorder = value;
                    OnPropertyChanged( );
                }
            }
        }

        public byte[] Colors
        {
            get => GetData( ).Colors;
            set
            {
                var data = GetData( );
                if( data.Colors != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Colors = value;
                    OnPropertyChanged( );
                }
            }
        }

        public bool SendToServer
        {
            get => GetData( ).SendToServer;
            set
            {
                var data = GetData( );
                if( data.SendToServer != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.SendToServer = value;
                    OnPropertyChanged( );
                }
            }
        }

        public string Directory
        {
            get => GetData( ).Directory;
            set
            {
                var data = GetData( );
                if( data.Directory != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Directory = value;
                    OnPropertyChanged( );
                }
            }
        }

        public bool TransparentWater
        {
            get => GetData( ).TransparentWater;
            set
            {
                var data = GetData( );
                if( data.TransparentWater != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.TransparentWater = value;
                    OnPropertyChanged( );
                }
            }
        }

        public bool SavePictures
        {
            get => GetData( ).SavePictures;
            set
            {
                var data = GetData( );
                if( data.SavePictures != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.SavePictures = value;
                    OnPropertyChanged( );
                }
            }
        }

        public bool SendAsTarget
        {
            get => GetData( ).SendAsTarget;
            set
            {
                var data = GetData( );
                if( data.SendAsTarget != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.SendAsTarget = value;
                    OnPropertyChanged( );
                }
            }
        }

        public bool WriteLog
        {
            get => GetData( ).WriteLog;
            set
            {
                var data = GetData( );
                if( data.WriteLog != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.WriteLog = value;
                    OnPropertyChanged( );
                }
            }
        }

        public string TargetFilePrefix
        {
            get => GetData( ).TargetFilePrefix;
            set
            {
                var data = GetData( );
                if( data.TargetFilePrefix != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.TargetFilePrefix = value;
                    OnPropertyChanged( );
                }
            }
        }

        public Guid? TargetMMSIId
        {
            get => GetData( ).TargetMMSI;
            set
            {
                var data = GetData( );
                if( data.TargetMMSI != value )
                {
                    OnPropertyChanging( );
                    OnPropertyChanging( "TargetMMSI", false );
                    data = GetData( );
                    data.TargetMMSI = value;
                    OnPropertyChanged( );
                    OnPropertyChanged( "TargetMMSI" );
                }
            }
        }

        public MaritimeMobileServiceIdentityEntity? TargetMMSI
        {
            get
            {
                if(_targetMMSIReference != null)
                {
                    var result = (MaritimeMobileServiceIdentityEntity?)_targetMMSIReference.Target;
                    if( result != null )
                    {
                        return result;
                    }
                }
                var data = GetData( );
                var context = CheckedContext;
                if( data.TargetMMSI is Guid targetMMSIId )
                {
                    var entity = context.GetMaritimeMobileServiceIdentityById( targetMMSIId );
                    if( entity != null )
                    {
                        _targetMMSIReference = new WeakReference( entity );
                    }
                    return entity;
                }
                return null;
            }
            set
            {
                TargetMMSIId = value != null? value.Id : null;
            }
        }

        public double Latitude
        {
            get => GetData( ).Latitude;
            set
            {
                var data = GetData( );
                if( data.Latitude != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Latitude = value;
                    OnPropertyChanged( );
                }
            }
        }

        public double Longitude
        {
            get => GetData( ).Longitude;
            set
            {
                var data = GetData( );
                if( data.Longitude != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Longitude = value;
                    OnPropertyChanged( );
                }
            }
        }

        public bool TestSourceEnabled
        {
            get => GetData( ).TestSourceEnabled;
            set
            {
                var data = GetData( );
                if( data.TestSourceEnabled != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.TestSourceEnabled = value;
                    OnPropertyChanged( );
                }
            }
        }

        public string ProxyServer
        {
            get => GetData( ).ProxyServer;
            set
            {
                var data = GetData( );
                if( data.ProxyServer != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.ProxyServer = value;
                    OnPropertyChanged( );
                }
            }
        }

        public bool UseProxyServer
        {
            get => GetData( ).UseProxyServer;
            set
            {
                var data = GetData( );
                if( data.UseProxyServer != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.UseProxyServer = value;
                    OnPropertyChanged( );
                }
            }
        }

    }

    public class Position2DTimeseriesValueEntity : BaseEntity<Kind>
    {
        WeakReference? _timeseriesReference = null;
        public Position2DTimeseriesValueEntity( [DisallowNull] EntityContext entityContext, [DisallowNull] Position2DTimeseriesValueObject data )
            : base( entityContext, data )
        {
        }

        public EntityContext? Context => (EntityContext?)_Context;

        protected EntityContext CheckedContext
        {
            get
            {
                var context = Context;
                if ( context is null )
                {
                    throw new InvalidOperationException( "Context is null" );
                }
                return context;
            }
        }

        private Position2DTimeseriesValueObject GetData( ) 
        {
            return (Position2DTimeseriesValueObject)base._GetData( );
        }

        public Guid TimeseriesId
        {
            get => GetData( ).Timeseries;
            set
            {
                var data = GetData( );
                if( data.Timeseries != value )
                {
                    OnPropertyChanging( );
                    OnPropertyChanging( "Timeseries", false );
                    data = GetData( );
                    data.Timeseries = value;
                    OnPropertyChanged( );
                    OnPropertyChanged( "Timeseries" );
                }
            }
        }

        public Position2DTimeseriesEntity Timeseries
        {
            get
            {
                if(_timeseriesReference != null)
                {
                    var result = (Position2DTimeseriesEntity?)_timeseriesReference.Target;
                    if( result != null )
                    {
                        return result;
                    }
                }
                var data = GetData( );
                var context = CheckedContext;
                var entity = context.GetPosition2DTimeseriesById( data.Timeseries );
                if( entity != null )
                {
                    _timeseriesReference = new WeakReference( entity );
                }
                else
                {
                    var message = $"Cannot find the Position2DTimeseriesEntity object identified by {data.Timeseries}";
                    throw new Exception( message );
                }
                return entity;
            }
            set
            {
                TimeseriesId = value != null? value.Id : Guid.Empty;
            }
        }

        public DateTime Timestamp
        {
            get => GetData( ).Timestamp;
            set
            {
                var data = GetData( );
                if( data.Timestamp != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Timestamp = value;
                    OnPropertyChanged( );
                }
            }
        }

        public double? X
        {
            get => GetData( ).X;
            set
            {
                var data = GetData( );
                if( data.X != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.X = value;
                    OnPropertyChanged( );
                }
            }
        }

        public double? Y
        {
            get => GetData( ).Y;
            set
            {
                var data = GetData( );
                if( data.Y != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Y = value;
                    OnPropertyChanged( );
                }
            }
        }

    }

    public class Position3DTimeseriesValueEntity : BaseEntity<Kind>
    {
        WeakReference? _timeseriesReference = null;
        public Position3DTimeseriesValueEntity( [DisallowNull] EntityContext entityContext, [DisallowNull] Position3DTimeseriesValueObject data )
            : base( entityContext, data )
        {
        }

        public EntityContext? Context => (EntityContext?)_Context;

        protected EntityContext CheckedContext
        {
            get
            {
                var context = Context;
                if ( context is null )
                {
                    throw new InvalidOperationException( "Context is null" );
                }
                return context;
            }
        }

        private Position3DTimeseriesValueObject GetData( ) 
        {
            return (Position3DTimeseriesValueObject)base._GetData( );
        }

        public Guid TimeseriesId
        {
            get => GetData( ).Timeseries;
            set
            {
                var data = GetData( );
                if( data.Timeseries != value )
                {
                    OnPropertyChanging( );
                    OnPropertyChanging( "Timeseries", false );
                    data = GetData( );
                    data.Timeseries = value;
                    OnPropertyChanged( );
                    OnPropertyChanged( "Timeseries" );
                }
            }
        }

        public Position3DTimeseriesEntity Timeseries
        {
            get
            {
                if(_timeseriesReference != null)
                {
                    var result = (Position3DTimeseriesEntity?)_timeseriesReference.Target;
                    if( result != null )
                    {
                        return result;
                    }
                }
                var data = GetData( );
                var context = CheckedContext;
                var entity = context.GetPosition3DTimeseriesById( data.Timeseries );
                if( entity != null )
                {
                    _timeseriesReference = new WeakReference( entity );
                }
                else
                {
                    var message = $"Cannot find the Position3DTimeseriesEntity object identified by {data.Timeseries}";
                    throw new Exception( message );
                }
                return entity;
            }
            set
            {
                TimeseriesId = value != null? value.Id : Guid.Empty;
            }
        }

        public DateTime Timestamp
        {
            get => GetData( ).Timestamp;
            set
            {
                var data = GetData( );
                if( data.Timestamp != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Timestamp = value;
                    OnPropertyChanged( );
                }
            }
        }

        public double? X
        {
            get => GetData( ).X;
            set
            {
                var data = GetData( );
                if( data.X != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.X = value;
                    OnPropertyChanged( );
                }
            }
        }

        public double? Y
        {
            get => GetData( ).Y;
            set
            {
                var data = GetData( );
                if( data.Y != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Y = value;
                    OnPropertyChanged( );
                }
            }
        }

        public double? Z
        {
            get => GetData( ).Z;
            set
            {
                var data = GetData( );
                if( data.Z != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Z = value;
                    OnPropertyChanged( );
                }
            }
        }

    }

    public class ProcessTrackValueResultEntity : BaseEntity<Kind>
    {
        public ProcessTrackValueResultEntity( [DisallowNull] EntityContext entityContext, [DisallowNull] ProcessTrackValueResultObject data )
            : base( entityContext, data )
        {
        }

        public EntityContext? Context => (EntityContext?)_Context;

        protected EntityContext CheckedContext
        {
            get
            {
                var context = Context;
                if ( context is null )
                {
                    throw new InvalidOperationException( "Context is null" );
                }
                return context;
            }
        }

        private ProcessTrackValueResultObject GetData( ) 
        {
            return (ProcessTrackValueResultObject)base._GetData( );
        }

        public bool CreatedNewTrack
        {
            get => GetData( ).CreatedNewTrack;
            set
            {
                var data = GetData( );
                if( data.CreatedNewTrack != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.CreatedNewTrack = value;
                    OnPropertyChanged( );
                }
            }
        }

        public Guid TrackId
        {
            get => GetData( ).TrackId;
            set
            {
                var data = GetData( );
                if( data.TrackId != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.TrackId = value;
                    OnPropertyChanged( );
                }
            }
        }

    }

    public abstract class PropertyEntity : BaseEntity<Kind>
    {
        WeakReference? _elementReference = null;
        WeakReference? _definitionReference = null;
        protected PropertyEntity( [DisallowNull] EntityContext entityContext, [DisallowNull] PropertyObject data )
            : base( entityContext, data )
        {
        }

        public EntityContext? Context => (EntityContext?)_Context;

        protected EntityContext CheckedContext
        {
            get
            {
                var context = Context;
                if ( context is null )
                {
                    throw new InvalidOperationException( "Context is null" );
                }
                return context;
            }
        }

        private PropertyObject GetData( ) 
        {
            return (PropertyObject)base._GetData( );
        }

        public Guid ElementId
        {
            get => GetData( ).Element;
            set
            {
                var data = GetData( );
                if( data.Element != value )
                {
                    OnPropertyChanging( );
                    OnPropertyChanging( "Element", false );
                    data = GetData( );
                    data.Element = value;
                    OnPropertyChanged( );
                    OnPropertyChanged( "Element" );
                }
            }
        }

        public ElementEntity Element
        {
            get
            {
                if(_elementReference != null)
                {
                    var result = (ElementEntity?)_elementReference.Target;
                    if( result != null )
                    {
                        return result;
                    }
                }
                var data = GetData( );
                var context = CheckedContext;
                var entity = context.GetElementById( data.Element );
                if( entity != null )
                {
                    _elementReference = new WeakReference( entity );
                }
                else
                {
                    var message = $"Cannot find the ElementEntity object identified by {data.Element}";
                    throw new Exception( message );
                }
                return entity;
            }
            set
            {
                ElementId = value != null? value.Id : Guid.Empty;
            }
        }

        public Guid DefinitionId
        {
            get => GetData( ).Definition;
            set
            {
                var data = GetData( );
                if( data.Definition != value )
                {
                    OnPropertyChanging( );
                    OnPropertyChanging( "Definition", false );
                    data = GetData( );
                    data.Definition = value;
                    OnPropertyChanged( );
                    OnPropertyChanged( "Definition" );
                }
            }
        }

        public PropertyDefinitionEntity Definition
        {
            get
            {
                if(_definitionReference != null)
                {
                    var result = (PropertyDefinitionEntity?)_definitionReference.Target;
                    if( result != null )
                    {
                        return result;
                    }
                }
                var data = GetData( );
                var context = CheckedContext;
                var entity = context.GetPropertyDefinitionById( data.Definition );
                if( entity != null )
                {
                    _definitionReference = new WeakReference( entity );
                }
                else
                {
                    var message = $"Cannot find the PropertyDefinitionEntity object identified by {data.Definition}";
                    throw new Exception( message );
                }
                return entity;
            }
            set
            {
                DefinitionId = value != null? value.Id : Guid.Empty;
            }
        }

    }

    public class BinaryPropertyEntity : PropertyEntity
    {
        public BinaryPropertyEntity( [DisallowNull] EntityContext entityContext, [DisallowNull] BinaryPropertyObject data )
            : base( entityContext, data )
        {
        }

        private BinaryPropertyObject GetData( ) 
        {
            return (BinaryPropertyObject)base._GetData( );
        }

        public byte[] Value
        {
            get => GetData( ).Value;
            set
            {
                var data = GetData( );
                if( data.Value != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Value = value;
                    OnPropertyChanged( );
                }
            }
        }

    }

    public class BooleanPropertyEntity : PropertyEntity
    {
        public BooleanPropertyEntity( [DisallowNull] EntityContext entityContext, [DisallowNull] BooleanPropertyObject data )
            : base( entityContext, data )
        {
        }

        private BooleanPropertyObject GetData( ) 
        {
            return (BooleanPropertyObject)base._GetData( );
        }

        public bool Value
        {
            get => GetData( ).Value;
            set
            {
                var data = GetData( );
                if( data.Value != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Value = value;
                    OnPropertyChanged( );
                }
            }
        }

    }

    public class BytePropertyEntity : PropertyEntity
    {
        public BytePropertyEntity( [DisallowNull] EntityContext entityContext, [DisallowNull] BytePropertyObject data )
            : base( entityContext, data )
        {
        }

        private BytePropertyObject GetData( ) 
        {
            return (BytePropertyObject)base._GetData( );
        }

        public byte Value
        {
            get => GetData( ).Value;
            set
            {
                var data = GetData( );
                if( data.Value != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Value = value;
                    OnPropertyChanged( );
                }
            }
        }

    }

    public class DateTimePropertyEntity : PropertyEntity
    {
        public DateTimePropertyEntity( [DisallowNull] EntityContext entityContext, [DisallowNull] DateTimePropertyObject data )
            : base( entityContext, data )
        {
        }

        private DateTimePropertyObject GetData( ) 
        {
            return (DateTimePropertyObject)base._GetData( );
        }

        public DateTime Value
        {
            get => GetData( ).Value;
            set
            {
                var data = GetData( );
                if( data.Value != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Value = value;
                    OnPropertyChanged( );
                }
            }
        }

    }

    public class DoublePropertyEntity : PropertyEntity
    {
        public DoublePropertyEntity( [DisallowNull] EntityContext entityContext, [DisallowNull] DoublePropertyObject data )
            : base( entityContext, data )
        {
        }

        private DoublePropertyObject GetData( ) 
        {
            return (DoublePropertyObject)base._GetData( );
        }

        public double Value
        {
            get => GetData( ).Value;
            set
            {
                var data = GetData( );
                if( data.Value != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Value = value;
                    OnPropertyChanged( );
                }
            }
        }

    }

    public class GuidPropertyEntity : PropertyEntity
    {
        public GuidPropertyEntity( [DisallowNull] EntityContext entityContext, [DisallowNull] GuidPropertyObject data )
            : base( entityContext, data )
        {
        }

        private GuidPropertyObject GetData( ) 
        {
            return (GuidPropertyObject)base._GetData( );
        }

        public Guid Value
        {
            get => GetData( ).Value;
            set
            {
                var data = GetData( );
                if( data.Value != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Value = value;
                    OnPropertyChanged( );
                }
            }
        }

    }

    public class Int16PropertyEntity : PropertyEntity
    {
        public Int16PropertyEntity( [DisallowNull] EntityContext entityContext, [DisallowNull] Int16PropertyObject data )
            : base( entityContext, data )
        {
        }

        private Int16PropertyObject GetData( ) 
        {
            return (Int16PropertyObject)base._GetData( );
        }

        public short Value
        {
            get => GetData( ).Value;
            set
            {
                var data = GetData( );
                if( data.Value != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Value = value;
                    OnPropertyChanged( );
                }
            }
        }

    }

    public class Int32PropertyEntity : PropertyEntity
    {
        public Int32PropertyEntity( [DisallowNull] EntityContext entityContext, [DisallowNull] Int32PropertyObject data )
            : base( entityContext, data )
        {
        }

        private Int32PropertyObject GetData( ) 
        {
            return (Int32PropertyObject)base._GetData( );
        }

        public int Value
        {
            get => GetData( ).Value;
            set
            {
                var data = GetData( );
                if( data.Value != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Value = value;
                    OnPropertyChanged( );
                }
            }
        }

    }

    public class Int64PropertyEntity : PropertyEntity
    {
        public Int64PropertyEntity( [DisallowNull] EntityContext entityContext, [DisallowNull] Int64PropertyObject data )
            : base( entityContext, data )
        {
        }

        private Int64PropertyObject GetData( ) 
        {
            return (Int64PropertyObject)base._GetData( );
        }

        public long Value
        {
            get => GetData( ).Value;
            set
            {
                var data = GetData( );
                if( data.Value != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Value = value;
                    OnPropertyChanged( );
                }
            }
        }

    }

    public class ReferencePropertyEntity : PropertyEntity
    {
        WeakReference? _valueReference = null;
        public ReferencePropertyEntity( [DisallowNull] EntityContext entityContext, [DisallowNull] ReferencePropertyObject data )
            : base( entityContext, data )
        {
        }

        private ReferencePropertyObject GetData( ) 
        {
            return (ReferencePropertyObject)base._GetData( );
        }

        public Guid? ValueId
        {
            get => GetData( ).Value;
            set
            {
                var data = GetData( );
                if( data.Value != value )
                {
                    OnPropertyChanging( );
                    OnPropertyChanging( "Value", false );
                    data = GetData( );
                    data.Value = value;
                    OnPropertyChanged( );
                    OnPropertyChanged( "Value" );
                }
            }
        }

        public ElementEntity? Value
        {
            get
            {
                if(_valueReference != null)
                {
                    var result = (ElementEntity?)_valueReference.Target;
                    if( result != null )
                    {
                        return result;
                    }
                }
                var data = GetData( );
                var context = CheckedContext;
                if( data.Value is Guid valueId )
                {
                    var entity = context.GetElementById( valueId );
                    if( entity != null )
                    {
                        _valueReference = new WeakReference( entity );
                    }
                    return entity;
                }
                return null;
            }
            set
            {
                ValueId = value != null? value.Id : null;
            }
        }

    }

    public class SBytePropertyEntity : PropertyEntity
    {
        public SBytePropertyEntity( [DisallowNull] EntityContext entityContext, [DisallowNull] SBytePropertyObject data )
            : base( entityContext, data )
        {
        }

        private SBytePropertyObject GetData( ) 
        {
            return (SBytePropertyObject)base._GetData( );
        }

        public sbyte Value
        {
            get => GetData( ).Value;
            set
            {
                var data = GetData( );
                if( data.Value != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Value = value;
                    OnPropertyChanged( );
                }
            }
        }

    }

    public class SinglePropertyEntity : PropertyEntity
    {
        public SinglePropertyEntity( [DisallowNull] EntityContext entityContext, [DisallowNull] SinglePropertyObject data )
            : base( entityContext, data )
        {
        }

        private SinglePropertyObject GetData( ) 
        {
            return (SinglePropertyObject)base._GetData( );
        }

        public float Value
        {
            get => GetData( ).Value;
            set
            {
                var data = GetData( );
                if( data.Value != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Value = value;
                    OnPropertyChanged( );
                }
            }
        }

    }

    public class StringPropertyEntity : PropertyEntity
    {
        public StringPropertyEntity( [DisallowNull] EntityContext entityContext, [DisallowNull] StringPropertyObject data )
            : base( entityContext, data )
        {
        }

        private StringPropertyObject GetData( ) 
        {
            return (StringPropertyObject)base._GetData( );
        }

        public string Value
        {
            get => GetData( ).Value;
            set
            {
                var data = GetData( );
                if( data.Value != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Value = value;
                    OnPropertyChanged( );
                }
            }
        }

    }

    public abstract class TimeseriesPropertyEntity : PropertyEntity
    {
        protected TimeseriesPropertyEntity( [DisallowNull] EntityContext entityContext, [DisallowNull] TimeseriesPropertyObject data )
            : base( entityContext, data )
        {
        }

    }

    public class BinaryTimeseriesPropertyEntity : TimeseriesPropertyEntity
    {
        WeakReference? _timeseriesReference = null;
        public BinaryTimeseriesPropertyEntity( [DisallowNull] EntityContext entityContext, [DisallowNull] BinaryTimeseriesPropertyObject data )
            : base( entityContext, data )
        {
        }

        private BinaryTimeseriesPropertyObject GetData( ) 
        {
            return (BinaryTimeseriesPropertyObject)base._GetData( );
        }

        public Guid? TimeseriesId
        {
            get => GetData( ).Timeseries;
            set
            {
                var data = GetData( );
                if( data.Timeseries != value )
                {
                    OnPropertyChanging( );
                    OnPropertyChanging( "Timeseries", false );
                    data = GetData( );
                    data.Timeseries = value;
                    OnPropertyChanged( );
                    OnPropertyChanged( "Timeseries" );
                }
            }
        }

        public BinaryTimeseriesEntity? Timeseries
        {
            get
            {
                if(_timeseriesReference != null)
                {
                    var result = (BinaryTimeseriesEntity?)_timeseriesReference.Target;
                    if( result != null )
                    {
                        return result;
                    }
                }
                var data = GetData( );
                var context = CheckedContext;
                if( data.Timeseries is Guid timeseriesId )
                {
                    var entity = context.GetBinaryTimeseriesById( timeseriesId );
                    if( entity != null )
                    {
                        _timeseriesReference = new WeakReference( entity );
                    }
                    return entity;
                }
                return null;
            }
            set
            {
                TimeseriesId = value != null? value.Id : null;
            }
        }

    }

    public class BooleanTimeseriesPropertyEntity : TimeseriesPropertyEntity
    {
        WeakReference? _timeseriesReference = null;
        public BooleanTimeseriesPropertyEntity( [DisallowNull] EntityContext entityContext, [DisallowNull] BooleanTimeseriesPropertyObject data )
            : base( entityContext, data )
        {
        }

        private BooleanTimeseriesPropertyObject GetData( ) 
        {
            return (BooleanTimeseriesPropertyObject)base._GetData( );
        }

        public Guid? TimeseriesId
        {
            get => GetData( ).Timeseries;
            set
            {
                var data = GetData( );
                if( data.Timeseries != value )
                {
                    OnPropertyChanging( );
                    OnPropertyChanging( "Timeseries", false );
                    data = GetData( );
                    data.Timeseries = value;
                    OnPropertyChanged( );
                    OnPropertyChanged( "Timeseries" );
                }
            }
        }

        public BooleanTimeseriesEntity? Timeseries
        {
            get
            {
                if(_timeseriesReference != null)
                {
                    var result = (BooleanTimeseriesEntity?)_timeseriesReference.Target;
                    if( result != null )
                    {
                        return result;
                    }
                }
                var data = GetData( );
                var context = CheckedContext;
                if( data.Timeseries is Guid timeseriesId )
                {
                    var entity = context.GetBooleanTimeseriesById( timeseriesId );
                    if( entity != null )
                    {
                        _timeseriesReference = new WeakReference( entity );
                    }
                    return entity;
                }
                return null;
            }
            set
            {
                TimeseriesId = value != null? value.Id : null;
            }
        }

    }

    public class ByteTimeseriesPropertyEntity : TimeseriesPropertyEntity
    {
        WeakReference? _timeseriesReference = null;
        public ByteTimeseriesPropertyEntity( [DisallowNull] EntityContext entityContext, [DisallowNull] ByteTimeseriesPropertyObject data )
            : base( entityContext, data )
        {
        }

        private ByteTimeseriesPropertyObject GetData( ) 
        {
            return (ByteTimeseriesPropertyObject)base._GetData( );
        }

        public Guid? TimeseriesId
        {
            get => GetData( ).Timeseries;
            set
            {
                var data = GetData( );
                if( data.Timeseries != value )
                {
                    OnPropertyChanging( );
                    OnPropertyChanging( "Timeseries", false );
                    data = GetData( );
                    data.Timeseries = value;
                    OnPropertyChanged( );
                    OnPropertyChanged( "Timeseries" );
                }
            }
        }

        public ByteTimeseriesEntity? Timeseries
        {
            get
            {
                if(_timeseriesReference != null)
                {
                    var result = (ByteTimeseriesEntity?)_timeseriesReference.Target;
                    if( result != null )
                    {
                        return result;
                    }
                }
                var data = GetData( );
                var context = CheckedContext;
                if( data.Timeseries is Guid timeseriesId )
                {
                    var entity = context.GetByteTimeseriesById( timeseriesId );
                    if( entity != null )
                    {
                        _timeseriesReference = new WeakReference( entity );
                    }
                    return entity;
                }
                return null;
            }
            set
            {
                TimeseriesId = value != null? value.Id : null;
            }
        }

    }

    public class DateTimeTimeseriesPropertyEntity : TimeseriesPropertyEntity
    {
        WeakReference? _timeseriesReference = null;
        public DateTimeTimeseriesPropertyEntity( [DisallowNull] EntityContext entityContext, [DisallowNull] DateTimeTimeseriesPropertyObject data )
            : base( entityContext, data )
        {
        }

        private DateTimeTimeseriesPropertyObject GetData( ) 
        {
            return (DateTimeTimeseriesPropertyObject)base._GetData( );
        }

        public Guid? TimeseriesId
        {
            get => GetData( ).Timeseries;
            set
            {
                var data = GetData( );
                if( data.Timeseries != value )
                {
                    OnPropertyChanging( );
                    OnPropertyChanging( "Timeseries", false );
                    data = GetData( );
                    data.Timeseries = value;
                    OnPropertyChanged( );
                    OnPropertyChanged( "Timeseries" );
                }
            }
        }

        public DateTimeTimeseriesEntity? Timeseries
        {
            get
            {
                if(_timeseriesReference != null)
                {
                    var result = (DateTimeTimeseriesEntity?)_timeseriesReference.Target;
                    if( result != null )
                    {
                        return result;
                    }
                }
                var data = GetData( );
                var context = CheckedContext;
                if( data.Timeseries is Guid timeseriesId )
                {
                    var entity = context.GetDateTimeTimeseriesById( timeseriesId );
                    if( entity != null )
                    {
                        _timeseriesReference = new WeakReference( entity );
                    }
                    return entity;
                }
                return null;
            }
            set
            {
                TimeseriesId = value != null? value.Id : null;
            }
        }

    }

    public class DoubleTimeseriesPropertyEntity : TimeseriesPropertyEntity
    {
        WeakReference? _timeseriesReference = null;
        public DoubleTimeseriesPropertyEntity( [DisallowNull] EntityContext entityContext, [DisallowNull] DoubleTimeseriesPropertyObject data )
            : base( entityContext, data )
        {
        }

        private DoubleTimeseriesPropertyObject GetData( ) 
        {
            return (DoubleTimeseriesPropertyObject)base._GetData( );
        }

        public Guid? TimeseriesId
        {
            get => GetData( ).Timeseries;
            set
            {
                var data = GetData( );
                if( data.Timeseries != value )
                {
                    OnPropertyChanging( );
                    OnPropertyChanging( "Timeseries", false );
                    data = GetData( );
                    data.Timeseries = value;
                    OnPropertyChanged( );
                    OnPropertyChanged( "Timeseries" );
                }
            }
        }

        public DoubleTimeseriesEntity? Timeseries
        {
            get
            {
                if(_timeseriesReference != null)
                {
                    var result = (DoubleTimeseriesEntity?)_timeseriesReference.Target;
                    if( result != null )
                    {
                        return result;
                    }
                }
                var data = GetData( );
                var context = CheckedContext;
                if( data.Timeseries is Guid timeseriesId )
                {
                    var entity = context.GetDoubleTimeseriesById( timeseriesId );
                    if( entity != null )
                    {
                        _timeseriesReference = new WeakReference( entity );
                    }
                    return entity;
                }
                return null;
            }
            set
            {
                TimeseriesId = value != null? value.Id : null;
            }
        }

    }

    public class GuidTimeseriesPropertyEntity : TimeseriesPropertyEntity
    {
        WeakReference? _timeseriesReference = null;
        public GuidTimeseriesPropertyEntity( [DisallowNull] EntityContext entityContext, [DisallowNull] GuidTimeseriesPropertyObject data )
            : base( entityContext, data )
        {
        }

        private GuidTimeseriesPropertyObject GetData( ) 
        {
            return (GuidTimeseriesPropertyObject)base._GetData( );
        }

        public Guid? TimeseriesId
        {
            get => GetData( ).Timeseries;
            set
            {
                var data = GetData( );
                if( data.Timeseries != value )
                {
                    OnPropertyChanging( );
                    OnPropertyChanging( "Timeseries", false );
                    data = GetData( );
                    data.Timeseries = value;
                    OnPropertyChanged( );
                    OnPropertyChanged( "Timeseries" );
                }
            }
        }

        public GuidTimeseriesEntity? Timeseries
        {
            get
            {
                if(_timeseriesReference != null)
                {
                    var result = (GuidTimeseriesEntity?)_timeseriesReference.Target;
                    if( result != null )
                    {
                        return result;
                    }
                }
                var data = GetData( );
                var context = CheckedContext;
                if( data.Timeseries is Guid timeseriesId )
                {
                    var entity = context.GetGuidTimeseriesById( timeseriesId );
                    if( entity != null )
                    {
                        _timeseriesReference = new WeakReference( entity );
                    }
                    return entity;
                }
                return null;
            }
            set
            {
                TimeseriesId = value != null? value.Id : null;
            }
        }

    }

    public class Int16TimeseriesPropertyEntity : TimeseriesPropertyEntity
    {
        WeakReference? _timeseriesReference = null;
        public Int16TimeseriesPropertyEntity( [DisallowNull] EntityContext entityContext, [DisallowNull] Int16TimeseriesPropertyObject data )
            : base( entityContext, data )
        {
        }

        private Int16TimeseriesPropertyObject GetData( ) 
        {
            return (Int16TimeseriesPropertyObject)base._GetData( );
        }

        public Guid? TimeseriesId
        {
            get => GetData( ).Timeseries;
            set
            {
                var data = GetData( );
                if( data.Timeseries != value )
                {
                    OnPropertyChanging( );
                    OnPropertyChanging( "Timeseries", false );
                    data = GetData( );
                    data.Timeseries = value;
                    OnPropertyChanged( );
                    OnPropertyChanged( "Timeseries" );
                }
            }
        }

        public Int16TimeseriesEntity? Timeseries
        {
            get
            {
                if(_timeseriesReference != null)
                {
                    var result = (Int16TimeseriesEntity?)_timeseriesReference.Target;
                    if( result != null )
                    {
                        return result;
                    }
                }
                var data = GetData( );
                var context = CheckedContext;
                if( data.Timeseries is Guid timeseriesId )
                {
                    var entity = context.GetInt16TimeseriesById( timeseriesId );
                    if( entity != null )
                    {
                        _timeseriesReference = new WeakReference( entity );
                    }
                    return entity;
                }
                return null;
            }
            set
            {
                TimeseriesId = value != null? value.Id : null;
            }
        }

    }

    public class Int32TimeseriesPropertyEntity : TimeseriesPropertyEntity
    {
        WeakReference? _timeseriesReference = null;
        public Int32TimeseriesPropertyEntity( [DisallowNull] EntityContext entityContext, [DisallowNull] Int32TimeseriesPropertyObject data )
            : base( entityContext, data )
        {
        }

        private Int32TimeseriesPropertyObject GetData( ) 
        {
            return (Int32TimeseriesPropertyObject)base._GetData( );
        }

        public Guid? TimeseriesId
        {
            get => GetData( ).Timeseries;
            set
            {
                var data = GetData( );
                if( data.Timeseries != value )
                {
                    OnPropertyChanging( );
                    OnPropertyChanging( "Timeseries", false );
                    data = GetData( );
                    data.Timeseries = value;
                    OnPropertyChanged( );
                    OnPropertyChanged( "Timeseries" );
                }
            }
        }

        public Int32TimeseriesEntity? Timeseries
        {
            get
            {
                if(_timeseriesReference != null)
                {
                    var result = (Int32TimeseriesEntity?)_timeseriesReference.Target;
                    if( result != null )
                    {
                        return result;
                    }
                }
                var data = GetData( );
                var context = CheckedContext;
                if( data.Timeseries is Guid timeseriesId )
                {
                    var entity = context.GetInt32TimeseriesById( timeseriesId );
                    if( entity != null )
                    {
                        _timeseriesReference = new WeakReference( entity );
                    }
                    return entity;
                }
                return null;
            }
            set
            {
                TimeseriesId = value != null? value.Id : null;
            }
        }

    }

    public class Int64TimeseriesPropertyEntity : TimeseriesPropertyEntity
    {
        WeakReference? _timeseriesReference = null;
        public Int64TimeseriesPropertyEntity( [DisallowNull] EntityContext entityContext, [DisallowNull] Int64TimeseriesPropertyObject data )
            : base( entityContext, data )
        {
        }

        private Int64TimeseriesPropertyObject GetData( ) 
        {
            return (Int64TimeseriesPropertyObject)base._GetData( );
        }

        public Guid? TimeseriesId
        {
            get => GetData( ).Timeseries;
            set
            {
                var data = GetData( );
                if( data.Timeseries != value )
                {
                    OnPropertyChanging( );
                    OnPropertyChanging( "Timeseries", false );
                    data = GetData( );
                    data.Timeseries = value;
                    OnPropertyChanged( );
                    OnPropertyChanged( "Timeseries" );
                }
            }
        }

        public Int64TimeseriesEntity? Timeseries
        {
            get
            {
                if(_timeseriesReference != null)
                {
                    var result = (Int64TimeseriesEntity?)_timeseriesReference.Target;
                    if( result != null )
                    {
                        return result;
                    }
                }
                var data = GetData( );
                var context = CheckedContext;
                if( data.Timeseries is Guid timeseriesId )
                {
                    var entity = context.GetInt64TimeseriesById( timeseriesId );
                    if( entity != null )
                    {
                        _timeseriesReference = new WeakReference( entity );
                    }
                    return entity;
                }
                return null;
            }
            set
            {
                TimeseriesId = value != null? value.Id : null;
            }
        }

    }

    public class ReferenceTimeseriesPropertyEntity : TimeseriesPropertyEntity
    {
        WeakReference? _timeseriesReference = null;
        public ReferenceTimeseriesPropertyEntity( [DisallowNull] EntityContext entityContext, [DisallowNull] ReferenceTimeseriesPropertyObject data )
            : base( entityContext, data )
        {
        }

        private ReferenceTimeseriesPropertyObject GetData( ) 
        {
            return (ReferenceTimeseriesPropertyObject)base._GetData( );
        }

        public Guid? TimeseriesId
        {
            get => GetData( ).Timeseries;
            set
            {
                var data = GetData( );
                if( data.Timeseries != value )
                {
                    OnPropertyChanging( );
                    OnPropertyChanging( "Timeseries", false );
                    data = GetData( );
                    data.Timeseries = value;
                    OnPropertyChanged( );
                    OnPropertyChanged( "Timeseries" );
                }
            }
        }

        public ReferenceTimeseriesEntity? Timeseries
        {
            get
            {
                if(_timeseriesReference != null)
                {
                    var result = (ReferenceTimeseriesEntity?)_timeseriesReference.Target;
                    if( result != null )
                    {
                        return result;
                    }
                }
                var data = GetData( );
                var context = CheckedContext;
                if( data.Timeseries is Guid timeseriesId )
                {
                    var entity = context.GetReferenceTimeseriesById( timeseriesId );
                    if( entity != null )
                    {
                        _timeseriesReference = new WeakReference( entity );
                    }
                    return entity;
                }
                return null;
            }
            set
            {
                TimeseriesId = value != null? value.Id : null;
            }
        }

    }

    public class SByteTimeseriesPropertyEntity : TimeseriesPropertyEntity
    {
        WeakReference? _timeseriesReference = null;
        public SByteTimeseriesPropertyEntity( [DisallowNull] EntityContext entityContext, [DisallowNull] SByteTimeseriesPropertyObject data )
            : base( entityContext, data )
        {
        }

        private SByteTimeseriesPropertyObject GetData( ) 
        {
            return (SByteTimeseriesPropertyObject)base._GetData( );
        }

        public Guid? TimeseriesId
        {
            get => GetData( ).Timeseries;
            set
            {
                var data = GetData( );
                if( data.Timeseries != value )
                {
                    OnPropertyChanging( );
                    OnPropertyChanging( "Timeseries", false );
                    data = GetData( );
                    data.Timeseries = value;
                    OnPropertyChanged( );
                    OnPropertyChanged( "Timeseries" );
                }
            }
        }

        public SByteTimeseriesEntity? Timeseries
        {
            get
            {
                if(_timeseriesReference != null)
                {
                    var result = (SByteTimeseriesEntity?)_timeseriesReference.Target;
                    if( result != null )
                    {
                        return result;
                    }
                }
                var data = GetData( );
                var context = CheckedContext;
                if( data.Timeseries is Guid timeseriesId )
                {
                    var entity = context.GetSByteTimeseriesById( timeseriesId );
                    if( entity != null )
                    {
                        _timeseriesReference = new WeakReference( entity );
                    }
                    return entity;
                }
                return null;
            }
            set
            {
                TimeseriesId = value != null? value.Id : null;
            }
        }

    }

    public class SingleTimeseriesPropertyEntity : TimeseriesPropertyEntity
    {
        WeakReference? _timeseriesReference = null;
        public SingleTimeseriesPropertyEntity( [DisallowNull] EntityContext entityContext, [DisallowNull] SingleTimeseriesPropertyObject data )
            : base( entityContext, data )
        {
        }

        private SingleTimeseriesPropertyObject GetData( ) 
        {
            return (SingleTimeseriesPropertyObject)base._GetData( );
        }

        public Guid? TimeseriesId
        {
            get => GetData( ).Timeseries;
            set
            {
                var data = GetData( );
                if( data.Timeseries != value )
                {
                    OnPropertyChanging( );
                    OnPropertyChanging( "Timeseries", false );
                    data = GetData( );
                    data.Timeseries = value;
                    OnPropertyChanged( );
                    OnPropertyChanged( "Timeseries" );
                }
            }
        }

        public SingleTimeseriesEntity? Timeseries
        {
            get
            {
                if(_timeseriesReference != null)
                {
                    var result = (SingleTimeseriesEntity?)_timeseriesReference.Target;
                    if( result != null )
                    {
                        return result;
                    }
                }
                var data = GetData( );
                var context = CheckedContext;
                if( data.Timeseries is Guid timeseriesId )
                {
                    var entity = context.GetSingleTimeseriesById( timeseriesId );
                    if( entity != null )
                    {
                        _timeseriesReference = new WeakReference( entity );
                    }
                    return entity;
                }
                return null;
            }
            set
            {
                TimeseriesId = value != null? value.Id : null;
            }
        }

    }

    public class StringTimeseriesPropertyEntity : TimeseriesPropertyEntity
    {
        WeakReference? _timeseriesReference = null;
        public StringTimeseriesPropertyEntity( [DisallowNull] EntityContext entityContext, [DisallowNull] StringTimeseriesPropertyObject data )
            : base( entityContext, data )
        {
        }

        private StringTimeseriesPropertyObject GetData( ) 
        {
            return (StringTimeseriesPropertyObject)base._GetData( );
        }

        public Guid? TimeseriesId
        {
            get => GetData( ).Timeseries;
            set
            {
                var data = GetData( );
                if( data.Timeseries != value )
                {
                    OnPropertyChanging( );
                    OnPropertyChanging( "Timeseries", false );
                    data = GetData( );
                    data.Timeseries = value;
                    OnPropertyChanged( );
                    OnPropertyChanged( "Timeseries" );
                }
            }
        }

        public StringTimeseriesEntity? Timeseries
        {
            get
            {
                if(_timeseriesReference != null)
                {
                    var result = (StringTimeseriesEntity?)_timeseriesReference.Target;
                    if( result != null )
                    {
                        return result;
                    }
                }
                var data = GetData( );
                var context = CheckedContext;
                if( data.Timeseries is Guid timeseriesId )
                {
                    var entity = context.GetStringTimeseriesById( timeseriesId );
                    if( entity != null )
                    {
                        _timeseriesReference = new WeakReference( entity );
                    }
                    return entity;
                }
                return null;
            }
            set
            {
                TimeseriesId = value != null? value.Id : null;
            }
        }

    }

    public class TimeSpanTimeseriesPropertyEntity : TimeseriesPropertyEntity
    {
        WeakReference? _timeseriesReference = null;
        public TimeSpanTimeseriesPropertyEntity( [DisallowNull] EntityContext entityContext, [DisallowNull] TimeSpanTimeseriesPropertyObject data )
            : base( entityContext, data )
        {
        }

        private TimeSpanTimeseriesPropertyObject GetData( ) 
        {
            return (TimeSpanTimeseriesPropertyObject)base._GetData( );
        }

        public Guid? TimeseriesId
        {
            get => GetData( ).Timeseries;
            set
            {
                var data = GetData( );
                if( data.Timeseries != value )
                {
                    OnPropertyChanging( );
                    OnPropertyChanging( "Timeseries", false );
                    data = GetData( );
                    data.Timeseries = value;
                    OnPropertyChanged( );
                    OnPropertyChanged( "Timeseries" );
                }
            }
        }

        public TimeSpanTimeseriesEntity? Timeseries
        {
            get
            {
                if(_timeseriesReference != null)
                {
                    var result = (TimeSpanTimeseriesEntity?)_timeseriesReference.Target;
                    if( result != null )
                    {
                        return result;
                    }
                }
                var data = GetData( );
                var context = CheckedContext;
                if( data.Timeseries is Guid timeseriesId )
                {
                    var entity = context.GetTimeSpanTimeseriesById( timeseriesId );
                    if( entity != null )
                    {
                        _timeseriesReference = new WeakReference( entity );
                    }
                    return entity;
                }
                return null;
            }
            set
            {
                TimeseriesId = value != null? value.Id : null;
            }
        }

    }

    public class UInt16TimeseriesPropertyEntity : TimeseriesPropertyEntity
    {
        WeakReference? _timeseriesReference = null;
        public UInt16TimeseriesPropertyEntity( [DisallowNull] EntityContext entityContext, [DisallowNull] UInt16TimeseriesPropertyObject data )
            : base( entityContext, data )
        {
        }

        private UInt16TimeseriesPropertyObject GetData( ) 
        {
            return (UInt16TimeseriesPropertyObject)base._GetData( );
        }

        public Guid? TimeseriesId
        {
            get => GetData( ).Timeseries;
            set
            {
                var data = GetData( );
                if( data.Timeseries != value )
                {
                    OnPropertyChanging( );
                    OnPropertyChanging( "Timeseries", false );
                    data = GetData( );
                    data.Timeseries = value;
                    OnPropertyChanged( );
                    OnPropertyChanged( "Timeseries" );
                }
            }
        }

        public UInt16TimeseriesEntity? Timeseries
        {
            get
            {
                if(_timeseriesReference != null)
                {
                    var result = (UInt16TimeseriesEntity?)_timeseriesReference.Target;
                    if( result != null )
                    {
                        return result;
                    }
                }
                var data = GetData( );
                var context = CheckedContext;
                if( data.Timeseries is Guid timeseriesId )
                {
                    var entity = context.GetUInt16TimeseriesById( timeseriesId );
                    if( entity != null )
                    {
                        _timeseriesReference = new WeakReference( entity );
                    }
                    return entity;
                }
                return null;
            }
            set
            {
                TimeseriesId = value != null? value.Id : null;
            }
        }

    }

    public class UInt32TimeseriesPropertyEntity : TimeseriesPropertyEntity
    {
        WeakReference? _timeseriesReference = null;
        public UInt32TimeseriesPropertyEntity( [DisallowNull] EntityContext entityContext, [DisallowNull] UInt32TimeseriesPropertyObject data )
            : base( entityContext, data )
        {
        }

        private UInt32TimeseriesPropertyObject GetData( ) 
        {
            return (UInt32TimeseriesPropertyObject)base._GetData( );
        }

        public Guid? TimeseriesId
        {
            get => GetData( ).Timeseries;
            set
            {
                var data = GetData( );
                if( data.Timeseries != value )
                {
                    OnPropertyChanging( );
                    OnPropertyChanging( "Timeseries", false );
                    data = GetData( );
                    data.Timeseries = value;
                    OnPropertyChanged( );
                    OnPropertyChanged( "Timeseries" );
                }
            }
        }

        public UInt32TimeseriesEntity? Timeseries
        {
            get
            {
                if(_timeseriesReference != null)
                {
                    var result = (UInt32TimeseriesEntity?)_timeseriesReference.Target;
                    if( result != null )
                    {
                        return result;
                    }
                }
                var data = GetData( );
                var context = CheckedContext;
                if( data.Timeseries is Guid timeseriesId )
                {
                    var entity = context.GetUInt32TimeseriesById( timeseriesId );
                    if( entity != null )
                    {
                        _timeseriesReference = new WeakReference( entity );
                    }
                    return entity;
                }
                return null;
            }
            set
            {
                TimeseriesId = value != null? value.Id : null;
            }
        }

    }

    public class UInt64TimeseriesPropertyEntity : TimeseriesPropertyEntity
    {
        WeakReference? _timeseriesReference = null;
        public UInt64TimeseriesPropertyEntity( [DisallowNull] EntityContext entityContext, [DisallowNull] UInt64TimeseriesPropertyObject data )
            : base( entityContext, data )
        {
        }

        private UInt64TimeseriesPropertyObject GetData( ) 
        {
            return (UInt64TimeseriesPropertyObject)base._GetData( );
        }

        public Guid? TimeseriesId
        {
            get => GetData( ).Timeseries;
            set
            {
                var data = GetData( );
                if( data.Timeseries != value )
                {
                    OnPropertyChanging( );
                    OnPropertyChanging( "Timeseries", false );
                    data = GetData( );
                    data.Timeseries = value;
                    OnPropertyChanged( );
                    OnPropertyChanged( "Timeseries" );
                }
            }
        }

        public UInt64TimeseriesEntity? Timeseries
        {
            get
            {
                if(_timeseriesReference != null)
                {
                    var result = (UInt64TimeseriesEntity?)_timeseriesReference.Target;
                    if( result != null )
                    {
                        return result;
                    }
                }
                var data = GetData( );
                var context = CheckedContext;
                if( data.Timeseries is Guid timeseriesId )
                {
                    var entity = context.GetUInt64TimeseriesById( timeseriesId );
                    if( entity != null )
                    {
                        _timeseriesReference = new WeakReference( entity );
                    }
                    return entity;
                }
                return null;
            }
            set
            {
                TimeseriesId = value != null? value.Id : null;
            }
        }

    }

    public class TimeSpanPropertyEntity : PropertyEntity
    {
        public TimeSpanPropertyEntity( [DisallowNull] EntityContext entityContext, [DisallowNull] TimeSpanPropertyObject data )
            : base( entityContext, data )
        {
        }

        private TimeSpanPropertyObject GetData( ) 
        {
            return (TimeSpanPropertyObject)base._GetData( );
        }

        public TimeSpan Value
        {
            get => GetData( ).Value;
            set
            {
                var data = GetData( );
                if( data.Value != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Value = value;
                    OnPropertyChanged( );
                }
            }
        }

    }

    public class UInt16PropertyEntity : PropertyEntity
    {
        public UInt16PropertyEntity( [DisallowNull] EntityContext entityContext, [DisallowNull] UInt16PropertyObject data )
            : base( entityContext, data )
        {
        }

        private UInt16PropertyObject GetData( ) 
        {
            return (UInt16PropertyObject)base._GetData( );
        }

        public ushort Value
        {
            get => GetData( ).Value;
            set
            {
                var data = GetData( );
                if( data.Value != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Value = value;
                    OnPropertyChanged( );
                }
            }
        }

    }

    public class UInt32PropertyEntity : PropertyEntity
    {
        public UInt32PropertyEntity( [DisallowNull] EntityContext entityContext, [DisallowNull] UInt32PropertyObject data )
            : base( entityContext, data )
        {
        }

        private UInt32PropertyObject GetData( ) 
        {
            return (UInt32PropertyObject)base._GetData( );
        }

        public uint Value
        {
            get => GetData( ).Value;
            set
            {
                var data = GetData( );
                if( data.Value != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Value = value;
                    OnPropertyChanged( );
                }
            }
        }

    }

    public class UInt64PropertyEntity : PropertyEntity
    {
        public UInt64PropertyEntity( [DisallowNull] EntityContext entityContext, [DisallowNull] UInt64PropertyObject data )
            : base( entityContext, data )
        {
        }

        private UInt64PropertyObject GetData( ) 
        {
            return (UInt64PropertyObject)base._GetData( );
        }

        public long Value
        {
            get => GetData( ).Value;
            set
            {
                var data = GetData( );
                if( data.Value != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Value = value;
                    OnPropertyChanged( );
                }
            }
        }

    }

    public abstract class PropertyDefinitionEntity : BaseEntity<Kind>
    {
        WeakReference? _elementTypeReference = null;
        protected PropertyDefinitionEntity( [DisallowNull] EntityContext entityContext, [DisallowNull] PropertyDefinitionObject data )
            : base( entityContext, data )
        {
        }

        public EntityContext? Context => (EntityContext?)_Context;

        protected EntityContext CheckedContext
        {
            get
            {
                var context = Context;
                if ( context is null )
                {
                    throw new InvalidOperationException( "Context is null" );
                }
                return context;
            }
        }

        private PropertyDefinitionObject GetData( ) 
        {
            return (PropertyDefinitionObject)base._GetData( );
        }

        public Guid ElementTypeId
        {
            get => GetData( ).ElementType;
            set
            {
                var data = GetData( );
                if( data.ElementType != value )
                {
                    OnPropertyChanging( );
                    OnPropertyChanging( "ElementType", false );
                    data = GetData( );
                    data.ElementType = value;
                    OnPropertyChanged( );
                    OnPropertyChanged( "ElementType" );
                }
            }
        }

        public ElementTypeEntity ElementType
        {
            get
            {
                if(_elementTypeReference != null)
                {
                    var result = (ElementTypeEntity?)_elementTypeReference.Target;
                    if( result != null )
                    {
                        return result;
                    }
                }
                var data = GetData( );
                var context = CheckedContext;
                var entity = context.GetElementTypeById( data.ElementType );
                if( entity != null )
                {
                    _elementTypeReference = new WeakReference( entity );
                }
                else
                {
                    var message = $"Cannot find the ElementTypeEntity object identified by {data.ElementType}";
                    throw new Exception( message );
                }
                return entity;
            }
            set
            {
                ElementTypeId = value != null? value.Id : Guid.Empty;
            }
        }

        public string Name
        {
            get => GetData( ).Name;
            set
            {
                var data = GetData( );
                if( data.Name != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Name = value;
                    OnPropertyChanged( );
                }
            }
        }

        public string Description
        {
            get => GetData( ).Description;
            set
            {
                var data = GetData( );
                if( data.Description != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Description = value;
                    OnPropertyChanged( );
                }
            }
        }

    }

    public class BinaryPropertyDefinitionEntity : PropertyDefinitionEntity
    {
        public BinaryPropertyDefinitionEntity( [DisallowNull] EntityContext entityContext, [DisallowNull] BinaryPropertyDefinitionObject data )
            : base( entityContext, data )
        {
        }

        private BinaryPropertyDefinitionObject GetData( ) 
        {
            return (BinaryPropertyDefinitionObject)base._GetData( );
        }

        public byte[] DefaultValue
        {
            get => GetData( ).DefaultValue;
            set
            {
                var data = GetData( );
                if( data.DefaultValue != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.DefaultValue = value;
                    OnPropertyChanged( );
                }
            }
        }

    }

    public class BooleanPropertyDefinitionEntity : PropertyDefinitionEntity
    {
        public BooleanPropertyDefinitionEntity( [DisallowNull] EntityContext entityContext, [DisallowNull] BooleanPropertyDefinitionObject data )
            : base( entityContext, data )
        {
        }

        private BooleanPropertyDefinitionObject GetData( ) 
        {
            return (BooleanPropertyDefinitionObject)base._GetData( );
        }

        public bool DefaultValue
        {
            get => GetData( ).DefaultValue;
            set
            {
                var data = GetData( );
                if( data.DefaultValue != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.DefaultValue = value;
                    OnPropertyChanged( );
                }
            }
        }

    }

    public class BytePropertyDefinitionEntity : PropertyDefinitionEntity
    {
        public BytePropertyDefinitionEntity( [DisallowNull] EntityContext entityContext, [DisallowNull] BytePropertyDefinitionObject data )
            : base( entityContext, data )
        {
        }

        private BytePropertyDefinitionObject GetData( ) 
        {
            return (BytePropertyDefinitionObject)base._GetData( );
        }

        public byte DefaultValue
        {
            get => GetData( ).DefaultValue;
            set
            {
                var data = GetData( );
                if( data.DefaultValue != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.DefaultValue = value;
                    OnPropertyChanged( );
                }
            }
        }

        public byte MinValue
        {
            get => GetData( ).MinValue;
            set
            {
                var data = GetData( );
                if( data.MinValue != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.MinValue = value;
                    OnPropertyChanged( );
                }
            }
        }

        public byte MaxValue
        {
            get => GetData( ).MaxValue;
            set
            {
                var data = GetData( );
                if( data.MaxValue != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.MaxValue = value;
                    OnPropertyChanged( );
                }
            }
        }

    }

    public class DateTimePropertyDefinitionEntity : PropertyDefinitionEntity
    {
        public DateTimePropertyDefinitionEntity( [DisallowNull] EntityContext entityContext, [DisallowNull] DateTimePropertyDefinitionObject data )
            : base( entityContext, data )
        {
        }

        private DateTimePropertyDefinitionObject GetData( ) 
        {
            return (DateTimePropertyDefinitionObject)base._GetData( );
        }

        public string DefaultValue
        {
            get => GetData( ).DefaultValue;
            set
            {
                var data = GetData( );
                if( data.DefaultValue != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.DefaultValue = value;
                    OnPropertyChanged( );
                }
            }
        }

        public string MinValue
        {
            get => GetData( ).MinValue;
            set
            {
                var data = GetData( );
                if( data.MinValue != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.MinValue = value;
                    OnPropertyChanged( );
                }
            }
        }

        public string MaxValue
        {
            get => GetData( ).MaxValue;
            set
            {
                var data = GetData( );
                if( data.MaxValue != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.MaxValue = value;
                    OnPropertyChanged( );
                }
            }
        }

    }

    public class DoublePropertyDefinitionEntity : PropertyDefinitionEntity
    {
        public DoublePropertyDefinitionEntity( [DisallowNull] EntityContext entityContext, [DisallowNull] DoublePropertyDefinitionObject data )
            : base( entityContext, data )
        {
        }

        private DoublePropertyDefinitionObject GetData( ) 
        {
            return (DoublePropertyDefinitionObject)base._GetData( );
        }

        public double DefaultValue
        {
            get => GetData( ).DefaultValue;
            set
            {
                var data = GetData( );
                if( data.DefaultValue != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.DefaultValue = value;
                    OnPropertyChanged( );
                }
            }
        }

        public double MinValue
        {
            get => GetData( ).MinValue;
            set
            {
                var data = GetData( );
                if( data.MinValue != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.MinValue = value;
                    OnPropertyChanged( );
                }
            }
        }

        public double MaxValue
        {
            get => GetData( ).MaxValue;
            set
            {
                var data = GetData( );
                if( data.MaxValue != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.MaxValue = value;
                    OnPropertyChanged( );
                }
            }
        }

    }

    public class GuidPropertyDefinitionEntity : PropertyDefinitionEntity
    {
        public GuidPropertyDefinitionEntity( [DisallowNull] EntityContext entityContext, [DisallowNull] GuidPropertyDefinitionObject data )
            : base( entityContext, data )
        {
        }

        private GuidPropertyDefinitionObject GetData( ) 
        {
            return (GuidPropertyDefinitionObject)base._GetData( );
        }

        public Guid DefaultValue
        {
            get => GetData( ).DefaultValue;
            set
            {
                var data = GetData( );
                if( data.DefaultValue != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.DefaultValue = value;
                    OnPropertyChanged( );
                }
            }
        }

    }

    public class Int16PropertyDefinitionEntity : PropertyDefinitionEntity
    {
        public Int16PropertyDefinitionEntity( [DisallowNull] EntityContext entityContext, [DisallowNull] Int16PropertyDefinitionObject data )
            : base( entityContext, data )
        {
        }

        private Int16PropertyDefinitionObject GetData( ) 
        {
            return (Int16PropertyDefinitionObject)base._GetData( );
        }

        public short DefaultValue
        {
            get => GetData( ).DefaultValue;
            set
            {
                var data = GetData( );
                if( data.DefaultValue != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.DefaultValue = value;
                    OnPropertyChanged( );
                }
            }
        }

        public short MinValue
        {
            get => GetData( ).MinValue;
            set
            {
                var data = GetData( );
                if( data.MinValue != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.MinValue = value;
                    OnPropertyChanged( );
                }
            }
        }

        public short MaxValue
        {
            get => GetData( ).MaxValue;
            set
            {
                var data = GetData( );
                if( data.MaxValue != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.MaxValue = value;
                    OnPropertyChanged( );
                }
            }
        }

    }

    public class Int32PropertyDefinitionEntity : PropertyDefinitionEntity
    {
        public Int32PropertyDefinitionEntity( [DisallowNull] EntityContext entityContext, [DisallowNull] Int32PropertyDefinitionObject data )
            : base( entityContext, data )
        {
        }

        private Int32PropertyDefinitionObject GetData( ) 
        {
            return (Int32PropertyDefinitionObject)base._GetData( );
        }

        public int DefaultValue
        {
            get => GetData( ).DefaultValue;
            set
            {
                var data = GetData( );
                if( data.DefaultValue != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.DefaultValue = value;
                    OnPropertyChanged( );
                }
            }
        }

        public int MinValue
        {
            get => GetData( ).MinValue;
            set
            {
                var data = GetData( );
                if( data.MinValue != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.MinValue = value;
                    OnPropertyChanged( );
                }
            }
        }

        public int MaxValue
        {
            get => GetData( ).MaxValue;
            set
            {
                var data = GetData( );
                if( data.MaxValue != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.MaxValue = value;
                    OnPropertyChanged( );
                }
            }
        }

    }

    public class Int64PropertyDefinitionEntity : PropertyDefinitionEntity
    {
        public Int64PropertyDefinitionEntity( [DisallowNull] EntityContext entityContext, [DisallowNull] Int64PropertyDefinitionObject data )
            : base( entityContext, data )
        {
        }

        private Int64PropertyDefinitionObject GetData( ) 
        {
            return (Int64PropertyDefinitionObject)base._GetData( );
        }

        public long DefaultValue
        {
            get => GetData( ).DefaultValue;
            set
            {
                var data = GetData( );
                if( data.DefaultValue != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.DefaultValue = value;
                    OnPropertyChanged( );
                }
            }
        }

        public long MinValue
        {
            get => GetData( ).MinValue;
            set
            {
                var data = GetData( );
                if( data.MinValue != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.MinValue = value;
                    OnPropertyChanged( );
                }
            }
        }

        public long MaxValue
        {
            get => GetData( ).MaxValue;
            set
            {
                var data = GetData( );
                if( data.MaxValue != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.MaxValue = value;
                    OnPropertyChanged( );
                }
            }
        }

    }

    public class ReferencePropertyDefinitionEntity : PropertyDefinitionEntity
    {
        WeakReference? _defaultValueReference = null;
        WeakReference? _referencedElementTypeReference = null;
        public ReferencePropertyDefinitionEntity( [DisallowNull] EntityContext entityContext, [DisallowNull] ReferencePropertyDefinitionObject data )
            : base( entityContext, data )
        {
        }

        private ReferencePropertyDefinitionObject GetData( ) 
        {
            return (ReferencePropertyDefinitionObject)base._GetData( );
        }

        public Guid? DefaultValueId
        {
            get => GetData( ).DefaultValue;
            set
            {
                var data = GetData( );
                if( data.DefaultValue != value )
                {
                    OnPropertyChanging( );
                    OnPropertyChanging( "DefaultValue", false );
                    data = GetData( );
                    data.DefaultValue = value;
                    OnPropertyChanged( );
                    OnPropertyChanged( "DefaultValue" );
                }
            }
        }

        public ElementEntity? DefaultValue
        {
            get
            {
                if(_defaultValueReference != null)
                {
                    var result = (ElementEntity?)_defaultValueReference.Target;
                    if( result != null )
                    {
                        return result;
                    }
                }
                var data = GetData( );
                var context = CheckedContext;
                if( data.DefaultValue is Guid defaultValueId )
                {
                    var entity = context.GetElementById( defaultValueId );
                    if( entity != null )
                    {
                        _defaultValueReference = new WeakReference( entity );
                    }
                    return entity;
                }
                return null;
            }
            set
            {
                DefaultValueId = value != null? value.Id : null;
            }
        }

        public Guid? ReferencedElementTypeId
        {
            get => GetData( ).ReferencedElementType;
            set
            {
                var data = GetData( );
                if( data.ReferencedElementType != value )
                {
                    OnPropertyChanging( );
                    OnPropertyChanging( "ReferencedElementType", false );
                    data = GetData( );
                    data.ReferencedElementType = value;
                    OnPropertyChanged( );
                    OnPropertyChanged( "ReferencedElementType" );
                }
            }
        }

        public ElementTypeEntity? ReferencedElementType
        {
            get
            {
                if(_referencedElementTypeReference != null)
                {
                    var result = (ElementTypeEntity?)_referencedElementTypeReference.Target;
                    if( result != null )
                    {
                        return result;
                    }
                }
                var data = GetData( );
                var context = CheckedContext;
                if( data.ReferencedElementType is Guid referencedElementTypeId )
                {
                    var entity = context.GetElementTypeById( referencedElementTypeId );
                    if( entity != null )
                    {
                        _referencedElementTypeReference = new WeakReference( entity );
                    }
                    return entity;
                }
                return null;
            }
            set
            {
                ReferencedElementTypeId = value != null? value.Id : null;
            }
        }

    }

    public class SBytePropertyDefinitionEntity : PropertyDefinitionEntity
    {
        public SBytePropertyDefinitionEntity( [DisallowNull] EntityContext entityContext, [DisallowNull] SBytePropertyDefinitionObject data )
            : base( entityContext, data )
        {
        }

        private SBytePropertyDefinitionObject GetData( ) 
        {
            return (SBytePropertyDefinitionObject)base._GetData( );
        }

        public sbyte DefaultValue
        {
            get => GetData( ).DefaultValue;
            set
            {
                var data = GetData( );
                if( data.DefaultValue != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.DefaultValue = value;
                    OnPropertyChanged( );
                }
            }
        }

        public sbyte MinValue
        {
            get => GetData( ).MinValue;
            set
            {
                var data = GetData( );
                if( data.MinValue != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.MinValue = value;
                    OnPropertyChanged( );
                }
            }
        }

        public sbyte MaxValue
        {
            get => GetData( ).MaxValue;
            set
            {
                var data = GetData( );
                if( data.MaxValue != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.MaxValue = value;
                    OnPropertyChanged( );
                }
            }
        }

    }

    public class SinglePropertyDefinitionEntity : PropertyDefinitionEntity
    {
        public SinglePropertyDefinitionEntity( [DisallowNull] EntityContext entityContext, [DisallowNull] SinglePropertyDefinitionObject data )
            : base( entityContext, data )
        {
        }

        private SinglePropertyDefinitionObject GetData( ) 
        {
            return (SinglePropertyDefinitionObject)base._GetData( );
        }

        public float DefaultValue
        {
            get => GetData( ).DefaultValue;
            set
            {
                var data = GetData( );
                if( data.DefaultValue != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.DefaultValue = value;
                    OnPropertyChanged( );
                }
            }
        }

        public float MinValue
        {
            get => GetData( ).MinValue;
            set
            {
                var data = GetData( );
                if( data.MinValue != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.MinValue = value;
                    OnPropertyChanged( );
                }
            }
        }

        public float MaxValue
        {
            get => GetData( ).MaxValue;
            set
            {
                var data = GetData( );
                if( data.MaxValue != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.MaxValue = value;
                    OnPropertyChanged( );
                }
            }
        }

    }

    public class StringPropertyDefinitionEntity : PropertyDefinitionEntity
    {
        public StringPropertyDefinitionEntity( [DisallowNull] EntityContext entityContext, [DisallowNull] StringPropertyDefinitionObject data )
            : base( entityContext, data )
        {
        }

        private StringPropertyDefinitionObject GetData( ) 
        {
            return (StringPropertyDefinitionObject)base._GetData( );
        }

        public string DefaultValue
        {
            get => GetData( ).DefaultValue;
            set
            {
                var data = GetData( );
                if( data.DefaultValue != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.DefaultValue = value;
                    OnPropertyChanged( );
                }
            }
        }

        public string Pattern
        {
            get => GetData( ).Pattern;
            set
            {
                var data = GetData( );
                if( data.Pattern != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Pattern = value;
                    OnPropertyChanged( );
                }
            }
        }

    }

    public abstract class TimeseriesPropertyDefinitionEntity : PropertyDefinitionEntity
    {
        protected TimeseriesPropertyDefinitionEntity( [DisallowNull] EntityContext entityContext, [DisallowNull] TimeseriesPropertyDefinitionObject data )
            : base( entityContext, data )
        {
        }

    }

    public class BinaryTimeseriesPropertyDefinitionEntity : TimeseriesPropertyDefinitionEntity
    {
        public BinaryTimeseriesPropertyDefinitionEntity( [DisallowNull] EntityContext entityContext, [DisallowNull] BinaryTimeseriesPropertyDefinitionObject data )
            : base( entityContext, data )
        {
        }

    }

    public class BooleanTimeseriesPropertyDefinitionEntity : TimeseriesPropertyDefinitionEntity
    {
        public BooleanTimeseriesPropertyDefinitionEntity( [DisallowNull] EntityContext entityContext, [DisallowNull] BooleanTimeseriesPropertyDefinitionObject data )
            : base( entityContext, data )
        {
        }

    }

    public class ByteTimeseriesPropertyDefinitionEntity : TimeseriesPropertyDefinitionEntity
    {
        public ByteTimeseriesPropertyDefinitionEntity( [DisallowNull] EntityContext entityContext, [DisallowNull] ByteTimeseriesPropertyDefinitionObject data )
            : base( entityContext, data )
        {
        }

        private ByteTimeseriesPropertyDefinitionObject GetData( ) 
        {
            return (ByteTimeseriesPropertyDefinitionObject)base._GetData( );
        }

        public byte MinValue
        {
            get => GetData( ).MinValue;
            set
            {
                var data = GetData( );
                if( data.MinValue != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.MinValue = value;
                    OnPropertyChanged( );
                }
            }
        }

        public byte MaxValue
        {
            get => GetData( ).MaxValue;
            set
            {
                var data = GetData( );
                if( data.MaxValue != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.MaxValue = value;
                    OnPropertyChanged( );
                }
            }
        }

    }

    public class DateTimeTimeseriesPropertyDefinitionEntity : TimeseriesPropertyDefinitionEntity
    {
        public DateTimeTimeseriesPropertyDefinitionEntity( [DisallowNull] EntityContext entityContext, [DisallowNull] DateTimeTimeseriesPropertyDefinitionObject data )
            : base( entityContext, data )
        {
        }

        private DateTimeTimeseriesPropertyDefinitionObject GetData( ) 
        {
            return (DateTimeTimeseriesPropertyDefinitionObject)base._GetData( );
        }

        public string MinValue
        {
            get => GetData( ).MinValue;
            set
            {
                var data = GetData( );
                if( data.MinValue != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.MinValue = value;
                    OnPropertyChanged( );
                }
            }
        }

        public string MaxValue
        {
            get => GetData( ).MaxValue;
            set
            {
                var data = GetData( );
                if( data.MaxValue != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.MaxValue = value;
                    OnPropertyChanged( );
                }
            }
        }

    }

    public class DoubleTimeseriesPropertyDefinitionEntity : TimeseriesPropertyDefinitionEntity
    {
        public DoubleTimeseriesPropertyDefinitionEntity( [DisallowNull] EntityContext entityContext, [DisallowNull] DoubleTimeseriesPropertyDefinitionObject data )
            : base( entityContext, data )
        {
        }

        private DoubleTimeseriesPropertyDefinitionObject GetData( ) 
        {
            return (DoubleTimeseriesPropertyDefinitionObject)base._GetData( );
        }

        public double MinValue
        {
            get => GetData( ).MinValue;
            set
            {
                var data = GetData( );
                if( data.MinValue != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.MinValue = value;
                    OnPropertyChanged( );
                }
            }
        }

        public double MaxValue
        {
            get => GetData( ).MaxValue;
            set
            {
                var data = GetData( );
                if( data.MaxValue != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.MaxValue = value;
                    OnPropertyChanged( );
                }
            }
        }

    }

    public class GuidTimeseriesPropertyDefinitionEntity : TimeseriesPropertyDefinitionEntity
    {
        public GuidTimeseriesPropertyDefinitionEntity( [DisallowNull] EntityContext entityContext, [DisallowNull] GuidTimeseriesPropertyDefinitionObject data )
            : base( entityContext, data )
        {
        }

    }

    public class Int16TimeseriesPropertyDefinitionEntity : TimeseriesPropertyDefinitionEntity
    {
        public Int16TimeseriesPropertyDefinitionEntity( [DisallowNull] EntityContext entityContext, [DisallowNull] Int16TimeseriesPropertyDefinitionObject data )
            : base( entityContext, data )
        {
        }

        private Int16TimeseriesPropertyDefinitionObject GetData( ) 
        {
            return (Int16TimeseriesPropertyDefinitionObject)base._GetData( );
        }

        public short MinValue
        {
            get => GetData( ).MinValue;
            set
            {
                var data = GetData( );
                if( data.MinValue != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.MinValue = value;
                    OnPropertyChanged( );
                }
            }
        }

        public short MaxValue
        {
            get => GetData( ).MaxValue;
            set
            {
                var data = GetData( );
                if( data.MaxValue != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.MaxValue = value;
                    OnPropertyChanged( );
                }
            }
        }

    }

    public class Int32TimeseriesPropertyDefinitionEntity : TimeseriesPropertyDefinitionEntity
    {
        public Int32TimeseriesPropertyDefinitionEntity( [DisallowNull] EntityContext entityContext, [DisallowNull] Int32TimeseriesPropertyDefinitionObject data )
            : base( entityContext, data )
        {
        }

        private Int32TimeseriesPropertyDefinitionObject GetData( ) 
        {
            return (Int32TimeseriesPropertyDefinitionObject)base._GetData( );
        }

        public int MinValue
        {
            get => GetData( ).MinValue;
            set
            {
                var data = GetData( );
                if( data.MinValue != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.MinValue = value;
                    OnPropertyChanged( );
                }
            }
        }

        public int MaxValue
        {
            get => GetData( ).MaxValue;
            set
            {
                var data = GetData( );
                if( data.MaxValue != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.MaxValue = value;
                    OnPropertyChanged( );
                }
            }
        }

    }

    public class Int64TimeseriesPropertyDefinitionEntity : TimeseriesPropertyDefinitionEntity
    {
        public Int64TimeseriesPropertyDefinitionEntity( [DisallowNull] EntityContext entityContext, [DisallowNull] Int64TimeseriesPropertyDefinitionObject data )
            : base( entityContext, data )
        {
        }

        private Int64TimeseriesPropertyDefinitionObject GetData( ) 
        {
            return (Int64TimeseriesPropertyDefinitionObject)base._GetData( );
        }

        public long MinValue
        {
            get => GetData( ).MinValue;
            set
            {
                var data = GetData( );
                if( data.MinValue != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.MinValue = value;
                    OnPropertyChanged( );
                }
            }
        }

        public long MaxValue
        {
            get => GetData( ).MaxValue;
            set
            {
                var data = GetData( );
                if( data.MaxValue != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.MaxValue = value;
                    OnPropertyChanged( );
                }
            }
        }

    }

    public class ReferenceTimeseriesPropertyDefinitionEntity : TimeseriesPropertyDefinitionEntity
    {
        WeakReference? _referencedElementTypeReference = null;
        public ReferenceTimeseriesPropertyDefinitionEntity( [DisallowNull] EntityContext entityContext, [DisallowNull] ReferenceTimeseriesPropertyDefinitionObject data )
            : base( entityContext, data )
        {
        }

        private ReferenceTimeseriesPropertyDefinitionObject GetData( ) 
        {
            return (ReferenceTimeseriesPropertyDefinitionObject)base._GetData( );
        }

        public Guid? ReferencedElementTypeId
        {
            get => GetData( ).ReferencedElementType;
            set
            {
                var data = GetData( );
                if( data.ReferencedElementType != value )
                {
                    OnPropertyChanging( );
                    OnPropertyChanging( "ReferencedElementType", false );
                    data = GetData( );
                    data.ReferencedElementType = value;
                    OnPropertyChanged( );
                    OnPropertyChanged( "ReferencedElementType" );
                }
            }
        }

        public ElementTypeEntity? ReferencedElementType
        {
            get
            {
                if(_referencedElementTypeReference != null)
                {
                    var result = (ElementTypeEntity?)_referencedElementTypeReference.Target;
                    if( result != null )
                    {
                        return result;
                    }
                }
                var data = GetData( );
                var context = CheckedContext;
                if( data.ReferencedElementType is Guid referencedElementTypeId )
                {
                    var entity = context.GetElementTypeById( referencedElementTypeId );
                    if( entity != null )
                    {
                        _referencedElementTypeReference = new WeakReference( entity );
                    }
                    return entity;
                }
                return null;
            }
            set
            {
                ReferencedElementTypeId = value != null? value.Id : null;
            }
        }

    }

    public class SByteTimeseriesPropertyDefinitionEntity : TimeseriesPropertyDefinitionEntity
    {
        public SByteTimeseriesPropertyDefinitionEntity( [DisallowNull] EntityContext entityContext, [DisallowNull] SByteTimeseriesPropertyDefinitionObject data )
            : base( entityContext, data )
        {
        }

        private SByteTimeseriesPropertyDefinitionObject GetData( ) 
        {
            return (SByteTimeseriesPropertyDefinitionObject)base._GetData( );
        }

        public sbyte MinValue
        {
            get => GetData( ).MinValue;
            set
            {
                var data = GetData( );
                if( data.MinValue != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.MinValue = value;
                    OnPropertyChanged( );
                }
            }
        }

        public sbyte MaxValue
        {
            get => GetData( ).MaxValue;
            set
            {
                var data = GetData( );
                if( data.MaxValue != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.MaxValue = value;
                    OnPropertyChanged( );
                }
            }
        }

    }

    public class SingleTimeseriesPropertyDefinitionEntity : TimeseriesPropertyDefinitionEntity
    {
        public SingleTimeseriesPropertyDefinitionEntity( [DisallowNull] EntityContext entityContext, [DisallowNull] SingleTimeseriesPropertyDefinitionObject data )
            : base( entityContext, data )
        {
        }

        private SingleTimeseriesPropertyDefinitionObject GetData( ) 
        {
            return (SingleTimeseriesPropertyDefinitionObject)base._GetData( );
        }

        public float MinValue
        {
            get => GetData( ).MinValue;
            set
            {
                var data = GetData( );
                if( data.MinValue != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.MinValue = value;
                    OnPropertyChanged( );
                }
            }
        }

        public float MaxValue
        {
            get => GetData( ).MaxValue;
            set
            {
                var data = GetData( );
                if( data.MaxValue != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.MaxValue = value;
                    OnPropertyChanged( );
                }
            }
        }

    }

    public class StringTimeseriesPropertyDefinitionEntity : TimeseriesPropertyDefinitionEntity
    {
        public StringTimeseriesPropertyDefinitionEntity( [DisallowNull] EntityContext entityContext, [DisallowNull] StringTimeseriesPropertyDefinitionObject data )
            : base( entityContext, data )
        {
        }

        private StringTimeseriesPropertyDefinitionObject GetData( ) 
        {
            return (StringTimeseriesPropertyDefinitionObject)base._GetData( );
        }

        public string Pattern
        {
            get => GetData( ).Pattern;
            set
            {
                var data = GetData( );
                if( data.Pattern != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Pattern = value;
                    OnPropertyChanged( );
                }
            }
        }

    }

    public class TimeSpanTimeseriesPropertyDefinitionEntity : TimeseriesPropertyDefinitionEntity
    {
        public TimeSpanTimeseriesPropertyDefinitionEntity( [DisallowNull] EntityContext entityContext, [DisallowNull] TimeSpanTimeseriesPropertyDefinitionObject data )
            : base( entityContext, data )
        {
        }

        private TimeSpanTimeseriesPropertyDefinitionObject GetData( ) 
        {
            return (TimeSpanTimeseriesPropertyDefinitionObject)base._GetData( );
        }

        public TimeSpan MinValue
        {
            get => GetData( ).MinValue;
            set
            {
                var data = GetData( );
                if( data.MinValue != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.MinValue = value;
                    OnPropertyChanged( );
                }
            }
        }

        public TimeSpan MaxValue
        {
            get => GetData( ).MaxValue;
            set
            {
                var data = GetData( );
                if( data.MaxValue != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.MaxValue = value;
                    OnPropertyChanged( );
                }
            }
        }

    }

    public class UInt16TimeseriesPropertyDefinitionEntity : TimeseriesPropertyDefinitionEntity
    {
        public UInt16TimeseriesPropertyDefinitionEntity( [DisallowNull] EntityContext entityContext, [DisallowNull] UInt16TimeseriesPropertyDefinitionObject data )
            : base( entityContext, data )
        {
        }

        private UInt16TimeseriesPropertyDefinitionObject GetData( ) 
        {
            return (UInt16TimeseriesPropertyDefinitionObject)base._GetData( );
        }

        public ushort MinValue
        {
            get => GetData( ).MinValue;
            set
            {
                var data = GetData( );
                if( data.MinValue != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.MinValue = value;
                    OnPropertyChanged( );
                }
            }
        }

        public ushort MaxValue
        {
            get => GetData( ).MaxValue;
            set
            {
                var data = GetData( );
                if( data.MaxValue != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.MaxValue = value;
                    OnPropertyChanged( );
                }
            }
        }

    }

    public class UInt32TimeseriesPropertyDefinitionEntity : TimeseriesPropertyDefinitionEntity
    {
        public UInt32TimeseriesPropertyDefinitionEntity( [DisallowNull] EntityContext entityContext, [DisallowNull] UInt32TimeseriesPropertyDefinitionObject data )
            : base( entityContext, data )
        {
        }

        private UInt32TimeseriesPropertyDefinitionObject GetData( ) 
        {
            return (UInt32TimeseriesPropertyDefinitionObject)base._GetData( );
        }

        public uint MinValue
        {
            get => GetData( ).MinValue;
            set
            {
                var data = GetData( );
                if( data.MinValue != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.MinValue = value;
                    OnPropertyChanged( );
                }
            }
        }

        public uint MaxValue
        {
            get => GetData( ).MaxValue;
            set
            {
                var data = GetData( );
                if( data.MaxValue != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.MaxValue = value;
                    OnPropertyChanged( );
                }
            }
        }

    }

    public class UInt64TimeseriesPropertyDefinitionEntity : TimeseriesPropertyDefinitionEntity
    {
        public UInt64TimeseriesPropertyDefinitionEntity( [DisallowNull] EntityContext entityContext, [DisallowNull] UInt64TimeseriesPropertyDefinitionObject data )
            : base( entityContext, data )
        {
        }

        private UInt64TimeseriesPropertyDefinitionObject GetData( ) 
        {
            return (UInt64TimeseriesPropertyDefinitionObject)base._GetData( );
        }

        public long MinValue
        {
            get => GetData( ).MinValue;
            set
            {
                var data = GetData( );
                if( data.MinValue != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.MinValue = value;
                    OnPropertyChanged( );
                }
            }
        }

        public long MaxValue
        {
            get => GetData( ).MaxValue;
            set
            {
                var data = GetData( );
                if( data.MaxValue != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.MaxValue = value;
                    OnPropertyChanged( );
                }
            }
        }

    }

    public class TimeSpanPropertyDefinitionEntity : PropertyDefinitionEntity
    {
        public TimeSpanPropertyDefinitionEntity( [DisallowNull] EntityContext entityContext, [DisallowNull] TimeSpanPropertyDefinitionObject data )
            : base( entityContext, data )
        {
        }

        private TimeSpanPropertyDefinitionObject GetData( ) 
        {
            return (TimeSpanPropertyDefinitionObject)base._GetData( );
        }

        public TimeSpan DefaultValue
        {
            get => GetData( ).DefaultValue;
            set
            {
                var data = GetData( );
                if( data.DefaultValue != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.DefaultValue = value;
                    OnPropertyChanged( );
                }
            }
        }

        public TimeSpan MinValue
        {
            get => GetData( ).MinValue;
            set
            {
                var data = GetData( );
                if( data.MinValue != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.MinValue = value;
                    OnPropertyChanged( );
                }
            }
        }

        public TimeSpan MaxValue
        {
            get => GetData( ).MaxValue;
            set
            {
                var data = GetData( );
                if( data.MaxValue != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.MaxValue = value;
                    OnPropertyChanged( );
                }
            }
        }

    }

    public class UInt16PropertyDefinitionEntity : PropertyDefinitionEntity
    {
        public UInt16PropertyDefinitionEntity( [DisallowNull] EntityContext entityContext, [DisallowNull] UInt16PropertyDefinitionObject data )
            : base( entityContext, data )
        {
        }

        private UInt16PropertyDefinitionObject GetData( ) 
        {
            return (UInt16PropertyDefinitionObject)base._GetData( );
        }

        public ushort DefaultValue
        {
            get => GetData( ).DefaultValue;
            set
            {
                var data = GetData( );
                if( data.DefaultValue != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.DefaultValue = value;
                    OnPropertyChanged( );
                }
            }
        }

        public ushort MinValue
        {
            get => GetData( ).MinValue;
            set
            {
                var data = GetData( );
                if( data.MinValue != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.MinValue = value;
                    OnPropertyChanged( );
                }
            }
        }

        public ushort MaxValue
        {
            get => GetData( ).MaxValue;
            set
            {
                var data = GetData( );
                if( data.MaxValue != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.MaxValue = value;
                    OnPropertyChanged( );
                }
            }
        }

    }

    public class UInt32PropertyDefinitionEntity : PropertyDefinitionEntity
    {
        public UInt32PropertyDefinitionEntity( [DisallowNull] EntityContext entityContext, [DisallowNull] UInt32PropertyDefinitionObject data )
            : base( entityContext, data )
        {
        }

        private UInt32PropertyDefinitionObject GetData( ) 
        {
            return (UInt32PropertyDefinitionObject)base._GetData( );
        }

        public uint DefaultValue
        {
            get => GetData( ).DefaultValue;
            set
            {
                var data = GetData( );
                if( data.DefaultValue != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.DefaultValue = value;
                    OnPropertyChanged( );
                }
            }
        }

        public uint MinValue
        {
            get => GetData( ).MinValue;
            set
            {
                var data = GetData( );
                if( data.MinValue != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.MinValue = value;
                    OnPropertyChanged( );
                }
            }
        }

        public uint MaxValue
        {
            get => GetData( ).MaxValue;
            set
            {
                var data = GetData( );
                if( data.MaxValue != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.MaxValue = value;
                    OnPropertyChanged( );
                }
            }
        }

    }

    public class UInt64PropertyDefinitionEntity : PropertyDefinitionEntity
    {
        public UInt64PropertyDefinitionEntity( [DisallowNull] EntityContext entityContext, [DisallowNull] UInt64PropertyDefinitionObject data )
            : base( entityContext, data )
        {
        }

        private UInt64PropertyDefinitionObject GetData( ) 
        {
            return (UInt64PropertyDefinitionObject)base._GetData( );
        }

        public long DefaultValue
        {
            get => GetData( ).DefaultValue;
            set
            {
                var data = GetData( );
                if( data.DefaultValue != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.DefaultValue = value;
                    OnPropertyChanged( );
                }
            }
        }

        public long MinValue
        {
            get => GetData( ).MinValue;
            set
            {
                var data = GetData( );
                if( data.MinValue != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.MinValue = value;
                    OnPropertyChanged( );
                }
            }
        }

        public long MaxValue
        {
            get => GetData( ).MaxValue;
            set
            {
                var data = GetData( );
                if( data.MaxValue != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.MaxValue = value;
                    OnPropertyChanged( );
                }
            }
        }

    }

    public class RadarAlarmStatusEntity : BaseEntity<Kind>
    {
        WeakReference? _radarReference = null;
        public RadarAlarmStatusEntity( [DisallowNull] EntityContext entityContext, [DisallowNull] RadarAlarmStatusObject data )
            : base( entityContext, data )
        {
        }

        public EntityContext? Context => (EntityContext?)_Context;

        protected EntityContext CheckedContext
        {
            get
            {
                var context = Context;
                if ( context is null )
                {
                    throw new InvalidOperationException( "Context is null" );
                }
                return context;
            }
        }

        private RadarAlarmStatusObject GetData( ) 
        {
            return (RadarAlarmStatusObject)base._GetData( );
        }

        public Guid RadarId
        {
            get => GetData( ).Radar;
            set
            {
                var data = GetData( );
                if( data.Radar != value )
                {
                    OnPropertyChanging( );
                    OnPropertyChanging( "Radar", false );
                    data = GetData( );
                    data.Radar = value;
                    OnPropertyChanged( );
                    OnPropertyChanged( "Radar" );
                }
            }
        }

        public RadarDeviceEntity Radar
        {
            get
            {
                if(_radarReference != null)
                {
                    var result = (RadarDeviceEntity?)_radarReference.Target;
                    if( result != null )
                    {
                        return result;
                    }
                }
                var data = GetData( );
                var context = CheckedContext;
                var entity = context.GetRadarDeviceById( data.Radar );
                if( entity != null )
                {
                    _radarReference = new WeakReference( entity );
                }
                else
                {
                    var message = $"Cannot find the RadarDeviceEntity object identified by {data.Radar}";
                    throw new Exception( message );
                }
                return entity;
            }
            set
            {
                RadarId = value != null? value.Id : Guid.Empty;
            }
        }

        public DateTime Timestamp
        {
            get => GetData( ).Timestamp;
            set
            {
                var data = GetData( );
                if( data.Timestamp != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Timestamp = value;
                    OnPropertyChanged( );
                }
            }
        }

        public Types.AlarmState Type
        {
            get => GetData( ).Type;
            set
            {
                var data = GetData( );
                if( data.Type != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Type = value;
                    OnPropertyChanged( );
                }
            }
        }

    }

    public class RadarCommandEntity : BaseEntity<Kind>
    {
        WeakReference? _radarReference = null;
        WeakReference? _replyReference = null;
        public RadarCommandEntity( [DisallowNull] EntityContext entityContext, [DisallowNull] RadarCommandObject data )
            : base( entityContext, data )
        {
        }

        public EntityContext? Context => (EntityContext?)_Context;

        protected EntityContext CheckedContext
        {
            get
            {
                var context = Context;
                if ( context is null )
                {
                    throw new InvalidOperationException( "Context is null" );
                }
                return context;
            }
        }

        private RadarCommandObject GetData( ) 
        {
            return (RadarCommandObject)base._GetData( );
        }

        public Guid RadarId
        {
            get => GetData( ).Radar;
            set
            {
                var data = GetData( );
                if( data.Radar != value )
                {
                    OnPropertyChanging( );
                    OnPropertyChanging( "Radar", false );
                    data = GetData( );
                    data.Radar = value;
                    OnPropertyChanged( );
                    OnPropertyChanged( "Radar" );
                }
            }
        }

        public RadarDeviceEntity Radar
        {
            get
            {
                if(_radarReference != null)
                {
                    var result = (RadarDeviceEntity?)_radarReference.Target;
                    if( result != null )
                    {
                        return result;
                    }
                }
                var data = GetData( );
                var context = CheckedContext;
                var entity = context.GetRadarDeviceById( data.Radar );
                if( entity != null )
                {
                    _radarReference = new WeakReference( entity );
                }
                else
                {
                    var message = $"Cannot find the RadarDeviceEntity object identified by {data.Radar}";
                    throw new Exception( message );
                }
                return entity;
            }
            set
            {
                RadarId = value != null? value.Id : Guid.Empty;
            }
        }

        public DateTime Timestamp
        {
            get => GetData( ).Timestamp;
            set
            {
                var data = GetData( );
                if( data.Timestamp != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Timestamp = value;
                    OnPropertyChanged( );
                }
            }
        }

        public Types.DeviceCommandSourceType DeviceCommandSourceType
        {
            get => GetData( ).DeviceCommandSourceType;
            set
            {
                var data = GetData( );
                if( data.DeviceCommandSourceType != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.DeviceCommandSourceType = value;
                    OnPropertyChanged( );
                }
            }
        }

        public Guid DeviceCommandSourceId
        {
            get => GetData( ).DeviceCommandSourceId;
            set
            {
                var data = GetData( );
                if( data.DeviceCommandSourceId != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.DeviceCommandSourceId = value;
                    OnPropertyChanged( );
                }
            }
        }

        public Guid? ReplyId
        {
            get => GetData( ).Reply;
            set
            {
                var data = GetData( );
                if( data.Reply != value )
                {
                    OnPropertyChanging( );
                    OnPropertyChanging( "Reply", false );
                    data = GetData( );
                    data.Reply = value;
                    OnPropertyChanged( );
                    OnPropertyChanged( "Reply" );
                }
            }
        }

        public RadarCommandReplyEntity? Reply
        {
            get
            {
                if(_replyReference != null)
                {
                    var result = (RadarCommandReplyEntity?)_replyReference.Target;
                    if( result != null )
                    {
                        return result;
                    }
                }
                var data = GetData( );
                var context = CheckedContext;
                if( data.Reply is Guid replyId )
                {
                    var entity = context.GetRadarCommandReplyById( replyId );
                    if( entity != null )
                    {
                        _replyReference = new WeakReference( entity );
                    }
                    return entity;
                }
                return null;
            }
            set
            {
                ReplyId = value != null? value.Id : null;
            }
        }

    }

    public class RadarCommandGetStatusEntity : RadarCommandEntity
    {
        public RadarCommandGetStatusEntity( [DisallowNull] EntityContext entityContext, [DisallowNull] RadarCommandGetStatusObject data )
            : base( entityContext, data )
        {
        }

    }

    public class RadarCommandReplyEntity : BaseEntity<Kind>
    {
        WeakReference? _radarReference = null;
        WeakReference? _commandReference = null;
        public RadarCommandReplyEntity( [DisallowNull] EntityContext entityContext, [DisallowNull] RadarCommandReplyObject data )
            : base( entityContext, data )
        {
        }

        public EntityContext? Context => (EntityContext?)_Context;

        protected EntityContext CheckedContext
        {
            get
            {
                var context = Context;
                if ( context is null )
                {
                    throw new InvalidOperationException( "Context is null" );
                }
                return context;
            }
        }

        private RadarCommandReplyObject GetData( ) 
        {
            return (RadarCommandReplyObject)base._GetData( );
        }

        public Guid RadarId
        {
            get => GetData( ).Radar;
            set
            {
                var data = GetData( );
                if( data.Radar != value )
                {
                    OnPropertyChanging( );
                    OnPropertyChanging( "Radar", false );
                    data = GetData( );
                    data.Radar = value;
                    OnPropertyChanged( );
                    OnPropertyChanged( "Radar" );
                }
            }
        }

        public RadarDeviceEntity Radar
        {
            get
            {
                if(_radarReference != null)
                {
                    var result = (RadarDeviceEntity?)_radarReference.Target;
                    if( result != null )
                    {
                        return result;
                    }
                }
                var data = GetData( );
                var context = CheckedContext;
                var entity = context.GetRadarDeviceById( data.Radar );
                if( entity != null )
                {
                    _radarReference = new WeakReference( entity );
                }
                else
                {
                    var message = $"Cannot find the RadarDeviceEntity object identified by {data.Radar}";
                    throw new Exception( message );
                }
                return entity;
            }
            set
            {
                RadarId = value != null? value.Id : Guid.Empty;
            }
        }

        public DateTime Timestamp
        {
            get => GetData( ).Timestamp;
            set
            {
                var data = GetData( );
                if( data.Timestamp != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Timestamp = value;
                    OnPropertyChanged( );
                }
            }
        }

        public Guid? CommandId
        {
            get => GetData( ).Command;
            set
            {
                var data = GetData( );
                if( data.Command != value )
                {
                    OnPropertyChanging( );
                    OnPropertyChanging( "Command", false );
                    data = GetData( );
                    data.Command = value;
                    OnPropertyChanged( );
                    OnPropertyChanged( "Command" );
                }
            }
        }

        public RadarCommandEntity? Command
        {
            get
            {
                if(_commandReference != null)
                {
                    var result = (RadarCommandEntity?)_commandReference.Target;
                    if( result != null )
                    {
                        return result;
                    }
                }
                var data = GetData( );
                var context = CheckedContext;
                if( data.Command is Guid commandId )
                {
                    var entity = context.GetRadarCommandById( commandId );
                    if( entity != null )
                    {
                        _commandReference = new WeakReference( entity );
                    }
                    return entity;
                }
                return null;
            }
            set
            {
                CommandId = value != null? value.Id : null;
            }
        }

        public Types.DeviceCommandReplyStatus Status
        {
            get => GetData( ).Status;
            set
            {
                var data = GetData( );
                if( data.Status != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Status = value;
                    OnPropertyChanged( );
                }
            }
        }

        public string Message
        {
            get => GetData( ).Message;
            set
            {
                var data = GetData( );
                if( data.Message != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Message = value;
                    OnPropertyChanged( );
                }
            }
        }

    }

    public class RadarCommandReplyGetStatusEntity : RadarCommandReplyEntity
    {
        public RadarCommandReplyGetStatusEntity( [DisallowNull] EntityContext entityContext, [DisallowNull] RadarCommandReplyGetStatusObject data )
            : base( entityContext, data )
        {
        }

        private RadarCommandReplyGetStatusObject GetData( ) 
        {
            return (RadarCommandReplyGetStatusObject)base._GetData( );
        }

        public int AzimuthCount
        {
            get => GetData( ).AzimuthCount;
            set
            {
                var data = GetData( );
                if( data.AzimuthCount != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.AzimuthCount = value;
                    OnPropertyChanged( );
                }
            }
        }

        public int TriggerCount
        {
            get => GetData( ).TriggerCount;
            set
            {
                var data = GetData( );
                if( data.TriggerCount != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.TriggerCount = value;
                    OnPropertyChanged( );
                }
            }
        }

        public TimeSpan RotationCount
        {
            get => GetData( ).RotationCount;
            set
            {
                var data = GetData( );
                if( data.RotationCount != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.RotationCount = value;
                    OnPropertyChanged( );
                }
            }
        }

        public Types.RadarPulse Pulse
        {
            get => GetData( ).Pulse;
            set
            {
                var data = GetData( );
                if( data.Pulse != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Pulse = value;
                    OnPropertyChanged( );
                }
            }
        }

        public bool Tx
        {
            get => GetData( ).Tx;
            set
            {
                var data = GetData( );
                if( data.Tx != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Tx = value;
                    OnPropertyChanged( );
                }
            }
        }

    }

    public class RadarConfigurationEntity : BaseEntity<Kind>
    {
        WeakReference? _radarReference = null;
        public RadarConfigurationEntity( [DisallowNull] EntityContext entityContext, [DisallowNull] RadarConfigurationObject data )
            : base( entityContext, data )
        {
        }

        public EntityContext? Context => (EntityContext?)_Context;

        protected EntityContext CheckedContext
        {
            get
            {
                var context = Context;
                if ( context is null )
                {
                    throw new InvalidOperationException( "Context is null" );
                }
                return context;
            }
        }

        private RadarConfigurationObject GetData( ) 
        {
            return (RadarConfigurationObject)base._GetData( );
        }

        public Guid RadarId
        {
            get => GetData( ).Radar;
            set
            {
                var data = GetData( );
                if( data.Radar != value )
                {
                    OnPropertyChanging( );
                    OnPropertyChanging( "Radar", false );
                    data = GetData( );
                    data.Radar = value;
                    OnPropertyChanged( );
                    OnPropertyChanged( "Radar" );
                }
            }
        }

        public RadarDeviceEntity Radar
        {
            get
            {
                if(_radarReference != null)
                {
                    var result = (RadarDeviceEntity?)_radarReference.Target;
                    if( result != null )
                    {
                        return result;
                    }
                }
                var data = GetData( );
                var context = CheckedContext;
                var entity = context.GetRadarDeviceById( data.Radar );
                if( entity != null )
                {
                    _radarReference = new WeakReference( entity );
                }
                else
                {
                    var message = $"Cannot find the RadarDeviceEntity object identified by {data.Radar}";
                    throw new Exception( message );
                }
                return entity;
            }
            set
            {
                RadarId = value != null? value.Id : Guid.Empty;
            }
        }

        public DateTime Timestamp
        {
            get => GetData( ).Timestamp;
            set
            {
                var data = GetData( );
                if( data.Timestamp != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Timestamp = value;
                    OnPropertyChanged( );
                }
            }
        }

        public int RadarProtocolVersion
        {
            get => GetData( ).RadarProtocolVersion;
            set
            {
                var data = GetData( );
                if( data.RadarProtocolVersion != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.RadarProtocolVersion = value;
                    OnPropertyChanged( );
                }
            }
        }

        public string RadarIPAddress
        {
            get => GetData( ).RadarIPAddress;
            set
            {
                var data = GetData( );
                if( data.RadarIPAddress != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.RadarIPAddress = value;
                    OnPropertyChanged( );
                }
            }
        }

        public int RadarPort
        {
            get => GetData( ).RadarPort;
            set
            {
                var data = GetData( );
                if( data.RadarPort != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.RadarPort = value;
                    OnPropertyChanged( );
                }
            }
        }

        public int RadarConfigurationPort
        {
            get => GetData( ).RadarConfigurationPort;
            set
            {
                var data = GetData( );
                if( data.RadarConfigurationPort != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.RadarConfigurationPort = value;
                    OnPropertyChanged( );
                }
            }
        }

        public TimeSpan SkipMagicTimeout
        {
            get => GetData( ).SkipMagicTimeout;
            set
            {
                var data = GetData( );
                if( data.SkipMagicTimeout != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.SkipMagicTimeout = value;
                    OnPropertyChanged( );
                }
            }
        }

        public TimeSpan ReadTimeout
        {
            get => GetData( ).ReadTimeout;
            set
            {
                var data = GetData( );
                if( data.ReadTimeout != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.ReadTimeout = value;
                    OnPropertyChanged( );
                }
            }
        }

        public TimeSpan SynchronizationInterval
        {
            get => GetData( ).SynchronizationInterval;
            set
            {
                var data = GetData( );
                if( data.SynchronizationInterval != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.SynchronizationInterval = value;
                    OnPropertyChanged( );
                }
            }
        }

        public int TargetsRefreshRate
        {
            get => GetData( ).TargetsRefreshRate;
            set
            {
                var data = GetData( );
                if( data.TargetsRefreshRate != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.TargetsRefreshRate = value;
                    OnPropertyChanged( );
                }
            }
        }

        public int Range
        {
            get => GetData( ).Range;
            set
            {
                var data = GetData( );
                if( data.Range != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Range = value;
                    OnPropertyChanged( );
                }
            }
        }

        public int SectorCount
        {
            get => GetData( ).SectorCount;
            set
            {
                var data = GetData( );
                if( data.SectorCount != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.SectorCount = value;
                    OnPropertyChanged( );
                }
            }
        }

        public int SectorOffset
        {
            get => GetData( ).SectorOffset;
            set
            {
                var data = GetData( );
                if( data.SectorOffset != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.SectorOffset = value;
                    OnPropertyChanged( );
                }
            }
        }

        public uint ImageColor
        {
            get => GetData( ).ImageColor;
            set
            {
                var data = GetData( );
                if( data.ImageColor != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.ImageColor = value;
                    OnPropertyChanged( );
                }
            }
        }

        public uint? ImageSubstitutionColor
        {
            get => GetData( ).ImageSubstitutionColor;
            set
            {
                var data = GetData( );
                if( data.ImageSubstitutionColor != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.ImageSubstitutionColor = value;
                    OnPropertyChanged( );
                }
            }
        }

        public uint TransparentColor
        {
            get => GetData( ).TransparentColor;
            set
            {
                var data = GetData( );
                if( data.TransparentColor != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.TransparentColor = value;
                    OnPropertyChanged( );
                }
            }
        }

        public double ImageScaleFactorX
        {
            get => GetData( ).ImageScaleFactorX;
            set
            {
                var data = GetData( );
                if( data.ImageScaleFactorX != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.ImageScaleFactorX = value;
                    OnPropertyChanged( );
                }
            }
        }

        public double ImageOffsetX
        {
            get => GetData( ).ImageOffsetX;
            set
            {
                var data = GetData( );
                if( data.ImageOffsetX != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.ImageOffsetX = value;
                    OnPropertyChanged( );
                }
            }
        }

        public double ImageScaleFactorY
        {
            get => GetData( ).ImageScaleFactorY;
            set
            {
                var data = GetData( );
                if( data.ImageScaleFactorY != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.ImageScaleFactorY = value;
                    OnPropertyChanged( );
                }
            }
        }

        public double ImageOffsetY
        {
            get => GetData( ).ImageOffsetY;
            set
            {
                var data = GetData( );
                if( data.ImageOffsetY != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.ImageOffsetY = value;
                    OnPropertyChanged( );
                }
            }
        }

        public Types.RadarImageType RadarImageType
        {
            get => GetData( ).RadarImageType;
            set
            {
                var data = GetData( );
                if( data.RadarImageType != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.RadarImageType = value;
                    OnPropertyChanged( );
                }
            }
        }

        public uint TrackColor
        {
            get => GetData( ).TrackColor;
            set
            {
                var data = GetData( );
                if( data.TrackColor != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.TrackColor = value;
                    OnPropertyChanged( );
                }
            }
        }

        public uint VectorColor
        {
            get => GetData( ).VectorColor;
            set
            {
                var data = GetData( );
                if( data.VectorColor != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.VectorColor = value;
                    OnPropertyChanged( );
                }
            }
        }

        public bool EnableNmea
        {
            get => GetData( ).EnableNmea;
            set
            {
                var data = GetData( );
                if( data.EnableNmea != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.EnableNmea = value;
                    OnPropertyChanged( );
                }
            }
        }

        public string NmeaReceiverIPAddress
        {
            get => GetData( ).NmeaReceiverIPAddress;
            set
            {
                var data = GetData( );
                if( data.NmeaReceiverIPAddress != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.NmeaReceiverIPAddress = value;
                    OnPropertyChanged( );
                }
            }
        }

        public int NmeaReceiverPort
        {
            get => GetData( ).NmeaReceiverPort;
            set
            {
                var data = GetData( );
                if( data.NmeaReceiverPort != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.NmeaReceiverPort = value;
                    OnPropertyChanged( );
                }
            }
        }

        public string NmeaReceiverSourceId
        {
            get => GetData( ).NmeaReceiverSourceId;
            set
            {
                var data = GetData( );
                if( data.NmeaReceiverSourceId != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.NmeaReceiverSourceId = value;
                    OnPropertyChanged( );
                }
            }
        }

    }

    public class RadarImageEntity : BaseEntity<Kind>
    {
        WeakReference? _radarReference = null;
        public RadarImageEntity( [DisallowNull] EntityContext entityContext, [DisallowNull] RadarImageObject data )
            : base( entityContext, data )
        {
        }

        public EntityContext? Context => (EntityContext?)_Context;

        protected EntityContext CheckedContext
        {
            get
            {
                var context = Context;
                if ( context is null )
                {
                    throw new InvalidOperationException( "Context is null" );
                }
                return context;
            }
        }

        private RadarImageObject GetData( ) 
        {
            return (RadarImageObject)base._GetData( );
        }

        public Guid RadarId
        {
            get => GetData( ).Radar;
            set
            {
                var data = GetData( );
                if( data.Radar != value )
                {
                    OnPropertyChanging( );
                    OnPropertyChanging( "Radar", false );
                    data = GetData( );
                    data.Radar = value;
                    OnPropertyChanged( );
                    OnPropertyChanged( "Radar" );
                }
            }
        }

        public RadarDeviceEntity Radar
        {
            get
            {
                if(_radarReference != null)
                {
                    var result = (RadarDeviceEntity?)_radarReference.Target;
                    if( result != null )
                    {
                        return result;
                    }
                }
                var data = GetData( );
                var context = CheckedContext;
                var entity = context.GetRadarDeviceById( data.Radar );
                if( entity != null )
                {
                    _radarReference = new WeakReference( entity );
                }
                else
                {
                    var message = $"Cannot find the RadarDeviceEntity object identified by {data.Radar}";
                    throw new Exception( message );
                }
                return entity;
            }
            set
            {
                RadarId = value != null? value.Id : Guid.Empty;
            }
        }

        public DateTime Timestamp
        {
            get => GetData( ).Timestamp;
            set
            {
                var data = GetData( );
                if( data.Timestamp != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Timestamp = value;
                    OnPropertyChanged( );
                }
            }
        }

        public uint Depth
        {
            get => GetData( ).Depth;
            set
            {
                var data = GetData( );
                if( data.Depth != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Depth = value;
                    OnPropertyChanged( );
                }
            }
        }

        public int Resolution
        {
            get => GetData( ).Resolution;
            set
            {
                var data = GetData( );
                if( data.Resolution != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Resolution = value;
                    OnPropertyChanged( );
                }
            }
        }

        public int Range
        {
            get => GetData( ).Range;
            set
            {
                var data = GetData( );
                if( data.Range != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Range = value;
                    OnPropertyChanged( );
                }
            }
        }

        public byte[] Image
        {
            get => GetData( ).Image;
            set
            {
                var data = GetData( );
                if( data.Image != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Image = value;
                    OnPropertyChanged( );
                }
            }
        }

    }

    public class RadarRawTrackTableEntity : BaseEntity<Kind>
    {
        WeakReference? _radarReference = null;
        public RadarRawTrackTableEntity( [DisallowNull] EntityContext entityContext, [DisallowNull] RadarRawTrackTableObject data )
            : base( entityContext, data )
        {
        }

        public EntityContext? Context => (EntityContext?)_Context;

        protected EntityContext CheckedContext
        {
            get
            {
                var context = Context;
                if ( context is null )
                {
                    throw new InvalidOperationException( "Context is null" );
                }
                return context;
            }
        }

        private RadarRawTrackTableObject GetData( ) 
        {
            return (RadarRawTrackTableObject)base._GetData( );
        }

        public Guid RadarId
        {
            get => GetData( ).Radar;
            set
            {
                var data = GetData( );
                if( data.Radar != value )
                {
                    OnPropertyChanging( );
                    OnPropertyChanging( "Radar", false );
                    data = GetData( );
                    data.Radar = value;
                    OnPropertyChanged( );
                    OnPropertyChanged( "Radar" );
                }
            }
        }

        public RadarDeviceEntity Radar
        {
            get
            {
                if(_radarReference != null)
                {
                    var result = (RadarDeviceEntity?)_radarReference.Target;
                    if( result != null )
                    {
                        return result;
                    }
                }
                var data = GetData( );
                var context = CheckedContext;
                var entity = context.GetRadarDeviceById( data.Radar );
                if( entity != null )
                {
                    _radarReference = new WeakReference( entity );
                }
                else
                {
                    var message = $"Cannot find the RadarDeviceEntity object identified by {data.Radar}";
                    throw new Exception( message );
                }
                return entity;
            }
            set
            {
                RadarId = value != null? value.Id : Guid.Empty;
            }
        }

        public DateTime Timestamp
        {
            get => GetData( ).Timestamp;
            set
            {
                var data = GetData( );
                if( data.Timestamp != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Timestamp = value;
                    OnPropertyChanged( );
                }
            }
        }

        public int Count
        {
            get => GetData( ).Count;
            set
            {
                var data = GetData( );
                if( data.Count != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Count = value;
                    OnPropertyChanged( );
                }
            }
        }

        public byte[] Table
        {
            get => GetData( ).Table;
            set
            {
                var data = GetData( );
                if( data.Table != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Table = value;
                    OnPropertyChanged( );
                }
            }
        }

    }

    public class RadarStatusEntity : BaseEntity<Kind>
    {
        WeakReference? _radarReference = null;
        public RadarStatusEntity( [DisallowNull] EntityContext entityContext, [DisallowNull] RadarStatusObject data )
            : base( entityContext, data )
        {
        }

        public EntityContext? Context => (EntityContext?)_Context;

        protected EntityContext CheckedContext
        {
            get
            {
                var context = Context;
                if ( context is null )
                {
                    throw new InvalidOperationException( "Context is null" );
                }
                return context;
            }
        }

        private RadarStatusObject GetData( ) 
        {
            return (RadarStatusObject)base._GetData( );
        }

        public Guid RadarId
        {
            get => GetData( ).Radar;
            set
            {
                var data = GetData( );
                if( data.Radar != value )
                {
                    OnPropertyChanging( );
                    OnPropertyChanging( "Radar", false );
                    data = GetData( );
                    data.Radar = value;
                    OnPropertyChanged( );
                    OnPropertyChanged( "Radar" );
                }
            }
        }

        public RadarDeviceEntity Radar
        {
            get
            {
                if(_radarReference != null)
                {
                    var result = (RadarDeviceEntity?)_radarReference.Target;
                    if( result != null )
                    {
                        return result;
                    }
                }
                var data = GetData( );
                var context = CheckedContext;
                var entity = context.GetRadarDeviceById( data.Radar );
                if( entity != null )
                {
                    _radarReference = new WeakReference( entity );
                }
                else
                {
                    var message = $"Cannot find the RadarDeviceEntity object identified by {data.Radar}";
                    throw new Exception( message );
                }
                return entity;
            }
            set
            {
                RadarId = value != null? value.Id : Guid.Empty;
            }
        }

        public DateTime Timestamp
        {
            get => GetData( ).Timestamp;
            set
            {
                var data = GetData( );
                if( data.Timestamp != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Timestamp = value;
                    OnPropertyChanged( );
                }
            }
        }

        public int AzimuthCount
        {
            get => GetData( ).AzimuthCount;
            set
            {
                var data = GetData( );
                if( data.AzimuthCount != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.AzimuthCount = value;
                    OnPropertyChanged( );
                }
            }
        }

        public int TriggerCount
        {
            get => GetData( ).TriggerCount;
            set
            {
                var data = GetData( );
                if( data.TriggerCount != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.TriggerCount = value;
                    OnPropertyChanged( );
                }
            }
        }

        public TimeSpan RotationTime
        {
            get => GetData( ).RotationTime;
            set
            {
                var data = GetData( );
                if( data.RotationTime != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.RotationTime = value;
                    OnPropertyChanged( );
                }
            }
        }

        public Types.RadarPulse Pulse
        {
            get => GetData( ).Pulse;
            set
            {
                var data = GetData( );
                if( data.Pulse != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Pulse = value;
                    OnPropertyChanged( );
                }
            }
        }

        public bool Tx
        {
            get => GetData( ).Tx;
            set
            {
                var data = GetData( );
                if( data.Tx != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Tx = value;
                    OnPropertyChanged( );
                }
            }
        }

        public bool Tracking
        {
            get => GetData( ).Tracking;
            set
            {
                var data = GetData( );
                if( data.Tracking != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Tracking = value;
                    OnPropertyChanged( );
                }
            }
        }

    }

    public class RadioCommandEntity : BaseEntity<Kind>
    {
        WeakReference? _radioReference = null;
        WeakReference? _replyReference = null;
        public RadioCommandEntity( [DisallowNull] EntityContext entityContext, [DisallowNull] RadioCommandObject data )
            : base( entityContext, data )
        {
        }

        public EntityContext? Context => (EntityContext?)_Context;

        protected EntityContext CheckedContext
        {
            get
            {
                var context = Context;
                if ( context is null )
                {
                    throw new InvalidOperationException( "Context is null" );
                }
                return context;
            }
        }

        private RadioCommandObject GetData( ) 
        {
            return (RadioCommandObject)base._GetData( );
        }

        public Guid RadioId
        {
            get => GetData( ).Radio;
            set
            {
                var data = GetData( );
                if( data.Radio != value )
                {
                    OnPropertyChanging( );
                    OnPropertyChanging( "Radio", false );
                    data = GetData( );
                    data.Radio = value;
                    OnPropertyChanged( );
                    OnPropertyChanged( "Radio" );
                }
            }
        }

        public RadioDeviceEntity Radio
        {
            get
            {
                if(_radioReference != null)
                {
                    var result = (RadioDeviceEntity?)_radioReference.Target;
                    if( result != null )
                    {
                        return result;
                    }
                }
                var data = GetData( );
                var context = CheckedContext;
                var entity = context.GetRadioDeviceById( data.Radio );
                if( entity != null )
                {
                    _radioReference = new WeakReference( entity );
                }
                else
                {
                    var message = $"Cannot find the RadioDeviceEntity object identified by {data.Radio}";
                    throw new Exception( message );
                }
                return entity;
            }
            set
            {
                RadioId = value != null? value.Id : Guid.Empty;
            }
        }

        public DateTime Timestamp
        {
            get => GetData( ).Timestamp;
            set
            {
                var data = GetData( );
                if( data.Timestamp != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Timestamp = value;
                    OnPropertyChanged( );
                }
            }
        }

        public Types.DeviceCommandSourceType DeviceCommandSourceType
        {
            get => GetData( ).DeviceCommandSourceType;
            set
            {
                var data = GetData( );
                if( data.DeviceCommandSourceType != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.DeviceCommandSourceType = value;
                    OnPropertyChanged( );
                }
            }
        }

        public Guid DeviceCommandSourceId
        {
            get => GetData( ).DeviceCommandSourceId;
            set
            {
                var data = GetData( );
                if( data.DeviceCommandSourceId != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.DeviceCommandSourceId = value;
                    OnPropertyChanged( );
                }
            }
        }

        public Guid? ReplyId
        {
            get => GetData( ).Reply;
            set
            {
                var data = GetData( );
                if( data.Reply != value )
                {
                    OnPropertyChanging( );
                    OnPropertyChanging( "Reply", false );
                    data = GetData( );
                    data.Reply = value;
                    OnPropertyChanged( );
                    OnPropertyChanged( "Reply" );
                }
            }
        }

        public RadioCommandReplyEntity? Reply
        {
            get
            {
                if(_replyReference != null)
                {
                    var result = (RadioCommandReplyEntity?)_replyReference.Target;
                    if( result != null )
                    {
                        return result;
                    }
                }
                var data = GetData( );
                var context = CheckedContext;
                if( data.Reply is Guid replyId )
                {
                    var entity = context.GetRadioCommandReplyById( replyId );
                    if( entity != null )
                    {
                        _replyReference = new WeakReference( entity );
                    }
                    return entity;
                }
                return null;
            }
            set
            {
                ReplyId = value != null? value.Id : null;
            }
        }

    }

    public class RadioCommandReplyEntity : BaseEntity<Kind>
    {
        WeakReference? _radioReference = null;
        WeakReference? _commandReference = null;
        public RadioCommandReplyEntity( [DisallowNull] EntityContext entityContext, [DisallowNull] RadioCommandReplyObject data )
            : base( entityContext, data )
        {
        }

        public EntityContext? Context => (EntityContext?)_Context;

        protected EntityContext CheckedContext
        {
            get
            {
                var context = Context;
                if ( context is null )
                {
                    throw new InvalidOperationException( "Context is null" );
                }
                return context;
            }
        }

        private RadioCommandReplyObject GetData( ) 
        {
            return (RadioCommandReplyObject)base._GetData( );
        }

        public Guid RadioId
        {
            get => GetData( ).Radio;
            set
            {
                var data = GetData( );
                if( data.Radio != value )
                {
                    OnPropertyChanging( );
                    OnPropertyChanging( "Radio", false );
                    data = GetData( );
                    data.Radio = value;
                    OnPropertyChanged( );
                    OnPropertyChanged( "Radio" );
                }
            }
        }

        public RadioDeviceEntity Radio
        {
            get
            {
                if(_radioReference != null)
                {
                    var result = (RadioDeviceEntity?)_radioReference.Target;
                    if( result != null )
                    {
                        return result;
                    }
                }
                var data = GetData( );
                var context = CheckedContext;
                var entity = context.GetRadioDeviceById( data.Radio );
                if( entity != null )
                {
                    _radioReference = new WeakReference( entity );
                }
                else
                {
                    var message = $"Cannot find the RadioDeviceEntity object identified by {data.Radio}";
                    throw new Exception( message );
                }
                return entity;
            }
            set
            {
                RadioId = value != null? value.Id : Guid.Empty;
            }
        }

        public DateTime Timestamp
        {
            get => GetData( ).Timestamp;
            set
            {
                var data = GetData( );
                if( data.Timestamp != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Timestamp = value;
                    OnPropertyChanged( );
                }
            }
        }

        public Guid? CommandId
        {
            get => GetData( ).Command;
            set
            {
                var data = GetData( );
                if( data.Command != value )
                {
                    OnPropertyChanging( );
                    OnPropertyChanging( "Command", false );
                    data = GetData( );
                    data.Command = value;
                    OnPropertyChanged( );
                    OnPropertyChanged( "Command" );
                }
            }
        }

        public RadioCommandEntity? Command
        {
            get
            {
                if(_commandReference != null)
                {
                    var result = (RadioCommandEntity?)_commandReference.Target;
                    if( result != null )
                    {
                        return result;
                    }
                }
                var data = GetData( );
                var context = CheckedContext;
                if( data.Command is Guid commandId )
                {
                    var entity = context.GetRadioCommandById( commandId );
                    if( entity != null )
                    {
                        _commandReference = new WeakReference( entity );
                    }
                    return entity;
                }
                return null;
            }
            set
            {
                CommandId = value != null? value.Id : null;
            }
        }

        public Types.DeviceCommandReplyStatus Status
        {
            get => GetData( ).Status;
            set
            {
                var data = GetData( );
                if( data.Status != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Status = value;
                    OnPropertyChanged( );
                }
            }
        }

        public string Message
        {
            get => GetData( ).Message;
            set
            {
                var data = GetData( );
                if( data.Message != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Message = value;
                    OnPropertyChanged( );
                }
            }
        }

    }

    public class RadioConfigurationEntity : BaseEntity<Kind>
    {
        WeakReference? _radioReference = null;
        public RadioConfigurationEntity( [DisallowNull] EntityContext entityContext, [DisallowNull] RadioConfigurationObject data )
            : base( entityContext, data )
        {
        }

        public EntityContext? Context => (EntityContext?)_Context;

        protected EntityContext CheckedContext
        {
            get
            {
                var context = Context;
                if ( context is null )
                {
                    throw new InvalidOperationException( "Context is null" );
                }
                return context;
            }
        }

        private RadioConfigurationObject GetData( ) 
        {
            return (RadioConfigurationObject)base._GetData( );
        }

        public Guid RadioId
        {
            get => GetData( ).Radio;
            set
            {
                var data = GetData( );
                if( data.Radio != value )
                {
                    OnPropertyChanging( );
                    OnPropertyChanging( "Radio", false );
                    data = GetData( );
                    data.Radio = value;
                    OnPropertyChanged( );
                    OnPropertyChanged( "Radio" );
                }
            }
        }

        public RadioDeviceEntity Radio
        {
            get
            {
                if(_radioReference != null)
                {
                    var result = (RadioDeviceEntity?)_radioReference.Target;
                    if( result != null )
                    {
                        return result;
                    }
                }
                var data = GetData( );
                var context = CheckedContext;
                var entity = context.GetRadioDeviceById( data.Radio );
                if( entity != null )
                {
                    _radioReference = new WeakReference( entity );
                }
                else
                {
                    var message = $"Cannot find the RadioDeviceEntity object identified by {data.Radio}";
                    throw new Exception( message );
                }
                return entity;
            }
            set
            {
                RadioId = value != null? value.Id : Guid.Empty;
            }
        }

        public DateTime Timestamp
        {
            get => GetData( ).Timestamp;
            set
            {
                var data = GetData( );
                if( data.Timestamp != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Timestamp = value;
                    OnPropertyChanged( );
                }
            }
        }

        public double Longitude
        {
            get => GetData( ).Longitude;
            set
            {
                var data = GetData( );
                if( data.Longitude != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Longitude = value;
                    OnPropertyChanged( );
                }
            }
        }

        public double Latitude
        {
            get => GetData( ).Latitude;
            set
            {
                var data = GetData( );
                if( data.Latitude != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Latitude = value;
                    OnPropertyChanged( );
                }
            }
        }

        public string PlaybackUrl
        {
            get => GetData( ).PlaybackUrl;
            set
            {
                var data = GetData( );
                if( data.PlaybackUrl != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.PlaybackUrl = value;
                    OnPropertyChanged( );
                }
            }
        }

        public string RadioIPAddress
        {
            get => GetData( ).RadioIPAddress;
            set
            {
                var data = GetData( );
                if( data.RadioIPAddress != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.RadioIPAddress = value;
                    OnPropertyChanged( );
                }
            }
        }

        public int RadioPort
        {
            get => GetData( ).RadioPort;
            set
            {
                var data = GetData( );
                if( data.RadioPort != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.RadioPort = value;
                    OnPropertyChanged( );
                }
            }
        }

        public string Ed137IPAddress
        {
            get => GetData( ).Ed137IPAddress;
            set
            {
                var data = GetData( );
                if( data.Ed137IPAddress != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Ed137IPAddress = value;
                    OnPropertyChanged( );
                }
            }
        }

        public int Ed137Port
        {
            get => GetData( ).Ed137Port;
            set
            {
                var data = GetData( );
                if( data.Ed137Port != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Ed137Port = value;
                    OnPropertyChanged( );
                }
            }
        }

    }

    public class RadomeCommandEntity : BaseEntity<Kind>
    {
        WeakReference? _radomeReference = null;
        WeakReference? _replyReference = null;
        public RadomeCommandEntity( [DisallowNull] EntityContext entityContext, [DisallowNull] RadomeCommandObject data )
            : base( entityContext, data )
        {
        }

        public EntityContext? Context => (EntityContext?)_Context;

        protected EntityContext CheckedContext
        {
            get
            {
                var context = Context;
                if ( context is null )
                {
                    throw new InvalidOperationException( "Context is null" );
                }
                return context;
            }
        }

        private RadomeCommandObject GetData( ) 
        {
            return (RadomeCommandObject)base._GetData( );
        }

        public Guid RadomeId
        {
            get => GetData( ).Radome;
            set
            {
                var data = GetData( );
                if( data.Radome != value )
                {
                    OnPropertyChanging( );
                    OnPropertyChanging( "Radome", false );
                    data = GetData( );
                    data.Radome = value;
                    OnPropertyChanged( );
                    OnPropertyChanged( "Radome" );
                }
            }
        }

        public RadomeDeviceEntity Radome
        {
            get
            {
                if(_radomeReference != null)
                {
                    var result = (RadomeDeviceEntity?)_radomeReference.Target;
                    if( result != null )
                    {
                        return result;
                    }
                }
                var data = GetData( );
                var context = CheckedContext;
                var entity = context.GetRadomeDeviceById( data.Radome );
                if( entity != null )
                {
                    _radomeReference = new WeakReference( entity );
                }
                else
                {
                    var message = $"Cannot find the RadomeDeviceEntity object identified by {data.Radome}";
                    throw new Exception( message );
                }
                return entity;
            }
            set
            {
                RadomeId = value != null? value.Id : Guid.Empty;
            }
        }

        public DateTime Timestamp
        {
            get => GetData( ).Timestamp;
            set
            {
                var data = GetData( );
                if( data.Timestamp != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Timestamp = value;
                    OnPropertyChanged( );
                }
            }
        }

        public Types.DeviceCommandSourceType DeviceCommandSourceType
        {
            get => GetData( ).DeviceCommandSourceType;
            set
            {
                var data = GetData( );
                if( data.DeviceCommandSourceType != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.DeviceCommandSourceType = value;
                    OnPropertyChanged( );
                }
            }
        }

        public Guid DeviceCommandSourceId
        {
            get => GetData( ).DeviceCommandSourceId;
            set
            {
                var data = GetData( );
                if( data.DeviceCommandSourceId != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.DeviceCommandSourceId = value;
                    OnPropertyChanged( );
                }
            }
        }

        public Guid? ReplyId
        {
            get => GetData( ).Reply;
            set
            {
                var data = GetData( );
                if( data.Reply != value )
                {
                    OnPropertyChanging( );
                    OnPropertyChanging( "Reply", false );
                    data = GetData( );
                    data.Reply = value;
                    OnPropertyChanged( );
                    OnPropertyChanged( "Reply" );
                }
            }
        }

        public RadomeCommandReplyEntity? Reply
        {
            get
            {
                if(_replyReference != null)
                {
                    var result = (RadomeCommandReplyEntity?)_replyReference.Target;
                    if( result != null )
                    {
                        return result;
                    }
                }
                var data = GetData( );
                var context = CheckedContext;
                if( data.Reply is Guid replyId )
                {
                    var entity = context.GetRadomeCommandReplyById( replyId );
                    if( entity != null )
                    {
                        _replyReference = new WeakReference( entity );
                    }
                    return entity;
                }
                return null;
            }
            set
            {
                ReplyId = value != null? value.Id : null;
            }
        }

    }

    public class RadomeCommandReplyEntity : BaseEntity<Kind>
    {
        WeakReference? _radomeReference = null;
        WeakReference? _commandReference = null;
        public RadomeCommandReplyEntity( [DisallowNull] EntityContext entityContext, [DisallowNull] RadomeCommandReplyObject data )
            : base( entityContext, data )
        {
        }

        public EntityContext? Context => (EntityContext?)_Context;

        protected EntityContext CheckedContext
        {
            get
            {
                var context = Context;
                if ( context is null )
                {
                    throw new InvalidOperationException( "Context is null" );
                }
                return context;
            }
        }

        private RadomeCommandReplyObject GetData( ) 
        {
            return (RadomeCommandReplyObject)base._GetData( );
        }

        public Guid RadomeId
        {
            get => GetData( ).Radome;
            set
            {
                var data = GetData( );
                if( data.Radome != value )
                {
                    OnPropertyChanging( );
                    OnPropertyChanging( "Radome", false );
                    data = GetData( );
                    data.Radome = value;
                    OnPropertyChanged( );
                    OnPropertyChanged( "Radome" );
                }
            }
        }

        public RadomeDeviceEntity Radome
        {
            get
            {
                if(_radomeReference != null)
                {
                    var result = (RadomeDeviceEntity?)_radomeReference.Target;
                    if( result != null )
                    {
                        return result;
                    }
                }
                var data = GetData( );
                var context = CheckedContext;
                var entity = context.GetRadomeDeviceById( data.Radome );
                if( entity != null )
                {
                    _radomeReference = new WeakReference( entity );
                }
                else
                {
                    var message = $"Cannot find the RadomeDeviceEntity object identified by {data.Radome}";
                    throw new Exception( message );
                }
                return entity;
            }
            set
            {
                RadomeId = value != null? value.Id : Guid.Empty;
            }
        }

        public DateTime Timestamp
        {
            get => GetData( ).Timestamp;
            set
            {
                var data = GetData( );
                if( data.Timestamp != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Timestamp = value;
                    OnPropertyChanged( );
                }
            }
        }

        public Guid? CommandId
        {
            get => GetData( ).Command;
            set
            {
                var data = GetData( );
                if( data.Command != value )
                {
                    OnPropertyChanging( );
                    OnPropertyChanging( "Command", false );
                    data = GetData( );
                    data.Command = value;
                    OnPropertyChanged( );
                    OnPropertyChanged( "Command" );
                }
            }
        }

        public RadomeCommandEntity? Command
        {
            get
            {
                if(_commandReference != null)
                {
                    var result = (RadomeCommandEntity?)_commandReference.Target;
                    if( result != null )
                    {
                        return result;
                    }
                }
                var data = GetData( );
                var context = CheckedContext;
                if( data.Command is Guid commandId )
                {
                    var entity = context.GetRadomeCommandById( commandId );
                    if( entity != null )
                    {
                        _commandReference = new WeakReference( entity );
                    }
                    return entity;
                }
                return null;
            }
            set
            {
                CommandId = value != null? value.Id : null;
            }
        }

        public Types.DeviceCommandReplyStatus Status
        {
            get => GetData( ).Status;
            set
            {
                var data = GetData( );
                if( data.Status != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Status = value;
                    OnPropertyChanged( );
                }
            }
        }

        public string Message
        {
            get => GetData( ).Message;
            set
            {
                var data = GetData( );
                if( data.Message != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Message = value;
                    OnPropertyChanged( );
                }
            }
        }

    }

    public class RadomeConfigurationEntity : BaseEntity<Kind>
    {
        WeakReference? _radomeReference = null;
        public RadomeConfigurationEntity( [DisallowNull] EntityContext entityContext, [DisallowNull] RadomeConfigurationObject data )
            : base( entityContext, data )
        {
        }

        public EntityContext? Context => (EntityContext?)_Context;

        protected EntityContext CheckedContext
        {
            get
            {
                var context = Context;
                if ( context is null )
                {
                    throw new InvalidOperationException( "Context is null" );
                }
                return context;
            }
        }

        private RadomeConfigurationObject GetData( ) 
        {
            return (RadomeConfigurationObject)base._GetData( );
        }

        public Guid RadomeId
        {
            get => GetData( ).Radome;
            set
            {
                var data = GetData( );
                if( data.Radome != value )
                {
                    OnPropertyChanging( );
                    OnPropertyChanging( "Radome", false );
                    data = GetData( );
                    data.Radome = value;
                    OnPropertyChanged( );
                    OnPropertyChanged( "Radome" );
                }
            }
        }

        public RadomeDeviceEntity Radome
        {
            get
            {
                if(_radomeReference != null)
                {
                    var result = (RadomeDeviceEntity?)_radomeReference.Target;
                    if( result != null )
                    {
                        return result;
                    }
                }
                var data = GetData( );
                var context = CheckedContext;
                var entity = context.GetRadomeDeviceById( data.Radome );
                if( entity != null )
                {
                    _radomeReference = new WeakReference( entity );
                }
                else
                {
                    var message = $"Cannot find the RadomeDeviceEntity object identified by {data.Radome}";
                    throw new Exception( message );
                }
                return entity;
            }
            set
            {
                RadomeId = value != null? value.Id : Guid.Empty;
            }
        }

        public DateTime Timestamp
        {
            get => GetData( ).Timestamp;
            set
            {
                var data = GetData( );
                if( data.Timestamp != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Timestamp = value;
                    OnPropertyChanged( );
                }
            }
        }

        public TimeSpan Interval
        {
            get => GetData( ).Interval;
            set
            {
                var data = GetData( );
                if( data.Interval != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Interval = value;
                    OnPropertyChanged( );
                }
            }
        }

        public double LowPressureLimit
        {
            get => GetData( ).LowPressureLimit;
            set
            {
                var data = GetData( );
                if( data.LowPressureLimit != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.LowPressureLimit = value;
                    OnPropertyChanged( );
                }
            }
        }

        public double HighPressureLimit
        {
            get => GetData( ).HighPressureLimit;
            set
            {
                var data = GetData( );
                if( data.HighPressureLimit != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.HighPressureLimit = value;
                    OnPropertyChanged( );
                }
            }
        }

        public double LowTemperatureLimit
        {
            get => GetData( ).LowTemperatureLimit;
            set
            {
                var data = GetData( );
                if( data.LowTemperatureLimit != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.LowTemperatureLimit = value;
                    OnPropertyChanged( );
                }
            }
        }

        public double HighTemperatureLimit
        {
            get => GetData( ).HighTemperatureLimit;
            set
            {
                var data = GetData( );
                if( data.HighTemperatureLimit != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.HighTemperatureLimit = value;
                    OnPropertyChanged( );
                }
            }
        }

    }

    public class ReferenceTimeseriesValueEntity : BaseEntity<Kind>
    {
        WeakReference? _timeseriesReference = null;
        WeakReference? _valueReference = null;
        public ReferenceTimeseriesValueEntity( [DisallowNull] EntityContext entityContext, [DisallowNull] ReferenceTimeseriesValueObject data )
            : base( entityContext, data )
        {
        }

        public EntityContext? Context => (EntityContext?)_Context;

        protected EntityContext CheckedContext
        {
            get
            {
                var context = Context;
                if ( context is null )
                {
                    throw new InvalidOperationException( "Context is null" );
                }
                return context;
            }
        }

        private ReferenceTimeseriesValueObject GetData( ) 
        {
            return (ReferenceTimeseriesValueObject)base._GetData( );
        }

        public Guid TimeseriesId
        {
            get => GetData( ).Timeseries;
            set
            {
                var data = GetData( );
                if( data.Timeseries != value )
                {
                    OnPropertyChanging( );
                    OnPropertyChanging( "Timeseries", false );
                    data = GetData( );
                    data.Timeseries = value;
                    OnPropertyChanged( );
                    OnPropertyChanged( "Timeseries" );
                }
            }
        }

        public ReferenceTimeseriesEntity Timeseries
        {
            get
            {
                if(_timeseriesReference != null)
                {
                    var result = (ReferenceTimeseriesEntity?)_timeseriesReference.Target;
                    if( result != null )
                    {
                        return result;
                    }
                }
                var data = GetData( );
                var context = CheckedContext;
                var entity = context.GetReferenceTimeseriesById( data.Timeseries );
                if( entity != null )
                {
                    _timeseriesReference = new WeakReference( entity );
                }
                else
                {
                    var message = $"Cannot find the ReferenceTimeseriesEntity object identified by {data.Timeseries}";
                    throw new Exception( message );
                }
                return entity;
            }
            set
            {
                TimeseriesId = value != null? value.Id : Guid.Empty;
            }
        }

        public DateTime Timestamp
        {
            get => GetData( ).Timestamp;
            set
            {
                var data = GetData( );
                if( data.Timestamp != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Timestamp = value;
                    OnPropertyChanged( );
                }
            }
        }

        public Guid ValueId
        {
            get => GetData( ).Value;
            set
            {
                var data = GetData( );
                if( data.Value != value )
                {
                    OnPropertyChanging( );
                    OnPropertyChanging( "Value", false );
                    data = GetData( );
                    data.Value = value;
                    OnPropertyChanged( );
                    OnPropertyChanged( "Value" );
                }
            }
        }

        public ElementEntity Value
        {
            get
            {
                if(_valueReference != null)
                {
                    var result = (ElementEntity?)_valueReference.Target;
                    if( result != null )
                    {
                        return result;
                    }
                }
                var data = GetData( );
                var context = CheckedContext;
                var entity = context.GetElementById( data.Value );
                if( entity != null )
                {
                    _valueReference = new WeakReference( entity );
                }
                else
                {
                    var message = $"Cannot find the ElementEntity object identified by {data.Value}";
                    throw new Exception( message );
                }
                return entity;
            }
            set
            {
                ValueId = value != null? value.Id : Guid.Empty;
            }
        }

    }

    public class SByteTimeseriesValueEntity : BaseEntity<Kind>
    {
        WeakReference? _timeseriesReference = null;
        public SByteTimeseriesValueEntity( [DisallowNull] EntityContext entityContext, [DisallowNull] SByteTimeseriesValueObject data )
            : base( entityContext, data )
        {
        }

        public EntityContext? Context => (EntityContext?)_Context;

        protected EntityContext CheckedContext
        {
            get
            {
                var context = Context;
                if ( context is null )
                {
                    throw new InvalidOperationException( "Context is null" );
                }
                return context;
            }
        }

        private SByteTimeseriesValueObject GetData( ) 
        {
            return (SByteTimeseriesValueObject)base._GetData( );
        }

        public Guid TimeseriesId
        {
            get => GetData( ).Timeseries;
            set
            {
                var data = GetData( );
                if( data.Timeseries != value )
                {
                    OnPropertyChanging( );
                    OnPropertyChanging( "Timeseries", false );
                    data = GetData( );
                    data.Timeseries = value;
                    OnPropertyChanged( );
                    OnPropertyChanged( "Timeseries" );
                }
            }
        }

        public SByteTimeseriesEntity Timeseries
        {
            get
            {
                if(_timeseriesReference != null)
                {
                    var result = (SByteTimeseriesEntity?)_timeseriesReference.Target;
                    if( result != null )
                    {
                        return result;
                    }
                }
                var data = GetData( );
                var context = CheckedContext;
                var entity = context.GetSByteTimeseriesById( data.Timeseries );
                if( entity != null )
                {
                    _timeseriesReference = new WeakReference( entity );
                }
                else
                {
                    var message = $"Cannot find the SByteTimeseriesEntity object identified by {data.Timeseries}";
                    throw new Exception( message );
                }
                return entity;
            }
            set
            {
                TimeseriesId = value != null? value.Id : Guid.Empty;
            }
        }

        public DateTime Timestamp
        {
            get => GetData( ).Timestamp;
            set
            {
                var data = GetData( );
                if( data.Timestamp != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Timestamp = value;
                    OnPropertyChanged( );
                }
            }
        }

        public sbyte? Value
        {
            get => GetData( ).Value;
            set
            {
                var data = GetData( );
                if( data.Value != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Value = value;
                    OnPropertyChanged( );
                }
            }
        }

    }

    public class SecurityDomainEntity : BaseEntity<Kind>
    {
        public SecurityDomainEntity( [DisallowNull] EntityContext entityContext, [DisallowNull] SecurityDomainObject data )
            : base( entityContext, data )
        {
        }

        public EntityContext? Context => (EntityContext?)_Context;

        protected EntityContext CheckedContext
        {
            get
            {
                var context = Context;
                if ( context is null )
                {
                    throw new InvalidOperationException( "Context is null" );
                }
                return context;
            }
        }

        private SecurityDomainObject GetData( ) 
        {
            return (SecurityDomainObject)base._GetData( );
        }

        public string Name
        {
            get => GetData( ).Name;
            set
            {
                var data = GetData( );
                if( data.Name != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Name = value;
                    OnPropertyChanged( );
                }
            }
        }

        public string Description
        {
            get => GetData( ).Description;
            set
            {
                var data = GetData( );
                if( data.Description != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Description = value;
                    OnPropertyChanged( );
                }
            }
        }

    }

    public abstract class SecurityIdentifierEntity : BaseEntity<Kind>
    {
        WeakReference? _domainReference = null;
        protected SecurityIdentifierEntity( [DisallowNull] EntityContext entityContext, [DisallowNull] SecurityIdentifierObject data )
            : base( entityContext, data )
        {
        }

        public EntityContext? Context => (EntityContext?)_Context;

        protected EntityContext CheckedContext
        {
            get
            {
                var context = Context;
                if ( context is null )
                {
                    throw new InvalidOperationException( "Context is null" );
                }
                return context;
            }
        }

        private SecurityIdentifierObject GetData( ) 
        {
            return (SecurityIdentifierObject)base._GetData( );
        }

        public Guid DomainId
        {
            get => GetData( ).Domain;
            set
            {
                var data = GetData( );
                if( data.Domain != value )
                {
                    OnPropertyChanging( );
                    OnPropertyChanging( "Domain", false );
                    data = GetData( );
                    data.Domain = value;
                    OnPropertyChanged( );
                    OnPropertyChanged( "Domain" );
                }
            }
        }

        public SecurityDomainEntity Domain
        {
            get
            {
                if(_domainReference != null)
                {
                    var result = (SecurityDomainEntity?)_domainReference.Target;
                    if( result != null )
                    {
                        return result;
                    }
                }
                var data = GetData( );
                var context = CheckedContext;
                var entity = context.GetSecurityDomainById( data.Domain );
                if( entity != null )
                {
                    _domainReference = new WeakReference( entity );
                }
                else
                {
                    var message = $"Cannot find the SecurityDomainEntity object identified by {data.Domain}";
                    throw new Exception( message );
                }
                return entity;
            }
            set
            {
                DomainId = value != null? value.Id : Guid.Empty;
            }
        }

        public string Identity
        {
            get => GetData( ).Identity;
            set
            {
                var data = GetData( );
                if( data.Identity != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Identity = value;
                    OnPropertyChanged( );
                }
            }
        }

        public string Description
        {
            get => GetData( ).Description;
            set
            {
                var data = GetData( );
                if( data.Description != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Description = value;
                    OnPropertyChanged( );
                }
            }
        }

    }

    public class SecurityLoginEntity : SecurityIdentifierEntity
    {
        public SecurityLoginEntity( [DisallowNull] EntityContext entityContext, [DisallowNull] SecurityLoginObject data )
            : base( entityContext, data )
        {
        }

        private SecurityLoginObject GetData( ) 
        {
            return (SecurityLoginObject)base._GetData( );
        }

    }

    public class SecurityRoleEntity : SecurityIdentifierEntity
    {
        public SecurityRoleEntity( [DisallowNull] EntityContext entityContext, [DisallowNull] SecurityRoleObject data )
            : base( entityContext, data )
        {
        }

        private SecurityRoleObject GetData( ) 
        {
            return (SecurityRoleObject)base._GetData( );
        }

        public string Name
        {
            get => GetData( ).Name;
            set
            {
                var data = GetData( );
                if( data.Name != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Name = value;
                    OnPropertyChanged( );
                }
            }
        }

    }

    public class SecurityIdentifierRoleLinkEntity : BaseEntity<Kind>
    {
        WeakReference? _memberReference = null;
        WeakReference? _roleReference = null;
        public SecurityIdentifierRoleLinkEntity( [DisallowNull] EntityContext entityContext, [DisallowNull] SecurityIdentifierRoleLinkObject data )
            : base( entityContext, data )
        {
        }

        public EntityContext? Context => (EntityContext?)_Context;

        protected EntityContext CheckedContext
        {
            get
            {
                var context = Context;
                if ( context is null )
                {
                    throw new InvalidOperationException( "Context is null" );
                }
                return context;
            }
        }

        private SecurityIdentifierRoleLinkObject GetData( ) 
        {
            return (SecurityIdentifierRoleLinkObject)base._GetData( );
        }

        public Guid MemberId
        {
            get => GetData( ).Member;
            set
            {
                var data = GetData( );
                if( data.Member != value )
                {
                    OnPropertyChanging( );
                    OnPropertyChanging( "Member", false );
                    data = GetData( );
                    data.Member = value;
                    OnPropertyChanged( );
                    OnPropertyChanged( "Member" );
                }
            }
        }

        public SecurityIdentifierEntity Member
        {
            get
            {
                if(_memberReference != null)
                {
                    var result = (SecurityIdentifierEntity?)_memberReference.Target;
                    if( result != null )
                    {
                        return result;
                    }
                }
                var data = GetData( );
                var context = CheckedContext;
                var entity = context.GetSecurityIdentifierById( data.Member );
                if( entity != null )
                {
                    _memberReference = new WeakReference( entity );
                }
                else
                {
                    var message = $"Cannot find the SecurityIdentifierEntity object identified by {data.Member}";
                    throw new Exception( message );
                }
                return entity;
            }
            set
            {
                MemberId = value != null? value.Id : Guid.Empty;
            }
        }

        public Guid RoleId
        {
            get => GetData( ).Role;
            set
            {
                var data = GetData( );
                if( data.Role != value )
                {
                    OnPropertyChanging( );
                    OnPropertyChanging( "Role", false );
                    data = GetData( );
                    data.Role = value;
                    OnPropertyChanged( );
                    OnPropertyChanged( "Role" );
                }
            }
        }

        public SecurityRoleEntity Role
        {
            get
            {
                if(_roleReference != null)
                {
                    var result = (SecurityRoleEntity?)_roleReference.Target;
                    if( result != null )
                    {
                        return result;
                    }
                }
                var data = GetData( );
                var context = CheckedContext;
                var entity = context.GetSecurityRoleById( data.Role );
                if( entity != null )
                {
                    _roleReference = new WeakReference( entity );
                }
                else
                {
                    var message = $"Cannot find the SecurityRoleEntity object identified by {data.Role}";
                    throw new Exception( message );
                }
                return entity;
            }
            set
            {
                RoleId = value != null? value.Id : Guid.Empty;
            }
        }

        public DateTime Start
        {
            get => GetData( ).Start;
            set
            {
                var data = GetData( );
                if( data.Start != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Start = value;
                    OnPropertyChanged( );
                }
            }
        }

        public DateTime? End
        {
            get => GetData( ).End;
            set
            {
                var data = GetData( );
                if( data.End != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.End = value;
                    OnPropertyChanged( );
                }
            }
        }

    }

    public class SecurityLoginSessionEntity : BaseEntity<Kind>
    {
        WeakReference? _loginReference = null;
        public SecurityLoginSessionEntity( [DisallowNull] EntityContext entityContext, [DisallowNull] SecurityLoginSessionObject data )
            : base( entityContext, data )
        {
        }

        public EntityContext? Context => (EntityContext?)_Context;

        protected EntityContext CheckedContext
        {
            get
            {
                var context = Context;
                if ( context is null )
                {
                    throw new InvalidOperationException( "Context is null" );
                }
                return context;
            }
        }

        private SecurityLoginSessionObject GetData( ) 
        {
            return (SecurityLoginSessionObject)base._GetData( );
        }

        public Guid LoginId
        {
            get => GetData( ).Login;
            set
            {
                var data = GetData( );
                if( data.Login != value )
                {
                    OnPropertyChanging( );
                    OnPropertyChanging( "Login", false );
                    data = GetData( );
                    data.Login = value;
                    OnPropertyChanged( );
                    OnPropertyChanged( "Login" );
                }
            }
        }

        public SecurityLoginEntity Login
        {
            get
            {
                if(_loginReference != null)
                {
                    var result = (SecurityLoginEntity?)_loginReference.Target;
                    if( result != null )
                    {
                        return result;
                    }
                }
                var data = GetData( );
                var context = CheckedContext;
                var entity = context.GetSecurityLoginById( data.Login );
                if( entity != null )
                {
                    _loginReference = new WeakReference( entity );
                }
                else
                {
                    var message = $"Cannot find the SecurityLoginEntity object identified by {data.Login}";
                    throw new Exception( message );
                }
                return entity;
            }
            set
            {
                LoginId = value != null? value.Id : Guid.Empty;
            }
        }

        public DateTime FromTime
        {
            get => GetData( ).FromTime;
            set
            {
                var data = GetData( );
                if( data.FromTime != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.FromTime = value;
                    OnPropertyChanged( );
                }
            }
        }

        public DateTime? ThroughTime
        {
            get => GetData( ).ThroughTime;
            set
            {
                var data = GetData( );
                if( data.ThroughTime != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.ThroughTime = value;
                    OnPropertyChanged( );
                }
            }
        }

        public Guid ClientSession
        {
            get => GetData( ).ClientSession;
            set
            {
                var data = GetData( );
                if( data.ClientSession != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.ClientSession = value;
                    OnPropertyChanged( );
                }
            }
        }

        public string NotificationQueueName
        {
            get => GetData( ).NotificationQueueName;
            set
            {
                var data = GetData( );
                if( data.NotificationQueueName != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.NotificationQueueName = value;
                    OnPropertyChanged( );
                }
            }
        }

        public string MessageQueueName
        {
            get => GetData( ).MessageQueueName;
            set
            {
                var data = GetData( );
                if( data.MessageQueueName != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.MessageQueueName = value;
                    OnPropertyChanged( );
                }
            }
        }

    }

    public class SecurityPermissionEntity : BaseEntity<Kind>
    {
        WeakReference? _identifierReference = null;
        public SecurityPermissionEntity( [DisallowNull] EntityContext entityContext, [DisallowNull] SecurityPermissionObject data )
            : base( entityContext, data )
        {
        }

        public EntityContext? Context => (EntityContext?)_Context;

        protected EntityContext CheckedContext
        {
            get
            {
                var context = Context;
                if ( context is null )
                {
                    throw new InvalidOperationException( "Context is null" );
                }
                return context;
            }
        }

        private SecurityPermissionObject GetData( ) 
        {
            return (SecurityPermissionObject)base._GetData( );
        }

        public Guid IdentifierId
        {
            get => GetData( ).Identifier;
            set
            {
                var data = GetData( );
                if( data.Identifier != value )
                {
                    OnPropertyChanging( );
                    OnPropertyChanging( "Identifier", false );
                    data = GetData( );
                    data.Identifier = value;
                    OnPropertyChanged( );
                    OnPropertyChanged( "Identifier" );
                }
            }
        }

        public SecurityIdentifierEntity Identifier
        {
            get
            {
                if(_identifierReference != null)
                {
                    var result = (SecurityIdentifierEntity?)_identifierReference.Target;
                    if( result != null )
                    {
                        return result;
                    }
                }
                var data = GetData( );
                var context = CheckedContext;
                var entity = context.GetSecurityIdentifierById( data.Identifier );
                if( entity != null )
                {
                    _identifierReference = new WeakReference( entity );
                }
                else
                {
                    var message = $"Cannot find the SecurityIdentifierEntity object identified by {data.Identifier}";
                    throw new Exception( message );
                }
                return entity;
            }
            set
            {
                IdentifierId = value != null? value.Id : Guid.Empty;
            }
        }

        public DateTime Timestamp
        {
            get => GetData( ).Timestamp;
            set
            {
                var data = GetData( );
                if( data.Timestamp != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Timestamp = value;
                    OnPropertyChanged( );
                }
            }
        }

        public int TypeCode
        {
            get => GetData( ).TypeCode;
            set
            {
                var data = GetData( );
                if( data.TypeCode != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.TypeCode = value;
                    OnPropertyChanged( );
                }
            }
        }

        public bool CanCreate
        {
            get => GetData( ).CanCreate;
            set
            {
                var data = GetData( );
                if( data.CanCreate != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.CanCreate = value;
                    OnPropertyChanged( );
                }
            }
        }

        public bool CanRead
        {
            get => GetData( ).CanRead;
            set
            {
                var data = GetData( );
                if( data.CanRead != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.CanRead = value;
                    OnPropertyChanged( );
                }
            }
        }

        public bool CanUpdate
        {
            get => GetData( ).CanUpdate;
            set
            {
                var data = GetData( );
                if( data.CanUpdate != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.CanUpdate = value;
                    OnPropertyChanged( );
                }
            }
        }

        public bool CanDelete
        {
            get => GetData( ).CanDelete;
            set
            {
                var data = GetData( );
                if( data.CanDelete != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.CanDelete = value;
                    OnPropertyChanged( );
                }
            }
        }

    }

    public class SingleTimeseriesValueEntity : BaseEntity<Kind>
    {
        WeakReference? _timeseriesReference = null;
        public SingleTimeseriesValueEntity( [DisallowNull] EntityContext entityContext, [DisallowNull] SingleTimeseriesValueObject data )
            : base( entityContext, data )
        {
        }

        public EntityContext? Context => (EntityContext?)_Context;

        protected EntityContext CheckedContext
        {
            get
            {
                var context = Context;
                if ( context is null )
                {
                    throw new InvalidOperationException( "Context is null" );
                }
                return context;
            }
        }

        private SingleTimeseriesValueObject GetData( ) 
        {
            return (SingleTimeseriesValueObject)base._GetData( );
        }

        public Guid TimeseriesId
        {
            get => GetData( ).Timeseries;
            set
            {
                var data = GetData( );
                if( data.Timeseries != value )
                {
                    OnPropertyChanging( );
                    OnPropertyChanging( "Timeseries", false );
                    data = GetData( );
                    data.Timeseries = value;
                    OnPropertyChanged( );
                    OnPropertyChanged( "Timeseries" );
                }
            }
        }

        public SingleTimeseriesEntity Timeseries
        {
            get
            {
                if(_timeseriesReference != null)
                {
                    var result = (SingleTimeseriesEntity?)_timeseriesReference.Target;
                    if( result != null )
                    {
                        return result;
                    }
                }
                var data = GetData( );
                var context = CheckedContext;
                var entity = context.GetSingleTimeseriesById( data.Timeseries );
                if( entity != null )
                {
                    _timeseriesReference = new WeakReference( entity );
                }
                else
                {
                    var message = $"Cannot find the SingleTimeseriesEntity object identified by {data.Timeseries}";
                    throw new Exception( message );
                }
                return entity;
            }
            set
            {
                TimeseriesId = value != null? value.Id : Guid.Empty;
            }
        }

        public DateTime Timestamp
        {
            get => GetData( ).Timestamp;
            set
            {
                var data = GetData( );
                if( data.Timestamp != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Timestamp = value;
                    OnPropertyChanged( );
                }
            }
        }

        public float? Value
        {
            get => GetData( ).Value;
            set
            {
                var data = GetData( );
                if( data.Value != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Value = value;
                    OnPropertyChanged( );
                }
            }
        }

    }

    public class StringTimeseriesValueEntity : BaseEntity<Kind>
    {
        WeakReference? _timeseriesReference = null;
        public StringTimeseriesValueEntity( [DisallowNull] EntityContext entityContext, [DisallowNull] StringTimeseriesValueObject data )
            : base( entityContext, data )
        {
        }

        public EntityContext? Context => (EntityContext?)_Context;

        protected EntityContext CheckedContext
        {
            get
            {
                var context = Context;
                if ( context is null )
                {
                    throw new InvalidOperationException( "Context is null" );
                }
                return context;
            }
        }

        private StringTimeseriesValueObject GetData( ) 
        {
            return (StringTimeseriesValueObject)base._GetData( );
        }

        public Guid TimeseriesId
        {
            get => GetData( ).Timeseries;
            set
            {
                var data = GetData( );
                if( data.Timeseries != value )
                {
                    OnPropertyChanging( );
                    OnPropertyChanging( "Timeseries", false );
                    data = GetData( );
                    data.Timeseries = value;
                    OnPropertyChanged( );
                    OnPropertyChanged( "Timeseries" );
                }
            }
        }

        public StringTimeseriesEntity Timeseries
        {
            get
            {
                if(_timeseriesReference != null)
                {
                    var result = (StringTimeseriesEntity?)_timeseriesReference.Target;
                    if( result != null )
                    {
                        return result;
                    }
                }
                var data = GetData( );
                var context = CheckedContext;
                var entity = context.GetStringTimeseriesById( data.Timeseries );
                if( entity != null )
                {
                    _timeseriesReference = new WeakReference( entity );
                }
                else
                {
                    var message = $"Cannot find the StringTimeseriesEntity object identified by {data.Timeseries}";
                    throw new Exception( message );
                }
                return entity;
            }
            set
            {
                TimeseriesId = value != null? value.Id : Guid.Empty;
            }
        }

        public DateTime Timestamp
        {
            get => GetData( ).Timestamp;
            set
            {
                var data = GetData( );
                if( data.Timestamp != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Timestamp = value;
                    OnPropertyChanged( );
                }
            }
        }

        public string Value
        {
            get => GetData( ).Value;
            set
            {
                var data = GetData( );
                if( data.Value != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Value = value;
                    OnPropertyChanged( );
                }
            }
        }

    }

    public abstract class TimeseriesCatalogElementEntity : BaseEntity<Kind>
    {
        WeakReference? _catalogReference = null;
        protected TimeseriesCatalogElementEntity( [DisallowNull] EntityContext entityContext, [DisallowNull] TimeseriesCatalogElementObject data )
            : base( entityContext, data )
        {
        }

        public EntityContext? Context => (EntityContext?)_Context;

        protected EntityContext CheckedContext
        {
            get
            {
                var context = Context;
                if ( context is null )
                {
                    throw new InvalidOperationException( "Context is null" );
                }
                return context;
            }
        }

        private TimeseriesCatalogElementObject GetData( ) 
        {
            return (TimeseriesCatalogElementObject)base._GetData( );
        }

        public Guid? CatalogId
        {
            get => GetData( ).Catalog;
            set
            {
                var data = GetData( );
                if( data.Catalog != value )
                {
                    OnPropertyChanging( );
                    OnPropertyChanging( "Catalog", false );
                    data = GetData( );
                    data.Catalog = value;
                    OnPropertyChanged( );
                    OnPropertyChanged( "Catalog" );
                }
            }
        }

        public TimeseriesCatalogEntity? Catalog
        {
            get
            {
                if(_catalogReference != null)
                {
                    var result = (TimeseriesCatalogEntity?)_catalogReference.Target;
                    if( result != null )
                    {
                        return result;
                    }
                }
                var data = GetData( );
                var context = CheckedContext;
                if( data.Catalog is Guid catalogId )
                {
                    var entity = context.GetTimeseriesCatalogById( catalogId );
                    if( entity != null )
                    {
                        _catalogReference = new WeakReference( entity );
                    }
                    return entity;
                }
                return null;
            }
            set
            {
                CatalogId = value != null? value.Id : null;
            }
        }

        public string Name
        {
            get => GetData( ).Name;
            set
            {
                var data = GetData( );
                if( data.Name != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Name = value;
                    OnPropertyChanged( );
                }
            }
        }

    }

    public abstract class TimeseriesEntity : TimeseriesCatalogElementEntity
    {
        protected TimeseriesEntity( [DisallowNull] EntityContext entityContext, [DisallowNull] TimeseriesObject data )
            : base( entityContext, data )
        {
        }

        private TimeseriesObject GetData( ) 
        {
            return (TimeseriesObject)base._GetData( );
        }

        public TimeSpan MaxRetention
        {
            get => GetData( ).MaxRetention;
            set
            {
                var data = GetData( );
                if( data.MaxRetention != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.MaxRetention = value;
                    OnPropertyChanged( );
                }
            }
        }

    }

    public class BinaryTimeseriesEntity : TimeseriesEntity
    {
        public BinaryTimeseriesEntity( [DisallowNull] EntityContext entityContext, [DisallowNull] BinaryTimeseriesObject data )
            : base( entityContext, data )
        {
        }

        private BinaryTimeseriesObject GetData( ) 
        {
            return (BinaryTimeseriesObject)base._GetData( );
        }

    }

    public class BooleanTimeseriesEntity : TimeseriesEntity
    {
        public BooleanTimeseriesEntity( [DisallowNull] EntityContext entityContext, [DisallowNull] BooleanTimeseriesObject data )
            : base( entityContext, data )
        {
        }

        private BooleanTimeseriesObject GetData( ) 
        {
            return (BooleanTimeseriesObject)base._GetData( );
        }

    }

    public class AisAidToNavigationOffPositionTimeseriesEntity : BooleanTimeseriesEntity
    {
        WeakReference? _aidToNavigationReference = null;
        public AisAidToNavigationOffPositionTimeseriesEntity( [DisallowNull] EntityContext entityContext, [DisallowNull] AisAidToNavigationOffPositionTimeseriesObject data )
            : base( entityContext, data )
        {
        }

        private AisAidToNavigationOffPositionTimeseriesObject GetData( ) 
        {
            return (AisAidToNavigationOffPositionTimeseriesObject)base._GetData( );
        }

        public Guid? AidToNavigationId
        {
            get => GetData( ).AidToNavigation;
            set
            {
                var data = GetData( );
                if( data.AidToNavigation != value )
                {
                    OnPropertyChanging( );
                    OnPropertyChanging( "AidToNavigation", false );
                    data = GetData( );
                    data.AidToNavigation = value;
                    OnPropertyChanged( );
                    OnPropertyChanged( "AidToNavigation" );
                }
            }
        }

        public AisAidToNavigationEntity? AidToNavigation
        {
            get
            {
                if(_aidToNavigationReference != null)
                {
                    var result = (AisAidToNavigationEntity?)_aidToNavigationReference.Target;
                    if( result != null )
                    {
                        return result;
                    }
                }
                var data = GetData( );
                var context = CheckedContext;
                if( data.AidToNavigation is Guid aidToNavigationId )
                {
                    var entity = context.GetAisAidToNavigationById( aidToNavigationId );
                    if( entity != null )
                    {
                        _aidToNavigationReference = new WeakReference( entity );
                    }
                    return entity;
                }
                return null;
            }
            set
            {
                AidToNavigationId = value != null? value.Id : null;
            }
        }

    }

    public class DeviceEnabledTimeseriesEntity : BooleanTimeseriesEntity
    {
        WeakReference? _deviceReference = null;
        public DeviceEnabledTimeseriesEntity( [DisallowNull] EntityContext entityContext, [DisallowNull] DeviceEnabledTimeseriesObject data )
            : base( entityContext, data )
        {
        }

        private DeviceEnabledTimeseriesObject GetData( ) 
        {
            return (DeviceEnabledTimeseriesObject)base._GetData( );
        }

        public Guid? DeviceId
        {
            get => GetData( ).Device;
            set
            {
                var data = GetData( );
                if( data.Device != value )
                {
                    OnPropertyChanging( );
                    OnPropertyChanging( "Device", false );
                    data = GetData( );
                    data.Device = value;
                    OnPropertyChanged( );
                    OnPropertyChanged( "Device" );
                }
            }
        }

        public DeviceEntity? Device
        {
            get
            {
                if(_deviceReference != null)
                {
                    var result = (DeviceEntity?)_deviceReference.Target;
                    if( result != null )
                    {
                        return result;
                    }
                }
                var data = GetData( );
                var context = CheckedContext;
                if( data.Device is Guid deviceId )
                {
                    var entity = context.GetDeviceById( deviceId );
                    if( entity != null )
                    {
                        _deviceReference = new WeakReference( entity );
                    }
                    return entity;
                }
                return null;
            }
            set
            {
                DeviceId = value != null? value.Id : null;
            }
        }

    }

    public class RadarAutomaticSensitivityTimeControlTimeseriesEntity : BooleanTimeseriesEntity
    {
        WeakReference? _radarReference = null;
        public RadarAutomaticSensitivityTimeControlTimeseriesEntity( [DisallowNull] EntityContext entityContext, [DisallowNull] RadarAutomaticSensitivityTimeControlTimeseriesObject data )
            : base( entityContext, data )
        {
        }

        private RadarAutomaticSensitivityTimeControlTimeseriesObject GetData( ) 
        {
            return (RadarAutomaticSensitivityTimeControlTimeseriesObject)base._GetData( );
        }

        public Guid? RadarId
        {
            get => GetData( ).Radar;
            set
            {
                var data = GetData( );
                if( data.Radar != value )
                {
                    OnPropertyChanging( );
                    OnPropertyChanging( "Radar", false );
                    data = GetData( );
                    data.Radar = value;
                    OnPropertyChanged( );
                    OnPropertyChanged( "Radar" );
                }
            }
        }

        public RadarDeviceEntity? Radar
        {
            get
            {
                if(_radarReference != null)
                {
                    var result = (RadarDeviceEntity?)_radarReference.Target;
                    if( result != null )
                    {
                        return result;
                    }
                }
                var data = GetData( );
                var context = CheckedContext;
                if( data.Radar is Guid radarId )
                {
                    var entity = context.GetRadarDeviceById( radarId );
                    if( entity != null )
                    {
                        _radarReference = new WeakReference( entity );
                    }
                    return entity;
                }
                return null;
            }
            set
            {
                RadarId = value != null? value.Id : null;
            }
        }

    }

    public class RadarBlankSector1TimeseriesEntity : BooleanTimeseriesEntity
    {
        WeakReference? _radarReference = null;
        public RadarBlankSector1TimeseriesEntity( [DisallowNull] EntityContext entityContext, [DisallowNull] RadarBlankSector1TimeseriesObject data )
            : base( entityContext, data )
        {
        }

        private RadarBlankSector1TimeseriesObject GetData( ) 
        {
            return (RadarBlankSector1TimeseriesObject)base._GetData( );
        }

        public Guid? RadarId
        {
            get => GetData( ).Radar;
            set
            {
                var data = GetData( );
                if( data.Radar != value )
                {
                    OnPropertyChanging( );
                    OnPropertyChanging( "Radar", false );
                    data = GetData( );
                    data.Radar = value;
                    OnPropertyChanged( );
                    OnPropertyChanged( "Radar" );
                }
            }
        }

        public RadarDeviceEntity? Radar
        {
            get
            {
                if(_radarReference != null)
                {
                    var result = (RadarDeviceEntity?)_radarReference.Target;
                    if( result != null )
                    {
                        return result;
                    }
                }
                var data = GetData( );
                var context = CheckedContext;
                if( data.Radar is Guid radarId )
                {
                    var entity = context.GetRadarDeviceById( radarId );
                    if( entity != null )
                    {
                        _radarReference = new WeakReference( entity );
                    }
                    return entity;
                }
                return null;
            }
            set
            {
                RadarId = value != null? value.Id : null;
            }
        }

    }

    public class RadarBlankSector2TimeseriesEntity : BooleanTimeseriesEntity
    {
        WeakReference? _radarReference = null;
        public RadarBlankSector2TimeseriesEntity( [DisallowNull] EntityContext entityContext, [DisallowNull] RadarBlankSector2TimeseriesObject data )
            : base( entityContext, data )
        {
        }

        private RadarBlankSector2TimeseriesObject GetData( ) 
        {
            return (RadarBlankSector2TimeseriesObject)base._GetData( );
        }

        public Guid? RadarId
        {
            get => GetData( ).Radar;
            set
            {
                var data = GetData( );
                if( data.Radar != value )
                {
                    OnPropertyChanging( );
                    OnPropertyChanging( "Radar", false );
                    data = GetData( );
                    data.Radar = value;
                    OnPropertyChanged( );
                    OnPropertyChanged( "Radar" );
                }
            }
        }

        public RadarDeviceEntity? Radar
        {
            get
            {
                if(_radarReference != null)
                {
                    var result = (RadarDeviceEntity?)_radarReference.Target;
                    if( result != null )
                    {
                        return result;
                    }
                }
                var data = GetData( );
                var context = CheckedContext;
                if( data.Radar is Guid radarId )
                {
                    var entity = context.GetRadarDeviceById( radarId );
                    if( entity != null )
                    {
                        _radarReference = new WeakReference( entity );
                    }
                    return entity;
                }
                return null;
            }
            set
            {
                RadarId = value != null? value.Id : null;
            }
        }

    }

    public class RadarEnableAutomaticFrequencyControlTimeseriesEntity : BooleanTimeseriesEntity
    {
        WeakReference? _radarReference = null;
        public RadarEnableAutomaticFrequencyControlTimeseriesEntity( [DisallowNull] EntityContext entityContext, [DisallowNull] RadarEnableAutomaticFrequencyControlTimeseriesObject data )
            : base( entityContext, data )
        {
        }

        private RadarEnableAutomaticFrequencyControlTimeseriesObject GetData( ) 
        {
            return (RadarEnableAutomaticFrequencyControlTimeseriesObject)base._GetData( );
        }

        public Guid? RadarId
        {
            get => GetData( ).Radar;
            set
            {
                var data = GetData( );
                if( data.Radar != value )
                {
                    OnPropertyChanging( );
                    OnPropertyChanging( "Radar", false );
                    data = GetData( );
                    data.Radar = value;
                    OnPropertyChanged( );
                    OnPropertyChanged( "Radar" );
                }
            }
        }

        public RadarDeviceEntity? Radar
        {
            get
            {
                if(_radarReference != null)
                {
                    var result = (RadarDeviceEntity?)_radarReference.Target;
                    if( result != null )
                    {
                        return result;
                    }
                }
                var data = GetData( );
                var context = CheckedContext;
                if( data.Radar is Guid radarId )
                {
                    var entity = context.GetRadarDeviceById( radarId );
                    if( entity != null )
                    {
                        _radarReference = new WeakReference( entity );
                    }
                    return entity;
                }
                return null;
            }
            set
            {
                RadarId = value != null? value.Id : null;
            }
        }

    }

    public class RadarEnableFastTimeConstantTimeseriesEntity : BooleanTimeseriesEntity
    {
        WeakReference? _radarReference = null;
        public RadarEnableFastTimeConstantTimeseriesEntity( [DisallowNull] EntityContext entityContext, [DisallowNull] RadarEnableFastTimeConstantTimeseriesObject data )
            : base( entityContext, data )
        {
        }

        private RadarEnableFastTimeConstantTimeseriesObject GetData( ) 
        {
            return (RadarEnableFastTimeConstantTimeseriesObject)base._GetData( );
        }

        public Guid? RadarId
        {
            get => GetData( ).Radar;
            set
            {
                var data = GetData( );
                if( data.Radar != value )
                {
                    OnPropertyChanging( );
                    OnPropertyChanging( "Radar", false );
                    data = GetData( );
                    data.Radar = value;
                    OnPropertyChanged( );
                    OnPropertyChanged( "Radar" );
                }
            }
        }

        public RadarDeviceEntity? Radar
        {
            get
            {
                if(_radarReference != null)
                {
                    var result = (RadarDeviceEntity?)_radarReference.Target;
                    if( result != null )
                    {
                        return result;
                    }
                }
                var data = GetData( );
                var context = CheckedContext;
                if( data.Radar is Guid radarId )
                {
                    var entity = context.GetRadarDeviceById( radarId );
                    if( entity != null )
                    {
                        _radarReference = new WeakReference( entity );
                    }
                    return entity;
                }
                return null;
            }
            set
            {
                RadarId = value != null? value.Id : null;
            }
        }

    }

    public class RadarEnableSensitivityTimeControlTimeseriesEntity : BooleanTimeseriesEntity
    {
        WeakReference? _radarReference = null;
        public RadarEnableSensitivityTimeControlTimeseriesEntity( [DisallowNull] EntityContext entityContext, [DisallowNull] RadarEnableSensitivityTimeControlTimeseriesObject data )
            : base( entityContext, data )
        {
        }

        private RadarEnableSensitivityTimeControlTimeseriesObject GetData( ) 
        {
            return (RadarEnableSensitivityTimeControlTimeseriesObject)base._GetData( );
        }

        public Guid? RadarId
        {
            get => GetData( ).Radar;
            set
            {
                var data = GetData( );
                if( data.Radar != value )
                {
                    OnPropertyChanging( );
                    OnPropertyChanging( "Radar", false );
                    data = GetData( );
                    data.Radar = value;
                    OnPropertyChanged( );
                    OnPropertyChanged( "Radar" );
                }
            }
        }

        public RadarDeviceEntity? Radar
        {
            get
            {
                if(_radarReference != null)
                {
                    var result = (RadarDeviceEntity?)_radarReference.Target;
                    if( result != null )
                    {
                        return result;
                    }
                }
                var data = GetData( );
                var context = CheckedContext;
                if( data.Radar is Guid radarId )
                {
                    var entity = context.GetRadarDeviceById( radarId );
                    if( entity != null )
                    {
                        _radarReference = new WeakReference( entity );
                    }
                    return entity;
                }
                return null;
            }
            set
            {
                RadarId = value != null? value.Id : null;
            }
        }

    }

    public class RadarPowerOnTimeseriesEntity : BooleanTimeseriesEntity
    {
        WeakReference? _radarReference = null;
        public RadarPowerOnTimeseriesEntity( [DisallowNull] EntityContext entityContext, [DisallowNull] RadarPowerOnTimeseriesObject data )
            : base( entityContext, data )
        {
        }

        private RadarPowerOnTimeseriesObject GetData( ) 
        {
            return (RadarPowerOnTimeseriesObject)base._GetData( );
        }

        public Guid? RadarId
        {
            get => GetData( ).Radar;
            set
            {
                var data = GetData( );
                if( data.Radar != value )
                {
                    OnPropertyChanging( );
                    OnPropertyChanging( "Radar", false );
                    data = GetData( );
                    data.Radar = value;
                    OnPropertyChanged( );
                    OnPropertyChanged( "Radar" );
                }
            }
        }

        public RadarDeviceEntity? Radar
        {
            get
            {
                if(_radarReference != null)
                {
                    var result = (RadarDeviceEntity?)_radarReference.Target;
                    if( result != null )
                    {
                        return result;
                    }
                }
                var data = GetData( );
                var context = CheckedContext;
                if( data.Radar is Guid radarId )
                {
                    var entity = context.GetRadarDeviceById( radarId );
                    if( entity != null )
                    {
                        _radarReference = new WeakReference( entity );
                    }
                    return entity;
                }
                return null;
            }
            set
            {
                RadarId = value != null? value.Id : null;
            }
        }

    }

    public class RadarSaveSettingsTimeseriesEntity : BooleanTimeseriesEntity
    {
        WeakReference? _radarReference = null;
        public RadarSaveSettingsTimeseriesEntity( [DisallowNull] EntityContext entityContext, [DisallowNull] RadarSaveSettingsTimeseriesObject data )
            : base( entityContext, data )
        {
        }

        private RadarSaveSettingsTimeseriesObject GetData( ) 
        {
            return (RadarSaveSettingsTimeseriesObject)base._GetData( );
        }

        public Guid? RadarId
        {
            get => GetData( ).Radar;
            set
            {
                var data = GetData( );
                if( data.Radar != value )
                {
                    OnPropertyChanging( );
                    OnPropertyChanging( "Radar", false );
                    data = GetData( );
                    data.Radar = value;
                    OnPropertyChanged( );
                    OnPropertyChanged( "Radar" );
                }
            }
        }

        public RadarDeviceEntity? Radar
        {
            get
            {
                if(_radarReference != null)
                {
                    var result = (RadarDeviceEntity?)_radarReference.Target;
                    if( result != null )
                    {
                        return result;
                    }
                }
                var data = GetData( );
                var context = CheckedContext;
                if( data.Radar is Guid radarId )
                {
                    var entity = context.GetRadarDeviceById( radarId );
                    if( entity != null )
                    {
                        _radarReference = new WeakReference( entity );
                    }
                    return entity;
                }
                return null;
            }
            set
            {
                RadarId = value != null? value.Id : null;
            }
        }

    }

    public class RadarTrackingTimeseriesEntity : BooleanTimeseriesEntity
    {
        WeakReference? _radarReference = null;
        public RadarTrackingTimeseriesEntity( [DisallowNull] EntityContext entityContext, [DisallowNull] RadarTrackingTimeseriesObject data )
            : base( entityContext, data )
        {
        }

        private RadarTrackingTimeseriesObject GetData( ) 
        {
            return (RadarTrackingTimeseriesObject)base._GetData( );
        }

        public Guid? RadarId
        {
            get => GetData( ).Radar;
            set
            {
                var data = GetData( );
                if( data.Radar != value )
                {
                    OnPropertyChanging( );
                    OnPropertyChanging( "Radar", false );
                    data = GetData( );
                    data.Radar = value;
                    OnPropertyChanged( );
                    OnPropertyChanged( "Radar" );
                }
            }
        }

        public RadarDeviceEntity? Radar
        {
            get
            {
                if(_radarReference != null)
                {
                    var result = (RadarDeviceEntity?)_radarReference.Target;
                    if( result != null )
                    {
                        return result;
                    }
                }
                var data = GetData( );
                var context = CheckedContext;
                if( data.Radar is Guid radarId )
                {
                    var entity = context.GetRadarDeviceById( radarId );
                    if( entity != null )
                    {
                        _radarReference = new WeakReference( entity );
                    }
                    return entity;
                }
                return null;
            }
            set
            {
                RadarId = value != null? value.Id : null;
            }
        }

    }

    public class MediaProxySessionEnabledTimeseriesEntity : BooleanTimeseriesEntity
    {
        WeakReference? _proxySessionReference = null;
        public MediaProxySessionEnabledTimeseriesEntity( [DisallowNull] EntityContext entityContext, [DisallowNull] MediaProxySessionEnabledTimeseriesObject data )
            : base( entityContext, data )
        {
        }

        private MediaProxySessionEnabledTimeseriesObject GetData( ) 
        {
            return (MediaProxySessionEnabledTimeseriesObject)base._GetData( );
        }

        public Guid? ProxySessionId
        {
            get => GetData( ).ProxySession;
            set
            {
                var data = GetData( );
                if( data.ProxySession != value )
                {
                    OnPropertyChanging( );
                    OnPropertyChanging( "ProxySession", false );
                    data = GetData( );
                    data.ProxySession = value;
                    OnPropertyChanged( );
                    OnPropertyChanged( "ProxySession" );
                }
            }
        }

        public MediaProxySessionEntity? ProxySession
        {
            get
            {
                if(_proxySessionReference != null)
                {
                    var result = (MediaProxySessionEntity?)_proxySessionReference.Target;
                    if( result != null )
                    {
                        return result;
                    }
                }
                var data = GetData( );
                var context = CheckedContext;
                if( data.ProxySession is Guid proxySessionId )
                {
                    var entity = context.GetMediaProxySessionById( proxySessionId );
                    if( entity != null )
                    {
                        _proxySessionReference = new WeakReference( entity );
                    }
                    return entity;
                }
                return null;
            }
            set
            {
                ProxySessionId = value != null? value.Id : null;
            }
        }

    }

    public class MediaServiceEnabledTimeseriesEntity : BooleanTimeseriesEntity
    {
        WeakReference? _serviceReference = null;
        public MediaServiceEnabledTimeseriesEntity( [DisallowNull] EntityContext entityContext, [DisallowNull] MediaServiceEnabledTimeseriesObject data )
            : base( entityContext, data )
        {
        }

        private MediaServiceEnabledTimeseriesObject GetData( ) 
        {
            return (MediaServiceEnabledTimeseriesObject)base._GetData( );
        }

        public Guid? ServiceId
        {
            get => GetData( ).Service;
            set
            {
                var data = GetData( );
                if( data.Service != value )
                {
                    OnPropertyChanging( );
                    OnPropertyChanging( "Service", false );
                    data = GetData( );
                    data.Service = value;
                    OnPropertyChanged( );
                    OnPropertyChanged( "Service" );
                }
            }
        }

        public MediaServiceEntity? Service
        {
            get
            {
                if(_serviceReference != null)
                {
                    var result = (MediaServiceEntity?)_serviceReference.Target;
                    if( result != null )
                    {
                        return result;
                    }
                }
                var data = GetData( );
                var context = CheckedContext;
                if( data.Service is Guid serviceId )
                {
                    var entity = context.GetMediaServiceById( serviceId );
                    if( entity != null )
                    {
                        _serviceReference = new WeakReference( entity );
                    }
                    return entity;
                }
                return null;
            }
            set
            {
                ServiceId = value != null? value.Id : null;
            }
        }

    }

    public class ByteTimeseriesEntity : TimeseriesEntity
    {
        public ByteTimeseriesEntity( [DisallowNull] EntityContext entityContext, [DisallowNull] ByteTimeseriesObject data )
            : base( entityContext, data )
        {
        }

        private ByteTimeseriesObject GetData( ) 
        {
            return (ByteTimeseriesObject)base._GetData( );
        }

    }

    public class DateTimeTimeseriesEntity : TimeseriesEntity
    {
        public DateTimeTimeseriesEntity( [DisallowNull] EntityContext entityContext, [DisallowNull] DateTimeTimeseriesObject data )
            : base( entityContext, data )
        {
        }

        private DateTimeTimeseriesObject GetData( ) 
        {
            return (DateTimeTimeseriesObject)base._GetData( );
        }

    }

    public class DoubleTimeseriesEntity : TimeseriesEntity
    {
        public DoubleTimeseriesEntity( [DisallowNull] EntityContext entityContext, [DisallowNull] DoubleTimeseriesObject data )
            : base( entityContext, data )
        {
        }

        private DoubleTimeseriesObject GetData( ) 
        {
            return (DoubleTimeseriesObject)base._GetData( );
        }

    }

    public class GNSSAltitudeTimeseriesEntity : DoubleTimeseriesEntity
    {
        WeakReference? _gNSSDeviceReference = null;
        public GNSSAltitudeTimeseriesEntity( [DisallowNull] EntityContext entityContext, [DisallowNull] GNSSAltitudeTimeseriesObject data )
            : base( entityContext, data )
        {
        }

        private GNSSAltitudeTimeseriesObject GetData( ) 
        {
            return (GNSSAltitudeTimeseriesObject)base._GetData( );
        }

        public Guid? GNSSDeviceId
        {
            get => GetData( ).GNSSDevice;
            set
            {
                var data = GetData( );
                if( data.GNSSDevice != value )
                {
                    OnPropertyChanging( );
                    OnPropertyChanging( "GNSSDevice", false );
                    data = GetData( );
                    data.GNSSDevice = value;
                    OnPropertyChanged( );
                    OnPropertyChanged( "GNSSDevice" );
                }
            }
        }

        public GNSSDeviceEntity? GNSSDevice
        {
            get
            {
                if(_gNSSDeviceReference != null)
                {
                    var result = (GNSSDeviceEntity?)_gNSSDeviceReference.Target;
                    if( result != null )
                    {
                        return result;
                    }
                }
                var data = GetData( );
                var context = CheckedContext;
                if( data.GNSSDevice is Guid gNSSDeviceId )
                {
                    var entity = context.GetGNSSDeviceById( gNSSDeviceId );
                    if( entity != null )
                    {
                        _gNSSDeviceReference = new WeakReference( entity );
                    }
                    return entity;
                }
                return null;
            }
            set
            {
                GNSSDeviceId = value != null? value.Id : null;
            }
        }

    }

    public class GNSSLatitudeTimeseriesEntity : DoubleTimeseriesEntity
    {
        WeakReference? _gNSSDeviceReference = null;
        public GNSSLatitudeTimeseriesEntity( [DisallowNull] EntityContext entityContext, [DisallowNull] GNSSLatitudeTimeseriesObject data )
            : base( entityContext, data )
        {
        }

        private GNSSLatitudeTimeseriesObject GetData( ) 
        {
            return (GNSSLatitudeTimeseriesObject)base._GetData( );
        }

        public Guid? GNSSDeviceId
        {
            get => GetData( ).GNSSDevice;
            set
            {
                var data = GetData( );
                if( data.GNSSDevice != value )
                {
                    OnPropertyChanging( );
                    OnPropertyChanging( "GNSSDevice", false );
                    data = GetData( );
                    data.GNSSDevice = value;
                    OnPropertyChanged( );
                    OnPropertyChanged( "GNSSDevice" );
                }
            }
        }

        public GNSSDeviceEntity? GNSSDevice
        {
            get
            {
                if(_gNSSDeviceReference != null)
                {
                    var result = (GNSSDeviceEntity?)_gNSSDeviceReference.Target;
                    if( result != null )
                    {
                        return result;
                    }
                }
                var data = GetData( );
                var context = CheckedContext;
                if( data.GNSSDevice is Guid gNSSDeviceId )
                {
                    var entity = context.GetGNSSDeviceById( gNSSDeviceId );
                    if( entity != null )
                    {
                        _gNSSDeviceReference = new WeakReference( entity );
                    }
                    return entity;
                }
                return null;
            }
            set
            {
                GNSSDeviceId = value != null? value.Id : null;
            }
        }

    }

    public class GNSSLongitudeTimeseriesEntity : DoubleTimeseriesEntity
    {
        WeakReference? _gNSSDeviceReference = null;
        public GNSSLongitudeTimeseriesEntity( [DisallowNull] EntityContext entityContext, [DisallowNull] GNSSLongitudeTimeseriesObject data )
            : base( entityContext, data )
        {
        }

        private GNSSLongitudeTimeseriesObject GetData( ) 
        {
            return (GNSSLongitudeTimeseriesObject)base._GetData( );
        }

        public Guid? GNSSDeviceId
        {
            get => GetData( ).GNSSDevice;
            set
            {
                var data = GetData( );
                if( data.GNSSDevice != value )
                {
                    OnPropertyChanging( );
                    OnPropertyChanging( "GNSSDevice", false );
                    data = GetData( );
                    data.GNSSDevice = value;
                    OnPropertyChanged( );
                    OnPropertyChanged( "GNSSDevice" );
                }
            }
        }

        public GNSSDeviceEntity? GNSSDevice
        {
            get
            {
                if(_gNSSDeviceReference != null)
                {
                    var result = (GNSSDeviceEntity?)_gNSSDeviceReference.Target;
                    if( result != null )
                    {
                        return result;
                    }
                }
                var data = GetData( );
                var context = CheckedContext;
                if( data.GNSSDevice is Guid gNSSDeviceId )
                {
                    var entity = context.GetGNSSDeviceById( gNSSDeviceId );
                    if( entity != null )
                    {
                        _gNSSDeviceReference = new WeakReference( entity );
                    }
                    return entity;
                }
                return null;
            }
            set
            {
                GNSSDeviceId = value != null? value.Id : null;
            }
        }

    }

    public class GyroCourseTimeseriesEntity : DoubleTimeseriesEntity
    {
        WeakReference? _gyroDeviceReference = null;
        public GyroCourseTimeseriesEntity( [DisallowNull] EntityContext entityContext, [DisallowNull] GyroCourseTimeseriesObject data )
            : base( entityContext, data )
        {
        }

        private GyroCourseTimeseriesObject GetData( ) 
        {
            return (GyroCourseTimeseriesObject)base._GetData( );
        }

        public Guid? GyroDeviceId
        {
            get => GetData( ).GyroDevice;
            set
            {
                var data = GetData( );
                if( data.GyroDevice != value )
                {
                    OnPropertyChanging( );
                    OnPropertyChanging( "GyroDevice", false );
                    data = GetData( );
                    data.GyroDevice = value;
                    OnPropertyChanged( );
                    OnPropertyChanged( "GyroDevice" );
                }
            }
        }

        public GyroDeviceEntity? GyroDevice
        {
            get
            {
                if(_gyroDeviceReference != null)
                {
                    var result = (GyroDeviceEntity?)_gyroDeviceReference.Target;
                    if( result != null )
                    {
                        return result;
                    }
                }
                var data = GetData( );
                var context = CheckedContext;
                if( data.GyroDevice is Guid gyroDeviceId )
                {
                    var entity = context.GetGyroDeviceById( gyroDeviceId );
                    if( entity != null )
                    {
                        _gyroDeviceReference = new WeakReference( entity );
                    }
                    return entity;
                }
                return null;
            }
            set
            {
                GyroDeviceId = value != null? value.Id : null;
            }
        }

    }

    public class GyroHeadingMagneticNorthTimeseriesEntity : DoubleTimeseriesEntity
    {
        WeakReference? _gyroDeviceReference = null;
        public GyroHeadingMagneticNorthTimeseriesEntity( [DisallowNull] EntityContext entityContext, [DisallowNull] GyroHeadingMagneticNorthTimeseriesObject data )
            : base( entityContext, data )
        {
        }

        private GyroHeadingMagneticNorthTimeseriesObject GetData( ) 
        {
            return (GyroHeadingMagneticNorthTimeseriesObject)base._GetData( );
        }

        public Guid? GyroDeviceId
        {
            get => GetData( ).GyroDevice;
            set
            {
                var data = GetData( );
                if( data.GyroDevice != value )
                {
                    OnPropertyChanging( );
                    OnPropertyChanging( "GyroDevice", false );
                    data = GetData( );
                    data.GyroDevice = value;
                    OnPropertyChanged( );
                    OnPropertyChanged( "GyroDevice" );
                }
            }
        }

        public GyroDeviceEntity? GyroDevice
        {
            get
            {
                if(_gyroDeviceReference != null)
                {
                    var result = (GyroDeviceEntity?)_gyroDeviceReference.Target;
                    if( result != null )
                    {
                        return result;
                    }
                }
                var data = GetData( );
                var context = CheckedContext;
                if( data.GyroDevice is Guid gyroDeviceId )
                {
                    var entity = context.GetGyroDeviceById( gyroDeviceId );
                    if( entity != null )
                    {
                        _gyroDeviceReference = new WeakReference( entity );
                    }
                    return entity;
                }
                return null;
            }
            set
            {
                GyroDeviceId = value != null? value.Id : null;
            }
        }

    }

    public class GyroHeadingTrueNorthTimeseriesEntity : DoubleTimeseriesEntity
    {
        WeakReference? _gyroDeviceReference = null;
        public GyroHeadingTrueNorthTimeseriesEntity( [DisallowNull] EntityContext entityContext, [DisallowNull] GyroHeadingTrueNorthTimeseriesObject data )
            : base( entityContext, data )
        {
        }

        private GyroHeadingTrueNorthTimeseriesObject GetData( ) 
        {
            return (GyroHeadingTrueNorthTimeseriesObject)base._GetData( );
        }

        public Guid? GyroDeviceId
        {
            get => GetData( ).GyroDevice;
            set
            {
                var data = GetData( );
                if( data.GyroDevice != value )
                {
                    OnPropertyChanging( );
                    OnPropertyChanging( "GyroDevice", false );
                    data = GetData( );
                    data.GyroDevice = value;
                    OnPropertyChanged( );
                    OnPropertyChanged( "GyroDevice" );
                }
            }
        }

        public GyroDeviceEntity? GyroDevice
        {
            get
            {
                if(_gyroDeviceReference != null)
                {
                    var result = (GyroDeviceEntity?)_gyroDeviceReference.Target;
                    if( result != null )
                    {
                        return result;
                    }
                }
                var data = GetData( );
                var context = CheckedContext;
                if( data.GyroDevice is Guid gyroDeviceId )
                {
                    var entity = context.GetGyroDeviceById( gyroDeviceId );
                    if( entity != null )
                    {
                        _gyroDeviceReference = new WeakReference( entity );
                    }
                    return entity;
                }
                return null;
            }
            set
            {
                GyroDeviceId = value != null? value.Id : null;
            }
        }

    }

    public class GyroPitchTimeseriesEntity : DoubleTimeseriesEntity
    {
        WeakReference? _gyroDeviceReference = null;
        public GyroPitchTimeseriesEntity( [DisallowNull] EntityContext entityContext, [DisallowNull] GyroPitchTimeseriesObject data )
            : base( entityContext, data )
        {
        }

        private GyroPitchTimeseriesObject GetData( ) 
        {
            return (GyroPitchTimeseriesObject)base._GetData( );
        }

        public Guid? GyroDeviceId
        {
            get => GetData( ).GyroDevice;
            set
            {
                var data = GetData( );
                if( data.GyroDevice != value )
                {
                    OnPropertyChanging( );
                    OnPropertyChanging( "GyroDevice", false );
                    data = GetData( );
                    data.GyroDevice = value;
                    OnPropertyChanged( );
                    OnPropertyChanged( "GyroDevice" );
                }
            }
        }

        public GyroDeviceEntity? GyroDevice
        {
            get
            {
                if(_gyroDeviceReference != null)
                {
                    var result = (GyroDeviceEntity?)_gyroDeviceReference.Target;
                    if( result != null )
                    {
                        return result;
                    }
                }
                var data = GetData( );
                var context = CheckedContext;
                if( data.GyroDevice is Guid gyroDeviceId )
                {
                    var entity = context.GetGyroDeviceById( gyroDeviceId );
                    if( entity != null )
                    {
                        _gyroDeviceReference = new WeakReference( entity );
                    }
                    return entity;
                }
                return null;
            }
            set
            {
                GyroDeviceId = value != null? value.Id : null;
            }
        }

    }

    public class GyroRateOfTurnTimeseriesEntity : DoubleTimeseriesEntity
    {
        WeakReference? _gyroDeviceReference = null;
        public GyroRateOfTurnTimeseriesEntity( [DisallowNull] EntityContext entityContext, [DisallowNull] GyroRateOfTurnTimeseriesObject data )
            : base( entityContext, data )
        {
        }

        private GyroRateOfTurnTimeseriesObject GetData( ) 
        {
            return (GyroRateOfTurnTimeseriesObject)base._GetData( );
        }

        public Guid? GyroDeviceId
        {
            get => GetData( ).GyroDevice;
            set
            {
                var data = GetData( );
                if( data.GyroDevice != value )
                {
                    OnPropertyChanging( );
                    OnPropertyChanging( "GyroDevice", false );
                    data = GetData( );
                    data.GyroDevice = value;
                    OnPropertyChanged( );
                    OnPropertyChanged( "GyroDevice" );
                }
            }
        }

        public GyroDeviceEntity? GyroDevice
        {
            get
            {
                if(_gyroDeviceReference != null)
                {
                    var result = (GyroDeviceEntity?)_gyroDeviceReference.Target;
                    if( result != null )
                    {
                        return result;
                    }
                }
                var data = GetData( );
                var context = CheckedContext;
                if( data.GyroDevice is Guid gyroDeviceId )
                {
                    var entity = context.GetGyroDeviceById( gyroDeviceId );
                    if( entity != null )
                    {
                        _gyroDeviceReference = new WeakReference( entity );
                    }
                    return entity;
                }
                return null;
            }
            set
            {
                GyroDeviceId = value != null? value.Id : null;
            }
        }

    }

    public class GyroRollTimeseriesEntity : DoubleTimeseriesEntity
    {
        WeakReference? _gyroDeviceReference = null;
        public GyroRollTimeseriesEntity( [DisallowNull] EntityContext entityContext, [DisallowNull] GyroRollTimeseriesObject data )
            : base( entityContext, data )
        {
        }

        private GyroRollTimeseriesObject GetData( ) 
        {
            return (GyroRollTimeseriesObject)base._GetData( );
        }

        public Guid? GyroDeviceId
        {
            get => GetData( ).GyroDevice;
            set
            {
                var data = GetData( );
                if( data.GyroDevice != value )
                {
                    OnPropertyChanging( );
                    OnPropertyChanging( "GyroDevice", false );
                    data = GetData( );
                    data.GyroDevice = value;
                    OnPropertyChanged( );
                    OnPropertyChanged( "GyroDevice" );
                }
            }
        }

        public GyroDeviceEntity? GyroDevice
        {
            get
            {
                if(_gyroDeviceReference != null)
                {
                    var result = (GyroDeviceEntity?)_gyroDeviceReference.Target;
                    if( result != null )
                    {
                        return result;
                    }
                }
                var data = GetData( );
                var context = CheckedContext;
                if( data.GyroDevice is Guid gyroDeviceId )
                {
                    var entity = context.GetGyroDeviceById( gyroDeviceId );
                    if( entity != null )
                    {
                        _gyroDeviceReference = new WeakReference( entity );
                    }
                    return entity;
                }
                return null;
            }
            set
            {
                GyroDeviceId = value != null? value.Id : null;
            }
        }

    }

    public class GyroSpeedTimeseriesEntity : DoubleTimeseriesEntity
    {
        WeakReference? _gyroDeviceReference = null;
        public GyroSpeedTimeseriesEntity( [DisallowNull] EntityContext entityContext, [DisallowNull] GyroSpeedTimeseriesObject data )
            : base( entityContext, data )
        {
        }

        private GyroSpeedTimeseriesObject GetData( ) 
        {
            return (GyroSpeedTimeseriesObject)base._GetData( );
        }

        public Guid? GyroDeviceId
        {
            get => GetData( ).GyroDevice;
            set
            {
                var data = GetData( );
                if( data.GyroDevice != value )
                {
                    OnPropertyChanging( );
                    OnPropertyChanging( "GyroDevice", false );
                    data = GetData( );
                    data.GyroDevice = value;
                    OnPropertyChanged( );
                    OnPropertyChanged( "GyroDevice" );
                }
            }
        }

        public GyroDeviceEntity? GyroDevice
        {
            get
            {
                if(_gyroDeviceReference != null)
                {
                    var result = (GyroDeviceEntity?)_gyroDeviceReference.Target;
                    if( result != null )
                    {
                        return result;
                    }
                }
                var data = GetData( );
                var context = CheckedContext;
                if( data.GyroDevice is Guid gyroDeviceId )
                {
                    var entity = context.GetGyroDeviceById( gyroDeviceId );
                    if( entity != null )
                    {
                        _gyroDeviceReference = new WeakReference( entity );
                    }
                    return entity;
                }
                return null;
            }
            set
            {
                GyroDeviceId = value != null? value.Id : null;
            }
        }

    }

    public class RadarLatitudeTimeseriesEntity : DoubleTimeseriesEntity
    {
        WeakReference? _radarReference = null;
        public RadarLatitudeTimeseriesEntity( [DisallowNull] EntityContext entityContext, [DisallowNull] RadarLatitudeTimeseriesObject data )
            : base( entityContext, data )
        {
        }

        private RadarLatitudeTimeseriesObject GetData( ) 
        {
            return (RadarLatitudeTimeseriesObject)base._GetData( );
        }

        public Guid? RadarId
        {
            get => GetData( ).Radar;
            set
            {
                var data = GetData( );
                if( data.Radar != value )
                {
                    OnPropertyChanging( );
                    OnPropertyChanging( "Radar", false );
                    data = GetData( );
                    data.Radar = value;
                    OnPropertyChanged( );
                    OnPropertyChanged( "Radar" );
                }
            }
        }

        public RadarDeviceEntity? Radar
        {
            get
            {
                if(_radarReference != null)
                {
                    var result = (RadarDeviceEntity?)_radarReference.Target;
                    if( result != null )
                    {
                        return result;
                    }
                }
                var data = GetData( );
                var context = CheckedContext;
                if( data.Radar is Guid radarId )
                {
                    var entity = context.GetRadarDeviceById( radarId );
                    if( entity != null )
                    {
                        _radarReference = new WeakReference( entity );
                    }
                    return entity;
                }
                return null;
            }
            set
            {
                RadarId = value != null? value.Id : null;
            }
        }

    }

    public class RadarLongitudeTimeseriesEntity : DoubleTimeseriesEntity
    {
        WeakReference? _radarReference = null;
        public RadarLongitudeTimeseriesEntity( [DisallowNull] EntityContext entityContext, [DisallowNull] RadarLongitudeTimeseriesObject data )
            : base( entityContext, data )
        {
        }

        private RadarLongitudeTimeseriesObject GetData( ) 
        {
            return (RadarLongitudeTimeseriesObject)base._GetData( );
        }

        public Guid? RadarId
        {
            get => GetData( ).Radar;
            set
            {
                var data = GetData( );
                if( data.Radar != value )
                {
                    OnPropertyChanging( );
                    OnPropertyChanging( "Radar", false );
                    data = GetData( );
                    data.Radar = value;
                    OnPropertyChanged( );
                    OnPropertyChanged( "Radar" );
                }
            }
        }

        public RadarDeviceEntity? Radar
        {
            get
            {
                if(_radarReference != null)
                {
                    var result = (RadarDeviceEntity?)_radarReference.Target;
                    if( result != null )
                    {
                        return result;
                    }
                }
                var data = GetData( );
                var context = CheckedContext;
                if( data.Radar is Guid radarId )
                {
                    var entity = context.GetRadarDeviceById( radarId );
                    if( entity != null )
                    {
                        _radarReference = new WeakReference( entity );
                    }
                    return entity;
                }
                return null;
            }
            set
            {
                RadarId = value != null? value.Id : null;
            }
        }

    }

    public class RadomeDewPointTimeseriesEntity : DoubleTimeseriesEntity
    {
        WeakReference? _radomeReference = null;
        public RadomeDewPointTimeseriesEntity( [DisallowNull] EntityContext entityContext, [DisallowNull] RadomeDewPointTimeseriesObject data )
            : base( entityContext, data )
        {
        }

        private RadomeDewPointTimeseriesObject GetData( ) 
        {
            return (RadomeDewPointTimeseriesObject)base._GetData( );
        }

        public Guid? RadomeId
        {
            get => GetData( ).Radome;
            set
            {
                var data = GetData( );
                if( data.Radome != value )
                {
                    OnPropertyChanging( );
                    OnPropertyChanging( "Radome", false );
                    data = GetData( );
                    data.Radome = value;
                    OnPropertyChanged( );
                    OnPropertyChanged( "Radome" );
                }
            }
        }

        public RadomeDeviceEntity? Radome
        {
            get
            {
                if(_radomeReference != null)
                {
                    var result = (RadomeDeviceEntity?)_radomeReference.Target;
                    if( result != null )
                    {
                        return result;
                    }
                }
                var data = GetData( );
                var context = CheckedContext;
                if( data.Radome is Guid radomeId )
                {
                    var entity = context.GetRadomeDeviceById( radomeId );
                    if( entity != null )
                    {
                        _radomeReference = new WeakReference( entity );
                    }
                    return entity;
                }
                return null;
            }
            set
            {
                RadomeId = value != null? value.Id : null;
            }
        }

    }

    public class RadomePressureTimeseriesEntity : DoubleTimeseriesEntity
    {
        WeakReference? _radomeReference = null;
        public RadomePressureTimeseriesEntity( [DisallowNull] EntityContext entityContext, [DisallowNull] RadomePressureTimeseriesObject data )
            : base( entityContext, data )
        {
        }

        private RadomePressureTimeseriesObject GetData( ) 
        {
            return (RadomePressureTimeseriesObject)base._GetData( );
        }

        public Guid? RadomeId
        {
            get => GetData( ).Radome;
            set
            {
                var data = GetData( );
                if( data.Radome != value )
                {
                    OnPropertyChanging( );
                    OnPropertyChanging( "Radome", false );
                    data = GetData( );
                    data.Radome = value;
                    OnPropertyChanged( );
                    OnPropertyChanged( "Radome" );
                }
            }
        }

        public RadomeDeviceEntity? Radome
        {
            get
            {
                if(_radomeReference != null)
                {
                    var result = (RadomeDeviceEntity?)_radomeReference.Target;
                    if( result != null )
                    {
                        return result;
                    }
                }
                var data = GetData( );
                var context = CheckedContext;
                if( data.Radome is Guid radomeId )
                {
                    var entity = context.GetRadomeDeviceById( radomeId );
                    if( entity != null )
                    {
                        _radomeReference = new WeakReference( entity );
                    }
                    return entity;
                }
                return null;
            }
            set
            {
                RadomeId = value != null? value.Id : null;
            }
        }

    }

    public class RadomeTemperatureTimeseriesEntity : DoubleTimeseriesEntity
    {
        WeakReference? _radomeReference = null;
        public RadomeTemperatureTimeseriesEntity( [DisallowNull] EntityContext entityContext, [DisallowNull] RadomeTemperatureTimeseriesObject data )
            : base( entityContext, data )
        {
        }

        private RadomeTemperatureTimeseriesObject GetData( ) 
        {
            return (RadomeTemperatureTimeseriesObject)base._GetData( );
        }

        public Guid? RadomeId
        {
            get => GetData( ).Radome;
            set
            {
                var data = GetData( );
                if( data.Radome != value )
                {
                    OnPropertyChanging( );
                    OnPropertyChanging( "Radome", false );
                    data = GetData( );
                    data.Radome = value;
                    OnPropertyChanged( );
                    OnPropertyChanged( "Radome" );
                }
            }
        }

        public RadomeDeviceEntity? Radome
        {
            get
            {
                if(_radomeReference != null)
                {
                    var result = (RadomeDeviceEntity?)_radomeReference.Target;
                    if( result != null )
                    {
                        return result;
                    }
                }
                var data = GetData( );
                var context = CheckedContext;
                if( data.Radome is Guid radomeId )
                {
                    var entity = context.GetRadomeDeviceById( radomeId );
                    if( entity != null )
                    {
                        _radomeReference = new WeakReference( entity );
                    }
                    return entity;
                }
                return null;
            }
            set
            {
                RadomeId = value != null? value.Id : null;
            }
        }

    }

    public class VesselDraughtTimeseriesEntity : DoubleTimeseriesEntity
    {
        WeakReference? _vesselReference = null;
        public VesselDraughtTimeseriesEntity( [DisallowNull] EntityContext entityContext, [DisallowNull] VesselDraughtTimeseriesObject data )
            : base( entityContext, data )
        {
        }

        private VesselDraughtTimeseriesObject GetData( ) 
        {
            return (VesselDraughtTimeseriesObject)base._GetData( );
        }

        public Guid? VesselId
        {
            get => GetData( ).Vessel;
            set
            {
                var data = GetData( );
                if( data.Vessel != value )
                {
                    OnPropertyChanging( );
                    OnPropertyChanging( "Vessel", false );
                    data = GetData( );
                    data.Vessel = value;
                    OnPropertyChanged( );
                    OnPropertyChanged( "Vessel" );
                }
            }
        }

        public VesselEntity? Vessel
        {
            get
            {
                if(_vesselReference != null)
                {
                    var result = (VesselEntity?)_vesselReference.Target;
                    if( result != null )
                    {
                        return result;
                    }
                }
                var data = GetData( );
                var context = CheckedContext;
                if( data.Vessel is Guid vesselId )
                {
                    var entity = context.GetVesselById( vesselId );
                    if( entity != null )
                    {
                        _vesselReference = new WeakReference( entity );
                    }
                    return entity;
                }
                return null;
            }
            set
            {
                VesselId = value != null? value.Id : null;
            }
        }

    }

    public class ViewLatitudeTimeseriesEntity : DoubleTimeseriesEntity
    {
        WeakReference? _viewReference = null;
        public ViewLatitudeTimeseriesEntity( [DisallowNull] EntityContext entityContext, [DisallowNull] ViewLatitudeTimeseriesObject data )
            : base( entityContext, data )
        {
        }

        private ViewLatitudeTimeseriesObject GetData( ) 
        {
            return (ViewLatitudeTimeseriesObject)base._GetData( );
        }

        public Guid? ViewId
        {
            get => GetData( ).View;
            set
            {
                var data = GetData( );
                if( data.View != value )
                {
                    OnPropertyChanging( );
                    OnPropertyChanging( "View", false );
                    data = GetData( );
                    data.View = value;
                    OnPropertyChanged( );
                    OnPropertyChanged( "View" );
                }
            }
        }

        public ViewEntity? View
        {
            get
            {
                if(_viewReference != null)
                {
                    var result = (ViewEntity?)_viewReference.Target;
                    if( result != null )
                    {
                        return result;
                    }
                }
                var data = GetData( );
                var context = CheckedContext;
                if( data.View is Guid viewId )
                {
                    var entity = context.GetViewById( viewId );
                    if( entity != null )
                    {
                        _viewReference = new WeakReference( entity );
                    }
                    return entity;
                }
                return null;
            }
            set
            {
                ViewId = value != null? value.Id : null;
            }
        }

    }

    public class ViewLongitudeTimeseriesEntity : DoubleTimeseriesEntity
    {
        WeakReference? _viewReference = null;
        public ViewLongitudeTimeseriesEntity( [DisallowNull] EntityContext entityContext, [DisallowNull] ViewLongitudeTimeseriesObject data )
            : base( entityContext, data )
        {
        }

        private ViewLongitudeTimeseriesObject GetData( ) 
        {
            return (ViewLongitudeTimeseriesObject)base._GetData( );
        }

        public Guid? ViewId
        {
            get => GetData( ).View;
            set
            {
                var data = GetData( );
                if( data.View != value )
                {
                    OnPropertyChanging( );
                    OnPropertyChanging( "View", false );
                    data = GetData( );
                    data.View = value;
                    OnPropertyChanged( );
                    OnPropertyChanged( "View" );
                }
            }
        }

        public ViewEntity? View
        {
            get
            {
                if(_viewReference != null)
                {
                    var result = (ViewEntity?)_viewReference.Target;
                    if( result != null )
                    {
                        return result;
                    }
                }
                var data = GetData( );
                var context = CheckedContext;
                if( data.View is Guid viewId )
                {
                    var entity = context.GetViewById( viewId );
                    if( entity != null )
                    {
                        _viewReference = new WeakReference( entity );
                    }
                    return entity;
                }
                return null;
            }
            set
            {
                ViewId = value != null? value.Id : null;
            }
        }

    }

    public class ViewZoomLevelTimeseriesEntity : DoubleTimeseriesEntity
    {
        WeakReference? _viewReference = null;
        public ViewZoomLevelTimeseriesEntity( [DisallowNull] EntityContext entityContext, [DisallowNull] ViewZoomLevelTimeseriesObject data )
            : base( entityContext, data )
        {
        }

        private ViewZoomLevelTimeseriesObject GetData( ) 
        {
            return (ViewZoomLevelTimeseriesObject)base._GetData( );
        }

        public Guid? ViewId
        {
            get => GetData( ).View;
            set
            {
                var data = GetData( );
                if( data.View != value )
                {
                    OnPropertyChanging( );
                    OnPropertyChanging( "View", false );
                    data = GetData( );
                    data.View = value;
                    OnPropertyChanged( );
                    OnPropertyChanged( "View" );
                }
            }
        }

        public ViewEntity? View
        {
            get
            {
                if(_viewReference != null)
                {
                    var result = (ViewEntity?)_viewReference.Target;
                    if( result != null )
                    {
                        return result;
                    }
                }
                var data = GetData( );
                var context = CheckedContext;
                if( data.View is Guid viewId )
                {
                    var entity = context.GetViewById( viewId );
                    if( entity != null )
                    {
                        _viewReference = new WeakReference( entity );
                    }
                    return entity;
                }
                return null;
            }
            set
            {
                ViewId = value != null? value.Id : null;
            }
        }

    }

    public class WeatherStationAbsoluteHumidityTimeseriesEntity : DoubleTimeseriesEntity
    {
        WeakReference? _weatherStationReference = null;
        public WeatherStationAbsoluteHumidityTimeseriesEntity( [DisallowNull] EntityContext entityContext, [DisallowNull] WeatherStationAbsoluteHumidityTimeseriesObject data )
            : base( entityContext, data )
        {
        }

        private WeatherStationAbsoluteHumidityTimeseriesObject GetData( ) 
        {
            return (WeatherStationAbsoluteHumidityTimeseriesObject)base._GetData( );
        }

        public Guid? WeatherStationId
        {
            get => GetData( ).WeatherStation;
            set
            {
                var data = GetData( );
                if( data.WeatherStation != value )
                {
                    OnPropertyChanging( );
                    OnPropertyChanging( "WeatherStation", false );
                    data = GetData( );
                    data.WeatherStation = value;
                    OnPropertyChanged( );
                    OnPropertyChanged( "WeatherStation" );
                }
            }
        }

        public WeatherStationDeviceEntity? WeatherStation
        {
            get
            {
                if(_weatherStationReference != null)
                {
                    var result = (WeatherStationDeviceEntity?)_weatherStationReference.Target;
                    if( result != null )
                    {
                        return result;
                    }
                }
                var data = GetData( );
                var context = CheckedContext;
                if( data.WeatherStation is Guid weatherStationId )
                {
                    var entity = context.GetWeatherStationDeviceById( weatherStationId );
                    if( entity != null )
                    {
                        _weatherStationReference = new WeakReference( entity );
                    }
                    return entity;
                }
                return null;
            }
            set
            {
                WeatherStationId = value != null? value.Id : null;
            }
        }

    }

    public class WeatherStationAirTemperatureTimeseriesEntity : DoubleTimeseriesEntity
    {
        WeakReference? _weatherStationReference = null;
        public WeatherStationAirTemperatureTimeseriesEntity( [DisallowNull] EntityContext entityContext, [DisallowNull] WeatherStationAirTemperatureTimeseriesObject data )
            : base( entityContext, data )
        {
        }

        private WeatherStationAirTemperatureTimeseriesObject GetData( ) 
        {
            return (WeatherStationAirTemperatureTimeseriesObject)base._GetData( );
        }

        public Guid? WeatherStationId
        {
            get => GetData( ).WeatherStation;
            set
            {
                var data = GetData( );
                if( data.WeatherStation != value )
                {
                    OnPropertyChanging( );
                    OnPropertyChanging( "WeatherStation", false );
                    data = GetData( );
                    data.WeatherStation = value;
                    OnPropertyChanged( );
                    OnPropertyChanged( "WeatherStation" );
                }
            }
        }

        public WeatherStationDeviceEntity? WeatherStation
        {
            get
            {
                if(_weatherStationReference != null)
                {
                    var result = (WeatherStationDeviceEntity?)_weatherStationReference.Target;
                    if( result != null )
                    {
                        return result;
                    }
                }
                var data = GetData( );
                var context = CheckedContext;
                if( data.WeatherStation is Guid weatherStationId )
                {
                    var entity = context.GetWeatherStationDeviceById( weatherStationId );
                    if( entity != null )
                    {
                        _weatherStationReference = new WeakReference( entity );
                    }
                    return entity;
                }
                return null;
            }
            set
            {
                WeatherStationId = value != null? value.Id : null;
            }
        }

    }

    public class WeatherStationBarometricPressureTimeseriesEntity : DoubleTimeseriesEntity
    {
        WeakReference? _weatherStationReference = null;
        public WeatherStationBarometricPressureTimeseriesEntity( [DisallowNull] EntityContext entityContext, [DisallowNull] WeatherStationBarometricPressureTimeseriesObject data )
            : base( entityContext, data )
        {
        }

        private WeatherStationBarometricPressureTimeseriesObject GetData( ) 
        {
            return (WeatherStationBarometricPressureTimeseriesObject)base._GetData( );
        }

        public Guid? WeatherStationId
        {
            get => GetData( ).WeatherStation;
            set
            {
                var data = GetData( );
                if( data.WeatherStation != value )
                {
                    OnPropertyChanging( );
                    OnPropertyChanging( "WeatherStation", false );
                    data = GetData( );
                    data.WeatherStation = value;
                    OnPropertyChanged( );
                    OnPropertyChanged( "WeatherStation" );
                }
            }
        }

        public WeatherStationDeviceEntity? WeatherStation
        {
            get
            {
                if(_weatherStationReference != null)
                {
                    var result = (WeatherStationDeviceEntity?)_weatherStationReference.Target;
                    if( result != null )
                    {
                        return result;
                    }
                }
                var data = GetData( );
                var context = CheckedContext;
                if( data.WeatherStation is Guid weatherStationId )
                {
                    var entity = context.GetWeatherStationDeviceById( weatherStationId );
                    if( entity != null )
                    {
                        _weatherStationReference = new WeakReference( entity );
                    }
                    return entity;
                }
                return null;
            }
            set
            {
                WeatherStationId = value != null? value.Id : null;
            }
        }

    }

    public class WeatherStationDewPointTimeseriesEntity : DoubleTimeseriesEntity
    {
        WeakReference? _weatherStationReference = null;
        public WeatherStationDewPointTimeseriesEntity( [DisallowNull] EntityContext entityContext, [DisallowNull] WeatherStationDewPointTimeseriesObject data )
            : base( entityContext, data )
        {
        }

        private WeatherStationDewPointTimeseriesObject GetData( ) 
        {
            return (WeatherStationDewPointTimeseriesObject)base._GetData( );
        }

        public Guid? WeatherStationId
        {
            get => GetData( ).WeatherStation;
            set
            {
                var data = GetData( );
                if( data.WeatherStation != value )
                {
                    OnPropertyChanging( );
                    OnPropertyChanging( "WeatherStation", false );
                    data = GetData( );
                    data.WeatherStation = value;
                    OnPropertyChanged( );
                    OnPropertyChanged( "WeatherStation" );
                }
            }
        }

        public WeatherStationDeviceEntity? WeatherStation
        {
            get
            {
                if(_weatherStationReference != null)
                {
                    var result = (WeatherStationDeviceEntity?)_weatherStationReference.Target;
                    if( result != null )
                    {
                        return result;
                    }
                }
                var data = GetData( );
                var context = CheckedContext;
                if( data.WeatherStation is Guid weatherStationId )
                {
                    var entity = context.GetWeatherStationDeviceById( weatherStationId );
                    if( entity != null )
                    {
                        _weatherStationReference = new WeakReference( entity );
                    }
                    return entity;
                }
                return null;
            }
            set
            {
                WeatherStationId = value != null? value.Id : null;
            }
        }

    }

    public class WeatherStationRelativeHumidityTimeseriesEntity : DoubleTimeseriesEntity
    {
        WeakReference? _weatherStationReference = null;
        public WeatherStationRelativeHumidityTimeseriesEntity( [DisallowNull] EntityContext entityContext, [DisallowNull] WeatherStationRelativeHumidityTimeseriesObject data )
            : base( entityContext, data )
        {
        }

        private WeatherStationRelativeHumidityTimeseriesObject GetData( ) 
        {
            return (WeatherStationRelativeHumidityTimeseriesObject)base._GetData( );
        }

        public Guid? WeatherStationId
        {
            get => GetData( ).WeatherStation;
            set
            {
                var data = GetData( );
                if( data.WeatherStation != value )
                {
                    OnPropertyChanging( );
                    OnPropertyChanging( "WeatherStation", false );
                    data = GetData( );
                    data.WeatherStation = value;
                    OnPropertyChanged( );
                    OnPropertyChanged( "WeatherStation" );
                }
            }
        }

        public WeatherStationDeviceEntity? WeatherStation
        {
            get
            {
                if(_weatherStationReference != null)
                {
                    var result = (WeatherStationDeviceEntity?)_weatherStationReference.Target;
                    if( result != null )
                    {
                        return result;
                    }
                }
                var data = GetData( );
                var context = CheckedContext;
                if( data.WeatherStation is Guid weatherStationId )
                {
                    var entity = context.GetWeatherStationDeviceById( weatherStationId );
                    if( entity != null )
                    {
                        _weatherStationReference = new WeakReference( entity );
                    }
                    return entity;
                }
                return null;
            }
            set
            {
                WeatherStationId = value != null? value.Id : null;
            }
        }

    }

    public class WeatherStationWaterTemperatureTimeseriesEntity : DoubleTimeseriesEntity
    {
        WeakReference? _weatherStationReference = null;
        public WeatherStationWaterTemperatureTimeseriesEntity( [DisallowNull] EntityContext entityContext, [DisallowNull] WeatherStationWaterTemperatureTimeseriesObject data )
            : base( entityContext, data )
        {
        }

        private WeatherStationWaterTemperatureTimeseriesObject GetData( ) 
        {
            return (WeatherStationWaterTemperatureTimeseriesObject)base._GetData( );
        }

        public Guid? WeatherStationId
        {
            get => GetData( ).WeatherStation;
            set
            {
                var data = GetData( );
                if( data.WeatherStation != value )
                {
                    OnPropertyChanging( );
                    OnPropertyChanging( "WeatherStation", false );
                    data = GetData( );
                    data.WeatherStation = value;
                    OnPropertyChanged( );
                    OnPropertyChanged( "WeatherStation" );
                }
            }
        }

        public WeatherStationDeviceEntity? WeatherStation
        {
            get
            {
                if(_weatherStationReference != null)
                {
                    var result = (WeatherStationDeviceEntity?)_weatherStationReference.Target;
                    if( result != null )
                    {
                        return result;
                    }
                }
                var data = GetData( );
                var context = CheckedContext;
                if( data.WeatherStation is Guid weatherStationId )
                {
                    var entity = context.GetWeatherStationDeviceById( weatherStationId );
                    if( entity != null )
                    {
                        _weatherStationReference = new WeakReference( entity );
                    }
                    return entity;
                }
                return null;
            }
            set
            {
                WeatherStationId = value != null? value.Id : null;
            }
        }

    }

    public class WeatherStationWindDirectionTimeseriesEntity : DoubleTimeseriesEntity
    {
        WeakReference? _weatherStationReference = null;
        public WeatherStationWindDirectionTimeseriesEntity( [DisallowNull] EntityContext entityContext, [DisallowNull] WeatherStationWindDirectionTimeseriesObject data )
            : base( entityContext, data )
        {
        }

        private WeatherStationWindDirectionTimeseriesObject GetData( ) 
        {
            return (WeatherStationWindDirectionTimeseriesObject)base._GetData( );
        }

        public Guid? WeatherStationId
        {
            get => GetData( ).WeatherStation;
            set
            {
                var data = GetData( );
                if( data.WeatherStation != value )
                {
                    OnPropertyChanging( );
                    OnPropertyChanging( "WeatherStation", false );
                    data = GetData( );
                    data.WeatherStation = value;
                    OnPropertyChanged( );
                    OnPropertyChanged( "WeatherStation" );
                }
            }
        }

        public WeatherStationDeviceEntity? WeatherStation
        {
            get
            {
                if(_weatherStationReference != null)
                {
                    var result = (WeatherStationDeviceEntity?)_weatherStationReference.Target;
                    if( result != null )
                    {
                        return result;
                    }
                }
                var data = GetData( );
                var context = CheckedContext;
                if( data.WeatherStation is Guid weatherStationId )
                {
                    var entity = context.GetWeatherStationDeviceById( weatherStationId );
                    if( entity != null )
                    {
                        _weatherStationReference = new WeakReference( entity );
                    }
                    return entity;
                }
                return null;
            }
            set
            {
                WeatherStationId = value != null? value.Id : null;
            }
        }

    }

    public class WeatherStationWindSpeedTimeseriesEntity : DoubleTimeseriesEntity
    {
        WeakReference? _weatherStationReference = null;
        public WeatherStationWindSpeedTimeseriesEntity( [DisallowNull] EntityContext entityContext, [DisallowNull] WeatherStationWindSpeedTimeseriesObject data )
            : base( entityContext, data )
        {
        }

        private WeatherStationWindSpeedTimeseriesObject GetData( ) 
        {
            return (WeatherStationWindSpeedTimeseriesObject)base._GetData( );
        }

        public Guid? WeatherStationId
        {
            get => GetData( ).WeatherStation;
            set
            {
                var data = GetData( );
                if( data.WeatherStation != value )
                {
                    OnPropertyChanging( );
                    OnPropertyChanging( "WeatherStation", false );
                    data = GetData( );
                    data.WeatherStation = value;
                    OnPropertyChanged( );
                    OnPropertyChanged( "WeatherStation" );
                }
            }
        }

        public WeatherStationDeviceEntity? WeatherStation
        {
            get
            {
                if(_weatherStationReference != null)
                {
                    var result = (WeatherStationDeviceEntity?)_weatherStationReference.Target;
                    if( result != null )
                    {
                        return result;
                    }
                }
                var data = GetData( );
                var context = CheckedContext;
                if( data.WeatherStation is Guid weatherStationId )
                {
                    var entity = context.GetWeatherStationDeviceById( weatherStationId );
                    if( entity != null )
                    {
                        _weatherStationReference = new WeakReference( entity );
                    }
                    return entity;
                }
                return null;
            }
            set
            {
                WeatherStationId = value != null? value.Id : null;
            }
        }

    }

    public class GeoPosition2DTimeseriesEntity : TimeseriesEntity
    {
        public GeoPosition2DTimeseriesEntity( [DisallowNull] EntityContext entityContext, [DisallowNull] GeoPosition2DTimeseriesObject data )
            : base( entityContext, data )
        {
        }

        private GeoPosition2DTimeseriesObject GetData( ) 
        {
            return (GeoPosition2DTimeseriesObject)base._GetData( );
        }

    }

    public class AisAidToNavigationPositionTimeseriesEntity : GeoPosition2DTimeseriesEntity
    {
        WeakReference? _aidToNavigationReference = null;
        public AisAidToNavigationPositionTimeseriesEntity( [DisallowNull] EntityContext entityContext, [DisallowNull] AisAidToNavigationPositionTimeseriesObject data )
            : base( entityContext, data )
        {
        }

        private AisAidToNavigationPositionTimeseriesObject GetData( ) 
        {
            return (AisAidToNavigationPositionTimeseriesObject)base._GetData( );
        }

        public Guid? AidToNavigationId
        {
            get => GetData( ).AidToNavigation;
            set
            {
                var data = GetData( );
                if( data.AidToNavigation != value )
                {
                    OnPropertyChanging( );
                    OnPropertyChanging( "AidToNavigation", false );
                    data = GetData( );
                    data.AidToNavigation = value;
                    OnPropertyChanged( );
                    OnPropertyChanged( "AidToNavigation" );
                }
            }
        }

        public AisAidToNavigationEntity? AidToNavigation
        {
            get
            {
                if(_aidToNavigationReference != null)
                {
                    var result = (AisAidToNavigationEntity?)_aidToNavigationReference.Target;
                    if( result != null )
                    {
                        return result;
                    }
                }
                var data = GetData( );
                var context = CheckedContext;
                if( data.AidToNavigation is Guid aidToNavigationId )
                {
                    var entity = context.GetAisAidToNavigationById( aidToNavigationId );
                    if( entity != null )
                    {
                        _aidToNavigationReference = new WeakReference( entity );
                    }
                    return entity;
                }
                return null;
            }
            set
            {
                AidToNavigationId = value != null? value.Id : null;
            }
        }

    }

    public class GeoPosition3DTimeseriesEntity : TimeseriesEntity
    {
        public GeoPosition3DTimeseriesEntity( [DisallowNull] EntityContext entityContext, [DisallowNull] GeoPosition3DTimeseriesObject data )
            : base( entityContext, data )
        {
        }

        private GeoPosition3DTimeseriesObject GetData( ) 
        {
            return (GeoPosition3DTimeseriesObject)base._GetData( );
        }

    }

    public class GuidTimeseriesEntity : TimeseriesEntity
    {
        public GuidTimeseriesEntity( [DisallowNull] EntityContext entityContext, [DisallowNull] GuidTimeseriesObject data )
            : base( entityContext, data )
        {
        }

        private GuidTimeseriesObject GetData( ) 
        {
            return (GuidTimeseriesObject)base._GetData( );
        }

    }

    public class Int16TimeseriesEntity : TimeseriesEntity
    {
        public Int16TimeseriesEntity( [DisallowNull] EntityContext entityContext, [DisallowNull] Int16TimeseriesObject data )
            : base( entityContext, data )
        {
        }

        private Int16TimeseriesObject GetData( ) 
        {
            return (Int16TimeseriesObject)base._GetData( );
        }

    }

    public class Int32TimeseriesEntity : TimeseriesEntity
    {
        public Int32TimeseriesEntity( [DisallowNull] EntityContext entityContext, [DisallowNull] Int32TimeseriesObject data )
            : base( entityContext, data )
        {
        }

        private Int32TimeseriesObject GetData( ) 
        {
            return (Int32TimeseriesObject)base._GetData( );
        }

    }

    public class RadarAzimuthOffsetTimeseriesEntity : Int32TimeseriesEntity
    {
        WeakReference? _radarReference = null;
        public RadarAzimuthOffsetTimeseriesEntity( [DisallowNull] EntityContext entityContext, [DisallowNull] RadarAzimuthOffsetTimeseriesObject data )
            : base( entityContext, data )
        {
        }

        private RadarAzimuthOffsetTimeseriesObject GetData( ) 
        {
            return (RadarAzimuthOffsetTimeseriesObject)base._GetData( );
        }

        public Guid? RadarId
        {
            get => GetData( ).Radar;
            set
            {
                var data = GetData( );
                if( data.Radar != value )
                {
                    OnPropertyChanging( );
                    OnPropertyChanging( "Radar", false );
                    data = GetData( );
                    data.Radar = value;
                    OnPropertyChanged( );
                    OnPropertyChanged( "Radar" );
                }
            }
        }

        public RadarDeviceEntity? Radar
        {
            get
            {
                if(_radarReference != null)
                {
                    var result = (RadarDeviceEntity?)_radarReference.Target;
                    if( result != null )
                    {
                        return result;
                    }
                }
                var data = GetData( );
                var context = CheckedContext;
                if( data.Radar is Guid radarId )
                {
                    var entity = context.GetRadarDeviceById( radarId );
                    if( entity != null )
                    {
                        _radarReference = new WeakReference( entity );
                    }
                    return entity;
                }
                return null;
            }
            set
            {
                RadarId = value != null? value.Id : null;
            }
        }

    }

    public class RadarFastTimeConstantLevelTimeseriesEntity : Int32TimeseriesEntity
    {
        WeakReference? _radarReference = null;
        public RadarFastTimeConstantLevelTimeseriesEntity( [DisallowNull] EntityContext entityContext, [DisallowNull] RadarFastTimeConstantLevelTimeseriesObject data )
            : base( entityContext, data )
        {
        }

        private RadarFastTimeConstantLevelTimeseriesObject GetData( ) 
        {
            return (RadarFastTimeConstantLevelTimeseriesObject)base._GetData( );
        }

        public Guid? RadarId
        {
            get => GetData( ).Radar;
            set
            {
                var data = GetData( );
                if( data.Radar != value )
                {
                    OnPropertyChanging( );
                    OnPropertyChanging( "Radar", false );
                    data = GetData( );
                    data.Radar = value;
                    OnPropertyChanged( );
                    OnPropertyChanged( "Radar" );
                }
            }
        }

        public RadarDeviceEntity? Radar
        {
            get
            {
                if(_radarReference != null)
                {
                    var result = (RadarDeviceEntity?)_radarReference.Target;
                    if( result != null )
                    {
                        return result;
                    }
                }
                var data = GetData( );
                var context = CheckedContext;
                if( data.Radar is Guid radarId )
                {
                    var entity = context.GetRadarDeviceById( radarId );
                    if( entity != null )
                    {
                        _radarReference = new WeakReference( entity );
                    }
                    return entity;
                }
                return null;
            }
            set
            {
                RadarId = value != null? value.Id : null;
            }
        }

    }

    public class RadarFastTimeConstantModeTimeseriesEntity : Int32TimeseriesEntity
    {
        WeakReference? _radarReference = null;
        public RadarFastTimeConstantModeTimeseriesEntity( [DisallowNull] EntityContext entityContext, [DisallowNull] RadarFastTimeConstantModeTimeseriesObject data )
            : base( entityContext, data )
        {
        }

        private RadarFastTimeConstantModeTimeseriesObject GetData( ) 
        {
            return (RadarFastTimeConstantModeTimeseriesObject)base._GetData( );
        }

        public Guid? RadarId
        {
            get => GetData( ).Radar;
            set
            {
                var data = GetData( );
                if( data.Radar != value )
                {
                    OnPropertyChanging( );
                    OnPropertyChanging( "Radar", false );
                    data = GetData( );
                    data.Radar = value;
                    OnPropertyChanged( );
                    OnPropertyChanged( "Radar" );
                }
            }
        }

        public RadarDeviceEntity? Radar
        {
            get
            {
                if(_radarReference != null)
                {
                    var result = (RadarDeviceEntity?)_radarReference.Target;
                    if( result != null )
                    {
                        return result;
                    }
                }
                var data = GetData( );
                var context = CheckedContext;
                if( data.Radar is Guid radarId )
                {
                    var entity = context.GetRadarDeviceById( radarId );
                    if( entity != null )
                    {
                        _radarReference = new WeakReference( entity );
                    }
                    return entity;
                }
                return null;
            }
            set
            {
                RadarId = value != null? value.Id : null;
            }
        }

    }

    public class RadarPulseTimeseriesEntity : Int32TimeseriesEntity
    {
        WeakReference? _radarReference = null;
        public RadarPulseTimeseriesEntity( [DisallowNull] EntityContext entityContext, [DisallowNull] RadarPulseTimeseriesObject data )
            : base( entityContext, data )
        {
        }

        private RadarPulseTimeseriesObject GetData( ) 
        {
            return (RadarPulseTimeseriesObject)base._GetData( );
        }

        public Guid? RadarId
        {
            get => GetData( ).Radar;
            set
            {
                var data = GetData( );
                if( data.Radar != value )
                {
                    OnPropertyChanging( );
                    OnPropertyChanging( "Radar", false );
                    data = GetData( );
                    data.Radar = value;
                    OnPropertyChanged( );
                    OnPropertyChanged( "Radar" );
                }
            }
        }

        public RadarDeviceEntity? Radar
        {
            get
            {
                if(_radarReference != null)
                {
                    var result = (RadarDeviceEntity?)_radarReference.Target;
                    if( result != null )
                    {
                        return result;
                    }
                }
                var data = GetData( );
                var context = CheckedContext;
                if( data.Radar is Guid radarId )
                {
                    var entity = context.GetRadarDeviceById( radarId );
                    if( entity != null )
                    {
                        _radarReference = new WeakReference( entity );
                    }
                    return entity;
                }
                return null;
            }
            set
            {
                RadarId = value != null? value.Id : null;
            }
        }

    }

    public class RadarSector1EndTimeseriesEntity : Int32TimeseriesEntity
    {
        WeakReference? _radarReference = null;
        public RadarSector1EndTimeseriesEntity( [DisallowNull] EntityContext entityContext, [DisallowNull] RadarSector1EndTimeseriesObject data )
            : base( entityContext, data )
        {
        }

        private RadarSector1EndTimeseriesObject GetData( ) 
        {
            return (RadarSector1EndTimeseriesObject)base._GetData( );
        }

        public Guid? RadarId
        {
            get => GetData( ).Radar;
            set
            {
                var data = GetData( );
                if( data.Radar != value )
                {
                    OnPropertyChanging( );
                    OnPropertyChanging( "Radar", false );
                    data = GetData( );
                    data.Radar = value;
                    OnPropertyChanged( );
                    OnPropertyChanged( "Radar" );
                }
            }
        }

        public RadarDeviceEntity? Radar
        {
            get
            {
                if(_radarReference != null)
                {
                    var result = (RadarDeviceEntity?)_radarReference.Target;
                    if( result != null )
                    {
                        return result;
                    }
                }
                var data = GetData( );
                var context = CheckedContext;
                if( data.Radar is Guid radarId )
                {
                    var entity = context.GetRadarDeviceById( radarId );
                    if( entity != null )
                    {
                        _radarReference = new WeakReference( entity );
                    }
                    return entity;
                }
                return null;
            }
            set
            {
                RadarId = value != null? value.Id : null;
            }
        }

    }

    public class RadarSector1StartTimeseriesEntity : Int32TimeseriesEntity
    {
        WeakReference? _radarReference = null;
        public RadarSector1StartTimeseriesEntity( [DisallowNull] EntityContext entityContext, [DisallowNull] RadarSector1StartTimeseriesObject data )
            : base( entityContext, data )
        {
        }

        private RadarSector1StartTimeseriesObject GetData( ) 
        {
            return (RadarSector1StartTimeseriesObject)base._GetData( );
        }

        public Guid? RadarId
        {
            get => GetData( ).Radar;
            set
            {
                var data = GetData( );
                if( data.Radar != value )
                {
                    OnPropertyChanging( );
                    OnPropertyChanging( "Radar", false );
                    data = GetData( );
                    data.Radar = value;
                    OnPropertyChanged( );
                    OnPropertyChanged( "Radar" );
                }
            }
        }

        public RadarDeviceEntity? Radar
        {
            get
            {
                if(_radarReference != null)
                {
                    var result = (RadarDeviceEntity?)_radarReference.Target;
                    if( result != null )
                    {
                        return result;
                    }
                }
                var data = GetData( );
                var context = CheckedContext;
                if( data.Radar is Guid radarId )
                {
                    var entity = context.GetRadarDeviceById( radarId );
                    if( entity != null )
                    {
                        _radarReference = new WeakReference( entity );
                    }
                    return entity;
                }
                return null;
            }
            set
            {
                RadarId = value != null? value.Id : null;
            }
        }

    }

    public class RadarSector2EndTimeseriesEntity : Int32TimeseriesEntity
    {
        WeakReference? _radarReference = null;
        public RadarSector2EndTimeseriesEntity( [DisallowNull] EntityContext entityContext, [DisallowNull] RadarSector2EndTimeseriesObject data )
            : base( entityContext, data )
        {
        }

        private RadarSector2EndTimeseriesObject GetData( ) 
        {
            return (RadarSector2EndTimeseriesObject)base._GetData( );
        }

        public Guid? RadarId
        {
            get => GetData( ).Radar;
            set
            {
                var data = GetData( );
                if( data.Radar != value )
                {
                    OnPropertyChanging( );
                    OnPropertyChanging( "Radar", false );
                    data = GetData( );
                    data.Radar = value;
                    OnPropertyChanged( );
                    OnPropertyChanged( "Radar" );
                }
            }
        }

        public RadarDeviceEntity? Radar
        {
            get
            {
                if(_radarReference != null)
                {
                    var result = (RadarDeviceEntity?)_radarReference.Target;
                    if( result != null )
                    {
                        return result;
                    }
                }
                var data = GetData( );
                var context = CheckedContext;
                if( data.Radar is Guid radarId )
                {
                    var entity = context.GetRadarDeviceById( radarId );
                    if( entity != null )
                    {
                        _radarReference = new WeakReference( entity );
                    }
                    return entity;
                }
                return null;
            }
            set
            {
                RadarId = value != null? value.Id : null;
            }
        }

    }

    public class RadarSector2StartTimeseriesEntity : Int32TimeseriesEntity
    {
        WeakReference? _radarReference = null;
        public RadarSector2StartTimeseriesEntity( [DisallowNull] EntityContext entityContext, [DisallowNull] RadarSector2StartTimeseriesObject data )
            : base( entityContext, data )
        {
        }

        private RadarSector2StartTimeseriesObject GetData( ) 
        {
            return (RadarSector2StartTimeseriesObject)base._GetData( );
        }

        public Guid? RadarId
        {
            get => GetData( ).Radar;
            set
            {
                var data = GetData( );
                if( data.Radar != value )
                {
                    OnPropertyChanging( );
                    OnPropertyChanging( "Radar", false );
                    data = GetData( );
                    data.Radar = value;
                    OnPropertyChanged( );
                    OnPropertyChanged( "Radar" );
                }
            }
        }

        public RadarDeviceEntity? Radar
        {
            get
            {
                if(_radarReference != null)
                {
                    var result = (RadarDeviceEntity?)_radarReference.Target;
                    if( result != null )
                    {
                        return result;
                    }
                }
                var data = GetData( );
                var context = CheckedContext;
                if( data.Radar is Guid radarId )
                {
                    var entity = context.GetRadarDeviceById( radarId );
                    if( entity != null )
                    {
                        _radarReference = new WeakReference( entity );
                    }
                    return entity;
                }
                return null;
            }
            set
            {
                RadarId = value != null? value.Id : null;
            }
        }

    }

    public class RadarSensitivityTimeControlLevelTimeseriesEntity : Int32TimeseriesEntity
    {
        WeakReference? _radarReference = null;
        public RadarSensitivityTimeControlLevelTimeseriesEntity( [DisallowNull] EntityContext entityContext, [DisallowNull] RadarSensitivityTimeControlLevelTimeseriesObject data )
            : base( entityContext, data )
        {
        }

        private RadarSensitivityTimeControlLevelTimeseriesObject GetData( ) 
        {
            return (RadarSensitivityTimeControlLevelTimeseriesObject)base._GetData( );
        }

        public Guid? RadarId
        {
            get => GetData( ).Radar;
            set
            {
                var data = GetData( );
                if( data.Radar != value )
                {
                    OnPropertyChanging( );
                    OnPropertyChanging( "Radar", false );
                    data = GetData( );
                    data.Radar = value;
                    OnPropertyChanged( );
                    OnPropertyChanged( "Radar" );
                }
            }
        }

        public RadarDeviceEntity? Radar
        {
            get
            {
                if(_radarReference != null)
                {
                    var result = (RadarDeviceEntity?)_radarReference.Target;
                    if( result != null )
                    {
                        return result;
                    }
                }
                var data = GetData( );
                var context = CheckedContext;
                if( data.Radar is Guid radarId )
                {
                    var entity = context.GetRadarDeviceById( radarId );
                    if( entity != null )
                    {
                        _radarReference = new WeakReference( entity );
                    }
                    return entity;
                }
                return null;
            }
            set
            {
                RadarId = value != null? value.Id : null;
            }
        }

    }

    public class RadarTuningTimeseriesEntity : Int32TimeseriesEntity
    {
        WeakReference? _radarReference = null;
        public RadarTuningTimeseriesEntity( [DisallowNull] EntityContext entityContext, [DisallowNull] RadarTuningTimeseriesObject data )
            : base( entityContext, data )
        {
        }

        private RadarTuningTimeseriesObject GetData( ) 
        {
            return (RadarTuningTimeseriesObject)base._GetData( );
        }

        public Guid? RadarId
        {
            get => GetData( ).Radar;
            set
            {
                var data = GetData( );
                if( data.Radar != value )
                {
                    OnPropertyChanging( );
                    OnPropertyChanging( "Radar", false );
                    data = GetData( );
                    data.Radar = value;
                    OnPropertyChanged( );
                    OnPropertyChanged( "Radar" );
                }
            }
        }

        public RadarDeviceEntity? Radar
        {
            get
            {
                if(_radarReference != null)
                {
                    var result = (RadarDeviceEntity?)_radarReference.Target;
                    if( result != null )
                    {
                        return result;
                    }
                }
                var data = GetData( );
                var context = CheckedContext;
                if( data.Radar is Guid radarId )
                {
                    var entity = context.GetRadarDeviceById( radarId );
                    if( entity != null )
                    {
                        _radarReference = new WeakReference( entity );
                    }
                    return entity;
                }
                return null;
            }
            set
            {
                RadarId = value != null? value.Id : null;
            }
        }

    }

    public class VesselPersonsOnBoardTimeseriesEntity : Int32TimeseriesEntity
    {
        WeakReference? _vesselReference = null;
        public VesselPersonsOnBoardTimeseriesEntity( [DisallowNull] EntityContext entityContext, [DisallowNull] VesselPersonsOnBoardTimeseriesObject data )
            : base( entityContext, data )
        {
        }

        private VesselPersonsOnBoardTimeseriesObject GetData( ) 
        {
            return (VesselPersonsOnBoardTimeseriesObject)base._GetData( );
        }

        public Guid? VesselId
        {
            get => GetData( ).Vessel;
            set
            {
                var data = GetData( );
                if( data.Vessel != value )
                {
                    OnPropertyChanging( );
                    OnPropertyChanging( "Vessel", false );
                    data = GetData( );
                    data.Vessel = value;
                    OnPropertyChanged( );
                    OnPropertyChanged( "Vessel" );
                }
            }
        }

        public VesselEntity? Vessel
        {
            get
            {
                if(_vesselReference != null)
                {
                    var result = (VesselEntity?)_vesselReference.Target;
                    if( result != null )
                    {
                        return result;
                    }
                }
                var data = GetData( );
                var context = CheckedContext;
                if( data.Vessel is Guid vesselId )
                {
                    var entity = context.GetVesselById( vesselId );
                    if( entity != null )
                    {
                        _vesselReference = new WeakReference( entity );
                    }
                    return entity;
                }
                return null;
            }
            set
            {
                VesselId = value != null? value.Id : null;
            }
        }

    }

    public class Int64TimeseriesEntity : TimeseriesEntity
    {
        public Int64TimeseriesEntity( [DisallowNull] EntityContext entityContext, [DisallowNull] Int64TimeseriesObject data )
            : base( entityContext, data )
        {
        }

        private Int64TimeseriesObject GetData( ) 
        {
            return (Int64TimeseriesObject)base._GetData( );
        }

    }

    public class Position2DTimeseriesEntity : TimeseriesEntity
    {
        public Position2DTimeseriesEntity( [DisallowNull] EntityContext entityContext, [DisallowNull] Position2DTimeseriesObject data )
            : base( entityContext, data )
        {
        }

        private Position2DTimeseriesObject GetData( ) 
        {
            return (Position2DTimeseriesObject)base._GetData( );
        }

    }

    public class Position3DTimeseriesEntity : TimeseriesEntity
    {
        public Position3DTimeseriesEntity( [DisallowNull] EntityContext entityContext, [DisallowNull] Position3DTimeseriesObject data )
            : base( entityContext, data )
        {
        }

        private Position3DTimeseriesObject GetData( ) 
        {
            return (Position3DTimeseriesObject)base._GetData( );
        }

    }

    public class ReferenceTimeseriesEntity : TimeseriesEntity
    {
        public ReferenceTimeseriesEntity( [DisallowNull] EntityContext entityContext, [DisallowNull] ReferenceTimeseriesObject data )
            : base( entityContext, data )
        {
        }

        private ReferenceTimeseriesObject GetData( ) 
        {
            return (ReferenceTimeseriesObject)base._GetData( );
        }

    }

    public class SByteTimeseriesEntity : TimeseriesEntity
    {
        public SByteTimeseriesEntity( [DisallowNull] EntityContext entityContext, [DisallowNull] SByteTimeseriesObject data )
            : base( entityContext, data )
        {
        }

        private SByteTimeseriesObject GetData( ) 
        {
            return (SByteTimeseriesObject)base._GetData( );
        }

    }

    public class SingleTimeseriesEntity : TimeseriesEntity
    {
        public SingleTimeseriesEntity( [DisallowNull] EntityContext entityContext, [DisallowNull] SingleTimeseriesObject data )
            : base( entityContext, data )
        {
        }

        private SingleTimeseriesObject GetData( ) 
        {
            return (SingleTimeseriesObject)base._GetData( );
        }

    }

    public class StringTimeseriesEntity : TimeseriesEntity
    {
        public StringTimeseriesEntity( [DisallowNull] EntityContext entityContext, [DisallowNull] StringTimeseriesObject data )
            : base( entityContext, data )
        {
        }

        private StringTimeseriesObject GetData( ) 
        {
            return (StringTimeseriesObject)base._GetData( );
        }

    }

    public class TimeSpanTimeseriesEntity : TimeseriesEntity
    {
        public TimeSpanTimeseriesEntity( [DisallowNull] EntityContext entityContext, [DisallowNull] TimeSpanTimeseriesObject data )
            : base( entityContext, data )
        {
        }

        private TimeSpanTimeseriesObject GetData( ) 
        {
            return (TimeSpanTimeseriesObject)base._GetData( );
        }

    }

    public class UInt16TimeseriesEntity : TimeseriesEntity
    {
        public UInt16TimeseriesEntity( [DisallowNull] EntityContext entityContext, [DisallowNull] UInt16TimeseriesObject data )
            : base( entityContext, data )
        {
        }

        private UInt16TimeseriesObject GetData( ) 
        {
            return (UInt16TimeseriesObject)base._GetData( );
        }

    }

    public class UInt32TimeseriesEntity : TimeseriesEntity
    {
        public UInt32TimeseriesEntity( [DisallowNull] EntityContext entityContext, [DisallowNull] UInt32TimeseriesObject data )
            : base( entityContext, data )
        {
        }

        private UInt32TimeseriesObject GetData( ) 
        {
            return (UInt32TimeseriesObject)base._GetData( );
        }

    }

    public class RadomeStatusTimeseriesEntity : UInt32TimeseriesEntity
    {
        WeakReference? _radomeReference = null;
        public RadomeStatusTimeseriesEntity( [DisallowNull] EntityContext entityContext, [DisallowNull] RadomeStatusTimeseriesObject data )
            : base( entityContext, data )
        {
        }

        private RadomeStatusTimeseriesObject GetData( ) 
        {
            return (RadomeStatusTimeseriesObject)base._GetData( );
        }

        public Guid? RadomeId
        {
            get => GetData( ).Radome;
            set
            {
                var data = GetData( );
                if( data.Radome != value )
                {
                    OnPropertyChanging( );
                    OnPropertyChanging( "Radome", false );
                    data = GetData( );
                    data.Radome = value;
                    OnPropertyChanged( );
                    OnPropertyChanged( "Radome" );
                }
            }
        }

        public RadomeDeviceEntity? Radome
        {
            get
            {
                if(_radomeReference != null)
                {
                    var result = (RadomeDeviceEntity?)_radomeReference.Target;
                    if( result != null )
                    {
                        return result;
                    }
                }
                var data = GetData( );
                var context = CheckedContext;
                if( data.Radome is Guid radomeId )
                {
                    var entity = context.GetRadomeDeviceById( radomeId );
                    if( entity != null )
                    {
                        _radomeReference = new WeakReference( entity );
                    }
                    return entity;
                }
                return null;
            }
            set
            {
                RadomeId = value != null? value.Id : null;
            }
        }

    }

    public class UInt64TimeseriesEntity : TimeseriesEntity
    {
        public UInt64TimeseriesEntity( [DisallowNull] EntityContext entityContext, [DisallowNull] UInt64TimeseriesObject data )
            : base( entityContext, data )
        {
        }

        private UInt64TimeseriesObject GetData( ) 
        {
            return (UInt64TimeseriesObject)base._GetData( );
        }

    }

    public class TimeseriesCatalogEntity : TimeseriesCatalogElementEntity
    {
        public TimeseriesCatalogEntity( [DisallowNull] EntityContext entityContext, [DisallowNull] TimeseriesCatalogObject data )
            : base( entityContext, data )
        {
        }

        private TimeseriesCatalogObject GetData( ) 
        {
            return (TimeseriesCatalogObject)base._GetData( );
        }

    }

    public class TimeseriesInfoEntity : BaseEntity<Kind>
    {
        public TimeseriesInfoEntity( [DisallowNull] EntityContext entityContext, [DisallowNull] TimeseriesInfoObject data )
            : base( entityContext, data )
        {
        }

        public EntityContext? Context => (EntityContext?)_Context;

        protected EntityContext CheckedContext
        {
            get
            {
                var context = Context;
                if ( context is null )
                {
                    throw new InvalidOperationException( "Context is null" );
                }
                return context;
            }
        }

        private TimeseriesInfoObject GetData( ) 
        {
            return (TimeseriesInfoObject)base._GetData( );
        }

        public DateTime? FirstTimestamp
        {
            get => GetData( ).FirstTimestamp;
            set
            {
                var data = GetData( );
                if( data.FirstTimestamp != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.FirstTimestamp = value;
                    OnPropertyChanged( );
                }
            }
        }

        public DateTime? LastTimestamp
        {
            get => GetData( ).LastTimestamp;
            set
            {
                var data = GetData( );
                if( data.LastTimestamp != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.LastTimestamp = value;
                    OnPropertyChanged( );
                }
            }
        }

        public long Count
        {
            get => GetData( ).Count;
            set
            {
                var data = GetData( );
                if( data.Count != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Count = value;
                    OnPropertyChanged( );
                }
            }
        }

    }

    public class TimeSpanTimeseriesValueEntity : BaseEntity<Kind>
    {
        WeakReference? _timeseriesReference = null;
        public TimeSpanTimeseriesValueEntity( [DisallowNull] EntityContext entityContext, [DisallowNull] TimeSpanTimeseriesValueObject data )
            : base( entityContext, data )
        {
        }

        public EntityContext? Context => (EntityContext?)_Context;

        protected EntityContext CheckedContext
        {
            get
            {
                var context = Context;
                if ( context is null )
                {
                    throw new InvalidOperationException( "Context is null" );
                }
                return context;
            }
        }

        private TimeSpanTimeseriesValueObject GetData( ) 
        {
            return (TimeSpanTimeseriesValueObject)base._GetData( );
        }

        public Guid TimeseriesId
        {
            get => GetData( ).Timeseries;
            set
            {
                var data = GetData( );
                if( data.Timeseries != value )
                {
                    OnPropertyChanging( );
                    OnPropertyChanging( "Timeseries", false );
                    data = GetData( );
                    data.Timeseries = value;
                    OnPropertyChanged( );
                    OnPropertyChanged( "Timeseries" );
                }
            }
        }

        public TimeSpanTimeseriesEntity Timeseries
        {
            get
            {
                if(_timeseriesReference != null)
                {
                    var result = (TimeSpanTimeseriesEntity?)_timeseriesReference.Target;
                    if( result != null )
                    {
                        return result;
                    }
                }
                var data = GetData( );
                var context = CheckedContext;
                var entity = context.GetTimeSpanTimeseriesById( data.Timeseries );
                if( entity != null )
                {
                    _timeseriesReference = new WeakReference( entity );
                }
                else
                {
                    var message = $"Cannot find the TimeSpanTimeseriesEntity object identified by {data.Timeseries}";
                    throw new Exception( message );
                }
                return entity;
            }
            set
            {
                TimeseriesId = value != null? value.Id : Guid.Empty;
            }
        }

        public DateTime Timestamp
        {
            get => GetData( ).Timestamp;
            set
            {
                var data = GetData( );
                if( data.Timestamp != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Timestamp = value;
                    OnPropertyChanged( );
                }
            }
        }

        public TimeSpan? Value
        {
            get => GetData( ).Value;
            set
            {
                var data = GetData( );
                if( data.Value != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Value = value;
                    OnPropertyChanged( );
                }
            }
        }

    }

    public class TrackableItemTrackLinkEntity : BaseEntity<Kind>
    {
        WeakReference? _itemReference = null;
        WeakReference? _trackReference = null;
        public TrackableItemTrackLinkEntity( [DisallowNull] EntityContext entityContext, [DisallowNull] TrackableItemTrackLinkObject data )
            : base( entityContext, data )
        {
        }

        public EntityContext? Context => (EntityContext?)_Context;

        protected EntityContext CheckedContext
        {
            get
            {
                var context = Context;
                if ( context is null )
                {
                    throw new InvalidOperationException( "Context is null" );
                }
                return context;
            }
        }

        private TrackableItemTrackLinkObject GetData( ) 
        {
            return (TrackableItemTrackLinkObject)base._GetData( );
        }

        public Guid ItemId
        {
            get => GetData( ).Item;
            set
            {
                var data = GetData( );
                if( data.Item != value )
                {
                    OnPropertyChanging( );
                    OnPropertyChanging( "Item", false );
                    data = GetData( );
                    data.Item = value;
                    OnPropertyChanged( );
                    OnPropertyChanged( "Item" );
                }
            }
        }

        public TrackableItemEntity Item
        {
            get
            {
                if(_itemReference != null)
                {
                    var result = (TrackableItemEntity?)_itemReference.Target;
                    if( result != null )
                    {
                        return result;
                    }
                }
                var data = GetData( );
                var context = CheckedContext;
                var entity = context.GetTrackableItemById( data.Item );
                if( entity != null )
                {
                    _itemReference = new WeakReference( entity );
                }
                else
                {
                    var message = $"Cannot find the TrackableItemEntity object identified by {data.Item}";
                    throw new Exception( message );
                }
                return entity;
            }
            set
            {
                ItemId = value != null? value.Id : Guid.Empty;
            }
        }

        public Guid TrackId
        {
            get => GetData( ).Track;
            set
            {
                var data = GetData( );
                if( data.Track != value )
                {
                    OnPropertyChanging( );
                    OnPropertyChanging( "Track", false );
                    data = GetData( );
                    data.Track = value;
                    OnPropertyChanged( );
                    OnPropertyChanged( "Track" );
                }
            }
        }

        public TrackBaseEntity Track
        {
            get
            {
                if(_trackReference != null)
                {
                    var result = (TrackBaseEntity?)_trackReference.Target;
                    if( result != null )
                    {
                        return result;
                    }
                }
                var data = GetData( );
                var context = CheckedContext;
                var entity = context.GetTrackBaseById( data.Track );
                if( entity != null )
                {
                    _trackReference = new WeakReference( entity );
                }
                else
                {
                    var message = $"Cannot find the TrackBaseEntity object identified by {data.Track}";
                    throw new Exception( message );
                }
                return entity;
            }
            set
            {
                TrackId = value != null? value.Id : Guid.Empty;
            }
        }

        public DateTime Start
        {
            get => GetData( ).Start;
            set
            {
                var data = GetData( );
                if( data.Start != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Start = value;
                    OnPropertyChanged( );
                }
            }
        }

        public DateTime? End
        {
            get => GetData( ).End;
            set
            {
                var data = GetData( );
                if( data.End != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.End = value;
                    OnPropertyChanged( );
                }
            }
        }

    }

    public abstract class TrackBaseEntity : BaseEntity<Kind>
    {
        WeakReference? _trackerReference = null;
        protected TrackBaseEntity( [DisallowNull] EntityContext entityContext, [DisallowNull] TrackBaseObject data )
            : base( entityContext, data )
        {
        }

        public EntityContext? Context => (EntityContext?)_Context;

        protected EntityContext CheckedContext
        {
            get
            {
                var context = Context;
                if ( context is null )
                {
                    throw new InvalidOperationException( "Context is null" );
                }
                return context;
            }
        }

        private TrackBaseObject GetData( ) 
        {
            return (TrackBaseObject)base._GetData( );
        }

        public Guid TrackerId
        {
            get => GetData( ).Tracker;
            set
            {
                var data = GetData( );
                if( data.Tracker != value )
                {
                    OnPropertyChanging( );
                    OnPropertyChanging( "Tracker", false );
                    data = GetData( );
                    data.Tracker = value;
                    OnPropertyChanged( );
                    OnPropertyChanged( "Tracker" );
                }
            }
        }

        public TrackerDeviceEntity Tracker
        {
            get
            {
                if(_trackerReference != null)
                {
                    var result = (TrackerDeviceEntity?)_trackerReference.Target;
                    if( result != null )
                    {
                        return result;
                    }
                }
                var data = GetData( );
                var context = CheckedContext;
                var entity = context.GetTrackerDeviceById( data.Tracker );
                if( entity != null )
                {
                    _trackerReference = new WeakReference( entity );
                }
                else
                {
                    var message = $"Cannot find the TrackerDeviceEntity object identified by {data.Tracker}";
                    throw new Exception( message );
                }
                return entity;
            }
            set
            {
                TrackerId = value != null? value.Id : Guid.Empty;
            }
        }

        public long TrackNumber
        {
            get => GetData( ).TrackNumber;
            set
            {
                var data = GetData( );
                if( data.TrackNumber != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.TrackNumber = value;
                    OnPropertyChanged( );
                }
            }
        }

        public DateTime Timestamp
        {
            get => GetData( ).Timestamp;
            set
            {
                var data = GetData( );
                if( data.Timestamp != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Timestamp = value;
                    OnPropertyChanged( );
                }
            }
        }

    }

    public class TrackEntity : TrackBaseEntity
    {
        public TrackEntity( [DisallowNull] EntityContext entityContext, [DisallowNull] TrackObject data )
            : base( entityContext, data )
        {
        }

        private TrackObject GetData( ) 
        {
            return (TrackObject)base._GetData( );
        }

    }

    public class Track3DEntity : TrackBaseEntity
    {
        public Track3DEntity( [DisallowNull] EntityContext entityContext, [DisallowNull] Track3DObject data )
            : base( entityContext, data )
        {
        }

        private Track3DObject GetData( ) 
        {
            return (Track3DObject)base._GetData( );
        }

    }

    public class TrackerFilterParametersEntity : BaseEntity<Kind>
    {
        WeakReference? _trackerReference = null;
        public TrackerFilterParametersEntity( [DisallowNull] EntityContext entityContext, [DisallowNull] TrackerFilterParametersObject data )
            : base( entityContext, data )
        {
        }

        public EntityContext? Context => (EntityContext?)_Context;

        protected EntityContext CheckedContext
        {
            get
            {
                var context = Context;
                if ( context is null )
                {
                    throw new InvalidOperationException( "Context is null" );
                }
                return context;
            }
        }

        private TrackerFilterParametersObject GetData( ) 
        {
            return (TrackerFilterParametersObject)base._GetData( );
        }

        public Guid TrackerId
        {
            get => GetData( ).Tracker;
            set
            {
                var data = GetData( );
                if( data.Tracker != value )
                {
                    OnPropertyChanging( );
                    OnPropertyChanging( "Tracker", false );
                    data = GetData( );
                    data.Tracker = value;
                    OnPropertyChanged( );
                    OnPropertyChanged( "Tracker" );
                }
            }
        }

        public TrackerDeviceEntity Tracker
        {
            get
            {
                if(_trackerReference != null)
                {
                    var result = (TrackerDeviceEntity?)_trackerReference.Target;
                    if( result != null )
                    {
                        return result;
                    }
                }
                var data = GetData( );
                var context = CheckedContext;
                var entity = context.GetTrackerDeviceById( data.Tracker );
                if( entity != null )
                {
                    _trackerReference = new WeakReference( entity );
                }
                else
                {
                    var message = $"Cannot find the TrackerDeviceEntity object identified by {data.Tracker}";
                    throw new Exception( message );
                }
                return entity;
            }
            set
            {
                TrackerId = value != null? value.Id : Guid.Empty;
            }
        }

        public string Name
        {
            get => GetData( ).Name;
            set
            {
                var data = GetData( );
                if( data.Name != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Name = value;
                    OnPropertyChanged( );
                }
            }
        }

    }

    public class TrackerFilterParametersConfigurationEntity : BaseEntity<Kind>
    {
        WeakReference? _parametersReference = null;
        public TrackerFilterParametersConfigurationEntity( [DisallowNull] EntityContext entityContext, [DisallowNull] TrackerFilterParametersConfigurationObject data )
            : base( entityContext, data )
        {
        }

        public EntityContext? Context => (EntityContext?)_Context;

        protected EntityContext CheckedContext
        {
            get
            {
                var context = Context;
                if ( context is null )
                {
                    throw new InvalidOperationException( "Context is null" );
                }
                return context;
            }
        }

        private TrackerFilterParametersConfigurationObject GetData( ) 
        {
            return (TrackerFilterParametersConfigurationObject)base._GetData( );
        }

        public Guid ParametersId
        {
            get => GetData( ).Parameters;
            set
            {
                var data = GetData( );
                if( data.Parameters != value )
                {
                    OnPropertyChanging( );
                    OnPropertyChanging( "Parameters", false );
                    data = GetData( );
                    data.Parameters = value;
                    OnPropertyChanged( );
                    OnPropertyChanged( "Parameters" );
                }
            }
        }

        public TrackerFilterParametersEntity Parameters
        {
            get
            {
                if(_parametersReference != null)
                {
                    var result = (TrackerFilterParametersEntity?)_parametersReference.Target;
                    if( result != null )
                    {
                        return result;
                    }
                }
                var data = GetData( );
                var context = CheckedContext;
                var entity = context.GetTrackerFilterParametersById( data.Parameters );
                if( entity != null )
                {
                    _parametersReference = new WeakReference( entity );
                }
                else
                {
                    var message = $"Cannot find the TrackerFilterParametersEntity object identified by {data.Parameters}";
                    throw new Exception( message );
                }
                return entity;
            }
            set
            {
                ParametersId = value != null? value.Id : Guid.Empty;
            }
        }

        public DateTime Timestamp
        {
            get => GetData( ).Timestamp;
            set
            {
                var data = GetData( );
                if( data.Timestamp != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Timestamp = value;
                    OnPropertyChanged( );
                }
            }
        }

        public bool UseNaivePredictor
        {
            get => GetData( ).UseNaivePredictor;
            set
            {
                var data = GetData( );
                if( data.UseNaivePredictor != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.UseNaivePredictor = value;
                    OnPropertyChanged( );
                }
            }
        }

        public int NumberOfPoints
        {
            get => GetData( ).NumberOfPoints;
            set
            {
                var data = GetData( );
                if( data.NumberOfPoints != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.NumberOfPoints = value;
                    OnPropertyChanged( );
                }
            }
        }

        public int WindowSize
        {
            get => GetData( ).WindowSize;
            set
            {
                var data = GetData( );
                if( data.WindowSize != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.WindowSize = value;
                    OnPropertyChanged( );
                }
            }
        }

        public int StabilizeCount
        {
            get => GetData( ).StabilizeCount;
            set
            {
                var data = GetData( );
                if( data.StabilizeCount != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.StabilizeCount = value;
                    OnPropertyChanged( );
                }
            }
        }

        public int MaxBadPoints
        {
            get => GetData( ).MaxBadPoints;
            set
            {
                var data = GetData( );
                if( data.MaxBadPoints != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.MaxBadPoints = value;
                    OnPropertyChanged( );
                }
            }
        }

        public Types.TrackerFilterModelType ModelType
        {
            get => GetData( ).ModelType;
            set
            {
                var data = GetData( );
                if( data.ModelType != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.ModelType = value;
                    OnPropertyChanged( );
                }
            }
        }

        public double SigmaR
        {
            get => GetData( ).SigmaR;
            set
            {
                var data = GetData( );
                if( data.SigmaR != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.SigmaR = value;
                    OnPropertyChanged( );
                }
            }
        }

        public double SigmaAcc
        {
            get => GetData( ).SigmaAcc;
            set
            {
                var data = GetData( );
                if( data.SigmaAcc != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.SigmaAcc = value;
                    OnPropertyChanged( );
                }
            }
        }

        public double TauVel
        {
            get => GetData( ).TauVel;
            set
            {
                var data = GetData( );
                if( data.TauVel != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.TauVel = value;
                    OnPropertyChanged( );
                }
            }
        }

        public double TauAcc
        {
            get => GetData( ).TauAcc;
            set
            {
                var data = GetData( );
                if( data.TauAcc != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.TauAcc = value;
                    OnPropertyChanged( );
                }
            }
        }

        public double DeltaRMin
        {
            get => GetData( ).DeltaRMin;
            set
            {
                var data = GetData( );
                if( data.DeltaRMin != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.DeltaRMin = value;
                    OnPropertyChanged( );
                }
            }
        }

        public double DeltaVMax
        {
            get => GetData( ).DeltaVMax;
            set
            {
                var data = GetData( );
                if( data.DeltaVMax != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.DeltaVMax = value;
                    OnPropertyChanged( );
                }
            }
        }

        public double DeltaAMax
        {
            get => GetData( ).DeltaAMax;
            set
            {
                var data = GetData( );
                if( data.DeltaAMax != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.DeltaAMax = value;
                    OnPropertyChanged( );
                }
            }
        }

    }

    public class TrackInfoEntity : BaseEntity<Kind>
    {
        public TrackInfoEntity( [DisallowNull] EntityContext entityContext, [DisallowNull] TrackInfoObject data )
            : base( entityContext, data )
        {
        }

        public EntityContext? Context => (EntityContext?)_Context;

        protected EntityContext CheckedContext
        {
            get
            {
                var context = Context;
                if ( context is null )
                {
                    throw new InvalidOperationException( "Context is null" );
                }
                return context;
            }
        }

        private TrackInfoObject GetData( ) 
        {
            return (TrackInfoObject)base._GetData( );
        }

        public DateTime? FirstTimestamp
        {
            get => GetData( ).FirstTimestamp;
            set
            {
                var data = GetData( );
                if( data.FirstTimestamp != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.FirstTimestamp = value;
                    OnPropertyChanged( );
                }
            }
        }

        public DateTime? LastTimestamp
        {
            get => GetData( ).LastTimestamp;
            set
            {
                var data = GetData( );
                if( data.LastTimestamp != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.LastTimestamp = value;
                    OnPropertyChanged( );
                }
            }
        }

        public long Count
        {
            get => GetData( ).Count;
            set
            {
                var data = GetData( );
                if( data.Count != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Count = value;
                    OnPropertyChanged( );
                }
            }
        }

        public double? NorthWestLatitude
        {
            get => GetData( ).NorthWestLatitude;
            set
            {
                var data = GetData( );
                if( data.NorthWestLatitude != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.NorthWestLatitude = value;
                    OnPropertyChanged( );
                }
            }
        }

        public double? NorthWestLongitude
        {
            get => GetData( ).NorthWestLongitude;
            set
            {
                var data = GetData( );
                if( data.NorthWestLongitude != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.NorthWestLongitude = value;
                    OnPropertyChanged( );
                }
            }
        }

        public double? SouthEastLatitude
        {
            get => GetData( ).SouthEastLatitude;
            set
            {
                var data = GetData( );
                if( data.SouthEastLatitude != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.SouthEastLatitude = value;
                    OnPropertyChanged( );
                }
            }
        }

        public double? SouthEastLongitude
        {
            get => GetData( ).SouthEastLongitude;
            set
            {
                var data = GetData( );
                if( data.SouthEastLongitude != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.SouthEastLongitude = value;
                    OnPropertyChanged( );
                }
            }
        }

    }

    public class TrackingServiceOptionsEntity : BaseEntity<Kind>
    {
        public TrackingServiceOptionsEntity( [DisallowNull] EntityContext entityContext, [DisallowNull] TrackingServiceOptionsObject data )
            : base( entityContext, data )
        {
        }

        public EntityContext? Context => (EntityContext?)_Context;

        protected EntityContext CheckedContext
        {
            get
            {
                var context = Context;
                if ( context is null )
                {
                    throw new InvalidOperationException( "Context is null" );
                }
                return context;
            }
        }

        private TrackingServiceOptionsObject GetData( ) 
        {
            return (TrackingServiceOptionsObject)base._GetData( );
        }

        public DateTime Timestamp
        {
            get => GetData( ).Timestamp;
            set
            {
                var data = GetData( );
                if( data.Timestamp != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Timestamp = value;
                    OnPropertyChanged( );
                }
            }
        }

        public TimeSpan TimerInterval
        {
            get => GetData( ).TimerInterval;
            set
            {
                var data = GetData( );
                if( data.TimerInterval != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.TimerInterval = value;
                    OnPropertyChanged( );
                }
            }
        }

        public TimeSpan MaxAgeOfCurrentTrackValue
        {
            get => GetData( ).MaxAgeOfCurrentTrackValue;
            set
            {
                var data = GetData( );
                if( data.MaxAgeOfCurrentTrackValue != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.MaxAgeOfCurrentTrackValue = value;
                    OnPropertyChanged( );
                }
            }
        }

        public double FalseThreshold
        {
            get => GetData( ).FalseThreshold;
            set
            {
                var data = GetData( );
                if( data.FalseThreshold != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.FalseThreshold = value;
                    OnPropertyChanged( );
                }
            }
        }

        public double DistanceThreshold
        {
            get => GetData( ).DistanceThreshold;
            set
            {
                var data = GetData( );
                if( data.DistanceThreshold != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.DistanceThreshold = value;
                    OnPropertyChanged( );
                }
            }
        }

        public double DistanceUnmergeThreshold
        {
            get => GetData( ).DistanceUnmergeThreshold;
            set
            {
                var data = GetData( );
                if( data.DistanceUnmergeThreshold != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.DistanceUnmergeThreshold = value;
                    OnPropertyChanged( );
                }
            }
        }

        public long UnmergeLatency
        {
            get => GetData( ).UnmergeLatency;
            set
            {
                var data = GetData( );
                if( data.UnmergeLatency != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.UnmergeLatency = value;
                    OnPropertyChanged( );
                }
            }
        }

        public bool KalmanFiltering
        {
            get => GetData( ).KalmanFiltering;
            set
            {
                var data = GetData( );
                if( data.KalmanFiltering != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.KalmanFiltering = value;
                    OnPropertyChanged( );
                }
            }
        }

        public double MaxCourseDeviation
        {
            get => GetData( ).MaxCourseDeviation;
            set
            {
                var data = GetData( );
                if( data.MaxCourseDeviation != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.MaxCourseDeviation = value;
                    OnPropertyChanged( );
                }
            }
        }

        public double MaxSpeedDeviation
        {
            get => GetData( ).MaxSpeedDeviation;
            set
            {
                var data = GetData( );
                if( data.MaxSpeedDeviation != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.MaxSpeedDeviation = value;
                    OnPropertyChanged( );
                }
            }
        }

        public double MinimumSpeedThreshold
        {
            get => GetData( ).MinimumSpeedThreshold;
            set
            {
                var data = GetData( );
                if( data.MinimumSpeedThreshold != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.MinimumSpeedThreshold = value;
                    OnPropertyChanged( );
                }
            }
        }

    }

    public class TrackLinkEntity : BaseEntity<Kind>
    {
        WeakReference? _primaryReference = null;
        WeakReference? _secondaryReference = null;
        public TrackLinkEntity( [DisallowNull] EntityContext entityContext, [DisallowNull] TrackLinkObject data )
            : base( entityContext, data )
        {
        }

        public EntityContext? Context => (EntityContext?)_Context;

        protected EntityContext CheckedContext
        {
            get
            {
                var context = Context;
                if ( context is null )
                {
                    throw new InvalidOperationException( "Context is null" );
                }
                return context;
            }
        }

        private TrackLinkObject GetData( ) 
        {
            return (TrackLinkObject)base._GetData( );
        }

        public Guid PrimaryId
        {
            get => GetData( ).Primary;
            set
            {
                var data = GetData( );
                if( data.Primary != value )
                {
                    OnPropertyChanging( );
                    OnPropertyChanging( "Primary", false );
                    data = GetData( );
                    data.Primary = value;
                    OnPropertyChanged( );
                    OnPropertyChanged( "Primary" );
                }
            }
        }

        public TrackBaseEntity Primary
        {
            get
            {
                if(_primaryReference != null)
                {
                    var result = (TrackBaseEntity?)_primaryReference.Target;
                    if( result != null )
                    {
                        return result;
                    }
                }
                var data = GetData( );
                var context = CheckedContext;
                var entity = context.GetTrackBaseById( data.Primary );
                if( entity != null )
                {
                    _primaryReference = new WeakReference( entity );
                }
                else
                {
                    var message = $"Cannot find the TrackBaseEntity object identified by {data.Primary}";
                    throw new Exception( message );
                }
                return entity;
            }
            set
            {
                PrimaryId = value != null? value.Id : Guid.Empty;
            }
        }

        public Guid SecondaryId
        {
            get => GetData( ).Secondary;
            set
            {
                var data = GetData( );
                if( data.Secondary != value )
                {
                    OnPropertyChanging( );
                    OnPropertyChanging( "Secondary", false );
                    data = GetData( );
                    data.Secondary = value;
                    OnPropertyChanged( );
                    OnPropertyChanged( "Secondary" );
                }
            }
        }

        public TrackBaseEntity Secondary
        {
            get
            {
                if(_secondaryReference != null)
                {
                    var result = (TrackBaseEntity?)_secondaryReference.Target;
                    if( result != null )
                    {
                        return result;
                    }
                }
                var data = GetData( );
                var context = CheckedContext;
                var entity = context.GetTrackBaseById( data.Secondary );
                if( entity != null )
                {
                    _secondaryReference = new WeakReference( entity );
                }
                else
                {
                    var message = $"Cannot find the TrackBaseEntity object identified by {data.Secondary}";
                    throw new Exception( message );
                }
                return entity;
            }
            set
            {
                SecondaryId = value != null? value.Id : Guid.Empty;
            }
        }

        public DateTime Start
        {
            get => GetData( ).Start;
            set
            {
                var data = GetData( );
                if( data.Start != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Start = value;
                    OnPropertyChanged( );
                }
            }
        }

        public DateTime? End
        {
            get => GetData( ).End;
            set
            {
                var data = GetData( );
                if( data.End != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.End = value;
                    OnPropertyChanged( );
                }
            }
        }

    }

    public class TrackValueEntity : BaseEntity<Kind>
    {
        WeakReference? _trackReference = null;
        public TrackValueEntity( [DisallowNull] EntityContext entityContext, [DisallowNull] TrackValueObject data )
            : base( entityContext, data )
        {
        }

        public EntityContext? Context => (EntityContext?)_Context;

        protected EntityContext CheckedContext
        {
            get
            {
                var context = Context;
                if ( context is null )
                {
                    throw new InvalidOperationException( "Context is null" );
                }
                return context;
            }
        }

        private TrackValueObject GetData( ) 
        {
            return (TrackValueObject)base._GetData( );
        }

        public Guid TrackId
        {
            get => GetData( ).Track;
            set
            {
                var data = GetData( );
                if( data.Track != value )
                {
                    OnPropertyChanging( );
                    OnPropertyChanging( "Track", false );
                    data = GetData( );
                    data.Track = value;
                    OnPropertyChanged( );
                    OnPropertyChanged( "Track" );
                }
            }
        }

        public TrackEntity Track
        {
            get
            {
                if(_trackReference != null)
                {
                    var result = (TrackEntity?)_trackReference.Target;
                    if( result != null )
                    {
                        return result;
                    }
                }
                var data = GetData( );
                var context = CheckedContext;
                var entity = context.GetTrackById( data.Track );
                if( entity != null )
                {
                    _trackReference = new WeakReference( entity );
                }
                else
                {
                    var message = $"Cannot find the TrackEntity object identified by {data.Track}";
                    throw new Exception( message );
                }
                return entity;
            }
            set
            {
                TrackId = value != null? value.Id : Guid.Empty;
            }
        }

        public DateTime Timestamp
        {
            get => GetData( ).Timestamp;
            set
            {
                var data = GetData( );
                if( data.Timestamp != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Timestamp = value;
                    OnPropertyChanged( );
                }
            }
        }

        public Types.TrackFlags Flags
        {
            get => GetData( ).Flags;
            set
            {
                var data = GetData( );
                if( data.Flags != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Flags = value;
                    OnPropertyChanged( );
                }
            }
        }

        public Types.TrackStatus Status
        {
            get => GetData( ).Status;
            set
            {
                var data = GetData( );
                if( data.Status != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Status = value;
                    OnPropertyChanged( );
                }
            }
        }

        public double Latitude
        {
            get => GetData( ).Latitude;
            set
            {
                var data = GetData( );
                if( data.Latitude != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Latitude = value;
                    OnPropertyChanged( );
                }
            }
        }

        public double Longitude
        {
            get => GetData( ).Longitude;
            set
            {
                var data = GetData( );
                if( data.Longitude != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Longitude = value;
                    OnPropertyChanged( );
                }
            }
        }

        public double Speed
        {
            get => GetData( ).Speed;
            set
            {
                var data = GetData( );
                if( data.Speed != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Speed = value;
                    OnPropertyChanged( );
                }
            }
        }

        public double Course
        {
            get => GetData( ).Course;
            set
            {
                var data = GetData( );
                if( data.Course != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Course = value;
                    OnPropertyChanged( );
                }
            }
        }

        public double Heading
        {
            get => GetData( ).Heading;
            set
            {
                var data = GetData( );
                if( data.Heading != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Heading = value;
                    OnPropertyChanged( );
                }
            }
        }

    }

    public class TrackValue3DEntity : BaseEntity<Kind>
    {
        WeakReference? _trackReference = null;
        public TrackValue3DEntity( [DisallowNull] EntityContext entityContext, [DisallowNull] TrackValue3DObject data )
            : base( entityContext, data )
        {
        }

        public EntityContext? Context => (EntityContext?)_Context;

        protected EntityContext CheckedContext
        {
            get
            {
                var context = Context;
                if ( context is null )
                {
                    throw new InvalidOperationException( "Context is null" );
                }
                return context;
            }
        }

        private TrackValue3DObject GetData( ) 
        {
            return (TrackValue3DObject)base._GetData( );
        }

        public Guid TrackId
        {
            get => GetData( ).Track;
            set
            {
                var data = GetData( );
                if( data.Track != value )
                {
                    OnPropertyChanging( );
                    OnPropertyChanging( "Track", false );
                    data = GetData( );
                    data.Track = value;
                    OnPropertyChanged( );
                    OnPropertyChanged( "Track" );
                }
            }
        }

        public Track3DEntity Track
        {
            get
            {
                if(_trackReference != null)
                {
                    var result = (Track3DEntity?)_trackReference.Target;
                    if( result != null )
                    {
                        return result;
                    }
                }
                var data = GetData( );
                var context = CheckedContext;
                var entity = context.GetTrack3DById( data.Track );
                if( entity != null )
                {
                    _trackReference = new WeakReference( entity );
                }
                else
                {
                    var message = $"Cannot find the Track3DEntity object identified by {data.Track}";
                    throw new Exception( message );
                }
                return entity;
            }
            set
            {
                TrackId = value != null? value.Id : Guid.Empty;
            }
        }

        public DateTime Timestamp
        {
            get => GetData( ).Timestamp;
            set
            {
                var data = GetData( );
                if( data.Timestamp != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Timestamp = value;
                    OnPropertyChanged( );
                }
            }
        }

        public Types.TrackFlags3D Flags
        {
            get => GetData( ).Flags;
            set
            {
                var data = GetData( );
                if( data.Flags != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Flags = value;
                    OnPropertyChanged( );
                }
            }
        }

        public uint Status
        {
            get => GetData( ).Status;
            set
            {
                var data = GetData( );
                if( data.Status != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Status = value;
                    OnPropertyChanged( );
                }
            }
        }

        public double Latitude
        {
            get => GetData( ).Latitude;
            set
            {
                var data = GetData( );
                if( data.Latitude != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Latitude = value;
                    OnPropertyChanged( );
                }
            }
        }

        public double Longitude
        {
            get => GetData( ).Longitude;
            set
            {
                var data = GetData( );
                if( data.Longitude != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Longitude = value;
                    OnPropertyChanged( );
                }
            }
        }

        public double Altitude
        {
            get => GetData( ).Altitude;
            set
            {
                var data = GetData( );
                if( data.Altitude != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Altitude = value;
                    OnPropertyChanged( );
                }
            }
        }

        public double Speed
        {
            get => GetData( ).Speed;
            set
            {
                var data = GetData( );
                if( data.Speed != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Speed = value;
                    OnPropertyChanged( );
                }
            }
        }

        public double Course
        {
            get => GetData( ).Course;
            set
            {
                var data = GetData( );
                if( data.Course != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Course = value;
                    OnPropertyChanged( );
                }
            }
        }

        public double RateOfClimb
        {
            get => GetData( ).RateOfClimb;
            set
            {
                var data = GetData( );
                if( data.RateOfClimb != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.RateOfClimb = value;
                    OnPropertyChanged( );
                }
            }
        }

    }

    public class UInt16TimeseriesValueEntity : BaseEntity<Kind>
    {
        WeakReference? _timeseriesReference = null;
        public UInt16TimeseriesValueEntity( [DisallowNull] EntityContext entityContext, [DisallowNull] UInt16TimeseriesValueObject data )
            : base( entityContext, data )
        {
        }

        public EntityContext? Context => (EntityContext?)_Context;

        protected EntityContext CheckedContext
        {
            get
            {
                var context = Context;
                if ( context is null )
                {
                    throw new InvalidOperationException( "Context is null" );
                }
                return context;
            }
        }

        private UInt16TimeseriesValueObject GetData( ) 
        {
            return (UInt16TimeseriesValueObject)base._GetData( );
        }

        public Guid TimeseriesId
        {
            get => GetData( ).Timeseries;
            set
            {
                var data = GetData( );
                if( data.Timeseries != value )
                {
                    OnPropertyChanging( );
                    OnPropertyChanging( "Timeseries", false );
                    data = GetData( );
                    data.Timeseries = value;
                    OnPropertyChanged( );
                    OnPropertyChanged( "Timeseries" );
                }
            }
        }

        public UInt16TimeseriesEntity Timeseries
        {
            get
            {
                if(_timeseriesReference != null)
                {
                    var result = (UInt16TimeseriesEntity?)_timeseriesReference.Target;
                    if( result != null )
                    {
                        return result;
                    }
                }
                var data = GetData( );
                var context = CheckedContext;
                var entity = context.GetUInt16TimeseriesById( data.Timeseries );
                if( entity != null )
                {
                    _timeseriesReference = new WeakReference( entity );
                }
                else
                {
                    var message = $"Cannot find the UInt16TimeseriesEntity object identified by {data.Timeseries}";
                    throw new Exception( message );
                }
                return entity;
            }
            set
            {
                TimeseriesId = value != null? value.Id : Guid.Empty;
            }
        }

        public DateTime Timestamp
        {
            get => GetData( ).Timestamp;
            set
            {
                var data = GetData( );
                if( data.Timestamp != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Timestamp = value;
                    OnPropertyChanged( );
                }
            }
        }

        public ushort? Value
        {
            get => GetData( ).Value;
            set
            {
                var data = GetData( );
                if( data.Value != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Value = value;
                    OnPropertyChanged( );
                }
            }
        }

    }

    public class UInt32TimeseriesValueEntity : BaseEntity<Kind>
    {
        WeakReference? _timeseriesReference = null;
        public UInt32TimeseriesValueEntity( [DisallowNull] EntityContext entityContext, [DisallowNull] UInt32TimeseriesValueObject data )
            : base( entityContext, data )
        {
        }

        public EntityContext? Context => (EntityContext?)_Context;

        protected EntityContext CheckedContext
        {
            get
            {
                var context = Context;
                if ( context is null )
                {
                    throw new InvalidOperationException( "Context is null" );
                }
                return context;
            }
        }

        private UInt32TimeseriesValueObject GetData( ) 
        {
            return (UInt32TimeseriesValueObject)base._GetData( );
        }

        public Guid TimeseriesId
        {
            get => GetData( ).Timeseries;
            set
            {
                var data = GetData( );
                if( data.Timeseries != value )
                {
                    OnPropertyChanging( );
                    OnPropertyChanging( "Timeseries", false );
                    data = GetData( );
                    data.Timeseries = value;
                    OnPropertyChanged( );
                    OnPropertyChanged( "Timeseries" );
                }
            }
        }

        public UInt32TimeseriesEntity Timeseries
        {
            get
            {
                if(_timeseriesReference != null)
                {
                    var result = (UInt32TimeseriesEntity?)_timeseriesReference.Target;
                    if( result != null )
                    {
                        return result;
                    }
                }
                var data = GetData( );
                var context = CheckedContext;
                var entity = context.GetUInt32TimeseriesById( data.Timeseries );
                if( entity != null )
                {
                    _timeseriesReference = new WeakReference( entity );
                }
                else
                {
                    var message = $"Cannot find the UInt32TimeseriesEntity object identified by {data.Timeseries}";
                    throw new Exception( message );
                }
                return entity;
            }
            set
            {
                TimeseriesId = value != null? value.Id : Guid.Empty;
            }
        }

        public DateTime Timestamp
        {
            get => GetData( ).Timestamp;
            set
            {
                var data = GetData( );
                if( data.Timestamp != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Timestamp = value;
                    OnPropertyChanged( );
                }
            }
        }

        public uint? Value
        {
            get => GetData( ).Value;
            set
            {
                var data = GetData( );
                if( data.Value != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Value = value;
                    OnPropertyChanged( );
                }
            }
        }

    }

    public class UInt64TimeseriesValueEntity : BaseEntity<Kind>
    {
        WeakReference? _timeseriesReference = null;
        public UInt64TimeseriesValueEntity( [DisallowNull] EntityContext entityContext, [DisallowNull] UInt64TimeseriesValueObject data )
            : base( entityContext, data )
        {
        }

        public EntityContext? Context => (EntityContext?)_Context;

        protected EntityContext CheckedContext
        {
            get
            {
                var context = Context;
                if ( context is null )
                {
                    throw new InvalidOperationException( "Context is null" );
                }
                return context;
            }
        }

        private UInt64TimeseriesValueObject GetData( ) 
        {
            return (UInt64TimeseriesValueObject)base._GetData( );
        }

        public Guid TimeseriesId
        {
            get => GetData( ).Timeseries;
            set
            {
                var data = GetData( );
                if( data.Timeseries != value )
                {
                    OnPropertyChanging( );
                    OnPropertyChanging( "Timeseries", false );
                    data = GetData( );
                    data.Timeseries = value;
                    OnPropertyChanged( );
                    OnPropertyChanged( "Timeseries" );
                }
            }
        }

        public UInt64TimeseriesEntity Timeseries
        {
            get
            {
                if(_timeseriesReference != null)
                {
                    var result = (UInt64TimeseriesEntity?)_timeseriesReference.Target;
                    if( result != null )
                    {
                        return result;
                    }
                }
                var data = GetData( );
                var context = CheckedContext;
                var entity = context.GetUInt64TimeseriesById( data.Timeseries );
                if( entity != null )
                {
                    _timeseriesReference = new WeakReference( entity );
                }
                else
                {
                    var message = $"Cannot find the UInt64TimeseriesEntity object identified by {data.Timeseries}";
                    throw new Exception( message );
                }
                return entity;
            }
            set
            {
                TimeseriesId = value != null? value.Id : Guid.Empty;
            }
        }

        public DateTime Timestamp
        {
            get => GetData( ).Timestamp;
            set
            {
                var data = GetData( );
                if( data.Timestamp != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Timestamp = value;
                    OnPropertyChanged( );
                }
            }
        }

        public long? Value
        {
            get => GetData( ).Value;
            set
            {
                var data = GetData( );
                if( data.Value != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Value = value;
                    OnPropertyChanged( );
                }
            }
        }

    }

    public class VehicleTypeEntity : BaseEntity<Kind>
    {
        public VehicleTypeEntity( [DisallowNull] EntityContext entityContext, [DisallowNull] VehicleTypeObject data )
            : base( entityContext, data )
        {
        }

        public EntityContext? Context => (EntityContext?)_Context;

        protected EntityContext CheckedContext
        {
            get
            {
                var context = Context;
                if ( context is null )
                {
                    throw new InvalidOperationException( "Context is null" );
                }
                return context;
            }
        }

        private VehicleTypeObject GetData( ) 
        {
            return (VehicleTypeObject)base._GetData( );
        }

        public string Name
        {
            get => GetData( ).Name;
            set
            {
                var data = GetData( );
                if( data.Name != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Name = value;
                    OnPropertyChanged( );
                }
            }
        }

    }

    public class VesselTypeEntity : BaseEntity<Kind>
    {
        public VesselTypeEntity( [DisallowNull] EntityContext entityContext, [DisallowNull] VesselTypeObject data )
            : base( entityContext, data )
        {
        }

        public EntityContext? Context => (EntityContext?)_Context;

        protected EntityContext CheckedContext
        {
            get
            {
                var context = Context;
                if ( context is null )
                {
                    throw new InvalidOperationException( "Context is null" );
                }
                return context;
            }
        }

        private VesselTypeObject GetData( ) 
        {
            return (VesselTypeObject)base._GetData( );
        }

        public string Name
        {
            get => GetData( ).Name;
            set
            {
                var data = GetData( );
                if( data.Name != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Name = value;
                    OnPropertyChanged( );
                }
            }
        }

        public int Code
        {
            get => GetData( ).Code;
            set
            {
                var data = GetData( );
                if( data.Code != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Code = value;
                    OnPropertyChanged( );
                }
            }
        }

    }

    public class ViewEntity : BaseEntity<Kind>
    {
        WeakReference? _latitudeTimeseriesReference = null;
        WeakReference? _longitudeTimeseriesReference = null;
        WeakReference? _zoomLevelTimeseriesReference = null;
        public ViewEntity( [DisallowNull] EntityContext entityContext, [DisallowNull] ViewObject data )
            : base( entityContext, data )
        {
        }

        public EntityContext? Context => (EntityContext?)_Context;

        protected EntityContext CheckedContext
        {
            get
            {
                var context = Context;
                if ( context is null )
                {
                    throw new InvalidOperationException( "Context is null" );
                }
                return context;
            }
        }

        private ViewObject GetData( ) 
        {
            return (ViewObject)base._GetData( );
        }

        public string Name
        {
            get => GetData( ).Name;
            set
            {
                var data = GetData( );
                if( data.Name != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Name = value;
                    OnPropertyChanged( );
                }
            }
        }

        public Guid? LatitudeTimeseriesId
        {
            get => GetData( ).LatitudeTimeseries;
            set
            {
                var data = GetData( );
                if( data.LatitudeTimeseries != value )
                {
                    OnPropertyChanging( );
                    OnPropertyChanging( "LatitudeTimeseries", false );
                    data = GetData( );
                    data.LatitudeTimeseries = value;
                    OnPropertyChanged( );
                    OnPropertyChanged( "LatitudeTimeseries" );
                }
            }
        }

        public ViewLatitudeTimeseriesEntity? LatitudeTimeseries
        {
            get
            {
                if(_latitudeTimeseriesReference != null)
                {
                    var result = (ViewLatitudeTimeseriesEntity?)_latitudeTimeseriesReference.Target;
                    if( result != null )
                    {
                        return result;
                    }
                }
                var data = GetData( );
                var context = CheckedContext;
                if( data.LatitudeTimeseries is Guid latitudeTimeseriesId )
                {
                    var entity = context.GetViewLatitudeTimeseriesById( latitudeTimeseriesId );
                    if( entity != null )
                    {
                        _latitudeTimeseriesReference = new WeakReference( entity );
                    }
                    return entity;
                }
                return null;
            }
            set
            {
                LatitudeTimeseriesId = value != null? value.Id : null;
            }
        }

        public Guid? LongitudeTimeseriesId
        {
            get => GetData( ).LongitudeTimeseries;
            set
            {
                var data = GetData( );
                if( data.LongitudeTimeseries != value )
                {
                    OnPropertyChanging( );
                    OnPropertyChanging( "LongitudeTimeseries", false );
                    data = GetData( );
                    data.LongitudeTimeseries = value;
                    OnPropertyChanged( );
                    OnPropertyChanged( "LongitudeTimeseries" );
                }
            }
        }

        public ViewLongitudeTimeseriesEntity? LongitudeTimeseries
        {
            get
            {
                if(_longitudeTimeseriesReference != null)
                {
                    var result = (ViewLongitudeTimeseriesEntity?)_longitudeTimeseriesReference.Target;
                    if( result != null )
                    {
                        return result;
                    }
                }
                var data = GetData( );
                var context = CheckedContext;
                if( data.LongitudeTimeseries is Guid longitudeTimeseriesId )
                {
                    var entity = context.GetViewLongitudeTimeseriesById( longitudeTimeseriesId );
                    if( entity != null )
                    {
                        _longitudeTimeseriesReference = new WeakReference( entity );
                    }
                    return entity;
                }
                return null;
            }
            set
            {
                LongitudeTimeseriesId = value != null? value.Id : null;
            }
        }

        public Guid? ZoomLevelTimeseriesId
        {
            get => GetData( ).ZoomLevelTimeseries;
            set
            {
                var data = GetData( );
                if( data.ZoomLevelTimeseries != value )
                {
                    OnPropertyChanging( );
                    OnPropertyChanging( "ZoomLevelTimeseries", false );
                    data = GetData( );
                    data.ZoomLevelTimeseries = value;
                    OnPropertyChanged( );
                    OnPropertyChanged( "ZoomLevelTimeseries" );
                }
            }
        }

        public ViewZoomLevelTimeseriesEntity? ZoomLevelTimeseries
        {
            get
            {
                if(_zoomLevelTimeseriesReference != null)
                {
                    var result = (ViewZoomLevelTimeseriesEntity?)_zoomLevelTimeseriesReference.Target;
                    if( result != null )
                    {
                        return result;
                    }
                }
                var data = GetData( );
                var context = CheckedContext;
                if( data.ZoomLevelTimeseries is Guid zoomLevelTimeseriesId )
                {
                    var entity = context.GetViewZoomLevelTimeseriesById( zoomLevelTimeseriesId );
                    if( entity != null )
                    {
                        _zoomLevelTimeseriesReference = new WeakReference( entity );
                    }
                    return entity;
                }
                return null;
            }
            set
            {
                ZoomLevelTimeseriesId = value != null? value.Id : null;
            }
        }

    }

    public class ViewCameraLinkEntity : BaseEntity<Kind>
    {
        WeakReference? _viewReference = null;
        WeakReference? _cameraReference = null;
        public ViewCameraLinkEntity( [DisallowNull] EntityContext entityContext, [DisallowNull] ViewCameraLinkObject data )
            : base( entityContext, data )
        {
        }

        public EntityContext? Context => (EntityContext?)_Context;

        protected EntityContext CheckedContext
        {
            get
            {
                var context = Context;
                if ( context is null )
                {
                    throw new InvalidOperationException( "Context is null" );
                }
                return context;
            }
        }

        private ViewCameraLinkObject GetData( ) 
        {
            return (ViewCameraLinkObject)base._GetData( );
        }

        public Guid ViewId
        {
            get => GetData( ).View;
            set
            {
                var data = GetData( );
                if( data.View != value )
                {
                    OnPropertyChanging( );
                    OnPropertyChanging( "View", false );
                    data = GetData( );
                    data.View = value;
                    OnPropertyChanged( );
                    OnPropertyChanged( "View" );
                }
            }
        }

        public ViewEntity View
        {
            get
            {
                if(_viewReference != null)
                {
                    var result = (ViewEntity?)_viewReference.Target;
                    if( result != null )
                    {
                        return result;
                    }
                }
                var data = GetData( );
                var context = CheckedContext;
                var entity = context.GetViewById( data.View );
                if( entity != null )
                {
                    _viewReference = new WeakReference( entity );
                }
                else
                {
                    var message = $"Cannot find the ViewEntity object identified by {data.View}";
                    throw new Exception( message );
                }
                return entity;
            }
            set
            {
                ViewId = value != null? value.Id : Guid.Empty;
            }
        }

        public Guid CameraId
        {
            get => GetData( ).Camera;
            set
            {
                var data = GetData( );
                if( data.Camera != value )
                {
                    OnPropertyChanging( );
                    OnPropertyChanging( "Camera", false );
                    data = GetData( );
                    data.Camera = value;
                    OnPropertyChanged( );
                    OnPropertyChanged( "Camera" );
                }
            }
        }

        public CameraDeviceEntity Camera
        {
            get
            {
                if(_cameraReference != null)
                {
                    var result = (CameraDeviceEntity?)_cameraReference.Target;
                    if( result != null )
                    {
                        return result;
                    }
                }
                var data = GetData( );
                var context = CheckedContext;
                var entity = context.GetCameraDeviceById( data.Camera );
                if( entity != null )
                {
                    _cameraReference = new WeakReference( entity );
                }
                else
                {
                    var message = $"Cannot find the CameraDeviceEntity object identified by {data.Camera}";
                    throw new Exception( message );
                }
                return entity;
            }
            set
            {
                CameraId = value != null? value.Id : Guid.Empty;
            }
        }

        public DateTime Start
        {
            get => GetData( ).Start;
            set
            {
                var data = GetData( );
                if( data.Start != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Start = value;
                    OnPropertyChanged( );
                }
            }
        }

        public DateTime? End
        {
            get => GetData( ).End;
            set
            {
                var data = GetData( );
                if( data.End != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.End = value;
                    OnPropertyChanged( );
                }
            }
        }

    }

    public class ViewTrackerLinkEntity : BaseEntity<Kind>
    {
        WeakReference? _viewReference = null;
        WeakReference? _trackerReference = null;
        public ViewTrackerLinkEntity( [DisallowNull] EntityContext entityContext, [DisallowNull] ViewTrackerLinkObject data )
            : base( entityContext, data )
        {
        }

        public EntityContext? Context => (EntityContext?)_Context;

        protected EntityContext CheckedContext
        {
            get
            {
                var context = Context;
                if ( context is null )
                {
                    throw new InvalidOperationException( "Context is null" );
                }
                return context;
            }
        }

        private ViewTrackerLinkObject GetData( ) 
        {
            return (ViewTrackerLinkObject)base._GetData( );
        }

        public Guid ViewId
        {
            get => GetData( ).View;
            set
            {
                var data = GetData( );
                if( data.View != value )
                {
                    OnPropertyChanging( );
                    OnPropertyChanging( "View", false );
                    data = GetData( );
                    data.View = value;
                    OnPropertyChanged( );
                    OnPropertyChanged( "View" );
                }
            }
        }

        public ViewEntity View
        {
            get
            {
                if(_viewReference != null)
                {
                    var result = (ViewEntity?)_viewReference.Target;
                    if( result != null )
                    {
                        return result;
                    }
                }
                var data = GetData( );
                var context = CheckedContext;
                var entity = context.GetViewById( data.View );
                if( entity != null )
                {
                    _viewReference = new WeakReference( entity );
                }
                else
                {
                    var message = $"Cannot find the ViewEntity object identified by {data.View}";
                    throw new Exception( message );
                }
                return entity;
            }
            set
            {
                ViewId = value != null? value.Id : Guid.Empty;
            }
        }

        public Guid TrackerId
        {
            get => GetData( ).Tracker;
            set
            {
                var data = GetData( );
                if( data.Tracker != value )
                {
                    OnPropertyChanging( );
                    OnPropertyChanging( "Tracker", false );
                    data = GetData( );
                    data.Tracker = value;
                    OnPropertyChanged( );
                    OnPropertyChanged( "Tracker" );
                }
            }
        }

        public TrackerDeviceEntity Tracker
        {
            get
            {
                if(_trackerReference != null)
                {
                    var result = (TrackerDeviceEntity?)_trackerReference.Target;
                    if( result != null )
                    {
                        return result;
                    }
                }
                var data = GetData( );
                var context = CheckedContext;
                var entity = context.GetTrackerDeviceById( data.Tracker );
                if( entity != null )
                {
                    _trackerReference = new WeakReference( entity );
                }
                else
                {
                    var message = $"Cannot find the TrackerDeviceEntity object identified by {data.Tracker}";
                    throw new Exception( message );
                }
                return entity;
            }
            set
            {
                TrackerId = value != null? value.Id : Guid.Empty;
            }
        }

        public DateTime Start
        {
            get => GetData( ).Start;
            set
            {
                var data = GetData( );
                if( data.Start != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Start = value;
                    OnPropertyChanged( );
                }
            }
        }

        public DateTime? End
        {
            get => GetData( ).End;
            set
            {
                var data = GetData( );
                if( data.End != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.End = value;
                    OnPropertyChanged( );
                }
            }
        }

    }

    public class WeatherStationCommandEntity : BaseEntity<Kind>
    {
        WeakReference? _weatherStationReference = null;
        WeakReference? _replyReference = null;
        public WeatherStationCommandEntity( [DisallowNull] EntityContext entityContext, [DisallowNull] WeatherStationCommandObject data )
            : base( entityContext, data )
        {
        }

        public EntityContext? Context => (EntityContext?)_Context;

        protected EntityContext CheckedContext
        {
            get
            {
                var context = Context;
                if ( context is null )
                {
                    throw new InvalidOperationException( "Context is null" );
                }
                return context;
            }
        }

        private WeatherStationCommandObject GetData( ) 
        {
            return (WeatherStationCommandObject)base._GetData( );
        }

        public Guid WeatherStationId
        {
            get => GetData( ).WeatherStation;
            set
            {
                var data = GetData( );
                if( data.WeatherStation != value )
                {
                    OnPropertyChanging( );
                    OnPropertyChanging( "WeatherStation", false );
                    data = GetData( );
                    data.WeatherStation = value;
                    OnPropertyChanged( );
                    OnPropertyChanged( "WeatherStation" );
                }
            }
        }

        public WeatherStationDeviceEntity WeatherStation
        {
            get
            {
                if(_weatherStationReference != null)
                {
                    var result = (WeatherStationDeviceEntity?)_weatherStationReference.Target;
                    if( result != null )
                    {
                        return result;
                    }
                }
                var data = GetData( );
                var context = CheckedContext;
                var entity = context.GetWeatherStationDeviceById( data.WeatherStation );
                if( entity != null )
                {
                    _weatherStationReference = new WeakReference( entity );
                }
                else
                {
                    var message = $"Cannot find the WeatherStationDeviceEntity object identified by {data.WeatherStation}";
                    throw new Exception( message );
                }
                return entity;
            }
            set
            {
                WeatherStationId = value != null? value.Id : Guid.Empty;
            }
        }

        public DateTime Timestamp
        {
            get => GetData( ).Timestamp;
            set
            {
                var data = GetData( );
                if( data.Timestamp != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Timestamp = value;
                    OnPropertyChanged( );
                }
            }
        }

        public Types.DeviceCommandSourceType DeviceCommandSourceType
        {
            get => GetData( ).DeviceCommandSourceType;
            set
            {
                var data = GetData( );
                if( data.DeviceCommandSourceType != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.DeviceCommandSourceType = value;
                    OnPropertyChanged( );
                }
            }
        }

        public Guid DeviceCommandSourceId
        {
            get => GetData( ).DeviceCommandSourceId;
            set
            {
                var data = GetData( );
                if( data.DeviceCommandSourceId != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.DeviceCommandSourceId = value;
                    OnPropertyChanged( );
                }
            }
        }

        public Guid? ReplyId
        {
            get => GetData( ).Reply;
            set
            {
                var data = GetData( );
                if( data.Reply != value )
                {
                    OnPropertyChanging( );
                    OnPropertyChanging( "Reply", false );
                    data = GetData( );
                    data.Reply = value;
                    OnPropertyChanged( );
                    OnPropertyChanged( "Reply" );
                }
            }
        }

        public WeatherStationCommandReplyEntity? Reply
        {
            get
            {
                if(_replyReference != null)
                {
                    var result = (WeatherStationCommandReplyEntity?)_replyReference.Target;
                    if( result != null )
                    {
                        return result;
                    }
                }
                var data = GetData( );
                var context = CheckedContext;
                if( data.Reply is Guid replyId )
                {
                    var entity = context.GetWeatherStationCommandReplyById( replyId );
                    if( entity != null )
                    {
                        _replyReference = new WeakReference( entity );
                    }
                    return entity;
                }
                return null;
            }
            set
            {
                ReplyId = value != null? value.Id : null;
            }
        }

    }

    public class WeatherStationCommandReplyEntity : BaseEntity<Kind>
    {
        WeakReference? _weatherStationReference = null;
        WeakReference? _commandReference = null;
        public WeatherStationCommandReplyEntity( [DisallowNull] EntityContext entityContext, [DisallowNull] WeatherStationCommandReplyObject data )
            : base( entityContext, data )
        {
        }

        public EntityContext? Context => (EntityContext?)_Context;

        protected EntityContext CheckedContext
        {
            get
            {
                var context = Context;
                if ( context is null )
                {
                    throw new InvalidOperationException( "Context is null" );
                }
                return context;
            }
        }

        private WeatherStationCommandReplyObject GetData( ) 
        {
            return (WeatherStationCommandReplyObject)base._GetData( );
        }

        public Guid WeatherStationId
        {
            get => GetData( ).WeatherStation;
            set
            {
                var data = GetData( );
                if( data.WeatherStation != value )
                {
                    OnPropertyChanging( );
                    OnPropertyChanging( "WeatherStation", false );
                    data = GetData( );
                    data.WeatherStation = value;
                    OnPropertyChanged( );
                    OnPropertyChanged( "WeatherStation" );
                }
            }
        }

        public WeatherStationDeviceEntity WeatherStation
        {
            get
            {
                if(_weatherStationReference != null)
                {
                    var result = (WeatherStationDeviceEntity?)_weatherStationReference.Target;
                    if( result != null )
                    {
                        return result;
                    }
                }
                var data = GetData( );
                var context = CheckedContext;
                var entity = context.GetWeatherStationDeviceById( data.WeatherStation );
                if( entity != null )
                {
                    _weatherStationReference = new WeakReference( entity );
                }
                else
                {
                    var message = $"Cannot find the WeatherStationDeviceEntity object identified by {data.WeatherStation}";
                    throw new Exception( message );
                }
                return entity;
            }
            set
            {
                WeatherStationId = value != null? value.Id : Guid.Empty;
            }
        }

        public DateTime Timestamp
        {
            get => GetData( ).Timestamp;
            set
            {
                var data = GetData( );
                if( data.Timestamp != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Timestamp = value;
                    OnPropertyChanged( );
                }
            }
        }

        public Guid? CommandId
        {
            get => GetData( ).Command;
            set
            {
                var data = GetData( );
                if( data.Command != value )
                {
                    OnPropertyChanging( );
                    OnPropertyChanging( "Command", false );
                    data = GetData( );
                    data.Command = value;
                    OnPropertyChanged( );
                    OnPropertyChanged( "Command" );
                }
            }
        }

        public WeatherStationCommandEntity? Command
        {
            get
            {
                if(_commandReference != null)
                {
                    var result = (WeatherStationCommandEntity?)_commandReference.Target;
                    if( result != null )
                    {
                        return result;
                    }
                }
                var data = GetData( );
                var context = CheckedContext;
                if( data.Command is Guid commandId )
                {
                    var entity = context.GetWeatherStationCommandById( commandId );
                    if( entity != null )
                    {
                        _commandReference = new WeakReference( entity );
                    }
                    return entity;
                }
                return null;
            }
            set
            {
                CommandId = value != null? value.Id : null;
            }
        }

        public Types.DeviceCommandReplyStatus Status
        {
            get => GetData( ).Status;
            set
            {
                var data = GetData( );
                if( data.Status != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Status = value;
                    OnPropertyChanged( );
                }
            }
        }

        public string Message
        {
            get => GetData( ).Message;
            set
            {
                var data = GetData( );
                if( data.Message != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Message = value;
                    OnPropertyChanged( );
                }
            }
        }

    }

    public class WeatherStationConfigurationEntity : BaseEntity<Kind>
    {
        WeakReference? _weatherStationReference = null;
        public WeatherStationConfigurationEntity( [DisallowNull] EntityContext entityContext, [DisallowNull] WeatherStationConfigurationObject data )
            : base( entityContext, data )
        {
        }

        public EntityContext? Context => (EntityContext?)_Context;

        protected EntityContext CheckedContext
        {
            get
            {
                var context = Context;
                if ( context is null )
                {
                    throw new InvalidOperationException( "Context is null" );
                }
                return context;
            }
        }

        private WeatherStationConfigurationObject GetData( ) 
        {
            return (WeatherStationConfigurationObject)base._GetData( );
        }

        public Guid WeatherStationId
        {
            get => GetData( ).WeatherStation;
            set
            {
                var data = GetData( );
                if( data.WeatherStation != value )
                {
                    OnPropertyChanging( );
                    OnPropertyChanging( "WeatherStation", false );
                    data = GetData( );
                    data.WeatherStation = value;
                    OnPropertyChanged( );
                    OnPropertyChanged( "WeatherStation" );
                }
            }
        }

        public WeatherStationDeviceEntity WeatherStation
        {
            get
            {
                if(_weatherStationReference != null)
                {
                    var result = (WeatherStationDeviceEntity?)_weatherStationReference.Target;
                    if( result != null )
                    {
                        return result;
                    }
                }
                var data = GetData( );
                var context = CheckedContext;
                var entity = context.GetWeatherStationDeviceById( data.WeatherStation );
                if( entity != null )
                {
                    _weatherStationReference = new WeakReference( entity );
                }
                else
                {
                    var message = $"Cannot find the WeatherStationDeviceEntity object identified by {data.WeatherStation}";
                    throw new Exception( message );
                }
                return entity;
            }
            set
            {
                WeatherStationId = value != null? value.Id : Guid.Empty;
            }
        }

        public DateTime Timestamp
        {
            get => GetData( ).Timestamp;
            set
            {
                var data = GetData( );
                if( data.Timestamp != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Timestamp = value;
                    OnPropertyChanged( );
                }
            }
        }

        public TimeSpan NoDataTimeOut
        {
            get => GetData( ).NoDataTimeOut;
            set
            {
                var data = GetData( );
                if( data.NoDataTimeOut != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.NoDataTimeOut = value;
                    OnPropertyChanged( );
                }
            }
        }

        public TimeSpan SendInterval
        {
            get => GetData( ).SendInterval;
            set
            {
                var data = GetData( );
                if( data.SendInterval != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.SendInterval = value;
                    OnPropertyChanged( );
                }
            }
        }

        public double Latitude
        {
            get => GetData( ).Latitude;
            set
            {
                var data = GetData( );
                if( data.Latitude != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Latitude = value;
                    OnPropertyChanged( );
                }
            }
        }

        public double Longitude
        {
            get => GetData( ).Longitude;
            set
            {
                var data = GetData( );
                if( data.Longitude != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Longitude = value;
                    OnPropertyChanged( );
                }
            }
        }

        public double GyroOffset
        {
            get => GetData( ).GyroOffset;
            set
            {
                var data = GetData( );
                if( data.GyroOffset != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.GyroOffset = value;
                    OnPropertyChanged( );
                }
            }
        }

        public bool EnableAveraging
        {
            get => GetData( ).EnableAveraging;
            set
            {
                var data = GetData( );
                if( data.EnableAveraging != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.EnableAveraging = value;
                    OnPropertyChanged( );
                }
            }
        }

        public TimeSpan AveragingInterval
        {
            get => GetData( ).AveragingInterval;
            set
            {
                var data = GetData( );
                if( data.AveragingInterval != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.AveragingInterval = value;
                    OnPropertyChanged( );
                }
            }
        }

    }

    public abstract class ZoneEntity : BaseEntity<Kind>
    {
        protected ZoneEntity( [DisallowNull] EntityContext entityContext, [DisallowNull] ZoneObject data )
            : base( entityContext, data )
        {
        }

        public EntityContext? Context => (EntityContext?)_Context;

        protected EntityContext CheckedContext
        {
            get
            {
                var context = Context;
                if ( context is null )
                {
                    throw new InvalidOperationException( "Context is null" );
                }
                return context;
            }
        }

        private ZoneObject GetData( ) 
        {
            return (ZoneObject)base._GetData( );
        }

        public string Name
        {
            get => GetData( ).Name;
            set
            {
                var data = GetData( );
                if( data.Name != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Name = value;
                    OnPropertyChanged( );
                }
            }
        }

        public double Longitude
        {
            get => GetData( ).Longitude;
            set
            {
                var data = GetData( );
                if( data.Longitude != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Longitude = value;
                    OnPropertyChanged( );
                }
            }
        }

        public double Latitude
        {
            get => GetData( ).Latitude;
            set
            {
                var data = GetData( );
                if( data.Latitude != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Latitude = value;
                    OnPropertyChanged( );
                }
            }
        }

        public Types.ZoneAlarmType AlarmType
        {
            get => GetData( ).AlarmType;
            set
            {
                var data = GetData( );
                if( data.AlarmType != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.AlarmType = value;
                    OnPropertyChanged( );
                }
            }
        }

        public TimeSpan AlarmTime
        {
            get => GetData( ).AlarmTime;
            set
            {
                var data = GetData( );
                if( data.AlarmTime != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.AlarmTime = value;
                    OnPropertyChanged( );
                }
            }
        }

        public TimeSpan RadarTrackMinimumLifetime
        {
            get => GetData( ).RadarTrackMinimumLifetime;
            set
            {
                var data = GetData( );
                if( data.RadarTrackMinimumLifetime != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.RadarTrackMinimumLifetime = value;
                    OnPropertyChanged( );
                }
            }
        }

        public double Speed
        {
            get => GetData( ).Speed;
            set
            {
                var data = GetData( );
                if( data.Speed != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Speed = value;
                    OnPropertyChanged( );
                }
            }
        }

        public uint StrokeColor
        {
            get => GetData( ).StrokeColor;
            set
            {
                var data = GetData( );
                if( data.StrokeColor != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.StrokeColor = value;
                    OnPropertyChanged( );
                }
            }
        }

        public uint FillColor
        {
            get => GetData( ).FillColor;
            set
            {
                var data = GetData( );
                if( data.FillColor != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.FillColor = value;
                    OnPropertyChanged( );
                }
            }
        }

    }

    public class CircularZoneEntity : ZoneEntity
    {
        public CircularZoneEntity( [DisallowNull] EntityContext entityContext, [DisallowNull] CircularZoneObject data )
            : base( entityContext, data )
        {
        }

        private CircularZoneObject GetData( ) 
        {
            return (CircularZoneObject)base._GetData( );
        }

        public double Radius
        {
            get => GetData( ).Radius;
            set
            {
                var data = GetData( );
                if( data.Radius != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Radius = value;
                    OnPropertyChanged( );
                }
            }
        }

    }

    public class PolygonZoneEntity : ZoneEntity
    {
        public PolygonZoneEntity( [DisallowNull] EntityContext entityContext, [DisallowNull] PolygonZoneObject data )
            : base( entityContext, data )
        {
        }

        private PolygonZoneObject GetData( ) 
        {
            return (PolygonZoneObject)base._GetData( );
        }

        public byte[] Polygon
        {
            get => GetData( ).Polygon;
            set
            {
                var data = GetData( );
                if( data.Polygon != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Polygon = value;
                    OnPropertyChanged( );
                }
            }
        }

    }

    public class ZoneExceptionsEntity : BaseEntity<Kind>
    {
        WeakReference? _zoneReference = null;
        public ZoneExceptionsEntity( [DisallowNull] EntityContext entityContext, [DisallowNull] ZoneExceptionsObject data )
            : base( entityContext, data )
        {
        }

        public EntityContext? Context => (EntityContext?)_Context;

        protected EntityContext CheckedContext
        {
            get
            {
                var context = Context;
                if ( context is null )
                {
                    throw new InvalidOperationException( "Context is null" );
                }
                return context;
            }
        }

        private ZoneExceptionsObject GetData( ) 
        {
            return (ZoneExceptionsObject)base._GetData( );
        }

        public Guid ZoneId
        {
            get => GetData( ).Zone;
            set
            {
                var data = GetData( );
                if( data.Zone != value )
                {
                    OnPropertyChanging( );
                    OnPropertyChanging( "Zone", false );
                    data = GetData( );
                    data.Zone = value;
                    OnPropertyChanged( );
                    OnPropertyChanged( "Zone" );
                }
            }
        }

        public ZoneEntity Zone
        {
            get
            {
                if(_zoneReference != null)
                {
                    var result = (ZoneEntity?)_zoneReference.Target;
                    if( result != null )
                    {
                        return result;
                    }
                }
                var data = GetData( );
                var context = CheckedContext;
                var entity = context.GetZoneById( data.Zone );
                if( entity != null )
                {
                    _zoneReference = new WeakReference( entity );
                }
                else
                {
                    var message = $"Cannot find the ZoneEntity object identified by {data.Zone}";
                    throw new Exception( message );
                }
                return entity;
            }
            set
            {
                ZoneId = value != null? value.Id : Guid.Empty;
            }
        }

        public DateTime Timestamp
        {
            get => GetData( ).Timestamp;
            set
            {
                var data = GetData( );
                if( data.Timestamp != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Timestamp = value;
                    OnPropertyChanged( );
                }
            }
        }

    }

    public class ZoneExceptionsVesselLinkEntity : BaseEntity<Kind>
    {
        WeakReference? _zoneExceptionsReference = null;
        WeakReference? _vesselReference = null;
        public ZoneExceptionsVesselLinkEntity( [DisallowNull] EntityContext entityContext, [DisallowNull] ZoneExceptionsVesselLinkObject data )
            : base( entityContext, data )
        {
        }

        public EntityContext? Context => (EntityContext?)_Context;

        protected EntityContext CheckedContext
        {
            get
            {
                var context = Context;
                if ( context is null )
                {
                    throw new InvalidOperationException( "Context is null" );
                }
                return context;
            }
        }

        private ZoneExceptionsVesselLinkObject GetData( ) 
        {
            return (ZoneExceptionsVesselLinkObject)base._GetData( );
        }

        public Guid ZoneExceptionsId
        {
            get => GetData( ).ZoneExceptions;
            set
            {
                var data = GetData( );
                if( data.ZoneExceptions != value )
                {
                    OnPropertyChanging( );
                    OnPropertyChanging( "ZoneExceptions", false );
                    data = GetData( );
                    data.ZoneExceptions = value;
                    OnPropertyChanged( );
                    OnPropertyChanged( "ZoneExceptions" );
                }
            }
        }

        public ZoneExceptionsEntity ZoneExceptions
        {
            get
            {
                if(_zoneExceptionsReference != null)
                {
                    var result = (ZoneExceptionsEntity?)_zoneExceptionsReference.Target;
                    if( result != null )
                    {
                        return result;
                    }
                }
                var data = GetData( );
                var context = CheckedContext;
                var entity = context.GetZoneExceptionsById( data.ZoneExceptions );
                if( entity != null )
                {
                    _zoneExceptionsReference = new WeakReference( entity );
                }
                else
                {
                    var message = $"Cannot find the ZoneExceptionsEntity object identified by {data.ZoneExceptions}";
                    throw new Exception( message );
                }
                return entity;
            }
            set
            {
                ZoneExceptionsId = value != null? value.Id : Guid.Empty;
            }
        }

        public Guid VesselId
        {
            get => GetData( ).Vessel;
            set
            {
                var data = GetData( );
                if( data.Vessel != value )
                {
                    OnPropertyChanging( );
                    OnPropertyChanging( "Vessel", false );
                    data = GetData( );
                    data.Vessel = value;
                    OnPropertyChanged( );
                    OnPropertyChanged( "Vessel" );
                }
            }
        }

        public VesselEntity Vessel
        {
            get
            {
                if(_vesselReference != null)
                {
                    var result = (VesselEntity?)_vesselReference.Target;
                    if( result != null )
                    {
                        return result;
                    }
                }
                var data = GetData( );
                var context = CheckedContext;
                var entity = context.GetVesselById( data.Vessel );
                if( entity != null )
                {
                    _vesselReference = new WeakReference( entity );
                }
                else
                {
                    var message = $"Cannot find the VesselEntity object identified by {data.Vessel}";
                    throw new Exception( message );
                }
                return entity;
            }
            set
            {
                VesselId = value != null? value.Id : Guid.Empty;
            }
        }

    }

    public class ZoneTrackAlarmEntity : BaseEntity<Kind>
    {
        WeakReference? _trackReference = null;
        WeakReference? _zoneReference = null;
        WeakReference? _radarTrackReference = null;
        public ZoneTrackAlarmEntity( [DisallowNull] EntityContext entityContext, [DisallowNull] ZoneTrackAlarmObject data )
            : base( entityContext, data )
        {
        }

        public EntityContext? Context => (EntityContext?)_Context;

        protected EntityContext CheckedContext
        {
            get
            {
                var context = Context;
                if ( context is null )
                {
                    throw new InvalidOperationException( "Context is null" );
                }
                return context;
            }
        }

        private ZoneTrackAlarmObject GetData( ) 
        {
            return (ZoneTrackAlarmObject)base._GetData( );
        }

        public Guid TrackId
        {
            get => GetData( ).Track;
            set
            {
                var data = GetData( );
                if( data.Track != value )
                {
                    OnPropertyChanging( );
                    OnPropertyChanging( "Track", false );
                    data = GetData( );
                    data.Track = value;
                    OnPropertyChanged( );
                    OnPropertyChanged( "Track" );
                }
            }
        }

        public TrackEntity Track
        {
            get
            {
                if(_trackReference != null)
                {
                    var result = (TrackEntity?)_trackReference.Target;
                    if( result != null )
                    {
                        return result;
                    }
                }
                var data = GetData( );
                var context = CheckedContext;
                var entity = context.GetTrackById( data.Track );
                if( entity != null )
                {
                    _trackReference = new WeakReference( entity );
                }
                else
                {
                    var message = $"Cannot find the TrackEntity object identified by {data.Track}";
                    throw new Exception( message );
                }
                return entity;
            }
            set
            {
                TrackId = value != null? value.Id : Guid.Empty;
            }
        }

        public Guid ZoneId
        {
            get => GetData( ).Zone;
            set
            {
                var data = GetData( );
                if( data.Zone != value )
                {
                    OnPropertyChanging( );
                    OnPropertyChanging( "Zone", false );
                    data = GetData( );
                    data.Zone = value;
                    OnPropertyChanged( );
                    OnPropertyChanged( "Zone" );
                }
            }
        }

        public ZoneEntity Zone
        {
            get
            {
                if(_zoneReference != null)
                {
                    var result = (ZoneEntity?)_zoneReference.Target;
                    if( result != null )
                    {
                        return result;
                    }
                }
                var data = GetData( );
                var context = CheckedContext;
                var entity = context.GetZoneById( data.Zone );
                if( entity != null )
                {
                    _zoneReference = new WeakReference( entity );
                }
                else
                {
                    var message = $"Cannot find the ZoneEntity object identified by {data.Zone}";
                    throw new Exception( message );
                }
                return entity;
            }
            set
            {
                ZoneId = value != null? value.Id : Guid.Empty;
            }
        }

        public Guid? RadarTrackId
        {
            get => GetData( ).RadarTrack;
            set
            {
                var data = GetData( );
                if( data.RadarTrack != value )
                {
                    OnPropertyChanging( );
                    OnPropertyChanging( "RadarTrack", false );
                    data = GetData( );
                    data.RadarTrack = value;
                    OnPropertyChanged( );
                    OnPropertyChanged( "RadarTrack" );
                }
            }
        }

        public TrackEntity? RadarTrack
        {
            get
            {
                if(_radarTrackReference != null)
                {
                    var result = (TrackEntity?)_radarTrackReference.Target;
                    if( result != null )
                    {
                        return result;
                    }
                }
                var data = GetData( );
                var context = CheckedContext;
                if( data.RadarTrack is Guid radarTrackId )
                {
                    var entity = context.GetTrackById( radarTrackId );
                    if( entity != null )
                    {
                        _radarTrackReference = new WeakReference( entity );
                    }
                    return entity;
                }
                return null;
            }
            set
            {
                RadarTrackId = value != null? value.Id : null;
            }
        }

        public DateTime Timestamp
        {
            get => GetData( ).Timestamp;
            set
            {
                var data = GetData( );
                if( data.Timestamp != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Timestamp = value;
                    OnPropertyChanged( );
                }
            }
        }

        public double Latitude
        {
            get => GetData( ).Latitude;
            set
            {
                var data = GetData( );
                if( data.Latitude != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Latitude = value;
                    OnPropertyChanged( );
                }
            }
        }

        public double Longitude
        {
            get => GetData( ).Longitude;
            set
            {
                var data = GetData( );
                if( data.Longitude != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Longitude = value;
                    OnPropertyChanged( );
                }
            }
        }

        public double Speed
        {
            get => GetData( ).Speed;
            set
            {
                var data = GetData( );
                if( data.Speed != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Speed = value;
                    OnPropertyChanged( );
                }
            }
        }

        public double? Course
        {
            get => GetData( ).Course;
            set
            {
                var data = GetData( );
                if( data.Course != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Course = value;
                    OnPropertyChanged( );
                }
            }
        }

        public double? Heading
        {
            get => GetData( ).Heading;
            set
            {
                var data = GetData( );
                if( data.Heading != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.Heading = value;
                    OnPropertyChanged( );
                }
            }
        }

        public double EnterLatitude
        {
            get => GetData( ).EnterLatitude;
            set
            {
                var data = GetData( );
                if( data.EnterLatitude != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.EnterLatitude = value;
                    OnPropertyChanged( );
                }
            }
        }

        public double EnterLongitude
        {
            get => GetData( ).EnterLongitude;
            set
            {
                var data = GetData( );
                if( data.EnterLongitude != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.EnterLongitude = value;
                    OnPropertyChanged( );
                }
            }
        }

        public double? LeaveLatitude
        {
            get => GetData( ).LeaveLatitude;
            set
            {
                var data = GetData( );
                if( data.LeaveLatitude != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.LeaveLatitude = value;
                    OnPropertyChanged( );
                }
            }
        }

        public double? LeaveLongitude
        {
            get => GetData( ).LeaveLongitude;
            set
            {
                var data = GetData( );
                if( data.LeaveLongitude != value )
                {
                    OnPropertyChanging( );
                    data = GetData( );
                    data.LeaveLongitude = value;
                    OnPropertyChanged( );
                }
            }
        }

    }

    public class EntityFactory : IBaseEntityFactory<Kind>
    {
        IBaseDataFactory<Kind> _dataFactory;
        public EntityFactory([DisallowNull] IBaseDataFactory<Kind> dataFactory)
        {
            _dataFactory = dataFactory;
        }
        public BaseEntity<Kind> Create([DisallowNull] EntityContextBase<Kind> entityContextBase, Kind objectType)
        {
            var dataObject = _dataFactory.Create(objectType);
            return Create(entityContextBase, dataObject);
        }

        public BaseEntity<Kind> Create([DisallowNull] EntityContextBase<Kind> entityContextBase, [DisallowNull] BaseDataGuid<Kind> dataObject)
        {
            var entityContext = (EntityContext)entityContextBase;
            var kind = dataObject.GetObjectType();
            switch (kind)
            {
                case Kind.AircraftType:
                {
                    return new AircraftTypeEntity( entityContext, (AircraftTypeObject)dataObject );
                }
                case Kind.AisDeviceCommand:
                {
                    return new AisDeviceCommandEntity( entityContext, (AisDeviceCommandObject)dataObject );
                }
                case Kind.AisDeviceCommandReply:
                {
                    return new AisDeviceCommandReplyEntity( entityContext, (AisDeviceCommandReplyObject)dataObject );
                }
                case Kind.AisDeviceConfiguration:
                {
                    return new AisDeviceConfigurationEntity( entityContext, (AisDeviceConfigurationObject)dataObject );
                }
                case Kind.AisDeviceRawMessage:
                {
                    return new AisDeviceRawMessageEntity( entityContext, (AisDeviceRawMessageObject)dataObject );
                }
                case Kind.AisDeviceRawSentence:
                {
                    return new AisDeviceRawSentenceEntity( entityContext, (AisDeviceRawSentenceObject)dataObject );
                }
                case Kind.AidToNavigationReportMessage:
                {
                    return new AidToNavigationReportMessageEntity( entityContext, (AidToNavigationReportMessageObject)dataObject );
                }
                case Kind.AisAddressedSafetyRelatedMessage:
                {
                    return new AisAddressedSafetyRelatedMessageEntity( entityContext, (AisAddressedSafetyRelatedMessageObject)dataObject );
                }
                case Kind.AisBaseStationReportMessage:
                {
                    return new AisBaseStationReportMessageEntity( entityContext, (AisBaseStationReportMessageObject)dataObject );
                }
                case Kind.AisBinaryAcknowledgeMessage:
                {
                    return new AisBinaryAcknowledgeMessageEntity( entityContext, (AisBinaryAcknowledgeMessageObject)dataObject );
                }
                case Kind.AisBinaryAddressedMessage:
                {
                    return new AisBinaryAddressedMessageEntity( entityContext, (AisBinaryAddressedMessageObject)dataObject );
                }
                case Kind.AisBinaryBroadcastMessage:
                {
                    return new AisBinaryBroadcastMessageEntity( entityContext, (AisBinaryBroadcastMessageObject)dataObject );
                }
                case Kind.AisDataLinkManagementMessage:
                {
                    return new AisDataLinkManagementMessageEntity( entityContext, (AisDataLinkManagementMessageObject)dataObject );
                }
                case Kind.AisExtendedClassBCsPositionReportMessage:
                {
                    return new AisExtendedClassBCsPositionReportMessageEntity( entityContext, (AisExtendedClassBCsPositionReportMessageObject)dataObject );
                }
                case Kind.AisInterrogationMessage:
                {
                    return new AisInterrogationMessageEntity( entityContext, (AisInterrogationMessageObject)dataObject );
                }
                case Kind.AisPositionReportClassAAssignedScheduleMessage:
                {
                    return new AisPositionReportClassAAssignedScheduleMessageEntity( entityContext, (AisPositionReportClassAAssignedScheduleMessageObject)dataObject );
                }
                case Kind.AisPositionReportClassAMessage:
                {
                    return new AisPositionReportClassAMessageEntity( entityContext, (AisPositionReportClassAMessageObject)dataObject );
                }
                case Kind.AisPositionReportClassAResponseToInterrogationMessage:
                {
                    return new AisPositionReportClassAResponseToInterrogationMessageEntity( entityContext, (AisPositionReportClassAResponseToInterrogationMessageObject)dataObject );
                }
                case Kind.AisPositionReportForLongRangeApplicationsMessage:
                {
                    return new AisPositionReportForLongRangeApplicationsMessageEntity( entityContext, (AisPositionReportForLongRangeApplicationsMessageObject)dataObject );
                }
                case Kind.AisSafetyRelatedAcknowledgmentMessage:
                {
                    return new AisSafetyRelatedAcknowledgmentMessageEntity( entityContext, (AisSafetyRelatedAcknowledgmentMessageObject)dataObject );
                }
                case Kind.AisStandardClassBCsPositionReportMessage:
                {
                    return new AisStandardClassBCsPositionReportMessageEntity( entityContext, (AisStandardClassBCsPositionReportMessageObject)dataObject );
                }
                case Kind.AisStandardSarAircraftPositionReportMessage:
                {
                    return new AisStandardSarAircraftPositionReportMessageEntity( entityContext, (AisStandardSarAircraftPositionReportMessageObject)dataObject );
                }
                case Kind.AisStaticAndVoyageRelatedDataMessage:
                {
                    return new AisStaticAndVoyageRelatedDataMessageEntity( entityContext, (AisStaticAndVoyageRelatedDataMessageObject)dataObject );
                }
                case Kind.AisStaticDataReportMessage:
                {
                    return new AisStaticDataReportMessageEntity( entityContext, (AisStaticDataReportMessageObject)dataObject );
                }
                case Kind.AisStaticDataReportPartAMessage:
                {
                    return new AisStaticDataReportPartAMessageEntity( entityContext, (AisStaticDataReportPartAMessageObject)dataObject );
                }
                case Kind.AisStaticDataReportPartBMessage:
                {
                    return new AisStaticDataReportPartBMessageEntity( entityContext, (AisStaticDataReportPartBMessageObject)dataObject );
                }
                case Kind.AisUtcAndDateInquiryMessage:
                {
                    return new AisUtcAndDateInquiryMessageEntity( entityContext, (AisUtcAndDateInquiryMessageObject)dataObject );
                }
                case Kind.AisUtcAndDateResponseMessage:
                {
                    return new AisUtcAndDateResponseMessageEntity( entityContext, (AisUtcAndDateResponseMessageObject)dataObject );
                }
                case Kind.AlarmStateChange:
                {
                    return new AlarmStateChangeEntity( entityContext, (AlarmStateChangeObject)dataObject );
                }
                case Kind.BaseStationType:
                {
                    return new BaseStationTypeEntity( entityContext, (BaseStationTypeObject)dataObject );
                }
                case Kind.BinaryTimeseriesValue:
                {
                    return new BinaryTimeseriesValueEntity( entityContext, (BinaryTimeseriesValueObject)dataObject );
                }
                case Kind.Bookmark:
                {
                    return new BookmarkEntity( entityContext, (BookmarkObject)dataObject );
                }
                case Kind.BooleanTimeseriesValue:
                {
                    return new BooleanTimeseriesValueEntity( entityContext, (BooleanTimeseriesValueObject)dataObject );
                }
                case Kind.ByteTimeseriesValue:
                {
                    return new ByteTimeseriesValueEntity( entityContext, (ByteTimeseriesValueObject)dataObject );
                }
                case Kind.CameraCommand:
                {
                    return new CameraCommandEntity( entityContext, (CameraCommandObject)dataObject );
                }
                case Kind.CameraCommandAbsoluteMove:
                {
                    return new CameraCommandAbsoluteMoveEntity( entityContext, (CameraCommandAbsoluteMoveObject)dataObject );
                }
                case Kind.CameraCommandAdjustPanTiltZoom:
                {
                    return new CameraCommandAdjustPanTiltZoomEntity( entityContext, (CameraCommandAdjustPanTiltZoomObject)dataObject );
                }
                case Kind.CameraCommandContinuousMove:
                {
                    return new CameraCommandContinuousMoveEntity( entityContext, (CameraCommandContinuousMoveObject)dataObject );
                }
                case Kind.CameraCommandGeoMove:
                {
                    return new CameraCommandGeoMoveEntity( entityContext, (CameraCommandGeoMoveObject)dataObject );
                }
                case Kind.CameraCommandRelativeMove:
                {
                    return new CameraCommandRelativeMoveEntity( entityContext, (CameraCommandRelativeMoveObject)dataObject );
                }
                case Kind.CameraCommandReleasePTZOwnership:
                {
                    return new CameraCommandReleasePTZOwnershipEntity( entityContext, (CameraCommandReleasePTZOwnershipObject)dataObject );
                }
                case Kind.CameraCommandRequestPTZOwnership:
                {
                    return new CameraCommandRequestPTZOwnershipEntity( entityContext, (CameraCommandRequestPTZOwnershipObject)dataObject );
                }
                case Kind.CameraCommandSetAutoFocus:
                {
                    return new CameraCommandSetAutoFocusEntity( entityContext, (CameraCommandSetAutoFocusObject)dataObject );
                }
                case Kind.CameraCommandSetBlackAndWhite:
                {
                    return new CameraCommandSetBlackAndWhiteEntity( entityContext, (CameraCommandSetBlackAndWhiteObject)dataObject );
                }
                case Kind.CameraCommandSetFollowed:
                {
                    return new CameraCommandSetFollowedEntity( entityContext, (CameraCommandSetFollowedObject)dataObject );
                }
                case Kind.CameraCommandSetInfraRedLamp:
                {
                    return new CameraCommandSetInfraRedLampEntity( entityContext, (CameraCommandSetInfraRedLampObject)dataObject );
                }
                case Kind.CameraCommandSetWasher:
                {
                    return new CameraCommandSetWasherEntity( entityContext, (CameraCommandSetWasherObject)dataObject );
                }
                case Kind.CameraCommandSetWiper:
                {
                    return new CameraCommandSetWiperEntity( entityContext, (CameraCommandSetWiperObject)dataObject );
                }
                case Kind.CameraCommandStop:
                {
                    return new CameraCommandStopEntity( entityContext, (CameraCommandStopObject)dataObject );
                }
                case Kind.CameraCommandReply:
                {
                    return new CameraCommandReplyEntity( entityContext, (CameraCommandReplyObject)dataObject );
                }
                case Kind.CameraConfiguration:
                {
                    return new CameraConfigurationEntity( entityContext, (CameraConfigurationObject)dataObject );
                }
                case Kind.CameraPanCalibration:
                {
                    return new CameraPanCalibrationEntity( entityContext, (CameraPanCalibrationObject)dataObject );
                }
                case Kind.CameraPanCalibrationValue:
                {
                    return new CameraPanCalibrationValueEntity( entityContext, (CameraPanCalibrationValueObject)dataObject );
                }
                case Kind.CameraStatus:
                {
                    return new CameraStatusEntity( entityContext, (CameraStatusObject)dataObject );
                }
                case Kind.CameraTiltCalibration:
                {
                    return new CameraTiltCalibrationEntity( entityContext, (CameraTiltCalibrationObject)dataObject );
                }
                case Kind.CameraTiltCalibrationValue:
                {
                    return new CameraTiltCalibrationValueEntity( entityContext, (CameraTiltCalibrationValueObject)dataObject );
                }
                case Kind.CameraZoomCalibration:
                {
                    return new CameraZoomCalibrationEntity( entityContext, (CameraZoomCalibrationObject)dataObject );
                }
                case Kind.CameraZoomCalibrationValue:
                {
                    return new CameraZoomCalibrationValueEntity( entityContext, (CameraZoomCalibrationValueObject)dataObject );
                }
                case Kind.Catalog:
                {
                    return new CatalogEntity( entityContext, (CatalogObject)dataObject );
                }
                case Kind.Element:
                {
                    return new ElementEntity( entityContext, (ElementObject)dataObject );
                }
                case Kind.CollectionInfo:
                {
                    return new CollectionInfoEntity( entityContext, (CollectionInfoObject)dataObject );
                }
                case Kind.Country:
                {
                    return new CountryEntity( entityContext, (CountryObject)dataObject );
                }
                case Kind.CursorInfo:
                {
                    return new CursorInfoEntity( entityContext, (CursorInfoObject)dataObject );
                }
                case Kind.DateTimeTimeseriesValue:
                {
                    return new DateTimeTimeseriesValueEntity( entityContext, (DateTimeTimeseriesValueObject)dataObject );
                }
                case Kind.DeviceHost:
                {
                    return new DeviceHostEntity( entityContext, (DeviceHostObject)dataObject );
                }
                case Kind.DeviceHostConfiguration:
                {
                    return new DeviceHostConfigurationEntity( entityContext, (DeviceHostConfigurationObject)dataObject );
                }
                case Kind.DoubleTimeseriesValue:
                {
                    return new DoubleTimeseriesValueEntity( entityContext, (DoubleTimeseriesValueObject)dataObject );
                }
                case Kind.FacilityType:
                {
                    return new FacilityTypeEntity( entityContext, (FacilityTypeObject)dataObject );
                }
                case Kind.GeoPosition2DTimeseriesValue:
                {
                    return new GeoPosition2DTimeseriesValueEntity( entityContext, (GeoPosition2DTimeseriesValueObject)dataObject );
                }
                case Kind.GeoPosition3DTimeseriesValue:
                {
                    return new GeoPosition3DTimeseriesValueEntity( entityContext, (GeoPosition3DTimeseriesValueObject)dataObject );
                }
                case Kind.GNSSDeviceCommand:
                {
                    return new GNSSDeviceCommandEntity( entityContext, (GNSSDeviceCommandObject)dataObject );
                }
                case Kind.GNSSDeviceCommandReply:
                {
                    return new GNSSDeviceCommandReplyEntity( entityContext, (GNSSDeviceCommandReplyObject)dataObject );
                }
                case Kind.GNSSDeviceConfiguration:
                {
                    return new GNSSDeviceConfigurationEntity( entityContext, (GNSSDeviceConfigurationObject)dataObject );
                }
                case Kind.GuidTimeseriesValue:
                {
                    return new GuidTimeseriesValueEntity( entityContext, (GuidTimeseriesValueObject)dataObject );
                }
                case Kind.GyroDeviceCommand:
                {
                    return new GyroDeviceCommandEntity( entityContext, (GyroDeviceCommandObject)dataObject );
                }
                case Kind.GyroDeviceCommandReply:
                {
                    return new GyroDeviceCommandReplyEntity( entityContext, (GyroDeviceCommandReplyObject)dataObject );
                }
                case Kind.GyroDeviceConfiguration:
                {
                    return new GyroDeviceConfigurationEntity( entityContext, (GyroDeviceConfigurationObject)dataObject );
                }
                case Kind.Callsign:
                {
                    return new CallsignEntity( entityContext, (CallsignObject)dataObject );
                }
                case Kind.InternationalMaritimeOrganizationNumber:
                {
                    return new InternationalMaritimeOrganizationNumberEntity( entityContext, (InternationalMaritimeOrganizationNumberObject)dataObject );
                }
                case Kind.MaritimeMobileServiceIdentity:
                {
                    return new MaritimeMobileServiceIdentityEntity( entityContext, (MaritimeMobileServiceIdentityObject)dataObject );
                }
                case Kind.Name:
                {
                    return new NameEntity( entityContext, (NameObject)dataObject );
                }
                case Kind.Int16TimeseriesValue:
                {
                    return new Int16TimeseriesValueEntity( entityContext, (Int16TimeseriesValueObject)dataObject );
                }
                case Kind.Int32TimeseriesValue:
                {
                    return new Int32TimeseriesValueEntity( entityContext, (Int32TimeseriesValueObject)dataObject );
                }
                case Kind.Int64TimeseriesValue:
                {
                    return new Int64TimeseriesValueEntity( entityContext, (Int64TimeseriesValueObject)dataObject );
                }
                case Kind.BaseStation:
                {
                    return new BaseStationEntity( entityContext, (BaseStationObject)dataObject );
                }
                case Kind.CameraDevice:
                {
                    return new CameraDeviceEntity( entityContext, (CameraDeviceObject)dataObject );
                }
                case Kind.GNSSDevice:
                {
                    return new GNSSDeviceEntity( entityContext, (GNSSDeviceObject)dataObject );
                }
                case Kind.GyroDevice:
                {
                    return new GyroDeviceEntity( entityContext, (GyroDeviceObject)dataObject );
                }
                case Kind.LineInputDevice:
                {
                    return new LineInputDeviceEntity( entityContext, (LineInputDeviceObject)dataObject );
                }
                case Kind.OilSpillDetectorDevice:
                {
                    return new OilSpillDetectorDeviceEntity( entityContext, (OilSpillDetectorDeviceObject)dataObject );
                }
                case Kind.RadioDevice:
                {
                    return new RadioDeviceEntity( entityContext, (RadioDeviceObject)dataObject );
                }
                case Kind.RadomeDevice:
                {
                    return new RadomeDeviceEntity( entityContext, (RadomeDeviceObject)dataObject );
                }
                case Kind.AisDevice:
                {
                    return new AisDeviceEntity( entityContext, (AisDeviceObject)dataObject );
                }
                case Kind.RadarDevice:
                {
                    return new RadarDeviceEntity( entityContext, (RadarDeviceObject)dataObject );
                }
                case Kind.WeatherStationDevice:
                {
                    return new WeatherStationDeviceEntity( entityContext, (WeatherStationDeviceObject)dataObject );
                }
                case Kind.Facility:
                {
                    return new FacilityEntity( entityContext, (FacilityObject)dataObject );
                }
                case Kind.Aircraft:
                {
                    return new AircraftEntity( entityContext, (AircraftObject)dataObject );
                }
                case Kind.AisAidToNavigation:
                {
                    return new AisAidToNavigationEntity( entityContext, (AisAidToNavigationObject)dataObject );
                }
                case Kind.Vehicle:
                {
                    return new VehicleEntity( entityContext, (VehicleObject)dataObject );
                }
                case Kind.Vessel:
                {
                    return new VesselEntity( entityContext, (VesselObject)dataObject );
                }
                case Kind.ItemIdentityLink:
                {
                    return new ItemIdentityLinkEntity( entityContext, (ItemIdentityLinkObject)dataObject );
                }
                case Kind.ItemParentChildLink:
                {
                    return new ItemParentChildLinkEntity( entityContext, (ItemParentChildLinkObject)dataObject );
                }
                case Kind.LineInputDeviceCommand:
                {
                    return new LineInputDeviceCommandEntity( entityContext, (LineInputDeviceCommandObject)dataObject );
                }
                case Kind.LineInputDeviceCommandReply:
                {
                    return new LineInputDeviceCommandReplyEntity( entityContext, (LineInputDeviceCommandReplyObject)dataObject );
                }
                case Kind.LineInputDeviceConfiguration:
                {
                    return new LineInputDeviceConfigurationEntity( entityContext, (LineInputDeviceConfigurationObject)dataObject );
                }
                case Kind.LineInputMessageRouting:
                {
                    return new LineInputMessageRoutingEntity( entityContext, (LineInputMessageRoutingObject)dataObject );
                }
                case Kind.LineInputMessageRoutingDestination:
                {
                    return new LineInputMessageRoutingDestinationEntity( entityContext, (LineInputMessageRoutingDestinationObject)dataObject );
                }
                case Kind.LineInputWhiteListEntry:
                {
                    return new LineInputWhiteListEntryEntity( entityContext, (LineInputWhiteListEntryObject)dataObject );
                }
                case Kind.LogApplication:
                {
                    return new LogApplicationEntity( entityContext, (LogApplicationObject)dataObject );
                }
                case Kind.LogApplicationConfiguration:
                {
                    return new LogApplicationConfigurationEntity( entityContext, (LogApplicationConfigurationObject)dataObject );
                }
                case Kind.LogHost:
                {
                    return new LogHostEntity( entityContext, (LogHostObject)dataObject );
                }
                case Kind.LogHostConfiguration:
                {
                    return new LogHostConfigurationEntity( entityContext, (LogHostConfigurationObject)dataObject );
                }
                case Kind.LogLocation:
                {
                    return new LogLocationEntity( entityContext, (LogLocationObject)dataObject );
                }
                case Kind.LogProcess:
                {
                    return new LogProcessEntity( entityContext, (LogProcessObject)dataObject );
                }
                case Kind.LogRecord:
                {
                    return new LogRecordEntity( entityContext, (LogRecordObject)dataObject );
                }
                case Kind.LogThread:
                {
                    return new LogThreadEntity( entityContext, (LogThreadObject)dataObject );
                }
                case Kind.LogTraceEntry:
                {
                    return new LogTraceEntryEntity( entityContext, (LogTraceEntryObject)dataObject );
                }
                case Kind.MapElement:
                {
                    return new MapElementEntity( entityContext, (MapElementObject)dataObject );
                }
                case Kind.MapInfo:
                {
                    return new MapInfoEntity( entityContext, (MapInfoObject)dataObject );
                }
                case Kind.MapServiceOptions:
                {
                    return new MapServiceOptionsEntity( entityContext, (MapServiceOptionsObject)dataObject );
                }
                case Kind.MaritimeIdentificationDigits:
                {
                    return new MaritimeIdentificationDigitsEntity( entityContext, (MaritimeIdentificationDigitsObject)dataObject );
                }
                case Kind.MediaProxySession:
                {
                    return new MediaProxySessionEntity( entityContext, (MediaProxySessionObject)dataObject );
                }
                case Kind.MediaProxySessionFile:
                {
                    return new MediaProxySessionFileEntity( entityContext, (MediaProxySessionFileObject)dataObject );
                }
                case Kind.MediaProxySessionOptions:
                {
                    return new MediaProxySessionOptionsEntity( entityContext, (MediaProxySessionOptionsObject)dataObject );
                }
                case Kind.MediaService:
                {
                    return new MediaServiceEntity( entityContext, (MediaServiceObject)dataObject );
                }
                case Kind.MediaServiceOptions:
                {
                    return new MediaServiceOptionsEntity( entityContext, (MediaServiceOptionsObject)dataObject );
                }
                case Kind.ElementType:
                {
                    return new ElementTypeEntity( entityContext, (ElementTypeObject)dataObject );
                }
                case Kind.Namespace:
                {
                    return new NamespaceEntity( entityContext, (NamespaceObject)dataObject );
                }
                case Kind.OilSpill:
                {
                    return new OilSpillEntity( entityContext, (OilSpillObject)dataObject );
                }
                case Kind.OilSpillDetectorCommand:
                {
                    return new OilSpillDetectorCommandEntity( entityContext, (OilSpillDetectorCommandObject)dataObject );
                }
                case Kind.OilSpillDetectorCommandReply:
                {
                    return new OilSpillDetectorCommandReplyEntity( entityContext, (OilSpillDetectorCommandReplyObject)dataObject );
                }
                case Kind.OilSpillDetectorConfiguration:
                {
                    return new OilSpillDetectorConfigurationEntity( entityContext, (OilSpillDetectorConfigurationObject)dataObject );
                }
                case Kind.Position2DTimeseriesValue:
                {
                    return new Position2DTimeseriesValueEntity( entityContext, (Position2DTimeseriesValueObject)dataObject );
                }
                case Kind.Position3DTimeseriesValue:
                {
                    return new Position3DTimeseriesValueEntity( entityContext, (Position3DTimeseriesValueObject)dataObject );
                }
                case Kind.ProcessTrackValueResult:
                {
                    return new ProcessTrackValueResultEntity( entityContext, (ProcessTrackValueResultObject)dataObject );
                }
                case Kind.BinaryProperty:
                {
                    return new BinaryPropertyEntity( entityContext, (BinaryPropertyObject)dataObject );
                }
                case Kind.BooleanProperty:
                {
                    return new BooleanPropertyEntity( entityContext, (BooleanPropertyObject)dataObject );
                }
                case Kind.ByteProperty:
                {
                    return new BytePropertyEntity( entityContext, (BytePropertyObject)dataObject );
                }
                case Kind.DateTimeProperty:
                {
                    return new DateTimePropertyEntity( entityContext, (DateTimePropertyObject)dataObject );
                }
                case Kind.DoubleProperty:
                {
                    return new DoublePropertyEntity( entityContext, (DoublePropertyObject)dataObject );
                }
                case Kind.GuidProperty:
                {
                    return new GuidPropertyEntity( entityContext, (GuidPropertyObject)dataObject );
                }
                case Kind.Int16Property:
                {
                    return new Int16PropertyEntity( entityContext, (Int16PropertyObject)dataObject );
                }
                case Kind.Int32Property:
                {
                    return new Int32PropertyEntity( entityContext, (Int32PropertyObject)dataObject );
                }
                case Kind.Int64Property:
                {
                    return new Int64PropertyEntity( entityContext, (Int64PropertyObject)dataObject );
                }
                case Kind.ReferenceProperty:
                {
                    return new ReferencePropertyEntity( entityContext, (ReferencePropertyObject)dataObject );
                }
                case Kind.SByteProperty:
                {
                    return new SBytePropertyEntity( entityContext, (SBytePropertyObject)dataObject );
                }
                case Kind.SingleProperty:
                {
                    return new SinglePropertyEntity( entityContext, (SinglePropertyObject)dataObject );
                }
                case Kind.StringProperty:
                {
                    return new StringPropertyEntity( entityContext, (StringPropertyObject)dataObject );
                }
                case Kind.BinaryTimeseriesProperty:
                {
                    return new BinaryTimeseriesPropertyEntity( entityContext, (BinaryTimeseriesPropertyObject)dataObject );
                }
                case Kind.BooleanTimeseriesProperty:
                {
                    return new BooleanTimeseriesPropertyEntity( entityContext, (BooleanTimeseriesPropertyObject)dataObject );
                }
                case Kind.ByteTimeseriesProperty:
                {
                    return new ByteTimeseriesPropertyEntity( entityContext, (ByteTimeseriesPropertyObject)dataObject );
                }
                case Kind.DateTimeTimeseriesProperty:
                {
                    return new DateTimeTimeseriesPropertyEntity( entityContext, (DateTimeTimeseriesPropertyObject)dataObject );
                }
                case Kind.DoubleTimeseriesProperty:
                {
                    return new DoubleTimeseriesPropertyEntity( entityContext, (DoubleTimeseriesPropertyObject)dataObject );
                }
                case Kind.GuidTimeseriesProperty:
                {
                    return new GuidTimeseriesPropertyEntity( entityContext, (GuidTimeseriesPropertyObject)dataObject );
                }
                case Kind.Int16TimeseriesProperty:
                {
                    return new Int16TimeseriesPropertyEntity( entityContext, (Int16TimeseriesPropertyObject)dataObject );
                }
                case Kind.Int32TimeseriesProperty:
                {
                    return new Int32TimeseriesPropertyEntity( entityContext, (Int32TimeseriesPropertyObject)dataObject );
                }
                case Kind.Int64TimeseriesProperty:
                {
                    return new Int64TimeseriesPropertyEntity( entityContext, (Int64TimeseriesPropertyObject)dataObject );
                }
                case Kind.ReferenceTimeseriesProperty:
                {
                    return new ReferenceTimeseriesPropertyEntity( entityContext, (ReferenceTimeseriesPropertyObject)dataObject );
                }
                case Kind.SByteTimeseriesProperty:
                {
                    return new SByteTimeseriesPropertyEntity( entityContext, (SByteTimeseriesPropertyObject)dataObject );
                }
                case Kind.SingleTimeseriesProperty:
                {
                    return new SingleTimeseriesPropertyEntity( entityContext, (SingleTimeseriesPropertyObject)dataObject );
                }
                case Kind.StringTimeseriesProperty:
                {
                    return new StringTimeseriesPropertyEntity( entityContext, (StringTimeseriesPropertyObject)dataObject );
                }
                case Kind.TimeSpanTimeseriesProperty:
                {
                    return new TimeSpanTimeseriesPropertyEntity( entityContext, (TimeSpanTimeseriesPropertyObject)dataObject );
                }
                case Kind.UInt16TimeseriesProperty:
                {
                    return new UInt16TimeseriesPropertyEntity( entityContext, (UInt16TimeseriesPropertyObject)dataObject );
                }
                case Kind.UInt32TimeseriesProperty:
                {
                    return new UInt32TimeseriesPropertyEntity( entityContext, (UInt32TimeseriesPropertyObject)dataObject );
                }
                case Kind.UInt64TimeseriesProperty:
                {
                    return new UInt64TimeseriesPropertyEntity( entityContext, (UInt64TimeseriesPropertyObject)dataObject );
                }
                case Kind.TimeSpanProperty:
                {
                    return new TimeSpanPropertyEntity( entityContext, (TimeSpanPropertyObject)dataObject );
                }
                case Kind.UInt16Property:
                {
                    return new UInt16PropertyEntity( entityContext, (UInt16PropertyObject)dataObject );
                }
                case Kind.UInt32Property:
                {
                    return new UInt32PropertyEntity( entityContext, (UInt32PropertyObject)dataObject );
                }
                case Kind.UInt64Property:
                {
                    return new UInt64PropertyEntity( entityContext, (UInt64PropertyObject)dataObject );
                }
                case Kind.BinaryPropertyDefinition:
                {
                    return new BinaryPropertyDefinitionEntity( entityContext, (BinaryPropertyDefinitionObject)dataObject );
                }
                case Kind.BooleanPropertyDefinition:
                {
                    return new BooleanPropertyDefinitionEntity( entityContext, (BooleanPropertyDefinitionObject)dataObject );
                }
                case Kind.BytePropertyDefinition:
                {
                    return new BytePropertyDefinitionEntity( entityContext, (BytePropertyDefinitionObject)dataObject );
                }
                case Kind.DateTimePropertyDefinition:
                {
                    return new DateTimePropertyDefinitionEntity( entityContext, (DateTimePropertyDefinitionObject)dataObject );
                }
                case Kind.DoublePropertyDefinition:
                {
                    return new DoublePropertyDefinitionEntity( entityContext, (DoublePropertyDefinitionObject)dataObject );
                }
                case Kind.GuidPropertyDefinition:
                {
                    return new GuidPropertyDefinitionEntity( entityContext, (GuidPropertyDefinitionObject)dataObject );
                }
                case Kind.Int16PropertyDefinition:
                {
                    return new Int16PropertyDefinitionEntity( entityContext, (Int16PropertyDefinitionObject)dataObject );
                }
                case Kind.Int32PropertyDefinition:
                {
                    return new Int32PropertyDefinitionEntity( entityContext, (Int32PropertyDefinitionObject)dataObject );
                }
                case Kind.Int64PropertyDefinition:
                {
                    return new Int64PropertyDefinitionEntity( entityContext, (Int64PropertyDefinitionObject)dataObject );
                }
                case Kind.ReferencePropertyDefinition:
                {
                    return new ReferencePropertyDefinitionEntity( entityContext, (ReferencePropertyDefinitionObject)dataObject );
                }
                case Kind.SBytePropertyDefinition:
                {
                    return new SBytePropertyDefinitionEntity( entityContext, (SBytePropertyDefinitionObject)dataObject );
                }
                case Kind.SinglePropertyDefinition:
                {
                    return new SinglePropertyDefinitionEntity( entityContext, (SinglePropertyDefinitionObject)dataObject );
                }
                case Kind.StringPropertyDefinition:
                {
                    return new StringPropertyDefinitionEntity( entityContext, (StringPropertyDefinitionObject)dataObject );
                }
                case Kind.BinaryTimeseriesPropertyDefinition:
                {
                    return new BinaryTimeseriesPropertyDefinitionEntity( entityContext, (BinaryTimeseriesPropertyDefinitionObject)dataObject );
                }
                case Kind.BooleanTimeseriesPropertyDefinition:
                {
                    return new BooleanTimeseriesPropertyDefinitionEntity( entityContext, (BooleanTimeseriesPropertyDefinitionObject)dataObject );
                }
                case Kind.ByteTimeseriesPropertyDefinition:
                {
                    return new ByteTimeseriesPropertyDefinitionEntity( entityContext, (ByteTimeseriesPropertyDefinitionObject)dataObject );
                }
                case Kind.DateTimeTimeseriesPropertyDefinition:
                {
                    return new DateTimeTimeseriesPropertyDefinitionEntity( entityContext, (DateTimeTimeseriesPropertyDefinitionObject)dataObject );
                }
                case Kind.DoubleTimeseriesPropertyDefinition:
                {
                    return new DoubleTimeseriesPropertyDefinitionEntity( entityContext, (DoubleTimeseriesPropertyDefinitionObject)dataObject );
                }
                case Kind.GuidTimeseriesPropertyDefinition:
                {
                    return new GuidTimeseriesPropertyDefinitionEntity( entityContext, (GuidTimeseriesPropertyDefinitionObject)dataObject );
                }
                case Kind.Int16TimeseriesPropertyDefinition:
                {
                    return new Int16TimeseriesPropertyDefinitionEntity( entityContext, (Int16TimeseriesPropertyDefinitionObject)dataObject );
                }
                case Kind.Int32TimeseriesPropertyDefinition:
                {
                    return new Int32TimeseriesPropertyDefinitionEntity( entityContext, (Int32TimeseriesPropertyDefinitionObject)dataObject );
                }
                case Kind.Int64TimeseriesPropertyDefinition:
                {
                    return new Int64TimeseriesPropertyDefinitionEntity( entityContext, (Int64TimeseriesPropertyDefinitionObject)dataObject );
                }
                case Kind.ReferenceTimeseriesPropertyDefinition:
                {
                    return new ReferenceTimeseriesPropertyDefinitionEntity( entityContext, (ReferenceTimeseriesPropertyDefinitionObject)dataObject );
                }
                case Kind.SByteTimeseriesPropertyDefinition:
                {
                    return new SByteTimeseriesPropertyDefinitionEntity( entityContext, (SByteTimeseriesPropertyDefinitionObject)dataObject );
                }
                case Kind.SingleTimeseriesPropertyDefinition:
                {
                    return new SingleTimeseriesPropertyDefinitionEntity( entityContext, (SingleTimeseriesPropertyDefinitionObject)dataObject );
                }
                case Kind.StringTimeseriesPropertyDefinition:
                {
                    return new StringTimeseriesPropertyDefinitionEntity( entityContext, (StringTimeseriesPropertyDefinitionObject)dataObject );
                }
                case Kind.TimeSpanTimeseriesPropertyDefinition:
                {
                    return new TimeSpanTimeseriesPropertyDefinitionEntity( entityContext, (TimeSpanTimeseriesPropertyDefinitionObject)dataObject );
                }
                case Kind.UInt16TimeseriesPropertyDefinition:
                {
                    return new UInt16TimeseriesPropertyDefinitionEntity( entityContext, (UInt16TimeseriesPropertyDefinitionObject)dataObject );
                }
                case Kind.UInt32TimeseriesPropertyDefinition:
                {
                    return new UInt32TimeseriesPropertyDefinitionEntity( entityContext, (UInt32TimeseriesPropertyDefinitionObject)dataObject );
                }
                case Kind.UInt64TimeseriesPropertyDefinition:
                {
                    return new UInt64TimeseriesPropertyDefinitionEntity( entityContext, (UInt64TimeseriesPropertyDefinitionObject)dataObject );
                }
                case Kind.TimeSpanPropertyDefinition:
                {
                    return new TimeSpanPropertyDefinitionEntity( entityContext, (TimeSpanPropertyDefinitionObject)dataObject );
                }
                case Kind.UInt16PropertyDefinition:
                {
                    return new UInt16PropertyDefinitionEntity( entityContext, (UInt16PropertyDefinitionObject)dataObject );
                }
                case Kind.UInt32PropertyDefinition:
                {
                    return new UInt32PropertyDefinitionEntity( entityContext, (UInt32PropertyDefinitionObject)dataObject );
                }
                case Kind.UInt64PropertyDefinition:
                {
                    return new UInt64PropertyDefinitionEntity( entityContext, (UInt64PropertyDefinitionObject)dataObject );
                }
                case Kind.RadarAlarmStatus:
                {
                    return new RadarAlarmStatusEntity( entityContext, (RadarAlarmStatusObject)dataObject );
                }
                case Kind.RadarCommand:
                {
                    return new RadarCommandEntity( entityContext, (RadarCommandObject)dataObject );
                }
                case Kind.RadarCommandGetStatus:
                {
                    return new RadarCommandGetStatusEntity( entityContext, (RadarCommandGetStatusObject)dataObject );
                }
                case Kind.RadarCommandReply:
                {
                    return new RadarCommandReplyEntity( entityContext, (RadarCommandReplyObject)dataObject );
                }
                case Kind.RadarCommandReplyGetStatus:
                {
                    return new RadarCommandReplyGetStatusEntity( entityContext, (RadarCommandReplyGetStatusObject)dataObject );
                }
                case Kind.RadarConfiguration:
                {
                    return new RadarConfigurationEntity( entityContext, (RadarConfigurationObject)dataObject );
                }
                case Kind.RadarImage:
                {
                    return new RadarImageEntity( entityContext, (RadarImageObject)dataObject );
                }
                case Kind.RadarRawTrackTable:
                {
                    return new RadarRawTrackTableEntity( entityContext, (RadarRawTrackTableObject)dataObject );
                }
                case Kind.RadarStatus:
                {
                    return new RadarStatusEntity( entityContext, (RadarStatusObject)dataObject );
                }
                case Kind.RadioCommand:
                {
                    return new RadioCommandEntity( entityContext, (RadioCommandObject)dataObject );
                }
                case Kind.RadioCommandReply:
                {
                    return new RadioCommandReplyEntity( entityContext, (RadioCommandReplyObject)dataObject );
                }
                case Kind.RadioConfiguration:
                {
                    return new RadioConfigurationEntity( entityContext, (RadioConfigurationObject)dataObject );
                }
                case Kind.RadomeCommand:
                {
                    return new RadomeCommandEntity( entityContext, (RadomeCommandObject)dataObject );
                }
                case Kind.RadomeCommandReply:
                {
                    return new RadomeCommandReplyEntity( entityContext, (RadomeCommandReplyObject)dataObject );
                }
                case Kind.RadomeConfiguration:
                {
                    return new RadomeConfigurationEntity( entityContext, (RadomeConfigurationObject)dataObject );
                }
                case Kind.ReferenceTimeseriesValue:
                {
                    return new ReferenceTimeseriesValueEntity( entityContext, (ReferenceTimeseriesValueObject)dataObject );
                }
                case Kind.SByteTimeseriesValue:
                {
                    return new SByteTimeseriesValueEntity( entityContext, (SByteTimeseriesValueObject)dataObject );
                }
                case Kind.SecurityDomain:
                {
                    return new SecurityDomainEntity( entityContext, (SecurityDomainObject)dataObject );
                }
                case Kind.SecurityLogin:
                {
                    return new SecurityLoginEntity( entityContext, (SecurityLoginObject)dataObject );
                }
                case Kind.SecurityRole:
                {
                    return new SecurityRoleEntity( entityContext, (SecurityRoleObject)dataObject );
                }
                case Kind.SecurityIdentifierRoleLink:
                {
                    return new SecurityIdentifierRoleLinkEntity( entityContext, (SecurityIdentifierRoleLinkObject)dataObject );
                }
                case Kind.SecurityLoginSession:
                {
                    return new SecurityLoginSessionEntity( entityContext, (SecurityLoginSessionObject)dataObject );
                }
                case Kind.SecurityPermission:
                {
                    return new SecurityPermissionEntity( entityContext, (SecurityPermissionObject)dataObject );
                }
                case Kind.SingleTimeseriesValue:
                {
                    return new SingleTimeseriesValueEntity( entityContext, (SingleTimeseriesValueObject)dataObject );
                }
                case Kind.StringTimeseriesValue:
                {
                    return new StringTimeseriesValueEntity( entityContext, (StringTimeseriesValueObject)dataObject );
                }
                case Kind.BinaryTimeseries:
                {
                    return new BinaryTimeseriesEntity( entityContext, (BinaryTimeseriesObject)dataObject );
                }
                case Kind.BooleanTimeseries:
                {
                    return new BooleanTimeseriesEntity( entityContext, (BooleanTimeseriesObject)dataObject );
                }
                case Kind.AisAidToNavigationOffPositionTimeseries:
                {
                    return new AisAidToNavigationOffPositionTimeseriesEntity( entityContext, (AisAidToNavigationOffPositionTimeseriesObject)dataObject );
                }
                case Kind.DeviceEnabledTimeseries:
                {
                    return new DeviceEnabledTimeseriesEntity( entityContext, (DeviceEnabledTimeseriesObject)dataObject );
                }
                case Kind.RadarAutomaticSensitivityTimeControlTimeseries:
                {
                    return new RadarAutomaticSensitivityTimeControlTimeseriesEntity( entityContext, (RadarAutomaticSensitivityTimeControlTimeseriesObject)dataObject );
                }
                case Kind.RadarBlankSector1Timeseries:
                {
                    return new RadarBlankSector1TimeseriesEntity( entityContext, (RadarBlankSector1TimeseriesObject)dataObject );
                }
                case Kind.RadarBlankSector2Timeseries:
                {
                    return new RadarBlankSector2TimeseriesEntity( entityContext, (RadarBlankSector2TimeseriesObject)dataObject );
                }
                case Kind.RadarEnableAutomaticFrequencyControlTimeseries:
                {
                    return new RadarEnableAutomaticFrequencyControlTimeseriesEntity( entityContext, (RadarEnableAutomaticFrequencyControlTimeseriesObject)dataObject );
                }
                case Kind.RadarEnableFastTimeConstantTimeseries:
                {
                    return new RadarEnableFastTimeConstantTimeseriesEntity( entityContext, (RadarEnableFastTimeConstantTimeseriesObject)dataObject );
                }
                case Kind.RadarEnableSensitivityTimeControlTimeseries:
                {
                    return new RadarEnableSensitivityTimeControlTimeseriesEntity( entityContext, (RadarEnableSensitivityTimeControlTimeseriesObject)dataObject );
                }
                case Kind.RadarPowerOnTimeseries:
                {
                    return new RadarPowerOnTimeseriesEntity( entityContext, (RadarPowerOnTimeseriesObject)dataObject );
                }
                case Kind.RadarSaveSettingsTimeseries:
                {
                    return new RadarSaveSettingsTimeseriesEntity( entityContext, (RadarSaveSettingsTimeseriesObject)dataObject );
                }
                case Kind.RadarTrackingTimeseries:
                {
                    return new RadarTrackingTimeseriesEntity( entityContext, (RadarTrackingTimeseriesObject)dataObject );
                }
                case Kind.MediaProxySessionEnabledTimeseries:
                {
                    return new MediaProxySessionEnabledTimeseriesEntity( entityContext, (MediaProxySessionEnabledTimeseriesObject)dataObject );
                }
                case Kind.MediaServiceEnabledTimeseries:
                {
                    return new MediaServiceEnabledTimeseriesEntity( entityContext, (MediaServiceEnabledTimeseriesObject)dataObject );
                }
                case Kind.ByteTimeseries:
                {
                    return new ByteTimeseriesEntity( entityContext, (ByteTimeseriesObject)dataObject );
                }
                case Kind.DateTimeTimeseries:
                {
                    return new DateTimeTimeseriesEntity( entityContext, (DateTimeTimeseriesObject)dataObject );
                }
                case Kind.DoubleTimeseries:
                {
                    return new DoubleTimeseriesEntity( entityContext, (DoubleTimeseriesObject)dataObject );
                }
                case Kind.GNSSAltitudeTimeseries:
                {
                    return new GNSSAltitudeTimeseriesEntity( entityContext, (GNSSAltitudeTimeseriesObject)dataObject );
                }
                case Kind.GNSSLatitudeTimeseries:
                {
                    return new GNSSLatitudeTimeseriesEntity( entityContext, (GNSSLatitudeTimeseriesObject)dataObject );
                }
                case Kind.GNSSLongitudeTimeseries:
                {
                    return new GNSSLongitudeTimeseriesEntity( entityContext, (GNSSLongitudeTimeseriesObject)dataObject );
                }
                case Kind.GyroCourseTimeseries:
                {
                    return new GyroCourseTimeseriesEntity( entityContext, (GyroCourseTimeseriesObject)dataObject );
                }
                case Kind.GyroHeadingMagneticNorthTimeseries:
                {
                    return new GyroHeadingMagneticNorthTimeseriesEntity( entityContext, (GyroHeadingMagneticNorthTimeseriesObject)dataObject );
                }
                case Kind.GyroHeadingTrueNorthTimeseries:
                {
                    return new GyroHeadingTrueNorthTimeseriesEntity( entityContext, (GyroHeadingTrueNorthTimeseriesObject)dataObject );
                }
                case Kind.GyroPitchTimeseries:
                {
                    return new GyroPitchTimeseriesEntity( entityContext, (GyroPitchTimeseriesObject)dataObject );
                }
                case Kind.GyroRateOfTurnTimeseries:
                {
                    return new GyroRateOfTurnTimeseriesEntity( entityContext, (GyroRateOfTurnTimeseriesObject)dataObject );
                }
                case Kind.GyroRollTimeseries:
                {
                    return new GyroRollTimeseriesEntity( entityContext, (GyroRollTimeseriesObject)dataObject );
                }
                case Kind.GyroSpeedTimeseries:
                {
                    return new GyroSpeedTimeseriesEntity( entityContext, (GyroSpeedTimeseriesObject)dataObject );
                }
                case Kind.RadarLatitudeTimeseries:
                {
                    return new RadarLatitudeTimeseriesEntity( entityContext, (RadarLatitudeTimeseriesObject)dataObject );
                }
                case Kind.RadarLongitudeTimeseries:
                {
                    return new RadarLongitudeTimeseriesEntity( entityContext, (RadarLongitudeTimeseriesObject)dataObject );
                }
                case Kind.RadomeDewPointTimeseries:
                {
                    return new RadomeDewPointTimeseriesEntity( entityContext, (RadomeDewPointTimeseriesObject)dataObject );
                }
                case Kind.RadomePressureTimeseries:
                {
                    return new RadomePressureTimeseriesEntity( entityContext, (RadomePressureTimeseriesObject)dataObject );
                }
                case Kind.RadomeTemperatureTimeseries:
                {
                    return new RadomeTemperatureTimeseriesEntity( entityContext, (RadomeTemperatureTimeseriesObject)dataObject );
                }
                case Kind.VesselDraughtTimeseries:
                {
                    return new VesselDraughtTimeseriesEntity( entityContext, (VesselDraughtTimeseriesObject)dataObject );
                }
                case Kind.ViewLatitudeTimeseries:
                {
                    return new ViewLatitudeTimeseriesEntity( entityContext, (ViewLatitudeTimeseriesObject)dataObject );
                }
                case Kind.ViewLongitudeTimeseries:
                {
                    return new ViewLongitudeTimeseriesEntity( entityContext, (ViewLongitudeTimeseriesObject)dataObject );
                }
                case Kind.ViewZoomLevelTimeseries:
                {
                    return new ViewZoomLevelTimeseriesEntity( entityContext, (ViewZoomLevelTimeseriesObject)dataObject );
                }
                case Kind.WeatherStationAbsoluteHumidityTimeseries:
                {
                    return new WeatherStationAbsoluteHumidityTimeseriesEntity( entityContext, (WeatherStationAbsoluteHumidityTimeseriesObject)dataObject );
                }
                case Kind.WeatherStationAirTemperatureTimeseries:
                {
                    return new WeatherStationAirTemperatureTimeseriesEntity( entityContext, (WeatherStationAirTemperatureTimeseriesObject)dataObject );
                }
                case Kind.WeatherStationBarometricPressureTimeseries:
                {
                    return new WeatherStationBarometricPressureTimeseriesEntity( entityContext, (WeatherStationBarometricPressureTimeseriesObject)dataObject );
                }
                case Kind.WeatherStationDewPointTimeseries:
                {
                    return new WeatherStationDewPointTimeseriesEntity( entityContext, (WeatherStationDewPointTimeseriesObject)dataObject );
                }
                case Kind.WeatherStationRelativeHumidityTimeseries:
                {
                    return new WeatherStationRelativeHumidityTimeseriesEntity( entityContext, (WeatherStationRelativeHumidityTimeseriesObject)dataObject );
                }
                case Kind.WeatherStationWaterTemperatureTimeseries:
                {
                    return new WeatherStationWaterTemperatureTimeseriesEntity( entityContext, (WeatherStationWaterTemperatureTimeseriesObject)dataObject );
                }
                case Kind.WeatherStationWindDirectionTimeseries:
                {
                    return new WeatherStationWindDirectionTimeseriesEntity( entityContext, (WeatherStationWindDirectionTimeseriesObject)dataObject );
                }
                case Kind.WeatherStationWindSpeedTimeseries:
                {
                    return new WeatherStationWindSpeedTimeseriesEntity( entityContext, (WeatherStationWindSpeedTimeseriesObject)dataObject );
                }
                case Kind.GeoPosition2DTimeseries:
                {
                    return new GeoPosition2DTimeseriesEntity( entityContext, (GeoPosition2DTimeseriesObject)dataObject );
                }
                case Kind.AisAidToNavigationPositionTimeseries:
                {
                    return new AisAidToNavigationPositionTimeseriesEntity( entityContext, (AisAidToNavigationPositionTimeseriesObject)dataObject );
                }
                case Kind.GeoPosition3DTimeseries:
                {
                    return new GeoPosition3DTimeseriesEntity( entityContext, (GeoPosition3DTimeseriesObject)dataObject );
                }
                case Kind.GuidTimeseries:
                {
                    return new GuidTimeseriesEntity( entityContext, (GuidTimeseriesObject)dataObject );
                }
                case Kind.Int16Timeseries:
                {
                    return new Int16TimeseriesEntity( entityContext, (Int16TimeseriesObject)dataObject );
                }
                case Kind.Int32Timeseries:
                {
                    return new Int32TimeseriesEntity( entityContext, (Int32TimeseriesObject)dataObject );
                }
                case Kind.RadarAzimuthOffsetTimeseries:
                {
                    return new RadarAzimuthOffsetTimeseriesEntity( entityContext, (RadarAzimuthOffsetTimeseriesObject)dataObject );
                }
                case Kind.RadarFastTimeConstantLevelTimeseries:
                {
                    return new RadarFastTimeConstantLevelTimeseriesEntity( entityContext, (RadarFastTimeConstantLevelTimeseriesObject)dataObject );
                }
                case Kind.RadarFastTimeConstantModeTimeseries:
                {
                    return new RadarFastTimeConstantModeTimeseriesEntity( entityContext, (RadarFastTimeConstantModeTimeseriesObject)dataObject );
                }
                case Kind.RadarPulseTimeseries:
                {
                    return new RadarPulseTimeseriesEntity( entityContext, (RadarPulseTimeseriesObject)dataObject );
                }
                case Kind.RadarSector1EndTimeseries:
                {
                    return new RadarSector1EndTimeseriesEntity( entityContext, (RadarSector1EndTimeseriesObject)dataObject );
                }
                case Kind.RadarSector1StartTimeseries:
                {
                    return new RadarSector1StartTimeseriesEntity( entityContext, (RadarSector1StartTimeseriesObject)dataObject );
                }
                case Kind.RadarSector2EndTimeseries:
                {
                    return new RadarSector2EndTimeseriesEntity( entityContext, (RadarSector2EndTimeseriesObject)dataObject );
                }
                case Kind.RadarSector2StartTimeseries:
                {
                    return new RadarSector2StartTimeseriesEntity( entityContext, (RadarSector2StartTimeseriesObject)dataObject );
                }
                case Kind.RadarSensitivityTimeControlLevelTimeseries:
                {
                    return new RadarSensitivityTimeControlLevelTimeseriesEntity( entityContext, (RadarSensitivityTimeControlLevelTimeseriesObject)dataObject );
                }
                case Kind.RadarTuningTimeseries:
                {
                    return new RadarTuningTimeseriesEntity( entityContext, (RadarTuningTimeseriesObject)dataObject );
                }
                case Kind.VesselPersonsOnBoardTimeseries:
                {
                    return new VesselPersonsOnBoardTimeseriesEntity( entityContext, (VesselPersonsOnBoardTimeseriesObject)dataObject );
                }
                case Kind.Int64Timeseries:
                {
                    return new Int64TimeseriesEntity( entityContext, (Int64TimeseriesObject)dataObject );
                }
                case Kind.Position2DTimeseries:
                {
                    return new Position2DTimeseriesEntity( entityContext, (Position2DTimeseriesObject)dataObject );
                }
                case Kind.Position3DTimeseries:
                {
                    return new Position3DTimeseriesEntity( entityContext, (Position3DTimeseriesObject)dataObject );
                }
                case Kind.ReferenceTimeseries:
                {
                    return new ReferenceTimeseriesEntity( entityContext, (ReferenceTimeseriesObject)dataObject );
                }
                case Kind.SByteTimeseries:
                {
                    return new SByteTimeseriesEntity( entityContext, (SByteTimeseriesObject)dataObject );
                }
                case Kind.SingleTimeseries:
                {
                    return new SingleTimeseriesEntity( entityContext, (SingleTimeseriesObject)dataObject );
                }
                case Kind.StringTimeseries:
                {
                    return new StringTimeseriesEntity( entityContext, (StringTimeseriesObject)dataObject );
                }
                case Kind.TimeSpanTimeseries:
                {
                    return new TimeSpanTimeseriesEntity( entityContext, (TimeSpanTimeseriesObject)dataObject );
                }
                case Kind.UInt16Timeseries:
                {
                    return new UInt16TimeseriesEntity( entityContext, (UInt16TimeseriesObject)dataObject );
                }
                case Kind.UInt32Timeseries:
                {
                    return new UInt32TimeseriesEntity( entityContext, (UInt32TimeseriesObject)dataObject );
                }
                case Kind.RadomeStatusTimeseries:
                {
                    return new RadomeStatusTimeseriesEntity( entityContext, (RadomeStatusTimeseriesObject)dataObject );
                }
                case Kind.UInt64Timeseries:
                {
                    return new UInt64TimeseriesEntity( entityContext, (UInt64TimeseriesObject)dataObject );
                }
                case Kind.TimeseriesCatalog:
                {
                    return new TimeseriesCatalogEntity( entityContext, (TimeseriesCatalogObject)dataObject );
                }
                case Kind.TimeseriesInfo:
                {
                    return new TimeseriesInfoEntity( entityContext, (TimeseriesInfoObject)dataObject );
                }
                case Kind.TimeSpanTimeseriesValue:
                {
                    return new TimeSpanTimeseriesValueEntity( entityContext, (TimeSpanTimeseriesValueObject)dataObject );
                }
                case Kind.TrackableItemTrackLink:
                {
                    return new TrackableItemTrackLinkEntity( entityContext, (TrackableItemTrackLinkObject)dataObject );
                }
                case Kind.Track:
                {
                    return new TrackEntity( entityContext, (TrackObject)dataObject );
                }
                case Kind.Track3D:
                {
                    return new Track3DEntity( entityContext, (Track3DObject)dataObject );
                }
                case Kind.TrackerFilterParameters:
                {
                    return new TrackerFilterParametersEntity( entityContext, (TrackerFilterParametersObject)dataObject );
                }
                case Kind.TrackerFilterParametersConfiguration:
                {
                    return new TrackerFilterParametersConfigurationEntity( entityContext, (TrackerFilterParametersConfigurationObject)dataObject );
                }
                case Kind.TrackInfo:
                {
                    return new TrackInfoEntity( entityContext, (TrackInfoObject)dataObject );
                }
                case Kind.TrackingServiceOptions:
                {
                    return new TrackingServiceOptionsEntity( entityContext, (TrackingServiceOptionsObject)dataObject );
                }
                case Kind.TrackLink:
                {
                    return new TrackLinkEntity( entityContext, (TrackLinkObject)dataObject );
                }
                case Kind.TrackValue:
                {
                    return new TrackValueEntity( entityContext, (TrackValueObject)dataObject );
                }
                case Kind.TrackValue3D:
                {
                    return new TrackValue3DEntity( entityContext, (TrackValue3DObject)dataObject );
                }
                case Kind.UInt16TimeseriesValue:
                {
                    return new UInt16TimeseriesValueEntity( entityContext, (UInt16TimeseriesValueObject)dataObject );
                }
                case Kind.UInt32TimeseriesValue:
                {
                    return new UInt32TimeseriesValueEntity( entityContext, (UInt32TimeseriesValueObject)dataObject );
                }
                case Kind.UInt64TimeseriesValue:
                {
                    return new UInt64TimeseriesValueEntity( entityContext, (UInt64TimeseriesValueObject)dataObject );
                }
                case Kind.VehicleType:
                {
                    return new VehicleTypeEntity( entityContext, (VehicleTypeObject)dataObject );
                }
                case Kind.VesselType:
                {
                    return new VesselTypeEntity( entityContext, (VesselTypeObject)dataObject );
                }
                case Kind.View:
                {
                    return new ViewEntity( entityContext, (ViewObject)dataObject );
                }
                case Kind.ViewCameraLink:
                {
                    return new ViewCameraLinkEntity( entityContext, (ViewCameraLinkObject)dataObject );
                }
                case Kind.ViewTrackerLink:
                {
                    return new ViewTrackerLinkEntity( entityContext, (ViewTrackerLinkObject)dataObject );
                }
                case Kind.WeatherStationCommand:
                {
                    return new WeatherStationCommandEntity( entityContext, (WeatherStationCommandObject)dataObject );
                }
                case Kind.WeatherStationCommandReply:
                {
                    return new WeatherStationCommandReplyEntity( entityContext, (WeatherStationCommandReplyObject)dataObject );
                }
                case Kind.WeatherStationConfiguration:
                {
                    return new WeatherStationConfigurationEntity( entityContext, (WeatherStationConfigurationObject)dataObject );
                }
                case Kind.CircularZone:
                {
                    return new CircularZoneEntity( entityContext, (CircularZoneObject)dataObject );
                }
                case Kind.PolygonZone:
                {
                    return new PolygonZoneEntity( entityContext, (PolygonZoneObject)dataObject );
                }
                case Kind.ZoneExceptions:
                {
                    return new ZoneExceptionsEntity( entityContext, (ZoneExceptionsObject)dataObject );
                }
                case Kind.ZoneExceptionsVesselLink:
                {
                    return new ZoneExceptionsVesselLinkEntity( entityContext, (ZoneExceptionsVesselLinkObject)dataObject );
                }
                case Kind.ZoneTrackAlarm:
                {
                    return new ZoneTrackAlarmEntity( entityContext, (ZoneTrackAlarmObject)dataObject );
                }
                default:
                {
                    throw new ArgumentException($"Cannot create an entity object for kind={kind}.", "kind");
                }
            }
        }
    }
}
