using System;
using System.Collections.Generic;
using System.Diagnostics.CodeAnalysis;
using System.IO;
using System.Runtime.CompilerServices;

using Microsoft.Extensions.Logging;

using Harlinn.Common.Core.Net;
using Harlinn.Common.Core.Net.Collections.Generic;
using Harlinn.Common.Core.Net.Entities;

using Barrelman.Data.Types;

namespace Barrelman.Data.Entities.Changes
{
    public class AircraftTypeByNameEntityIndex
    {
        readonly SortedWeakReferenceList<string, AircraftTypeEntity> _entries = new SortedWeakReferenceList<string, AircraftTypeEntity>( );

        public AircraftTypeByNameEntityIndex( )
        {
        }

        public void Add( AircraftTypeEntity entity )
        {
            if( _entries.TryGetValue(entity.Name, out var weakReference ) )
            {
                weakReference.SetTarget( entity );
            }
            else
            {
                _entries.Add( entity.Name, new WeakReference<AircraftTypeEntity>( entity, false ) );
            }
        }

        public bool GetByName( string name, out AircraftTypeEntity? entity )
        {
            entity = null;
            if ( _entries.TryGetValue( name, out var weakReference ) )
            {
                if ( weakReference.TryGetTarget( out entity ) == false )
                {
                    _entries.Remove( name );
                }
            }
            return _entries.Count > 0;
        }

        public bool GetFrom(string key, [DisallowNull] IList<AircraftTypeEntity> result )
        {
            return _entries.From( key, result );
        }

        public bool GetUntil(string key, [DisallowNull] IList<AircraftTypeEntity> result )
        {
            return _entries.Until( key, result );
        }

        public bool GetOver(string firstKey, string lastKey, [DisallowNull] IList<AircraftTypeEntity> result )
        {
            return _entries.Over( firstKey, lastKey, result );
        }

        public bool GetAll([DisallowNull] IList<AircraftTypeEntity> result )
        {
            return _entries.All( result );
        }

        public AircraftTypeEntity? GetAircraftTypeByName( string name )
        {
            throw new NotImplementedException();
        }

    }
    public class AisDeviceCommandByAisDeviceAndTimestampEntityIndex
    {
        public class ByTimestamp
        {
            readonly SortedListEx<DateTime, ById> _entries = new SortedListEx<DateTime, ById>( );
            List<DateTime> _emptyKeys = new List<DateTime>( );

            public ByTimestamp( )
            {
            }

            void RemoveEmptyKeys( )
            {
                var emptyKeyCount = _emptyKeys.Count;
                for ( int i = 0; i < emptyKeyCount; i++ )
                {
                    _entries.Remove( _emptyKeys[ i ] );
                }
                _emptyKeys.Clear( );
            }

            public bool GetAll([DisallowNull] IList<AisDeviceCommandEntity> result )
            {
                foreach( var entry in _entries )
                {
                    if( entry.Value.GetAll( result ) == false )
                    {
                        _emptyKeys.Add( entry.Key );
                    }
                }
                RemoveEmptyKeys( );
                return _entries.Count > 0;
            }

        }
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, AisDeviceCommandEntity> _entries = new SortedWeakReferenceList<Guid, AisDeviceCommandEntity>( );
            public ById( )
            {
            }

            public void Add( AisDeviceCommandEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<AisDeviceCommandEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out AisDeviceCommandEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<AisDeviceCommandEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<AisDeviceCommandEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<AisDeviceCommandEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<AisDeviceCommandEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<Guid, ByTimestamp> _entries = new SortedListEx<Guid, ByTimestamp>( );

        public AisDeviceCommandByAisDeviceAndTimestampEntityIndex( )
        {
        }

        public List<AisDeviceCommandEntity> GetAisDeviceCommandCollectionByAisDevice( Guid aisDevice )
        {
            throw new NotImplementedException();
        }

        public List<AisDeviceCommandEntity> GetAisDeviceCommandCollectionByAisDeviceAndTimestamp( Guid aisDevice, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<AisDeviceCommandEntity> GetAisDeviceCommandCollectionByAisDeviceAtTimestamp( Guid aisDevice, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<AisDeviceCommandEntity> GetAisDeviceCommandCollectionByAisDeviceFromTimestamp( Guid aisDevice, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<AisDeviceCommandEntity> GetAisDeviceCommandCollectionByAisDeviceUntilTimestamp( Guid aisDevice, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        IList<AisDeviceCommandEntity> GetAisDeviceCommandCollectionByAisDeviceOverTimestamp( Guid aisDevice, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

    }

    public class AisDeviceCommandByTimestampEntityIndex
    {
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, AisDeviceCommandEntity> _entries = new SortedWeakReferenceList<Guid, AisDeviceCommandEntity>( );
            public ById( )
            {
            }

            public void Add( AisDeviceCommandEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<AisDeviceCommandEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out AisDeviceCommandEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<AisDeviceCommandEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<AisDeviceCommandEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<AisDeviceCommandEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<AisDeviceCommandEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<DateTime, ById> _entries = new SortedListEx<DateTime, ById>( );

        public AisDeviceCommandByTimestampEntityIndex( )
        {
        }

        public List<AisDeviceCommandEntity> GetAisDeviceCommandCollectionByTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<AisDeviceCommandEntity> GetAisDeviceCommandCollectionAtTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<AisDeviceCommandEntity> GetAisDeviceCommandCollectionFromTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<AisDeviceCommandEntity> GetAisDeviceCommandCollectionUntilTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        IList<AisDeviceCommandEntity> GetAisDeviceCommandCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

    }

    public class AisDeviceCommandByReplyEntityIndex
    {
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, AisDeviceCommandEntity> _entries = new SortedWeakReferenceList<Guid, AisDeviceCommandEntity>( );
            public ById( )
            {
            }

            public void Add( AisDeviceCommandEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<AisDeviceCommandEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out AisDeviceCommandEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<AisDeviceCommandEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<AisDeviceCommandEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<AisDeviceCommandEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<AisDeviceCommandEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<Guid, ById> _entries = new SortedListEx<Guid, ById>( );

        public AisDeviceCommandByReplyEntityIndex( )
        {
        }

        public List<AisDeviceCommandEntity> GetAisDeviceCommandCollectionByReply( Guid? reply )
        {
            throw new NotImplementedException();
        }

        public IList<AisDeviceCommandEntity> GetAisDeviceCommandCollectionByReplyIsNull(  )
        {
            throw new NotImplementedException();
        }

    }

    public class AisDeviceCommandByReplyIsNullEntityIndex
    {
    }

    public class AisDeviceCommandReplyByAisDeviceAndTimestampEntityIndex
    {
        public class ByTimestamp
        {
            readonly SortedListEx<DateTime, ById> _entries = new SortedListEx<DateTime, ById>( );
            List<DateTime> _emptyKeys = new List<DateTime>( );

            public ByTimestamp( )
            {
            }

            void RemoveEmptyKeys( )
            {
                var emptyKeyCount = _emptyKeys.Count;
                for ( int i = 0; i < emptyKeyCount; i++ )
                {
                    _entries.Remove( _emptyKeys[ i ] );
                }
                _emptyKeys.Clear( );
            }

            public bool GetAll([DisallowNull] IList<AisDeviceCommandReplyEntity> result )
            {
                foreach( var entry in _entries )
                {
                    if( entry.Value.GetAll( result ) == false )
                    {
                        _emptyKeys.Add( entry.Key );
                    }
                }
                RemoveEmptyKeys( );
                return _entries.Count > 0;
            }

        }
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, AisDeviceCommandReplyEntity> _entries = new SortedWeakReferenceList<Guid, AisDeviceCommandReplyEntity>( );
            public ById( )
            {
            }

            public void Add( AisDeviceCommandReplyEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<AisDeviceCommandReplyEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out AisDeviceCommandReplyEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<AisDeviceCommandReplyEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<AisDeviceCommandReplyEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<AisDeviceCommandReplyEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<AisDeviceCommandReplyEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<Guid, ByTimestamp> _entries = new SortedListEx<Guid, ByTimestamp>( );

        public AisDeviceCommandReplyByAisDeviceAndTimestampEntityIndex( )
        {
        }

        public List<AisDeviceCommandReplyEntity> GetAisDeviceCommandReplyCollectionByAisDevice( Guid aisDevice )
        {
            throw new NotImplementedException();
        }

        public List<AisDeviceCommandReplyEntity> GetAisDeviceCommandReplyCollectionByAisDeviceAndTimestamp( Guid aisDevice, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<AisDeviceCommandReplyEntity> GetAisDeviceCommandReplyCollectionByAisDeviceAtTimestamp( Guid aisDevice, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<AisDeviceCommandReplyEntity> GetAisDeviceCommandReplyCollectionByAisDeviceFromTimestamp( Guid aisDevice, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<AisDeviceCommandReplyEntity> GetAisDeviceCommandReplyCollectionByAisDeviceUntilTimestamp( Guid aisDevice, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        IList<AisDeviceCommandReplyEntity> GetAisDeviceCommandReplyCollectionByAisDeviceOverTimestamp( Guid aisDevice, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

    }

    public class AisDeviceCommandReplyByTimestampEntityIndex
    {
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, AisDeviceCommandReplyEntity> _entries = new SortedWeakReferenceList<Guid, AisDeviceCommandReplyEntity>( );
            public ById( )
            {
            }

            public void Add( AisDeviceCommandReplyEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<AisDeviceCommandReplyEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out AisDeviceCommandReplyEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<AisDeviceCommandReplyEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<AisDeviceCommandReplyEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<AisDeviceCommandReplyEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<AisDeviceCommandReplyEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<DateTime, ById> _entries = new SortedListEx<DateTime, ById>( );

        public AisDeviceCommandReplyByTimestampEntityIndex( )
        {
        }

        public List<AisDeviceCommandReplyEntity> GetAisDeviceCommandReplyCollectionByTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<AisDeviceCommandReplyEntity> GetAisDeviceCommandReplyCollectionAtTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<AisDeviceCommandReplyEntity> GetAisDeviceCommandReplyCollectionFromTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<AisDeviceCommandReplyEntity> GetAisDeviceCommandReplyCollectionUntilTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        IList<AisDeviceCommandReplyEntity> GetAisDeviceCommandReplyCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

    }

    public class AisDeviceCommandReplyByCommandEntityIndex
    {
        readonly SortedWeakReferenceList<Guid, AisDeviceCommandReplyEntity> _entries = new SortedWeakReferenceList<Guid, AisDeviceCommandReplyEntity>( );

        public AisDeviceCommandReplyByCommandEntityIndex( )
        {
        }

        public void Add( AisDeviceCommandReplyEntity entity )
        {
            if ( entity.CommandId is Guid command )
            {
                if ( _entries.TryGetValue( command, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( command, new WeakReference<AisDeviceCommandReplyEntity>( entity, false ) );
                }
            }
            else
            {
                throw new ArgumentException( "entity.CommandId is null.", nameof( entity ) );
            }
        }

        public bool GetByCommandId( Guid command, out AisDeviceCommandReplyEntity? entity )
        {
            entity = null;
            if ( _entries.TryGetValue( command, out var weakReference ) )
            {
                if ( weakReference.TryGetTarget( out entity ) == false )
                {
                    _entries.Remove( command );
                }
            }
            return _entries.Count > 0;
        }

        public bool GetFrom(Guid key, [DisallowNull] IList<AisDeviceCommandReplyEntity> result )
        {
            return _entries.From( key, result );
        }

        public bool GetUntil(Guid key, [DisallowNull] IList<AisDeviceCommandReplyEntity> result )
        {
            return _entries.Until( key, result );
        }

        public bool GetOver(Guid firstKey, Guid lastKey, [DisallowNull] IList<AisDeviceCommandReplyEntity> result )
        {
            return _entries.Over( firstKey, lastKey, result );
        }

        public bool GetAll([DisallowNull] IList<AisDeviceCommandReplyEntity> result )
        {
            return _entries.All( result );
        }

        public AisDeviceCommandReplyEntity? GetAisDeviceCommandReplyByCommand( Guid? command )
        {
            throw new NotImplementedException();
        }

        public IList<AisDeviceCommandReplyEntity> GetAisDeviceCommandReplyCollectionByCommandIsNull(  )
        {
            throw new NotImplementedException();
        }

    }
    public class AisDeviceCommandReplyByCommandIsNullEntityIndex
    {
    }

    public class AisDeviceConfigurationByAisDeviceAndTimestampEntityIndex
    {
        public class ByTimestamp
        {
            readonly SortedWeakReferenceList<DateTime, AisDeviceConfigurationEntity> _entries = new SortedWeakReferenceList<DateTime, AisDeviceConfigurationEntity>( );

            public ByTimestamp( )
            {
            }

            public void Add( AisDeviceConfigurationEntity entity )
            {
                if( _entries.TryGetValue(entity.Timestamp, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Timestamp, new WeakReference<AisDeviceConfigurationEntity>( entity, false ) );
                }
            }

            public bool GetByTimestamp( DateTime timestamp, out AisDeviceConfigurationEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( timestamp, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( timestamp );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(DateTime key, [DisallowNull] IList<AisDeviceConfigurationEntity> result )
            {
                return _entries.From( key, result );
            }

            public bool GetUntil(DateTime key, [DisallowNull] IList<AisDeviceConfigurationEntity> result )
            {
                return _entries.Until( key, result );
            }

            public bool GetOver(DateTime firstKey, DateTime lastKey, [DisallowNull] IList<AisDeviceConfigurationEntity> result )
            {
                return _entries.Over( firstKey, lastKey, result );
            }

            public bool GetAll([DisallowNull] IList<AisDeviceConfigurationEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<DateTime, ByTimestamp> _entries = new SortedListEx<DateTime, ByTimestamp>( );
        public List<AisDeviceConfigurationEntity> GetAisDeviceConfigurationCollectionByAisDevice( Guid aisDevice )
        {
            throw new NotImplementedException();
        }

        public AisDeviceConfigurationEntity? GetAisDeviceConfigurationByAisDeviceAndTimestamp( Guid aisDevice, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public AisDeviceConfigurationEntity? GetAisDeviceConfigurationByAisDeviceAtTimestamp( Guid aisDevice, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<AisDeviceConfigurationEntity> GetAisDeviceConfigurationByAisDeviceFromTimestamp( Guid aisDevice, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<AisDeviceConfigurationEntity> GetAisDeviceConfigurationByAisDeviceUntilTimestamp( Guid aisDevice, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        IList<AisDeviceConfigurationEntity> GetAisDeviceConfigurationByAisDeviceOverTimestamp( Guid aisDevice, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

    }
    public class AisDeviceConfigurationByTimestampEntityIndex
    {
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, AisDeviceConfigurationEntity> _entries = new SortedWeakReferenceList<Guid, AisDeviceConfigurationEntity>( );
            public ById( )
            {
            }

            public void Add( AisDeviceConfigurationEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<AisDeviceConfigurationEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out AisDeviceConfigurationEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<AisDeviceConfigurationEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<AisDeviceConfigurationEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<AisDeviceConfigurationEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<AisDeviceConfigurationEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<DateTime, ById> _entries = new SortedListEx<DateTime, ById>( );

        public AisDeviceConfigurationByTimestampEntityIndex( )
        {
        }

        public List<AisDeviceConfigurationEntity> GetAisDeviceConfigurationCollectionByTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<AisDeviceConfigurationEntity> GetAisDeviceConfigurationCollectionAtTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<AisDeviceConfigurationEntity> GetAisDeviceConfigurationCollectionFromTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<AisDeviceConfigurationEntity> GetAisDeviceConfigurationCollectionUntilTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        IList<AisDeviceConfigurationEntity> GetAisDeviceConfigurationCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

    }

    public class AisDeviceRawMessageByAisDeviceAndTimestampEntityIndex
    {
        public class ByTimestamp
        {
            readonly SortedListEx<DateTime, ById> _entries = new SortedListEx<DateTime, ById>( );
            List<DateTime> _emptyKeys = new List<DateTime>( );

            public ByTimestamp( )
            {
            }

            void RemoveEmptyKeys( )
            {
                var emptyKeyCount = _emptyKeys.Count;
                for ( int i = 0; i < emptyKeyCount; i++ )
                {
                    _entries.Remove( _emptyKeys[ i ] );
                }
                _emptyKeys.Clear( );
            }

            public bool GetAll([DisallowNull] IList<AisDeviceRawMessageEntity> result )
            {
                foreach( var entry in _entries )
                {
                    if( entry.Value.GetAll( result ) == false )
                    {
                        _emptyKeys.Add( entry.Key );
                    }
                }
                RemoveEmptyKeys( );
                return _entries.Count > 0;
            }

        }
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, AisDeviceRawMessageEntity> _entries = new SortedWeakReferenceList<Guid, AisDeviceRawMessageEntity>( );
            public ById( )
            {
            }

            public void Add( AisDeviceRawMessageEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<AisDeviceRawMessageEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out AisDeviceRawMessageEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<AisDeviceRawMessageEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<AisDeviceRawMessageEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<AisDeviceRawMessageEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<AisDeviceRawMessageEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<Guid, ByTimestamp> _entries = new SortedListEx<Guid, ByTimestamp>( );

        public AisDeviceRawMessageByAisDeviceAndTimestampEntityIndex( )
        {
        }

        public List<AisDeviceRawMessageEntity> GetAisDeviceRawMessageCollectionByAisDevice( Guid aisDevice )
        {
            throw new NotImplementedException();
        }

        public List<AisDeviceRawMessageEntity> GetAisDeviceRawMessageCollectionByAisDeviceAndTimestamp( Guid aisDevice, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<AisDeviceRawMessageEntity> GetAisDeviceRawMessageCollectionByAisDeviceAtTimestamp( Guid aisDevice, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<AisDeviceRawMessageEntity> GetAisDeviceRawMessageCollectionByAisDeviceFromTimestamp( Guid aisDevice, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<AisDeviceRawMessageEntity> GetAisDeviceRawMessageCollectionByAisDeviceUntilTimestamp( Guid aisDevice, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        IList<AisDeviceRawMessageEntity> GetAisDeviceRawMessageCollectionByAisDeviceOverTimestamp( Guid aisDevice, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

    }

    public class AisDeviceRawMessageByTimestampEntityIndex
    {
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, AisDeviceRawMessageEntity> _entries = new SortedWeakReferenceList<Guid, AisDeviceRawMessageEntity>( );
            public ById( )
            {
            }

            public void Add( AisDeviceRawMessageEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<AisDeviceRawMessageEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out AisDeviceRawMessageEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<AisDeviceRawMessageEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<AisDeviceRawMessageEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<AisDeviceRawMessageEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<AisDeviceRawMessageEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<DateTime, ById> _entries = new SortedListEx<DateTime, ById>( );

        public AisDeviceRawMessageByTimestampEntityIndex( )
        {
        }

        public List<AisDeviceRawMessageEntity> GetAisDeviceRawMessageCollectionByTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<AisDeviceRawMessageEntity> GetAisDeviceRawMessageCollectionAtTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<AisDeviceRawMessageEntity> GetAisDeviceRawMessageCollectionFromTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<AisDeviceRawMessageEntity> GetAisDeviceRawMessageCollectionUntilTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        IList<AisDeviceRawMessageEntity> GetAisDeviceRawMessageCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

    }

    public class AisDeviceRawSentenceByAisDeviceAndTimestampEntityIndex
    {
        public class ByTimestamp
        {
            readonly SortedListEx<DateTime, ById> _entries = new SortedListEx<DateTime, ById>( );
            List<DateTime> _emptyKeys = new List<DateTime>( );

            public ByTimestamp( )
            {
            }

            void RemoveEmptyKeys( )
            {
                var emptyKeyCount = _emptyKeys.Count;
                for ( int i = 0; i < emptyKeyCount; i++ )
                {
                    _entries.Remove( _emptyKeys[ i ] );
                }
                _emptyKeys.Clear( );
            }

            public bool GetAll([DisallowNull] IList<AisDeviceRawSentenceEntity> result )
            {
                foreach( var entry in _entries )
                {
                    if( entry.Value.GetAll( result ) == false )
                    {
                        _emptyKeys.Add( entry.Key );
                    }
                }
                RemoveEmptyKeys( );
                return _entries.Count > 0;
            }

        }
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, AisDeviceRawSentenceEntity> _entries = new SortedWeakReferenceList<Guid, AisDeviceRawSentenceEntity>( );
            public ById( )
            {
            }

            public void Add( AisDeviceRawSentenceEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<AisDeviceRawSentenceEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out AisDeviceRawSentenceEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<AisDeviceRawSentenceEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<AisDeviceRawSentenceEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<AisDeviceRawSentenceEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<AisDeviceRawSentenceEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<Guid, ByTimestamp> _entries = new SortedListEx<Guid, ByTimestamp>( );

        public AisDeviceRawSentenceByAisDeviceAndTimestampEntityIndex( )
        {
        }

        public List<AisDeviceRawSentenceEntity> GetAisDeviceRawSentenceCollectionByAisDevice( Guid aisDevice )
        {
            throw new NotImplementedException();
        }

        public List<AisDeviceRawSentenceEntity> GetAisDeviceRawSentenceCollectionByAisDeviceAndTimestamp( Guid aisDevice, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<AisDeviceRawSentenceEntity> GetAisDeviceRawSentenceCollectionByAisDeviceAtTimestamp( Guid aisDevice, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<AisDeviceRawSentenceEntity> GetAisDeviceRawSentenceCollectionByAisDeviceFromTimestamp( Guid aisDevice, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<AisDeviceRawSentenceEntity> GetAisDeviceRawSentenceCollectionByAisDeviceUntilTimestamp( Guid aisDevice, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        IList<AisDeviceRawSentenceEntity> GetAisDeviceRawSentenceCollectionByAisDeviceOverTimestamp( Guid aisDevice, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

    }

    public class AisDeviceRawSentenceByTimestampEntityIndex
    {
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, AisDeviceRawSentenceEntity> _entries = new SortedWeakReferenceList<Guid, AisDeviceRawSentenceEntity>( );
            public ById( )
            {
            }

            public void Add( AisDeviceRawSentenceEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<AisDeviceRawSentenceEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out AisDeviceRawSentenceEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<AisDeviceRawSentenceEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<AisDeviceRawSentenceEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<AisDeviceRawSentenceEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<AisDeviceRawSentenceEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<DateTime, ById> _entries = new SortedListEx<DateTime, ById>( );

        public AisDeviceRawSentenceByTimestampEntityIndex( )
        {
        }

        public List<AisDeviceRawSentenceEntity> GetAisDeviceRawSentenceCollectionByTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<AisDeviceRawSentenceEntity> GetAisDeviceRawSentenceCollectionAtTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<AisDeviceRawSentenceEntity> GetAisDeviceRawSentenceCollectionFromTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<AisDeviceRawSentenceEntity> GetAisDeviceRawSentenceCollectionUntilTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        IList<AisDeviceRawSentenceEntity> GetAisDeviceRawSentenceCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

    }

    public class AisMessageByAisDeviceAndReceivedTimestampEntityIndex
    {
        public class ByReceivedTimestamp
        {
            readonly SortedWeakReferenceList<DateTime, AisMessageEntity> _entries = new SortedWeakReferenceList<DateTime, AisMessageEntity>( );

            public ByReceivedTimestamp( )
            {
            }

            public void Add( AisMessageEntity entity )
            {
                if( _entries.TryGetValue(entity.ReceivedTimestamp, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.ReceivedTimestamp, new WeakReference<AisMessageEntity>( entity, false ) );
                }
            }

            public bool GetByReceivedTimestamp( DateTime receivedTimestamp, out AisMessageEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( receivedTimestamp, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( receivedTimestamp );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(DateTime key, [DisallowNull] IList<AisMessageEntity> result )
            {
                return _entries.From( key, result );
            }

            public bool GetUntil(DateTime key, [DisallowNull] IList<AisMessageEntity> result )
            {
                return _entries.Until( key, result );
            }

            public bool GetOver(DateTime firstKey, DateTime lastKey, [DisallowNull] IList<AisMessageEntity> result )
            {
                return _entries.Over( firstKey, lastKey, result );
            }

            public bool GetAll([DisallowNull] IList<AisMessageEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<DateTime, ByReceivedTimestamp> _entries = new SortedListEx<DateTime, ByReceivedTimestamp>( );
        public List<AisMessageEntity> GetAisMessageCollectionByAisDevice( Guid aisDevice )
        {
            throw new NotImplementedException();
        }

        public AisMessageEntity? GetAisMessageByAisDeviceAndReceivedTimestamp( Guid aisDevice, DateTime receivedTimestamp )
        {
            throw new NotImplementedException();
        }

        public AisMessageEntity? GetAisMessageByAisDeviceAtReceivedTimestamp( Guid aisDevice, DateTime receivedTimestamp )
        {
            throw new NotImplementedException();
        }

        public IList<AisMessageEntity> GetAisMessageByAisDeviceFromReceivedTimestamp( Guid aisDevice, DateTime receivedTimestamp )
        {
            throw new NotImplementedException();
        }

        public IList<AisMessageEntity> GetAisMessageByAisDeviceUntilReceivedTimestamp( Guid aisDevice, DateTime receivedTimestamp )
        {
            throw new NotImplementedException();
        }

        IList<AisMessageEntity> GetAisMessageByAisDeviceOverReceivedTimestamp( Guid aisDevice, DateTime fromReceivedTimestamp, DateTime untilReceivedTimestamp )
        {
            throw new NotImplementedException();
        }

    }
    public class AisMessageByReceivedTimestampEntityIndex
    {
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, AisMessageEntity> _entries = new SortedWeakReferenceList<Guid, AisMessageEntity>( );
            public ById( )
            {
            }

            public void Add( AisMessageEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<AisMessageEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out AisMessageEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<AisMessageEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<AisMessageEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<AisMessageEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<AisMessageEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<DateTime, ById> _entries = new SortedListEx<DateTime, ById>( );

        public AisMessageByReceivedTimestampEntityIndex( )
        {
        }

        public List<AisMessageEntity> GetAisMessageCollectionByReceivedTimestamp( DateTime receivedTimestamp )
        {
            throw new NotImplementedException();
        }

        public IList<AisMessageEntity> GetAisMessageCollectionAtReceivedTimestamp( DateTime receivedTimestamp )
        {
            throw new NotImplementedException();
        }

        public IList<AisMessageEntity> GetAisMessageCollectionFromReceivedTimestamp( DateTime receivedTimestamp )
        {
            throw new NotImplementedException();
        }

        public IList<AisMessageEntity> GetAisMessageCollectionUntilReceivedTimestamp( DateTime receivedTimestamp )
        {
            throw new NotImplementedException();
        }

        IList<AisMessageEntity> GetAisMessageCollectionOverReceivedTimestamp( DateTime fromReceivedTimestamp, DateTime untilReceivedTimestamp )
        {
            throw new NotImplementedException();
        }

    }

    public class AisMessageByMmsiAndMessageSequenceNumberEntityIndex
    {
        public class ByMessageSequenceNumber
        {
            readonly SortedListEx<long, ById> _entries = new SortedListEx<long, ById>( );
            List<long> _emptyKeys = new List<long>( );

            public ByMessageSequenceNumber( )
            {
            }

            void RemoveEmptyKeys( )
            {
                var emptyKeyCount = _emptyKeys.Count;
                for ( int i = 0; i < emptyKeyCount; i++ )
                {
                    _entries.Remove( _emptyKeys[ i ] );
                }
                _emptyKeys.Clear( );
            }

            public bool GetAll([DisallowNull] IList<AisMessageEntity> result )
            {
                foreach( var entry in _entries )
                {
                    if( entry.Value.GetAll( result ) == false )
                    {
                        _emptyKeys.Add( entry.Key );
                    }
                }
                RemoveEmptyKeys( );
                return _entries.Count > 0;
            }

        }
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, AisMessageEntity> _entries = new SortedWeakReferenceList<Guid, AisMessageEntity>( );
            public ById( )
            {
            }

            public void Add( AisMessageEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<AisMessageEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out AisMessageEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<AisMessageEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<AisMessageEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<AisMessageEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<AisMessageEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<Guid, ByMessageSequenceNumber> _entries = new SortedListEx<Guid, ByMessageSequenceNumber>( );

        public AisMessageByMmsiAndMessageSequenceNumberEntityIndex( )
        {
        }

        public List<AisMessageEntity> GetAisMessageCollectionByMmsi( Guid? mmsi )
        {
            throw new NotImplementedException();
        }

        public IList<AisMessageEntity> GetAisMessageCollectionByMmsiIsNull(  )
        {
            throw new NotImplementedException();
        }

        public List<AisMessageEntity> GetAisMessageCollectionByMmsiAndMessageSequenceNumber( Guid? mmsi, long messageSequenceNumber )
        {
            throw new NotImplementedException();
        }

        public IList<AisMessageEntity> GetAisMessageCollectionByMmsiIsNullAndMessageSequenceNumber( long messageSequenceNumber )
        {
            throw new NotImplementedException();
        }

        public IList<AisMessageEntity> GetAisMessageCollectionByMmsiFromMessageSequenceNumber( Guid? mmsi, long messageSequenceNumber )
        {
            throw new NotImplementedException();
        }

        public IList<AisMessageEntity> GetAisMessageCollectionByMmsiUntilMessageSequenceNumber( Guid? mmsi, long messageSequenceNumber )
        {
            throw new NotImplementedException();
        }

        IList<AisMessageEntity> GetAisMessageCollectionByMmsiOverMessageSequenceNumber( Guid mmsi, long fromMessageSequenceNumber, long untilMessageSequenceNumber )
        {
            throw new NotImplementedException();
        }

    }

    public class AisMessageByMmsiIsNullAndMessageSequenceNumberEntityIndex
    {
    }

    public class AisAddressedSafetyRelatedMessageByDestinationMmsiEntityIndex
    {
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, AisAddressedSafetyRelatedMessageEntity> _entries = new SortedWeakReferenceList<Guid, AisAddressedSafetyRelatedMessageEntity>( );
            public ById( )
            {
            }

            public void Add( AisAddressedSafetyRelatedMessageEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<AisAddressedSafetyRelatedMessageEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out AisAddressedSafetyRelatedMessageEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<AisAddressedSafetyRelatedMessageEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<AisAddressedSafetyRelatedMessageEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<AisAddressedSafetyRelatedMessageEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<AisAddressedSafetyRelatedMessageEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<Guid, ById> _entries = new SortedListEx<Guid, ById>( );

        public AisAddressedSafetyRelatedMessageByDestinationMmsiEntityIndex( )
        {
        }

        public List<AisAddressedSafetyRelatedMessageEntity> GetAisAddressedSafetyRelatedMessageCollectionByDestinationMmsi( Guid? destinationMmsi )
        {
            throw new NotImplementedException();
        }

        public IList<AisAddressedSafetyRelatedMessageEntity> GetAisAddressedSafetyRelatedMessageCollectionByDestinationMmsiIsNull(  )
        {
            throw new NotImplementedException();
        }

    }

    public class AisAddressedSafetyRelatedMessageByDestinationMmsiIsNullEntityIndex
    {
    }

    public class AisBinaryAddressedMessageByDestinationMmsiEntityIndex
    {
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, AisBinaryAddressedMessageEntity> _entries = new SortedWeakReferenceList<Guid, AisBinaryAddressedMessageEntity>( );
            public ById( )
            {
            }

            public void Add( AisBinaryAddressedMessageEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<AisBinaryAddressedMessageEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out AisBinaryAddressedMessageEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<AisBinaryAddressedMessageEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<AisBinaryAddressedMessageEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<AisBinaryAddressedMessageEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<AisBinaryAddressedMessageEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<Guid, ById> _entries = new SortedListEx<Guid, ById>( );

        public AisBinaryAddressedMessageByDestinationMmsiEntityIndex( )
        {
        }

        public List<AisBinaryAddressedMessageEntity> GetAisBinaryAddressedMessageCollectionByDestinationMmsi( Guid? destinationMmsi )
        {
            throw new NotImplementedException();
        }

        public IList<AisBinaryAddressedMessageEntity> GetAisBinaryAddressedMessageCollectionByDestinationMmsiIsNull(  )
        {
            throw new NotImplementedException();
        }

    }

    public class AisBinaryAddressedMessageByDestinationMmsiIsNullEntityIndex
    {
    }

    public class AisExtendedClassBCsPositionReportMessageByNameEntityIndex
    {
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, AisExtendedClassBCsPositionReportMessageEntity> _entries = new SortedWeakReferenceList<Guid, AisExtendedClassBCsPositionReportMessageEntity>( );
            public ById( )
            {
            }

            public void Add( AisExtendedClassBCsPositionReportMessageEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<AisExtendedClassBCsPositionReportMessageEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out AisExtendedClassBCsPositionReportMessageEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<AisExtendedClassBCsPositionReportMessageEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<AisExtendedClassBCsPositionReportMessageEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<AisExtendedClassBCsPositionReportMessageEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<AisExtendedClassBCsPositionReportMessageEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<Guid, ById> _entries = new SortedListEx<Guid, ById>( );

        public AisExtendedClassBCsPositionReportMessageByNameEntityIndex( )
        {
        }

        public List<AisExtendedClassBCsPositionReportMessageEntity> GetAisExtendedClassBCsPositionReportMessageCollectionByName( Guid? name )
        {
            throw new NotImplementedException();
        }

        public IList<AisExtendedClassBCsPositionReportMessageEntity> GetAisExtendedClassBCsPositionReportMessageCollectionByNameIsNull(  )
        {
            throw new NotImplementedException();
        }

    }

    public class AisExtendedClassBCsPositionReportMessageByNameIsNullEntityIndex
    {
    }

    public class AisStaticAndVoyageRelatedDataMessageByImoNumberEntityIndex
    {
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, AisStaticAndVoyageRelatedDataMessageEntity> _entries = new SortedWeakReferenceList<Guid, AisStaticAndVoyageRelatedDataMessageEntity>( );
            public ById( )
            {
            }

            public void Add( AisStaticAndVoyageRelatedDataMessageEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<AisStaticAndVoyageRelatedDataMessageEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out AisStaticAndVoyageRelatedDataMessageEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<AisStaticAndVoyageRelatedDataMessageEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<AisStaticAndVoyageRelatedDataMessageEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<AisStaticAndVoyageRelatedDataMessageEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<AisStaticAndVoyageRelatedDataMessageEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<Guid, ById> _entries = new SortedListEx<Guid, ById>( );

        public AisStaticAndVoyageRelatedDataMessageByImoNumberEntityIndex( )
        {
        }

        public List<AisStaticAndVoyageRelatedDataMessageEntity> GetAisStaticAndVoyageRelatedDataMessageCollectionByImoNumber( Guid? imoNumber )
        {
            throw new NotImplementedException();
        }

        public IList<AisStaticAndVoyageRelatedDataMessageEntity> GetAisStaticAndVoyageRelatedDataMessageCollectionByImoNumberIsNull(  )
        {
            throw new NotImplementedException();
        }

    }

    public class AisStaticAndVoyageRelatedDataMessageByImoNumberIsNullEntityIndex
    {
    }

    public class AisStaticAndVoyageRelatedDataMessageByCallsignEntityIndex
    {
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, AisStaticAndVoyageRelatedDataMessageEntity> _entries = new SortedWeakReferenceList<Guid, AisStaticAndVoyageRelatedDataMessageEntity>( );
            public ById( )
            {
            }

            public void Add( AisStaticAndVoyageRelatedDataMessageEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<AisStaticAndVoyageRelatedDataMessageEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out AisStaticAndVoyageRelatedDataMessageEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<AisStaticAndVoyageRelatedDataMessageEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<AisStaticAndVoyageRelatedDataMessageEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<AisStaticAndVoyageRelatedDataMessageEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<AisStaticAndVoyageRelatedDataMessageEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<Guid, ById> _entries = new SortedListEx<Guid, ById>( );

        public AisStaticAndVoyageRelatedDataMessageByCallsignEntityIndex( )
        {
        }

        public List<AisStaticAndVoyageRelatedDataMessageEntity> GetAisStaticAndVoyageRelatedDataMessageCollectionByCallsign( Guid? callsign )
        {
            throw new NotImplementedException();
        }

        public IList<AisStaticAndVoyageRelatedDataMessageEntity> GetAisStaticAndVoyageRelatedDataMessageCollectionByCallsignIsNull(  )
        {
            throw new NotImplementedException();
        }

    }

    public class AisStaticAndVoyageRelatedDataMessageByCallsignIsNullEntityIndex
    {
    }

    public class AisStaticAndVoyageRelatedDataMessageByShipNameEntityIndex
    {
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, AisStaticAndVoyageRelatedDataMessageEntity> _entries = new SortedWeakReferenceList<Guid, AisStaticAndVoyageRelatedDataMessageEntity>( );
            public ById( )
            {
            }

            public void Add( AisStaticAndVoyageRelatedDataMessageEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<AisStaticAndVoyageRelatedDataMessageEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out AisStaticAndVoyageRelatedDataMessageEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<AisStaticAndVoyageRelatedDataMessageEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<AisStaticAndVoyageRelatedDataMessageEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<AisStaticAndVoyageRelatedDataMessageEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<AisStaticAndVoyageRelatedDataMessageEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<Guid, ById> _entries = new SortedListEx<Guid, ById>( );

        public AisStaticAndVoyageRelatedDataMessageByShipNameEntityIndex( )
        {
        }

        public List<AisStaticAndVoyageRelatedDataMessageEntity> GetAisStaticAndVoyageRelatedDataMessageCollectionByShipName( Guid? shipName )
        {
            throw new NotImplementedException();
        }

        public IList<AisStaticAndVoyageRelatedDataMessageEntity> GetAisStaticAndVoyageRelatedDataMessageCollectionByShipNameIsNull(  )
        {
            throw new NotImplementedException();
        }

    }

    public class AisStaticAndVoyageRelatedDataMessageByShipNameIsNullEntityIndex
    {
    }

    public class AisStaticDataReportPartAMessageByShipNameEntityIndex
    {
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, AisStaticDataReportPartAMessageEntity> _entries = new SortedWeakReferenceList<Guid, AisStaticDataReportPartAMessageEntity>( );
            public ById( )
            {
            }

            public void Add( AisStaticDataReportPartAMessageEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<AisStaticDataReportPartAMessageEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out AisStaticDataReportPartAMessageEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<AisStaticDataReportPartAMessageEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<AisStaticDataReportPartAMessageEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<AisStaticDataReportPartAMessageEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<AisStaticDataReportPartAMessageEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<Guid, ById> _entries = new SortedListEx<Guid, ById>( );

        public AisStaticDataReportPartAMessageByShipNameEntityIndex( )
        {
        }

        public List<AisStaticDataReportPartAMessageEntity> GetAisStaticDataReportPartAMessageCollectionByShipName( Guid? shipName )
        {
            throw new NotImplementedException();
        }

        public IList<AisStaticDataReportPartAMessageEntity> GetAisStaticDataReportPartAMessageCollectionByShipNameIsNull(  )
        {
            throw new NotImplementedException();
        }

    }

    public class AisStaticDataReportPartAMessageByShipNameIsNullEntityIndex
    {
    }

    public class AisStaticDataReportPartBMessageByCallsignEntityIndex
    {
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, AisStaticDataReportPartBMessageEntity> _entries = new SortedWeakReferenceList<Guid, AisStaticDataReportPartBMessageEntity>( );
            public ById( )
            {
            }

            public void Add( AisStaticDataReportPartBMessageEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<AisStaticDataReportPartBMessageEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out AisStaticDataReportPartBMessageEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<AisStaticDataReportPartBMessageEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<AisStaticDataReportPartBMessageEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<AisStaticDataReportPartBMessageEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<AisStaticDataReportPartBMessageEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<Guid, ById> _entries = new SortedListEx<Guid, ById>( );

        public AisStaticDataReportPartBMessageByCallsignEntityIndex( )
        {
        }

        public List<AisStaticDataReportPartBMessageEntity> GetAisStaticDataReportPartBMessageCollectionByCallsign( Guid? callsign )
        {
            throw new NotImplementedException();
        }

        public IList<AisStaticDataReportPartBMessageEntity> GetAisStaticDataReportPartBMessageCollectionByCallsignIsNull(  )
        {
            throw new NotImplementedException();
        }

    }

    public class AisStaticDataReportPartBMessageByCallsignIsNullEntityIndex
    {
    }

    public class AisStaticDataReportPartBMessageByMothershipMmsiEntityIndex
    {
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, AisStaticDataReportPartBMessageEntity> _entries = new SortedWeakReferenceList<Guid, AisStaticDataReportPartBMessageEntity>( );
            public ById( )
            {
            }

            public void Add( AisStaticDataReportPartBMessageEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<AisStaticDataReportPartBMessageEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out AisStaticDataReportPartBMessageEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<AisStaticDataReportPartBMessageEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<AisStaticDataReportPartBMessageEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<AisStaticDataReportPartBMessageEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<AisStaticDataReportPartBMessageEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<Guid, ById> _entries = new SortedListEx<Guid, ById>( );

        public AisStaticDataReportPartBMessageByMothershipMmsiEntityIndex( )
        {
        }

        public List<AisStaticDataReportPartBMessageEntity> GetAisStaticDataReportPartBMessageCollectionByMothershipMmsi( Guid? mothershipMmsi )
        {
            throw new NotImplementedException();
        }

        public IList<AisStaticDataReportPartBMessageEntity> GetAisStaticDataReportPartBMessageCollectionByMothershipMmsiIsNull(  )
        {
            throw new NotImplementedException();
        }

    }

    public class AisStaticDataReportPartBMessageByMothershipMmsiIsNullEntityIndex
    {
    }

    public class AlarmStateChangeByAlarmAndTimestampEntityIndex
    {
        public class ByTimestamp
        {
            readonly SortedWeakReferenceList<DateTime, AlarmStateChangeEntity> _entries = new SortedWeakReferenceList<DateTime, AlarmStateChangeEntity>( );

            public ByTimestamp( )
            {
            }

            public void Add( AlarmStateChangeEntity entity )
            {
                if( _entries.TryGetValue(entity.Timestamp, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Timestamp, new WeakReference<AlarmStateChangeEntity>( entity, false ) );
                }
            }

            public bool GetByTimestamp( DateTime timestamp, out AlarmStateChangeEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( timestamp, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( timestamp );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(DateTime key, [DisallowNull] IList<AlarmStateChangeEntity> result )
            {
                return _entries.From( key, result );
            }

            public bool GetUntil(DateTime key, [DisallowNull] IList<AlarmStateChangeEntity> result )
            {
                return _entries.Until( key, result );
            }

            public bool GetOver(DateTime firstKey, DateTime lastKey, [DisallowNull] IList<AlarmStateChangeEntity> result )
            {
                return _entries.Over( firstKey, lastKey, result );
            }

            public bool GetAll([DisallowNull] IList<AlarmStateChangeEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<DateTime, ByTimestamp> _entries = new SortedListEx<DateTime, ByTimestamp>( );
        public List<AlarmStateChangeEntity> GetAlarmStateChangeCollectionByAlarm( Guid alarm )
        {
            throw new NotImplementedException();
        }

        public AlarmStateChangeEntity? GetAlarmStateChangeByAlarmAndTimestamp( Guid alarm, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public AlarmStateChangeEntity? GetAlarmStateChangeByAlarmAtTimestamp( Guid alarm, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<AlarmStateChangeEntity> GetAlarmStateChangeByAlarmFromTimestamp( Guid alarm, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<AlarmStateChangeEntity> GetAlarmStateChangeByAlarmUntilTimestamp( Guid alarm, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        IList<AlarmStateChangeEntity> GetAlarmStateChangeByAlarmOverTimestamp( Guid alarm, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

    }
    public class AlarmStateChangeByTimestampEntityIndex
    {
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, AlarmStateChangeEntity> _entries = new SortedWeakReferenceList<Guid, AlarmStateChangeEntity>( );
            public ById( )
            {
            }

            public void Add( AlarmStateChangeEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<AlarmStateChangeEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out AlarmStateChangeEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<AlarmStateChangeEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<AlarmStateChangeEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<AlarmStateChangeEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<AlarmStateChangeEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<DateTime, ById> _entries = new SortedListEx<DateTime, ById>( );

        public AlarmStateChangeByTimestampEntityIndex( )
        {
        }

        public List<AlarmStateChangeEntity> GetAlarmStateChangeCollectionByTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<AlarmStateChangeEntity> GetAlarmStateChangeCollectionAtTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<AlarmStateChangeEntity> GetAlarmStateChangeCollectionFromTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<AlarmStateChangeEntity> GetAlarmStateChangeCollectionUntilTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        IList<AlarmStateChangeEntity> GetAlarmStateChangeCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

    }

    public class BaseStationTypeByNameEntityIndex
    {
        readonly SortedWeakReferenceList<string, BaseStationTypeEntity> _entries = new SortedWeakReferenceList<string, BaseStationTypeEntity>( );

        public BaseStationTypeByNameEntityIndex( )
        {
        }

        public void Add( BaseStationTypeEntity entity )
        {
            if( _entries.TryGetValue(entity.Name, out var weakReference ) )
            {
                weakReference.SetTarget( entity );
            }
            else
            {
                _entries.Add( entity.Name, new WeakReference<BaseStationTypeEntity>( entity, false ) );
            }
        }

        public bool GetByName( string name, out BaseStationTypeEntity? entity )
        {
            entity = null;
            if ( _entries.TryGetValue( name, out var weakReference ) )
            {
                if ( weakReference.TryGetTarget( out entity ) == false )
                {
                    _entries.Remove( name );
                }
            }
            return _entries.Count > 0;
        }

        public bool GetFrom(string key, [DisallowNull] IList<BaseStationTypeEntity> result )
        {
            return _entries.From( key, result );
        }

        public bool GetUntil(string key, [DisallowNull] IList<BaseStationTypeEntity> result )
        {
            return _entries.Until( key, result );
        }

        public bool GetOver(string firstKey, string lastKey, [DisallowNull] IList<BaseStationTypeEntity> result )
        {
            return _entries.Over( firstKey, lastKey, result );
        }

        public bool GetAll([DisallowNull] IList<BaseStationTypeEntity> result )
        {
            return _entries.All( result );
        }

        public BaseStationTypeEntity? GetBaseStationTypeByName( string name )
        {
            throw new NotImplementedException();
        }

    }
    public class BinaryTimeseriesValueByTimeseriesAndTimestampEntityIndex
    {
        public class ByTimestamp
        {
            readonly SortedWeakReferenceList<DateTime, BinaryTimeseriesValueEntity> _entries = new SortedWeakReferenceList<DateTime, BinaryTimeseriesValueEntity>( );

            public ByTimestamp( )
            {
            }

            public void Add( BinaryTimeseriesValueEntity entity )
            {
                if( _entries.TryGetValue(entity.Timestamp, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Timestamp, new WeakReference<BinaryTimeseriesValueEntity>( entity, false ) );
                }
            }

            public bool GetByTimestamp( DateTime timestamp, out BinaryTimeseriesValueEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( timestamp, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( timestamp );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(DateTime key, [DisallowNull] IList<BinaryTimeseriesValueEntity> result )
            {
                return _entries.From( key, result );
            }

            public bool GetUntil(DateTime key, [DisallowNull] IList<BinaryTimeseriesValueEntity> result )
            {
                return _entries.Until( key, result );
            }

            public bool GetOver(DateTime firstKey, DateTime lastKey, [DisallowNull] IList<BinaryTimeseriesValueEntity> result )
            {
                return _entries.Over( firstKey, lastKey, result );
            }

            public bool GetAll([DisallowNull] IList<BinaryTimeseriesValueEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<DateTime, ByTimestamp> _entries = new SortedListEx<DateTime, ByTimestamp>( );
        public List<BinaryTimeseriesValueEntity> GetBinaryTimeseriesValueCollectionByTimeseries( Guid timeseries )
        {
            throw new NotImplementedException();
        }

        public BinaryTimeseriesValueEntity? GetBinaryTimeseriesValueByTimeseriesAndTimestamp( Guid timeseries, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public BinaryTimeseriesValueEntity? GetBinaryTimeseriesValueByTimeseriesAtTimestamp( Guid timeseries, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<BinaryTimeseriesValueEntity> GetBinaryTimeseriesValueByTimeseriesFromTimestamp( Guid timeseries, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<BinaryTimeseriesValueEntity> GetBinaryTimeseriesValueByTimeseriesUntilTimestamp( Guid timeseries, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        IList<BinaryTimeseriesValueEntity> GetBinaryTimeseriesValueByTimeseriesOverTimestamp( Guid timeseries, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

    }
    public class BinaryTimeseriesValueByTimestampEntityIndex
    {
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, BinaryTimeseriesValueEntity> _entries = new SortedWeakReferenceList<Guid, BinaryTimeseriesValueEntity>( );
            public ById( )
            {
            }

            public void Add( BinaryTimeseriesValueEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<BinaryTimeseriesValueEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out BinaryTimeseriesValueEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<BinaryTimeseriesValueEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<BinaryTimeseriesValueEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<BinaryTimeseriesValueEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<BinaryTimeseriesValueEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<DateTime, ById> _entries = new SortedListEx<DateTime, ById>( );

        public BinaryTimeseriesValueByTimestampEntityIndex( )
        {
        }

        public List<BinaryTimeseriesValueEntity> GetBinaryTimeseriesValueCollectionByTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<BinaryTimeseriesValueEntity> GetBinaryTimeseriesValueCollectionAtTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<BinaryTimeseriesValueEntity> GetBinaryTimeseriesValueCollectionFromTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<BinaryTimeseriesValueEntity> GetBinaryTimeseriesValueCollectionUntilTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        IList<BinaryTimeseriesValueEntity> GetBinaryTimeseriesValueCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

    }

    public class BookmarkByViewEntityIndex
    {
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, BookmarkEntity> _entries = new SortedWeakReferenceList<Guid, BookmarkEntity>( );
            public ById( )
            {
            }

            public void Add( BookmarkEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<BookmarkEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out BookmarkEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<BookmarkEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<BookmarkEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<BookmarkEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<BookmarkEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<Guid, ById> _entries = new SortedListEx<Guid, ById>( );

        public BookmarkByViewEntityIndex( )
        {
        }

        public List<BookmarkEntity> GetBookmarkCollectionByView( Guid view )
        {
            throw new NotImplementedException();
        }

    }

    public class BooleanTimeseriesValueByTimeseriesAndTimestampEntityIndex
    {
        public class ByTimestamp
        {
            readonly SortedWeakReferenceList<DateTime, BooleanTimeseriesValueEntity> _entries = new SortedWeakReferenceList<DateTime, BooleanTimeseriesValueEntity>( );

            public ByTimestamp( )
            {
            }

            public void Add( BooleanTimeseriesValueEntity entity )
            {
                if( _entries.TryGetValue(entity.Timestamp, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Timestamp, new WeakReference<BooleanTimeseriesValueEntity>( entity, false ) );
                }
            }

            public bool GetByTimestamp( DateTime timestamp, out BooleanTimeseriesValueEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( timestamp, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( timestamp );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(DateTime key, [DisallowNull] IList<BooleanTimeseriesValueEntity> result )
            {
                return _entries.From( key, result );
            }

            public bool GetUntil(DateTime key, [DisallowNull] IList<BooleanTimeseriesValueEntity> result )
            {
                return _entries.Until( key, result );
            }

            public bool GetOver(DateTime firstKey, DateTime lastKey, [DisallowNull] IList<BooleanTimeseriesValueEntity> result )
            {
                return _entries.Over( firstKey, lastKey, result );
            }

            public bool GetAll([DisallowNull] IList<BooleanTimeseriesValueEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<DateTime, ByTimestamp> _entries = new SortedListEx<DateTime, ByTimestamp>( );
        public List<BooleanTimeseriesValueEntity> GetBooleanTimeseriesValueCollectionByTimeseries( Guid timeseries )
        {
            throw new NotImplementedException();
        }

        public BooleanTimeseriesValueEntity? GetBooleanTimeseriesValueByTimeseriesAndTimestamp( Guid timeseries, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public BooleanTimeseriesValueEntity? GetBooleanTimeseriesValueByTimeseriesAtTimestamp( Guid timeseries, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<BooleanTimeseriesValueEntity> GetBooleanTimeseriesValueByTimeseriesFromTimestamp( Guid timeseries, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<BooleanTimeseriesValueEntity> GetBooleanTimeseriesValueByTimeseriesUntilTimestamp( Guid timeseries, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        IList<BooleanTimeseriesValueEntity> GetBooleanTimeseriesValueByTimeseriesOverTimestamp( Guid timeseries, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

    }
    public class BooleanTimeseriesValueByTimestampEntityIndex
    {
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, BooleanTimeseriesValueEntity> _entries = new SortedWeakReferenceList<Guid, BooleanTimeseriesValueEntity>( );
            public ById( )
            {
            }

            public void Add( BooleanTimeseriesValueEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<BooleanTimeseriesValueEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out BooleanTimeseriesValueEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<BooleanTimeseriesValueEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<BooleanTimeseriesValueEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<BooleanTimeseriesValueEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<BooleanTimeseriesValueEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<DateTime, ById> _entries = new SortedListEx<DateTime, ById>( );

        public BooleanTimeseriesValueByTimestampEntityIndex( )
        {
        }

        public List<BooleanTimeseriesValueEntity> GetBooleanTimeseriesValueCollectionByTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<BooleanTimeseriesValueEntity> GetBooleanTimeseriesValueCollectionAtTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<BooleanTimeseriesValueEntity> GetBooleanTimeseriesValueCollectionFromTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<BooleanTimeseriesValueEntity> GetBooleanTimeseriesValueCollectionUntilTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        IList<BooleanTimeseriesValueEntity> GetBooleanTimeseriesValueCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

    }

    public class ByteTimeseriesValueByTimeseriesAndTimestampEntityIndex
    {
        public class ByTimestamp
        {
            readonly SortedWeakReferenceList<DateTime, ByteTimeseriesValueEntity> _entries = new SortedWeakReferenceList<DateTime, ByteTimeseriesValueEntity>( );

            public ByTimestamp( )
            {
            }

            public void Add( ByteTimeseriesValueEntity entity )
            {
                if( _entries.TryGetValue(entity.Timestamp, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Timestamp, new WeakReference<ByteTimeseriesValueEntity>( entity, false ) );
                }
            }

            public bool GetByTimestamp( DateTime timestamp, out ByteTimeseriesValueEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( timestamp, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( timestamp );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(DateTime key, [DisallowNull] IList<ByteTimeseriesValueEntity> result )
            {
                return _entries.From( key, result );
            }

            public bool GetUntil(DateTime key, [DisallowNull] IList<ByteTimeseriesValueEntity> result )
            {
                return _entries.Until( key, result );
            }

            public bool GetOver(DateTime firstKey, DateTime lastKey, [DisallowNull] IList<ByteTimeseriesValueEntity> result )
            {
                return _entries.Over( firstKey, lastKey, result );
            }

            public bool GetAll([DisallowNull] IList<ByteTimeseriesValueEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<DateTime, ByTimestamp> _entries = new SortedListEx<DateTime, ByTimestamp>( );
        public List<ByteTimeseriesValueEntity> GetByteTimeseriesValueCollectionByTimeseries( Guid timeseries )
        {
            throw new NotImplementedException();
        }

        public ByteTimeseriesValueEntity? GetByteTimeseriesValueByTimeseriesAndTimestamp( Guid timeseries, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public ByteTimeseriesValueEntity? GetByteTimeseriesValueByTimeseriesAtTimestamp( Guid timeseries, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<ByteTimeseriesValueEntity> GetByteTimeseriesValueByTimeseriesFromTimestamp( Guid timeseries, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<ByteTimeseriesValueEntity> GetByteTimeseriesValueByTimeseriesUntilTimestamp( Guid timeseries, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        IList<ByteTimeseriesValueEntity> GetByteTimeseriesValueByTimeseriesOverTimestamp( Guid timeseries, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

    }
    public class ByteTimeseriesValueByTimestampEntityIndex
    {
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, ByteTimeseriesValueEntity> _entries = new SortedWeakReferenceList<Guid, ByteTimeseriesValueEntity>( );
            public ById( )
            {
            }

            public void Add( ByteTimeseriesValueEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<ByteTimeseriesValueEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out ByteTimeseriesValueEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<ByteTimeseriesValueEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<ByteTimeseriesValueEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<ByteTimeseriesValueEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<ByteTimeseriesValueEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<DateTime, ById> _entries = new SortedListEx<DateTime, ById>( );

        public ByteTimeseriesValueByTimestampEntityIndex( )
        {
        }

        public List<ByteTimeseriesValueEntity> GetByteTimeseriesValueCollectionByTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<ByteTimeseriesValueEntity> GetByteTimeseriesValueCollectionAtTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<ByteTimeseriesValueEntity> GetByteTimeseriesValueCollectionFromTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<ByteTimeseriesValueEntity> GetByteTimeseriesValueCollectionUntilTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        IList<ByteTimeseriesValueEntity> GetByteTimeseriesValueCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

    }

    public class CameraCommandByCameraAndTimestampEntityIndex
    {
        public class ByTimestamp
        {
            readonly SortedListEx<DateTime, ById> _entries = new SortedListEx<DateTime, ById>( );
            List<DateTime> _emptyKeys = new List<DateTime>( );

            public ByTimestamp( )
            {
            }

            void RemoveEmptyKeys( )
            {
                var emptyKeyCount = _emptyKeys.Count;
                for ( int i = 0; i < emptyKeyCount; i++ )
                {
                    _entries.Remove( _emptyKeys[ i ] );
                }
                _emptyKeys.Clear( );
            }

            public bool GetAll([DisallowNull] IList<CameraCommandEntity> result )
            {
                foreach( var entry in _entries )
                {
                    if( entry.Value.GetAll( result ) == false )
                    {
                        _emptyKeys.Add( entry.Key );
                    }
                }
                RemoveEmptyKeys( );
                return _entries.Count > 0;
            }

        }
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, CameraCommandEntity> _entries = new SortedWeakReferenceList<Guid, CameraCommandEntity>( );
            public ById( )
            {
            }

            public void Add( CameraCommandEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<CameraCommandEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out CameraCommandEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<CameraCommandEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<CameraCommandEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<CameraCommandEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<CameraCommandEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<Guid, ByTimestamp> _entries = new SortedListEx<Guid, ByTimestamp>( );

        public CameraCommandByCameraAndTimestampEntityIndex( )
        {
        }

        public List<CameraCommandEntity> GetCameraCommandCollectionByCamera( Guid camera )
        {
            throw new NotImplementedException();
        }

        public List<CameraCommandEntity> GetCameraCommandCollectionByCameraAndTimestamp( Guid camera, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<CameraCommandEntity> GetCameraCommandCollectionByCameraAtTimestamp( Guid camera, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<CameraCommandEntity> GetCameraCommandCollectionByCameraFromTimestamp( Guid camera, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<CameraCommandEntity> GetCameraCommandCollectionByCameraUntilTimestamp( Guid camera, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        IList<CameraCommandEntity> GetCameraCommandCollectionByCameraOverTimestamp( Guid camera, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

    }

    public class CameraCommandByTimestampEntityIndex
    {
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, CameraCommandEntity> _entries = new SortedWeakReferenceList<Guid, CameraCommandEntity>( );
            public ById( )
            {
            }

            public void Add( CameraCommandEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<CameraCommandEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out CameraCommandEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<CameraCommandEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<CameraCommandEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<CameraCommandEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<CameraCommandEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<DateTime, ById> _entries = new SortedListEx<DateTime, ById>( );

        public CameraCommandByTimestampEntityIndex( )
        {
        }

        public List<CameraCommandEntity> GetCameraCommandCollectionByTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<CameraCommandEntity> GetCameraCommandCollectionAtTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<CameraCommandEntity> GetCameraCommandCollectionFromTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<CameraCommandEntity> GetCameraCommandCollectionUntilTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        IList<CameraCommandEntity> GetCameraCommandCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

    }

    public class CameraCommandByReplyEntityIndex
    {
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, CameraCommandEntity> _entries = new SortedWeakReferenceList<Guid, CameraCommandEntity>( );
            public ById( )
            {
            }

            public void Add( CameraCommandEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<CameraCommandEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out CameraCommandEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<CameraCommandEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<CameraCommandEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<CameraCommandEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<CameraCommandEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<Guid, ById> _entries = new SortedListEx<Guid, ById>( );

        public CameraCommandByReplyEntityIndex( )
        {
        }

        public List<CameraCommandEntity> GetCameraCommandCollectionByReply( Guid? reply )
        {
            throw new NotImplementedException();
        }

        public IList<CameraCommandEntity> GetCameraCommandCollectionByReplyIsNull(  )
        {
            throw new NotImplementedException();
        }

    }

    public class CameraCommandByReplyIsNullEntityIndex
    {
    }

    public class CameraCommandReplyByCameraAndTimestampEntityIndex
    {
        public class ByTimestamp
        {
            readonly SortedListEx<DateTime, ById> _entries = new SortedListEx<DateTime, ById>( );
            List<DateTime> _emptyKeys = new List<DateTime>( );

            public ByTimestamp( )
            {
            }

            void RemoveEmptyKeys( )
            {
                var emptyKeyCount = _emptyKeys.Count;
                for ( int i = 0; i < emptyKeyCount; i++ )
                {
                    _entries.Remove( _emptyKeys[ i ] );
                }
                _emptyKeys.Clear( );
            }

            public bool GetAll([DisallowNull] IList<CameraCommandReplyEntity> result )
            {
                foreach( var entry in _entries )
                {
                    if( entry.Value.GetAll( result ) == false )
                    {
                        _emptyKeys.Add( entry.Key );
                    }
                }
                RemoveEmptyKeys( );
                return _entries.Count > 0;
            }

        }
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, CameraCommandReplyEntity> _entries = new SortedWeakReferenceList<Guid, CameraCommandReplyEntity>( );
            public ById( )
            {
            }

            public void Add( CameraCommandReplyEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<CameraCommandReplyEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out CameraCommandReplyEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<CameraCommandReplyEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<CameraCommandReplyEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<CameraCommandReplyEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<CameraCommandReplyEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<Guid, ByTimestamp> _entries = new SortedListEx<Guid, ByTimestamp>( );

        public CameraCommandReplyByCameraAndTimestampEntityIndex( )
        {
        }

        public List<CameraCommandReplyEntity> GetCameraCommandReplyCollectionByCamera( Guid camera )
        {
            throw new NotImplementedException();
        }

        public List<CameraCommandReplyEntity> GetCameraCommandReplyCollectionByCameraAndTimestamp( Guid camera, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<CameraCommandReplyEntity> GetCameraCommandReplyCollectionByCameraAtTimestamp( Guid camera, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<CameraCommandReplyEntity> GetCameraCommandReplyCollectionByCameraFromTimestamp( Guid camera, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<CameraCommandReplyEntity> GetCameraCommandReplyCollectionByCameraUntilTimestamp( Guid camera, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        IList<CameraCommandReplyEntity> GetCameraCommandReplyCollectionByCameraOverTimestamp( Guid camera, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

    }

    public class CameraCommandReplyByTimestampEntityIndex
    {
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, CameraCommandReplyEntity> _entries = new SortedWeakReferenceList<Guid, CameraCommandReplyEntity>( );
            public ById( )
            {
            }

            public void Add( CameraCommandReplyEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<CameraCommandReplyEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out CameraCommandReplyEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<CameraCommandReplyEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<CameraCommandReplyEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<CameraCommandReplyEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<CameraCommandReplyEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<DateTime, ById> _entries = new SortedListEx<DateTime, ById>( );

        public CameraCommandReplyByTimestampEntityIndex( )
        {
        }

        public List<CameraCommandReplyEntity> GetCameraCommandReplyCollectionByTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<CameraCommandReplyEntity> GetCameraCommandReplyCollectionAtTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<CameraCommandReplyEntity> GetCameraCommandReplyCollectionFromTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<CameraCommandReplyEntity> GetCameraCommandReplyCollectionUntilTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        IList<CameraCommandReplyEntity> GetCameraCommandReplyCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

    }

    public class CameraCommandReplyByCommandEntityIndex
    {
        readonly SortedWeakReferenceList<Guid, CameraCommandReplyEntity> _entries = new SortedWeakReferenceList<Guid, CameraCommandReplyEntity>( );

        public CameraCommandReplyByCommandEntityIndex( )
        {
        }

        public void Add( CameraCommandReplyEntity entity )
        {
            if ( entity.CommandId is Guid command )
            {
                if ( _entries.TryGetValue( command, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( command, new WeakReference<CameraCommandReplyEntity>( entity, false ) );
                }
            }
            else
            {
                throw new ArgumentException( "entity.CommandId is null.", nameof( entity ) );
            }
        }

        public bool GetByCommandId( Guid command, out CameraCommandReplyEntity? entity )
        {
            entity = null;
            if ( _entries.TryGetValue( command, out var weakReference ) )
            {
                if ( weakReference.TryGetTarget( out entity ) == false )
                {
                    _entries.Remove( command );
                }
            }
            return _entries.Count > 0;
        }

        public bool GetFrom(Guid key, [DisallowNull] IList<CameraCommandReplyEntity> result )
        {
            return _entries.From( key, result );
        }

        public bool GetUntil(Guid key, [DisallowNull] IList<CameraCommandReplyEntity> result )
        {
            return _entries.Until( key, result );
        }

        public bool GetOver(Guid firstKey, Guid lastKey, [DisallowNull] IList<CameraCommandReplyEntity> result )
        {
            return _entries.Over( firstKey, lastKey, result );
        }

        public bool GetAll([DisallowNull] IList<CameraCommandReplyEntity> result )
        {
            return _entries.All( result );
        }

        public CameraCommandReplyEntity? GetCameraCommandReplyByCommand( Guid? command )
        {
            throw new NotImplementedException();
        }

        public IList<CameraCommandReplyEntity> GetCameraCommandReplyCollectionByCommandIsNull(  )
        {
            throw new NotImplementedException();
        }

    }
    public class CameraCommandReplyByCommandIsNullEntityIndex
    {
    }

    public class CameraConfigurationByCameraAndTimestampEntityIndex
    {
        public class ByTimestamp
        {
            readonly SortedWeakReferenceList<DateTime, CameraConfigurationEntity> _entries = new SortedWeakReferenceList<DateTime, CameraConfigurationEntity>( );

            public ByTimestamp( )
            {
            }

            public void Add( CameraConfigurationEntity entity )
            {
                if( _entries.TryGetValue(entity.Timestamp, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Timestamp, new WeakReference<CameraConfigurationEntity>( entity, false ) );
                }
            }

            public bool GetByTimestamp( DateTime timestamp, out CameraConfigurationEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( timestamp, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( timestamp );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(DateTime key, [DisallowNull] IList<CameraConfigurationEntity> result )
            {
                return _entries.From( key, result );
            }

            public bool GetUntil(DateTime key, [DisallowNull] IList<CameraConfigurationEntity> result )
            {
                return _entries.Until( key, result );
            }

            public bool GetOver(DateTime firstKey, DateTime lastKey, [DisallowNull] IList<CameraConfigurationEntity> result )
            {
                return _entries.Over( firstKey, lastKey, result );
            }

            public bool GetAll([DisallowNull] IList<CameraConfigurationEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<DateTime, ByTimestamp> _entries = new SortedListEx<DateTime, ByTimestamp>( );
        public List<CameraConfigurationEntity> GetCameraConfigurationCollectionByCamera( Guid camera )
        {
            throw new NotImplementedException();
        }

        public CameraConfigurationEntity? GetCameraConfigurationByCameraAndTimestamp( Guid camera, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public CameraConfigurationEntity? GetCameraConfigurationByCameraAtTimestamp( Guid camera, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<CameraConfigurationEntity> GetCameraConfigurationByCameraFromTimestamp( Guid camera, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<CameraConfigurationEntity> GetCameraConfigurationByCameraUntilTimestamp( Guid camera, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        IList<CameraConfigurationEntity> GetCameraConfigurationByCameraOverTimestamp( Guid camera, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

    }
    public class CameraConfigurationByTimestampEntityIndex
    {
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, CameraConfigurationEntity> _entries = new SortedWeakReferenceList<Guid, CameraConfigurationEntity>( );
            public ById( )
            {
            }

            public void Add( CameraConfigurationEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<CameraConfigurationEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out CameraConfigurationEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<CameraConfigurationEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<CameraConfigurationEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<CameraConfigurationEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<CameraConfigurationEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<DateTime, ById> _entries = new SortedListEx<DateTime, ById>( );

        public CameraConfigurationByTimestampEntityIndex( )
        {
        }

        public List<CameraConfigurationEntity> GetCameraConfigurationCollectionByTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<CameraConfigurationEntity> GetCameraConfigurationCollectionAtTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<CameraConfigurationEntity> GetCameraConfigurationCollectionFromTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<CameraConfigurationEntity> GetCameraConfigurationCollectionUntilTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        IList<CameraConfigurationEntity> GetCameraConfigurationCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

    }

    public class CameraPanCalibrationByCameraAndTimestampEntityIndex
    {
        public class ByTimestamp
        {
            readonly SortedWeakReferenceList<DateTime, CameraPanCalibrationEntity> _entries = new SortedWeakReferenceList<DateTime, CameraPanCalibrationEntity>( );

            public ByTimestamp( )
            {
            }

            public void Add( CameraPanCalibrationEntity entity )
            {
                if( _entries.TryGetValue(entity.Timestamp, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Timestamp, new WeakReference<CameraPanCalibrationEntity>( entity, false ) );
                }
            }

            public bool GetByTimestamp( DateTime timestamp, out CameraPanCalibrationEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( timestamp, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( timestamp );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(DateTime key, [DisallowNull] IList<CameraPanCalibrationEntity> result )
            {
                return _entries.From( key, result );
            }

            public bool GetUntil(DateTime key, [DisallowNull] IList<CameraPanCalibrationEntity> result )
            {
                return _entries.Until( key, result );
            }

            public bool GetOver(DateTime firstKey, DateTime lastKey, [DisallowNull] IList<CameraPanCalibrationEntity> result )
            {
                return _entries.Over( firstKey, lastKey, result );
            }

            public bool GetAll([DisallowNull] IList<CameraPanCalibrationEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<DateTime, ByTimestamp> _entries = new SortedListEx<DateTime, ByTimestamp>( );
        public List<CameraPanCalibrationEntity> GetCameraPanCalibrationCollectionByCamera( Guid camera )
        {
            throw new NotImplementedException();
        }

        public CameraPanCalibrationEntity? GetCameraPanCalibrationByCameraAndTimestamp( Guid camera, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public CameraPanCalibrationEntity? GetCameraPanCalibrationByCameraAtTimestamp( Guid camera, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<CameraPanCalibrationEntity> GetCameraPanCalibrationByCameraFromTimestamp( Guid camera, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<CameraPanCalibrationEntity> GetCameraPanCalibrationByCameraUntilTimestamp( Guid camera, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        IList<CameraPanCalibrationEntity> GetCameraPanCalibrationByCameraOverTimestamp( Guid camera, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

    }
    public class CameraPanCalibrationByTimestampEntityIndex
    {
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, CameraPanCalibrationEntity> _entries = new SortedWeakReferenceList<Guid, CameraPanCalibrationEntity>( );
            public ById( )
            {
            }

            public void Add( CameraPanCalibrationEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<CameraPanCalibrationEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out CameraPanCalibrationEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<CameraPanCalibrationEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<CameraPanCalibrationEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<CameraPanCalibrationEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<CameraPanCalibrationEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<DateTime, ById> _entries = new SortedListEx<DateTime, ById>( );

        public CameraPanCalibrationByTimestampEntityIndex( )
        {
        }

        public List<CameraPanCalibrationEntity> GetCameraPanCalibrationCollectionByTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<CameraPanCalibrationEntity> GetCameraPanCalibrationCollectionAtTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<CameraPanCalibrationEntity> GetCameraPanCalibrationCollectionFromTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<CameraPanCalibrationEntity> GetCameraPanCalibrationCollectionUntilTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        IList<CameraPanCalibrationEntity> GetCameraPanCalibrationCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

    }

    public class CameraPanCalibrationValueByPanCalibrationAndPanAngleEntityIndex
    {
        public class ByPanAngle
        {
            readonly SortedWeakReferenceList<double, CameraPanCalibrationValueEntity> _entries = new SortedWeakReferenceList<double, CameraPanCalibrationValueEntity>( );

            public ByPanAngle( )
            {
            }

            public void Add( CameraPanCalibrationValueEntity entity )
            {
                if( _entries.TryGetValue(entity.PanAngle, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.PanAngle, new WeakReference<CameraPanCalibrationValueEntity>( entity, false ) );
                }
            }

            public bool GetByPanAngle( double panAngle, out CameraPanCalibrationValueEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( panAngle, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( panAngle );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(double key, [DisallowNull] IList<CameraPanCalibrationValueEntity> result )
            {
                return _entries.From( key, result );
            }

            public bool GetUntil(double key, [DisallowNull] IList<CameraPanCalibrationValueEntity> result )
            {
                return _entries.Until( key, result );
            }

            public bool GetOver(double firstKey, double lastKey, [DisallowNull] IList<CameraPanCalibrationValueEntity> result )
            {
                return _entries.Over( firstKey, lastKey, result );
            }

            public bool GetAll([DisallowNull] IList<CameraPanCalibrationValueEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<double, ByPanAngle> _entries = new SortedListEx<double, ByPanAngle>( );
        public List<CameraPanCalibrationValueEntity> GetCameraPanCalibrationValueCollectionByPanCalibration( Guid panCalibration )
        {
            throw new NotImplementedException();
        }

        public CameraPanCalibrationValueEntity? GetCameraPanCalibrationValueByPanCalibrationAndPanAngle( Guid panCalibration, double panAngle )
        {
            throw new NotImplementedException();
        }

        public IList<CameraPanCalibrationValueEntity> GetCameraPanCalibrationValueByPanCalibrationFromPanAngle( Guid panCalibration, double panAngle )
        {
            throw new NotImplementedException();
        }

        public IList<CameraPanCalibrationValueEntity> GetCameraPanCalibrationValueByPanCalibrationUntilPanAngle( Guid panCalibration, double panAngle )
        {
            throw new NotImplementedException();
        }

        IList<CameraPanCalibrationValueEntity> GetCameraPanCalibrationValueByPanCalibrationOverPanAngle( Guid panCalibration, double fromPanAngle, double untilPanAngle )
        {
            throw new NotImplementedException();
        }

    }
    public class CameraStatusByCameraAndTimestampEntityIndex
    {
        public class ByTimestamp
        {
            readonly SortedWeakReferenceList<DateTime, CameraStatusEntity> _entries = new SortedWeakReferenceList<DateTime, CameraStatusEntity>( );

            public ByTimestamp( )
            {
            }

            public void Add( CameraStatusEntity entity )
            {
                if( _entries.TryGetValue(entity.Timestamp, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Timestamp, new WeakReference<CameraStatusEntity>( entity, false ) );
                }
            }

            public bool GetByTimestamp( DateTime timestamp, out CameraStatusEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( timestamp, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( timestamp );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(DateTime key, [DisallowNull] IList<CameraStatusEntity> result )
            {
                return _entries.From( key, result );
            }

            public bool GetUntil(DateTime key, [DisallowNull] IList<CameraStatusEntity> result )
            {
                return _entries.Until( key, result );
            }

            public bool GetOver(DateTime firstKey, DateTime lastKey, [DisallowNull] IList<CameraStatusEntity> result )
            {
                return _entries.Over( firstKey, lastKey, result );
            }

            public bool GetAll([DisallowNull] IList<CameraStatusEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<DateTime, ByTimestamp> _entries = new SortedListEx<DateTime, ByTimestamp>( );
        public List<CameraStatusEntity> GetCameraStatusCollectionByCamera( Guid camera )
        {
            throw new NotImplementedException();
        }

        public CameraStatusEntity? GetCameraStatusByCameraAndTimestamp( Guid camera, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public CameraStatusEntity? GetCameraStatusByCameraAtTimestamp( Guid camera, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<CameraStatusEntity> GetCameraStatusByCameraFromTimestamp( Guid camera, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<CameraStatusEntity> GetCameraStatusByCameraUntilTimestamp( Guid camera, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        IList<CameraStatusEntity> GetCameraStatusByCameraOverTimestamp( Guid camera, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

    }
    public class CameraStatusByTrackAndTimestampEntityIndex
    {
        public class ByTimestamp
        {
            readonly SortedWeakReferenceList<DateTime, CameraStatusEntity> _entries = new SortedWeakReferenceList<DateTime, CameraStatusEntity>( );

            public ByTimestamp( )
            {
            }

            public void Add( CameraStatusEntity entity )
            {
                if( _entries.TryGetValue(entity.Timestamp, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Timestamp, new WeakReference<CameraStatusEntity>( entity, false ) );
                }
            }

            public bool GetByTimestamp( DateTime timestamp, out CameraStatusEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( timestamp, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( timestamp );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(DateTime key, [DisallowNull] IList<CameraStatusEntity> result )
            {
                return _entries.From( key, result );
            }

            public bool GetUntil(DateTime key, [DisallowNull] IList<CameraStatusEntity> result )
            {
                return _entries.Until( key, result );
            }

            public bool GetOver(DateTime firstKey, DateTime lastKey, [DisallowNull] IList<CameraStatusEntity> result )
            {
                return _entries.Over( firstKey, lastKey, result );
            }

            public bool GetAll([DisallowNull] IList<CameraStatusEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<DateTime, ByTimestamp> _entries = new SortedListEx<DateTime, ByTimestamp>( );
        public List<CameraStatusEntity> GetCameraStatusCollectionByTrack( Guid? track )
        {
            throw new NotImplementedException();
        }

        public IList<CameraStatusEntity> GetCameraStatusCollectionByTrackIsNull(  )
        {
            throw new NotImplementedException();
        }

        public CameraStatusEntity? GetCameraStatusByTrackAndTimestamp( Guid? track, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<CameraStatusEntity> GetCameraStatusCollectionByTrackIsNullAndTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public CameraStatusEntity? GetCameraStatusByTrackAtTimestamp( Guid? track, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<CameraStatusEntity> GetCameraStatusByTrackFromTimestamp( Guid? track, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<CameraStatusEntity> GetCameraStatusByTrackUntilTimestamp( Guid? track, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        IList<CameraStatusEntity> GetCameraStatusByTrackOverTimestamp( Guid track, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

    }
    public class CameraStatusByTrackIsNullAndTimestampEntityIndex
    {
    }

    public class CameraStatusByTimestampEntityIndex
    {
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, CameraStatusEntity> _entries = new SortedWeakReferenceList<Guid, CameraStatusEntity>( );
            public ById( )
            {
            }

            public void Add( CameraStatusEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<CameraStatusEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out CameraStatusEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<CameraStatusEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<CameraStatusEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<CameraStatusEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<CameraStatusEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<DateTime, ById> _entries = new SortedListEx<DateTime, ById>( );

        public CameraStatusByTimestampEntityIndex( )
        {
        }

        public List<CameraStatusEntity> GetCameraStatusCollectionByTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<CameraStatusEntity> GetCameraStatusCollectionAtTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<CameraStatusEntity> GetCameraStatusCollectionFromTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<CameraStatusEntity> GetCameraStatusCollectionUntilTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        IList<CameraStatusEntity> GetCameraStatusCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

    }

    public class CameraTiltCalibrationByCameraAndTimestampEntityIndex
    {
        public class ByTimestamp
        {
            readonly SortedWeakReferenceList<DateTime, CameraTiltCalibrationEntity> _entries = new SortedWeakReferenceList<DateTime, CameraTiltCalibrationEntity>( );

            public ByTimestamp( )
            {
            }

            public void Add( CameraTiltCalibrationEntity entity )
            {
                if( _entries.TryGetValue(entity.Timestamp, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Timestamp, new WeakReference<CameraTiltCalibrationEntity>( entity, false ) );
                }
            }

            public bool GetByTimestamp( DateTime timestamp, out CameraTiltCalibrationEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( timestamp, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( timestamp );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(DateTime key, [DisallowNull] IList<CameraTiltCalibrationEntity> result )
            {
                return _entries.From( key, result );
            }

            public bool GetUntil(DateTime key, [DisallowNull] IList<CameraTiltCalibrationEntity> result )
            {
                return _entries.Until( key, result );
            }

            public bool GetOver(DateTime firstKey, DateTime lastKey, [DisallowNull] IList<CameraTiltCalibrationEntity> result )
            {
                return _entries.Over( firstKey, lastKey, result );
            }

            public bool GetAll([DisallowNull] IList<CameraTiltCalibrationEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<DateTime, ByTimestamp> _entries = new SortedListEx<DateTime, ByTimestamp>( );
        public List<CameraTiltCalibrationEntity> GetCameraTiltCalibrationCollectionByCamera( Guid camera )
        {
            throw new NotImplementedException();
        }

        public CameraTiltCalibrationEntity? GetCameraTiltCalibrationByCameraAndTimestamp( Guid camera, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public CameraTiltCalibrationEntity? GetCameraTiltCalibrationByCameraAtTimestamp( Guid camera, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<CameraTiltCalibrationEntity> GetCameraTiltCalibrationByCameraFromTimestamp( Guid camera, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<CameraTiltCalibrationEntity> GetCameraTiltCalibrationByCameraUntilTimestamp( Guid camera, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        IList<CameraTiltCalibrationEntity> GetCameraTiltCalibrationByCameraOverTimestamp( Guid camera, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

    }
    public class CameraTiltCalibrationByTimestampEntityIndex
    {
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, CameraTiltCalibrationEntity> _entries = new SortedWeakReferenceList<Guid, CameraTiltCalibrationEntity>( );
            public ById( )
            {
            }

            public void Add( CameraTiltCalibrationEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<CameraTiltCalibrationEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out CameraTiltCalibrationEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<CameraTiltCalibrationEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<CameraTiltCalibrationEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<CameraTiltCalibrationEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<CameraTiltCalibrationEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<DateTime, ById> _entries = new SortedListEx<DateTime, ById>( );

        public CameraTiltCalibrationByTimestampEntityIndex( )
        {
        }

        public List<CameraTiltCalibrationEntity> GetCameraTiltCalibrationCollectionByTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<CameraTiltCalibrationEntity> GetCameraTiltCalibrationCollectionAtTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<CameraTiltCalibrationEntity> GetCameraTiltCalibrationCollectionFromTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<CameraTiltCalibrationEntity> GetCameraTiltCalibrationCollectionUntilTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        IList<CameraTiltCalibrationEntity> GetCameraTiltCalibrationCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

    }

    public class CameraTiltCalibrationValueByTiltCalibrationAndPanAngleEntityIndex
    {
        public class ByPanAngle
        {
            readonly SortedWeakReferenceList<double, CameraTiltCalibrationValueEntity> _entries = new SortedWeakReferenceList<double, CameraTiltCalibrationValueEntity>( );

            public ByPanAngle( )
            {
            }

            public void Add( CameraTiltCalibrationValueEntity entity )
            {
                if( _entries.TryGetValue(entity.PanAngle, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.PanAngle, new WeakReference<CameraTiltCalibrationValueEntity>( entity, false ) );
                }
            }

            public bool GetByPanAngle( double panAngle, out CameraTiltCalibrationValueEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( panAngle, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( panAngle );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(double key, [DisallowNull] IList<CameraTiltCalibrationValueEntity> result )
            {
                return _entries.From( key, result );
            }

            public bool GetUntil(double key, [DisallowNull] IList<CameraTiltCalibrationValueEntity> result )
            {
                return _entries.Until( key, result );
            }

            public bool GetOver(double firstKey, double lastKey, [DisallowNull] IList<CameraTiltCalibrationValueEntity> result )
            {
                return _entries.Over( firstKey, lastKey, result );
            }

            public bool GetAll([DisallowNull] IList<CameraTiltCalibrationValueEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<double, ByPanAngle> _entries = new SortedListEx<double, ByPanAngle>( );
        public List<CameraTiltCalibrationValueEntity> GetCameraTiltCalibrationValueCollectionByTiltCalibration( Guid tiltCalibration )
        {
            throw new NotImplementedException();
        }

        public CameraTiltCalibrationValueEntity? GetCameraTiltCalibrationValueByTiltCalibrationAndPanAngle( Guid tiltCalibration, double panAngle )
        {
            throw new NotImplementedException();
        }

        public IList<CameraTiltCalibrationValueEntity> GetCameraTiltCalibrationValueByTiltCalibrationFromPanAngle( Guid tiltCalibration, double panAngle )
        {
            throw new NotImplementedException();
        }

        public IList<CameraTiltCalibrationValueEntity> GetCameraTiltCalibrationValueByTiltCalibrationUntilPanAngle( Guid tiltCalibration, double panAngle )
        {
            throw new NotImplementedException();
        }

        IList<CameraTiltCalibrationValueEntity> GetCameraTiltCalibrationValueByTiltCalibrationOverPanAngle( Guid tiltCalibration, double fromPanAngle, double untilPanAngle )
        {
            throw new NotImplementedException();
        }

    }
    public class CameraZoomCalibrationByCameraAndTimestampEntityIndex
    {
        public class ByTimestamp
        {
            readonly SortedWeakReferenceList<DateTime, CameraZoomCalibrationEntity> _entries = new SortedWeakReferenceList<DateTime, CameraZoomCalibrationEntity>( );

            public ByTimestamp( )
            {
            }

            public void Add( CameraZoomCalibrationEntity entity )
            {
                if( _entries.TryGetValue(entity.Timestamp, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Timestamp, new WeakReference<CameraZoomCalibrationEntity>( entity, false ) );
                }
            }

            public bool GetByTimestamp( DateTime timestamp, out CameraZoomCalibrationEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( timestamp, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( timestamp );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(DateTime key, [DisallowNull] IList<CameraZoomCalibrationEntity> result )
            {
                return _entries.From( key, result );
            }

            public bool GetUntil(DateTime key, [DisallowNull] IList<CameraZoomCalibrationEntity> result )
            {
                return _entries.Until( key, result );
            }

            public bool GetOver(DateTime firstKey, DateTime lastKey, [DisallowNull] IList<CameraZoomCalibrationEntity> result )
            {
                return _entries.Over( firstKey, lastKey, result );
            }

            public bool GetAll([DisallowNull] IList<CameraZoomCalibrationEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<DateTime, ByTimestamp> _entries = new SortedListEx<DateTime, ByTimestamp>( );
        public List<CameraZoomCalibrationEntity> GetCameraZoomCalibrationCollectionByCamera( Guid camera )
        {
            throw new NotImplementedException();
        }

        public CameraZoomCalibrationEntity? GetCameraZoomCalibrationByCameraAndTimestamp( Guid camera, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public CameraZoomCalibrationEntity? GetCameraZoomCalibrationByCameraAtTimestamp( Guid camera, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<CameraZoomCalibrationEntity> GetCameraZoomCalibrationByCameraFromTimestamp( Guid camera, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<CameraZoomCalibrationEntity> GetCameraZoomCalibrationByCameraUntilTimestamp( Guid camera, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        IList<CameraZoomCalibrationEntity> GetCameraZoomCalibrationByCameraOverTimestamp( Guid camera, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

    }
    public class CameraZoomCalibrationByTimestampEntityIndex
    {
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, CameraZoomCalibrationEntity> _entries = new SortedWeakReferenceList<Guid, CameraZoomCalibrationEntity>( );
            public ById( )
            {
            }

            public void Add( CameraZoomCalibrationEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<CameraZoomCalibrationEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out CameraZoomCalibrationEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<CameraZoomCalibrationEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<CameraZoomCalibrationEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<CameraZoomCalibrationEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<CameraZoomCalibrationEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<DateTime, ById> _entries = new SortedListEx<DateTime, ById>( );

        public CameraZoomCalibrationByTimestampEntityIndex( )
        {
        }

        public List<CameraZoomCalibrationEntity> GetCameraZoomCalibrationCollectionByTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<CameraZoomCalibrationEntity> GetCameraZoomCalibrationCollectionAtTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<CameraZoomCalibrationEntity> GetCameraZoomCalibrationCollectionFromTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<CameraZoomCalibrationEntity> GetCameraZoomCalibrationCollectionUntilTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        IList<CameraZoomCalibrationEntity> GetCameraZoomCalibrationCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

    }

    public class CameraZoomCalibrationValueByZoomCalibrationAndFocalLengthEntityIndex
    {
        public class ByFocalLength
        {
            readonly SortedWeakReferenceList<double, CameraZoomCalibrationValueEntity> _entries = new SortedWeakReferenceList<double, CameraZoomCalibrationValueEntity>( );

            public ByFocalLength( )
            {
            }

            public void Add( CameraZoomCalibrationValueEntity entity )
            {
                if( _entries.TryGetValue(entity.FocalLength, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.FocalLength, new WeakReference<CameraZoomCalibrationValueEntity>( entity, false ) );
                }
            }

            public bool GetByFocalLength( double focalLength, out CameraZoomCalibrationValueEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( focalLength, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( focalLength );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(double key, [DisallowNull] IList<CameraZoomCalibrationValueEntity> result )
            {
                return _entries.From( key, result );
            }

            public bool GetUntil(double key, [DisallowNull] IList<CameraZoomCalibrationValueEntity> result )
            {
                return _entries.Until( key, result );
            }

            public bool GetOver(double firstKey, double lastKey, [DisallowNull] IList<CameraZoomCalibrationValueEntity> result )
            {
                return _entries.Over( firstKey, lastKey, result );
            }

            public bool GetAll([DisallowNull] IList<CameraZoomCalibrationValueEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<double, ByFocalLength> _entries = new SortedListEx<double, ByFocalLength>( );
        public List<CameraZoomCalibrationValueEntity> GetCameraZoomCalibrationValueCollectionByZoomCalibration( Guid zoomCalibration )
        {
            throw new NotImplementedException();
        }

        public CameraZoomCalibrationValueEntity? GetCameraZoomCalibrationValueByZoomCalibrationAndFocalLength( Guid zoomCalibration, double focalLength )
        {
            throw new NotImplementedException();
        }

        public IList<CameraZoomCalibrationValueEntity> GetCameraZoomCalibrationValueByZoomCalibrationFromFocalLength( Guid zoomCalibration, double focalLength )
        {
            throw new NotImplementedException();
        }

        public IList<CameraZoomCalibrationValueEntity> GetCameraZoomCalibrationValueByZoomCalibrationUntilFocalLength( Guid zoomCalibration, double focalLength )
        {
            throw new NotImplementedException();
        }

        IList<CameraZoomCalibrationValueEntity> GetCameraZoomCalibrationValueByZoomCalibrationOverFocalLength( Guid zoomCalibration, double fromFocalLength, double untilFocalLength )
        {
            throw new NotImplementedException();
        }

    }
    public class CatalogElementByCatalogAndNameEntityIndex
    {
        public class ByName
        {
            readonly SortedWeakReferenceList<string, CatalogElementEntity> _entries = new SortedWeakReferenceList<string, CatalogElementEntity>( );

            public ByName( )
            {
            }

            public void Add( CatalogElementEntity entity )
            {
                if( _entries.TryGetValue(entity.Name, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Name, new WeakReference<CatalogElementEntity>( entity, false ) );
                }
            }

            public bool GetByName( string name, out CatalogElementEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( name, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( name );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(string key, [DisallowNull] IList<CatalogElementEntity> result )
            {
                return _entries.From( key, result );
            }

            public bool GetUntil(string key, [DisallowNull] IList<CatalogElementEntity> result )
            {
                return _entries.Until( key, result );
            }

            public bool GetOver(string firstKey, string lastKey, [DisallowNull] IList<CatalogElementEntity> result )
            {
                return _entries.Over( firstKey, lastKey, result );
            }

            public bool GetAll([DisallowNull] IList<CatalogElementEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<string, ByName> _entries = new SortedListEx<string, ByName>( );
        public List<CatalogElementEntity> GetCatalogElementCollectionByCatalog( Guid? catalog )
        {
            throw new NotImplementedException();
        }

        public IList<CatalogElementEntity> GetCatalogElementCollectionByCatalogIsNull(  )
        {
            throw new NotImplementedException();
        }

        public CatalogElementEntity? GetCatalogElementByCatalogAndName( Guid? catalog, string name )
        {
            throw new NotImplementedException();
        }

        public IList<CatalogElementEntity> GetCatalogElementCollectionByCatalogIsNullAndName( string name )
        {
            throw new NotImplementedException();
        }

    }
    public class CatalogElementByCatalogIsNullAndNameEntityIndex
    {
    }

    public class ElementByElementTypeEntityIndex
    {
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, ElementEntity> _entries = new SortedWeakReferenceList<Guid, ElementEntity>( );
            public ById( )
            {
            }

            public void Add( ElementEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<ElementEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out ElementEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<ElementEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<ElementEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<ElementEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<ElementEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<Guid, ById> _entries = new SortedListEx<Guid, ById>( );

        public ElementByElementTypeEntityIndex( )
        {
        }

        public List<ElementEntity> GetElementCollectionByElementType( Guid? elementType )
        {
            throw new NotImplementedException();
        }

        public IList<ElementEntity> GetElementCollectionByElementTypeIsNull(  )
        {
            throw new NotImplementedException();
        }

    }

    public class ElementByElementTypeIsNullEntityIndex
    {
    }

    public class CountryByNameEntityIndex
    {
        readonly SortedWeakReferenceList<string, CountryEntity> _entries = new SortedWeakReferenceList<string, CountryEntity>( );

        public CountryByNameEntityIndex( )
        {
        }

        public void Add( CountryEntity entity )
        {
            if( _entries.TryGetValue(entity.Name, out var weakReference ) )
            {
                weakReference.SetTarget( entity );
            }
            else
            {
                _entries.Add( entity.Name, new WeakReference<CountryEntity>( entity, false ) );
            }
        }

        public bool GetByName( string name, out CountryEntity? entity )
        {
            entity = null;
            if ( _entries.TryGetValue( name, out var weakReference ) )
            {
                if ( weakReference.TryGetTarget( out entity ) == false )
                {
                    _entries.Remove( name );
                }
            }
            return _entries.Count > 0;
        }

        public bool GetFrom(string key, [DisallowNull] IList<CountryEntity> result )
        {
            return _entries.From( key, result );
        }

        public bool GetUntil(string key, [DisallowNull] IList<CountryEntity> result )
        {
            return _entries.Until( key, result );
        }

        public bool GetOver(string firstKey, string lastKey, [DisallowNull] IList<CountryEntity> result )
        {
            return _entries.Over( firstKey, lastKey, result );
        }

        public bool GetAll([DisallowNull] IList<CountryEntity> result )
        {
            return _entries.All( result );
        }

        public CountryEntity? GetCountryByName( string name )
        {
            throw new NotImplementedException();
        }

    }
    public class CountryByCodeEntityIndex
    {
        readonly SortedWeakReferenceList<int, CountryEntity> _entries = new SortedWeakReferenceList<int, CountryEntity>( );

        public CountryByCodeEntityIndex( )
        {
        }

        public void Add( CountryEntity entity )
        {
            if( _entries.TryGetValue(entity.Code, out var weakReference ) )
            {
                weakReference.SetTarget( entity );
            }
            else
            {
                _entries.Add( entity.Code, new WeakReference<CountryEntity>( entity, false ) );
            }
        }

        public bool GetByCode( int code, out CountryEntity? entity )
        {
            entity = null;
            if ( _entries.TryGetValue( code, out var weakReference ) )
            {
                if ( weakReference.TryGetTarget( out entity ) == false )
                {
                    _entries.Remove( code );
                }
            }
            return _entries.Count > 0;
        }

        public bool GetFrom(int key, [DisallowNull] IList<CountryEntity> result )
        {
            return _entries.From( key, result );
        }

        public bool GetUntil(int key, [DisallowNull] IList<CountryEntity> result )
        {
            return _entries.Until( key, result );
        }

        public bool GetOver(int firstKey, int lastKey, [DisallowNull] IList<CountryEntity> result )
        {
            return _entries.Over( firstKey, lastKey, result );
        }

        public bool GetAll([DisallowNull] IList<CountryEntity> result )
        {
            return _entries.All( result );
        }

        public CountryEntity? GetCountryByCode( int code )
        {
            throw new NotImplementedException();
        }

        public IList<CountryEntity> GetCountryFromCode( int code )
        {
            throw new NotImplementedException();
        }

        public IList<CountryEntity> GetCountryUntilCode( int code )
        {
            throw new NotImplementedException();
        }

        IList<CountryEntity> GetCountryOverCode( int fromCode, int untilCode )
        {
            throw new NotImplementedException();
        }

    }
    public class CountryByAlpha2EntityIndex
    {
        readonly SortedWeakReferenceList<string, CountryEntity> _entries = new SortedWeakReferenceList<string, CountryEntity>( );

        public CountryByAlpha2EntityIndex( )
        {
        }

        public void Add( CountryEntity entity )
        {
            if( _entries.TryGetValue(entity.Alpha2, out var weakReference ) )
            {
                weakReference.SetTarget( entity );
            }
            else
            {
                _entries.Add( entity.Alpha2, new WeakReference<CountryEntity>( entity, false ) );
            }
        }

        public bool GetByAlpha2( string alpha2, out CountryEntity? entity )
        {
            entity = null;
            if ( _entries.TryGetValue( alpha2, out var weakReference ) )
            {
                if ( weakReference.TryGetTarget( out entity ) == false )
                {
                    _entries.Remove( alpha2 );
                }
            }
            return _entries.Count > 0;
        }

        public bool GetFrom(string key, [DisallowNull] IList<CountryEntity> result )
        {
            return _entries.From( key, result );
        }

        public bool GetUntil(string key, [DisallowNull] IList<CountryEntity> result )
        {
            return _entries.Until( key, result );
        }

        public bool GetOver(string firstKey, string lastKey, [DisallowNull] IList<CountryEntity> result )
        {
            return _entries.Over( firstKey, lastKey, result );
        }

        public bool GetAll([DisallowNull] IList<CountryEntity> result )
        {
            return _entries.All( result );
        }

        public CountryEntity? GetCountryByAlpha2( string alpha2 )
        {
            throw new NotImplementedException();
        }

    }
    public class CountryByAlpha3EntityIndex
    {
        readonly SortedWeakReferenceList<string, CountryEntity> _entries = new SortedWeakReferenceList<string, CountryEntity>( );

        public CountryByAlpha3EntityIndex( )
        {
        }

        public void Add( CountryEntity entity )
        {
            if( _entries.TryGetValue(entity.Alpha3, out var weakReference ) )
            {
                weakReference.SetTarget( entity );
            }
            else
            {
                _entries.Add( entity.Alpha3, new WeakReference<CountryEntity>( entity, false ) );
            }
        }

        public bool GetByAlpha3( string alpha3, out CountryEntity? entity )
        {
            entity = null;
            if ( _entries.TryGetValue( alpha3, out var weakReference ) )
            {
                if ( weakReference.TryGetTarget( out entity ) == false )
                {
                    _entries.Remove( alpha3 );
                }
            }
            return _entries.Count > 0;
        }

        public bool GetFrom(string key, [DisallowNull] IList<CountryEntity> result )
        {
            return _entries.From( key, result );
        }

        public bool GetUntil(string key, [DisallowNull] IList<CountryEntity> result )
        {
            return _entries.Until( key, result );
        }

        public bool GetOver(string firstKey, string lastKey, [DisallowNull] IList<CountryEntity> result )
        {
            return _entries.Over( firstKey, lastKey, result );
        }

        public bool GetAll([DisallowNull] IList<CountryEntity> result )
        {
            return _entries.All( result );
        }

        public CountryEntity? GetCountryByAlpha3( string alpha3 )
        {
            throw new NotImplementedException();
        }

    }
    public class DateTimeTimeseriesValueByTimeseriesAndTimestampEntityIndex
    {
        public class ByTimestamp
        {
            readonly SortedWeakReferenceList<DateTime, DateTimeTimeseriesValueEntity> _entries = new SortedWeakReferenceList<DateTime, DateTimeTimeseriesValueEntity>( );

            public ByTimestamp( )
            {
            }

            public void Add( DateTimeTimeseriesValueEntity entity )
            {
                if( _entries.TryGetValue(entity.Timestamp, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Timestamp, new WeakReference<DateTimeTimeseriesValueEntity>( entity, false ) );
                }
            }

            public bool GetByTimestamp( DateTime timestamp, out DateTimeTimeseriesValueEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( timestamp, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( timestamp );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(DateTime key, [DisallowNull] IList<DateTimeTimeseriesValueEntity> result )
            {
                return _entries.From( key, result );
            }

            public bool GetUntil(DateTime key, [DisallowNull] IList<DateTimeTimeseriesValueEntity> result )
            {
                return _entries.Until( key, result );
            }

            public bool GetOver(DateTime firstKey, DateTime lastKey, [DisallowNull] IList<DateTimeTimeseriesValueEntity> result )
            {
                return _entries.Over( firstKey, lastKey, result );
            }

            public bool GetAll([DisallowNull] IList<DateTimeTimeseriesValueEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<DateTime, ByTimestamp> _entries = new SortedListEx<DateTime, ByTimestamp>( );
        public List<DateTimeTimeseriesValueEntity> GetDateTimeTimeseriesValueCollectionByTimeseries( Guid timeseries )
        {
            throw new NotImplementedException();
        }

        public DateTimeTimeseriesValueEntity? GetDateTimeTimeseriesValueByTimeseriesAndTimestamp( Guid timeseries, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public DateTimeTimeseriesValueEntity? GetDateTimeTimeseriesValueByTimeseriesAtTimestamp( Guid timeseries, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<DateTimeTimeseriesValueEntity> GetDateTimeTimeseriesValueByTimeseriesFromTimestamp( Guid timeseries, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<DateTimeTimeseriesValueEntity> GetDateTimeTimeseriesValueByTimeseriesUntilTimestamp( Guid timeseries, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        IList<DateTimeTimeseriesValueEntity> GetDateTimeTimeseriesValueByTimeseriesOverTimestamp( Guid timeseries, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

    }
    public class DateTimeTimeseriesValueByTimestampEntityIndex
    {
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, DateTimeTimeseriesValueEntity> _entries = new SortedWeakReferenceList<Guid, DateTimeTimeseriesValueEntity>( );
            public ById( )
            {
            }

            public void Add( DateTimeTimeseriesValueEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<DateTimeTimeseriesValueEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out DateTimeTimeseriesValueEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<DateTimeTimeseriesValueEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<DateTimeTimeseriesValueEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<DateTimeTimeseriesValueEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<DateTimeTimeseriesValueEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<DateTime, ById> _entries = new SortedListEx<DateTime, ById>( );

        public DateTimeTimeseriesValueByTimestampEntityIndex( )
        {
        }

        public List<DateTimeTimeseriesValueEntity> GetDateTimeTimeseriesValueCollectionByTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<DateTimeTimeseriesValueEntity> GetDateTimeTimeseriesValueCollectionAtTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<DateTimeTimeseriesValueEntity> GetDateTimeTimeseriesValueCollectionFromTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<DateTimeTimeseriesValueEntity> GetDateTimeTimeseriesValueCollectionUntilTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        IList<DateTimeTimeseriesValueEntity> GetDateTimeTimeseriesValueCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

    }

    public class DeviceHostByNameEntityIndex
    {
        readonly SortedWeakReferenceList<string, DeviceHostEntity> _entries = new SortedWeakReferenceList<string, DeviceHostEntity>( );

        public DeviceHostByNameEntityIndex( )
        {
        }

        public void Add( DeviceHostEntity entity )
        {
            if( _entries.TryGetValue(entity.Name, out var weakReference ) )
            {
                weakReference.SetTarget( entity );
            }
            else
            {
                _entries.Add( entity.Name, new WeakReference<DeviceHostEntity>( entity, false ) );
            }
        }

        public bool GetByName( string name, out DeviceHostEntity? entity )
        {
            entity = null;
            if ( _entries.TryGetValue( name, out var weakReference ) )
            {
                if ( weakReference.TryGetTarget( out entity ) == false )
                {
                    _entries.Remove( name );
                }
            }
            return _entries.Count > 0;
        }

        public bool GetFrom(string key, [DisallowNull] IList<DeviceHostEntity> result )
        {
            return _entries.From( key, result );
        }

        public bool GetUntil(string key, [DisallowNull] IList<DeviceHostEntity> result )
        {
            return _entries.Until( key, result );
        }

        public bool GetOver(string firstKey, string lastKey, [DisallowNull] IList<DeviceHostEntity> result )
        {
            return _entries.Over( firstKey, lastKey, result );
        }

        public bool GetAll([DisallowNull] IList<DeviceHostEntity> result )
        {
            return _entries.All( result );
        }

        public DeviceHostEntity? GetDeviceHostByName( string name )
        {
            throw new NotImplementedException();
        }

    }
    public class DeviceHostConfigurationByHostAndTimestampEntityIndex
    {
        public class ByTimestamp
        {
            readonly SortedWeakReferenceList<DateTime, DeviceHostConfigurationEntity> _entries = new SortedWeakReferenceList<DateTime, DeviceHostConfigurationEntity>( );

            public ByTimestamp( )
            {
            }

            public void Add( DeviceHostConfigurationEntity entity )
            {
                if( _entries.TryGetValue(entity.Timestamp, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Timestamp, new WeakReference<DeviceHostConfigurationEntity>( entity, false ) );
                }
            }

            public bool GetByTimestamp( DateTime timestamp, out DeviceHostConfigurationEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( timestamp, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( timestamp );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(DateTime key, [DisallowNull] IList<DeviceHostConfigurationEntity> result )
            {
                return _entries.From( key, result );
            }

            public bool GetUntil(DateTime key, [DisallowNull] IList<DeviceHostConfigurationEntity> result )
            {
                return _entries.Until( key, result );
            }

            public bool GetOver(DateTime firstKey, DateTime lastKey, [DisallowNull] IList<DeviceHostConfigurationEntity> result )
            {
                return _entries.Over( firstKey, lastKey, result );
            }

            public bool GetAll([DisallowNull] IList<DeviceHostConfigurationEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<DateTime, ByTimestamp> _entries = new SortedListEx<DateTime, ByTimestamp>( );
        public List<DeviceHostConfigurationEntity> GetDeviceHostConfigurationCollectionByHost( Guid host )
        {
            throw new NotImplementedException();
        }

        public DeviceHostConfigurationEntity? GetDeviceHostConfigurationByHostAndTimestamp( Guid host, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public DeviceHostConfigurationEntity? GetDeviceHostConfigurationByHostAtTimestamp( Guid host, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<DeviceHostConfigurationEntity> GetDeviceHostConfigurationByHostFromTimestamp( Guid host, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<DeviceHostConfigurationEntity> GetDeviceHostConfigurationByHostUntilTimestamp( Guid host, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        IList<DeviceHostConfigurationEntity> GetDeviceHostConfigurationByHostOverTimestamp( Guid host, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

    }
    public class DeviceHostConfigurationByTimestampEntityIndex
    {
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, DeviceHostConfigurationEntity> _entries = new SortedWeakReferenceList<Guid, DeviceHostConfigurationEntity>( );
            public ById( )
            {
            }

            public void Add( DeviceHostConfigurationEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<DeviceHostConfigurationEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out DeviceHostConfigurationEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<DeviceHostConfigurationEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<DeviceHostConfigurationEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<DeviceHostConfigurationEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<DeviceHostConfigurationEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<DateTime, ById> _entries = new SortedListEx<DateTime, ById>( );

        public DeviceHostConfigurationByTimestampEntityIndex( )
        {
        }

        public List<DeviceHostConfigurationEntity> GetDeviceHostConfigurationCollectionByTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<DeviceHostConfigurationEntity> GetDeviceHostConfigurationCollectionAtTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<DeviceHostConfigurationEntity> GetDeviceHostConfigurationCollectionFromTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<DeviceHostConfigurationEntity> GetDeviceHostConfigurationCollectionUntilTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        IList<DeviceHostConfigurationEntity> GetDeviceHostConfigurationCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

    }

    public class DoubleTimeseriesValueByTimeseriesAndTimestampEntityIndex
    {
        public class ByTimestamp
        {
            readonly SortedWeakReferenceList<DateTime, DoubleTimeseriesValueEntity> _entries = new SortedWeakReferenceList<DateTime, DoubleTimeseriesValueEntity>( );

            public ByTimestamp( )
            {
            }

            public void Add( DoubleTimeseriesValueEntity entity )
            {
                if( _entries.TryGetValue(entity.Timestamp, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Timestamp, new WeakReference<DoubleTimeseriesValueEntity>( entity, false ) );
                }
            }

            public bool GetByTimestamp( DateTime timestamp, out DoubleTimeseriesValueEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( timestamp, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( timestamp );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(DateTime key, [DisallowNull] IList<DoubleTimeseriesValueEntity> result )
            {
                return _entries.From( key, result );
            }

            public bool GetUntil(DateTime key, [DisallowNull] IList<DoubleTimeseriesValueEntity> result )
            {
                return _entries.Until( key, result );
            }

            public bool GetOver(DateTime firstKey, DateTime lastKey, [DisallowNull] IList<DoubleTimeseriesValueEntity> result )
            {
                return _entries.Over( firstKey, lastKey, result );
            }

            public bool GetAll([DisallowNull] IList<DoubleTimeseriesValueEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<DateTime, ByTimestamp> _entries = new SortedListEx<DateTime, ByTimestamp>( );
        public List<DoubleTimeseriesValueEntity> GetDoubleTimeseriesValueCollectionByTimeseries( Guid timeseries )
        {
            throw new NotImplementedException();
        }

        public DoubleTimeseriesValueEntity? GetDoubleTimeseriesValueByTimeseriesAndTimestamp( Guid timeseries, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public DoubleTimeseriesValueEntity? GetDoubleTimeseriesValueByTimeseriesAtTimestamp( Guid timeseries, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<DoubleTimeseriesValueEntity> GetDoubleTimeseriesValueByTimeseriesFromTimestamp( Guid timeseries, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<DoubleTimeseriesValueEntity> GetDoubleTimeseriesValueByTimeseriesUntilTimestamp( Guid timeseries, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        IList<DoubleTimeseriesValueEntity> GetDoubleTimeseriesValueByTimeseriesOverTimestamp( Guid timeseries, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

    }
    public class DoubleTimeseriesValueByTimestampEntityIndex
    {
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, DoubleTimeseriesValueEntity> _entries = new SortedWeakReferenceList<Guid, DoubleTimeseriesValueEntity>( );
            public ById( )
            {
            }

            public void Add( DoubleTimeseriesValueEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<DoubleTimeseriesValueEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out DoubleTimeseriesValueEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<DoubleTimeseriesValueEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<DoubleTimeseriesValueEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<DoubleTimeseriesValueEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<DoubleTimeseriesValueEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<DateTime, ById> _entries = new SortedListEx<DateTime, ById>( );

        public DoubleTimeseriesValueByTimestampEntityIndex( )
        {
        }

        public List<DoubleTimeseriesValueEntity> GetDoubleTimeseriesValueCollectionByTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<DoubleTimeseriesValueEntity> GetDoubleTimeseriesValueCollectionAtTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<DoubleTimeseriesValueEntity> GetDoubleTimeseriesValueCollectionFromTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<DoubleTimeseriesValueEntity> GetDoubleTimeseriesValueCollectionUntilTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        IList<DoubleTimeseriesValueEntity> GetDoubleTimeseriesValueCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

    }

    public class FacilityTypeByNameEntityIndex
    {
        readonly SortedWeakReferenceList<string, FacilityTypeEntity> _entries = new SortedWeakReferenceList<string, FacilityTypeEntity>( );

        public FacilityTypeByNameEntityIndex( )
        {
        }

        public void Add( FacilityTypeEntity entity )
        {
            if( _entries.TryGetValue(entity.Name, out var weakReference ) )
            {
                weakReference.SetTarget( entity );
            }
            else
            {
                _entries.Add( entity.Name, new WeakReference<FacilityTypeEntity>( entity, false ) );
            }
        }

        public bool GetByName( string name, out FacilityTypeEntity? entity )
        {
            entity = null;
            if ( _entries.TryGetValue( name, out var weakReference ) )
            {
                if ( weakReference.TryGetTarget( out entity ) == false )
                {
                    _entries.Remove( name );
                }
            }
            return _entries.Count > 0;
        }

        public bool GetFrom(string key, [DisallowNull] IList<FacilityTypeEntity> result )
        {
            return _entries.From( key, result );
        }

        public bool GetUntil(string key, [DisallowNull] IList<FacilityTypeEntity> result )
        {
            return _entries.Until( key, result );
        }

        public bool GetOver(string firstKey, string lastKey, [DisallowNull] IList<FacilityTypeEntity> result )
        {
            return _entries.Over( firstKey, lastKey, result );
        }

        public bool GetAll([DisallowNull] IList<FacilityTypeEntity> result )
        {
            return _entries.All( result );
        }

        public FacilityTypeEntity? GetFacilityTypeByName( string name )
        {
            throw new NotImplementedException();
        }

    }
    public class GeoPosition2DTimeseriesValueByTimeseriesAndTimestampEntityIndex
    {
        public class ByTimestamp
        {
            readonly SortedWeakReferenceList<DateTime, GeoPosition2DTimeseriesValueEntity> _entries = new SortedWeakReferenceList<DateTime, GeoPosition2DTimeseriesValueEntity>( );

            public ByTimestamp( )
            {
            }

            public void Add( GeoPosition2DTimeseriesValueEntity entity )
            {
                if( _entries.TryGetValue(entity.Timestamp, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Timestamp, new WeakReference<GeoPosition2DTimeseriesValueEntity>( entity, false ) );
                }
            }

            public bool GetByTimestamp( DateTime timestamp, out GeoPosition2DTimeseriesValueEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( timestamp, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( timestamp );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(DateTime key, [DisallowNull] IList<GeoPosition2DTimeseriesValueEntity> result )
            {
                return _entries.From( key, result );
            }

            public bool GetUntil(DateTime key, [DisallowNull] IList<GeoPosition2DTimeseriesValueEntity> result )
            {
                return _entries.Until( key, result );
            }

            public bool GetOver(DateTime firstKey, DateTime lastKey, [DisallowNull] IList<GeoPosition2DTimeseriesValueEntity> result )
            {
                return _entries.Over( firstKey, lastKey, result );
            }

            public bool GetAll([DisallowNull] IList<GeoPosition2DTimeseriesValueEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<DateTime, ByTimestamp> _entries = new SortedListEx<DateTime, ByTimestamp>( );
        public List<GeoPosition2DTimeseriesValueEntity> GetGeoPosition2DTimeseriesValueCollectionByTimeseries( Guid timeseries )
        {
            throw new NotImplementedException();
        }

        public GeoPosition2DTimeseriesValueEntity? GetGeoPosition2DTimeseriesValueByTimeseriesAndTimestamp( Guid timeseries, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public GeoPosition2DTimeseriesValueEntity? GetGeoPosition2DTimeseriesValueByTimeseriesAtTimestamp( Guid timeseries, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<GeoPosition2DTimeseriesValueEntity> GetGeoPosition2DTimeseriesValueByTimeseriesFromTimestamp( Guid timeseries, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<GeoPosition2DTimeseriesValueEntity> GetGeoPosition2DTimeseriesValueByTimeseriesUntilTimestamp( Guid timeseries, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        IList<GeoPosition2DTimeseriesValueEntity> GetGeoPosition2DTimeseriesValueByTimeseriesOverTimestamp( Guid timeseries, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

    }
    public class GeoPosition2DTimeseriesValueByTimestampEntityIndex
    {
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, GeoPosition2DTimeseriesValueEntity> _entries = new SortedWeakReferenceList<Guid, GeoPosition2DTimeseriesValueEntity>( );
            public ById( )
            {
            }

            public void Add( GeoPosition2DTimeseriesValueEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<GeoPosition2DTimeseriesValueEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out GeoPosition2DTimeseriesValueEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<GeoPosition2DTimeseriesValueEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<GeoPosition2DTimeseriesValueEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<GeoPosition2DTimeseriesValueEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<GeoPosition2DTimeseriesValueEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<DateTime, ById> _entries = new SortedListEx<DateTime, ById>( );

        public GeoPosition2DTimeseriesValueByTimestampEntityIndex( )
        {
        }

        public List<GeoPosition2DTimeseriesValueEntity> GetGeoPosition2DTimeseriesValueCollectionByTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<GeoPosition2DTimeseriesValueEntity> GetGeoPosition2DTimeseriesValueCollectionAtTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<GeoPosition2DTimeseriesValueEntity> GetGeoPosition2DTimeseriesValueCollectionFromTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<GeoPosition2DTimeseriesValueEntity> GetGeoPosition2DTimeseriesValueCollectionUntilTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        IList<GeoPosition2DTimeseriesValueEntity> GetGeoPosition2DTimeseriesValueCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

    }

    public class GeoPosition3DTimeseriesValueByTimeseriesAndTimestampEntityIndex
    {
        public class ByTimestamp
        {
            readonly SortedWeakReferenceList<DateTime, GeoPosition3DTimeseriesValueEntity> _entries = new SortedWeakReferenceList<DateTime, GeoPosition3DTimeseriesValueEntity>( );

            public ByTimestamp( )
            {
            }

            public void Add( GeoPosition3DTimeseriesValueEntity entity )
            {
                if( _entries.TryGetValue(entity.Timestamp, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Timestamp, new WeakReference<GeoPosition3DTimeseriesValueEntity>( entity, false ) );
                }
            }

            public bool GetByTimestamp( DateTime timestamp, out GeoPosition3DTimeseriesValueEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( timestamp, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( timestamp );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(DateTime key, [DisallowNull] IList<GeoPosition3DTimeseriesValueEntity> result )
            {
                return _entries.From( key, result );
            }

            public bool GetUntil(DateTime key, [DisallowNull] IList<GeoPosition3DTimeseriesValueEntity> result )
            {
                return _entries.Until( key, result );
            }

            public bool GetOver(DateTime firstKey, DateTime lastKey, [DisallowNull] IList<GeoPosition3DTimeseriesValueEntity> result )
            {
                return _entries.Over( firstKey, lastKey, result );
            }

            public bool GetAll([DisallowNull] IList<GeoPosition3DTimeseriesValueEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<DateTime, ByTimestamp> _entries = new SortedListEx<DateTime, ByTimestamp>( );
        public List<GeoPosition3DTimeseriesValueEntity> GetGeoPosition3DTimeseriesValueCollectionByTimeseries( Guid timeseries )
        {
            throw new NotImplementedException();
        }

        public GeoPosition3DTimeseriesValueEntity? GetGeoPosition3DTimeseriesValueByTimeseriesAndTimestamp( Guid timeseries, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public GeoPosition3DTimeseriesValueEntity? GetGeoPosition3DTimeseriesValueByTimeseriesAtTimestamp( Guid timeseries, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<GeoPosition3DTimeseriesValueEntity> GetGeoPosition3DTimeseriesValueByTimeseriesFromTimestamp( Guid timeseries, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<GeoPosition3DTimeseriesValueEntity> GetGeoPosition3DTimeseriesValueByTimeseriesUntilTimestamp( Guid timeseries, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        IList<GeoPosition3DTimeseriesValueEntity> GetGeoPosition3DTimeseriesValueByTimeseriesOverTimestamp( Guid timeseries, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

    }
    public class GeoPosition3DTimeseriesValueByTimestampEntityIndex
    {
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, GeoPosition3DTimeseriesValueEntity> _entries = new SortedWeakReferenceList<Guid, GeoPosition3DTimeseriesValueEntity>( );
            public ById( )
            {
            }

            public void Add( GeoPosition3DTimeseriesValueEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<GeoPosition3DTimeseriesValueEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out GeoPosition3DTimeseriesValueEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<GeoPosition3DTimeseriesValueEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<GeoPosition3DTimeseriesValueEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<GeoPosition3DTimeseriesValueEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<GeoPosition3DTimeseriesValueEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<DateTime, ById> _entries = new SortedListEx<DateTime, ById>( );

        public GeoPosition3DTimeseriesValueByTimestampEntityIndex( )
        {
        }

        public List<GeoPosition3DTimeseriesValueEntity> GetGeoPosition3DTimeseriesValueCollectionByTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<GeoPosition3DTimeseriesValueEntity> GetGeoPosition3DTimeseriesValueCollectionAtTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<GeoPosition3DTimeseriesValueEntity> GetGeoPosition3DTimeseriesValueCollectionFromTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<GeoPosition3DTimeseriesValueEntity> GetGeoPosition3DTimeseriesValueCollectionUntilTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        IList<GeoPosition3DTimeseriesValueEntity> GetGeoPosition3DTimeseriesValueCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

    }

    public class GNSSDeviceCommandByGNSSDeviceAndTimestampEntityIndex
    {
        public class ByTimestamp
        {
            readonly SortedListEx<DateTime, ById> _entries = new SortedListEx<DateTime, ById>( );
            List<DateTime> _emptyKeys = new List<DateTime>( );

            public ByTimestamp( )
            {
            }

            void RemoveEmptyKeys( )
            {
                var emptyKeyCount = _emptyKeys.Count;
                for ( int i = 0; i < emptyKeyCount; i++ )
                {
                    _entries.Remove( _emptyKeys[ i ] );
                }
                _emptyKeys.Clear( );
            }

            public bool GetAll([DisallowNull] IList<GNSSDeviceCommandEntity> result )
            {
                foreach( var entry in _entries )
                {
                    if( entry.Value.GetAll( result ) == false )
                    {
                        _emptyKeys.Add( entry.Key );
                    }
                }
                RemoveEmptyKeys( );
                return _entries.Count > 0;
            }

        }
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, GNSSDeviceCommandEntity> _entries = new SortedWeakReferenceList<Guid, GNSSDeviceCommandEntity>( );
            public ById( )
            {
            }

            public void Add( GNSSDeviceCommandEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<GNSSDeviceCommandEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out GNSSDeviceCommandEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<GNSSDeviceCommandEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<GNSSDeviceCommandEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<GNSSDeviceCommandEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<GNSSDeviceCommandEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<Guid, ByTimestamp> _entries = new SortedListEx<Guid, ByTimestamp>( );

        public GNSSDeviceCommandByGNSSDeviceAndTimestampEntityIndex( )
        {
        }

        public List<GNSSDeviceCommandEntity> GetGNSSDeviceCommandCollectionByGNSSDevice( Guid gNSSDevice )
        {
            throw new NotImplementedException();
        }

        public List<GNSSDeviceCommandEntity> GetGNSSDeviceCommandCollectionByGNSSDeviceAndTimestamp( Guid gNSSDevice, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<GNSSDeviceCommandEntity> GetGNSSDeviceCommandCollectionByGNSSDeviceAtTimestamp( Guid gNSSDevice, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<GNSSDeviceCommandEntity> GetGNSSDeviceCommandCollectionByGNSSDeviceFromTimestamp( Guid gNSSDevice, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<GNSSDeviceCommandEntity> GetGNSSDeviceCommandCollectionByGNSSDeviceUntilTimestamp( Guid gNSSDevice, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        IList<GNSSDeviceCommandEntity> GetGNSSDeviceCommandCollectionByGNSSDeviceOverTimestamp( Guid gNSSDevice, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

    }

    public class GNSSDeviceCommandByTimestampEntityIndex
    {
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, GNSSDeviceCommandEntity> _entries = new SortedWeakReferenceList<Guid, GNSSDeviceCommandEntity>( );
            public ById( )
            {
            }

            public void Add( GNSSDeviceCommandEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<GNSSDeviceCommandEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out GNSSDeviceCommandEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<GNSSDeviceCommandEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<GNSSDeviceCommandEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<GNSSDeviceCommandEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<GNSSDeviceCommandEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<DateTime, ById> _entries = new SortedListEx<DateTime, ById>( );

        public GNSSDeviceCommandByTimestampEntityIndex( )
        {
        }

        public List<GNSSDeviceCommandEntity> GetGNSSDeviceCommandCollectionByTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<GNSSDeviceCommandEntity> GetGNSSDeviceCommandCollectionAtTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<GNSSDeviceCommandEntity> GetGNSSDeviceCommandCollectionFromTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<GNSSDeviceCommandEntity> GetGNSSDeviceCommandCollectionUntilTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        IList<GNSSDeviceCommandEntity> GetGNSSDeviceCommandCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

    }

    public class GNSSDeviceCommandByReplyEntityIndex
    {
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, GNSSDeviceCommandEntity> _entries = new SortedWeakReferenceList<Guid, GNSSDeviceCommandEntity>( );
            public ById( )
            {
            }

            public void Add( GNSSDeviceCommandEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<GNSSDeviceCommandEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out GNSSDeviceCommandEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<GNSSDeviceCommandEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<GNSSDeviceCommandEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<GNSSDeviceCommandEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<GNSSDeviceCommandEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<Guid, ById> _entries = new SortedListEx<Guid, ById>( );

        public GNSSDeviceCommandByReplyEntityIndex( )
        {
        }

        public List<GNSSDeviceCommandEntity> GetGNSSDeviceCommandCollectionByReply( Guid? reply )
        {
            throw new NotImplementedException();
        }

        public IList<GNSSDeviceCommandEntity> GetGNSSDeviceCommandCollectionByReplyIsNull(  )
        {
            throw new NotImplementedException();
        }

    }

    public class GNSSDeviceCommandByReplyIsNullEntityIndex
    {
    }

    public class GNSSDeviceCommandReplyByGNSSDeviceAndTimestampEntityIndex
    {
        public class ByTimestamp
        {
            readonly SortedListEx<DateTime, ById> _entries = new SortedListEx<DateTime, ById>( );
            List<DateTime> _emptyKeys = new List<DateTime>( );

            public ByTimestamp( )
            {
            }

            void RemoveEmptyKeys( )
            {
                var emptyKeyCount = _emptyKeys.Count;
                for ( int i = 0; i < emptyKeyCount; i++ )
                {
                    _entries.Remove( _emptyKeys[ i ] );
                }
                _emptyKeys.Clear( );
            }

            public bool GetAll([DisallowNull] IList<GNSSDeviceCommandReplyEntity> result )
            {
                foreach( var entry in _entries )
                {
                    if( entry.Value.GetAll( result ) == false )
                    {
                        _emptyKeys.Add( entry.Key );
                    }
                }
                RemoveEmptyKeys( );
                return _entries.Count > 0;
            }

        }
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, GNSSDeviceCommandReplyEntity> _entries = new SortedWeakReferenceList<Guid, GNSSDeviceCommandReplyEntity>( );
            public ById( )
            {
            }

            public void Add( GNSSDeviceCommandReplyEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<GNSSDeviceCommandReplyEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out GNSSDeviceCommandReplyEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<GNSSDeviceCommandReplyEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<GNSSDeviceCommandReplyEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<GNSSDeviceCommandReplyEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<GNSSDeviceCommandReplyEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<Guid, ByTimestamp> _entries = new SortedListEx<Guid, ByTimestamp>( );

        public GNSSDeviceCommandReplyByGNSSDeviceAndTimestampEntityIndex( )
        {
        }

        public List<GNSSDeviceCommandReplyEntity> GetGNSSDeviceCommandReplyCollectionByGNSSDevice( Guid gNSSDevice )
        {
            throw new NotImplementedException();
        }

        public List<GNSSDeviceCommandReplyEntity> GetGNSSDeviceCommandReplyCollectionByGNSSDeviceAndTimestamp( Guid gNSSDevice, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<GNSSDeviceCommandReplyEntity> GetGNSSDeviceCommandReplyCollectionByGNSSDeviceAtTimestamp( Guid gNSSDevice, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<GNSSDeviceCommandReplyEntity> GetGNSSDeviceCommandReplyCollectionByGNSSDeviceFromTimestamp( Guid gNSSDevice, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<GNSSDeviceCommandReplyEntity> GetGNSSDeviceCommandReplyCollectionByGNSSDeviceUntilTimestamp( Guid gNSSDevice, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        IList<GNSSDeviceCommandReplyEntity> GetGNSSDeviceCommandReplyCollectionByGNSSDeviceOverTimestamp( Guid gNSSDevice, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

    }

    public class GNSSDeviceCommandReplyByTimestampEntityIndex
    {
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, GNSSDeviceCommandReplyEntity> _entries = new SortedWeakReferenceList<Guid, GNSSDeviceCommandReplyEntity>( );
            public ById( )
            {
            }

            public void Add( GNSSDeviceCommandReplyEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<GNSSDeviceCommandReplyEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out GNSSDeviceCommandReplyEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<GNSSDeviceCommandReplyEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<GNSSDeviceCommandReplyEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<GNSSDeviceCommandReplyEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<GNSSDeviceCommandReplyEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<DateTime, ById> _entries = new SortedListEx<DateTime, ById>( );

        public GNSSDeviceCommandReplyByTimestampEntityIndex( )
        {
        }

        public List<GNSSDeviceCommandReplyEntity> GetGNSSDeviceCommandReplyCollectionByTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<GNSSDeviceCommandReplyEntity> GetGNSSDeviceCommandReplyCollectionAtTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<GNSSDeviceCommandReplyEntity> GetGNSSDeviceCommandReplyCollectionFromTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<GNSSDeviceCommandReplyEntity> GetGNSSDeviceCommandReplyCollectionUntilTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        IList<GNSSDeviceCommandReplyEntity> GetGNSSDeviceCommandReplyCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

    }

    public class GNSSDeviceCommandReplyByCommandEntityIndex
    {
        readonly SortedWeakReferenceList<Guid, GNSSDeviceCommandReplyEntity> _entries = new SortedWeakReferenceList<Guid, GNSSDeviceCommandReplyEntity>( );

        public GNSSDeviceCommandReplyByCommandEntityIndex( )
        {
        }

        public void Add( GNSSDeviceCommandReplyEntity entity )
        {
            if ( entity.CommandId is Guid command )
            {
                if ( _entries.TryGetValue( command, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( command, new WeakReference<GNSSDeviceCommandReplyEntity>( entity, false ) );
                }
            }
            else
            {
                throw new ArgumentException( "entity.CommandId is null.", nameof( entity ) );
            }
        }

        public bool GetByCommandId( Guid command, out GNSSDeviceCommandReplyEntity? entity )
        {
            entity = null;
            if ( _entries.TryGetValue( command, out var weakReference ) )
            {
                if ( weakReference.TryGetTarget( out entity ) == false )
                {
                    _entries.Remove( command );
                }
            }
            return _entries.Count > 0;
        }

        public bool GetFrom(Guid key, [DisallowNull] IList<GNSSDeviceCommandReplyEntity> result )
        {
            return _entries.From( key, result );
        }

        public bool GetUntil(Guid key, [DisallowNull] IList<GNSSDeviceCommandReplyEntity> result )
        {
            return _entries.Until( key, result );
        }

        public bool GetOver(Guid firstKey, Guid lastKey, [DisallowNull] IList<GNSSDeviceCommandReplyEntity> result )
        {
            return _entries.Over( firstKey, lastKey, result );
        }

        public bool GetAll([DisallowNull] IList<GNSSDeviceCommandReplyEntity> result )
        {
            return _entries.All( result );
        }

        public GNSSDeviceCommandReplyEntity? GetGNSSDeviceCommandReplyByCommand( Guid? command )
        {
            throw new NotImplementedException();
        }

        public IList<GNSSDeviceCommandReplyEntity> GetGNSSDeviceCommandReplyCollectionByCommandIsNull(  )
        {
            throw new NotImplementedException();
        }

    }
    public class GNSSDeviceCommandReplyByCommandIsNullEntityIndex
    {
    }

    public class GNSSDeviceConfigurationByGNSSDeviceAndTimestampEntityIndex
    {
        public class ByTimestamp
        {
            readonly SortedWeakReferenceList<DateTime, GNSSDeviceConfigurationEntity> _entries = new SortedWeakReferenceList<DateTime, GNSSDeviceConfigurationEntity>( );

            public ByTimestamp( )
            {
            }

            public void Add( GNSSDeviceConfigurationEntity entity )
            {
                if( _entries.TryGetValue(entity.Timestamp, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Timestamp, new WeakReference<GNSSDeviceConfigurationEntity>( entity, false ) );
                }
            }

            public bool GetByTimestamp( DateTime timestamp, out GNSSDeviceConfigurationEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( timestamp, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( timestamp );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(DateTime key, [DisallowNull] IList<GNSSDeviceConfigurationEntity> result )
            {
                return _entries.From( key, result );
            }

            public bool GetUntil(DateTime key, [DisallowNull] IList<GNSSDeviceConfigurationEntity> result )
            {
                return _entries.Until( key, result );
            }

            public bool GetOver(DateTime firstKey, DateTime lastKey, [DisallowNull] IList<GNSSDeviceConfigurationEntity> result )
            {
                return _entries.Over( firstKey, lastKey, result );
            }

            public bool GetAll([DisallowNull] IList<GNSSDeviceConfigurationEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<DateTime, ByTimestamp> _entries = new SortedListEx<DateTime, ByTimestamp>( );
        public List<GNSSDeviceConfigurationEntity> GetGNSSDeviceConfigurationCollectionByGNSSDevice( Guid gNSSDevice )
        {
            throw new NotImplementedException();
        }

        public GNSSDeviceConfigurationEntity? GetGNSSDeviceConfigurationByGNSSDeviceAndTimestamp( Guid gNSSDevice, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public GNSSDeviceConfigurationEntity? GetGNSSDeviceConfigurationByGNSSDeviceAtTimestamp( Guid gNSSDevice, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<GNSSDeviceConfigurationEntity> GetGNSSDeviceConfigurationByGNSSDeviceFromTimestamp( Guid gNSSDevice, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<GNSSDeviceConfigurationEntity> GetGNSSDeviceConfigurationByGNSSDeviceUntilTimestamp( Guid gNSSDevice, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        IList<GNSSDeviceConfigurationEntity> GetGNSSDeviceConfigurationByGNSSDeviceOverTimestamp( Guid gNSSDevice, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

    }
    public class GNSSDeviceConfigurationByTimestampEntityIndex
    {
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, GNSSDeviceConfigurationEntity> _entries = new SortedWeakReferenceList<Guid, GNSSDeviceConfigurationEntity>( );
            public ById( )
            {
            }

            public void Add( GNSSDeviceConfigurationEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<GNSSDeviceConfigurationEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out GNSSDeviceConfigurationEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<GNSSDeviceConfigurationEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<GNSSDeviceConfigurationEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<GNSSDeviceConfigurationEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<GNSSDeviceConfigurationEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<DateTime, ById> _entries = new SortedListEx<DateTime, ById>( );

        public GNSSDeviceConfigurationByTimestampEntityIndex( )
        {
        }

        public List<GNSSDeviceConfigurationEntity> GetGNSSDeviceConfigurationCollectionByTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<GNSSDeviceConfigurationEntity> GetGNSSDeviceConfigurationCollectionAtTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<GNSSDeviceConfigurationEntity> GetGNSSDeviceConfigurationCollectionFromTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<GNSSDeviceConfigurationEntity> GetGNSSDeviceConfigurationCollectionUntilTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        IList<GNSSDeviceConfigurationEntity> GetGNSSDeviceConfigurationCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

    }

    public class GuidTimeseriesValueByTimeseriesAndTimestampEntityIndex
    {
        public class ByTimestamp
        {
            readonly SortedWeakReferenceList<DateTime, GuidTimeseriesValueEntity> _entries = new SortedWeakReferenceList<DateTime, GuidTimeseriesValueEntity>( );

            public ByTimestamp( )
            {
            }

            public void Add( GuidTimeseriesValueEntity entity )
            {
                if( _entries.TryGetValue(entity.Timestamp, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Timestamp, new WeakReference<GuidTimeseriesValueEntity>( entity, false ) );
                }
            }

            public bool GetByTimestamp( DateTime timestamp, out GuidTimeseriesValueEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( timestamp, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( timestamp );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(DateTime key, [DisallowNull] IList<GuidTimeseriesValueEntity> result )
            {
                return _entries.From( key, result );
            }

            public bool GetUntil(DateTime key, [DisallowNull] IList<GuidTimeseriesValueEntity> result )
            {
                return _entries.Until( key, result );
            }

            public bool GetOver(DateTime firstKey, DateTime lastKey, [DisallowNull] IList<GuidTimeseriesValueEntity> result )
            {
                return _entries.Over( firstKey, lastKey, result );
            }

            public bool GetAll([DisallowNull] IList<GuidTimeseriesValueEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<DateTime, ByTimestamp> _entries = new SortedListEx<DateTime, ByTimestamp>( );
        public List<GuidTimeseriesValueEntity> GetGuidTimeseriesValueCollectionByTimeseries( Guid timeseries )
        {
            throw new NotImplementedException();
        }

        public GuidTimeseriesValueEntity? GetGuidTimeseriesValueByTimeseriesAndTimestamp( Guid timeseries, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public GuidTimeseriesValueEntity? GetGuidTimeseriesValueByTimeseriesAtTimestamp( Guid timeseries, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<GuidTimeseriesValueEntity> GetGuidTimeseriesValueByTimeseriesFromTimestamp( Guid timeseries, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<GuidTimeseriesValueEntity> GetGuidTimeseriesValueByTimeseriesUntilTimestamp( Guid timeseries, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        IList<GuidTimeseriesValueEntity> GetGuidTimeseriesValueByTimeseriesOverTimestamp( Guid timeseries, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

    }
    public class GuidTimeseriesValueByTimestampEntityIndex
    {
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, GuidTimeseriesValueEntity> _entries = new SortedWeakReferenceList<Guid, GuidTimeseriesValueEntity>( );
            public ById( )
            {
            }

            public void Add( GuidTimeseriesValueEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<GuidTimeseriesValueEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out GuidTimeseriesValueEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<GuidTimeseriesValueEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<GuidTimeseriesValueEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<GuidTimeseriesValueEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<GuidTimeseriesValueEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<DateTime, ById> _entries = new SortedListEx<DateTime, ById>( );

        public GuidTimeseriesValueByTimestampEntityIndex( )
        {
        }

        public List<GuidTimeseriesValueEntity> GetGuidTimeseriesValueCollectionByTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<GuidTimeseriesValueEntity> GetGuidTimeseriesValueCollectionAtTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<GuidTimeseriesValueEntity> GetGuidTimeseriesValueCollectionFromTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<GuidTimeseriesValueEntity> GetGuidTimeseriesValueCollectionUntilTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        IList<GuidTimeseriesValueEntity> GetGuidTimeseriesValueCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

    }

    public class GyroDeviceCommandByGyroDeviceAndTimestampEntityIndex
    {
        public class ByTimestamp
        {
            readonly SortedListEx<DateTime, ById> _entries = new SortedListEx<DateTime, ById>( );
            List<DateTime> _emptyKeys = new List<DateTime>( );

            public ByTimestamp( )
            {
            }

            void RemoveEmptyKeys( )
            {
                var emptyKeyCount = _emptyKeys.Count;
                for ( int i = 0; i < emptyKeyCount; i++ )
                {
                    _entries.Remove( _emptyKeys[ i ] );
                }
                _emptyKeys.Clear( );
            }

            public bool GetAll([DisallowNull] IList<GyroDeviceCommandEntity> result )
            {
                foreach( var entry in _entries )
                {
                    if( entry.Value.GetAll( result ) == false )
                    {
                        _emptyKeys.Add( entry.Key );
                    }
                }
                RemoveEmptyKeys( );
                return _entries.Count > 0;
            }

        }
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, GyroDeviceCommandEntity> _entries = new SortedWeakReferenceList<Guid, GyroDeviceCommandEntity>( );
            public ById( )
            {
            }

            public void Add( GyroDeviceCommandEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<GyroDeviceCommandEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out GyroDeviceCommandEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<GyroDeviceCommandEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<GyroDeviceCommandEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<GyroDeviceCommandEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<GyroDeviceCommandEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<Guid, ByTimestamp> _entries = new SortedListEx<Guid, ByTimestamp>( );

        public GyroDeviceCommandByGyroDeviceAndTimestampEntityIndex( )
        {
        }

        public List<GyroDeviceCommandEntity> GetGyroDeviceCommandCollectionByGyroDevice( Guid gyroDevice )
        {
            throw new NotImplementedException();
        }

        public List<GyroDeviceCommandEntity> GetGyroDeviceCommandCollectionByGyroDeviceAndTimestamp( Guid gyroDevice, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<GyroDeviceCommandEntity> GetGyroDeviceCommandCollectionByGyroDeviceAtTimestamp( Guid gyroDevice, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<GyroDeviceCommandEntity> GetGyroDeviceCommandCollectionByGyroDeviceFromTimestamp( Guid gyroDevice, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<GyroDeviceCommandEntity> GetGyroDeviceCommandCollectionByGyroDeviceUntilTimestamp( Guid gyroDevice, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        IList<GyroDeviceCommandEntity> GetGyroDeviceCommandCollectionByGyroDeviceOverTimestamp( Guid gyroDevice, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

    }

    public class GyroDeviceCommandByTimestampEntityIndex
    {
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, GyroDeviceCommandEntity> _entries = new SortedWeakReferenceList<Guid, GyroDeviceCommandEntity>( );
            public ById( )
            {
            }

            public void Add( GyroDeviceCommandEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<GyroDeviceCommandEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out GyroDeviceCommandEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<GyroDeviceCommandEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<GyroDeviceCommandEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<GyroDeviceCommandEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<GyroDeviceCommandEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<DateTime, ById> _entries = new SortedListEx<DateTime, ById>( );

        public GyroDeviceCommandByTimestampEntityIndex( )
        {
        }

        public List<GyroDeviceCommandEntity> GetGyroDeviceCommandCollectionByTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<GyroDeviceCommandEntity> GetGyroDeviceCommandCollectionAtTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<GyroDeviceCommandEntity> GetGyroDeviceCommandCollectionFromTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<GyroDeviceCommandEntity> GetGyroDeviceCommandCollectionUntilTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        IList<GyroDeviceCommandEntity> GetGyroDeviceCommandCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

    }

    public class GyroDeviceCommandByReplyEntityIndex
    {
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, GyroDeviceCommandEntity> _entries = new SortedWeakReferenceList<Guid, GyroDeviceCommandEntity>( );
            public ById( )
            {
            }

            public void Add( GyroDeviceCommandEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<GyroDeviceCommandEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out GyroDeviceCommandEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<GyroDeviceCommandEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<GyroDeviceCommandEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<GyroDeviceCommandEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<GyroDeviceCommandEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<Guid, ById> _entries = new SortedListEx<Guid, ById>( );

        public GyroDeviceCommandByReplyEntityIndex( )
        {
        }

        public List<GyroDeviceCommandEntity> GetGyroDeviceCommandCollectionByReply( Guid? reply )
        {
            throw new NotImplementedException();
        }

        public IList<GyroDeviceCommandEntity> GetGyroDeviceCommandCollectionByReplyIsNull(  )
        {
            throw new NotImplementedException();
        }

    }

    public class GyroDeviceCommandByReplyIsNullEntityIndex
    {
    }

    public class GyroDeviceCommandReplyByGyroDeviceAndTimestampEntityIndex
    {
        public class ByTimestamp
        {
            readonly SortedListEx<DateTime, ById> _entries = new SortedListEx<DateTime, ById>( );
            List<DateTime> _emptyKeys = new List<DateTime>( );

            public ByTimestamp( )
            {
            }

            void RemoveEmptyKeys( )
            {
                var emptyKeyCount = _emptyKeys.Count;
                for ( int i = 0; i < emptyKeyCount; i++ )
                {
                    _entries.Remove( _emptyKeys[ i ] );
                }
                _emptyKeys.Clear( );
            }

            public bool GetAll([DisallowNull] IList<GyroDeviceCommandReplyEntity> result )
            {
                foreach( var entry in _entries )
                {
                    if( entry.Value.GetAll( result ) == false )
                    {
                        _emptyKeys.Add( entry.Key );
                    }
                }
                RemoveEmptyKeys( );
                return _entries.Count > 0;
            }

        }
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, GyroDeviceCommandReplyEntity> _entries = new SortedWeakReferenceList<Guid, GyroDeviceCommandReplyEntity>( );
            public ById( )
            {
            }

            public void Add( GyroDeviceCommandReplyEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<GyroDeviceCommandReplyEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out GyroDeviceCommandReplyEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<GyroDeviceCommandReplyEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<GyroDeviceCommandReplyEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<GyroDeviceCommandReplyEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<GyroDeviceCommandReplyEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<Guid, ByTimestamp> _entries = new SortedListEx<Guid, ByTimestamp>( );

        public GyroDeviceCommandReplyByGyroDeviceAndTimestampEntityIndex( )
        {
        }

        public List<GyroDeviceCommandReplyEntity> GetGyroDeviceCommandReplyCollectionByGyroDevice( Guid gyroDevice )
        {
            throw new NotImplementedException();
        }

        public List<GyroDeviceCommandReplyEntity> GetGyroDeviceCommandReplyCollectionByGyroDeviceAndTimestamp( Guid gyroDevice, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<GyroDeviceCommandReplyEntity> GetGyroDeviceCommandReplyCollectionByGyroDeviceAtTimestamp( Guid gyroDevice, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<GyroDeviceCommandReplyEntity> GetGyroDeviceCommandReplyCollectionByGyroDeviceFromTimestamp( Guid gyroDevice, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<GyroDeviceCommandReplyEntity> GetGyroDeviceCommandReplyCollectionByGyroDeviceUntilTimestamp( Guid gyroDevice, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        IList<GyroDeviceCommandReplyEntity> GetGyroDeviceCommandReplyCollectionByGyroDeviceOverTimestamp( Guid gyroDevice, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

    }

    public class GyroDeviceCommandReplyByTimestampEntityIndex
    {
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, GyroDeviceCommandReplyEntity> _entries = new SortedWeakReferenceList<Guid, GyroDeviceCommandReplyEntity>( );
            public ById( )
            {
            }

            public void Add( GyroDeviceCommandReplyEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<GyroDeviceCommandReplyEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out GyroDeviceCommandReplyEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<GyroDeviceCommandReplyEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<GyroDeviceCommandReplyEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<GyroDeviceCommandReplyEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<GyroDeviceCommandReplyEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<DateTime, ById> _entries = new SortedListEx<DateTime, ById>( );

        public GyroDeviceCommandReplyByTimestampEntityIndex( )
        {
        }

        public List<GyroDeviceCommandReplyEntity> GetGyroDeviceCommandReplyCollectionByTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<GyroDeviceCommandReplyEntity> GetGyroDeviceCommandReplyCollectionAtTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<GyroDeviceCommandReplyEntity> GetGyroDeviceCommandReplyCollectionFromTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<GyroDeviceCommandReplyEntity> GetGyroDeviceCommandReplyCollectionUntilTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        IList<GyroDeviceCommandReplyEntity> GetGyroDeviceCommandReplyCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

    }

    public class GyroDeviceCommandReplyByCommandEntityIndex
    {
        readonly SortedWeakReferenceList<Guid, GyroDeviceCommandReplyEntity> _entries = new SortedWeakReferenceList<Guid, GyroDeviceCommandReplyEntity>( );

        public GyroDeviceCommandReplyByCommandEntityIndex( )
        {
        }

        public void Add( GyroDeviceCommandReplyEntity entity )
        {
            if ( entity.CommandId is Guid command )
            {
                if ( _entries.TryGetValue( command, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( command, new WeakReference<GyroDeviceCommandReplyEntity>( entity, false ) );
                }
            }
            else
            {
                throw new ArgumentException( "entity.CommandId is null.", nameof( entity ) );
            }
        }

        public bool GetByCommandId( Guid command, out GyroDeviceCommandReplyEntity? entity )
        {
            entity = null;
            if ( _entries.TryGetValue( command, out var weakReference ) )
            {
                if ( weakReference.TryGetTarget( out entity ) == false )
                {
                    _entries.Remove( command );
                }
            }
            return _entries.Count > 0;
        }

        public bool GetFrom(Guid key, [DisallowNull] IList<GyroDeviceCommandReplyEntity> result )
        {
            return _entries.From( key, result );
        }

        public bool GetUntil(Guid key, [DisallowNull] IList<GyroDeviceCommandReplyEntity> result )
        {
            return _entries.Until( key, result );
        }

        public bool GetOver(Guid firstKey, Guid lastKey, [DisallowNull] IList<GyroDeviceCommandReplyEntity> result )
        {
            return _entries.Over( firstKey, lastKey, result );
        }

        public bool GetAll([DisallowNull] IList<GyroDeviceCommandReplyEntity> result )
        {
            return _entries.All( result );
        }

        public GyroDeviceCommandReplyEntity? GetGyroDeviceCommandReplyByCommand( Guid? command )
        {
            throw new NotImplementedException();
        }

        public IList<GyroDeviceCommandReplyEntity> GetGyroDeviceCommandReplyCollectionByCommandIsNull(  )
        {
            throw new NotImplementedException();
        }

    }
    public class GyroDeviceCommandReplyByCommandIsNullEntityIndex
    {
    }

    public class GyroDeviceConfigurationByGyroDeviceAndTimestampEntityIndex
    {
        public class ByTimestamp
        {
            readonly SortedWeakReferenceList<DateTime, GyroDeviceConfigurationEntity> _entries = new SortedWeakReferenceList<DateTime, GyroDeviceConfigurationEntity>( );

            public ByTimestamp( )
            {
            }

            public void Add( GyroDeviceConfigurationEntity entity )
            {
                if( _entries.TryGetValue(entity.Timestamp, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Timestamp, new WeakReference<GyroDeviceConfigurationEntity>( entity, false ) );
                }
            }

            public bool GetByTimestamp( DateTime timestamp, out GyroDeviceConfigurationEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( timestamp, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( timestamp );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(DateTime key, [DisallowNull] IList<GyroDeviceConfigurationEntity> result )
            {
                return _entries.From( key, result );
            }

            public bool GetUntil(DateTime key, [DisallowNull] IList<GyroDeviceConfigurationEntity> result )
            {
                return _entries.Until( key, result );
            }

            public bool GetOver(DateTime firstKey, DateTime lastKey, [DisallowNull] IList<GyroDeviceConfigurationEntity> result )
            {
                return _entries.Over( firstKey, lastKey, result );
            }

            public bool GetAll([DisallowNull] IList<GyroDeviceConfigurationEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<DateTime, ByTimestamp> _entries = new SortedListEx<DateTime, ByTimestamp>( );
        public List<GyroDeviceConfigurationEntity> GetGyroDeviceConfigurationCollectionByGyroDevice( Guid gyroDevice )
        {
            throw new NotImplementedException();
        }

        public GyroDeviceConfigurationEntity? GetGyroDeviceConfigurationByGyroDeviceAndTimestamp( Guid gyroDevice, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public GyroDeviceConfigurationEntity? GetGyroDeviceConfigurationByGyroDeviceAtTimestamp( Guid gyroDevice, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<GyroDeviceConfigurationEntity> GetGyroDeviceConfigurationByGyroDeviceFromTimestamp( Guid gyroDevice, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<GyroDeviceConfigurationEntity> GetGyroDeviceConfigurationByGyroDeviceUntilTimestamp( Guid gyroDevice, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        IList<GyroDeviceConfigurationEntity> GetGyroDeviceConfigurationByGyroDeviceOverTimestamp( Guid gyroDevice, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

    }
    public class GyroDeviceConfigurationByTimestampEntityIndex
    {
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, GyroDeviceConfigurationEntity> _entries = new SortedWeakReferenceList<Guid, GyroDeviceConfigurationEntity>( );
            public ById( )
            {
            }

            public void Add( GyroDeviceConfigurationEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<GyroDeviceConfigurationEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out GyroDeviceConfigurationEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<GyroDeviceConfigurationEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<GyroDeviceConfigurationEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<GyroDeviceConfigurationEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<GyroDeviceConfigurationEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<DateTime, ById> _entries = new SortedListEx<DateTime, ById>( );

        public GyroDeviceConfigurationByTimestampEntityIndex( )
        {
        }

        public List<GyroDeviceConfigurationEntity> GetGyroDeviceConfigurationCollectionByTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<GyroDeviceConfigurationEntity> GetGyroDeviceConfigurationCollectionAtTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<GyroDeviceConfigurationEntity> GetGyroDeviceConfigurationCollectionFromTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<GyroDeviceConfigurationEntity> GetGyroDeviceConfigurationCollectionUntilTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        IList<GyroDeviceConfigurationEntity> GetGyroDeviceConfigurationCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

    }

    public class CallsignByIdentifierEntityIndex
    {
        readonly SortedWeakReferenceList<string, CallsignEntity> _entries = new SortedWeakReferenceList<string, CallsignEntity>( );

        public CallsignByIdentifierEntityIndex( )
        {
        }

        public void Add( CallsignEntity entity )
        {
            if( _entries.TryGetValue(entity.Identifier, out var weakReference ) )
            {
                weakReference.SetTarget( entity );
            }
            else
            {
                _entries.Add( entity.Identifier, new WeakReference<CallsignEntity>( entity, false ) );
            }
        }

        public bool GetByIdentifier( string identifier, out CallsignEntity? entity )
        {
            entity = null;
            if ( _entries.TryGetValue( identifier, out var weakReference ) )
            {
                if ( weakReference.TryGetTarget( out entity ) == false )
                {
                    _entries.Remove( identifier );
                }
            }
            return _entries.Count > 0;
        }

        public bool GetFrom(string key, [DisallowNull] IList<CallsignEntity> result )
        {
            return _entries.From( key, result );
        }

        public bool GetUntil(string key, [DisallowNull] IList<CallsignEntity> result )
        {
            return _entries.Until( key, result );
        }

        public bool GetOver(string firstKey, string lastKey, [DisallowNull] IList<CallsignEntity> result )
        {
            return _entries.Over( firstKey, lastKey, result );
        }

        public bool GetAll([DisallowNull] IList<CallsignEntity> result )
        {
            return _entries.All( result );
        }

        public CallsignEntity? GetCallsignByIdentifier( string identifier )
        {
            throw new NotImplementedException();
        }

    }
    public class InternationalMaritimeOrganizationNumberByIdentifierEntityIndex
    {
        readonly SortedWeakReferenceList<long, InternationalMaritimeOrganizationNumberEntity> _entries = new SortedWeakReferenceList<long, InternationalMaritimeOrganizationNumberEntity>( );

        public InternationalMaritimeOrganizationNumberByIdentifierEntityIndex( )
        {
        }

        public void Add( InternationalMaritimeOrganizationNumberEntity entity )
        {
            if( _entries.TryGetValue(entity.Identifier, out var weakReference ) )
            {
                weakReference.SetTarget( entity );
            }
            else
            {
                _entries.Add( entity.Identifier, new WeakReference<InternationalMaritimeOrganizationNumberEntity>( entity, false ) );
            }
        }

        public bool GetByIdentifier( long identifier, out InternationalMaritimeOrganizationNumberEntity? entity )
        {
            entity = null;
            if ( _entries.TryGetValue( identifier, out var weakReference ) )
            {
                if ( weakReference.TryGetTarget( out entity ) == false )
                {
                    _entries.Remove( identifier );
                }
            }
            return _entries.Count > 0;
        }

        public bool GetFrom(long key, [DisallowNull] IList<InternationalMaritimeOrganizationNumberEntity> result )
        {
            return _entries.From( key, result );
        }

        public bool GetUntil(long key, [DisallowNull] IList<InternationalMaritimeOrganizationNumberEntity> result )
        {
            return _entries.Until( key, result );
        }

        public bool GetOver(long firstKey, long lastKey, [DisallowNull] IList<InternationalMaritimeOrganizationNumberEntity> result )
        {
            return _entries.Over( firstKey, lastKey, result );
        }

        public bool GetAll([DisallowNull] IList<InternationalMaritimeOrganizationNumberEntity> result )
        {
            return _entries.All( result );
        }

        public InternationalMaritimeOrganizationNumberEntity? GetInternationalMaritimeOrganizationNumberByIdentifier( long identifier )
        {
            throw new NotImplementedException();
        }

        public IList<InternationalMaritimeOrganizationNumberEntity> GetInternationalMaritimeOrganizationNumberFromIdentifier( long identifier )
        {
            throw new NotImplementedException();
        }

        public IList<InternationalMaritimeOrganizationNumberEntity> GetInternationalMaritimeOrganizationNumberUntilIdentifier( long identifier )
        {
            throw new NotImplementedException();
        }

        IList<InternationalMaritimeOrganizationNumberEntity> GetInternationalMaritimeOrganizationNumberOverIdentifier( long fromIdentifier, long untilIdentifier )
        {
            throw new NotImplementedException();
        }

    }
    public class MaritimeMobileServiceIdentityByIdentifierEntityIndex
    {
        readonly SortedWeakReferenceList<long, MaritimeMobileServiceIdentityEntity> _entries = new SortedWeakReferenceList<long, MaritimeMobileServiceIdentityEntity>( );

        public MaritimeMobileServiceIdentityByIdentifierEntityIndex( )
        {
        }

        public void Add( MaritimeMobileServiceIdentityEntity entity )
        {
            if( _entries.TryGetValue(entity.Identifier, out var weakReference ) )
            {
                weakReference.SetTarget( entity );
            }
            else
            {
                _entries.Add( entity.Identifier, new WeakReference<MaritimeMobileServiceIdentityEntity>( entity, false ) );
            }
        }

        public bool GetByIdentifier( long identifier, out MaritimeMobileServiceIdentityEntity? entity )
        {
            entity = null;
            if ( _entries.TryGetValue( identifier, out var weakReference ) )
            {
                if ( weakReference.TryGetTarget( out entity ) == false )
                {
                    _entries.Remove( identifier );
                }
            }
            return _entries.Count > 0;
        }

        public bool GetFrom(long key, [DisallowNull] IList<MaritimeMobileServiceIdentityEntity> result )
        {
            return _entries.From( key, result );
        }

        public bool GetUntil(long key, [DisallowNull] IList<MaritimeMobileServiceIdentityEntity> result )
        {
            return _entries.Until( key, result );
        }

        public bool GetOver(long firstKey, long lastKey, [DisallowNull] IList<MaritimeMobileServiceIdentityEntity> result )
        {
            return _entries.Over( firstKey, lastKey, result );
        }

        public bool GetAll([DisallowNull] IList<MaritimeMobileServiceIdentityEntity> result )
        {
            return _entries.All( result );
        }

        public MaritimeMobileServiceIdentityEntity? GetMaritimeMobileServiceIdentityByIdentifier( long identifier )
        {
            throw new NotImplementedException();
        }

        public IList<MaritimeMobileServiceIdentityEntity> GetMaritimeMobileServiceIdentityFromIdentifier( long identifier )
        {
            throw new NotImplementedException();
        }

        public IList<MaritimeMobileServiceIdentityEntity> GetMaritimeMobileServiceIdentityUntilIdentifier( long identifier )
        {
            throw new NotImplementedException();
        }

        IList<MaritimeMobileServiceIdentityEntity> GetMaritimeMobileServiceIdentityOverIdentifier( long fromIdentifier, long untilIdentifier )
        {
            throw new NotImplementedException();
        }

    }
    public class NameByTextEntityIndex
    {
        readonly SortedWeakReferenceList<string, NameEntity> _entries = new SortedWeakReferenceList<string, NameEntity>( );

        public NameByTextEntityIndex( )
        {
        }

        public void Add( NameEntity entity )
        {
            if( _entries.TryGetValue(entity.Text, out var weakReference ) )
            {
                weakReference.SetTarget( entity );
            }
            else
            {
                _entries.Add( entity.Text, new WeakReference<NameEntity>( entity, false ) );
            }
        }

        public bool GetByText( string text, out NameEntity? entity )
        {
            entity = null;
            if ( _entries.TryGetValue( text, out var weakReference ) )
            {
                if ( weakReference.TryGetTarget( out entity ) == false )
                {
                    _entries.Remove( text );
                }
            }
            return _entries.Count > 0;
        }

        public bool GetFrom(string key, [DisallowNull] IList<NameEntity> result )
        {
            return _entries.From( key, result );
        }

        public bool GetUntil(string key, [DisallowNull] IList<NameEntity> result )
        {
            return _entries.Until( key, result );
        }

        public bool GetOver(string firstKey, string lastKey, [DisallowNull] IList<NameEntity> result )
        {
            return _entries.Over( firstKey, lastKey, result );
        }

        public bool GetAll([DisallowNull] IList<NameEntity> result )
        {
            return _entries.All( result );
        }

        public NameEntity? GetNameByText( string text )
        {
            throw new NotImplementedException();
        }

    }
    public class Int16TimeseriesValueByTimeseriesAndTimestampEntityIndex
    {
        public class ByTimestamp
        {
            readonly SortedWeakReferenceList<DateTime, Int16TimeseriesValueEntity> _entries = new SortedWeakReferenceList<DateTime, Int16TimeseriesValueEntity>( );

            public ByTimestamp( )
            {
            }

            public void Add( Int16TimeseriesValueEntity entity )
            {
                if( _entries.TryGetValue(entity.Timestamp, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Timestamp, new WeakReference<Int16TimeseriesValueEntity>( entity, false ) );
                }
            }

            public bool GetByTimestamp( DateTime timestamp, out Int16TimeseriesValueEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( timestamp, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( timestamp );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(DateTime key, [DisallowNull] IList<Int16TimeseriesValueEntity> result )
            {
                return _entries.From( key, result );
            }

            public bool GetUntil(DateTime key, [DisallowNull] IList<Int16TimeseriesValueEntity> result )
            {
                return _entries.Until( key, result );
            }

            public bool GetOver(DateTime firstKey, DateTime lastKey, [DisallowNull] IList<Int16TimeseriesValueEntity> result )
            {
                return _entries.Over( firstKey, lastKey, result );
            }

            public bool GetAll([DisallowNull] IList<Int16TimeseriesValueEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<DateTime, ByTimestamp> _entries = new SortedListEx<DateTime, ByTimestamp>( );
        public List<Int16TimeseriesValueEntity> GetInt16TimeseriesValueCollectionByTimeseries( Guid timeseries )
        {
            throw new NotImplementedException();
        }

        public Int16TimeseriesValueEntity? GetInt16TimeseriesValueByTimeseriesAndTimestamp( Guid timeseries, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public Int16TimeseriesValueEntity? GetInt16TimeseriesValueByTimeseriesAtTimestamp( Guid timeseries, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<Int16TimeseriesValueEntity> GetInt16TimeseriesValueByTimeseriesFromTimestamp( Guid timeseries, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<Int16TimeseriesValueEntity> GetInt16TimeseriesValueByTimeseriesUntilTimestamp( Guid timeseries, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        IList<Int16TimeseriesValueEntity> GetInt16TimeseriesValueByTimeseriesOverTimestamp( Guid timeseries, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

    }
    public class Int16TimeseriesValueByTimestampEntityIndex
    {
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, Int16TimeseriesValueEntity> _entries = new SortedWeakReferenceList<Guid, Int16TimeseriesValueEntity>( );
            public ById( )
            {
            }

            public void Add( Int16TimeseriesValueEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<Int16TimeseriesValueEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out Int16TimeseriesValueEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<Int16TimeseriesValueEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<Int16TimeseriesValueEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<Int16TimeseriesValueEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<Int16TimeseriesValueEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<DateTime, ById> _entries = new SortedListEx<DateTime, ById>( );

        public Int16TimeseriesValueByTimestampEntityIndex( )
        {
        }

        public List<Int16TimeseriesValueEntity> GetInt16TimeseriesValueCollectionByTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<Int16TimeseriesValueEntity> GetInt16TimeseriesValueCollectionAtTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<Int16TimeseriesValueEntity> GetInt16TimeseriesValueCollectionFromTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<Int16TimeseriesValueEntity> GetInt16TimeseriesValueCollectionUntilTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        IList<Int16TimeseriesValueEntity> GetInt16TimeseriesValueCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

    }

    public class Int32TimeseriesValueByTimeseriesAndTimestampEntityIndex
    {
        public class ByTimestamp
        {
            readonly SortedWeakReferenceList<DateTime, Int32TimeseriesValueEntity> _entries = new SortedWeakReferenceList<DateTime, Int32TimeseriesValueEntity>( );

            public ByTimestamp( )
            {
            }

            public void Add( Int32TimeseriesValueEntity entity )
            {
                if( _entries.TryGetValue(entity.Timestamp, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Timestamp, new WeakReference<Int32TimeseriesValueEntity>( entity, false ) );
                }
            }

            public bool GetByTimestamp( DateTime timestamp, out Int32TimeseriesValueEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( timestamp, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( timestamp );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(DateTime key, [DisallowNull] IList<Int32TimeseriesValueEntity> result )
            {
                return _entries.From( key, result );
            }

            public bool GetUntil(DateTime key, [DisallowNull] IList<Int32TimeseriesValueEntity> result )
            {
                return _entries.Until( key, result );
            }

            public bool GetOver(DateTime firstKey, DateTime lastKey, [DisallowNull] IList<Int32TimeseriesValueEntity> result )
            {
                return _entries.Over( firstKey, lastKey, result );
            }

            public bool GetAll([DisallowNull] IList<Int32TimeseriesValueEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<DateTime, ByTimestamp> _entries = new SortedListEx<DateTime, ByTimestamp>( );
        public List<Int32TimeseriesValueEntity> GetInt32TimeseriesValueCollectionByTimeseries( Guid timeseries )
        {
            throw new NotImplementedException();
        }

        public Int32TimeseriesValueEntity? GetInt32TimeseriesValueByTimeseriesAndTimestamp( Guid timeseries, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public Int32TimeseriesValueEntity? GetInt32TimeseriesValueByTimeseriesAtTimestamp( Guid timeseries, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<Int32TimeseriesValueEntity> GetInt32TimeseriesValueByTimeseriesFromTimestamp( Guid timeseries, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<Int32TimeseriesValueEntity> GetInt32TimeseriesValueByTimeseriesUntilTimestamp( Guid timeseries, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        IList<Int32TimeseriesValueEntity> GetInt32TimeseriesValueByTimeseriesOverTimestamp( Guid timeseries, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

    }
    public class Int32TimeseriesValueByTimestampEntityIndex
    {
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, Int32TimeseriesValueEntity> _entries = new SortedWeakReferenceList<Guid, Int32TimeseriesValueEntity>( );
            public ById( )
            {
            }

            public void Add( Int32TimeseriesValueEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<Int32TimeseriesValueEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out Int32TimeseriesValueEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<Int32TimeseriesValueEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<Int32TimeseriesValueEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<Int32TimeseriesValueEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<Int32TimeseriesValueEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<DateTime, ById> _entries = new SortedListEx<DateTime, ById>( );

        public Int32TimeseriesValueByTimestampEntityIndex( )
        {
        }

        public List<Int32TimeseriesValueEntity> GetInt32TimeseriesValueCollectionByTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<Int32TimeseriesValueEntity> GetInt32TimeseriesValueCollectionAtTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<Int32TimeseriesValueEntity> GetInt32TimeseriesValueCollectionFromTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<Int32TimeseriesValueEntity> GetInt32TimeseriesValueCollectionUntilTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        IList<Int32TimeseriesValueEntity> GetInt32TimeseriesValueCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

    }

    public class Int64TimeseriesValueByTimeseriesAndTimestampEntityIndex
    {
        public class ByTimestamp
        {
            readonly SortedWeakReferenceList<DateTime, Int64TimeseriesValueEntity> _entries = new SortedWeakReferenceList<DateTime, Int64TimeseriesValueEntity>( );

            public ByTimestamp( )
            {
            }

            public void Add( Int64TimeseriesValueEntity entity )
            {
                if( _entries.TryGetValue(entity.Timestamp, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Timestamp, new WeakReference<Int64TimeseriesValueEntity>( entity, false ) );
                }
            }

            public bool GetByTimestamp( DateTime timestamp, out Int64TimeseriesValueEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( timestamp, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( timestamp );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(DateTime key, [DisallowNull] IList<Int64TimeseriesValueEntity> result )
            {
                return _entries.From( key, result );
            }

            public bool GetUntil(DateTime key, [DisallowNull] IList<Int64TimeseriesValueEntity> result )
            {
                return _entries.Until( key, result );
            }

            public bool GetOver(DateTime firstKey, DateTime lastKey, [DisallowNull] IList<Int64TimeseriesValueEntity> result )
            {
                return _entries.Over( firstKey, lastKey, result );
            }

            public bool GetAll([DisallowNull] IList<Int64TimeseriesValueEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<DateTime, ByTimestamp> _entries = new SortedListEx<DateTime, ByTimestamp>( );
        public List<Int64TimeseriesValueEntity> GetInt64TimeseriesValueCollectionByTimeseries( Guid timeseries )
        {
            throw new NotImplementedException();
        }

        public Int64TimeseriesValueEntity? GetInt64TimeseriesValueByTimeseriesAndTimestamp( Guid timeseries, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public Int64TimeseriesValueEntity? GetInt64TimeseriesValueByTimeseriesAtTimestamp( Guid timeseries, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<Int64TimeseriesValueEntity> GetInt64TimeseriesValueByTimeseriesFromTimestamp( Guid timeseries, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<Int64TimeseriesValueEntity> GetInt64TimeseriesValueByTimeseriesUntilTimestamp( Guid timeseries, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        IList<Int64TimeseriesValueEntity> GetInt64TimeseriesValueByTimeseriesOverTimestamp( Guid timeseries, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

    }
    public class Int64TimeseriesValueByTimestampEntityIndex
    {
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, Int64TimeseriesValueEntity> _entries = new SortedWeakReferenceList<Guid, Int64TimeseriesValueEntity>( );
            public ById( )
            {
            }

            public void Add( Int64TimeseriesValueEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<Int64TimeseriesValueEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out Int64TimeseriesValueEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<Int64TimeseriesValueEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<Int64TimeseriesValueEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<Int64TimeseriesValueEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<Int64TimeseriesValueEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<DateTime, ById> _entries = new SortedListEx<DateTime, ById>( );

        public Int64TimeseriesValueByTimestampEntityIndex( )
        {
        }

        public List<Int64TimeseriesValueEntity> GetInt64TimeseriesValueCollectionByTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<Int64TimeseriesValueEntity> GetInt64TimeseriesValueCollectionAtTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<Int64TimeseriesValueEntity> GetInt64TimeseriesValueCollectionFromTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<Int64TimeseriesValueEntity> GetInt64TimeseriesValueCollectionUntilTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        IList<Int64TimeseriesValueEntity> GetInt64TimeseriesValueCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

    }

    public class BaseStationByNameEntityIndex
    {
        readonly SortedWeakReferenceList<string, BaseStationEntity> _entries = new SortedWeakReferenceList<string, BaseStationEntity>( );

        public BaseStationByNameEntityIndex( )
        {
        }

        public void Add( BaseStationEntity entity )
        {
            if( _entries.TryGetValue(entity.Name, out var weakReference ) )
            {
                weakReference.SetTarget( entity );
            }
            else
            {
                _entries.Add( entity.Name, new WeakReference<BaseStationEntity>( entity, false ) );
            }
        }

        public bool GetByName( string name, out BaseStationEntity? entity )
        {
            entity = null;
            if ( _entries.TryGetValue( name, out var weakReference ) )
            {
                if ( weakReference.TryGetTarget( out entity ) == false )
                {
                    _entries.Remove( name );
                }
            }
            return _entries.Count > 0;
        }

        public bool GetFrom(string key, [DisallowNull] IList<BaseStationEntity> result )
        {
            return _entries.From( key, result );
        }

        public bool GetUntil(string key, [DisallowNull] IList<BaseStationEntity> result )
        {
            return _entries.Until( key, result );
        }

        public bool GetOver(string firstKey, string lastKey, [DisallowNull] IList<BaseStationEntity> result )
        {
            return _entries.Over( firstKey, lastKey, result );
        }

        public bool GetAll([DisallowNull] IList<BaseStationEntity> result )
        {
            return _entries.All( result );
        }

        public BaseStationEntity? GetBaseStationByName( string name )
        {
            throw new NotImplementedException();
        }

    }
    public class BaseStationByTypeEntityIndex
    {
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, BaseStationEntity> _entries = new SortedWeakReferenceList<Guid, BaseStationEntity>( );
            public ById( )
            {
            }

            public void Add( BaseStationEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<BaseStationEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out BaseStationEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<BaseStationEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<BaseStationEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<BaseStationEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<BaseStationEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<Guid, ById> _entries = new SortedListEx<Guid, ById>( );

        public BaseStationByTypeEntityIndex( )
        {
        }

        public List<BaseStationEntity> GetBaseStationCollectionByType( Guid? type )
        {
            throw new NotImplementedException();
        }

        public IList<BaseStationEntity> GetBaseStationCollectionByTypeIsNull(  )
        {
            throw new NotImplementedException();
        }

    }

    public class BaseStationByTypeIsNullEntityIndex
    {
    }

    public class DeviceByHostEntityIndex
    {
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, DeviceEntity> _entries = new SortedWeakReferenceList<Guid, DeviceEntity>( );
            public ById( )
            {
            }

            public void Add( DeviceEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<DeviceEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out DeviceEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<DeviceEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<DeviceEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<DeviceEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<DeviceEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<Guid, ById> _entries = new SortedListEx<Guid, ById>( );

        public DeviceByHostEntityIndex( )
        {
        }

        public List<DeviceEntity> GetDeviceCollectionByHost( Guid host )
        {
            throw new NotImplementedException();
        }

    }

    public class DeviceByNameEntityIndex
    {
        readonly SortedWeakReferenceList<string, DeviceEntity> _entries = new SortedWeakReferenceList<string, DeviceEntity>( );

        public DeviceByNameEntityIndex( )
        {
        }

        public void Add( DeviceEntity entity )
        {
            if( _entries.TryGetValue(entity.Name, out var weakReference ) )
            {
                weakReference.SetTarget( entity );
            }
            else
            {
                _entries.Add( entity.Name, new WeakReference<DeviceEntity>( entity, false ) );
            }
        }

        public bool GetByName( string name, out DeviceEntity? entity )
        {
            entity = null;
            if ( _entries.TryGetValue( name, out var weakReference ) )
            {
                if ( weakReference.TryGetTarget( out entity ) == false )
                {
                    _entries.Remove( name );
                }
            }
            return _entries.Count > 0;
        }

        public bool GetFrom(string key, [DisallowNull] IList<DeviceEntity> result )
        {
            return _entries.From( key, result );
        }

        public bool GetUntil(string key, [DisallowNull] IList<DeviceEntity> result )
        {
            return _entries.Until( key, result );
        }

        public bool GetOver(string firstKey, string lastKey, [DisallowNull] IList<DeviceEntity> result )
        {
            return _entries.Over( firstKey, lastKey, result );
        }

        public bool GetAll([DisallowNull] IList<DeviceEntity> result )
        {
            return _entries.All( result );
        }

        public DeviceEntity? GetDeviceByName( string name )
        {
            throw new NotImplementedException();
        }

    }
    public class GyroDeviceByGNSSDeviceEntityIndex
    {
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, GyroDeviceEntity> _entries = new SortedWeakReferenceList<Guid, GyroDeviceEntity>( );
            public ById( )
            {
            }

            public void Add( GyroDeviceEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<GyroDeviceEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out GyroDeviceEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<GyroDeviceEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<GyroDeviceEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<GyroDeviceEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<GyroDeviceEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<Guid, ById> _entries = new SortedListEx<Guid, ById>( );

        public GyroDeviceByGNSSDeviceEntityIndex( )
        {
        }

        public List<GyroDeviceEntity> GetGyroDeviceCollectionByGNSSDevice( Guid? gNSSDevice )
        {
            throw new NotImplementedException();
        }

        public IList<GyroDeviceEntity> GetGyroDeviceCollectionByGNSSDeviceIsNull(  )
        {
            throw new NotImplementedException();
        }

    }

    public class GyroDeviceByGNSSDeviceIsNullEntityIndex
    {
    }

    public class RadomeDeviceByRadarEntityIndex
    {
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, RadomeDeviceEntity> _entries = new SortedWeakReferenceList<Guid, RadomeDeviceEntity>( );
            public ById( )
            {
            }

            public void Add( RadomeDeviceEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<RadomeDeviceEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out RadomeDeviceEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<RadomeDeviceEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<RadomeDeviceEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<RadomeDeviceEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<RadomeDeviceEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<Guid, ById> _entries = new SortedListEx<Guid, ById>( );

        public RadomeDeviceByRadarEntityIndex( )
        {
        }

        public List<RadomeDeviceEntity> GetRadomeDeviceCollectionByRadar( Guid? radar )
        {
            throw new NotImplementedException();
        }

        public IList<RadomeDeviceEntity> GetRadomeDeviceCollectionByRadarIsNull(  )
        {
            throw new NotImplementedException();
        }

    }

    public class RadomeDeviceByRadarIsNullEntityIndex
    {
    }

    public class RadarDeviceByRadomeEntityIndex
    {
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, RadarDeviceEntity> _entries = new SortedWeakReferenceList<Guid, RadarDeviceEntity>( );
            public ById( )
            {
            }

            public void Add( RadarDeviceEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<RadarDeviceEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out RadarDeviceEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<RadarDeviceEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<RadarDeviceEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<RadarDeviceEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<RadarDeviceEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<Guid, ById> _entries = new SortedListEx<Guid, ById>( );

        public RadarDeviceByRadomeEntityIndex( )
        {
        }

        public List<RadarDeviceEntity> GetRadarDeviceCollectionByRadome( Guid? radome )
        {
            throw new NotImplementedException();
        }

        public IList<RadarDeviceEntity> GetRadarDeviceCollectionByRadomeIsNull(  )
        {
            throw new NotImplementedException();
        }

    }

    public class RadarDeviceByRadomeIsNullEntityIndex
    {
    }

    public class RadarDeviceByGNSSDeviceEntityIndex
    {
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, RadarDeviceEntity> _entries = new SortedWeakReferenceList<Guid, RadarDeviceEntity>( );
            public ById( )
            {
            }

            public void Add( RadarDeviceEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<RadarDeviceEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out RadarDeviceEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<RadarDeviceEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<RadarDeviceEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<RadarDeviceEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<RadarDeviceEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<Guid, ById> _entries = new SortedListEx<Guid, ById>( );

        public RadarDeviceByGNSSDeviceEntityIndex( )
        {
        }

        public List<RadarDeviceEntity> GetRadarDeviceCollectionByGNSSDevice( Guid? gNSSDevice )
        {
            throw new NotImplementedException();
        }

        public IList<RadarDeviceEntity> GetRadarDeviceCollectionByGNSSDeviceIsNull(  )
        {
            throw new NotImplementedException();
        }

    }

    public class RadarDeviceByGNSSDeviceIsNullEntityIndex
    {
    }

    public class WeatherStationDeviceByGyroEntityIndex
    {
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, WeatherStationDeviceEntity> _entries = new SortedWeakReferenceList<Guid, WeatherStationDeviceEntity>( );
            public ById( )
            {
            }

            public void Add( WeatherStationDeviceEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<WeatherStationDeviceEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out WeatherStationDeviceEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<WeatherStationDeviceEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<WeatherStationDeviceEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<WeatherStationDeviceEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<WeatherStationDeviceEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<Guid, ById> _entries = new SortedListEx<Guid, ById>( );

        public WeatherStationDeviceByGyroEntityIndex( )
        {
        }

        public List<WeatherStationDeviceEntity> GetWeatherStationDeviceCollectionByGyro( Guid? gyro )
        {
            throw new NotImplementedException();
        }

        public IList<WeatherStationDeviceEntity> GetWeatherStationDeviceCollectionByGyroIsNull(  )
        {
            throw new NotImplementedException();
        }

    }

    public class WeatherStationDeviceByGyroIsNullEntityIndex
    {
    }

    public class FacilityByNameEntityIndex
    {
        readonly SortedWeakReferenceList<string, FacilityEntity> _entries = new SortedWeakReferenceList<string, FacilityEntity>( );

        public FacilityByNameEntityIndex( )
        {
        }

        public void Add( FacilityEntity entity )
        {
            if( _entries.TryGetValue(entity.Name, out var weakReference ) )
            {
                weakReference.SetTarget( entity );
            }
            else
            {
                _entries.Add( entity.Name, new WeakReference<FacilityEntity>( entity, false ) );
            }
        }

        public bool GetByName( string name, out FacilityEntity? entity )
        {
            entity = null;
            if ( _entries.TryGetValue( name, out var weakReference ) )
            {
                if ( weakReference.TryGetTarget( out entity ) == false )
                {
                    _entries.Remove( name );
                }
            }
            return _entries.Count > 0;
        }

        public bool GetFrom(string key, [DisallowNull] IList<FacilityEntity> result )
        {
            return _entries.From( key, result );
        }

        public bool GetUntil(string key, [DisallowNull] IList<FacilityEntity> result )
        {
            return _entries.Until( key, result );
        }

        public bool GetOver(string firstKey, string lastKey, [DisallowNull] IList<FacilityEntity> result )
        {
            return _entries.Over( firstKey, lastKey, result );
        }

        public bool GetAll([DisallowNull] IList<FacilityEntity> result )
        {
            return _entries.All( result );
        }

        public FacilityEntity? GetFacilityByName( string name )
        {
            throw new NotImplementedException();
        }

    }
    public class FacilityByTypeEntityIndex
    {
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, FacilityEntity> _entries = new SortedWeakReferenceList<Guid, FacilityEntity>( );
            public ById( )
            {
            }

            public void Add( FacilityEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<FacilityEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out FacilityEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<FacilityEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<FacilityEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<FacilityEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<FacilityEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<Guid, ById> _entries = new SortedListEx<Guid, ById>( );

        public FacilityByTypeEntityIndex( )
        {
        }

        public List<FacilityEntity> GetFacilityCollectionByType( Guid? type )
        {
            throw new NotImplementedException();
        }

        public IList<FacilityEntity> GetFacilityCollectionByTypeIsNull(  )
        {
            throw new NotImplementedException();
        }

    }

    public class FacilityByTypeIsNullEntityIndex
    {
    }

    public class AircraftByNameEntityIndex
    {
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, AircraftEntity> _entries = new SortedWeakReferenceList<Guid, AircraftEntity>( );
            public ById( )
            {
            }

            public void Add( AircraftEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<AircraftEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out AircraftEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<AircraftEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<AircraftEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<AircraftEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<AircraftEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<string, ById> _entries = new SortedListEx<string, ById>( );

        public AircraftByNameEntityIndex( )
        {
        }

        public List<AircraftEntity> GetAircraftCollectionByName( string name )
        {
            throw new NotImplementedException();
        }

    }

    public class AircraftByTypeEntityIndex
    {
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, AircraftEntity> _entries = new SortedWeakReferenceList<Guid, AircraftEntity>( );
            public ById( )
            {
            }

            public void Add( AircraftEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<AircraftEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out AircraftEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<AircraftEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<AircraftEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<AircraftEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<AircraftEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<Guid, ById> _entries = new SortedListEx<Guid, ById>( );

        public AircraftByTypeEntityIndex( )
        {
        }

        public List<AircraftEntity> GetAircraftCollectionByType( Guid? type )
        {
            throw new NotImplementedException();
        }

        public IList<AircraftEntity> GetAircraftCollectionByTypeIsNull(  )
        {
            throw new NotImplementedException();
        }

    }

    public class AircraftByTypeIsNullEntityIndex
    {
    }

    public class AisAidToNavigationByNameEntityIndex
    {
        readonly SortedWeakReferenceList<string, AisAidToNavigationEntity> _entries = new SortedWeakReferenceList<string, AisAidToNavigationEntity>( );

        public AisAidToNavigationByNameEntityIndex( )
        {
        }

        public void Add( AisAidToNavigationEntity entity )
        {
            if( _entries.TryGetValue(entity.Name, out var weakReference ) )
            {
                weakReference.SetTarget( entity );
            }
            else
            {
                _entries.Add( entity.Name, new WeakReference<AisAidToNavigationEntity>( entity, false ) );
            }
        }

        public bool GetByName( string name, out AisAidToNavigationEntity? entity )
        {
            entity = null;
            if ( _entries.TryGetValue( name, out var weakReference ) )
            {
                if ( weakReference.TryGetTarget( out entity ) == false )
                {
                    _entries.Remove( name );
                }
            }
            return _entries.Count > 0;
        }

        public bool GetFrom(string key, [DisallowNull] IList<AisAidToNavigationEntity> result )
        {
            return _entries.From( key, result );
        }

        public bool GetUntil(string key, [DisallowNull] IList<AisAidToNavigationEntity> result )
        {
            return _entries.Until( key, result );
        }

        public bool GetOver(string firstKey, string lastKey, [DisallowNull] IList<AisAidToNavigationEntity> result )
        {
            return _entries.Over( firstKey, lastKey, result );
        }

        public bool GetAll([DisallowNull] IList<AisAidToNavigationEntity> result )
        {
            return _entries.All( result );
        }

        public AisAidToNavigationEntity? GetAisAidToNavigationByName( string name )
        {
            throw new NotImplementedException();
        }

    }
    public class AisAidToNavigationByMMSIEntityIndex
    {
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, AisAidToNavigationEntity> _entries = new SortedWeakReferenceList<Guid, AisAidToNavigationEntity>( );
            public ById( )
            {
            }

            public void Add( AisAidToNavigationEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<AisAidToNavigationEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out AisAidToNavigationEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<AisAidToNavigationEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<AisAidToNavigationEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<AisAidToNavigationEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<AisAidToNavigationEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<Guid, ById> _entries = new SortedListEx<Guid, ById>( );

        public AisAidToNavigationByMMSIEntityIndex( )
        {
        }

        public List<AisAidToNavigationEntity> GetAisAidToNavigationCollectionByMMSI( Guid? mMSI )
        {
            throw new NotImplementedException();
        }

        public IList<AisAidToNavigationEntity> GetAisAidToNavigationCollectionByMMSIIsNull(  )
        {
            throw new NotImplementedException();
        }

    }

    public class AisAidToNavigationByMMSIIsNullEntityIndex
    {
    }

    public class VehicleByNameEntityIndex
    {
        readonly SortedWeakReferenceList<string, VehicleEntity> _entries = new SortedWeakReferenceList<string, VehicleEntity>( );

        public VehicleByNameEntityIndex( )
        {
        }

        public void Add( VehicleEntity entity )
        {
            if( _entries.TryGetValue(entity.Name, out var weakReference ) )
            {
                weakReference.SetTarget( entity );
            }
            else
            {
                _entries.Add( entity.Name, new WeakReference<VehicleEntity>( entity, false ) );
            }
        }

        public bool GetByName( string name, out VehicleEntity? entity )
        {
            entity = null;
            if ( _entries.TryGetValue( name, out var weakReference ) )
            {
                if ( weakReference.TryGetTarget( out entity ) == false )
                {
                    _entries.Remove( name );
                }
            }
            return _entries.Count > 0;
        }

        public bool GetFrom(string key, [DisallowNull] IList<VehicleEntity> result )
        {
            return _entries.From( key, result );
        }

        public bool GetUntil(string key, [DisallowNull] IList<VehicleEntity> result )
        {
            return _entries.Until( key, result );
        }

        public bool GetOver(string firstKey, string lastKey, [DisallowNull] IList<VehicleEntity> result )
        {
            return _entries.Over( firstKey, lastKey, result );
        }

        public bool GetAll([DisallowNull] IList<VehicleEntity> result )
        {
            return _entries.All( result );
        }

        public VehicleEntity? GetVehicleByName( string name )
        {
            throw new NotImplementedException();
        }

    }
    public class VehicleByTypeEntityIndex
    {
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, VehicleEntity> _entries = new SortedWeakReferenceList<Guid, VehicleEntity>( );
            public ById( )
            {
            }

            public void Add( VehicleEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<VehicleEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out VehicleEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<VehicleEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<VehicleEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<VehicleEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<VehicleEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<Guid, ById> _entries = new SortedListEx<Guid, ById>( );

        public VehicleByTypeEntityIndex( )
        {
        }

        public List<VehicleEntity> GetVehicleCollectionByType( Guid? type )
        {
            throw new NotImplementedException();
        }

        public IList<VehicleEntity> GetVehicleCollectionByTypeIsNull(  )
        {
            throw new NotImplementedException();
        }

    }

    public class VehicleByTypeIsNullEntityIndex
    {
    }

    public class VesselByNameEntityIndex
    {
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, VesselEntity> _entries = new SortedWeakReferenceList<Guid, VesselEntity>( );
            public ById( )
            {
            }

            public void Add( VesselEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<VesselEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out VesselEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<VesselEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<VesselEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<VesselEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<VesselEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<string, ById> _entries = new SortedListEx<string, ById>( );

        public VesselByNameEntityIndex( )
        {
        }

        public List<VesselEntity> GetVesselCollectionByName( string name )
        {
            throw new NotImplementedException();
        }

    }

    public class VesselByTypeEntityIndex
    {
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, VesselEntity> _entries = new SortedWeakReferenceList<Guid, VesselEntity>( );
            public ById( )
            {
            }

            public void Add( VesselEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<VesselEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out VesselEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<VesselEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<VesselEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<VesselEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<VesselEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<Guid, ById> _entries = new SortedListEx<Guid, ById>( );

        public VesselByTypeEntityIndex( )
        {
        }

        public List<VesselEntity> GetVesselCollectionByType( Guid? type )
        {
            throw new NotImplementedException();
        }

        public IList<VesselEntity> GetVesselCollectionByTypeIsNull(  )
        {
            throw new NotImplementedException();
        }

    }

    public class VesselByTypeIsNullEntityIndex
    {
    }

    public class ItemIdentityLinkByItemAndStartEntityIndex
    {
        public class ByStart
        {
            readonly SortedListEx<DateTime, ById> _entries = new SortedListEx<DateTime, ById>( );
            List<DateTime> _emptyKeys = new List<DateTime>( );

            public ByStart( )
            {
            }

            void RemoveEmptyKeys( )
            {
                var emptyKeyCount = _emptyKeys.Count;
                for ( int i = 0; i < emptyKeyCount; i++ )
                {
                    _entries.Remove( _emptyKeys[ i ] );
                }
                _emptyKeys.Clear( );
            }

            public bool GetAll([DisallowNull] IList<ItemIdentityLinkEntity> result )
            {
                foreach( var entry in _entries )
                {
                    if( entry.Value.GetAll( result ) == false )
                    {
                        _emptyKeys.Add( entry.Key );
                    }
                }
                RemoveEmptyKeys( );
                return _entries.Count > 0;
            }

        }
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, ItemIdentityLinkEntity> _entries = new SortedWeakReferenceList<Guid, ItemIdentityLinkEntity>( );
            public ById( )
            {
            }

            public void Add( ItemIdentityLinkEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<ItemIdentityLinkEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out ItemIdentityLinkEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<ItemIdentityLinkEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<ItemIdentityLinkEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<ItemIdentityLinkEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<ItemIdentityLinkEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<Guid, ByStart> _entries = new SortedListEx<Guid, ByStart>( );

        public ItemIdentityLinkByItemAndStartEntityIndex( )
        {
        }

        public List<ItemIdentityLinkEntity> GetItemIdentityLinkCollectionByItem( Guid item )
        {
            throw new NotImplementedException();
        }

        public List<ItemIdentityLinkEntity> GetItemIdentityLinkCollectionByItemAndStart( Guid item, DateTime start )
        {
            throw new NotImplementedException();
        }

        public IList<ItemIdentityLinkEntity> GetItemIdentityLinkCollectionByItemAtStart( Guid item, DateTime start )
        {
            throw new NotImplementedException();
        }

        public IList<ItemIdentityLinkEntity> GetItemIdentityLinkCollectionByItemFromStart( Guid item, DateTime start )
        {
            throw new NotImplementedException();
        }

        public IList<ItemIdentityLinkEntity> GetItemIdentityLinkCollectionByItemUntilStart( Guid item, DateTime start )
        {
            throw new NotImplementedException();
        }

        IList<ItemIdentityLinkEntity> GetItemIdentityLinkCollectionByItemOverStart( Guid item, DateTime fromStart, DateTime untilStart )
        {
            throw new NotImplementedException();
        }

    }

    public class ItemIdentityLinkByItemAndEndEntityIndex
    {
        public class ByEnd
        {
            readonly SortedListEx<DateTime, ById> _entries = new SortedListEx<DateTime, ById>( );
            List<DateTime> _emptyKeys = new List<DateTime>( );

            public ByEnd( )
            {
            }

            void RemoveEmptyKeys( )
            {
                var emptyKeyCount = _emptyKeys.Count;
                for ( int i = 0; i < emptyKeyCount; i++ )
                {
                    _entries.Remove( _emptyKeys[ i ] );
                }
                _emptyKeys.Clear( );
            }

            public bool GetAll([DisallowNull] IList<ItemIdentityLinkEntity> result )
            {
                foreach( var entry in _entries )
                {
                    if( entry.Value.GetAll( result ) == false )
                    {
                        _emptyKeys.Add( entry.Key );
                    }
                }
                RemoveEmptyKeys( );
                return _entries.Count > 0;
            }

        }
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, ItemIdentityLinkEntity> _entries = new SortedWeakReferenceList<Guid, ItemIdentityLinkEntity>( );
            public ById( )
            {
            }

            public void Add( ItemIdentityLinkEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<ItemIdentityLinkEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out ItemIdentityLinkEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<ItemIdentityLinkEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<ItemIdentityLinkEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<ItemIdentityLinkEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<ItemIdentityLinkEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<Guid, ByEnd> _entries = new SortedListEx<Guid, ByEnd>( );

        public ItemIdentityLinkByItemAndEndEntityIndex( )
        {
        }

        public List<ItemIdentityLinkEntity> GetItemIdentityLinkCollectionByItem( Guid item )
        {
            throw new NotImplementedException();
        }

        public IList<ItemIdentityLinkEntity> GetItemIdentityLinkCollectionByItem(  )
        {
            throw new NotImplementedException();
        }

        public List<ItemIdentityLinkEntity> GetItemIdentityLinkCollectionByItemAndEnd( Guid item, DateTime? end )
        {
            throw new NotImplementedException();
        }

        public IList<ItemIdentityLinkEntity> GetItemIdentityLinkCollectionByItemAndEndIsNull( Guid item )
        {
            throw new NotImplementedException();
        }

        public IList<ItemIdentityLinkEntity> GetItemIdentityLinkCollectionByItemAtEnd( Guid item, DateTime? end )
        {
            throw new NotImplementedException();
        }

        public IList<ItemIdentityLinkEntity> GetItemIdentityLinkCollectionByItemFromEnd( Guid item, DateTime? end )
        {
            throw new NotImplementedException();
        }

        public IList<ItemIdentityLinkEntity> GetItemIdentityLinkCollectionByItemUntilEnd( Guid item, DateTime? end )
        {
            throw new NotImplementedException();
        }

        IList<ItemIdentityLinkEntity> GetItemIdentityLinkCollectionByItemOverEnd( Guid item, DateTime fromEnd, DateTime untilEnd )
        {
            throw new NotImplementedException();
        }

    }

    public class ItemIdentityLinkByItemAndEndIsNullEntityIndex
    {
    }

    public class ItemIdentityLinkByIdentityAndStartEntityIndex
    {
        public class ByStart
        {
            readonly SortedListEx<DateTime, ById> _entries = new SortedListEx<DateTime, ById>( );
            List<DateTime> _emptyKeys = new List<DateTime>( );

            public ByStart( )
            {
            }

            void RemoveEmptyKeys( )
            {
                var emptyKeyCount = _emptyKeys.Count;
                for ( int i = 0; i < emptyKeyCount; i++ )
                {
                    _entries.Remove( _emptyKeys[ i ] );
                }
                _emptyKeys.Clear( );
            }

            public bool GetAll([DisallowNull] IList<ItemIdentityLinkEntity> result )
            {
                foreach( var entry in _entries )
                {
                    if( entry.Value.GetAll( result ) == false )
                    {
                        _emptyKeys.Add( entry.Key );
                    }
                }
                RemoveEmptyKeys( );
                return _entries.Count > 0;
            }

        }
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, ItemIdentityLinkEntity> _entries = new SortedWeakReferenceList<Guid, ItemIdentityLinkEntity>( );
            public ById( )
            {
            }

            public void Add( ItemIdentityLinkEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<ItemIdentityLinkEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out ItemIdentityLinkEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<ItemIdentityLinkEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<ItemIdentityLinkEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<ItemIdentityLinkEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<ItemIdentityLinkEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<Guid, ByStart> _entries = new SortedListEx<Guid, ByStart>( );

        public ItemIdentityLinkByIdentityAndStartEntityIndex( )
        {
        }

        public List<ItemIdentityLinkEntity> GetItemIdentityLinkCollectionByIdentity( Guid identity )
        {
            throw new NotImplementedException();
        }

        public List<ItemIdentityLinkEntity> GetItemIdentityLinkCollectionByIdentityAndStart( Guid identity, DateTime start )
        {
            throw new NotImplementedException();
        }

        public IList<ItemIdentityLinkEntity> GetItemIdentityLinkCollectionByIdentityAtStart( Guid identity, DateTime start )
        {
            throw new NotImplementedException();
        }

        public IList<ItemIdentityLinkEntity> GetItemIdentityLinkCollectionByIdentityFromStart( Guid identity, DateTime start )
        {
            throw new NotImplementedException();
        }

        public IList<ItemIdentityLinkEntity> GetItemIdentityLinkCollectionByIdentityUntilStart( Guid identity, DateTime start )
        {
            throw new NotImplementedException();
        }

        IList<ItemIdentityLinkEntity> GetItemIdentityLinkCollectionByIdentityOverStart( Guid identity, DateTime fromStart, DateTime untilStart )
        {
            throw new NotImplementedException();
        }

    }

    public class ItemIdentityLinkByIdentityAndEndEntityIndex
    {
        public class ByEnd
        {
            readonly SortedListEx<DateTime, ById> _entries = new SortedListEx<DateTime, ById>( );
            List<DateTime> _emptyKeys = new List<DateTime>( );

            public ByEnd( )
            {
            }

            void RemoveEmptyKeys( )
            {
                var emptyKeyCount = _emptyKeys.Count;
                for ( int i = 0; i < emptyKeyCount; i++ )
                {
                    _entries.Remove( _emptyKeys[ i ] );
                }
                _emptyKeys.Clear( );
            }

            public bool GetAll([DisallowNull] IList<ItemIdentityLinkEntity> result )
            {
                foreach( var entry in _entries )
                {
                    if( entry.Value.GetAll( result ) == false )
                    {
                        _emptyKeys.Add( entry.Key );
                    }
                }
                RemoveEmptyKeys( );
                return _entries.Count > 0;
            }

        }
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, ItemIdentityLinkEntity> _entries = new SortedWeakReferenceList<Guid, ItemIdentityLinkEntity>( );
            public ById( )
            {
            }

            public void Add( ItemIdentityLinkEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<ItemIdentityLinkEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out ItemIdentityLinkEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<ItemIdentityLinkEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<ItemIdentityLinkEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<ItemIdentityLinkEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<ItemIdentityLinkEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<Guid, ByEnd> _entries = new SortedListEx<Guid, ByEnd>( );

        public ItemIdentityLinkByIdentityAndEndEntityIndex( )
        {
        }

        public List<ItemIdentityLinkEntity> GetItemIdentityLinkCollectionByIdentity( Guid identity )
        {
            throw new NotImplementedException();
        }

        public IList<ItemIdentityLinkEntity> GetItemIdentityLinkCollectionByIdentity(  )
        {
            throw new NotImplementedException();
        }

        public List<ItemIdentityLinkEntity> GetItemIdentityLinkCollectionByIdentityAndEnd( Guid identity, DateTime? end )
        {
            throw new NotImplementedException();
        }

        public IList<ItemIdentityLinkEntity> GetItemIdentityLinkCollectionByIdentityAndEndIsNull( Guid identity )
        {
            throw new NotImplementedException();
        }

        public IList<ItemIdentityLinkEntity> GetItemIdentityLinkCollectionByIdentityAtEnd( Guid identity, DateTime? end )
        {
            throw new NotImplementedException();
        }

        public IList<ItemIdentityLinkEntity> GetItemIdentityLinkCollectionByIdentityFromEnd( Guid identity, DateTime? end )
        {
            throw new NotImplementedException();
        }

        public IList<ItemIdentityLinkEntity> GetItemIdentityLinkCollectionByIdentityUntilEnd( Guid identity, DateTime? end )
        {
            throw new NotImplementedException();
        }

        IList<ItemIdentityLinkEntity> GetItemIdentityLinkCollectionByIdentityOverEnd( Guid identity, DateTime fromEnd, DateTime untilEnd )
        {
            throw new NotImplementedException();
        }

    }

    public class ItemIdentityLinkByIdentityAndEndIsNullEntityIndex
    {
    }

    public class ItemIdentityLinkByStartEntityIndex
    {
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, ItemIdentityLinkEntity> _entries = new SortedWeakReferenceList<Guid, ItemIdentityLinkEntity>( );
            public ById( )
            {
            }

            public void Add( ItemIdentityLinkEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<ItemIdentityLinkEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out ItemIdentityLinkEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<ItemIdentityLinkEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<ItemIdentityLinkEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<ItemIdentityLinkEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<ItemIdentityLinkEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<DateTime, ById> _entries = new SortedListEx<DateTime, ById>( );

        public ItemIdentityLinkByStartEntityIndex( )
        {
        }

        public List<ItemIdentityLinkEntity> GetItemIdentityLinkCollectionByStart( DateTime start )
        {
            throw new NotImplementedException();
        }

        public IList<ItemIdentityLinkEntity> GetItemIdentityLinkCollectionAtStart( DateTime start )
        {
            throw new NotImplementedException();
        }

        public IList<ItemIdentityLinkEntity> GetItemIdentityLinkCollectionFromStart( DateTime start )
        {
            throw new NotImplementedException();
        }

        public IList<ItemIdentityLinkEntity> GetItemIdentityLinkCollectionUntilStart( DateTime start )
        {
            throw new NotImplementedException();
        }

        IList<ItemIdentityLinkEntity> GetItemIdentityLinkCollectionOverStart( DateTime fromStart, DateTime untilStart )
        {
            throw new NotImplementedException();
        }

    }

    public class ItemIdentityLinkByEndEntityIndex
    {
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, ItemIdentityLinkEntity> _entries = new SortedWeakReferenceList<Guid, ItemIdentityLinkEntity>( );
            public ById( )
            {
            }

            public void Add( ItemIdentityLinkEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<ItemIdentityLinkEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out ItemIdentityLinkEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<ItemIdentityLinkEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<ItemIdentityLinkEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<ItemIdentityLinkEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<ItemIdentityLinkEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<DateTime, ById> _entries = new SortedListEx<DateTime, ById>( );

        public ItemIdentityLinkByEndEntityIndex( )
        {
        }

        public List<ItemIdentityLinkEntity> GetItemIdentityLinkCollectionByEnd( DateTime? end )
        {
            throw new NotImplementedException();
        }

        public IList<ItemIdentityLinkEntity> GetItemIdentityLinkCollectionByEndIsNull(  )
        {
            throw new NotImplementedException();
        }

        public IList<ItemIdentityLinkEntity> GetItemIdentityLinkCollectionAtEnd( DateTime? end )
        {
            throw new NotImplementedException();
        }

        public IList<ItemIdentityLinkEntity> GetItemIdentityLinkCollectionFromEnd( DateTime? end )
        {
            throw new NotImplementedException();
        }

        public IList<ItemIdentityLinkEntity> GetItemIdentityLinkCollectionUntilEnd( DateTime? end )
        {
            throw new NotImplementedException();
        }

        IList<ItemIdentityLinkEntity> GetItemIdentityLinkCollectionOverEnd( DateTime fromEnd, DateTime untilEnd )
        {
            throw new NotImplementedException();
        }

    }

    public class ItemIdentityLinkByEndIsNullEntityIndex
    {
    }

    public class ItemParentChildLinkByParentAndTimestampEntityIndex
    {
        public class ByTimestamp
        {
            readonly SortedWeakReferenceList<DateTime, ItemParentChildLinkEntity> _entries = new SortedWeakReferenceList<DateTime, ItemParentChildLinkEntity>( );

            public ByTimestamp( )
            {
            }

            public void Add( ItemParentChildLinkEntity entity )
            {
                if( _entries.TryGetValue(entity.Timestamp, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Timestamp, new WeakReference<ItemParentChildLinkEntity>( entity, false ) );
                }
            }

            public bool GetByTimestamp( DateTime timestamp, out ItemParentChildLinkEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( timestamp, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( timestamp );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(DateTime key, [DisallowNull] IList<ItemParentChildLinkEntity> result )
            {
                return _entries.From( key, result );
            }

            public bool GetUntil(DateTime key, [DisallowNull] IList<ItemParentChildLinkEntity> result )
            {
                return _entries.Until( key, result );
            }

            public bool GetOver(DateTime firstKey, DateTime lastKey, [DisallowNull] IList<ItemParentChildLinkEntity> result )
            {
                return _entries.Over( firstKey, lastKey, result );
            }

            public bool GetAll([DisallowNull] IList<ItemParentChildLinkEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<DateTime, ByTimestamp> _entries = new SortedListEx<DateTime, ByTimestamp>( );
        public List<ItemParentChildLinkEntity> GetItemParentChildLinkCollectionByParent( Guid parent )
        {
            throw new NotImplementedException();
        }

        public ItemParentChildLinkEntity? GetItemParentChildLinkByParentAndTimestamp( Guid parent, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public ItemParentChildLinkEntity? GetItemParentChildLinkByParentAtTimestamp( Guid parent, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<ItemParentChildLinkEntity> GetItemParentChildLinkByParentFromTimestamp( Guid parent, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<ItemParentChildLinkEntity> GetItemParentChildLinkByParentUntilTimestamp( Guid parent, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        IList<ItemParentChildLinkEntity> GetItemParentChildLinkByParentOverTimestamp( Guid parent, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

    }
    public class ItemParentChildLinkByChildAndTimestampEntityIndex
    {
        public class ByTimestamp
        {
            readonly SortedWeakReferenceList<DateTime, ItemParentChildLinkEntity> _entries = new SortedWeakReferenceList<DateTime, ItemParentChildLinkEntity>( );

            public ByTimestamp( )
            {
            }

            public void Add( ItemParentChildLinkEntity entity )
            {
                if( _entries.TryGetValue(entity.Timestamp, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Timestamp, new WeakReference<ItemParentChildLinkEntity>( entity, false ) );
                }
            }

            public bool GetByTimestamp( DateTime timestamp, out ItemParentChildLinkEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( timestamp, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( timestamp );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(DateTime key, [DisallowNull] IList<ItemParentChildLinkEntity> result )
            {
                return _entries.From( key, result );
            }

            public bool GetUntil(DateTime key, [DisallowNull] IList<ItemParentChildLinkEntity> result )
            {
                return _entries.Until( key, result );
            }

            public bool GetOver(DateTime firstKey, DateTime lastKey, [DisallowNull] IList<ItemParentChildLinkEntity> result )
            {
                return _entries.Over( firstKey, lastKey, result );
            }

            public bool GetAll([DisallowNull] IList<ItemParentChildLinkEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<DateTime, ByTimestamp> _entries = new SortedListEx<DateTime, ByTimestamp>( );
        public List<ItemParentChildLinkEntity> GetItemParentChildLinkCollectionByChild( Guid child )
        {
            throw new NotImplementedException();
        }

        public ItemParentChildLinkEntity? GetItemParentChildLinkByChildAndTimestamp( Guid child, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public ItemParentChildLinkEntity? GetItemParentChildLinkByChildAtTimestamp( Guid child, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<ItemParentChildLinkEntity> GetItemParentChildLinkByChildFromTimestamp( Guid child, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<ItemParentChildLinkEntity> GetItemParentChildLinkByChildUntilTimestamp( Guid child, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        IList<ItemParentChildLinkEntity> GetItemParentChildLinkByChildOverTimestamp( Guid child, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

    }
    public class ItemParentChildLinkByTimestampEntityIndex
    {
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, ItemParentChildLinkEntity> _entries = new SortedWeakReferenceList<Guid, ItemParentChildLinkEntity>( );
            public ById( )
            {
            }

            public void Add( ItemParentChildLinkEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<ItemParentChildLinkEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out ItemParentChildLinkEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<ItemParentChildLinkEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<ItemParentChildLinkEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<ItemParentChildLinkEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<ItemParentChildLinkEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<DateTime, ById> _entries = new SortedListEx<DateTime, ById>( );

        public ItemParentChildLinkByTimestampEntityIndex( )
        {
        }

        public List<ItemParentChildLinkEntity> GetItemParentChildLinkCollectionByTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<ItemParentChildLinkEntity> GetItemParentChildLinkCollectionAtTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<ItemParentChildLinkEntity> GetItemParentChildLinkCollectionFromTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<ItemParentChildLinkEntity> GetItemParentChildLinkCollectionUntilTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        IList<ItemParentChildLinkEntity> GetItemParentChildLinkCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

    }

    public class LineInputDeviceCommandByLineInputDeviceAndTimestampEntityIndex
    {
        public class ByTimestamp
        {
            readonly SortedListEx<DateTime, ById> _entries = new SortedListEx<DateTime, ById>( );
            List<DateTime> _emptyKeys = new List<DateTime>( );

            public ByTimestamp( )
            {
            }

            void RemoveEmptyKeys( )
            {
                var emptyKeyCount = _emptyKeys.Count;
                for ( int i = 0; i < emptyKeyCount; i++ )
                {
                    _entries.Remove( _emptyKeys[ i ] );
                }
                _emptyKeys.Clear( );
            }

            public bool GetAll([DisallowNull] IList<LineInputDeviceCommandEntity> result )
            {
                foreach( var entry in _entries )
                {
                    if( entry.Value.GetAll( result ) == false )
                    {
                        _emptyKeys.Add( entry.Key );
                    }
                }
                RemoveEmptyKeys( );
                return _entries.Count > 0;
            }

        }
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, LineInputDeviceCommandEntity> _entries = new SortedWeakReferenceList<Guid, LineInputDeviceCommandEntity>( );
            public ById( )
            {
            }

            public void Add( LineInputDeviceCommandEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<LineInputDeviceCommandEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out LineInputDeviceCommandEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<LineInputDeviceCommandEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<LineInputDeviceCommandEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<LineInputDeviceCommandEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<LineInputDeviceCommandEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<Guid, ByTimestamp> _entries = new SortedListEx<Guid, ByTimestamp>( );

        public LineInputDeviceCommandByLineInputDeviceAndTimestampEntityIndex( )
        {
        }

        public List<LineInputDeviceCommandEntity> GetLineInputDeviceCommandCollectionByLineInputDevice( Guid lineInputDevice )
        {
            throw new NotImplementedException();
        }

        public List<LineInputDeviceCommandEntity> GetLineInputDeviceCommandCollectionByLineInputDeviceAndTimestamp( Guid lineInputDevice, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<LineInputDeviceCommandEntity> GetLineInputDeviceCommandCollectionByLineInputDeviceAtTimestamp( Guid lineInputDevice, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<LineInputDeviceCommandEntity> GetLineInputDeviceCommandCollectionByLineInputDeviceFromTimestamp( Guid lineInputDevice, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<LineInputDeviceCommandEntity> GetLineInputDeviceCommandCollectionByLineInputDeviceUntilTimestamp( Guid lineInputDevice, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        IList<LineInputDeviceCommandEntity> GetLineInputDeviceCommandCollectionByLineInputDeviceOverTimestamp( Guid lineInputDevice, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

    }

    public class LineInputDeviceCommandByTimestampEntityIndex
    {
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, LineInputDeviceCommandEntity> _entries = new SortedWeakReferenceList<Guid, LineInputDeviceCommandEntity>( );
            public ById( )
            {
            }

            public void Add( LineInputDeviceCommandEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<LineInputDeviceCommandEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out LineInputDeviceCommandEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<LineInputDeviceCommandEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<LineInputDeviceCommandEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<LineInputDeviceCommandEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<LineInputDeviceCommandEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<DateTime, ById> _entries = new SortedListEx<DateTime, ById>( );

        public LineInputDeviceCommandByTimestampEntityIndex( )
        {
        }

        public List<LineInputDeviceCommandEntity> GetLineInputDeviceCommandCollectionByTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<LineInputDeviceCommandEntity> GetLineInputDeviceCommandCollectionAtTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<LineInputDeviceCommandEntity> GetLineInputDeviceCommandCollectionFromTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<LineInputDeviceCommandEntity> GetLineInputDeviceCommandCollectionUntilTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        IList<LineInputDeviceCommandEntity> GetLineInputDeviceCommandCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

    }

    public class LineInputDeviceCommandByReplyEntityIndex
    {
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, LineInputDeviceCommandEntity> _entries = new SortedWeakReferenceList<Guid, LineInputDeviceCommandEntity>( );
            public ById( )
            {
            }

            public void Add( LineInputDeviceCommandEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<LineInputDeviceCommandEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out LineInputDeviceCommandEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<LineInputDeviceCommandEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<LineInputDeviceCommandEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<LineInputDeviceCommandEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<LineInputDeviceCommandEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<Guid, ById> _entries = new SortedListEx<Guid, ById>( );

        public LineInputDeviceCommandByReplyEntityIndex( )
        {
        }

        public List<LineInputDeviceCommandEntity> GetLineInputDeviceCommandCollectionByReply( Guid? reply )
        {
            throw new NotImplementedException();
        }

        public IList<LineInputDeviceCommandEntity> GetLineInputDeviceCommandCollectionByReplyIsNull(  )
        {
            throw new NotImplementedException();
        }

    }

    public class LineInputDeviceCommandByReplyIsNullEntityIndex
    {
    }

    public class LineInputDeviceCommandReplyByLineInputDeviceAndTimestampEntityIndex
    {
        public class ByTimestamp
        {
            readonly SortedListEx<DateTime, ById> _entries = new SortedListEx<DateTime, ById>( );
            List<DateTime> _emptyKeys = new List<DateTime>( );

            public ByTimestamp( )
            {
            }

            void RemoveEmptyKeys( )
            {
                var emptyKeyCount = _emptyKeys.Count;
                for ( int i = 0; i < emptyKeyCount; i++ )
                {
                    _entries.Remove( _emptyKeys[ i ] );
                }
                _emptyKeys.Clear( );
            }

            public bool GetAll([DisallowNull] IList<LineInputDeviceCommandReplyEntity> result )
            {
                foreach( var entry in _entries )
                {
                    if( entry.Value.GetAll( result ) == false )
                    {
                        _emptyKeys.Add( entry.Key );
                    }
                }
                RemoveEmptyKeys( );
                return _entries.Count > 0;
            }

        }
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, LineInputDeviceCommandReplyEntity> _entries = new SortedWeakReferenceList<Guid, LineInputDeviceCommandReplyEntity>( );
            public ById( )
            {
            }

            public void Add( LineInputDeviceCommandReplyEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<LineInputDeviceCommandReplyEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out LineInputDeviceCommandReplyEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<LineInputDeviceCommandReplyEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<LineInputDeviceCommandReplyEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<LineInputDeviceCommandReplyEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<LineInputDeviceCommandReplyEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<Guid, ByTimestamp> _entries = new SortedListEx<Guid, ByTimestamp>( );

        public LineInputDeviceCommandReplyByLineInputDeviceAndTimestampEntityIndex( )
        {
        }

        public List<LineInputDeviceCommandReplyEntity> GetLineInputDeviceCommandReplyCollectionByLineInputDevice( Guid lineInputDevice )
        {
            throw new NotImplementedException();
        }

        public List<LineInputDeviceCommandReplyEntity> GetLineInputDeviceCommandReplyCollectionByLineInputDeviceAndTimestamp( Guid lineInputDevice, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<LineInputDeviceCommandReplyEntity> GetLineInputDeviceCommandReplyCollectionByLineInputDeviceAtTimestamp( Guid lineInputDevice, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<LineInputDeviceCommandReplyEntity> GetLineInputDeviceCommandReplyCollectionByLineInputDeviceFromTimestamp( Guid lineInputDevice, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<LineInputDeviceCommandReplyEntity> GetLineInputDeviceCommandReplyCollectionByLineInputDeviceUntilTimestamp( Guid lineInputDevice, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        IList<LineInputDeviceCommandReplyEntity> GetLineInputDeviceCommandReplyCollectionByLineInputDeviceOverTimestamp( Guid lineInputDevice, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

    }

    public class LineInputDeviceCommandReplyByTimestampEntityIndex
    {
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, LineInputDeviceCommandReplyEntity> _entries = new SortedWeakReferenceList<Guid, LineInputDeviceCommandReplyEntity>( );
            public ById( )
            {
            }

            public void Add( LineInputDeviceCommandReplyEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<LineInputDeviceCommandReplyEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out LineInputDeviceCommandReplyEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<LineInputDeviceCommandReplyEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<LineInputDeviceCommandReplyEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<LineInputDeviceCommandReplyEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<LineInputDeviceCommandReplyEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<DateTime, ById> _entries = new SortedListEx<DateTime, ById>( );

        public LineInputDeviceCommandReplyByTimestampEntityIndex( )
        {
        }

        public List<LineInputDeviceCommandReplyEntity> GetLineInputDeviceCommandReplyCollectionByTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<LineInputDeviceCommandReplyEntity> GetLineInputDeviceCommandReplyCollectionAtTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<LineInputDeviceCommandReplyEntity> GetLineInputDeviceCommandReplyCollectionFromTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<LineInputDeviceCommandReplyEntity> GetLineInputDeviceCommandReplyCollectionUntilTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        IList<LineInputDeviceCommandReplyEntity> GetLineInputDeviceCommandReplyCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

    }

    public class LineInputDeviceCommandReplyByCommandEntityIndex
    {
        readonly SortedWeakReferenceList<Guid, LineInputDeviceCommandReplyEntity> _entries = new SortedWeakReferenceList<Guid, LineInputDeviceCommandReplyEntity>( );

        public LineInputDeviceCommandReplyByCommandEntityIndex( )
        {
        }

        public void Add( LineInputDeviceCommandReplyEntity entity )
        {
            if ( entity.CommandId is Guid command )
            {
                if ( _entries.TryGetValue( command, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( command, new WeakReference<LineInputDeviceCommandReplyEntity>( entity, false ) );
                }
            }
            else
            {
                throw new ArgumentException( "entity.CommandId is null.", nameof( entity ) );
            }
        }

        public bool GetByCommandId( Guid command, out LineInputDeviceCommandReplyEntity? entity )
        {
            entity = null;
            if ( _entries.TryGetValue( command, out var weakReference ) )
            {
                if ( weakReference.TryGetTarget( out entity ) == false )
                {
                    _entries.Remove( command );
                }
            }
            return _entries.Count > 0;
        }

        public bool GetFrom(Guid key, [DisallowNull] IList<LineInputDeviceCommandReplyEntity> result )
        {
            return _entries.From( key, result );
        }

        public bool GetUntil(Guid key, [DisallowNull] IList<LineInputDeviceCommandReplyEntity> result )
        {
            return _entries.Until( key, result );
        }

        public bool GetOver(Guid firstKey, Guid lastKey, [DisallowNull] IList<LineInputDeviceCommandReplyEntity> result )
        {
            return _entries.Over( firstKey, lastKey, result );
        }

        public bool GetAll([DisallowNull] IList<LineInputDeviceCommandReplyEntity> result )
        {
            return _entries.All( result );
        }

        public LineInputDeviceCommandReplyEntity? GetLineInputDeviceCommandReplyByCommand( Guid? command )
        {
            throw new NotImplementedException();
        }

        public IList<LineInputDeviceCommandReplyEntity> GetLineInputDeviceCommandReplyCollectionByCommandIsNull(  )
        {
            throw new NotImplementedException();
        }

    }
    public class LineInputDeviceCommandReplyByCommandIsNullEntityIndex
    {
    }

    public class LineInputDeviceConfigurationByLineInputDeviceAndTimestampEntityIndex
    {
        public class ByTimestamp
        {
            readonly SortedWeakReferenceList<DateTime, LineInputDeviceConfigurationEntity> _entries = new SortedWeakReferenceList<DateTime, LineInputDeviceConfigurationEntity>( );

            public ByTimestamp( )
            {
            }

            public void Add( LineInputDeviceConfigurationEntity entity )
            {
                if( _entries.TryGetValue(entity.Timestamp, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Timestamp, new WeakReference<LineInputDeviceConfigurationEntity>( entity, false ) );
                }
            }

            public bool GetByTimestamp( DateTime timestamp, out LineInputDeviceConfigurationEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( timestamp, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( timestamp );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(DateTime key, [DisallowNull] IList<LineInputDeviceConfigurationEntity> result )
            {
                return _entries.From( key, result );
            }

            public bool GetUntil(DateTime key, [DisallowNull] IList<LineInputDeviceConfigurationEntity> result )
            {
                return _entries.Until( key, result );
            }

            public bool GetOver(DateTime firstKey, DateTime lastKey, [DisallowNull] IList<LineInputDeviceConfigurationEntity> result )
            {
                return _entries.Over( firstKey, lastKey, result );
            }

            public bool GetAll([DisallowNull] IList<LineInputDeviceConfigurationEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<DateTime, ByTimestamp> _entries = new SortedListEx<DateTime, ByTimestamp>( );
        public List<LineInputDeviceConfigurationEntity> GetLineInputDeviceConfigurationCollectionByLineInputDevice( Guid lineInputDevice )
        {
            throw new NotImplementedException();
        }

        public LineInputDeviceConfigurationEntity? GetLineInputDeviceConfigurationByLineInputDeviceAndTimestamp( Guid lineInputDevice, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public LineInputDeviceConfigurationEntity? GetLineInputDeviceConfigurationByLineInputDeviceAtTimestamp( Guid lineInputDevice, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<LineInputDeviceConfigurationEntity> GetLineInputDeviceConfigurationByLineInputDeviceFromTimestamp( Guid lineInputDevice, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<LineInputDeviceConfigurationEntity> GetLineInputDeviceConfigurationByLineInputDeviceUntilTimestamp( Guid lineInputDevice, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        IList<LineInputDeviceConfigurationEntity> GetLineInputDeviceConfigurationByLineInputDeviceOverTimestamp( Guid lineInputDevice, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

    }
    public class LineInputDeviceConfigurationByTimestampEntityIndex
    {
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, LineInputDeviceConfigurationEntity> _entries = new SortedWeakReferenceList<Guid, LineInputDeviceConfigurationEntity>( );
            public ById( )
            {
            }

            public void Add( LineInputDeviceConfigurationEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<LineInputDeviceConfigurationEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out LineInputDeviceConfigurationEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<LineInputDeviceConfigurationEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<LineInputDeviceConfigurationEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<LineInputDeviceConfigurationEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<LineInputDeviceConfigurationEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<DateTime, ById> _entries = new SortedListEx<DateTime, ById>( );

        public LineInputDeviceConfigurationByTimestampEntityIndex( )
        {
        }

        public List<LineInputDeviceConfigurationEntity> GetLineInputDeviceConfigurationCollectionByTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<LineInputDeviceConfigurationEntity> GetLineInputDeviceConfigurationCollectionAtTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<LineInputDeviceConfigurationEntity> GetLineInputDeviceConfigurationCollectionFromTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<LineInputDeviceConfigurationEntity> GetLineInputDeviceConfigurationCollectionUntilTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        IList<LineInputDeviceConfigurationEntity> GetLineInputDeviceConfigurationCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

    }

    public class LineInputMessageRoutingByLineInputDeviceAndTypeEntityIndex
    {
        public class ByType
        {
            readonly SortedWeakReferenceList<string, LineInputMessageRoutingEntity> _entries = new SortedWeakReferenceList<string, LineInputMessageRoutingEntity>( );

            public ByType( )
            {
            }

            public void Add( LineInputMessageRoutingEntity entity )
            {
                if( _entries.TryGetValue(entity.Type, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Type, new WeakReference<LineInputMessageRoutingEntity>( entity, false ) );
                }
            }

            public bool GetByType( string type, out LineInputMessageRoutingEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( type, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( type );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(string key, [DisallowNull] IList<LineInputMessageRoutingEntity> result )
            {
                return _entries.From( key, result );
            }

            public bool GetUntil(string key, [DisallowNull] IList<LineInputMessageRoutingEntity> result )
            {
                return _entries.Until( key, result );
            }

            public bool GetOver(string firstKey, string lastKey, [DisallowNull] IList<LineInputMessageRoutingEntity> result )
            {
                return _entries.Over( firstKey, lastKey, result );
            }

            public bool GetAll([DisallowNull] IList<LineInputMessageRoutingEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<string, ByType> _entries = new SortedListEx<string, ByType>( );
        public List<LineInputMessageRoutingEntity> GetLineInputMessageRoutingCollectionByLineInputDevice( Guid lineInputDevice )
        {
            throw new NotImplementedException();
        }

        public LineInputMessageRoutingEntity? GetLineInputMessageRoutingByLineInputDeviceAndType( Guid lineInputDevice, string type )
        {
            throw new NotImplementedException();
        }

    }
    public class LineInputMessageRoutingDestinationByRoutingAndListenerEntityIndex
    {
        public class ByListener
        {
            readonly SortedWeakReferenceList<Guid, LineInputMessageRoutingDestinationEntity> _entries = new SortedWeakReferenceList<Guid, LineInputMessageRoutingDestinationEntity>( );

            public ByListener( )
            {
            }

            public void Add( LineInputMessageRoutingDestinationEntity entity )
            {
                if ( entity.ListenerId is Guid listener )
                {
                    if ( _entries.TryGetValue( listener, out var weakReference ) )
                    {
                        weakReference.SetTarget( entity );
                    }
                    else
                    {
                        _entries.Add( listener, new WeakReference<LineInputMessageRoutingDestinationEntity>( entity, false ) );
                    }
                }
                else
                {
                    throw new ArgumentException( "entity.ListenerId is null.", nameof( entity ) );
                }
            }

            public bool GetByListenerId( Guid listener, out LineInputMessageRoutingDestinationEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( listener, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( listener );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid key, [DisallowNull] IList<LineInputMessageRoutingDestinationEntity> result )
            {
                return _entries.From( key, result );
            }

            public bool GetUntil(Guid key, [DisallowNull] IList<LineInputMessageRoutingDestinationEntity> result )
            {
                return _entries.Until( key, result );
            }

            public bool GetOver(Guid firstKey, Guid lastKey, [DisallowNull] IList<LineInputMessageRoutingDestinationEntity> result )
            {
                return _entries.Over( firstKey, lastKey, result );
            }

            public bool GetAll([DisallowNull] IList<LineInputMessageRoutingDestinationEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<Guid, ByListener> _entries = new SortedListEx<Guid, ByListener>( );
        public List<LineInputMessageRoutingDestinationEntity> GetLineInputMessageRoutingDestinationCollectionByRouting( Guid routing )
        {
            throw new NotImplementedException();
        }

        public IList<LineInputMessageRoutingDestinationEntity> GetLineInputMessageRoutingDestinationCollectionByRouting(  )
        {
            throw new NotImplementedException();
        }

        public LineInputMessageRoutingDestinationEntity? GetLineInputMessageRoutingDestinationByRoutingAndListener( Guid routing, Guid? listener )
        {
            throw new NotImplementedException();
        }

        public IList<LineInputMessageRoutingDestinationEntity> GetLineInputMessageRoutingDestinationCollectionByRoutingAndListenerIsNull( Guid routing )
        {
            throw new NotImplementedException();
        }

    }
    public class LineInputMessageRoutingDestinationByRoutingAndListenerIsNullEntityIndex
    {
    }

    public class LineInputMessageRoutingDestinationByListenerEntityIndex
    {
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, LineInputMessageRoutingDestinationEntity> _entries = new SortedWeakReferenceList<Guid, LineInputMessageRoutingDestinationEntity>( );
            public ById( )
            {
            }

            public void Add( LineInputMessageRoutingDestinationEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<LineInputMessageRoutingDestinationEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out LineInputMessageRoutingDestinationEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<LineInputMessageRoutingDestinationEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<LineInputMessageRoutingDestinationEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<LineInputMessageRoutingDestinationEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<LineInputMessageRoutingDestinationEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<Guid, ById> _entries = new SortedListEx<Guid, ById>( );

        public LineInputMessageRoutingDestinationByListenerEntityIndex( )
        {
        }

        public List<LineInputMessageRoutingDestinationEntity> GetLineInputMessageRoutingDestinationCollectionByListener( Guid? listener )
        {
            throw new NotImplementedException();
        }

        public IList<LineInputMessageRoutingDestinationEntity> GetLineInputMessageRoutingDestinationCollectionByListenerIsNull(  )
        {
            throw new NotImplementedException();
        }

    }

    public class LineInputMessageRoutingDestinationByListenerIsNullEntityIndex
    {
    }

    public class LineInputWhiteListEntryByLineInputDeviceHostNameAndPortEntityIndex
    {
        public class ByHostName
        {
            readonly SortedListEx<string, ByPort> _entries = new SortedListEx<string, ByPort>( );
            List<string> _emptyKeys = new List<string>( );

            public ByHostName( )
            {
            }

            void RemoveEmptyKeys( )
            {
                var emptyKeyCount = _emptyKeys.Count;
                for ( int i = 0; i < emptyKeyCount; i++ )
                {
                    _entries.Remove( _emptyKeys[ i ] );
                }
                _emptyKeys.Clear( );
            }

            public bool GetAll([DisallowNull] IList<LineInputWhiteListEntryEntity> result )
            {
                foreach( var entry in _entries )
                {
                    if( entry.Value.GetAll( result ) == false )
                    {
                        _emptyKeys.Add( entry.Key );
                    }
                }
                RemoveEmptyKeys( );
                return _entries.Count > 0;
            }

        }
        public class ByPort
        {
            readonly SortedWeakReferenceList<int, LineInputWhiteListEntryEntity> _entries = new SortedWeakReferenceList<int, LineInputWhiteListEntryEntity>( );

            public ByPort( )
            {
            }

            public void Add( LineInputWhiteListEntryEntity entity )
            {
                if( _entries.TryGetValue(entity.Port, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Port, new WeakReference<LineInputWhiteListEntryEntity>( entity, false ) );
                }
            }

            public bool GetByPort( int port, out LineInputWhiteListEntryEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( port, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( port );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(int key, [DisallowNull] IList<LineInputWhiteListEntryEntity> result )
            {
                return _entries.From( key, result );
            }

            public bool GetUntil(int key, [DisallowNull] IList<LineInputWhiteListEntryEntity> result )
            {
                return _entries.Until( key, result );
            }

            public bool GetOver(int firstKey, int lastKey, [DisallowNull] IList<LineInputWhiteListEntryEntity> result )
            {
                return _entries.Over( firstKey, lastKey, result );
            }

            public bool GetAll([DisallowNull] IList<LineInputWhiteListEntryEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<int, ByHostName> _entries = new SortedListEx<int, ByHostName>( );
        public List<LineInputWhiteListEntryEntity> GetLineInputWhiteListEntryCollectionByLineInputDevice( Guid lineInputDevice )
        {
            throw new NotImplementedException();
        }

        public List<LineInputWhiteListEntryEntity> GetLineInputWhiteListEntryCollectionByLineInputDeviceAndHostName( Guid lineInputDevice, string hostName )
        {
            throw new NotImplementedException();
        }

        public LineInputWhiteListEntryEntity? GetLineInputWhiteListEntryByLineInputDeviceHostNameAndPort( Guid lineInputDevice, string hostName, int port )
        {
            throw new NotImplementedException();
        }

        public IList<LineInputWhiteListEntryEntity> GetLineInputWhiteListEntryByLineInputDeviceHostNameFromPort( Guid lineInputDevice, string hostName, int port )
        {
            throw new NotImplementedException();
        }

        public IList<LineInputWhiteListEntryEntity> GetLineInputWhiteListEntryByLineInputDeviceHostNameUntilPort( Guid lineInputDevice, string hostName, int port )
        {
            throw new NotImplementedException();
        }

        IList<LineInputWhiteListEntryEntity> GetLineInputWhiteListEntryByLineInputDeviceHostNameOverPort( Guid lineInputDevice, string hostName, int fromPort, int untilPort )
        {
            throw new NotImplementedException();
        }

    }
    public class LogApplicationByNameEntityIndex
    {
        readonly SortedWeakReferenceList<string, LogApplicationEntity> _entries = new SortedWeakReferenceList<string, LogApplicationEntity>( );

        public LogApplicationByNameEntityIndex( )
        {
        }

        public void Add( LogApplicationEntity entity )
        {
            if( _entries.TryGetValue(entity.Name, out var weakReference ) )
            {
                weakReference.SetTarget( entity );
            }
            else
            {
                _entries.Add( entity.Name, new WeakReference<LogApplicationEntity>( entity, false ) );
            }
        }

        public bool GetByName( string name, out LogApplicationEntity? entity )
        {
            entity = null;
            if ( _entries.TryGetValue( name, out var weakReference ) )
            {
                if ( weakReference.TryGetTarget( out entity ) == false )
                {
                    _entries.Remove( name );
                }
            }
            return _entries.Count > 0;
        }

        public bool GetFrom(string key, [DisallowNull] IList<LogApplicationEntity> result )
        {
            return _entries.From( key, result );
        }

        public bool GetUntil(string key, [DisallowNull] IList<LogApplicationEntity> result )
        {
            return _entries.Until( key, result );
        }

        public bool GetOver(string firstKey, string lastKey, [DisallowNull] IList<LogApplicationEntity> result )
        {
            return _entries.Over( firstKey, lastKey, result );
        }

        public bool GetAll([DisallowNull] IList<LogApplicationEntity> result )
        {
            return _entries.All( result );
        }

        public LogApplicationEntity? GetLogApplicationByName( string name )
        {
            throw new NotImplementedException();
        }

    }
    public class LogApplicationConfigurationByApplicationAndTimestampEntityIndex
    {
        public class ByTimestamp
        {
            readonly SortedWeakReferenceList<DateTime, LogApplicationConfigurationEntity> _entries = new SortedWeakReferenceList<DateTime, LogApplicationConfigurationEntity>( );

            public ByTimestamp( )
            {
            }

            public void Add( LogApplicationConfigurationEntity entity )
            {
                if( _entries.TryGetValue(entity.Timestamp, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Timestamp, new WeakReference<LogApplicationConfigurationEntity>( entity, false ) );
                }
            }

            public bool GetByTimestamp( DateTime timestamp, out LogApplicationConfigurationEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( timestamp, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( timestamp );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(DateTime key, [DisallowNull] IList<LogApplicationConfigurationEntity> result )
            {
                return _entries.From( key, result );
            }

            public bool GetUntil(DateTime key, [DisallowNull] IList<LogApplicationConfigurationEntity> result )
            {
                return _entries.Until( key, result );
            }

            public bool GetOver(DateTime firstKey, DateTime lastKey, [DisallowNull] IList<LogApplicationConfigurationEntity> result )
            {
                return _entries.Over( firstKey, lastKey, result );
            }

            public bool GetAll([DisallowNull] IList<LogApplicationConfigurationEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<DateTime, ByTimestamp> _entries = new SortedListEx<DateTime, ByTimestamp>( );
        public List<LogApplicationConfigurationEntity> GetLogApplicationConfigurationCollectionByApplication( Guid application )
        {
            throw new NotImplementedException();
        }

        public LogApplicationConfigurationEntity? GetLogApplicationConfigurationByApplicationAndTimestamp( Guid application, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public LogApplicationConfigurationEntity? GetLogApplicationConfigurationByApplicationAtTimestamp( Guid application, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<LogApplicationConfigurationEntity> GetLogApplicationConfigurationByApplicationFromTimestamp( Guid application, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<LogApplicationConfigurationEntity> GetLogApplicationConfigurationByApplicationUntilTimestamp( Guid application, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        IList<LogApplicationConfigurationEntity> GetLogApplicationConfigurationByApplicationOverTimestamp( Guid application, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

    }
    public class LogApplicationConfigurationByTimestampEntityIndex
    {
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, LogApplicationConfigurationEntity> _entries = new SortedWeakReferenceList<Guid, LogApplicationConfigurationEntity>( );
            public ById( )
            {
            }

            public void Add( LogApplicationConfigurationEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<LogApplicationConfigurationEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out LogApplicationConfigurationEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<LogApplicationConfigurationEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<LogApplicationConfigurationEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<LogApplicationConfigurationEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<LogApplicationConfigurationEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<DateTime, ById> _entries = new SortedListEx<DateTime, ById>( );

        public LogApplicationConfigurationByTimestampEntityIndex( )
        {
        }

        public List<LogApplicationConfigurationEntity> GetLogApplicationConfigurationCollectionByTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<LogApplicationConfigurationEntity> GetLogApplicationConfigurationCollectionAtTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<LogApplicationConfigurationEntity> GetLogApplicationConfigurationCollectionFromTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<LogApplicationConfigurationEntity> GetLogApplicationConfigurationCollectionUntilTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        IList<LogApplicationConfigurationEntity> GetLogApplicationConfigurationCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

    }

    public class LogHostByComputerNameEntityIndex
    {
        readonly SortedWeakReferenceList<string, LogHostEntity> _entries = new SortedWeakReferenceList<string, LogHostEntity>( );

        public LogHostByComputerNameEntityIndex( )
        {
        }

        public void Add( LogHostEntity entity )
        {
            if( _entries.TryGetValue(entity.ComputerName, out var weakReference ) )
            {
                weakReference.SetTarget( entity );
            }
            else
            {
                _entries.Add( entity.ComputerName, new WeakReference<LogHostEntity>( entity, false ) );
            }
        }

        public bool GetByComputerName( string computerName, out LogHostEntity? entity )
        {
            entity = null;
            if ( _entries.TryGetValue( computerName, out var weakReference ) )
            {
                if ( weakReference.TryGetTarget( out entity ) == false )
                {
                    _entries.Remove( computerName );
                }
            }
            return _entries.Count > 0;
        }

        public bool GetFrom(string key, [DisallowNull] IList<LogHostEntity> result )
        {
            return _entries.From( key, result );
        }

        public bool GetUntil(string key, [DisallowNull] IList<LogHostEntity> result )
        {
            return _entries.Until( key, result );
        }

        public bool GetOver(string firstKey, string lastKey, [DisallowNull] IList<LogHostEntity> result )
        {
            return _entries.Over( firstKey, lastKey, result );
        }

        public bool GetAll([DisallowNull] IList<LogHostEntity> result )
        {
            return _entries.All( result );
        }

        public LogHostEntity? GetLogHostByComputerName( string computerName )
        {
            throw new NotImplementedException();
        }

    }
    public class LogHostConfigurationByHostAndTimestampEntityIndex
    {
        public class ByTimestamp
        {
            readonly SortedWeakReferenceList<DateTime, LogHostConfigurationEntity> _entries = new SortedWeakReferenceList<DateTime, LogHostConfigurationEntity>( );

            public ByTimestamp( )
            {
            }

            public void Add( LogHostConfigurationEntity entity )
            {
                if( _entries.TryGetValue(entity.Timestamp, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Timestamp, new WeakReference<LogHostConfigurationEntity>( entity, false ) );
                }
            }

            public bool GetByTimestamp( DateTime timestamp, out LogHostConfigurationEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( timestamp, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( timestamp );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(DateTime key, [DisallowNull] IList<LogHostConfigurationEntity> result )
            {
                return _entries.From( key, result );
            }

            public bool GetUntil(DateTime key, [DisallowNull] IList<LogHostConfigurationEntity> result )
            {
                return _entries.Until( key, result );
            }

            public bool GetOver(DateTime firstKey, DateTime lastKey, [DisallowNull] IList<LogHostConfigurationEntity> result )
            {
                return _entries.Over( firstKey, lastKey, result );
            }

            public bool GetAll([DisallowNull] IList<LogHostConfigurationEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<DateTime, ByTimestamp> _entries = new SortedListEx<DateTime, ByTimestamp>( );
        public List<LogHostConfigurationEntity> GetLogHostConfigurationCollectionByHost( Guid host )
        {
            throw new NotImplementedException();
        }

        public LogHostConfigurationEntity? GetLogHostConfigurationByHostAndTimestamp( Guid host, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public LogHostConfigurationEntity? GetLogHostConfigurationByHostAtTimestamp( Guid host, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<LogHostConfigurationEntity> GetLogHostConfigurationByHostFromTimestamp( Guid host, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<LogHostConfigurationEntity> GetLogHostConfigurationByHostUntilTimestamp( Guid host, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        IList<LogHostConfigurationEntity> GetLogHostConfigurationByHostOverTimestamp( Guid host, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

    }
    public class LogHostConfigurationByTimestampEntityIndex
    {
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, LogHostConfigurationEntity> _entries = new SortedWeakReferenceList<Guid, LogHostConfigurationEntity>( );
            public ById( )
            {
            }

            public void Add( LogHostConfigurationEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<LogHostConfigurationEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out LogHostConfigurationEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<LogHostConfigurationEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<LogHostConfigurationEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<LogHostConfigurationEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<LogHostConfigurationEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<DateTime, ById> _entries = new SortedListEx<DateTime, ById>( );

        public LogHostConfigurationByTimestampEntityIndex( )
        {
        }

        public List<LogHostConfigurationEntity> GetLogHostConfigurationCollectionByTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<LogHostConfigurationEntity> GetLogHostConfigurationCollectionAtTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<LogHostConfigurationEntity> GetLogHostConfigurationCollectionFromTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<LogHostConfigurationEntity> GetLogHostConfigurationCollectionUntilTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        IList<LogHostConfigurationEntity> GetLogHostConfigurationCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

    }

    public class LogLocationByFileNameAndLineNumberEntityIndex
    {
        public class ByLineNumber
        {
            readonly SortedWeakReferenceList<int, LogLocationEntity> _entries = new SortedWeakReferenceList<int, LogLocationEntity>( );

            public ByLineNumber( )
            {
            }

            public void Add( LogLocationEntity entity )
            {
                if( _entries.TryGetValue(entity.LineNumber, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.LineNumber, new WeakReference<LogLocationEntity>( entity, false ) );
                }
            }

            public bool GetByLineNumber( int lineNumber, out LogLocationEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( lineNumber, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( lineNumber );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(int key, [DisallowNull] IList<LogLocationEntity> result )
            {
                return _entries.From( key, result );
            }

            public bool GetUntil(int key, [DisallowNull] IList<LogLocationEntity> result )
            {
                return _entries.Until( key, result );
            }

            public bool GetOver(int firstKey, int lastKey, [DisallowNull] IList<LogLocationEntity> result )
            {
                return _entries.Over( firstKey, lastKey, result );
            }

            public bool GetAll([DisallowNull] IList<LogLocationEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<int, ByLineNumber> _entries = new SortedListEx<int, ByLineNumber>( );
        public List<LogLocationEntity> GetLogLocationCollectionByFileName( string fileName )
        {
            throw new NotImplementedException();
        }

        public LogLocationEntity? GetLogLocationByFileNameAndLineNumber( string fileName, int lineNumber )
        {
            throw new NotImplementedException();
        }

        public IList<LogLocationEntity> GetLogLocationByFileNameFromLineNumber( string fileName, int lineNumber )
        {
            throw new NotImplementedException();
        }

        public IList<LogLocationEntity> GetLogLocationByFileNameUntilLineNumber( string fileName, int lineNumber )
        {
            throw new NotImplementedException();
        }

        IList<LogLocationEntity> GetLogLocationByFileNameOverLineNumber( string fileName, int fromLineNumber, int untilLineNumber )
        {
            throw new NotImplementedException();
        }

    }
    public class LogProcessByApplicationAndStartedEntityIndex
    {
        public class ByStarted
        {
            readonly SortedListEx<DateTime, ById> _entries = new SortedListEx<DateTime, ById>( );
            List<DateTime> _emptyKeys = new List<DateTime>( );

            public ByStarted( )
            {
            }

            void RemoveEmptyKeys( )
            {
                var emptyKeyCount = _emptyKeys.Count;
                for ( int i = 0; i < emptyKeyCount; i++ )
                {
                    _entries.Remove( _emptyKeys[ i ] );
                }
                _emptyKeys.Clear( );
            }

            public bool GetAll([DisallowNull] IList<LogProcessEntity> result )
            {
                foreach( var entry in _entries )
                {
                    if( entry.Value.GetAll( result ) == false )
                    {
                        _emptyKeys.Add( entry.Key );
                    }
                }
                RemoveEmptyKeys( );
                return _entries.Count > 0;
            }

        }
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, LogProcessEntity> _entries = new SortedWeakReferenceList<Guid, LogProcessEntity>( );
            public ById( )
            {
            }

            public void Add( LogProcessEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<LogProcessEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out LogProcessEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<LogProcessEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<LogProcessEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<LogProcessEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<LogProcessEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<Guid, ByStarted> _entries = new SortedListEx<Guid, ByStarted>( );

        public LogProcessByApplicationAndStartedEntityIndex( )
        {
        }

        public List<LogProcessEntity> GetLogProcessCollectionByApplication( Guid application )
        {
            throw new NotImplementedException();
        }

        public List<LogProcessEntity> GetLogProcessCollectionByApplicationAndStarted( Guid application, DateTime started )
        {
            throw new NotImplementedException();
        }

        public IList<LogProcessEntity> GetLogProcessCollectionByApplicationAtStarted( Guid application, DateTime started )
        {
            throw new NotImplementedException();
        }

        public IList<LogProcessEntity> GetLogProcessCollectionByApplicationFromStarted( Guid application, DateTime started )
        {
            throw new NotImplementedException();
        }

        public IList<LogProcessEntity> GetLogProcessCollectionByApplicationUntilStarted( Guid application, DateTime started )
        {
            throw new NotImplementedException();
        }

        IList<LogProcessEntity> GetLogProcessCollectionByApplicationOverStarted( Guid application, DateTime fromStarted, DateTime untilStarted )
        {
            throw new NotImplementedException();
        }

    }

    public class LogProcessByHostAndStartedEntityIndex
    {
        public class ByStarted
        {
            readonly SortedListEx<DateTime, ById> _entries = new SortedListEx<DateTime, ById>( );
            List<DateTime> _emptyKeys = new List<DateTime>( );

            public ByStarted( )
            {
            }

            void RemoveEmptyKeys( )
            {
                var emptyKeyCount = _emptyKeys.Count;
                for ( int i = 0; i < emptyKeyCount; i++ )
                {
                    _entries.Remove( _emptyKeys[ i ] );
                }
                _emptyKeys.Clear( );
            }

            public bool GetAll([DisallowNull] IList<LogProcessEntity> result )
            {
                foreach( var entry in _entries )
                {
                    if( entry.Value.GetAll( result ) == false )
                    {
                        _emptyKeys.Add( entry.Key );
                    }
                }
                RemoveEmptyKeys( );
                return _entries.Count > 0;
            }

        }
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, LogProcessEntity> _entries = new SortedWeakReferenceList<Guid, LogProcessEntity>( );
            public ById( )
            {
            }

            public void Add( LogProcessEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<LogProcessEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out LogProcessEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<LogProcessEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<LogProcessEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<LogProcessEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<LogProcessEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<Guid, ByStarted> _entries = new SortedListEx<Guid, ByStarted>( );

        public LogProcessByHostAndStartedEntityIndex( )
        {
        }

        public List<LogProcessEntity> GetLogProcessCollectionByHost( Guid? host )
        {
            throw new NotImplementedException();
        }

        public IList<LogProcessEntity> GetLogProcessCollectionByHostIsNull(  )
        {
            throw new NotImplementedException();
        }

        public List<LogProcessEntity> GetLogProcessCollectionByHostAndStarted( Guid? host, DateTime started )
        {
            throw new NotImplementedException();
        }

        public IList<LogProcessEntity> GetLogProcessCollectionByHostIsNullAndStarted( DateTime started )
        {
            throw new NotImplementedException();
        }

        public IList<LogProcessEntity> GetLogProcessCollectionByHostAtStarted( Guid? host, DateTime started )
        {
            throw new NotImplementedException();
        }

        public IList<LogProcessEntity> GetLogProcessCollectionByHostFromStarted( Guid? host, DateTime started )
        {
            throw new NotImplementedException();
        }

        public IList<LogProcessEntity> GetLogProcessCollectionByHostUntilStarted( Guid? host, DateTime started )
        {
            throw new NotImplementedException();
        }

        IList<LogProcessEntity> GetLogProcessCollectionByHostOverStarted( Guid host, DateTime fromStarted, DateTime untilStarted )
        {
            throw new NotImplementedException();
        }

    }

    public class LogProcessByHostIsNullAndStartedEntityIndex
    {
    }

    public class LogProcessByStartedEntityIndex
    {
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, LogProcessEntity> _entries = new SortedWeakReferenceList<Guid, LogProcessEntity>( );
            public ById( )
            {
            }

            public void Add( LogProcessEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<LogProcessEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out LogProcessEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<LogProcessEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<LogProcessEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<LogProcessEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<LogProcessEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<DateTime, ById> _entries = new SortedListEx<DateTime, ById>( );

        public LogProcessByStartedEntityIndex( )
        {
        }

        public List<LogProcessEntity> GetLogProcessCollectionByStarted( DateTime started )
        {
            throw new NotImplementedException();
        }

        public IList<LogProcessEntity> GetLogProcessCollectionAtStarted( DateTime started )
        {
            throw new NotImplementedException();
        }

        public IList<LogProcessEntity> GetLogProcessCollectionFromStarted( DateTime started )
        {
            throw new NotImplementedException();
        }

        public IList<LogProcessEntity> GetLogProcessCollectionUntilStarted( DateTime started )
        {
            throw new NotImplementedException();
        }

        IList<LogProcessEntity> GetLogProcessCollectionOverStarted( DateTime fromStarted, DateTime untilStarted )
        {
            throw new NotImplementedException();
        }

    }

    public class LogRecordByThreadAndTimestampEntityIndex
    {
        public class ByTimestamp
        {
            readonly SortedListEx<DateTime, ById> _entries = new SortedListEx<DateTime, ById>( );
            List<DateTime> _emptyKeys = new List<DateTime>( );

            public ByTimestamp( )
            {
            }

            void RemoveEmptyKeys( )
            {
                var emptyKeyCount = _emptyKeys.Count;
                for ( int i = 0; i < emptyKeyCount; i++ )
                {
                    _entries.Remove( _emptyKeys[ i ] );
                }
                _emptyKeys.Clear( );
            }

            public bool GetAll([DisallowNull] IList<LogRecordEntity> result )
            {
                foreach( var entry in _entries )
                {
                    if( entry.Value.GetAll( result ) == false )
                    {
                        _emptyKeys.Add( entry.Key );
                    }
                }
                RemoveEmptyKeys( );
                return _entries.Count > 0;
            }

        }
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, LogRecordEntity> _entries = new SortedWeakReferenceList<Guid, LogRecordEntity>( );
            public ById( )
            {
            }

            public void Add( LogRecordEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<LogRecordEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out LogRecordEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<LogRecordEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<LogRecordEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<LogRecordEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<LogRecordEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<Guid, ByTimestamp> _entries = new SortedListEx<Guid, ByTimestamp>( );

        public LogRecordByThreadAndTimestampEntityIndex( )
        {
        }

        public List<LogRecordEntity> GetLogRecordCollectionByThread( Guid thread )
        {
            throw new NotImplementedException();
        }

        public List<LogRecordEntity> GetLogRecordCollectionByThreadAndTimestamp( Guid thread, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<LogRecordEntity> GetLogRecordCollectionByThreadAtTimestamp( Guid thread, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<LogRecordEntity> GetLogRecordCollectionByThreadFromTimestamp( Guid thread, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<LogRecordEntity> GetLogRecordCollectionByThreadUntilTimestamp( Guid thread, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        IList<LogRecordEntity> GetLogRecordCollectionByThreadOverTimestamp( Guid thread, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

    }

    public class LogRecordByTimestampEntityIndex
    {
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, LogRecordEntity> _entries = new SortedWeakReferenceList<Guid, LogRecordEntity>( );
            public ById( )
            {
            }

            public void Add( LogRecordEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<LogRecordEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out LogRecordEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<LogRecordEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<LogRecordEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<LogRecordEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<LogRecordEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<DateTime, ById> _entries = new SortedListEx<DateTime, ById>( );

        public LogRecordByTimestampEntityIndex( )
        {
        }

        public List<LogRecordEntity> GetLogRecordCollectionByTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<LogRecordEntity> GetLogRecordCollectionAtTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<LogRecordEntity> GetLogRecordCollectionFromTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<LogRecordEntity> GetLogRecordCollectionUntilTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        IList<LogRecordEntity> GetLogRecordCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

    }

    public class LogRecordByLocationEntityIndex
    {
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, LogRecordEntity> _entries = new SortedWeakReferenceList<Guid, LogRecordEntity>( );
            public ById( )
            {
            }

            public void Add( LogRecordEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<LogRecordEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out LogRecordEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<LogRecordEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<LogRecordEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<LogRecordEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<LogRecordEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<Guid, ById> _entries = new SortedListEx<Guid, ById>( );

        public LogRecordByLocationEntityIndex( )
        {
        }

        public List<LogRecordEntity> GetLogRecordCollectionByLocation( Guid location )
        {
            throw new NotImplementedException();
        }

    }

    public class LogThreadByProcessAndStartedEntityIndex
    {
        public class ByStarted
        {
            readonly SortedListEx<DateTime, ById> _entries = new SortedListEx<DateTime, ById>( );
            List<DateTime> _emptyKeys = new List<DateTime>( );

            public ByStarted( )
            {
            }

            void RemoveEmptyKeys( )
            {
                var emptyKeyCount = _emptyKeys.Count;
                for ( int i = 0; i < emptyKeyCount; i++ )
                {
                    _entries.Remove( _emptyKeys[ i ] );
                }
                _emptyKeys.Clear( );
            }

            public bool GetAll([DisallowNull] IList<LogThreadEntity> result )
            {
                foreach( var entry in _entries )
                {
                    if( entry.Value.GetAll( result ) == false )
                    {
                        _emptyKeys.Add( entry.Key );
                    }
                }
                RemoveEmptyKeys( );
                return _entries.Count > 0;
            }

        }
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, LogThreadEntity> _entries = new SortedWeakReferenceList<Guid, LogThreadEntity>( );
            public ById( )
            {
            }

            public void Add( LogThreadEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<LogThreadEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out LogThreadEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<LogThreadEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<LogThreadEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<LogThreadEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<LogThreadEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<Guid, ByStarted> _entries = new SortedListEx<Guid, ByStarted>( );

        public LogThreadByProcessAndStartedEntityIndex( )
        {
        }

        public List<LogThreadEntity> GetLogThreadCollectionByProcess( Guid process )
        {
            throw new NotImplementedException();
        }

        public List<LogThreadEntity> GetLogThreadCollectionByProcessAndStarted( Guid process, DateTime started )
        {
            throw new NotImplementedException();
        }

        public IList<LogThreadEntity> GetLogThreadCollectionByProcessAtStarted( Guid process, DateTime started )
        {
            throw new NotImplementedException();
        }

        public IList<LogThreadEntity> GetLogThreadCollectionByProcessFromStarted( Guid process, DateTime started )
        {
            throw new NotImplementedException();
        }

        public IList<LogThreadEntity> GetLogThreadCollectionByProcessUntilStarted( Guid process, DateTime started )
        {
            throw new NotImplementedException();
        }

        IList<LogThreadEntity> GetLogThreadCollectionByProcessOverStarted( Guid process, DateTime fromStarted, DateTime untilStarted )
        {
            throw new NotImplementedException();
        }

    }

    public class LogThreadByStartedEntityIndex
    {
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, LogThreadEntity> _entries = new SortedWeakReferenceList<Guid, LogThreadEntity>( );
            public ById( )
            {
            }

            public void Add( LogThreadEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<LogThreadEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out LogThreadEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<LogThreadEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<LogThreadEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<LogThreadEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<LogThreadEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<DateTime, ById> _entries = new SortedListEx<DateTime, ById>( );

        public LogThreadByStartedEntityIndex( )
        {
        }

        public List<LogThreadEntity> GetLogThreadCollectionByStarted( DateTime started )
        {
            throw new NotImplementedException();
        }

        public IList<LogThreadEntity> GetLogThreadCollectionAtStarted( DateTime started )
        {
            throw new NotImplementedException();
        }

        public IList<LogThreadEntity> GetLogThreadCollectionFromStarted( DateTime started )
        {
            throw new NotImplementedException();
        }

        public IList<LogThreadEntity> GetLogThreadCollectionUntilStarted( DateTime started )
        {
            throw new NotImplementedException();
        }

        IList<LogThreadEntity> GetLogThreadCollectionOverStarted( DateTime fromStarted, DateTime untilStarted )
        {
            throw new NotImplementedException();
        }

    }

    public class LogTraceEntryByThreadAndEnteredEntityIndex
    {
        public class ByEntered
        {
            readonly SortedListEx<DateTime, ById> _entries = new SortedListEx<DateTime, ById>( );
            List<DateTime> _emptyKeys = new List<DateTime>( );

            public ByEntered( )
            {
            }

            void RemoveEmptyKeys( )
            {
                var emptyKeyCount = _emptyKeys.Count;
                for ( int i = 0; i < emptyKeyCount; i++ )
                {
                    _entries.Remove( _emptyKeys[ i ] );
                }
                _emptyKeys.Clear( );
            }

            public bool GetAll([DisallowNull] IList<LogTraceEntryEntity> result )
            {
                foreach( var entry in _entries )
                {
                    if( entry.Value.GetAll( result ) == false )
                    {
                        _emptyKeys.Add( entry.Key );
                    }
                }
                RemoveEmptyKeys( );
                return _entries.Count > 0;
            }

        }
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, LogTraceEntryEntity> _entries = new SortedWeakReferenceList<Guid, LogTraceEntryEntity>( );
            public ById( )
            {
            }

            public void Add( LogTraceEntryEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<LogTraceEntryEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out LogTraceEntryEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<LogTraceEntryEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<LogTraceEntryEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<LogTraceEntryEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<LogTraceEntryEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<Guid, ByEntered> _entries = new SortedListEx<Guid, ByEntered>( );

        public LogTraceEntryByThreadAndEnteredEntityIndex( )
        {
        }

        public List<LogTraceEntryEntity> GetLogTraceEntryCollectionByThread( Guid thread )
        {
            throw new NotImplementedException();
        }

        public List<LogTraceEntryEntity> GetLogTraceEntryCollectionByThreadAndEntered( Guid thread, DateTime entered )
        {
            throw new NotImplementedException();
        }

        public IList<LogTraceEntryEntity> GetLogTraceEntryCollectionByThreadAtEntered( Guid thread, DateTime entered )
        {
            throw new NotImplementedException();
        }

        public IList<LogTraceEntryEntity> GetLogTraceEntryCollectionByThreadFromEntered( Guid thread, DateTime entered )
        {
            throw new NotImplementedException();
        }

        public IList<LogTraceEntryEntity> GetLogTraceEntryCollectionByThreadUntilEntered( Guid thread, DateTime entered )
        {
            throw new NotImplementedException();
        }

        IList<LogTraceEntryEntity> GetLogTraceEntryCollectionByThreadOverEntered( Guid thread, DateTime fromEntered, DateTime untilEntered )
        {
            throw new NotImplementedException();
        }

    }

    public class LogTraceEntryByLocationAndEnteredEntityIndex
    {
        public class ByEntered
        {
            readonly SortedListEx<DateTime, ById> _entries = new SortedListEx<DateTime, ById>( );
            List<DateTime> _emptyKeys = new List<DateTime>( );

            public ByEntered( )
            {
            }

            void RemoveEmptyKeys( )
            {
                var emptyKeyCount = _emptyKeys.Count;
                for ( int i = 0; i < emptyKeyCount; i++ )
                {
                    _entries.Remove( _emptyKeys[ i ] );
                }
                _emptyKeys.Clear( );
            }

            public bool GetAll([DisallowNull] IList<LogTraceEntryEntity> result )
            {
                foreach( var entry in _entries )
                {
                    if( entry.Value.GetAll( result ) == false )
                    {
                        _emptyKeys.Add( entry.Key );
                    }
                }
                RemoveEmptyKeys( );
                return _entries.Count > 0;
            }

        }
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, LogTraceEntryEntity> _entries = new SortedWeakReferenceList<Guid, LogTraceEntryEntity>( );
            public ById( )
            {
            }

            public void Add( LogTraceEntryEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<LogTraceEntryEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out LogTraceEntryEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<LogTraceEntryEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<LogTraceEntryEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<LogTraceEntryEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<LogTraceEntryEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<Guid, ByEntered> _entries = new SortedListEx<Guid, ByEntered>( );

        public LogTraceEntryByLocationAndEnteredEntityIndex( )
        {
        }

        public List<LogTraceEntryEntity> GetLogTraceEntryCollectionByLocation( Guid location )
        {
            throw new NotImplementedException();
        }

        public List<LogTraceEntryEntity> GetLogTraceEntryCollectionByLocationAndEntered( Guid location, DateTime entered )
        {
            throw new NotImplementedException();
        }

        public IList<LogTraceEntryEntity> GetLogTraceEntryCollectionByLocationAtEntered( Guid location, DateTime entered )
        {
            throw new NotImplementedException();
        }

        public IList<LogTraceEntryEntity> GetLogTraceEntryCollectionByLocationFromEntered( Guid location, DateTime entered )
        {
            throw new NotImplementedException();
        }

        public IList<LogTraceEntryEntity> GetLogTraceEntryCollectionByLocationUntilEntered( Guid location, DateTime entered )
        {
            throw new NotImplementedException();
        }

        IList<LogTraceEntryEntity> GetLogTraceEntryCollectionByLocationOverEntered( Guid location, DateTime fromEntered, DateTime untilEntered )
        {
            throw new NotImplementedException();
        }

    }

    public class LogTraceEntryByEnteredEntityIndex
    {
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, LogTraceEntryEntity> _entries = new SortedWeakReferenceList<Guid, LogTraceEntryEntity>( );
            public ById( )
            {
            }

            public void Add( LogTraceEntryEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<LogTraceEntryEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out LogTraceEntryEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<LogTraceEntryEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<LogTraceEntryEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<LogTraceEntryEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<LogTraceEntryEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<DateTime, ById> _entries = new SortedListEx<DateTime, ById>( );

        public LogTraceEntryByEnteredEntityIndex( )
        {
        }

        public List<LogTraceEntryEntity> GetLogTraceEntryCollectionByEntered( DateTime entered )
        {
            throw new NotImplementedException();
        }

        public IList<LogTraceEntryEntity> GetLogTraceEntryCollectionAtEntered( DateTime entered )
        {
            throw new NotImplementedException();
        }

        public IList<LogTraceEntryEntity> GetLogTraceEntryCollectionFromEntered( DateTime entered )
        {
            throw new NotImplementedException();
        }

        public IList<LogTraceEntryEntity> GetLogTraceEntryCollectionUntilEntered( DateTime entered )
        {
            throw new NotImplementedException();
        }

        IList<LogTraceEntryEntity> GetLogTraceEntryCollectionOverEntered( DateTime fromEntered, DateTime untilEntered )
        {
            throw new NotImplementedException();
        }

    }

    public class MapElementByItemEntityIndex
    {
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, MapElementEntity> _entries = new SortedWeakReferenceList<Guid, MapElementEntity>( );
            public ById( )
            {
            }

            public void Add( MapElementEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<MapElementEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out MapElementEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<MapElementEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<MapElementEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<MapElementEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<MapElementEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<Guid, ById> _entries = new SortedListEx<Guid, ById>( );

        public MapElementByItemEntityIndex( )
        {
        }

        public List<MapElementEntity> GetMapElementCollectionByItem( Guid item )
        {
            throw new NotImplementedException();
        }

    }

    public class MapServiceOptionsByTimestampEntityIndex
    {
        readonly SortedWeakReferenceList<DateTime, MapServiceOptionsEntity> _entries = new SortedWeakReferenceList<DateTime, MapServiceOptionsEntity>( );

        public MapServiceOptionsByTimestampEntityIndex( )
        {
        }

        public void Add( MapServiceOptionsEntity entity )
        {
            if( _entries.TryGetValue(entity.Timestamp, out var weakReference ) )
            {
                weakReference.SetTarget( entity );
            }
            else
            {
                _entries.Add( entity.Timestamp, new WeakReference<MapServiceOptionsEntity>( entity, false ) );
            }
        }

        public bool GetByTimestamp( DateTime timestamp, out MapServiceOptionsEntity? entity )
        {
            entity = null;
            if ( _entries.TryGetValue( timestamp, out var weakReference ) )
            {
                if ( weakReference.TryGetTarget( out entity ) == false )
                {
                    _entries.Remove( timestamp );
                }
            }
            return _entries.Count > 0;
        }

        public bool GetFrom(DateTime key, [DisallowNull] IList<MapServiceOptionsEntity> result )
        {
            return _entries.From( key, result );
        }

        public bool GetUntil(DateTime key, [DisallowNull] IList<MapServiceOptionsEntity> result )
        {
            return _entries.Until( key, result );
        }

        public bool GetOver(DateTime firstKey, DateTime lastKey, [DisallowNull] IList<MapServiceOptionsEntity> result )
        {
            return _entries.Over( firstKey, lastKey, result );
        }

        public bool GetAll([DisallowNull] IList<MapServiceOptionsEntity> result )
        {
            return _entries.All( result );
        }

        public MapServiceOptionsEntity? GetMapServiceOptionsByTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public MapServiceOptionsEntity? GetMapServiceOptionsAtTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<MapServiceOptionsEntity> GetMapServiceOptionsFromTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<MapServiceOptionsEntity> GetMapServiceOptionsUntilTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        IList<MapServiceOptionsEntity> GetMapServiceOptionsOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

    }
    public class MaritimeIdentificationDigitsByCodeEntityIndex
    {
        readonly SortedWeakReferenceList<int, MaritimeIdentificationDigitsEntity> _entries = new SortedWeakReferenceList<int, MaritimeIdentificationDigitsEntity>( );

        public MaritimeIdentificationDigitsByCodeEntityIndex( )
        {
        }

        public void Add( MaritimeIdentificationDigitsEntity entity )
        {
            if( _entries.TryGetValue(entity.Code, out var weakReference ) )
            {
                weakReference.SetTarget( entity );
            }
            else
            {
                _entries.Add( entity.Code, new WeakReference<MaritimeIdentificationDigitsEntity>( entity, false ) );
            }
        }

        public bool GetByCode( int code, out MaritimeIdentificationDigitsEntity? entity )
        {
            entity = null;
            if ( _entries.TryGetValue( code, out var weakReference ) )
            {
                if ( weakReference.TryGetTarget( out entity ) == false )
                {
                    _entries.Remove( code );
                }
            }
            return _entries.Count > 0;
        }

        public bool GetFrom(int key, [DisallowNull] IList<MaritimeIdentificationDigitsEntity> result )
        {
            return _entries.From( key, result );
        }

        public bool GetUntil(int key, [DisallowNull] IList<MaritimeIdentificationDigitsEntity> result )
        {
            return _entries.Until( key, result );
        }

        public bool GetOver(int firstKey, int lastKey, [DisallowNull] IList<MaritimeIdentificationDigitsEntity> result )
        {
            return _entries.Over( firstKey, lastKey, result );
        }

        public bool GetAll([DisallowNull] IList<MaritimeIdentificationDigitsEntity> result )
        {
            return _entries.All( result );
        }

        public MaritimeIdentificationDigitsEntity? GetMaritimeIdentificationDigitsByCode( int code )
        {
            throw new NotImplementedException();
        }

        public IList<MaritimeIdentificationDigitsEntity> GetMaritimeIdentificationDigitsFromCode( int code )
        {
            throw new NotImplementedException();
        }

        public IList<MaritimeIdentificationDigitsEntity> GetMaritimeIdentificationDigitsUntilCode( int code )
        {
            throw new NotImplementedException();
        }

        IList<MaritimeIdentificationDigitsEntity> GetMaritimeIdentificationDigitsOverCode( int fromCode, int untilCode )
        {
            throw new NotImplementedException();
        }

    }
    public class MaritimeIdentificationDigitsByCountryEntityIndex
    {
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, MaritimeIdentificationDigitsEntity> _entries = new SortedWeakReferenceList<Guid, MaritimeIdentificationDigitsEntity>( );
            public ById( )
            {
            }

            public void Add( MaritimeIdentificationDigitsEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<MaritimeIdentificationDigitsEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out MaritimeIdentificationDigitsEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<MaritimeIdentificationDigitsEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<MaritimeIdentificationDigitsEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<MaritimeIdentificationDigitsEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<MaritimeIdentificationDigitsEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<Guid, ById> _entries = new SortedListEx<Guid, ById>( );

        public MaritimeIdentificationDigitsByCountryEntityIndex( )
        {
        }

        public List<MaritimeIdentificationDigitsEntity> GetMaritimeIdentificationDigitsCollectionByCountry( Guid country )
        {
            throw new NotImplementedException();
        }

    }

    public class MediaProxySessionByServiceAndNameEntityIndex
    {
        public class ByName
        {
            readonly SortedWeakReferenceList<string, MediaProxySessionEntity> _entries = new SortedWeakReferenceList<string, MediaProxySessionEntity>( );

            public ByName( )
            {
            }

            public void Add( MediaProxySessionEntity entity )
            {
                if( _entries.TryGetValue(entity.Name, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Name, new WeakReference<MediaProxySessionEntity>( entity, false ) );
                }
            }

            public bool GetByName( string name, out MediaProxySessionEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( name, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( name );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(string key, [DisallowNull] IList<MediaProxySessionEntity> result )
            {
                return _entries.From( key, result );
            }

            public bool GetUntil(string key, [DisallowNull] IList<MediaProxySessionEntity> result )
            {
                return _entries.Until( key, result );
            }

            public bool GetOver(string firstKey, string lastKey, [DisallowNull] IList<MediaProxySessionEntity> result )
            {
                return _entries.Over( firstKey, lastKey, result );
            }

            public bool GetAll([DisallowNull] IList<MediaProxySessionEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<string, ByName> _entries = new SortedListEx<string, ByName>( );
        public List<MediaProxySessionEntity> GetMediaProxySessionCollectionByService( Guid service )
        {
            throw new NotImplementedException();
        }

        public MediaProxySessionEntity? GetMediaProxySessionByServiceAndName( Guid service, string name )
        {
            throw new NotImplementedException();
        }

    }
    public class MediaProxySessionFileByProxySessionAndTimestampEntityIndex
    {
        public class ByTimestamp
        {
            readonly SortedWeakReferenceList<DateTime, MediaProxySessionFileEntity> _entries = new SortedWeakReferenceList<DateTime, MediaProxySessionFileEntity>( );

            public ByTimestamp( )
            {
            }

            public void Add( MediaProxySessionFileEntity entity )
            {
                if( _entries.TryGetValue(entity.Timestamp, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Timestamp, new WeakReference<MediaProxySessionFileEntity>( entity, false ) );
                }
            }

            public bool GetByTimestamp( DateTime timestamp, out MediaProxySessionFileEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( timestamp, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( timestamp );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(DateTime key, [DisallowNull] IList<MediaProxySessionFileEntity> result )
            {
                return _entries.From( key, result );
            }

            public bool GetUntil(DateTime key, [DisallowNull] IList<MediaProxySessionFileEntity> result )
            {
                return _entries.Until( key, result );
            }

            public bool GetOver(DateTime firstKey, DateTime lastKey, [DisallowNull] IList<MediaProxySessionFileEntity> result )
            {
                return _entries.Over( firstKey, lastKey, result );
            }

            public bool GetAll([DisallowNull] IList<MediaProxySessionFileEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<DateTime, ByTimestamp> _entries = new SortedListEx<DateTime, ByTimestamp>( );
        public List<MediaProxySessionFileEntity> GetMediaProxySessionFileCollectionByProxySession( Guid proxySession )
        {
            throw new NotImplementedException();
        }

        public MediaProxySessionFileEntity? GetMediaProxySessionFileByProxySessionAndTimestamp( Guid proxySession, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public MediaProxySessionFileEntity? GetMediaProxySessionFileByProxySessionAtTimestamp( Guid proxySession, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<MediaProxySessionFileEntity> GetMediaProxySessionFileByProxySessionFromTimestamp( Guid proxySession, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<MediaProxySessionFileEntity> GetMediaProxySessionFileByProxySessionUntilTimestamp( Guid proxySession, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        IList<MediaProxySessionFileEntity> GetMediaProxySessionFileByProxySessionOverTimestamp( Guid proxySession, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

    }
    public class MediaProxySessionOptionsByProxySessionAndTimestampEntityIndex
    {
        public class ByTimestamp
        {
            readonly SortedWeakReferenceList<DateTime, MediaProxySessionOptionsEntity> _entries = new SortedWeakReferenceList<DateTime, MediaProxySessionOptionsEntity>( );

            public ByTimestamp( )
            {
            }

            public void Add( MediaProxySessionOptionsEntity entity )
            {
                if( _entries.TryGetValue(entity.Timestamp, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Timestamp, new WeakReference<MediaProxySessionOptionsEntity>( entity, false ) );
                }
            }

            public bool GetByTimestamp( DateTime timestamp, out MediaProxySessionOptionsEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( timestamp, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( timestamp );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(DateTime key, [DisallowNull] IList<MediaProxySessionOptionsEntity> result )
            {
                return _entries.From( key, result );
            }

            public bool GetUntil(DateTime key, [DisallowNull] IList<MediaProxySessionOptionsEntity> result )
            {
                return _entries.Until( key, result );
            }

            public bool GetOver(DateTime firstKey, DateTime lastKey, [DisallowNull] IList<MediaProxySessionOptionsEntity> result )
            {
                return _entries.Over( firstKey, lastKey, result );
            }

            public bool GetAll([DisallowNull] IList<MediaProxySessionOptionsEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<DateTime, ByTimestamp> _entries = new SortedListEx<DateTime, ByTimestamp>( );
        public List<MediaProxySessionOptionsEntity> GetMediaProxySessionOptionsCollectionByProxySession( Guid proxySession )
        {
            throw new NotImplementedException();
        }

        public MediaProxySessionOptionsEntity? GetMediaProxySessionOptionsByProxySessionAndTimestamp( Guid proxySession, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public MediaProxySessionOptionsEntity? GetMediaProxySessionOptionsByProxySessionAtTimestamp( Guid proxySession, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<MediaProxySessionOptionsEntity> GetMediaProxySessionOptionsByProxySessionFromTimestamp( Guid proxySession, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<MediaProxySessionOptionsEntity> GetMediaProxySessionOptionsByProxySessionUntilTimestamp( Guid proxySession, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        IList<MediaProxySessionOptionsEntity> GetMediaProxySessionOptionsByProxySessionOverTimestamp( Guid proxySession, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

    }
    public class MediaServiceOptionsByMediaServiceAndTimestampEntityIndex
    {
        public class ByTimestamp
        {
            readonly SortedWeakReferenceList<DateTime, MediaServiceOptionsEntity> _entries = new SortedWeakReferenceList<DateTime, MediaServiceOptionsEntity>( );

            public ByTimestamp( )
            {
            }

            public void Add( MediaServiceOptionsEntity entity )
            {
                if( _entries.TryGetValue(entity.Timestamp, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Timestamp, new WeakReference<MediaServiceOptionsEntity>( entity, false ) );
                }
            }

            public bool GetByTimestamp( DateTime timestamp, out MediaServiceOptionsEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( timestamp, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( timestamp );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(DateTime key, [DisallowNull] IList<MediaServiceOptionsEntity> result )
            {
                return _entries.From( key, result );
            }

            public bool GetUntil(DateTime key, [DisallowNull] IList<MediaServiceOptionsEntity> result )
            {
                return _entries.Until( key, result );
            }

            public bool GetOver(DateTime firstKey, DateTime lastKey, [DisallowNull] IList<MediaServiceOptionsEntity> result )
            {
                return _entries.Over( firstKey, lastKey, result );
            }

            public bool GetAll([DisallowNull] IList<MediaServiceOptionsEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<DateTime, ByTimestamp> _entries = new SortedListEx<DateTime, ByTimestamp>( );
        public List<MediaServiceOptionsEntity> GetMediaServiceOptionsCollectionByMediaService( Guid mediaService )
        {
            throw new NotImplementedException();
        }

        public MediaServiceOptionsEntity? GetMediaServiceOptionsByMediaServiceAndTimestamp( Guid mediaService, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public MediaServiceOptionsEntity? GetMediaServiceOptionsByMediaServiceAtTimestamp( Guid mediaService, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<MediaServiceOptionsEntity> GetMediaServiceOptionsByMediaServiceFromTimestamp( Guid mediaService, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<MediaServiceOptionsEntity> GetMediaServiceOptionsByMediaServiceUntilTimestamp( Guid mediaService, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        IList<MediaServiceOptionsEntity> GetMediaServiceOptionsByMediaServiceOverTimestamp( Guid mediaService, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

    }
    public class NamespaceElementByNamespaceAndNameEntityIndex
    {
        public class ByName
        {
            readonly SortedWeakReferenceList<string, NamespaceElementEntity> _entries = new SortedWeakReferenceList<string, NamespaceElementEntity>( );

            public ByName( )
            {
            }

            public void Add( NamespaceElementEntity entity )
            {
                if( _entries.TryGetValue(entity.Name, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Name, new WeakReference<NamespaceElementEntity>( entity, false ) );
                }
            }

            public bool GetByName( string name, out NamespaceElementEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( name, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( name );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(string key, [DisallowNull] IList<NamespaceElementEntity> result )
            {
                return _entries.From( key, result );
            }

            public bool GetUntil(string key, [DisallowNull] IList<NamespaceElementEntity> result )
            {
                return _entries.Until( key, result );
            }

            public bool GetOver(string firstKey, string lastKey, [DisallowNull] IList<NamespaceElementEntity> result )
            {
                return _entries.Over( firstKey, lastKey, result );
            }

            public bool GetAll([DisallowNull] IList<NamespaceElementEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<string, ByName> _entries = new SortedListEx<string, ByName>( );
        public List<NamespaceElementEntity> GetNamespaceElementCollectionByNamespace( Guid namespace__ )
        {
            throw new NotImplementedException();
        }

        public NamespaceElementEntity? GetNamespaceElementByNamespaceAndName( Guid namespace__, string name )
        {
            throw new NotImplementedException();
        }

    }
    public class OilSpillByOilSpillDetectorAndTimestampEntityIndex
    {
        public class ByTimestamp
        {
            readonly SortedListEx<DateTime, ById> _entries = new SortedListEx<DateTime, ById>( );
            List<DateTime> _emptyKeys = new List<DateTime>( );

            public ByTimestamp( )
            {
            }

            void RemoveEmptyKeys( )
            {
                var emptyKeyCount = _emptyKeys.Count;
                for ( int i = 0; i < emptyKeyCount; i++ )
                {
                    _entries.Remove( _emptyKeys[ i ] );
                }
                _emptyKeys.Clear( );
            }

            public bool GetAll([DisallowNull] IList<OilSpillEntity> result )
            {
                foreach( var entry in _entries )
                {
                    if( entry.Value.GetAll( result ) == false )
                    {
                        _emptyKeys.Add( entry.Key );
                    }
                }
                RemoveEmptyKeys( );
                return _entries.Count > 0;
            }

        }
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, OilSpillEntity> _entries = new SortedWeakReferenceList<Guid, OilSpillEntity>( );
            public ById( )
            {
            }

            public void Add( OilSpillEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<OilSpillEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out OilSpillEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<OilSpillEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<OilSpillEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<OilSpillEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<OilSpillEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<Guid, ByTimestamp> _entries = new SortedListEx<Guid, ByTimestamp>( );

        public OilSpillByOilSpillDetectorAndTimestampEntityIndex( )
        {
        }

        public List<OilSpillEntity> GetOilSpillCollectionByOilSpillDetector( Guid oilSpillDetector )
        {
            throw new NotImplementedException();
        }

        public List<OilSpillEntity> GetOilSpillCollectionByOilSpillDetectorAndTimestamp( Guid oilSpillDetector, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<OilSpillEntity> GetOilSpillCollectionByOilSpillDetectorAtTimestamp( Guid oilSpillDetector, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<OilSpillEntity> GetOilSpillCollectionByOilSpillDetectorFromTimestamp( Guid oilSpillDetector, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<OilSpillEntity> GetOilSpillCollectionByOilSpillDetectorUntilTimestamp( Guid oilSpillDetector, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        IList<OilSpillEntity> GetOilSpillCollectionByOilSpillDetectorOverTimestamp( Guid oilSpillDetector, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

    }

    public class OilSpillByTimestampEntityIndex
    {
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, OilSpillEntity> _entries = new SortedWeakReferenceList<Guid, OilSpillEntity>( );
            public ById( )
            {
            }

            public void Add( OilSpillEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<OilSpillEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out OilSpillEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<OilSpillEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<OilSpillEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<OilSpillEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<OilSpillEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<DateTime, ById> _entries = new SortedListEx<DateTime, ById>( );

        public OilSpillByTimestampEntityIndex( )
        {
        }

        public List<OilSpillEntity> GetOilSpillCollectionByTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<OilSpillEntity> GetOilSpillCollectionAtTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<OilSpillEntity> GetOilSpillCollectionFromTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<OilSpillEntity> GetOilSpillCollectionUntilTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        IList<OilSpillEntity> GetOilSpillCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

    }

    public class OilSpillDetectorCommandByOilSpillDetectorAndTimestampEntityIndex
    {
        public class ByTimestamp
        {
            readonly SortedListEx<DateTime, ById> _entries = new SortedListEx<DateTime, ById>( );
            List<DateTime> _emptyKeys = new List<DateTime>( );

            public ByTimestamp( )
            {
            }

            void RemoveEmptyKeys( )
            {
                var emptyKeyCount = _emptyKeys.Count;
                for ( int i = 0; i < emptyKeyCount; i++ )
                {
                    _entries.Remove( _emptyKeys[ i ] );
                }
                _emptyKeys.Clear( );
            }

            public bool GetAll([DisallowNull] IList<OilSpillDetectorCommandEntity> result )
            {
                foreach( var entry in _entries )
                {
                    if( entry.Value.GetAll( result ) == false )
                    {
                        _emptyKeys.Add( entry.Key );
                    }
                }
                RemoveEmptyKeys( );
                return _entries.Count > 0;
            }

        }
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, OilSpillDetectorCommandEntity> _entries = new SortedWeakReferenceList<Guid, OilSpillDetectorCommandEntity>( );
            public ById( )
            {
            }

            public void Add( OilSpillDetectorCommandEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<OilSpillDetectorCommandEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out OilSpillDetectorCommandEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<OilSpillDetectorCommandEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<OilSpillDetectorCommandEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<OilSpillDetectorCommandEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<OilSpillDetectorCommandEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<Guid, ByTimestamp> _entries = new SortedListEx<Guid, ByTimestamp>( );

        public OilSpillDetectorCommandByOilSpillDetectorAndTimestampEntityIndex( )
        {
        }

        public List<OilSpillDetectorCommandEntity> GetOilSpillDetectorCommandCollectionByOilSpillDetector( Guid oilSpillDetector )
        {
            throw new NotImplementedException();
        }

        public List<OilSpillDetectorCommandEntity> GetOilSpillDetectorCommandCollectionByOilSpillDetectorAndTimestamp( Guid oilSpillDetector, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<OilSpillDetectorCommandEntity> GetOilSpillDetectorCommandCollectionByOilSpillDetectorAtTimestamp( Guid oilSpillDetector, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<OilSpillDetectorCommandEntity> GetOilSpillDetectorCommandCollectionByOilSpillDetectorFromTimestamp( Guid oilSpillDetector, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<OilSpillDetectorCommandEntity> GetOilSpillDetectorCommandCollectionByOilSpillDetectorUntilTimestamp( Guid oilSpillDetector, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        IList<OilSpillDetectorCommandEntity> GetOilSpillDetectorCommandCollectionByOilSpillDetectorOverTimestamp( Guid oilSpillDetector, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

    }

    public class OilSpillDetectorCommandByTimestampEntityIndex
    {
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, OilSpillDetectorCommandEntity> _entries = new SortedWeakReferenceList<Guid, OilSpillDetectorCommandEntity>( );
            public ById( )
            {
            }

            public void Add( OilSpillDetectorCommandEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<OilSpillDetectorCommandEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out OilSpillDetectorCommandEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<OilSpillDetectorCommandEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<OilSpillDetectorCommandEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<OilSpillDetectorCommandEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<OilSpillDetectorCommandEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<DateTime, ById> _entries = new SortedListEx<DateTime, ById>( );

        public OilSpillDetectorCommandByTimestampEntityIndex( )
        {
        }

        public List<OilSpillDetectorCommandEntity> GetOilSpillDetectorCommandCollectionByTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<OilSpillDetectorCommandEntity> GetOilSpillDetectorCommandCollectionAtTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<OilSpillDetectorCommandEntity> GetOilSpillDetectorCommandCollectionFromTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<OilSpillDetectorCommandEntity> GetOilSpillDetectorCommandCollectionUntilTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        IList<OilSpillDetectorCommandEntity> GetOilSpillDetectorCommandCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

    }

    public class OilSpillDetectorCommandByReplyEntityIndex
    {
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, OilSpillDetectorCommandEntity> _entries = new SortedWeakReferenceList<Guid, OilSpillDetectorCommandEntity>( );
            public ById( )
            {
            }

            public void Add( OilSpillDetectorCommandEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<OilSpillDetectorCommandEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out OilSpillDetectorCommandEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<OilSpillDetectorCommandEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<OilSpillDetectorCommandEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<OilSpillDetectorCommandEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<OilSpillDetectorCommandEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<Guid, ById> _entries = new SortedListEx<Guid, ById>( );

        public OilSpillDetectorCommandByReplyEntityIndex( )
        {
        }

        public List<OilSpillDetectorCommandEntity> GetOilSpillDetectorCommandCollectionByReply( Guid? reply )
        {
            throw new NotImplementedException();
        }

        public IList<OilSpillDetectorCommandEntity> GetOilSpillDetectorCommandCollectionByReplyIsNull(  )
        {
            throw new NotImplementedException();
        }

    }

    public class OilSpillDetectorCommandByReplyIsNullEntityIndex
    {
    }

    public class OilSpillDetectorCommandReplyByOilSpillDetectorAndTimestampEntityIndex
    {
        public class ByTimestamp
        {
            readonly SortedListEx<DateTime, ById> _entries = new SortedListEx<DateTime, ById>( );
            List<DateTime> _emptyKeys = new List<DateTime>( );

            public ByTimestamp( )
            {
            }

            void RemoveEmptyKeys( )
            {
                var emptyKeyCount = _emptyKeys.Count;
                for ( int i = 0; i < emptyKeyCount; i++ )
                {
                    _entries.Remove( _emptyKeys[ i ] );
                }
                _emptyKeys.Clear( );
            }

            public bool GetAll([DisallowNull] IList<OilSpillDetectorCommandReplyEntity> result )
            {
                foreach( var entry in _entries )
                {
                    if( entry.Value.GetAll( result ) == false )
                    {
                        _emptyKeys.Add( entry.Key );
                    }
                }
                RemoveEmptyKeys( );
                return _entries.Count > 0;
            }

        }
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, OilSpillDetectorCommandReplyEntity> _entries = new SortedWeakReferenceList<Guid, OilSpillDetectorCommandReplyEntity>( );
            public ById( )
            {
            }

            public void Add( OilSpillDetectorCommandReplyEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<OilSpillDetectorCommandReplyEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out OilSpillDetectorCommandReplyEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<OilSpillDetectorCommandReplyEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<OilSpillDetectorCommandReplyEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<OilSpillDetectorCommandReplyEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<OilSpillDetectorCommandReplyEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<Guid, ByTimestamp> _entries = new SortedListEx<Guid, ByTimestamp>( );

        public OilSpillDetectorCommandReplyByOilSpillDetectorAndTimestampEntityIndex( )
        {
        }

        public List<OilSpillDetectorCommandReplyEntity> GetOilSpillDetectorCommandReplyCollectionByOilSpillDetector( Guid oilSpillDetector )
        {
            throw new NotImplementedException();
        }

        public List<OilSpillDetectorCommandReplyEntity> GetOilSpillDetectorCommandReplyCollectionByOilSpillDetectorAndTimestamp( Guid oilSpillDetector, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<OilSpillDetectorCommandReplyEntity> GetOilSpillDetectorCommandReplyCollectionByOilSpillDetectorAtTimestamp( Guid oilSpillDetector, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<OilSpillDetectorCommandReplyEntity> GetOilSpillDetectorCommandReplyCollectionByOilSpillDetectorFromTimestamp( Guid oilSpillDetector, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<OilSpillDetectorCommandReplyEntity> GetOilSpillDetectorCommandReplyCollectionByOilSpillDetectorUntilTimestamp( Guid oilSpillDetector, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        IList<OilSpillDetectorCommandReplyEntity> GetOilSpillDetectorCommandReplyCollectionByOilSpillDetectorOverTimestamp( Guid oilSpillDetector, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

    }

    public class OilSpillDetectorCommandReplyByTimestampEntityIndex
    {
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, OilSpillDetectorCommandReplyEntity> _entries = new SortedWeakReferenceList<Guid, OilSpillDetectorCommandReplyEntity>( );
            public ById( )
            {
            }

            public void Add( OilSpillDetectorCommandReplyEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<OilSpillDetectorCommandReplyEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out OilSpillDetectorCommandReplyEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<OilSpillDetectorCommandReplyEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<OilSpillDetectorCommandReplyEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<OilSpillDetectorCommandReplyEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<OilSpillDetectorCommandReplyEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<DateTime, ById> _entries = new SortedListEx<DateTime, ById>( );

        public OilSpillDetectorCommandReplyByTimestampEntityIndex( )
        {
        }

        public List<OilSpillDetectorCommandReplyEntity> GetOilSpillDetectorCommandReplyCollectionByTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<OilSpillDetectorCommandReplyEntity> GetOilSpillDetectorCommandReplyCollectionAtTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<OilSpillDetectorCommandReplyEntity> GetOilSpillDetectorCommandReplyCollectionFromTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<OilSpillDetectorCommandReplyEntity> GetOilSpillDetectorCommandReplyCollectionUntilTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        IList<OilSpillDetectorCommandReplyEntity> GetOilSpillDetectorCommandReplyCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

    }

    public class OilSpillDetectorCommandReplyByCommandEntityIndex
    {
        readonly SortedWeakReferenceList<Guid, OilSpillDetectorCommandReplyEntity> _entries = new SortedWeakReferenceList<Guid, OilSpillDetectorCommandReplyEntity>( );

        public OilSpillDetectorCommandReplyByCommandEntityIndex( )
        {
        }

        public void Add( OilSpillDetectorCommandReplyEntity entity )
        {
            if ( entity.CommandId is Guid command )
            {
                if ( _entries.TryGetValue( command, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( command, new WeakReference<OilSpillDetectorCommandReplyEntity>( entity, false ) );
                }
            }
            else
            {
                throw new ArgumentException( "entity.CommandId is null.", nameof( entity ) );
            }
        }

        public bool GetByCommandId( Guid command, out OilSpillDetectorCommandReplyEntity? entity )
        {
            entity = null;
            if ( _entries.TryGetValue( command, out var weakReference ) )
            {
                if ( weakReference.TryGetTarget( out entity ) == false )
                {
                    _entries.Remove( command );
                }
            }
            return _entries.Count > 0;
        }

        public bool GetFrom(Guid key, [DisallowNull] IList<OilSpillDetectorCommandReplyEntity> result )
        {
            return _entries.From( key, result );
        }

        public bool GetUntil(Guid key, [DisallowNull] IList<OilSpillDetectorCommandReplyEntity> result )
        {
            return _entries.Until( key, result );
        }

        public bool GetOver(Guid firstKey, Guid lastKey, [DisallowNull] IList<OilSpillDetectorCommandReplyEntity> result )
        {
            return _entries.Over( firstKey, lastKey, result );
        }

        public bool GetAll([DisallowNull] IList<OilSpillDetectorCommandReplyEntity> result )
        {
            return _entries.All( result );
        }

        public OilSpillDetectorCommandReplyEntity? GetOilSpillDetectorCommandReplyByCommand( Guid? command )
        {
            throw new NotImplementedException();
        }

        public IList<OilSpillDetectorCommandReplyEntity> GetOilSpillDetectorCommandReplyCollectionByCommandIsNull(  )
        {
            throw new NotImplementedException();
        }

    }
    public class OilSpillDetectorCommandReplyByCommandIsNullEntityIndex
    {
    }

    public class OilSpillDetectorConfigurationByOilSpillDetectorAndTimestampEntityIndex
    {
        public class ByTimestamp
        {
            readonly SortedWeakReferenceList<DateTime, OilSpillDetectorConfigurationEntity> _entries = new SortedWeakReferenceList<DateTime, OilSpillDetectorConfigurationEntity>( );

            public ByTimestamp( )
            {
            }

            public void Add( OilSpillDetectorConfigurationEntity entity )
            {
                if( _entries.TryGetValue(entity.Timestamp, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Timestamp, new WeakReference<OilSpillDetectorConfigurationEntity>( entity, false ) );
                }
            }

            public bool GetByTimestamp( DateTime timestamp, out OilSpillDetectorConfigurationEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( timestamp, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( timestamp );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(DateTime key, [DisallowNull] IList<OilSpillDetectorConfigurationEntity> result )
            {
                return _entries.From( key, result );
            }

            public bool GetUntil(DateTime key, [DisallowNull] IList<OilSpillDetectorConfigurationEntity> result )
            {
                return _entries.Until( key, result );
            }

            public bool GetOver(DateTime firstKey, DateTime lastKey, [DisallowNull] IList<OilSpillDetectorConfigurationEntity> result )
            {
                return _entries.Over( firstKey, lastKey, result );
            }

            public bool GetAll([DisallowNull] IList<OilSpillDetectorConfigurationEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<DateTime, ByTimestamp> _entries = new SortedListEx<DateTime, ByTimestamp>( );
        public List<OilSpillDetectorConfigurationEntity> GetOilSpillDetectorConfigurationCollectionByOilSpillDetector( Guid oilSpillDetector )
        {
            throw new NotImplementedException();
        }

        public OilSpillDetectorConfigurationEntity? GetOilSpillDetectorConfigurationByOilSpillDetectorAndTimestamp( Guid oilSpillDetector, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public OilSpillDetectorConfigurationEntity? GetOilSpillDetectorConfigurationByOilSpillDetectorAtTimestamp( Guid oilSpillDetector, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<OilSpillDetectorConfigurationEntity> GetOilSpillDetectorConfigurationByOilSpillDetectorFromTimestamp( Guid oilSpillDetector, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<OilSpillDetectorConfigurationEntity> GetOilSpillDetectorConfigurationByOilSpillDetectorUntilTimestamp( Guid oilSpillDetector, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        IList<OilSpillDetectorConfigurationEntity> GetOilSpillDetectorConfigurationByOilSpillDetectorOverTimestamp( Guid oilSpillDetector, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

    }
    public class OilSpillDetectorConfigurationByTimestampEntityIndex
    {
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, OilSpillDetectorConfigurationEntity> _entries = new SortedWeakReferenceList<Guid, OilSpillDetectorConfigurationEntity>( );
            public ById( )
            {
            }

            public void Add( OilSpillDetectorConfigurationEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<OilSpillDetectorConfigurationEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out OilSpillDetectorConfigurationEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<OilSpillDetectorConfigurationEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<OilSpillDetectorConfigurationEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<OilSpillDetectorConfigurationEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<OilSpillDetectorConfigurationEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<DateTime, ById> _entries = new SortedListEx<DateTime, ById>( );

        public OilSpillDetectorConfigurationByTimestampEntityIndex( )
        {
        }

        public List<OilSpillDetectorConfigurationEntity> GetOilSpillDetectorConfigurationCollectionByTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<OilSpillDetectorConfigurationEntity> GetOilSpillDetectorConfigurationCollectionAtTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<OilSpillDetectorConfigurationEntity> GetOilSpillDetectorConfigurationCollectionFromTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<OilSpillDetectorConfigurationEntity> GetOilSpillDetectorConfigurationCollectionUntilTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        IList<OilSpillDetectorConfigurationEntity> GetOilSpillDetectorConfigurationCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

    }

    public class OilSpillDetectorConfigurationByTargetMMSIEntityIndex
    {
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, OilSpillDetectorConfigurationEntity> _entries = new SortedWeakReferenceList<Guid, OilSpillDetectorConfigurationEntity>( );
            public ById( )
            {
            }

            public void Add( OilSpillDetectorConfigurationEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<OilSpillDetectorConfigurationEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out OilSpillDetectorConfigurationEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<OilSpillDetectorConfigurationEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<OilSpillDetectorConfigurationEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<OilSpillDetectorConfigurationEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<OilSpillDetectorConfigurationEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<Guid, ById> _entries = new SortedListEx<Guid, ById>( );

        public OilSpillDetectorConfigurationByTargetMMSIEntityIndex( )
        {
        }

        public List<OilSpillDetectorConfigurationEntity> GetOilSpillDetectorConfigurationCollectionByTargetMMSI( Guid? targetMMSI )
        {
            throw new NotImplementedException();
        }

        public IList<OilSpillDetectorConfigurationEntity> GetOilSpillDetectorConfigurationCollectionByTargetMMSIIsNull(  )
        {
            throw new NotImplementedException();
        }

    }

    public class OilSpillDetectorConfigurationByTargetMMSIIsNullEntityIndex
    {
    }

    public class Position2DTimeseriesValueByTimeseriesAndTimestampEntityIndex
    {
        public class ByTimestamp
        {
            readonly SortedWeakReferenceList<DateTime, Position2DTimeseriesValueEntity> _entries = new SortedWeakReferenceList<DateTime, Position2DTimeseriesValueEntity>( );

            public ByTimestamp( )
            {
            }

            public void Add( Position2DTimeseriesValueEntity entity )
            {
                if( _entries.TryGetValue(entity.Timestamp, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Timestamp, new WeakReference<Position2DTimeseriesValueEntity>( entity, false ) );
                }
            }

            public bool GetByTimestamp( DateTime timestamp, out Position2DTimeseriesValueEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( timestamp, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( timestamp );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(DateTime key, [DisallowNull] IList<Position2DTimeseriesValueEntity> result )
            {
                return _entries.From( key, result );
            }

            public bool GetUntil(DateTime key, [DisallowNull] IList<Position2DTimeseriesValueEntity> result )
            {
                return _entries.Until( key, result );
            }

            public bool GetOver(DateTime firstKey, DateTime lastKey, [DisallowNull] IList<Position2DTimeseriesValueEntity> result )
            {
                return _entries.Over( firstKey, lastKey, result );
            }

            public bool GetAll([DisallowNull] IList<Position2DTimeseriesValueEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<DateTime, ByTimestamp> _entries = new SortedListEx<DateTime, ByTimestamp>( );
        public List<Position2DTimeseriesValueEntity> GetPosition2DTimeseriesValueCollectionByTimeseries( Guid timeseries )
        {
            throw new NotImplementedException();
        }

        public Position2DTimeseriesValueEntity? GetPosition2DTimeseriesValueByTimeseriesAndTimestamp( Guid timeseries, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public Position2DTimeseriesValueEntity? GetPosition2DTimeseriesValueByTimeseriesAtTimestamp( Guid timeseries, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<Position2DTimeseriesValueEntity> GetPosition2DTimeseriesValueByTimeseriesFromTimestamp( Guid timeseries, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<Position2DTimeseriesValueEntity> GetPosition2DTimeseriesValueByTimeseriesUntilTimestamp( Guid timeseries, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        IList<Position2DTimeseriesValueEntity> GetPosition2DTimeseriesValueByTimeseriesOverTimestamp( Guid timeseries, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

    }
    public class Position2DTimeseriesValueByTimestampEntityIndex
    {
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, Position2DTimeseriesValueEntity> _entries = new SortedWeakReferenceList<Guid, Position2DTimeseriesValueEntity>( );
            public ById( )
            {
            }

            public void Add( Position2DTimeseriesValueEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<Position2DTimeseriesValueEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out Position2DTimeseriesValueEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<Position2DTimeseriesValueEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<Position2DTimeseriesValueEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<Position2DTimeseriesValueEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<Position2DTimeseriesValueEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<DateTime, ById> _entries = new SortedListEx<DateTime, ById>( );

        public Position2DTimeseriesValueByTimestampEntityIndex( )
        {
        }

        public List<Position2DTimeseriesValueEntity> GetPosition2DTimeseriesValueCollectionByTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<Position2DTimeseriesValueEntity> GetPosition2DTimeseriesValueCollectionAtTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<Position2DTimeseriesValueEntity> GetPosition2DTimeseriesValueCollectionFromTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<Position2DTimeseriesValueEntity> GetPosition2DTimeseriesValueCollectionUntilTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        IList<Position2DTimeseriesValueEntity> GetPosition2DTimeseriesValueCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

    }

    public class Position3DTimeseriesValueByTimeseriesAndTimestampEntityIndex
    {
        public class ByTimestamp
        {
            readonly SortedWeakReferenceList<DateTime, Position3DTimeseriesValueEntity> _entries = new SortedWeakReferenceList<DateTime, Position3DTimeseriesValueEntity>( );

            public ByTimestamp( )
            {
            }

            public void Add( Position3DTimeseriesValueEntity entity )
            {
                if( _entries.TryGetValue(entity.Timestamp, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Timestamp, new WeakReference<Position3DTimeseriesValueEntity>( entity, false ) );
                }
            }

            public bool GetByTimestamp( DateTime timestamp, out Position3DTimeseriesValueEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( timestamp, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( timestamp );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(DateTime key, [DisallowNull] IList<Position3DTimeseriesValueEntity> result )
            {
                return _entries.From( key, result );
            }

            public bool GetUntil(DateTime key, [DisallowNull] IList<Position3DTimeseriesValueEntity> result )
            {
                return _entries.Until( key, result );
            }

            public bool GetOver(DateTime firstKey, DateTime lastKey, [DisallowNull] IList<Position3DTimeseriesValueEntity> result )
            {
                return _entries.Over( firstKey, lastKey, result );
            }

            public bool GetAll([DisallowNull] IList<Position3DTimeseriesValueEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<DateTime, ByTimestamp> _entries = new SortedListEx<DateTime, ByTimestamp>( );
        public List<Position3DTimeseriesValueEntity> GetPosition3DTimeseriesValueCollectionByTimeseries( Guid timeseries )
        {
            throw new NotImplementedException();
        }

        public Position3DTimeseriesValueEntity? GetPosition3DTimeseriesValueByTimeseriesAndTimestamp( Guid timeseries, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public Position3DTimeseriesValueEntity? GetPosition3DTimeseriesValueByTimeseriesAtTimestamp( Guid timeseries, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<Position3DTimeseriesValueEntity> GetPosition3DTimeseriesValueByTimeseriesFromTimestamp( Guid timeseries, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<Position3DTimeseriesValueEntity> GetPosition3DTimeseriesValueByTimeseriesUntilTimestamp( Guid timeseries, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        IList<Position3DTimeseriesValueEntity> GetPosition3DTimeseriesValueByTimeseriesOverTimestamp( Guid timeseries, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

    }
    public class Position3DTimeseriesValueByTimestampEntityIndex
    {
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, Position3DTimeseriesValueEntity> _entries = new SortedWeakReferenceList<Guid, Position3DTimeseriesValueEntity>( );
            public ById( )
            {
            }

            public void Add( Position3DTimeseriesValueEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<Position3DTimeseriesValueEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out Position3DTimeseriesValueEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<Position3DTimeseriesValueEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<Position3DTimeseriesValueEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<Position3DTimeseriesValueEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<Position3DTimeseriesValueEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<DateTime, ById> _entries = new SortedListEx<DateTime, ById>( );

        public Position3DTimeseriesValueByTimestampEntityIndex( )
        {
        }

        public List<Position3DTimeseriesValueEntity> GetPosition3DTimeseriesValueCollectionByTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<Position3DTimeseriesValueEntity> GetPosition3DTimeseriesValueCollectionAtTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<Position3DTimeseriesValueEntity> GetPosition3DTimeseriesValueCollectionFromTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<Position3DTimeseriesValueEntity> GetPosition3DTimeseriesValueCollectionUntilTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        IList<Position3DTimeseriesValueEntity> GetPosition3DTimeseriesValueCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

    }

    public class PropertyByElementAndDefinitionEntityIndex
    {
        public class ByDefinition
        {
            readonly SortedWeakReferenceList<Guid, PropertyEntity> _entries = new SortedWeakReferenceList<Guid, PropertyEntity>( );

            public ByDefinition( )
            {
            }

            public void Add( PropertyEntity entity )
            {
                if( _entries.TryGetValue(entity.DefinitionId, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.DefinitionId, new WeakReference<PropertyEntity>( entity, false ) );
                }
            }

            public bool GetByDefinitionId( Guid definition, out PropertyEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( definition, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( definition );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid key, [DisallowNull] IList<PropertyEntity> result )
            {
                return _entries.From( key, result );
            }

            public bool GetUntil(Guid key, [DisallowNull] IList<PropertyEntity> result )
            {
                return _entries.Until( key, result );
            }

            public bool GetOver(Guid firstKey, Guid lastKey, [DisallowNull] IList<PropertyEntity> result )
            {
                return _entries.Over( firstKey, lastKey, result );
            }

            public bool GetAll([DisallowNull] IList<PropertyEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<Guid, ByDefinition> _entries = new SortedListEx<Guid, ByDefinition>( );
        public List<PropertyEntity> GetPropertyCollectionByElement( Guid element )
        {
            throw new NotImplementedException();
        }

        public PropertyEntity? GetPropertyByElementAndDefinition( Guid element, Guid definition )
        {
            throw new NotImplementedException();
        }

    }
    public class PropertyByDefinitionEntityIndex
    {
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, PropertyEntity> _entries = new SortedWeakReferenceList<Guid, PropertyEntity>( );
            public ById( )
            {
            }

            public void Add( PropertyEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<PropertyEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out PropertyEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<PropertyEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<PropertyEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<PropertyEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<PropertyEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<Guid, ById> _entries = new SortedListEx<Guid, ById>( );

        public PropertyByDefinitionEntityIndex( )
        {
        }

        public List<PropertyEntity> GetPropertyCollectionByDefinition( Guid definition )
        {
            throw new NotImplementedException();
        }

    }

    public class ReferencePropertyByValueEntityIndex
    {
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, ReferencePropertyEntity> _entries = new SortedWeakReferenceList<Guid, ReferencePropertyEntity>( );
            public ById( )
            {
            }

            public void Add( ReferencePropertyEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<ReferencePropertyEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out ReferencePropertyEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<ReferencePropertyEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<ReferencePropertyEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<ReferencePropertyEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<ReferencePropertyEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<Guid, ById> _entries = new SortedListEx<Guid, ById>( );

        public ReferencePropertyByValueEntityIndex( )
        {
        }

        public List<ReferencePropertyEntity> GetReferencePropertyCollectionByValue( Guid? value__ )
        {
            throw new NotImplementedException();
        }

        public IList<ReferencePropertyEntity> GetReferencePropertyCollectionByValueIsNull(  )
        {
            throw new NotImplementedException();
        }

    }

    public class ReferencePropertyByValueIsNullEntityIndex
    {
    }

    public class BinaryTimeseriesPropertyByTimeseriesEntityIndex
    {
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, BinaryTimeseriesPropertyEntity> _entries = new SortedWeakReferenceList<Guid, BinaryTimeseriesPropertyEntity>( );
            public ById( )
            {
            }

            public void Add( BinaryTimeseriesPropertyEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<BinaryTimeseriesPropertyEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out BinaryTimeseriesPropertyEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<BinaryTimeseriesPropertyEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<BinaryTimeseriesPropertyEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<BinaryTimeseriesPropertyEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<BinaryTimeseriesPropertyEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<Guid, ById> _entries = new SortedListEx<Guid, ById>( );

        public BinaryTimeseriesPropertyByTimeseriesEntityIndex( )
        {
        }

        public List<BinaryTimeseriesPropertyEntity> GetBinaryTimeseriesPropertyCollectionByTimeseries( Guid? timeseries )
        {
            throw new NotImplementedException();
        }

        public IList<BinaryTimeseriesPropertyEntity> GetBinaryTimeseriesPropertyCollectionByTimeseriesIsNull(  )
        {
            throw new NotImplementedException();
        }

    }

    public class BinaryTimeseriesPropertyByTimeseriesIsNullEntityIndex
    {
    }

    public class BooleanTimeseriesPropertyByTimeseriesEntityIndex
    {
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, BooleanTimeseriesPropertyEntity> _entries = new SortedWeakReferenceList<Guid, BooleanTimeseriesPropertyEntity>( );
            public ById( )
            {
            }

            public void Add( BooleanTimeseriesPropertyEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<BooleanTimeseriesPropertyEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out BooleanTimeseriesPropertyEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<BooleanTimeseriesPropertyEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<BooleanTimeseriesPropertyEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<BooleanTimeseriesPropertyEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<BooleanTimeseriesPropertyEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<Guid, ById> _entries = new SortedListEx<Guid, ById>( );

        public BooleanTimeseriesPropertyByTimeseriesEntityIndex( )
        {
        }

        public List<BooleanTimeseriesPropertyEntity> GetBooleanTimeseriesPropertyCollectionByTimeseries( Guid? timeseries )
        {
            throw new NotImplementedException();
        }

        public IList<BooleanTimeseriesPropertyEntity> GetBooleanTimeseriesPropertyCollectionByTimeseriesIsNull(  )
        {
            throw new NotImplementedException();
        }

    }

    public class BooleanTimeseriesPropertyByTimeseriesIsNullEntityIndex
    {
    }

    public class ByteTimeseriesPropertyByTimeseriesEntityIndex
    {
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, ByteTimeseriesPropertyEntity> _entries = new SortedWeakReferenceList<Guid, ByteTimeseriesPropertyEntity>( );
            public ById( )
            {
            }

            public void Add( ByteTimeseriesPropertyEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<ByteTimeseriesPropertyEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out ByteTimeseriesPropertyEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<ByteTimeseriesPropertyEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<ByteTimeseriesPropertyEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<ByteTimeseriesPropertyEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<ByteTimeseriesPropertyEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<Guid, ById> _entries = new SortedListEx<Guid, ById>( );

        public ByteTimeseriesPropertyByTimeseriesEntityIndex( )
        {
        }

        public List<ByteTimeseriesPropertyEntity> GetByteTimeseriesPropertyCollectionByTimeseries( Guid? timeseries )
        {
            throw new NotImplementedException();
        }

        public IList<ByteTimeseriesPropertyEntity> GetByteTimeseriesPropertyCollectionByTimeseriesIsNull(  )
        {
            throw new NotImplementedException();
        }

    }

    public class ByteTimeseriesPropertyByTimeseriesIsNullEntityIndex
    {
    }

    public class DateTimeTimeseriesPropertyByTimeseriesEntityIndex
    {
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, DateTimeTimeseriesPropertyEntity> _entries = new SortedWeakReferenceList<Guid, DateTimeTimeseriesPropertyEntity>( );
            public ById( )
            {
            }

            public void Add( DateTimeTimeseriesPropertyEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<DateTimeTimeseriesPropertyEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out DateTimeTimeseriesPropertyEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<DateTimeTimeseriesPropertyEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<DateTimeTimeseriesPropertyEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<DateTimeTimeseriesPropertyEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<DateTimeTimeseriesPropertyEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<Guid, ById> _entries = new SortedListEx<Guid, ById>( );

        public DateTimeTimeseriesPropertyByTimeseriesEntityIndex( )
        {
        }

        public List<DateTimeTimeseriesPropertyEntity> GetDateTimeTimeseriesPropertyCollectionByTimeseries( Guid? timeseries )
        {
            throw new NotImplementedException();
        }

        public IList<DateTimeTimeseriesPropertyEntity> GetDateTimeTimeseriesPropertyCollectionByTimeseriesIsNull(  )
        {
            throw new NotImplementedException();
        }

    }

    public class DateTimeTimeseriesPropertyByTimeseriesIsNullEntityIndex
    {
    }

    public class DoubleTimeseriesPropertyByTimeseriesEntityIndex
    {
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, DoubleTimeseriesPropertyEntity> _entries = new SortedWeakReferenceList<Guid, DoubleTimeseriesPropertyEntity>( );
            public ById( )
            {
            }

            public void Add( DoubleTimeseriesPropertyEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<DoubleTimeseriesPropertyEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out DoubleTimeseriesPropertyEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<DoubleTimeseriesPropertyEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<DoubleTimeseriesPropertyEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<DoubleTimeseriesPropertyEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<DoubleTimeseriesPropertyEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<Guid, ById> _entries = new SortedListEx<Guid, ById>( );

        public DoubleTimeseriesPropertyByTimeseriesEntityIndex( )
        {
        }

        public List<DoubleTimeseriesPropertyEntity> GetDoubleTimeseriesPropertyCollectionByTimeseries( Guid? timeseries )
        {
            throw new NotImplementedException();
        }

        public IList<DoubleTimeseriesPropertyEntity> GetDoubleTimeseriesPropertyCollectionByTimeseriesIsNull(  )
        {
            throw new NotImplementedException();
        }

    }

    public class DoubleTimeseriesPropertyByTimeseriesIsNullEntityIndex
    {
    }

    public class GuidTimeseriesPropertyByTimeseriesEntityIndex
    {
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, GuidTimeseriesPropertyEntity> _entries = new SortedWeakReferenceList<Guid, GuidTimeseriesPropertyEntity>( );
            public ById( )
            {
            }

            public void Add( GuidTimeseriesPropertyEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<GuidTimeseriesPropertyEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out GuidTimeseriesPropertyEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<GuidTimeseriesPropertyEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<GuidTimeseriesPropertyEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<GuidTimeseriesPropertyEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<GuidTimeseriesPropertyEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<Guid, ById> _entries = new SortedListEx<Guid, ById>( );

        public GuidTimeseriesPropertyByTimeseriesEntityIndex( )
        {
        }

        public List<GuidTimeseriesPropertyEntity> GetGuidTimeseriesPropertyCollectionByTimeseries( Guid? timeseries )
        {
            throw new NotImplementedException();
        }

        public IList<GuidTimeseriesPropertyEntity> GetGuidTimeseriesPropertyCollectionByTimeseriesIsNull(  )
        {
            throw new NotImplementedException();
        }

    }

    public class GuidTimeseriesPropertyByTimeseriesIsNullEntityIndex
    {
    }

    public class Int16TimeseriesPropertyByTimeseriesEntityIndex
    {
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, Int16TimeseriesPropertyEntity> _entries = new SortedWeakReferenceList<Guid, Int16TimeseriesPropertyEntity>( );
            public ById( )
            {
            }

            public void Add( Int16TimeseriesPropertyEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<Int16TimeseriesPropertyEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out Int16TimeseriesPropertyEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<Int16TimeseriesPropertyEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<Int16TimeseriesPropertyEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<Int16TimeseriesPropertyEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<Int16TimeseriesPropertyEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<Guid, ById> _entries = new SortedListEx<Guid, ById>( );

        public Int16TimeseriesPropertyByTimeseriesEntityIndex( )
        {
        }

        public List<Int16TimeseriesPropertyEntity> GetInt16TimeseriesPropertyCollectionByTimeseries( Guid? timeseries )
        {
            throw new NotImplementedException();
        }

        public IList<Int16TimeseriesPropertyEntity> GetInt16TimeseriesPropertyCollectionByTimeseriesIsNull(  )
        {
            throw new NotImplementedException();
        }

    }

    public class Int16TimeseriesPropertyByTimeseriesIsNullEntityIndex
    {
    }

    public class Int32TimeseriesPropertyByTimeseriesEntityIndex
    {
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, Int32TimeseriesPropertyEntity> _entries = new SortedWeakReferenceList<Guid, Int32TimeseriesPropertyEntity>( );
            public ById( )
            {
            }

            public void Add( Int32TimeseriesPropertyEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<Int32TimeseriesPropertyEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out Int32TimeseriesPropertyEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<Int32TimeseriesPropertyEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<Int32TimeseriesPropertyEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<Int32TimeseriesPropertyEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<Int32TimeseriesPropertyEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<Guid, ById> _entries = new SortedListEx<Guid, ById>( );

        public Int32TimeseriesPropertyByTimeseriesEntityIndex( )
        {
        }

        public List<Int32TimeseriesPropertyEntity> GetInt32TimeseriesPropertyCollectionByTimeseries( Guid? timeseries )
        {
            throw new NotImplementedException();
        }

        public IList<Int32TimeseriesPropertyEntity> GetInt32TimeseriesPropertyCollectionByTimeseriesIsNull(  )
        {
            throw new NotImplementedException();
        }

    }

    public class Int32TimeseriesPropertyByTimeseriesIsNullEntityIndex
    {
    }

    public class Int64TimeseriesPropertyByTimeseriesEntityIndex
    {
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, Int64TimeseriesPropertyEntity> _entries = new SortedWeakReferenceList<Guid, Int64TimeseriesPropertyEntity>( );
            public ById( )
            {
            }

            public void Add( Int64TimeseriesPropertyEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<Int64TimeseriesPropertyEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out Int64TimeseriesPropertyEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<Int64TimeseriesPropertyEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<Int64TimeseriesPropertyEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<Int64TimeseriesPropertyEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<Int64TimeseriesPropertyEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<Guid, ById> _entries = new SortedListEx<Guid, ById>( );

        public Int64TimeseriesPropertyByTimeseriesEntityIndex( )
        {
        }

        public List<Int64TimeseriesPropertyEntity> GetInt64TimeseriesPropertyCollectionByTimeseries( Guid? timeseries )
        {
            throw new NotImplementedException();
        }

        public IList<Int64TimeseriesPropertyEntity> GetInt64TimeseriesPropertyCollectionByTimeseriesIsNull(  )
        {
            throw new NotImplementedException();
        }

    }

    public class Int64TimeseriesPropertyByTimeseriesIsNullEntityIndex
    {
    }

    public class ReferenceTimeseriesPropertyByTimeseriesEntityIndex
    {
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, ReferenceTimeseriesPropertyEntity> _entries = new SortedWeakReferenceList<Guid, ReferenceTimeseriesPropertyEntity>( );
            public ById( )
            {
            }

            public void Add( ReferenceTimeseriesPropertyEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<ReferenceTimeseriesPropertyEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out ReferenceTimeseriesPropertyEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<ReferenceTimeseriesPropertyEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<ReferenceTimeseriesPropertyEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<ReferenceTimeseriesPropertyEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<ReferenceTimeseriesPropertyEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<Guid, ById> _entries = new SortedListEx<Guid, ById>( );

        public ReferenceTimeseriesPropertyByTimeseriesEntityIndex( )
        {
        }

        public List<ReferenceTimeseriesPropertyEntity> GetReferenceTimeseriesPropertyCollectionByTimeseries( Guid? timeseries )
        {
            throw new NotImplementedException();
        }

        public IList<ReferenceTimeseriesPropertyEntity> GetReferenceTimeseriesPropertyCollectionByTimeseriesIsNull(  )
        {
            throw new NotImplementedException();
        }

    }

    public class ReferenceTimeseriesPropertyByTimeseriesIsNullEntityIndex
    {
    }

    public class SByteTimeseriesPropertyByTimeseriesEntityIndex
    {
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, SByteTimeseriesPropertyEntity> _entries = new SortedWeakReferenceList<Guid, SByteTimeseriesPropertyEntity>( );
            public ById( )
            {
            }

            public void Add( SByteTimeseriesPropertyEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<SByteTimeseriesPropertyEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out SByteTimeseriesPropertyEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<SByteTimeseriesPropertyEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<SByteTimeseriesPropertyEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<SByteTimeseriesPropertyEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<SByteTimeseriesPropertyEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<Guid, ById> _entries = new SortedListEx<Guid, ById>( );

        public SByteTimeseriesPropertyByTimeseriesEntityIndex( )
        {
        }

        public List<SByteTimeseriesPropertyEntity> GetSByteTimeseriesPropertyCollectionByTimeseries( Guid? timeseries )
        {
            throw new NotImplementedException();
        }

        public IList<SByteTimeseriesPropertyEntity> GetSByteTimeseriesPropertyCollectionByTimeseriesIsNull(  )
        {
            throw new NotImplementedException();
        }

    }

    public class SByteTimeseriesPropertyByTimeseriesIsNullEntityIndex
    {
    }

    public class SingleTimeseriesPropertyByTimeseriesEntityIndex
    {
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, SingleTimeseriesPropertyEntity> _entries = new SortedWeakReferenceList<Guid, SingleTimeseriesPropertyEntity>( );
            public ById( )
            {
            }

            public void Add( SingleTimeseriesPropertyEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<SingleTimeseriesPropertyEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out SingleTimeseriesPropertyEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<SingleTimeseriesPropertyEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<SingleTimeseriesPropertyEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<SingleTimeseriesPropertyEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<SingleTimeseriesPropertyEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<Guid, ById> _entries = new SortedListEx<Guid, ById>( );

        public SingleTimeseriesPropertyByTimeseriesEntityIndex( )
        {
        }

        public List<SingleTimeseriesPropertyEntity> GetSingleTimeseriesPropertyCollectionByTimeseries( Guid? timeseries )
        {
            throw new NotImplementedException();
        }

        public IList<SingleTimeseriesPropertyEntity> GetSingleTimeseriesPropertyCollectionByTimeseriesIsNull(  )
        {
            throw new NotImplementedException();
        }

    }

    public class SingleTimeseriesPropertyByTimeseriesIsNullEntityIndex
    {
    }

    public class StringTimeseriesPropertyByTimeseriesEntityIndex
    {
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, StringTimeseriesPropertyEntity> _entries = new SortedWeakReferenceList<Guid, StringTimeseriesPropertyEntity>( );
            public ById( )
            {
            }

            public void Add( StringTimeseriesPropertyEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<StringTimeseriesPropertyEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out StringTimeseriesPropertyEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<StringTimeseriesPropertyEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<StringTimeseriesPropertyEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<StringTimeseriesPropertyEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<StringTimeseriesPropertyEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<Guid, ById> _entries = new SortedListEx<Guid, ById>( );

        public StringTimeseriesPropertyByTimeseriesEntityIndex( )
        {
        }

        public List<StringTimeseriesPropertyEntity> GetStringTimeseriesPropertyCollectionByTimeseries( Guid? timeseries )
        {
            throw new NotImplementedException();
        }

        public IList<StringTimeseriesPropertyEntity> GetStringTimeseriesPropertyCollectionByTimeseriesIsNull(  )
        {
            throw new NotImplementedException();
        }

    }

    public class StringTimeseriesPropertyByTimeseriesIsNullEntityIndex
    {
    }

    public class TimeSpanTimeseriesPropertyByTimeseriesEntityIndex
    {
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, TimeSpanTimeseriesPropertyEntity> _entries = new SortedWeakReferenceList<Guid, TimeSpanTimeseriesPropertyEntity>( );
            public ById( )
            {
            }

            public void Add( TimeSpanTimeseriesPropertyEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<TimeSpanTimeseriesPropertyEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out TimeSpanTimeseriesPropertyEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<TimeSpanTimeseriesPropertyEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<TimeSpanTimeseriesPropertyEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<TimeSpanTimeseriesPropertyEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<TimeSpanTimeseriesPropertyEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<Guid, ById> _entries = new SortedListEx<Guid, ById>( );

        public TimeSpanTimeseriesPropertyByTimeseriesEntityIndex( )
        {
        }

        public List<TimeSpanTimeseriesPropertyEntity> GetTimeSpanTimeseriesPropertyCollectionByTimeseries( Guid? timeseries )
        {
            throw new NotImplementedException();
        }

        public IList<TimeSpanTimeseriesPropertyEntity> GetTimeSpanTimeseriesPropertyCollectionByTimeseriesIsNull(  )
        {
            throw new NotImplementedException();
        }

    }

    public class TimeSpanTimeseriesPropertyByTimeseriesIsNullEntityIndex
    {
    }

    public class UInt16TimeseriesPropertyByTimeseriesEntityIndex
    {
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, UInt16TimeseriesPropertyEntity> _entries = new SortedWeakReferenceList<Guid, UInt16TimeseriesPropertyEntity>( );
            public ById( )
            {
            }

            public void Add( UInt16TimeseriesPropertyEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<UInt16TimeseriesPropertyEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out UInt16TimeseriesPropertyEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<UInt16TimeseriesPropertyEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<UInt16TimeseriesPropertyEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<UInt16TimeseriesPropertyEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<UInt16TimeseriesPropertyEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<Guid, ById> _entries = new SortedListEx<Guid, ById>( );

        public UInt16TimeseriesPropertyByTimeseriesEntityIndex( )
        {
        }

        public List<UInt16TimeseriesPropertyEntity> GetUInt16TimeseriesPropertyCollectionByTimeseries( Guid? timeseries )
        {
            throw new NotImplementedException();
        }

        public IList<UInt16TimeseriesPropertyEntity> GetUInt16TimeseriesPropertyCollectionByTimeseriesIsNull(  )
        {
            throw new NotImplementedException();
        }

    }

    public class UInt16TimeseriesPropertyByTimeseriesIsNullEntityIndex
    {
    }

    public class UInt32TimeseriesPropertyByTimeseriesEntityIndex
    {
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, UInt32TimeseriesPropertyEntity> _entries = new SortedWeakReferenceList<Guid, UInt32TimeseriesPropertyEntity>( );
            public ById( )
            {
            }

            public void Add( UInt32TimeseriesPropertyEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<UInt32TimeseriesPropertyEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out UInt32TimeseriesPropertyEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<UInt32TimeseriesPropertyEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<UInt32TimeseriesPropertyEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<UInt32TimeseriesPropertyEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<UInt32TimeseriesPropertyEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<Guid, ById> _entries = new SortedListEx<Guid, ById>( );

        public UInt32TimeseriesPropertyByTimeseriesEntityIndex( )
        {
        }

        public List<UInt32TimeseriesPropertyEntity> GetUInt32TimeseriesPropertyCollectionByTimeseries( Guid? timeseries )
        {
            throw new NotImplementedException();
        }

        public IList<UInt32TimeseriesPropertyEntity> GetUInt32TimeseriesPropertyCollectionByTimeseriesIsNull(  )
        {
            throw new NotImplementedException();
        }

    }

    public class UInt32TimeseriesPropertyByTimeseriesIsNullEntityIndex
    {
    }

    public class UInt64TimeseriesPropertyByTimeseriesEntityIndex
    {
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, UInt64TimeseriesPropertyEntity> _entries = new SortedWeakReferenceList<Guid, UInt64TimeseriesPropertyEntity>( );
            public ById( )
            {
            }

            public void Add( UInt64TimeseriesPropertyEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<UInt64TimeseriesPropertyEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out UInt64TimeseriesPropertyEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<UInt64TimeseriesPropertyEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<UInt64TimeseriesPropertyEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<UInt64TimeseriesPropertyEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<UInt64TimeseriesPropertyEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<Guid, ById> _entries = new SortedListEx<Guid, ById>( );

        public UInt64TimeseriesPropertyByTimeseriesEntityIndex( )
        {
        }

        public List<UInt64TimeseriesPropertyEntity> GetUInt64TimeseriesPropertyCollectionByTimeseries( Guid? timeseries )
        {
            throw new NotImplementedException();
        }

        public IList<UInt64TimeseriesPropertyEntity> GetUInt64TimeseriesPropertyCollectionByTimeseriesIsNull(  )
        {
            throw new NotImplementedException();
        }

    }

    public class UInt64TimeseriesPropertyByTimeseriesIsNullEntityIndex
    {
    }

    public class PropertyDefinitionByElementTypeAndNameEntityIndex
    {
        public class ByName
        {
            readonly SortedWeakReferenceList<string, PropertyDefinitionEntity> _entries = new SortedWeakReferenceList<string, PropertyDefinitionEntity>( );

            public ByName( )
            {
            }

            public void Add( PropertyDefinitionEntity entity )
            {
                if( _entries.TryGetValue(entity.Name, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Name, new WeakReference<PropertyDefinitionEntity>( entity, false ) );
                }
            }

            public bool GetByName( string name, out PropertyDefinitionEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( name, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( name );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(string key, [DisallowNull] IList<PropertyDefinitionEntity> result )
            {
                return _entries.From( key, result );
            }

            public bool GetUntil(string key, [DisallowNull] IList<PropertyDefinitionEntity> result )
            {
                return _entries.Until( key, result );
            }

            public bool GetOver(string firstKey, string lastKey, [DisallowNull] IList<PropertyDefinitionEntity> result )
            {
                return _entries.Over( firstKey, lastKey, result );
            }

            public bool GetAll([DisallowNull] IList<PropertyDefinitionEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<string, ByName> _entries = new SortedListEx<string, ByName>( );
        public List<PropertyDefinitionEntity> GetPropertyDefinitionCollectionByElementType( Guid elementType )
        {
            throw new NotImplementedException();
        }

        public PropertyDefinitionEntity? GetPropertyDefinitionByElementTypeAndName( Guid elementType, string name )
        {
            throw new NotImplementedException();
        }

    }
    public class ReferencePropertyDefinitionByDefaultValueEntityIndex
    {
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, ReferencePropertyDefinitionEntity> _entries = new SortedWeakReferenceList<Guid, ReferencePropertyDefinitionEntity>( );
            public ById( )
            {
            }

            public void Add( ReferencePropertyDefinitionEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<ReferencePropertyDefinitionEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out ReferencePropertyDefinitionEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<ReferencePropertyDefinitionEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<ReferencePropertyDefinitionEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<ReferencePropertyDefinitionEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<ReferencePropertyDefinitionEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<Guid, ById> _entries = new SortedListEx<Guid, ById>( );

        public ReferencePropertyDefinitionByDefaultValueEntityIndex( )
        {
        }

        public List<ReferencePropertyDefinitionEntity> GetReferencePropertyDefinitionCollectionByDefaultValue( Guid? defaultValue )
        {
            throw new NotImplementedException();
        }

        public IList<ReferencePropertyDefinitionEntity> GetReferencePropertyDefinitionCollectionByDefaultValueIsNull(  )
        {
            throw new NotImplementedException();
        }

    }

    public class ReferencePropertyDefinitionByDefaultValueIsNullEntityIndex
    {
    }

    public class ReferencePropertyDefinitionByReferencedElementTypeEntityIndex
    {
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, ReferencePropertyDefinitionEntity> _entries = new SortedWeakReferenceList<Guid, ReferencePropertyDefinitionEntity>( );
            public ById( )
            {
            }

            public void Add( ReferencePropertyDefinitionEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<ReferencePropertyDefinitionEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out ReferencePropertyDefinitionEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<ReferencePropertyDefinitionEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<ReferencePropertyDefinitionEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<ReferencePropertyDefinitionEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<ReferencePropertyDefinitionEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<Guid, ById> _entries = new SortedListEx<Guid, ById>( );

        public ReferencePropertyDefinitionByReferencedElementTypeEntityIndex( )
        {
        }

        public List<ReferencePropertyDefinitionEntity> GetReferencePropertyDefinitionCollectionByReferencedElementType( Guid? referencedElementType )
        {
            throw new NotImplementedException();
        }

        public IList<ReferencePropertyDefinitionEntity> GetReferencePropertyDefinitionCollectionByReferencedElementTypeIsNull(  )
        {
            throw new NotImplementedException();
        }

    }

    public class ReferencePropertyDefinitionByReferencedElementTypeIsNullEntityIndex
    {
    }

    public class ReferenceTimeseriesPropertyDefinitionByReferencedElementTypeEntityIndex
    {
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, ReferenceTimeseriesPropertyDefinitionEntity> _entries = new SortedWeakReferenceList<Guid, ReferenceTimeseriesPropertyDefinitionEntity>( );
            public ById( )
            {
            }

            public void Add( ReferenceTimeseriesPropertyDefinitionEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<ReferenceTimeseriesPropertyDefinitionEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out ReferenceTimeseriesPropertyDefinitionEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<ReferenceTimeseriesPropertyDefinitionEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<ReferenceTimeseriesPropertyDefinitionEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<ReferenceTimeseriesPropertyDefinitionEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<ReferenceTimeseriesPropertyDefinitionEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<Guid, ById> _entries = new SortedListEx<Guid, ById>( );

        public ReferenceTimeseriesPropertyDefinitionByReferencedElementTypeEntityIndex( )
        {
        }

        public List<ReferenceTimeseriesPropertyDefinitionEntity> GetReferenceTimeseriesPropertyDefinitionCollectionByReferencedElementType( Guid? referencedElementType )
        {
            throw new NotImplementedException();
        }

        public IList<ReferenceTimeseriesPropertyDefinitionEntity> GetReferenceTimeseriesPropertyDefinitionCollectionByReferencedElementTypeIsNull(  )
        {
            throw new NotImplementedException();
        }

    }

    public class ReferenceTimeseriesPropertyDefinitionByReferencedElementTypeIsNullEntityIndex
    {
    }

    public class RadarAlarmStatusByRadarAndTimestampEntityIndex
    {
        public class ByTimestamp
        {
            readonly SortedWeakReferenceList<DateTime, RadarAlarmStatusEntity> _entries = new SortedWeakReferenceList<DateTime, RadarAlarmStatusEntity>( );

            public ByTimestamp( )
            {
            }

            public void Add( RadarAlarmStatusEntity entity )
            {
                if( _entries.TryGetValue(entity.Timestamp, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Timestamp, new WeakReference<RadarAlarmStatusEntity>( entity, false ) );
                }
            }

            public bool GetByTimestamp( DateTime timestamp, out RadarAlarmStatusEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( timestamp, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( timestamp );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(DateTime key, [DisallowNull] IList<RadarAlarmStatusEntity> result )
            {
                return _entries.From( key, result );
            }

            public bool GetUntil(DateTime key, [DisallowNull] IList<RadarAlarmStatusEntity> result )
            {
                return _entries.Until( key, result );
            }

            public bool GetOver(DateTime firstKey, DateTime lastKey, [DisallowNull] IList<RadarAlarmStatusEntity> result )
            {
                return _entries.Over( firstKey, lastKey, result );
            }

            public bool GetAll([DisallowNull] IList<RadarAlarmStatusEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<DateTime, ByTimestamp> _entries = new SortedListEx<DateTime, ByTimestamp>( );
        public List<RadarAlarmStatusEntity> GetRadarAlarmStatusCollectionByRadar( Guid radar )
        {
            throw new NotImplementedException();
        }

        public RadarAlarmStatusEntity? GetRadarAlarmStatusByRadarAndTimestamp( Guid radar, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public RadarAlarmStatusEntity? GetRadarAlarmStatusByRadarAtTimestamp( Guid radar, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<RadarAlarmStatusEntity> GetRadarAlarmStatusByRadarFromTimestamp( Guid radar, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<RadarAlarmStatusEntity> GetRadarAlarmStatusByRadarUntilTimestamp( Guid radar, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        IList<RadarAlarmStatusEntity> GetRadarAlarmStatusByRadarOverTimestamp( Guid radar, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

    }
    public class RadarAlarmStatusByTimestampEntityIndex
    {
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, RadarAlarmStatusEntity> _entries = new SortedWeakReferenceList<Guid, RadarAlarmStatusEntity>( );
            public ById( )
            {
            }

            public void Add( RadarAlarmStatusEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<RadarAlarmStatusEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out RadarAlarmStatusEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<RadarAlarmStatusEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<RadarAlarmStatusEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<RadarAlarmStatusEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<RadarAlarmStatusEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<DateTime, ById> _entries = new SortedListEx<DateTime, ById>( );

        public RadarAlarmStatusByTimestampEntityIndex( )
        {
        }

        public List<RadarAlarmStatusEntity> GetRadarAlarmStatusCollectionByTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<RadarAlarmStatusEntity> GetRadarAlarmStatusCollectionAtTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<RadarAlarmStatusEntity> GetRadarAlarmStatusCollectionFromTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<RadarAlarmStatusEntity> GetRadarAlarmStatusCollectionUntilTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        IList<RadarAlarmStatusEntity> GetRadarAlarmStatusCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

    }

    public class RadarCommandByRadarAndTimestampEntityIndex
    {
        public class ByTimestamp
        {
            readonly SortedListEx<DateTime, ById> _entries = new SortedListEx<DateTime, ById>( );
            List<DateTime> _emptyKeys = new List<DateTime>( );

            public ByTimestamp( )
            {
            }

            void RemoveEmptyKeys( )
            {
                var emptyKeyCount = _emptyKeys.Count;
                for ( int i = 0; i < emptyKeyCount; i++ )
                {
                    _entries.Remove( _emptyKeys[ i ] );
                }
                _emptyKeys.Clear( );
            }

            public bool GetAll([DisallowNull] IList<RadarCommandEntity> result )
            {
                foreach( var entry in _entries )
                {
                    if( entry.Value.GetAll( result ) == false )
                    {
                        _emptyKeys.Add( entry.Key );
                    }
                }
                RemoveEmptyKeys( );
                return _entries.Count > 0;
            }

        }
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, RadarCommandEntity> _entries = new SortedWeakReferenceList<Guid, RadarCommandEntity>( );
            public ById( )
            {
            }

            public void Add( RadarCommandEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<RadarCommandEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out RadarCommandEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<RadarCommandEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<RadarCommandEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<RadarCommandEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<RadarCommandEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<Guid, ByTimestamp> _entries = new SortedListEx<Guid, ByTimestamp>( );

        public RadarCommandByRadarAndTimestampEntityIndex( )
        {
        }

        public List<RadarCommandEntity> GetRadarCommandCollectionByRadar( Guid radar )
        {
            throw new NotImplementedException();
        }

        public List<RadarCommandEntity> GetRadarCommandCollectionByRadarAndTimestamp( Guid radar, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<RadarCommandEntity> GetRadarCommandCollectionByRadarAtTimestamp( Guid radar, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<RadarCommandEntity> GetRadarCommandCollectionByRadarFromTimestamp( Guid radar, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<RadarCommandEntity> GetRadarCommandCollectionByRadarUntilTimestamp( Guid radar, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        IList<RadarCommandEntity> GetRadarCommandCollectionByRadarOverTimestamp( Guid radar, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

    }

    public class RadarCommandByTimestampEntityIndex
    {
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, RadarCommandEntity> _entries = new SortedWeakReferenceList<Guid, RadarCommandEntity>( );
            public ById( )
            {
            }

            public void Add( RadarCommandEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<RadarCommandEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out RadarCommandEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<RadarCommandEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<RadarCommandEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<RadarCommandEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<RadarCommandEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<DateTime, ById> _entries = new SortedListEx<DateTime, ById>( );

        public RadarCommandByTimestampEntityIndex( )
        {
        }

        public List<RadarCommandEntity> GetRadarCommandCollectionByTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<RadarCommandEntity> GetRadarCommandCollectionAtTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<RadarCommandEntity> GetRadarCommandCollectionFromTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<RadarCommandEntity> GetRadarCommandCollectionUntilTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        IList<RadarCommandEntity> GetRadarCommandCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

    }

    public class RadarCommandByReplyEntityIndex
    {
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, RadarCommandEntity> _entries = new SortedWeakReferenceList<Guid, RadarCommandEntity>( );
            public ById( )
            {
            }

            public void Add( RadarCommandEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<RadarCommandEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out RadarCommandEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<RadarCommandEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<RadarCommandEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<RadarCommandEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<RadarCommandEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<Guid, ById> _entries = new SortedListEx<Guid, ById>( );

        public RadarCommandByReplyEntityIndex( )
        {
        }

        public List<RadarCommandEntity> GetRadarCommandCollectionByReply( Guid? reply )
        {
            throw new NotImplementedException();
        }

        public IList<RadarCommandEntity> GetRadarCommandCollectionByReplyIsNull(  )
        {
            throw new NotImplementedException();
        }

    }

    public class RadarCommandByReplyIsNullEntityIndex
    {
    }

    public class RadarCommandReplyByRadarAndTimestampEntityIndex
    {
        public class ByTimestamp
        {
            readonly SortedListEx<DateTime, ById> _entries = new SortedListEx<DateTime, ById>( );
            List<DateTime> _emptyKeys = new List<DateTime>( );

            public ByTimestamp( )
            {
            }

            void RemoveEmptyKeys( )
            {
                var emptyKeyCount = _emptyKeys.Count;
                for ( int i = 0; i < emptyKeyCount; i++ )
                {
                    _entries.Remove( _emptyKeys[ i ] );
                }
                _emptyKeys.Clear( );
            }

            public bool GetAll([DisallowNull] IList<RadarCommandReplyEntity> result )
            {
                foreach( var entry in _entries )
                {
                    if( entry.Value.GetAll( result ) == false )
                    {
                        _emptyKeys.Add( entry.Key );
                    }
                }
                RemoveEmptyKeys( );
                return _entries.Count > 0;
            }

        }
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, RadarCommandReplyEntity> _entries = new SortedWeakReferenceList<Guid, RadarCommandReplyEntity>( );
            public ById( )
            {
            }

            public void Add( RadarCommandReplyEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<RadarCommandReplyEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out RadarCommandReplyEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<RadarCommandReplyEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<RadarCommandReplyEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<RadarCommandReplyEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<RadarCommandReplyEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<Guid, ByTimestamp> _entries = new SortedListEx<Guid, ByTimestamp>( );

        public RadarCommandReplyByRadarAndTimestampEntityIndex( )
        {
        }

        public List<RadarCommandReplyEntity> GetRadarCommandReplyCollectionByRadar( Guid radar )
        {
            throw new NotImplementedException();
        }

        public List<RadarCommandReplyEntity> GetRadarCommandReplyCollectionByRadarAndTimestamp( Guid radar, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<RadarCommandReplyEntity> GetRadarCommandReplyCollectionByRadarAtTimestamp( Guid radar, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<RadarCommandReplyEntity> GetRadarCommandReplyCollectionByRadarFromTimestamp( Guid radar, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<RadarCommandReplyEntity> GetRadarCommandReplyCollectionByRadarUntilTimestamp( Guid radar, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        IList<RadarCommandReplyEntity> GetRadarCommandReplyCollectionByRadarOverTimestamp( Guid radar, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

    }

    public class RadarCommandReplyByTimestampEntityIndex
    {
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, RadarCommandReplyEntity> _entries = new SortedWeakReferenceList<Guid, RadarCommandReplyEntity>( );
            public ById( )
            {
            }

            public void Add( RadarCommandReplyEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<RadarCommandReplyEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out RadarCommandReplyEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<RadarCommandReplyEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<RadarCommandReplyEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<RadarCommandReplyEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<RadarCommandReplyEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<DateTime, ById> _entries = new SortedListEx<DateTime, ById>( );

        public RadarCommandReplyByTimestampEntityIndex( )
        {
        }

        public List<RadarCommandReplyEntity> GetRadarCommandReplyCollectionByTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<RadarCommandReplyEntity> GetRadarCommandReplyCollectionAtTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<RadarCommandReplyEntity> GetRadarCommandReplyCollectionFromTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<RadarCommandReplyEntity> GetRadarCommandReplyCollectionUntilTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        IList<RadarCommandReplyEntity> GetRadarCommandReplyCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

    }

    public class RadarCommandReplyByCommandEntityIndex
    {
        readonly SortedWeakReferenceList<Guid, RadarCommandReplyEntity> _entries = new SortedWeakReferenceList<Guid, RadarCommandReplyEntity>( );

        public RadarCommandReplyByCommandEntityIndex( )
        {
        }

        public void Add( RadarCommandReplyEntity entity )
        {
            if ( entity.CommandId is Guid command )
            {
                if ( _entries.TryGetValue( command, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( command, new WeakReference<RadarCommandReplyEntity>( entity, false ) );
                }
            }
            else
            {
                throw new ArgumentException( "entity.CommandId is null.", nameof( entity ) );
            }
        }

        public bool GetByCommandId( Guid command, out RadarCommandReplyEntity? entity )
        {
            entity = null;
            if ( _entries.TryGetValue( command, out var weakReference ) )
            {
                if ( weakReference.TryGetTarget( out entity ) == false )
                {
                    _entries.Remove( command );
                }
            }
            return _entries.Count > 0;
        }

        public bool GetFrom(Guid key, [DisallowNull] IList<RadarCommandReplyEntity> result )
        {
            return _entries.From( key, result );
        }

        public bool GetUntil(Guid key, [DisallowNull] IList<RadarCommandReplyEntity> result )
        {
            return _entries.Until( key, result );
        }

        public bool GetOver(Guid firstKey, Guid lastKey, [DisallowNull] IList<RadarCommandReplyEntity> result )
        {
            return _entries.Over( firstKey, lastKey, result );
        }

        public bool GetAll([DisallowNull] IList<RadarCommandReplyEntity> result )
        {
            return _entries.All( result );
        }

        public RadarCommandReplyEntity? GetRadarCommandReplyByCommand( Guid? command )
        {
            throw new NotImplementedException();
        }

        public IList<RadarCommandReplyEntity> GetRadarCommandReplyCollectionByCommandIsNull(  )
        {
            throw new NotImplementedException();
        }

    }
    public class RadarCommandReplyByCommandIsNullEntityIndex
    {
    }

    public class RadarConfigurationByRadarAndTimestampEntityIndex
    {
        public class ByTimestamp
        {
            readonly SortedWeakReferenceList<DateTime, RadarConfigurationEntity> _entries = new SortedWeakReferenceList<DateTime, RadarConfigurationEntity>( );

            public ByTimestamp( )
            {
            }

            public void Add( RadarConfigurationEntity entity )
            {
                if( _entries.TryGetValue(entity.Timestamp, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Timestamp, new WeakReference<RadarConfigurationEntity>( entity, false ) );
                }
            }

            public bool GetByTimestamp( DateTime timestamp, out RadarConfigurationEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( timestamp, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( timestamp );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(DateTime key, [DisallowNull] IList<RadarConfigurationEntity> result )
            {
                return _entries.From( key, result );
            }

            public bool GetUntil(DateTime key, [DisallowNull] IList<RadarConfigurationEntity> result )
            {
                return _entries.Until( key, result );
            }

            public bool GetOver(DateTime firstKey, DateTime lastKey, [DisallowNull] IList<RadarConfigurationEntity> result )
            {
                return _entries.Over( firstKey, lastKey, result );
            }

            public bool GetAll([DisallowNull] IList<RadarConfigurationEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<DateTime, ByTimestamp> _entries = new SortedListEx<DateTime, ByTimestamp>( );
        public List<RadarConfigurationEntity> GetRadarConfigurationCollectionByRadar( Guid radar )
        {
            throw new NotImplementedException();
        }

        public RadarConfigurationEntity? GetRadarConfigurationByRadarAndTimestamp( Guid radar, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public RadarConfigurationEntity? GetRadarConfigurationByRadarAtTimestamp( Guid radar, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<RadarConfigurationEntity> GetRadarConfigurationByRadarFromTimestamp( Guid radar, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<RadarConfigurationEntity> GetRadarConfigurationByRadarUntilTimestamp( Guid radar, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        IList<RadarConfigurationEntity> GetRadarConfigurationByRadarOverTimestamp( Guid radar, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

    }
    public class RadarConfigurationByTimestampEntityIndex
    {
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, RadarConfigurationEntity> _entries = new SortedWeakReferenceList<Guid, RadarConfigurationEntity>( );
            public ById( )
            {
            }

            public void Add( RadarConfigurationEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<RadarConfigurationEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out RadarConfigurationEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<RadarConfigurationEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<RadarConfigurationEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<RadarConfigurationEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<RadarConfigurationEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<DateTime, ById> _entries = new SortedListEx<DateTime, ById>( );

        public RadarConfigurationByTimestampEntityIndex( )
        {
        }

        public List<RadarConfigurationEntity> GetRadarConfigurationCollectionByTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<RadarConfigurationEntity> GetRadarConfigurationCollectionAtTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<RadarConfigurationEntity> GetRadarConfigurationCollectionFromTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<RadarConfigurationEntity> GetRadarConfigurationCollectionUntilTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        IList<RadarConfigurationEntity> GetRadarConfigurationCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

    }

    public class RadarImageByRadarAndTimestampEntityIndex
    {
        public class ByTimestamp
        {
            readonly SortedWeakReferenceList<DateTime, RadarImageEntity> _entries = new SortedWeakReferenceList<DateTime, RadarImageEntity>( );

            public ByTimestamp( )
            {
            }

            public void Add( RadarImageEntity entity )
            {
                if( _entries.TryGetValue(entity.Timestamp, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Timestamp, new WeakReference<RadarImageEntity>( entity, false ) );
                }
            }

            public bool GetByTimestamp( DateTime timestamp, out RadarImageEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( timestamp, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( timestamp );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(DateTime key, [DisallowNull] IList<RadarImageEntity> result )
            {
                return _entries.From( key, result );
            }

            public bool GetUntil(DateTime key, [DisallowNull] IList<RadarImageEntity> result )
            {
                return _entries.Until( key, result );
            }

            public bool GetOver(DateTime firstKey, DateTime lastKey, [DisallowNull] IList<RadarImageEntity> result )
            {
                return _entries.Over( firstKey, lastKey, result );
            }

            public bool GetAll([DisallowNull] IList<RadarImageEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<DateTime, ByTimestamp> _entries = new SortedListEx<DateTime, ByTimestamp>( );
        public List<RadarImageEntity> GetRadarImageCollectionByRadar( Guid radar )
        {
            throw new NotImplementedException();
        }

        public RadarImageEntity? GetRadarImageByRadarAndTimestamp( Guid radar, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public RadarImageEntity? GetRadarImageByRadarAtTimestamp( Guid radar, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<RadarImageEntity> GetRadarImageByRadarFromTimestamp( Guid radar, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<RadarImageEntity> GetRadarImageByRadarUntilTimestamp( Guid radar, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        IList<RadarImageEntity> GetRadarImageByRadarOverTimestamp( Guid radar, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

    }
    public class RadarImageByTimestampEntityIndex
    {
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, RadarImageEntity> _entries = new SortedWeakReferenceList<Guid, RadarImageEntity>( );
            public ById( )
            {
            }

            public void Add( RadarImageEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<RadarImageEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out RadarImageEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<RadarImageEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<RadarImageEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<RadarImageEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<RadarImageEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<DateTime, ById> _entries = new SortedListEx<DateTime, ById>( );

        public RadarImageByTimestampEntityIndex( )
        {
        }

        public List<RadarImageEntity> GetRadarImageCollectionByTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<RadarImageEntity> GetRadarImageCollectionAtTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<RadarImageEntity> GetRadarImageCollectionFromTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<RadarImageEntity> GetRadarImageCollectionUntilTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        IList<RadarImageEntity> GetRadarImageCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

    }

    public class RadarRawTrackTableByRadarAndTimestampEntityIndex
    {
        public class ByTimestamp
        {
            readonly SortedWeakReferenceList<DateTime, RadarRawTrackTableEntity> _entries = new SortedWeakReferenceList<DateTime, RadarRawTrackTableEntity>( );

            public ByTimestamp( )
            {
            }

            public void Add( RadarRawTrackTableEntity entity )
            {
                if( _entries.TryGetValue(entity.Timestamp, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Timestamp, new WeakReference<RadarRawTrackTableEntity>( entity, false ) );
                }
            }

            public bool GetByTimestamp( DateTime timestamp, out RadarRawTrackTableEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( timestamp, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( timestamp );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(DateTime key, [DisallowNull] IList<RadarRawTrackTableEntity> result )
            {
                return _entries.From( key, result );
            }

            public bool GetUntil(DateTime key, [DisallowNull] IList<RadarRawTrackTableEntity> result )
            {
                return _entries.Until( key, result );
            }

            public bool GetOver(DateTime firstKey, DateTime lastKey, [DisallowNull] IList<RadarRawTrackTableEntity> result )
            {
                return _entries.Over( firstKey, lastKey, result );
            }

            public bool GetAll([DisallowNull] IList<RadarRawTrackTableEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<DateTime, ByTimestamp> _entries = new SortedListEx<DateTime, ByTimestamp>( );
        public List<RadarRawTrackTableEntity> GetRadarRawTrackTableCollectionByRadar( Guid radar )
        {
            throw new NotImplementedException();
        }

        public RadarRawTrackTableEntity? GetRadarRawTrackTableByRadarAndTimestamp( Guid radar, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public RadarRawTrackTableEntity? GetRadarRawTrackTableByRadarAtTimestamp( Guid radar, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<RadarRawTrackTableEntity> GetRadarRawTrackTableByRadarFromTimestamp( Guid radar, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<RadarRawTrackTableEntity> GetRadarRawTrackTableByRadarUntilTimestamp( Guid radar, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        IList<RadarRawTrackTableEntity> GetRadarRawTrackTableByRadarOverTimestamp( Guid radar, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

    }
    public class RadarRawTrackTableByTimestampEntityIndex
    {
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, RadarRawTrackTableEntity> _entries = new SortedWeakReferenceList<Guid, RadarRawTrackTableEntity>( );
            public ById( )
            {
            }

            public void Add( RadarRawTrackTableEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<RadarRawTrackTableEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out RadarRawTrackTableEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<RadarRawTrackTableEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<RadarRawTrackTableEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<RadarRawTrackTableEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<RadarRawTrackTableEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<DateTime, ById> _entries = new SortedListEx<DateTime, ById>( );

        public RadarRawTrackTableByTimestampEntityIndex( )
        {
        }

        public List<RadarRawTrackTableEntity> GetRadarRawTrackTableCollectionByTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<RadarRawTrackTableEntity> GetRadarRawTrackTableCollectionAtTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<RadarRawTrackTableEntity> GetRadarRawTrackTableCollectionFromTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<RadarRawTrackTableEntity> GetRadarRawTrackTableCollectionUntilTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        IList<RadarRawTrackTableEntity> GetRadarRawTrackTableCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

    }

    public class RadarStatusByRadarAndTimestampEntityIndex
    {
        public class ByTimestamp
        {
            readonly SortedWeakReferenceList<DateTime, RadarStatusEntity> _entries = new SortedWeakReferenceList<DateTime, RadarStatusEntity>( );

            public ByTimestamp( )
            {
            }

            public void Add( RadarStatusEntity entity )
            {
                if( _entries.TryGetValue(entity.Timestamp, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Timestamp, new WeakReference<RadarStatusEntity>( entity, false ) );
                }
            }

            public bool GetByTimestamp( DateTime timestamp, out RadarStatusEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( timestamp, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( timestamp );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(DateTime key, [DisallowNull] IList<RadarStatusEntity> result )
            {
                return _entries.From( key, result );
            }

            public bool GetUntil(DateTime key, [DisallowNull] IList<RadarStatusEntity> result )
            {
                return _entries.Until( key, result );
            }

            public bool GetOver(DateTime firstKey, DateTime lastKey, [DisallowNull] IList<RadarStatusEntity> result )
            {
                return _entries.Over( firstKey, lastKey, result );
            }

            public bool GetAll([DisallowNull] IList<RadarStatusEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<DateTime, ByTimestamp> _entries = new SortedListEx<DateTime, ByTimestamp>( );
        public List<RadarStatusEntity> GetRadarStatusCollectionByRadar( Guid radar )
        {
            throw new NotImplementedException();
        }

        public RadarStatusEntity? GetRadarStatusByRadarAndTimestamp( Guid radar, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public RadarStatusEntity? GetRadarStatusByRadarAtTimestamp( Guid radar, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<RadarStatusEntity> GetRadarStatusByRadarFromTimestamp( Guid radar, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<RadarStatusEntity> GetRadarStatusByRadarUntilTimestamp( Guid radar, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        IList<RadarStatusEntity> GetRadarStatusByRadarOverTimestamp( Guid radar, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

    }
    public class RadarStatusByTimestampEntityIndex
    {
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, RadarStatusEntity> _entries = new SortedWeakReferenceList<Guid, RadarStatusEntity>( );
            public ById( )
            {
            }

            public void Add( RadarStatusEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<RadarStatusEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out RadarStatusEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<RadarStatusEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<RadarStatusEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<RadarStatusEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<RadarStatusEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<DateTime, ById> _entries = new SortedListEx<DateTime, ById>( );

        public RadarStatusByTimestampEntityIndex( )
        {
        }

        public List<RadarStatusEntity> GetRadarStatusCollectionByTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<RadarStatusEntity> GetRadarStatusCollectionAtTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<RadarStatusEntity> GetRadarStatusCollectionFromTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<RadarStatusEntity> GetRadarStatusCollectionUntilTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        IList<RadarStatusEntity> GetRadarStatusCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

    }

    public class RadioCommandByRadioAndTimestampEntityIndex
    {
        public class ByTimestamp
        {
            readonly SortedListEx<DateTime, ById> _entries = new SortedListEx<DateTime, ById>( );
            List<DateTime> _emptyKeys = new List<DateTime>( );

            public ByTimestamp( )
            {
            }

            void RemoveEmptyKeys( )
            {
                var emptyKeyCount = _emptyKeys.Count;
                for ( int i = 0; i < emptyKeyCount; i++ )
                {
                    _entries.Remove( _emptyKeys[ i ] );
                }
                _emptyKeys.Clear( );
            }

            public bool GetAll([DisallowNull] IList<RadioCommandEntity> result )
            {
                foreach( var entry in _entries )
                {
                    if( entry.Value.GetAll( result ) == false )
                    {
                        _emptyKeys.Add( entry.Key );
                    }
                }
                RemoveEmptyKeys( );
                return _entries.Count > 0;
            }

        }
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, RadioCommandEntity> _entries = new SortedWeakReferenceList<Guid, RadioCommandEntity>( );
            public ById( )
            {
            }

            public void Add( RadioCommandEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<RadioCommandEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out RadioCommandEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<RadioCommandEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<RadioCommandEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<RadioCommandEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<RadioCommandEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<Guid, ByTimestamp> _entries = new SortedListEx<Guid, ByTimestamp>( );

        public RadioCommandByRadioAndTimestampEntityIndex( )
        {
        }

        public List<RadioCommandEntity> GetRadioCommandCollectionByRadio( Guid radio )
        {
            throw new NotImplementedException();
        }

        public List<RadioCommandEntity> GetRadioCommandCollectionByRadioAndTimestamp( Guid radio, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<RadioCommandEntity> GetRadioCommandCollectionByRadioAtTimestamp( Guid radio, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<RadioCommandEntity> GetRadioCommandCollectionByRadioFromTimestamp( Guid radio, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<RadioCommandEntity> GetRadioCommandCollectionByRadioUntilTimestamp( Guid radio, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        IList<RadioCommandEntity> GetRadioCommandCollectionByRadioOverTimestamp( Guid radio, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

    }

    public class RadioCommandByTimestampEntityIndex
    {
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, RadioCommandEntity> _entries = new SortedWeakReferenceList<Guid, RadioCommandEntity>( );
            public ById( )
            {
            }

            public void Add( RadioCommandEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<RadioCommandEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out RadioCommandEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<RadioCommandEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<RadioCommandEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<RadioCommandEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<RadioCommandEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<DateTime, ById> _entries = new SortedListEx<DateTime, ById>( );

        public RadioCommandByTimestampEntityIndex( )
        {
        }

        public List<RadioCommandEntity> GetRadioCommandCollectionByTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<RadioCommandEntity> GetRadioCommandCollectionAtTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<RadioCommandEntity> GetRadioCommandCollectionFromTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<RadioCommandEntity> GetRadioCommandCollectionUntilTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        IList<RadioCommandEntity> GetRadioCommandCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

    }

    public class RadioCommandByReplyEntityIndex
    {
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, RadioCommandEntity> _entries = new SortedWeakReferenceList<Guid, RadioCommandEntity>( );
            public ById( )
            {
            }

            public void Add( RadioCommandEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<RadioCommandEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out RadioCommandEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<RadioCommandEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<RadioCommandEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<RadioCommandEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<RadioCommandEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<Guid, ById> _entries = new SortedListEx<Guid, ById>( );

        public RadioCommandByReplyEntityIndex( )
        {
        }

        public List<RadioCommandEntity> GetRadioCommandCollectionByReply( Guid? reply )
        {
            throw new NotImplementedException();
        }

        public IList<RadioCommandEntity> GetRadioCommandCollectionByReplyIsNull(  )
        {
            throw new NotImplementedException();
        }

    }

    public class RadioCommandByReplyIsNullEntityIndex
    {
    }

    public class RadioCommandReplyByRadioAndTimestampEntityIndex
    {
        public class ByTimestamp
        {
            readonly SortedListEx<DateTime, ById> _entries = new SortedListEx<DateTime, ById>( );
            List<DateTime> _emptyKeys = new List<DateTime>( );

            public ByTimestamp( )
            {
            }

            void RemoveEmptyKeys( )
            {
                var emptyKeyCount = _emptyKeys.Count;
                for ( int i = 0; i < emptyKeyCount; i++ )
                {
                    _entries.Remove( _emptyKeys[ i ] );
                }
                _emptyKeys.Clear( );
            }

            public bool GetAll([DisallowNull] IList<RadioCommandReplyEntity> result )
            {
                foreach( var entry in _entries )
                {
                    if( entry.Value.GetAll( result ) == false )
                    {
                        _emptyKeys.Add( entry.Key );
                    }
                }
                RemoveEmptyKeys( );
                return _entries.Count > 0;
            }

        }
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, RadioCommandReplyEntity> _entries = new SortedWeakReferenceList<Guid, RadioCommandReplyEntity>( );
            public ById( )
            {
            }

            public void Add( RadioCommandReplyEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<RadioCommandReplyEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out RadioCommandReplyEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<RadioCommandReplyEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<RadioCommandReplyEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<RadioCommandReplyEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<RadioCommandReplyEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<Guid, ByTimestamp> _entries = new SortedListEx<Guid, ByTimestamp>( );

        public RadioCommandReplyByRadioAndTimestampEntityIndex( )
        {
        }

        public List<RadioCommandReplyEntity> GetRadioCommandReplyCollectionByRadio( Guid radio )
        {
            throw new NotImplementedException();
        }

        public List<RadioCommandReplyEntity> GetRadioCommandReplyCollectionByRadioAndTimestamp( Guid radio, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<RadioCommandReplyEntity> GetRadioCommandReplyCollectionByRadioAtTimestamp( Guid radio, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<RadioCommandReplyEntity> GetRadioCommandReplyCollectionByRadioFromTimestamp( Guid radio, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<RadioCommandReplyEntity> GetRadioCommandReplyCollectionByRadioUntilTimestamp( Guid radio, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        IList<RadioCommandReplyEntity> GetRadioCommandReplyCollectionByRadioOverTimestamp( Guid radio, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

    }

    public class RadioCommandReplyByTimestampEntityIndex
    {
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, RadioCommandReplyEntity> _entries = new SortedWeakReferenceList<Guid, RadioCommandReplyEntity>( );
            public ById( )
            {
            }

            public void Add( RadioCommandReplyEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<RadioCommandReplyEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out RadioCommandReplyEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<RadioCommandReplyEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<RadioCommandReplyEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<RadioCommandReplyEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<RadioCommandReplyEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<DateTime, ById> _entries = new SortedListEx<DateTime, ById>( );

        public RadioCommandReplyByTimestampEntityIndex( )
        {
        }

        public List<RadioCommandReplyEntity> GetRadioCommandReplyCollectionByTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<RadioCommandReplyEntity> GetRadioCommandReplyCollectionAtTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<RadioCommandReplyEntity> GetRadioCommandReplyCollectionFromTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<RadioCommandReplyEntity> GetRadioCommandReplyCollectionUntilTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        IList<RadioCommandReplyEntity> GetRadioCommandReplyCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

    }

    public class RadioCommandReplyByCommandEntityIndex
    {
        readonly SortedWeakReferenceList<Guid, RadioCommandReplyEntity> _entries = new SortedWeakReferenceList<Guid, RadioCommandReplyEntity>( );

        public RadioCommandReplyByCommandEntityIndex( )
        {
        }

        public void Add( RadioCommandReplyEntity entity )
        {
            if ( entity.CommandId is Guid command )
            {
                if ( _entries.TryGetValue( command, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( command, new WeakReference<RadioCommandReplyEntity>( entity, false ) );
                }
            }
            else
            {
                throw new ArgumentException( "entity.CommandId is null.", nameof( entity ) );
            }
        }

        public bool GetByCommandId( Guid command, out RadioCommandReplyEntity? entity )
        {
            entity = null;
            if ( _entries.TryGetValue( command, out var weakReference ) )
            {
                if ( weakReference.TryGetTarget( out entity ) == false )
                {
                    _entries.Remove( command );
                }
            }
            return _entries.Count > 0;
        }

        public bool GetFrom(Guid key, [DisallowNull] IList<RadioCommandReplyEntity> result )
        {
            return _entries.From( key, result );
        }

        public bool GetUntil(Guid key, [DisallowNull] IList<RadioCommandReplyEntity> result )
        {
            return _entries.Until( key, result );
        }

        public bool GetOver(Guid firstKey, Guid lastKey, [DisallowNull] IList<RadioCommandReplyEntity> result )
        {
            return _entries.Over( firstKey, lastKey, result );
        }

        public bool GetAll([DisallowNull] IList<RadioCommandReplyEntity> result )
        {
            return _entries.All( result );
        }

        public RadioCommandReplyEntity? GetRadioCommandReplyByCommand( Guid? command )
        {
            throw new NotImplementedException();
        }

        public IList<RadioCommandReplyEntity> GetRadioCommandReplyCollectionByCommandIsNull(  )
        {
            throw new NotImplementedException();
        }

    }
    public class RadioCommandReplyByCommandIsNullEntityIndex
    {
    }

    public class RadioConfigurationByRadioAndTimestampEntityIndex
    {
        public class ByTimestamp
        {
            readonly SortedWeakReferenceList<DateTime, RadioConfigurationEntity> _entries = new SortedWeakReferenceList<DateTime, RadioConfigurationEntity>( );

            public ByTimestamp( )
            {
            }

            public void Add( RadioConfigurationEntity entity )
            {
                if( _entries.TryGetValue(entity.Timestamp, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Timestamp, new WeakReference<RadioConfigurationEntity>( entity, false ) );
                }
            }

            public bool GetByTimestamp( DateTime timestamp, out RadioConfigurationEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( timestamp, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( timestamp );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(DateTime key, [DisallowNull] IList<RadioConfigurationEntity> result )
            {
                return _entries.From( key, result );
            }

            public bool GetUntil(DateTime key, [DisallowNull] IList<RadioConfigurationEntity> result )
            {
                return _entries.Until( key, result );
            }

            public bool GetOver(DateTime firstKey, DateTime lastKey, [DisallowNull] IList<RadioConfigurationEntity> result )
            {
                return _entries.Over( firstKey, lastKey, result );
            }

            public bool GetAll([DisallowNull] IList<RadioConfigurationEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<DateTime, ByTimestamp> _entries = new SortedListEx<DateTime, ByTimestamp>( );
        public List<RadioConfigurationEntity> GetRadioConfigurationCollectionByRadio( Guid radio )
        {
            throw new NotImplementedException();
        }

        public RadioConfigurationEntity? GetRadioConfigurationByRadioAndTimestamp( Guid radio, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public RadioConfigurationEntity? GetRadioConfigurationByRadioAtTimestamp( Guid radio, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<RadioConfigurationEntity> GetRadioConfigurationByRadioFromTimestamp( Guid radio, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<RadioConfigurationEntity> GetRadioConfigurationByRadioUntilTimestamp( Guid radio, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        IList<RadioConfigurationEntity> GetRadioConfigurationByRadioOverTimestamp( Guid radio, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

    }
    public class RadioConfigurationByTimestampEntityIndex
    {
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, RadioConfigurationEntity> _entries = new SortedWeakReferenceList<Guid, RadioConfigurationEntity>( );
            public ById( )
            {
            }

            public void Add( RadioConfigurationEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<RadioConfigurationEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out RadioConfigurationEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<RadioConfigurationEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<RadioConfigurationEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<RadioConfigurationEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<RadioConfigurationEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<DateTime, ById> _entries = new SortedListEx<DateTime, ById>( );

        public RadioConfigurationByTimestampEntityIndex( )
        {
        }

        public List<RadioConfigurationEntity> GetRadioConfigurationCollectionByTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<RadioConfigurationEntity> GetRadioConfigurationCollectionAtTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<RadioConfigurationEntity> GetRadioConfigurationCollectionFromTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<RadioConfigurationEntity> GetRadioConfigurationCollectionUntilTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        IList<RadioConfigurationEntity> GetRadioConfigurationCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

    }

    public class RadomeCommandByRadomeAndTimestampEntityIndex
    {
        public class ByTimestamp
        {
            readonly SortedListEx<DateTime, ById> _entries = new SortedListEx<DateTime, ById>( );
            List<DateTime> _emptyKeys = new List<DateTime>( );

            public ByTimestamp( )
            {
            }

            void RemoveEmptyKeys( )
            {
                var emptyKeyCount = _emptyKeys.Count;
                for ( int i = 0; i < emptyKeyCount; i++ )
                {
                    _entries.Remove( _emptyKeys[ i ] );
                }
                _emptyKeys.Clear( );
            }

            public bool GetAll([DisallowNull] IList<RadomeCommandEntity> result )
            {
                foreach( var entry in _entries )
                {
                    if( entry.Value.GetAll( result ) == false )
                    {
                        _emptyKeys.Add( entry.Key );
                    }
                }
                RemoveEmptyKeys( );
                return _entries.Count > 0;
            }

        }
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, RadomeCommandEntity> _entries = new SortedWeakReferenceList<Guid, RadomeCommandEntity>( );
            public ById( )
            {
            }

            public void Add( RadomeCommandEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<RadomeCommandEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out RadomeCommandEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<RadomeCommandEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<RadomeCommandEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<RadomeCommandEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<RadomeCommandEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<Guid, ByTimestamp> _entries = new SortedListEx<Guid, ByTimestamp>( );

        public RadomeCommandByRadomeAndTimestampEntityIndex( )
        {
        }

        public List<RadomeCommandEntity> GetRadomeCommandCollectionByRadome( Guid radome )
        {
            throw new NotImplementedException();
        }

        public List<RadomeCommandEntity> GetRadomeCommandCollectionByRadomeAndTimestamp( Guid radome, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<RadomeCommandEntity> GetRadomeCommandCollectionByRadomeAtTimestamp( Guid radome, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<RadomeCommandEntity> GetRadomeCommandCollectionByRadomeFromTimestamp( Guid radome, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<RadomeCommandEntity> GetRadomeCommandCollectionByRadomeUntilTimestamp( Guid radome, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        IList<RadomeCommandEntity> GetRadomeCommandCollectionByRadomeOverTimestamp( Guid radome, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

    }

    public class RadomeCommandByTimestampEntityIndex
    {
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, RadomeCommandEntity> _entries = new SortedWeakReferenceList<Guid, RadomeCommandEntity>( );
            public ById( )
            {
            }

            public void Add( RadomeCommandEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<RadomeCommandEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out RadomeCommandEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<RadomeCommandEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<RadomeCommandEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<RadomeCommandEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<RadomeCommandEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<DateTime, ById> _entries = new SortedListEx<DateTime, ById>( );

        public RadomeCommandByTimestampEntityIndex( )
        {
        }

        public List<RadomeCommandEntity> GetRadomeCommandCollectionByTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<RadomeCommandEntity> GetRadomeCommandCollectionAtTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<RadomeCommandEntity> GetRadomeCommandCollectionFromTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<RadomeCommandEntity> GetRadomeCommandCollectionUntilTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        IList<RadomeCommandEntity> GetRadomeCommandCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

    }

    public class RadomeCommandByReplyEntityIndex
    {
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, RadomeCommandEntity> _entries = new SortedWeakReferenceList<Guid, RadomeCommandEntity>( );
            public ById( )
            {
            }

            public void Add( RadomeCommandEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<RadomeCommandEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out RadomeCommandEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<RadomeCommandEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<RadomeCommandEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<RadomeCommandEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<RadomeCommandEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<Guid, ById> _entries = new SortedListEx<Guid, ById>( );

        public RadomeCommandByReplyEntityIndex( )
        {
        }

        public List<RadomeCommandEntity> GetRadomeCommandCollectionByReply( Guid? reply )
        {
            throw new NotImplementedException();
        }

        public IList<RadomeCommandEntity> GetRadomeCommandCollectionByReplyIsNull(  )
        {
            throw new NotImplementedException();
        }

    }

    public class RadomeCommandByReplyIsNullEntityIndex
    {
    }

    public class RadomeCommandReplyByRadomeAndTimestampEntityIndex
    {
        public class ByTimestamp
        {
            readonly SortedListEx<DateTime, ById> _entries = new SortedListEx<DateTime, ById>( );
            List<DateTime> _emptyKeys = new List<DateTime>( );

            public ByTimestamp( )
            {
            }

            void RemoveEmptyKeys( )
            {
                var emptyKeyCount = _emptyKeys.Count;
                for ( int i = 0; i < emptyKeyCount; i++ )
                {
                    _entries.Remove( _emptyKeys[ i ] );
                }
                _emptyKeys.Clear( );
            }

            public bool GetAll([DisallowNull] IList<RadomeCommandReplyEntity> result )
            {
                foreach( var entry in _entries )
                {
                    if( entry.Value.GetAll( result ) == false )
                    {
                        _emptyKeys.Add( entry.Key );
                    }
                }
                RemoveEmptyKeys( );
                return _entries.Count > 0;
            }

        }
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, RadomeCommandReplyEntity> _entries = new SortedWeakReferenceList<Guid, RadomeCommandReplyEntity>( );
            public ById( )
            {
            }

            public void Add( RadomeCommandReplyEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<RadomeCommandReplyEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out RadomeCommandReplyEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<RadomeCommandReplyEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<RadomeCommandReplyEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<RadomeCommandReplyEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<RadomeCommandReplyEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<Guid, ByTimestamp> _entries = new SortedListEx<Guid, ByTimestamp>( );

        public RadomeCommandReplyByRadomeAndTimestampEntityIndex( )
        {
        }

        public List<RadomeCommandReplyEntity> GetRadomeCommandReplyCollectionByRadome( Guid radome )
        {
            throw new NotImplementedException();
        }

        public List<RadomeCommandReplyEntity> GetRadomeCommandReplyCollectionByRadomeAndTimestamp( Guid radome, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<RadomeCommandReplyEntity> GetRadomeCommandReplyCollectionByRadomeAtTimestamp( Guid radome, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<RadomeCommandReplyEntity> GetRadomeCommandReplyCollectionByRadomeFromTimestamp( Guid radome, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<RadomeCommandReplyEntity> GetRadomeCommandReplyCollectionByRadomeUntilTimestamp( Guid radome, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        IList<RadomeCommandReplyEntity> GetRadomeCommandReplyCollectionByRadomeOverTimestamp( Guid radome, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

    }

    public class RadomeCommandReplyByTimestampEntityIndex
    {
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, RadomeCommandReplyEntity> _entries = new SortedWeakReferenceList<Guid, RadomeCommandReplyEntity>( );
            public ById( )
            {
            }

            public void Add( RadomeCommandReplyEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<RadomeCommandReplyEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out RadomeCommandReplyEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<RadomeCommandReplyEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<RadomeCommandReplyEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<RadomeCommandReplyEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<RadomeCommandReplyEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<DateTime, ById> _entries = new SortedListEx<DateTime, ById>( );

        public RadomeCommandReplyByTimestampEntityIndex( )
        {
        }

        public List<RadomeCommandReplyEntity> GetRadomeCommandReplyCollectionByTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<RadomeCommandReplyEntity> GetRadomeCommandReplyCollectionAtTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<RadomeCommandReplyEntity> GetRadomeCommandReplyCollectionFromTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<RadomeCommandReplyEntity> GetRadomeCommandReplyCollectionUntilTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        IList<RadomeCommandReplyEntity> GetRadomeCommandReplyCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

    }

    public class RadomeCommandReplyByCommandEntityIndex
    {
        readonly SortedWeakReferenceList<Guid, RadomeCommandReplyEntity> _entries = new SortedWeakReferenceList<Guid, RadomeCommandReplyEntity>( );

        public RadomeCommandReplyByCommandEntityIndex( )
        {
        }

        public void Add( RadomeCommandReplyEntity entity )
        {
            if ( entity.CommandId is Guid command )
            {
                if ( _entries.TryGetValue( command, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( command, new WeakReference<RadomeCommandReplyEntity>( entity, false ) );
                }
            }
            else
            {
                throw new ArgumentException( "entity.CommandId is null.", nameof( entity ) );
            }
        }

        public bool GetByCommandId( Guid command, out RadomeCommandReplyEntity? entity )
        {
            entity = null;
            if ( _entries.TryGetValue( command, out var weakReference ) )
            {
                if ( weakReference.TryGetTarget( out entity ) == false )
                {
                    _entries.Remove( command );
                }
            }
            return _entries.Count > 0;
        }

        public bool GetFrom(Guid key, [DisallowNull] IList<RadomeCommandReplyEntity> result )
        {
            return _entries.From( key, result );
        }

        public bool GetUntil(Guid key, [DisallowNull] IList<RadomeCommandReplyEntity> result )
        {
            return _entries.Until( key, result );
        }

        public bool GetOver(Guid firstKey, Guid lastKey, [DisallowNull] IList<RadomeCommandReplyEntity> result )
        {
            return _entries.Over( firstKey, lastKey, result );
        }

        public bool GetAll([DisallowNull] IList<RadomeCommandReplyEntity> result )
        {
            return _entries.All( result );
        }

        public RadomeCommandReplyEntity? GetRadomeCommandReplyByCommand( Guid? command )
        {
            throw new NotImplementedException();
        }

        public IList<RadomeCommandReplyEntity> GetRadomeCommandReplyCollectionByCommandIsNull(  )
        {
            throw new NotImplementedException();
        }

    }
    public class RadomeCommandReplyByCommandIsNullEntityIndex
    {
    }

    public class RadomeConfigurationByRadomeAndTimestampEntityIndex
    {
        public class ByTimestamp
        {
            readonly SortedWeakReferenceList<DateTime, RadomeConfigurationEntity> _entries = new SortedWeakReferenceList<DateTime, RadomeConfigurationEntity>( );

            public ByTimestamp( )
            {
            }

            public void Add( RadomeConfigurationEntity entity )
            {
                if( _entries.TryGetValue(entity.Timestamp, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Timestamp, new WeakReference<RadomeConfigurationEntity>( entity, false ) );
                }
            }

            public bool GetByTimestamp( DateTime timestamp, out RadomeConfigurationEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( timestamp, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( timestamp );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(DateTime key, [DisallowNull] IList<RadomeConfigurationEntity> result )
            {
                return _entries.From( key, result );
            }

            public bool GetUntil(DateTime key, [DisallowNull] IList<RadomeConfigurationEntity> result )
            {
                return _entries.Until( key, result );
            }

            public bool GetOver(DateTime firstKey, DateTime lastKey, [DisallowNull] IList<RadomeConfigurationEntity> result )
            {
                return _entries.Over( firstKey, lastKey, result );
            }

            public bool GetAll([DisallowNull] IList<RadomeConfigurationEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<DateTime, ByTimestamp> _entries = new SortedListEx<DateTime, ByTimestamp>( );
        public List<RadomeConfigurationEntity> GetRadomeConfigurationCollectionByRadome( Guid radome )
        {
            throw new NotImplementedException();
        }

        public RadomeConfigurationEntity? GetRadomeConfigurationByRadomeAndTimestamp( Guid radome, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public RadomeConfigurationEntity? GetRadomeConfigurationByRadomeAtTimestamp( Guid radome, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<RadomeConfigurationEntity> GetRadomeConfigurationByRadomeFromTimestamp( Guid radome, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<RadomeConfigurationEntity> GetRadomeConfigurationByRadomeUntilTimestamp( Guid radome, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        IList<RadomeConfigurationEntity> GetRadomeConfigurationByRadomeOverTimestamp( Guid radome, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

    }
    public class RadomeConfigurationByTimestampEntityIndex
    {
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, RadomeConfigurationEntity> _entries = new SortedWeakReferenceList<Guid, RadomeConfigurationEntity>( );
            public ById( )
            {
            }

            public void Add( RadomeConfigurationEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<RadomeConfigurationEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out RadomeConfigurationEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<RadomeConfigurationEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<RadomeConfigurationEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<RadomeConfigurationEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<RadomeConfigurationEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<DateTime, ById> _entries = new SortedListEx<DateTime, ById>( );

        public RadomeConfigurationByTimestampEntityIndex( )
        {
        }

        public List<RadomeConfigurationEntity> GetRadomeConfigurationCollectionByTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<RadomeConfigurationEntity> GetRadomeConfigurationCollectionAtTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<RadomeConfigurationEntity> GetRadomeConfigurationCollectionFromTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<RadomeConfigurationEntity> GetRadomeConfigurationCollectionUntilTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        IList<RadomeConfigurationEntity> GetRadomeConfigurationCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

    }

    public class ReferenceTimeseriesValueByTimeseriesAndTimestampEntityIndex
    {
        public class ByTimestamp
        {
            readonly SortedWeakReferenceList<DateTime, ReferenceTimeseriesValueEntity> _entries = new SortedWeakReferenceList<DateTime, ReferenceTimeseriesValueEntity>( );

            public ByTimestamp( )
            {
            }

            public void Add( ReferenceTimeseriesValueEntity entity )
            {
                if( _entries.TryGetValue(entity.Timestamp, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Timestamp, new WeakReference<ReferenceTimeseriesValueEntity>( entity, false ) );
                }
            }

            public bool GetByTimestamp( DateTime timestamp, out ReferenceTimeseriesValueEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( timestamp, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( timestamp );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(DateTime key, [DisallowNull] IList<ReferenceTimeseriesValueEntity> result )
            {
                return _entries.From( key, result );
            }

            public bool GetUntil(DateTime key, [DisallowNull] IList<ReferenceTimeseriesValueEntity> result )
            {
                return _entries.Until( key, result );
            }

            public bool GetOver(DateTime firstKey, DateTime lastKey, [DisallowNull] IList<ReferenceTimeseriesValueEntity> result )
            {
                return _entries.Over( firstKey, lastKey, result );
            }

            public bool GetAll([DisallowNull] IList<ReferenceTimeseriesValueEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<DateTime, ByTimestamp> _entries = new SortedListEx<DateTime, ByTimestamp>( );
        public List<ReferenceTimeseriesValueEntity> GetReferenceTimeseriesValueCollectionByTimeseries( Guid timeseries )
        {
            throw new NotImplementedException();
        }

        public ReferenceTimeseriesValueEntity? GetReferenceTimeseriesValueByTimeseriesAndTimestamp( Guid timeseries, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public ReferenceTimeseriesValueEntity? GetReferenceTimeseriesValueByTimeseriesAtTimestamp( Guid timeseries, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<ReferenceTimeseriesValueEntity> GetReferenceTimeseriesValueByTimeseriesFromTimestamp( Guid timeseries, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<ReferenceTimeseriesValueEntity> GetReferenceTimeseriesValueByTimeseriesUntilTimestamp( Guid timeseries, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        IList<ReferenceTimeseriesValueEntity> GetReferenceTimeseriesValueByTimeseriesOverTimestamp( Guid timeseries, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

    }
    public class ReferenceTimeseriesValueByTimestampEntityIndex
    {
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, ReferenceTimeseriesValueEntity> _entries = new SortedWeakReferenceList<Guid, ReferenceTimeseriesValueEntity>( );
            public ById( )
            {
            }

            public void Add( ReferenceTimeseriesValueEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<ReferenceTimeseriesValueEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out ReferenceTimeseriesValueEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<ReferenceTimeseriesValueEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<ReferenceTimeseriesValueEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<ReferenceTimeseriesValueEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<ReferenceTimeseriesValueEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<DateTime, ById> _entries = new SortedListEx<DateTime, ById>( );

        public ReferenceTimeseriesValueByTimestampEntityIndex( )
        {
        }

        public List<ReferenceTimeseriesValueEntity> GetReferenceTimeseriesValueCollectionByTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<ReferenceTimeseriesValueEntity> GetReferenceTimeseriesValueCollectionAtTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<ReferenceTimeseriesValueEntity> GetReferenceTimeseriesValueCollectionFromTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<ReferenceTimeseriesValueEntity> GetReferenceTimeseriesValueCollectionUntilTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        IList<ReferenceTimeseriesValueEntity> GetReferenceTimeseriesValueCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

    }

    public class ReferenceTimeseriesValueByValueEntityIndex
    {
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, ReferenceTimeseriesValueEntity> _entries = new SortedWeakReferenceList<Guid, ReferenceTimeseriesValueEntity>( );
            public ById( )
            {
            }

            public void Add( ReferenceTimeseriesValueEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<ReferenceTimeseriesValueEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out ReferenceTimeseriesValueEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<ReferenceTimeseriesValueEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<ReferenceTimeseriesValueEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<ReferenceTimeseriesValueEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<ReferenceTimeseriesValueEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<Guid, ById> _entries = new SortedListEx<Guid, ById>( );

        public ReferenceTimeseriesValueByValueEntityIndex( )
        {
        }

        public List<ReferenceTimeseriesValueEntity> GetReferenceTimeseriesValueCollectionByValue( Guid value__ )
        {
            throw new NotImplementedException();
        }

    }

    public class SByteTimeseriesValueByTimeseriesAndTimestampEntityIndex
    {
        public class ByTimestamp
        {
            readonly SortedWeakReferenceList<DateTime, SByteTimeseriesValueEntity> _entries = new SortedWeakReferenceList<DateTime, SByteTimeseriesValueEntity>( );

            public ByTimestamp( )
            {
            }

            public void Add( SByteTimeseriesValueEntity entity )
            {
                if( _entries.TryGetValue(entity.Timestamp, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Timestamp, new WeakReference<SByteTimeseriesValueEntity>( entity, false ) );
                }
            }

            public bool GetByTimestamp( DateTime timestamp, out SByteTimeseriesValueEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( timestamp, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( timestamp );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(DateTime key, [DisallowNull] IList<SByteTimeseriesValueEntity> result )
            {
                return _entries.From( key, result );
            }

            public bool GetUntil(DateTime key, [DisallowNull] IList<SByteTimeseriesValueEntity> result )
            {
                return _entries.Until( key, result );
            }

            public bool GetOver(DateTime firstKey, DateTime lastKey, [DisallowNull] IList<SByteTimeseriesValueEntity> result )
            {
                return _entries.Over( firstKey, lastKey, result );
            }

            public bool GetAll([DisallowNull] IList<SByteTimeseriesValueEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<DateTime, ByTimestamp> _entries = new SortedListEx<DateTime, ByTimestamp>( );
        public List<SByteTimeseriesValueEntity> GetSByteTimeseriesValueCollectionByTimeseries( Guid timeseries )
        {
            throw new NotImplementedException();
        }

        public SByteTimeseriesValueEntity? GetSByteTimeseriesValueByTimeseriesAndTimestamp( Guid timeseries, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public SByteTimeseriesValueEntity? GetSByteTimeseriesValueByTimeseriesAtTimestamp( Guid timeseries, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<SByteTimeseriesValueEntity> GetSByteTimeseriesValueByTimeseriesFromTimestamp( Guid timeseries, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<SByteTimeseriesValueEntity> GetSByteTimeseriesValueByTimeseriesUntilTimestamp( Guid timeseries, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        IList<SByteTimeseriesValueEntity> GetSByteTimeseriesValueByTimeseriesOverTimestamp( Guid timeseries, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

    }
    public class SByteTimeseriesValueByTimestampEntityIndex
    {
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, SByteTimeseriesValueEntity> _entries = new SortedWeakReferenceList<Guid, SByteTimeseriesValueEntity>( );
            public ById( )
            {
            }

            public void Add( SByteTimeseriesValueEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<SByteTimeseriesValueEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out SByteTimeseriesValueEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<SByteTimeseriesValueEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<SByteTimeseriesValueEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<SByteTimeseriesValueEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<SByteTimeseriesValueEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<DateTime, ById> _entries = new SortedListEx<DateTime, ById>( );

        public SByteTimeseriesValueByTimestampEntityIndex( )
        {
        }

        public List<SByteTimeseriesValueEntity> GetSByteTimeseriesValueCollectionByTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<SByteTimeseriesValueEntity> GetSByteTimeseriesValueCollectionAtTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<SByteTimeseriesValueEntity> GetSByteTimeseriesValueCollectionFromTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<SByteTimeseriesValueEntity> GetSByteTimeseriesValueCollectionUntilTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        IList<SByteTimeseriesValueEntity> GetSByteTimeseriesValueCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

    }

    public class SecurityDomainByNameEntityIndex
    {
        readonly SortedWeakReferenceList<string, SecurityDomainEntity> _entries = new SortedWeakReferenceList<string, SecurityDomainEntity>( );

        public SecurityDomainByNameEntityIndex( )
        {
        }

        public void Add( SecurityDomainEntity entity )
        {
            if( _entries.TryGetValue(entity.Name, out var weakReference ) )
            {
                weakReference.SetTarget( entity );
            }
            else
            {
                _entries.Add( entity.Name, new WeakReference<SecurityDomainEntity>( entity, false ) );
            }
        }

        public bool GetByName( string name, out SecurityDomainEntity? entity )
        {
            entity = null;
            if ( _entries.TryGetValue( name, out var weakReference ) )
            {
                if ( weakReference.TryGetTarget( out entity ) == false )
                {
                    _entries.Remove( name );
                }
            }
            return _entries.Count > 0;
        }

        public bool GetFrom(string key, [DisallowNull] IList<SecurityDomainEntity> result )
        {
            return _entries.From( key, result );
        }

        public bool GetUntil(string key, [DisallowNull] IList<SecurityDomainEntity> result )
        {
            return _entries.Until( key, result );
        }

        public bool GetOver(string firstKey, string lastKey, [DisallowNull] IList<SecurityDomainEntity> result )
        {
            return _entries.Over( firstKey, lastKey, result );
        }

        public bool GetAll([DisallowNull] IList<SecurityDomainEntity> result )
        {
            return _entries.All( result );
        }

        public SecurityDomainEntity? GetSecurityDomainByName( string name )
        {
            throw new NotImplementedException();
        }

    }
    public class SecurityIdentifierByDomainAndIdentityEntityIndex
    {
        public class ByIdentity
        {
            readonly SortedWeakReferenceList<string, SecurityIdentifierEntity> _entries = new SortedWeakReferenceList<string, SecurityIdentifierEntity>( );

            public ByIdentity( )
            {
            }

            public void Add( SecurityIdentifierEntity entity )
            {
                if( _entries.TryGetValue(entity.Identity, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Identity, new WeakReference<SecurityIdentifierEntity>( entity, false ) );
                }
            }

            public bool GetByIdentity( string identity, out SecurityIdentifierEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( identity, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( identity );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(string key, [DisallowNull] IList<SecurityIdentifierEntity> result )
            {
                return _entries.From( key, result );
            }

            public bool GetUntil(string key, [DisallowNull] IList<SecurityIdentifierEntity> result )
            {
                return _entries.Until( key, result );
            }

            public bool GetOver(string firstKey, string lastKey, [DisallowNull] IList<SecurityIdentifierEntity> result )
            {
                return _entries.Over( firstKey, lastKey, result );
            }

            public bool GetAll([DisallowNull] IList<SecurityIdentifierEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<string, ByIdentity> _entries = new SortedListEx<string, ByIdentity>( );
        public List<SecurityIdentifierEntity> GetSecurityIdentifierCollectionByDomain( Guid domain )
        {
            throw new NotImplementedException();
        }

        public SecurityIdentifierEntity? GetSecurityIdentifierByDomainAndIdentity( Guid domain, string identity )
        {
            throw new NotImplementedException();
        }

    }
    public class SecurityRoleByNameEntityIndex
    {
        readonly SortedWeakReferenceList<string, SecurityRoleEntity> _entries = new SortedWeakReferenceList<string, SecurityRoleEntity>( );

        public SecurityRoleByNameEntityIndex( )
        {
        }

        public void Add( SecurityRoleEntity entity )
        {
            if( _entries.TryGetValue(entity.Name, out var weakReference ) )
            {
                weakReference.SetTarget( entity );
            }
            else
            {
                _entries.Add( entity.Name, new WeakReference<SecurityRoleEntity>( entity, false ) );
            }
        }

        public bool GetByName( string name, out SecurityRoleEntity? entity )
        {
            entity = null;
            if ( _entries.TryGetValue( name, out var weakReference ) )
            {
                if ( weakReference.TryGetTarget( out entity ) == false )
                {
                    _entries.Remove( name );
                }
            }
            return _entries.Count > 0;
        }

        public bool GetFrom(string key, [DisallowNull] IList<SecurityRoleEntity> result )
        {
            return _entries.From( key, result );
        }

        public bool GetUntil(string key, [DisallowNull] IList<SecurityRoleEntity> result )
        {
            return _entries.Until( key, result );
        }

        public bool GetOver(string firstKey, string lastKey, [DisallowNull] IList<SecurityRoleEntity> result )
        {
            return _entries.Over( firstKey, lastKey, result );
        }

        public bool GetAll([DisallowNull] IList<SecurityRoleEntity> result )
        {
            return _entries.All( result );
        }

        public SecurityRoleEntity? GetSecurityRoleByName( string name )
        {
            throw new NotImplementedException();
        }

    }
    public class SecurityIdentifierRoleLinkByMemberAndStartEntityIndex
    {
        public class ByStart
        {
            readonly SortedListEx<DateTime, ById> _entries = new SortedListEx<DateTime, ById>( );
            List<DateTime> _emptyKeys = new List<DateTime>( );

            public ByStart( )
            {
            }

            void RemoveEmptyKeys( )
            {
                var emptyKeyCount = _emptyKeys.Count;
                for ( int i = 0; i < emptyKeyCount; i++ )
                {
                    _entries.Remove( _emptyKeys[ i ] );
                }
                _emptyKeys.Clear( );
            }

            public bool GetAll([DisallowNull] IList<SecurityIdentifierRoleLinkEntity> result )
            {
                foreach( var entry in _entries )
                {
                    if( entry.Value.GetAll( result ) == false )
                    {
                        _emptyKeys.Add( entry.Key );
                    }
                }
                RemoveEmptyKeys( );
                return _entries.Count > 0;
            }

        }
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, SecurityIdentifierRoleLinkEntity> _entries = new SortedWeakReferenceList<Guid, SecurityIdentifierRoleLinkEntity>( );
            public ById( )
            {
            }

            public void Add( SecurityIdentifierRoleLinkEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<SecurityIdentifierRoleLinkEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out SecurityIdentifierRoleLinkEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<SecurityIdentifierRoleLinkEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<SecurityIdentifierRoleLinkEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<SecurityIdentifierRoleLinkEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<SecurityIdentifierRoleLinkEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<Guid, ByStart> _entries = new SortedListEx<Guid, ByStart>( );

        public SecurityIdentifierRoleLinkByMemberAndStartEntityIndex( )
        {
        }

        public List<SecurityIdentifierRoleLinkEntity> GetSecurityIdentifierRoleLinkCollectionByMember( Guid member )
        {
            throw new NotImplementedException();
        }

        public List<SecurityIdentifierRoleLinkEntity> GetSecurityIdentifierRoleLinkCollectionByMemberAndStart( Guid member, DateTime start )
        {
            throw new NotImplementedException();
        }

        public IList<SecurityIdentifierRoleLinkEntity> GetSecurityIdentifierRoleLinkCollectionByMemberAtStart( Guid member, DateTime start )
        {
            throw new NotImplementedException();
        }

        public IList<SecurityIdentifierRoleLinkEntity> GetSecurityIdentifierRoleLinkCollectionByMemberFromStart( Guid member, DateTime start )
        {
            throw new NotImplementedException();
        }

        public IList<SecurityIdentifierRoleLinkEntity> GetSecurityIdentifierRoleLinkCollectionByMemberUntilStart( Guid member, DateTime start )
        {
            throw new NotImplementedException();
        }

        IList<SecurityIdentifierRoleLinkEntity> GetSecurityIdentifierRoleLinkCollectionByMemberOverStart( Guid member, DateTime fromStart, DateTime untilStart )
        {
            throw new NotImplementedException();
        }

    }

    public class SecurityIdentifierRoleLinkByRoleAndStartEntityIndex
    {
        public class ByStart
        {
            readonly SortedListEx<DateTime, ById> _entries = new SortedListEx<DateTime, ById>( );
            List<DateTime> _emptyKeys = new List<DateTime>( );

            public ByStart( )
            {
            }

            void RemoveEmptyKeys( )
            {
                var emptyKeyCount = _emptyKeys.Count;
                for ( int i = 0; i < emptyKeyCount; i++ )
                {
                    _entries.Remove( _emptyKeys[ i ] );
                }
                _emptyKeys.Clear( );
            }

            public bool GetAll([DisallowNull] IList<SecurityIdentifierRoleLinkEntity> result )
            {
                foreach( var entry in _entries )
                {
                    if( entry.Value.GetAll( result ) == false )
                    {
                        _emptyKeys.Add( entry.Key );
                    }
                }
                RemoveEmptyKeys( );
                return _entries.Count > 0;
            }

        }
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, SecurityIdentifierRoleLinkEntity> _entries = new SortedWeakReferenceList<Guid, SecurityIdentifierRoleLinkEntity>( );
            public ById( )
            {
            }

            public void Add( SecurityIdentifierRoleLinkEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<SecurityIdentifierRoleLinkEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out SecurityIdentifierRoleLinkEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<SecurityIdentifierRoleLinkEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<SecurityIdentifierRoleLinkEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<SecurityIdentifierRoleLinkEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<SecurityIdentifierRoleLinkEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<Guid, ByStart> _entries = new SortedListEx<Guid, ByStart>( );

        public SecurityIdentifierRoleLinkByRoleAndStartEntityIndex( )
        {
        }

        public List<SecurityIdentifierRoleLinkEntity> GetSecurityIdentifierRoleLinkCollectionByRole( Guid role )
        {
            throw new NotImplementedException();
        }

        public List<SecurityIdentifierRoleLinkEntity> GetSecurityIdentifierRoleLinkCollectionByRoleAndStart( Guid role, DateTime start )
        {
            throw new NotImplementedException();
        }

        public IList<SecurityIdentifierRoleLinkEntity> GetSecurityIdentifierRoleLinkCollectionByRoleAtStart( Guid role, DateTime start )
        {
            throw new NotImplementedException();
        }

        public IList<SecurityIdentifierRoleLinkEntity> GetSecurityIdentifierRoleLinkCollectionByRoleFromStart( Guid role, DateTime start )
        {
            throw new NotImplementedException();
        }

        public IList<SecurityIdentifierRoleLinkEntity> GetSecurityIdentifierRoleLinkCollectionByRoleUntilStart( Guid role, DateTime start )
        {
            throw new NotImplementedException();
        }

        IList<SecurityIdentifierRoleLinkEntity> GetSecurityIdentifierRoleLinkCollectionByRoleOverStart( Guid role, DateTime fromStart, DateTime untilStart )
        {
            throw new NotImplementedException();
        }

    }

    public class SecurityIdentifierRoleLinkByStartEntityIndex
    {
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, SecurityIdentifierRoleLinkEntity> _entries = new SortedWeakReferenceList<Guid, SecurityIdentifierRoleLinkEntity>( );
            public ById( )
            {
            }

            public void Add( SecurityIdentifierRoleLinkEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<SecurityIdentifierRoleLinkEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out SecurityIdentifierRoleLinkEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<SecurityIdentifierRoleLinkEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<SecurityIdentifierRoleLinkEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<SecurityIdentifierRoleLinkEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<SecurityIdentifierRoleLinkEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<DateTime, ById> _entries = new SortedListEx<DateTime, ById>( );

        public SecurityIdentifierRoleLinkByStartEntityIndex( )
        {
        }

        public List<SecurityIdentifierRoleLinkEntity> GetSecurityIdentifierRoleLinkCollectionByStart( DateTime start )
        {
            throw new NotImplementedException();
        }

        public IList<SecurityIdentifierRoleLinkEntity> GetSecurityIdentifierRoleLinkCollectionAtStart( DateTime start )
        {
            throw new NotImplementedException();
        }

        public IList<SecurityIdentifierRoleLinkEntity> GetSecurityIdentifierRoleLinkCollectionFromStart( DateTime start )
        {
            throw new NotImplementedException();
        }

        public IList<SecurityIdentifierRoleLinkEntity> GetSecurityIdentifierRoleLinkCollectionUntilStart( DateTime start )
        {
            throw new NotImplementedException();
        }

        IList<SecurityIdentifierRoleLinkEntity> GetSecurityIdentifierRoleLinkCollectionOverStart( DateTime fromStart, DateTime untilStart )
        {
            throw new NotImplementedException();
        }

    }

    public class SecurityLoginSessionByLoginAndFromTimeEntityIndex
    {
        public class ByFromTime
        {
            readonly SortedListEx<DateTime, ById> _entries = new SortedListEx<DateTime, ById>( );
            List<DateTime> _emptyKeys = new List<DateTime>( );

            public ByFromTime( )
            {
            }

            void RemoveEmptyKeys( )
            {
                var emptyKeyCount = _emptyKeys.Count;
                for ( int i = 0; i < emptyKeyCount; i++ )
                {
                    _entries.Remove( _emptyKeys[ i ] );
                }
                _emptyKeys.Clear( );
            }

            public bool GetAll([DisallowNull] IList<SecurityLoginSessionEntity> result )
            {
                foreach( var entry in _entries )
                {
                    if( entry.Value.GetAll( result ) == false )
                    {
                        _emptyKeys.Add( entry.Key );
                    }
                }
                RemoveEmptyKeys( );
                return _entries.Count > 0;
            }

        }
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, SecurityLoginSessionEntity> _entries = new SortedWeakReferenceList<Guid, SecurityLoginSessionEntity>( );
            public ById( )
            {
            }

            public void Add( SecurityLoginSessionEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<SecurityLoginSessionEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out SecurityLoginSessionEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<SecurityLoginSessionEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<SecurityLoginSessionEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<SecurityLoginSessionEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<SecurityLoginSessionEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<Guid, ByFromTime> _entries = new SortedListEx<Guid, ByFromTime>( );

        public SecurityLoginSessionByLoginAndFromTimeEntityIndex( )
        {
        }

        public List<SecurityLoginSessionEntity> GetSecurityLoginSessionCollectionByLogin( Guid login )
        {
            throw new NotImplementedException();
        }

        public List<SecurityLoginSessionEntity> GetSecurityLoginSessionCollectionByLoginAndFromTime( Guid login, DateTime fromTime )
        {
            throw new NotImplementedException();
        }

        public IList<SecurityLoginSessionEntity> GetSecurityLoginSessionCollectionByLoginAtFromTime( Guid login, DateTime fromTime )
        {
            throw new NotImplementedException();
        }

        public IList<SecurityLoginSessionEntity> GetSecurityLoginSessionCollectionByLoginFromFromTime( Guid login, DateTime fromTime )
        {
            throw new NotImplementedException();
        }

        public IList<SecurityLoginSessionEntity> GetSecurityLoginSessionCollectionByLoginUntilFromTime( Guid login, DateTime fromTime )
        {
            throw new NotImplementedException();
        }

        IList<SecurityLoginSessionEntity> GetSecurityLoginSessionCollectionByLoginOverFromTime( Guid login, DateTime fromFromTime, DateTime untilFromTime )
        {
            throw new NotImplementedException();
        }

    }

    public class SecurityLoginSessionByFromTimeEntityIndex
    {
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, SecurityLoginSessionEntity> _entries = new SortedWeakReferenceList<Guid, SecurityLoginSessionEntity>( );
            public ById( )
            {
            }

            public void Add( SecurityLoginSessionEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<SecurityLoginSessionEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out SecurityLoginSessionEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<SecurityLoginSessionEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<SecurityLoginSessionEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<SecurityLoginSessionEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<SecurityLoginSessionEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<DateTime, ById> _entries = new SortedListEx<DateTime, ById>( );

        public SecurityLoginSessionByFromTimeEntityIndex( )
        {
        }

        public List<SecurityLoginSessionEntity> GetSecurityLoginSessionCollectionByFromTime( DateTime fromTime )
        {
            throw new NotImplementedException();
        }

        public IList<SecurityLoginSessionEntity> GetSecurityLoginSessionCollectionAtFromTime( DateTime fromTime )
        {
            throw new NotImplementedException();
        }

        public IList<SecurityLoginSessionEntity> GetSecurityLoginSessionCollectionFromFromTime( DateTime fromTime )
        {
            throw new NotImplementedException();
        }

        public IList<SecurityLoginSessionEntity> GetSecurityLoginSessionCollectionUntilFromTime( DateTime fromTime )
        {
            throw new NotImplementedException();
        }

        IList<SecurityLoginSessionEntity> GetSecurityLoginSessionCollectionOverFromTime( DateTime fromFromTime, DateTime untilFromTime )
        {
            throw new NotImplementedException();
        }

    }

    public class SecurityPermissionByIdentifierTypeCodeAndTimestampEntityIndex
    {
        public class ByTypeCode
        {
            readonly SortedListEx<int, ByTimestamp> _entries = new SortedListEx<int, ByTimestamp>( );
            List<int> _emptyKeys = new List<int>( );

            public ByTypeCode( )
            {
            }

            void RemoveEmptyKeys( )
            {
                var emptyKeyCount = _emptyKeys.Count;
                for ( int i = 0; i < emptyKeyCount; i++ )
                {
                    _entries.Remove( _emptyKeys[ i ] );
                }
                _emptyKeys.Clear( );
            }

            public bool GetAll([DisallowNull] IList<SecurityPermissionEntity> result )
            {
                foreach( var entry in _entries )
                {
                    if( entry.Value.GetAll( result ) == false )
                    {
                        _emptyKeys.Add( entry.Key );
                    }
                }
                RemoveEmptyKeys( );
                return _entries.Count > 0;
            }

        }
        public class ByTimestamp
        {
            readonly SortedWeakReferenceList<DateTime, SecurityPermissionEntity> _entries = new SortedWeakReferenceList<DateTime, SecurityPermissionEntity>( );

            public ByTimestamp( )
            {
            }

            public void Add( SecurityPermissionEntity entity )
            {
                if( _entries.TryGetValue(entity.Timestamp, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Timestamp, new WeakReference<SecurityPermissionEntity>( entity, false ) );
                }
            }

            public bool GetByTimestamp( DateTime timestamp, out SecurityPermissionEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( timestamp, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( timestamp );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(DateTime key, [DisallowNull] IList<SecurityPermissionEntity> result )
            {
                return _entries.From( key, result );
            }

            public bool GetUntil(DateTime key, [DisallowNull] IList<SecurityPermissionEntity> result )
            {
                return _entries.Until( key, result );
            }

            public bool GetOver(DateTime firstKey, DateTime lastKey, [DisallowNull] IList<SecurityPermissionEntity> result )
            {
                return _entries.Over( firstKey, lastKey, result );
            }

            public bool GetAll([DisallowNull] IList<SecurityPermissionEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<DateTime, ByTypeCode> _entries = new SortedListEx<DateTime, ByTypeCode>( );
        public List<SecurityPermissionEntity> GetSecurityPermissionCollectionByIdentifier( Guid identifier )
        {
            throw new NotImplementedException();
        }

        public List<SecurityPermissionEntity> GetSecurityPermissionCollectionByIdentifierAndTypeCode( Guid identifier, int typeCode )
        {
            throw new NotImplementedException();
        }

        public IList<SecurityPermissionEntity> GetSecurityPermissionCollectionByIdentifierFromTypeCode( Guid identifier, int typeCode )
        {
            throw new NotImplementedException();
        }

        public IList<SecurityPermissionEntity> GetSecurityPermissionCollectionByIdentifierUntilTypeCode( Guid identifier, int typeCode )
        {
            throw new NotImplementedException();
        }

        IList<SecurityPermissionEntity> GetSecurityPermissionCollectionByIdentifierOverTypeCode( Guid identifier, int fromTypeCode, int untilTypeCode )
        {
            throw new NotImplementedException();
        }

        public SecurityPermissionEntity? GetSecurityPermissionByIdentifierTypeCodeAndTimestamp( Guid identifier, int typeCode, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public SecurityPermissionEntity? GetSecurityPermissionByIdentifierTypeCodeAtTimestamp( Guid identifier, int typeCode, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<SecurityPermissionEntity> GetSecurityPermissionByIdentifierTypeCodeFromTimestamp( Guid identifier, int typeCode, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<SecurityPermissionEntity> GetSecurityPermissionByIdentifierTypeCodeUntilTimestamp( Guid identifier, int typeCode, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        IList<SecurityPermissionEntity> GetSecurityPermissionByIdentifierTypeCodeOverTimestamp( Guid identifier, int typeCode, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

    }
    public class SecurityPermissionByTimestampEntityIndex
    {
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, SecurityPermissionEntity> _entries = new SortedWeakReferenceList<Guid, SecurityPermissionEntity>( );
            public ById( )
            {
            }

            public void Add( SecurityPermissionEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<SecurityPermissionEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out SecurityPermissionEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<SecurityPermissionEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<SecurityPermissionEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<SecurityPermissionEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<SecurityPermissionEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<DateTime, ById> _entries = new SortedListEx<DateTime, ById>( );

        public SecurityPermissionByTimestampEntityIndex( )
        {
        }

        public List<SecurityPermissionEntity> GetSecurityPermissionCollectionByTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<SecurityPermissionEntity> GetSecurityPermissionCollectionAtTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<SecurityPermissionEntity> GetSecurityPermissionCollectionFromTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<SecurityPermissionEntity> GetSecurityPermissionCollectionUntilTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        IList<SecurityPermissionEntity> GetSecurityPermissionCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

    }

    public class SingleTimeseriesValueByTimeseriesAndTimestampEntityIndex
    {
        public class ByTimestamp
        {
            readonly SortedWeakReferenceList<DateTime, SingleTimeseriesValueEntity> _entries = new SortedWeakReferenceList<DateTime, SingleTimeseriesValueEntity>( );

            public ByTimestamp( )
            {
            }

            public void Add( SingleTimeseriesValueEntity entity )
            {
                if( _entries.TryGetValue(entity.Timestamp, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Timestamp, new WeakReference<SingleTimeseriesValueEntity>( entity, false ) );
                }
            }

            public bool GetByTimestamp( DateTime timestamp, out SingleTimeseriesValueEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( timestamp, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( timestamp );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(DateTime key, [DisallowNull] IList<SingleTimeseriesValueEntity> result )
            {
                return _entries.From( key, result );
            }

            public bool GetUntil(DateTime key, [DisallowNull] IList<SingleTimeseriesValueEntity> result )
            {
                return _entries.Until( key, result );
            }

            public bool GetOver(DateTime firstKey, DateTime lastKey, [DisallowNull] IList<SingleTimeseriesValueEntity> result )
            {
                return _entries.Over( firstKey, lastKey, result );
            }

            public bool GetAll([DisallowNull] IList<SingleTimeseriesValueEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<DateTime, ByTimestamp> _entries = new SortedListEx<DateTime, ByTimestamp>( );
        public List<SingleTimeseriesValueEntity> GetSingleTimeseriesValueCollectionByTimeseries( Guid timeseries )
        {
            throw new NotImplementedException();
        }

        public SingleTimeseriesValueEntity? GetSingleTimeseriesValueByTimeseriesAndTimestamp( Guid timeseries, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public SingleTimeseriesValueEntity? GetSingleTimeseriesValueByTimeseriesAtTimestamp( Guid timeseries, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<SingleTimeseriesValueEntity> GetSingleTimeseriesValueByTimeseriesFromTimestamp( Guid timeseries, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<SingleTimeseriesValueEntity> GetSingleTimeseriesValueByTimeseriesUntilTimestamp( Guid timeseries, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        IList<SingleTimeseriesValueEntity> GetSingleTimeseriesValueByTimeseriesOverTimestamp( Guid timeseries, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

    }
    public class SingleTimeseriesValueByTimestampEntityIndex
    {
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, SingleTimeseriesValueEntity> _entries = new SortedWeakReferenceList<Guid, SingleTimeseriesValueEntity>( );
            public ById( )
            {
            }

            public void Add( SingleTimeseriesValueEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<SingleTimeseriesValueEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out SingleTimeseriesValueEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<SingleTimeseriesValueEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<SingleTimeseriesValueEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<SingleTimeseriesValueEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<SingleTimeseriesValueEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<DateTime, ById> _entries = new SortedListEx<DateTime, ById>( );

        public SingleTimeseriesValueByTimestampEntityIndex( )
        {
        }

        public List<SingleTimeseriesValueEntity> GetSingleTimeseriesValueCollectionByTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<SingleTimeseriesValueEntity> GetSingleTimeseriesValueCollectionAtTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<SingleTimeseriesValueEntity> GetSingleTimeseriesValueCollectionFromTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<SingleTimeseriesValueEntity> GetSingleTimeseriesValueCollectionUntilTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        IList<SingleTimeseriesValueEntity> GetSingleTimeseriesValueCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

    }

    public class StringTimeseriesValueByTimeseriesAndTimestampEntityIndex
    {
        public class ByTimestamp
        {
            readonly SortedWeakReferenceList<DateTime, StringTimeseriesValueEntity> _entries = new SortedWeakReferenceList<DateTime, StringTimeseriesValueEntity>( );

            public ByTimestamp( )
            {
            }

            public void Add( StringTimeseriesValueEntity entity )
            {
                if( _entries.TryGetValue(entity.Timestamp, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Timestamp, new WeakReference<StringTimeseriesValueEntity>( entity, false ) );
                }
            }

            public bool GetByTimestamp( DateTime timestamp, out StringTimeseriesValueEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( timestamp, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( timestamp );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(DateTime key, [DisallowNull] IList<StringTimeseriesValueEntity> result )
            {
                return _entries.From( key, result );
            }

            public bool GetUntil(DateTime key, [DisallowNull] IList<StringTimeseriesValueEntity> result )
            {
                return _entries.Until( key, result );
            }

            public bool GetOver(DateTime firstKey, DateTime lastKey, [DisallowNull] IList<StringTimeseriesValueEntity> result )
            {
                return _entries.Over( firstKey, lastKey, result );
            }

            public bool GetAll([DisallowNull] IList<StringTimeseriesValueEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<DateTime, ByTimestamp> _entries = new SortedListEx<DateTime, ByTimestamp>( );
        public List<StringTimeseriesValueEntity> GetStringTimeseriesValueCollectionByTimeseries( Guid timeseries )
        {
            throw new NotImplementedException();
        }

        public StringTimeseriesValueEntity? GetStringTimeseriesValueByTimeseriesAndTimestamp( Guid timeseries, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public StringTimeseriesValueEntity? GetStringTimeseriesValueByTimeseriesAtTimestamp( Guid timeseries, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<StringTimeseriesValueEntity> GetStringTimeseriesValueByTimeseriesFromTimestamp( Guid timeseries, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<StringTimeseriesValueEntity> GetStringTimeseriesValueByTimeseriesUntilTimestamp( Guid timeseries, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        IList<StringTimeseriesValueEntity> GetStringTimeseriesValueByTimeseriesOverTimestamp( Guid timeseries, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

    }
    public class StringTimeseriesValueByTimestampEntityIndex
    {
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, StringTimeseriesValueEntity> _entries = new SortedWeakReferenceList<Guid, StringTimeseriesValueEntity>( );
            public ById( )
            {
            }

            public void Add( StringTimeseriesValueEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<StringTimeseriesValueEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out StringTimeseriesValueEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<StringTimeseriesValueEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<StringTimeseriesValueEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<StringTimeseriesValueEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<StringTimeseriesValueEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<DateTime, ById> _entries = new SortedListEx<DateTime, ById>( );

        public StringTimeseriesValueByTimestampEntityIndex( )
        {
        }

        public List<StringTimeseriesValueEntity> GetStringTimeseriesValueCollectionByTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<StringTimeseriesValueEntity> GetStringTimeseriesValueCollectionAtTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<StringTimeseriesValueEntity> GetStringTimeseriesValueCollectionFromTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<StringTimeseriesValueEntity> GetStringTimeseriesValueCollectionUntilTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        IList<StringTimeseriesValueEntity> GetStringTimeseriesValueCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

    }

    public class TimeseriesCatalogElementByCatalogAndNameEntityIndex
    {
        public class ByName
        {
            readonly SortedWeakReferenceList<string, TimeseriesCatalogElementEntity> _entries = new SortedWeakReferenceList<string, TimeseriesCatalogElementEntity>( );

            public ByName( )
            {
            }

            public void Add( TimeseriesCatalogElementEntity entity )
            {
                if( _entries.TryGetValue(entity.Name, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Name, new WeakReference<TimeseriesCatalogElementEntity>( entity, false ) );
                }
            }

            public bool GetByName( string name, out TimeseriesCatalogElementEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( name, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( name );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(string key, [DisallowNull] IList<TimeseriesCatalogElementEntity> result )
            {
                return _entries.From( key, result );
            }

            public bool GetUntil(string key, [DisallowNull] IList<TimeseriesCatalogElementEntity> result )
            {
                return _entries.Until( key, result );
            }

            public bool GetOver(string firstKey, string lastKey, [DisallowNull] IList<TimeseriesCatalogElementEntity> result )
            {
                return _entries.Over( firstKey, lastKey, result );
            }

            public bool GetAll([DisallowNull] IList<TimeseriesCatalogElementEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<string, ByName> _entries = new SortedListEx<string, ByName>( );
        public List<TimeseriesCatalogElementEntity> GetTimeseriesCatalogElementCollectionByCatalog( Guid? catalog )
        {
            throw new NotImplementedException();
        }

        public IList<TimeseriesCatalogElementEntity> GetTimeseriesCatalogElementCollectionByCatalogIsNull(  )
        {
            throw new NotImplementedException();
        }

        public TimeseriesCatalogElementEntity? GetTimeseriesCatalogElementByCatalogAndName( Guid? catalog, string name )
        {
            throw new NotImplementedException();
        }

        public IList<TimeseriesCatalogElementEntity> GetTimeseriesCatalogElementCollectionByCatalogIsNullAndName( string name )
        {
            throw new NotImplementedException();
        }

    }
    public class TimeseriesCatalogElementByCatalogIsNullAndNameEntityIndex
    {
    }

    public class AisAidToNavigationOffPositionTimeseriesByAidToNavigationEntityIndex
    {
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, AisAidToNavigationOffPositionTimeseriesEntity> _entries = new SortedWeakReferenceList<Guid, AisAidToNavigationOffPositionTimeseriesEntity>( );
            public ById( )
            {
            }

            public void Add( AisAidToNavigationOffPositionTimeseriesEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<AisAidToNavigationOffPositionTimeseriesEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out AisAidToNavigationOffPositionTimeseriesEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<AisAidToNavigationOffPositionTimeseriesEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<AisAidToNavigationOffPositionTimeseriesEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<AisAidToNavigationOffPositionTimeseriesEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<AisAidToNavigationOffPositionTimeseriesEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<Guid, ById> _entries = new SortedListEx<Guid, ById>( );

        public AisAidToNavigationOffPositionTimeseriesByAidToNavigationEntityIndex( )
        {
        }

        public List<AisAidToNavigationOffPositionTimeseriesEntity> GetAisAidToNavigationOffPositionTimeseriesCollectionByAidToNavigation( Guid? aidToNavigation )
        {
            throw new NotImplementedException();
        }

        public IList<AisAidToNavigationOffPositionTimeseriesEntity> GetAisAidToNavigationOffPositionTimeseriesCollectionByAidToNavigationIsNull(  )
        {
            throw new NotImplementedException();
        }

    }

    public class AisAidToNavigationOffPositionTimeseriesByAidToNavigationIsNullEntityIndex
    {
    }

    public class GyroCourseTimeseriesByGyroDeviceEntityIndex
    {
        readonly SortedWeakReferenceList<Guid, GyroCourseTimeseriesEntity> _entries = new SortedWeakReferenceList<Guid, GyroCourseTimeseriesEntity>( );

        public GyroCourseTimeseriesByGyroDeviceEntityIndex( )
        {
        }

        public void Add( GyroCourseTimeseriesEntity entity )
        {
            if ( entity.GyroDeviceId is Guid gyroDevice )
            {
                if ( _entries.TryGetValue( gyroDevice, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( gyroDevice, new WeakReference<GyroCourseTimeseriesEntity>( entity, false ) );
                }
            }
            else
            {
                throw new ArgumentException( "entity.GyroDeviceId is null.", nameof( entity ) );
            }
        }

        public bool GetByGyroDeviceId( Guid gyroDevice, out GyroCourseTimeseriesEntity? entity )
        {
            entity = null;
            if ( _entries.TryGetValue( gyroDevice, out var weakReference ) )
            {
                if ( weakReference.TryGetTarget( out entity ) == false )
                {
                    _entries.Remove( gyroDevice );
                }
            }
            return _entries.Count > 0;
        }

        public bool GetFrom(Guid key, [DisallowNull] IList<GyroCourseTimeseriesEntity> result )
        {
            return _entries.From( key, result );
        }

        public bool GetUntil(Guid key, [DisallowNull] IList<GyroCourseTimeseriesEntity> result )
        {
            return _entries.Until( key, result );
        }

        public bool GetOver(Guid firstKey, Guid lastKey, [DisallowNull] IList<GyroCourseTimeseriesEntity> result )
        {
            return _entries.Over( firstKey, lastKey, result );
        }

        public bool GetAll([DisallowNull] IList<GyroCourseTimeseriesEntity> result )
        {
            return _entries.All( result );
        }

        public GyroCourseTimeseriesEntity? GetGyroCourseTimeseriesByGyroDevice( Guid? gyroDevice )
        {
            throw new NotImplementedException();
        }

        public IList<GyroCourseTimeseriesEntity> GetGyroCourseTimeseriesCollectionByGyroDeviceIsNull(  )
        {
            throw new NotImplementedException();
        }

    }
    public class GyroCourseTimeseriesByGyroDeviceIsNullEntityIndex
    {
    }

    public class GyroHeadingMagneticNorthTimeseriesByGyroDeviceEntityIndex
    {
        readonly SortedWeakReferenceList<Guid, GyroHeadingMagneticNorthTimeseriesEntity> _entries = new SortedWeakReferenceList<Guid, GyroHeadingMagneticNorthTimeseriesEntity>( );

        public GyroHeadingMagneticNorthTimeseriesByGyroDeviceEntityIndex( )
        {
        }

        public void Add( GyroHeadingMagneticNorthTimeseriesEntity entity )
        {
            if ( entity.GyroDeviceId is Guid gyroDevice )
            {
                if ( _entries.TryGetValue( gyroDevice, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( gyroDevice, new WeakReference<GyroHeadingMagneticNorthTimeseriesEntity>( entity, false ) );
                }
            }
            else
            {
                throw new ArgumentException( "entity.GyroDeviceId is null.", nameof( entity ) );
            }
        }

        public bool GetByGyroDeviceId( Guid gyroDevice, out GyroHeadingMagneticNorthTimeseriesEntity? entity )
        {
            entity = null;
            if ( _entries.TryGetValue( gyroDevice, out var weakReference ) )
            {
                if ( weakReference.TryGetTarget( out entity ) == false )
                {
                    _entries.Remove( gyroDevice );
                }
            }
            return _entries.Count > 0;
        }

        public bool GetFrom(Guid key, [DisallowNull] IList<GyroHeadingMagneticNorthTimeseriesEntity> result )
        {
            return _entries.From( key, result );
        }

        public bool GetUntil(Guid key, [DisallowNull] IList<GyroHeadingMagneticNorthTimeseriesEntity> result )
        {
            return _entries.Until( key, result );
        }

        public bool GetOver(Guid firstKey, Guid lastKey, [DisallowNull] IList<GyroHeadingMagneticNorthTimeseriesEntity> result )
        {
            return _entries.Over( firstKey, lastKey, result );
        }

        public bool GetAll([DisallowNull] IList<GyroHeadingMagneticNorthTimeseriesEntity> result )
        {
            return _entries.All( result );
        }

        public GyroHeadingMagneticNorthTimeseriesEntity? GetGyroHeadingMagneticNorthTimeseriesByGyroDevice( Guid? gyroDevice )
        {
            throw new NotImplementedException();
        }

        public IList<GyroHeadingMagneticNorthTimeseriesEntity> GetGyroHeadingMagneticNorthTimeseriesCollectionByGyroDeviceIsNull(  )
        {
            throw new NotImplementedException();
        }

    }
    public class GyroHeadingMagneticNorthTimeseriesByGyroDeviceIsNullEntityIndex
    {
    }

    public class GyroHeadingTrueNorthTimeseriesByGyroDeviceEntityIndex
    {
        readonly SortedWeakReferenceList<Guid, GyroHeadingTrueNorthTimeseriesEntity> _entries = new SortedWeakReferenceList<Guid, GyroHeadingTrueNorthTimeseriesEntity>( );

        public GyroHeadingTrueNorthTimeseriesByGyroDeviceEntityIndex( )
        {
        }

        public void Add( GyroHeadingTrueNorthTimeseriesEntity entity )
        {
            if ( entity.GyroDeviceId is Guid gyroDevice )
            {
                if ( _entries.TryGetValue( gyroDevice, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( gyroDevice, new WeakReference<GyroHeadingTrueNorthTimeseriesEntity>( entity, false ) );
                }
            }
            else
            {
                throw new ArgumentException( "entity.GyroDeviceId is null.", nameof( entity ) );
            }
        }

        public bool GetByGyroDeviceId( Guid gyroDevice, out GyroHeadingTrueNorthTimeseriesEntity? entity )
        {
            entity = null;
            if ( _entries.TryGetValue( gyroDevice, out var weakReference ) )
            {
                if ( weakReference.TryGetTarget( out entity ) == false )
                {
                    _entries.Remove( gyroDevice );
                }
            }
            return _entries.Count > 0;
        }

        public bool GetFrom(Guid key, [DisallowNull] IList<GyroHeadingTrueNorthTimeseriesEntity> result )
        {
            return _entries.From( key, result );
        }

        public bool GetUntil(Guid key, [DisallowNull] IList<GyroHeadingTrueNorthTimeseriesEntity> result )
        {
            return _entries.Until( key, result );
        }

        public bool GetOver(Guid firstKey, Guid lastKey, [DisallowNull] IList<GyroHeadingTrueNorthTimeseriesEntity> result )
        {
            return _entries.Over( firstKey, lastKey, result );
        }

        public bool GetAll([DisallowNull] IList<GyroHeadingTrueNorthTimeseriesEntity> result )
        {
            return _entries.All( result );
        }

        public GyroHeadingTrueNorthTimeseriesEntity? GetGyroHeadingTrueNorthTimeseriesByGyroDevice( Guid? gyroDevice )
        {
            throw new NotImplementedException();
        }

        public IList<GyroHeadingTrueNorthTimeseriesEntity> GetGyroHeadingTrueNorthTimeseriesCollectionByGyroDeviceIsNull(  )
        {
            throw new NotImplementedException();
        }

    }
    public class GyroHeadingTrueNorthTimeseriesByGyroDeviceIsNullEntityIndex
    {
    }

    public class GyroPitchTimeseriesByGyroDeviceEntityIndex
    {
        readonly SortedWeakReferenceList<Guid, GyroPitchTimeseriesEntity> _entries = new SortedWeakReferenceList<Guid, GyroPitchTimeseriesEntity>( );

        public GyroPitchTimeseriesByGyroDeviceEntityIndex( )
        {
        }

        public void Add( GyroPitchTimeseriesEntity entity )
        {
            if ( entity.GyroDeviceId is Guid gyroDevice )
            {
                if ( _entries.TryGetValue( gyroDevice, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( gyroDevice, new WeakReference<GyroPitchTimeseriesEntity>( entity, false ) );
                }
            }
            else
            {
                throw new ArgumentException( "entity.GyroDeviceId is null.", nameof( entity ) );
            }
        }

        public bool GetByGyroDeviceId( Guid gyroDevice, out GyroPitchTimeseriesEntity? entity )
        {
            entity = null;
            if ( _entries.TryGetValue( gyroDevice, out var weakReference ) )
            {
                if ( weakReference.TryGetTarget( out entity ) == false )
                {
                    _entries.Remove( gyroDevice );
                }
            }
            return _entries.Count > 0;
        }

        public bool GetFrom(Guid key, [DisallowNull] IList<GyroPitchTimeseriesEntity> result )
        {
            return _entries.From( key, result );
        }

        public bool GetUntil(Guid key, [DisallowNull] IList<GyroPitchTimeseriesEntity> result )
        {
            return _entries.Until( key, result );
        }

        public bool GetOver(Guid firstKey, Guid lastKey, [DisallowNull] IList<GyroPitchTimeseriesEntity> result )
        {
            return _entries.Over( firstKey, lastKey, result );
        }

        public bool GetAll([DisallowNull] IList<GyroPitchTimeseriesEntity> result )
        {
            return _entries.All( result );
        }

        public GyroPitchTimeseriesEntity? GetGyroPitchTimeseriesByGyroDevice( Guid? gyroDevice )
        {
            throw new NotImplementedException();
        }

        public IList<GyroPitchTimeseriesEntity> GetGyroPitchTimeseriesCollectionByGyroDeviceIsNull(  )
        {
            throw new NotImplementedException();
        }

    }
    public class GyroPitchTimeseriesByGyroDeviceIsNullEntityIndex
    {
    }

    public class GyroRateOfTurnTimeseriesByGyroDeviceEntityIndex
    {
        readonly SortedWeakReferenceList<Guid, GyroRateOfTurnTimeseriesEntity> _entries = new SortedWeakReferenceList<Guid, GyroRateOfTurnTimeseriesEntity>( );

        public GyroRateOfTurnTimeseriesByGyroDeviceEntityIndex( )
        {
        }

        public void Add( GyroRateOfTurnTimeseriesEntity entity )
        {
            if ( entity.GyroDeviceId is Guid gyroDevice )
            {
                if ( _entries.TryGetValue( gyroDevice, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( gyroDevice, new WeakReference<GyroRateOfTurnTimeseriesEntity>( entity, false ) );
                }
            }
            else
            {
                throw new ArgumentException( "entity.GyroDeviceId is null.", nameof( entity ) );
            }
        }

        public bool GetByGyroDeviceId( Guid gyroDevice, out GyroRateOfTurnTimeseriesEntity? entity )
        {
            entity = null;
            if ( _entries.TryGetValue( gyroDevice, out var weakReference ) )
            {
                if ( weakReference.TryGetTarget( out entity ) == false )
                {
                    _entries.Remove( gyroDevice );
                }
            }
            return _entries.Count > 0;
        }

        public bool GetFrom(Guid key, [DisallowNull] IList<GyroRateOfTurnTimeseriesEntity> result )
        {
            return _entries.From( key, result );
        }

        public bool GetUntil(Guid key, [DisallowNull] IList<GyroRateOfTurnTimeseriesEntity> result )
        {
            return _entries.Until( key, result );
        }

        public bool GetOver(Guid firstKey, Guid lastKey, [DisallowNull] IList<GyroRateOfTurnTimeseriesEntity> result )
        {
            return _entries.Over( firstKey, lastKey, result );
        }

        public bool GetAll([DisallowNull] IList<GyroRateOfTurnTimeseriesEntity> result )
        {
            return _entries.All( result );
        }

        public GyroRateOfTurnTimeseriesEntity? GetGyroRateOfTurnTimeseriesByGyroDevice( Guid? gyroDevice )
        {
            throw new NotImplementedException();
        }

        public IList<GyroRateOfTurnTimeseriesEntity> GetGyroRateOfTurnTimeseriesCollectionByGyroDeviceIsNull(  )
        {
            throw new NotImplementedException();
        }

    }
    public class GyroRateOfTurnTimeseriesByGyroDeviceIsNullEntityIndex
    {
    }

    public class GyroRollTimeseriesByGyroDeviceEntityIndex
    {
        readonly SortedWeakReferenceList<Guid, GyroRollTimeseriesEntity> _entries = new SortedWeakReferenceList<Guid, GyroRollTimeseriesEntity>( );

        public GyroRollTimeseriesByGyroDeviceEntityIndex( )
        {
        }

        public void Add( GyroRollTimeseriesEntity entity )
        {
            if ( entity.GyroDeviceId is Guid gyroDevice )
            {
                if ( _entries.TryGetValue( gyroDevice, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( gyroDevice, new WeakReference<GyroRollTimeseriesEntity>( entity, false ) );
                }
            }
            else
            {
                throw new ArgumentException( "entity.GyroDeviceId is null.", nameof( entity ) );
            }
        }

        public bool GetByGyroDeviceId( Guid gyroDevice, out GyroRollTimeseriesEntity? entity )
        {
            entity = null;
            if ( _entries.TryGetValue( gyroDevice, out var weakReference ) )
            {
                if ( weakReference.TryGetTarget( out entity ) == false )
                {
                    _entries.Remove( gyroDevice );
                }
            }
            return _entries.Count > 0;
        }

        public bool GetFrom(Guid key, [DisallowNull] IList<GyroRollTimeseriesEntity> result )
        {
            return _entries.From( key, result );
        }

        public bool GetUntil(Guid key, [DisallowNull] IList<GyroRollTimeseriesEntity> result )
        {
            return _entries.Until( key, result );
        }

        public bool GetOver(Guid firstKey, Guid lastKey, [DisallowNull] IList<GyroRollTimeseriesEntity> result )
        {
            return _entries.Over( firstKey, lastKey, result );
        }

        public bool GetAll([DisallowNull] IList<GyroRollTimeseriesEntity> result )
        {
            return _entries.All( result );
        }

        public GyroRollTimeseriesEntity? GetGyroRollTimeseriesByGyroDevice( Guid? gyroDevice )
        {
            throw new NotImplementedException();
        }

        public IList<GyroRollTimeseriesEntity> GetGyroRollTimeseriesCollectionByGyroDeviceIsNull(  )
        {
            throw new NotImplementedException();
        }

    }
    public class GyroRollTimeseriesByGyroDeviceIsNullEntityIndex
    {
    }

    public class GyroSpeedTimeseriesByGyroDeviceEntityIndex
    {
        readonly SortedWeakReferenceList<Guid, GyroSpeedTimeseriesEntity> _entries = new SortedWeakReferenceList<Guid, GyroSpeedTimeseriesEntity>( );

        public GyroSpeedTimeseriesByGyroDeviceEntityIndex( )
        {
        }

        public void Add( GyroSpeedTimeseriesEntity entity )
        {
            if ( entity.GyroDeviceId is Guid gyroDevice )
            {
                if ( _entries.TryGetValue( gyroDevice, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( gyroDevice, new WeakReference<GyroSpeedTimeseriesEntity>( entity, false ) );
                }
            }
            else
            {
                throw new ArgumentException( "entity.GyroDeviceId is null.", nameof( entity ) );
            }
        }

        public bool GetByGyroDeviceId( Guid gyroDevice, out GyroSpeedTimeseriesEntity? entity )
        {
            entity = null;
            if ( _entries.TryGetValue( gyroDevice, out var weakReference ) )
            {
                if ( weakReference.TryGetTarget( out entity ) == false )
                {
                    _entries.Remove( gyroDevice );
                }
            }
            return _entries.Count > 0;
        }

        public bool GetFrom(Guid key, [DisallowNull] IList<GyroSpeedTimeseriesEntity> result )
        {
            return _entries.From( key, result );
        }

        public bool GetUntil(Guid key, [DisallowNull] IList<GyroSpeedTimeseriesEntity> result )
        {
            return _entries.Until( key, result );
        }

        public bool GetOver(Guid firstKey, Guid lastKey, [DisallowNull] IList<GyroSpeedTimeseriesEntity> result )
        {
            return _entries.Over( firstKey, lastKey, result );
        }

        public bool GetAll([DisallowNull] IList<GyroSpeedTimeseriesEntity> result )
        {
            return _entries.All( result );
        }

        public GyroSpeedTimeseriesEntity? GetGyroSpeedTimeseriesByGyroDevice( Guid? gyroDevice )
        {
            throw new NotImplementedException();
        }

        public IList<GyroSpeedTimeseriesEntity> GetGyroSpeedTimeseriesCollectionByGyroDeviceIsNull(  )
        {
            throw new NotImplementedException();
        }

    }
    public class GyroSpeedTimeseriesByGyroDeviceIsNullEntityIndex
    {
    }

    public class WeatherStationAbsoluteHumidityTimeseriesByWeatherStationEntityIndex
    {
        readonly SortedWeakReferenceList<Guid, WeatherStationAbsoluteHumidityTimeseriesEntity> _entries = new SortedWeakReferenceList<Guid, WeatherStationAbsoluteHumidityTimeseriesEntity>( );

        public WeatherStationAbsoluteHumidityTimeseriesByWeatherStationEntityIndex( )
        {
        }

        public void Add( WeatherStationAbsoluteHumidityTimeseriesEntity entity )
        {
            if ( entity.WeatherStationId is Guid weatherStation )
            {
                if ( _entries.TryGetValue( weatherStation, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( weatherStation, new WeakReference<WeatherStationAbsoluteHumidityTimeseriesEntity>( entity, false ) );
                }
            }
            else
            {
                throw new ArgumentException( "entity.WeatherStationId is null.", nameof( entity ) );
            }
        }

        public bool GetByWeatherStationId( Guid weatherStation, out WeatherStationAbsoluteHumidityTimeseriesEntity? entity )
        {
            entity = null;
            if ( _entries.TryGetValue( weatherStation, out var weakReference ) )
            {
                if ( weakReference.TryGetTarget( out entity ) == false )
                {
                    _entries.Remove( weatherStation );
                }
            }
            return _entries.Count > 0;
        }

        public bool GetFrom(Guid key, [DisallowNull] IList<WeatherStationAbsoluteHumidityTimeseriesEntity> result )
        {
            return _entries.From( key, result );
        }

        public bool GetUntil(Guid key, [DisallowNull] IList<WeatherStationAbsoluteHumidityTimeseriesEntity> result )
        {
            return _entries.Until( key, result );
        }

        public bool GetOver(Guid firstKey, Guid lastKey, [DisallowNull] IList<WeatherStationAbsoluteHumidityTimeseriesEntity> result )
        {
            return _entries.Over( firstKey, lastKey, result );
        }

        public bool GetAll([DisallowNull] IList<WeatherStationAbsoluteHumidityTimeseriesEntity> result )
        {
            return _entries.All( result );
        }

        public WeatherStationAbsoluteHumidityTimeseriesEntity? GetWeatherStationAbsoluteHumidityTimeseriesByWeatherStation( Guid? weatherStation )
        {
            throw new NotImplementedException();
        }

        public IList<WeatherStationAbsoluteHumidityTimeseriesEntity> GetWeatherStationAbsoluteHumidityTimeseriesCollectionByWeatherStationIsNull(  )
        {
            throw new NotImplementedException();
        }

    }
    public class WeatherStationAbsoluteHumidityTimeseriesByWeatherStationIsNullEntityIndex
    {
    }

    public class WeatherStationAirTemperatureTimeseriesByWeatherStationEntityIndex
    {
        readonly SortedWeakReferenceList<Guid, WeatherStationAirTemperatureTimeseriesEntity> _entries = new SortedWeakReferenceList<Guid, WeatherStationAirTemperatureTimeseriesEntity>( );

        public WeatherStationAirTemperatureTimeseriesByWeatherStationEntityIndex( )
        {
        }

        public void Add( WeatherStationAirTemperatureTimeseriesEntity entity )
        {
            if ( entity.WeatherStationId is Guid weatherStation )
            {
                if ( _entries.TryGetValue( weatherStation, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( weatherStation, new WeakReference<WeatherStationAirTemperatureTimeseriesEntity>( entity, false ) );
                }
            }
            else
            {
                throw new ArgumentException( "entity.WeatherStationId is null.", nameof( entity ) );
            }
        }

        public bool GetByWeatherStationId( Guid weatherStation, out WeatherStationAirTemperatureTimeseriesEntity? entity )
        {
            entity = null;
            if ( _entries.TryGetValue( weatherStation, out var weakReference ) )
            {
                if ( weakReference.TryGetTarget( out entity ) == false )
                {
                    _entries.Remove( weatherStation );
                }
            }
            return _entries.Count > 0;
        }

        public bool GetFrom(Guid key, [DisallowNull] IList<WeatherStationAirTemperatureTimeseriesEntity> result )
        {
            return _entries.From( key, result );
        }

        public bool GetUntil(Guid key, [DisallowNull] IList<WeatherStationAirTemperatureTimeseriesEntity> result )
        {
            return _entries.Until( key, result );
        }

        public bool GetOver(Guid firstKey, Guid lastKey, [DisallowNull] IList<WeatherStationAirTemperatureTimeseriesEntity> result )
        {
            return _entries.Over( firstKey, lastKey, result );
        }

        public bool GetAll([DisallowNull] IList<WeatherStationAirTemperatureTimeseriesEntity> result )
        {
            return _entries.All( result );
        }

        public WeatherStationAirTemperatureTimeseriesEntity? GetWeatherStationAirTemperatureTimeseriesByWeatherStation( Guid? weatherStation )
        {
            throw new NotImplementedException();
        }

        public IList<WeatherStationAirTemperatureTimeseriesEntity> GetWeatherStationAirTemperatureTimeseriesCollectionByWeatherStationIsNull(  )
        {
            throw new NotImplementedException();
        }

    }
    public class WeatherStationAirTemperatureTimeseriesByWeatherStationIsNullEntityIndex
    {
    }

    public class WeatherStationBarometricPressureTimeseriesByWeatherStationEntityIndex
    {
        readonly SortedWeakReferenceList<Guid, WeatherStationBarometricPressureTimeseriesEntity> _entries = new SortedWeakReferenceList<Guid, WeatherStationBarometricPressureTimeseriesEntity>( );

        public WeatherStationBarometricPressureTimeseriesByWeatherStationEntityIndex( )
        {
        }

        public void Add( WeatherStationBarometricPressureTimeseriesEntity entity )
        {
            if ( entity.WeatherStationId is Guid weatherStation )
            {
                if ( _entries.TryGetValue( weatherStation, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( weatherStation, new WeakReference<WeatherStationBarometricPressureTimeseriesEntity>( entity, false ) );
                }
            }
            else
            {
                throw new ArgumentException( "entity.WeatherStationId is null.", nameof( entity ) );
            }
        }

        public bool GetByWeatherStationId( Guid weatherStation, out WeatherStationBarometricPressureTimeseriesEntity? entity )
        {
            entity = null;
            if ( _entries.TryGetValue( weatherStation, out var weakReference ) )
            {
                if ( weakReference.TryGetTarget( out entity ) == false )
                {
                    _entries.Remove( weatherStation );
                }
            }
            return _entries.Count > 0;
        }

        public bool GetFrom(Guid key, [DisallowNull] IList<WeatherStationBarometricPressureTimeseriesEntity> result )
        {
            return _entries.From( key, result );
        }

        public bool GetUntil(Guid key, [DisallowNull] IList<WeatherStationBarometricPressureTimeseriesEntity> result )
        {
            return _entries.Until( key, result );
        }

        public bool GetOver(Guid firstKey, Guid lastKey, [DisallowNull] IList<WeatherStationBarometricPressureTimeseriesEntity> result )
        {
            return _entries.Over( firstKey, lastKey, result );
        }

        public bool GetAll([DisallowNull] IList<WeatherStationBarometricPressureTimeseriesEntity> result )
        {
            return _entries.All( result );
        }

        public WeatherStationBarometricPressureTimeseriesEntity? GetWeatherStationBarometricPressureTimeseriesByWeatherStation( Guid? weatherStation )
        {
            throw new NotImplementedException();
        }

        public IList<WeatherStationBarometricPressureTimeseriesEntity> GetWeatherStationBarometricPressureTimeseriesCollectionByWeatherStationIsNull(  )
        {
            throw new NotImplementedException();
        }

    }
    public class WeatherStationBarometricPressureTimeseriesByWeatherStationIsNullEntityIndex
    {
    }

    public class WeatherStationDewPointTimeseriesByWeatherStationEntityIndex
    {
        readonly SortedWeakReferenceList<Guid, WeatherStationDewPointTimeseriesEntity> _entries = new SortedWeakReferenceList<Guid, WeatherStationDewPointTimeseriesEntity>( );

        public WeatherStationDewPointTimeseriesByWeatherStationEntityIndex( )
        {
        }

        public void Add( WeatherStationDewPointTimeseriesEntity entity )
        {
            if ( entity.WeatherStationId is Guid weatherStation )
            {
                if ( _entries.TryGetValue( weatherStation, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( weatherStation, new WeakReference<WeatherStationDewPointTimeseriesEntity>( entity, false ) );
                }
            }
            else
            {
                throw new ArgumentException( "entity.WeatherStationId is null.", nameof( entity ) );
            }
        }

        public bool GetByWeatherStationId( Guid weatherStation, out WeatherStationDewPointTimeseriesEntity? entity )
        {
            entity = null;
            if ( _entries.TryGetValue( weatherStation, out var weakReference ) )
            {
                if ( weakReference.TryGetTarget( out entity ) == false )
                {
                    _entries.Remove( weatherStation );
                }
            }
            return _entries.Count > 0;
        }

        public bool GetFrom(Guid key, [DisallowNull] IList<WeatherStationDewPointTimeseriesEntity> result )
        {
            return _entries.From( key, result );
        }

        public bool GetUntil(Guid key, [DisallowNull] IList<WeatherStationDewPointTimeseriesEntity> result )
        {
            return _entries.Until( key, result );
        }

        public bool GetOver(Guid firstKey, Guid lastKey, [DisallowNull] IList<WeatherStationDewPointTimeseriesEntity> result )
        {
            return _entries.Over( firstKey, lastKey, result );
        }

        public bool GetAll([DisallowNull] IList<WeatherStationDewPointTimeseriesEntity> result )
        {
            return _entries.All( result );
        }

        public WeatherStationDewPointTimeseriesEntity? GetWeatherStationDewPointTimeseriesByWeatherStation( Guid? weatherStation )
        {
            throw new NotImplementedException();
        }

        public IList<WeatherStationDewPointTimeseriesEntity> GetWeatherStationDewPointTimeseriesCollectionByWeatherStationIsNull(  )
        {
            throw new NotImplementedException();
        }

    }
    public class WeatherStationDewPointTimeseriesByWeatherStationIsNullEntityIndex
    {
    }

    public class WeatherStationRelativeHumidityTimeseriesByWeatherStationEntityIndex
    {
        readonly SortedWeakReferenceList<Guid, WeatherStationRelativeHumidityTimeseriesEntity> _entries = new SortedWeakReferenceList<Guid, WeatherStationRelativeHumidityTimeseriesEntity>( );

        public WeatherStationRelativeHumidityTimeseriesByWeatherStationEntityIndex( )
        {
        }

        public void Add( WeatherStationRelativeHumidityTimeseriesEntity entity )
        {
            if ( entity.WeatherStationId is Guid weatherStation )
            {
                if ( _entries.TryGetValue( weatherStation, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( weatherStation, new WeakReference<WeatherStationRelativeHumidityTimeseriesEntity>( entity, false ) );
                }
            }
            else
            {
                throw new ArgumentException( "entity.WeatherStationId is null.", nameof( entity ) );
            }
        }

        public bool GetByWeatherStationId( Guid weatherStation, out WeatherStationRelativeHumidityTimeseriesEntity? entity )
        {
            entity = null;
            if ( _entries.TryGetValue( weatherStation, out var weakReference ) )
            {
                if ( weakReference.TryGetTarget( out entity ) == false )
                {
                    _entries.Remove( weatherStation );
                }
            }
            return _entries.Count > 0;
        }

        public bool GetFrom(Guid key, [DisallowNull] IList<WeatherStationRelativeHumidityTimeseriesEntity> result )
        {
            return _entries.From( key, result );
        }

        public bool GetUntil(Guid key, [DisallowNull] IList<WeatherStationRelativeHumidityTimeseriesEntity> result )
        {
            return _entries.Until( key, result );
        }

        public bool GetOver(Guid firstKey, Guid lastKey, [DisallowNull] IList<WeatherStationRelativeHumidityTimeseriesEntity> result )
        {
            return _entries.Over( firstKey, lastKey, result );
        }

        public bool GetAll([DisallowNull] IList<WeatherStationRelativeHumidityTimeseriesEntity> result )
        {
            return _entries.All( result );
        }

        public WeatherStationRelativeHumidityTimeseriesEntity? GetWeatherStationRelativeHumidityTimeseriesByWeatherStation( Guid? weatherStation )
        {
            throw new NotImplementedException();
        }

        public IList<WeatherStationRelativeHumidityTimeseriesEntity> GetWeatherStationRelativeHumidityTimeseriesCollectionByWeatherStationIsNull(  )
        {
            throw new NotImplementedException();
        }

    }
    public class WeatherStationRelativeHumidityTimeseriesByWeatherStationIsNullEntityIndex
    {
    }

    public class WeatherStationWaterTemperatureTimeseriesByWeatherStationEntityIndex
    {
        readonly SortedWeakReferenceList<Guid, WeatherStationWaterTemperatureTimeseriesEntity> _entries = new SortedWeakReferenceList<Guid, WeatherStationWaterTemperatureTimeseriesEntity>( );

        public WeatherStationWaterTemperatureTimeseriesByWeatherStationEntityIndex( )
        {
        }

        public void Add( WeatherStationWaterTemperatureTimeseriesEntity entity )
        {
            if ( entity.WeatherStationId is Guid weatherStation )
            {
                if ( _entries.TryGetValue( weatherStation, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( weatherStation, new WeakReference<WeatherStationWaterTemperatureTimeseriesEntity>( entity, false ) );
                }
            }
            else
            {
                throw new ArgumentException( "entity.WeatherStationId is null.", nameof( entity ) );
            }
        }

        public bool GetByWeatherStationId( Guid weatherStation, out WeatherStationWaterTemperatureTimeseriesEntity? entity )
        {
            entity = null;
            if ( _entries.TryGetValue( weatherStation, out var weakReference ) )
            {
                if ( weakReference.TryGetTarget( out entity ) == false )
                {
                    _entries.Remove( weatherStation );
                }
            }
            return _entries.Count > 0;
        }

        public bool GetFrom(Guid key, [DisallowNull] IList<WeatherStationWaterTemperatureTimeseriesEntity> result )
        {
            return _entries.From( key, result );
        }

        public bool GetUntil(Guid key, [DisallowNull] IList<WeatherStationWaterTemperatureTimeseriesEntity> result )
        {
            return _entries.Until( key, result );
        }

        public bool GetOver(Guid firstKey, Guid lastKey, [DisallowNull] IList<WeatherStationWaterTemperatureTimeseriesEntity> result )
        {
            return _entries.Over( firstKey, lastKey, result );
        }

        public bool GetAll([DisallowNull] IList<WeatherStationWaterTemperatureTimeseriesEntity> result )
        {
            return _entries.All( result );
        }

        public WeatherStationWaterTemperatureTimeseriesEntity? GetWeatherStationWaterTemperatureTimeseriesByWeatherStation( Guid? weatherStation )
        {
            throw new NotImplementedException();
        }

        public IList<WeatherStationWaterTemperatureTimeseriesEntity> GetWeatherStationWaterTemperatureTimeseriesCollectionByWeatherStationIsNull(  )
        {
            throw new NotImplementedException();
        }

    }
    public class WeatherStationWaterTemperatureTimeseriesByWeatherStationIsNullEntityIndex
    {
    }

    public class WeatherStationWindDirectionTimeseriesByWeatherStationEntityIndex
    {
        readonly SortedWeakReferenceList<Guid, WeatherStationWindDirectionTimeseriesEntity> _entries = new SortedWeakReferenceList<Guid, WeatherStationWindDirectionTimeseriesEntity>( );

        public WeatherStationWindDirectionTimeseriesByWeatherStationEntityIndex( )
        {
        }

        public void Add( WeatherStationWindDirectionTimeseriesEntity entity )
        {
            if ( entity.WeatherStationId is Guid weatherStation )
            {
                if ( _entries.TryGetValue( weatherStation, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( weatherStation, new WeakReference<WeatherStationWindDirectionTimeseriesEntity>( entity, false ) );
                }
            }
            else
            {
                throw new ArgumentException( "entity.WeatherStationId is null.", nameof( entity ) );
            }
        }

        public bool GetByWeatherStationId( Guid weatherStation, out WeatherStationWindDirectionTimeseriesEntity? entity )
        {
            entity = null;
            if ( _entries.TryGetValue( weatherStation, out var weakReference ) )
            {
                if ( weakReference.TryGetTarget( out entity ) == false )
                {
                    _entries.Remove( weatherStation );
                }
            }
            return _entries.Count > 0;
        }

        public bool GetFrom(Guid key, [DisallowNull] IList<WeatherStationWindDirectionTimeseriesEntity> result )
        {
            return _entries.From( key, result );
        }

        public bool GetUntil(Guid key, [DisallowNull] IList<WeatherStationWindDirectionTimeseriesEntity> result )
        {
            return _entries.Until( key, result );
        }

        public bool GetOver(Guid firstKey, Guid lastKey, [DisallowNull] IList<WeatherStationWindDirectionTimeseriesEntity> result )
        {
            return _entries.Over( firstKey, lastKey, result );
        }

        public bool GetAll([DisallowNull] IList<WeatherStationWindDirectionTimeseriesEntity> result )
        {
            return _entries.All( result );
        }

        public WeatherStationWindDirectionTimeseriesEntity? GetWeatherStationWindDirectionTimeseriesByWeatherStation( Guid? weatherStation )
        {
            throw new NotImplementedException();
        }

        public IList<WeatherStationWindDirectionTimeseriesEntity> GetWeatherStationWindDirectionTimeseriesCollectionByWeatherStationIsNull(  )
        {
            throw new NotImplementedException();
        }

    }
    public class WeatherStationWindDirectionTimeseriesByWeatherStationIsNullEntityIndex
    {
    }

    public class WeatherStationWindSpeedTimeseriesByWeatherStationEntityIndex
    {
        readonly SortedWeakReferenceList<Guid, WeatherStationWindSpeedTimeseriesEntity> _entries = new SortedWeakReferenceList<Guid, WeatherStationWindSpeedTimeseriesEntity>( );

        public WeatherStationWindSpeedTimeseriesByWeatherStationEntityIndex( )
        {
        }

        public void Add( WeatherStationWindSpeedTimeseriesEntity entity )
        {
            if ( entity.WeatherStationId is Guid weatherStation )
            {
                if ( _entries.TryGetValue( weatherStation, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( weatherStation, new WeakReference<WeatherStationWindSpeedTimeseriesEntity>( entity, false ) );
                }
            }
            else
            {
                throw new ArgumentException( "entity.WeatherStationId is null.", nameof( entity ) );
            }
        }

        public bool GetByWeatherStationId( Guid weatherStation, out WeatherStationWindSpeedTimeseriesEntity? entity )
        {
            entity = null;
            if ( _entries.TryGetValue( weatherStation, out var weakReference ) )
            {
                if ( weakReference.TryGetTarget( out entity ) == false )
                {
                    _entries.Remove( weatherStation );
                }
            }
            return _entries.Count > 0;
        }

        public bool GetFrom(Guid key, [DisallowNull] IList<WeatherStationWindSpeedTimeseriesEntity> result )
        {
            return _entries.From( key, result );
        }

        public bool GetUntil(Guid key, [DisallowNull] IList<WeatherStationWindSpeedTimeseriesEntity> result )
        {
            return _entries.Until( key, result );
        }

        public bool GetOver(Guid firstKey, Guid lastKey, [DisallowNull] IList<WeatherStationWindSpeedTimeseriesEntity> result )
        {
            return _entries.Over( firstKey, lastKey, result );
        }

        public bool GetAll([DisallowNull] IList<WeatherStationWindSpeedTimeseriesEntity> result )
        {
            return _entries.All( result );
        }

        public WeatherStationWindSpeedTimeseriesEntity? GetWeatherStationWindSpeedTimeseriesByWeatherStation( Guid? weatherStation )
        {
            throw new NotImplementedException();
        }

        public IList<WeatherStationWindSpeedTimeseriesEntity> GetWeatherStationWindSpeedTimeseriesCollectionByWeatherStationIsNull(  )
        {
            throw new NotImplementedException();
        }

    }
    public class WeatherStationWindSpeedTimeseriesByWeatherStationIsNullEntityIndex
    {
    }

    public class TimeSpanTimeseriesValueByTimeseriesAndTimestampEntityIndex
    {
        public class ByTimestamp
        {
            readonly SortedWeakReferenceList<DateTime, TimeSpanTimeseriesValueEntity> _entries = new SortedWeakReferenceList<DateTime, TimeSpanTimeseriesValueEntity>( );

            public ByTimestamp( )
            {
            }

            public void Add( TimeSpanTimeseriesValueEntity entity )
            {
                if( _entries.TryGetValue(entity.Timestamp, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Timestamp, new WeakReference<TimeSpanTimeseriesValueEntity>( entity, false ) );
                }
            }

            public bool GetByTimestamp( DateTime timestamp, out TimeSpanTimeseriesValueEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( timestamp, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( timestamp );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(DateTime key, [DisallowNull] IList<TimeSpanTimeseriesValueEntity> result )
            {
                return _entries.From( key, result );
            }

            public bool GetUntil(DateTime key, [DisallowNull] IList<TimeSpanTimeseriesValueEntity> result )
            {
                return _entries.Until( key, result );
            }

            public bool GetOver(DateTime firstKey, DateTime lastKey, [DisallowNull] IList<TimeSpanTimeseriesValueEntity> result )
            {
                return _entries.Over( firstKey, lastKey, result );
            }

            public bool GetAll([DisallowNull] IList<TimeSpanTimeseriesValueEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<DateTime, ByTimestamp> _entries = new SortedListEx<DateTime, ByTimestamp>( );
        public List<TimeSpanTimeseriesValueEntity> GetTimeSpanTimeseriesValueCollectionByTimeseries( Guid timeseries )
        {
            throw new NotImplementedException();
        }

        public TimeSpanTimeseriesValueEntity? GetTimeSpanTimeseriesValueByTimeseriesAndTimestamp( Guid timeseries, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public TimeSpanTimeseriesValueEntity? GetTimeSpanTimeseriesValueByTimeseriesAtTimestamp( Guid timeseries, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<TimeSpanTimeseriesValueEntity> GetTimeSpanTimeseriesValueByTimeseriesFromTimestamp( Guid timeseries, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<TimeSpanTimeseriesValueEntity> GetTimeSpanTimeseriesValueByTimeseriesUntilTimestamp( Guid timeseries, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        IList<TimeSpanTimeseriesValueEntity> GetTimeSpanTimeseriesValueByTimeseriesOverTimestamp( Guid timeseries, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

    }
    public class TimeSpanTimeseriesValueByTimestampEntityIndex
    {
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, TimeSpanTimeseriesValueEntity> _entries = new SortedWeakReferenceList<Guid, TimeSpanTimeseriesValueEntity>( );
            public ById( )
            {
            }

            public void Add( TimeSpanTimeseriesValueEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<TimeSpanTimeseriesValueEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out TimeSpanTimeseriesValueEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<TimeSpanTimeseriesValueEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<TimeSpanTimeseriesValueEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<TimeSpanTimeseriesValueEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<TimeSpanTimeseriesValueEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<DateTime, ById> _entries = new SortedListEx<DateTime, ById>( );

        public TimeSpanTimeseriesValueByTimestampEntityIndex( )
        {
        }

        public List<TimeSpanTimeseriesValueEntity> GetTimeSpanTimeseriesValueCollectionByTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<TimeSpanTimeseriesValueEntity> GetTimeSpanTimeseriesValueCollectionAtTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<TimeSpanTimeseriesValueEntity> GetTimeSpanTimeseriesValueCollectionFromTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<TimeSpanTimeseriesValueEntity> GetTimeSpanTimeseriesValueCollectionUntilTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        IList<TimeSpanTimeseriesValueEntity> GetTimeSpanTimeseriesValueCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

    }

    public class TrackableItemTrackLinkByItemAndStartEntityIndex
    {
        public class ByStart
        {
            readonly SortedWeakReferenceList<DateTime, TrackableItemTrackLinkEntity> _entries = new SortedWeakReferenceList<DateTime, TrackableItemTrackLinkEntity>( );

            public ByStart( )
            {
            }

            public void Add( TrackableItemTrackLinkEntity entity )
            {
                if( _entries.TryGetValue(entity.Start, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Start, new WeakReference<TrackableItemTrackLinkEntity>( entity, false ) );
                }
            }

            public bool GetByStart( DateTime start, out TrackableItemTrackLinkEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( start, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( start );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(DateTime key, [DisallowNull] IList<TrackableItemTrackLinkEntity> result )
            {
                return _entries.From( key, result );
            }

            public bool GetUntil(DateTime key, [DisallowNull] IList<TrackableItemTrackLinkEntity> result )
            {
                return _entries.Until( key, result );
            }

            public bool GetOver(DateTime firstKey, DateTime lastKey, [DisallowNull] IList<TrackableItemTrackLinkEntity> result )
            {
                return _entries.Over( firstKey, lastKey, result );
            }

            public bool GetAll([DisallowNull] IList<TrackableItemTrackLinkEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<DateTime, ByStart> _entries = new SortedListEx<DateTime, ByStart>( );
        public List<TrackableItemTrackLinkEntity> GetTrackableItemTrackLinkCollectionByItem( Guid item )
        {
            throw new NotImplementedException();
        }

        public TrackableItemTrackLinkEntity? GetTrackableItemTrackLinkByItemAndStart( Guid item, DateTime start )
        {
            throw new NotImplementedException();
        }

        public TrackableItemTrackLinkEntity? GetTrackableItemTrackLinkByItemAtStart( Guid item, DateTime start )
        {
            throw new NotImplementedException();
        }

        public IList<TrackableItemTrackLinkEntity> GetTrackableItemTrackLinkByItemFromStart( Guid item, DateTime start )
        {
            throw new NotImplementedException();
        }

        public IList<TrackableItemTrackLinkEntity> GetTrackableItemTrackLinkByItemUntilStart( Guid item, DateTime start )
        {
            throw new NotImplementedException();
        }

        IList<TrackableItemTrackLinkEntity> GetTrackableItemTrackLinkByItemOverStart( Guid item, DateTime fromStart, DateTime untilStart )
        {
            throw new NotImplementedException();
        }

    }
    public class TrackableItemTrackLinkByItemAndEndEntityIndex
    {
        public class ByEnd
        {
            readonly SortedListEx<DateTime, ById> _entries = new SortedListEx<DateTime, ById>( );
            List<DateTime> _emptyKeys = new List<DateTime>( );

            public ByEnd( )
            {
            }

            void RemoveEmptyKeys( )
            {
                var emptyKeyCount = _emptyKeys.Count;
                for ( int i = 0; i < emptyKeyCount; i++ )
                {
                    _entries.Remove( _emptyKeys[ i ] );
                }
                _emptyKeys.Clear( );
            }

            public bool GetAll([DisallowNull] IList<TrackableItemTrackLinkEntity> result )
            {
                foreach( var entry in _entries )
                {
                    if( entry.Value.GetAll( result ) == false )
                    {
                        _emptyKeys.Add( entry.Key );
                    }
                }
                RemoveEmptyKeys( );
                return _entries.Count > 0;
            }

        }
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, TrackableItemTrackLinkEntity> _entries = new SortedWeakReferenceList<Guid, TrackableItemTrackLinkEntity>( );
            public ById( )
            {
            }

            public void Add( TrackableItemTrackLinkEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<TrackableItemTrackLinkEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out TrackableItemTrackLinkEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<TrackableItemTrackLinkEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<TrackableItemTrackLinkEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<TrackableItemTrackLinkEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<TrackableItemTrackLinkEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<Guid, ByEnd> _entries = new SortedListEx<Guid, ByEnd>( );

        public TrackableItemTrackLinkByItemAndEndEntityIndex( )
        {
        }

        public List<TrackableItemTrackLinkEntity> GetTrackableItemTrackLinkCollectionByItem( Guid item )
        {
            throw new NotImplementedException();
        }

        public IList<TrackableItemTrackLinkEntity> GetTrackableItemTrackLinkCollectionByItem(  )
        {
            throw new NotImplementedException();
        }

        public List<TrackableItemTrackLinkEntity> GetTrackableItemTrackLinkCollectionByItemAndEnd( Guid item, DateTime? end )
        {
            throw new NotImplementedException();
        }

        public IList<TrackableItemTrackLinkEntity> GetTrackableItemTrackLinkCollectionByItemAndEndIsNull( Guid item )
        {
            throw new NotImplementedException();
        }

        public IList<TrackableItemTrackLinkEntity> GetTrackableItemTrackLinkCollectionByItemAtEnd( Guid item, DateTime? end )
        {
            throw new NotImplementedException();
        }

        public IList<TrackableItemTrackLinkEntity> GetTrackableItemTrackLinkCollectionByItemFromEnd( Guid item, DateTime? end )
        {
            throw new NotImplementedException();
        }

        public IList<TrackableItemTrackLinkEntity> GetTrackableItemTrackLinkCollectionByItemUntilEnd( Guid item, DateTime? end )
        {
            throw new NotImplementedException();
        }

        IList<TrackableItemTrackLinkEntity> GetTrackableItemTrackLinkCollectionByItemOverEnd( Guid item, DateTime fromEnd, DateTime untilEnd )
        {
            throw new NotImplementedException();
        }

    }

    public class TrackableItemTrackLinkByItemAndEndIsNullEntityIndex
    {
    }

    public class TrackableItemTrackLinkByTrackAndStartEntityIndex
    {
        public class ByStart
        {
            readonly SortedWeakReferenceList<DateTime, TrackableItemTrackLinkEntity> _entries = new SortedWeakReferenceList<DateTime, TrackableItemTrackLinkEntity>( );

            public ByStart( )
            {
            }

            public void Add( TrackableItemTrackLinkEntity entity )
            {
                if( _entries.TryGetValue(entity.Start, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Start, new WeakReference<TrackableItemTrackLinkEntity>( entity, false ) );
                }
            }

            public bool GetByStart( DateTime start, out TrackableItemTrackLinkEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( start, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( start );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(DateTime key, [DisallowNull] IList<TrackableItemTrackLinkEntity> result )
            {
                return _entries.From( key, result );
            }

            public bool GetUntil(DateTime key, [DisallowNull] IList<TrackableItemTrackLinkEntity> result )
            {
                return _entries.Until( key, result );
            }

            public bool GetOver(DateTime firstKey, DateTime lastKey, [DisallowNull] IList<TrackableItemTrackLinkEntity> result )
            {
                return _entries.Over( firstKey, lastKey, result );
            }

            public bool GetAll([DisallowNull] IList<TrackableItemTrackLinkEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<DateTime, ByStart> _entries = new SortedListEx<DateTime, ByStart>( );
        public List<TrackableItemTrackLinkEntity> GetTrackableItemTrackLinkCollectionByTrack( Guid track )
        {
            throw new NotImplementedException();
        }

        public TrackableItemTrackLinkEntity? GetTrackableItemTrackLinkByTrackAndStart( Guid track, DateTime start )
        {
            throw new NotImplementedException();
        }

        public TrackableItemTrackLinkEntity? GetTrackableItemTrackLinkByTrackAtStart( Guid track, DateTime start )
        {
            throw new NotImplementedException();
        }

        public IList<TrackableItemTrackLinkEntity> GetTrackableItemTrackLinkByTrackFromStart( Guid track, DateTime start )
        {
            throw new NotImplementedException();
        }

        public IList<TrackableItemTrackLinkEntity> GetTrackableItemTrackLinkByTrackUntilStart( Guid track, DateTime start )
        {
            throw new NotImplementedException();
        }

        IList<TrackableItemTrackLinkEntity> GetTrackableItemTrackLinkByTrackOverStart( Guid track, DateTime fromStart, DateTime untilStart )
        {
            throw new NotImplementedException();
        }

    }
    public class TrackableItemTrackLinkByTrackAndEndEntityIndex
    {
        public class ByEnd
        {
            readonly SortedListEx<DateTime, ById> _entries = new SortedListEx<DateTime, ById>( );
            List<DateTime> _emptyKeys = new List<DateTime>( );

            public ByEnd( )
            {
            }

            void RemoveEmptyKeys( )
            {
                var emptyKeyCount = _emptyKeys.Count;
                for ( int i = 0; i < emptyKeyCount; i++ )
                {
                    _entries.Remove( _emptyKeys[ i ] );
                }
                _emptyKeys.Clear( );
            }

            public bool GetAll([DisallowNull] IList<TrackableItemTrackLinkEntity> result )
            {
                foreach( var entry in _entries )
                {
                    if( entry.Value.GetAll( result ) == false )
                    {
                        _emptyKeys.Add( entry.Key );
                    }
                }
                RemoveEmptyKeys( );
                return _entries.Count > 0;
            }

        }
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, TrackableItemTrackLinkEntity> _entries = new SortedWeakReferenceList<Guid, TrackableItemTrackLinkEntity>( );
            public ById( )
            {
            }

            public void Add( TrackableItemTrackLinkEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<TrackableItemTrackLinkEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out TrackableItemTrackLinkEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<TrackableItemTrackLinkEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<TrackableItemTrackLinkEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<TrackableItemTrackLinkEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<TrackableItemTrackLinkEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<Guid, ByEnd> _entries = new SortedListEx<Guid, ByEnd>( );

        public TrackableItemTrackLinkByTrackAndEndEntityIndex( )
        {
        }

        public List<TrackableItemTrackLinkEntity> GetTrackableItemTrackLinkCollectionByTrack( Guid track )
        {
            throw new NotImplementedException();
        }

        public IList<TrackableItemTrackLinkEntity> GetTrackableItemTrackLinkCollectionByTrack(  )
        {
            throw new NotImplementedException();
        }

        public List<TrackableItemTrackLinkEntity> GetTrackableItemTrackLinkCollectionByTrackAndEnd( Guid track, DateTime? end )
        {
            throw new NotImplementedException();
        }

        public IList<TrackableItemTrackLinkEntity> GetTrackableItemTrackLinkCollectionByTrackAndEndIsNull( Guid track )
        {
            throw new NotImplementedException();
        }

        public IList<TrackableItemTrackLinkEntity> GetTrackableItemTrackLinkCollectionByTrackAtEnd( Guid track, DateTime? end )
        {
            throw new NotImplementedException();
        }

        public IList<TrackableItemTrackLinkEntity> GetTrackableItemTrackLinkCollectionByTrackFromEnd( Guid track, DateTime? end )
        {
            throw new NotImplementedException();
        }

        public IList<TrackableItemTrackLinkEntity> GetTrackableItemTrackLinkCollectionByTrackUntilEnd( Guid track, DateTime? end )
        {
            throw new NotImplementedException();
        }

        IList<TrackableItemTrackLinkEntity> GetTrackableItemTrackLinkCollectionByTrackOverEnd( Guid track, DateTime fromEnd, DateTime untilEnd )
        {
            throw new NotImplementedException();
        }

    }

    public class TrackableItemTrackLinkByTrackAndEndIsNullEntityIndex
    {
    }

    public class TrackableItemTrackLinkByStartEntityIndex
    {
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, TrackableItemTrackLinkEntity> _entries = new SortedWeakReferenceList<Guid, TrackableItemTrackLinkEntity>( );
            public ById( )
            {
            }

            public void Add( TrackableItemTrackLinkEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<TrackableItemTrackLinkEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out TrackableItemTrackLinkEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<TrackableItemTrackLinkEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<TrackableItemTrackLinkEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<TrackableItemTrackLinkEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<TrackableItemTrackLinkEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<DateTime, ById> _entries = new SortedListEx<DateTime, ById>( );

        public TrackableItemTrackLinkByStartEntityIndex( )
        {
        }

        public List<TrackableItemTrackLinkEntity> GetTrackableItemTrackLinkCollectionByStart( DateTime start )
        {
            throw new NotImplementedException();
        }

        public IList<TrackableItemTrackLinkEntity> GetTrackableItemTrackLinkCollectionAtStart( DateTime start )
        {
            throw new NotImplementedException();
        }

        public IList<TrackableItemTrackLinkEntity> GetTrackableItemTrackLinkCollectionFromStart( DateTime start )
        {
            throw new NotImplementedException();
        }

        public IList<TrackableItemTrackLinkEntity> GetTrackableItemTrackLinkCollectionUntilStart( DateTime start )
        {
            throw new NotImplementedException();
        }

        IList<TrackableItemTrackLinkEntity> GetTrackableItemTrackLinkCollectionOverStart( DateTime fromStart, DateTime untilStart )
        {
            throw new NotImplementedException();
        }

    }

    public class TrackBaseByTrackerTrackNumberAndTimestampEntityIndex
    {
        public class ByTrackNumber
        {
            readonly SortedListEx<long, ByTimestamp> _entries = new SortedListEx<long, ByTimestamp>( );
            List<long> _emptyKeys = new List<long>( );

            public ByTrackNumber( )
            {
            }

            void RemoveEmptyKeys( )
            {
                var emptyKeyCount = _emptyKeys.Count;
                for ( int i = 0; i < emptyKeyCount; i++ )
                {
                    _entries.Remove( _emptyKeys[ i ] );
                }
                _emptyKeys.Clear( );
            }

            public bool GetAll([DisallowNull] IList<TrackBaseEntity> result )
            {
                foreach( var entry in _entries )
                {
                    if( entry.Value.GetAll( result ) == false )
                    {
                        _emptyKeys.Add( entry.Key );
                    }
                }
                RemoveEmptyKeys( );
                return _entries.Count > 0;
            }

        }
        public class ByTimestamp
        {
            readonly SortedWeakReferenceList<DateTime, TrackBaseEntity> _entries = new SortedWeakReferenceList<DateTime, TrackBaseEntity>( );

            public ByTimestamp( )
            {
            }

            public void Add( TrackBaseEntity entity )
            {
                if( _entries.TryGetValue(entity.Timestamp, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Timestamp, new WeakReference<TrackBaseEntity>( entity, false ) );
                }
            }

            public bool GetByTimestamp( DateTime timestamp, out TrackBaseEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( timestamp, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( timestamp );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(DateTime key, [DisallowNull] IList<TrackBaseEntity> result )
            {
                return _entries.From( key, result );
            }

            public bool GetUntil(DateTime key, [DisallowNull] IList<TrackBaseEntity> result )
            {
                return _entries.Until( key, result );
            }

            public bool GetOver(DateTime firstKey, DateTime lastKey, [DisallowNull] IList<TrackBaseEntity> result )
            {
                return _entries.Over( firstKey, lastKey, result );
            }

            public bool GetAll([DisallowNull] IList<TrackBaseEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<DateTime, ByTrackNumber> _entries = new SortedListEx<DateTime, ByTrackNumber>( );
        public List<TrackBaseEntity> GetTrackBaseCollectionByTracker( Guid tracker )
        {
            throw new NotImplementedException();
        }

        public List<TrackBaseEntity> GetTrackBaseCollectionByTrackerAndTrackNumber( Guid tracker, long trackNumber )
        {
            throw new NotImplementedException();
        }

        public IList<TrackBaseEntity> GetTrackBaseCollectionByTrackerFromTrackNumber( Guid tracker, long trackNumber )
        {
            throw new NotImplementedException();
        }

        public IList<TrackBaseEntity> GetTrackBaseCollectionByTrackerUntilTrackNumber( Guid tracker, long trackNumber )
        {
            throw new NotImplementedException();
        }

        IList<TrackBaseEntity> GetTrackBaseCollectionByTrackerOverTrackNumber( Guid tracker, long fromTrackNumber, long untilTrackNumber )
        {
            throw new NotImplementedException();
        }

        public TrackBaseEntity? GetTrackBaseByTrackerTrackNumberAndTimestamp( Guid tracker, long trackNumber, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public TrackBaseEntity? GetTrackBaseByTrackerTrackNumberAtTimestamp( Guid tracker, long trackNumber, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<TrackBaseEntity> GetTrackBaseByTrackerTrackNumberFromTimestamp( Guid tracker, long trackNumber, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<TrackBaseEntity> GetTrackBaseByTrackerTrackNumberUntilTimestamp( Guid tracker, long trackNumber, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        IList<TrackBaseEntity> GetTrackBaseByTrackerTrackNumberOverTimestamp( Guid tracker, long trackNumber, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

    }
    public class TrackBaseByTrackerAndTimestampEntityIndex
    {
        public class ByTimestamp
        {
            readonly SortedListEx<DateTime, ById> _entries = new SortedListEx<DateTime, ById>( );
            List<DateTime> _emptyKeys = new List<DateTime>( );

            public ByTimestamp( )
            {
            }

            void RemoveEmptyKeys( )
            {
                var emptyKeyCount = _emptyKeys.Count;
                for ( int i = 0; i < emptyKeyCount; i++ )
                {
                    _entries.Remove( _emptyKeys[ i ] );
                }
                _emptyKeys.Clear( );
            }

            public bool GetAll([DisallowNull] IList<TrackBaseEntity> result )
            {
                foreach( var entry in _entries )
                {
                    if( entry.Value.GetAll( result ) == false )
                    {
                        _emptyKeys.Add( entry.Key );
                    }
                }
                RemoveEmptyKeys( );
                return _entries.Count > 0;
            }

        }
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, TrackBaseEntity> _entries = new SortedWeakReferenceList<Guid, TrackBaseEntity>( );
            public ById( )
            {
            }

            public void Add( TrackBaseEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<TrackBaseEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out TrackBaseEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<TrackBaseEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<TrackBaseEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<TrackBaseEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<TrackBaseEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<Guid, ByTimestamp> _entries = new SortedListEx<Guid, ByTimestamp>( );

        public TrackBaseByTrackerAndTimestampEntityIndex( )
        {
        }

        public List<TrackBaseEntity> GetTrackBaseCollectionByTracker( Guid tracker )
        {
            throw new NotImplementedException();
        }

        public List<TrackBaseEntity> GetTrackBaseCollectionByTrackerAndTimestamp( Guid tracker, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<TrackBaseEntity> GetTrackBaseCollectionByTrackerAtTimestamp( Guid tracker, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<TrackBaseEntity> GetTrackBaseCollectionByTrackerFromTimestamp( Guid tracker, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<TrackBaseEntity> GetTrackBaseCollectionByTrackerUntilTimestamp( Guid tracker, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        IList<TrackBaseEntity> GetTrackBaseCollectionByTrackerOverTimestamp( Guid tracker, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

    }

    public class TrackBaseByTrackNumberEntityIndex
    {
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, TrackBaseEntity> _entries = new SortedWeakReferenceList<Guid, TrackBaseEntity>( );
            public ById( )
            {
            }

            public void Add( TrackBaseEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<TrackBaseEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out TrackBaseEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<TrackBaseEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<TrackBaseEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<TrackBaseEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<TrackBaseEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<long, ById> _entries = new SortedListEx<long, ById>( );

        public TrackBaseByTrackNumberEntityIndex( )
        {
        }

        public List<TrackBaseEntity> GetTrackBaseCollectionByTrackNumber( long trackNumber )
        {
            throw new NotImplementedException();
        }

        public IList<TrackBaseEntity> GetTrackBaseCollectionFromTrackNumber( long trackNumber )
        {
            throw new NotImplementedException();
        }

        public IList<TrackBaseEntity> GetTrackBaseCollectionUntilTrackNumber( long trackNumber )
        {
            throw new NotImplementedException();
        }

        IList<TrackBaseEntity> GetTrackBaseCollectionOverTrackNumber( long fromTrackNumber, long untilTrackNumber )
        {
            throw new NotImplementedException();
        }

    }

    public class TrackBaseByTimestampEntityIndex
    {
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, TrackBaseEntity> _entries = new SortedWeakReferenceList<Guid, TrackBaseEntity>( );
            public ById( )
            {
            }

            public void Add( TrackBaseEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<TrackBaseEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out TrackBaseEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<TrackBaseEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<TrackBaseEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<TrackBaseEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<TrackBaseEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<DateTime, ById> _entries = new SortedListEx<DateTime, ById>( );

        public TrackBaseByTimestampEntityIndex( )
        {
        }

        public List<TrackBaseEntity> GetTrackBaseCollectionByTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<TrackBaseEntity> GetTrackBaseCollectionAtTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<TrackBaseEntity> GetTrackBaseCollectionFromTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<TrackBaseEntity> GetTrackBaseCollectionUntilTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        IList<TrackBaseEntity> GetTrackBaseCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

    }

    public class TrackerFilterParametersByTrackerAndNameEntityIndex
    {
        public class ByName
        {
            readonly SortedWeakReferenceList<string, TrackerFilterParametersEntity> _entries = new SortedWeakReferenceList<string, TrackerFilterParametersEntity>( );

            public ByName( )
            {
            }

            public void Add( TrackerFilterParametersEntity entity )
            {
                if( _entries.TryGetValue(entity.Name, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Name, new WeakReference<TrackerFilterParametersEntity>( entity, false ) );
                }
            }

            public bool GetByName( string name, out TrackerFilterParametersEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( name, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( name );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(string key, [DisallowNull] IList<TrackerFilterParametersEntity> result )
            {
                return _entries.From( key, result );
            }

            public bool GetUntil(string key, [DisallowNull] IList<TrackerFilterParametersEntity> result )
            {
                return _entries.Until( key, result );
            }

            public bool GetOver(string firstKey, string lastKey, [DisallowNull] IList<TrackerFilterParametersEntity> result )
            {
                return _entries.Over( firstKey, lastKey, result );
            }

            public bool GetAll([DisallowNull] IList<TrackerFilterParametersEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<string, ByName> _entries = new SortedListEx<string, ByName>( );
        public List<TrackerFilterParametersEntity> GetTrackerFilterParametersCollectionByTracker( Guid tracker )
        {
            throw new NotImplementedException();
        }

        public TrackerFilterParametersEntity? GetTrackerFilterParametersByTrackerAndName( Guid tracker, string name )
        {
            throw new NotImplementedException();
        }

    }
    public class TrackerFilterParametersConfigurationByParametersAndTimestampEntityIndex
    {
        public class ByTimestamp
        {
            readonly SortedWeakReferenceList<DateTime, TrackerFilterParametersConfigurationEntity> _entries = new SortedWeakReferenceList<DateTime, TrackerFilterParametersConfigurationEntity>( );

            public ByTimestamp( )
            {
            }

            public void Add( TrackerFilterParametersConfigurationEntity entity )
            {
                if( _entries.TryGetValue(entity.Timestamp, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Timestamp, new WeakReference<TrackerFilterParametersConfigurationEntity>( entity, false ) );
                }
            }

            public bool GetByTimestamp( DateTime timestamp, out TrackerFilterParametersConfigurationEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( timestamp, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( timestamp );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(DateTime key, [DisallowNull] IList<TrackerFilterParametersConfigurationEntity> result )
            {
                return _entries.From( key, result );
            }

            public bool GetUntil(DateTime key, [DisallowNull] IList<TrackerFilterParametersConfigurationEntity> result )
            {
                return _entries.Until( key, result );
            }

            public bool GetOver(DateTime firstKey, DateTime lastKey, [DisallowNull] IList<TrackerFilterParametersConfigurationEntity> result )
            {
                return _entries.Over( firstKey, lastKey, result );
            }

            public bool GetAll([DisallowNull] IList<TrackerFilterParametersConfigurationEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<DateTime, ByTimestamp> _entries = new SortedListEx<DateTime, ByTimestamp>( );
        public List<TrackerFilterParametersConfigurationEntity> GetTrackerFilterParametersConfigurationCollectionByParameters( Guid parameters )
        {
            throw new NotImplementedException();
        }

        public TrackerFilterParametersConfigurationEntity? GetTrackerFilterParametersConfigurationByParametersAndTimestamp( Guid parameters, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public TrackerFilterParametersConfigurationEntity? GetTrackerFilterParametersConfigurationByParametersAtTimestamp( Guid parameters, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<TrackerFilterParametersConfigurationEntity> GetTrackerFilterParametersConfigurationByParametersFromTimestamp( Guid parameters, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<TrackerFilterParametersConfigurationEntity> GetTrackerFilterParametersConfigurationByParametersUntilTimestamp( Guid parameters, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        IList<TrackerFilterParametersConfigurationEntity> GetTrackerFilterParametersConfigurationByParametersOverTimestamp( Guid parameters, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

    }
    public class TrackerFilterParametersConfigurationByTimestampEntityIndex
    {
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, TrackerFilterParametersConfigurationEntity> _entries = new SortedWeakReferenceList<Guid, TrackerFilterParametersConfigurationEntity>( );
            public ById( )
            {
            }

            public void Add( TrackerFilterParametersConfigurationEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<TrackerFilterParametersConfigurationEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out TrackerFilterParametersConfigurationEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<TrackerFilterParametersConfigurationEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<TrackerFilterParametersConfigurationEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<TrackerFilterParametersConfigurationEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<TrackerFilterParametersConfigurationEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<DateTime, ById> _entries = new SortedListEx<DateTime, ById>( );

        public TrackerFilterParametersConfigurationByTimestampEntityIndex( )
        {
        }

        public List<TrackerFilterParametersConfigurationEntity> GetTrackerFilterParametersConfigurationCollectionByTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<TrackerFilterParametersConfigurationEntity> GetTrackerFilterParametersConfigurationCollectionAtTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<TrackerFilterParametersConfigurationEntity> GetTrackerFilterParametersConfigurationCollectionFromTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<TrackerFilterParametersConfigurationEntity> GetTrackerFilterParametersConfigurationCollectionUntilTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        IList<TrackerFilterParametersConfigurationEntity> GetTrackerFilterParametersConfigurationCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

    }

    public class TrackingServiceOptionsByTimestampEntityIndex
    {
        readonly SortedWeakReferenceList<DateTime, TrackingServiceOptionsEntity> _entries = new SortedWeakReferenceList<DateTime, TrackingServiceOptionsEntity>( );

        public TrackingServiceOptionsByTimestampEntityIndex( )
        {
        }

        public void Add( TrackingServiceOptionsEntity entity )
        {
            if( _entries.TryGetValue(entity.Timestamp, out var weakReference ) )
            {
                weakReference.SetTarget( entity );
            }
            else
            {
                _entries.Add( entity.Timestamp, new WeakReference<TrackingServiceOptionsEntity>( entity, false ) );
            }
        }

        public bool GetByTimestamp( DateTime timestamp, out TrackingServiceOptionsEntity? entity )
        {
            entity = null;
            if ( _entries.TryGetValue( timestamp, out var weakReference ) )
            {
                if ( weakReference.TryGetTarget( out entity ) == false )
                {
                    _entries.Remove( timestamp );
                }
            }
            return _entries.Count > 0;
        }

        public bool GetFrom(DateTime key, [DisallowNull] IList<TrackingServiceOptionsEntity> result )
        {
            return _entries.From( key, result );
        }

        public bool GetUntil(DateTime key, [DisallowNull] IList<TrackingServiceOptionsEntity> result )
        {
            return _entries.Until( key, result );
        }

        public bool GetOver(DateTime firstKey, DateTime lastKey, [DisallowNull] IList<TrackingServiceOptionsEntity> result )
        {
            return _entries.Over( firstKey, lastKey, result );
        }

        public bool GetAll([DisallowNull] IList<TrackingServiceOptionsEntity> result )
        {
            return _entries.All( result );
        }

        public TrackingServiceOptionsEntity? GetTrackingServiceOptionsByTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public TrackingServiceOptionsEntity? GetTrackingServiceOptionsAtTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<TrackingServiceOptionsEntity> GetTrackingServiceOptionsFromTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<TrackingServiceOptionsEntity> GetTrackingServiceOptionsUntilTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        IList<TrackingServiceOptionsEntity> GetTrackingServiceOptionsOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

    }
    public class TrackLinkByPrimaryAndStartEntityIndex
    {
        public class ByStart
        {
            readonly SortedListEx<DateTime, ById> _entries = new SortedListEx<DateTime, ById>( );
            List<DateTime> _emptyKeys = new List<DateTime>( );

            public ByStart( )
            {
            }

            void RemoveEmptyKeys( )
            {
                var emptyKeyCount = _emptyKeys.Count;
                for ( int i = 0; i < emptyKeyCount; i++ )
                {
                    _entries.Remove( _emptyKeys[ i ] );
                }
                _emptyKeys.Clear( );
            }

            public bool GetAll([DisallowNull] IList<TrackLinkEntity> result )
            {
                foreach( var entry in _entries )
                {
                    if( entry.Value.GetAll( result ) == false )
                    {
                        _emptyKeys.Add( entry.Key );
                    }
                }
                RemoveEmptyKeys( );
                return _entries.Count > 0;
            }

        }
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, TrackLinkEntity> _entries = new SortedWeakReferenceList<Guid, TrackLinkEntity>( );
            public ById( )
            {
            }

            public void Add( TrackLinkEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<TrackLinkEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out TrackLinkEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<TrackLinkEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<TrackLinkEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<TrackLinkEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<TrackLinkEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<Guid, ByStart> _entries = new SortedListEx<Guid, ByStart>( );

        public TrackLinkByPrimaryAndStartEntityIndex( )
        {
        }

        public List<TrackLinkEntity> GetTrackLinkCollectionByPrimary( Guid primary )
        {
            throw new NotImplementedException();
        }

        public List<TrackLinkEntity> GetTrackLinkCollectionByPrimaryAndStart( Guid primary, DateTime start )
        {
            throw new NotImplementedException();
        }

        public IList<TrackLinkEntity> GetTrackLinkCollectionByPrimaryAtStart( Guid primary, DateTime start )
        {
            throw new NotImplementedException();
        }

        public IList<TrackLinkEntity> GetTrackLinkCollectionByPrimaryFromStart( Guid primary, DateTime start )
        {
            throw new NotImplementedException();
        }

        public IList<TrackLinkEntity> GetTrackLinkCollectionByPrimaryUntilStart( Guid primary, DateTime start )
        {
            throw new NotImplementedException();
        }

        IList<TrackLinkEntity> GetTrackLinkCollectionByPrimaryOverStart( Guid primary, DateTime fromStart, DateTime untilStart )
        {
            throw new NotImplementedException();
        }

    }

    public class TrackLinkBySecondaryAndStartEntityIndex
    {
        public class ByStart
        {
            readonly SortedListEx<DateTime, ById> _entries = new SortedListEx<DateTime, ById>( );
            List<DateTime> _emptyKeys = new List<DateTime>( );

            public ByStart( )
            {
            }

            void RemoveEmptyKeys( )
            {
                var emptyKeyCount = _emptyKeys.Count;
                for ( int i = 0; i < emptyKeyCount; i++ )
                {
                    _entries.Remove( _emptyKeys[ i ] );
                }
                _emptyKeys.Clear( );
            }

            public bool GetAll([DisallowNull] IList<TrackLinkEntity> result )
            {
                foreach( var entry in _entries )
                {
                    if( entry.Value.GetAll( result ) == false )
                    {
                        _emptyKeys.Add( entry.Key );
                    }
                }
                RemoveEmptyKeys( );
                return _entries.Count > 0;
            }

        }
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, TrackLinkEntity> _entries = new SortedWeakReferenceList<Guid, TrackLinkEntity>( );
            public ById( )
            {
            }

            public void Add( TrackLinkEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<TrackLinkEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out TrackLinkEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<TrackLinkEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<TrackLinkEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<TrackLinkEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<TrackLinkEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<Guid, ByStart> _entries = new SortedListEx<Guid, ByStart>( );

        public TrackLinkBySecondaryAndStartEntityIndex( )
        {
        }

        public List<TrackLinkEntity> GetTrackLinkCollectionBySecondary( Guid secondary )
        {
            throw new NotImplementedException();
        }

        public List<TrackLinkEntity> GetTrackLinkCollectionBySecondaryAndStart( Guid secondary, DateTime start )
        {
            throw new NotImplementedException();
        }

        public IList<TrackLinkEntity> GetTrackLinkCollectionBySecondaryAtStart( Guid secondary, DateTime start )
        {
            throw new NotImplementedException();
        }

        public IList<TrackLinkEntity> GetTrackLinkCollectionBySecondaryFromStart( Guid secondary, DateTime start )
        {
            throw new NotImplementedException();
        }

        public IList<TrackLinkEntity> GetTrackLinkCollectionBySecondaryUntilStart( Guid secondary, DateTime start )
        {
            throw new NotImplementedException();
        }

        IList<TrackLinkEntity> GetTrackLinkCollectionBySecondaryOverStart( Guid secondary, DateTime fromStart, DateTime untilStart )
        {
            throw new NotImplementedException();
        }

    }

    public class TrackLinkByStartEntityIndex
    {
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, TrackLinkEntity> _entries = new SortedWeakReferenceList<Guid, TrackLinkEntity>( );
            public ById( )
            {
            }

            public void Add( TrackLinkEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<TrackLinkEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out TrackLinkEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<TrackLinkEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<TrackLinkEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<TrackLinkEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<TrackLinkEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<DateTime, ById> _entries = new SortedListEx<DateTime, ById>( );

        public TrackLinkByStartEntityIndex( )
        {
        }

        public List<TrackLinkEntity> GetTrackLinkCollectionByStart( DateTime start )
        {
            throw new NotImplementedException();
        }

        public IList<TrackLinkEntity> GetTrackLinkCollectionAtStart( DateTime start )
        {
            throw new NotImplementedException();
        }

        public IList<TrackLinkEntity> GetTrackLinkCollectionFromStart( DateTime start )
        {
            throw new NotImplementedException();
        }

        public IList<TrackLinkEntity> GetTrackLinkCollectionUntilStart( DateTime start )
        {
            throw new NotImplementedException();
        }

        IList<TrackLinkEntity> GetTrackLinkCollectionOverStart( DateTime fromStart, DateTime untilStart )
        {
            throw new NotImplementedException();
        }

    }

    public class TrackValueByTrackAndTimestampEntityIndex
    {
        public class ByTimestamp
        {
            readonly SortedWeakReferenceList<DateTime, TrackValueEntity> _entries = new SortedWeakReferenceList<DateTime, TrackValueEntity>( );

            public ByTimestamp( )
            {
            }

            public void Add( TrackValueEntity entity )
            {
                if( _entries.TryGetValue(entity.Timestamp, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Timestamp, new WeakReference<TrackValueEntity>( entity, false ) );
                }
            }

            public bool GetByTimestamp( DateTime timestamp, out TrackValueEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( timestamp, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( timestamp );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(DateTime key, [DisallowNull] IList<TrackValueEntity> result )
            {
                return _entries.From( key, result );
            }

            public bool GetUntil(DateTime key, [DisallowNull] IList<TrackValueEntity> result )
            {
                return _entries.Until( key, result );
            }

            public bool GetOver(DateTime firstKey, DateTime lastKey, [DisallowNull] IList<TrackValueEntity> result )
            {
                return _entries.Over( firstKey, lastKey, result );
            }

            public bool GetAll([DisallowNull] IList<TrackValueEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<DateTime, ByTimestamp> _entries = new SortedListEx<DateTime, ByTimestamp>( );
        public List<TrackValueEntity> GetTrackValueCollectionByTrack( Guid track )
        {
            throw new NotImplementedException();
        }

        public TrackValueEntity? GetTrackValueByTrackAndTimestamp( Guid track, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public TrackValueEntity? GetTrackValueByTrackAtTimestamp( Guid track, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<TrackValueEntity> GetTrackValueByTrackFromTimestamp( Guid track, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<TrackValueEntity> GetTrackValueByTrackUntilTimestamp( Guid track, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        IList<TrackValueEntity> GetTrackValueByTrackOverTimestamp( Guid track, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

    }
    public class TrackValueByTimestampEntityIndex
    {
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, TrackValueEntity> _entries = new SortedWeakReferenceList<Guid, TrackValueEntity>( );
            public ById( )
            {
            }

            public void Add( TrackValueEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<TrackValueEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out TrackValueEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<TrackValueEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<TrackValueEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<TrackValueEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<TrackValueEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<DateTime, ById> _entries = new SortedListEx<DateTime, ById>( );

        public TrackValueByTimestampEntityIndex( )
        {
        }

        public List<TrackValueEntity> GetTrackValueCollectionByTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<TrackValueEntity> GetTrackValueCollectionAtTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<TrackValueEntity> GetTrackValueCollectionFromTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<TrackValueEntity> GetTrackValueCollectionUntilTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        IList<TrackValueEntity> GetTrackValueCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

    }

    public class TrackValue3DByTrackAndTimestampEntityIndex
    {
        public class ByTimestamp
        {
            readonly SortedWeakReferenceList<DateTime, TrackValue3DEntity> _entries = new SortedWeakReferenceList<DateTime, TrackValue3DEntity>( );

            public ByTimestamp( )
            {
            }

            public void Add( TrackValue3DEntity entity )
            {
                if( _entries.TryGetValue(entity.Timestamp, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Timestamp, new WeakReference<TrackValue3DEntity>( entity, false ) );
                }
            }

            public bool GetByTimestamp( DateTime timestamp, out TrackValue3DEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( timestamp, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( timestamp );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(DateTime key, [DisallowNull] IList<TrackValue3DEntity> result )
            {
                return _entries.From( key, result );
            }

            public bool GetUntil(DateTime key, [DisallowNull] IList<TrackValue3DEntity> result )
            {
                return _entries.Until( key, result );
            }

            public bool GetOver(DateTime firstKey, DateTime lastKey, [DisallowNull] IList<TrackValue3DEntity> result )
            {
                return _entries.Over( firstKey, lastKey, result );
            }

            public bool GetAll([DisallowNull] IList<TrackValue3DEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<DateTime, ByTimestamp> _entries = new SortedListEx<DateTime, ByTimestamp>( );
        public List<TrackValue3DEntity> GetTrackValue3DCollectionByTrack( Guid track )
        {
            throw new NotImplementedException();
        }

        public TrackValue3DEntity? GetTrackValue3DByTrackAndTimestamp( Guid track, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public TrackValue3DEntity? GetTrackValue3DByTrackAtTimestamp( Guid track, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<TrackValue3DEntity> GetTrackValue3DByTrackFromTimestamp( Guid track, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<TrackValue3DEntity> GetTrackValue3DByTrackUntilTimestamp( Guid track, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        IList<TrackValue3DEntity> GetTrackValue3DByTrackOverTimestamp( Guid track, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

    }
    public class TrackValue3DByTimestampEntityIndex
    {
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, TrackValue3DEntity> _entries = new SortedWeakReferenceList<Guid, TrackValue3DEntity>( );
            public ById( )
            {
            }

            public void Add( TrackValue3DEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<TrackValue3DEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out TrackValue3DEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<TrackValue3DEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<TrackValue3DEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<TrackValue3DEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<TrackValue3DEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<DateTime, ById> _entries = new SortedListEx<DateTime, ById>( );

        public TrackValue3DByTimestampEntityIndex( )
        {
        }

        public List<TrackValue3DEntity> GetTrackValue3DCollectionByTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<TrackValue3DEntity> GetTrackValue3DCollectionAtTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<TrackValue3DEntity> GetTrackValue3DCollectionFromTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<TrackValue3DEntity> GetTrackValue3DCollectionUntilTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        IList<TrackValue3DEntity> GetTrackValue3DCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

    }

    public class UInt16TimeseriesValueByTimeseriesAndTimestampEntityIndex
    {
        public class ByTimestamp
        {
            readonly SortedWeakReferenceList<DateTime, UInt16TimeseriesValueEntity> _entries = new SortedWeakReferenceList<DateTime, UInt16TimeseriesValueEntity>( );

            public ByTimestamp( )
            {
            }

            public void Add( UInt16TimeseriesValueEntity entity )
            {
                if( _entries.TryGetValue(entity.Timestamp, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Timestamp, new WeakReference<UInt16TimeseriesValueEntity>( entity, false ) );
                }
            }

            public bool GetByTimestamp( DateTime timestamp, out UInt16TimeseriesValueEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( timestamp, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( timestamp );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(DateTime key, [DisallowNull] IList<UInt16TimeseriesValueEntity> result )
            {
                return _entries.From( key, result );
            }

            public bool GetUntil(DateTime key, [DisallowNull] IList<UInt16TimeseriesValueEntity> result )
            {
                return _entries.Until( key, result );
            }

            public bool GetOver(DateTime firstKey, DateTime lastKey, [DisallowNull] IList<UInt16TimeseriesValueEntity> result )
            {
                return _entries.Over( firstKey, lastKey, result );
            }

            public bool GetAll([DisallowNull] IList<UInt16TimeseriesValueEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<DateTime, ByTimestamp> _entries = new SortedListEx<DateTime, ByTimestamp>( );
        public List<UInt16TimeseriesValueEntity> GetUInt16TimeseriesValueCollectionByTimeseries( Guid timeseries )
        {
            throw new NotImplementedException();
        }

        public UInt16TimeseriesValueEntity? GetUInt16TimeseriesValueByTimeseriesAndTimestamp( Guid timeseries, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public UInt16TimeseriesValueEntity? GetUInt16TimeseriesValueByTimeseriesAtTimestamp( Guid timeseries, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<UInt16TimeseriesValueEntity> GetUInt16TimeseriesValueByTimeseriesFromTimestamp( Guid timeseries, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<UInt16TimeseriesValueEntity> GetUInt16TimeseriesValueByTimeseriesUntilTimestamp( Guid timeseries, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        IList<UInt16TimeseriesValueEntity> GetUInt16TimeseriesValueByTimeseriesOverTimestamp( Guid timeseries, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

    }
    public class UInt16TimeseriesValueByTimestampEntityIndex
    {
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, UInt16TimeseriesValueEntity> _entries = new SortedWeakReferenceList<Guid, UInt16TimeseriesValueEntity>( );
            public ById( )
            {
            }

            public void Add( UInt16TimeseriesValueEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<UInt16TimeseriesValueEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out UInt16TimeseriesValueEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<UInt16TimeseriesValueEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<UInt16TimeseriesValueEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<UInt16TimeseriesValueEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<UInt16TimeseriesValueEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<DateTime, ById> _entries = new SortedListEx<DateTime, ById>( );

        public UInt16TimeseriesValueByTimestampEntityIndex( )
        {
        }

        public List<UInt16TimeseriesValueEntity> GetUInt16TimeseriesValueCollectionByTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<UInt16TimeseriesValueEntity> GetUInt16TimeseriesValueCollectionAtTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<UInt16TimeseriesValueEntity> GetUInt16TimeseriesValueCollectionFromTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<UInt16TimeseriesValueEntity> GetUInt16TimeseriesValueCollectionUntilTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        IList<UInt16TimeseriesValueEntity> GetUInt16TimeseriesValueCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

    }

    public class UInt32TimeseriesValueByTimeseriesAndTimestampEntityIndex
    {
        public class ByTimestamp
        {
            readonly SortedWeakReferenceList<DateTime, UInt32TimeseriesValueEntity> _entries = new SortedWeakReferenceList<DateTime, UInt32TimeseriesValueEntity>( );

            public ByTimestamp( )
            {
            }

            public void Add( UInt32TimeseriesValueEntity entity )
            {
                if( _entries.TryGetValue(entity.Timestamp, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Timestamp, new WeakReference<UInt32TimeseriesValueEntity>( entity, false ) );
                }
            }

            public bool GetByTimestamp( DateTime timestamp, out UInt32TimeseriesValueEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( timestamp, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( timestamp );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(DateTime key, [DisallowNull] IList<UInt32TimeseriesValueEntity> result )
            {
                return _entries.From( key, result );
            }

            public bool GetUntil(DateTime key, [DisallowNull] IList<UInt32TimeseriesValueEntity> result )
            {
                return _entries.Until( key, result );
            }

            public bool GetOver(DateTime firstKey, DateTime lastKey, [DisallowNull] IList<UInt32TimeseriesValueEntity> result )
            {
                return _entries.Over( firstKey, lastKey, result );
            }

            public bool GetAll([DisallowNull] IList<UInt32TimeseriesValueEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<DateTime, ByTimestamp> _entries = new SortedListEx<DateTime, ByTimestamp>( );
        public List<UInt32TimeseriesValueEntity> GetUInt32TimeseriesValueCollectionByTimeseries( Guid timeseries )
        {
            throw new NotImplementedException();
        }

        public UInt32TimeseriesValueEntity? GetUInt32TimeseriesValueByTimeseriesAndTimestamp( Guid timeseries, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public UInt32TimeseriesValueEntity? GetUInt32TimeseriesValueByTimeseriesAtTimestamp( Guid timeseries, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<UInt32TimeseriesValueEntity> GetUInt32TimeseriesValueByTimeseriesFromTimestamp( Guid timeseries, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<UInt32TimeseriesValueEntity> GetUInt32TimeseriesValueByTimeseriesUntilTimestamp( Guid timeseries, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        IList<UInt32TimeseriesValueEntity> GetUInt32TimeseriesValueByTimeseriesOverTimestamp( Guid timeseries, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

    }
    public class UInt32TimeseriesValueByTimestampEntityIndex
    {
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, UInt32TimeseriesValueEntity> _entries = new SortedWeakReferenceList<Guid, UInt32TimeseriesValueEntity>( );
            public ById( )
            {
            }

            public void Add( UInt32TimeseriesValueEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<UInt32TimeseriesValueEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out UInt32TimeseriesValueEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<UInt32TimeseriesValueEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<UInt32TimeseriesValueEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<UInt32TimeseriesValueEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<UInt32TimeseriesValueEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<DateTime, ById> _entries = new SortedListEx<DateTime, ById>( );

        public UInt32TimeseriesValueByTimestampEntityIndex( )
        {
        }

        public List<UInt32TimeseriesValueEntity> GetUInt32TimeseriesValueCollectionByTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<UInt32TimeseriesValueEntity> GetUInt32TimeseriesValueCollectionAtTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<UInt32TimeseriesValueEntity> GetUInt32TimeseriesValueCollectionFromTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<UInt32TimeseriesValueEntity> GetUInt32TimeseriesValueCollectionUntilTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        IList<UInt32TimeseriesValueEntity> GetUInt32TimeseriesValueCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

    }

    public class UInt64TimeseriesValueByTimeseriesAndTimestampEntityIndex
    {
        public class ByTimestamp
        {
            readonly SortedWeakReferenceList<DateTime, UInt64TimeseriesValueEntity> _entries = new SortedWeakReferenceList<DateTime, UInt64TimeseriesValueEntity>( );

            public ByTimestamp( )
            {
            }

            public void Add( UInt64TimeseriesValueEntity entity )
            {
                if( _entries.TryGetValue(entity.Timestamp, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Timestamp, new WeakReference<UInt64TimeseriesValueEntity>( entity, false ) );
                }
            }

            public bool GetByTimestamp( DateTime timestamp, out UInt64TimeseriesValueEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( timestamp, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( timestamp );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(DateTime key, [DisallowNull] IList<UInt64TimeseriesValueEntity> result )
            {
                return _entries.From( key, result );
            }

            public bool GetUntil(DateTime key, [DisallowNull] IList<UInt64TimeseriesValueEntity> result )
            {
                return _entries.Until( key, result );
            }

            public bool GetOver(DateTime firstKey, DateTime lastKey, [DisallowNull] IList<UInt64TimeseriesValueEntity> result )
            {
                return _entries.Over( firstKey, lastKey, result );
            }

            public bool GetAll([DisallowNull] IList<UInt64TimeseriesValueEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<DateTime, ByTimestamp> _entries = new SortedListEx<DateTime, ByTimestamp>( );
        public List<UInt64TimeseriesValueEntity> GetUInt64TimeseriesValueCollectionByTimeseries( Guid timeseries )
        {
            throw new NotImplementedException();
        }

        public UInt64TimeseriesValueEntity? GetUInt64TimeseriesValueByTimeseriesAndTimestamp( Guid timeseries, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public UInt64TimeseriesValueEntity? GetUInt64TimeseriesValueByTimeseriesAtTimestamp( Guid timeseries, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<UInt64TimeseriesValueEntity> GetUInt64TimeseriesValueByTimeseriesFromTimestamp( Guid timeseries, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<UInt64TimeseriesValueEntity> GetUInt64TimeseriesValueByTimeseriesUntilTimestamp( Guid timeseries, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        IList<UInt64TimeseriesValueEntity> GetUInt64TimeseriesValueByTimeseriesOverTimestamp( Guid timeseries, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

    }
    public class UInt64TimeseriesValueByTimestampEntityIndex
    {
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, UInt64TimeseriesValueEntity> _entries = new SortedWeakReferenceList<Guid, UInt64TimeseriesValueEntity>( );
            public ById( )
            {
            }

            public void Add( UInt64TimeseriesValueEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<UInt64TimeseriesValueEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out UInt64TimeseriesValueEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<UInt64TimeseriesValueEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<UInt64TimeseriesValueEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<UInt64TimeseriesValueEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<UInt64TimeseriesValueEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<DateTime, ById> _entries = new SortedListEx<DateTime, ById>( );

        public UInt64TimeseriesValueByTimestampEntityIndex( )
        {
        }

        public List<UInt64TimeseriesValueEntity> GetUInt64TimeseriesValueCollectionByTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<UInt64TimeseriesValueEntity> GetUInt64TimeseriesValueCollectionAtTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<UInt64TimeseriesValueEntity> GetUInt64TimeseriesValueCollectionFromTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<UInt64TimeseriesValueEntity> GetUInt64TimeseriesValueCollectionUntilTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        IList<UInt64TimeseriesValueEntity> GetUInt64TimeseriesValueCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

    }

    public class VehicleTypeByNameEntityIndex
    {
        readonly SortedWeakReferenceList<string, VehicleTypeEntity> _entries = new SortedWeakReferenceList<string, VehicleTypeEntity>( );

        public VehicleTypeByNameEntityIndex( )
        {
        }

        public void Add( VehicleTypeEntity entity )
        {
            if( _entries.TryGetValue(entity.Name, out var weakReference ) )
            {
                weakReference.SetTarget( entity );
            }
            else
            {
                _entries.Add( entity.Name, new WeakReference<VehicleTypeEntity>( entity, false ) );
            }
        }

        public bool GetByName( string name, out VehicleTypeEntity? entity )
        {
            entity = null;
            if ( _entries.TryGetValue( name, out var weakReference ) )
            {
                if ( weakReference.TryGetTarget( out entity ) == false )
                {
                    _entries.Remove( name );
                }
            }
            return _entries.Count > 0;
        }

        public bool GetFrom(string key, [DisallowNull] IList<VehicleTypeEntity> result )
        {
            return _entries.From( key, result );
        }

        public bool GetUntil(string key, [DisallowNull] IList<VehicleTypeEntity> result )
        {
            return _entries.Until( key, result );
        }

        public bool GetOver(string firstKey, string lastKey, [DisallowNull] IList<VehicleTypeEntity> result )
        {
            return _entries.Over( firstKey, lastKey, result );
        }

        public bool GetAll([DisallowNull] IList<VehicleTypeEntity> result )
        {
            return _entries.All( result );
        }

        public VehicleTypeEntity? GetVehicleTypeByName( string name )
        {
            throw new NotImplementedException();
        }

    }
    public class VesselTypeByNameEntityIndex
    {
        readonly SortedWeakReferenceList<string, VesselTypeEntity> _entries = new SortedWeakReferenceList<string, VesselTypeEntity>( );

        public VesselTypeByNameEntityIndex( )
        {
        }

        public void Add( VesselTypeEntity entity )
        {
            if( _entries.TryGetValue(entity.Name, out var weakReference ) )
            {
                weakReference.SetTarget( entity );
            }
            else
            {
                _entries.Add( entity.Name, new WeakReference<VesselTypeEntity>( entity, false ) );
            }
        }

        public bool GetByName( string name, out VesselTypeEntity? entity )
        {
            entity = null;
            if ( _entries.TryGetValue( name, out var weakReference ) )
            {
                if ( weakReference.TryGetTarget( out entity ) == false )
                {
                    _entries.Remove( name );
                }
            }
            return _entries.Count > 0;
        }

        public bool GetFrom(string key, [DisallowNull] IList<VesselTypeEntity> result )
        {
            return _entries.From( key, result );
        }

        public bool GetUntil(string key, [DisallowNull] IList<VesselTypeEntity> result )
        {
            return _entries.Until( key, result );
        }

        public bool GetOver(string firstKey, string lastKey, [DisallowNull] IList<VesselTypeEntity> result )
        {
            return _entries.Over( firstKey, lastKey, result );
        }

        public bool GetAll([DisallowNull] IList<VesselTypeEntity> result )
        {
            return _entries.All( result );
        }

        public VesselTypeEntity? GetVesselTypeByName( string name )
        {
            throw new NotImplementedException();
        }

    }
    public class VesselTypeByCodeEntityIndex
    {
        readonly SortedWeakReferenceList<int, VesselTypeEntity> _entries = new SortedWeakReferenceList<int, VesselTypeEntity>( );

        public VesselTypeByCodeEntityIndex( )
        {
        }

        public void Add( VesselTypeEntity entity )
        {
            if( _entries.TryGetValue(entity.Code, out var weakReference ) )
            {
                weakReference.SetTarget( entity );
            }
            else
            {
                _entries.Add( entity.Code, new WeakReference<VesselTypeEntity>( entity, false ) );
            }
        }

        public bool GetByCode( int code, out VesselTypeEntity? entity )
        {
            entity = null;
            if ( _entries.TryGetValue( code, out var weakReference ) )
            {
                if ( weakReference.TryGetTarget( out entity ) == false )
                {
                    _entries.Remove( code );
                }
            }
            return _entries.Count > 0;
        }

        public bool GetFrom(int key, [DisallowNull] IList<VesselTypeEntity> result )
        {
            return _entries.From( key, result );
        }

        public bool GetUntil(int key, [DisallowNull] IList<VesselTypeEntity> result )
        {
            return _entries.Until( key, result );
        }

        public bool GetOver(int firstKey, int lastKey, [DisallowNull] IList<VesselTypeEntity> result )
        {
            return _entries.Over( firstKey, lastKey, result );
        }

        public bool GetAll([DisallowNull] IList<VesselTypeEntity> result )
        {
            return _entries.All( result );
        }

        public VesselTypeEntity? GetVesselTypeByCode( int code )
        {
            throw new NotImplementedException();
        }

        public IList<VesselTypeEntity> GetVesselTypeFromCode( int code )
        {
            throw new NotImplementedException();
        }

        public IList<VesselTypeEntity> GetVesselTypeUntilCode( int code )
        {
            throw new NotImplementedException();
        }

        IList<VesselTypeEntity> GetVesselTypeOverCode( int fromCode, int untilCode )
        {
            throw new NotImplementedException();
        }

    }
    public class ViewByNameEntityIndex
    {
        readonly SortedWeakReferenceList<string, ViewEntity> _entries = new SortedWeakReferenceList<string, ViewEntity>( );

        public ViewByNameEntityIndex( )
        {
        }

        public void Add( ViewEntity entity )
        {
            if( _entries.TryGetValue(entity.Name, out var weakReference ) )
            {
                weakReference.SetTarget( entity );
            }
            else
            {
                _entries.Add( entity.Name, new WeakReference<ViewEntity>( entity, false ) );
            }
        }

        public bool GetByName( string name, out ViewEntity? entity )
        {
            entity = null;
            if ( _entries.TryGetValue( name, out var weakReference ) )
            {
                if ( weakReference.TryGetTarget( out entity ) == false )
                {
                    _entries.Remove( name );
                }
            }
            return _entries.Count > 0;
        }

        public bool GetFrom(string key, [DisallowNull] IList<ViewEntity> result )
        {
            return _entries.From( key, result );
        }

        public bool GetUntil(string key, [DisallowNull] IList<ViewEntity> result )
        {
            return _entries.Until( key, result );
        }

        public bool GetOver(string firstKey, string lastKey, [DisallowNull] IList<ViewEntity> result )
        {
            return _entries.Over( firstKey, lastKey, result );
        }

        public bool GetAll([DisallowNull] IList<ViewEntity> result )
        {
            return _entries.All( result );
        }

        public ViewEntity? GetViewByName( string name )
        {
            throw new NotImplementedException();
        }

    }
    public class ViewCameraLinkByViewAndStartEntityIndex
    {
        public class ByStart
        {
            readonly SortedWeakReferenceList<DateTime, ViewCameraLinkEntity> _entries = new SortedWeakReferenceList<DateTime, ViewCameraLinkEntity>( );

            public ByStart( )
            {
            }

            public void Add( ViewCameraLinkEntity entity )
            {
                if( _entries.TryGetValue(entity.Start, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Start, new WeakReference<ViewCameraLinkEntity>( entity, false ) );
                }
            }

            public bool GetByStart( DateTime start, out ViewCameraLinkEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( start, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( start );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(DateTime key, [DisallowNull] IList<ViewCameraLinkEntity> result )
            {
                return _entries.From( key, result );
            }

            public bool GetUntil(DateTime key, [DisallowNull] IList<ViewCameraLinkEntity> result )
            {
                return _entries.Until( key, result );
            }

            public bool GetOver(DateTime firstKey, DateTime lastKey, [DisallowNull] IList<ViewCameraLinkEntity> result )
            {
                return _entries.Over( firstKey, lastKey, result );
            }

            public bool GetAll([DisallowNull] IList<ViewCameraLinkEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<DateTime, ByStart> _entries = new SortedListEx<DateTime, ByStart>( );
        public List<ViewCameraLinkEntity> GetViewCameraLinkCollectionByView( Guid view )
        {
            throw new NotImplementedException();
        }

        public ViewCameraLinkEntity? GetViewCameraLinkByViewAndStart( Guid view, DateTime start )
        {
            throw new NotImplementedException();
        }

        public ViewCameraLinkEntity? GetViewCameraLinkByViewAtStart( Guid view, DateTime start )
        {
            throw new NotImplementedException();
        }

        public IList<ViewCameraLinkEntity> GetViewCameraLinkByViewFromStart( Guid view, DateTime start )
        {
            throw new NotImplementedException();
        }

        public IList<ViewCameraLinkEntity> GetViewCameraLinkByViewUntilStart( Guid view, DateTime start )
        {
            throw new NotImplementedException();
        }

        IList<ViewCameraLinkEntity> GetViewCameraLinkByViewOverStart( Guid view, DateTime fromStart, DateTime untilStart )
        {
            throw new NotImplementedException();
        }

    }
    public class ViewCameraLinkByCameraAndStartEntityIndex
    {
        public class ByStart
        {
            readonly SortedWeakReferenceList<DateTime, ViewCameraLinkEntity> _entries = new SortedWeakReferenceList<DateTime, ViewCameraLinkEntity>( );

            public ByStart( )
            {
            }

            public void Add( ViewCameraLinkEntity entity )
            {
                if( _entries.TryGetValue(entity.Start, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Start, new WeakReference<ViewCameraLinkEntity>( entity, false ) );
                }
            }

            public bool GetByStart( DateTime start, out ViewCameraLinkEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( start, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( start );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(DateTime key, [DisallowNull] IList<ViewCameraLinkEntity> result )
            {
                return _entries.From( key, result );
            }

            public bool GetUntil(DateTime key, [DisallowNull] IList<ViewCameraLinkEntity> result )
            {
                return _entries.Until( key, result );
            }

            public bool GetOver(DateTime firstKey, DateTime lastKey, [DisallowNull] IList<ViewCameraLinkEntity> result )
            {
                return _entries.Over( firstKey, lastKey, result );
            }

            public bool GetAll([DisallowNull] IList<ViewCameraLinkEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<DateTime, ByStart> _entries = new SortedListEx<DateTime, ByStart>( );
        public List<ViewCameraLinkEntity> GetViewCameraLinkCollectionByCamera( Guid camera )
        {
            throw new NotImplementedException();
        }

        public ViewCameraLinkEntity? GetViewCameraLinkByCameraAndStart( Guid camera, DateTime start )
        {
            throw new NotImplementedException();
        }

        public ViewCameraLinkEntity? GetViewCameraLinkByCameraAtStart( Guid camera, DateTime start )
        {
            throw new NotImplementedException();
        }

        public IList<ViewCameraLinkEntity> GetViewCameraLinkByCameraFromStart( Guid camera, DateTime start )
        {
            throw new NotImplementedException();
        }

        public IList<ViewCameraLinkEntity> GetViewCameraLinkByCameraUntilStart( Guid camera, DateTime start )
        {
            throw new NotImplementedException();
        }

        IList<ViewCameraLinkEntity> GetViewCameraLinkByCameraOverStart( Guid camera, DateTime fromStart, DateTime untilStart )
        {
            throw new NotImplementedException();
        }

    }
    public class ViewCameraLinkByStartEntityIndex
    {
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, ViewCameraLinkEntity> _entries = new SortedWeakReferenceList<Guid, ViewCameraLinkEntity>( );
            public ById( )
            {
            }

            public void Add( ViewCameraLinkEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<ViewCameraLinkEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out ViewCameraLinkEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<ViewCameraLinkEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<ViewCameraLinkEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<ViewCameraLinkEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<ViewCameraLinkEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<DateTime, ById> _entries = new SortedListEx<DateTime, ById>( );

        public ViewCameraLinkByStartEntityIndex( )
        {
        }

        public List<ViewCameraLinkEntity> GetViewCameraLinkCollectionByStart( DateTime start )
        {
            throw new NotImplementedException();
        }

        public IList<ViewCameraLinkEntity> GetViewCameraLinkCollectionAtStart( DateTime start )
        {
            throw new NotImplementedException();
        }

        public IList<ViewCameraLinkEntity> GetViewCameraLinkCollectionFromStart( DateTime start )
        {
            throw new NotImplementedException();
        }

        public IList<ViewCameraLinkEntity> GetViewCameraLinkCollectionUntilStart( DateTime start )
        {
            throw new NotImplementedException();
        }

        IList<ViewCameraLinkEntity> GetViewCameraLinkCollectionOverStart( DateTime fromStart, DateTime untilStart )
        {
            throw new NotImplementedException();
        }

    }

    public class ViewTrackerLinkByViewAndStartEntityIndex
    {
        public class ByStart
        {
            readonly SortedWeakReferenceList<DateTime, ViewTrackerLinkEntity> _entries = new SortedWeakReferenceList<DateTime, ViewTrackerLinkEntity>( );

            public ByStart( )
            {
            }

            public void Add( ViewTrackerLinkEntity entity )
            {
                if( _entries.TryGetValue(entity.Start, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Start, new WeakReference<ViewTrackerLinkEntity>( entity, false ) );
                }
            }

            public bool GetByStart( DateTime start, out ViewTrackerLinkEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( start, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( start );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(DateTime key, [DisallowNull] IList<ViewTrackerLinkEntity> result )
            {
                return _entries.From( key, result );
            }

            public bool GetUntil(DateTime key, [DisallowNull] IList<ViewTrackerLinkEntity> result )
            {
                return _entries.Until( key, result );
            }

            public bool GetOver(DateTime firstKey, DateTime lastKey, [DisallowNull] IList<ViewTrackerLinkEntity> result )
            {
                return _entries.Over( firstKey, lastKey, result );
            }

            public bool GetAll([DisallowNull] IList<ViewTrackerLinkEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<DateTime, ByStart> _entries = new SortedListEx<DateTime, ByStart>( );
        public List<ViewTrackerLinkEntity> GetViewTrackerLinkCollectionByView( Guid view )
        {
            throw new NotImplementedException();
        }

        public ViewTrackerLinkEntity? GetViewTrackerLinkByViewAndStart( Guid view, DateTime start )
        {
            throw new NotImplementedException();
        }

        public ViewTrackerLinkEntity? GetViewTrackerLinkByViewAtStart( Guid view, DateTime start )
        {
            throw new NotImplementedException();
        }

        public IList<ViewTrackerLinkEntity> GetViewTrackerLinkByViewFromStart( Guid view, DateTime start )
        {
            throw new NotImplementedException();
        }

        public IList<ViewTrackerLinkEntity> GetViewTrackerLinkByViewUntilStart( Guid view, DateTime start )
        {
            throw new NotImplementedException();
        }

        IList<ViewTrackerLinkEntity> GetViewTrackerLinkByViewOverStart( Guid view, DateTime fromStart, DateTime untilStart )
        {
            throw new NotImplementedException();
        }

    }
    public class ViewTrackerLinkByTrackerAndStartEntityIndex
    {
        public class ByStart
        {
            readonly SortedWeakReferenceList<DateTime, ViewTrackerLinkEntity> _entries = new SortedWeakReferenceList<DateTime, ViewTrackerLinkEntity>( );

            public ByStart( )
            {
            }

            public void Add( ViewTrackerLinkEntity entity )
            {
                if( _entries.TryGetValue(entity.Start, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Start, new WeakReference<ViewTrackerLinkEntity>( entity, false ) );
                }
            }

            public bool GetByStart( DateTime start, out ViewTrackerLinkEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( start, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( start );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(DateTime key, [DisallowNull] IList<ViewTrackerLinkEntity> result )
            {
                return _entries.From( key, result );
            }

            public bool GetUntil(DateTime key, [DisallowNull] IList<ViewTrackerLinkEntity> result )
            {
                return _entries.Until( key, result );
            }

            public bool GetOver(DateTime firstKey, DateTime lastKey, [DisallowNull] IList<ViewTrackerLinkEntity> result )
            {
                return _entries.Over( firstKey, lastKey, result );
            }

            public bool GetAll([DisallowNull] IList<ViewTrackerLinkEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<DateTime, ByStart> _entries = new SortedListEx<DateTime, ByStart>( );
        public List<ViewTrackerLinkEntity> GetViewTrackerLinkCollectionByTracker( Guid tracker )
        {
            throw new NotImplementedException();
        }

        public ViewTrackerLinkEntity? GetViewTrackerLinkByTrackerAndStart( Guid tracker, DateTime start )
        {
            throw new NotImplementedException();
        }

        public ViewTrackerLinkEntity? GetViewTrackerLinkByTrackerAtStart( Guid tracker, DateTime start )
        {
            throw new NotImplementedException();
        }

        public IList<ViewTrackerLinkEntity> GetViewTrackerLinkByTrackerFromStart( Guid tracker, DateTime start )
        {
            throw new NotImplementedException();
        }

        public IList<ViewTrackerLinkEntity> GetViewTrackerLinkByTrackerUntilStart( Guid tracker, DateTime start )
        {
            throw new NotImplementedException();
        }

        IList<ViewTrackerLinkEntity> GetViewTrackerLinkByTrackerOverStart( Guid tracker, DateTime fromStart, DateTime untilStart )
        {
            throw new NotImplementedException();
        }

    }
    public class ViewTrackerLinkByStartEntityIndex
    {
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, ViewTrackerLinkEntity> _entries = new SortedWeakReferenceList<Guid, ViewTrackerLinkEntity>( );
            public ById( )
            {
            }

            public void Add( ViewTrackerLinkEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<ViewTrackerLinkEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out ViewTrackerLinkEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<ViewTrackerLinkEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<ViewTrackerLinkEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<ViewTrackerLinkEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<ViewTrackerLinkEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<DateTime, ById> _entries = new SortedListEx<DateTime, ById>( );

        public ViewTrackerLinkByStartEntityIndex( )
        {
        }

        public List<ViewTrackerLinkEntity> GetViewTrackerLinkCollectionByStart( DateTime start )
        {
            throw new NotImplementedException();
        }

        public IList<ViewTrackerLinkEntity> GetViewTrackerLinkCollectionAtStart( DateTime start )
        {
            throw new NotImplementedException();
        }

        public IList<ViewTrackerLinkEntity> GetViewTrackerLinkCollectionFromStart( DateTime start )
        {
            throw new NotImplementedException();
        }

        public IList<ViewTrackerLinkEntity> GetViewTrackerLinkCollectionUntilStart( DateTime start )
        {
            throw new NotImplementedException();
        }

        IList<ViewTrackerLinkEntity> GetViewTrackerLinkCollectionOverStart( DateTime fromStart, DateTime untilStart )
        {
            throw new NotImplementedException();
        }

    }

    public class WeatherStationCommandByWeatherStationAndTimestampEntityIndex
    {
        public class ByTimestamp
        {
            readonly SortedListEx<DateTime, ById> _entries = new SortedListEx<DateTime, ById>( );
            List<DateTime> _emptyKeys = new List<DateTime>( );

            public ByTimestamp( )
            {
            }

            void RemoveEmptyKeys( )
            {
                var emptyKeyCount = _emptyKeys.Count;
                for ( int i = 0; i < emptyKeyCount; i++ )
                {
                    _entries.Remove( _emptyKeys[ i ] );
                }
                _emptyKeys.Clear( );
            }

            public bool GetAll([DisallowNull] IList<WeatherStationCommandEntity> result )
            {
                foreach( var entry in _entries )
                {
                    if( entry.Value.GetAll( result ) == false )
                    {
                        _emptyKeys.Add( entry.Key );
                    }
                }
                RemoveEmptyKeys( );
                return _entries.Count > 0;
            }

        }
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, WeatherStationCommandEntity> _entries = new SortedWeakReferenceList<Guid, WeatherStationCommandEntity>( );
            public ById( )
            {
            }

            public void Add( WeatherStationCommandEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<WeatherStationCommandEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out WeatherStationCommandEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<WeatherStationCommandEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<WeatherStationCommandEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<WeatherStationCommandEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<WeatherStationCommandEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<Guid, ByTimestamp> _entries = new SortedListEx<Guid, ByTimestamp>( );

        public WeatherStationCommandByWeatherStationAndTimestampEntityIndex( )
        {
        }

        public List<WeatherStationCommandEntity> GetWeatherStationCommandCollectionByWeatherStation( Guid weatherStation )
        {
            throw new NotImplementedException();
        }

        public List<WeatherStationCommandEntity> GetWeatherStationCommandCollectionByWeatherStationAndTimestamp( Guid weatherStation, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<WeatherStationCommandEntity> GetWeatherStationCommandCollectionByWeatherStationAtTimestamp( Guid weatherStation, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<WeatherStationCommandEntity> GetWeatherStationCommandCollectionByWeatherStationFromTimestamp( Guid weatherStation, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<WeatherStationCommandEntity> GetWeatherStationCommandCollectionByWeatherStationUntilTimestamp( Guid weatherStation, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        IList<WeatherStationCommandEntity> GetWeatherStationCommandCollectionByWeatherStationOverTimestamp( Guid weatherStation, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

    }

    public class WeatherStationCommandByTimestampEntityIndex
    {
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, WeatherStationCommandEntity> _entries = new SortedWeakReferenceList<Guid, WeatherStationCommandEntity>( );
            public ById( )
            {
            }

            public void Add( WeatherStationCommandEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<WeatherStationCommandEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out WeatherStationCommandEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<WeatherStationCommandEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<WeatherStationCommandEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<WeatherStationCommandEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<WeatherStationCommandEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<DateTime, ById> _entries = new SortedListEx<DateTime, ById>( );

        public WeatherStationCommandByTimestampEntityIndex( )
        {
        }

        public List<WeatherStationCommandEntity> GetWeatherStationCommandCollectionByTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<WeatherStationCommandEntity> GetWeatherStationCommandCollectionAtTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<WeatherStationCommandEntity> GetWeatherStationCommandCollectionFromTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<WeatherStationCommandEntity> GetWeatherStationCommandCollectionUntilTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        IList<WeatherStationCommandEntity> GetWeatherStationCommandCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

    }

    public class WeatherStationCommandByReplyEntityIndex
    {
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, WeatherStationCommandEntity> _entries = new SortedWeakReferenceList<Guid, WeatherStationCommandEntity>( );
            public ById( )
            {
            }

            public void Add( WeatherStationCommandEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<WeatherStationCommandEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out WeatherStationCommandEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<WeatherStationCommandEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<WeatherStationCommandEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<WeatherStationCommandEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<WeatherStationCommandEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<Guid, ById> _entries = new SortedListEx<Guid, ById>( );

        public WeatherStationCommandByReplyEntityIndex( )
        {
        }

        public List<WeatherStationCommandEntity> GetWeatherStationCommandCollectionByReply( Guid? reply )
        {
            throw new NotImplementedException();
        }

        public IList<WeatherStationCommandEntity> GetWeatherStationCommandCollectionByReplyIsNull(  )
        {
            throw new NotImplementedException();
        }

    }

    public class WeatherStationCommandByReplyIsNullEntityIndex
    {
    }

    public class WeatherStationCommandReplyByWeatherStationAndTimestampEntityIndex
    {
        public class ByTimestamp
        {
            readonly SortedListEx<DateTime, ById> _entries = new SortedListEx<DateTime, ById>( );
            List<DateTime> _emptyKeys = new List<DateTime>( );

            public ByTimestamp( )
            {
            }

            void RemoveEmptyKeys( )
            {
                var emptyKeyCount = _emptyKeys.Count;
                for ( int i = 0; i < emptyKeyCount; i++ )
                {
                    _entries.Remove( _emptyKeys[ i ] );
                }
                _emptyKeys.Clear( );
            }

            public bool GetAll([DisallowNull] IList<WeatherStationCommandReplyEntity> result )
            {
                foreach( var entry in _entries )
                {
                    if( entry.Value.GetAll( result ) == false )
                    {
                        _emptyKeys.Add( entry.Key );
                    }
                }
                RemoveEmptyKeys( );
                return _entries.Count > 0;
            }

        }
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, WeatherStationCommandReplyEntity> _entries = new SortedWeakReferenceList<Guid, WeatherStationCommandReplyEntity>( );
            public ById( )
            {
            }

            public void Add( WeatherStationCommandReplyEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<WeatherStationCommandReplyEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out WeatherStationCommandReplyEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<WeatherStationCommandReplyEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<WeatherStationCommandReplyEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<WeatherStationCommandReplyEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<WeatherStationCommandReplyEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<Guid, ByTimestamp> _entries = new SortedListEx<Guid, ByTimestamp>( );

        public WeatherStationCommandReplyByWeatherStationAndTimestampEntityIndex( )
        {
        }

        public List<WeatherStationCommandReplyEntity> GetWeatherStationCommandReplyCollectionByWeatherStation( Guid weatherStation )
        {
            throw new NotImplementedException();
        }

        public List<WeatherStationCommandReplyEntity> GetWeatherStationCommandReplyCollectionByWeatherStationAndTimestamp( Guid weatherStation, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<WeatherStationCommandReplyEntity> GetWeatherStationCommandReplyCollectionByWeatherStationAtTimestamp( Guid weatherStation, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<WeatherStationCommandReplyEntity> GetWeatherStationCommandReplyCollectionByWeatherStationFromTimestamp( Guid weatherStation, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<WeatherStationCommandReplyEntity> GetWeatherStationCommandReplyCollectionByWeatherStationUntilTimestamp( Guid weatherStation, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        IList<WeatherStationCommandReplyEntity> GetWeatherStationCommandReplyCollectionByWeatherStationOverTimestamp( Guid weatherStation, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

    }

    public class WeatherStationCommandReplyByTimestampEntityIndex
    {
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, WeatherStationCommandReplyEntity> _entries = new SortedWeakReferenceList<Guid, WeatherStationCommandReplyEntity>( );
            public ById( )
            {
            }

            public void Add( WeatherStationCommandReplyEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<WeatherStationCommandReplyEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out WeatherStationCommandReplyEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<WeatherStationCommandReplyEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<WeatherStationCommandReplyEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<WeatherStationCommandReplyEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<WeatherStationCommandReplyEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<DateTime, ById> _entries = new SortedListEx<DateTime, ById>( );

        public WeatherStationCommandReplyByTimestampEntityIndex( )
        {
        }

        public List<WeatherStationCommandReplyEntity> GetWeatherStationCommandReplyCollectionByTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<WeatherStationCommandReplyEntity> GetWeatherStationCommandReplyCollectionAtTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<WeatherStationCommandReplyEntity> GetWeatherStationCommandReplyCollectionFromTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<WeatherStationCommandReplyEntity> GetWeatherStationCommandReplyCollectionUntilTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        IList<WeatherStationCommandReplyEntity> GetWeatherStationCommandReplyCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

    }

    public class WeatherStationCommandReplyByCommandEntityIndex
    {
        readonly SortedWeakReferenceList<Guid, WeatherStationCommandReplyEntity> _entries = new SortedWeakReferenceList<Guid, WeatherStationCommandReplyEntity>( );

        public WeatherStationCommandReplyByCommandEntityIndex( )
        {
        }

        public void Add( WeatherStationCommandReplyEntity entity )
        {
            if ( entity.CommandId is Guid command )
            {
                if ( _entries.TryGetValue( command, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( command, new WeakReference<WeatherStationCommandReplyEntity>( entity, false ) );
                }
            }
            else
            {
                throw new ArgumentException( "entity.CommandId is null.", nameof( entity ) );
            }
        }

        public bool GetByCommandId( Guid command, out WeatherStationCommandReplyEntity? entity )
        {
            entity = null;
            if ( _entries.TryGetValue( command, out var weakReference ) )
            {
                if ( weakReference.TryGetTarget( out entity ) == false )
                {
                    _entries.Remove( command );
                }
            }
            return _entries.Count > 0;
        }

        public bool GetFrom(Guid key, [DisallowNull] IList<WeatherStationCommandReplyEntity> result )
        {
            return _entries.From( key, result );
        }

        public bool GetUntil(Guid key, [DisallowNull] IList<WeatherStationCommandReplyEntity> result )
        {
            return _entries.Until( key, result );
        }

        public bool GetOver(Guid firstKey, Guid lastKey, [DisallowNull] IList<WeatherStationCommandReplyEntity> result )
        {
            return _entries.Over( firstKey, lastKey, result );
        }

        public bool GetAll([DisallowNull] IList<WeatherStationCommandReplyEntity> result )
        {
            return _entries.All( result );
        }

        public WeatherStationCommandReplyEntity? GetWeatherStationCommandReplyByCommand( Guid? command )
        {
            throw new NotImplementedException();
        }

        public IList<WeatherStationCommandReplyEntity> GetWeatherStationCommandReplyCollectionByCommandIsNull(  )
        {
            throw new NotImplementedException();
        }

    }
    public class WeatherStationCommandReplyByCommandIsNullEntityIndex
    {
    }

    public class WeatherStationConfigurationByWeatherStationAndTimestampEntityIndex
    {
        public class ByTimestamp
        {
            readonly SortedWeakReferenceList<DateTime, WeatherStationConfigurationEntity> _entries = new SortedWeakReferenceList<DateTime, WeatherStationConfigurationEntity>( );

            public ByTimestamp( )
            {
            }

            public void Add( WeatherStationConfigurationEntity entity )
            {
                if( _entries.TryGetValue(entity.Timestamp, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Timestamp, new WeakReference<WeatherStationConfigurationEntity>( entity, false ) );
                }
            }

            public bool GetByTimestamp( DateTime timestamp, out WeatherStationConfigurationEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( timestamp, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( timestamp );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(DateTime key, [DisallowNull] IList<WeatherStationConfigurationEntity> result )
            {
                return _entries.From( key, result );
            }

            public bool GetUntil(DateTime key, [DisallowNull] IList<WeatherStationConfigurationEntity> result )
            {
                return _entries.Until( key, result );
            }

            public bool GetOver(DateTime firstKey, DateTime lastKey, [DisallowNull] IList<WeatherStationConfigurationEntity> result )
            {
                return _entries.Over( firstKey, lastKey, result );
            }

            public bool GetAll([DisallowNull] IList<WeatherStationConfigurationEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<DateTime, ByTimestamp> _entries = new SortedListEx<DateTime, ByTimestamp>( );
        public List<WeatherStationConfigurationEntity> GetWeatherStationConfigurationCollectionByWeatherStation( Guid weatherStation )
        {
            throw new NotImplementedException();
        }

        public WeatherStationConfigurationEntity? GetWeatherStationConfigurationByWeatherStationAndTimestamp( Guid weatherStation, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public WeatherStationConfigurationEntity? GetWeatherStationConfigurationByWeatherStationAtTimestamp( Guid weatherStation, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<WeatherStationConfigurationEntity> GetWeatherStationConfigurationByWeatherStationFromTimestamp( Guid weatherStation, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<WeatherStationConfigurationEntity> GetWeatherStationConfigurationByWeatherStationUntilTimestamp( Guid weatherStation, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        IList<WeatherStationConfigurationEntity> GetWeatherStationConfigurationByWeatherStationOverTimestamp( Guid weatherStation, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

    }
    public class WeatherStationConfigurationByTimestampEntityIndex
    {
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, WeatherStationConfigurationEntity> _entries = new SortedWeakReferenceList<Guid, WeatherStationConfigurationEntity>( );
            public ById( )
            {
            }

            public void Add( WeatherStationConfigurationEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<WeatherStationConfigurationEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out WeatherStationConfigurationEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<WeatherStationConfigurationEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<WeatherStationConfigurationEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<WeatherStationConfigurationEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<WeatherStationConfigurationEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<DateTime, ById> _entries = new SortedListEx<DateTime, ById>( );

        public WeatherStationConfigurationByTimestampEntityIndex( )
        {
        }

        public List<WeatherStationConfigurationEntity> GetWeatherStationConfigurationCollectionByTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<WeatherStationConfigurationEntity> GetWeatherStationConfigurationCollectionAtTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<WeatherStationConfigurationEntity> GetWeatherStationConfigurationCollectionFromTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<WeatherStationConfigurationEntity> GetWeatherStationConfigurationCollectionUntilTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        IList<WeatherStationConfigurationEntity> GetWeatherStationConfigurationCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

    }

    public class ZoneByNameEntityIndex
    {
        readonly SortedWeakReferenceList<string, ZoneEntity> _entries = new SortedWeakReferenceList<string, ZoneEntity>( );

        public ZoneByNameEntityIndex( )
        {
        }

        public void Add( ZoneEntity entity )
        {
            if( _entries.TryGetValue(entity.Name, out var weakReference ) )
            {
                weakReference.SetTarget( entity );
            }
            else
            {
                _entries.Add( entity.Name, new WeakReference<ZoneEntity>( entity, false ) );
            }
        }

        public bool GetByName( string name, out ZoneEntity? entity )
        {
            entity = null;
            if ( _entries.TryGetValue( name, out var weakReference ) )
            {
                if ( weakReference.TryGetTarget( out entity ) == false )
                {
                    _entries.Remove( name );
                }
            }
            return _entries.Count > 0;
        }

        public bool GetFrom(string key, [DisallowNull] IList<ZoneEntity> result )
        {
            return _entries.From( key, result );
        }

        public bool GetUntil(string key, [DisallowNull] IList<ZoneEntity> result )
        {
            return _entries.Until( key, result );
        }

        public bool GetOver(string firstKey, string lastKey, [DisallowNull] IList<ZoneEntity> result )
        {
            return _entries.Over( firstKey, lastKey, result );
        }

        public bool GetAll([DisallowNull] IList<ZoneEntity> result )
        {
            return _entries.All( result );
        }

        public ZoneEntity? GetZoneByName( string name )
        {
            throw new NotImplementedException();
        }

    }
    public class ZoneExceptionsByZoneAndTimestampEntityIndex
    {
        public class ByTimestamp
        {
            readonly SortedWeakReferenceList<DateTime, ZoneExceptionsEntity> _entries = new SortedWeakReferenceList<DateTime, ZoneExceptionsEntity>( );

            public ByTimestamp( )
            {
            }

            public void Add( ZoneExceptionsEntity entity )
            {
                if( _entries.TryGetValue(entity.Timestamp, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Timestamp, new WeakReference<ZoneExceptionsEntity>( entity, false ) );
                }
            }

            public bool GetByTimestamp( DateTime timestamp, out ZoneExceptionsEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( timestamp, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( timestamp );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(DateTime key, [DisallowNull] IList<ZoneExceptionsEntity> result )
            {
                return _entries.From( key, result );
            }

            public bool GetUntil(DateTime key, [DisallowNull] IList<ZoneExceptionsEntity> result )
            {
                return _entries.Until( key, result );
            }

            public bool GetOver(DateTime firstKey, DateTime lastKey, [DisallowNull] IList<ZoneExceptionsEntity> result )
            {
                return _entries.Over( firstKey, lastKey, result );
            }

            public bool GetAll([DisallowNull] IList<ZoneExceptionsEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<DateTime, ByTimestamp> _entries = new SortedListEx<DateTime, ByTimestamp>( );
        public List<ZoneExceptionsEntity> GetZoneExceptionsCollectionByZone( Guid zone )
        {
            throw new NotImplementedException();
        }

        public ZoneExceptionsEntity? GetZoneExceptionsByZoneAndTimestamp( Guid zone, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public ZoneExceptionsEntity? GetZoneExceptionsByZoneAtTimestamp( Guid zone, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<ZoneExceptionsEntity> GetZoneExceptionsByZoneFromTimestamp( Guid zone, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<ZoneExceptionsEntity> GetZoneExceptionsByZoneUntilTimestamp( Guid zone, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        IList<ZoneExceptionsEntity> GetZoneExceptionsByZoneOverTimestamp( Guid zone, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

    }
    public class ZoneExceptionsByTimestampEntityIndex
    {
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, ZoneExceptionsEntity> _entries = new SortedWeakReferenceList<Guid, ZoneExceptionsEntity>( );
            public ById( )
            {
            }

            public void Add( ZoneExceptionsEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<ZoneExceptionsEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out ZoneExceptionsEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<ZoneExceptionsEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<ZoneExceptionsEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<ZoneExceptionsEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<ZoneExceptionsEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<DateTime, ById> _entries = new SortedListEx<DateTime, ById>( );

        public ZoneExceptionsByTimestampEntityIndex( )
        {
        }

        public List<ZoneExceptionsEntity> GetZoneExceptionsCollectionByTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<ZoneExceptionsEntity> GetZoneExceptionsCollectionAtTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<ZoneExceptionsEntity> GetZoneExceptionsCollectionFromTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<ZoneExceptionsEntity> GetZoneExceptionsCollectionUntilTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        IList<ZoneExceptionsEntity> GetZoneExceptionsCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

    }

    public class ZoneExceptionsVesselLinkByZoneExceptionsAndVesselEntityIndex
    {
        public class ByVessel
        {
            readonly SortedWeakReferenceList<Guid, ZoneExceptionsVesselLinkEntity> _entries = new SortedWeakReferenceList<Guid, ZoneExceptionsVesselLinkEntity>( );

            public ByVessel( )
            {
            }

            public void Add( ZoneExceptionsVesselLinkEntity entity )
            {
                if( _entries.TryGetValue(entity.VesselId, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.VesselId, new WeakReference<ZoneExceptionsVesselLinkEntity>( entity, false ) );
                }
            }

            public bool GetByVesselId( Guid vessel, out ZoneExceptionsVesselLinkEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( vessel, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( vessel );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid key, [DisallowNull] IList<ZoneExceptionsVesselLinkEntity> result )
            {
                return _entries.From( key, result );
            }

            public bool GetUntil(Guid key, [DisallowNull] IList<ZoneExceptionsVesselLinkEntity> result )
            {
                return _entries.Until( key, result );
            }

            public bool GetOver(Guid firstKey, Guid lastKey, [DisallowNull] IList<ZoneExceptionsVesselLinkEntity> result )
            {
                return _entries.Over( firstKey, lastKey, result );
            }

            public bool GetAll([DisallowNull] IList<ZoneExceptionsVesselLinkEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<Guid, ByVessel> _entries = new SortedListEx<Guid, ByVessel>( );
        public List<ZoneExceptionsVesselLinkEntity> GetZoneExceptionsVesselLinkCollectionByZoneExceptions( Guid zoneExceptions )
        {
            throw new NotImplementedException();
        }

        public ZoneExceptionsVesselLinkEntity? GetZoneExceptionsVesselLinkByZoneExceptionsAndVessel( Guid zoneExceptions, Guid vessel )
        {
            throw new NotImplementedException();
        }

    }
    public class ZoneExceptionsVesselLinkByVesselEntityIndex
    {
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, ZoneExceptionsVesselLinkEntity> _entries = new SortedWeakReferenceList<Guid, ZoneExceptionsVesselLinkEntity>( );
            public ById( )
            {
            }

            public void Add( ZoneExceptionsVesselLinkEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<ZoneExceptionsVesselLinkEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out ZoneExceptionsVesselLinkEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<ZoneExceptionsVesselLinkEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<ZoneExceptionsVesselLinkEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<ZoneExceptionsVesselLinkEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<ZoneExceptionsVesselLinkEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<Guid, ById> _entries = new SortedListEx<Guid, ById>( );

        public ZoneExceptionsVesselLinkByVesselEntityIndex( )
        {
        }

        public List<ZoneExceptionsVesselLinkEntity> GetZoneExceptionsVesselLinkCollectionByVessel( Guid vessel )
        {
            throw new NotImplementedException();
        }

    }

    public class ZoneTrackAlarmByTrackAndTimestampEntityIndex
    {
        public class ByTimestamp
        {
            readonly SortedWeakReferenceList<DateTime, ZoneTrackAlarmEntity> _entries = new SortedWeakReferenceList<DateTime, ZoneTrackAlarmEntity>( );

            public ByTimestamp( )
            {
            }

            public void Add( ZoneTrackAlarmEntity entity )
            {
                if( _entries.TryGetValue(entity.Timestamp, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Timestamp, new WeakReference<ZoneTrackAlarmEntity>( entity, false ) );
                }
            }

            public bool GetByTimestamp( DateTime timestamp, out ZoneTrackAlarmEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( timestamp, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( timestamp );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(DateTime key, [DisallowNull] IList<ZoneTrackAlarmEntity> result )
            {
                return _entries.From( key, result );
            }

            public bool GetUntil(DateTime key, [DisallowNull] IList<ZoneTrackAlarmEntity> result )
            {
                return _entries.Until( key, result );
            }

            public bool GetOver(DateTime firstKey, DateTime lastKey, [DisallowNull] IList<ZoneTrackAlarmEntity> result )
            {
                return _entries.Over( firstKey, lastKey, result );
            }

            public bool GetAll([DisallowNull] IList<ZoneTrackAlarmEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<DateTime, ByTimestamp> _entries = new SortedListEx<DateTime, ByTimestamp>( );
        public List<ZoneTrackAlarmEntity> GetZoneTrackAlarmCollectionByTrack( Guid track )
        {
            throw new NotImplementedException();
        }

        public ZoneTrackAlarmEntity? GetZoneTrackAlarmByTrackAndTimestamp( Guid track, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public ZoneTrackAlarmEntity? GetZoneTrackAlarmByTrackAtTimestamp( Guid track, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<ZoneTrackAlarmEntity> GetZoneTrackAlarmByTrackFromTimestamp( Guid track, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<ZoneTrackAlarmEntity> GetZoneTrackAlarmByTrackUntilTimestamp( Guid track, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        IList<ZoneTrackAlarmEntity> GetZoneTrackAlarmByTrackOverTimestamp( Guid track, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

    }
    public class ZoneTrackAlarmByZoneTrackAndTimestampEntityIndex
    {
        public class ByTrack
        {
            readonly SortedListEx<Guid, ByTimestamp> _entries = new SortedListEx<Guid, ByTimestamp>( );
            List<Guid> _emptyKeys = new List<Guid>( );

            public ByTrack( )
            {
            }

            void RemoveEmptyKeys( )
            {
                var emptyKeyCount = _emptyKeys.Count;
                for ( int i = 0; i < emptyKeyCount; i++ )
                {
                    _entries.Remove( _emptyKeys[ i ] );
                }
                _emptyKeys.Clear( );
            }

            public bool GetAll([DisallowNull] IList<ZoneTrackAlarmEntity> result )
            {
                foreach( var entry in _entries )
                {
                    if( entry.Value.GetAll( result ) == false )
                    {
                        _emptyKeys.Add( entry.Key );
                    }
                }
                RemoveEmptyKeys( );
                return _entries.Count > 0;
            }

        }
        public class ByTimestamp
        {
            readonly SortedWeakReferenceList<DateTime, ZoneTrackAlarmEntity> _entries = new SortedWeakReferenceList<DateTime, ZoneTrackAlarmEntity>( );

            public ByTimestamp( )
            {
            }

            public void Add( ZoneTrackAlarmEntity entity )
            {
                if( _entries.TryGetValue(entity.Timestamp, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Timestamp, new WeakReference<ZoneTrackAlarmEntity>( entity, false ) );
                }
            }

            public bool GetByTimestamp( DateTime timestamp, out ZoneTrackAlarmEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( timestamp, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( timestamp );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(DateTime key, [DisallowNull] IList<ZoneTrackAlarmEntity> result )
            {
                return _entries.From( key, result );
            }

            public bool GetUntil(DateTime key, [DisallowNull] IList<ZoneTrackAlarmEntity> result )
            {
                return _entries.Until( key, result );
            }

            public bool GetOver(DateTime firstKey, DateTime lastKey, [DisallowNull] IList<ZoneTrackAlarmEntity> result )
            {
                return _entries.Over( firstKey, lastKey, result );
            }

            public bool GetAll([DisallowNull] IList<ZoneTrackAlarmEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<DateTime, ByTrack> _entries = new SortedListEx<DateTime, ByTrack>( );
        public List<ZoneTrackAlarmEntity> GetZoneTrackAlarmCollectionByZone( Guid zone )
        {
            throw new NotImplementedException();
        }

        public List<ZoneTrackAlarmEntity> GetZoneTrackAlarmCollectionByZoneAndTrack( Guid zone, Guid track )
        {
            throw new NotImplementedException();
        }

        public ZoneTrackAlarmEntity? GetZoneTrackAlarmByZoneTrackAndTimestamp( Guid zone, Guid track, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public ZoneTrackAlarmEntity? GetZoneTrackAlarmByZoneTrackAtTimestamp( Guid zone, Guid track, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<ZoneTrackAlarmEntity> GetZoneTrackAlarmByZoneTrackFromTimestamp( Guid zone, Guid track, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<ZoneTrackAlarmEntity> GetZoneTrackAlarmByZoneTrackUntilTimestamp( Guid zone, Guid track, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        IList<ZoneTrackAlarmEntity> GetZoneTrackAlarmByZoneTrackOverTimestamp( Guid zone, Guid track, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

    }
    public class ZoneTrackAlarmByTimestampEntityIndex
    {
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, ZoneTrackAlarmEntity> _entries = new SortedWeakReferenceList<Guid, ZoneTrackAlarmEntity>( );
            public ById( )
            {
            }

            public void Add( ZoneTrackAlarmEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<ZoneTrackAlarmEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out ZoneTrackAlarmEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<ZoneTrackAlarmEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<ZoneTrackAlarmEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<ZoneTrackAlarmEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<ZoneTrackAlarmEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<DateTime, ById> _entries = new SortedListEx<DateTime, ById>( );

        public ZoneTrackAlarmByTimestampEntityIndex( )
        {
        }

        public List<ZoneTrackAlarmEntity> GetZoneTrackAlarmCollectionByTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<ZoneTrackAlarmEntity> GetZoneTrackAlarmCollectionAtTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<ZoneTrackAlarmEntity> GetZoneTrackAlarmCollectionFromTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public IList<ZoneTrackAlarmEntity> GetZoneTrackAlarmCollectionUntilTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        IList<ZoneTrackAlarmEntity> GetZoneTrackAlarmCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

    }

    public class EntityChanges
    {
        readonly AircraftTypeByNameEntityIndex _aircraftTypeByNameEntityIndex = new AircraftTypeByNameEntityIndex( );
        readonly AisDeviceCommandByAisDeviceAndTimestampEntityIndex _aisDeviceCommandByAisDeviceAndTimestampEntityIndex = new AisDeviceCommandByAisDeviceAndTimestampEntityIndex( );
        readonly AisDeviceCommandByTimestampEntityIndex _aisDeviceCommandByTimestampEntityIndex = new AisDeviceCommandByTimestampEntityIndex( );
        readonly AisDeviceCommandByReplyEntityIndex _aisDeviceCommandByReplyEntityIndex = new AisDeviceCommandByReplyEntityIndex( );
        readonly AisDeviceCommandByReplyIsNullEntityIndex _aisDeviceCommandByReplyIsNullEntityIndex = new AisDeviceCommandByReplyIsNullEntityIndex( );
        readonly AisDeviceCommandReplyByAisDeviceAndTimestampEntityIndex _aisDeviceCommandReplyByAisDeviceAndTimestampEntityIndex = new AisDeviceCommandReplyByAisDeviceAndTimestampEntityIndex( );
        readonly AisDeviceCommandReplyByTimestampEntityIndex _aisDeviceCommandReplyByTimestampEntityIndex = new AisDeviceCommandReplyByTimestampEntityIndex( );
        readonly AisDeviceCommandReplyByCommandEntityIndex _aisDeviceCommandReplyByCommandEntityIndex = new AisDeviceCommandReplyByCommandEntityIndex( );
        readonly AisDeviceCommandReplyByCommandIsNullEntityIndex _aisDeviceCommandReplyByCommandIsNullEntityIndex = new AisDeviceCommandReplyByCommandIsNullEntityIndex( );
        readonly AisDeviceConfigurationByAisDeviceAndTimestampEntityIndex _aisDeviceConfigurationByAisDeviceAndTimestampEntityIndex = new AisDeviceConfigurationByAisDeviceAndTimestampEntityIndex( );
        readonly AisDeviceConfigurationByTimestampEntityIndex _aisDeviceConfigurationByTimestampEntityIndex = new AisDeviceConfigurationByTimestampEntityIndex( );
        readonly AisDeviceRawMessageByAisDeviceAndTimestampEntityIndex _aisDeviceRawMessageByAisDeviceAndTimestampEntityIndex = new AisDeviceRawMessageByAisDeviceAndTimestampEntityIndex( );
        readonly AisDeviceRawMessageByTimestampEntityIndex _aisDeviceRawMessageByTimestampEntityIndex = new AisDeviceRawMessageByTimestampEntityIndex( );
        readonly AisDeviceRawSentenceByAisDeviceAndTimestampEntityIndex _aisDeviceRawSentenceByAisDeviceAndTimestampEntityIndex = new AisDeviceRawSentenceByAisDeviceAndTimestampEntityIndex( );
        readonly AisDeviceRawSentenceByTimestampEntityIndex _aisDeviceRawSentenceByTimestampEntityIndex = new AisDeviceRawSentenceByTimestampEntityIndex( );
        readonly AisMessageByAisDeviceAndReceivedTimestampEntityIndex _aisMessageByAisDeviceAndReceivedTimestampEntityIndex = new AisMessageByAisDeviceAndReceivedTimestampEntityIndex( );
        readonly AisMessageByReceivedTimestampEntityIndex _aisMessageByReceivedTimestampEntityIndex = new AisMessageByReceivedTimestampEntityIndex( );
        readonly AisMessageByMmsiAndMessageSequenceNumberEntityIndex _aisMessageByMmsiAndMessageSequenceNumberEntityIndex = new AisMessageByMmsiAndMessageSequenceNumberEntityIndex( );
        readonly AisMessageByMmsiIsNullAndMessageSequenceNumberEntityIndex _aisMessageByMmsiIsNullAndMessageSequenceNumberEntityIndex = new AisMessageByMmsiIsNullAndMessageSequenceNumberEntityIndex( );
        readonly AisAddressedSafetyRelatedMessageByDestinationMmsiEntityIndex _aisAddressedSafetyRelatedMessageByDestinationMmsiEntityIndex = new AisAddressedSafetyRelatedMessageByDestinationMmsiEntityIndex( );
        readonly AisAddressedSafetyRelatedMessageByDestinationMmsiIsNullEntityIndex _aisAddressedSafetyRelatedMessageByDestinationMmsiIsNullEntityIndex = new AisAddressedSafetyRelatedMessageByDestinationMmsiIsNullEntityIndex( );
        readonly AisBinaryAddressedMessageByDestinationMmsiEntityIndex _aisBinaryAddressedMessageByDestinationMmsiEntityIndex = new AisBinaryAddressedMessageByDestinationMmsiEntityIndex( );
        readonly AisBinaryAddressedMessageByDestinationMmsiIsNullEntityIndex _aisBinaryAddressedMessageByDestinationMmsiIsNullEntityIndex = new AisBinaryAddressedMessageByDestinationMmsiIsNullEntityIndex( );
        readonly AisExtendedClassBCsPositionReportMessageByNameEntityIndex _aisExtendedClassBCsPositionReportMessageByNameEntityIndex = new AisExtendedClassBCsPositionReportMessageByNameEntityIndex( );
        readonly AisExtendedClassBCsPositionReportMessageByNameIsNullEntityIndex _aisExtendedClassBCsPositionReportMessageByNameIsNullEntityIndex = new AisExtendedClassBCsPositionReportMessageByNameIsNullEntityIndex( );
        readonly AisStaticAndVoyageRelatedDataMessageByImoNumberEntityIndex _aisStaticAndVoyageRelatedDataMessageByImoNumberEntityIndex = new AisStaticAndVoyageRelatedDataMessageByImoNumberEntityIndex( );
        readonly AisStaticAndVoyageRelatedDataMessageByImoNumberIsNullEntityIndex _aisStaticAndVoyageRelatedDataMessageByImoNumberIsNullEntityIndex = new AisStaticAndVoyageRelatedDataMessageByImoNumberIsNullEntityIndex( );
        readonly AisStaticAndVoyageRelatedDataMessageByCallsignEntityIndex _aisStaticAndVoyageRelatedDataMessageByCallsignEntityIndex = new AisStaticAndVoyageRelatedDataMessageByCallsignEntityIndex( );
        readonly AisStaticAndVoyageRelatedDataMessageByCallsignIsNullEntityIndex _aisStaticAndVoyageRelatedDataMessageByCallsignIsNullEntityIndex = new AisStaticAndVoyageRelatedDataMessageByCallsignIsNullEntityIndex( );
        readonly AisStaticAndVoyageRelatedDataMessageByShipNameEntityIndex _aisStaticAndVoyageRelatedDataMessageByShipNameEntityIndex = new AisStaticAndVoyageRelatedDataMessageByShipNameEntityIndex( );
        readonly AisStaticAndVoyageRelatedDataMessageByShipNameIsNullEntityIndex _aisStaticAndVoyageRelatedDataMessageByShipNameIsNullEntityIndex = new AisStaticAndVoyageRelatedDataMessageByShipNameIsNullEntityIndex( );
        readonly AisStaticDataReportPartAMessageByShipNameEntityIndex _aisStaticDataReportPartAMessageByShipNameEntityIndex = new AisStaticDataReportPartAMessageByShipNameEntityIndex( );
        readonly AisStaticDataReportPartAMessageByShipNameIsNullEntityIndex _aisStaticDataReportPartAMessageByShipNameIsNullEntityIndex = new AisStaticDataReportPartAMessageByShipNameIsNullEntityIndex( );
        readonly AisStaticDataReportPartBMessageByCallsignEntityIndex _aisStaticDataReportPartBMessageByCallsignEntityIndex = new AisStaticDataReportPartBMessageByCallsignEntityIndex( );
        readonly AisStaticDataReportPartBMessageByCallsignIsNullEntityIndex _aisStaticDataReportPartBMessageByCallsignIsNullEntityIndex = new AisStaticDataReportPartBMessageByCallsignIsNullEntityIndex( );
        readonly AisStaticDataReportPartBMessageByMothershipMmsiEntityIndex _aisStaticDataReportPartBMessageByMothershipMmsiEntityIndex = new AisStaticDataReportPartBMessageByMothershipMmsiEntityIndex( );
        readonly AisStaticDataReportPartBMessageByMothershipMmsiIsNullEntityIndex _aisStaticDataReportPartBMessageByMothershipMmsiIsNullEntityIndex = new AisStaticDataReportPartBMessageByMothershipMmsiIsNullEntityIndex( );
        readonly AlarmStateChangeByAlarmAndTimestampEntityIndex _alarmStateChangeByAlarmAndTimestampEntityIndex = new AlarmStateChangeByAlarmAndTimestampEntityIndex( );
        readonly AlarmStateChangeByTimestampEntityIndex _alarmStateChangeByTimestampEntityIndex = new AlarmStateChangeByTimestampEntityIndex( );
        readonly BaseStationTypeByNameEntityIndex _baseStationTypeByNameEntityIndex = new BaseStationTypeByNameEntityIndex( );
        readonly BinaryTimeseriesValueByTimeseriesAndTimestampEntityIndex _binaryTimeseriesValueByTimeseriesAndTimestampEntityIndex = new BinaryTimeseriesValueByTimeseriesAndTimestampEntityIndex( );
        readonly BinaryTimeseriesValueByTimestampEntityIndex _binaryTimeseriesValueByTimestampEntityIndex = new BinaryTimeseriesValueByTimestampEntityIndex( );
        readonly BookmarkByViewEntityIndex _bookmarkByViewEntityIndex = new BookmarkByViewEntityIndex( );
        readonly BooleanTimeseriesValueByTimeseriesAndTimestampEntityIndex _booleanTimeseriesValueByTimeseriesAndTimestampEntityIndex = new BooleanTimeseriesValueByTimeseriesAndTimestampEntityIndex( );
        readonly BooleanTimeseriesValueByTimestampEntityIndex _booleanTimeseriesValueByTimestampEntityIndex = new BooleanTimeseriesValueByTimestampEntityIndex( );
        readonly ByteTimeseriesValueByTimeseriesAndTimestampEntityIndex _byteTimeseriesValueByTimeseriesAndTimestampEntityIndex = new ByteTimeseriesValueByTimeseriesAndTimestampEntityIndex( );
        readonly ByteTimeseriesValueByTimestampEntityIndex _byteTimeseriesValueByTimestampEntityIndex = new ByteTimeseriesValueByTimestampEntityIndex( );
        readonly CameraCommandByCameraAndTimestampEntityIndex _cameraCommandByCameraAndTimestampEntityIndex = new CameraCommandByCameraAndTimestampEntityIndex( );
        readonly CameraCommandByTimestampEntityIndex _cameraCommandByTimestampEntityIndex = new CameraCommandByTimestampEntityIndex( );
        readonly CameraCommandByReplyEntityIndex _cameraCommandByReplyEntityIndex = new CameraCommandByReplyEntityIndex( );
        readonly CameraCommandByReplyIsNullEntityIndex _cameraCommandByReplyIsNullEntityIndex = new CameraCommandByReplyIsNullEntityIndex( );
        readonly CameraCommandReplyByCameraAndTimestampEntityIndex _cameraCommandReplyByCameraAndTimestampEntityIndex = new CameraCommandReplyByCameraAndTimestampEntityIndex( );
        readonly CameraCommandReplyByTimestampEntityIndex _cameraCommandReplyByTimestampEntityIndex = new CameraCommandReplyByTimestampEntityIndex( );
        readonly CameraCommandReplyByCommandEntityIndex _cameraCommandReplyByCommandEntityIndex = new CameraCommandReplyByCommandEntityIndex( );
        readonly CameraCommandReplyByCommandIsNullEntityIndex _cameraCommandReplyByCommandIsNullEntityIndex = new CameraCommandReplyByCommandIsNullEntityIndex( );
        readonly CameraConfigurationByCameraAndTimestampEntityIndex _cameraConfigurationByCameraAndTimestampEntityIndex = new CameraConfigurationByCameraAndTimestampEntityIndex( );
        readonly CameraConfigurationByTimestampEntityIndex _cameraConfigurationByTimestampEntityIndex = new CameraConfigurationByTimestampEntityIndex( );
        readonly CameraPanCalibrationByCameraAndTimestampEntityIndex _cameraPanCalibrationByCameraAndTimestampEntityIndex = new CameraPanCalibrationByCameraAndTimestampEntityIndex( );
        readonly CameraPanCalibrationByTimestampEntityIndex _cameraPanCalibrationByTimestampEntityIndex = new CameraPanCalibrationByTimestampEntityIndex( );
        readonly CameraPanCalibrationValueByPanCalibrationAndPanAngleEntityIndex _cameraPanCalibrationValueByPanCalibrationAndPanAngleEntityIndex = new CameraPanCalibrationValueByPanCalibrationAndPanAngleEntityIndex( );
        readonly CameraStatusByCameraAndTimestampEntityIndex _cameraStatusByCameraAndTimestampEntityIndex = new CameraStatusByCameraAndTimestampEntityIndex( );
        readonly CameraStatusByTrackAndTimestampEntityIndex _cameraStatusByTrackAndTimestampEntityIndex = new CameraStatusByTrackAndTimestampEntityIndex( );
        readonly CameraStatusByTrackIsNullAndTimestampEntityIndex _cameraStatusByTrackIsNullAndTimestampEntityIndex = new CameraStatusByTrackIsNullAndTimestampEntityIndex( );
        readonly CameraStatusByTimestampEntityIndex _cameraStatusByTimestampEntityIndex = new CameraStatusByTimestampEntityIndex( );
        readonly CameraTiltCalibrationByCameraAndTimestampEntityIndex _cameraTiltCalibrationByCameraAndTimestampEntityIndex = new CameraTiltCalibrationByCameraAndTimestampEntityIndex( );
        readonly CameraTiltCalibrationByTimestampEntityIndex _cameraTiltCalibrationByTimestampEntityIndex = new CameraTiltCalibrationByTimestampEntityIndex( );
        readonly CameraTiltCalibrationValueByTiltCalibrationAndPanAngleEntityIndex _cameraTiltCalibrationValueByTiltCalibrationAndPanAngleEntityIndex = new CameraTiltCalibrationValueByTiltCalibrationAndPanAngleEntityIndex( );
        readonly CameraZoomCalibrationByCameraAndTimestampEntityIndex _cameraZoomCalibrationByCameraAndTimestampEntityIndex = new CameraZoomCalibrationByCameraAndTimestampEntityIndex( );
        readonly CameraZoomCalibrationByTimestampEntityIndex _cameraZoomCalibrationByTimestampEntityIndex = new CameraZoomCalibrationByTimestampEntityIndex( );
        readonly CameraZoomCalibrationValueByZoomCalibrationAndFocalLengthEntityIndex _cameraZoomCalibrationValueByZoomCalibrationAndFocalLengthEntityIndex = new CameraZoomCalibrationValueByZoomCalibrationAndFocalLengthEntityIndex( );
        readonly CatalogElementByCatalogAndNameEntityIndex _catalogElementByCatalogAndNameEntityIndex = new CatalogElementByCatalogAndNameEntityIndex( );
        readonly CatalogElementByCatalogIsNullAndNameEntityIndex _catalogElementByCatalogIsNullAndNameEntityIndex = new CatalogElementByCatalogIsNullAndNameEntityIndex( );
        readonly ElementByElementTypeEntityIndex _elementByElementTypeEntityIndex = new ElementByElementTypeEntityIndex( );
        readonly ElementByElementTypeIsNullEntityIndex _elementByElementTypeIsNullEntityIndex = new ElementByElementTypeIsNullEntityIndex( );
        readonly CountryByNameEntityIndex _countryByNameEntityIndex = new CountryByNameEntityIndex( );
        readonly CountryByCodeEntityIndex _countryByCodeEntityIndex = new CountryByCodeEntityIndex( );
        readonly CountryByAlpha2EntityIndex _countryByAlpha2EntityIndex = new CountryByAlpha2EntityIndex( );
        readonly CountryByAlpha3EntityIndex _countryByAlpha3EntityIndex = new CountryByAlpha3EntityIndex( );
        readonly DateTimeTimeseriesValueByTimeseriesAndTimestampEntityIndex _dateTimeTimeseriesValueByTimeseriesAndTimestampEntityIndex = new DateTimeTimeseriesValueByTimeseriesAndTimestampEntityIndex( );
        readonly DateTimeTimeseriesValueByTimestampEntityIndex _dateTimeTimeseriesValueByTimestampEntityIndex = new DateTimeTimeseriesValueByTimestampEntityIndex( );
        readonly DeviceHostByNameEntityIndex _deviceHostByNameEntityIndex = new DeviceHostByNameEntityIndex( );
        readonly DeviceHostConfigurationByHostAndTimestampEntityIndex _deviceHostConfigurationByHostAndTimestampEntityIndex = new DeviceHostConfigurationByHostAndTimestampEntityIndex( );
        readonly DeviceHostConfigurationByTimestampEntityIndex _deviceHostConfigurationByTimestampEntityIndex = new DeviceHostConfigurationByTimestampEntityIndex( );
        readonly DoubleTimeseriesValueByTimeseriesAndTimestampEntityIndex _doubleTimeseriesValueByTimeseriesAndTimestampEntityIndex = new DoubleTimeseriesValueByTimeseriesAndTimestampEntityIndex( );
        readonly DoubleTimeseriesValueByTimestampEntityIndex _doubleTimeseriesValueByTimestampEntityIndex = new DoubleTimeseriesValueByTimestampEntityIndex( );
        readonly FacilityTypeByNameEntityIndex _facilityTypeByNameEntityIndex = new FacilityTypeByNameEntityIndex( );
        readonly GeoPosition2DTimeseriesValueByTimeseriesAndTimestampEntityIndex _geoPosition2DTimeseriesValueByTimeseriesAndTimestampEntityIndex = new GeoPosition2DTimeseriesValueByTimeseriesAndTimestampEntityIndex( );
        readonly GeoPosition2DTimeseriesValueByTimestampEntityIndex _geoPosition2DTimeseriesValueByTimestampEntityIndex = new GeoPosition2DTimeseriesValueByTimestampEntityIndex( );
        readonly GeoPosition3DTimeseriesValueByTimeseriesAndTimestampEntityIndex _geoPosition3DTimeseriesValueByTimeseriesAndTimestampEntityIndex = new GeoPosition3DTimeseriesValueByTimeseriesAndTimestampEntityIndex( );
        readonly GeoPosition3DTimeseriesValueByTimestampEntityIndex _geoPosition3DTimeseriesValueByTimestampEntityIndex = new GeoPosition3DTimeseriesValueByTimestampEntityIndex( );
        readonly GNSSDeviceCommandByGNSSDeviceAndTimestampEntityIndex _gNSSDeviceCommandByGNSSDeviceAndTimestampEntityIndex = new GNSSDeviceCommandByGNSSDeviceAndTimestampEntityIndex( );
        readonly GNSSDeviceCommandByTimestampEntityIndex _gNSSDeviceCommandByTimestampEntityIndex = new GNSSDeviceCommandByTimestampEntityIndex( );
        readonly GNSSDeviceCommandByReplyEntityIndex _gNSSDeviceCommandByReplyEntityIndex = new GNSSDeviceCommandByReplyEntityIndex( );
        readonly GNSSDeviceCommandByReplyIsNullEntityIndex _gNSSDeviceCommandByReplyIsNullEntityIndex = new GNSSDeviceCommandByReplyIsNullEntityIndex( );
        readonly GNSSDeviceCommandReplyByGNSSDeviceAndTimestampEntityIndex _gNSSDeviceCommandReplyByGNSSDeviceAndTimestampEntityIndex = new GNSSDeviceCommandReplyByGNSSDeviceAndTimestampEntityIndex( );
        readonly GNSSDeviceCommandReplyByTimestampEntityIndex _gNSSDeviceCommandReplyByTimestampEntityIndex = new GNSSDeviceCommandReplyByTimestampEntityIndex( );
        readonly GNSSDeviceCommandReplyByCommandEntityIndex _gNSSDeviceCommandReplyByCommandEntityIndex = new GNSSDeviceCommandReplyByCommandEntityIndex( );
        readonly GNSSDeviceCommandReplyByCommandIsNullEntityIndex _gNSSDeviceCommandReplyByCommandIsNullEntityIndex = new GNSSDeviceCommandReplyByCommandIsNullEntityIndex( );
        readonly GNSSDeviceConfigurationByGNSSDeviceAndTimestampEntityIndex _gNSSDeviceConfigurationByGNSSDeviceAndTimestampEntityIndex = new GNSSDeviceConfigurationByGNSSDeviceAndTimestampEntityIndex( );
        readonly GNSSDeviceConfigurationByTimestampEntityIndex _gNSSDeviceConfigurationByTimestampEntityIndex = new GNSSDeviceConfigurationByTimestampEntityIndex( );
        readonly GuidTimeseriesValueByTimeseriesAndTimestampEntityIndex _guidTimeseriesValueByTimeseriesAndTimestampEntityIndex = new GuidTimeseriesValueByTimeseriesAndTimestampEntityIndex( );
        readonly GuidTimeseriesValueByTimestampEntityIndex _guidTimeseriesValueByTimestampEntityIndex = new GuidTimeseriesValueByTimestampEntityIndex( );
        readonly GyroDeviceCommandByGyroDeviceAndTimestampEntityIndex _gyroDeviceCommandByGyroDeviceAndTimestampEntityIndex = new GyroDeviceCommandByGyroDeviceAndTimestampEntityIndex( );
        readonly GyroDeviceCommandByTimestampEntityIndex _gyroDeviceCommandByTimestampEntityIndex = new GyroDeviceCommandByTimestampEntityIndex( );
        readonly GyroDeviceCommandByReplyEntityIndex _gyroDeviceCommandByReplyEntityIndex = new GyroDeviceCommandByReplyEntityIndex( );
        readonly GyroDeviceCommandByReplyIsNullEntityIndex _gyroDeviceCommandByReplyIsNullEntityIndex = new GyroDeviceCommandByReplyIsNullEntityIndex( );
        readonly GyroDeviceCommandReplyByGyroDeviceAndTimestampEntityIndex _gyroDeviceCommandReplyByGyroDeviceAndTimestampEntityIndex = new GyroDeviceCommandReplyByGyroDeviceAndTimestampEntityIndex( );
        readonly GyroDeviceCommandReplyByTimestampEntityIndex _gyroDeviceCommandReplyByTimestampEntityIndex = new GyroDeviceCommandReplyByTimestampEntityIndex( );
        readonly GyroDeviceCommandReplyByCommandEntityIndex _gyroDeviceCommandReplyByCommandEntityIndex = new GyroDeviceCommandReplyByCommandEntityIndex( );
        readonly GyroDeviceCommandReplyByCommandIsNullEntityIndex _gyroDeviceCommandReplyByCommandIsNullEntityIndex = new GyroDeviceCommandReplyByCommandIsNullEntityIndex( );
        readonly GyroDeviceConfigurationByGyroDeviceAndTimestampEntityIndex _gyroDeviceConfigurationByGyroDeviceAndTimestampEntityIndex = new GyroDeviceConfigurationByGyroDeviceAndTimestampEntityIndex( );
        readonly GyroDeviceConfigurationByTimestampEntityIndex _gyroDeviceConfigurationByTimestampEntityIndex = new GyroDeviceConfigurationByTimestampEntityIndex( );
        readonly CallsignByIdentifierEntityIndex _callsignByIdentifierEntityIndex = new CallsignByIdentifierEntityIndex( );
        readonly InternationalMaritimeOrganizationNumberByIdentifierEntityIndex _internationalMaritimeOrganizationNumberByIdentifierEntityIndex = new InternationalMaritimeOrganizationNumberByIdentifierEntityIndex( );
        readonly MaritimeMobileServiceIdentityByIdentifierEntityIndex _maritimeMobileServiceIdentityByIdentifierEntityIndex = new MaritimeMobileServiceIdentityByIdentifierEntityIndex( );
        readonly NameByTextEntityIndex _nameByTextEntityIndex = new NameByTextEntityIndex( );
        readonly Int16TimeseriesValueByTimeseriesAndTimestampEntityIndex _int16TimeseriesValueByTimeseriesAndTimestampEntityIndex = new Int16TimeseriesValueByTimeseriesAndTimestampEntityIndex( );
        readonly Int16TimeseriesValueByTimestampEntityIndex _int16TimeseriesValueByTimestampEntityIndex = new Int16TimeseriesValueByTimestampEntityIndex( );
        readonly Int32TimeseriesValueByTimeseriesAndTimestampEntityIndex _int32TimeseriesValueByTimeseriesAndTimestampEntityIndex = new Int32TimeseriesValueByTimeseriesAndTimestampEntityIndex( );
        readonly Int32TimeseriesValueByTimestampEntityIndex _int32TimeseriesValueByTimestampEntityIndex = new Int32TimeseriesValueByTimestampEntityIndex( );
        readonly Int64TimeseriesValueByTimeseriesAndTimestampEntityIndex _int64TimeseriesValueByTimeseriesAndTimestampEntityIndex = new Int64TimeseriesValueByTimeseriesAndTimestampEntityIndex( );
        readonly Int64TimeseriesValueByTimestampEntityIndex _int64TimeseriesValueByTimestampEntityIndex = new Int64TimeseriesValueByTimestampEntityIndex( );
        readonly BaseStationByNameEntityIndex _baseStationByNameEntityIndex = new BaseStationByNameEntityIndex( );
        readonly BaseStationByTypeEntityIndex _baseStationByTypeEntityIndex = new BaseStationByTypeEntityIndex( );
        readonly BaseStationByTypeIsNullEntityIndex _baseStationByTypeIsNullEntityIndex = new BaseStationByTypeIsNullEntityIndex( );
        readonly DeviceByHostEntityIndex _deviceByHostEntityIndex = new DeviceByHostEntityIndex( );
        readonly DeviceByNameEntityIndex _deviceByNameEntityIndex = new DeviceByNameEntityIndex( );
        readonly GyroDeviceByGNSSDeviceEntityIndex _gyroDeviceByGNSSDeviceEntityIndex = new GyroDeviceByGNSSDeviceEntityIndex( );
        readonly GyroDeviceByGNSSDeviceIsNullEntityIndex _gyroDeviceByGNSSDeviceIsNullEntityIndex = new GyroDeviceByGNSSDeviceIsNullEntityIndex( );
        readonly RadomeDeviceByRadarEntityIndex _radomeDeviceByRadarEntityIndex = new RadomeDeviceByRadarEntityIndex( );
        readonly RadomeDeviceByRadarIsNullEntityIndex _radomeDeviceByRadarIsNullEntityIndex = new RadomeDeviceByRadarIsNullEntityIndex( );
        readonly RadarDeviceByRadomeEntityIndex _radarDeviceByRadomeEntityIndex = new RadarDeviceByRadomeEntityIndex( );
        readonly RadarDeviceByRadomeIsNullEntityIndex _radarDeviceByRadomeIsNullEntityIndex = new RadarDeviceByRadomeIsNullEntityIndex( );
        readonly RadarDeviceByGNSSDeviceEntityIndex _radarDeviceByGNSSDeviceEntityIndex = new RadarDeviceByGNSSDeviceEntityIndex( );
        readonly RadarDeviceByGNSSDeviceIsNullEntityIndex _radarDeviceByGNSSDeviceIsNullEntityIndex = new RadarDeviceByGNSSDeviceIsNullEntityIndex( );
        readonly WeatherStationDeviceByGyroEntityIndex _weatherStationDeviceByGyroEntityIndex = new WeatherStationDeviceByGyroEntityIndex( );
        readonly WeatherStationDeviceByGyroIsNullEntityIndex _weatherStationDeviceByGyroIsNullEntityIndex = new WeatherStationDeviceByGyroIsNullEntityIndex( );
        readonly FacilityByNameEntityIndex _facilityByNameEntityIndex = new FacilityByNameEntityIndex( );
        readonly FacilityByTypeEntityIndex _facilityByTypeEntityIndex = new FacilityByTypeEntityIndex( );
        readonly FacilityByTypeIsNullEntityIndex _facilityByTypeIsNullEntityIndex = new FacilityByTypeIsNullEntityIndex( );
        readonly AircraftByNameEntityIndex _aircraftByNameEntityIndex = new AircraftByNameEntityIndex( );
        readonly AircraftByTypeEntityIndex _aircraftByTypeEntityIndex = new AircraftByTypeEntityIndex( );
        readonly AircraftByTypeIsNullEntityIndex _aircraftByTypeIsNullEntityIndex = new AircraftByTypeIsNullEntityIndex( );
        readonly AisAidToNavigationByNameEntityIndex _aisAidToNavigationByNameEntityIndex = new AisAidToNavigationByNameEntityIndex( );
        readonly AisAidToNavigationByMMSIEntityIndex _aisAidToNavigationByMMSIEntityIndex = new AisAidToNavigationByMMSIEntityIndex( );
        readonly AisAidToNavigationByMMSIIsNullEntityIndex _aisAidToNavigationByMMSIIsNullEntityIndex = new AisAidToNavigationByMMSIIsNullEntityIndex( );
        readonly VehicleByNameEntityIndex _vehicleByNameEntityIndex = new VehicleByNameEntityIndex( );
        readonly VehicleByTypeEntityIndex _vehicleByTypeEntityIndex = new VehicleByTypeEntityIndex( );
        readonly VehicleByTypeIsNullEntityIndex _vehicleByTypeIsNullEntityIndex = new VehicleByTypeIsNullEntityIndex( );
        readonly VesselByNameEntityIndex _vesselByNameEntityIndex = new VesselByNameEntityIndex( );
        readonly VesselByTypeEntityIndex _vesselByTypeEntityIndex = new VesselByTypeEntityIndex( );
        readonly VesselByTypeIsNullEntityIndex _vesselByTypeIsNullEntityIndex = new VesselByTypeIsNullEntityIndex( );
        readonly ItemIdentityLinkByItemAndStartEntityIndex _itemIdentityLinkByItemAndStartEntityIndex = new ItemIdentityLinkByItemAndStartEntityIndex( );
        readonly ItemIdentityLinkByItemAndEndEntityIndex _itemIdentityLinkByItemAndEndEntityIndex = new ItemIdentityLinkByItemAndEndEntityIndex( );
        readonly ItemIdentityLinkByItemAndEndIsNullEntityIndex _itemIdentityLinkByItemAndEndIsNullEntityIndex = new ItemIdentityLinkByItemAndEndIsNullEntityIndex( );
        readonly ItemIdentityLinkByIdentityAndStartEntityIndex _itemIdentityLinkByIdentityAndStartEntityIndex = new ItemIdentityLinkByIdentityAndStartEntityIndex( );
        readonly ItemIdentityLinkByIdentityAndEndEntityIndex _itemIdentityLinkByIdentityAndEndEntityIndex = new ItemIdentityLinkByIdentityAndEndEntityIndex( );
        readonly ItemIdentityLinkByIdentityAndEndIsNullEntityIndex _itemIdentityLinkByIdentityAndEndIsNullEntityIndex = new ItemIdentityLinkByIdentityAndEndIsNullEntityIndex( );
        readonly ItemIdentityLinkByStartEntityIndex _itemIdentityLinkByStartEntityIndex = new ItemIdentityLinkByStartEntityIndex( );
        readonly ItemIdentityLinkByEndEntityIndex _itemIdentityLinkByEndEntityIndex = new ItemIdentityLinkByEndEntityIndex( );
        readonly ItemIdentityLinkByEndIsNullEntityIndex _itemIdentityLinkByEndIsNullEntityIndex = new ItemIdentityLinkByEndIsNullEntityIndex( );
        readonly ItemParentChildLinkByParentAndTimestampEntityIndex _itemParentChildLinkByParentAndTimestampEntityIndex = new ItemParentChildLinkByParentAndTimestampEntityIndex( );
        readonly ItemParentChildLinkByChildAndTimestampEntityIndex _itemParentChildLinkByChildAndTimestampEntityIndex = new ItemParentChildLinkByChildAndTimestampEntityIndex( );
        readonly ItemParentChildLinkByTimestampEntityIndex _itemParentChildLinkByTimestampEntityIndex = new ItemParentChildLinkByTimestampEntityIndex( );
        readonly LineInputDeviceCommandByLineInputDeviceAndTimestampEntityIndex _lineInputDeviceCommandByLineInputDeviceAndTimestampEntityIndex = new LineInputDeviceCommandByLineInputDeviceAndTimestampEntityIndex( );
        readonly LineInputDeviceCommandByTimestampEntityIndex _lineInputDeviceCommandByTimestampEntityIndex = new LineInputDeviceCommandByTimestampEntityIndex( );
        readonly LineInputDeviceCommandByReplyEntityIndex _lineInputDeviceCommandByReplyEntityIndex = new LineInputDeviceCommandByReplyEntityIndex( );
        readonly LineInputDeviceCommandByReplyIsNullEntityIndex _lineInputDeviceCommandByReplyIsNullEntityIndex = new LineInputDeviceCommandByReplyIsNullEntityIndex( );
        readonly LineInputDeviceCommandReplyByLineInputDeviceAndTimestampEntityIndex _lineInputDeviceCommandReplyByLineInputDeviceAndTimestampEntityIndex = new LineInputDeviceCommandReplyByLineInputDeviceAndTimestampEntityIndex( );
        readonly LineInputDeviceCommandReplyByTimestampEntityIndex _lineInputDeviceCommandReplyByTimestampEntityIndex = new LineInputDeviceCommandReplyByTimestampEntityIndex( );
        readonly LineInputDeviceCommandReplyByCommandEntityIndex _lineInputDeviceCommandReplyByCommandEntityIndex = new LineInputDeviceCommandReplyByCommandEntityIndex( );
        readonly LineInputDeviceCommandReplyByCommandIsNullEntityIndex _lineInputDeviceCommandReplyByCommandIsNullEntityIndex = new LineInputDeviceCommandReplyByCommandIsNullEntityIndex( );
        readonly LineInputDeviceConfigurationByLineInputDeviceAndTimestampEntityIndex _lineInputDeviceConfigurationByLineInputDeviceAndTimestampEntityIndex = new LineInputDeviceConfigurationByLineInputDeviceAndTimestampEntityIndex( );
        readonly LineInputDeviceConfigurationByTimestampEntityIndex _lineInputDeviceConfigurationByTimestampEntityIndex = new LineInputDeviceConfigurationByTimestampEntityIndex( );
        readonly LineInputMessageRoutingByLineInputDeviceAndTypeEntityIndex _lineInputMessageRoutingByLineInputDeviceAndTypeEntityIndex = new LineInputMessageRoutingByLineInputDeviceAndTypeEntityIndex( );
        readonly LineInputMessageRoutingDestinationByRoutingAndListenerEntityIndex _lineInputMessageRoutingDestinationByRoutingAndListenerEntityIndex = new LineInputMessageRoutingDestinationByRoutingAndListenerEntityIndex( );
        readonly LineInputMessageRoutingDestinationByRoutingAndListenerIsNullEntityIndex _lineInputMessageRoutingDestinationByRoutingAndListenerIsNullEntityIndex = new LineInputMessageRoutingDestinationByRoutingAndListenerIsNullEntityIndex( );
        readonly LineInputMessageRoutingDestinationByListenerEntityIndex _lineInputMessageRoutingDestinationByListenerEntityIndex = new LineInputMessageRoutingDestinationByListenerEntityIndex( );
        readonly LineInputMessageRoutingDestinationByListenerIsNullEntityIndex _lineInputMessageRoutingDestinationByListenerIsNullEntityIndex = new LineInputMessageRoutingDestinationByListenerIsNullEntityIndex( );
        readonly LineInputWhiteListEntryByLineInputDeviceHostNameAndPortEntityIndex _lineInputWhiteListEntryByLineInputDeviceHostNameAndPortEntityIndex = new LineInputWhiteListEntryByLineInputDeviceHostNameAndPortEntityIndex( );
        readonly LogApplicationByNameEntityIndex _logApplicationByNameEntityIndex = new LogApplicationByNameEntityIndex( );
        readonly LogApplicationConfigurationByApplicationAndTimestampEntityIndex _logApplicationConfigurationByApplicationAndTimestampEntityIndex = new LogApplicationConfigurationByApplicationAndTimestampEntityIndex( );
        readonly LogApplicationConfigurationByTimestampEntityIndex _logApplicationConfigurationByTimestampEntityIndex = new LogApplicationConfigurationByTimestampEntityIndex( );
        readonly LogHostByComputerNameEntityIndex _logHostByComputerNameEntityIndex = new LogHostByComputerNameEntityIndex( );
        readonly LogHostConfigurationByHostAndTimestampEntityIndex _logHostConfigurationByHostAndTimestampEntityIndex = new LogHostConfigurationByHostAndTimestampEntityIndex( );
        readonly LogHostConfigurationByTimestampEntityIndex _logHostConfigurationByTimestampEntityIndex = new LogHostConfigurationByTimestampEntityIndex( );
        readonly LogLocationByFileNameAndLineNumberEntityIndex _logLocationByFileNameAndLineNumberEntityIndex = new LogLocationByFileNameAndLineNumberEntityIndex( );
        readonly LogProcessByApplicationAndStartedEntityIndex _logProcessByApplicationAndStartedEntityIndex = new LogProcessByApplicationAndStartedEntityIndex( );
        readonly LogProcessByHostAndStartedEntityIndex _logProcessByHostAndStartedEntityIndex = new LogProcessByHostAndStartedEntityIndex( );
        readonly LogProcessByHostIsNullAndStartedEntityIndex _logProcessByHostIsNullAndStartedEntityIndex = new LogProcessByHostIsNullAndStartedEntityIndex( );
        readonly LogProcessByStartedEntityIndex _logProcessByStartedEntityIndex = new LogProcessByStartedEntityIndex( );
        readonly LogRecordByThreadAndTimestampEntityIndex _logRecordByThreadAndTimestampEntityIndex = new LogRecordByThreadAndTimestampEntityIndex( );
        readonly LogRecordByTimestampEntityIndex _logRecordByTimestampEntityIndex = new LogRecordByTimestampEntityIndex( );
        readonly LogRecordByLocationEntityIndex _logRecordByLocationEntityIndex = new LogRecordByLocationEntityIndex( );
        readonly LogThreadByProcessAndStartedEntityIndex _logThreadByProcessAndStartedEntityIndex = new LogThreadByProcessAndStartedEntityIndex( );
        readonly LogThreadByStartedEntityIndex _logThreadByStartedEntityIndex = new LogThreadByStartedEntityIndex( );
        readonly LogTraceEntryByThreadAndEnteredEntityIndex _logTraceEntryByThreadAndEnteredEntityIndex = new LogTraceEntryByThreadAndEnteredEntityIndex( );
        readonly LogTraceEntryByLocationAndEnteredEntityIndex _logTraceEntryByLocationAndEnteredEntityIndex = new LogTraceEntryByLocationAndEnteredEntityIndex( );
        readonly LogTraceEntryByEnteredEntityIndex _logTraceEntryByEnteredEntityIndex = new LogTraceEntryByEnteredEntityIndex( );
        readonly MapElementByItemEntityIndex _mapElementByItemEntityIndex = new MapElementByItemEntityIndex( );
        readonly MapServiceOptionsByTimestampEntityIndex _mapServiceOptionsByTimestampEntityIndex = new MapServiceOptionsByTimestampEntityIndex( );
        readonly MaritimeIdentificationDigitsByCodeEntityIndex _maritimeIdentificationDigitsByCodeEntityIndex = new MaritimeIdentificationDigitsByCodeEntityIndex( );
        readonly MaritimeIdentificationDigitsByCountryEntityIndex _maritimeIdentificationDigitsByCountryEntityIndex = new MaritimeIdentificationDigitsByCountryEntityIndex( );
        readonly MediaProxySessionByServiceAndNameEntityIndex _mediaProxySessionByServiceAndNameEntityIndex = new MediaProxySessionByServiceAndNameEntityIndex( );
        readonly MediaProxySessionFileByProxySessionAndTimestampEntityIndex _mediaProxySessionFileByProxySessionAndTimestampEntityIndex = new MediaProxySessionFileByProxySessionAndTimestampEntityIndex( );
        readonly MediaProxySessionOptionsByProxySessionAndTimestampEntityIndex _mediaProxySessionOptionsByProxySessionAndTimestampEntityIndex = new MediaProxySessionOptionsByProxySessionAndTimestampEntityIndex( );
        readonly MediaServiceOptionsByMediaServiceAndTimestampEntityIndex _mediaServiceOptionsByMediaServiceAndTimestampEntityIndex = new MediaServiceOptionsByMediaServiceAndTimestampEntityIndex( );
        readonly NamespaceElementByNamespaceAndNameEntityIndex _namespaceElementByNamespaceAndNameEntityIndex = new NamespaceElementByNamespaceAndNameEntityIndex( );
        readonly OilSpillByOilSpillDetectorAndTimestampEntityIndex _oilSpillByOilSpillDetectorAndTimestampEntityIndex = new OilSpillByOilSpillDetectorAndTimestampEntityIndex( );
        readonly OilSpillByTimestampEntityIndex _oilSpillByTimestampEntityIndex = new OilSpillByTimestampEntityIndex( );
        readonly OilSpillDetectorCommandByOilSpillDetectorAndTimestampEntityIndex _oilSpillDetectorCommandByOilSpillDetectorAndTimestampEntityIndex = new OilSpillDetectorCommandByOilSpillDetectorAndTimestampEntityIndex( );
        readonly OilSpillDetectorCommandByTimestampEntityIndex _oilSpillDetectorCommandByTimestampEntityIndex = new OilSpillDetectorCommandByTimestampEntityIndex( );
        readonly OilSpillDetectorCommandByReplyEntityIndex _oilSpillDetectorCommandByReplyEntityIndex = new OilSpillDetectorCommandByReplyEntityIndex( );
        readonly OilSpillDetectorCommandByReplyIsNullEntityIndex _oilSpillDetectorCommandByReplyIsNullEntityIndex = new OilSpillDetectorCommandByReplyIsNullEntityIndex( );
        readonly OilSpillDetectorCommandReplyByOilSpillDetectorAndTimestampEntityIndex _oilSpillDetectorCommandReplyByOilSpillDetectorAndTimestampEntityIndex = new OilSpillDetectorCommandReplyByOilSpillDetectorAndTimestampEntityIndex( );
        readonly OilSpillDetectorCommandReplyByTimestampEntityIndex _oilSpillDetectorCommandReplyByTimestampEntityIndex = new OilSpillDetectorCommandReplyByTimestampEntityIndex( );
        readonly OilSpillDetectorCommandReplyByCommandEntityIndex _oilSpillDetectorCommandReplyByCommandEntityIndex = new OilSpillDetectorCommandReplyByCommandEntityIndex( );
        readonly OilSpillDetectorCommandReplyByCommandIsNullEntityIndex _oilSpillDetectorCommandReplyByCommandIsNullEntityIndex = new OilSpillDetectorCommandReplyByCommandIsNullEntityIndex( );
        readonly OilSpillDetectorConfigurationByOilSpillDetectorAndTimestampEntityIndex _oilSpillDetectorConfigurationByOilSpillDetectorAndTimestampEntityIndex = new OilSpillDetectorConfigurationByOilSpillDetectorAndTimestampEntityIndex( );
        readonly OilSpillDetectorConfigurationByTimestampEntityIndex _oilSpillDetectorConfigurationByTimestampEntityIndex = new OilSpillDetectorConfigurationByTimestampEntityIndex( );
        readonly OilSpillDetectorConfigurationByTargetMMSIEntityIndex _oilSpillDetectorConfigurationByTargetMMSIEntityIndex = new OilSpillDetectorConfigurationByTargetMMSIEntityIndex( );
        readonly OilSpillDetectorConfigurationByTargetMMSIIsNullEntityIndex _oilSpillDetectorConfigurationByTargetMMSIIsNullEntityIndex = new OilSpillDetectorConfigurationByTargetMMSIIsNullEntityIndex( );
        readonly Position2DTimeseriesValueByTimeseriesAndTimestampEntityIndex _position2DTimeseriesValueByTimeseriesAndTimestampEntityIndex = new Position2DTimeseriesValueByTimeseriesAndTimestampEntityIndex( );
        readonly Position2DTimeseriesValueByTimestampEntityIndex _position2DTimeseriesValueByTimestampEntityIndex = new Position2DTimeseriesValueByTimestampEntityIndex( );
        readonly Position3DTimeseriesValueByTimeseriesAndTimestampEntityIndex _position3DTimeseriesValueByTimeseriesAndTimestampEntityIndex = new Position3DTimeseriesValueByTimeseriesAndTimestampEntityIndex( );
        readonly Position3DTimeseriesValueByTimestampEntityIndex _position3DTimeseriesValueByTimestampEntityIndex = new Position3DTimeseriesValueByTimestampEntityIndex( );
        readonly PropertyByElementAndDefinitionEntityIndex _propertyByElementAndDefinitionEntityIndex = new PropertyByElementAndDefinitionEntityIndex( );
        readonly PropertyByDefinitionEntityIndex _propertyByDefinitionEntityIndex = new PropertyByDefinitionEntityIndex( );
        readonly ReferencePropertyByValueEntityIndex _referencePropertyByValueEntityIndex = new ReferencePropertyByValueEntityIndex( );
        readonly ReferencePropertyByValueIsNullEntityIndex _referencePropertyByValueIsNullEntityIndex = new ReferencePropertyByValueIsNullEntityIndex( );
        readonly BinaryTimeseriesPropertyByTimeseriesEntityIndex _binaryTimeseriesPropertyByTimeseriesEntityIndex = new BinaryTimeseriesPropertyByTimeseriesEntityIndex( );
        readonly BinaryTimeseriesPropertyByTimeseriesIsNullEntityIndex _binaryTimeseriesPropertyByTimeseriesIsNullEntityIndex = new BinaryTimeseriesPropertyByTimeseriesIsNullEntityIndex( );
        readonly BooleanTimeseriesPropertyByTimeseriesEntityIndex _booleanTimeseriesPropertyByTimeseriesEntityIndex = new BooleanTimeseriesPropertyByTimeseriesEntityIndex( );
        readonly BooleanTimeseriesPropertyByTimeseriesIsNullEntityIndex _booleanTimeseriesPropertyByTimeseriesIsNullEntityIndex = new BooleanTimeseriesPropertyByTimeseriesIsNullEntityIndex( );
        readonly ByteTimeseriesPropertyByTimeseriesEntityIndex _byteTimeseriesPropertyByTimeseriesEntityIndex = new ByteTimeseriesPropertyByTimeseriesEntityIndex( );
        readonly ByteTimeseriesPropertyByTimeseriesIsNullEntityIndex _byteTimeseriesPropertyByTimeseriesIsNullEntityIndex = new ByteTimeseriesPropertyByTimeseriesIsNullEntityIndex( );
        readonly DateTimeTimeseriesPropertyByTimeseriesEntityIndex _dateTimeTimeseriesPropertyByTimeseriesEntityIndex = new DateTimeTimeseriesPropertyByTimeseriesEntityIndex( );
        readonly DateTimeTimeseriesPropertyByTimeseriesIsNullEntityIndex _dateTimeTimeseriesPropertyByTimeseriesIsNullEntityIndex = new DateTimeTimeseriesPropertyByTimeseriesIsNullEntityIndex( );
        readonly DoubleTimeseriesPropertyByTimeseriesEntityIndex _doubleTimeseriesPropertyByTimeseriesEntityIndex = new DoubleTimeseriesPropertyByTimeseriesEntityIndex( );
        readonly DoubleTimeseriesPropertyByTimeseriesIsNullEntityIndex _doubleTimeseriesPropertyByTimeseriesIsNullEntityIndex = new DoubleTimeseriesPropertyByTimeseriesIsNullEntityIndex( );
        readonly GuidTimeseriesPropertyByTimeseriesEntityIndex _guidTimeseriesPropertyByTimeseriesEntityIndex = new GuidTimeseriesPropertyByTimeseriesEntityIndex( );
        readonly GuidTimeseriesPropertyByTimeseriesIsNullEntityIndex _guidTimeseriesPropertyByTimeseriesIsNullEntityIndex = new GuidTimeseriesPropertyByTimeseriesIsNullEntityIndex( );
        readonly Int16TimeseriesPropertyByTimeseriesEntityIndex _int16TimeseriesPropertyByTimeseriesEntityIndex = new Int16TimeseriesPropertyByTimeseriesEntityIndex( );
        readonly Int16TimeseriesPropertyByTimeseriesIsNullEntityIndex _int16TimeseriesPropertyByTimeseriesIsNullEntityIndex = new Int16TimeseriesPropertyByTimeseriesIsNullEntityIndex( );
        readonly Int32TimeseriesPropertyByTimeseriesEntityIndex _int32TimeseriesPropertyByTimeseriesEntityIndex = new Int32TimeseriesPropertyByTimeseriesEntityIndex( );
        readonly Int32TimeseriesPropertyByTimeseriesIsNullEntityIndex _int32TimeseriesPropertyByTimeseriesIsNullEntityIndex = new Int32TimeseriesPropertyByTimeseriesIsNullEntityIndex( );
        readonly Int64TimeseriesPropertyByTimeseriesEntityIndex _int64TimeseriesPropertyByTimeseriesEntityIndex = new Int64TimeseriesPropertyByTimeseriesEntityIndex( );
        readonly Int64TimeseriesPropertyByTimeseriesIsNullEntityIndex _int64TimeseriesPropertyByTimeseriesIsNullEntityIndex = new Int64TimeseriesPropertyByTimeseriesIsNullEntityIndex( );
        readonly ReferenceTimeseriesPropertyByTimeseriesEntityIndex _referenceTimeseriesPropertyByTimeseriesEntityIndex = new ReferenceTimeseriesPropertyByTimeseriesEntityIndex( );
        readonly ReferenceTimeseriesPropertyByTimeseriesIsNullEntityIndex _referenceTimeseriesPropertyByTimeseriesIsNullEntityIndex = new ReferenceTimeseriesPropertyByTimeseriesIsNullEntityIndex( );
        readonly SByteTimeseriesPropertyByTimeseriesEntityIndex _sByteTimeseriesPropertyByTimeseriesEntityIndex = new SByteTimeseriesPropertyByTimeseriesEntityIndex( );
        readonly SByteTimeseriesPropertyByTimeseriesIsNullEntityIndex _sByteTimeseriesPropertyByTimeseriesIsNullEntityIndex = new SByteTimeseriesPropertyByTimeseriesIsNullEntityIndex( );
        readonly SingleTimeseriesPropertyByTimeseriesEntityIndex _singleTimeseriesPropertyByTimeseriesEntityIndex = new SingleTimeseriesPropertyByTimeseriesEntityIndex( );
        readonly SingleTimeseriesPropertyByTimeseriesIsNullEntityIndex _singleTimeseriesPropertyByTimeseriesIsNullEntityIndex = new SingleTimeseriesPropertyByTimeseriesIsNullEntityIndex( );
        readonly StringTimeseriesPropertyByTimeseriesEntityIndex _stringTimeseriesPropertyByTimeseriesEntityIndex = new StringTimeseriesPropertyByTimeseriesEntityIndex( );
        readonly StringTimeseriesPropertyByTimeseriesIsNullEntityIndex _stringTimeseriesPropertyByTimeseriesIsNullEntityIndex = new StringTimeseriesPropertyByTimeseriesIsNullEntityIndex( );
        readonly TimeSpanTimeseriesPropertyByTimeseriesEntityIndex _timeSpanTimeseriesPropertyByTimeseriesEntityIndex = new TimeSpanTimeseriesPropertyByTimeseriesEntityIndex( );
        readonly TimeSpanTimeseriesPropertyByTimeseriesIsNullEntityIndex _timeSpanTimeseriesPropertyByTimeseriesIsNullEntityIndex = new TimeSpanTimeseriesPropertyByTimeseriesIsNullEntityIndex( );
        readonly UInt16TimeseriesPropertyByTimeseriesEntityIndex _uInt16TimeseriesPropertyByTimeseriesEntityIndex = new UInt16TimeseriesPropertyByTimeseriesEntityIndex( );
        readonly UInt16TimeseriesPropertyByTimeseriesIsNullEntityIndex _uInt16TimeseriesPropertyByTimeseriesIsNullEntityIndex = new UInt16TimeseriesPropertyByTimeseriesIsNullEntityIndex( );
        readonly UInt32TimeseriesPropertyByTimeseriesEntityIndex _uInt32TimeseriesPropertyByTimeseriesEntityIndex = new UInt32TimeseriesPropertyByTimeseriesEntityIndex( );
        readonly UInt32TimeseriesPropertyByTimeseriesIsNullEntityIndex _uInt32TimeseriesPropertyByTimeseriesIsNullEntityIndex = new UInt32TimeseriesPropertyByTimeseriesIsNullEntityIndex( );
        readonly UInt64TimeseriesPropertyByTimeseriesEntityIndex _uInt64TimeseriesPropertyByTimeseriesEntityIndex = new UInt64TimeseriesPropertyByTimeseriesEntityIndex( );
        readonly UInt64TimeseriesPropertyByTimeseriesIsNullEntityIndex _uInt64TimeseriesPropertyByTimeseriesIsNullEntityIndex = new UInt64TimeseriesPropertyByTimeseriesIsNullEntityIndex( );
        readonly PropertyDefinitionByElementTypeAndNameEntityIndex _propertyDefinitionByElementTypeAndNameEntityIndex = new PropertyDefinitionByElementTypeAndNameEntityIndex( );
        readonly ReferencePropertyDefinitionByDefaultValueEntityIndex _referencePropertyDefinitionByDefaultValueEntityIndex = new ReferencePropertyDefinitionByDefaultValueEntityIndex( );
        readonly ReferencePropertyDefinitionByDefaultValueIsNullEntityIndex _referencePropertyDefinitionByDefaultValueIsNullEntityIndex = new ReferencePropertyDefinitionByDefaultValueIsNullEntityIndex( );
        readonly ReferencePropertyDefinitionByReferencedElementTypeEntityIndex _referencePropertyDefinitionByReferencedElementTypeEntityIndex = new ReferencePropertyDefinitionByReferencedElementTypeEntityIndex( );
        readonly ReferencePropertyDefinitionByReferencedElementTypeIsNullEntityIndex _referencePropertyDefinitionByReferencedElementTypeIsNullEntityIndex = new ReferencePropertyDefinitionByReferencedElementTypeIsNullEntityIndex( );
        readonly ReferenceTimeseriesPropertyDefinitionByReferencedElementTypeEntityIndex _referenceTimeseriesPropertyDefinitionByReferencedElementTypeEntityIndex = new ReferenceTimeseriesPropertyDefinitionByReferencedElementTypeEntityIndex( );
        readonly ReferenceTimeseriesPropertyDefinitionByReferencedElementTypeIsNullEntityIndex _referenceTimeseriesPropertyDefinitionByReferencedElementTypeIsNullEntityIndex = new ReferenceTimeseriesPropertyDefinitionByReferencedElementTypeIsNullEntityIndex( );
        readonly RadarAlarmStatusByRadarAndTimestampEntityIndex _radarAlarmStatusByRadarAndTimestampEntityIndex = new RadarAlarmStatusByRadarAndTimestampEntityIndex( );
        readonly RadarAlarmStatusByTimestampEntityIndex _radarAlarmStatusByTimestampEntityIndex = new RadarAlarmStatusByTimestampEntityIndex( );
        readonly RadarCommandByRadarAndTimestampEntityIndex _radarCommandByRadarAndTimestampEntityIndex = new RadarCommandByRadarAndTimestampEntityIndex( );
        readonly RadarCommandByTimestampEntityIndex _radarCommandByTimestampEntityIndex = new RadarCommandByTimestampEntityIndex( );
        readonly RadarCommandByReplyEntityIndex _radarCommandByReplyEntityIndex = new RadarCommandByReplyEntityIndex( );
        readonly RadarCommandByReplyIsNullEntityIndex _radarCommandByReplyIsNullEntityIndex = new RadarCommandByReplyIsNullEntityIndex( );
        readonly RadarCommandReplyByRadarAndTimestampEntityIndex _radarCommandReplyByRadarAndTimestampEntityIndex = new RadarCommandReplyByRadarAndTimestampEntityIndex( );
        readonly RadarCommandReplyByTimestampEntityIndex _radarCommandReplyByTimestampEntityIndex = new RadarCommandReplyByTimestampEntityIndex( );
        readonly RadarCommandReplyByCommandEntityIndex _radarCommandReplyByCommandEntityIndex = new RadarCommandReplyByCommandEntityIndex( );
        readonly RadarCommandReplyByCommandIsNullEntityIndex _radarCommandReplyByCommandIsNullEntityIndex = new RadarCommandReplyByCommandIsNullEntityIndex( );
        readonly RadarConfigurationByRadarAndTimestampEntityIndex _radarConfigurationByRadarAndTimestampEntityIndex = new RadarConfigurationByRadarAndTimestampEntityIndex( );
        readonly RadarConfigurationByTimestampEntityIndex _radarConfigurationByTimestampEntityIndex = new RadarConfigurationByTimestampEntityIndex( );
        readonly RadarImageByRadarAndTimestampEntityIndex _radarImageByRadarAndTimestampEntityIndex = new RadarImageByRadarAndTimestampEntityIndex( );
        readonly RadarImageByTimestampEntityIndex _radarImageByTimestampEntityIndex = new RadarImageByTimestampEntityIndex( );
        readonly RadarRawTrackTableByRadarAndTimestampEntityIndex _radarRawTrackTableByRadarAndTimestampEntityIndex = new RadarRawTrackTableByRadarAndTimestampEntityIndex( );
        readonly RadarRawTrackTableByTimestampEntityIndex _radarRawTrackTableByTimestampEntityIndex = new RadarRawTrackTableByTimestampEntityIndex( );
        readonly RadarStatusByRadarAndTimestampEntityIndex _radarStatusByRadarAndTimestampEntityIndex = new RadarStatusByRadarAndTimestampEntityIndex( );
        readonly RadarStatusByTimestampEntityIndex _radarStatusByTimestampEntityIndex = new RadarStatusByTimestampEntityIndex( );
        readonly RadioCommandByRadioAndTimestampEntityIndex _radioCommandByRadioAndTimestampEntityIndex = new RadioCommandByRadioAndTimestampEntityIndex( );
        readonly RadioCommandByTimestampEntityIndex _radioCommandByTimestampEntityIndex = new RadioCommandByTimestampEntityIndex( );
        readonly RadioCommandByReplyEntityIndex _radioCommandByReplyEntityIndex = new RadioCommandByReplyEntityIndex( );
        readonly RadioCommandByReplyIsNullEntityIndex _radioCommandByReplyIsNullEntityIndex = new RadioCommandByReplyIsNullEntityIndex( );
        readonly RadioCommandReplyByRadioAndTimestampEntityIndex _radioCommandReplyByRadioAndTimestampEntityIndex = new RadioCommandReplyByRadioAndTimestampEntityIndex( );
        readonly RadioCommandReplyByTimestampEntityIndex _radioCommandReplyByTimestampEntityIndex = new RadioCommandReplyByTimestampEntityIndex( );
        readonly RadioCommandReplyByCommandEntityIndex _radioCommandReplyByCommandEntityIndex = new RadioCommandReplyByCommandEntityIndex( );
        readonly RadioCommandReplyByCommandIsNullEntityIndex _radioCommandReplyByCommandIsNullEntityIndex = new RadioCommandReplyByCommandIsNullEntityIndex( );
        readonly RadioConfigurationByRadioAndTimestampEntityIndex _radioConfigurationByRadioAndTimestampEntityIndex = new RadioConfigurationByRadioAndTimestampEntityIndex( );
        readonly RadioConfigurationByTimestampEntityIndex _radioConfigurationByTimestampEntityIndex = new RadioConfigurationByTimestampEntityIndex( );
        readonly RadomeCommandByRadomeAndTimestampEntityIndex _radomeCommandByRadomeAndTimestampEntityIndex = new RadomeCommandByRadomeAndTimestampEntityIndex( );
        readonly RadomeCommandByTimestampEntityIndex _radomeCommandByTimestampEntityIndex = new RadomeCommandByTimestampEntityIndex( );
        readonly RadomeCommandByReplyEntityIndex _radomeCommandByReplyEntityIndex = new RadomeCommandByReplyEntityIndex( );
        readonly RadomeCommandByReplyIsNullEntityIndex _radomeCommandByReplyIsNullEntityIndex = new RadomeCommandByReplyIsNullEntityIndex( );
        readonly RadomeCommandReplyByRadomeAndTimestampEntityIndex _radomeCommandReplyByRadomeAndTimestampEntityIndex = new RadomeCommandReplyByRadomeAndTimestampEntityIndex( );
        readonly RadomeCommandReplyByTimestampEntityIndex _radomeCommandReplyByTimestampEntityIndex = new RadomeCommandReplyByTimestampEntityIndex( );
        readonly RadomeCommandReplyByCommandEntityIndex _radomeCommandReplyByCommandEntityIndex = new RadomeCommandReplyByCommandEntityIndex( );
        readonly RadomeCommandReplyByCommandIsNullEntityIndex _radomeCommandReplyByCommandIsNullEntityIndex = new RadomeCommandReplyByCommandIsNullEntityIndex( );
        readonly RadomeConfigurationByRadomeAndTimestampEntityIndex _radomeConfigurationByRadomeAndTimestampEntityIndex = new RadomeConfigurationByRadomeAndTimestampEntityIndex( );
        readonly RadomeConfigurationByTimestampEntityIndex _radomeConfigurationByTimestampEntityIndex = new RadomeConfigurationByTimestampEntityIndex( );
        readonly ReferenceTimeseriesValueByTimeseriesAndTimestampEntityIndex _referenceTimeseriesValueByTimeseriesAndTimestampEntityIndex = new ReferenceTimeseriesValueByTimeseriesAndTimestampEntityIndex( );
        readonly ReferenceTimeseriesValueByTimestampEntityIndex _referenceTimeseriesValueByTimestampEntityIndex = new ReferenceTimeseriesValueByTimestampEntityIndex( );
        readonly ReferenceTimeseriesValueByValueEntityIndex _referenceTimeseriesValueByValueEntityIndex = new ReferenceTimeseriesValueByValueEntityIndex( );
        readonly SByteTimeseriesValueByTimeseriesAndTimestampEntityIndex _sByteTimeseriesValueByTimeseriesAndTimestampEntityIndex = new SByteTimeseriesValueByTimeseriesAndTimestampEntityIndex( );
        readonly SByteTimeseriesValueByTimestampEntityIndex _sByteTimeseriesValueByTimestampEntityIndex = new SByteTimeseriesValueByTimestampEntityIndex( );
        readonly SecurityDomainByNameEntityIndex _securityDomainByNameEntityIndex = new SecurityDomainByNameEntityIndex( );
        readonly SecurityIdentifierByDomainAndIdentityEntityIndex _securityIdentifierByDomainAndIdentityEntityIndex = new SecurityIdentifierByDomainAndIdentityEntityIndex( );
        readonly SecurityRoleByNameEntityIndex _securityRoleByNameEntityIndex = new SecurityRoleByNameEntityIndex( );
        readonly SecurityIdentifierRoleLinkByMemberAndStartEntityIndex _securityIdentifierRoleLinkByMemberAndStartEntityIndex = new SecurityIdentifierRoleLinkByMemberAndStartEntityIndex( );
        readonly SecurityIdentifierRoleLinkByRoleAndStartEntityIndex _securityIdentifierRoleLinkByRoleAndStartEntityIndex = new SecurityIdentifierRoleLinkByRoleAndStartEntityIndex( );
        readonly SecurityIdentifierRoleLinkByStartEntityIndex _securityIdentifierRoleLinkByStartEntityIndex = new SecurityIdentifierRoleLinkByStartEntityIndex( );
        readonly SecurityLoginSessionByLoginAndFromTimeEntityIndex _securityLoginSessionByLoginAndFromTimeEntityIndex = new SecurityLoginSessionByLoginAndFromTimeEntityIndex( );
        readonly SecurityLoginSessionByFromTimeEntityIndex _securityLoginSessionByFromTimeEntityIndex = new SecurityLoginSessionByFromTimeEntityIndex( );
        readonly SecurityPermissionByIdentifierTypeCodeAndTimestampEntityIndex _securityPermissionByIdentifierTypeCodeAndTimestampEntityIndex = new SecurityPermissionByIdentifierTypeCodeAndTimestampEntityIndex( );
        readonly SecurityPermissionByTimestampEntityIndex _securityPermissionByTimestampEntityIndex = new SecurityPermissionByTimestampEntityIndex( );
        readonly SingleTimeseriesValueByTimeseriesAndTimestampEntityIndex _singleTimeseriesValueByTimeseriesAndTimestampEntityIndex = new SingleTimeseriesValueByTimeseriesAndTimestampEntityIndex( );
        readonly SingleTimeseriesValueByTimestampEntityIndex _singleTimeseriesValueByTimestampEntityIndex = new SingleTimeseriesValueByTimestampEntityIndex( );
        readonly StringTimeseriesValueByTimeseriesAndTimestampEntityIndex _stringTimeseriesValueByTimeseriesAndTimestampEntityIndex = new StringTimeseriesValueByTimeseriesAndTimestampEntityIndex( );
        readonly StringTimeseriesValueByTimestampEntityIndex _stringTimeseriesValueByTimestampEntityIndex = new StringTimeseriesValueByTimestampEntityIndex( );
        readonly TimeseriesCatalogElementByCatalogAndNameEntityIndex _timeseriesCatalogElementByCatalogAndNameEntityIndex = new TimeseriesCatalogElementByCatalogAndNameEntityIndex( );
        readonly TimeseriesCatalogElementByCatalogIsNullAndNameEntityIndex _timeseriesCatalogElementByCatalogIsNullAndNameEntityIndex = new TimeseriesCatalogElementByCatalogIsNullAndNameEntityIndex( );
        readonly AisAidToNavigationOffPositionTimeseriesByAidToNavigationEntityIndex _aisAidToNavigationOffPositionTimeseriesByAidToNavigationEntityIndex = new AisAidToNavigationOffPositionTimeseriesByAidToNavigationEntityIndex( );
        readonly AisAidToNavigationOffPositionTimeseriesByAidToNavigationIsNullEntityIndex _aisAidToNavigationOffPositionTimeseriesByAidToNavigationIsNullEntityIndex = new AisAidToNavigationOffPositionTimeseriesByAidToNavigationIsNullEntityIndex( );
        readonly GyroCourseTimeseriesByGyroDeviceEntityIndex _gyroCourseTimeseriesByGyroDeviceEntityIndex = new GyroCourseTimeseriesByGyroDeviceEntityIndex( );
        readonly GyroCourseTimeseriesByGyroDeviceIsNullEntityIndex _gyroCourseTimeseriesByGyroDeviceIsNullEntityIndex = new GyroCourseTimeseriesByGyroDeviceIsNullEntityIndex( );
        readonly GyroHeadingMagneticNorthTimeseriesByGyroDeviceEntityIndex _gyroHeadingMagneticNorthTimeseriesByGyroDeviceEntityIndex = new GyroHeadingMagneticNorthTimeseriesByGyroDeviceEntityIndex( );
        readonly GyroHeadingMagneticNorthTimeseriesByGyroDeviceIsNullEntityIndex _gyroHeadingMagneticNorthTimeseriesByGyroDeviceIsNullEntityIndex = new GyroHeadingMagneticNorthTimeseriesByGyroDeviceIsNullEntityIndex( );
        readonly GyroHeadingTrueNorthTimeseriesByGyroDeviceEntityIndex _gyroHeadingTrueNorthTimeseriesByGyroDeviceEntityIndex = new GyroHeadingTrueNorthTimeseriesByGyroDeviceEntityIndex( );
        readonly GyroHeadingTrueNorthTimeseriesByGyroDeviceIsNullEntityIndex _gyroHeadingTrueNorthTimeseriesByGyroDeviceIsNullEntityIndex = new GyroHeadingTrueNorthTimeseriesByGyroDeviceIsNullEntityIndex( );
        readonly GyroPitchTimeseriesByGyroDeviceEntityIndex _gyroPitchTimeseriesByGyroDeviceEntityIndex = new GyroPitchTimeseriesByGyroDeviceEntityIndex( );
        readonly GyroPitchTimeseriesByGyroDeviceIsNullEntityIndex _gyroPitchTimeseriesByGyroDeviceIsNullEntityIndex = new GyroPitchTimeseriesByGyroDeviceIsNullEntityIndex( );
        readonly GyroRateOfTurnTimeseriesByGyroDeviceEntityIndex _gyroRateOfTurnTimeseriesByGyroDeviceEntityIndex = new GyroRateOfTurnTimeseriesByGyroDeviceEntityIndex( );
        readonly GyroRateOfTurnTimeseriesByGyroDeviceIsNullEntityIndex _gyroRateOfTurnTimeseriesByGyroDeviceIsNullEntityIndex = new GyroRateOfTurnTimeseriesByGyroDeviceIsNullEntityIndex( );
        readonly GyroRollTimeseriesByGyroDeviceEntityIndex _gyroRollTimeseriesByGyroDeviceEntityIndex = new GyroRollTimeseriesByGyroDeviceEntityIndex( );
        readonly GyroRollTimeseriesByGyroDeviceIsNullEntityIndex _gyroRollTimeseriesByGyroDeviceIsNullEntityIndex = new GyroRollTimeseriesByGyroDeviceIsNullEntityIndex( );
        readonly GyroSpeedTimeseriesByGyroDeviceEntityIndex _gyroSpeedTimeseriesByGyroDeviceEntityIndex = new GyroSpeedTimeseriesByGyroDeviceEntityIndex( );
        readonly GyroSpeedTimeseriesByGyroDeviceIsNullEntityIndex _gyroSpeedTimeseriesByGyroDeviceIsNullEntityIndex = new GyroSpeedTimeseriesByGyroDeviceIsNullEntityIndex( );
        readonly WeatherStationAbsoluteHumidityTimeseriesByWeatherStationEntityIndex _weatherStationAbsoluteHumidityTimeseriesByWeatherStationEntityIndex = new WeatherStationAbsoluteHumidityTimeseriesByWeatherStationEntityIndex( );
        readonly WeatherStationAbsoluteHumidityTimeseriesByWeatherStationIsNullEntityIndex _weatherStationAbsoluteHumidityTimeseriesByWeatherStationIsNullEntityIndex = new WeatherStationAbsoluteHumidityTimeseriesByWeatherStationIsNullEntityIndex( );
        readonly WeatherStationAirTemperatureTimeseriesByWeatherStationEntityIndex _weatherStationAirTemperatureTimeseriesByWeatherStationEntityIndex = new WeatherStationAirTemperatureTimeseriesByWeatherStationEntityIndex( );
        readonly WeatherStationAirTemperatureTimeseriesByWeatherStationIsNullEntityIndex _weatherStationAirTemperatureTimeseriesByWeatherStationIsNullEntityIndex = new WeatherStationAirTemperatureTimeseriesByWeatherStationIsNullEntityIndex( );
        readonly WeatherStationBarometricPressureTimeseriesByWeatherStationEntityIndex _weatherStationBarometricPressureTimeseriesByWeatherStationEntityIndex = new WeatherStationBarometricPressureTimeseriesByWeatherStationEntityIndex( );
        readonly WeatherStationBarometricPressureTimeseriesByWeatherStationIsNullEntityIndex _weatherStationBarometricPressureTimeseriesByWeatherStationIsNullEntityIndex = new WeatherStationBarometricPressureTimeseriesByWeatherStationIsNullEntityIndex( );
        readonly WeatherStationDewPointTimeseriesByWeatherStationEntityIndex _weatherStationDewPointTimeseriesByWeatherStationEntityIndex = new WeatherStationDewPointTimeseriesByWeatherStationEntityIndex( );
        readonly WeatherStationDewPointTimeseriesByWeatherStationIsNullEntityIndex _weatherStationDewPointTimeseriesByWeatherStationIsNullEntityIndex = new WeatherStationDewPointTimeseriesByWeatherStationIsNullEntityIndex( );
        readonly WeatherStationRelativeHumidityTimeseriesByWeatherStationEntityIndex _weatherStationRelativeHumidityTimeseriesByWeatherStationEntityIndex = new WeatherStationRelativeHumidityTimeseriesByWeatherStationEntityIndex( );
        readonly WeatherStationRelativeHumidityTimeseriesByWeatherStationIsNullEntityIndex _weatherStationRelativeHumidityTimeseriesByWeatherStationIsNullEntityIndex = new WeatherStationRelativeHumidityTimeseriesByWeatherStationIsNullEntityIndex( );
        readonly WeatherStationWaterTemperatureTimeseriesByWeatherStationEntityIndex _weatherStationWaterTemperatureTimeseriesByWeatherStationEntityIndex = new WeatherStationWaterTemperatureTimeseriesByWeatherStationEntityIndex( );
        readonly WeatherStationWaterTemperatureTimeseriesByWeatherStationIsNullEntityIndex _weatherStationWaterTemperatureTimeseriesByWeatherStationIsNullEntityIndex = new WeatherStationWaterTemperatureTimeseriesByWeatherStationIsNullEntityIndex( );
        readonly WeatherStationWindDirectionTimeseriesByWeatherStationEntityIndex _weatherStationWindDirectionTimeseriesByWeatherStationEntityIndex = new WeatherStationWindDirectionTimeseriesByWeatherStationEntityIndex( );
        readonly WeatherStationWindDirectionTimeseriesByWeatherStationIsNullEntityIndex _weatherStationWindDirectionTimeseriesByWeatherStationIsNullEntityIndex = new WeatherStationWindDirectionTimeseriesByWeatherStationIsNullEntityIndex( );
        readonly WeatherStationWindSpeedTimeseriesByWeatherStationEntityIndex _weatherStationWindSpeedTimeseriesByWeatherStationEntityIndex = new WeatherStationWindSpeedTimeseriesByWeatherStationEntityIndex( );
        readonly WeatherStationWindSpeedTimeseriesByWeatherStationIsNullEntityIndex _weatherStationWindSpeedTimeseriesByWeatherStationIsNullEntityIndex = new WeatherStationWindSpeedTimeseriesByWeatherStationIsNullEntityIndex( );
        readonly TimeSpanTimeseriesValueByTimeseriesAndTimestampEntityIndex _timeSpanTimeseriesValueByTimeseriesAndTimestampEntityIndex = new TimeSpanTimeseriesValueByTimeseriesAndTimestampEntityIndex( );
        readonly TimeSpanTimeseriesValueByTimestampEntityIndex _timeSpanTimeseriesValueByTimestampEntityIndex = new TimeSpanTimeseriesValueByTimestampEntityIndex( );
        readonly TrackableItemTrackLinkByItemAndStartEntityIndex _trackableItemTrackLinkByItemAndStartEntityIndex = new TrackableItemTrackLinkByItemAndStartEntityIndex( );
        readonly TrackableItemTrackLinkByItemAndEndEntityIndex _trackableItemTrackLinkByItemAndEndEntityIndex = new TrackableItemTrackLinkByItemAndEndEntityIndex( );
        readonly TrackableItemTrackLinkByItemAndEndIsNullEntityIndex _trackableItemTrackLinkByItemAndEndIsNullEntityIndex = new TrackableItemTrackLinkByItemAndEndIsNullEntityIndex( );
        readonly TrackableItemTrackLinkByTrackAndStartEntityIndex _trackableItemTrackLinkByTrackAndStartEntityIndex = new TrackableItemTrackLinkByTrackAndStartEntityIndex( );
        readonly TrackableItemTrackLinkByTrackAndEndEntityIndex _trackableItemTrackLinkByTrackAndEndEntityIndex = new TrackableItemTrackLinkByTrackAndEndEntityIndex( );
        readonly TrackableItemTrackLinkByTrackAndEndIsNullEntityIndex _trackableItemTrackLinkByTrackAndEndIsNullEntityIndex = new TrackableItemTrackLinkByTrackAndEndIsNullEntityIndex( );
        readonly TrackableItemTrackLinkByStartEntityIndex _trackableItemTrackLinkByStartEntityIndex = new TrackableItemTrackLinkByStartEntityIndex( );
        readonly TrackBaseByTrackerTrackNumberAndTimestampEntityIndex _trackBaseByTrackerTrackNumberAndTimestampEntityIndex = new TrackBaseByTrackerTrackNumberAndTimestampEntityIndex( );
        readonly TrackBaseByTrackerAndTimestampEntityIndex _trackBaseByTrackerAndTimestampEntityIndex = new TrackBaseByTrackerAndTimestampEntityIndex( );
        readonly TrackBaseByTrackNumberEntityIndex _trackBaseByTrackNumberEntityIndex = new TrackBaseByTrackNumberEntityIndex( );
        readonly TrackBaseByTimestampEntityIndex _trackBaseByTimestampEntityIndex = new TrackBaseByTimestampEntityIndex( );
        readonly TrackerFilterParametersByTrackerAndNameEntityIndex _trackerFilterParametersByTrackerAndNameEntityIndex = new TrackerFilterParametersByTrackerAndNameEntityIndex( );
        readonly TrackerFilterParametersConfigurationByParametersAndTimestampEntityIndex _trackerFilterParametersConfigurationByParametersAndTimestampEntityIndex = new TrackerFilterParametersConfigurationByParametersAndTimestampEntityIndex( );
        readonly TrackerFilterParametersConfigurationByTimestampEntityIndex _trackerFilterParametersConfigurationByTimestampEntityIndex = new TrackerFilterParametersConfigurationByTimestampEntityIndex( );
        readonly TrackingServiceOptionsByTimestampEntityIndex _trackingServiceOptionsByTimestampEntityIndex = new TrackingServiceOptionsByTimestampEntityIndex( );
        readonly TrackLinkByPrimaryAndStartEntityIndex _trackLinkByPrimaryAndStartEntityIndex = new TrackLinkByPrimaryAndStartEntityIndex( );
        readonly TrackLinkBySecondaryAndStartEntityIndex _trackLinkBySecondaryAndStartEntityIndex = new TrackLinkBySecondaryAndStartEntityIndex( );
        readonly TrackLinkByStartEntityIndex _trackLinkByStartEntityIndex = new TrackLinkByStartEntityIndex( );
        readonly TrackValueByTrackAndTimestampEntityIndex _trackValueByTrackAndTimestampEntityIndex = new TrackValueByTrackAndTimestampEntityIndex( );
        readonly TrackValueByTimestampEntityIndex _trackValueByTimestampEntityIndex = new TrackValueByTimestampEntityIndex( );
        readonly TrackValue3DByTrackAndTimestampEntityIndex _trackValue3DByTrackAndTimestampEntityIndex = new TrackValue3DByTrackAndTimestampEntityIndex( );
        readonly TrackValue3DByTimestampEntityIndex _trackValue3DByTimestampEntityIndex = new TrackValue3DByTimestampEntityIndex( );
        readonly UInt16TimeseriesValueByTimeseriesAndTimestampEntityIndex _uInt16TimeseriesValueByTimeseriesAndTimestampEntityIndex = new UInt16TimeseriesValueByTimeseriesAndTimestampEntityIndex( );
        readonly UInt16TimeseriesValueByTimestampEntityIndex _uInt16TimeseriesValueByTimestampEntityIndex = new UInt16TimeseriesValueByTimestampEntityIndex( );
        readonly UInt32TimeseriesValueByTimeseriesAndTimestampEntityIndex _uInt32TimeseriesValueByTimeseriesAndTimestampEntityIndex = new UInt32TimeseriesValueByTimeseriesAndTimestampEntityIndex( );
        readonly UInt32TimeseriesValueByTimestampEntityIndex _uInt32TimeseriesValueByTimestampEntityIndex = new UInt32TimeseriesValueByTimestampEntityIndex( );
        readonly UInt64TimeseriesValueByTimeseriesAndTimestampEntityIndex _uInt64TimeseriesValueByTimeseriesAndTimestampEntityIndex = new UInt64TimeseriesValueByTimeseriesAndTimestampEntityIndex( );
        readonly UInt64TimeseriesValueByTimestampEntityIndex _uInt64TimeseriesValueByTimestampEntityIndex = new UInt64TimeseriesValueByTimestampEntityIndex( );
        readonly VehicleTypeByNameEntityIndex _vehicleTypeByNameEntityIndex = new VehicleTypeByNameEntityIndex( );
        readonly VesselTypeByNameEntityIndex _vesselTypeByNameEntityIndex = new VesselTypeByNameEntityIndex( );
        readonly VesselTypeByCodeEntityIndex _vesselTypeByCodeEntityIndex = new VesselTypeByCodeEntityIndex( );
        readonly ViewByNameEntityIndex _viewByNameEntityIndex = new ViewByNameEntityIndex( );
        readonly ViewCameraLinkByViewAndStartEntityIndex _viewCameraLinkByViewAndStartEntityIndex = new ViewCameraLinkByViewAndStartEntityIndex( );
        readonly ViewCameraLinkByCameraAndStartEntityIndex _viewCameraLinkByCameraAndStartEntityIndex = new ViewCameraLinkByCameraAndStartEntityIndex( );
        readonly ViewCameraLinkByStartEntityIndex _viewCameraLinkByStartEntityIndex = new ViewCameraLinkByStartEntityIndex( );
        readonly ViewTrackerLinkByViewAndStartEntityIndex _viewTrackerLinkByViewAndStartEntityIndex = new ViewTrackerLinkByViewAndStartEntityIndex( );
        readonly ViewTrackerLinkByTrackerAndStartEntityIndex _viewTrackerLinkByTrackerAndStartEntityIndex = new ViewTrackerLinkByTrackerAndStartEntityIndex( );
        readonly ViewTrackerLinkByStartEntityIndex _viewTrackerLinkByStartEntityIndex = new ViewTrackerLinkByStartEntityIndex( );
        readonly WeatherStationCommandByWeatherStationAndTimestampEntityIndex _weatherStationCommandByWeatherStationAndTimestampEntityIndex = new WeatherStationCommandByWeatherStationAndTimestampEntityIndex( );
        readonly WeatherStationCommandByTimestampEntityIndex _weatherStationCommandByTimestampEntityIndex = new WeatherStationCommandByTimestampEntityIndex( );
        readonly WeatherStationCommandByReplyEntityIndex _weatherStationCommandByReplyEntityIndex = new WeatherStationCommandByReplyEntityIndex( );
        readonly WeatherStationCommandByReplyIsNullEntityIndex _weatherStationCommandByReplyIsNullEntityIndex = new WeatherStationCommandByReplyIsNullEntityIndex( );
        readonly WeatherStationCommandReplyByWeatherStationAndTimestampEntityIndex _weatherStationCommandReplyByWeatherStationAndTimestampEntityIndex = new WeatherStationCommandReplyByWeatherStationAndTimestampEntityIndex( );
        readonly WeatherStationCommandReplyByTimestampEntityIndex _weatherStationCommandReplyByTimestampEntityIndex = new WeatherStationCommandReplyByTimestampEntityIndex( );
        readonly WeatherStationCommandReplyByCommandEntityIndex _weatherStationCommandReplyByCommandEntityIndex = new WeatherStationCommandReplyByCommandEntityIndex( );
        readonly WeatherStationCommandReplyByCommandIsNullEntityIndex _weatherStationCommandReplyByCommandIsNullEntityIndex = new WeatherStationCommandReplyByCommandIsNullEntityIndex( );
        readonly WeatherStationConfigurationByWeatherStationAndTimestampEntityIndex _weatherStationConfigurationByWeatherStationAndTimestampEntityIndex = new WeatherStationConfigurationByWeatherStationAndTimestampEntityIndex( );
        readonly WeatherStationConfigurationByTimestampEntityIndex _weatherStationConfigurationByTimestampEntityIndex = new WeatherStationConfigurationByTimestampEntityIndex( );
        readonly ZoneByNameEntityIndex _zoneByNameEntityIndex = new ZoneByNameEntityIndex( );
        readonly ZoneExceptionsByZoneAndTimestampEntityIndex _zoneExceptionsByZoneAndTimestampEntityIndex = new ZoneExceptionsByZoneAndTimestampEntityIndex( );
        readonly ZoneExceptionsByTimestampEntityIndex _zoneExceptionsByTimestampEntityIndex = new ZoneExceptionsByTimestampEntityIndex( );
        readonly ZoneExceptionsVesselLinkByZoneExceptionsAndVesselEntityIndex _zoneExceptionsVesselLinkByZoneExceptionsAndVesselEntityIndex = new ZoneExceptionsVesselLinkByZoneExceptionsAndVesselEntityIndex( );
        readonly ZoneExceptionsVesselLinkByVesselEntityIndex _zoneExceptionsVesselLinkByVesselEntityIndex = new ZoneExceptionsVesselLinkByVesselEntityIndex( );
        readonly ZoneTrackAlarmByTrackAndTimestampEntityIndex _zoneTrackAlarmByTrackAndTimestampEntityIndex = new ZoneTrackAlarmByTrackAndTimestampEntityIndex( );
        readonly ZoneTrackAlarmByZoneTrackAndTimestampEntityIndex _zoneTrackAlarmByZoneTrackAndTimestampEntityIndex = new ZoneTrackAlarmByZoneTrackAndTimestampEntityIndex( );
        readonly ZoneTrackAlarmByTimestampEntityIndex _zoneTrackAlarmByTimestampEntityIndex = new ZoneTrackAlarmByTimestampEntityIndex( );
        public IList<AircraftTypeEntity> GetAircraftTypeCollection( )
        {
            throw new NotImplementedException();
        }

        public AircraftTypeEntity? GetAircraftTypeByName( string name )
        {
            throw new NotImplementedException();
        }

        public IList<AisDeviceCommandEntity> GetAisDeviceCommandCollection( )
        {
            throw new NotImplementedException();
        }

        public List<AisDeviceCommandEntity> GetAisDeviceCommandCollectionByAisDevice( Guid aisDevice )
        {
            throw new NotImplementedException();
        }

        public List<AisDeviceCommandEntity> GetAisDeviceCommandCollectionByAisDeviceAndTimestamp( Guid aisDevice, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<AisDeviceCommandEntity> GetAisDeviceCommandCollectionByAisDeviceAtTimestamp( Guid aisDevice, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<AisDeviceCommandEntity> GetAisDeviceCommandCollectionByAisDeviceFromTimestamp( Guid aisDevice, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<AisDeviceCommandEntity> GetAisDeviceCommandCollectionByAisDeviceUntilTimestamp( Guid aisDevice, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<AisDeviceCommandEntity> GetAisDeviceCommandCollectionByAisDeviceOverTimestamp( Guid aisDevice, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

        public List<AisDeviceCommandEntity> GetAisDeviceCommandCollectionByTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<AisDeviceCommandEntity> GetAisDeviceCommandCollectionAtTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<AisDeviceCommandEntity> GetAisDeviceCommandCollectionFromTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<AisDeviceCommandEntity> GetAisDeviceCommandCollectionUntilTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<AisDeviceCommandEntity> GetAisDeviceCommandCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

        public List<AisDeviceCommandEntity> GetAisDeviceCommandCollectionByReply( Guid? reply )
        {
            throw new NotImplementedException();
        }

        public IList<AisDeviceCommandReplyEntity> GetAisDeviceCommandReplyCollection( )
        {
            throw new NotImplementedException();
        }

        public List<AisDeviceCommandReplyEntity> GetAisDeviceCommandReplyCollectionByAisDevice( Guid aisDevice )
        {
            throw new NotImplementedException();
        }

        public List<AisDeviceCommandReplyEntity> GetAisDeviceCommandReplyCollectionByAisDeviceAndTimestamp( Guid aisDevice, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<AisDeviceCommandReplyEntity> GetAisDeviceCommandReplyCollectionByAisDeviceAtTimestamp( Guid aisDevice, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<AisDeviceCommandReplyEntity> GetAisDeviceCommandReplyCollectionByAisDeviceFromTimestamp( Guid aisDevice, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<AisDeviceCommandReplyEntity> GetAisDeviceCommandReplyCollectionByAisDeviceUntilTimestamp( Guid aisDevice, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<AisDeviceCommandReplyEntity> GetAisDeviceCommandReplyCollectionByAisDeviceOverTimestamp( Guid aisDevice, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

        public List<AisDeviceCommandReplyEntity> GetAisDeviceCommandReplyCollectionByTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<AisDeviceCommandReplyEntity> GetAisDeviceCommandReplyCollectionAtTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<AisDeviceCommandReplyEntity> GetAisDeviceCommandReplyCollectionFromTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<AisDeviceCommandReplyEntity> GetAisDeviceCommandReplyCollectionUntilTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<AisDeviceCommandReplyEntity> GetAisDeviceCommandReplyCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

        public AisDeviceCommandReplyEntity? GetAisDeviceCommandReplyByCommand( Guid? command )
        {
            throw new NotImplementedException();
        }

        public IList<AisDeviceConfigurationEntity> GetAisDeviceConfigurationCollection( )
        {
            throw new NotImplementedException();
        }

        public List<AisDeviceConfigurationEntity> GetAisDeviceConfigurationCollectionByAisDevice( Guid aisDevice )
        {
            throw new NotImplementedException();
        }

        public AisDeviceConfigurationEntity? GetAisDeviceConfigurationByAisDeviceAndTimestamp( Guid aisDevice, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public AisDeviceConfigurationEntity? GetAisDeviceConfigurationByAisDeviceAtTimestamp( Guid aisDevice, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<AisDeviceConfigurationEntity> GetAisDeviceConfigurationByAisDeviceFromTimestamp( Guid aisDevice, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<AisDeviceConfigurationEntity> GetAisDeviceConfigurationByAisDeviceUntilTimestamp( Guid aisDevice, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<AisDeviceConfigurationEntity> GetAisDeviceConfigurationByAisDeviceOverTimestamp( Guid aisDevice, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

        public List<AisDeviceConfigurationEntity> GetAisDeviceConfigurationCollectionByTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<AisDeviceConfigurationEntity> GetAisDeviceConfigurationCollectionAtTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<AisDeviceConfigurationEntity> GetAisDeviceConfigurationCollectionFromTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<AisDeviceConfigurationEntity> GetAisDeviceConfigurationCollectionUntilTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<AisDeviceConfigurationEntity> GetAisDeviceConfigurationCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

        public IList<AisDeviceRawMessageEntity> GetAisDeviceRawMessageCollection( )
        {
            throw new NotImplementedException();
        }

        public List<AisDeviceRawMessageEntity> GetAisDeviceRawMessageCollectionByAisDevice( Guid aisDevice )
        {
            throw new NotImplementedException();
        }

        public List<AisDeviceRawMessageEntity> GetAisDeviceRawMessageCollectionByAisDeviceAndTimestamp( Guid aisDevice, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<AisDeviceRawMessageEntity> GetAisDeviceRawMessageCollectionByAisDeviceAtTimestamp( Guid aisDevice, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<AisDeviceRawMessageEntity> GetAisDeviceRawMessageCollectionByAisDeviceFromTimestamp( Guid aisDevice, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<AisDeviceRawMessageEntity> GetAisDeviceRawMessageCollectionByAisDeviceUntilTimestamp( Guid aisDevice, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<AisDeviceRawMessageEntity> GetAisDeviceRawMessageCollectionByAisDeviceOverTimestamp( Guid aisDevice, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

        public List<AisDeviceRawMessageEntity> GetAisDeviceRawMessageCollectionByTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<AisDeviceRawMessageEntity> GetAisDeviceRawMessageCollectionAtTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<AisDeviceRawMessageEntity> GetAisDeviceRawMessageCollectionFromTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<AisDeviceRawMessageEntity> GetAisDeviceRawMessageCollectionUntilTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<AisDeviceRawMessageEntity> GetAisDeviceRawMessageCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

        public IList<AisDeviceRawSentenceEntity> GetAisDeviceRawSentenceCollection( )
        {
            throw new NotImplementedException();
        }

        public List<AisDeviceRawSentenceEntity> GetAisDeviceRawSentenceCollectionByAisDevice( Guid aisDevice )
        {
            throw new NotImplementedException();
        }

        public List<AisDeviceRawSentenceEntity> GetAisDeviceRawSentenceCollectionByAisDeviceAndTimestamp( Guid aisDevice, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<AisDeviceRawSentenceEntity> GetAisDeviceRawSentenceCollectionByAisDeviceAtTimestamp( Guid aisDevice, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<AisDeviceRawSentenceEntity> GetAisDeviceRawSentenceCollectionByAisDeviceFromTimestamp( Guid aisDevice, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<AisDeviceRawSentenceEntity> GetAisDeviceRawSentenceCollectionByAisDeviceUntilTimestamp( Guid aisDevice, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<AisDeviceRawSentenceEntity> GetAisDeviceRawSentenceCollectionByAisDeviceOverTimestamp( Guid aisDevice, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

        public List<AisDeviceRawSentenceEntity> GetAisDeviceRawSentenceCollectionByTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<AisDeviceRawSentenceEntity> GetAisDeviceRawSentenceCollectionAtTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<AisDeviceRawSentenceEntity> GetAisDeviceRawSentenceCollectionFromTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<AisDeviceRawSentenceEntity> GetAisDeviceRawSentenceCollectionUntilTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<AisDeviceRawSentenceEntity> GetAisDeviceRawSentenceCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

        public IList<AisMessageEntity> GetAisMessageCollection( )
        {
            throw new NotImplementedException();
        }

        public List<AisMessageEntity> GetAisMessageCollectionByAisDevice( Guid aisDevice )
        {
            throw new NotImplementedException();
        }

        public AisMessageEntity? GetAisMessageByAisDeviceAndReceivedTimestamp( Guid aisDevice, DateTime receivedTimestamp )
        {
            throw new NotImplementedException();
        }

        public AisMessageEntity? GetAisMessageByAisDeviceAtReceivedTimestamp( Guid aisDevice, DateTime receivedTimestamp )
        {
            throw new NotImplementedException();
        }

        public List<AisMessageEntity> GetAisMessageByAisDeviceFromReceivedTimestamp( Guid aisDevice, DateTime receivedTimestamp )
        {
            throw new NotImplementedException();
        }

        public List<AisMessageEntity> GetAisMessageByAisDeviceUntilReceivedTimestamp( Guid aisDevice, DateTime receivedTimestamp )
        {
            throw new NotImplementedException();
        }

        public List<AisMessageEntity> GetAisMessageByAisDeviceOverReceivedTimestamp( Guid aisDevice, DateTime fromReceivedTimestamp, DateTime untilReceivedTimestamp )
        {
            throw new NotImplementedException();
        }

        public List<AisMessageEntity> GetAisMessageCollectionByReceivedTimestamp( DateTime receivedTimestamp )
        {
            throw new NotImplementedException();
        }

        public List<AisMessageEntity> GetAisMessageCollectionAtReceivedTimestamp( DateTime receivedTimestamp )
        {
            throw new NotImplementedException();
        }

        public List<AisMessageEntity> GetAisMessageCollectionFromReceivedTimestamp( DateTime receivedTimestamp )
        {
            throw new NotImplementedException();
        }

        public List<AisMessageEntity> GetAisMessageCollectionUntilReceivedTimestamp( DateTime receivedTimestamp )
        {
            throw new NotImplementedException();
        }

        public List<AisMessageEntity> GetAisMessageCollectionOverReceivedTimestamp( DateTime fromReceivedTimestamp, DateTime untilReceivedTimestamp )
        {
            throw new NotImplementedException();
        }

        public List<AisMessageEntity> GetAisMessageCollectionByMmsi( Guid? mmsi )
        {
            throw new NotImplementedException();
        }

        public List<AisMessageEntity> GetAisMessageCollectionByMmsiAndMessageSequenceNumber( Guid? mmsi, long messageSequenceNumber )
        {
            throw new NotImplementedException();
        }

        public List<AisMessageEntity> GetAisMessageCollectionByMmsiFromMessageSequenceNumber( Guid? mmsi, long messageSequenceNumber )
        {
            throw new NotImplementedException();
        }

        public List<AisMessageEntity> GetAisMessageCollectionByMmsiUntilMessageSequenceNumber( Guid? mmsi, long messageSequenceNumber )
        {
            throw new NotImplementedException();
        }

        public List<AisMessageEntity> GetAisMessageCollectionByMmsiOverMessageSequenceNumber( Guid mmsi, long fromMessageSequenceNumber, long untilMessageSequenceNumber )
        {
            throw new NotImplementedException();
        }

        public IList<AidToNavigationReportMessageEntity> GetAidToNavigationReportMessageCollection( )
        {
            throw new NotImplementedException();
        }

        public List<AidToNavigationReportMessageEntity> GetAidToNavigationReportMessageCollectionByAisDevice( Guid aisDevice )
        {
            throw new NotImplementedException();
        }

        public AidToNavigationReportMessageEntity? GetAidToNavigationReportMessageByAisDeviceAndReceivedTimestamp( Guid aisDevice, DateTime receivedTimestamp )
        {
            throw new NotImplementedException();
        }

        public AidToNavigationReportMessageEntity? GetAidToNavigationReportMessageByAisDeviceAtReceivedTimestamp( Guid aisDevice, DateTime receivedTimestamp )
        {
            throw new NotImplementedException();
        }

        public List<AidToNavigationReportMessageEntity> GetAidToNavigationReportMessageByAisDeviceFromReceivedTimestamp( Guid aisDevice, DateTime receivedTimestamp )
        {
            throw new NotImplementedException();
        }

        public List<AidToNavigationReportMessageEntity> GetAidToNavigationReportMessageByAisDeviceUntilReceivedTimestamp( Guid aisDevice, DateTime receivedTimestamp )
        {
            throw new NotImplementedException();
        }

        public List<AidToNavigationReportMessageEntity> GetAidToNavigationReportMessageByAisDeviceOverReceivedTimestamp( Guid aisDevice, DateTime fromReceivedTimestamp, DateTime untilReceivedTimestamp )
        {
            throw new NotImplementedException();
        }

        public List<AidToNavigationReportMessageEntity> GetAidToNavigationReportMessageCollectionByReceivedTimestamp( DateTime receivedTimestamp )
        {
            throw new NotImplementedException();
        }

        public List<AidToNavigationReportMessageEntity> GetAidToNavigationReportMessageCollectionAtReceivedTimestamp( DateTime receivedTimestamp )
        {
            throw new NotImplementedException();
        }

        public List<AidToNavigationReportMessageEntity> GetAidToNavigationReportMessageCollectionFromReceivedTimestamp( DateTime receivedTimestamp )
        {
            throw new NotImplementedException();
        }

        public List<AidToNavigationReportMessageEntity> GetAidToNavigationReportMessageCollectionUntilReceivedTimestamp( DateTime receivedTimestamp )
        {
            throw new NotImplementedException();
        }

        public List<AidToNavigationReportMessageEntity> GetAidToNavigationReportMessageCollectionOverReceivedTimestamp( DateTime fromReceivedTimestamp, DateTime untilReceivedTimestamp )
        {
            throw new NotImplementedException();
        }

        public List<AidToNavigationReportMessageEntity> GetAidToNavigationReportMessageCollectionByMmsi( Guid? mmsi )
        {
            throw new NotImplementedException();
        }

        public List<AidToNavigationReportMessageEntity> GetAidToNavigationReportMessageCollectionByMmsiAndMessageSequenceNumber( Guid? mmsi, long messageSequenceNumber )
        {
            throw new NotImplementedException();
        }

        public List<AidToNavigationReportMessageEntity> GetAidToNavigationReportMessageCollectionByMmsiFromMessageSequenceNumber( Guid? mmsi, long messageSequenceNumber )
        {
            throw new NotImplementedException();
        }

        public List<AidToNavigationReportMessageEntity> GetAidToNavigationReportMessageCollectionByMmsiUntilMessageSequenceNumber( Guid? mmsi, long messageSequenceNumber )
        {
            throw new NotImplementedException();
        }

        public List<AidToNavigationReportMessageEntity> GetAidToNavigationReportMessageCollectionByMmsiOverMessageSequenceNumber( Guid mmsi, long fromMessageSequenceNumber, long untilMessageSequenceNumber )
        {
            throw new NotImplementedException();
        }

        public IList<AisAddressedSafetyRelatedMessageEntity> GetAisAddressedSafetyRelatedMessageCollection( )
        {
            throw new NotImplementedException();
        }

        public List<AisAddressedSafetyRelatedMessageEntity> GetAisAddressedSafetyRelatedMessageCollectionByAisDevice( Guid aisDevice )
        {
            throw new NotImplementedException();
        }

        public AisAddressedSafetyRelatedMessageEntity? GetAisAddressedSafetyRelatedMessageByAisDeviceAndReceivedTimestamp( Guid aisDevice, DateTime receivedTimestamp )
        {
            throw new NotImplementedException();
        }

        public AisAddressedSafetyRelatedMessageEntity? GetAisAddressedSafetyRelatedMessageByAisDeviceAtReceivedTimestamp( Guid aisDevice, DateTime receivedTimestamp )
        {
            throw new NotImplementedException();
        }

        public List<AisAddressedSafetyRelatedMessageEntity> GetAisAddressedSafetyRelatedMessageByAisDeviceFromReceivedTimestamp( Guid aisDevice, DateTime receivedTimestamp )
        {
            throw new NotImplementedException();
        }

        public List<AisAddressedSafetyRelatedMessageEntity> GetAisAddressedSafetyRelatedMessageByAisDeviceUntilReceivedTimestamp( Guid aisDevice, DateTime receivedTimestamp )
        {
            throw new NotImplementedException();
        }

        public List<AisAddressedSafetyRelatedMessageEntity> GetAisAddressedSafetyRelatedMessageByAisDeviceOverReceivedTimestamp( Guid aisDevice, DateTime fromReceivedTimestamp, DateTime untilReceivedTimestamp )
        {
            throw new NotImplementedException();
        }

        public List<AisAddressedSafetyRelatedMessageEntity> GetAisAddressedSafetyRelatedMessageCollectionByReceivedTimestamp( DateTime receivedTimestamp )
        {
            throw new NotImplementedException();
        }

        public List<AisAddressedSafetyRelatedMessageEntity> GetAisAddressedSafetyRelatedMessageCollectionAtReceivedTimestamp( DateTime receivedTimestamp )
        {
            throw new NotImplementedException();
        }

        public List<AisAddressedSafetyRelatedMessageEntity> GetAisAddressedSafetyRelatedMessageCollectionFromReceivedTimestamp( DateTime receivedTimestamp )
        {
            throw new NotImplementedException();
        }

        public List<AisAddressedSafetyRelatedMessageEntity> GetAisAddressedSafetyRelatedMessageCollectionUntilReceivedTimestamp( DateTime receivedTimestamp )
        {
            throw new NotImplementedException();
        }

        public List<AisAddressedSafetyRelatedMessageEntity> GetAisAddressedSafetyRelatedMessageCollectionOverReceivedTimestamp( DateTime fromReceivedTimestamp, DateTime untilReceivedTimestamp )
        {
            throw new NotImplementedException();
        }

        public List<AisAddressedSafetyRelatedMessageEntity> GetAisAddressedSafetyRelatedMessageCollectionByMmsi( Guid? mmsi )
        {
            throw new NotImplementedException();
        }

        public List<AisAddressedSafetyRelatedMessageEntity> GetAisAddressedSafetyRelatedMessageCollectionByMmsiAndMessageSequenceNumber( Guid? mmsi, long messageSequenceNumber )
        {
            throw new NotImplementedException();
        }

        public List<AisAddressedSafetyRelatedMessageEntity> GetAisAddressedSafetyRelatedMessageCollectionByMmsiFromMessageSequenceNumber( Guid? mmsi, long messageSequenceNumber )
        {
            throw new NotImplementedException();
        }

        public List<AisAddressedSafetyRelatedMessageEntity> GetAisAddressedSafetyRelatedMessageCollectionByMmsiUntilMessageSequenceNumber( Guid? mmsi, long messageSequenceNumber )
        {
            throw new NotImplementedException();
        }

        public List<AisAddressedSafetyRelatedMessageEntity> GetAisAddressedSafetyRelatedMessageCollectionByMmsiOverMessageSequenceNumber( Guid mmsi, long fromMessageSequenceNumber, long untilMessageSequenceNumber )
        {
            throw new NotImplementedException();
        }

        public List<AisAddressedSafetyRelatedMessageEntity> GetAisAddressedSafetyRelatedMessageCollectionByDestinationMmsi( Guid? destinationMmsi )
        {
            throw new NotImplementedException();
        }

        public IList<AisBaseStationReportMessageEntity> GetAisBaseStationReportMessageCollection( )
        {
            throw new NotImplementedException();
        }

        public List<AisBaseStationReportMessageEntity> GetAisBaseStationReportMessageCollectionByAisDevice( Guid aisDevice )
        {
            throw new NotImplementedException();
        }

        public AisBaseStationReportMessageEntity? GetAisBaseStationReportMessageByAisDeviceAndReceivedTimestamp( Guid aisDevice, DateTime receivedTimestamp )
        {
            throw new NotImplementedException();
        }

        public AisBaseStationReportMessageEntity? GetAisBaseStationReportMessageByAisDeviceAtReceivedTimestamp( Guid aisDevice, DateTime receivedTimestamp )
        {
            throw new NotImplementedException();
        }

        public List<AisBaseStationReportMessageEntity> GetAisBaseStationReportMessageByAisDeviceFromReceivedTimestamp( Guid aisDevice, DateTime receivedTimestamp )
        {
            throw new NotImplementedException();
        }

        public List<AisBaseStationReportMessageEntity> GetAisBaseStationReportMessageByAisDeviceUntilReceivedTimestamp( Guid aisDevice, DateTime receivedTimestamp )
        {
            throw new NotImplementedException();
        }

        public List<AisBaseStationReportMessageEntity> GetAisBaseStationReportMessageByAisDeviceOverReceivedTimestamp( Guid aisDevice, DateTime fromReceivedTimestamp, DateTime untilReceivedTimestamp )
        {
            throw new NotImplementedException();
        }

        public List<AisBaseStationReportMessageEntity> GetAisBaseStationReportMessageCollectionByReceivedTimestamp( DateTime receivedTimestamp )
        {
            throw new NotImplementedException();
        }

        public List<AisBaseStationReportMessageEntity> GetAisBaseStationReportMessageCollectionAtReceivedTimestamp( DateTime receivedTimestamp )
        {
            throw new NotImplementedException();
        }

        public List<AisBaseStationReportMessageEntity> GetAisBaseStationReportMessageCollectionFromReceivedTimestamp( DateTime receivedTimestamp )
        {
            throw new NotImplementedException();
        }

        public List<AisBaseStationReportMessageEntity> GetAisBaseStationReportMessageCollectionUntilReceivedTimestamp( DateTime receivedTimestamp )
        {
            throw new NotImplementedException();
        }

        public List<AisBaseStationReportMessageEntity> GetAisBaseStationReportMessageCollectionOverReceivedTimestamp( DateTime fromReceivedTimestamp, DateTime untilReceivedTimestamp )
        {
            throw new NotImplementedException();
        }

        public List<AisBaseStationReportMessageEntity> GetAisBaseStationReportMessageCollectionByMmsi( Guid? mmsi )
        {
            throw new NotImplementedException();
        }

        public List<AisBaseStationReportMessageEntity> GetAisBaseStationReportMessageCollectionByMmsiAndMessageSequenceNumber( Guid? mmsi, long messageSequenceNumber )
        {
            throw new NotImplementedException();
        }

        public List<AisBaseStationReportMessageEntity> GetAisBaseStationReportMessageCollectionByMmsiFromMessageSequenceNumber( Guid? mmsi, long messageSequenceNumber )
        {
            throw new NotImplementedException();
        }

        public List<AisBaseStationReportMessageEntity> GetAisBaseStationReportMessageCollectionByMmsiUntilMessageSequenceNumber( Guid? mmsi, long messageSequenceNumber )
        {
            throw new NotImplementedException();
        }

        public List<AisBaseStationReportMessageEntity> GetAisBaseStationReportMessageCollectionByMmsiOverMessageSequenceNumber( Guid mmsi, long fromMessageSequenceNumber, long untilMessageSequenceNumber )
        {
            throw new NotImplementedException();
        }

        public IList<AisBinaryAcknowledgeMessageEntity> GetAisBinaryAcknowledgeMessageCollection( )
        {
            throw new NotImplementedException();
        }

        public List<AisBinaryAcknowledgeMessageEntity> GetAisBinaryAcknowledgeMessageCollectionByAisDevice( Guid aisDevice )
        {
            throw new NotImplementedException();
        }

        public AisBinaryAcknowledgeMessageEntity? GetAisBinaryAcknowledgeMessageByAisDeviceAndReceivedTimestamp( Guid aisDevice, DateTime receivedTimestamp )
        {
            throw new NotImplementedException();
        }

        public AisBinaryAcknowledgeMessageEntity? GetAisBinaryAcknowledgeMessageByAisDeviceAtReceivedTimestamp( Guid aisDevice, DateTime receivedTimestamp )
        {
            throw new NotImplementedException();
        }

        public List<AisBinaryAcknowledgeMessageEntity> GetAisBinaryAcknowledgeMessageByAisDeviceFromReceivedTimestamp( Guid aisDevice, DateTime receivedTimestamp )
        {
            throw new NotImplementedException();
        }

        public List<AisBinaryAcknowledgeMessageEntity> GetAisBinaryAcknowledgeMessageByAisDeviceUntilReceivedTimestamp( Guid aisDevice, DateTime receivedTimestamp )
        {
            throw new NotImplementedException();
        }

        public List<AisBinaryAcknowledgeMessageEntity> GetAisBinaryAcknowledgeMessageByAisDeviceOverReceivedTimestamp( Guid aisDevice, DateTime fromReceivedTimestamp, DateTime untilReceivedTimestamp )
        {
            throw new NotImplementedException();
        }

        public List<AisBinaryAcknowledgeMessageEntity> GetAisBinaryAcknowledgeMessageCollectionByReceivedTimestamp( DateTime receivedTimestamp )
        {
            throw new NotImplementedException();
        }

        public List<AisBinaryAcknowledgeMessageEntity> GetAisBinaryAcknowledgeMessageCollectionAtReceivedTimestamp( DateTime receivedTimestamp )
        {
            throw new NotImplementedException();
        }

        public List<AisBinaryAcknowledgeMessageEntity> GetAisBinaryAcknowledgeMessageCollectionFromReceivedTimestamp( DateTime receivedTimestamp )
        {
            throw new NotImplementedException();
        }

        public List<AisBinaryAcknowledgeMessageEntity> GetAisBinaryAcknowledgeMessageCollectionUntilReceivedTimestamp( DateTime receivedTimestamp )
        {
            throw new NotImplementedException();
        }

        public List<AisBinaryAcknowledgeMessageEntity> GetAisBinaryAcknowledgeMessageCollectionOverReceivedTimestamp( DateTime fromReceivedTimestamp, DateTime untilReceivedTimestamp )
        {
            throw new NotImplementedException();
        }

        public List<AisBinaryAcknowledgeMessageEntity> GetAisBinaryAcknowledgeMessageCollectionByMmsi( Guid? mmsi )
        {
            throw new NotImplementedException();
        }

        public List<AisBinaryAcknowledgeMessageEntity> GetAisBinaryAcknowledgeMessageCollectionByMmsiAndMessageSequenceNumber( Guid? mmsi, long messageSequenceNumber )
        {
            throw new NotImplementedException();
        }

        public List<AisBinaryAcknowledgeMessageEntity> GetAisBinaryAcknowledgeMessageCollectionByMmsiFromMessageSequenceNumber( Guid? mmsi, long messageSequenceNumber )
        {
            throw new NotImplementedException();
        }

        public List<AisBinaryAcknowledgeMessageEntity> GetAisBinaryAcknowledgeMessageCollectionByMmsiUntilMessageSequenceNumber( Guid? mmsi, long messageSequenceNumber )
        {
            throw new NotImplementedException();
        }

        public List<AisBinaryAcknowledgeMessageEntity> GetAisBinaryAcknowledgeMessageCollectionByMmsiOverMessageSequenceNumber( Guid mmsi, long fromMessageSequenceNumber, long untilMessageSequenceNumber )
        {
            throw new NotImplementedException();
        }

        public IList<AisBinaryAddressedMessageEntity> GetAisBinaryAddressedMessageCollection( )
        {
            throw new NotImplementedException();
        }

        public List<AisBinaryAddressedMessageEntity> GetAisBinaryAddressedMessageCollectionByAisDevice( Guid aisDevice )
        {
            throw new NotImplementedException();
        }

        public AisBinaryAddressedMessageEntity? GetAisBinaryAddressedMessageByAisDeviceAndReceivedTimestamp( Guid aisDevice, DateTime receivedTimestamp )
        {
            throw new NotImplementedException();
        }

        public AisBinaryAddressedMessageEntity? GetAisBinaryAddressedMessageByAisDeviceAtReceivedTimestamp( Guid aisDevice, DateTime receivedTimestamp )
        {
            throw new NotImplementedException();
        }

        public List<AisBinaryAddressedMessageEntity> GetAisBinaryAddressedMessageByAisDeviceFromReceivedTimestamp( Guid aisDevice, DateTime receivedTimestamp )
        {
            throw new NotImplementedException();
        }

        public List<AisBinaryAddressedMessageEntity> GetAisBinaryAddressedMessageByAisDeviceUntilReceivedTimestamp( Guid aisDevice, DateTime receivedTimestamp )
        {
            throw new NotImplementedException();
        }

        public List<AisBinaryAddressedMessageEntity> GetAisBinaryAddressedMessageByAisDeviceOverReceivedTimestamp( Guid aisDevice, DateTime fromReceivedTimestamp, DateTime untilReceivedTimestamp )
        {
            throw new NotImplementedException();
        }

        public List<AisBinaryAddressedMessageEntity> GetAisBinaryAddressedMessageCollectionByReceivedTimestamp( DateTime receivedTimestamp )
        {
            throw new NotImplementedException();
        }

        public List<AisBinaryAddressedMessageEntity> GetAisBinaryAddressedMessageCollectionAtReceivedTimestamp( DateTime receivedTimestamp )
        {
            throw new NotImplementedException();
        }

        public List<AisBinaryAddressedMessageEntity> GetAisBinaryAddressedMessageCollectionFromReceivedTimestamp( DateTime receivedTimestamp )
        {
            throw new NotImplementedException();
        }

        public List<AisBinaryAddressedMessageEntity> GetAisBinaryAddressedMessageCollectionUntilReceivedTimestamp( DateTime receivedTimestamp )
        {
            throw new NotImplementedException();
        }

        public List<AisBinaryAddressedMessageEntity> GetAisBinaryAddressedMessageCollectionOverReceivedTimestamp( DateTime fromReceivedTimestamp, DateTime untilReceivedTimestamp )
        {
            throw new NotImplementedException();
        }

        public List<AisBinaryAddressedMessageEntity> GetAisBinaryAddressedMessageCollectionByMmsi( Guid? mmsi )
        {
            throw new NotImplementedException();
        }

        public List<AisBinaryAddressedMessageEntity> GetAisBinaryAddressedMessageCollectionByMmsiAndMessageSequenceNumber( Guid? mmsi, long messageSequenceNumber )
        {
            throw new NotImplementedException();
        }

        public List<AisBinaryAddressedMessageEntity> GetAisBinaryAddressedMessageCollectionByMmsiFromMessageSequenceNumber( Guid? mmsi, long messageSequenceNumber )
        {
            throw new NotImplementedException();
        }

        public List<AisBinaryAddressedMessageEntity> GetAisBinaryAddressedMessageCollectionByMmsiUntilMessageSequenceNumber( Guid? mmsi, long messageSequenceNumber )
        {
            throw new NotImplementedException();
        }

        public List<AisBinaryAddressedMessageEntity> GetAisBinaryAddressedMessageCollectionByMmsiOverMessageSequenceNumber( Guid mmsi, long fromMessageSequenceNumber, long untilMessageSequenceNumber )
        {
            throw new NotImplementedException();
        }

        public List<AisBinaryAddressedMessageEntity> GetAisBinaryAddressedMessageCollectionByDestinationMmsi( Guid? destinationMmsi )
        {
            throw new NotImplementedException();
        }

        public IList<AisBinaryBroadcastMessageEntity> GetAisBinaryBroadcastMessageCollection( )
        {
            throw new NotImplementedException();
        }

        public List<AisBinaryBroadcastMessageEntity> GetAisBinaryBroadcastMessageCollectionByAisDevice( Guid aisDevice )
        {
            throw new NotImplementedException();
        }

        public AisBinaryBroadcastMessageEntity? GetAisBinaryBroadcastMessageByAisDeviceAndReceivedTimestamp( Guid aisDevice, DateTime receivedTimestamp )
        {
            throw new NotImplementedException();
        }

        public AisBinaryBroadcastMessageEntity? GetAisBinaryBroadcastMessageByAisDeviceAtReceivedTimestamp( Guid aisDevice, DateTime receivedTimestamp )
        {
            throw new NotImplementedException();
        }

        public List<AisBinaryBroadcastMessageEntity> GetAisBinaryBroadcastMessageByAisDeviceFromReceivedTimestamp( Guid aisDevice, DateTime receivedTimestamp )
        {
            throw new NotImplementedException();
        }

        public List<AisBinaryBroadcastMessageEntity> GetAisBinaryBroadcastMessageByAisDeviceUntilReceivedTimestamp( Guid aisDevice, DateTime receivedTimestamp )
        {
            throw new NotImplementedException();
        }

        public List<AisBinaryBroadcastMessageEntity> GetAisBinaryBroadcastMessageByAisDeviceOverReceivedTimestamp( Guid aisDevice, DateTime fromReceivedTimestamp, DateTime untilReceivedTimestamp )
        {
            throw new NotImplementedException();
        }

        public List<AisBinaryBroadcastMessageEntity> GetAisBinaryBroadcastMessageCollectionByReceivedTimestamp( DateTime receivedTimestamp )
        {
            throw new NotImplementedException();
        }

        public List<AisBinaryBroadcastMessageEntity> GetAisBinaryBroadcastMessageCollectionAtReceivedTimestamp( DateTime receivedTimestamp )
        {
            throw new NotImplementedException();
        }

        public List<AisBinaryBroadcastMessageEntity> GetAisBinaryBroadcastMessageCollectionFromReceivedTimestamp( DateTime receivedTimestamp )
        {
            throw new NotImplementedException();
        }

        public List<AisBinaryBroadcastMessageEntity> GetAisBinaryBroadcastMessageCollectionUntilReceivedTimestamp( DateTime receivedTimestamp )
        {
            throw new NotImplementedException();
        }

        public List<AisBinaryBroadcastMessageEntity> GetAisBinaryBroadcastMessageCollectionOverReceivedTimestamp( DateTime fromReceivedTimestamp, DateTime untilReceivedTimestamp )
        {
            throw new NotImplementedException();
        }

        public List<AisBinaryBroadcastMessageEntity> GetAisBinaryBroadcastMessageCollectionByMmsi( Guid? mmsi )
        {
            throw new NotImplementedException();
        }

        public List<AisBinaryBroadcastMessageEntity> GetAisBinaryBroadcastMessageCollectionByMmsiAndMessageSequenceNumber( Guid? mmsi, long messageSequenceNumber )
        {
            throw new NotImplementedException();
        }

        public List<AisBinaryBroadcastMessageEntity> GetAisBinaryBroadcastMessageCollectionByMmsiFromMessageSequenceNumber( Guid? mmsi, long messageSequenceNumber )
        {
            throw new NotImplementedException();
        }

        public List<AisBinaryBroadcastMessageEntity> GetAisBinaryBroadcastMessageCollectionByMmsiUntilMessageSequenceNumber( Guid? mmsi, long messageSequenceNumber )
        {
            throw new NotImplementedException();
        }

        public List<AisBinaryBroadcastMessageEntity> GetAisBinaryBroadcastMessageCollectionByMmsiOverMessageSequenceNumber( Guid mmsi, long fromMessageSequenceNumber, long untilMessageSequenceNumber )
        {
            throw new NotImplementedException();
        }

        public IList<AisDataLinkManagementMessageEntity> GetAisDataLinkManagementMessageCollection( )
        {
            throw new NotImplementedException();
        }

        public List<AisDataLinkManagementMessageEntity> GetAisDataLinkManagementMessageCollectionByAisDevice( Guid aisDevice )
        {
            throw new NotImplementedException();
        }

        public AisDataLinkManagementMessageEntity? GetAisDataLinkManagementMessageByAisDeviceAndReceivedTimestamp( Guid aisDevice, DateTime receivedTimestamp )
        {
            throw new NotImplementedException();
        }

        public AisDataLinkManagementMessageEntity? GetAisDataLinkManagementMessageByAisDeviceAtReceivedTimestamp( Guid aisDevice, DateTime receivedTimestamp )
        {
            throw new NotImplementedException();
        }

        public List<AisDataLinkManagementMessageEntity> GetAisDataLinkManagementMessageByAisDeviceFromReceivedTimestamp( Guid aisDevice, DateTime receivedTimestamp )
        {
            throw new NotImplementedException();
        }

        public List<AisDataLinkManagementMessageEntity> GetAisDataLinkManagementMessageByAisDeviceUntilReceivedTimestamp( Guid aisDevice, DateTime receivedTimestamp )
        {
            throw new NotImplementedException();
        }

        public List<AisDataLinkManagementMessageEntity> GetAisDataLinkManagementMessageByAisDeviceOverReceivedTimestamp( Guid aisDevice, DateTime fromReceivedTimestamp, DateTime untilReceivedTimestamp )
        {
            throw new NotImplementedException();
        }

        public List<AisDataLinkManagementMessageEntity> GetAisDataLinkManagementMessageCollectionByReceivedTimestamp( DateTime receivedTimestamp )
        {
            throw new NotImplementedException();
        }

        public List<AisDataLinkManagementMessageEntity> GetAisDataLinkManagementMessageCollectionAtReceivedTimestamp( DateTime receivedTimestamp )
        {
            throw new NotImplementedException();
        }

        public List<AisDataLinkManagementMessageEntity> GetAisDataLinkManagementMessageCollectionFromReceivedTimestamp( DateTime receivedTimestamp )
        {
            throw new NotImplementedException();
        }

        public List<AisDataLinkManagementMessageEntity> GetAisDataLinkManagementMessageCollectionUntilReceivedTimestamp( DateTime receivedTimestamp )
        {
            throw new NotImplementedException();
        }

        public List<AisDataLinkManagementMessageEntity> GetAisDataLinkManagementMessageCollectionOverReceivedTimestamp( DateTime fromReceivedTimestamp, DateTime untilReceivedTimestamp )
        {
            throw new NotImplementedException();
        }

        public List<AisDataLinkManagementMessageEntity> GetAisDataLinkManagementMessageCollectionByMmsi( Guid? mmsi )
        {
            throw new NotImplementedException();
        }

        public List<AisDataLinkManagementMessageEntity> GetAisDataLinkManagementMessageCollectionByMmsiAndMessageSequenceNumber( Guid? mmsi, long messageSequenceNumber )
        {
            throw new NotImplementedException();
        }

        public List<AisDataLinkManagementMessageEntity> GetAisDataLinkManagementMessageCollectionByMmsiFromMessageSequenceNumber( Guid? mmsi, long messageSequenceNumber )
        {
            throw new NotImplementedException();
        }

        public List<AisDataLinkManagementMessageEntity> GetAisDataLinkManagementMessageCollectionByMmsiUntilMessageSequenceNumber( Guid? mmsi, long messageSequenceNumber )
        {
            throw new NotImplementedException();
        }

        public List<AisDataLinkManagementMessageEntity> GetAisDataLinkManagementMessageCollectionByMmsiOverMessageSequenceNumber( Guid mmsi, long fromMessageSequenceNumber, long untilMessageSequenceNumber )
        {
            throw new NotImplementedException();
        }

        public IList<AisExtendedClassBCsPositionReportMessageEntity> GetAisExtendedClassBCsPositionReportMessageCollection( )
        {
            throw new NotImplementedException();
        }

        public List<AisExtendedClassBCsPositionReportMessageEntity> GetAisExtendedClassBCsPositionReportMessageCollectionByAisDevice( Guid aisDevice )
        {
            throw new NotImplementedException();
        }

        public AisExtendedClassBCsPositionReportMessageEntity? GetAisExtendedClassBCsPositionReportMessageByAisDeviceAndReceivedTimestamp( Guid aisDevice, DateTime receivedTimestamp )
        {
            throw new NotImplementedException();
        }

        public AisExtendedClassBCsPositionReportMessageEntity? GetAisExtendedClassBCsPositionReportMessageByAisDeviceAtReceivedTimestamp( Guid aisDevice, DateTime receivedTimestamp )
        {
            throw new NotImplementedException();
        }

        public List<AisExtendedClassBCsPositionReportMessageEntity> GetAisExtendedClassBCsPositionReportMessageByAisDeviceFromReceivedTimestamp( Guid aisDevice, DateTime receivedTimestamp )
        {
            throw new NotImplementedException();
        }

        public List<AisExtendedClassBCsPositionReportMessageEntity> GetAisExtendedClassBCsPositionReportMessageByAisDeviceUntilReceivedTimestamp( Guid aisDevice, DateTime receivedTimestamp )
        {
            throw new NotImplementedException();
        }

        public List<AisExtendedClassBCsPositionReportMessageEntity> GetAisExtendedClassBCsPositionReportMessageByAisDeviceOverReceivedTimestamp( Guid aisDevice, DateTime fromReceivedTimestamp, DateTime untilReceivedTimestamp )
        {
            throw new NotImplementedException();
        }

        public List<AisExtendedClassBCsPositionReportMessageEntity> GetAisExtendedClassBCsPositionReportMessageCollectionByReceivedTimestamp( DateTime receivedTimestamp )
        {
            throw new NotImplementedException();
        }

        public List<AisExtendedClassBCsPositionReportMessageEntity> GetAisExtendedClassBCsPositionReportMessageCollectionAtReceivedTimestamp( DateTime receivedTimestamp )
        {
            throw new NotImplementedException();
        }

        public List<AisExtendedClassBCsPositionReportMessageEntity> GetAisExtendedClassBCsPositionReportMessageCollectionFromReceivedTimestamp( DateTime receivedTimestamp )
        {
            throw new NotImplementedException();
        }

        public List<AisExtendedClassBCsPositionReportMessageEntity> GetAisExtendedClassBCsPositionReportMessageCollectionUntilReceivedTimestamp( DateTime receivedTimestamp )
        {
            throw new NotImplementedException();
        }

        public List<AisExtendedClassBCsPositionReportMessageEntity> GetAisExtendedClassBCsPositionReportMessageCollectionOverReceivedTimestamp( DateTime fromReceivedTimestamp, DateTime untilReceivedTimestamp )
        {
            throw new NotImplementedException();
        }

        public List<AisExtendedClassBCsPositionReportMessageEntity> GetAisExtendedClassBCsPositionReportMessageCollectionByMmsi( Guid? mmsi )
        {
            throw new NotImplementedException();
        }

        public List<AisExtendedClassBCsPositionReportMessageEntity> GetAisExtendedClassBCsPositionReportMessageCollectionByMmsiAndMessageSequenceNumber( Guid? mmsi, long messageSequenceNumber )
        {
            throw new NotImplementedException();
        }

        public List<AisExtendedClassBCsPositionReportMessageEntity> GetAisExtendedClassBCsPositionReportMessageCollectionByMmsiFromMessageSequenceNumber( Guid? mmsi, long messageSequenceNumber )
        {
            throw new NotImplementedException();
        }

        public List<AisExtendedClassBCsPositionReportMessageEntity> GetAisExtendedClassBCsPositionReportMessageCollectionByMmsiUntilMessageSequenceNumber( Guid? mmsi, long messageSequenceNumber )
        {
            throw new NotImplementedException();
        }

        public List<AisExtendedClassBCsPositionReportMessageEntity> GetAisExtendedClassBCsPositionReportMessageCollectionByMmsiOverMessageSequenceNumber( Guid mmsi, long fromMessageSequenceNumber, long untilMessageSequenceNumber )
        {
            throw new NotImplementedException();
        }

        public List<AisExtendedClassBCsPositionReportMessageEntity> GetAisExtendedClassBCsPositionReportMessageCollectionByName( Guid? name )
        {
            throw new NotImplementedException();
        }

        public IList<AisInterrogationMessageEntity> GetAisInterrogationMessageCollection( )
        {
            throw new NotImplementedException();
        }

        public List<AisInterrogationMessageEntity> GetAisInterrogationMessageCollectionByAisDevice( Guid aisDevice )
        {
            throw new NotImplementedException();
        }

        public AisInterrogationMessageEntity? GetAisInterrogationMessageByAisDeviceAndReceivedTimestamp( Guid aisDevice, DateTime receivedTimestamp )
        {
            throw new NotImplementedException();
        }

        public AisInterrogationMessageEntity? GetAisInterrogationMessageByAisDeviceAtReceivedTimestamp( Guid aisDevice, DateTime receivedTimestamp )
        {
            throw new NotImplementedException();
        }

        public List<AisInterrogationMessageEntity> GetAisInterrogationMessageByAisDeviceFromReceivedTimestamp( Guid aisDevice, DateTime receivedTimestamp )
        {
            throw new NotImplementedException();
        }

        public List<AisInterrogationMessageEntity> GetAisInterrogationMessageByAisDeviceUntilReceivedTimestamp( Guid aisDevice, DateTime receivedTimestamp )
        {
            throw new NotImplementedException();
        }

        public List<AisInterrogationMessageEntity> GetAisInterrogationMessageByAisDeviceOverReceivedTimestamp( Guid aisDevice, DateTime fromReceivedTimestamp, DateTime untilReceivedTimestamp )
        {
            throw new NotImplementedException();
        }

        public List<AisInterrogationMessageEntity> GetAisInterrogationMessageCollectionByReceivedTimestamp( DateTime receivedTimestamp )
        {
            throw new NotImplementedException();
        }

        public List<AisInterrogationMessageEntity> GetAisInterrogationMessageCollectionAtReceivedTimestamp( DateTime receivedTimestamp )
        {
            throw new NotImplementedException();
        }

        public List<AisInterrogationMessageEntity> GetAisInterrogationMessageCollectionFromReceivedTimestamp( DateTime receivedTimestamp )
        {
            throw new NotImplementedException();
        }

        public List<AisInterrogationMessageEntity> GetAisInterrogationMessageCollectionUntilReceivedTimestamp( DateTime receivedTimestamp )
        {
            throw new NotImplementedException();
        }

        public List<AisInterrogationMessageEntity> GetAisInterrogationMessageCollectionOverReceivedTimestamp( DateTime fromReceivedTimestamp, DateTime untilReceivedTimestamp )
        {
            throw new NotImplementedException();
        }

        public List<AisInterrogationMessageEntity> GetAisInterrogationMessageCollectionByMmsi( Guid? mmsi )
        {
            throw new NotImplementedException();
        }

        public List<AisInterrogationMessageEntity> GetAisInterrogationMessageCollectionByMmsiAndMessageSequenceNumber( Guid? mmsi, long messageSequenceNumber )
        {
            throw new NotImplementedException();
        }

        public List<AisInterrogationMessageEntity> GetAisInterrogationMessageCollectionByMmsiFromMessageSequenceNumber( Guid? mmsi, long messageSequenceNumber )
        {
            throw new NotImplementedException();
        }

        public List<AisInterrogationMessageEntity> GetAisInterrogationMessageCollectionByMmsiUntilMessageSequenceNumber( Guid? mmsi, long messageSequenceNumber )
        {
            throw new NotImplementedException();
        }

        public List<AisInterrogationMessageEntity> GetAisInterrogationMessageCollectionByMmsiOverMessageSequenceNumber( Guid mmsi, long fromMessageSequenceNumber, long untilMessageSequenceNumber )
        {
            throw new NotImplementedException();
        }

        public IList<AisPositionReportClassAMessageBaseEntity> GetAisPositionReportClassAMessageBaseCollection( )
        {
            throw new NotImplementedException();
        }

        public List<AisPositionReportClassAMessageBaseEntity> GetAisPositionReportClassAMessageBaseCollectionByAisDevice( Guid aisDevice )
        {
            throw new NotImplementedException();
        }

        public AisPositionReportClassAMessageBaseEntity? GetAisPositionReportClassAMessageBaseByAisDeviceAndReceivedTimestamp( Guid aisDevice, DateTime receivedTimestamp )
        {
            throw new NotImplementedException();
        }

        public AisPositionReportClassAMessageBaseEntity? GetAisPositionReportClassAMessageBaseByAisDeviceAtReceivedTimestamp( Guid aisDevice, DateTime receivedTimestamp )
        {
            throw new NotImplementedException();
        }

        public List<AisPositionReportClassAMessageBaseEntity> GetAisPositionReportClassAMessageBaseByAisDeviceFromReceivedTimestamp( Guid aisDevice, DateTime receivedTimestamp )
        {
            throw new NotImplementedException();
        }

        public List<AisPositionReportClassAMessageBaseEntity> GetAisPositionReportClassAMessageBaseByAisDeviceUntilReceivedTimestamp( Guid aisDevice, DateTime receivedTimestamp )
        {
            throw new NotImplementedException();
        }

        public List<AisPositionReportClassAMessageBaseEntity> GetAisPositionReportClassAMessageBaseByAisDeviceOverReceivedTimestamp( Guid aisDevice, DateTime fromReceivedTimestamp, DateTime untilReceivedTimestamp )
        {
            throw new NotImplementedException();
        }

        public List<AisPositionReportClassAMessageBaseEntity> GetAisPositionReportClassAMessageBaseCollectionByReceivedTimestamp( DateTime receivedTimestamp )
        {
            throw new NotImplementedException();
        }

        public List<AisPositionReportClassAMessageBaseEntity> GetAisPositionReportClassAMessageBaseCollectionAtReceivedTimestamp( DateTime receivedTimestamp )
        {
            throw new NotImplementedException();
        }

        public List<AisPositionReportClassAMessageBaseEntity> GetAisPositionReportClassAMessageBaseCollectionFromReceivedTimestamp( DateTime receivedTimestamp )
        {
            throw new NotImplementedException();
        }

        public List<AisPositionReportClassAMessageBaseEntity> GetAisPositionReportClassAMessageBaseCollectionUntilReceivedTimestamp( DateTime receivedTimestamp )
        {
            throw new NotImplementedException();
        }

        public List<AisPositionReportClassAMessageBaseEntity> GetAisPositionReportClassAMessageBaseCollectionOverReceivedTimestamp( DateTime fromReceivedTimestamp, DateTime untilReceivedTimestamp )
        {
            throw new NotImplementedException();
        }

        public List<AisPositionReportClassAMessageBaseEntity> GetAisPositionReportClassAMessageBaseCollectionByMmsi( Guid? mmsi )
        {
            throw new NotImplementedException();
        }

        public List<AisPositionReportClassAMessageBaseEntity> GetAisPositionReportClassAMessageBaseCollectionByMmsiAndMessageSequenceNumber( Guid? mmsi, long messageSequenceNumber )
        {
            throw new NotImplementedException();
        }

        public List<AisPositionReportClassAMessageBaseEntity> GetAisPositionReportClassAMessageBaseCollectionByMmsiFromMessageSequenceNumber( Guid? mmsi, long messageSequenceNumber )
        {
            throw new NotImplementedException();
        }

        public List<AisPositionReportClassAMessageBaseEntity> GetAisPositionReportClassAMessageBaseCollectionByMmsiUntilMessageSequenceNumber( Guid? mmsi, long messageSequenceNumber )
        {
            throw new NotImplementedException();
        }

        public List<AisPositionReportClassAMessageBaseEntity> GetAisPositionReportClassAMessageBaseCollectionByMmsiOverMessageSequenceNumber( Guid mmsi, long fromMessageSequenceNumber, long untilMessageSequenceNumber )
        {
            throw new NotImplementedException();
        }

        public IList<AisPositionReportClassAAssignedScheduleMessageEntity> GetAisPositionReportClassAAssignedScheduleMessageCollection( )
        {
            throw new NotImplementedException();
        }

        public List<AisPositionReportClassAAssignedScheduleMessageEntity> GetAisPositionReportClassAAssignedScheduleMessageCollectionByAisDevice( Guid aisDevice )
        {
            throw new NotImplementedException();
        }

        public AisPositionReportClassAAssignedScheduleMessageEntity? GetAisPositionReportClassAAssignedScheduleMessageByAisDeviceAndReceivedTimestamp( Guid aisDevice, DateTime receivedTimestamp )
        {
            throw new NotImplementedException();
        }

        public AisPositionReportClassAAssignedScheduleMessageEntity? GetAisPositionReportClassAAssignedScheduleMessageByAisDeviceAtReceivedTimestamp( Guid aisDevice, DateTime receivedTimestamp )
        {
            throw new NotImplementedException();
        }

        public List<AisPositionReportClassAAssignedScheduleMessageEntity> GetAisPositionReportClassAAssignedScheduleMessageByAisDeviceFromReceivedTimestamp( Guid aisDevice, DateTime receivedTimestamp )
        {
            throw new NotImplementedException();
        }

        public List<AisPositionReportClassAAssignedScheduleMessageEntity> GetAisPositionReportClassAAssignedScheduleMessageByAisDeviceUntilReceivedTimestamp( Guid aisDevice, DateTime receivedTimestamp )
        {
            throw new NotImplementedException();
        }

        public List<AisPositionReportClassAAssignedScheduleMessageEntity> GetAisPositionReportClassAAssignedScheduleMessageByAisDeviceOverReceivedTimestamp( Guid aisDevice, DateTime fromReceivedTimestamp, DateTime untilReceivedTimestamp )
        {
            throw new NotImplementedException();
        }

        public List<AisPositionReportClassAAssignedScheduleMessageEntity> GetAisPositionReportClassAAssignedScheduleMessageCollectionByReceivedTimestamp( DateTime receivedTimestamp )
        {
            throw new NotImplementedException();
        }

        public List<AisPositionReportClassAAssignedScheduleMessageEntity> GetAisPositionReportClassAAssignedScheduleMessageCollectionAtReceivedTimestamp( DateTime receivedTimestamp )
        {
            throw new NotImplementedException();
        }

        public List<AisPositionReportClassAAssignedScheduleMessageEntity> GetAisPositionReportClassAAssignedScheduleMessageCollectionFromReceivedTimestamp( DateTime receivedTimestamp )
        {
            throw new NotImplementedException();
        }

        public List<AisPositionReportClassAAssignedScheduleMessageEntity> GetAisPositionReportClassAAssignedScheduleMessageCollectionUntilReceivedTimestamp( DateTime receivedTimestamp )
        {
            throw new NotImplementedException();
        }

        public List<AisPositionReportClassAAssignedScheduleMessageEntity> GetAisPositionReportClassAAssignedScheduleMessageCollectionOverReceivedTimestamp( DateTime fromReceivedTimestamp, DateTime untilReceivedTimestamp )
        {
            throw new NotImplementedException();
        }

        public List<AisPositionReportClassAAssignedScheduleMessageEntity> GetAisPositionReportClassAAssignedScheduleMessageCollectionByMmsi( Guid? mmsi )
        {
            throw new NotImplementedException();
        }

        public List<AisPositionReportClassAAssignedScheduleMessageEntity> GetAisPositionReportClassAAssignedScheduleMessageCollectionByMmsiAndMessageSequenceNumber( Guid? mmsi, long messageSequenceNumber )
        {
            throw new NotImplementedException();
        }

        public List<AisPositionReportClassAAssignedScheduleMessageEntity> GetAisPositionReportClassAAssignedScheduleMessageCollectionByMmsiFromMessageSequenceNumber( Guid? mmsi, long messageSequenceNumber )
        {
            throw new NotImplementedException();
        }

        public List<AisPositionReportClassAAssignedScheduleMessageEntity> GetAisPositionReportClassAAssignedScheduleMessageCollectionByMmsiUntilMessageSequenceNumber( Guid? mmsi, long messageSequenceNumber )
        {
            throw new NotImplementedException();
        }

        public List<AisPositionReportClassAAssignedScheduleMessageEntity> GetAisPositionReportClassAAssignedScheduleMessageCollectionByMmsiOverMessageSequenceNumber( Guid mmsi, long fromMessageSequenceNumber, long untilMessageSequenceNumber )
        {
            throw new NotImplementedException();
        }

        public IList<AisPositionReportClassAMessageEntity> GetAisPositionReportClassAMessageCollection( )
        {
            throw new NotImplementedException();
        }

        public List<AisPositionReportClassAMessageEntity> GetAisPositionReportClassAMessageCollectionByAisDevice( Guid aisDevice )
        {
            throw new NotImplementedException();
        }

        public AisPositionReportClassAMessageEntity? GetAisPositionReportClassAMessageByAisDeviceAndReceivedTimestamp( Guid aisDevice, DateTime receivedTimestamp )
        {
            throw new NotImplementedException();
        }

        public AisPositionReportClassAMessageEntity? GetAisPositionReportClassAMessageByAisDeviceAtReceivedTimestamp( Guid aisDevice, DateTime receivedTimestamp )
        {
            throw new NotImplementedException();
        }

        public List<AisPositionReportClassAMessageEntity> GetAisPositionReportClassAMessageByAisDeviceFromReceivedTimestamp( Guid aisDevice, DateTime receivedTimestamp )
        {
            throw new NotImplementedException();
        }

        public List<AisPositionReportClassAMessageEntity> GetAisPositionReportClassAMessageByAisDeviceUntilReceivedTimestamp( Guid aisDevice, DateTime receivedTimestamp )
        {
            throw new NotImplementedException();
        }

        public List<AisPositionReportClassAMessageEntity> GetAisPositionReportClassAMessageByAisDeviceOverReceivedTimestamp( Guid aisDevice, DateTime fromReceivedTimestamp, DateTime untilReceivedTimestamp )
        {
            throw new NotImplementedException();
        }

        public List<AisPositionReportClassAMessageEntity> GetAisPositionReportClassAMessageCollectionByReceivedTimestamp( DateTime receivedTimestamp )
        {
            throw new NotImplementedException();
        }

        public List<AisPositionReportClassAMessageEntity> GetAisPositionReportClassAMessageCollectionAtReceivedTimestamp( DateTime receivedTimestamp )
        {
            throw new NotImplementedException();
        }

        public List<AisPositionReportClassAMessageEntity> GetAisPositionReportClassAMessageCollectionFromReceivedTimestamp( DateTime receivedTimestamp )
        {
            throw new NotImplementedException();
        }

        public List<AisPositionReportClassAMessageEntity> GetAisPositionReportClassAMessageCollectionUntilReceivedTimestamp( DateTime receivedTimestamp )
        {
            throw new NotImplementedException();
        }

        public List<AisPositionReportClassAMessageEntity> GetAisPositionReportClassAMessageCollectionOverReceivedTimestamp( DateTime fromReceivedTimestamp, DateTime untilReceivedTimestamp )
        {
            throw new NotImplementedException();
        }

        public List<AisPositionReportClassAMessageEntity> GetAisPositionReportClassAMessageCollectionByMmsi( Guid? mmsi )
        {
            throw new NotImplementedException();
        }

        public List<AisPositionReportClassAMessageEntity> GetAisPositionReportClassAMessageCollectionByMmsiAndMessageSequenceNumber( Guid? mmsi, long messageSequenceNumber )
        {
            throw new NotImplementedException();
        }

        public List<AisPositionReportClassAMessageEntity> GetAisPositionReportClassAMessageCollectionByMmsiFromMessageSequenceNumber( Guid? mmsi, long messageSequenceNumber )
        {
            throw new NotImplementedException();
        }

        public List<AisPositionReportClassAMessageEntity> GetAisPositionReportClassAMessageCollectionByMmsiUntilMessageSequenceNumber( Guid? mmsi, long messageSequenceNumber )
        {
            throw new NotImplementedException();
        }

        public List<AisPositionReportClassAMessageEntity> GetAisPositionReportClassAMessageCollectionByMmsiOverMessageSequenceNumber( Guid mmsi, long fromMessageSequenceNumber, long untilMessageSequenceNumber )
        {
            throw new NotImplementedException();
        }

        public IList<AisPositionReportClassAResponseToInterrogationMessageEntity> GetAisPositionReportClassAResponseToInterrogationMessageCollection( )
        {
            throw new NotImplementedException();
        }

        public List<AisPositionReportClassAResponseToInterrogationMessageEntity> GetAisPositionReportClassAResponseToInterrogationMessageCollectionByAisDevice( Guid aisDevice )
        {
            throw new NotImplementedException();
        }

        public AisPositionReportClassAResponseToInterrogationMessageEntity? GetAisPositionReportClassAResponseToInterrogationMessageByAisDeviceAndReceivedTimestamp( Guid aisDevice, DateTime receivedTimestamp )
        {
            throw new NotImplementedException();
        }

        public AisPositionReportClassAResponseToInterrogationMessageEntity? GetAisPositionReportClassAResponseToInterrogationMessageByAisDeviceAtReceivedTimestamp( Guid aisDevice, DateTime receivedTimestamp )
        {
            throw new NotImplementedException();
        }

        public List<AisPositionReportClassAResponseToInterrogationMessageEntity> GetAisPositionReportClassAResponseToInterrogationMessageByAisDeviceFromReceivedTimestamp( Guid aisDevice, DateTime receivedTimestamp )
        {
            throw new NotImplementedException();
        }

        public List<AisPositionReportClassAResponseToInterrogationMessageEntity> GetAisPositionReportClassAResponseToInterrogationMessageByAisDeviceUntilReceivedTimestamp( Guid aisDevice, DateTime receivedTimestamp )
        {
            throw new NotImplementedException();
        }

        public List<AisPositionReportClassAResponseToInterrogationMessageEntity> GetAisPositionReportClassAResponseToInterrogationMessageByAisDeviceOverReceivedTimestamp( Guid aisDevice, DateTime fromReceivedTimestamp, DateTime untilReceivedTimestamp )
        {
            throw new NotImplementedException();
        }

        public List<AisPositionReportClassAResponseToInterrogationMessageEntity> GetAisPositionReportClassAResponseToInterrogationMessageCollectionByReceivedTimestamp( DateTime receivedTimestamp )
        {
            throw new NotImplementedException();
        }

        public List<AisPositionReportClassAResponseToInterrogationMessageEntity> GetAisPositionReportClassAResponseToInterrogationMessageCollectionAtReceivedTimestamp( DateTime receivedTimestamp )
        {
            throw new NotImplementedException();
        }

        public List<AisPositionReportClassAResponseToInterrogationMessageEntity> GetAisPositionReportClassAResponseToInterrogationMessageCollectionFromReceivedTimestamp( DateTime receivedTimestamp )
        {
            throw new NotImplementedException();
        }

        public List<AisPositionReportClassAResponseToInterrogationMessageEntity> GetAisPositionReportClassAResponseToInterrogationMessageCollectionUntilReceivedTimestamp( DateTime receivedTimestamp )
        {
            throw new NotImplementedException();
        }

        public List<AisPositionReportClassAResponseToInterrogationMessageEntity> GetAisPositionReportClassAResponseToInterrogationMessageCollectionOverReceivedTimestamp( DateTime fromReceivedTimestamp, DateTime untilReceivedTimestamp )
        {
            throw new NotImplementedException();
        }

        public List<AisPositionReportClassAResponseToInterrogationMessageEntity> GetAisPositionReportClassAResponseToInterrogationMessageCollectionByMmsi( Guid? mmsi )
        {
            throw new NotImplementedException();
        }

        public List<AisPositionReportClassAResponseToInterrogationMessageEntity> GetAisPositionReportClassAResponseToInterrogationMessageCollectionByMmsiAndMessageSequenceNumber( Guid? mmsi, long messageSequenceNumber )
        {
            throw new NotImplementedException();
        }

        public List<AisPositionReportClassAResponseToInterrogationMessageEntity> GetAisPositionReportClassAResponseToInterrogationMessageCollectionByMmsiFromMessageSequenceNumber( Guid? mmsi, long messageSequenceNumber )
        {
            throw new NotImplementedException();
        }

        public List<AisPositionReportClassAResponseToInterrogationMessageEntity> GetAisPositionReportClassAResponseToInterrogationMessageCollectionByMmsiUntilMessageSequenceNumber( Guid? mmsi, long messageSequenceNumber )
        {
            throw new NotImplementedException();
        }

        public List<AisPositionReportClassAResponseToInterrogationMessageEntity> GetAisPositionReportClassAResponseToInterrogationMessageCollectionByMmsiOverMessageSequenceNumber( Guid mmsi, long fromMessageSequenceNumber, long untilMessageSequenceNumber )
        {
            throw new NotImplementedException();
        }

        public IList<AisPositionReportForLongRangeApplicationsMessageEntity> GetAisPositionReportForLongRangeApplicationsMessageCollection( )
        {
            throw new NotImplementedException();
        }

        public List<AisPositionReportForLongRangeApplicationsMessageEntity> GetAisPositionReportForLongRangeApplicationsMessageCollectionByAisDevice( Guid aisDevice )
        {
            throw new NotImplementedException();
        }

        public AisPositionReportForLongRangeApplicationsMessageEntity? GetAisPositionReportForLongRangeApplicationsMessageByAisDeviceAndReceivedTimestamp( Guid aisDevice, DateTime receivedTimestamp )
        {
            throw new NotImplementedException();
        }

        public AisPositionReportForLongRangeApplicationsMessageEntity? GetAisPositionReportForLongRangeApplicationsMessageByAisDeviceAtReceivedTimestamp( Guid aisDevice, DateTime receivedTimestamp )
        {
            throw new NotImplementedException();
        }

        public List<AisPositionReportForLongRangeApplicationsMessageEntity> GetAisPositionReportForLongRangeApplicationsMessageByAisDeviceFromReceivedTimestamp( Guid aisDevice, DateTime receivedTimestamp )
        {
            throw new NotImplementedException();
        }

        public List<AisPositionReportForLongRangeApplicationsMessageEntity> GetAisPositionReportForLongRangeApplicationsMessageByAisDeviceUntilReceivedTimestamp( Guid aisDevice, DateTime receivedTimestamp )
        {
            throw new NotImplementedException();
        }

        public List<AisPositionReportForLongRangeApplicationsMessageEntity> GetAisPositionReportForLongRangeApplicationsMessageByAisDeviceOverReceivedTimestamp( Guid aisDevice, DateTime fromReceivedTimestamp, DateTime untilReceivedTimestamp )
        {
            throw new NotImplementedException();
        }

        public List<AisPositionReportForLongRangeApplicationsMessageEntity> GetAisPositionReportForLongRangeApplicationsMessageCollectionByReceivedTimestamp( DateTime receivedTimestamp )
        {
            throw new NotImplementedException();
        }

        public List<AisPositionReportForLongRangeApplicationsMessageEntity> GetAisPositionReportForLongRangeApplicationsMessageCollectionAtReceivedTimestamp( DateTime receivedTimestamp )
        {
            throw new NotImplementedException();
        }

        public List<AisPositionReportForLongRangeApplicationsMessageEntity> GetAisPositionReportForLongRangeApplicationsMessageCollectionFromReceivedTimestamp( DateTime receivedTimestamp )
        {
            throw new NotImplementedException();
        }

        public List<AisPositionReportForLongRangeApplicationsMessageEntity> GetAisPositionReportForLongRangeApplicationsMessageCollectionUntilReceivedTimestamp( DateTime receivedTimestamp )
        {
            throw new NotImplementedException();
        }

        public List<AisPositionReportForLongRangeApplicationsMessageEntity> GetAisPositionReportForLongRangeApplicationsMessageCollectionOverReceivedTimestamp( DateTime fromReceivedTimestamp, DateTime untilReceivedTimestamp )
        {
            throw new NotImplementedException();
        }

        public List<AisPositionReportForLongRangeApplicationsMessageEntity> GetAisPositionReportForLongRangeApplicationsMessageCollectionByMmsi( Guid? mmsi )
        {
            throw new NotImplementedException();
        }

        public List<AisPositionReportForLongRangeApplicationsMessageEntity> GetAisPositionReportForLongRangeApplicationsMessageCollectionByMmsiAndMessageSequenceNumber( Guid? mmsi, long messageSequenceNumber )
        {
            throw new NotImplementedException();
        }

        public List<AisPositionReportForLongRangeApplicationsMessageEntity> GetAisPositionReportForLongRangeApplicationsMessageCollectionByMmsiFromMessageSequenceNumber( Guid? mmsi, long messageSequenceNumber )
        {
            throw new NotImplementedException();
        }

        public List<AisPositionReportForLongRangeApplicationsMessageEntity> GetAisPositionReportForLongRangeApplicationsMessageCollectionByMmsiUntilMessageSequenceNumber( Guid? mmsi, long messageSequenceNumber )
        {
            throw new NotImplementedException();
        }

        public List<AisPositionReportForLongRangeApplicationsMessageEntity> GetAisPositionReportForLongRangeApplicationsMessageCollectionByMmsiOverMessageSequenceNumber( Guid mmsi, long fromMessageSequenceNumber, long untilMessageSequenceNumber )
        {
            throw new NotImplementedException();
        }

        public IList<AisSafetyRelatedAcknowledgmentMessageEntity> GetAisSafetyRelatedAcknowledgmentMessageCollection( )
        {
            throw new NotImplementedException();
        }

        public List<AisSafetyRelatedAcknowledgmentMessageEntity> GetAisSafetyRelatedAcknowledgmentMessageCollectionByAisDevice( Guid aisDevice )
        {
            throw new NotImplementedException();
        }

        public AisSafetyRelatedAcknowledgmentMessageEntity? GetAisSafetyRelatedAcknowledgmentMessageByAisDeviceAndReceivedTimestamp( Guid aisDevice, DateTime receivedTimestamp )
        {
            throw new NotImplementedException();
        }

        public AisSafetyRelatedAcknowledgmentMessageEntity? GetAisSafetyRelatedAcknowledgmentMessageByAisDeviceAtReceivedTimestamp( Guid aisDevice, DateTime receivedTimestamp )
        {
            throw new NotImplementedException();
        }

        public List<AisSafetyRelatedAcknowledgmentMessageEntity> GetAisSafetyRelatedAcknowledgmentMessageByAisDeviceFromReceivedTimestamp( Guid aisDevice, DateTime receivedTimestamp )
        {
            throw new NotImplementedException();
        }

        public List<AisSafetyRelatedAcknowledgmentMessageEntity> GetAisSafetyRelatedAcknowledgmentMessageByAisDeviceUntilReceivedTimestamp( Guid aisDevice, DateTime receivedTimestamp )
        {
            throw new NotImplementedException();
        }

        public List<AisSafetyRelatedAcknowledgmentMessageEntity> GetAisSafetyRelatedAcknowledgmentMessageByAisDeviceOverReceivedTimestamp( Guid aisDevice, DateTime fromReceivedTimestamp, DateTime untilReceivedTimestamp )
        {
            throw new NotImplementedException();
        }

        public List<AisSafetyRelatedAcknowledgmentMessageEntity> GetAisSafetyRelatedAcknowledgmentMessageCollectionByReceivedTimestamp( DateTime receivedTimestamp )
        {
            throw new NotImplementedException();
        }

        public List<AisSafetyRelatedAcknowledgmentMessageEntity> GetAisSafetyRelatedAcknowledgmentMessageCollectionAtReceivedTimestamp( DateTime receivedTimestamp )
        {
            throw new NotImplementedException();
        }

        public List<AisSafetyRelatedAcknowledgmentMessageEntity> GetAisSafetyRelatedAcknowledgmentMessageCollectionFromReceivedTimestamp( DateTime receivedTimestamp )
        {
            throw new NotImplementedException();
        }

        public List<AisSafetyRelatedAcknowledgmentMessageEntity> GetAisSafetyRelatedAcknowledgmentMessageCollectionUntilReceivedTimestamp( DateTime receivedTimestamp )
        {
            throw new NotImplementedException();
        }

        public List<AisSafetyRelatedAcknowledgmentMessageEntity> GetAisSafetyRelatedAcknowledgmentMessageCollectionOverReceivedTimestamp( DateTime fromReceivedTimestamp, DateTime untilReceivedTimestamp )
        {
            throw new NotImplementedException();
        }

        public List<AisSafetyRelatedAcknowledgmentMessageEntity> GetAisSafetyRelatedAcknowledgmentMessageCollectionByMmsi( Guid? mmsi )
        {
            throw new NotImplementedException();
        }

        public List<AisSafetyRelatedAcknowledgmentMessageEntity> GetAisSafetyRelatedAcknowledgmentMessageCollectionByMmsiAndMessageSequenceNumber( Guid? mmsi, long messageSequenceNumber )
        {
            throw new NotImplementedException();
        }

        public List<AisSafetyRelatedAcknowledgmentMessageEntity> GetAisSafetyRelatedAcknowledgmentMessageCollectionByMmsiFromMessageSequenceNumber( Guid? mmsi, long messageSequenceNumber )
        {
            throw new NotImplementedException();
        }

        public List<AisSafetyRelatedAcknowledgmentMessageEntity> GetAisSafetyRelatedAcknowledgmentMessageCollectionByMmsiUntilMessageSequenceNumber( Guid? mmsi, long messageSequenceNumber )
        {
            throw new NotImplementedException();
        }

        public List<AisSafetyRelatedAcknowledgmentMessageEntity> GetAisSafetyRelatedAcknowledgmentMessageCollectionByMmsiOverMessageSequenceNumber( Guid mmsi, long fromMessageSequenceNumber, long untilMessageSequenceNumber )
        {
            throw new NotImplementedException();
        }

        public IList<AisStandardClassBCsPositionReportMessageEntity> GetAisStandardClassBCsPositionReportMessageCollection( )
        {
            throw new NotImplementedException();
        }

        public List<AisStandardClassBCsPositionReportMessageEntity> GetAisStandardClassBCsPositionReportMessageCollectionByAisDevice( Guid aisDevice )
        {
            throw new NotImplementedException();
        }

        public AisStandardClassBCsPositionReportMessageEntity? GetAisStandardClassBCsPositionReportMessageByAisDeviceAndReceivedTimestamp( Guid aisDevice, DateTime receivedTimestamp )
        {
            throw new NotImplementedException();
        }

        public AisStandardClassBCsPositionReportMessageEntity? GetAisStandardClassBCsPositionReportMessageByAisDeviceAtReceivedTimestamp( Guid aisDevice, DateTime receivedTimestamp )
        {
            throw new NotImplementedException();
        }

        public List<AisStandardClassBCsPositionReportMessageEntity> GetAisStandardClassBCsPositionReportMessageByAisDeviceFromReceivedTimestamp( Guid aisDevice, DateTime receivedTimestamp )
        {
            throw new NotImplementedException();
        }

        public List<AisStandardClassBCsPositionReportMessageEntity> GetAisStandardClassBCsPositionReportMessageByAisDeviceUntilReceivedTimestamp( Guid aisDevice, DateTime receivedTimestamp )
        {
            throw new NotImplementedException();
        }

        public List<AisStandardClassBCsPositionReportMessageEntity> GetAisStandardClassBCsPositionReportMessageByAisDeviceOverReceivedTimestamp( Guid aisDevice, DateTime fromReceivedTimestamp, DateTime untilReceivedTimestamp )
        {
            throw new NotImplementedException();
        }

        public List<AisStandardClassBCsPositionReportMessageEntity> GetAisStandardClassBCsPositionReportMessageCollectionByReceivedTimestamp( DateTime receivedTimestamp )
        {
            throw new NotImplementedException();
        }

        public List<AisStandardClassBCsPositionReportMessageEntity> GetAisStandardClassBCsPositionReportMessageCollectionAtReceivedTimestamp( DateTime receivedTimestamp )
        {
            throw new NotImplementedException();
        }

        public List<AisStandardClassBCsPositionReportMessageEntity> GetAisStandardClassBCsPositionReportMessageCollectionFromReceivedTimestamp( DateTime receivedTimestamp )
        {
            throw new NotImplementedException();
        }

        public List<AisStandardClassBCsPositionReportMessageEntity> GetAisStandardClassBCsPositionReportMessageCollectionUntilReceivedTimestamp( DateTime receivedTimestamp )
        {
            throw new NotImplementedException();
        }

        public List<AisStandardClassBCsPositionReportMessageEntity> GetAisStandardClassBCsPositionReportMessageCollectionOverReceivedTimestamp( DateTime fromReceivedTimestamp, DateTime untilReceivedTimestamp )
        {
            throw new NotImplementedException();
        }

        public List<AisStandardClassBCsPositionReportMessageEntity> GetAisStandardClassBCsPositionReportMessageCollectionByMmsi( Guid? mmsi )
        {
            throw new NotImplementedException();
        }

        public List<AisStandardClassBCsPositionReportMessageEntity> GetAisStandardClassBCsPositionReportMessageCollectionByMmsiAndMessageSequenceNumber( Guid? mmsi, long messageSequenceNumber )
        {
            throw new NotImplementedException();
        }

        public List<AisStandardClassBCsPositionReportMessageEntity> GetAisStandardClassBCsPositionReportMessageCollectionByMmsiFromMessageSequenceNumber( Guid? mmsi, long messageSequenceNumber )
        {
            throw new NotImplementedException();
        }

        public List<AisStandardClassBCsPositionReportMessageEntity> GetAisStandardClassBCsPositionReportMessageCollectionByMmsiUntilMessageSequenceNumber( Guid? mmsi, long messageSequenceNumber )
        {
            throw new NotImplementedException();
        }

        public List<AisStandardClassBCsPositionReportMessageEntity> GetAisStandardClassBCsPositionReportMessageCollectionByMmsiOverMessageSequenceNumber( Guid mmsi, long fromMessageSequenceNumber, long untilMessageSequenceNumber )
        {
            throw new NotImplementedException();
        }

        public IList<AisStandardSarAircraftPositionReportMessageEntity> GetAisStandardSarAircraftPositionReportMessageCollection( )
        {
            throw new NotImplementedException();
        }

        public List<AisStandardSarAircraftPositionReportMessageEntity> GetAisStandardSarAircraftPositionReportMessageCollectionByAisDevice( Guid aisDevice )
        {
            throw new NotImplementedException();
        }

        public AisStandardSarAircraftPositionReportMessageEntity? GetAisStandardSarAircraftPositionReportMessageByAisDeviceAndReceivedTimestamp( Guid aisDevice, DateTime receivedTimestamp )
        {
            throw new NotImplementedException();
        }

        public AisStandardSarAircraftPositionReportMessageEntity? GetAisStandardSarAircraftPositionReportMessageByAisDeviceAtReceivedTimestamp( Guid aisDevice, DateTime receivedTimestamp )
        {
            throw new NotImplementedException();
        }

        public List<AisStandardSarAircraftPositionReportMessageEntity> GetAisStandardSarAircraftPositionReportMessageByAisDeviceFromReceivedTimestamp( Guid aisDevice, DateTime receivedTimestamp )
        {
            throw new NotImplementedException();
        }

        public List<AisStandardSarAircraftPositionReportMessageEntity> GetAisStandardSarAircraftPositionReportMessageByAisDeviceUntilReceivedTimestamp( Guid aisDevice, DateTime receivedTimestamp )
        {
            throw new NotImplementedException();
        }

        public List<AisStandardSarAircraftPositionReportMessageEntity> GetAisStandardSarAircraftPositionReportMessageByAisDeviceOverReceivedTimestamp( Guid aisDevice, DateTime fromReceivedTimestamp, DateTime untilReceivedTimestamp )
        {
            throw new NotImplementedException();
        }

        public List<AisStandardSarAircraftPositionReportMessageEntity> GetAisStandardSarAircraftPositionReportMessageCollectionByReceivedTimestamp( DateTime receivedTimestamp )
        {
            throw new NotImplementedException();
        }

        public List<AisStandardSarAircraftPositionReportMessageEntity> GetAisStandardSarAircraftPositionReportMessageCollectionAtReceivedTimestamp( DateTime receivedTimestamp )
        {
            throw new NotImplementedException();
        }

        public List<AisStandardSarAircraftPositionReportMessageEntity> GetAisStandardSarAircraftPositionReportMessageCollectionFromReceivedTimestamp( DateTime receivedTimestamp )
        {
            throw new NotImplementedException();
        }

        public List<AisStandardSarAircraftPositionReportMessageEntity> GetAisStandardSarAircraftPositionReportMessageCollectionUntilReceivedTimestamp( DateTime receivedTimestamp )
        {
            throw new NotImplementedException();
        }

        public List<AisStandardSarAircraftPositionReportMessageEntity> GetAisStandardSarAircraftPositionReportMessageCollectionOverReceivedTimestamp( DateTime fromReceivedTimestamp, DateTime untilReceivedTimestamp )
        {
            throw new NotImplementedException();
        }

        public List<AisStandardSarAircraftPositionReportMessageEntity> GetAisStandardSarAircraftPositionReportMessageCollectionByMmsi( Guid? mmsi )
        {
            throw new NotImplementedException();
        }

        public List<AisStandardSarAircraftPositionReportMessageEntity> GetAisStandardSarAircraftPositionReportMessageCollectionByMmsiAndMessageSequenceNumber( Guid? mmsi, long messageSequenceNumber )
        {
            throw new NotImplementedException();
        }

        public List<AisStandardSarAircraftPositionReportMessageEntity> GetAisStandardSarAircraftPositionReportMessageCollectionByMmsiFromMessageSequenceNumber( Guid? mmsi, long messageSequenceNumber )
        {
            throw new NotImplementedException();
        }

        public List<AisStandardSarAircraftPositionReportMessageEntity> GetAisStandardSarAircraftPositionReportMessageCollectionByMmsiUntilMessageSequenceNumber( Guid? mmsi, long messageSequenceNumber )
        {
            throw new NotImplementedException();
        }

        public List<AisStandardSarAircraftPositionReportMessageEntity> GetAisStandardSarAircraftPositionReportMessageCollectionByMmsiOverMessageSequenceNumber( Guid mmsi, long fromMessageSequenceNumber, long untilMessageSequenceNumber )
        {
            throw new NotImplementedException();
        }

        public IList<AisStaticAndVoyageRelatedDataMessageEntity> GetAisStaticAndVoyageRelatedDataMessageCollection( )
        {
            throw new NotImplementedException();
        }

        public List<AisStaticAndVoyageRelatedDataMessageEntity> GetAisStaticAndVoyageRelatedDataMessageCollectionByAisDevice( Guid aisDevice )
        {
            throw new NotImplementedException();
        }

        public AisStaticAndVoyageRelatedDataMessageEntity? GetAisStaticAndVoyageRelatedDataMessageByAisDeviceAndReceivedTimestamp( Guid aisDevice, DateTime receivedTimestamp )
        {
            throw new NotImplementedException();
        }

        public AisStaticAndVoyageRelatedDataMessageEntity? GetAisStaticAndVoyageRelatedDataMessageByAisDeviceAtReceivedTimestamp( Guid aisDevice, DateTime receivedTimestamp )
        {
            throw new NotImplementedException();
        }

        public List<AisStaticAndVoyageRelatedDataMessageEntity> GetAisStaticAndVoyageRelatedDataMessageByAisDeviceFromReceivedTimestamp( Guid aisDevice, DateTime receivedTimestamp )
        {
            throw new NotImplementedException();
        }

        public List<AisStaticAndVoyageRelatedDataMessageEntity> GetAisStaticAndVoyageRelatedDataMessageByAisDeviceUntilReceivedTimestamp( Guid aisDevice, DateTime receivedTimestamp )
        {
            throw new NotImplementedException();
        }

        public List<AisStaticAndVoyageRelatedDataMessageEntity> GetAisStaticAndVoyageRelatedDataMessageByAisDeviceOverReceivedTimestamp( Guid aisDevice, DateTime fromReceivedTimestamp, DateTime untilReceivedTimestamp )
        {
            throw new NotImplementedException();
        }

        public List<AisStaticAndVoyageRelatedDataMessageEntity> GetAisStaticAndVoyageRelatedDataMessageCollectionByReceivedTimestamp( DateTime receivedTimestamp )
        {
            throw new NotImplementedException();
        }

        public List<AisStaticAndVoyageRelatedDataMessageEntity> GetAisStaticAndVoyageRelatedDataMessageCollectionAtReceivedTimestamp( DateTime receivedTimestamp )
        {
            throw new NotImplementedException();
        }

        public List<AisStaticAndVoyageRelatedDataMessageEntity> GetAisStaticAndVoyageRelatedDataMessageCollectionFromReceivedTimestamp( DateTime receivedTimestamp )
        {
            throw new NotImplementedException();
        }

        public List<AisStaticAndVoyageRelatedDataMessageEntity> GetAisStaticAndVoyageRelatedDataMessageCollectionUntilReceivedTimestamp( DateTime receivedTimestamp )
        {
            throw new NotImplementedException();
        }

        public List<AisStaticAndVoyageRelatedDataMessageEntity> GetAisStaticAndVoyageRelatedDataMessageCollectionOverReceivedTimestamp( DateTime fromReceivedTimestamp, DateTime untilReceivedTimestamp )
        {
            throw new NotImplementedException();
        }

        public List<AisStaticAndVoyageRelatedDataMessageEntity> GetAisStaticAndVoyageRelatedDataMessageCollectionByMmsi( Guid? mmsi )
        {
            throw new NotImplementedException();
        }

        public List<AisStaticAndVoyageRelatedDataMessageEntity> GetAisStaticAndVoyageRelatedDataMessageCollectionByMmsiAndMessageSequenceNumber( Guid? mmsi, long messageSequenceNumber )
        {
            throw new NotImplementedException();
        }

        public List<AisStaticAndVoyageRelatedDataMessageEntity> GetAisStaticAndVoyageRelatedDataMessageCollectionByMmsiFromMessageSequenceNumber( Guid? mmsi, long messageSequenceNumber )
        {
            throw new NotImplementedException();
        }

        public List<AisStaticAndVoyageRelatedDataMessageEntity> GetAisStaticAndVoyageRelatedDataMessageCollectionByMmsiUntilMessageSequenceNumber( Guid? mmsi, long messageSequenceNumber )
        {
            throw new NotImplementedException();
        }

        public List<AisStaticAndVoyageRelatedDataMessageEntity> GetAisStaticAndVoyageRelatedDataMessageCollectionByMmsiOverMessageSequenceNumber( Guid mmsi, long fromMessageSequenceNumber, long untilMessageSequenceNumber )
        {
            throw new NotImplementedException();
        }

        public List<AisStaticAndVoyageRelatedDataMessageEntity> GetAisStaticAndVoyageRelatedDataMessageCollectionByImoNumber( Guid? imoNumber )
        {
            throw new NotImplementedException();
        }

        public List<AisStaticAndVoyageRelatedDataMessageEntity> GetAisStaticAndVoyageRelatedDataMessageCollectionByCallsign( Guid? callsign )
        {
            throw new NotImplementedException();
        }

        public List<AisStaticAndVoyageRelatedDataMessageEntity> GetAisStaticAndVoyageRelatedDataMessageCollectionByShipName( Guid? shipName )
        {
            throw new NotImplementedException();
        }

        public IList<AisStaticDataReportMessageEntity> GetAisStaticDataReportMessageCollection( )
        {
            throw new NotImplementedException();
        }

        public List<AisStaticDataReportMessageEntity> GetAisStaticDataReportMessageCollectionByAisDevice( Guid aisDevice )
        {
            throw new NotImplementedException();
        }

        public AisStaticDataReportMessageEntity? GetAisStaticDataReportMessageByAisDeviceAndReceivedTimestamp( Guid aisDevice, DateTime receivedTimestamp )
        {
            throw new NotImplementedException();
        }

        public AisStaticDataReportMessageEntity? GetAisStaticDataReportMessageByAisDeviceAtReceivedTimestamp( Guid aisDevice, DateTime receivedTimestamp )
        {
            throw new NotImplementedException();
        }

        public List<AisStaticDataReportMessageEntity> GetAisStaticDataReportMessageByAisDeviceFromReceivedTimestamp( Guid aisDevice, DateTime receivedTimestamp )
        {
            throw new NotImplementedException();
        }

        public List<AisStaticDataReportMessageEntity> GetAisStaticDataReportMessageByAisDeviceUntilReceivedTimestamp( Guid aisDevice, DateTime receivedTimestamp )
        {
            throw new NotImplementedException();
        }

        public List<AisStaticDataReportMessageEntity> GetAisStaticDataReportMessageByAisDeviceOverReceivedTimestamp( Guid aisDevice, DateTime fromReceivedTimestamp, DateTime untilReceivedTimestamp )
        {
            throw new NotImplementedException();
        }

        public List<AisStaticDataReportMessageEntity> GetAisStaticDataReportMessageCollectionByReceivedTimestamp( DateTime receivedTimestamp )
        {
            throw new NotImplementedException();
        }

        public List<AisStaticDataReportMessageEntity> GetAisStaticDataReportMessageCollectionAtReceivedTimestamp( DateTime receivedTimestamp )
        {
            throw new NotImplementedException();
        }

        public List<AisStaticDataReportMessageEntity> GetAisStaticDataReportMessageCollectionFromReceivedTimestamp( DateTime receivedTimestamp )
        {
            throw new NotImplementedException();
        }

        public List<AisStaticDataReportMessageEntity> GetAisStaticDataReportMessageCollectionUntilReceivedTimestamp( DateTime receivedTimestamp )
        {
            throw new NotImplementedException();
        }

        public List<AisStaticDataReportMessageEntity> GetAisStaticDataReportMessageCollectionOverReceivedTimestamp( DateTime fromReceivedTimestamp, DateTime untilReceivedTimestamp )
        {
            throw new NotImplementedException();
        }

        public List<AisStaticDataReportMessageEntity> GetAisStaticDataReportMessageCollectionByMmsi( Guid? mmsi )
        {
            throw new NotImplementedException();
        }

        public List<AisStaticDataReportMessageEntity> GetAisStaticDataReportMessageCollectionByMmsiAndMessageSequenceNumber( Guid? mmsi, long messageSequenceNumber )
        {
            throw new NotImplementedException();
        }

        public List<AisStaticDataReportMessageEntity> GetAisStaticDataReportMessageCollectionByMmsiFromMessageSequenceNumber( Guid? mmsi, long messageSequenceNumber )
        {
            throw new NotImplementedException();
        }

        public List<AisStaticDataReportMessageEntity> GetAisStaticDataReportMessageCollectionByMmsiUntilMessageSequenceNumber( Guid? mmsi, long messageSequenceNumber )
        {
            throw new NotImplementedException();
        }

        public List<AisStaticDataReportMessageEntity> GetAisStaticDataReportMessageCollectionByMmsiOverMessageSequenceNumber( Guid mmsi, long fromMessageSequenceNumber, long untilMessageSequenceNumber )
        {
            throw new NotImplementedException();
        }

        public IList<AisStaticDataReportPartAMessageEntity> GetAisStaticDataReportPartAMessageCollection( )
        {
            throw new NotImplementedException();
        }

        public List<AisStaticDataReportPartAMessageEntity> GetAisStaticDataReportPartAMessageCollectionByAisDevice( Guid aisDevice )
        {
            throw new NotImplementedException();
        }

        public AisStaticDataReportPartAMessageEntity? GetAisStaticDataReportPartAMessageByAisDeviceAndReceivedTimestamp( Guid aisDevice, DateTime receivedTimestamp )
        {
            throw new NotImplementedException();
        }

        public AisStaticDataReportPartAMessageEntity? GetAisStaticDataReportPartAMessageByAisDeviceAtReceivedTimestamp( Guid aisDevice, DateTime receivedTimestamp )
        {
            throw new NotImplementedException();
        }

        public List<AisStaticDataReportPartAMessageEntity> GetAisStaticDataReportPartAMessageByAisDeviceFromReceivedTimestamp( Guid aisDevice, DateTime receivedTimestamp )
        {
            throw new NotImplementedException();
        }

        public List<AisStaticDataReportPartAMessageEntity> GetAisStaticDataReportPartAMessageByAisDeviceUntilReceivedTimestamp( Guid aisDevice, DateTime receivedTimestamp )
        {
            throw new NotImplementedException();
        }

        public List<AisStaticDataReportPartAMessageEntity> GetAisStaticDataReportPartAMessageByAisDeviceOverReceivedTimestamp( Guid aisDevice, DateTime fromReceivedTimestamp, DateTime untilReceivedTimestamp )
        {
            throw new NotImplementedException();
        }

        public List<AisStaticDataReportPartAMessageEntity> GetAisStaticDataReportPartAMessageCollectionByReceivedTimestamp( DateTime receivedTimestamp )
        {
            throw new NotImplementedException();
        }

        public List<AisStaticDataReportPartAMessageEntity> GetAisStaticDataReportPartAMessageCollectionAtReceivedTimestamp( DateTime receivedTimestamp )
        {
            throw new NotImplementedException();
        }

        public List<AisStaticDataReportPartAMessageEntity> GetAisStaticDataReportPartAMessageCollectionFromReceivedTimestamp( DateTime receivedTimestamp )
        {
            throw new NotImplementedException();
        }

        public List<AisStaticDataReportPartAMessageEntity> GetAisStaticDataReportPartAMessageCollectionUntilReceivedTimestamp( DateTime receivedTimestamp )
        {
            throw new NotImplementedException();
        }

        public List<AisStaticDataReportPartAMessageEntity> GetAisStaticDataReportPartAMessageCollectionOverReceivedTimestamp( DateTime fromReceivedTimestamp, DateTime untilReceivedTimestamp )
        {
            throw new NotImplementedException();
        }

        public List<AisStaticDataReportPartAMessageEntity> GetAisStaticDataReportPartAMessageCollectionByMmsi( Guid? mmsi )
        {
            throw new NotImplementedException();
        }

        public List<AisStaticDataReportPartAMessageEntity> GetAisStaticDataReportPartAMessageCollectionByMmsiAndMessageSequenceNumber( Guid? mmsi, long messageSequenceNumber )
        {
            throw new NotImplementedException();
        }

        public List<AisStaticDataReportPartAMessageEntity> GetAisStaticDataReportPartAMessageCollectionByMmsiFromMessageSequenceNumber( Guid? mmsi, long messageSequenceNumber )
        {
            throw new NotImplementedException();
        }

        public List<AisStaticDataReportPartAMessageEntity> GetAisStaticDataReportPartAMessageCollectionByMmsiUntilMessageSequenceNumber( Guid? mmsi, long messageSequenceNumber )
        {
            throw new NotImplementedException();
        }

        public List<AisStaticDataReportPartAMessageEntity> GetAisStaticDataReportPartAMessageCollectionByMmsiOverMessageSequenceNumber( Guid mmsi, long fromMessageSequenceNumber, long untilMessageSequenceNumber )
        {
            throw new NotImplementedException();
        }

        public List<AisStaticDataReportPartAMessageEntity> GetAisStaticDataReportPartAMessageCollectionByShipName( Guid? shipName )
        {
            throw new NotImplementedException();
        }

        public IList<AisStaticDataReportPartBMessageEntity> GetAisStaticDataReportPartBMessageCollection( )
        {
            throw new NotImplementedException();
        }

        public List<AisStaticDataReportPartBMessageEntity> GetAisStaticDataReportPartBMessageCollectionByAisDevice( Guid aisDevice )
        {
            throw new NotImplementedException();
        }

        public AisStaticDataReportPartBMessageEntity? GetAisStaticDataReportPartBMessageByAisDeviceAndReceivedTimestamp( Guid aisDevice, DateTime receivedTimestamp )
        {
            throw new NotImplementedException();
        }

        public AisStaticDataReportPartBMessageEntity? GetAisStaticDataReportPartBMessageByAisDeviceAtReceivedTimestamp( Guid aisDevice, DateTime receivedTimestamp )
        {
            throw new NotImplementedException();
        }

        public List<AisStaticDataReportPartBMessageEntity> GetAisStaticDataReportPartBMessageByAisDeviceFromReceivedTimestamp( Guid aisDevice, DateTime receivedTimestamp )
        {
            throw new NotImplementedException();
        }

        public List<AisStaticDataReportPartBMessageEntity> GetAisStaticDataReportPartBMessageByAisDeviceUntilReceivedTimestamp( Guid aisDevice, DateTime receivedTimestamp )
        {
            throw new NotImplementedException();
        }

        public List<AisStaticDataReportPartBMessageEntity> GetAisStaticDataReportPartBMessageByAisDeviceOverReceivedTimestamp( Guid aisDevice, DateTime fromReceivedTimestamp, DateTime untilReceivedTimestamp )
        {
            throw new NotImplementedException();
        }

        public List<AisStaticDataReportPartBMessageEntity> GetAisStaticDataReportPartBMessageCollectionByReceivedTimestamp( DateTime receivedTimestamp )
        {
            throw new NotImplementedException();
        }

        public List<AisStaticDataReportPartBMessageEntity> GetAisStaticDataReportPartBMessageCollectionAtReceivedTimestamp( DateTime receivedTimestamp )
        {
            throw new NotImplementedException();
        }

        public List<AisStaticDataReportPartBMessageEntity> GetAisStaticDataReportPartBMessageCollectionFromReceivedTimestamp( DateTime receivedTimestamp )
        {
            throw new NotImplementedException();
        }

        public List<AisStaticDataReportPartBMessageEntity> GetAisStaticDataReportPartBMessageCollectionUntilReceivedTimestamp( DateTime receivedTimestamp )
        {
            throw new NotImplementedException();
        }

        public List<AisStaticDataReportPartBMessageEntity> GetAisStaticDataReportPartBMessageCollectionOverReceivedTimestamp( DateTime fromReceivedTimestamp, DateTime untilReceivedTimestamp )
        {
            throw new NotImplementedException();
        }

        public List<AisStaticDataReportPartBMessageEntity> GetAisStaticDataReportPartBMessageCollectionByMmsi( Guid? mmsi )
        {
            throw new NotImplementedException();
        }

        public List<AisStaticDataReportPartBMessageEntity> GetAisStaticDataReportPartBMessageCollectionByMmsiAndMessageSequenceNumber( Guid? mmsi, long messageSequenceNumber )
        {
            throw new NotImplementedException();
        }

        public List<AisStaticDataReportPartBMessageEntity> GetAisStaticDataReportPartBMessageCollectionByMmsiFromMessageSequenceNumber( Guid? mmsi, long messageSequenceNumber )
        {
            throw new NotImplementedException();
        }

        public List<AisStaticDataReportPartBMessageEntity> GetAisStaticDataReportPartBMessageCollectionByMmsiUntilMessageSequenceNumber( Guid? mmsi, long messageSequenceNumber )
        {
            throw new NotImplementedException();
        }

        public List<AisStaticDataReportPartBMessageEntity> GetAisStaticDataReportPartBMessageCollectionByMmsiOverMessageSequenceNumber( Guid mmsi, long fromMessageSequenceNumber, long untilMessageSequenceNumber )
        {
            throw new NotImplementedException();
        }

        public List<AisStaticDataReportPartBMessageEntity> GetAisStaticDataReportPartBMessageCollectionByCallsign( Guid? callsign )
        {
            throw new NotImplementedException();
        }

        public List<AisStaticDataReportPartBMessageEntity> GetAisStaticDataReportPartBMessageCollectionByMothershipMmsi( Guid? mothershipMmsi )
        {
            throw new NotImplementedException();
        }

        public IList<AisUtcAndDateInquiryMessageEntity> GetAisUtcAndDateInquiryMessageCollection( )
        {
            throw new NotImplementedException();
        }

        public List<AisUtcAndDateInquiryMessageEntity> GetAisUtcAndDateInquiryMessageCollectionByAisDevice( Guid aisDevice )
        {
            throw new NotImplementedException();
        }

        public AisUtcAndDateInquiryMessageEntity? GetAisUtcAndDateInquiryMessageByAisDeviceAndReceivedTimestamp( Guid aisDevice, DateTime receivedTimestamp )
        {
            throw new NotImplementedException();
        }

        public AisUtcAndDateInquiryMessageEntity? GetAisUtcAndDateInquiryMessageByAisDeviceAtReceivedTimestamp( Guid aisDevice, DateTime receivedTimestamp )
        {
            throw new NotImplementedException();
        }

        public List<AisUtcAndDateInquiryMessageEntity> GetAisUtcAndDateInquiryMessageByAisDeviceFromReceivedTimestamp( Guid aisDevice, DateTime receivedTimestamp )
        {
            throw new NotImplementedException();
        }

        public List<AisUtcAndDateInquiryMessageEntity> GetAisUtcAndDateInquiryMessageByAisDeviceUntilReceivedTimestamp( Guid aisDevice, DateTime receivedTimestamp )
        {
            throw new NotImplementedException();
        }

        public List<AisUtcAndDateInquiryMessageEntity> GetAisUtcAndDateInquiryMessageByAisDeviceOverReceivedTimestamp( Guid aisDevice, DateTime fromReceivedTimestamp, DateTime untilReceivedTimestamp )
        {
            throw new NotImplementedException();
        }

        public List<AisUtcAndDateInquiryMessageEntity> GetAisUtcAndDateInquiryMessageCollectionByReceivedTimestamp( DateTime receivedTimestamp )
        {
            throw new NotImplementedException();
        }

        public List<AisUtcAndDateInquiryMessageEntity> GetAisUtcAndDateInquiryMessageCollectionAtReceivedTimestamp( DateTime receivedTimestamp )
        {
            throw new NotImplementedException();
        }

        public List<AisUtcAndDateInquiryMessageEntity> GetAisUtcAndDateInquiryMessageCollectionFromReceivedTimestamp( DateTime receivedTimestamp )
        {
            throw new NotImplementedException();
        }

        public List<AisUtcAndDateInquiryMessageEntity> GetAisUtcAndDateInquiryMessageCollectionUntilReceivedTimestamp( DateTime receivedTimestamp )
        {
            throw new NotImplementedException();
        }

        public List<AisUtcAndDateInquiryMessageEntity> GetAisUtcAndDateInquiryMessageCollectionOverReceivedTimestamp( DateTime fromReceivedTimestamp, DateTime untilReceivedTimestamp )
        {
            throw new NotImplementedException();
        }

        public List<AisUtcAndDateInquiryMessageEntity> GetAisUtcAndDateInquiryMessageCollectionByMmsi( Guid? mmsi )
        {
            throw new NotImplementedException();
        }

        public List<AisUtcAndDateInquiryMessageEntity> GetAisUtcAndDateInquiryMessageCollectionByMmsiAndMessageSequenceNumber( Guid? mmsi, long messageSequenceNumber )
        {
            throw new NotImplementedException();
        }

        public List<AisUtcAndDateInquiryMessageEntity> GetAisUtcAndDateInquiryMessageCollectionByMmsiFromMessageSequenceNumber( Guid? mmsi, long messageSequenceNumber )
        {
            throw new NotImplementedException();
        }

        public List<AisUtcAndDateInquiryMessageEntity> GetAisUtcAndDateInquiryMessageCollectionByMmsiUntilMessageSequenceNumber( Guid? mmsi, long messageSequenceNumber )
        {
            throw new NotImplementedException();
        }

        public List<AisUtcAndDateInquiryMessageEntity> GetAisUtcAndDateInquiryMessageCollectionByMmsiOverMessageSequenceNumber( Guid mmsi, long fromMessageSequenceNumber, long untilMessageSequenceNumber )
        {
            throw new NotImplementedException();
        }

        public IList<AisUtcAndDateResponseMessageEntity> GetAisUtcAndDateResponseMessageCollection( )
        {
            throw new NotImplementedException();
        }

        public List<AisUtcAndDateResponseMessageEntity> GetAisUtcAndDateResponseMessageCollectionByAisDevice( Guid aisDevice )
        {
            throw new NotImplementedException();
        }

        public AisUtcAndDateResponseMessageEntity? GetAisUtcAndDateResponseMessageByAisDeviceAndReceivedTimestamp( Guid aisDevice, DateTime receivedTimestamp )
        {
            throw new NotImplementedException();
        }

        public AisUtcAndDateResponseMessageEntity? GetAisUtcAndDateResponseMessageByAisDeviceAtReceivedTimestamp( Guid aisDevice, DateTime receivedTimestamp )
        {
            throw new NotImplementedException();
        }

        public List<AisUtcAndDateResponseMessageEntity> GetAisUtcAndDateResponseMessageByAisDeviceFromReceivedTimestamp( Guid aisDevice, DateTime receivedTimestamp )
        {
            throw new NotImplementedException();
        }

        public List<AisUtcAndDateResponseMessageEntity> GetAisUtcAndDateResponseMessageByAisDeviceUntilReceivedTimestamp( Guid aisDevice, DateTime receivedTimestamp )
        {
            throw new NotImplementedException();
        }

        public List<AisUtcAndDateResponseMessageEntity> GetAisUtcAndDateResponseMessageByAisDeviceOverReceivedTimestamp( Guid aisDevice, DateTime fromReceivedTimestamp, DateTime untilReceivedTimestamp )
        {
            throw new NotImplementedException();
        }

        public List<AisUtcAndDateResponseMessageEntity> GetAisUtcAndDateResponseMessageCollectionByReceivedTimestamp( DateTime receivedTimestamp )
        {
            throw new NotImplementedException();
        }

        public List<AisUtcAndDateResponseMessageEntity> GetAisUtcAndDateResponseMessageCollectionAtReceivedTimestamp( DateTime receivedTimestamp )
        {
            throw new NotImplementedException();
        }

        public List<AisUtcAndDateResponseMessageEntity> GetAisUtcAndDateResponseMessageCollectionFromReceivedTimestamp( DateTime receivedTimestamp )
        {
            throw new NotImplementedException();
        }

        public List<AisUtcAndDateResponseMessageEntity> GetAisUtcAndDateResponseMessageCollectionUntilReceivedTimestamp( DateTime receivedTimestamp )
        {
            throw new NotImplementedException();
        }

        public List<AisUtcAndDateResponseMessageEntity> GetAisUtcAndDateResponseMessageCollectionOverReceivedTimestamp( DateTime fromReceivedTimestamp, DateTime untilReceivedTimestamp )
        {
            throw new NotImplementedException();
        }

        public List<AisUtcAndDateResponseMessageEntity> GetAisUtcAndDateResponseMessageCollectionByMmsi( Guid? mmsi )
        {
            throw new NotImplementedException();
        }

        public List<AisUtcAndDateResponseMessageEntity> GetAisUtcAndDateResponseMessageCollectionByMmsiAndMessageSequenceNumber( Guid? mmsi, long messageSequenceNumber )
        {
            throw new NotImplementedException();
        }

        public List<AisUtcAndDateResponseMessageEntity> GetAisUtcAndDateResponseMessageCollectionByMmsiFromMessageSequenceNumber( Guid? mmsi, long messageSequenceNumber )
        {
            throw new NotImplementedException();
        }

        public List<AisUtcAndDateResponseMessageEntity> GetAisUtcAndDateResponseMessageCollectionByMmsiUntilMessageSequenceNumber( Guid? mmsi, long messageSequenceNumber )
        {
            throw new NotImplementedException();
        }

        public List<AisUtcAndDateResponseMessageEntity> GetAisUtcAndDateResponseMessageCollectionByMmsiOverMessageSequenceNumber( Guid mmsi, long fromMessageSequenceNumber, long untilMessageSequenceNumber )
        {
            throw new NotImplementedException();
        }

        public IList<AlarmStateChangeEntity> GetAlarmStateChangeCollection( )
        {
            throw new NotImplementedException();
        }

        public List<AlarmStateChangeEntity> GetAlarmStateChangeCollectionByAlarm( Guid alarm )
        {
            throw new NotImplementedException();
        }

        public AlarmStateChangeEntity? GetAlarmStateChangeByAlarmAndTimestamp( Guid alarm, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public AlarmStateChangeEntity? GetAlarmStateChangeByAlarmAtTimestamp( Guid alarm, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<AlarmStateChangeEntity> GetAlarmStateChangeByAlarmFromTimestamp( Guid alarm, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<AlarmStateChangeEntity> GetAlarmStateChangeByAlarmUntilTimestamp( Guid alarm, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<AlarmStateChangeEntity> GetAlarmStateChangeByAlarmOverTimestamp( Guid alarm, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

        public List<AlarmStateChangeEntity> GetAlarmStateChangeCollectionByTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<AlarmStateChangeEntity> GetAlarmStateChangeCollectionAtTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<AlarmStateChangeEntity> GetAlarmStateChangeCollectionFromTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<AlarmStateChangeEntity> GetAlarmStateChangeCollectionUntilTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<AlarmStateChangeEntity> GetAlarmStateChangeCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

        public IList<BaseStationTypeEntity> GetBaseStationTypeCollection( )
        {
            throw new NotImplementedException();
        }

        public BaseStationTypeEntity? GetBaseStationTypeByName( string name )
        {
            throw new NotImplementedException();
        }

        public IList<BinaryTimeseriesValueEntity> GetBinaryTimeseriesValueCollection( )
        {
            throw new NotImplementedException();
        }

        public List<BinaryTimeseriesValueEntity> GetBinaryTimeseriesValueCollectionByTimeseries( Guid timeseries )
        {
            throw new NotImplementedException();
        }

        public BinaryTimeseriesValueEntity? GetBinaryTimeseriesValueByTimeseriesAndTimestamp( Guid timeseries, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public BinaryTimeseriesValueEntity? GetBinaryTimeseriesValueByTimeseriesAtTimestamp( Guid timeseries, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<BinaryTimeseriesValueEntity> GetBinaryTimeseriesValueByTimeseriesFromTimestamp( Guid timeseries, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<BinaryTimeseriesValueEntity> GetBinaryTimeseriesValueByTimeseriesUntilTimestamp( Guid timeseries, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<BinaryTimeseriesValueEntity> GetBinaryTimeseriesValueByTimeseriesOverTimestamp( Guid timeseries, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

        public List<BinaryTimeseriesValueEntity> GetBinaryTimeseriesValueCollectionByTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<BinaryTimeseriesValueEntity> GetBinaryTimeseriesValueCollectionAtTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<BinaryTimeseriesValueEntity> GetBinaryTimeseriesValueCollectionFromTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<BinaryTimeseriesValueEntity> GetBinaryTimeseriesValueCollectionUntilTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<BinaryTimeseriesValueEntity> GetBinaryTimeseriesValueCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

        public IList<BookmarkEntity> GetBookmarkCollection( )
        {
            throw new NotImplementedException();
        }

        public List<BookmarkEntity> GetBookmarkCollectionByView( Guid view )
        {
            throw new NotImplementedException();
        }

        public IList<BooleanTimeseriesValueEntity> GetBooleanTimeseriesValueCollection( )
        {
            throw new NotImplementedException();
        }

        public List<BooleanTimeseriesValueEntity> GetBooleanTimeseriesValueCollectionByTimeseries( Guid timeseries )
        {
            throw new NotImplementedException();
        }

        public BooleanTimeseriesValueEntity? GetBooleanTimeseriesValueByTimeseriesAndTimestamp( Guid timeseries, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public BooleanTimeseriesValueEntity? GetBooleanTimeseriesValueByTimeseriesAtTimestamp( Guid timeseries, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<BooleanTimeseriesValueEntity> GetBooleanTimeseriesValueByTimeseriesFromTimestamp( Guid timeseries, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<BooleanTimeseriesValueEntity> GetBooleanTimeseriesValueByTimeseriesUntilTimestamp( Guid timeseries, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<BooleanTimeseriesValueEntity> GetBooleanTimeseriesValueByTimeseriesOverTimestamp( Guid timeseries, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

        public List<BooleanTimeseriesValueEntity> GetBooleanTimeseriesValueCollectionByTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<BooleanTimeseriesValueEntity> GetBooleanTimeseriesValueCollectionAtTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<BooleanTimeseriesValueEntity> GetBooleanTimeseriesValueCollectionFromTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<BooleanTimeseriesValueEntity> GetBooleanTimeseriesValueCollectionUntilTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<BooleanTimeseriesValueEntity> GetBooleanTimeseriesValueCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

        public IList<ByteTimeseriesValueEntity> GetByteTimeseriesValueCollection( )
        {
            throw new NotImplementedException();
        }

        public List<ByteTimeseriesValueEntity> GetByteTimeseriesValueCollectionByTimeseries( Guid timeseries )
        {
            throw new NotImplementedException();
        }

        public ByteTimeseriesValueEntity? GetByteTimeseriesValueByTimeseriesAndTimestamp( Guid timeseries, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public ByteTimeseriesValueEntity? GetByteTimeseriesValueByTimeseriesAtTimestamp( Guid timeseries, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<ByteTimeseriesValueEntity> GetByteTimeseriesValueByTimeseriesFromTimestamp( Guid timeseries, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<ByteTimeseriesValueEntity> GetByteTimeseriesValueByTimeseriesUntilTimestamp( Guid timeseries, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<ByteTimeseriesValueEntity> GetByteTimeseriesValueByTimeseriesOverTimestamp( Guid timeseries, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

        public List<ByteTimeseriesValueEntity> GetByteTimeseriesValueCollectionByTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<ByteTimeseriesValueEntity> GetByteTimeseriesValueCollectionAtTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<ByteTimeseriesValueEntity> GetByteTimeseriesValueCollectionFromTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<ByteTimeseriesValueEntity> GetByteTimeseriesValueCollectionUntilTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<ByteTimeseriesValueEntity> GetByteTimeseriesValueCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

        public IList<CameraCommandEntity> GetCameraCommandCollection( )
        {
            throw new NotImplementedException();
        }

        public List<CameraCommandEntity> GetCameraCommandCollectionByCamera( Guid camera )
        {
            throw new NotImplementedException();
        }

        public List<CameraCommandEntity> GetCameraCommandCollectionByCameraAndTimestamp( Guid camera, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<CameraCommandEntity> GetCameraCommandCollectionByCameraAtTimestamp( Guid camera, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<CameraCommandEntity> GetCameraCommandCollectionByCameraFromTimestamp( Guid camera, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<CameraCommandEntity> GetCameraCommandCollectionByCameraUntilTimestamp( Guid camera, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<CameraCommandEntity> GetCameraCommandCollectionByCameraOverTimestamp( Guid camera, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

        public List<CameraCommandEntity> GetCameraCommandCollectionByTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<CameraCommandEntity> GetCameraCommandCollectionAtTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<CameraCommandEntity> GetCameraCommandCollectionFromTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<CameraCommandEntity> GetCameraCommandCollectionUntilTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<CameraCommandEntity> GetCameraCommandCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

        public List<CameraCommandEntity> GetCameraCommandCollectionByReply( Guid? reply )
        {
            throw new NotImplementedException();
        }

        public IList<CameraCommandAbsoluteMoveEntity> GetCameraCommandAbsoluteMoveCollection( )
        {
            throw new NotImplementedException();
        }

        public List<CameraCommandAbsoluteMoveEntity> GetCameraCommandAbsoluteMoveCollectionByCamera( Guid camera )
        {
            throw new NotImplementedException();
        }

        public List<CameraCommandAbsoluteMoveEntity> GetCameraCommandAbsoluteMoveCollectionByCameraAndTimestamp( Guid camera, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<CameraCommandAbsoluteMoveEntity> GetCameraCommandAbsoluteMoveCollectionByCameraAtTimestamp( Guid camera, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<CameraCommandAbsoluteMoveEntity> GetCameraCommandAbsoluteMoveCollectionByCameraFromTimestamp( Guid camera, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<CameraCommandAbsoluteMoveEntity> GetCameraCommandAbsoluteMoveCollectionByCameraUntilTimestamp( Guid camera, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<CameraCommandAbsoluteMoveEntity> GetCameraCommandAbsoluteMoveCollectionByCameraOverTimestamp( Guid camera, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

        public List<CameraCommandAbsoluteMoveEntity> GetCameraCommandAbsoluteMoveCollectionByTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<CameraCommandAbsoluteMoveEntity> GetCameraCommandAbsoluteMoveCollectionAtTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<CameraCommandAbsoluteMoveEntity> GetCameraCommandAbsoluteMoveCollectionFromTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<CameraCommandAbsoluteMoveEntity> GetCameraCommandAbsoluteMoveCollectionUntilTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<CameraCommandAbsoluteMoveEntity> GetCameraCommandAbsoluteMoveCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

        public List<CameraCommandAbsoluteMoveEntity> GetCameraCommandAbsoluteMoveCollectionByReply( Guid? reply )
        {
            throw new NotImplementedException();
        }

        public IList<CameraCommandAdjustPanTiltZoomEntity> GetCameraCommandAdjustPanTiltZoomCollection( )
        {
            throw new NotImplementedException();
        }

        public List<CameraCommandAdjustPanTiltZoomEntity> GetCameraCommandAdjustPanTiltZoomCollectionByCamera( Guid camera )
        {
            throw new NotImplementedException();
        }

        public List<CameraCommandAdjustPanTiltZoomEntity> GetCameraCommandAdjustPanTiltZoomCollectionByCameraAndTimestamp( Guid camera, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<CameraCommandAdjustPanTiltZoomEntity> GetCameraCommandAdjustPanTiltZoomCollectionByCameraAtTimestamp( Guid camera, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<CameraCommandAdjustPanTiltZoomEntity> GetCameraCommandAdjustPanTiltZoomCollectionByCameraFromTimestamp( Guid camera, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<CameraCommandAdjustPanTiltZoomEntity> GetCameraCommandAdjustPanTiltZoomCollectionByCameraUntilTimestamp( Guid camera, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<CameraCommandAdjustPanTiltZoomEntity> GetCameraCommandAdjustPanTiltZoomCollectionByCameraOverTimestamp( Guid camera, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

        public List<CameraCommandAdjustPanTiltZoomEntity> GetCameraCommandAdjustPanTiltZoomCollectionByTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<CameraCommandAdjustPanTiltZoomEntity> GetCameraCommandAdjustPanTiltZoomCollectionAtTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<CameraCommandAdjustPanTiltZoomEntity> GetCameraCommandAdjustPanTiltZoomCollectionFromTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<CameraCommandAdjustPanTiltZoomEntity> GetCameraCommandAdjustPanTiltZoomCollectionUntilTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<CameraCommandAdjustPanTiltZoomEntity> GetCameraCommandAdjustPanTiltZoomCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

        public List<CameraCommandAdjustPanTiltZoomEntity> GetCameraCommandAdjustPanTiltZoomCollectionByReply( Guid? reply )
        {
            throw new NotImplementedException();
        }

        public IList<CameraCommandContinuousMoveEntity> GetCameraCommandContinuousMoveCollection( )
        {
            throw new NotImplementedException();
        }

        public List<CameraCommandContinuousMoveEntity> GetCameraCommandContinuousMoveCollectionByCamera( Guid camera )
        {
            throw new NotImplementedException();
        }

        public List<CameraCommandContinuousMoveEntity> GetCameraCommandContinuousMoveCollectionByCameraAndTimestamp( Guid camera, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<CameraCommandContinuousMoveEntity> GetCameraCommandContinuousMoveCollectionByCameraAtTimestamp( Guid camera, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<CameraCommandContinuousMoveEntity> GetCameraCommandContinuousMoveCollectionByCameraFromTimestamp( Guid camera, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<CameraCommandContinuousMoveEntity> GetCameraCommandContinuousMoveCollectionByCameraUntilTimestamp( Guid camera, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<CameraCommandContinuousMoveEntity> GetCameraCommandContinuousMoveCollectionByCameraOverTimestamp( Guid camera, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

        public List<CameraCommandContinuousMoveEntity> GetCameraCommandContinuousMoveCollectionByTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<CameraCommandContinuousMoveEntity> GetCameraCommandContinuousMoveCollectionAtTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<CameraCommandContinuousMoveEntity> GetCameraCommandContinuousMoveCollectionFromTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<CameraCommandContinuousMoveEntity> GetCameraCommandContinuousMoveCollectionUntilTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<CameraCommandContinuousMoveEntity> GetCameraCommandContinuousMoveCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

        public List<CameraCommandContinuousMoveEntity> GetCameraCommandContinuousMoveCollectionByReply( Guid? reply )
        {
            throw new NotImplementedException();
        }

        public IList<CameraCommandGeoMoveEntity> GetCameraCommandGeoMoveCollection( )
        {
            throw new NotImplementedException();
        }

        public List<CameraCommandGeoMoveEntity> GetCameraCommandGeoMoveCollectionByCamera( Guid camera )
        {
            throw new NotImplementedException();
        }

        public List<CameraCommandGeoMoveEntity> GetCameraCommandGeoMoveCollectionByCameraAndTimestamp( Guid camera, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<CameraCommandGeoMoveEntity> GetCameraCommandGeoMoveCollectionByCameraAtTimestamp( Guid camera, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<CameraCommandGeoMoveEntity> GetCameraCommandGeoMoveCollectionByCameraFromTimestamp( Guid camera, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<CameraCommandGeoMoveEntity> GetCameraCommandGeoMoveCollectionByCameraUntilTimestamp( Guid camera, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<CameraCommandGeoMoveEntity> GetCameraCommandGeoMoveCollectionByCameraOverTimestamp( Guid camera, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

        public List<CameraCommandGeoMoveEntity> GetCameraCommandGeoMoveCollectionByTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<CameraCommandGeoMoveEntity> GetCameraCommandGeoMoveCollectionAtTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<CameraCommandGeoMoveEntity> GetCameraCommandGeoMoveCollectionFromTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<CameraCommandGeoMoveEntity> GetCameraCommandGeoMoveCollectionUntilTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<CameraCommandGeoMoveEntity> GetCameraCommandGeoMoveCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

        public List<CameraCommandGeoMoveEntity> GetCameraCommandGeoMoveCollectionByReply( Guid? reply )
        {
            throw new NotImplementedException();
        }

        public IList<CameraCommandRelativeMoveEntity> GetCameraCommandRelativeMoveCollection( )
        {
            throw new NotImplementedException();
        }

        public List<CameraCommandRelativeMoveEntity> GetCameraCommandRelativeMoveCollectionByCamera( Guid camera )
        {
            throw new NotImplementedException();
        }

        public List<CameraCommandRelativeMoveEntity> GetCameraCommandRelativeMoveCollectionByCameraAndTimestamp( Guid camera, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<CameraCommandRelativeMoveEntity> GetCameraCommandRelativeMoveCollectionByCameraAtTimestamp( Guid camera, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<CameraCommandRelativeMoveEntity> GetCameraCommandRelativeMoveCollectionByCameraFromTimestamp( Guid camera, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<CameraCommandRelativeMoveEntity> GetCameraCommandRelativeMoveCollectionByCameraUntilTimestamp( Guid camera, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<CameraCommandRelativeMoveEntity> GetCameraCommandRelativeMoveCollectionByCameraOverTimestamp( Guid camera, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

        public List<CameraCommandRelativeMoveEntity> GetCameraCommandRelativeMoveCollectionByTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<CameraCommandRelativeMoveEntity> GetCameraCommandRelativeMoveCollectionAtTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<CameraCommandRelativeMoveEntity> GetCameraCommandRelativeMoveCollectionFromTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<CameraCommandRelativeMoveEntity> GetCameraCommandRelativeMoveCollectionUntilTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<CameraCommandRelativeMoveEntity> GetCameraCommandRelativeMoveCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

        public List<CameraCommandRelativeMoveEntity> GetCameraCommandRelativeMoveCollectionByReply( Guid? reply )
        {
            throw new NotImplementedException();
        }

        public IList<CameraCommandReleasePTZOwnershipEntity> GetCameraCommandReleasePTZOwnershipCollection( )
        {
            throw new NotImplementedException();
        }

        public List<CameraCommandReleasePTZOwnershipEntity> GetCameraCommandReleasePTZOwnershipCollectionByCamera( Guid camera )
        {
            throw new NotImplementedException();
        }

        public List<CameraCommandReleasePTZOwnershipEntity> GetCameraCommandReleasePTZOwnershipCollectionByCameraAndTimestamp( Guid camera, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<CameraCommandReleasePTZOwnershipEntity> GetCameraCommandReleasePTZOwnershipCollectionByCameraAtTimestamp( Guid camera, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<CameraCommandReleasePTZOwnershipEntity> GetCameraCommandReleasePTZOwnershipCollectionByCameraFromTimestamp( Guid camera, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<CameraCommandReleasePTZOwnershipEntity> GetCameraCommandReleasePTZOwnershipCollectionByCameraUntilTimestamp( Guid camera, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<CameraCommandReleasePTZOwnershipEntity> GetCameraCommandReleasePTZOwnershipCollectionByCameraOverTimestamp( Guid camera, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

        public List<CameraCommandReleasePTZOwnershipEntity> GetCameraCommandReleasePTZOwnershipCollectionByTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<CameraCommandReleasePTZOwnershipEntity> GetCameraCommandReleasePTZOwnershipCollectionAtTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<CameraCommandReleasePTZOwnershipEntity> GetCameraCommandReleasePTZOwnershipCollectionFromTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<CameraCommandReleasePTZOwnershipEntity> GetCameraCommandReleasePTZOwnershipCollectionUntilTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<CameraCommandReleasePTZOwnershipEntity> GetCameraCommandReleasePTZOwnershipCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

        public List<CameraCommandReleasePTZOwnershipEntity> GetCameraCommandReleasePTZOwnershipCollectionByReply( Guid? reply )
        {
            throw new NotImplementedException();
        }

        public IList<CameraCommandRequestPTZOwnershipEntity> GetCameraCommandRequestPTZOwnershipCollection( )
        {
            throw new NotImplementedException();
        }

        public List<CameraCommandRequestPTZOwnershipEntity> GetCameraCommandRequestPTZOwnershipCollectionByCamera( Guid camera )
        {
            throw new NotImplementedException();
        }

        public List<CameraCommandRequestPTZOwnershipEntity> GetCameraCommandRequestPTZOwnershipCollectionByCameraAndTimestamp( Guid camera, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<CameraCommandRequestPTZOwnershipEntity> GetCameraCommandRequestPTZOwnershipCollectionByCameraAtTimestamp( Guid camera, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<CameraCommandRequestPTZOwnershipEntity> GetCameraCommandRequestPTZOwnershipCollectionByCameraFromTimestamp( Guid camera, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<CameraCommandRequestPTZOwnershipEntity> GetCameraCommandRequestPTZOwnershipCollectionByCameraUntilTimestamp( Guid camera, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<CameraCommandRequestPTZOwnershipEntity> GetCameraCommandRequestPTZOwnershipCollectionByCameraOverTimestamp( Guid camera, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

        public List<CameraCommandRequestPTZOwnershipEntity> GetCameraCommandRequestPTZOwnershipCollectionByTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<CameraCommandRequestPTZOwnershipEntity> GetCameraCommandRequestPTZOwnershipCollectionAtTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<CameraCommandRequestPTZOwnershipEntity> GetCameraCommandRequestPTZOwnershipCollectionFromTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<CameraCommandRequestPTZOwnershipEntity> GetCameraCommandRequestPTZOwnershipCollectionUntilTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<CameraCommandRequestPTZOwnershipEntity> GetCameraCommandRequestPTZOwnershipCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

        public List<CameraCommandRequestPTZOwnershipEntity> GetCameraCommandRequestPTZOwnershipCollectionByReply( Guid? reply )
        {
            throw new NotImplementedException();
        }

        public IList<CameraCommandSetAutoFocusEntity> GetCameraCommandSetAutoFocusCollection( )
        {
            throw new NotImplementedException();
        }

        public List<CameraCommandSetAutoFocusEntity> GetCameraCommandSetAutoFocusCollectionByCamera( Guid camera )
        {
            throw new NotImplementedException();
        }

        public List<CameraCommandSetAutoFocusEntity> GetCameraCommandSetAutoFocusCollectionByCameraAndTimestamp( Guid camera, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<CameraCommandSetAutoFocusEntity> GetCameraCommandSetAutoFocusCollectionByCameraAtTimestamp( Guid camera, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<CameraCommandSetAutoFocusEntity> GetCameraCommandSetAutoFocusCollectionByCameraFromTimestamp( Guid camera, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<CameraCommandSetAutoFocusEntity> GetCameraCommandSetAutoFocusCollectionByCameraUntilTimestamp( Guid camera, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<CameraCommandSetAutoFocusEntity> GetCameraCommandSetAutoFocusCollectionByCameraOverTimestamp( Guid camera, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

        public List<CameraCommandSetAutoFocusEntity> GetCameraCommandSetAutoFocusCollectionByTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<CameraCommandSetAutoFocusEntity> GetCameraCommandSetAutoFocusCollectionAtTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<CameraCommandSetAutoFocusEntity> GetCameraCommandSetAutoFocusCollectionFromTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<CameraCommandSetAutoFocusEntity> GetCameraCommandSetAutoFocusCollectionUntilTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<CameraCommandSetAutoFocusEntity> GetCameraCommandSetAutoFocusCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

        public List<CameraCommandSetAutoFocusEntity> GetCameraCommandSetAutoFocusCollectionByReply( Guid? reply )
        {
            throw new NotImplementedException();
        }

        public IList<CameraCommandSetBlackAndWhiteEntity> GetCameraCommandSetBlackAndWhiteCollection( )
        {
            throw new NotImplementedException();
        }

        public List<CameraCommandSetBlackAndWhiteEntity> GetCameraCommandSetBlackAndWhiteCollectionByCamera( Guid camera )
        {
            throw new NotImplementedException();
        }

        public List<CameraCommandSetBlackAndWhiteEntity> GetCameraCommandSetBlackAndWhiteCollectionByCameraAndTimestamp( Guid camera, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<CameraCommandSetBlackAndWhiteEntity> GetCameraCommandSetBlackAndWhiteCollectionByCameraAtTimestamp( Guid camera, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<CameraCommandSetBlackAndWhiteEntity> GetCameraCommandSetBlackAndWhiteCollectionByCameraFromTimestamp( Guid camera, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<CameraCommandSetBlackAndWhiteEntity> GetCameraCommandSetBlackAndWhiteCollectionByCameraUntilTimestamp( Guid camera, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<CameraCommandSetBlackAndWhiteEntity> GetCameraCommandSetBlackAndWhiteCollectionByCameraOverTimestamp( Guid camera, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

        public List<CameraCommandSetBlackAndWhiteEntity> GetCameraCommandSetBlackAndWhiteCollectionByTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<CameraCommandSetBlackAndWhiteEntity> GetCameraCommandSetBlackAndWhiteCollectionAtTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<CameraCommandSetBlackAndWhiteEntity> GetCameraCommandSetBlackAndWhiteCollectionFromTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<CameraCommandSetBlackAndWhiteEntity> GetCameraCommandSetBlackAndWhiteCollectionUntilTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<CameraCommandSetBlackAndWhiteEntity> GetCameraCommandSetBlackAndWhiteCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

        public List<CameraCommandSetBlackAndWhiteEntity> GetCameraCommandSetBlackAndWhiteCollectionByReply( Guid? reply )
        {
            throw new NotImplementedException();
        }

        public IList<CameraCommandSetFollowedEntity> GetCameraCommandSetFollowedCollection( )
        {
            throw new NotImplementedException();
        }

        public List<CameraCommandSetFollowedEntity> GetCameraCommandSetFollowedCollectionByCamera( Guid camera )
        {
            throw new NotImplementedException();
        }

        public List<CameraCommandSetFollowedEntity> GetCameraCommandSetFollowedCollectionByCameraAndTimestamp( Guid camera, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<CameraCommandSetFollowedEntity> GetCameraCommandSetFollowedCollectionByCameraAtTimestamp( Guid camera, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<CameraCommandSetFollowedEntity> GetCameraCommandSetFollowedCollectionByCameraFromTimestamp( Guid camera, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<CameraCommandSetFollowedEntity> GetCameraCommandSetFollowedCollectionByCameraUntilTimestamp( Guid camera, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<CameraCommandSetFollowedEntity> GetCameraCommandSetFollowedCollectionByCameraOverTimestamp( Guid camera, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

        public List<CameraCommandSetFollowedEntity> GetCameraCommandSetFollowedCollectionByTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<CameraCommandSetFollowedEntity> GetCameraCommandSetFollowedCollectionAtTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<CameraCommandSetFollowedEntity> GetCameraCommandSetFollowedCollectionFromTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<CameraCommandSetFollowedEntity> GetCameraCommandSetFollowedCollectionUntilTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<CameraCommandSetFollowedEntity> GetCameraCommandSetFollowedCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

        public List<CameraCommandSetFollowedEntity> GetCameraCommandSetFollowedCollectionByReply( Guid? reply )
        {
            throw new NotImplementedException();
        }

        public IList<CameraCommandSetInfraRedLampEntity> GetCameraCommandSetInfraRedLampCollection( )
        {
            throw new NotImplementedException();
        }

        public List<CameraCommandSetInfraRedLampEntity> GetCameraCommandSetInfraRedLampCollectionByCamera( Guid camera )
        {
            throw new NotImplementedException();
        }

        public List<CameraCommandSetInfraRedLampEntity> GetCameraCommandSetInfraRedLampCollectionByCameraAndTimestamp( Guid camera, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<CameraCommandSetInfraRedLampEntity> GetCameraCommandSetInfraRedLampCollectionByCameraAtTimestamp( Guid camera, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<CameraCommandSetInfraRedLampEntity> GetCameraCommandSetInfraRedLampCollectionByCameraFromTimestamp( Guid camera, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<CameraCommandSetInfraRedLampEntity> GetCameraCommandSetInfraRedLampCollectionByCameraUntilTimestamp( Guid camera, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<CameraCommandSetInfraRedLampEntity> GetCameraCommandSetInfraRedLampCollectionByCameraOverTimestamp( Guid camera, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

        public List<CameraCommandSetInfraRedLampEntity> GetCameraCommandSetInfraRedLampCollectionByTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<CameraCommandSetInfraRedLampEntity> GetCameraCommandSetInfraRedLampCollectionAtTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<CameraCommandSetInfraRedLampEntity> GetCameraCommandSetInfraRedLampCollectionFromTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<CameraCommandSetInfraRedLampEntity> GetCameraCommandSetInfraRedLampCollectionUntilTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<CameraCommandSetInfraRedLampEntity> GetCameraCommandSetInfraRedLampCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

        public List<CameraCommandSetInfraRedLampEntity> GetCameraCommandSetInfraRedLampCollectionByReply( Guid? reply )
        {
            throw new NotImplementedException();
        }

        public IList<CameraCommandSetWasherEntity> GetCameraCommandSetWasherCollection( )
        {
            throw new NotImplementedException();
        }

        public List<CameraCommandSetWasherEntity> GetCameraCommandSetWasherCollectionByCamera( Guid camera )
        {
            throw new NotImplementedException();
        }

        public List<CameraCommandSetWasherEntity> GetCameraCommandSetWasherCollectionByCameraAndTimestamp( Guid camera, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<CameraCommandSetWasherEntity> GetCameraCommandSetWasherCollectionByCameraAtTimestamp( Guid camera, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<CameraCommandSetWasherEntity> GetCameraCommandSetWasherCollectionByCameraFromTimestamp( Guid camera, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<CameraCommandSetWasherEntity> GetCameraCommandSetWasherCollectionByCameraUntilTimestamp( Guid camera, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<CameraCommandSetWasherEntity> GetCameraCommandSetWasherCollectionByCameraOverTimestamp( Guid camera, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

        public List<CameraCommandSetWasherEntity> GetCameraCommandSetWasherCollectionByTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<CameraCommandSetWasherEntity> GetCameraCommandSetWasherCollectionAtTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<CameraCommandSetWasherEntity> GetCameraCommandSetWasherCollectionFromTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<CameraCommandSetWasherEntity> GetCameraCommandSetWasherCollectionUntilTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<CameraCommandSetWasherEntity> GetCameraCommandSetWasherCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

        public List<CameraCommandSetWasherEntity> GetCameraCommandSetWasherCollectionByReply( Guid? reply )
        {
            throw new NotImplementedException();
        }

        public IList<CameraCommandSetWiperEntity> GetCameraCommandSetWiperCollection( )
        {
            throw new NotImplementedException();
        }

        public List<CameraCommandSetWiperEntity> GetCameraCommandSetWiperCollectionByCamera( Guid camera )
        {
            throw new NotImplementedException();
        }

        public List<CameraCommandSetWiperEntity> GetCameraCommandSetWiperCollectionByCameraAndTimestamp( Guid camera, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<CameraCommandSetWiperEntity> GetCameraCommandSetWiperCollectionByCameraAtTimestamp( Guid camera, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<CameraCommandSetWiperEntity> GetCameraCommandSetWiperCollectionByCameraFromTimestamp( Guid camera, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<CameraCommandSetWiperEntity> GetCameraCommandSetWiperCollectionByCameraUntilTimestamp( Guid camera, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<CameraCommandSetWiperEntity> GetCameraCommandSetWiperCollectionByCameraOverTimestamp( Guid camera, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

        public List<CameraCommandSetWiperEntity> GetCameraCommandSetWiperCollectionByTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<CameraCommandSetWiperEntity> GetCameraCommandSetWiperCollectionAtTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<CameraCommandSetWiperEntity> GetCameraCommandSetWiperCollectionFromTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<CameraCommandSetWiperEntity> GetCameraCommandSetWiperCollectionUntilTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<CameraCommandSetWiperEntity> GetCameraCommandSetWiperCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

        public List<CameraCommandSetWiperEntity> GetCameraCommandSetWiperCollectionByReply( Guid? reply )
        {
            throw new NotImplementedException();
        }

        public IList<CameraCommandStopEntity> GetCameraCommandStopCollection( )
        {
            throw new NotImplementedException();
        }

        public List<CameraCommandStopEntity> GetCameraCommandStopCollectionByCamera( Guid camera )
        {
            throw new NotImplementedException();
        }

        public List<CameraCommandStopEntity> GetCameraCommandStopCollectionByCameraAndTimestamp( Guid camera, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<CameraCommandStopEntity> GetCameraCommandStopCollectionByCameraAtTimestamp( Guid camera, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<CameraCommandStopEntity> GetCameraCommandStopCollectionByCameraFromTimestamp( Guid camera, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<CameraCommandStopEntity> GetCameraCommandStopCollectionByCameraUntilTimestamp( Guid camera, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<CameraCommandStopEntity> GetCameraCommandStopCollectionByCameraOverTimestamp( Guid camera, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

        public List<CameraCommandStopEntity> GetCameraCommandStopCollectionByTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<CameraCommandStopEntity> GetCameraCommandStopCollectionAtTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<CameraCommandStopEntity> GetCameraCommandStopCollectionFromTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<CameraCommandStopEntity> GetCameraCommandStopCollectionUntilTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<CameraCommandStopEntity> GetCameraCommandStopCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

        public List<CameraCommandStopEntity> GetCameraCommandStopCollectionByReply( Guid? reply )
        {
            throw new NotImplementedException();
        }

        public IList<CameraCommandReplyEntity> GetCameraCommandReplyCollection( )
        {
            throw new NotImplementedException();
        }

        public List<CameraCommandReplyEntity> GetCameraCommandReplyCollectionByCamera( Guid camera )
        {
            throw new NotImplementedException();
        }

        public List<CameraCommandReplyEntity> GetCameraCommandReplyCollectionByCameraAndTimestamp( Guid camera, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<CameraCommandReplyEntity> GetCameraCommandReplyCollectionByCameraAtTimestamp( Guid camera, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<CameraCommandReplyEntity> GetCameraCommandReplyCollectionByCameraFromTimestamp( Guid camera, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<CameraCommandReplyEntity> GetCameraCommandReplyCollectionByCameraUntilTimestamp( Guid camera, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<CameraCommandReplyEntity> GetCameraCommandReplyCollectionByCameraOverTimestamp( Guid camera, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

        public List<CameraCommandReplyEntity> GetCameraCommandReplyCollectionByTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<CameraCommandReplyEntity> GetCameraCommandReplyCollectionAtTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<CameraCommandReplyEntity> GetCameraCommandReplyCollectionFromTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<CameraCommandReplyEntity> GetCameraCommandReplyCollectionUntilTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<CameraCommandReplyEntity> GetCameraCommandReplyCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

        public CameraCommandReplyEntity? GetCameraCommandReplyByCommand( Guid? command )
        {
            throw new NotImplementedException();
        }

        public IList<CameraConfigurationEntity> GetCameraConfigurationCollection( )
        {
            throw new NotImplementedException();
        }

        public List<CameraConfigurationEntity> GetCameraConfigurationCollectionByCamera( Guid camera )
        {
            throw new NotImplementedException();
        }

        public CameraConfigurationEntity? GetCameraConfigurationByCameraAndTimestamp( Guid camera, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public CameraConfigurationEntity? GetCameraConfigurationByCameraAtTimestamp( Guid camera, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<CameraConfigurationEntity> GetCameraConfigurationByCameraFromTimestamp( Guid camera, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<CameraConfigurationEntity> GetCameraConfigurationByCameraUntilTimestamp( Guid camera, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<CameraConfigurationEntity> GetCameraConfigurationByCameraOverTimestamp( Guid camera, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

        public List<CameraConfigurationEntity> GetCameraConfigurationCollectionByTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<CameraConfigurationEntity> GetCameraConfigurationCollectionAtTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<CameraConfigurationEntity> GetCameraConfigurationCollectionFromTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<CameraConfigurationEntity> GetCameraConfigurationCollectionUntilTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<CameraConfigurationEntity> GetCameraConfigurationCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

        public IList<CameraPanCalibrationEntity> GetCameraPanCalibrationCollection( )
        {
            throw new NotImplementedException();
        }

        public List<CameraPanCalibrationEntity> GetCameraPanCalibrationCollectionByCamera( Guid camera )
        {
            throw new NotImplementedException();
        }

        public CameraPanCalibrationEntity? GetCameraPanCalibrationByCameraAndTimestamp( Guid camera, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public CameraPanCalibrationEntity? GetCameraPanCalibrationByCameraAtTimestamp( Guid camera, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<CameraPanCalibrationEntity> GetCameraPanCalibrationByCameraFromTimestamp( Guid camera, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<CameraPanCalibrationEntity> GetCameraPanCalibrationByCameraUntilTimestamp( Guid camera, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<CameraPanCalibrationEntity> GetCameraPanCalibrationByCameraOverTimestamp( Guid camera, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

        public List<CameraPanCalibrationEntity> GetCameraPanCalibrationCollectionByTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<CameraPanCalibrationEntity> GetCameraPanCalibrationCollectionAtTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<CameraPanCalibrationEntity> GetCameraPanCalibrationCollectionFromTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<CameraPanCalibrationEntity> GetCameraPanCalibrationCollectionUntilTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<CameraPanCalibrationEntity> GetCameraPanCalibrationCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

        public IList<CameraPanCalibrationValueEntity> GetCameraPanCalibrationValueCollection( )
        {
            throw new NotImplementedException();
        }

        public List<CameraPanCalibrationValueEntity> GetCameraPanCalibrationValueCollectionByPanCalibration( Guid panCalibration )
        {
            throw new NotImplementedException();
        }

        public CameraPanCalibrationValueEntity? GetCameraPanCalibrationValueByPanCalibrationAndPanAngle( Guid panCalibration, double panAngle )
        {
            throw new NotImplementedException();
        }

        public List<CameraPanCalibrationValueEntity> GetCameraPanCalibrationValueByPanCalibrationFromPanAngle( Guid panCalibration, double panAngle )
        {
            throw new NotImplementedException();
        }

        public List<CameraPanCalibrationValueEntity> GetCameraPanCalibrationValueByPanCalibrationUntilPanAngle( Guid panCalibration, double panAngle )
        {
            throw new NotImplementedException();
        }

        public List<CameraPanCalibrationValueEntity> GetCameraPanCalibrationValueByPanCalibrationOverPanAngle( Guid panCalibration, double fromPanAngle, double untilPanAngle )
        {
            throw new NotImplementedException();
        }

        public IList<CameraStatusEntity> GetCameraStatusCollection( )
        {
            throw new NotImplementedException();
        }

        public List<CameraStatusEntity> GetCameraStatusCollectionByCamera( Guid camera )
        {
            throw new NotImplementedException();
        }

        public CameraStatusEntity? GetCameraStatusByCameraAndTimestamp( Guid camera, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public CameraStatusEntity? GetCameraStatusByCameraAtTimestamp( Guid camera, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<CameraStatusEntity> GetCameraStatusByCameraFromTimestamp( Guid camera, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<CameraStatusEntity> GetCameraStatusByCameraUntilTimestamp( Guid camera, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<CameraStatusEntity> GetCameraStatusByCameraOverTimestamp( Guid camera, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

        public List<CameraStatusEntity> GetCameraStatusCollectionByTrack( Guid? track )
        {
            throw new NotImplementedException();
        }

        public CameraStatusEntity? GetCameraStatusByTrackAndTimestamp( Guid? track, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public CameraStatusEntity? GetCameraStatusByTrackAtTimestamp( Guid? track, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<CameraStatusEntity> GetCameraStatusByTrackFromTimestamp( Guid? track, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<CameraStatusEntity> GetCameraStatusByTrackUntilTimestamp( Guid? track, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<CameraStatusEntity> GetCameraStatusByTrackOverTimestamp( Guid track, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

        public List<CameraStatusEntity> GetCameraStatusCollectionByTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<CameraStatusEntity> GetCameraStatusCollectionAtTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<CameraStatusEntity> GetCameraStatusCollectionFromTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<CameraStatusEntity> GetCameraStatusCollectionUntilTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<CameraStatusEntity> GetCameraStatusCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

        public IList<CameraTiltCalibrationEntity> GetCameraTiltCalibrationCollection( )
        {
            throw new NotImplementedException();
        }

        public List<CameraTiltCalibrationEntity> GetCameraTiltCalibrationCollectionByCamera( Guid camera )
        {
            throw new NotImplementedException();
        }

        public CameraTiltCalibrationEntity? GetCameraTiltCalibrationByCameraAndTimestamp( Guid camera, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public CameraTiltCalibrationEntity? GetCameraTiltCalibrationByCameraAtTimestamp( Guid camera, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<CameraTiltCalibrationEntity> GetCameraTiltCalibrationByCameraFromTimestamp( Guid camera, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<CameraTiltCalibrationEntity> GetCameraTiltCalibrationByCameraUntilTimestamp( Guid camera, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<CameraTiltCalibrationEntity> GetCameraTiltCalibrationByCameraOverTimestamp( Guid camera, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

        public List<CameraTiltCalibrationEntity> GetCameraTiltCalibrationCollectionByTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<CameraTiltCalibrationEntity> GetCameraTiltCalibrationCollectionAtTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<CameraTiltCalibrationEntity> GetCameraTiltCalibrationCollectionFromTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<CameraTiltCalibrationEntity> GetCameraTiltCalibrationCollectionUntilTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<CameraTiltCalibrationEntity> GetCameraTiltCalibrationCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

        public IList<CameraTiltCalibrationValueEntity> GetCameraTiltCalibrationValueCollection( )
        {
            throw new NotImplementedException();
        }

        public List<CameraTiltCalibrationValueEntity> GetCameraTiltCalibrationValueCollectionByTiltCalibration( Guid tiltCalibration )
        {
            throw new NotImplementedException();
        }

        public CameraTiltCalibrationValueEntity? GetCameraTiltCalibrationValueByTiltCalibrationAndPanAngle( Guid tiltCalibration, double panAngle )
        {
            throw new NotImplementedException();
        }

        public List<CameraTiltCalibrationValueEntity> GetCameraTiltCalibrationValueByTiltCalibrationFromPanAngle( Guid tiltCalibration, double panAngle )
        {
            throw new NotImplementedException();
        }

        public List<CameraTiltCalibrationValueEntity> GetCameraTiltCalibrationValueByTiltCalibrationUntilPanAngle( Guid tiltCalibration, double panAngle )
        {
            throw new NotImplementedException();
        }

        public List<CameraTiltCalibrationValueEntity> GetCameraTiltCalibrationValueByTiltCalibrationOverPanAngle( Guid tiltCalibration, double fromPanAngle, double untilPanAngle )
        {
            throw new NotImplementedException();
        }

        public IList<CameraZoomCalibrationEntity> GetCameraZoomCalibrationCollection( )
        {
            throw new NotImplementedException();
        }

        public List<CameraZoomCalibrationEntity> GetCameraZoomCalibrationCollectionByCamera( Guid camera )
        {
            throw new NotImplementedException();
        }

        public CameraZoomCalibrationEntity? GetCameraZoomCalibrationByCameraAndTimestamp( Guid camera, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public CameraZoomCalibrationEntity? GetCameraZoomCalibrationByCameraAtTimestamp( Guid camera, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<CameraZoomCalibrationEntity> GetCameraZoomCalibrationByCameraFromTimestamp( Guid camera, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<CameraZoomCalibrationEntity> GetCameraZoomCalibrationByCameraUntilTimestamp( Guid camera, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<CameraZoomCalibrationEntity> GetCameraZoomCalibrationByCameraOverTimestamp( Guid camera, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

        public List<CameraZoomCalibrationEntity> GetCameraZoomCalibrationCollectionByTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<CameraZoomCalibrationEntity> GetCameraZoomCalibrationCollectionAtTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<CameraZoomCalibrationEntity> GetCameraZoomCalibrationCollectionFromTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<CameraZoomCalibrationEntity> GetCameraZoomCalibrationCollectionUntilTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<CameraZoomCalibrationEntity> GetCameraZoomCalibrationCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

        public IList<CameraZoomCalibrationValueEntity> GetCameraZoomCalibrationValueCollection( )
        {
            throw new NotImplementedException();
        }

        public List<CameraZoomCalibrationValueEntity> GetCameraZoomCalibrationValueCollectionByZoomCalibration( Guid zoomCalibration )
        {
            throw new NotImplementedException();
        }

        public CameraZoomCalibrationValueEntity? GetCameraZoomCalibrationValueByZoomCalibrationAndFocalLength( Guid zoomCalibration, double focalLength )
        {
            throw new NotImplementedException();
        }

        public List<CameraZoomCalibrationValueEntity> GetCameraZoomCalibrationValueByZoomCalibrationFromFocalLength( Guid zoomCalibration, double focalLength )
        {
            throw new NotImplementedException();
        }

        public List<CameraZoomCalibrationValueEntity> GetCameraZoomCalibrationValueByZoomCalibrationUntilFocalLength( Guid zoomCalibration, double focalLength )
        {
            throw new NotImplementedException();
        }

        public List<CameraZoomCalibrationValueEntity> GetCameraZoomCalibrationValueByZoomCalibrationOverFocalLength( Guid zoomCalibration, double fromFocalLength, double untilFocalLength )
        {
            throw new NotImplementedException();
        }

        public IList<CatalogElementEntity> GetCatalogElementCollection( )
        {
            throw new NotImplementedException();
        }

        public List<CatalogElementEntity> GetCatalogElementCollectionByCatalog( Guid? catalog )
        {
            throw new NotImplementedException();
        }

        public CatalogElementEntity? GetCatalogElementByCatalogAndName( Guid? catalog, string name )
        {
            throw new NotImplementedException();
        }

        public IList<CatalogEntity> GetCatalogCollection( )
        {
            throw new NotImplementedException();
        }

        public List<CatalogEntity> GetCatalogCollectionByCatalog( Guid? catalog )
        {
            throw new NotImplementedException();
        }

        public CatalogEntity? GetCatalogByCatalogAndName( Guid? catalog, string name )
        {
            throw new NotImplementedException();
        }

        public IList<ElementEntity> GetElementCollection( )
        {
            throw new NotImplementedException();
        }

        public List<ElementEntity> GetElementCollectionByCatalog( Guid? catalog )
        {
            throw new NotImplementedException();
        }

        public ElementEntity? GetElementByCatalogAndName( Guid? catalog, string name )
        {
            throw new NotImplementedException();
        }

        public List<ElementEntity> GetElementCollectionByElementType( Guid? elementType )
        {
            throw new NotImplementedException();
        }

        public IList<CollectionInfoEntity> GetCollectionInfoCollection( )
        {
            throw new NotImplementedException();
        }

        public IList<CountryEntity> GetCountryCollection( )
        {
            throw new NotImplementedException();
        }

        public CountryEntity? GetCountryByName( string name )
        {
            throw new NotImplementedException();
        }

        public CountryEntity? GetCountryByCode( int code )
        {
            throw new NotImplementedException();
        }

        public List<CountryEntity> GetCountryFromCode( int code )
        {
            throw new NotImplementedException();
        }

        public List<CountryEntity> GetCountryUntilCode( int code )
        {
            throw new NotImplementedException();
        }

        public List<CountryEntity> GetCountryOverCode( int fromCode, int untilCode )
        {
            throw new NotImplementedException();
        }

        public CountryEntity? GetCountryByAlpha2( string alpha2 )
        {
            throw new NotImplementedException();
        }

        public CountryEntity? GetCountryByAlpha3( string alpha3 )
        {
            throw new NotImplementedException();
        }

        public IList<CursorInfoEntity> GetCursorInfoCollection( )
        {
            throw new NotImplementedException();
        }

        public IList<DateTimeTimeseriesValueEntity> GetDateTimeTimeseriesValueCollection( )
        {
            throw new NotImplementedException();
        }

        public List<DateTimeTimeseriesValueEntity> GetDateTimeTimeseriesValueCollectionByTimeseries( Guid timeseries )
        {
            throw new NotImplementedException();
        }

        public DateTimeTimeseriesValueEntity? GetDateTimeTimeseriesValueByTimeseriesAndTimestamp( Guid timeseries, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public DateTimeTimeseriesValueEntity? GetDateTimeTimeseriesValueByTimeseriesAtTimestamp( Guid timeseries, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<DateTimeTimeseriesValueEntity> GetDateTimeTimeseriesValueByTimeseriesFromTimestamp( Guid timeseries, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<DateTimeTimeseriesValueEntity> GetDateTimeTimeseriesValueByTimeseriesUntilTimestamp( Guid timeseries, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<DateTimeTimeseriesValueEntity> GetDateTimeTimeseriesValueByTimeseriesOverTimestamp( Guid timeseries, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

        public List<DateTimeTimeseriesValueEntity> GetDateTimeTimeseriesValueCollectionByTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<DateTimeTimeseriesValueEntity> GetDateTimeTimeseriesValueCollectionAtTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<DateTimeTimeseriesValueEntity> GetDateTimeTimeseriesValueCollectionFromTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<DateTimeTimeseriesValueEntity> GetDateTimeTimeseriesValueCollectionUntilTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<DateTimeTimeseriesValueEntity> GetDateTimeTimeseriesValueCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

        public IList<DeviceHostEntity> GetDeviceHostCollection( )
        {
            throw new NotImplementedException();
        }

        public DeviceHostEntity? GetDeviceHostByName( string name )
        {
            throw new NotImplementedException();
        }

        public IList<DeviceHostConfigurationEntity> GetDeviceHostConfigurationCollection( )
        {
            throw new NotImplementedException();
        }

        public List<DeviceHostConfigurationEntity> GetDeviceHostConfigurationCollectionByHost( Guid host )
        {
            throw new NotImplementedException();
        }

        public DeviceHostConfigurationEntity? GetDeviceHostConfigurationByHostAndTimestamp( Guid host, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public DeviceHostConfigurationEntity? GetDeviceHostConfigurationByHostAtTimestamp( Guid host, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<DeviceHostConfigurationEntity> GetDeviceHostConfigurationByHostFromTimestamp( Guid host, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<DeviceHostConfigurationEntity> GetDeviceHostConfigurationByHostUntilTimestamp( Guid host, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<DeviceHostConfigurationEntity> GetDeviceHostConfigurationByHostOverTimestamp( Guid host, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

        public List<DeviceHostConfigurationEntity> GetDeviceHostConfigurationCollectionByTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<DeviceHostConfigurationEntity> GetDeviceHostConfigurationCollectionAtTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<DeviceHostConfigurationEntity> GetDeviceHostConfigurationCollectionFromTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<DeviceHostConfigurationEntity> GetDeviceHostConfigurationCollectionUntilTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<DeviceHostConfigurationEntity> GetDeviceHostConfigurationCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

        public IList<DoubleTimeseriesValueEntity> GetDoubleTimeseriesValueCollection( )
        {
            throw new NotImplementedException();
        }

        public List<DoubleTimeseriesValueEntity> GetDoubleTimeseriesValueCollectionByTimeseries( Guid timeseries )
        {
            throw new NotImplementedException();
        }

        public DoubleTimeseriesValueEntity? GetDoubleTimeseriesValueByTimeseriesAndTimestamp( Guid timeseries, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public DoubleTimeseriesValueEntity? GetDoubleTimeseriesValueByTimeseriesAtTimestamp( Guid timeseries, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<DoubleTimeseriesValueEntity> GetDoubleTimeseriesValueByTimeseriesFromTimestamp( Guid timeseries, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<DoubleTimeseriesValueEntity> GetDoubleTimeseriesValueByTimeseriesUntilTimestamp( Guid timeseries, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<DoubleTimeseriesValueEntity> GetDoubleTimeseriesValueByTimeseriesOverTimestamp( Guid timeseries, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

        public List<DoubleTimeseriesValueEntity> GetDoubleTimeseriesValueCollectionByTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<DoubleTimeseriesValueEntity> GetDoubleTimeseriesValueCollectionAtTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<DoubleTimeseriesValueEntity> GetDoubleTimeseriesValueCollectionFromTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<DoubleTimeseriesValueEntity> GetDoubleTimeseriesValueCollectionUntilTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<DoubleTimeseriesValueEntity> GetDoubleTimeseriesValueCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

        public IList<FacilityTypeEntity> GetFacilityTypeCollection( )
        {
            throw new NotImplementedException();
        }

        public FacilityTypeEntity? GetFacilityTypeByName( string name )
        {
            throw new NotImplementedException();
        }

        public IList<GeoPosition2DTimeseriesValueEntity> GetGeoPosition2DTimeseriesValueCollection( )
        {
            throw new NotImplementedException();
        }

        public List<GeoPosition2DTimeseriesValueEntity> GetGeoPosition2DTimeseriesValueCollectionByTimeseries( Guid timeseries )
        {
            throw new NotImplementedException();
        }

        public GeoPosition2DTimeseriesValueEntity? GetGeoPosition2DTimeseriesValueByTimeseriesAndTimestamp( Guid timeseries, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public GeoPosition2DTimeseriesValueEntity? GetGeoPosition2DTimeseriesValueByTimeseriesAtTimestamp( Guid timeseries, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<GeoPosition2DTimeseriesValueEntity> GetGeoPosition2DTimeseriesValueByTimeseriesFromTimestamp( Guid timeseries, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<GeoPosition2DTimeseriesValueEntity> GetGeoPosition2DTimeseriesValueByTimeseriesUntilTimestamp( Guid timeseries, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<GeoPosition2DTimeseriesValueEntity> GetGeoPosition2DTimeseriesValueByTimeseriesOverTimestamp( Guid timeseries, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

        public List<GeoPosition2DTimeseriesValueEntity> GetGeoPosition2DTimeseriesValueCollectionByTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<GeoPosition2DTimeseriesValueEntity> GetGeoPosition2DTimeseriesValueCollectionAtTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<GeoPosition2DTimeseriesValueEntity> GetGeoPosition2DTimeseriesValueCollectionFromTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<GeoPosition2DTimeseriesValueEntity> GetGeoPosition2DTimeseriesValueCollectionUntilTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<GeoPosition2DTimeseriesValueEntity> GetGeoPosition2DTimeseriesValueCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

        public IList<GeoPosition3DTimeseriesValueEntity> GetGeoPosition3DTimeseriesValueCollection( )
        {
            throw new NotImplementedException();
        }

        public List<GeoPosition3DTimeseriesValueEntity> GetGeoPosition3DTimeseriesValueCollectionByTimeseries( Guid timeseries )
        {
            throw new NotImplementedException();
        }

        public GeoPosition3DTimeseriesValueEntity? GetGeoPosition3DTimeseriesValueByTimeseriesAndTimestamp( Guid timeseries, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public GeoPosition3DTimeseriesValueEntity? GetGeoPosition3DTimeseriesValueByTimeseriesAtTimestamp( Guid timeseries, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<GeoPosition3DTimeseriesValueEntity> GetGeoPosition3DTimeseriesValueByTimeseriesFromTimestamp( Guid timeseries, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<GeoPosition3DTimeseriesValueEntity> GetGeoPosition3DTimeseriesValueByTimeseriesUntilTimestamp( Guid timeseries, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<GeoPosition3DTimeseriesValueEntity> GetGeoPosition3DTimeseriesValueByTimeseriesOverTimestamp( Guid timeseries, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

        public List<GeoPosition3DTimeseriesValueEntity> GetGeoPosition3DTimeseriesValueCollectionByTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<GeoPosition3DTimeseriesValueEntity> GetGeoPosition3DTimeseriesValueCollectionAtTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<GeoPosition3DTimeseriesValueEntity> GetGeoPosition3DTimeseriesValueCollectionFromTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<GeoPosition3DTimeseriesValueEntity> GetGeoPosition3DTimeseriesValueCollectionUntilTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<GeoPosition3DTimeseriesValueEntity> GetGeoPosition3DTimeseriesValueCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

        public IList<GNSSDeviceCommandEntity> GetGNSSDeviceCommandCollection( )
        {
            throw new NotImplementedException();
        }

        public List<GNSSDeviceCommandEntity> GetGNSSDeviceCommandCollectionByGNSSDevice( Guid gNSSDevice )
        {
            throw new NotImplementedException();
        }

        public List<GNSSDeviceCommandEntity> GetGNSSDeviceCommandCollectionByGNSSDeviceAndTimestamp( Guid gNSSDevice, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<GNSSDeviceCommandEntity> GetGNSSDeviceCommandCollectionByGNSSDeviceAtTimestamp( Guid gNSSDevice, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<GNSSDeviceCommandEntity> GetGNSSDeviceCommandCollectionByGNSSDeviceFromTimestamp( Guid gNSSDevice, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<GNSSDeviceCommandEntity> GetGNSSDeviceCommandCollectionByGNSSDeviceUntilTimestamp( Guid gNSSDevice, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<GNSSDeviceCommandEntity> GetGNSSDeviceCommandCollectionByGNSSDeviceOverTimestamp( Guid gNSSDevice, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

        public List<GNSSDeviceCommandEntity> GetGNSSDeviceCommandCollectionByTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<GNSSDeviceCommandEntity> GetGNSSDeviceCommandCollectionAtTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<GNSSDeviceCommandEntity> GetGNSSDeviceCommandCollectionFromTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<GNSSDeviceCommandEntity> GetGNSSDeviceCommandCollectionUntilTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<GNSSDeviceCommandEntity> GetGNSSDeviceCommandCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

        public List<GNSSDeviceCommandEntity> GetGNSSDeviceCommandCollectionByReply( Guid? reply )
        {
            throw new NotImplementedException();
        }

        public IList<GNSSDeviceCommandReplyEntity> GetGNSSDeviceCommandReplyCollection( )
        {
            throw new NotImplementedException();
        }

        public List<GNSSDeviceCommandReplyEntity> GetGNSSDeviceCommandReplyCollectionByGNSSDevice( Guid gNSSDevice )
        {
            throw new NotImplementedException();
        }

        public List<GNSSDeviceCommandReplyEntity> GetGNSSDeviceCommandReplyCollectionByGNSSDeviceAndTimestamp( Guid gNSSDevice, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<GNSSDeviceCommandReplyEntity> GetGNSSDeviceCommandReplyCollectionByGNSSDeviceAtTimestamp( Guid gNSSDevice, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<GNSSDeviceCommandReplyEntity> GetGNSSDeviceCommandReplyCollectionByGNSSDeviceFromTimestamp( Guid gNSSDevice, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<GNSSDeviceCommandReplyEntity> GetGNSSDeviceCommandReplyCollectionByGNSSDeviceUntilTimestamp( Guid gNSSDevice, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<GNSSDeviceCommandReplyEntity> GetGNSSDeviceCommandReplyCollectionByGNSSDeviceOverTimestamp( Guid gNSSDevice, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

        public List<GNSSDeviceCommandReplyEntity> GetGNSSDeviceCommandReplyCollectionByTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<GNSSDeviceCommandReplyEntity> GetGNSSDeviceCommandReplyCollectionAtTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<GNSSDeviceCommandReplyEntity> GetGNSSDeviceCommandReplyCollectionFromTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<GNSSDeviceCommandReplyEntity> GetGNSSDeviceCommandReplyCollectionUntilTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<GNSSDeviceCommandReplyEntity> GetGNSSDeviceCommandReplyCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

        public GNSSDeviceCommandReplyEntity? GetGNSSDeviceCommandReplyByCommand( Guid? command )
        {
            throw new NotImplementedException();
        }

        public IList<GNSSDeviceConfigurationEntity> GetGNSSDeviceConfigurationCollection( )
        {
            throw new NotImplementedException();
        }

        public List<GNSSDeviceConfigurationEntity> GetGNSSDeviceConfigurationCollectionByGNSSDevice( Guid gNSSDevice )
        {
            throw new NotImplementedException();
        }

        public GNSSDeviceConfigurationEntity? GetGNSSDeviceConfigurationByGNSSDeviceAndTimestamp( Guid gNSSDevice, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public GNSSDeviceConfigurationEntity? GetGNSSDeviceConfigurationByGNSSDeviceAtTimestamp( Guid gNSSDevice, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<GNSSDeviceConfigurationEntity> GetGNSSDeviceConfigurationByGNSSDeviceFromTimestamp( Guid gNSSDevice, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<GNSSDeviceConfigurationEntity> GetGNSSDeviceConfigurationByGNSSDeviceUntilTimestamp( Guid gNSSDevice, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<GNSSDeviceConfigurationEntity> GetGNSSDeviceConfigurationByGNSSDeviceOverTimestamp( Guid gNSSDevice, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

        public List<GNSSDeviceConfigurationEntity> GetGNSSDeviceConfigurationCollectionByTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<GNSSDeviceConfigurationEntity> GetGNSSDeviceConfigurationCollectionAtTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<GNSSDeviceConfigurationEntity> GetGNSSDeviceConfigurationCollectionFromTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<GNSSDeviceConfigurationEntity> GetGNSSDeviceConfigurationCollectionUntilTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<GNSSDeviceConfigurationEntity> GetGNSSDeviceConfigurationCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

        public IList<GuidTimeseriesValueEntity> GetGuidTimeseriesValueCollection( )
        {
            throw new NotImplementedException();
        }

        public List<GuidTimeseriesValueEntity> GetGuidTimeseriesValueCollectionByTimeseries( Guid timeseries )
        {
            throw new NotImplementedException();
        }

        public GuidTimeseriesValueEntity? GetGuidTimeseriesValueByTimeseriesAndTimestamp( Guid timeseries, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public GuidTimeseriesValueEntity? GetGuidTimeseriesValueByTimeseriesAtTimestamp( Guid timeseries, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<GuidTimeseriesValueEntity> GetGuidTimeseriesValueByTimeseriesFromTimestamp( Guid timeseries, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<GuidTimeseriesValueEntity> GetGuidTimeseriesValueByTimeseriesUntilTimestamp( Guid timeseries, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<GuidTimeseriesValueEntity> GetGuidTimeseriesValueByTimeseriesOverTimestamp( Guid timeseries, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

        public List<GuidTimeseriesValueEntity> GetGuidTimeseriesValueCollectionByTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<GuidTimeseriesValueEntity> GetGuidTimeseriesValueCollectionAtTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<GuidTimeseriesValueEntity> GetGuidTimeseriesValueCollectionFromTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<GuidTimeseriesValueEntity> GetGuidTimeseriesValueCollectionUntilTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<GuidTimeseriesValueEntity> GetGuidTimeseriesValueCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

        public IList<GyroDeviceCommandEntity> GetGyroDeviceCommandCollection( )
        {
            throw new NotImplementedException();
        }

        public List<GyroDeviceCommandEntity> GetGyroDeviceCommandCollectionByGyroDevice( Guid gyroDevice )
        {
            throw new NotImplementedException();
        }

        public List<GyroDeviceCommandEntity> GetGyroDeviceCommandCollectionByGyroDeviceAndTimestamp( Guid gyroDevice, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<GyroDeviceCommandEntity> GetGyroDeviceCommandCollectionByGyroDeviceAtTimestamp( Guid gyroDevice, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<GyroDeviceCommandEntity> GetGyroDeviceCommandCollectionByGyroDeviceFromTimestamp( Guid gyroDevice, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<GyroDeviceCommandEntity> GetGyroDeviceCommandCollectionByGyroDeviceUntilTimestamp( Guid gyroDevice, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<GyroDeviceCommandEntity> GetGyroDeviceCommandCollectionByGyroDeviceOverTimestamp( Guid gyroDevice, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

        public List<GyroDeviceCommandEntity> GetGyroDeviceCommandCollectionByTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<GyroDeviceCommandEntity> GetGyroDeviceCommandCollectionAtTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<GyroDeviceCommandEntity> GetGyroDeviceCommandCollectionFromTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<GyroDeviceCommandEntity> GetGyroDeviceCommandCollectionUntilTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<GyroDeviceCommandEntity> GetGyroDeviceCommandCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

        public List<GyroDeviceCommandEntity> GetGyroDeviceCommandCollectionByReply( Guid? reply )
        {
            throw new NotImplementedException();
        }

        public IList<GyroDeviceCommandReplyEntity> GetGyroDeviceCommandReplyCollection( )
        {
            throw new NotImplementedException();
        }

        public List<GyroDeviceCommandReplyEntity> GetGyroDeviceCommandReplyCollectionByGyroDevice( Guid gyroDevice )
        {
            throw new NotImplementedException();
        }

        public List<GyroDeviceCommandReplyEntity> GetGyroDeviceCommandReplyCollectionByGyroDeviceAndTimestamp( Guid gyroDevice, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<GyroDeviceCommandReplyEntity> GetGyroDeviceCommandReplyCollectionByGyroDeviceAtTimestamp( Guid gyroDevice, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<GyroDeviceCommandReplyEntity> GetGyroDeviceCommandReplyCollectionByGyroDeviceFromTimestamp( Guid gyroDevice, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<GyroDeviceCommandReplyEntity> GetGyroDeviceCommandReplyCollectionByGyroDeviceUntilTimestamp( Guid gyroDevice, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<GyroDeviceCommandReplyEntity> GetGyroDeviceCommandReplyCollectionByGyroDeviceOverTimestamp( Guid gyroDevice, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

        public List<GyroDeviceCommandReplyEntity> GetGyroDeviceCommandReplyCollectionByTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<GyroDeviceCommandReplyEntity> GetGyroDeviceCommandReplyCollectionAtTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<GyroDeviceCommandReplyEntity> GetGyroDeviceCommandReplyCollectionFromTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<GyroDeviceCommandReplyEntity> GetGyroDeviceCommandReplyCollectionUntilTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<GyroDeviceCommandReplyEntity> GetGyroDeviceCommandReplyCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

        public GyroDeviceCommandReplyEntity? GetGyroDeviceCommandReplyByCommand( Guid? command )
        {
            throw new NotImplementedException();
        }

        public IList<GyroDeviceConfigurationEntity> GetGyroDeviceConfigurationCollection( )
        {
            throw new NotImplementedException();
        }

        public List<GyroDeviceConfigurationEntity> GetGyroDeviceConfigurationCollectionByGyroDevice( Guid gyroDevice )
        {
            throw new NotImplementedException();
        }

        public GyroDeviceConfigurationEntity? GetGyroDeviceConfigurationByGyroDeviceAndTimestamp( Guid gyroDevice, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public GyroDeviceConfigurationEntity? GetGyroDeviceConfigurationByGyroDeviceAtTimestamp( Guid gyroDevice, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<GyroDeviceConfigurationEntity> GetGyroDeviceConfigurationByGyroDeviceFromTimestamp( Guid gyroDevice, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<GyroDeviceConfigurationEntity> GetGyroDeviceConfigurationByGyroDeviceUntilTimestamp( Guid gyroDevice, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<GyroDeviceConfigurationEntity> GetGyroDeviceConfigurationByGyroDeviceOverTimestamp( Guid gyroDevice, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

        public List<GyroDeviceConfigurationEntity> GetGyroDeviceConfigurationCollectionByTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<GyroDeviceConfigurationEntity> GetGyroDeviceConfigurationCollectionAtTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<GyroDeviceConfigurationEntity> GetGyroDeviceConfigurationCollectionFromTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<GyroDeviceConfigurationEntity> GetGyroDeviceConfigurationCollectionUntilTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<GyroDeviceConfigurationEntity> GetGyroDeviceConfigurationCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

        public IList<IdentityEntity> GetIdentityCollection( )
        {
            throw new NotImplementedException();
        }

        public IList<CallsignEntity> GetCallsignCollection( )
        {
            throw new NotImplementedException();
        }

        public CallsignEntity? GetCallsignByIdentifier( string identifier )
        {
            throw new NotImplementedException();
        }

        public IList<InternationalMaritimeOrganizationNumberEntity> GetInternationalMaritimeOrganizationNumberCollection( )
        {
            throw new NotImplementedException();
        }

        public InternationalMaritimeOrganizationNumberEntity? GetInternationalMaritimeOrganizationNumberByIdentifier( long identifier )
        {
            throw new NotImplementedException();
        }

        public List<InternationalMaritimeOrganizationNumberEntity> GetInternationalMaritimeOrganizationNumberFromIdentifier( long identifier )
        {
            throw new NotImplementedException();
        }

        public List<InternationalMaritimeOrganizationNumberEntity> GetInternationalMaritimeOrganizationNumberUntilIdentifier( long identifier )
        {
            throw new NotImplementedException();
        }

        public List<InternationalMaritimeOrganizationNumberEntity> GetInternationalMaritimeOrganizationNumberOverIdentifier( long fromIdentifier, long untilIdentifier )
        {
            throw new NotImplementedException();
        }

        public IList<MaritimeMobileServiceIdentityEntity> GetMaritimeMobileServiceIdentityCollection( )
        {
            throw new NotImplementedException();
        }

        public MaritimeMobileServiceIdentityEntity? GetMaritimeMobileServiceIdentityByIdentifier( long identifier )
        {
            throw new NotImplementedException();
        }

        public List<MaritimeMobileServiceIdentityEntity> GetMaritimeMobileServiceIdentityFromIdentifier( long identifier )
        {
            throw new NotImplementedException();
        }

        public List<MaritimeMobileServiceIdentityEntity> GetMaritimeMobileServiceIdentityUntilIdentifier( long identifier )
        {
            throw new NotImplementedException();
        }

        public List<MaritimeMobileServiceIdentityEntity> GetMaritimeMobileServiceIdentityOverIdentifier( long fromIdentifier, long untilIdentifier )
        {
            throw new NotImplementedException();
        }

        public IList<NameEntity> GetNameCollection( )
        {
            throw new NotImplementedException();
        }

        public NameEntity? GetNameByText( string text )
        {
            throw new NotImplementedException();
        }

        public IList<Int16TimeseriesValueEntity> GetInt16TimeseriesValueCollection( )
        {
            throw new NotImplementedException();
        }

        public List<Int16TimeseriesValueEntity> GetInt16TimeseriesValueCollectionByTimeseries( Guid timeseries )
        {
            throw new NotImplementedException();
        }

        public Int16TimeseriesValueEntity? GetInt16TimeseriesValueByTimeseriesAndTimestamp( Guid timeseries, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public Int16TimeseriesValueEntity? GetInt16TimeseriesValueByTimeseriesAtTimestamp( Guid timeseries, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<Int16TimeseriesValueEntity> GetInt16TimeseriesValueByTimeseriesFromTimestamp( Guid timeseries, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<Int16TimeseriesValueEntity> GetInt16TimeseriesValueByTimeseriesUntilTimestamp( Guid timeseries, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<Int16TimeseriesValueEntity> GetInt16TimeseriesValueByTimeseriesOverTimestamp( Guid timeseries, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

        public List<Int16TimeseriesValueEntity> GetInt16TimeseriesValueCollectionByTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<Int16TimeseriesValueEntity> GetInt16TimeseriesValueCollectionAtTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<Int16TimeseriesValueEntity> GetInt16TimeseriesValueCollectionFromTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<Int16TimeseriesValueEntity> GetInt16TimeseriesValueCollectionUntilTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<Int16TimeseriesValueEntity> GetInt16TimeseriesValueCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

        public IList<Int32TimeseriesValueEntity> GetInt32TimeseriesValueCollection( )
        {
            throw new NotImplementedException();
        }

        public List<Int32TimeseriesValueEntity> GetInt32TimeseriesValueCollectionByTimeseries( Guid timeseries )
        {
            throw new NotImplementedException();
        }

        public Int32TimeseriesValueEntity? GetInt32TimeseriesValueByTimeseriesAndTimestamp( Guid timeseries, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public Int32TimeseriesValueEntity? GetInt32TimeseriesValueByTimeseriesAtTimestamp( Guid timeseries, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<Int32TimeseriesValueEntity> GetInt32TimeseriesValueByTimeseriesFromTimestamp( Guid timeseries, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<Int32TimeseriesValueEntity> GetInt32TimeseriesValueByTimeseriesUntilTimestamp( Guid timeseries, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<Int32TimeseriesValueEntity> GetInt32TimeseriesValueByTimeseriesOverTimestamp( Guid timeseries, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

        public List<Int32TimeseriesValueEntity> GetInt32TimeseriesValueCollectionByTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<Int32TimeseriesValueEntity> GetInt32TimeseriesValueCollectionAtTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<Int32TimeseriesValueEntity> GetInt32TimeseriesValueCollectionFromTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<Int32TimeseriesValueEntity> GetInt32TimeseriesValueCollectionUntilTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<Int32TimeseriesValueEntity> GetInt32TimeseriesValueCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

        public IList<Int64TimeseriesValueEntity> GetInt64TimeseriesValueCollection( )
        {
            throw new NotImplementedException();
        }

        public List<Int64TimeseriesValueEntity> GetInt64TimeseriesValueCollectionByTimeseries( Guid timeseries )
        {
            throw new NotImplementedException();
        }

        public Int64TimeseriesValueEntity? GetInt64TimeseriesValueByTimeseriesAndTimestamp( Guid timeseries, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public Int64TimeseriesValueEntity? GetInt64TimeseriesValueByTimeseriesAtTimestamp( Guid timeseries, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<Int64TimeseriesValueEntity> GetInt64TimeseriesValueByTimeseriesFromTimestamp( Guid timeseries, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<Int64TimeseriesValueEntity> GetInt64TimeseriesValueByTimeseriesUntilTimestamp( Guid timeseries, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<Int64TimeseriesValueEntity> GetInt64TimeseriesValueByTimeseriesOverTimestamp( Guid timeseries, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

        public List<Int64TimeseriesValueEntity> GetInt64TimeseriesValueCollectionByTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<Int64TimeseriesValueEntity> GetInt64TimeseriesValueCollectionAtTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<Int64TimeseriesValueEntity> GetInt64TimeseriesValueCollectionFromTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<Int64TimeseriesValueEntity> GetInt64TimeseriesValueCollectionUntilTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<Int64TimeseriesValueEntity> GetInt64TimeseriesValueCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

        public IList<ItemEntity> GetItemCollection( )
        {
            throw new NotImplementedException();
        }

        public IList<BaseStationEntity> GetBaseStationCollection( )
        {
            throw new NotImplementedException();
        }

        public BaseStationEntity? GetBaseStationByName( string name )
        {
            throw new NotImplementedException();
        }

        public List<BaseStationEntity> GetBaseStationCollectionByType( Guid? type )
        {
            throw new NotImplementedException();
        }

        public IList<DeviceEntity> GetDeviceCollection( )
        {
            throw new NotImplementedException();
        }

        public List<DeviceEntity> GetDeviceCollectionByHost( Guid host )
        {
            throw new NotImplementedException();
        }

        public DeviceEntity? GetDeviceByName( string name )
        {
            throw new NotImplementedException();
        }

        public IList<CameraDeviceEntity> GetCameraDeviceCollection( )
        {
            throw new NotImplementedException();
        }

        public List<CameraDeviceEntity> GetCameraDeviceCollectionByHost( Guid host )
        {
            throw new NotImplementedException();
        }

        public CameraDeviceEntity? GetCameraDeviceByName( string name )
        {
            throw new NotImplementedException();
        }

        public IList<GNSSDeviceEntity> GetGNSSDeviceCollection( )
        {
            throw new NotImplementedException();
        }

        public List<GNSSDeviceEntity> GetGNSSDeviceCollectionByHost( Guid host )
        {
            throw new NotImplementedException();
        }

        public GNSSDeviceEntity? GetGNSSDeviceByName( string name )
        {
            throw new NotImplementedException();
        }

        public IList<GyroDeviceEntity> GetGyroDeviceCollection( )
        {
            throw new NotImplementedException();
        }

        public List<GyroDeviceEntity> GetGyroDeviceCollectionByHost( Guid host )
        {
            throw new NotImplementedException();
        }

        public GyroDeviceEntity? GetGyroDeviceByName( string name )
        {
            throw new NotImplementedException();
        }

        public List<GyroDeviceEntity> GetGyroDeviceCollectionByGNSSDevice( Guid? gNSSDevice )
        {
            throw new NotImplementedException();
        }

        public IList<LineInputDeviceEntity> GetLineInputDeviceCollection( )
        {
            throw new NotImplementedException();
        }

        public List<LineInputDeviceEntity> GetLineInputDeviceCollectionByHost( Guid host )
        {
            throw new NotImplementedException();
        }

        public LineInputDeviceEntity? GetLineInputDeviceByName( string name )
        {
            throw new NotImplementedException();
        }

        public IList<OilSpillDetectorDeviceEntity> GetOilSpillDetectorDeviceCollection( )
        {
            throw new NotImplementedException();
        }

        public List<OilSpillDetectorDeviceEntity> GetOilSpillDetectorDeviceCollectionByHost( Guid host )
        {
            throw new NotImplementedException();
        }

        public OilSpillDetectorDeviceEntity? GetOilSpillDetectorDeviceByName( string name )
        {
            throw new NotImplementedException();
        }

        public IList<RadioDeviceEntity> GetRadioDeviceCollection( )
        {
            throw new NotImplementedException();
        }

        public List<RadioDeviceEntity> GetRadioDeviceCollectionByHost( Guid host )
        {
            throw new NotImplementedException();
        }

        public RadioDeviceEntity? GetRadioDeviceByName( string name )
        {
            throw new NotImplementedException();
        }

        public IList<RadomeDeviceEntity> GetRadomeDeviceCollection( )
        {
            throw new NotImplementedException();
        }

        public List<RadomeDeviceEntity> GetRadomeDeviceCollectionByHost( Guid host )
        {
            throw new NotImplementedException();
        }

        public RadomeDeviceEntity? GetRadomeDeviceByName( string name )
        {
            throw new NotImplementedException();
        }

        public List<RadomeDeviceEntity> GetRadomeDeviceCollectionByRadar( Guid? radar )
        {
            throw new NotImplementedException();
        }

        public IList<TrackerDeviceEntity> GetTrackerDeviceCollection( )
        {
            throw new NotImplementedException();
        }

        public List<TrackerDeviceEntity> GetTrackerDeviceCollectionByHost( Guid host )
        {
            throw new NotImplementedException();
        }

        public TrackerDeviceEntity? GetTrackerDeviceByName( string name )
        {
            throw new NotImplementedException();
        }

        public IList<AisDeviceEntity> GetAisDeviceCollection( )
        {
            throw new NotImplementedException();
        }

        public List<AisDeviceEntity> GetAisDeviceCollectionByHost( Guid host )
        {
            throw new NotImplementedException();
        }

        public AisDeviceEntity? GetAisDeviceByName( string name )
        {
            throw new NotImplementedException();
        }

        public IList<RadarDeviceEntity> GetRadarDeviceCollection( )
        {
            throw new NotImplementedException();
        }

        public List<RadarDeviceEntity> GetRadarDeviceCollectionByHost( Guid host )
        {
            throw new NotImplementedException();
        }

        public RadarDeviceEntity? GetRadarDeviceByName( string name )
        {
            throw new NotImplementedException();
        }

        public List<RadarDeviceEntity> GetRadarDeviceCollectionByRadome( Guid? radome )
        {
            throw new NotImplementedException();
        }

        public List<RadarDeviceEntity> GetRadarDeviceCollectionByGNSSDevice( Guid? gNSSDevice )
        {
            throw new NotImplementedException();
        }

        public IList<WeatherStationDeviceEntity> GetWeatherStationDeviceCollection( )
        {
            throw new NotImplementedException();
        }

        public List<WeatherStationDeviceEntity> GetWeatherStationDeviceCollectionByHost( Guid host )
        {
            throw new NotImplementedException();
        }

        public WeatherStationDeviceEntity? GetWeatherStationDeviceByName( string name )
        {
            throw new NotImplementedException();
        }

        public List<WeatherStationDeviceEntity> GetWeatherStationDeviceCollectionByGyro( Guid? gyro )
        {
            throw new NotImplementedException();
        }

        public IList<FacilityEntity> GetFacilityCollection( )
        {
            throw new NotImplementedException();
        }

        public FacilityEntity? GetFacilityByName( string name )
        {
            throw new NotImplementedException();
        }

        public List<FacilityEntity> GetFacilityCollectionByType( Guid? type )
        {
            throw new NotImplementedException();
        }

        public IList<TrackableItemEntity> GetTrackableItemCollection( )
        {
            throw new NotImplementedException();
        }

        public IList<AircraftEntity> GetAircraftCollection( )
        {
            throw new NotImplementedException();
        }

        public List<AircraftEntity> GetAircraftCollectionByName( string name )
        {
            throw new NotImplementedException();
        }

        public List<AircraftEntity> GetAircraftCollectionByType( Guid? type )
        {
            throw new NotImplementedException();
        }

        public IList<AisAidToNavigationEntity> GetAisAidToNavigationCollection( )
        {
            throw new NotImplementedException();
        }

        public AisAidToNavigationEntity? GetAisAidToNavigationByName( string name )
        {
            throw new NotImplementedException();
        }

        public List<AisAidToNavigationEntity> GetAisAidToNavigationCollectionByMMSI( Guid? mMSI )
        {
            throw new NotImplementedException();
        }

        public IList<VehicleEntity> GetVehicleCollection( )
        {
            throw new NotImplementedException();
        }

        public VehicleEntity? GetVehicleByName( string name )
        {
            throw new NotImplementedException();
        }

        public List<VehicleEntity> GetVehicleCollectionByType( Guid? type )
        {
            throw new NotImplementedException();
        }

        public IList<VesselEntity> GetVesselCollection( )
        {
            throw new NotImplementedException();
        }

        public List<VesselEntity> GetVesselCollectionByName( string name )
        {
            throw new NotImplementedException();
        }

        public List<VesselEntity> GetVesselCollectionByType( Guid? type )
        {
            throw new NotImplementedException();
        }

        public IList<ItemIdentityLinkEntity> GetItemIdentityLinkCollection( )
        {
            throw new NotImplementedException();
        }

        public List<ItemIdentityLinkEntity> GetItemIdentityLinkCollectionByItem( Guid item )
        {
            throw new NotImplementedException();
        }

        public List<ItemIdentityLinkEntity> GetItemIdentityLinkCollectionByItemAndStart( Guid item, DateTime start )
        {
            throw new NotImplementedException();
        }

        public List<ItemIdentityLinkEntity> GetItemIdentityLinkCollectionByItemAtStart( Guid item, DateTime start )
        {
            throw new NotImplementedException();
        }

        public List<ItemIdentityLinkEntity> GetItemIdentityLinkCollectionByItemFromStart( Guid item, DateTime start )
        {
            throw new NotImplementedException();
        }

        public List<ItemIdentityLinkEntity> GetItemIdentityLinkCollectionByItemUntilStart( Guid item, DateTime start )
        {
            throw new NotImplementedException();
        }

        public List<ItemIdentityLinkEntity> GetItemIdentityLinkCollectionByItemOverStart( Guid item, DateTime fromStart, DateTime untilStart )
        {
            throw new NotImplementedException();
        }

        public List<ItemIdentityLinkEntity> GetItemIdentityLinkCollectionByItemAndEnd( Guid item, DateTime? end )
        {
            throw new NotImplementedException();
        }

        public List<ItemIdentityLinkEntity> GetItemIdentityLinkCollectionByItemAtEnd( Guid item, DateTime? end )
        {
            throw new NotImplementedException();
        }

        public List<ItemIdentityLinkEntity> GetItemIdentityLinkCollectionByItemFromEnd( Guid item, DateTime? end )
        {
            throw new NotImplementedException();
        }

        public List<ItemIdentityLinkEntity> GetItemIdentityLinkCollectionByItemUntilEnd( Guid item, DateTime? end )
        {
            throw new NotImplementedException();
        }

        public List<ItemIdentityLinkEntity> GetItemIdentityLinkCollectionByItemOverEnd( Guid item, DateTime fromEnd, DateTime untilEnd )
        {
            throw new NotImplementedException();
        }

        public List<ItemIdentityLinkEntity> GetItemIdentityLinkCollectionByIdentity( Guid identity )
        {
            throw new NotImplementedException();
        }

        public List<ItemIdentityLinkEntity> GetItemIdentityLinkCollectionByIdentityAndStart( Guid identity, DateTime start )
        {
            throw new NotImplementedException();
        }

        public List<ItemIdentityLinkEntity> GetItemIdentityLinkCollectionByIdentityAtStart( Guid identity, DateTime start )
        {
            throw new NotImplementedException();
        }

        public List<ItemIdentityLinkEntity> GetItemIdentityLinkCollectionByIdentityFromStart( Guid identity, DateTime start )
        {
            throw new NotImplementedException();
        }

        public List<ItemIdentityLinkEntity> GetItemIdentityLinkCollectionByIdentityUntilStart( Guid identity, DateTime start )
        {
            throw new NotImplementedException();
        }

        public List<ItemIdentityLinkEntity> GetItemIdentityLinkCollectionByIdentityOverStart( Guid identity, DateTime fromStart, DateTime untilStart )
        {
            throw new NotImplementedException();
        }

        public List<ItemIdentityLinkEntity> GetItemIdentityLinkCollectionByIdentityAndEnd( Guid identity, DateTime? end )
        {
            throw new NotImplementedException();
        }

        public List<ItemIdentityLinkEntity> GetItemIdentityLinkCollectionByIdentityAtEnd( Guid identity, DateTime? end )
        {
            throw new NotImplementedException();
        }

        public List<ItemIdentityLinkEntity> GetItemIdentityLinkCollectionByIdentityFromEnd( Guid identity, DateTime? end )
        {
            throw new NotImplementedException();
        }

        public List<ItemIdentityLinkEntity> GetItemIdentityLinkCollectionByIdentityUntilEnd( Guid identity, DateTime? end )
        {
            throw new NotImplementedException();
        }

        public List<ItemIdentityLinkEntity> GetItemIdentityLinkCollectionByIdentityOverEnd( Guid identity, DateTime fromEnd, DateTime untilEnd )
        {
            throw new NotImplementedException();
        }

        public List<ItemIdentityLinkEntity> GetItemIdentityLinkCollectionByStart( DateTime start )
        {
            throw new NotImplementedException();
        }

        public List<ItemIdentityLinkEntity> GetItemIdentityLinkCollectionAtStart( DateTime start )
        {
            throw new NotImplementedException();
        }

        public List<ItemIdentityLinkEntity> GetItemIdentityLinkCollectionFromStart( DateTime start )
        {
            throw new NotImplementedException();
        }

        public List<ItemIdentityLinkEntity> GetItemIdentityLinkCollectionUntilStart( DateTime start )
        {
            throw new NotImplementedException();
        }

        public List<ItemIdentityLinkEntity> GetItemIdentityLinkCollectionOverStart( DateTime fromStart, DateTime untilStart )
        {
            throw new NotImplementedException();
        }

        public List<ItemIdentityLinkEntity> GetItemIdentityLinkCollectionByEnd( DateTime? end )
        {
            throw new NotImplementedException();
        }

        public List<ItemIdentityLinkEntity> GetItemIdentityLinkCollectionAtEnd( DateTime? end )
        {
            throw new NotImplementedException();
        }

        public List<ItemIdentityLinkEntity> GetItemIdentityLinkCollectionFromEnd( DateTime? end )
        {
            throw new NotImplementedException();
        }

        public List<ItemIdentityLinkEntity> GetItemIdentityLinkCollectionUntilEnd( DateTime? end )
        {
            throw new NotImplementedException();
        }

        public List<ItemIdentityLinkEntity> GetItemIdentityLinkCollectionOverEnd( DateTime fromEnd, DateTime untilEnd )
        {
            throw new NotImplementedException();
        }

        public IList<ItemParentChildLinkEntity> GetItemParentChildLinkCollection( )
        {
            throw new NotImplementedException();
        }

        public List<ItemParentChildLinkEntity> GetItemParentChildLinkCollectionByParent( Guid parent )
        {
            throw new NotImplementedException();
        }

        public ItemParentChildLinkEntity? GetItemParentChildLinkByParentAndTimestamp( Guid parent, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public ItemParentChildLinkEntity? GetItemParentChildLinkByParentAtTimestamp( Guid parent, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<ItemParentChildLinkEntity> GetItemParentChildLinkByParentFromTimestamp( Guid parent, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<ItemParentChildLinkEntity> GetItemParentChildLinkByParentUntilTimestamp( Guid parent, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<ItemParentChildLinkEntity> GetItemParentChildLinkByParentOverTimestamp( Guid parent, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

        public List<ItemParentChildLinkEntity> GetItemParentChildLinkCollectionByChild( Guid child )
        {
            throw new NotImplementedException();
        }

        public ItemParentChildLinkEntity? GetItemParentChildLinkByChildAndTimestamp( Guid child, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public ItemParentChildLinkEntity? GetItemParentChildLinkByChildAtTimestamp( Guid child, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<ItemParentChildLinkEntity> GetItemParentChildLinkByChildFromTimestamp( Guid child, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<ItemParentChildLinkEntity> GetItemParentChildLinkByChildUntilTimestamp( Guid child, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<ItemParentChildLinkEntity> GetItemParentChildLinkByChildOverTimestamp( Guid child, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

        public List<ItemParentChildLinkEntity> GetItemParentChildLinkCollectionByTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<ItemParentChildLinkEntity> GetItemParentChildLinkCollectionAtTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<ItemParentChildLinkEntity> GetItemParentChildLinkCollectionFromTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<ItemParentChildLinkEntity> GetItemParentChildLinkCollectionUntilTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<ItemParentChildLinkEntity> GetItemParentChildLinkCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

        public IList<LineInputDeviceCommandEntity> GetLineInputDeviceCommandCollection( )
        {
            throw new NotImplementedException();
        }

        public List<LineInputDeviceCommandEntity> GetLineInputDeviceCommandCollectionByLineInputDevice( Guid lineInputDevice )
        {
            throw new NotImplementedException();
        }

        public List<LineInputDeviceCommandEntity> GetLineInputDeviceCommandCollectionByLineInputDeviceAndTimestamp( Guid lineInputDevice, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<LineInputDeviceCommandEntity> GetLineInputDeviceCommandCollectionByLineInputDeviceAtTimestamp( Guid lineInputDevice, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<LineInputDeviceCommandEntity> GetLineInputDeviceCommandCollectionByLineInputDeviceFromTimestamp( Guid lineInputDevice, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<LineInputDeviceCommandEntity> GetLineInputDeviceCommandCollectionByLineInputDeviceUntilTimestamp( Guid lineInputDevice, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<LineInputDeviceCommandEntity> GetLineInputDeviceCommandCollectionByLineInputDeviceOverTimestamp( Guid lineInputDevice, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

        public List<LineInputDeviceCommandEntity> GetLineInputDeviceCommandCollectionByTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<LineInputDeviceCommandEntity> GetLineInputDeviceCommandCollectionAtTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<LineInputDeviceCommandEntity> GetLineInputDeviceCommandCollectionFromTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<LineInputDeviceCommandEntity> GetLineInputDeviceCommandCollectionUntilTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<LineInputDeviceCommandEntity> GetLineInputDeviceCommandCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

        public List<LineInputDeviceCommandEntity> GetLineInputDeviceCommandCollectionByReply( Guid? reply )
        {
            throw new NotImplementedException();
        }

        public IList<LineInputDeviceCommandReplyEntity> GetLineInputDeviceCommandReplyCollection( )
        {
            throw new NotImplementedException();
        }

        public List<LineInputDeviceCommandReplyEntity> GetLineInputDeviceCommandReplyCollectionByLineInputDevice( Guid lineInputDevice )
        {
            throw new NotImplementedException();
        }

        public List<LineInputDeviceCommandReplyEntity> GetLineInputDeviceCommandReplyCollectionByLineInputDeviceAndTimestamp( Guid lineInputDevice, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<LineInputDeviceCommandReplyEntity> GetLineInputDeviceCommandReplyCollectionByLineInputDeviceAtTimestamp( Guid lineInputDevice, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<LineInputDeviceCommandReplyEntity> GetLineInputDeviceCommandReplyCollectionByLineInputDeviceFromTimestamp( Guid lineInputDevice, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<LineInputDeviceCommandReplyEntity> GetLineInputDeviceCommandReplyCollectionByLineInputDeviceUntilTimestamp( Guid lineInputDevice, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<LineInputDeviceCommandReplyEntity> GetLineInputDeviceCommandReplyCollectionByLineInputDeviceOverTimestamp( Guid lineInputDevice, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

        public List<LineInputDeviceCommandReplyEntity> GetLineInputDeviceCommandReplyCollectionByTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<LineInputDeviceCommandReplyEntity> GetLineInputDeviceCommandReplyCollectionAtTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<LineInputDeviceCommandReplyEntity> GetLineInputDeviceCommandReplyCollectionFromTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<LineInputDeviceCommandReplyEntity> GetLineInputDeviceCommandReplyCollectionUntilTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<LineInputDeviceCommandReplyEntity> GetLineInputDeviceCommandReplyCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

        public LineInputDeviceCommandReplyEntity? GetLineInputDeviceCommandReplyByCommand( Guid? command )
        {
            throw new NotImplementedException();
        }

        public IList<LineInputDeviceConfigurationEntity> GetLineInputDeviceConfigurationCollection( )
        {
            throw new NotImplementedException();
        }

        public List<LineInputDeviceConfigurationEntity> GetLineInputDeviceConfigurationCollectionByLineInputDevice( Guid lineInputDevice )
        {
            throw new NotImplementedException();
        }

        public LineInputDeviceConfigurationEntity? GetLineInputDeviceConfigurationByLineInputDeviceAndTimestamp( Guid lineInputDevice, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public LineInputDeviceConfigurationEntity? GetLineInputDeviceConfigurationByLineInputDeviceAtTimestamp( Guid lineInputDevice, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<LineInputDeviceConfigurationEntity> GetLineInputDeviceConfigurationByLineInputDeviceFromTimestamp( Guid lineInputDevice, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<LineInputDeviceConfigurationEntity> GetLineInputDeviceConfigurationByLineInputDeviceUntilTimestamp( Guid lineInputDevice, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<LineInputDeviceConfigurationEntity> GetLineInputDeviceConfigurationByLineInputDeviceOverTimestamp( Guid lineInputDevice, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

        public List<LineInputDeviceConfigurationEntity> GetLineInputDeviceConfigurationCollectionByTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<LineInputDeviceConfigurationEntity> GetLineInputDeviceConfigurationCollectionAtTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<LineInputDeviceConfigurationEntity> GetLineInputDeviceConfigurationCollectionFromTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<LineInputDeviceConfigurationEntity> GetLineInputDeviceConfigurationCollectionUntilTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<LineInputDeviceConfigurationEntity> GetLineInputDeviceConfigurationCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

        public IList<LineInputMessageRoutingEntity> GetLineInputMessageRoutingCollection( )
        {
            throw new NotImplementedException();
        }

        public List<LineInputMessageRoutingEntity> GetLineInputMessageRoutingCollectionByLineInputDevice( Guid lineInputDevice )
        {
            throw new NotImplementedException();
        }

        public LineInputMessageRoutingEntity? GetLineInputMessageRoutingByLineInputDeviceAndType( Guid lineInputDevice, string type )
        {
            throw new NotImplementedException();
        }

        public IList<LineInputMessageRoutingDestinationEntity> GetLineInputMessageRoutingDestinationCollection( )
        {
            throw new NotImplementedException();
        }

        public List<LineInputMessageRoutingDestinationEntity> GetLineInputMessageRoutingDestinationCollectionByRouting( Guid routing )
        {
            throw new NotImplementedException();
        }

        public LineInputMessageRoutingDestinationEntity? GetLineInputMessageRoutingDestinationByRoutingAndListener( Guid routing, Guid? listener )
        {
            throw new NotImplementedException();
        }

        public List<LineInputMessageRoutingDestinationEntity> GetLineInputMessageRoutingDestinationCollectionByListener( Guid? listener )
        {
            throw new NotImplementedException();
        }

        public IList<LineInputWhiteListEntryEntity> GetLineInputWhiteListEntryCollection( )
        {
            throw new NotImplementedException();
        }

        public List<LineInputWhiteListEntryEntity> GetLineInputWhiteListEntryCollectionByLineInputDevice( Guid lineInputDevice )
        {
            throw new NotImplementedException();
        }

        public List<LineInputWhiteListEntryEntity> GetLineInputWhiteListEntryCollectionByLineInputDeviceAndHostName( Guid lineInputDevice, string hostName )
        {
            throw new NotImplementedException();
        }

        public LineInputWhiteListEntryEntity? GetLineInputWhiteListEntryByLineInputDeviceHostNameAndPort( Guid lineInputDevice, string hostName, int port )
        {
            throw new NotImplementedException();
        }

        public List<LineInputWhiteListEntryEntity> GetLineInputWhiteListEntryByLineInputDeviceHostNameFromPort( Guid lineInputDevice, string hostName, int port )
        {
            throw new NotImplementedException();
        }

        public List<LineInputWhiteListEntryEntity> GetLineInputWhiteListEntryByLineInputDeviceHostNameUntilPort( Guid lineInputDevice, string hostName, int port )
        {
            throw new NotImplementedException();
        }

        public List<LineInputWhiteListEntryEntity> GetLineInputWhiteListEntryByLineInputDeviceHostNameOverPort( Guid lineInputDevice, string hostName, int fromPort, int untilPort )
        {
            throw new NotImplementedException();
        }

        public IList<LogApplicationEntity> GetLogApplicationCollection( )
        {
            throw new NotImplementedException();
        }

        public LogApplicationEntity? GetLogApplicationByName( string name )
        {
            throw new NotImplementedException();
        }

        public IList<LogApplicationConfigurationEntity> GetLogApplicationConfigurationCollection( )
        {
            throw new NotImplementedException();
        }

        public List<LogApplicationConfigurationEntity> GetLogApplicationConfigurationCollectionByApplication( Guid application )
        {
            throw new NotImplementedException();
        }

        public LogApplicationConfigurationEntity? GetLogApplicationConfigurationByApplicationAndTimestamp( Guid application, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public LogApplicationConfigurationEntity? GetLogApplicationConfigurationByApplicationAtTimestamp( Guid application, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<LogApplicationConfigurationEntity> GetLogApplicationConfigurationByApplicationFromTimestamp( Guid application, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<LogApplicationConfigurationEntity> GetLogApplicationConfigurationByApplicationUntilTimestamp( Guid application, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<LogApplicationConfigurationEntity> GetLogApplicationConfigurationByApplicationOverTimestamp( Guid application, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

        public List<LogApplicationConfigurationEntity> GetLogApplicationConfigurationCollectionByTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<LogApplicationConfigurationEntity> GetLogApplicationConfigurationCollectionAtTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<LogApplicationConfigurationEntity> GetLogApplicationConfigurationCollectionFromTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<LogApplicationConfigurationEntity> GetLogApplicationConfigurationCollectionUntilTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<LogApplicationConfigurationEntity> GetLogApplicationConfigurationCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

        public IList<LogHostEntity> GetLogHostCollection( )
        {
            throw new NotImplementedException();
        }

        public LogHostEntity? GetLogHostByComputerName( string computerName )
        {
            throw new NotImplementedException();
        }

        public IList<LogHostConfigurationEntity> GetLogHostConfigurationCollection( )
        {
            throw new NotImplementedException();
        }

        public List<LogHostConfigurationEntity> GetLogHostConfigurationCollectionByHost( Guid host )
        {
            throw new NotImplementedException();
        }

        public LogHostConfigurationEntity? GetLogHostConfigurationByHostAndTimestamp( Guid host, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public LogHostConfigurationEntity? GetLogHostConfigurationByHostAtTimestamp( Guid host, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<LogHostConfigurationEntity> GetLogHostConfigurationByHostFromTimestamp( Guid host, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<LogHostConfigurationEntity> GetLogHostConfigurationByHostUntilTimestamp( Guid host, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<LogHostConfigurationEntity> GetLogHostConfigurationByHostOverTimestamp( Guid host, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

        public List<LogHostConfigurationEntity> GetLogHostConfigurationCollectionByTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<LogHostConfigurationEntity> GetLogHostConfigurationCollectionAtTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<LogHostConfigurationEntity> GetLogHostConfigurationCollectionFromTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<LogHostConfigurationEntity> GetLogHostConfigurationCollectionUntilTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<LogHostConfigurationEntity> GetLogHostConfigurationCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

        public IList<LogLocationEntity> GetLogLocationCollection( )
        {
            throw new NotImplementedException();
        }

        public List<LogLocationEntity> GetLogLocationCollectionByFileName( string fileName )
        {
            throw new NotImplementedException();
        }

        public LogLocationEntity? GetLogLocationByFileNameAndLineNumber( string fileName, int lineNumber )
        {
            throw new NotImplementedException();
        }

        public List<LogLocationEntity> GetLogLocationByFileNameFromLineNumber( string fileName, int lineNumber )
        {
            throw new NotImplementedException();
        }

        public List<LogLocationEntity> GetLogLocationByFileNameUntilLineNumber( string fileName, int lineNumber )
        {
            throw new NotImplementedException();
        }

        public List<LogLocationEntity> GetLogLocationByFileNameOverLineNumber( string fileName, int fromLineNumber, int untilLineNumber )
        {
            throw new NotImplementedException();
        }

        public IList<LogProcessEntity> GetLogProcessCollection( )
        {
            throw new NotImplementedException();
        }

        public List<LogProcessEntity> GetLogProcessCollectionByApplication( Guid application )
        {
            throw new NotImplementedException();
        }

        public List<LogProcessEntity> GetLogProcessCollectionByApplicationAndStarted( Guid application, DateTime started )
        {
            throw new NotImplementedException();
        }

        public List<LogProcessEntity> GetLogProcessCollectionByApplicationAtStarted( Guid application, DateTime started )
        {
            throw new NotImplementedException();
        }

        public List<LogProcessEntity> GetLogProcessCollectionByApplicationFromStarted( Guid application, DateTime started )
        {
            throw new NotImplementedException();
        }

        public List<LogProcessEntity> GetLogProcessCollectionByApplicationUntilStarted( Guid application, DateTime started )
        {
            throw new NotImplementedException();
        }

        public List<LogProcessEntity> GetLogProcessCollectionByApplicationOverStarted( Guid application, DateTime fromStarted, DateTime untilStarted )
        {
            throw new NotImplementedException();
        }

        public List<LogProcessEntity> GetLogProcessCollectionByHost( Guid? host )
        {
            throw new NotImplementedException();
        }

        public List<LogProcessEntity> GetLogProcessCollectionByHostAndStarted( Guid? host, DateTime started )
        {
            throw new NotImplementedException();
        }

        public List<LogProcessEntity> GetLogProcessCollectionByHostAtStarted( Guid? host, DateTime started )
        {
            throw new NotImplementedException();
        }

        public List<LogProcessEntity> GetLogProcessCollectionByHostFromStarted( Guid? host, DateTime started )
        {
            throw new NotImplementedException();
        }

        public List<LogProcessEntity> GetLogProcessCollectionByHostUntilStarted( Guid? host, DateTime started )
        {
            throw new NotImplementedException();
        }

        public List<LogProcessEntity> GetLogProcessCollectionByHostOverStarted( Guid host, DateTime fromStarted, DateTime untilStarted )
        {
            throw new NotImplementedException();
        }

        public List<LogProcessEntity> GetLogProcessCollectionByStarted( DateTime started )
        {
            throw new NotImplementedException();
        }

        public List<LogProcessEntity> GetLogProcessCollectionAtStarted( DateTime started )
        {
            throw new NotImplementedException();
        }

        public List<LogProcessEntity> GetLogProcessCollectionFromStarted( DateTime started )
        {
            throw new NotImplementedException();
        }

        public List<LogProcessEntity> GetLogProcessCollectionUntilStarted( DateTime started )
        {
            throw new NotImplementedException();
        }

        public List<LogProcessEntity> GetLogProcessCollectionOverStarted( DateTime fromStarted, DateTime untilStarted )
        {
            throw new NotImplementedException();
        }

        public IList<LogRecordEntity> GetLogRecordCollection( )
        {
            throw new NotImplementedException();
        }

        public List<LogRecordEntity> GetLogRecordCollectionByThread( Guid thread )
        {
            throw new NotImplementedException();
        }

        public List<LogRecordEntity> GetLogRecordCollectionByThreadAndTimestamp( Guid thread, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<LogRecordEntity> GetLogRecordCollectionByThreadAtTimestamp( Guid thread, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<LogRecordEntity> GetLogRecordCollectionByThreadFromTimestamp( Guid thread, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<LogRecordEntity> GetLogRecordCollectionByThreadUntilTimestamp( Guid thread, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<LogRecordEntity> GetLogRecordCollectionByThreadOverTimestamp( Guid thread, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

        public List<LogRecordEntity> GetLogRecordCollectionByTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<LogRecordEntity> GetLogRecordCollectionAtTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<LogRecordEntity> GetLogRecordCollectionFromTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<LogRecordEntity> GetLogRecordCollectionUntilTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<LogRecordEntity> GetLogRecordCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

        public List<LogRecordEntity> GetLogRecordCollectionByLocation( Guid location )
        {
            throw new NotImplementedException();
        }

        public IList<LogThreadEntity> GetLogThreadCollection( )
        {
            throw new NotImplementedException();
        }

        public List<LogThreadEntity> GetLogThreadCollectionByProcess( Guid process )
        {
            throw new NotImplementedException();
        }

        public List<LogThreadEntity> GetLogThreadCollectionByProcessAndStarted( Guid process, DateTime started )
        {
            throw new NotImplementedException();
        }

        public List<LogThreadEntity> GetLogThreadCollectionByProcessAtStarted( Guid process, DateTime started )
        {
            throw new NotImplementedException();
        }

        public List<LogThreadEntity> GetLogThreadCollectionByProcessFromStarted( Guid process, DateTime started )
        {
            throw new NotImplementedException();
        }

        public List<LogThreadEntity> GetLogThreadCollectionByProcessUntilStarted( Guid process, DateTime started )
        {
            throw new NotImplementedException();
        }

        public List<LogThreadEntity> GetLogThreadCollectionByProcessOverStarted( Guid process, DateTime fromStarted, DateTime untilStarted )
        {
            throw new NotImplementedException();
        }

        public List<LogThreadEntity> GetLogThreadCollectionByStarted( DateTime started )
        {
            throw new NotImplementedException();
        }

        public List<LogThreadEntity> GetLogThreadCollectionAtStarted( DateTime started )
        {
            throw new NotImplementedException();
        }

        public List<LogThreadEntity> GetLogThreadCollectionFromStarted( DateTime started )
        {
            throw new NotImplementedException();
        }

        public List<LogThreadEntity> GetLogThreadCollectionUntilStarted( DateTime started )
        {
            throw new NotImplementedException();
        }

        public List<LogThreadEntity> GetLogThreadCollectionOverStarted( DateTime fromStarted, DateTime untilStarted )
        {
            throw new NotImplementedException();
        }

        public IList<LogTraceEntryEntity> GetLogTraceEntryCollection( )
        {
            throw new NotImplementedException();
        }

        public List<LogTraceEntryEntity> GetLogTraceEntryCollectionByThread( Guid thread )
        {
            throw new NotImplementedException();
        }

        public List<LogTraceEntryEntity> GetLogTraceEntryCollectionByThreadAndEntered( Guid thread, DateTime entered )
        {
            throw new NotImplementedException();
        }

        public List<LogTraceEntryEntity> GetLogTraceEntryCollectionByThreadAtEntered( Guid thread, DateTime entered )
        {
            throw new NotImplementedException();
        }

        public List<LogTraceEntryEntity> GetLogTraceEntryCollectionByThreadFromEntered( Guid thread, DateTime entered )
        {
            throw new NotImplementedException();
        }

        public List<LogTraceEntryEntity> GetLogTraceEntryCollectionByThreadUntilEntered( Guid thread, DateTime entered )
        {
            throw new NotImplementedException();
        }

        public List<LogTraceEntryEntity> GetLogTraceEntryCollectionByThreadOverEntered( Guid thread, DateTime fromEntered, DateTime untilEntered )
        {
            throw new NotImplementedException();
        }

        public List<LogTraceEntryEntity> GetLogTraceEntryCollectionByLocation( Guid location )
        {
            throw new NotImplementedException();
        }

        public List<LogTraceEntryEntity> GetLogTraceEntryCollectionByLocationAndEntered( Guid location, DateTime entered )
        {
            throw new NotImplementedException();
        }

        public List<LogTraceEntryEntity> GetLogTraceEntryCollectionByLocationAtEntered( Guid location, DateTime entered )
        {
            throw new NotImplementedException();
        }

        public List<LogTraceEntryEntity> GetLogTraceEntryCollectionByLocationFromEntered( Guid location, DateTime entered )
        {
            throw new NotImplementedException();
        }

        public List<LogTraceEntryEntity> GetLogTraceEntryCollectionByLocationUntilEntered( Guid location, DateTime entered )
        {
            throw new NotImplementedException();
        }

        public List<LogTraceEntryEntity> GetLogTraceEntryCollectionByLocationOverEntered( Guid location, DateTime fromEntered, DateTime untilEntered )
        {
            throw new NotImplementedException();
        }

        public List<LogTraceEntryEntity> GetLogTraceEntryCollectionByEntered( DateTime entered )
        {
            throw new NotImplementedException();
        }

        public List<LogTraceEntryEntity> GetLogTraceEntryCollectionAtEntered( DateTime entered )
        {
            throw new NotImplementedException();
        }

        public List<LogTraceEntryEntity> GetLogTraceEntryCollectionFromEntered( DateTime entered )
        {
            throw new NotImplementedException();
        }

        public List<LogTraceEntryEntity> GetLogTraceEntryCollectionUntilEntered( DateTime entered )
        {
            throw new NotImplementedException();
        }

        public List<LogTraceEntryEntity> GetLogTraceEntryCollectionOverEntered( DateTime fromEntered, DateTime untilEntered )
        {
            throw new NotImplementedException();
        }

        public IList<MapElementEntity> GetMapElementCollection( )
        {
            throw new NotImplementedException();
        }

        public List<MapElementEntity> GetMapElementCollectionByItem( Guid item )
        {
            throw new NotImplementedException();
        }

        public IList<MapInfoEntity> GetMapInfoCollection( )
        {
            throw new NotImplementedException();
        }

        public IList<MapServiceOptionsEntity> GetMapServiceOptionsCollection( )
        {
            throw new NotImplementedException();
        }

        public MapServiceOptionsEntity? GetMapServiceOptionsByTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public MapServiceOptionsEntity? GetMapServiceOptionsAtTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<MapServiceOptionsEntity> GetMapServiceOptionsFromTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<MapServiceOptionsEntity> GetMapServiceOptionsUntilTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<MapServiceOptionsEntity> GetMapServiceOptionsOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

        public IList<MaritimeIdentificationDigitsEntity> GetMaritimeIdentificationDigitsCollection( )
        {
            throw new NotImplementedException();
        }

        public MaritimeIdentificationDigitsEntity? GetMaritimeIdentificationDigitsByCode( int code )
        {
            throw new NotImplementedException();
        }

        public List<MaritimeIdentificationDigitsEntity> GetMaritimeIdentificationDigitsFromCode( int code )
        {
            throw new NotImplementedException();
        }

        public List<MaritimeIdentificationDigitsEntity> GetMaritimeIdentificationDigitsUntilCode( int code )
        {
            throw new NotImplementedException();
        }

        public List<MaritimeIdentificationDigitsEntity> GetMaritimeIdentificationDigitsOverCode( int fromCode, int untilCode )
        {
            throw new NotImplementedException();
        }

        public List<MaritimeIdentificationDigitsEntity> GetMaritimeIdentificationDigitsCollectionByCountry( Guid country )
        {
            throw new NotImplementedException();
        }

        public IList<MediaProxySessionEntity> GetMediaProxySessionCollection( )
        {
            throw new NotImplementedException();
        }

        public List<MediaProxySessionEntity> GetMediaProxySessionCollectionByService( Guid service )
        {
            throw new NotImplementedException();
        }

        public MediaProxySessionEntity? GetMediaProxySessionByServiceAndName( Guid service, string name )
        {
            throw new NotImplementedException();
        }

        public IList<MediaProxySessionFileEntity> GetMediaProxySessionFileCollection( )
        {
            throw new NotImplementedException();
        }

        public List<MediaProxySessionFileEntity> GetMediaProxySessionFileCollectionByProxySession( Guid proxySession )
        {
            throw new NotImplementedException();
        }

        public MediaProxySessionFileEntity? GetMediaProxySessionFileByProxySessionAndTimestamp( Guid proxySession, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public MediaProxySessionFileEntity? GetMediaProxySessionFileByProxySessionAtTimestamp( Guid proxySession, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<MediaProxySessionFileEntity> GetMediaProxySessionFileByProxySessionFromTimestamp( Guid proxySession, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<MediaProxySessionFileEntity> GetMediaProxySessionFileByProxySessionUntilTimestamp( Guid proxySession, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<MediaProxySessionFileEntity> GetMediaProxySessionFileByProxySessionOverTimestamp( Guid proxySession, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

        public IList<MediaProxySessionOptionsEntity> GetMediaProxySessionOptionsCollection( )
        {
            throw new NotImplementedException();
        }

        public List<MediaProxySessionOptionsEntity> GetMediaProxySessionOptionsCollectionByProxySession( Guid proxySession )
        {
            throw new NotImplementedException();
        }

        public MediaProxySessionOptionsEntity? GetMediaProxySessionOptionsByProxySessionAndTimestamp( Guid proxySession, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public MediaProxySessionOptionsEntity? GetMediaProxySessionOptionsByProxySessionAtTimestamp( Guid proxySession, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<MediaProxySessionOptionsEntity> GetMediaProxySessionOptionsByProxySessionFromTimestamp( Guid proxySession, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<MediaProxySessionOptionsEntity> GetMediaProxySessionOptionsByProxySessionUntilTimestamp( Guid proxySession, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<MediaProxySessionOptionsEntity> GetMediaProxySessionOptionsByProxySessionOverTimestamp( Guid proxySession, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

        public IList<MediaServiceEntity> GetMediaServiceCollection( )
        {
            throw new NotImplementedException();
        }

        public IList<MediaServiceOptionsEntity> GetMediaServiceOptionsCollection( )
        {
            throw new NotImplementedException();
        }

        public List<MediaServiceOptionsEntity> GetMediaServiceOptionsCollectionByMediaService( Guid mediaService )
        {
            throw new NotImplementedException();
        }

        public MediaServiceOptionsEntity? GetMediaServiceOptionsByMediaServiceAndTimestamp( Guid mediaService, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public MediaServiceOptionsEntity? GetMediaServiceOptionsByMediaServiceAtTimestamp( Guid mediaService, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<MediaServiceOptionsEntity> GetMediaServiceOptionsByMediaServiceFromTimestamp( Guid mediaService, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<MediaServiceOptionsEntity> GetMediaServiceOptionsByMediaServiceUntilTimestamp( Guid mediaService, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<MediaServiceOptionsEntity> GetMediaServiceOptionsByMediaServiceOverTimestamp( Guid mediaService, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

        public IList<NamespaceElementEntity> GetNamespaceElementCollection( )
        {
            throw new NotImplementedException();
        }

        public List<NamespaceElementEntity> GetNamespaceElementCollectionByNamespace( Guid namespace__ )
        {
            throw new NotImplementedException();
        }

        public NamespaceElementEntity? GetNamespaceElementByNamespaceAndName( Guid namespace__, string name )
        {
            throw new NotImplementedException();
        }

        public IList<ElementTypeEntity> GetElementTypeCollection( )
        {
            throw new NotImplementedException();
        }

        public List<ElementTypeEntity> GetElementTypeCollectionByNamespace( Guid namespace__ )
        {
            throw new NotImplementedException();
        }

        public ElementTypeEntity? GetElementTypeByNamespaceAndName( Guid namespace__, string name )
        {
            throw new NotImplementedException();
        }

        public IList<NamespaceEntity> GetNamespaceCollection( )
        {
            throw new NotImplementedException();
        }

        public List<NamespaceEntity> GetNamespaceCollectionByNamespace( Guid namespace__ )
        {
            throw new NotImplementedException();
        }

        public NamespaceEntity? GetNamespaceByNamespaceAndName( Guid namespace__, string name )
        {
            throw new NotImplementedException();
        }

        public IList<OilSpillEntity> GetOilSpillCollection( )
        {
            throw new NotImplementedException();
        }

        public List<OilSpillEntity> GetOilSpillCollectionByOilSpillDetector( Guid oilSpillDetector )
        {
            throw new NotImplementedException();
        }

        public List<OilSpillEntity> GetOilSpillCollectionByOilSpillDetectorAndTimestamp( Guid oilSpillDetector, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<OilSpillEntity> GetOilSpillCollectionByOilSpillDetectorAtTimestamp( Guid oilSpillDetector, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<OilSpillEntity> GetOilSpillCollectionByOilSpillDetectorFromTimestamp( Guid oilSpillDetector, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<OilSpillEntity> GetOilSpillCollectionByOilSpillDetectorUntilTimestamp( Guid oilSpillDetector, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<OilSpillEntity> GetOilSpillCollectionByOilSpillDetectorOverTimestamp( Guid oilSpillDetector, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

        public List<OilSpillEntity> GetOilSpillCollectionByTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<OilSpillEntity> GetOilSpillCollectionAtTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<OilSpillEntity> GetOilSpillCollectionFromTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<OilSpillEntity> GetOilSpillCollectionUntilTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<OilSpillEntity> GetOilSpillCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

        public IList<OilSpillDetectorCommandEntity> GetOilSpillDetectorCommandCollection( )
        {
            throw new NotImplementedException();
        }

        public List<OilSpillDetectorCommandEntity> GetOilSpillDetectorCommandCollectionByOilSpillDetector( Guid oilSpillDetector )
        {
            throw new NotImplementedException();
        }

        public List<OilSpillDetectorCommandEntity> GetOilSpillDetectorCommandCollectionByOilSpillDetectorAndTimestamp( Guid oilSpillDetector, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<OilSpillDetectorCommandEntity> GetOilSpillDetectorCommandCollectionByOilSpillDetectorAtTimestamp( Guid oilSpillDetector, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<OilSpillDetectorCommandEntity> GetOilSpillDetectorCommandCollectionByOilSpillDetectorFromTimestamp( Guid oilSpillDetector, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<OilSpillDetectorCommandEntity> GetOilSpillDetectorCommandCollectionByOilSpillDetectorUntilTimestamp( Guid oilSpillDetector, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<OilSpillDetectorCommandEntity> GetOilSpillDetectorCommandCollectionByOilSpillDetectorOverTimestamp( Guid oilSpillDetector, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

        public List<OilSpillDetectorCommandEntity> GetOilSpillDetectorCommandCollectionByTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<OilSpillDetectorCommandEntity> GetOilSpillDetectorCommandCollectionAtTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<OilSpillDetectorCommandEntity> GetOilSpillDetectorCommandCollectionFromTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<OilSpillDetectorCommandEntity> GetOilSpillDetectorCommandCollectionUntilTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<OilSpillDetectorCommandEntity> GetOilSpillDetectorCommandCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

        public List<OilSpillDetectorCommandEntity> GetOilSpillDetectorCommandCollectionByReply( Guid? reply )
        {
            throw new NotImplementedException();
        }

        public IList<OilSpillDetectorCommandReplyEntity> GetOilSpillDetectorCommandReplyCollection( )
        {
            throw new NotImplementedException();
        }

        public List<OilSpillDetectorCommandReplyEntity> GetOilSpillDetectorCommandReplyCollectionByOilSpillDetector( Guid oilSpillDetector )
        {
            throw new NotImplementedException();
        }

        public List<OilSpillDetectorCommandReplyEntity> GetOilSpillDetectorCommandReplyCollectionByOilSpillDetectorAndTimestamp( Guid oilSpillDetector, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<OilSpillDetectorCommandReplyEntity> GetOilSpillDetectorCommandReplyCollectionByOilSpillDetectorAtTimestamp( Guid oilSpillDetector, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<OilSpillDetectorCommandReplyEntity> GetOilSpillDetectorCommandReplyCollectionByOilSpillDetectorFromTimestamp( Guid oilSpillDetector, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<OilSpillDetectorCommandReplyEntity> GetOilSpillDetectorCommandReplyCollectionByOilSpillDetectorUntilTimestamp( Guid oilSpillDetector, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<OilSpillDetectorCommandReplyEntity> GetOilSpillDetectorCommandReplyCollectionByOilSpillDetectorOverTimestamp( Guid oilSpillDetector, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

        public List<OilSpillDetectorCommandReplyEntity> GetOilSpillDetectorCommandReplyCollectionByTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<OilSpillDetectorCommandReplyEntity> GetOilSpillDetectorCommandReplyCollectionAtTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<OilSpillDetectorCommandReplyEntity> GetOilSpillDetectorCommandReplyCollectionFromTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<OilSpillDetectorCommandReplyEntity> GetOilSpillDetectorCommandReplyCollectionUntilTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<OilSpillDetectorCommandReplyEntity> GetOilSpillDetectorCommandReplyCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

        public OilSpillDetectorCommandReplyEntity? GetOilSpillDetectorCommandReplyByCommand( Guid? command )
        {
            throw new NotImplementedException();
        }

        public IList<OilSpillDetectorConfigurationEntity> GetOilSpillDetectorConfigurationCollection( )
        {
            throw new NotImplementedException();
        }

        public List<OilSpillDetectorConfigurationEntity> GetOilSpillDetectorConfigurationCollectionByOilSpillDetector( Guid oilSpillDetector )
        {
            throw new NotImplementedException();
        }

        public OilSpillDetectorConfigurationEntity? GetOilSpillDetectorConfigurationByOilSpillDetectorAndTimestamp( Guid oilSpillDetector, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public OilSpillDetectorConfigurationEntity? GetOilSpillDetectorConfigurationByOilSpillDetectorAtTimestamp( Guid oilSpillDetector, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<OilSpillDetectorConfigurationEntity> GetOilSpillDetectorConfigurationByOilSpillDetectorFromTimestamp( Guid oilSpillDetector, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<OilSpillDetectorConfigurationEntity> GetOilSpillDetectorConfigurationByOilSpillDetectorUntilTimestamp( Guid oilSpillDetector, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<OilSpillDetectorConfigurationEntity> GetOilSpillDetectorConfigurationByOilSpillDetectorOverTimestamp( Guid oilSpillDetector, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

        public List<OilSpillDetectorConfigurationEntity> GetOilSpillDetectorConfigurationCollectionByTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<OilSpillDetectorConfigurationEntity> GetOilSpillDetectorConfigurationCollectionAtTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<OilSpillDetectorConfigurationEntity> GetOilSpillDetectorConfigurationCollectionFromTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<OilSpillDetectorConfigurationEntity> GetOilSpillDetectorConfigurationCollectionUntilTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<OilSpillDetectorConfigurationEntity> GetOilSpillDetectorConfigurationCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

        public List<OilSpillDetectorConfigurationEntity> GetOilSpillDetectorConfigurationCollectionByTargetMMSI( Guid? targetMMSI )
        {
            throw new NotImplementedException();
        }

        public IList<Position2DTimeseriesValueEntity> GetPosition2DTimeseriesValueCollection( )
        {
            throw new NotImplementedException();
        }

        public List<Position2DTimeseriesValueEntity> GetPosition2DTimeseriesValueCollectionByTimeseries( Guid timeseries )
        {
            throw new NotImplementedException();
        }

        public Position2DTimeseriesValueEntity? GetPosition2DTimeseriesValueByTimeseriesAndTimestamp( Guid timeseries, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public Position2DTimeseriesValueEntity? GetPosition2DTimeseriesValueByTimeseriesAtTimestamp( Guid timeseries, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<Position2DTimeseriesValueEntity> GetPosition2DTimeseriesValueByTimeseriesFromTimestamp( Guid timeseries, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<Position2DTimeseriesValueEntity> GetPosition2DTimeseriesValueByTimeseriesUntilTimestamp( Guid timeseries, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<Position2DTimeseriesValueEntity> GetPosition2DTimeseriesValueByTimeseriesOverTimestamp( Guid timeseries, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

        public List<Position2DTimeseriesValueEntity> GetPosition2DTimeseriesValueCollectionByTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<Position2DTimeseriesValueEntity> GetPosition2DTimeseriesValueCollectionAtTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<Position2DTimeseriesValueEntity> GetPosition2DTimeseriesValueCollectionFromTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<Position2DTimeseriesValueEntity> GetPosition2DTimeseriesValueCollectionUntilTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<Position2DTimeseriesValueEntity> GetPosition2DTimeseriesValueCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

        public IList<Position3DTimeseriesValueEntity> GetPosition3DTimeseriesValueCollection( )
        {
            throw new NotImplementedException();
        }

        public List<Position3DTimeseriesValueEntity> GetPosition3DTimeseriesValueCollectionByTimeseries( Guid timeseries )
        {
            throw new NotImplementedException();
        }

        public Position3DTimeseriesValueEntity? GetPosition3DTimeseriesValueByTimeseriesAndTimestamp( Guid timeseries, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public Position3DTimeseriesValueEntity? GetPosition3DTimeseriesValueByTimeseriesAtTimestamp( Guid timeseries, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<Position3DTimeseriesValueEntity> GetPosition3DTimeseriesValueByTimeseriesFromTimestamp( Guid timeseries, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<Position3DTimeseriesValueEntity> GetPosition3DTimeseriesValueByTimeseriesUntilTimestamp( Guid timeseries, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<Position3DTimeseriesValueEntity> GetPosition3DTimeseriesValueByTimeseriesOverTimestamp( Guid timeseries, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

        public List<Position3DTimeseriesValueEntity> GetPosition3DTimeseriesValueCollectionByTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<Position3DTimeseriesValueEntity> GetPosition3DTimeseriesValueCollectionAtTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<Position3DTimeseriesValueEntity> GetPosition3DTimeseriesValueCollectionFromTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<Position3DTimeseriesValueEntity> GetPosition3DTimeseriesValueCollectionUntilTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<Position3DTimeseriesValueEntity> GetPosition3DTimeseriesValueCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

        public IList<ProcessTrackValueResultEntity> GetProcessTrackValueResultCollection( )
        {
            throw new NotImplementedException();
        }

        public IList<PropertyEntity> GetPropertyCollection( )
        {
            throw new NotImplementedException();
        }

        public List<PropertyEntity> GetPropertyCollectionByElement( Guid element )
        {
            throw new NotImplementedException();
        }

        public PropertyEntity? GetPropertyByElementAndDefinition( Guid element, Guid definition )
        {
            throw new NotImplementedException();
        }

        public List<PropertyEntity> GetPropertyCollectionByDefinition( Guid definition )
        {
            throw new NotImplementedException();
        }

        public IList<BinaryPropertyEntity> GetBinaryPropertyCollection( )
        {
            throw new NotImplementedException();
        }

        public List<BinaryPropertyEntity> GetBinaryPropertyCollectionByElement( Guid element )
        {
            throw new NotImplementedException();
        }

        public BinaryPropertyEntity? GetBinaryPropertyByElementAndDefinition( Guid element, Guid definition )
        {
            throw new NotImplementedException();
        }

        public List<BinaryPropertyEntity> GetBinaryPropertyCollectionByDefinition( Guid definition )
        {
            throw new NotImplementedException();
        }

        public IList<BooleanPropertyEntity> GetBooleanPropertyCollection( )
        {
            throw new NotImplementedException();
        }

        public List<BooleanPropertyEntity> GetBooleanPropertyCollectionByElement( Guid element )
        {
            throw new NotImplementedException();
        }

        public BooleanPropertyEntity? GetBooleanPropertyByElementAndDefinition( Guid element, Guid definition )
        {
            throw new NotImplementedException();
        }

        public List<BooleanPropertyEntity> GetBooleanPropertyCollectionByDefinition( Guid definition )
        {
            throw new NotImplementedException();
        }

        public IList<BytePropertyEntity> GetBytePropertyCollection( )
        {
            throw new NotImplementedException();
        }

        public List<BytePropertyEntity> GetBytePropertyCollectionByElement( Guid element )
        {
            throw new NotImplementedException();
        }

        public BytePropertyEntity? GetBytePropertyByElementAndDefinition( Guid element, Guid definition )
        {
            throw new NotImplementedException();
        }

        public List<BytePropertyEntity> GetBytePropertyCollectionByDefinition( Guid definition )
        {
            throw new NotImplementedException();
        }

        public IList<DateTimePropertyEntity> GetDateTimePropertyCollection( )
        {
            throw new NotImplementedException();
        }

        public List<DateTimePropertyEntity> GetDateTimePropertyCollectionByElement( Guid element )
        {
            throw new NotImplementedException();
        }

        public DateTimePropertyEntity? GetDateTimePropertyByElementAndDefinition( Guid element, Guid definition )
        {
            throw new NotImplementedException();
        }

        public List<DateTimePropertyEntity> GetDateTimePropertyCollectionByDefinition( Guid definition )
        {
            throw new NotImplementedException();
        }

        public IList<DoublePropertyEntity> GetDoublePropertyCollection( )
        {
            throw new NotImplementedException();
        }

        public List<DoublePropertyEntity> GetDoublePropertyCollectionByElement( Guid element )
        {
            throw new NotImplementedException();
        }

        public DoublePropertyEntity? GetDoublePropertyByElementAndDefinition( Guid element, Guid definition )
        {
            throw new NotImplementedException();
        }

        public List<DoublePropertyEntity> GetDoublePropertyCollectionByDefinition( Guid definition )
        {
            throw new NotImplementedException();
        }

        public IList<GuidPropertyEntity> GetGuidPropertyCollection( )
        {
            throw new NotImplementedException();
        }

        public List<GuidPropertyEntity> GetGuidPropertyCollectionByElement( Guid element )
        {
            throw new NotImplementedException();
        }

        public GuidPropertyEntity? GetGuidPropertyByElementAndDefinition( Guid element, Guid definition )
        {
            throw new NotImplementedException();
        }

        public List<GuidPropertyEntity> GetGuidPropertyCollectionByDefinition( Guid definition )
        {
            throw new NotImplementedException();
        }

        public IList<Int16PropertyEntity> GetInt16PropertyCollection( )
        {
            throw new NotImplementedException();
        }

        public List<Int16PropertyEntity> GetInt16PropertyCollectionByElement( Guid element )
        {
            throw new NotImplementedException();
        }

        public Int16PropertyEntity? GetInt16PropertyByElementAndDefinition( Guid element, Guid definition )
        {
            throw new NotImplementedException();
        }

        public List<Int16PropertyEntity> GetInt16PropertyCollectionByDefinition( Guid definition )
        {
            throw new NotImplementedException();
        }

        public IList<Int32PropertyEntity> GetInt32PropertyCollection( )
        {
            throw new NotImplementedException();
        }

        public List<Int32PropertyEntity> GetInt32PropertyCollectionByElement( Guid element )
        {
            throw new NotImplementedException();
        }

        public Int32PropertyEntity? GetInt32PropertyByElementAndDefinition( Guid element, Guid definition )
        {
            throw new NotImplementedException();
        }

        public List<Int32PropertyEntity> GetInt32PropertyCollectionByDefinition( Guid definition )
        {
            throw new NotImplementedException();
        }

        public IList<Int64PropertyEntity> GetInt64PropertyCollection( )
        {
            throw new NotImplementedException();
        }

        public List<Int64PropertyEntity> GetInt64PropertyCollectionByElement( Guid element )
        {
            throw new NotImplementedException();
        }

        public Int64PropertyEntity? GetInt64PropertyByElementAndDefinition( Guid element, Guid definition )
        {
            throw new NotImplementedException();
        }

        public List<Int64PropertyEntity> GetInt64PropertyCollectionByDefinition( Guid definition )
        {
            throw new NotImplementedException();
        }

        public IList<ReferencePropertyEntity> GetReferencePropertyCollection( )
        {
            throw new NotImplementedException();
        }

        public List<ReferencePropertyEntity> GetReferencePropertyCollectionByElement( Guid element )
        {
            throw new NotImplementedException();
        }

        public ReferencePropertyEntity? GetReferencePropertyByElementAndDefinition( Guid element, Guid definition )
        {
            throw new NotImplementedException();
        }

        public List<ReferencePropertyEntity> GetReferencePropertyCollectionByDefinition( Guid definition )
        {
            throw new NotImplementedException();
        }

        public List<ReferencePropertyEntity> GetReferencePropertyCollectionByValue( Guid? value__ )
        {
            throw new NotImplementedException();
        }

        public IList<SBytePropertyEntity> GetSBytePropertyCollection( )
        {
            throw new NotImplementedException();
        }

        public List<SBytePropertyEntity> GetSBytePropertyCollectionByElement( Guid element )
        {
            throw new NotImplementedException();
        }

        public SBytePropertyEntity? GetSBytePropertyByElementAndDefinition( Guid element, Guid definition )
        {
            throw new NotImplementedException();
        }

        public List<SBytePropertyEntity> GetSBytePropertyCollectionByDefinition( Guid definition )
        {
            throw new NotImplementedException();
        }

        public IList<SinglePropertyEntity> GetSinglePropertyCollection( )
        {
            throw new NotImplementedException();
        }

        public List<SinglePropertyEntity> GetSinglePropertyCollectionByElement( Guid element )
        {
            throw new NotImplementedException();
        }

        public SinglePropertyEntity? GetSinglePropertyByElementAndDefinition( Guid element, Guid definition )
        {
            throw new NotImplementedException();
        }

        public List<SinglePropertyEntity> GetSinglePropertyCollectionByDefinition( Guid definition )
        {
            throw new NotImplementedException();
        }

        public IList<StringPropertyEntity> GetStringPropertyCollection( )
        {
            throw new NotImplementedException();
        }

        public List<StringPropertyEntity> GetStringPropertyCollectionByElement( Guid element )
        {
            throw new NotImplementedException();
        }

        public StringPropertyEntity? GetStringPropertyByElementAndDefinition( Guid element, Guid definition )
        {
            throw new NotImplementedException();
        }

        public List<StringPropertyEntity> GetStringPropertyCollectionByDefinition( Guid definition )
        {
            throw new NotImplementedException();
        }

        public IList<TimeseriesPropertyEntity> GetTimeseriesPropertyCollection( )
        {
            throw new NotImplementedException();
        }

        public List<TimeseriesPropertyEntity> GetTimeseriesPropertyCollectionByElement( Guid element )
        {
            throw new NotImplementedException();
        }

        public TimeseriesPropertyEntity? GetTimeseriesPropertyByElementAndDefinition( Guid element, Guid definition )
        {
            throw new NotImplementedException();
        }

        public List<TimeseriesPropertyEntity> GetTimeseriesPropertyCollectionByDefinition( Guid definition )
        {
            throw new NotImplementedException();
        }

        public IList<BinaryTimeseriesPropertyEntity> GetBinaryTimeseriesPropertyCollection( )
        {
            throw new NotImplementedException();
        }

        public List<BinaryTimeseriesPropertyEntity> GetBinaryTimeseriesPropertyCollectionByElement( Guid element )
        {
            throw new NotImplementedException();
        }

        public BinaryTimeseriesPropertyEntity? GetBinaryTimeseriesPropertyByElementAndDefinition( Guid element, Guid definition )
        {
            throw new NotImplementedException();
        }

        public List<BinaryTimeseriesPropertyEntity> GetBinaryTimeseriesPropertyCollectionByDefinition( Guid definition )
        {
            throw new NotImplementedException();
        }

        public List<BinaryTimeseriesPropertyEntity> GetBinaryTimeseriesPropertyCollectionByTimeseries( Guid? timeseries )
        {
            throw new NotImplementedException();
        }

        public IList<BooleanTimeseriesPropertyEntity> GetBooleanTimeseriesPropertyCollection( )
        {
            throw new NotImplementedException();
        }

        public List<BooleanTimeseriesPropertyEntity> GetBooleanTimeseriesPropertyCollectionByElement( Guid element )
        {
            throw new NotImplementedException();
        }

        public BooleanTimeseriesPropertyEntity? GetBooleanTimeseriesPropertyByElementAndDefinition( Guid element, Guid definition )
        {
            throw new NotImplementedException();
        }

        public List<BooleanTimeseriesPropertyEntity> GetBooleanTimeseriesPropertyCollectionByDefinition( Guid definition )
        {
            throw new NotImplementedException();
        }

        public List<BooleanTimeseriesPropertyEntity> GetBooleanTimeseriesPropertyCollectionByTimeseries( Guid? timeseries )
        {
            throw new NotImplementedException();
        }

        public IList<ByteTimeseriesPropertyEntity> GetByteTimeseriesPropertyCollection( )
        {
            throw new NotImplementedException();
        }

        public List<ByteTimeseriesPropertyEntity> GetByteTimeseriesPropertyCollectionByElement( Guid element )
        {
            throw new NotImplementedException();
        }

        public ByteTimeseriesPropertyEntity? GetByteTimeseriesPropertyByElementAndDefinition( Guid element, Guid definition )
        {
            throw new NotImplementedException();
        }

        public List<ByteTimeseriesPropertyEntity> GetByteTimeseriesPropertyCollectionByDefinition( Guid definition )
        {
            throw new NotImplementedException();
        }

        public List<ByteTimeseriesPropertyEntity> GetByteTimeseriesPropertyCollectionByTimeseries( Guid? timeseries )
        {
            throw new NotImplementedException();
        }

        public IList<DateTimeTimeseriesPropertyEntity> GetDateTimeTimeseriesPropertyCollection( )
        {
            throw new NotImplementedException();
        }

        public List<DateTimeTimeseriesPropertyEntity> GetDateTimeTimeseriesPropertyCollectionByElement( Guid element )
        {
            throw new NotImplementedException();
        }

        public DateTimeTimeseriesPropertyEntity? GetDateTimeTimeseriesPropertyByElementAndDefinition( Guid element, Guid definition )
        {
            throw new NotImplementedException();
        }

        public List<DateTimeTimeseriesPropertyEntity> GetDateTimeTimeseriesPropertyCollectionByDefinition( Guid definition )
        {
            throw new NotImplementedException();
        }

        public List<DateTimeTimeseriesPropertyEntity> GetDateTimeTimeseriesPropertyCollectionByTimeseries( Guid? timeseries )
        {
            throw new NotImplementedException();
        }

        public IList<DoubleTimeseriesPropertyEntity> GetDoubleTimeseriesPropertyCollection( )
        {
            throw new NotImplementedException();
        }

        public List<DoubleTimeseriesPropertyEntity> GetDoubleTimeseriesPropertyCollectionByElement( Guid element )
        {
            throw new NotImplementedException();
        }

        public DoubleTimeseriesPropertyEntity? GetDoubleTimeseriesPropertyByElementAndDefinition( Guid element, Guid definition )
        {
            throw new NotImplementedException();
        }

        public List<DoubleTimeseriesPropertyEntity> GetDoubleTimeseriesPropertyCollectionByDefinition( Guid definition )
        {
            throw new NotImplementedException();
        }

        public List<DoubleTimeseriesPropertyEntity> GetDoubleTimeseriesPropertyCollectionByTimeseries( Guid? timeseries )
        {
            throw new NotImplementedException();
        }

        public IList<GuidTimeseriesPropertyEntity> GetGuidTimeseriesPropertyCollection( )
        {
            throw new NotImplementedException();
        }

        public List<GuidTimeseriesPropertyEntity> GetGuidTimeseriesPropertyCollectionByElement( Guid element )
        {
            throw new NotImplementedException();
        }

        public GuidTimeseriesPropertyEntity? GetGuidTimeseriesPropertyByElementAndDefinition( Guid element, Guid definition )
        {
            throw new NotImplementedException();
        }

        public List<GuidTimeseriesPropertyEntity> GetGuidTimeseriesPropertyCollectionByDefinition( Guid definition )
        {
            throw new NotImplementedException();
        }

        public List<GuidTimeseriesPropertyEntity> GetGuidTimeseriesPropertyCollectionByTimeseries( Guid? timeseries )
        {
            throw new NotImplementedException();
        }

        public IList<Int16TimeseriesPropertyEntity> GetInt16TimeseriesPropertyCollection( )
        {
            throw new NotImplementedException();
        }

        public List<Int16TimeseriesPropertyEntity> GetInt16TimeseriesPropertyCollectionByElement( Guid element )
        {
            throw new NotImplementedException();
        }

        public Int16TimeseriesPropertyEntity? GetInt16TimeseriesPropertyByElementAndDefinition( Guid element, Guid definition )
        {
            throw new NotImplementedException();
        }

        public List<Int16TimeseriesPropertyEntity> GetInt16TimeseriesPropertyCollectionByDefinition( Guid definition )
        {
            throw new NotImplementedException();
        }

        public List<Int16TimeseriesPropertyEntity> GetInt16TimeseriesPropertyCollectionByTimeseries( Guid? timeseries )
        {
            throw new NotImplementedException();
        }

        public IList<Int32TimeseriesPropertyEntity> GetInt32TimeseriesPropertyCollection( )
        {
            throw new NotImplementedException();
        }

        public List<Int32TimeseriesPropertyEntity> GetInt32TimeseriesPropertyCollectionByElement( Guid element )
        {
            throw new NotImplementedException();
        }

        public Int32TimeseriesPropertyEntity? GetInt32TimeseriesPropertyByElementAndDefinition( Guid element, Guid definition )
        {
            throw new NotImplementedException();
        }

        public List<Int32TimeseriesPropertyEntity> GetInt32TimeseriesPropertyCollectionByDefinition( Guid definition )
        {
            throw new NotImplementedException();
        }

        public List<Int32TimeseriesPropertyEntity> GetInt32TimeseriesPropertyCollectionByTimeseries( Guid? timeseries )
        {
            throw new NotImplementedException();
        }

        public IList<Int64TimeseriesPropertyEntity> GetInt64TimeseriesPropertyCollection( )
        {
            throw new NotImplementedException();
        }

        public List<Int64TimeseriesPropertyEntity> GetInt64TimeseriesPropertyCollectionByElement( Guid element )
        {
            throw new NotImplementedException();
        }

        public Int64TimeseriesPropertyEntity? GetInt64TimeseriesPropertyByElementAndDefinition( Guid element, Guid definition )
        {
            throw new NotImplementedException();
        }

        public List<Int64TimeseriesPropertyEntity> GetInt64TimeseriesPropertyCollectionByDefinition( Guid definition )
        {
            throw new NotImplementedException();
        }

        public List<Int64TimeseriesPropertyEntity> GetInt64TimeseriesPropertyCollectionByTimeseries( Guid? timeseries )
        {
            throw new NotImplementedException();
        }

        public IList<ReferenceTimeseriesPropertyEntity> GetReferenceTimeseriesPropertyCollection( )
        {
            throw new NotImplementedException();
        }

        public List<ReferenceTimeseriesPropertyEntity> GetReferenceTimeseriesPropertyCollectionByElement( Guid element )
        {
            throw new NotImplementedException();
        }

        public ReferenceTimeseriesPropertyEntity? GetReferenceTimeseriesPropertyByElementAndDefinition( Guid element, Guid definition )
        {
            throw new NotImplementedException();
        }

        public List<ReferenceTimeseriesPropertyEntity> GetReferenceTimeseriesPropertyCollectionByDefinition( Guid definition )
        {
            throw new NotImplementedException();
        }

        public List<ReferenceTimeseriesPropertyEntity> GetReferenceTimeseriesPropertyCollectionByTimeseries( Guid? timeseries )
        {
            throw new NotImplementedException();
        }

        public IList<SByteTimeseriesPropertyEntity> GetSByteTimeseriesPropertyCollection( )
        {
            throw new NotImplementedException();
        }

        public List<SByteTimeseriesPropertyEntity> GetSByteTimeseriesPropertyCollectionByElement( Guid element )
        {
            throw new NotImplementedException();
        }

        public SByteTimeseriesPropertyEntity? GetSByteTimeseriesPropertyByElementAndDefinition( Guid element, Guid definition )
        {
            throw new NotImplementedException();
        }

        public List<SByteTimeseriesPropertyEntity> GetSByteTimeseriesPropertyCollectionByDefinition( Guid definition )
        {
            throw new NotImplementedException();
        }

        public List<SByteTimeseriesPropertyEntity> GetSByteTimeseriesPropertyCollectionByTimeseries( Guid? timeseries )
        {
            throw new NotImplementedException();
        }

        public IList<SingleTimeseriesPropertyEntity> GetSingleTimeseriesPropertyCollection( )
        {
            throw new NotImplementedException();
        }

        public List<SingleTimeseriesPropertyEntity> GetSingleTimeseriesPropertyCollectionByElement( Guid element )
        {
            throw new NotImplementedException();
        }

        public SingleTimeseriesPropertyEntity? GetSingleTimeseriesPropertyByElementAndDefinition( Guid element, Guid definition )
        {
            throw new NotImplementedException();
        }

        public List<SingleTimeseriesPropertyEntity> GetSingleTimeseriesPropertyCollectionByDefinition( Guid definition )
        {
            throw new NotImplementedException();
        }

        public List<SingleTimeseriesPropertyEntity> GetSingleTimeseriesPropertyCollectionByTimeseries( Guid? timeseries )
        {
            throw new NotImplementedException();
        }

        public IList<StringTimeseriesPropertyEntity> GetStringTimeseriesPropertyCollection( )
        {
            throw new NotImplementedException();
        }

        public List<StringTimeseriesPropertyEntity> GetStringTimeseriesPropertyCollectionByElement( Guid element )
        {
            throw new NotImplementedException();
        }

        public StringTimeseriesPropertyEntity? GetStringTimeseriesPropertyByElementAndDefinition( Guid element, Guid definition )
        {
            throw new NotImplementedException();
        }

        public List<StringTimeseriesPropertyEntity> GetStringTimeseriesPropertyCollectionByDefinition( Guid definition )
        {
            throw new NotImplementedException();
        }

        public List<StringTimeseriesPropertyEntity> GetStringTimeseriesPropertyCollectionByTimeseries( Guid? timeseries )
        {
            throw new NotImplementedException();
        }

        public IList<TimeSpanTimeseriesPropertyEntity> GetTimeSpanTimeseriesPropertyCollection( )
        {
            throw new NotImplementedException();
        }

        public List<TimeSpanTimeseriesPropertyEntity> GetTimeSpanTimeseriesPropertyCollectionByElement( Guid element )
        {
            throw new NotImplementedException();
        }

        public TimeSpanTimeseriesPropertyEntity? GetTimeSpanTimeseriesPropertyByElementAndDefinition( Guid element, Guid definition )
        {
            throw new NotImplementedException();
        }

        public List<TimeSpanTimeseriesPropertyEntity> GetTimeSpanTimeseriesPropertyCollectionByDefinition( Guid definition )
        {
            throw new NotImplementedException();
        }

        public List<TimeSpanTimeseriesPropertyEntity> GetTimeSpanTimeseriesPropertyCollectionByTimeseries( Guid? timeseries )
        {
            throw new NotImplementedException();
        }

        public IList<UInt16TimeseriesPropertyEntity> GetUInt16TimeseriesPropertyCollection( )
        {
            throw new NotImplementedException();
        }

        public List<UInt16TimeseriesPropertyEntity> GetUInt16TimeseriesPropertyCollectionByElement( Guid element )
        {
            throw new NotImplementedException();
        }

        public UInt16TimeseriesPropertyEntity? GetUInt16TimeseriesPropertyByElementAndDefinition( Guid element, Guid definition )
        {
            throw new NotImplementedException();
        }

        public List<UInt16TimeseriesPropertyEntity> GetUInt16TimeseriesPropertyCollectionByDefinition( Guid definition )
        {
            throw new NotImplementedException();
        }

        public List<UInt16TimeseriesPropertyEntity> GetUInt16TimeseriesPropertyCollectionByTimeseries( Guid? timeseries )
        {
            throw new NotImplementedException();
        }

        public IList<UInt32TimeseriesPropertyEntity> GetUInt32TimeseriesPropertyCollection( )
        {
            throw new NotImplementedException();
        }

        public List<UInt32TimeseriesPropertyEntity> GetUInt32TimeseriesPropertyCollectionByElement( Guid element )
        {
            throw new NotImplementedException();
        }

        public UInt32TimeseriesPropertyEntity? GetUInt32TimeseriesPropertyByElementAndDefinition( Guid element, Guid definition )
        {
            throw new NotImplementedException();
        }

        public List<UInt32TimeseriesPropertyEntity> GetUInt32TimeseriesPropertyCollectionByDefinition( Guid definition )
        {
            throw new NotImplementedException();
        }

        public List<UInt32TimeseriesPropertyEntity> GetUInt32TimeseriesPropertyCollectionByTimeseries( Guid? timeseries )
        {
            throw new NotImplementedException();
        }

        public IList<UInt64TimeseriesPropertyEntity> GetUInt64TimeseriesPropertyCollection( )
        {
            throw new NotImplementedException();
        }

        public List<UInt64TimeseriesPropertyEntity> GetUInt64TimeseriesPropertyCollectionByElement( Guid element )
        {
            throw new NotImplementedException();
        }

        public UInt64TimeseriesPropertyEntity? GetUInt64TimeseriesPropertyByElementAndDefinition( Guid element, Guid definition )
        {
            throw new NotImplementedException();
        }

        public List<UInt64TimeseriesPropertyEntity> GetUInt64TimeseriesPropertyCollectionByDefinition( Guid definition )
        {
            throw new NotImplementedException();
        }

        public List<UInt64TimeseriesPropertyEntity> GetUInt64TimeseriesPropertyCollectionByTimeseries( Guid? timeseries )
        {
            throw new NotImplementedException();
        }

        public IList<TimeSpanPropertyEntity> GetTimeSpanPropertyCollection( )
        {
            throw new NotImplementedException();
        }

        public List<TimeSpanPropertyEntity> GetTimeSpanPropertyCollectionByElement( Guid element )
        {
            throw new NotImplementedException();
        }

        public TimeSpanPropertyEntity? GetTimeSpanPropertyByElementAndDefinition( Guid element, Guid definition )
        {
            throw new NotImplementedException();
        }

        public List<TimeSpanPropertyEntity> GetTimeSpanPropertyCollectionByDefinition( Guid definition )
        {
            throw new NotImplementedException();
        }

        public IList<UInt16PropertyEntity> GetUInt16PropertyCollection( )
        {
            throw new NotImplementedException();
        }

        public List<UInt16PropertyEntity> GetUInt16PropertyCollectionByElement( Guid element )
        {
            throw new NotImplementedException();
        }

        public UInt16PropertyEntity? GetUInt16PropertyByElementAndDefinition( Guid element, Guid definition )
        {
            throw new NotImplementedException();
        }

        public List<UInt16PropertyEntity> GetUInt16PropertyCollectionByDefinition( Guid definition )
        {
            throw new NotImplementedException();
        }

        public IList<UInt32PropertyEntity> GetUInt32PropertyCollection( )
        {
            throw new NotImplementedException();
        }

        public List<UInt32PropertyEntity> GetUInt32PropertyCollectionByElement( Guid element )
        {
            throw new NotImplementedException();
        }

        public UInt32PropertyEntity? GetUInt32PropertyByElementAndDefinition( Guid element, Guid definition )
        {
            throw new NotImplementedException();
        }

        public List<UInt32PropertyEntity> GetUInt32PropertyCollectionByDefinition( Guid definition )
        {
            throw new NotImplementedException();
        }

        public IList<UInt64PropertyEntity> GetUInt64PropertyCollection( )
        {
            throw new NotImplementedException();
        }

        public List<UInt64PropertyEntity> GetUInt64PropertyCollectionByElement( Guid element )
        {
            throw new NotImplementedException();
        }

        public UInt64PropertyEntity? GetUInt64PropertyByElementAndDefinition( Guid element, Guid definition )
        {
            throw new NotImplementedException();
        }

        public List<UInt64PropertyEntity> GetUInt64PropertyCollectionByDefinition( Guid definition )
        {
            throw new NotImplementedException();
        }

        public IList<PropertyDefinitionEntity> GetPropertyDefinitionCollection( )
        {
            throw new NotImplementedException();
        }

        public List<PropertyDefinitionEntity> GetPropertyDefinitionCollectionByElementType( Guid elementType )
        {
            throw new NotImplementedException();
        }

        public PropertyDefinitionEntity? GetPropertyDefinitionByElementTypeAndName( Guid elementType, string name )
        {
            throw new NotImplementedException();
        }

        public IList<BinaryPropertyDefinitionEntity> GetBinaryPropertyDefinitionCollection( )
        {
            throw new NotImplementedException();
        }

        public List<BinaryPropertyDefinitionEntity> GetBinaryPropertyDefinitionCollectionByElementType( Guid elementType )
        {
            throw new NotImplementedException();
        }

        public BinaryPropertyDefinitionEntity? GetBinaryPropertyDefinitionByElementTypeAndName( Guid elementType, string name )
        {
            throw new NotImplementedException();
        }

        public IList<BooleanPropertyDefinitionEntity> GetBooleanPropertyDefinitionCollection( )
        {
            throw new NotImplementedException();
        }

        public List<BooleanPropertyDefinitionEntity> GetBooleanPropertyDefinitionCollectionByElementType( Guid elementType )
        {
            throw new NotImplementedException();
        }

        public BooleanPropertyDefinitionEntity? GetBooleanPropertyDefinitionByElementTypeAndName( Guid elementType, string name )
        {
            throw new NotImplementedException();
        }

        public IList<BytePropertyDefinitionEntity> GetBytePropertyDefinitionCollection( )
        {
            throw new NotImplementedException();
        }

        public List<BytePropertyDefinitionEntity> GetBytePropertyDefinitionCollectionByElementType( Guid elementType )
        {
            throw new NotImplementedException();
        }

        public BytePropertyDefinitionEntity? GetBytePropertyDefinitionByElementTypeAndName( Guid elementType, string name )
        {
            throw new NotImplementedException();
        }

        public IList<DateTimePropertyDefinitionEntity> GetDateTimePropertyDefinitionCollection( )
        {
            throw new NotImplementedException();
        }

        public List<DateTimePropertyDefinitionEntity> GetDateTimePropertyDefinitionCollectionByElementType( Guid elementType )
        {
            throw new NotImplementedException();
        }

        public DateTimePropertyDefinitionEntity? GetDateTimePropertyDefinitionByElementTypeAndName( Guid elementType, string name )
        {
            throw new NotImplementedException();
        }

        public IList<DoublePropertyDefinitionEntity> GetDoublePropertyDefinitionCollection( )
        {
            throw new NotImplementedException();
        }

        public List<DoublePropertyDefinitionEntity> GetDoublePropertyDefinitionCollectionByElementType( Guid elementType )
        {
            throw new NotImplementedException();
        }

        public DoublePropertyDefinitionEntity? GetDoublePropertyDefinitionByElementTypeAndName( Guid elementType, string name )
        {
            throw new NotImplementedException();
        }

        public IList<GuidPropertyDefinitionEntity> GetGuidPropertyDefinitionCollection( )
        {
            throw new NotImplementedException();
        }

        public List<GuidPropertyDefinitionEntity> GetGuidPropertyDefinitionCollectionByElementType( Guid elementType )
        {
            throw new NotImplementedException();
        }

        public GuidPropertyDefinitionEntity? GetGuidPropertyDefinitionByElementTypeAndName( Guid elementType, string name )
        {
            throw new NotImplementedException();
        }

        public IList<Int16PropertyDefinitionEntity> GetInt16PropertyDefinitionCollection( )
        {
            throw new NotImplementedException();
        }

        public List<Int16PropertyDefinitionEntity> GetInt16PropertyDefinitionCollectionByElementType( Guid elementType )
        {
            throw new NotImplementedException();
        }

        public Int16PropertyDefinitionEntity? GetInt16PropertyDefinitionByElementTypeAndName( Guid elementType, string name )
        {
            throw new NotImplementedException();
        }

        public IList<Int32PropertyDefinitionEntity> GetInt32PropertyDefinitionCollection( )
        {
            throw new NotImplementedException();
        }

        public List<Int32PropertyDefinitionEntity> GetInt32PropertyDefinitionCollectionByElementType( Guid elementType )
        {
            throw new NotImplementedException();
        }

        public Int32PropertyDefinitionEntity? GetInt32PropertyDefinitionByElementTypeAndName( Guid elementType, string name )
        {
            throw new NotImplementedException();
        }

        public IList<Int64PropertyDefinitionEntity> GetInt64PropertyDefinitionCollection( )
        {
            throw new NotImplementedException();
        }

        public List<Int64PropertyDefinitionEntity> GetInt64PropertyDefinitionCollectionByElementType( Guid elementType )
        {
            throw new NotImplementedException();
        }

        public Int64PropertyDefinitionEntity? GetInt64PropertyDefinitionByElementTypeAndName( Guid elementType, string name )
        {
            throw new NotImplementedException();
        }

        public IList<ReferencePropertyDefinitionEntity> GetReferencePropertyDefinitionCollection( )
        {
            throw new NotImplementedException();
        }

        public List<ReferencePropertyDefinitionEntity> GetReferencePropertyDefinitionCollectionByElementType( Guid elementType )
        {
            throw new NotImplementedException();
        }

        public ReferencePropertyDefinitionEntity? GetReferencePropertyDefinitionByElementTypeAndName( Guid elementType, string name )
        {
            throw new NotImplementedException();
        }

        public List<ReferencePropertyDefinitionEntity> GetReferencePropertyDefinitionCollectionByDefaultValue( Guid? defaultValue )
        {
            throw new NotImplementedException();
        }

        public List<ReferencePropertyDefinitionEntity> GetReferencePropertyDefinitionCollectionByReferencedElementType( Guid? referencedElementType )
        {
            throw new NotImplementedException();
        }

        public IList<SBytePropertyDefinitionEntity> GetSBytePropertyDefinitionCollection( )
        {
            throw new NotImplementedException();
        }

        public List<SBytePropertyDefinitionEntity> GetSBytePropertyDefinitionCollectionByElementType( Guid elementType )
        {
            throw new NotImplementedException();
        }

        public SBytePropertyDefinitionEntity? GetSBytePropertyDefinitionByElementTypeAndName( Guid elementType, string name )
        {
            throw new NotImplementedException();
        }

        public IList<SinglePropertyDefinitionEntity> GetSinglePropertyDefinitionCollection( )
        {
            throw new NotImplementedException();
        }

        public List<SinglePropertyDefinitionEntity> GetSinglePropertyDefinitionCollectionByElementType( Guid elementType )
        {
            throw new NotImplementedException();
        }

        public SinglePropertyDefinitionEntity? GetSinglePropertyDefinitionByElementTypeAndName( Guid elementType, string name )
        {
            throw new NotImplementedException();
        }

        public IList<StringPropertyDefinitionEntity> GetStringPropertyDefinitionCollection( )
        {
            throw new NotImplementedException();
        }

        public List<StringPropertyDefinitionEntity> GetStringPropertyDefinitionCollectionByElementType( Guid elementType )
        {
            throw new NotImplementedException();
        }

        public StringPropertyDefinitionEntity? GetStringPropertyDefinitionByElementTypeAndName( Guid elementType, string name )
        {
            throw new NotImplementedException();
        }

        public IList<TimeseriesPropertyDefinitionEntity> GetTimeseriesPropertyDefinitionCollection( )
        {
            throw new NotImplementedException();
        }

        public List<TimeseriesPropertyDefinitionEntity> GetTimeseriesPropertyDefinitionCollectionByElementType( Guid elementType )
        {
            throw new NotImplementedException();
        }

        public TimeseriesPropertyDefinitionEntity? GetTimeseriesPropertyDefinitionByElementTypeAndName( Guid elementType, string name )
        {
            throw new NotImplementedException();
        }

        public IList<BinaryTimeseriesPropertyDefinitionEntity> GetBinaryTimeseriesPropertyDefinitionCollection( )
        {
            throw new NotImplementedException();
        }

        public List<BinaryTimeseriesPropertyDefinitionEntity> GetBinaryTimeseriesPropertyDefinitionCollectionByElementType( Guid elementType )
        {
            throw new NotImplementedException();
        }

        public BinaryTimeseriesPropertyDefinitionEntity? GetBinaryTimeseriesPropertyDefinitionByElementTypeAndName( Guid elementType, string name )
        {
            throw new NotImplementedException();
        }

        public IList<BooleanTimeseriesPropertyDefinitionEntity> GetBooleanTimeseriesPropertyDefinitionCollection( )
        {
            throw new NotImplementedException();
        }

        public List<BooleanTimeseriesPropertyDefinitionEntity> GetBooleanTimeseriesPropertyDefinitionCollectionByElementType( Guid elementType )
        {
            throw new NotImplementedException();
        }

        public BooleanTimeseriesPropertyDefinitionEntity? GetBooleanTimeseriesPropertyDefinitionByElementTypeAndName( Guid elementType, string name )
        {
            throw new NotImplementedException();
        }

        public IList<ByteTimeseriesPropertyDefinitionEntity> GetByteTimeseriesPropertyDefinitionCollection( )
        {
            throw new NotImplementedException();
        }

        public List<ByteTimeseriesPropertyDefinitionEntity> GetByteTimeseriesPropertyDefinitionCollectionByElementType( Guid elementType )
        {
            throw new NotImplementedException();
        }

        public ByteTimeseriesPropertyDefinitionEntity? GetByteTimeseriesPropertyDefinitionByElementTypeAndName( Guid elementType, string name )
        {
            throw new NotImplementedException();
        }

        public IList<DateTimeTimeseriesPropertyDefinitionEntity> GetDateTimeTimeseriesPropertyDefinitionCollection( )
        {
            throw new NotImplementedException();
        }

        public List<DateTimeTimeseriesPropertyDefinitionEntity> GetDateTimeTimeseriesPropertyDefinitionCollectionByElementType( Guid elementType )
        {
            throw new NotImplementedException();
        }

        public DateTimeTimeseriesPropertyDefinitionEntity? GetDateTimeTimeseriesPropertyDefinitionByElementTypeAndName( Guid elementType, string name )
        {
            throw new NotImplementedException();
        }

        public IList<DoubleTimeseriesPropertyDefinitionEntity> GetDoubleTimeseriesPropertyDefinitionCollection( )
        {
            throw new NotImplementedException();
        }

        public List<DoubleTimeseriesPropertyDefinitionEntity> GetDoubleTimeseriesPropertyDefinitionCollectionByElementType( Guid elementType )
        {
            throw new NotImplementedException();
        }

        public DoubleTimeseriesPropertyDefinitionEntity? GetDoubleTimeseriesPropertyDefinitionByElementTypeAndName( Guid elementType, string name )
        {
            throw new NotImplementedException();
        }

        public IList<GuidTimeseriesPropertyDefinitionEntity> GetGuidTimeseriesPropertyDefinitionCollection( )
        {
            throw new NotImplementedException();
        }

        public List<GuidTimeseriesPropertyDefinitionEntity> GetGuidTimeseriesPropertyDefinitionCollectionByElementType( Guid elementType )
        {
            throw new NotImplementedException();
        }

        public GuidTimeseriesPropertyDefinitionEntity? GetGuidTimeseriesPropertyDefinitionByElementTypeAndName( Guid elementType, string name )
        {
            throw new NotImplementedException();
        }

        public IList<Int16TimeseriesPropertyDefinitionEntity> GetInt16TimeseriesPropertyDefinitionCollection( )
        {
            throw new NotImplementedException();
        }

        public List<Int16TimeseriesPropertyDefinitionEntity> GetInt16TimeseriesPropertyDefinitionCollectionByElementType( Guid elementType )
        {
            throw new NotImplementedException();
        }

        public Int16TimeseriesPropertyDefinitionEntity? GetInt16TimeseriesPropertyDefinitionByElementTypeAndName( Guid elementType, string name )
        {
            throw new NotImplementedException();
        }

        public IList<Int32TimeseriesPropertyDefinitionEntity> GetInt32TimeseriesPropertyDefinitionCollection( )
        {
            throw new NotImplementedException();
        }

        public List<Int32TimeseriesPropertyDefinitionEntity> GetInt32TimeseriesPropertyDefinitionCollectionByElementType( Guid elementType )
        {
            throw new NotImplementedException();
        }

        public Int32TimeseriesPropertyDefinitionEntity? GetInt32TimeseriesPropertyDefinitionByElementTypeAndName( Guid elementType, string name )
        {
            throw new NotImplementedException();
        }

        public IList<Int64TimeseriesPropertyDefinitionEntity> GetInt64TimeseriesPropertyDefinitionCollection( )
        {
            throw new NotImplementedException();
        }

        public List<Int64TimeseriesPropertyDefinitionEntity> GetInt64TimeseriesPropertyDefinitionCollectionByElementType( Guid elementType )
        {
            throw new NotImplementedException();
        }

        public Int64TimeseriesPropertyDefinitionEntity? GetInt64TimeseriesPropertyDefinitionByElementTypeAndName( Guid elementType, string name )
        {
            throw new NotImplementedException();
        }

        public IList<ReferenceTimeseriesPropertyDefinitionEntity> GetReferenceTimeseriesPropertyDefinitionCollection( )
        {
            throw new NotImplementedException();
        }

        public List<ReferenceTimeseriesPropertyDefinitionEntity> GetReferenceTimeseriesPropertyDefinitionCollectionByElementType( Guid elementType )
        {
            throw new NotImplementedException();
        }

        public ReferenceTimeseriesPropertyDefinitionEntity? GetReferenceTimeseriesPropertyDefinitionByElementTypeAndName( Guid elementType, string name )
        {
            throw new NotImplementedException();
        }

        public List<ReferenceTimeseriesPropertyDefinitionEntity> GetReferenceTimeseriesPropertyDefinitionCollectionByReferencedElementType( Guid? referencedElementType )
        {
            throw new NotImplementedException();
        }

        public IList<SByteTimeseriesPropertyDefinitionEntity> GetSByteTimeseriesPropertyDefinitionCollection( )
        {
            throw new NotImplementedException();
        }

        public List<SByteTimeseriesPropertyDefinitionEntity> GetSByteTimeseriesPropertyDefinitionCollectionByElementType( Guid elementType )
        {
            throw new NotImplementedException();
        }

        public SByteTimeseriesPropertyDefinitionEntity? GetSByteTimeseriesPropertyDefinitionByElementTypeAndName( Guid elementType, string name )
        {
            throw new NotImplementedException();
        }

        public IList<SingleTimeseriesPropertyDefinitionEntity> GetSingleTimeseriesPropertyDefinitionCollection( )
        {
            throw new NotImplementedException();
        }

        public List<SingleTimeseriesPropertyDefinitionEntity> GetSingleTimeseriesPropertyDefinitionCollectionByElementType( Guid elementType )
        {
            throw new NotImplementedException();
        }

        public SingleTimeseriesPropertyDefinitionEntity? GetSingleTimeseriesPropertyDefinitionByElementTypeAndName( Guid elementType, string name )
        {
            throw new NotImplementedException();
        }

        public IList<StringTimeseriesPropertyDefinitionEntity> GetStringTimeseriesPropertyDefinitionCollection( )
        {
            throw new NotImplementedException();
        }

        public List<StringTimeseriesPropertyDefinitionEntity> GetStringTimeseriesPropertyDefinitionCollectionByElementType( Guid elementType )
        {
            throw new NotImplementedException();
        }

        public StringTimeseriesPropertyDefinitionEntity? GetStringTimeseriesPropertyDefinitionByElementTypeAndName( Guid elementType, string name )
        {
            throw new NotImplementedException();
        }

        public IList<TimeSpanTimeseriesPropertyDefinitionEntity> GetTimeSpanTimeseriesPropertyDefinitionCollection( )
        {
            throw new NotImplementedException();
        }

        public List<TimeSpanTimeseriesPropertyDefinitionEntity> GetTimeSpanTimeseriesPropertyDefinitionCollectionByElementType( Guid elementType )
        {
            throw new NotImplementedException();
        }

        public TimeSpanTimeseriesPropertyDefinitionEntity? GetTimeSpanTimeseriesPropertyDefinitionByElementTypeAndName( Guid elementType, string name )
        {
            throw new NotImplementedException();
        }

        public IList<UInt16TimeseriesPropertyDefinitionEntity> GetUInt16TimeseriesPropertyDefinitionCollection( )
        {
            throw new NotImplementedException();
        }

        public List<UInt16TimeseriesPropertyDefinitionEntity> GetUInt16TimeseriesPropertyDefinitionCollectionByElementType( Guid elementType )
        {
            throw new NotImplementedException();
        }

        public UInt16TimeseriesPropertyDefinitionEntity? GetUInt16TimeseriesPropertyDefinitionByElementTypeAndName( Guid elementType, string name )
        {
            throw new NotImplementedException();
        }

        public IList<UInt32TimeseriesPropertyDefinitionEntity> GetUInt32TimeseriesPropertyDefinitionCollection( )
        {
            throw new NotImplementedException();
        }

        public List<UInt32TimeseriesPropertyDefinitionEntity> GetUInt32TimeseriesPropertyDefinitionCollectionByElementType( Guid elementType )
        {
            throw new NotImplementedException();
        }

        public UInt32TimeseriesPropertyDefinitionEntity? GetUInt32TimeseriesPropertyDefinitionByElementTypeAndName( Guid elementType, string name )
        {
            throw new NotImplementedException();
        }

        public IList<UInt64TimeseriesPropertyDefinitionEntity> GetUInt64TimeseriesPropertyDefinitionCollection( )
        {
            throw new NotImplementedException();
        }

        public List<UInt64TimeseriesPropertyDefinitionEntity> GetUInt64TimeseriesPropertyDefinitionCollectionByElementType( Guid elementType )
        {
            throw new NotImplementedException();
        }

        public UInt64TimeseriesPropertyDefinitionEntity? GetUInt64TimeseriesPropertyDefinitionByElementTypeAndName( Guid elementType, string name )
        {
            throw new NotImplementedException();
        }

        public IList<TimeSpanPropertyDefinitionEntity> GetTimeSpanPropertyDefinitionCollection( )
        {
            throw new NotImplementedException();
        }

        public List<TimeSpanPropertyDefinitionEntity> GetTimeSpanPropertyDefinitionCollectionByElementType( Guid elementType )
        {
            throw new NotImplementedException();
        }

        public TimeSpanPropertyDefinitionEntity? GetTimeSpanPropertyDefinitionByElementTypeAndName( Guid elementType, string name )
        {
            throw new NotImplementedException();
        }

        public IList<UInt16PropertyDefinitionEntity> GetUInt16PropertyDefinitionCollection( )
        {
            throw new NotImplementedException();
        }

        public List<UInt16PropertyDefinitionEntity> GetUInt16PropertyDefinitionCollectionByElementType( Guid elementType )
        {
            throw new NotImplementedException();
        }

        public UInt16PropertyDefinitionEntity? GetUInt16PropertyDefinitionByElementTypeAndName( Guid elementType, string name )
        {
            throw new NotImplementedException();
        }

        public IList<UInt32PropertyDefinitionEntity> GetUInt32PropertyDefinitionCollection( )
        {
            throw new NotImplementedException();
        }

        public List<UInt32PropertyDefinitionEntity> GetUInt32PropertyDefinitionCollectionByElementType( Guid elementType )
        {
            throw new NotImplementedException();
        }

        public UInt32PropertyDefinitionEntity? GetUInt32PropertyDefinitionByElementTypeAndName( Guid elementType, string name )
        {
            throw new NotImplementedException();
        }

        public IList<UInt64PropertyDefinitionEntity> GetUInt64PropertyDefinitionCollection( )
        {
            throw new NotImplementedException();
        }

        public List<UInt64PropertyDefinitionEntity> GetUInt64PropertyDefinitionCollectionByElementType( Guid elementType )
        {
            throw new NotImplementedException();
        }

        public UInt64PropertyDefinitionEntity? GetUInt64PropertyDefinitionByElementTypeAndName( Guid elementType, string name )
        {
            throw new NotImplementedException();
        }

        public IList<RadarAlarmStatusEntity> GetRadarAlarmStatusCollection( )
        {
            throw new NotImplementedException();
        }

        public List<RadarAlarmStatusEntity> GetRadarAlarmStatusCollectionByRadar( Guid radar )
        {
            throw new NotImplementedException();
        }

        public RadarAlarmStatusEntity? GetRadarAlarmStatusByRadarAndTimestamp( Guid radar, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public RadarAlarmStatusEntity? GetRadarAlarmStatusByRadarAtTimestamp( Guid radar, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<RadarAlarmStatusEntity> GetRadarAlarmStatusByRadarFromTimestamp( Guid radar, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<RadarAlarmStatusEntity> GetRadarAlarmStatusByRadarUntilTimestamp( Guid radar, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<RadarAlarmStatusEntity> GetRadarAlarmStatusByRadarOverTimestamp( Guid radar, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

        public List<RadarAlarmStatusEntity> GetRadarAlarmStatusCollectionByTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<RadarAlarmStatusEntity> GetRadarAlarmStatusCollectionAtTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<RadarAlarmStatusEntity> GetRadarAlarmStatusCollectionFromTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<RadarAlarmStatusEntity> GetRadarAlarmStatusCollectionUntilTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<RadarAlarmStatusEntity> GetRadarAlarmStatusCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

        public IList<RadarCommandEntity> GetRadarCommandCollection( )
        {
            throw new NotImplementedException();
        }

        public List<RadarCommandEntity> GetRadarCommandCollectionByRadar( Guid radar )
        {
            throw new NotImplementedException();
        }

        public List<RadarCommandEntity> GetRadarCommandCollectionByRadarAndTimestamp( Guid radar, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<RadarCommandEntity> GetRadarCommandCollectionByRadarAtTimestamp( Guid radar, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<RadarCommandEntity> GetRadarCommandCollectionByRadarFromTimestamp( Guid radar, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<RadarCommandEntity> GetRadarCommandCollectionByRadarUntilTimestamp( Guid radar, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<RadarCommandEntity> GetRadarCommandCollectionByRadarOverTimestamp( Guid radar, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

        public List<RadarCommandEntity> GetRadarCommandCollectionByTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<RadarCommandEntity> GetRadarCommandCollectionAtTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<RadarCommandEntity> GetRadarCommandCollectionFromTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<RadarCommandEntity> GetRadarCommandCollectionUntilTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<RadarCommandEntity> GetRadarCommandCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

        public List<RadarCommandEntity> GetRadarCommandCollectionByReply( Guid? reply )
        {
            throw new NotImplementedException();
        }

        public IList<RadarCommandGetStatusEntity> GetRadarCommandGetStatusCollection( )
        {
            throw new NotImplementedException();
        }

        public List<RadarCommandGetStatusEntity> GetRadarCommandGetStatusCollectionByRadar( Guid radar )
        {
            throw new NotImplementedException();
        }

        public List<RadarCommandGetStatusEntity> GetRadarCommandGetStatusCollectionByRadarAndTimestamp( Guid radar, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<RadarCommandGetStatusEntity> GetRadarCommandGetStatusCollectionByRadarAtTimestamp( Guid radar, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<RadarCommandGetStatusEntity> GetRadarCommandGetStatusCollectionByRadarFromTimestamp( Guid radar, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<RadarCommandGetStatusEntity> GetRadarCommandGetStatusCollectionByRadarUntilTimestamp( Guid radar, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<RadarCommandGetStatusEntity> GetRadarCommandGetStatusCollectionByRadarOverTimestamp( Guid radar, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

        public List<RadarCommandGetStatusEntity> GetRadarCommandGetStatusCollectionByTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<RadarCommandGetStatusEntity> GetRadarCommandGetStatusCollectionAtTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<RadarCommandGetStatusEntity> GetRadarCommandGetStatusCollectionFromTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<RadarCommandGetStatusEntity> GetRadarCommandGetStatusCollectionUntilTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<RadarCommandGetStatusEntity> GetRadarCommandGetStatusCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

        public List<RadarCommandGetStatusEntity> GetRadarCommandGetStatusCollectionByReply( Guid? reply )
        {
            throw new NotImplementedException();
        }

        public IList<RadarCommandReplyEntity> GetRadarCommandReplyCollection( )
        {
            throw new NotImplementedException();
        }

        public List<RadarCommandReplyEntity> GetRadarCommandReplyCollectionByRadar( Guid radar )
        {
            throw new NotImplementedException();
        }

        public List<RadarCommandReplyEntity> GetRadarCommandReplyCollectionByRadarAndTimestamp( Guid radar, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<RadarCommandReplyEntity> GetRadarCommandReplyCollectionByRadarAtTimestamp( Guid radar, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<RadarCommandReplyEntity> GetRadarCommandReplyCollectionByRadarFromTimestamp( Guid radar, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<RadarCommandReplyEntity> GetRadarCommandReplyCollectionByRadarUntilTimestamp( Guid radar, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<RadarCommandReplyEntity> GetRadarCommandReplyCollectionByRadarOverTimestamp( Guid radar, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

        public List<RadarCommandReplyEntity> GetRadarCommandReplyCollectionByTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<RadarCommandReplyEntity> GetRadarCommandReplyCollectionAtTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<RadarCommandReplyEntity> GetRadarCommandReplyCollectionFromTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<RadarCommandReplyEntity> GetRadarCommandReplyCollectionUntilTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<RadarCommandReplyEntity> GetRadarCommandReplyCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

        public RadarCommandReplyEntity? GetRadarCommandReplyByCommand( Guid? command )
        {
            throw new NotImplementedException();
        }

        public IList<RadarCommandReplyGetStatusEntity> GetRadarCommandReplyGetStatusCollection( )
        {
            throw new NotImplementedException();
        }

        public List<RadarCommandReplyGetStatusEntity> GetRadarCommandReplyGetStatusCollectionByRadar( Guid radar )
        {
            throw new NotImplementedException();
        }

        public List<RadarCommandReplyGetStatusEntity> GetRadarCommandReplyGetStatusCollectionByRadarAndTimestamp( Guid radar, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<RadarCommandReplyGetStatusEntity> GetRadarCommandReplyGetStatusCollectionByRadarAtTimestamp( Guid radar, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<RadarCommandReplyGetStatusEntity> GetRadarCommandReplyGetStatusCollectionByRadarFromTimestamp( Guid radar, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<RadarCommandReplyGetStatusEntity> GetRadarCommandReplyGetStatusCollectionByRadarUntilTimestamp( Guid radar, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<RadarCommandReplyGetStatusEntity> GetRadarCommandReplyGetStatusCollectionByRadarOverTimestamp( Guid radar, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

        public List<RadarCommandReplyGetStatusEntity> GetRadarCommandReplyGetStatusCollectionByTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<RadarCommandReplyGetStatusEntity> GetRadarCommandReplyGetStatusCollectionAtTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<RadarCommandReplyGetStatusEntity> GetRadarCommandReplyGetStatusCollectionFromTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<RadarCommandReplyGetStatusEntity> GetRadarCommandReplyGetStatusCollectionUntilTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<RadarCommandReplyGetStatusEntity> GetRadarCommandReplyGetStatusCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

        public RadarCommandReplyGetStatusEntity? GetRadarCommandReplyGetStatusByCommand( Guid? command )
        {
            throw new NotImplementedException();
        }

        public IList<RadarConfigurationEntity> GetRadarConfigurationCollection( )
        {
            throw new NotImplementedException();
        }

        public List<RadarConfigurationEntity> GetRadarConfigurationCollectionByRadar( Guid radar )
        {
            throw new NotImplementedException();
        }

        public RadarConfigurationEntity? GetRadarConfigurationByRadarAndTimestamp( Guid radar, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public RadarConfigurationEntity? GetRadarConfigurationByRadarAtTimestamp( Guid radar, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<RadarConfigurationEntity> GetRadarConfigurationByRadarFromTimestamp( Guid radar, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<RadarConfigurationEntity> GetRadarConfigurationByRadarUntilTimestamp( Guid radar, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<RadarConfigurationEntity> GetRadarConfigurationByRadarOverTimestamp( Guid radar, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

        public List<RadarConfigurationEntity> GetRadarConfigurationCollectionByTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<RadarConfigurationEntity> GetRadarConfigurationCollectionAtTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<RadarConfigurationEntity> GetRadarConfigurationCollectionFromTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<RadarConfigurationEntity> GetRadarConfigurationCollectionUntilTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<RadarConfigurationEntity> GetRadarConfigurationCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

        public IList<RadarImageEntity> GetRadarImageCollection( )
        {
            throw new NotImplementedException();
        }

        public List<RadarImageEntity> GetRadarImageCollectionByRadar( Guid radar )
        {
            throw new NotImplementedException();
        }

        public RadarImageEntity? GetRadarImageByRadarAndTimestamp( Guid radar, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public RadarImageEntity? GetRadarImageByRadarAtTimestamp( Guid radar, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<RadarImageEntity> GetRadarImageByRadarFromTimestamp( Guid radar, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<RadarImageEntity> GetRadarImageByRadarUntilTimestamp( Guid radar, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<RadarImageEntity> GetRadarImageByRadarOverTimestamp( Guid radar, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

        public List<RadarImageEntity> GetRadarImageCollectionByTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<RadarImageEntity> GetRadarImageCollectionAtTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<RadarImageEntity> GetRadarImageCollectionFromTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<RadarImageEntity> GetRadarImageCollectionUntilTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<RadarImageEntity> GetRadarImageCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

        public IList<RadarRawTrackTableEntity> GetRadarRawTrackTableCollection( )
        {
            throw new NotImplementedException();
        }

        public List<RadarRawTrackTableEntity> GetRadarRawTrackTableCollectionByRadar( Guid radar )
        {
            throw new NotImplementedException();
        }

        public RadarRawTrackTableEntity? GetRadarRawTrackTableByRadarAndTimestamp( Guid radar, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public RadarRawTrackTableEntity? GetRadarRawTrackTableByRadarAtTimestamp( Guid radar, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<RadarRawTrackTableEntity> GetRadarRawTrackTableByRadarFromTimestamp( Guid radar, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<RadarRawTrackTableEntity> GetRadarRawTrackTableByRadarUntilTimestamp( Guid radar, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<RadarRawTrackTableEntity> GetRadarRawTrackTableByRadarOverTimestamp( Guid radar, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

        public List<RadarRawTrackTableEntity> GetRadarRawTrackTableCollectionByTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<RadarRawTrackTableEntity> GetRadarRawTrackTableCollectionAtTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<RadarRawTrackTableEntity> GetRadarRawTrackTableCollectionFromTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<RadarRawTrackTableEntity> GetRadarRawTrackTableCollectionUntilTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<RadarRawTrackTableEntity> GetRadarRawTrackTableCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

        public IList<RadarStatusEntity> GetRadarStatusCollection( )
        {
            throw new NotImplementedException();
        }

        public List<RadarStatusEntity> GetRadarStatusCollectionByRadar( Guid radar )
        {
            throw new NotImplementedException();
        }

        public RadarStatusEntity? GetRadarStatusByRadarAndTimestamp( Guid radar, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public RadarStatusEntity? GetRadarStatusByRadarAtTimestamp( Guid radar, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<RadarStatusEntity> GetRadarStatusByRadarFromTimestamp( Guid radar, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<RadarStatusEntity> GetRadarStatusByRadarUntilTimestamp( Guid radar, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<RadarStatusEntity> GetRadarStatusByRadarOverTimestamp( Guid radar, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

        public List<RadarStatusEntity> GetRadarStatusCollectionByTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<RadarStatusEntity> GetRadarStatusCollectionAtTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<RadarStatusEntity> GetRadarStatusCollectionFromTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<RadarStatusEntity> GetRadarStatusCollectionUntilTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<RadarStatusEntity> GetRadarStatusCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

        public IList<RadioCommandEntity> GetRadioCommandCollection( )
        {
            throw new NotImplementedException();
        }

        public List<RadioCommandEntity> GetRadioCommandCollectionByRadio( Guid radio )
        {
            throw new NotImplementedException();
        }

        public List<RadioCommandEntity> GetRadioCommandCollectionByRadioAndTimestamp( Guid radio, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<RadioCommandEntity> GetRadioCommandCollectionByRadioAtTimestamp( Guid radio, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<RadioCommandEntity> GetRadioCommandCollectionByRadioFromTimestamp( Guid radio, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<RadioCommandEntity> GetRadioCommandCollectionByRadioUntilTimestamp( Guid radio, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<RadioCommandEntity> GetRadioCommandCollectionByRadioOverTimestamp( Guid radio, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

        public List<RadioCommandEntity> GetRadioCommandCollectionByTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<RadioCommandEntity> GetRadioCommandCollectionAtTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<RadioCommandEntity> GetRadioCommandCollectionFromTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<RadioCommandEntity> GetRadioCommandCollectionUntilTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<RadioCommandEntity> GetRadioCommandCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

        public List<RadioCommandEntity> GetRadioCommandCollectionByReply( Guid? reply )
        {
            throw new NotImplementedException();
        }

        public IList<RadioCommandReplyEntity> GetRadioCommandReplyCollection( )
        {
            throw new NotImplementedException();
        }

        public List<RadioCommandReplyEntity> GetRadioCommandReplyCollectionByRadio( Guid radio )
        {
            throw new NotImplementedException();
        }

        public List<RadioCommandReplyEntity> GetRadioCommandReplyCollectionByRadioAndTimestamp( Guid radio, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<RadioCommandReplyEntity> GetRadioCommandReplyCollectionByRadioAtTimestamp( Guid radio, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<RadioCommandReplyEntity> GetRadioCommandReplyCollectionByRadioFromTimestamp( Guid radio, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<RadioCommandReplyEntity> GetRadioCommandReplyCollectionByRadioUntilTimestamp( Guid radio, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<RadioCommandReplyEntity> GetRadioCommandReplyCollectionByRadioOverTimestamp( Guid radio, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

        public List<RadioCommandReplyEntity> GetRadioCommandReplyCollectionByTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<RadioCommandReplyEntity> GetRadioCommandReplyCollectionAtTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<RadioCommandReplyEntity> GetRadioCommandReplyCollectionFromTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<RadioCommandReplyEntity> GetRadioCommandReplyCollectionUntilTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<RadioCommandReplyEntity> GetRadioCommandReplyCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

        public RadioCommandReplyEntity? GetRadioCommandReplyByCommand( Guid? command )
        {
            throw new NotImplementedException();
        }

        public IList<RadioConfigurationEntity> GetRadioConfigurationCollection( )
        {
            throw new NotImplementedException();
        }

        public List<RadioConfigurationEntity> GetRadioConfigurationCollectionByRadio( Guid radio )
        {
            throw new NotImplementedException();
        }

        public RadioConfigurationEntity? GetRadioConfigurationByRadioAndTimestamp( Guid radio, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public RadioConfigurationEntity? GetRadioConfigurationByRadioAtTimestamp( Guid radio, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<RadioConfigurationEntity> GetRadioConfigurationByRadioFromTimestamp( Guid radio, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<RadioConfigurationEntity> GetRadioConfigurationByRadioUntilTimestamp( Guid radio, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<RadioConfigurationEntity> GetRadioConfigurationByRadioOverTimestamp( Guid radio, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

        public List<RadioConfigurationEntity> GetRadioConfigurationCollectionByTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<RadioConfigurationEntity> GetRadioConfigurationCollectionAtTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<RadioConfigurationEntity> GetRadioConfigurationCollectionFromTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<RadioConfigurationEntity> GetRadioConfigurationCollectionUntilTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<RadioConfigurationEntity> GetRadioConfigurationCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

        public IList<RadomeCommandEntity> GetRadomeCommandCollection( )
        {
            throw new NotImplementedException();
        }

        public List<RadomeCommandEntity> GetRadomeCommandCollectionByRadome( Guid radome )
        {
            throw new NotImplementedException();
        }

        public List<RadomeCommandEntity> GetRadomeCommandCollectionByRadomeAndTimestamp( Guid radome, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<RadomeCommandEntity> GetRadomeCommandCollectionByRadomeAtTimestamp( Guid radome, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<RadomeCommandEntity> GetRadomeCommandCollectionByRadomeFromTimestamp( Guid radome, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<RadomeCommandEntity> GetRadomeCommandCollectionByRadomeUntilTimestamp( Guid radome, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<RadomeCommandEntity> GetRadomeCommandCollectionByRadomeOverTimestamp( Guid radome, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

        public List<RadomeCommandEntity> GetRadomeCommandCollectionByTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<RadomeCommandEntity> GetRadomeCommandCollectionAtTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<RadomeCommandEntity> GetRadomeCommandCollectionFromTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<RadomeCommandEntity> GetRadomeCommandCollectionUntilTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<RadomeCommandEntity> GetRadomeCommandCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

        public List<RadomeCommandEntity> GetRadomeCommandCollectionByReply( Guid? reply )
        {
            throw new NotImplementedException();
        }

        public IList<RadomeCommandReplyEntity> GetRadomeCommandReplyCollection( )
        {
            throw new NotImplementedException();
        }

        public List<RadomeCommandReplyEntity> GetRadomeCommandReplyCollectionByRadome( Guid radome )
        {
            throw new NotImplementedException();
        }

        public List<RadomeCommandReplyEntity> GetRadomeCommandReplyCollectionByRadomeAndTimestamp( Guid radome, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<RadomeCommandReplyEntity> GetRadomeCommandReplyCollectionByRadomeAtTimestamp( Guid radome, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<RadomeCommandReplyEntity> GetRadomeCommandReplyCollectionByRadomeFromTimestamp( Guid radome, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<RadomeCommandReplyEntity> GetRadomeCommandReplyCollectionByRadomeUntilTimestamp( Guid radome, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<RadomeCommandReplyEntity> GetRadomeCommandReplyCollectionByRadomeOverTimestamp( Guid radome, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

        public List<RadomeCommandReplyEntity> GetRadomeCommandReplyCollectionByTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<RadomeCommandReplyEntity> GetRadomeCommandReplyCollectionAtTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<RadomeCommandReplyEntity> GetRadomeCommandReplyCollectionFromTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<RadomeCommandReplyEntity> GetRadomeCommandReplyCollectionUntilTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<RadomeCommandReplyEntity> GetRadomeCommandReplyCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

        public RadomeCommandReplyEntity? GetRadomeCommandReplyByCommand( Guid? command )
        {
            throw new NotImplementedException();
        }

        public IList<RadomeConfigurationEntity> GetRadomeConfigurationCollection( )
        {
            throw new NotImplementedException();
        }

        public List<RadomeConfigurationEntity> GetRadomeConfigurationCollectionByRadome( Guid radome )
        {
            throw new NotImplementedException();
        }

        public RadomeConfigurationEntity? GetRadomeConfigurationByRadomeAndTimestamp( Guid radome, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public RadomeConfigurationEntity? GetRadomeConfigurationByRadomeAtTimestamp( Guid radome, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<RadomeConfigurationEntity> GetRadomeConfigurationByRadomeFromTimestamp( Guid radome, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<RadomeConfigurationEntity> GetRadomeConfigurationByRadomeUntilTimestamp( Guid radome, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<RadomeConfigurationEntity> GetRadomeConfigurationByRadomeOverTimestamp( Guid radome, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

        public List<RadomeConfigurationEntity> GetRadomeConfigurationCollectionByTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<RadomeConfigurationEntity> GetRadomeConfigurationCollectionAtTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<RadomeConfigurationEntity> GetRadomeConfigurationCollectionFromTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<RadomeConfigurationEntity> GetRadomeConfigurationCollectionUntilTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<RadomeConfigurationEntity> GetRadomeConfigurationCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

        public IList<ReferenceTimeseriesValueEntity> GetReferenceTimeseriesValueCollection( )
        {
            throw new NotImplementedException();
        }

        public List<ReferenceTimeseriesValueEntity> GetReferenceTimeseriesValueCollectionByTimeseries( Guid timeseries )
        {
            throw new NotImplementedException();
        }

        public ReferenceTimeseriesValueEntity? GetReferenceTimeseriesValueByTimeseriesAndTimestamp( Guid timeseries, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public ReferenceTimeseriesValueEntity? GetReferenceTimeseriesValueByTimeseriesAtTimestamp( Guid timeseries, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<ReferenceTimeseriesValueEntity> GetReferenceTimeseriesValueByTimeseriesFromTimestamp( Guid timeseries, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<ReferenceTimeseriesValueEntity> GetReferenceTimeseriesValueByTimeseriesUntilTimestamp( Guid timeseries, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<ReferenceTimeseriesValueEntity> GetReferenceTimeseriesValueByTimeseriesOverTimestamp( Guid timeseries, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

        public List<ReferenceTimeseriesValueEntity> GetReferenceTimeseriesValueCollectionByTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<ReferenceTimeseriesValueEntity> GetReferenceTimeseriesValueCollectionAtTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<ReferenceTimeseriesValueEntity> GetReferenceTimeseriesValueCollectionFromTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<ReferenceTimeseriesValueEntity> GetReferenceTimeseriesValueCollectionUntilTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<ReferenceTimeseriesValueEntity> GetReferenceTimeseriesValueCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

        public List<ReferenceTimeseriesValueEntity> GetReferenceTimeseriesValueCollectionByValue( Guid value__ )
        {
            throw new NotImplementedException();
        }

        public IList<SByteTimeseriesValueEntity> GetSByteTimeseriesValueCollection( )
        {
            throw new NotImplementedException();
        }

        public List<SByteTimeseriesValueEntity> GetSByteTimeseriesValueCollectionByTimeseries( Guid timeseries )
        {
            throw new NotImplementedException();
        }

        public SByteTimeseriesValueEntity? GetSByteTimeseriesValueByTimeseriesAndTimestamp( Guid timeseries, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public SByteTimeseriesValueEntity? GetSByteTimeseriesValueByTimeseriesAtTimestamp( Guid timeseries, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<SByteTimeseriesValueEntity> GetSByteTimeseriesValueByTimeseriesFromTimestamp( Guid timeseries, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<SByteTimeseriesValueEntity> GetSByteTimeseriesValueByTimeseriesUntilTimestamp( Guid timeseries, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<SByteTimeseriesValueEntity> GetSByteTimeseriesValueByTimeseriesOverTimestamp( Guid timeseries, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

        public List<SByteTimeseriesValueEntity> GetSByteTimeseriesValueCollectionByTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<SByteTimeseriesValueEntity> GetSByteTimeseriesValueCollectionAtTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<SByteTimeseriesValueEntity> GetSByteTimeseriesValueCollectionFromTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<SByteTimeseriesValueEntity> GetSByteTimeseriesValueCollectionUntilTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<SByteTimeseriesValueEntity> GetSByteTimeseriesValueCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

        public IList<SecurityDomainEntity> GetSecurityDomainCollection( )
        {
            throw new NotImplementedException();
        }

        public SecurityDomainEntity? GetSecurityDomainByName( string name )
        {
            throw new NotImplementedException();
        }

        public IList<SecurityIdentifierEntity> GetSecurityIdentifierCollection( )
        {
            throw new NotImplementedException();
        }

        public List<SecurityIdentifierEntity> GetSecurityIdentifierCollectionByDomain( Guid domain )
        {
            throw new NotImplementedException();
        }

        public SecurityIdentifierEntity? GetSecurityIdentifierByDomainAndIdentity( Guid domain, string identity )
        {
            throw new NotImplementedException();
        }

        public IList<SecurityLoginEntity> GetSecurityLoginCollection( )
        {
            throw new NotImplementedException();
        }

        public List<SecurityLoginEntity> GetSecurityLoginCollectionByDomain( Guid domain )
        {
            throw new NotImplementedException();
        }

        public SecurityLoginEntity? GetSecurityLoginByDomainAndIdentity( Guid domain, string identity )
        {
            throw new NotImplementedException();
        }

        public IList<SecurityRoleEntity> GetSecurityRoleCollection( )
        {
            throw new NotImplementedException();
        }

        public List<SecurityRoleEntity> GetSecurityRoleCollectionByDomain( Guid domain )
        {
            throw new NotImplementedException();
        }

        public SecurityRoleEntity? GetSecurityRoleByDomainAndIdentity( Guid domain, string identity )
        {
            throw new NotImplementedException();
        }

        public SecurityRoleEntity? GetSecurityRoleByName( string name )
        {
            throw new NotImplementedException();
        }

        public IList<SecurityIdentifierRoleLinkEntity> GetSecurityIdentifierRoleLinkCollection( )
        {
            throw new NotImplementedException();
        }

        public List<SecurityIdentifierRoleLinkEntity> GetSecurityIdentifierRoleLinkCollectionByMember( Guid member )
        {
            throw new NotImplementedException();
        }

        public List<SecurityIdentifierRoleLinkEntity> GetSecurityIdentifierRoleLinkCollectionByMemberAndStart( Guid member, DateTime start )
        {
            throw new NotImplementedException();
        }

        public List<SecurityIdentifierRoleLinkEntity> GetSecurityIdentifierRoleLinkCollectionByMemberAtStart( Guid member, DateTime start )
        {
            throw new NotImplementedException();
        }

        public List<SecurityIdentifierRoleLinkEntity> GetSecurityIdentifierRoleLinkCollectionByMemberFromStart( Guid member, DateTime start )
        {
            throw new NotImplementedException();
        }

        public List<SecurityIdentifierRoleLinkEntity> GetSecurityIdentifierRoleLinkCollectionByMemberUntilStart( Guid member, DateTime start )
        {
            throw new NotImplementedException();
        }

        public List<SecurityIdentifierRoleLinkEntity> GetSecurityIdentifierRoleLinkCollectionByMemberOverStart( Guid member, DateTime fromStart, DateTime untilStart )
        {
            throw new NotImplementedException();
        }

        public List<SecurityIdentifierRoleLinkEntity> GetSecurityIdentifierRoleLinkCollectionByRole( Guid role )
        {
            throw new NotImplementedException();
        }

        public List<SecurityIdentifierRoleLinkEntity> GetSecurityIdentifierRoleLinkCollectionByRoleAndStart( Guid role, DateTime start )
        {
            throw new NotImplementedException();
        }

        public List<SecurityIdentifierRoleLinkEntity> GetSecurityIdentifierRoleLinkCollectionByRoleAtStart( Guid role, DateTime start )
        {
            throw new NotImplementedException();
        }

        public List<SecurityIdentifierRoleLinkEntity> GetSecurityIdentifierRoleLinkCollectionByRoleFromStart( Guid role, DateTime start )
        {
            throw new NotImplementedException();
        }

        public List<SecurityIdentifierRoleLinkEntity> GetSecurityIdentifierRoleLinkCollectionByRoleUntilStart( Guid role, DateTime start )
        {
            throw new NotImplementedException();
        }

        public List<SecurityIdentifierRoleLinkEntity> GetSecurityIdentifierRoleLinkCollectionByRoleOverStart( Guid role, DateTime fromStart, DateTime untilStart )
        {
            throw new NotImplementedException();
        }

        public List<SecurityIdentifierRoleLinkEntity> GetSecurityIdentifierRoleLinkCollectionByStart( DateTime start )
        {
            throw new NotImplementedException();
        }

        public List<SecurityIdentifierRoleLinkEntity> GetSecurityIdentifierRoleLinkCollectionAtStart( DateTime start )
        {
            throw new NotImplementedException();
        }

        public List<SecurityIdentifierRoleLinkEntity> GetSecurityIdentifierRoleLinkCollectionFromStart( DateTime start )
        {
            throw new NotImplementedException();
        }

        public List<SecurityIdentifierRoleLinkEntity> GetSecurityIdentifierRoleLinkCollectionUntilStart( DateTime start )
        {
            throw new NotImplementedException();
        }

        public List<SecurityIdentifierRoleLinkEntity> GetSecurityIdentifierRoleLinkCollectionOverStart( DateTime fromStart, DateTime untilStart )
        {
            throw new NotImplementedException();
        }

        public IList<SecurityLoginSessionEntity> GetSecurityLoginSessionCollection( )
        {
            throw new NotImplementedException();
        }

        public List<SecurityLoginSessionEntity> GetSecurityLoginSessionCollectionByLogin( Guid login )
        {
            throw new NotImplementedException();
        }

        public List<SecurityLoginSessionEntity> GetSecurityLoginSessionCollectionByLoginAndFromTime( Guid login, DateTime fromTime )
        {
            throw new NotImplementedException();
        }

        public List<SecurityLoginSessionEntity> GetSecurityLoginSessionCollectionByLoginAtFromTime( Guid login, DateTime fromTime )
        {
            throw new NotImplementedException();
        }

        public List<SecurityLoginSessionEntity> GetSecurityLoginSessionCollectionByLoginFromFromTime( Guid login, DateTime fromTime )
        {
            throw new NotImplementedException();
        }

        public List<SecurityLoginSessionEntity> GetSecurityLoginSessionCollectionByLoginUntilFromTime( Guid login, DateTime fromTime )
        {
            throw new NotImplementedException();
        }

        public List<SecurityLoginSessionEntity> GetSecurityLoginSessionCollectionByLoginOverFromTime( Guid login, DateTime fromFromTime, DateTime untilFromTime )
        {
            throw new NotImplementedException();
        }

        public List<SecurityLoginSessionEntity> GetSecurityLoginSessionCollectionByFromTime( DateTime fromTime )
        {
            throw new NotImplementedException();
        }

        public List<SecurityLoginSessionEntity> GetSecurityLoginSessionCollectionAtFromTime( DateTime fromTime )
        {
            throw new NotImplementedException();
        }

        public List<SecurityLoginSessionEntity> GetSecurityLoginSessionCollectionFromFromTime( DateTime fromTime )
        {
            throw new NotImplementedException();
        }

        public List<SecurityLoginSessionEntity> GetSecurityLoginSessionCollectionUntilFromTime( DateTime fromTime )
        {
            throw new NotImplementedException();
        }

        public List<SecurityLoginSessionEntity> GetSecurityLoginSessionCollectionOverFromTime( DateTime fromFromTime, DateTime untilFromTime )
        {
            throw new NotImplementedException();
        }

        public IList<SecurityPermissionEntity> GetSecurityPermissionCollection( )
        {
            throw new NotImplementedException();
        }

        public List<SecurityPermissionEntity> GetSecurityPermissionCollectionByIdentifier( Guid identifier )
        {
            throw new NotImplementedException();
        }

        public List<SecurityPermissionEntity> GetSecurityPermissionCollectionByIdentifierAndTypeCode( Guid identifier, int typeCode )
        {
            throw new NotImplementedException();
        }

        public List<SecurityPermissionEntity> GetSecurityPermissionCollectionByIdentifierFromTypeCode( Guid identifier, int typeCode )
        {
            throw new NotImplementedException();
        }

        public List<SecurityPermissionEntity> GetSecurityPermissionCollectionByIdentifierUntilTypeCode( Guid identifier, int typeCode )
        {
            throw new NotImplementedException();
        }

        public List<SecurityPermissionEntity> GetSecurityPermissionCollectionByIdentifierOverTypeCode( Guid identifier, int fromTypeCode, int untilTypeCode )
        {
            throw new NotImplementedException();
        }

        public SecurityPermissionEntity? GetSecurityPermissionByIdentifierTypeCodeAndTimestamp( Guid identifier, int typeCode, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public SecurityPermissionEntity? GetSecurityPermissionByIdentifierTypeCodeAtTimestamp( Guid identifier, int typeCode, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<SecurityPermissionEntity> GetSecurityPermissionByIdentifierTypeCodeFromTimestamp( Guid identifier, int typeCode, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<SecurityPermissionEntity> GetSecurityPermissionByIdentifierTypeCodeUntilTimestamp( Guid identifier, int typeCode, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<SecurityPermissionEntity> GetSecurityPermissionByIdentifierTypeCodeOverTimestamp( Guid identifier, int typeCode, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

        public List<SecurityPermissionEntity> GetSecurityPermissionCollectionByTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<SecurityPermissionEntity> GetSecurityPermissionCollectionAtTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<SecurityPermissionEntity> GetSecurityPermissionCollectionFromTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<SecurityPermissionEntity> GetSecurityPermissionCollectionUntilTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<SecurityPermissionEntity> GetSecurityPermissionCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

        public IList<SingleTimeseriesValueEntity> GetSingleTimeseriesValueCollection( )
        {
            throw new NotImplementedException();
        }

        public List<SingleTimeseriesValueEntity> GetSingleTimeseriesValueCollectionByTimeseries( Guid timeseries )
        {
            throw new NotImplementedException();
        }

        public SingleTimeseriesValueEntity? GetSingleTimeseriesValueByTimeseriesAndTimestamp( Guid timeseries, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public SingleTimeseriesValueEntity? GetSingleTimeseriesValueByTimeseriesAtTimestamp( Guid timeseries, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<SingleTimeseriesValueEntity> GetSingleTimeseriesValueByTimeseriesFromTimestamp( Guid timeseries, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<SingleTimeseriesValueEntity> GetSingleTimeseriesValueByTimeseriesUntilTimestamp( Guid timeseries, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<SingleTimeseriesValueEntity> GetSingleTimeseriesValueByTimeseriesOverTimestamp( Guid timeseries, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

        public List<SingleTimeseriesValueEntity> GetSingleTimeseriesValueCollectionByTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<SingleTimeseriesValueEntity> GetSingleTimeseriesValueCollectionAtTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<SingleTimeseriesValueEntity> GetSingleTimeseriesValueCollectionFromTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<SingleTimeseriesValueEntity> GetSingleTimeseriesValueCollectionUntilTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<SingleTimeseriesValueEntity> GetSingleTimeseriesValueCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

        public IList<StringTimeseriesValueEntity> GetStringTimeseriesValueCollection( )
        {
            throw new NotImplementedException();
        }

        public List<StringTimeseriesValueEntity> GetStringTimeseriesValueCollectionByTimeseries( Guid timeseries )
        {
            throw new NotImplementedException();
        }

        public StringTimeseriesValueEntity? GetStringTimeseriesValueByTimeseriesAndTimestamp( Guid timeseries, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public StringTimeseriesValueEntity? GetStringTimeseriesValueByTimeseriesAtTimestamp( Guid timeseries, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<StringTimeseriesValueEntity> GetStringTimeseriesValueByTimeseriesFromTimestamp( Guid timeseries, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<StringTimeseriesValueEntity> GetStringTimeseriesValueByTimeseriesUntilTimestamp( Guid timeseries, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<StringTimeseriesValueEntity> GetStringTimeseriesValueByTimeseriesOverTimestamp( Guid timeseries, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

        public List<StringTimeseriesValueEntity> GetStringTimeseriesValueCollectionByTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<StringTimeseriesValueEntity> GetStringTimeseriesValueCollectionAtTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<StringTimeseriesValueEntity> GetStringTimeseriesValueCollectionFromTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<StringTimeseriesValueEntity> GetStringTimeseriesValueCollectionUntilTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<StringTimeseriesValueEntity> GetStringTimeseriesValueCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

        public IList<TimeseriesCatalogElementEntity> GetTimeseriesCatalogElementCollection( )
        {
            throw new NotImplementedException();
        }

        public List<TimeseriesCatalogElementEntity> GetTimeseriesCatalogElementCollectionByCatalog( Guid? catalog )
        {
            throw new NotImplementedException();
        }

        public TimeseriesCatalogElementEntity? GetTimeseriesCatalogElementByCatalogAndName( Guid? catalog, string name )
        {
            throw new NotImplementedException();
        }

        public IList<TimeseriesEntity> GetTimeseriesCollection( )
        {
            throw new NotImplementedException();
        }

        public List<TimeseriesEntity> GetTimeseriesCollectionByCatalog( Guid? catalog )
        {
            throw new NotImplementedException();
        }

        public TimeseriesEntity? GetTimeseriesByCatalogAndName( Guid? catalog, string name )
        {
            throw new NotImplementedException();
        }

        public IList<BinaryTimeseriesEntity> GetBinaryTimeseriesCollection( )
        {
            throw new NotImplementedException();
        }

        public List<BinaryTimeseriesEntity> GetBinaryTimeseriesCollectionByCatalog( Guid? catalog )
        {
            throw new NotImplementedException();
        }

        public BinaryTimeseriesEntity? GetBinaryTimeseriesByCatalogAndName( Guid? catalog, string name )
        {
            throw new NotImplementedException();
        }

        public IList<BooleanTimeseriesEntity> GetBooleanTimeseriesCollection( )
        {
            throw new NotImplementedException();
        }

        public List<BooleanTimeseriesEntity> GetBooleanTimeseriesCollectionByCatalog( Guid? catalog )
        {
            throw new NotImplementedException();
        }

        public BooleanTimeseriesEntity? GetBooleanTimeseriesByCatalogAndName( Guid? catalog, string name )
        {
            throw new NotImplementedException();
        }

        public IList<AisAidToNavigationOffPositionTimeseriesEntity> GetAisAidToNavigationOffPositionTimeseriesCollection( )
        {
            throw new NotImplementedException();
        }

        public List<AisAidToNavigationOffPositionTimeseriesEntity> GetAisAidToNavigationOffPositionTimeseriesCollectionByCatalog( Guid? catalog )
        {
            throw new NotImplementedException();
        }

        public AisAidToNavigationOffPositionTimeseriesEntity? GetAisAidToNavigationOffPositionTimeseriesByCatalogAndName( Guid? catalog, string name )
        {
            throw new NotImplementedException();
        }

        public List<AisAidToNavigationOffPositionTimeseriesEntity> GetAisAidToNavigationOffPositionTimeseriesCollectionByAidToNavigation( Guid? aidToNavigation )
        {
            throw new NotImplementedException();
        }

        public IList<DeviceEnabledTimeseriesEntity> GetDeviceEnabledTimeseriesCollection( )
        {
            throw new NotImplementedException();
        }

        public List<DeviceEnabledTimeseriesEntity> GetDeviceEnabledTimeseriesCollectionByCatalog( Guid? catalog )
        {
            throw new NotImplementedException();
        }

        public DeviceEnabledTimeseriesEntity? GetDeviceEnabledTimeseriesByCatalogAndName( Guid? catalog, string name )
        {
            throw new NotImplementedException();
        }

        public IList<RadarAutomaticSensitivityTimeControlTimeseriesEntity> GetRadarAutomaticSensitivityTimeControlTimeseriesCollection( )
        {
            throw new NotImplementedException();
        }

        public List<RadarAutomaticSensitivityTimeControlTimeseriesEntity> GetRadarAutomaticSensitivityTimeControlTimeseriesCollectionByCatalog( Guid? catalog )
        {
            throw new NotImplementedException();
        }

        public RadarAutomaticSensitivityTimeControlTimeseriesEntity? GetRadarAutomaticSensitivityTimeControlTimeseriesByCatalogAndName( Guid? catalog, string name )
        {
            throw new NotImplementedException();
        }

        public IList<RadarBlankSector1TimeseriesEntity> GetRadarBlankSector1TimeseriesCollection( )
        {
            throw new NotImplementedException();
        }

        public List<RadarBlankSector1TimeseriesEntity> GetRadarBlankSector1TimeseriesCollectionByCatalog( Guid? catalog )
        {
            throw new NotImplementedException();
        }

        public RadarBlankSector1TimeseriesEntity? GetRadarBlankSector1TimeseriesByCatalogAndName( Guid? catalog, string name )
        {
            throw new NotImplementedException();
        }

        public IList<RadarBlankSector2TimeseriesEntity> GetRadarBlankSector2TimeseriesCollection( )
        {
            throw new NotImplementedException();
        }

        public List<RadarBlankSector2TimeseriesEntity> GetRadarBlankSector2TimeseriesCollectionByCatalog( Guid? catalog )
        {
            throw new NotImplementedException();
        }

        public RadarBlankSector2TimeseriesEntity? GetRadarBlankSector2TimeseriesByCatalogAndName( Guid? catalog, string name )
        {
            throw new NotImplementedException();
        }

        public IList<RadarEnableAutomaticFrequencyControlTimeseriesEntity> GetRadarEnableAutomaticFrequencyControlTimeseriesCollection( )
        {
            throw new NotImplementedException();
        }

        public List<RadarEnableAutomaticFrequencyControlTimeseriesEntity> GetRadarEnableAutomaticFrequencyControlTimeseriesCollectionByCatalog( Guid? catalog )
        {
            throw new NotImplementedException();
        }

        public RadarEnableAutomaticFrequencyControlTimeseriesEntity? GetRadarEnableAutomaticFrequencyControlTimeseriesByCatalogAndName( Guid? catalog, string name )
        {
            throw new NotImplementedException();
        }

        public IList<RadarEnableFastTimeConstantTimeseriesEntity> GetRadarEnableFastTimeConstantTimeseriesCollection( )
        {
            throw new NotImplementedException();
        }

        public List<RadarEnableFastTimeConstantTimeseriesEntity> GetRadarEnableFastTimeConstantTimeseriesCollectionByCatalog( Guid? catalog )
        {
            throw new NotImplementedException();
        }

        public RadarEnableFastTimeConstantTimeseriesEntity? GetRadarEnableFastTimeConstantTimeseriesByCatalogAndName( Guid? catalog, string name )
        {
            throw new NotImplementedException();
        }

        public IList<RadarEnableSensitivityTimeControlTimeseriesEntity> GetRadarEnableSensitivityTimeControlTimeseriesCollection( )
        {
            throw new NotImplementedException();
        }

        public List<RadarEnableSensitivityTimeControlTimeseriesEntity> GetRadarEnableSensitivityTimeControlTimeseriesCollectionByCatalog( Guid? catalog )
        {
            throw new NotImplementedException();
        }

        public RadarEnableSensitivityTimeControlTimeseriesEntity? GetRadarEnableSensitivityTimeControlTimeseriesByCatalogAndName( Guid? catalog, string name )
        {
            throw new NotImplementedException();
        }

        public IList<RadarPowerOnTimeseriesEntity> GetRadarPowerOnTimeseriesCollection( )
        {
            throw new NotImplementedException();
        }

        public List<RadarPowerOnTimeseriesEntity> GetRadarPowerOnTimeseriesCollectionByCatalog( Guid? catalog )
        {
            throw new NotImplementedException();
        }

        public RadarPowerOnTimeseriesEntity? GetRadarPowerOnTimeseriesByCatalogAndName( Guid? catalog, string name )
        {
            throw new NotImplementedException();
        }

        public IList<RadarSaveSettingsTimeseriesEntity> GetRadarSaveSettingsTimeseriesCollection( )
        {
            throw new NotImplementedException();
        }

        public List<RadarSaveSettingsTimeseriesEntity> GetRadarSaveSettingsTimeseriesCollectionByCatalog( Guid? catalog )
        {
            throw new NotImplementedException();
        }

        public RadarSaveSettingsTimeseriesEntity? GetRadarSaveSettingsTimeseriesByCatalogAndName( Guid? catalog, string name )
        {
            throw new NotImplementedException();
        }

        public IList<RadarTrackingTimeseriesEntity> GetRadarTrackingTimeseriesCollection( )
        {
            throw new NotImplementedException();
        }

        public List<RadarTrackingTimeseriesEntity> GetRadarTrackingTimeseriesCollectionByCatalog( Guid? catalog )
        {
            throw new NotImplementedException();
        }

        public RadarTrackingTimeseriesEntity? GetRadarTrackingTimeseriesByCatalogAndName( Guid? catalog, string name )
        {
            throw new NotImplementedException();
        }

        public IList<MediaProxySessionEnabledTimeseriesEntity> GetMediaProxySessionEnabledTimeseriesCollection( )
        {
            throw new NotImplementedException();
        }

        public List<MediaProxySessionEnabledTimeseriesEntity> GetMediaProxySessionEnabledTimeseriesCollectionByCatalog( Guid? catalog )
        {
            throw new NotImplementedException();
        }

        public MediaProxySessionEnabledTimeseriesEntity? GetMediaProxySessionEnabledTimeseriesByCatalogAndName( Guid? catalog, string name )
        {
            throw new NotImplementedException();
        }

        public IList<MediaServiceEnabledTimeseriesEntity> GetMediaServiceEnabledTimeseriesCollection( )
        {
            throw new NotImplementedException();
        }

        public List<MediaServiceEnabledTimeseriesEntity> GetMediaServiceEnabledTimeseriesCollectionByCatalog( Guid? catalog )
        {
            throw new NotImplementedException();
        }

        public MediaServiceEnabledTimeseriesEntity? GetMediaServiceEnabledTimeseriesByCatalogAndName( Guid? catalog, string name )
        {
            throw new NotImplementedException();
        }

        public IList<ByteTimeseriesEntity> GetByteTimeseriesCollection( )
        {
            throw new NotImplementedException();
        }

        public List<ByteTimeseriesEntity> GetByteTimeseriesCollectionByCatalog( Guid? catalog )
        {
            throw new NotImplementedException();
        }

        public ByteTimeseriesEntity? GetByteTimeseriesByCatalogAndName( Guid? catalog, string name )
        {
            throw new NotImplementedException();
        }

        public IList<DateTimeTimeseriesEntity> GetDateTimeTimeseriesCollection( )
        {
            throw new NotImplementedException();
        }

        public List<DateTimeTimeseriesEntity> GetDateTimeTimeseriesCollectionByCatalog( Guid? catalog )
        {
            throw new NotImplementedException();
        }

        public DateTimeTimeseriesEntity? GetDateTimeTimeseriesByCatalogAndName( Guid? catalog, string name )
        {
            throw new NotImplementedException();
        }

        public IList<DoubleTimeseriesEntity> GetDoubleTimeseriesCollection( )
        {
            throw new NotImplementedException();
        }

        public List<DoubleTimeseriesEntity> GetDoubleTimeseriesCollectionByCatalog( Guid? catalog )
        {
            throw new NotImplementedException();
        }

        public DoubleTimeseriesEntity? GetDoubleTimeseriesByCatalogAndName( Guid? catalog, string name )
        {
            throw new NotImplementedException();
        }

        public IList<GNSSAltitudeTimeseriesEntity> GetGNSSAltitudeTimeseriesCollection( )
        {
            throw new NotImplementedException();
        }

        public List<GNSSAltitudeTimeseriesEntity> GetGNSSAltitudeTimeseriesCollectionByCatalog( Guid? catalog )
        {
            throw new NotImplementedException();
        }

        public GNSSAltitudeTimeseriesEntity? GetGNSSAltitudeTimeseriesByCatalogAndName( Guid? catalog, string name )
        {
            throw new NotImplementedException();
        }

        public IList<GNSSLatitudeTimeseriesEntity> GetGNSSLatitudeTimeseriesCollection( )
        {
            throw new NotImplementedException();
        }

        public List<GNSSLatitudeTimeseriesEntity> GetGNSSLatitudeTimeseriesCollectionByCatalog( Guid? catalog )
        {
            throw new NotImplementedException();
        }

        public GNSSLatitudeTimeseriesEntity? GetGNSSLatitudeTimeseriesByCatalogAndName( Guid? catalog, string name )
        {
            throw new NotImplementedException();
        }

        public IList<GNSSLongitudeTimeseriesEntity> GetGNSSLongitudeTimeseriesCollection( )
        {
            throw new NotImplementedException();
        }

        public List<GNSSLongitudeTimeseriesEntity> GetGNSSLongitudeTimeseriesCollectionByCatalog( Guid? catalog )
        {
            throw new NotImplementedException();
        }

        public GNSSLongitudeTimeseriesEntity? GetGNSSLongitudeTimeseriesByCatalogAndName( Guid? catalog, string name )
        {
            throw new NotImplementedException();
        }

        public IList<GyroCourseTimeseriesEntity> GetGyroCourseTimeseriesCollection( )
        {
            throw new NotImplementedException();
        }

        public List<GyroCourseTimeseriesEntity> GetGyroCourseTimeseriesCollectionByCatalog( Guid? catalog )
        {
            throw new NotImplementedException();
        }

        public GyroCourseTimeseriesEntity? GetGyroCourseTimeseriesByCatalogAndName( Guid? catalog, string name )
        {
            throw new NotImplementedException();
        }

        public GyroCourseTimeseriesEntity? GetGyroCourseTimeseriesByGyroDevice( Guid? gyroDevice )
        {
            throw new NotImplementedException();
        }

        public IList<GyroHeadingMagneticNorthTimeseriesEntity> GetGyroHeadingMagneticNorthTimeseriesCollection( )
        {
            throw new NotImplementedException();
        }

        public List<GyroHeadingMagneticNorthTimeseriesEntity> GetGyroHeadingMagneticNorthTimeseriesCollectionByCatalog( Guid? catalog )
        {
            throw new NotImplementedException();
        }

        public GyroHeadingMagneticNorthTimeseriesEntity? GetGyroHeadingMagneticNorthTimeseriesByCatalogAndName( Guid? catalog, string name )
        {
            throw new NotImplementedException();
        }

        public GyroHeadingMagneticNorthTimeseriesEntity? GetGyroHeadingMagneticNorthTimeseriesByGyroDevice( Guid? gyroDevice )
        {
            throw new NotImplementedException();
        }

        public IList<GyroHeadingTrueNorthTimeseriesEntity> GetGyroHeadingTrueNorthTimeseriesCollection( )
        {
            throw new NotImplementedException();
        }

        public List<GyroHeadingTrueNorthTimeseriesEntity> GetGyroHeadingTrueNorthTimeseriesCollectionByCatalog( Guid? catalog )
        {
            throw new NotImplementedException();
        }

        public GyroHeadingTrueNorthTimeseriesEntity? GetGyroHeadingTrueNorthTimeseriesByCatalogAndName( Guid? catalog, string name )
        {
            throw new NotImplementedException();
        }

        public GyroHeadingTrueNorthTimeseriesEntity? GetGyroHeadingTrueNorthTimeseriesByGyroDevice( Guid? gyroDevice )
        {
            throw new NotImplementedException();
        }

        public IList<GyroPitchTimeseriesEntity> GetGyroPitchTimeseriesCollection( )
        {
            throw new NotImplementedException();
        }

        public List<GyroPitchTimeseriesEntity> GetGyroPitchTimeseriesCollectionByCatalog( Guid? catalog )
        {
            throw new NotImplementedException();
        }

        public GyroPitchTimeseriesEntity? GetGyroPitchTimeseriesByCatalogAndName( Guid? catalog, string name )
        {
            throw new NotImplementedException();
        }

        public GyroPitchTimeseriesEntity? GetGyroPitchTimeseriesByGyroDevice( Guid? gyroDevice )
        {
            throw new NotImplementedException();
        }

        public IList<GyroRateOfTurnTimeseriesEntity> GetGyroRateOfTurnTimeseriesCollection( )
        {
            throw new NotImplementedException();
        }

        public List<GyroRateOfTurnTimeseriesEntity> GetGyroRateOfTurnTimeseriesCollectionByCatalog( Guid? catalog )
        {
            throw new NotImplementedException();
        }

        public GyroRateOfTurnTimeseriesEntity? GetGyroRateOfTurnTimeseriesByCatalogAndName( Guid? catalog, string name )
        {
            throw new NotImplementedException();
        }

        public GyroRateOfTurnTimeseriesEntity? GetGyroRateOfTurnTimeseriesByGyroDevice( Guid? gyroDevice )
        {
            throw new NotImplementedException();
        }

        public IList<GyroRollTimeseriesEntity> GetGyroRollTimeseriesCollection( )
        {
            throw new NotImplementedException();
        }

        public List<GyroRollTimeseriesEntity> GetGyroRollTimeseriesCollectionByCatalog( Guid? catalog )
        {
            throw new NotImplementedException();
        }

        public GyroRollTimeseriesEntity? GetGyroRollTimeseriesByCatalogAndName( Guid? catalog, string name )
        {
            throw new NotImplementedException();
        }

        public GyroRollTimeseriesEntity? GetGyroRollTimeseriesByGyroDevice( Guid? gyroDevice )
        {
            throw new NotImplementedException();
        }

        public IList<GyroSpeedTimeseriesEntity> GetGyroSpeedTimeseriesCollection( )
        {
            throw new NotImplementedException();
        }

        public List<GyroSpeedTimeseriesEntity> GetGyroSpeedTimeseriesCollectionByCatalog( Guid? catalog )
        {
            throw new NotImplementedException();
        }

        public GyroSpeedTimeseriesEntity? GetGyroSpeedTimeseriesByCatalogAndName( Guid? catalog, string name )
        {
            throw new NotImplementedException();
        }

        public GyroSpeedTimeseriesEntity? GetGyroSpeedTimeseriesByGyroDevice( Guid? gyroDevice )
        {
            throw new NotImplementedException();
        }

        public IList<RadarLatitudeTimeseriesEntity> GetRadarLatitudeTimeseriesCollection( )
        {
            throw new NotImplementedException();
        }

        public List<RadarLatitudeTimeseriesEntity> GetRadarLatitudeTimeseriesCollectionByCatalog( Guid? catalog )
        {
            throw new NotImplementedException();
        }

        public RadarLatitudeTimeseriesEntity? GetRadarLatitudeTimeseriesByCatalogAndName( Guid? catalog, string name )
        {
            throw new NotImplementedException();
        }

        public IList<RadarLongitudeTimeseriesEntity> GetRadarLongitudeTimeseriesCollection( )
        {
            throw new NotImplementedException();
        }

        public List<RadarLongitudeTimeseriesEntity> GetRadarLongitudeTimeseriesCollectionByCatalog( Guid? catalog )
        {
            throw new NotImplementedException();
        }

        public RadarLongitudeTimeseriesEntity? GetRadarLongitudeTimeseriesByCatalogAndName( Guid? catalog, string name )
        {
            throw new NotImplementedException();
        }

        public IList<RadomeDewPointTimeseriesEntity> GetRadomeDewPointTimeseriesCollection( )
        {
            throw new NotImplementedException();
        }

        public List<RadomeDewPointTimeseriesEntity> GetRadomeDewPointTimeseriesCollectionByCatalog( Guid? catalog )
        {
            throw new NotImplementedException();
        }

        public RadomeDewPointTimeseriesEntity? GetRadomeDewPointTimeseriesByCatalogAndName( Guid? catalog, string name )
        {
            throw new NotImplementedException();
        }

        public IList<RadomePressureTimeseriesEntity> GetRadomePressureTimeseriesCollection( )
        {
            throw new NotImplementedException();
        }

        public List<RadomePressureTimeseriesEntity> GetRadomePressureTimeseriesCollectionByCatalog( Guid? catalog )
        {
            throw new NotImplementedException();
        }

        public RadomePressureTimeseriesEntity? GetRadomePressureTimeseriesByCatalogAndName( Guid? catalog, string name )
        {
            throw new NotImplementedException();
        }

        public IList<RadomeTemperatureTimeseriesEntity> GetRadomeTemperatureTimeseriesCollection( )
        {
            throw new NotImplementedException();
        }

        public List<RadomeTemperatureTimeseriesEntity> GetRadomeTemperatureTimeseriesCollectionByCatalog( Guid? catalog )
        {
            throw new NotImplementedException();
        }

        public RadomeTemperatureTimeseriesEntity? GetRadomeTemperatureTimeseriesByCatalogAndName( Guid? catalog, string name )
        {
            throw new NotImplementedException();
        }

        public IList<VesselDraughtTimeseriesEntity> GetVesselDraughtTimeseriesCollection( )
        {
            throw new NotImplementedException();
        }

        public List<VesselDraughtTimeseriesEntity> GetVesselDraughtTimeseriesCollectionByCatalog( Guid? catalog )
        {
            throw new NotImplementedException();
        }

        public VesselDraughtTimeseriesEntity? GetVesselDraughtTimeseriesByCatalogAndName( Guid? catalog, string name )
        {
            throw new NotImplementedException();
        }

        public IList<ViewLatitudeTimeseriesEntity> GetViewLatitudeTimeseriesCollection( )
        {
            throw new NotImplementedException();
        }

        public List<ViewLatitudeTimeseriesEntity> GetViewLatitudeTimeseriesCollectionByCatalog( Guid? catalog )
        {
            throw new NotImplementedException();
        }

        public ViewLatitudeTimeseriesEntity? GetViewLatitudeTimeseriesByCatalogAndName( Guid? catalog, string name )
        {
            throw new NotImplementedException();
        }

        public IList<ViewLongitudeTimeseriesEntity> GetViewLongitudeTimeseriesCollection( )
        {
            throw new NotImplementedException();
        }

        public List<ViewLongitudeTimeseriesEntity> GetViewLongitudeTimeseriesCollectionByCatalog( Guid? catalog )
        {
            throw new NotImplementedException();
        }

        public ViewLongitudeTimeseriesEntity? GetViewLongitudeTimeseriesByCatalogAndName( Guid? catalog, string name )
        {
            throw new NotImplementedException();
        }

        public IList<ViewZoomLevelTimeseriesEntity> GetViewZoomLevelTimeseriesCollection( )
        {
            throw new NotImplementedException();
        }

        public List<ViewZoomLevelTimeseriesEntity> GetViewZoomLevelTimeseriesCollectionByCatalog( Guid? catalog )
        {
            throw new NotImplementedException();
        }

        public ViewZoomLevelTimeseriesEntity? GetViewZoomLevelTimeseriesByCatalogAndName( Guid? catalog, string name )
        {
            throw new NotImplementedException();
        }

        public IList<WeatherStationAbsoluteHumidityTimeseriesEntity> GetWeatherStationAbsoluteHumidityTimeseriesCollection( )
        {
            throw new NotImplementedException();
        }

        public List<WeatherStationAbsoluteHumidityTimeseriesEntity> GetWeatherStationAbsoluteHumidityTimeseriesCollectionByCatalog( Guid? catalog )
        {
            throw new NotImplementedException();
        }

        public WeatherStationAbsoluteHumidityTimeseriesEntity? GetWeatherStationAbsoluteHumidityTimeseriesByCatalogAndName( Guid? catalog, string name )
        {
            throw new NotImplementedException();
        }

        public WeatherStationAbsoluteHumidityTimeseriesEntity? GetWeatherStationAbsoluteHumidityTimeseriesByWeatherStation( Guid? weatherStation )
        {
            throw new NotImplementedException();
        }

        public IList<WeatherStationAirTemperatureTimeseriesEntity> GetWeatherStationAirTemperatureTimeseriesCollection( )
        {
            throw new NotImplementedException();
        }

        public List<WeatherStationAirTemperatureTimeseriesEntity> GetWeatherStationAirTemperatureTimeseriesCollectionByCatalog( Guid? catalog )
        {
            throw new NotImplementedException();
        }

        public WeatherStationAirTemperatureTimeseriesEntity? GetWeatherStationAirTemperatureTimeseriesByCatalogAndName( Guid? catalog, string name )
        {
            throw new NotImplementedException();
        }

        public WeatherStationAirTemperatureTimeseriesEntity? GetWeatherStationAirTemperatureTimeseriesByWeatherStation( Guid? weatherStation )
        {
            throw new NotImplementedException();
        }

        public IList<WeatherStationBarometricPressureTimeseriesEntity> GetWeatherStationBarometricPressureTimeseriesCollection( )
        {
            throw new NotImplementedException();
        }

        public List<WeatherStationBarometricPressureTimeseriesEntity> GetWeatherStationBarometricPressureTimeseriesCollectionByCatalog( Guid? catalog )
        {
            throw new NotImplementedException();
        }

        public WeatherStationBarometricPressureTimeseriesEntity? GetWeatherStationBarometricPressureTimeseriesByCatalogAndName( Guid? catalog, string name )
        {
            throw new NotImplementedException();
        }

        public WeatherStationBarometricPressureTimeseriesEntity? GetWeatherStationBarometricPressureTimeseriesByWeatherStation( Guid? weatherStation )
        {
            throw new NotImplementedException();
        }

        public IList<WeatherStationDewPointTimeseriesEntity> GetWeatherStationDewPointTimeseriesCollection( )
        {
            throw new NotImplementedException();
        }

        public List<WeatherStationDewPointTimeseriesEntity> GetWeatherStationDewPointTimeseriesCollectionByCatalog( Guid? catalog )
        {
            throw new NotImplementedException();
        }

        public WeatherStationDewPointTimeseriesEntity? GetWeatherStationDewPointTimeseriesByCatalogAndName( Guid? catalog, string name )
        {
            throw new NotImplementedException();
        }

        public WeatherStationDewPointTimeseriesEntity? GetWeatherStationDewPointTimeseriesByWeatherStation( Guid? weatherStation )
        {
            throw new NotImplementedException();
        }

        public IList<WeatherStationRelativeHumidityTimeseriesEntity> GetWeatherStationRelativeHumidityTimeseriesCollection( )
        {
            throw new NotImplementedException();
        }

        public List<WeatherStationRelativeHumidityTimeseriesEntity> GetWeatherStationRelativeHumidityTimeseriesCollectionByCatalog( Guid? catalog )
        {
            throw new NotImplementedException();
        }

        public WeatherStationRelativeHumidityTimeseriesEntity? GetWeatherStationRelativeHumidityTimeseriesByCatalogAndName( Guid? catalog, string name )
        {
            throw new NotImplementedException();
        }

        public WeatherStationRelativeHumidityTimeseriesEntity? GetWeatherStationRelativeHumidityTimeseriesByWeatherStation( Guid? weatherStation )
        {
            throw new NotImplementedException();
        }

        public IList<WeatherStationWaterTemperatureTimeseriesEntity> GetWeatherStationWaterTemperatureTimeseriesCollection( )
        {
            throw new NotImplementedException();
        }

        public List<WeatherStationWaterTemperatureTimeseriesEntity> GetWeatherStationWaterTemperatureTimeseriesCollectionByCatalog( Guid? catalog )
        {
            throw new NotImplementedException();
        }

        public WeatherStationWaterTemperatureTimeseriesEntity? GetWeatherStationWaterTemperatureTimeseriesByCatalogAndName( Guid? catalog, string name )
        {
            throw new NotImplementedException();
        }

        public WeatherStationWaterTemperatureTimeseriesEntity? GetWeatherStationWaterTemperatureTimeseriesByWeatherStation( Guid? weatherStation )
        {
            throw new NotImplementedException();
        }

        public IList<WeatherStationWindDirectionTimeseriesEntity> GetWeatherStationWindDirectionTimeseriesCollection( )
        {
            throw new NotImplementedException();
        }

        public List<WeatherStationWindDirectionTimeseriesEntity> GetWeatherStationWindDirectionTimeseriesCollectionByCatalog( Guid? catalog )
        {
            throw new NotImplementedException();
        }

        public WeatherStationWindDirectionTimeseriesEntity? GetWeatherStationWindDirectionTimeseriesByCatalogAndName( Guid? catalog, string name )
        {
            throw new NotImplementedException();
        }

        public WeatherStationWindDirectionTimeseriesEntity? GetWeatherStationWindDirectionTimeseriesByWeatherStation( Guid? weatherStation )
        {
            throw new NotImplementedException();
        }

        public IList<WeatherStationWindSpeedTimeseriesEntity> GetWeatherStationWindSpeedTimeseriesCollection( )
        {
            throw new NotImplementedException();
        }

        public List<WeatherStationWindSpeedTimeseriesEntity> GetWeatherStationWindSpeedTimeseriesCollectionByCatalog( Guid? catalog )
        {
            throw new NotImplementedException();
        }

        public WeatherStationWindSpeedTimeseriesEntity? GetWeatherStationWindSpeedTimeseriesByCatalogAndName( Guid? catalog, string name )
        {
            throw new NotImplementedException();
        }

        public WeatherStationWindSpeedTimeseriesEntity? GetWeatherStationWindSpeedTimeseriesByWeatherStation( Guid? weatherStation )
        {
            throw new NotImplementedException();
        }

        public IList<GeoPosition2DTimeseriesEntity> GetGeoPosition2DTimeseriesCollection( )
        {
            throw new NotImplementedException();
        }

        public List<GeoPosition2DTimeseriesEntity> GetGeoPosition2DTimeseriesCollectionByCatalog( Guid? catalog )
        {
            throw new NotImplementedException();
        }

        public GeoPosition2DTimeseriesEntity? GetGeoPosition2DTimeseriesByCatalogAndName( Guid? catalog, string name )
        {
            throw new NotImplementedException();
        }

        public IList<AisAidToNavigationPositionTimeseriesEntity> GetAisAidToNavigationPositionTimeseriesCollection( )
        {
            throw new NotImplementedException();
        }

        public List<AisAidToNavigationPositionTimeseriesEntity> GetAisAidToNavigationPositionTimeseriesCollectionByCatalog( Guid? catalog )
        {
            throw new NotImplementedException();
        }

        public AisAidToNavigationPositionTimeseriesEntity? GetAisAidToNavigationPositionTimeseriesByCatalogAndName( Guid? catalog, string name )
        {
            throw new NotImplementedException();
        }

        public IList<GeoPosition3DTimeseriesEntity> GetGeoPosition3DTimeseriesCollection( )
        {
            throw new NotImplementedException();
        }

        public List<GeoPosition3DTimeseriesEntity> GetGeoPosition3DTimeseriesCollectionByCatalog( Guid? catalog )
        {
            throw new NotImplementedException();
        }

        public GeoPosition3DTimeseriesEntity? GetGeoPosition3DTimeseriesByCatalogAndName( Guid? catalog, string name )
        {
            throw new NotImplementedException();
        }

        public IList<GuidTimeseriesEntity> GetGuidTimeseriesCollection( )
        {
            throw new NotImplementedException();
        }

        public List<GuidTimeseriesEntity> GetGuidTimeseriesCollectionByCatalog( Guid? catalog )
        {
            throw new NotImplementedException();
        }

        public GuidTimeseriesEntity? GetGuidTimeseriesByCatalogAndName( Guid? catalog, string name )
        {
            throw new NotImplementedException();
        }

        public IList<Int16TimeseriesEntity> GetInt16TimeseriesCollection( )
        {
            throw new NotImplementedException();
        }

        public List<Int16TimeseriesEntity> GetInt16TimeseriesCollectionByCatalog( Guid? catalog )
        {
            throw new NotImplementedException();
        }

        public Int16TimeseriesEntity? GetInt16TimeseriesByCatalogAndName( Guid? catalog, string name )
        {
            throw new NotImplementedException();
        }

        public IList<Int32TimeseriesEntity> GetInt32TimeseriesCollection( )
        {
            throw new NotImplementedException();
        }

        public List<Int32TimeseriesEntity> GetInt32TimeseriesCollectionByCatalog( Guid? catalog )
        {
            throw new NotImplementedException();
        }

        public Int32TimeseriesEntity? GetInt32TimeseriesByCatalogAndName( Guid? catalog, string name )
        {
            throw new NotImplementedException();
        }

        public IList<RadarAzimuthOffsetTimeseriesEntity> GetRadarAzimuthOffsetTimeseriesCollection( )
        {
            throw new NotImplementedException();
        }

        public List<RadarAzimuthOffsetTimeseriesEntity> GetRadarAzimuthOffsetTimeseriesCollectionByCatalog( Guid? catalog )
        {
            throw new NotImplementedException();
        }

        public RadarAzimuthOffsetTimeseriesEntity? GetRadarAzimuthOffsetTimeseriesByCatalogAndName( Guid? catalog, string name )
        {
            throw new NotImplementedException();
        }

        public IList<RadarFastTimeConstantLevelTimeseriesEntity> GetRadarFastTimeConstantLevelTimeseriesCollection( )
        {
            throw new NotImplementedException();
        }

        public List<RadarFastTimeConstantLevelTimeseriesEntity> GetRadarFastTimeConstantLevelTimeseriesCollectionByCatalog( Guid? catalog )
        {
            throw new NotImplementedException();
        }

        public RadarFastTimeConstantLevelTimeseriesEntity? GetRadarFastTimeConstantLevelTimeseriesByCatalogAndName( Guid? catalog, string name )
        {
            throw new NotImplementedException();
        }

        public IList<RadarFastTimeConstantModeTimeseriesEntity> GetRadarFastTimeConstantModeTimeseriesCollection( )
        {
            throw new NotImplementedException();
        }

        public List<RadarFastTimeConstantModeTimeseriesEntity> GetRadarFastTimeConstantModeTimeseriesCollectionByCatalog( Guid? catalog )
        {
            throw new NotImplementedException();
        }

        public RadarFastTimeConstantModeTimeseriesEntity? GetRadarFastTimeConstantModeTimeseriesByCatalogAndName( Guid? catalog, string name )
        {
            throw new NotImplementedException();
        }

        public IList<RadarPulseTimeseriesEntity> GetRadarPulseTimeseriesCollection( )
        {
            throw new NotImplementedException();
        }

        public List<RadarPulseTimeseriesEntity> GetRadarPulseTimeseriesCollectionByCatalog( Guid? catalog )
        {
            throw new NotImplementedException();
        }

        public RadarPulseTimeseriesEntity? GetRadarPulseTimeseriesByCatalogAndName( Guid? catalog, string name )
        {
            throw new NotImplementedException();
        }

        public IList<RadarSector1EndTimeseriesEntity> GetRadarSector1EndTimeseriesCollection( )
        {
            throw new NotImplementedException();
        }

        public List<RadarSector1EndTimeseriesEntity> GetRadarSector1EndTimeseriesCollectionByCatalog( Guid? catalog )
        {
            throw new NotImplementedException();
        }

        public RadarSector1EndTimeseriesEntity? GetRadarSector1EndTimeseriesByCatalogAndName( Guid? catalog, string name )
        {
            throw new NotImplementedException();
        }

        public IList<RadarSector1StartTimeseriesEntity> GetRadarSector1StartTimeseriesCollection( )
        {
            throw new NotImplementedException();
        }

        public List<RadarSector1StartTimeseriesEntity> GetRadarSector1StartTimeseriesCollectionByCatalog( Guid? catalog )
        {
            throw new NotImplementedException();
        }

        public RadarSector1StartTimeseriesEntity? GetRadarSector1StartTimeseriesByCatalogAndName( Guid? catalog, string name )
        {
            throw new NotImplementedException();
        }

        public IList<RadarSector2EndTimeseriesEntity> GetRadarSector2EndTimeseriesCollection( )
        {
            throw new NotImplementedException();
        }

        public List<RadarSector2EndTimeseriesEntity> GetRadarSector2EndTimeseriesCollectionByCatalog( Guid? catalog )
        {
            throw new NotImplementedException();
        }

        public RadarSector2EndTimeseriesEntity? GetRadarSector2EndTimeseriesByCatalogAndName( Guid? catalog, string name )
        {
            throw new NotImplementedException();
        }

        public IList<RadarSector2StartTimeseriesEntity> GetRadarSector2StartTimeseriesCollection( )
        {
            throw new NotImplementedException();
        }

        public List<RadarSector2StartTimeseriesEntity> GetRadarSector2StartTimeseriesCollectionByCatalog( Guid? catalog )
        {
            throw new NotImplementedException();
        }

        public RadarSector2StartTimeseriesEntity? GetRadarSector2StartTimeseriesByCatalogAndName( Guid? catalog, string name )
        {
            throw new NotImplementedException();
        }

        public IList<RadarSensitivityTimeControlLevelTimeseriesEntity> GetRadarSensitivityTimeControlLevelTimeseriesCollection( )
        {
            throw new NotImplementedException();
        }

        public List<RadarSensitivityTimeControlLevelTimeseriesEntity> GetRadarSensitivityTimeControlLevelTimeseriesCollectionByCatalog( Guid? catalog )
        {
            throw new NotImplementedException();
        }

        public RadarSensitivityTimeControlLevelTimeseriesEntity? GetRadarSensitivityTimeControlLevelTimeseriesByCatalogAndName( Guid? catalog, string name )
        {
            throw new NotImplementedException();
        }

        public IList<RadarTuningTimeseriesEntity> GetRadarTuningTimeseriesCollection( )
        {
            throw new NotImplementedException();
        }

        public List<RadarTuningTimeseriesEntity> GetRadarTuningTimeseriesCollectionByCatalog( Guid? catalog )
        {
            throw new NotImplementedException();
        }

        public RadarTuningTimeseriesEntity? GetRadarTuningTimeseriesByCatalogAndName( Guid? catalog, string name )
        {
            throw new NotImplementedException();
        }

        public IList<VesselPersonsOnBoardTimeseriesEntity> GetVesselPersonsOnBoardTimeseriesCollection( )
        {
            throw new NotImplementedException();
        }

        public List<VesselPersonsOnBoardTimeseriesEntity> GetVesselPersonsOnBoardTimeseriesCollectionByCatalog( Guid? catalog )
        {
            throw new NotImplementedException();
        }

        public VesselPersonsOnBoardTimeseriesEntity? GetVesselPersonsOnBoardTimeseriesByCatalogAndName( Guid? catalog, string name )
        {
            throw new NotImplementedException();
        }

        public IList<Int64TimeseriesEntity> GetInt64TimeseriesCollection( )
        {
            throw new NotImplementedException();
        }

        public List<Int64TimeseriesEntity> GetInt64TimeseriesCollectionByCatalog( Guid? catalog )
        {
            throw new NotImplementedException();
        }

        public Int64TimeseriesEntity? GetInt64TimeseriesByCatalogAndName( Guid? catalog, string name )
        {
            throw new NotImplementedException();
        }

        public IList<Position2DTimeseriesEntity> GetPosition2DTimeseriesCollection( )
        {
            throw new NotImplementedException();
        }

        public List<Position2DTimeseriesEntity> GetPosition2DTimeseriesCollectionByCatalog( Guid? catalog )
        {
            throw new NotImplementedException();
        }

        public Position2DTimeseriesEntity? GetPosition2DTimeseriesByCatalogAndName( Guid? catalog, string name )
        {
            throw new NotImplementedException();
        }

        public IList<Position3DTimeseriesEntity> GetPosition3DTimeseriesCollection( )
        {
            throw new NotImplementedException();
        }

        public List<Position3DTimeseriesEntity> GetPosition3DTimeseriesCollectionByCatalog( Guid? catalog )
        {
            throw new NotImplementedException();
        }

        public Position3DTimeseriesEntity? GetPosition3DTimeseriesByCatalogAndName( Guid? catalog, string name )
        {
            throw new NotImplementedException();
        }

        public IList<ReferenceTimeseriesEntity> GetReferenceTimeseriesCollection( )
        {
            throw new NotImplementedException();
        }

        public List<ReferenceTimeseriesEntity> GetReferenceTimeseriesCollectionByCatalog( Guid? catalog )
        {
            throw new NotImplementedException();
        }

        public ReferenceTimeseriesEntity? GetReferenceTimeseriesByCatalogAndName( Guid? catalog, string name )
        {
            throw new NotImplementedException();
        }

        public IList<SByteTimeseriesEntity> GetSByteTimeseriesCollection( )
        {
            throw new NotImplementedException();
        }

        public List<SByteTimeseriesEntity> GetSByteTimeseriesCollectionByCatalog( Guid? catalog )
        {
            throw new NotImplementedException();
        }

        public SByteTimeseriesEntity? GetSByteTimeseriesByCatalogAndName( Guid? catalog, string name )
        {
            throw new NotImplementedException();
        }

        public IList<SingleTimeseriesEntity> GetSingleTimeseriesCollection( )
        {
            throw new NotImplementedException();
        }

        public List<SingleTimeseriesEntity> GetSingleTimeseriesCollectionByCatalog( Guid? catalog )
        {
            throw new NotImplementedException();
        }

        public SingleTimeseriesEntity? GetSingleTimeseriesByCatalogAndName( Guid? catalog, string name )
        {
            throw new NotImplementedException();
        }

        public IList<StringTimeseriesEntity> GetStringTimeseriesCollection( )
        {
            throw new NotImplementedException();
        }

        public List<StringTimeseriesEntity> GetStringTimeseriesCollectionByCatalog( Guid? catalog )
        {
            throw new NotImplementedException();
        }

        public StringTimeseriesEntity? GetStringTimeseriesByCatalogAndName( Guid? catalog, string name )
        {
            throw new NotImplementedException();
        }

        public IList<TimeSpanTimeseriesEntity> GetTimeSpanTimeseriesCollection( )
        {
            throw new NotImplementedException();
        }

        public List<TimeSpanTimeseriesEntity> GetTimeSpanTimeseriesCollectionByCatalog( Guid? catalog )
        {
            throw new NotImplementedException();
        }

        public TimeSpanTimeseriesEntity? GetTimeSpanTimeseriesByCatalogAndName( Guid? catalog, string name )
        {
            throw new NotImplementedException();
        }

        public IList<UInt16TimeseriesEntity> GetUInt16TimeseriesCollection( )
        {
            throw new NotImplementedException();
        }

        public List<UInt16TimeseriesEntity> GetUInt16TimeseriesCollectionByCatalog( Guid? catalog )
        {
            throw new NotImplementedException();
        }

        public UInt16TimeseriesEntity? GetUInt16TimeseriesByCatalogAndName( Guid? catalog, string name )
        {
            throw new NotImplementedException();
        }

        public IList<UInt32TimeseriesEntity> GetUInt32TimeseriesCollection( )
        {
            throw new NotImplementedException();
        }

        public List<UInt32TimeseriesEntity> GetUInt32TimeseriesCollectionByCatalog( Guid? catalog )
        {
            throw new NotImplementedException();
        }

        public UInt32TimeseriesEntity? GetUInt32TimeseriesByCatalogAndName( Guid? catalog, string name )
        {
            throw new NotImplementedException();
        }

        public IList<RadomeStatusTimeseriesEntity> GetRadomeStatusTimeseriesCollection( )
        {
            throw new NotImplementedException();
        }

        public List<RadomeStatusTimeseriesEntity> GetRadomeStatusTimeseriesCollectionByCatalog( Guid? catalog )
        {
            throw new NotImplementedException();
        }

        public RadomeStatusTimeseriesEntity? GetRadomeStatusTimeseriesByCatalogAndName( Guid? catalog, string name )
        {
            throw new NotImplementedException();
        }

        public IList<UInt64TimeseriesEntity> GetUInt64TimeseriesCollection( )
        {
            throw new NotImplementedException();
        }

        public List<UInt64TimeseriesEntity> GetUInt64TimeseriesCollectionByCatalog( Guid? catalog )
        {
            throw new NotImplementedException();
        }

        public UInt64TimeseriesEntity? GetUInt64TimeseriesByCatalogAndName( Guid? catalog, string name )
        {
            throw new NotImplementedException();
        }

        public IList<TimeseriesCatalogEntity> GetTimeseriesCatalogCollection( )
        {
            throw new NotImplementedException();
        }

        public List<TimeseriesCatalogEntity> GetTimeseriesCatalogCollectionByCatalog( Guid? catalog )
        {
            throw new NotImplementedException();
        }

        public TimeseriesCatalogEntity? GetTimeseriesCatalogByCatalogAndName( Guid? catalog, string name )
        {
            throw new NotImplementedException();
        }

        public IList<TimeseriesInfoEntity> GetTimeseriesInfoCollection( )
        {
            throw new NotImplementedException();
        }

        public IList<TimeSpanTimeseriesValueEntity> GetTimeSpanTimeseriesValueCollection( )
        {
            throw new NotImplementedException();
        }

        public List<TimeSpanTimeseriesValueEntity> GetTimeSpanTimeseriesValueCollectionByTimeseries( Guid timeseries )
        {
            throw new NotImplementedException();
        }

        public TimeSpanTimeseriesValueEntity? GetTimeSpanTimeseriesValueByTimeseriesAndTimestamp( Guid timeseries, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public TimeSpanTimeseriesValueEntity? GetTimeSpanTimeseriesValueByTimeseriesAtTimestamp( Guid timeseries, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<TimeSpanTimeseriesValueEntity> GetTimeSpanTimeseriesValueByTimeseriesFromTimestamp( Guid timeseries, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<TimeSpanTimeseriesValueEntity> GetTimeSpanTimeseriesValueByTimeseriesUntilTimestamp( Guid timeseries, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<TimeSpanTimeseriesValueEntity> GetTimeSpanTimeseriesValueByTimeseriesOverTimestamp( Guid timeseries, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

        public List<TimeSpanTimeseriesValueEntity> GetTimeSpanTimeseriesValueCollectionByTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<TimeSpanTimeseriesValueEntity> GetTimeSpanTimeseriesValueCollectionAtTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<TimeSpanTimeseriesValueEntity> GetTimeSpanTimeseriesValueCollectionFromTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<TimeSpanTimeseriesValueEntity> GetTimeSpanTimeseriesValueCollectionUntilTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<TimeSpanTimeseriesValueEntity> GetTimeSpanTimeseriesValueCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

        public IList<TrackableItemTrackLinkEntity> GetTrackableItemTrackLinkCollection( )
        {
            throw new NotImplementedException();
        }

        public List<TrackableItemTrackLinkEntity> GetTrackableItemTrackLinkCollectionByItem( Guid item )
        {
            throw new NotImplementedException();
        }

        public TrackableItemTrackLinkEntity? GetTrackableItemTrackLinkByItemAndStart( Guid item, DateTime start )
        {
            throw new NotImplementedException();
        }

        public TrackableItemTrackLinkEntity? GetTrackableItemTrackLinkByItemAtStart( Guid item, DateTime start )
        {
            throw new NotImplementedException();
        }

        public List<TrackableItemTrackLinkEntity> GetTrackableItemTrackLinkByItemFromStart( Guid item, DateTime start )
        {
            throw new NotImplementedException();
        }

        public List<TrackableItemTrackLinkEntity> GetTrackableItemTrackLinkByItemUntilStart( Guid item, DateTime start )
        {
            throw new NotImplementedException();
        }

        public List<TrackableItemTrackLinkEntity> GetTrackableItemTrackLinkByItemOverStart( Guid item, DateTime fromStart, DateTime untilStart )
        {
            throw new NotImplementedException();
        }

        public List<TrackableItemTrackLinkEntity> GetTrackableItemTrackLinkCollectionByItemAndEnd( Guid item, DateTime? end )
        {
            throw new NotImplementedException();
        }

        public List<TrackableItemTrackLinkEntity> GetTrackableItemTrackLinkCollectionByItemAtEnd( Guid item, DateTime? end )
        {
            throw new NotImplementedException();
        }

        public List<TrackableItemTrackLinkEntity> GetTrackableItemTrackLinkCollectionByItemFromEnd( Guid item, DateTime? end )
        {
            throw new NotImplementedException();
        }

        public List<TrackableItemTrackLinkEntity> GetTrackableItemTrackLinkCollectionByItemUntilEnd( Guid item, DateTime? end )
        {
            throw new NotImplementedException();
        }

        public List<TrackableItemTrackLinkEntity> GetTrackableItemTrackLinkCollectionByItemOverEnd( Guid item, DateTime fromEnd, DateTime untilEnd )
        {
            throw new NotImplementedException();
        }

        public List<TrackableItemTrackLinkEntity> GetTrackableItemTrackLinkCollectionByTrack( Guid track )
        {
            throw new NotImplementedException();
        }

        public TrackableItemTrackLinkEntity? GetTrackableItemTrackLinkByTrackAndStart( Guid track, DateTime start )
        {
            throw new NotImplementedException();
        }

        public TrackableItemTrackLinkEntity? GetTrackableItemTrackLinkByTrackAtStart( Guid track, DateTime start )
        {
            throw new NotImplementedException();
        }

        public List<TrackableItemTrackLinkEntity> GetTrackableItemTrackLinkByTrackFromStart( Guid track, DateTime start )
        {
            throw new NotImplementedException();
        }

        public List<TrackableItemTrackLinkEntity> GetTrackableItemTrackLinkByTrackUntilStart( Guid track, DateTime start )
        {
            throw new NotImplementedException();
        }

        public List<TrackableItemTrackLinkEntity> GetTrackableItemTrackLinkByTrackOverStart( Guid track, DateTime fromStart, DateTime untilStart )
        {
            throw new NotImplementedException();
        }

        public List<TrackableItemTrackLinkEntity> GetTrackableItemTrackLinkCollectionByTrackAndEnd( Guid track, DateTime? end )
        {
            throw new NotImplementedException();
        }

        public List<TrackableItemTrackLinkEntity> GetTrackableItemTrackLinkCollectionByTrackAtEnd( Guid track, DateTime? end )
        {
            throw new NotImplementedException();
        }

        public List<TrackableItemTrackLinkEntity> GetTrackableItemTrackLinkCollectionByTrackFromEnd( Guid track, DateTime? end )
        {
            throw new NotImplementedException();
        }

        public List<TrackableItemTrackLinkEntity> GetTrackableItemTrackLinkCollectionByTrackUntilEnd( Guid track, DateTime? end )
        {
            throw new NotImplementedException();
        }

        public List<TrackableItemTrackLinkEntity> GetTrackableItemTrackLinkCollectionByTrackOverEnd( Guid track, DateTime fromEnd, DateTime untilEnd )
        {
            throw new NotImplementedException();
        }

        public List<TrackableItemTrackLinkEntity> GetTrackableItemTrackLinkCollectionByStart( DateTime start )
        {
            throw new NotImplementedException();
        }

        public List<TrackableItemTrackLinkEntity> GetTrackableItemTrackLinkCollectionAtStart( DateTime start )
        {
            throw new NotImplementedException();
        }

        public List<TrackableItemTrackLinkEntity> GetTrackableItemTrackLinkCollectionFromStart( DateTime start )
        {
            throw new NotImplementedException();
        }

        public List<TrackableItemTrackLinkEntity> GetTrackableItemTrackLinkCollectionUntilStart( DateTime start )
        {
            throw new NotImplementedException();
        }

        public List<TrackableItemTrackLinkEntity> GetTrackableItemTrackLinkCollectionOverStart( DateTime fromStart, DateTime untilStart )
        {
            throw new NotImplementedException();
        }

        public IList<TrackBaseEntity> GetTrackBaseCollection( )
        {
            throw new NotImplementedException();
        }

        public List<TrackBaseEntity> GetTrackBaseCollectionByTracker( Guid tracker )
        {
            throw new NotImplementedException();
        }

        public List<TrackBaseEntity> GetTrackBaseCollectionByTrackerAndTrackNumber( Guid tracker, long trackNumber )
        {
            throw new NotImplementedException();
        }

        public List<TrackBaseEntity> GetTrackBaseCollectionByTrackerFromTrackNumber( Guid tracker, long trackNumber )
        {
            throw new NotImplementedException();
        }

        public List<TrackBaseEntity> GetTrackBaseCollectionByTrackerUntilTrackNumber( Guid tracker, long trackNumber )
        {
            throw new NotImplementedException();
        }

        public List<TrackBaseEntity> GetTrackBaseCollectionByTrackerOverTrackNumber( Guid tracker, long fromTrackNumber, long untilTrackNumber )
        {
            throw new NotImplementedException();
        }

        public TrackBaseEntity? GetTrackBaseByTrackerTrackNumberAndTimestamp( Guid tracker, long trackNumber, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public TrackBaseEntity? GetTrackBaseByTrackerTrackNumberAtTimestamp( Guid tracker, long trackNumber, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<TrackBaseEntity> GetTrackBaseByTrackerTrackNumberFromTimestamp( Guid tracker, long trackNumber, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<TrackBaseEntity> GetTrackBaseByTrackerTrackNumberUntilTimestamp( Guid tracker, long trackNumber, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<TrackBaseEntity> GetTrackBaseByTrackerTrackNumberOverTimestamp( Guid tracker, long trackNumber, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

        public List<TrackBaseEntity> GetTrackBaseCollectionByTrackerAndTimestamp( Guid tracker, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<TrackBaseEntity> GetTrackBaseCollectionByTrackerAtTimestamp( Guid tracker, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<TrackBaseEntity> GetTrackBaseCollectionByTrackerFromTimestamp( Guid tracker, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<TrackBaseEntity> GetTrackBaseCollectionByTrackerUntilTimestamp( Guid tracker, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<TrackBaseEntity> GetTrackBaseCollectionByTrackerOverTimestamp( Guid tracker, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

        public List<TrackBaseEntity> GetTrackBaseCollectionByTrackNumber( long trackNumber )
        {
            throw new NotImplementedException();
        }

        public List<TrackBaseEntity> GetTrackBaseCollectionFromTrackNumber( long trackNumber )
        {
            throw new NotImplementedException();
        }

        public List<TrackBaseEntity> GetTrackBaseCollectionUntilTrackNumber( long trackNumber )
        {
            throw new NotImplementedException();
        }

        public List<TrackBaseEntity> GetTrackBaseCollectionOverTrackNumber( long fromTrackNumber, long untilTrackNumber )
        {
            throw new NotImplementedException();
        }

        public List<TrackBaseEntity> GetTrackBaseCollectionByTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<TrackBaseEntity> GetTrackBaseCollectionAtTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<TrackBaseEntity> GetTrackBaseCollectionFromTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<TrackBaseEntity> GetTrackBaseCollectionUntilTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<TrackBaseEntity> GetTrackBaseCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

        public IList<TrackEntity> GetTrackCollection( )
        {
            throw new NotImplementedException();
        }

        public List<TrackEntity> GetTrackCollectionByTracker( Guid tracker )
        {
            throw new NotImplementedException();
        }

        public List<TrackEntity> GetTrackCollectionByTrackerAndTrackNumber( Guid tracker, long trackNumber )
        {
            throw new NotImplementedException();
        }

        public List<TrackEntity> GetTrackCollectionByTrackerFromTrackNumber( Guid tracker, long trackNumber )
        {
            throw new NotImplementedException();
        }

        public List<TrackEntity> GetTrackCollectionByTrackerUntilTrackNumber( Guid tracker, long trackNumber )
        {
            throw new NotImplementedException();
        }

        public List<TrackEntity> GetTrackCollectionByTrackerOverTrackNumber( Guid tracker, long fromTrackNumber, long untilTrackNumber )
        {
            throw new NotImplementedException();
        }

        public TrackEntity? GetTrackByTrackerTrackNumberAndTimestamp( Guid tracker, long trackNumber, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public TrackEntity? GetTrackByTrackerTrackNumberAtTimestamp( Guid tracker, long trackNumber, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<TrackEntity> GetTrackByTrackerTrackNumberFromTimestamp( Guid tracker, long trackNumber, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<TrackEntity> GetTrackByTrackerTrackNumberUntilTimestamp( Guid tracker, long trackNumber, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<TrackEntity> GetTrackByTrackerTrackNumberOverTimestamp( Guid tracker, long trackNumber, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

        public List<TrackEntity> GetTrackCollectionByTrackerAndTimestamp( Guid tracker, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<TrackEntity> GetTrackCollectionByTrackerAtTimestamp( Guid tracker, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<TrackEntity> GetTrackCollectionByTrackerFromTimestamp( Guid tracker, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<TrackEntity> GetTrackCollectionByTrackerUntilTimestamp( Guid tracker, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<TrackEntity> GetTrackCollectionByTrackerOverTimestamp( Guid tracker, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

        public List<TrackEntity> GetTrackCollectionByTrackNumber( long trackNumber )
        {
            throw new NotImplementedException();
        }

        public List<TrackEntity> GetTrackCollectionFromTrackNumber( long trackNumber )
        {
            throw new NotImplementedException();
        }

        public List<TrackEntity> GetTrackCollectionUntilTrackNumber( long trackNumber )
        {
            throw new NotImplementedException();
        }

        public List<TrackEntity> GetTrackCollectionOverTrackNumber( long fromTrackNumber, long untilTrackNumber )
        {
            throw new NotImplementedException();
        }

        public List<TrackEntity> GetTrackCollectionByTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<TrackEntity> GetTrackCollectionAtTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<TrackEntity> GetTrackCollectionFromTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<TrackEntity> GetTrackCollectionUntilTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<TrackEntity> GetTrackCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

        public IList<Track3DEntity> GetTrack3DCollection( )
        {
            throw new NotImplementedException();
        }

        public List<Track3DEntity> GetTrack3DCollectionByTracker( Guid tracker )
        {
            throw new NotImplementedException();
        }

        public List<Track3DEntity> GetTrack3DCollectionByTrackerAndTrackNumber( Guid tracker, long trackNumber )
        {
            throw new NotImplementedException();
        }

        public List<Track3DEntity> GetTrack3DCollectionByTrackerFromTrackNumber( Guid tracker, long trackNumber )
        {
            throw new NotImplementedException();
        }

        public List<Track3DEntity> GetTrack3DCollectionByTrackerUntilTrackNumber( Guid tracker, long trackNumber )
        {
            throw new NotImplementedException();
        }

        public List<Track3DEntity> GetTrack3DCollectionByTrackerOverTrackNumber( Guid tracker, long fromTrackNumber, long untilTrackNumber )
        {
            throw new NotImplementedException();
        }

        public Track3DEntity? GetTrack3DByTrackerTrackNumberAndTimestamp( Guid tracker, long trackNumber, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public Track3DEntity? GetTrack3DByTrackerTrackNumberAtTimestamp( Guid tracker, long trackNumber, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<Track3DEntity> GetTrack3DByTrackerTrackNumberFromTimestamp( Guid tracker, long trackNumber, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<Track3DEntity> GetTrack3DByTrackerTrackNumberUntilTimestamp( Guid tracker, long trackNumber, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<Track3DEntity> GetTrack3DByTrackerTrackNumberOverTimestamp( Guid tracker, long trackNumber, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

        public List<Track3DEntity> GetTrack3DCollectionByTrackerAndTimestamp( Guid tracker, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<Track3DEntity> GetTrack3DCollectionByTrackerAtTimestamp( Guid tracker, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<Track3DEntity> GetTrack3DCollectionByTrackerFromTimestamp( Guid tracker, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<Track3DEntity> GetTrack3DCollectionByTrackerUntilTimestamp( Guid tracker, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<Track3DEntity> GetTrack3DCollectionByTrackerOverTimestamp( Guid tracker, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

        public List<Track3DEntity> GetTrack3DCollectionByTrackNumber( long trackNumber )
        {
            throw new NotImplementedException();
        }

        public List<Track3DEntity> GetTrack3DCollectionFromTrackNumber( long trackNumber )
        {
            throw new NotImplementedException();
        }

        public List<Track3DEntity> GetTrack3DCollectionUntilTrackNumber( long trackNumber )
        {
            throw new NotImplementedException();
        }

        public List<Track3DEntity> GetTrack3DCollectionOverTrackNumber( long fromTrackNumber, long untilTrackNumber )
        {
            throw new NotImplementedException();
        }

        public List<Track3DEntity> GetTrack3DCollectionByTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<Track3DEntity> GetTrack3DCollectionAtTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<Track3DEntity> GetTrack3DCollectionFromTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<Track3DEntity> GetTrack3DCollectionUntilTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<Track3DEntity> GetTrack3DCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

        public IList<TrackerFilterParametersEntity> GetTrackerFilterParametersCollection( )
        {
            throw new NotImplementedException();
        }

        public List<TrackerFilterParametersEntity> GetTrackerFilterParametersCollectionByTracker( Guid tracker )
        {
            throw new NotImplementedException();
        }

        public TrackerFilterParametersEntity? GetTrackerFilterParametersByTrackerAndName( Guid tracker, string name )
        {
            throw new NotImplementedException();
        }

        public IList<TrackerFilterParametersConfigurationEntity> GetTrackerFilterParametersConfigurationCollection( )
        {
            throw new NotImplementedException();
        }

        public List<TrackerFilterParametersConfigurationEntity> GetTrackerFilterParametersConfigurationCollectionByParameters( Guid parameters )
        {
            throw new NotImplementedException();
        }

        public TrackerFilterParametersConfigurationEntity? GetTrackerFilterParametersConfigurationByParametersAndTimestamp( Guid parameters, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public TrackerFilterParametersConfigurationEntity? GetTrackerFilterParametersConfigurationByParametersAtTimestamp( Guid parameters, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<TrackerFilterParametersConfigurationEntity> GetTrackerFilterParametersConfigurationByParametersFromTimestamp( Guid parameters, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<TrackerFilterParametersConfigurationEntity> GetTrackerFilterParametersConfigurationByParametersUntilTimestamp( Guid parameters, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<TrackerFilterParametersConfigurationEntity> GetTrackerFilterParametersConfigurationByParametersOverTimestamp( Guid parameters, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

        public List<TrackerFilterParametersConfigurationEntity> GetTrackerFilterParametersConfigurationCollectionByTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<TrackerFilterParametersConfigurationEntity> GetTrackerFilterParametersConfigurationCollectionAtTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<TrackerFilterParametersConfigurationEntity> GetTrackerFilterParametersConfigurationCollectionFromTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<TrackerFilterParametersConfigurationEntity> GetTrackerFilterParametersConfigurationCollectionUntilTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<TrackerFilterParametersConfigurationEntity> GetTrackerFilterParametersConfigurationCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

        public IList<TrackInfoEntity> GetTrackInfoCollection( )
        {
            throw new NotImplementedException();
        }

        public IList<TrackingServiceOptionsEntity> GetTrackingServiceOptionsCollection( )
        {
            throw new NotImplementedException();
        }

        public TrackingServiceOptionsEntity? GetTrackingServiceOptionsByTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public TrackingServiceOptionsEntity? GetTrackingServiceOptionsAtTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<TrackingServiceOptionsEntity> GetTrackingServiceOptionsFromTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<TrackingServiceOptionsEntity> GetTrackingServiceOptionsUntilTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<TrackingServiceOptionsEntity> GetTrackingServiceOptionsOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

        public IList<TrackLinkEntity> GetTrackLinkCollection( )
        {
            throw new NotImplementedException();
        }

        public List<TrackLinkEntity> GetTrackLinkCollectionByPrimary( Guid primary )
        {
            throw new NotImplementedException();
        }

        public List<TrackLinkEntity> GetTrackLinkCollectionByPrimaryAndStart( Guid primary, DateTime start )
        {
            throw new NotImplementedException();
        }

        public List<TrackLinkEntity> GetTrackLinkCollectionByPrimaryAtStart( Guid primary, DateTime start )
        {
            throw new NotImplementedException();
        }

        public List<TrackLinkEntity> GetTrackLinkCollectionByPrimaryFromStart( Guid primary, DateTime start )
        {
            throw new NotImplementedException();
        }

        public List<TrackLinkEntity> GetTrackLinkCollectionByPrimaryUntilStart( Guid primary, DateTime start )
        {
            throw new NotImplementedException();
        }

        public List<TrackLinkEntity> GetTrackLinkCollectionByPrimaryOverStart( Guid primary, DateTime fromStart, DateTime untilStart )
        {
            throw new NotImplementedException();
        }

        public List<TrackLinkEntity> GetTrackLinkCollectionBySecondary( Guid secondary )
        {
            throw new NotImplementedException();
        }

        public List<TrackLinkEntity> GetTrackLinkCollectionBySecondaryAndStart( Guid secondary, DateTime start )
        {
            throw new NotImplementedException();
        }

        public List<TrackLinkEntity> GetTrackLinkCollectionBySecondaryAtStart( Guid secondary, DateTime start )
        {
            throw new NotImplementedException();
        }

        public List<TrackLinkEntity> GetTrackLinkCollectionBySecondaryFromStart( Guid secondary, DateTime start )
        {
            throw new NotImplementedException();
        }

        public List<TrackLinkEntity> GetTrackLinkCollectionBySecondaryUntilStart( Guid secondary, DateTime start )
        {
            throw new NotImplementedException();
        }

        public List<TrackLinkEntity> GetTrackLinkCollectionBySecondaryOverStart( Guid secondary, DateTime fromStart, DateTime untilStart )
        {
            throw new NotImplementedException();
        }

        public List<TrackLinkEntity> GetTrackLinkCollectionByStart( DateTime start )
        {
            throw new NotImplementedException();
        }

        public List<TrackLinkEntity> GetTrackLinkCollectionAtStart( DateTime start )
        {
            throw new NotImplementedException();
        }

        public List<TrackLinkEntity> GetTrackLinkCollectionFromStart( DateTime start )
        {
            throw new NotImplementedException();
        }

        public List<TrackLinkEntity> GetTrackLinkCollectionUntilStart( DateTime start )
        {
            throw new NotImplementedException();
        }

        public List<TrackLinkEntity> GetTrackLinkCollectionOverStart( DateTime fromStart, DateTime untilStart )
        {
            throw new NotImplementedException();
        }

        public IList<TrackValueEntity> GetTrackValueCollection( )
        {
            throw new NotImplementedException();
        }

        public List<TrackValueEntity> GetTrackValueCollectionByTrack( Guid track )
        {
            throw new NotImplementedException();
        }

        public TrackValueEntity? GetTrackValueByTrackAndTimestamp( Guid track, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public TrackValueEntity? GetTrackValueByTrackAtTimestamp( Guid track, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<TrackValueEntity> GetTrackValueByTrackFromTimestamp( Guid track, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<TrackValueEntity> GetTrackValueByTrackUntilTimestamp( Guid track, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<TrackValueEntity> GetTrackValueByTrackOverTimestamp( Guid track, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

        public List<TrackValueEntity> GetTrackValueCollectionByTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<TrackValueEntity> GetTrackValueCollectionAtTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<TrackValueEntity> GetTrackValueCollectionFromTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<TrackValueEntity> GetTrackValueCollectionUntilTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<TrackValueEntity> GetTrackValueCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

        public IList<TrackValue3DEntity> GetTrackValue3DCollection( )
        {
            throw new NotImplementedException();
        }

        public List<TrackValue3DEntity> GetTrackValue3DCollectionByTrack( Guid track )
        {
            throw new NotImplementedException();
        }

        public TrackValue3DEntity? GetTrackValue3DByTrackAndTimestamp( Guid track, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public TrackValue3DEntity? GetTrackValue3DByTrackAtTimestamp( Guid track, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<TrackValue3DEntity> GetTrackValue3DByTrackFromTimestamp( Guid track, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<TrackValue3DEntity> GetTrackValue3DByTrackUntilTimestamp( Guid track, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<TrackValue3DEntity> GetTrackValue3DByTrackOverTimestamp( Guid track, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

        public List<TrackValue3DEntity> GetTrackValue3DCollectionByTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<TrackValue3DEntity> GetTrackValue3DCollectionAtTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<TrackValue3DEntity> GetTrackValue3DCollectionFromTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<TrackValue3DEntity> GetTrackValue3DCollectionUntilTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<TrackValue3DEntity> GetTrackValue3DCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

        public IList<UInt16TimeseriesValueEntity> GetUInt16TimeseriesValueCollection( )
        {
            throw new NotImplementedException();
        }

        public List<UInt16TimeseriesValueEntity> GetUInt16TimeseriesValueCollectionByTimeseries( Guid timeseries )
        {
            throw new NotImplementedException();
        }

        public UInt16TimeseriesValueEntity? GetUInt16TimeseriesValueByTimeseriesAndTimestamp( Guid timeseries, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public UInt16TimeseriesValueEntity? GetUInt16TimeseriesValueByTimeseriesAtTimestamp( Guid timeseries, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<UInt16TimeseriesValueEntity> GetUInt16TimeseriesValueByTimeseriesFromTimestamp( Guid timeseries, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<UInt16TimeseriesValueEntity> GetUInt16TimeseriesValueByTimeseriesUntilTimestamp( Guid timeseries, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<UInt16TimeseriesValueEntity> GetUInt16TimeseriesValueByTimeseriesOverTimestamp( Guid timeseries, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

        public List<UInt16TimeseriesValueEntity> GetUInt16TimeseriesValueCollectionByTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<UInt16TimeseriesValueEntity> GetUInt16TimeseriesValueCollectionAtTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<UInt16TimeseriesValueEntity> GetUInt16TimeseriesValueCollectionFromTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<UInt16TimeseriesValueEntity> GetUInt16TimeseriesValueCollectionUntilTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<UInt16TimeseriesValueEntity> GetUInt16TimeseriesValueCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

        public IList<UInt32TimeseriesValueEntity> GetUInt32TimeseriesValueCollection( )
        {
            throw new NotImplementedException();
        }

        public List<UInt32TimeseriesValueEntity> GetUInt32TimeseriesValueCollectionByTimeseries( Guid timeseries )
        {
            throw new NotImplementedException();
        }

        public UInt32TimeseriesValueEntity? GetUInt32TimeseriesValueByTimeseriesAndTimestamp( Guid timeseries, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public UInt32TimeseriesValueEntity? GetUInt32TimeseriesValueByTimeseriesAtTimestamp( Guid timeseries, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<UInt32TimeseriesValueEntity> GetUInt32TimeseriesValueByTimeseriesFromTimestamp( Guid timeseries, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<UInt32TimeseriesValueEntity> GetUInt32TimeseriesValueByTimeseriesUntilTimestamp( Guid timeseries, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<UInt32TimeseriesValueEntity> GetUInt32TimeseriesValueByTimeseriesOverTimestamp( Guid timeseries, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

        public List<UInt32TimeseriesValueEntity> GetUInt32TimeseriesValueCollectionByTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<UInt32TimeseriesValueEntity> GetUInt32TimeseriesValueCollectionAtTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<UInt32TimeseriesValueEntity> GetUInt32TimeseriesValueCollectionFromTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<UInt32TimeseriesValueEntity> GetUInt32TimeseriesValueCollectionUntilTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<UInt32TimeseriesValueEntity> GetUInt32TimeseriesValueCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

        public IList<UInt64TimeseriesValueEntity> GetUInt64TimeseriesValueCollection( )
        {
            throw new NotImplementedException();
        }

        public List<UInt64TimeseriesValueEntity> GetUInt64TimeseriesValueCollectionByTimeseries( Guid timeseries )
        {
            throw new NotImplementedException();
        }

        public UInt64TimeseriesValueEntity? GetUInt64TimeseriesValueByTimeseriesAndTimestamp( Guid timeseries, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public UInt64TimeseriesValueEntity? GetUInt64TimeseriesValueByTimeseriesAtTimestamp( Guid timeseries, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<UInt64TimeseriesValueEntity> GetUInt64TimeseriesValueByTimeseriesFromTimestamp( Guid timeseries, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<UInt64TimeseriesValueEntity> GetUInt64TimeseriesValueByTimeseriesUntilTimestamp( Guid timeseries, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<UInt64TimeseriesValueEntity> GetUInt64TimeseriesValueByTimeseriesOverTimestamp( Guid timeseries, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

        public List<UInt64TimeseriesValueEntity> GetUInt64TimeseriesValueCollectionByTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<UInt64TimeseriesValueEntity> GetUInt64TimeseriesValueCollectionAtTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<UInt64TimeseriesValueEntity> GetUInt64TimeseriesValueCollectionFromTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<UInt64TimeseriesValueEntity> GetUInt64TimeseriesValueCollectionUntilTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<UInt64TimeseriesValueEntity> GetUInt64TimeseriesValueCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

        public IList<VehicleTypeEntity> GetVehicleTypeCollection( )
        {
            throw new NotImplementedException();
        }

        public VehicleTypeEntity? GetVehicleTypeByName( string name )
        {
            throw new NotImplementedException();
        }

        public IList<VesselTypeEntity> GetVesselTypeCollection( )
        {
            throw new NotImplementedException();
        }

        public VesselTypeEntity? GetVesselTypeByName( string name )
        {
            throw new NotImplementedException();
        }

        public VesselTypeEntity? GetVesselTypeByCode( int code )
        {
            throw new NotImplementedException();
        }

        public List<VesselTypeEntity> GetVesselTypeFromCode( int code )
        {
            throw new NotImplementedException();
        }

        public List<VesselTypeEntity> GetVesselTypeUntilCode( int code )
        {
            throw new NotImplementedException();
        }

        public List<VesselTypeEntity> GetVesselTypeOverCode( int fromCode, int untilCode )
        {
            throw new NotImplementedException();
        }

        public IList<ViewEntity> GetViewCollection( )
        {
            throw new NotImplementedException();
        }

        public ViewEntity? GetViewByName( string name )
        {
            throw new NotImplementedException();
        }

        public IList<ViewCameraLinkEntity> GetViewCameraLinkCollection( )
        {
            throw new NotImplementedException();
        }

        public List<ViewCameraLinkEntity> GetViewCameraLinkCollectionByView( Guid view )
        {
            throw new NotImplementedException();
        }

        public ViewCameraLinkEntity? GetViewCameraLinkByViewAndStart( Guid view, DateTime start )
        {
            throw new NotImplementedException();
        }

        public ViewCameraLinkEntity? GetViewCameraLinkByViewAtStart( Guid view, DateTime start )
        {
            throw new NotImplementedException();
        }

        public List<ViewCameraLinkEntity> GetViewCameraLinkByViewFromStart( Guid view, DateTime start )
        {
            throw new NotImplementedException();
        }

        public List<ViewCameraLinkEntity> GetViewCameraLinkByViewUntilStart( Guid view, DateTime start )
        {
            throw new NotImplementedException();
        }

        public List<ViewCameraLinkEntity> GetViewCameraLinkByViewOverStart( Guid view, DateTime fromStart, DateTime untilStart )
        {
            throw new NotImplementedException();
        }

        public List<ViewCameraLinkEntity> GetViewCameraLinkCollectionByCamera( Guid camera )
        {
            throw new NotImplementedException();
        }

        public ViewCameraLinkEntity? GetViewCameraLinkByCameraAndStart( Guid camera, DateTime start )
        {
            throw new NotImplementedException();
        }

        public ViewCameraLinkEntity? GetViewCameraLinkByCameraAtStart( Guid camera, DateTime start )
        {
            throw new NotImplementedException();
        }

        public List<ViewCameraLinkEntity> GetViewCameraLinkByCameraFromStart( Guid camera, DateTime start )
        {
            throw new NotImplementedException();
        }

        public List<ViewCameraLinkEntity> GetViewCameraLinkByCameraUntilStart( Guid camera, DateTime start )
        {
            throw new NotImplementedException();
        }

        public List<ViewCameraLinkEntity> GetViewCameraLinkByCameraOverStart( Guid camera, DateTime fromStart, DateTime untilStart )
        {
            throw new NotImplementedException();
        }

        public List<ViewCameraLinkEntity> GetViewCameraLinkCollectionByStart( DateTime start )
        {
            throw new NotImplementedException();
        }

        public List<ViewCameraLinkEntity> GetViewCameraLinkCollectionAtStart( DateTime start )
        {
            throw new NotImplementedException();
        }

        public List<ViewCameraLinkEntity> GetViewCameraLinkCollectionFromStart( DateTime start )
        {
            throw new NotImplementedException();
        }

        public List<ViewCameraLinkEntity> GetViewCameraLinkCollectionUntilStart( DateTime start )
        {
            throw new NotImplementedException();
        }

        public List<ViewCameraLinkEntity> GetViewCameraLinkCollectionOverStart( DateTime fromStart, DateTime untilStart )
        {
            throw new NotImplementedException();
        }

        public IList<ViewTrackerLinkEntity> GetViewTrackerLinkCollection( )
        {
            throw new NotImplementedException();
        }

        public List<ViewTrackerLinkEntity> GetViewTrackerLinkCollectionByView( Guid view )
        {
            throw new NotImplementedException();
        }

        public ViewTrackerLinkEntity? GetViewTrackerLinkByViewAndStart( Guid view, DateTime start )
        {
            throw new NotImplementedException();
        }

        public ViewTrackerLinkEntity? GetViewTrackerLinkByViewAtStart( Guid view, DateTime start )
        {
            throw new NotImplementedException();
        }

        public List<ViewTrackerLinkEntity> GetViewTrackerLinkByViewFromStart( Guid view, DateTime start )
        {
            throw new NotImplementedException();
        }

        public List<ViewTrackerLinkEntity> GetViewTrackerLinkByViewUntilStart( Guid view, DateTime start )
        {
            throw new NotImplementedException();
        }

        public List<ViewTrackerLinkEntity> GetViewTrackerLinkByViewOverStart( Guid view, DateTime fromStart, DateTime untilStart )
        {
            throw new NotImplementedException();
        }

        public List<ViewTrackerLinkEntity> GetViewTrackerLinkCollectionByTracker( Guid tracker )
        {
            throw new NotImplementedException();
        }

        public ViewTrackerLinkEntity? GetViewTrackerLinkByTrackerAndStart( Guid tracker, DateTime start )
        {
            throw new NotImplementedException();
        }

        public ViewTrackerLinkEntity? GetViewTrackerLinkByTrackerAtStart( Guid tracker, DateTime start )
        {
            throw new NotImplementedException();
        }

        public List<ViewTrackerLinkEntity> GetViewTrackerLinkByTrackerFromStart( Guid tracker, DateTime start )
        {
            throw new NotImplementedException();
        }

        public List<ViewTrackerLinkEntity> GetViewTrackerLinkByTrackerUntilStart( Guid tracker, DateTime start )
        {
            throw new NotImplementedException();
        }

        public List<ViewTrackerLinkEntity> GetViewTrackerLinkByTrackerOverStart( Guid tracker, DateTime fromStart, DateTime untilStart )
        {
            throw new NotImplementedException();
        }

        public List<ViewTrackerLinkEntity> GetViewTrackerLinkCollectionByStart( DateTime start )
        {
            throw new NotImplementedException();
        }

        public List<ViewTrackerLinkEntity> GetViewTrackerLinkCollectionAtStart( DateTime start )
        {
            throw new NotImplementedException();
        }

        public List<ViewTrackerLinkEntity> GetViewTrackerLinkCollectionFromStart( DateTime start )
        {
            throw new NotImplementedException();
        }

        public List<ViewTrackerLinkEntity> GetViewTrackerLinkCollectionUntilStart( DateTime start )
        {
            throw new NotImplementedException();
        }

        public List<ViewTrackerLinkEntity> GetViewTrackerLinkCollectionOverStart( DateTime fromStart, DateTime untilStart )
        {
            throw new NotImplementedException();
        }

        public IList<WeatherStationCommandEntity> GetWeatherStationCommandCollection( )
        {
            throw new NotImplementedException();
        }

        public List<WeatherStationCommandEntity> GetWeatherStationCommandCollectionByWeatherStation( Guid weatherStation )
        {
            throw new NotImplementedException();
        }

        public List<WeatherStationCommandEntity> GetWeatherStationCommandCollectionByWeatherStationAndTimestamp( Guid weatherStation, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<WeatherStationCommandEntity> GetWeatherStationCommandCollectionByWeatherStationAtTimestamp( Guid weatherStation, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<WeatherStationCommandEntity> GetWeatherStationCommandCollectionByWeatherStationFromTimestamp( Guid weatherStation, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<WeatherStationCommandEntity> GetWeatherStationCommandCollectionByWeatherStationUntilTimestamp( Guid weatherStation, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<WeatherStationCommandEntity> GetWeatherStationCommandCollectionByWeatherStationOverTimestamp( Guid weatherStation, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

        public List<WeatherStationCommandEntity> GetWeatherStationCommandCollectionByTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<WeatherStationCommandEntity> GetWeatherStationCommandCollectionAtTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<WeatherStationCommandEntity> GetWeatherStationCommandCollectionFromTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<WeatherStationCommandEntity> GetWeatherStationCommandCollectionUntilTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<WeatherStationCommandEntity> GetWeatherStationCommandCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

        public List<WeatherStationCommandEntity> GetWeatherStationCommandCollectionByReply( Guid? reply )
        {
            throw new NotImplementedException();
        }

        public IList<WeatherStationCommandReplyEntity> GetWeatherStationCommandReplyCollection( )
        {
            throw new NotImplementedException();
        }

        public List<WeatherStationCommandReplyEntity> GetWeatherStationCommandReplyCollectionByWeatherStation( Guid weatherStation )
        {
            throw new NotImplementedException();
        }

        public List<WeatherStationCommandReplyEntity> GetWeatherStationCommandReplyCollectionByWeatherStationAndTimestamp( Guid weatherStation, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<WeatherStationCommandReplyEntity> GetWeatherStationCommandReplyCollectionByWeatherStationAtTimestamp( Guid weatherStation, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<WeatherStationCommandReplyEntity> GetWeatherStationCommandReplyCollectionByWeatherStationFromTimestamp( Guid weatherStation, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<WeatherStationCommandReplyEntity> GetWeatherStationCommandReplyCollectionByWeatherStationUntilTimestamp( Guid weatherStation, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<WeatherStationCommandReplyEntity> GetWeatherStationCommandReplyCollectionByWeatherStationOverTimestamp( Guid weatherStation, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

        public List<WeatherStationCommandReplyEntity> GetWeatherStationCommandReplyCollectionByTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<WeatherStationCommandReplyEntity> GetWeatherStationCommandReplyCollectionAtTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<WeatherStationCommandReplyEntity> GetWeatherStationCommandReplyCollectionFromTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<WeatherStationCommandReplyEntity> GetWeatherStationCommandReplyCollectionUntilTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<WeatherStationCommandReplyEntity> GetWeatherStationCommandReplyCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

        public WeatherStationCommandReplyEntity? GetWeatherStationCommandReplyByCommand( Guid? command )
        {
            throw new NotImplementedException();
        }

        public IList<WeatherStationConfigurationEntity> GetWeatherStationConfigurationCollection( )
        {
            throw new NotImplementedException();
        }

        public List<WeatherStationConfigurationEntity> GetWeatherStationConfigurationCollectionByWeatherStation( Guid weatherStation )
        {
            throw new NotImplementedException();
        }

        public WeatherStationConfigurationEntity? GetWeatherStationConfigurationByWeatherStationAndTimestamp( Guid weatherStation, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public WeatherStationConfigurationEntity? GetWeatherStationConfigurationByWeatherStationAtTimestamp( Guid weatherStation, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<WeatherStationConfigurationEntity> GetWeatherStationConfigurationByWeatherStationFromTimestamp( Guid weatherStation, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<WeatherStationConfigurationEntity> GetWeatherStationConfigurationByWeatherStationUntilTimestamp( Guid weatherStation, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<WeatherStationConfigurationEntity> GetWeatherStationConfigurationByWeatherStationOverTimestamp( Guid weatherStation, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

        public List<WeatherStationConfigurationEntity> GetWeatherStationConfigurationCollectionByTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<WeatherStationConfigurationEntity> GetWeatherStationConfigurationCollectionAtTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<WeatherStationConfigurationEntity> GetWeatherStationConfigurationCollectionFromTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<WeatherStationConfigurationEntity> GetWeatherStationConfigurationCollectionUntilTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<WeatherStationConfigurationEntity> GetWeatherStationConfigurationCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

        public IList<ZoneEntity> GetZoneCollection( )
        {
            throw new NotImplementedException();
        }

        public ZoneEntity? GetZoneByName( string name )
        {
            throw new NotImplementedException();
        }

        public IList<CircularZoneEntity> GetCircularZoneCollection( )
        {
            throw new NotImplementedException();
        }

        public CircularZoneEntity? GetCircularZoneByName( string name )
        {
            throw new NotImplementedException();
        }

        public IList<PolygonZoneEntity> GetPolygonZoneCollection( )
        {
            throw new NotImplementedException();
        }

        public PolygonZoneEntity? GetPolygonZoneByName( string name )
        {
            throw new NotImplementedException();
        }

        public IList<ZoneExceptionsEntity> GetZoneExceptionsCollection( )
        {
            throw new NotImplementedException();
        }

        public List<ZoneExceptionsEntity> GetZoneExceptionsCollectionByZone( Guid zone )
        {
            throw new NotImplementedException();
        }

        public ZoneExceptionsEntity? GetZoneExceptionsByZoneAndTimestamp( Guid zone, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public ZoneExceptionsEntity? GetZoneExceptionsByZoneAtTimestamp( Guid zone, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<ZoneExceptionsEntity> GetZoneExceptionsByZoneFromTimestamp( Guid zone, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<ZoneExceptionsEntity> GetZoneExceptionsByZoneUntilTimestamp( Guid zone, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<ZoneExceptionsEntity> GetZoneExceptionsByZoneOverTimestamp( Guid zone, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

        public List<ZoneExceptionsEntity> GetZoneExceptionsCollectionByTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<ZoneExceptionsEntity> GetZoneExceptionsCollectionAtTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<ZoneExceptionsEntity> GetZoneExceptionsCollectionFromTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<ZoneExceptionsEntity> GetZoneExceptionsCollectionUntilTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<ZoneExceptionsEntity> GetZoneExceptionsCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

        public IList<ZoneExceptionsVesselLinkEntity> GetZoneExceptionsVesselLinkCollection( )
        {
            throw new NotImplementedException();
        }

        public List<ZoneExceptionsVesselLinkEntity> GetZoneExceptionsVesselLinkCollectionByZoneExceptions( Guid zoneExceptions )
        {
            throw new NotImplementedException();
        }

        public ZoneExceptionsVesselLinkEntity? GetZoneExceptionsVesselLinkByZoneExceptionsAndVessel( Guid zoneExceptions, Guid vessel )
        {
            throw new NotImplementedException();
        }

        public List<ZoneExceptionsVesselLinkEntity> GetZoneExceptionsVesselLinkCollectionByVessel( Guid vessel )
        {
            throw new NotImplementedException();
        }

        public IList<ZoneTrackAlarmEntity> GetZoneTrackAlarmCollection( )
        {
            throw new NotImplementedException();
        }

        public List<ZoneTrackAlarmEntity> GetZoneTrackAlarmCollectionByTrack( Guid track )
        {
            throw new NotImplementedException();
        }

        public ZoneTrackAlarmEntity? GetZoneTrackAlarmByTrackAndTimestamp( Guid track, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public ZoneTrackAlarmEntity? GetZoneTrackAlarmByTrackAtTimestamp( Guid track, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<ZoneTrackAlarmEntity> GetZoneTrackAlarmByTrackFromTimestamp( Guid track, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<ZoneTrackAlarmEntity> GetZoneTrackAlarmByTrackUntilTimestamp( Guid track, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<ZoneTrackAlarmEntity> GetZoneTrackAlarmByTrackOverTimestamp( Guid track, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

        public List<ZoneTrackAlarmEntity> GetZoneTrackAlarmCollectionByZone( Guid zone )
        {
            throw new NotImplementedException();
        }

        public List<ZoneTrackAlarmEntity> GetZoneTrackAlarmCollectionByZoneAndTrack( Guid zone, Guid track )
        {
            throw new NotImplementedException();
        }

        public ZoneTrackAlarmEntity? GetZoneTrackAlarmByZoneTrackAndTimestamp( Guid zone, Guid track, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public ZoneTrackAlarmEntity? GetZoneTrackAlarmByZoneTrackAtTimestamp( Guid zone, Guid track, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<ZoneTrackAlarmEntity> GetZoneTrackAlarmByZoneTrackFromTimestamp( Guid zone, Guid track, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<ZoneTrackAlarmEntity> GetZoneTrackAlarmByZoneTrackUntilTimestamp( Guid zone, Guid track, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<ZoneTrackAlarmEntity> GetZoneTrackAlarmByZoneTrackOverTimestamp( Guid zone, Guid track, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

        public List<ZoneTrackAlarmEntity> GetZoneTrackAlarmCollectionByTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<ZoneTrackAlarmEntity> GetZoneTrackAlarmCollectionAtTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<ZoneTrackAlarmEntity> GetZoneTrackAlarmCollectionFromTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<ZoneTrackAlarmEntity> GetZoneTrackAlarmCollectionUntilTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<ZoneTrackAlarmEntity> GetZoneTrackAlarmCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

    }

}
